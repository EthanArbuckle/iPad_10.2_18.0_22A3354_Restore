size_t gnssOsa_readNv(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  size_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p;
  _BYTE *v18;
  char __str[966];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 68, "gnssOsa_readNv");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (a2 && gp_NvStorage)
  {
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)gp_NvStorage + 64))(&__p, gp_NvStorage, a1);
    v7 = __p;
    v8 = v18;
    if (v18 - (_BYTE *)__p >= a3)
      v9 = a3;
    else
      v9 = v18 - (_BYTE *)__p;
    memcpy(a2, __p, v9);
    v10 = g_LbsOsaTrace_Config;
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NvID,%d,BytesRead,%zu,BytesReq,%zu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "OSA", 68, "gnssOsa_readNv", a1, v18 - (_BYTE *)__p, a3);
      gnssOsa_PrintLog(__str, 5, 1, 0);
      v7 = __p;
      v8 = v18;
      v10 = g_LbsOsaTrace_Config;
    }
    if (v7 == v8)
    {
      if (v10 < 2)
      {
LABEL_15:
        if (__p)
        {
          v18 = __p;
          operator delete(__p);
        }
        return v9;
      }
      bzero(__str, 0x3C6uLL);
      v12 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx No NV data,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "OSA", 87, "gnssOsa_readNv", 769, a1);
      gnssOsa_PrintLog(__str, 2, 1, 0);
      v10 = g_LbsOsaTrace_Config;
    }
    if (v10 >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v13 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "OSA", 68, "gnssOsa_readNv");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    goto LABEL_15;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v14 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "OSA", 69, "gnssOsa_readNv", 770);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v15 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "OSA", 68, "gnssOsa_readNv");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  return 0;
}

void sub_24BAAA9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t gnssOsa_storeBufferToNv(uint64_t a1, const void *a2, size_t __sz)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char __str[8];
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 68, "gnssOsa_storeBufferToNv");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (a2 && gp_NvStorage)
  {
    *(_QWORD *)__str = 0;
    v12 = 0;
    v13 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(__str, a2, (uint64_t)a2 + __sz, __sz);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)gp_NvStorage + 32))(gp_NvStorage, a1, __str);
    if (*(_QWORD *)__str)
    {
      v12 = *(void **)__str;
      operator delete(*(void **)__str);
    }
  }
  else
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: invalid Argument\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 69, "gnssOsa_storeBufferToNv");
      gnssOsa_PrintLog(__str, 1, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        v9 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 68, "gnssOsa_storeBufferToNv");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
    return 0;
  }
  return v7;
}

void sub_24BAAAC28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t gnssOsa_getNvSize(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p;
  _BYTE *v12;
  char __str[966];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "OSA", 68, "gnssOsa_getNvSize");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!a2)
  {
    if (!g_LbsOsaTrace_Config)
      return 0;
    bzero(__str, 0x3C6uLL);
    v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NvSize\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 69, "gnssOsa_getNvSize", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    if (g_LbsOsaTrace_Config < 5)
      return 0;
LABEL_16:
    bzero(__str, 0x3C6uLL);
    v10 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "OSA", 68, "gnssOsa_getNvSize");
    gnssOsa_PrintLog(__str, 5, 1, 0);
    return 0;
  }
  if (!gp_NvStorage)
  {
    if (!g_LbsOsaTrace_Config)
      return 0;
    bzero(__str, 0x3C6uLL);
    v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NvStorage\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 69, "gnssOsa_getNvSize", 770);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    if (g_LbsOsaTrace_Config < 5)
      return 0;
    goto LABEL_16;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)gp_NvStorage + 64))(&__p, gp_NvStorage, a1);
  *a2 = v12 - (_BYTE *)__p;
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NvSize,%zu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "OSA", 68, "gnssOsa_getNvSize", *a2);
    gnssOsa_PrintLog(__str, 5, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 68, "gnssOsa_getNvSize");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_24BAAB004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t gnssOsa_clearNV(uint64_t a1)
{
  uint64_t v2;
  char __str[966];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NvID,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 73, "gnssOsa_clearNV", a1);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)gp_NvStorage + 80))(gp_NvStorage, a1);
}

void gnssOsa_flushNv(void)
{
  uint64_t v0;
  uint64_t v1;
  char __str[966];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "OSA", 68, "gnssOsa_flushNv");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)gp_NvStorage + 56))(gp_NvStorage);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v1 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "OSA", 68, "gnssOsa_flushNv");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24BAAB2E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<unsigned char>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_251CDAD18, MEMORY[0x24BEDAAF0]);
}

void sub_24BAAB3F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void NK_Set_Environ_Severity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v8;
  _OWORD *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned __int8 v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 v31;
  char v32;
  int v33;
  int v34;
  int v35;
  char v36;
  int v37;

  if (*(_BYTE *)(a2 + 45))
  {
    *(_DWORD *)(a2 + 60) = 1;
  }
  else
  {
    v8 = (_BYTE *)(a4 + 62332);
    v9 = (_OWORD *)(a3 + 14344);
    memmove((void *)(a3 + 14472), (const void *)(a3 + 14344), 0x380uLL);
    v10 = *(_QWORD *)(a3 + 15384);
    *(_OWORD *)(a3 + 15372) = *(_OWORD *)(a3 + 15368);
    v11 = *(_DWORD *)(a3 + 15392);
    *(_QWORD *)(a3 + 15388) = v10;
    *(_DWORD *)(a3 + 15396) = v11;
    v12 = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a3 + 15368) = v12;
    v9[6] = 0u;
    v9[7] = 0u;
    v9[4] = 0u;
    v9[5] = 0u;
    v9[2] = 0u;
    v9[3] = 0u;
    *v9 = 0u;
    v9[1] = 0u;
    v13 = 7;
    v14 = 8750;
    do
    {
      v15 = *(_DWORD *)(a3 + 4 * v13 + 15368);
      v14 -= 1000;
      v16 = v13-- != 0;
    }
    while (v16 && !v15);
    v17 = v15 + v14;
    if (v12 <= v17 && v12 + 750 >= v17 - 750)
    {
      v18 = v13 + 1;
    }
    else
    {
      bzero(v9, 0x420uLL);
      v18 = 0;
      *(_DWORD *)(a3 + 15368) = *(_DWORD *)(a4 + 4);
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = a3 + ((unint64_t)v18 << 7) + 14344;
    do
    {
      if (*(int *)(a1 + 4 * v19 + 1240) >= 10 && *(unsigned __int16 *)(a1 + 2 * v19 + 2392) >= 0x65u)
      {
        *((_BYTE *)v9 + v19) = *(_BYTE *)(a1 + v19 + 1752);
        v25 = *(unsigned __int8 *)(a1 + v19 + 1752);
        v21 += v25;
        ++v20;
        if (v18 < 1)
        {
          v33 = *(unsigned __int8 *)(a1 + v19 + 1752);
        }
        else
        {
          v26 = (unsigned __int8 *)v24;
          v27 = v18 + 1;
          v28 = *(_BYTE *)(a1 + v19 + 1752);
          do
          {
            v30 = *v26;
            v26 -= 128;
            v29 = v30;
            v31 = v28;
            if (v30 > v28)
              v31 = v29;
            v32 = v25;
            if (v29 < v25)
              v32 = v29;
            if (v29)
            {
              v21 += v29;
              ++v20;
              v28 = v31;
              LOBYTE(v25) = v32;
            }
            --v27;
          }
          while (v27 > 1);
          v33 = v28;
          v25 = v25;
        }
        v34 = v33 - v25;
        if ((*(_WORD *)(a1 + 2 * v19 + 984) & 0x300) == 0)
          v34 -= 2;
        if (v34 > v22)
          v22 = v34;
        if (v34 > v23)
        {
          v22 = v23;
          v23 = v34;
        }
      }
      ++v19;
      ++v24;
    }
    while (v19 != 128);
    if (v20 < 8)
    {
      v35 = 0;
    }
    else if (v22 + v23 > 8 || v21 / v20 <= *(unsigned __int8 *)(a3 + 3))
    {
      v35 = 7;
    }
    else
    {
      v35 = 1;
    }
    v36 = *(_BYTE *)(p_NA + 381);
    if (v36)
    {
      v37 = *(_DWORD *)(p_NA + 26780);
      switch(v37)
      {
        case 0:
          goto LABEL_43;
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          break;
        case 2:
          v37 = 4;
          break;
        default:
          v37 = 0;
          break;
      }
      *(_DWORD *)(a2 + 60) = v37;
      if (!v8[8])
      {
        *v8 = v36;
        v8[8] = v36;
      }
    }
    else
    {
LABEL_43:
      if (v20 >= 8)
        *(_DWORD *)(a2 + 60) = v35;
    }
  }
}

uint64_t GM_Conv_Lock_Units(uint64_t result, uint64_t a2, uint64_t a3)
{
  __int16 *v3;
  _WORD *v4;
  __int16 v5;
  __int16 v6;
  unsigned int v7;
  BOOL v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  __int16 v12;

  if ((_DWORD)result)
  {
    v3 = (__int16 *)(a3 + 38);
    v4 = (_WORD *)(a2 + 14);
    result = result;
    do
    {
      if ((unsigned __int16)*(v4 - 2) >= 0xFDF2u)
        v5 = 6500;
      else
        v5 = *(v4 - 2) / 0xAu;
      *(v4 - 2) = v5;
      if ((unsigned __int16)*(v4 - 1) >= 0xFDF2u)
        v6 = 6500;
      else
        v6 = *(v4 - 1) / 0xAu;
      *(v4 - 1) = v6;
      v7 = (unsigned __int16)*v4;
      v8 = v7 > 0xFDEC;
      v9 = (429496730 * (unint64_t)(v7 + 5)) >> 32;
      if (v8)
        LOWORD(v9) = 6500;
      *v4 = v9;
      v4 += 18;
      v10 = *v3;
      v11 = ((26215 * v10) >> 18) + ((26215 * v10) >> 31);
      if (v10 > 32009)
        LOWORD(v11) = 3200;
      if (v10 >= -32009)
        v12 = v11;
      else
        v12 = -3200;
      *v3 = v12;
      v3 += 28;
      --result;
    }
    while (result);
  }
  return result;
}

uint64_t ds_NK_Summary_FirstLine(uint64_t result)
{
  _BYTE *v1;
  char *v2;
  uint64_t v3;
  char v4;

  v1 = (_BYTE *)(*(_QWORD *)result)++;
  *v1 = 10;
  v2 = *(char **)result;
  if (*(_QWORD *)result >= *(_QWORD *)(result + 24))
    v2 = *(char **)(result + 16);
  v3 = 0;
  v4 = 78;
  do
  {
    *(_QWORD *)result = v2 + 1;
    *v2 = v4;
    v2 = *(char **)result;
    if (*(_QWORD *)result >= *(_QWORD *)(result + 24))
    {
      v2 = *(char **)(result + 16);
      *(_QWORD *)result = v2;
    }
    v4 = str_0[++v3];
  }
  while (v3 != 16);
  *(_QWORD *)result = v2 + 1;
  *v2 = 10;
  if (*(_QWORD *)result >= *(_QWORD *)(result + 24))
    *(_QWORD *)result = *(_QWORD *)(result + 16);
  return GNSS_Nav_Debug_Flush_Check(result);
}

uint64_t ds_NK_Summary(_QWORD *a1)
{
  char **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char *v8;
  char v9;
  uint64_t v10;
  char v11;
  unsigned __int8 *v12;
  int v13;
  char *v14;
  char *v15;
  char v16;
  unsigned __int8 *v17;
  int v18;
  char *v19;
  unsigned int i;
  char *v21;
  char *v22;
  char *v23;
  char v24;
  int v25;
  char *v26;
  char **v27;
  double *v28;
  uint64_t v29;
  _DWORD *v30;
  unsigned int *v31;
  uint64_t v32;
  char *v33;
  char v34;
  uint64_t v35;
  double v36;
  __int16 v37;
  double *v38;
  BOOL v39;
  double v40;
  double j;
  unsigned __int16 v42;
  char *v43;
  unsigned int v44;
  char *v45;
  char *v46;
  char *v47;
  char v48;
  int v49;
  char *v50;
  char *v51;
  unsigned int v52;
  unsigned int v53;
  char *v54;
  double v55;
  char *v56;
  char *v57;
  double v58;
  double v59;
  double v60;
  int v61;
  char *v62;
  char v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  char *v76;
  unint64_t v77;
  double v78;
  double k;
  uint64_t v80;
  char *v81;
  char v82;
  double v83;
  double v84;
  unsigned int v85;
  char v86;
  uint64_t v87;
  double v88;
  char *v89;
  unsigned int v90;
  unsigned int v91;
  char *v92;
  char *v93;
  char v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  unsigned int v98;
  char *v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  char *v104;
  char v105;
  char *v106;
  char **v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char v114;
  uint64_t v115;
  double v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  char *v122;
  unsigned int v123;
  uint64_t v124;
  char *v125;
  char v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  char v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char v136;
  uint64_t v137;
  _BYTE *v138;
  double v139;
  double v140;
  double v141;
  unsigned int v142;
  char *v143;
  char v144;
  uint64_t v145;
  _BYTE *v146;
  char *v147;
  unint64_t v148;
  char v149;
  char *v150;
  char *v151;
  unsigned int v152;
  const char *v153;
  char v154;
  unsigned __int8 *v155;
  int v156;
  char *v157;
  unsigned int v158;
  const char *v159;
  char v160;
  unsigned __int8 *v161;
  int v162;
  char *v163;
  unint64_t v164;
  char v165;
  char *v166;
  uint64_t v167;
  char v168;
  unint64_t v169;
  uint64_t v170;
  char *v171;
  char v172;
  char *v173;
  char v174;
  uint64_t v175;
  _BYTE *v176;
  _BYTE *v177;
  _BYTE *v178;
  char *v179;
  char v180;
  uint64_t v181;
  _BYTE *v182;
  _BYTE *v183;
  char *v184;
  char v185;
  uint64_t v186;
  _BYTE *v187;
  _BYTE *v188;
  char *v189;
  char v190;
  uint64_t v191;
  int v192;
  unsigned int v193;
  _BYTE *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  double *v199;
  char *v200;
  char v201;
  uint64_t v202;
  int v203;
  char v204;
  int v205;
  char v206;
  int v207;
  char v208;
  int v209;
  char v210;
  int v211;
  char v212;
  int v213;
  char v214;
  int v215;
  char v216;
  int v217;
  char v218;
  int v219;
  char v220;
  int v221;
  char v222;
  int v223;
  char v224;
  int v225;
  char v226;
  int v227;
  char v228;
  int v229;
  char v230;
  int v231;
  char v232;
  char v233;
  char *v234;
  unsigned __int8 *v235;
  int v236;
  char v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  unsigned __int8 *v241;
  int v242;
  double v243;
  double v244;
  double v245;
  double v246;
  unsigned int v247;
  char *v248;
  char v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  unsigned __int8 *v253;
  int v254;
  double v255;
  double v256;
  double v257;
  unsigned int v258;
  _BYTE *v259;
  int v260;
  unsigned int v261;
  double v262;
  double v263;
  double v264;
  unsigned int v265;
  _BYTE *v266;
  int v267;
  unsigned int v268;
  _BYTE *v269;
  _BYTE *v270;
  char *v271;
  char v272;
  uint64_t v273;
  double v274;
  double v275;
  double v276;
  unsigned int v277;
  _BYTE *v278;
  double v279;
  double v280;
  unsigned int v281;
  _BYTE *v282;
  double v283;
  double v284;
  double v285;
  unsigned int v286;
  _BYTE *v287;
  double v288;
  double v289;
  double v290;
  unsigned int v291;
  _BYTE *v292;
  double v293;
  double v294;
  double v295;
  unsigned int v296;
  _BYTE *v297;
  char *v298;
  unint64_t v299;
  char v300;
  char *v301;
  char *v302;
  char v303;
  char *v304;
  char *v305;
  char v306;
  char *v307;
  uint64_t v308;
  double *v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  char v313;
  uint64_t v314;
  double *v315;
  double *v316;
  uint64_t v317;
  double v318;
  double v319;
  _BYTE *v320;
  BOOL v321;
  _BYTE *v322;
  double v323;
  uint64_t v324;
  unint64_t v325;
  _BYTE *v326;
  char **v327;
  uint64_t v328;
  char *v329;
  char v330;
  uint64_t v331;
  char *v332;
  double v333;
  double v334;
  double v335;
  double v336;
  unsigned int v337;
  char *v338;
  char *v339;
  char *v340;
  char *v341;
  char *v342;
  char *v343;
  char *v344;
  char *v345;
  char *v346;
  char *v347;
  char *v348;
  char *v349;
  char *v350;
  char *v351;
  char *v352;
  char *v353;
  char *v354;
  char *v355;
  double v356;
  double v357;
  double v358;
  double v359;
  unsigned int v360;
  char *v361;
  char *v362;
  char *v363;
  char *v364;
  char *v365;
  char *v366;
  char *v367;
  char *v368;
  char *v369;
  char *v370;
  char *v371;
  char *v372;
  char *v373;
  char *v374;
  char *v375;
  char *v376;
  char *v377;
  uint64_t v378;
  uint64_t v379;
  unsigned __int8 *v380;
  _BYTE *v381;
  char *v382;
  char v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  char v387;
  uint64_t v388;
  char v389;
  BOOL v390;
  char v391;
  uint64_t v392;
  uint64_t m;
  unsigned int v394;
  unsigned int v395;
  uint64_t v396;
  char v397;
  char v398;
  uint64_t v399;
  char v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  _DWORD *v404;
  char v405;
  char v406;
  BOOL v407;
  char *v408;
  uint64_t n;
  unsigned int v410;
  unsigned int v411;
  char v412;
  uint64_t v413;
  char v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  _QWORD *v418;
  unint64_t v419;
  char v420;
  char v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  _QWORD *v425;
  char *v426;
  uint64_t v427;
  uint64_t v428;
  char *v429;
  char v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  char v434;
  _WORD *v435;
  char v436;
  BOOL v437;
  char v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  unsigned int v442;
  unsigned int v443;
  uint64_t v444;
  uint64_t v445;
  unsigned int v446;
  char v447;
  char *v448;
  unsigned int ii;
  int v450;
  unsigned int v451;
  _BYTE *v452;
  char v453;
  uint64_t v454;
  char **v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  char *v462;
  char v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t v466;
  char v467;
  char v468;
  uint64_t v469;
  char v470;
  uint64_t v471;
  uint64_t v472;
  unsigned int v473;
  unsigned int v474;
  char v475;
  uint64_t v476;
  double v477;
  char *v478;
  char v479;
  uint64_t v480;
  char **v481;
  _QWORD *v482;
  uint64_t v483;
  double *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  char *v488;
  char v489;
  uint64_t v490;
  uint64_t jj;
  char v492;
  char v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  unsigned int v497;
  unsigned int v498;
  unint64_t v499;
  double v500;
  double v501;
  unsigned int v502;
  char *v503;
  char v504;
  uint64_t v505;
  char **v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  char *v512;
  char v513;
  uint64_t v514;
  uint64_t kk;
  char v516;
  char v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  _QWORD *v522;
  unsigned int v523;
  unsigned int v524;
  double v525;
  int v526;
  double v527;
  char *v528;
  uint64_t v529;
  char v530;
  char **v531;
  uint64_t v532;
  uint64_t v533;
  char v534;
  uint64_t v535;
  char *v536;
  uint64_t v537;
  uint64_t v538;
  int v539;
  int v540;
  char *v541;
  unsigned __int8 *v542;
  double *v543;
  uint64_t v544;
  char *v545;
  char v546;
  uint64_t v547;
  char *v548;
  char *v549;
  char *v550;
  char *v551;
  char *v552;
  double v553;
  double v554;
  char v555;
  uint64_t v556;
  char *v557;
  char *v558;
  char *v559;
  char *v560;
  char *v561;
  double v562;
  double v563;
  double v564;
  unsigned int v565;
  double v566;
  double v567;
  double v568;
  unsigned int v569;
  double v570;
  double v571;
  double v572;
  unsigned int v573;
  char *v574;
  uint64_t v575;
  char *v576;
  char v577;
  char *v578;
  char *v579;
  char *v580;
  unsigned int mm;
  char *v582;
  char *v583;
  char *v584;
  uint64_t v585;
  char v586;
  double v587;
  double v588;
  double v589;
  unsigned int v590;
  char *v591;
  double v592;
  double v593;
  double v594;
  unsigned int v595;
  char *v596;
  char *v597;
  char v598;
  uint64_t v599;
  char *v600;
  char *v601;
  char *v602;
  char *v603;
  char *v604;
  char *v605;
  uint64_t v606;
  char v607;
  unsigned int *v608;
  uint64_t v609;
  char **v610;
  uint64_t v611;
  unsigned __int8 *v612;
  char *v613;
  char v614;
  uint64_t v615;
  char Char_Ass_Status_Edit;
  char *v617;
  char v618;
  char *v619;
  char *v620;
  char *v621;
  uint64_t v622;
  char v623;
  char v624;
  char *v625;
  uint64_t v626;
  char v627;
  char v628;
  char *v629;
  uint64_t v630;
  char v631;
  char v632;
  char *v633;
  uint64_t v634;
  char v635;
  int v636;
  uint64_t v637;
  unsigned int nn;
  int v639;
  unsigned int v640;
  int v641;
  char *v642;
  char *v643;
  char *v644;
  char *v645;
  char *v646;
  char *v647;
  char *v648;
  char *v649;
  char *v650;
  char v651;
  uint64_t v652;
  char v653;
  char *v654;
  uint64_t v655;
  char v656;
  char v657;
  char *v658;
  uint64_t v659;
  char v660;
  char v661;
  char *v662;
  uint64_t v663;
  char v664;
  int v665;
  uint64_t v666;
  unsigned int i1;
  int v668;
  unsigned int v669;
  char *v670;
  char *v671;
  char *v672;
  char *v673;
  char *v674;
  uint64_t v675;
  char v676;
  char *v677;
  char v678;
  char *v679;
  char *v680;
  unsigned int i2;
  char **v682;
  uint64_t v683;
  unsigned __int8 *v684;
  unsigned int *v685;
  char *v686;
  char v687;
  uint64_t v688;
  uint64_t v689;
  char v690;
  char *v691;
  char v692;
  char *v693;
  char *v694;
  char *v695;
  char *v696;
  char v697;
  char *v698;
  char *v699;
  char *v700;
  char v701;
  char *v702;
  char v703;
  uint64_t v704;
  char *v705;
  char v706;
  char *v707;
  char *v708;
  char *v709;
  char *v710;
  char v711;
  char *v712;
  char *v713;
  char *v714;
  char v715;
  char *v716;
  char v717;
  uint64_t v718;
  char *v719;
  char v720;
  char *v721;
  char *v722;
  char *v723;
  char *v724;
  char *v725;
  char *v726;
  char v727;
  char *v728;
  char **v729;
  unsigned __int8 *v730;
  unsigned __int8 *v731;
  double *v732;
  char *v733;
  char v734;
  uint64_t v735;
  char v736;
  uint64_t v737;
  char *v738;
  char *v739;
  char v740;
  char *v741;
  char *v742;
  char v743;
  uint64_t v744;
  uint64_t v745;
  char *v746;
  char v747;
  uint64_t v748;
  char *v749;
  char v750;
  uint64_t v751;
  char *v752;
  char v753;
  uint64_t v754;
  char *v755;
  char v756;
  char *v757;
  char v758;
  uint64_t v759;
  char *v760;
  char v761;
  uint64_t v762;
  char *v763;
  char v764;
  uint64_t v765;
  char *v766;
  char *v767;
  char *v768;
  char v769;
  uint64_t v770;
  char *v771;
  char *v772;
  char v773;
  uint64_t v774;
  char *v775;
  char *v776;
  char *v777;
  char *v778;
  char *v779;
  char *v780;
  char v781;
  uint64_t v782;
  char *v783;
  char *v784;
  uint64_t v785;
  char v786;
  char *v787;
  unsigned __int8 *v788;
  char *v789;
  char v790;
  uint64_t v791;
  uint64_t v792;
  char v793;
  char *v794;
  char *v795;
  char v796;
  char *v797;
  char *v798;
  char v799;
  uint64_t v800;
  char *v801;
  char *v802;
  char v803;
  uint64_t v804;
  double v805;
  char *v806;
  char v807;
  uint64_t v808;
  char *v809;
  char v810;
  uint64_t v811;
  char *v812;
  char *v813;
  char v814;
  char *v815;
  char *v816;
  char v817;
  uint64_t v818;
  char *v819;
  char *v820;
  char v821;
  uint64_t v822;
  double v823;
  char *v824;
  char v825;
  uint64_t v826;
  char *v827;
  char v828;
  uint64_t v829;
  char *v830;
  char *v831;
  char v832;
  char *v833;
  char *v834;
  char v835;
  uint64_t v836;
  char *v837;
  char *v838;
  char v839;
  uint64_t v840;
  double v841;
  char *v842;
  char v843;
  uint64_t v844;
  char *v845;
  double *v846;
  _BYTE *v847;
  uint64_t v848;
  char *v849;
  char v850;
  uint64_t v851;
  double *v852;
  char *v853;
  char v854;
  uint64_t v855;
  uint64_t v856;
  char *v857;
  char v858;
  int v859;
  unsigned int v860;
  uint64_t v861;
  char *v862;
  char v863;
  unint64_t v864;
  char *v865;
  uint64_t v866;
  char **v867;
  uint64_t v868;
  uint64_t v869;
  unsigned __int16 *v870;
  uint64_t v871;
  char *v872;
  char v873;
  char *v874;
  char v875;
  uint64_t v876;
  unsigned int v877;
  unsigned int v878;
  unsigned int v879;
  uint64_t v880;
  char *v881;
  char v882;
  uint64_t v883;
  char v884;
  char *v885;
  char *v886;
  char *v887;
  char *v888;
  char *v889;
  char *v890;
  char *v891;
  char *v892;
  char v893;
  uint64_t v894;
  char *v895;
  char *v896;
  char v897;
  uint64_t v898;
  char *v899;
  char *v900;
  char v901;
  uint64_t v902;
  uint64_t v903;
  char v904;
  unsigned int v905;
  char v906;
  char *v907;
  char **v908;
  uint64_t v909;
  unsigned __int8 *v910;
  uint64_t v911;
  double *v912;
  unsigned int v913;
  char v914;
  char *v915;
  uint64_t v916;
  char *v917;
  char v918;
  char *v919;
  char v920;
  uint64_t v921;
  double v922;
  double v923;
  double v924;
  unsigned int v925;
  double v926;
  double v927;
  unsigned int v928;
  int v929;
  char *v930;
  char v931;
  uint64_t v932;
  char v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  char v937;
  char *v938;
  uint64_t v939;
  char *v940;
  char v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  char *v945;
  char **v946;
  uint64_t v947;
  char *v948;
  char v949;
  uint64_t v950;
  uint64_t i3;
  char *v952;
  unsigned int i4;
  uint64_t v954;
  uint64_t v955;
  char *v956;
  char **v957;
  uint64_t v958;
  char *v959;
  char v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  char *v964;
  char **v965;
  uint64_t v966;
  uint64_t v967;
  double *v968;
  char *v969;
  char v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  char *v974;
  double *v975;
  uint64_t v976;
  char *v977;
  char v978;
  uint64_t v979;
  uint64_t i5;
  char *v981;
  char v982;
  uint64_t v983;
  char *v984;
  double *v985;
  uint64_t v986;
  double v987;
  double v988;
  char *v989;
  char *v990;
  char v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  char *v995;
  uint64_t v996;
  char *v997;
  char v998;
  uint64_t v999;
  unsigned int v1000;
  char *v1001;
  unsigned int v1002;
  char *v1003;
  unsigned int v1004;
  char *v1005;
  char *v1006;
  char v1007;
  uint64_t v1008;
  BOOL v1009;
  unsigned int v1010;
  BOOL v1011;
  unsigned int v1012;
  char *v1013;
  uint64_t v1014;
  char *v1015;
  char v1016;
  unsigned int v1017;
  char *v1018;
  char v1019;
  uint64_t v1020;
  uint64_t v1021;
  char *v1022;
  char v1023;
  char *v1024;
  char v1025;
  uint64_t v1026;
  unint64_t v1027;
  char *v1028;
  char **v1029;
  uint64_t v1030;
  char *v1031;
  char v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  char *v1036;
  uint64_t v1037;
  char *v1038;
  char v1039;
  uint64_t v1040;
  uint64_t v1041;
  char *v1042;
  char **v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  unsigned int *v1047;
  char *v1048;
  char v1049;
  uint64_t v1050;
  uint64_t v1051;
  char *v1052;
  char v1053;
  char v1054;
  unsigned int v1055;
  unsigned int v1056;
  unsigned int v1057;
  uint64_t v1058;
  char *v1059;
  char v1060;
  char *v1061;
  char *v1062;
  char v1063;
  int v1064;
  uint64_t v1065;
  char v1066;
  char *v1067;
  char v1068;
  uint64_t v1069;
  char *v1070;
  char v1071;
  uint64_t v1072;
  char *v1073;
  char **v1074;
  uint64_t v1075;
  double v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  double v1080;
  uint64_t v1081;
  double v1082;
  uint64_t v1083;
  double v1084;
  double v1085;
  double v1086;
  uint64_t v1087;
  uint64_t v1088;
  double v1089;
  double v1090;
  double v1091;
  uint64_t v1092;
  double v1093;
  double v1094;
  double v1095;
  uint64_t v1096;
  uint64_t v1097;
  double v1100;
  double v1103;
  uint64_t v1104;
  uint64_t v1105;
  char *v1106;
  int v1107;
  int v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  unsigned __int8 *v1112;
  int v1113;
  int v1114;
  BOOL v1115;
  int v1116;
  char *v1117;
  char v1118;
  uint64_t v1119;
  char v1120;
  char *v1121;
  uint64_t v1122;
  char v1123;
  unsigned __int8 *v1124;
  int v1125;
  unsigned int v1126;
  char *v1127;
  uint64_t v1128;
  unint64_t v1129;
  unint64_t v1130;
  double v1131;
  double v1132;
  double v1133;
  unsigned int v1134;
  unint64_t v1135;
  unint64_t v1136;
  double v1137;
  double v1138;
  double v1139;
  unsigned int v1140;
  __int16 v1141;
  unsigned __int16 *v1142;
  uint64_t v1143;
  char *v1144;
  char v1145;
  uint64_t v1146;
  char *v1147;
  unsigned int i6;
  uint64_t v1149;
  char v1150;
  int v1151;
  unsigned int v1152;
  unsigned int v1153;
  uint64_t v1154;
  char *v1155;
  char v1156;
  char *v1157;
  unint64_t v1158;
  uint64_t v1159;
  char v1160;
  char *v1161;
  char *v1162;
  unint64_t v1163;
  uint64_t v1164;
  char v1165;
  unsigned int v1166;
  char *v1167;
  char *v1168;
  const char *v1169;
  char v1170;
  unsigned __int8 *v1171;
  int v1172;
  int v1173;
  unsigned int v1174;
  unsigned int v1175;
  double v1176;
  char *v1177;
  char *v1178;
  int v1179;
  unsigned int v1180;
  uint64_t v1181;
  char v1182;
  int v1183;
  unsigned int v1184;
  unint64_t v1185;
  unsigned int v1186;
  unint64_t v1187;
  uint64_t v1188;
  char v1189;
  _BYTE *v1190;
  char *v1191;
  char v1192;
  uint64_t v1193;
  uint64_t v1194;
  double v1195;
  char *v1196;
  char v1197;
  uint64_t v1198;
  double v1199;
  double v1200;
  unsigned int v1201;
  double v1202;
  double v1203;
  double v1204;
  unsigned int v1205;
  char *v1206;
  uint64_t v1207;
  uint64_t v1208;
  double v1209;
  double v1210;
  double v1211;
  double v1212;
  unsigned int v1213;
  uint64_t v1214;
  int v1215;
  char *v1216;
  uint64_t v1217;
  char *v1218;
  uint64_t v1219;
  double v1220;
  double v1221;
  double v1222;
  double v1223;
  int v1224;
  int v1225;
  uint64_t v1226;
  char **v1227;
  uint64_t v1228;
  uint64_t v1229;
  unsigned __int8 *v1230;
  uint64_t v1231;
  uint64_t v1232;
  char *v1233;
  char v1234;
  char *v1235;
  char v1236;
  int v1237;
  uint64_t v1238;
  char *v1239;
  char v1240;
  unint64_t v1241;
  uint64_t v1242;
  int v1243;
  int v1244;
  char *v1245;
  char *v1246;
  char v1247;
  uint64_t v1248;
  __int16 *v1249;
  char *v1250;
  char v1251;
  unsigned int v1252;
  char *v1253;
  unsigned int i7;
  char *v1255;
  uint64_t result;
  char **v1257;
  _BYTE *v1258;
  double v1259;
  double v1260;
  double v1261;
  int v1262;
  _BYTE *v1263;
  uint64_t v1264;
  char *v1265;
  char v1266;
  uint64_t v1267;
  char *v1268;
  int v1269;
  const char *v1270;
  char v1271;
  char *v1272;
  unsigned __int8 *v1273;
  int v1274;
  unsigned int v1275;
  char *v1276;
  char *v1277;
  char v1278;
  uint64_t v1279;
  char *v1280;
  uint64_t v1281;
  const char *v1282;
  char v1283;
  char *v1284;
  unsigned __int8 *v1285;
  int v1286;
  char *v1287;
  char *v1288;
  char v1289;
  uint64_t v1290;
  char *v1291;
  uint64_t v1292;
  const char *v1293;
  char v1294;
  char *v1295;
  unsigned __int8 *v1296;
  int v1297;
  char *v1298;
  char *v1299;
  char v1300;
  uint64_t v1301;
  char *v1302;
  uint64_t v1303;
  const char *v1304;
  char v1305;
  char *v1306;
  unsigned __int8 *v1307;
  int v1308;
  char *v1309;
  uint64_t v1310;
  uint64_t v1311;
  char v1312;
  uint64_t v1313;
  char *v1314;
  char *v1315;
  uint64_t v1316;
  const char *v1317;
  char v1318;
  char *v1319;
  unsigned __int8 *v1320;
  int v1321;
  char *v1322;
  char *v1323;
  char v1324;
  uint64_t v1325;
  char *v1326;
  uint64_t v1327;
  const char *v1328;
  char v1329;
  char *v1330;
  unsigned __int8 *v1331;
  int v1332;
  char *v1333;
  char *v1334;
  char v1335;
  uint64_t v1336;
  char *v1337;
  uint64_t v1338;
  const char *v1339;
  char v1340;
  char *v1341;
  unsigned __int8 *v1342;
  int v1343;
  char *v1344;
  char *v1345;
  char v1346;
  uint64_t v1347;
  char *v1348;
  uint64_t v1349;
  const char *v1350;
  char v1351;
  char *v1352;
  unsigned __int8 *v1353;
  int v1354;
  char *v1355;
  char *v1356;
  char v1357;
  uint64_t v1358;
  char *v1359;
  char v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  char *v1366;
  char v1367;
  char *v1368;
  char *v1369;
  char v1370;
  uint64_t v1371;
  char *v1372;
  char v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  char *v1379;
  char v1380;
  char *v1381;
  char *v1382;
  char v1383;
  uint64_t v1384;
  char *v1385;
  char v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  char *v1392;
  char v1393;
  char *v1394;
  char *v1395;
  char v1396;
  uint64_t v1397;
  unint64_t v1398;
  _BYTE *v1399;
  int v1400;
  int v1401;
  char *v1402;
  char *v1403;
  char v1404;
  uint64_t v1405;
  __int16 *v1406;
  char *v1407;
  char v1408;
  unsigned int v1409;
  uint64_t v1410;
  char *v1411;
  char v1412;
  uint64_t v1413;
  char *v1414;
  char v1415;
  uint64_t i8;
  char *v1417;
  double v1418;
  double v1419;
  double v1420;
  unsigned int v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  _QWORD *v1427;
  uint64_t v1428;
  uint64_t v1429;
  int v1430;
  uint64_t v1431;
  uint64_t v1432;
  unsigned int v1433;
  uint64_t v1434;
  unsigned int v1435;
  signed __int8 v1436;
  unsigned __int16 v1437;
  unsigned __int16 v1438[2];
  unsigned __int16 v1439[2];
  double v1440;
  unsigned int v1441[4];
  __int128 v1442;
  __int128 v1443;
  __int128 v1444;
  __int128 v1445;
  __int128 v1446;
  __int128 v1447;
  __int128 v1448;
  __int128 v1449;
  __int128 v1450;
  __int128 v1451;
  __int128 v1452;
  __int128 v1453;
  __int128 v1454;
  __int128 v1455;
  __int128 v1456;
  __int128 v1457;
  __int128 v1458;
  __int128 v1459;
  __int128 v1460;
  __int128 v1461;
  __int128 v1462;
  __int128 v1463;
  __int128 v1464;
  __int128 v1465;
  __int128 v1466;
  __int128 v1467;
  __int128 v1468;
  __int128 v1469;
  __int128 v1470;
  __int128 v1471;
  __int128 v1472;
  unsigned __int8 v1473[16];
  __int128 v1474;
  __int128 v1475;
  __int128 v1476;
  __int128 v1477;
  __int128 v1478;
  __int128 v1479;
  __int128 v1480;
  unsigned int v1481[2];
  _OWORD v1482[64];
  uint64_t v1483;

  v1483 = *MEMORY[0x24BDAC8D0];
  v2 = (char **)a1[35];
  v3 = a1[9];
  v4 = a1[10];
  v5 = a1[16];
  v6 = a1[26];
  v7 = *(unsigned __int16 *)(a1[14] + 394);
  GN_GPS_Get_LibVersion((char *)v1482);
  v8 = *v2;
  v9 = 86;
  v10 = 1u;
  do
  {
    *v2 = v8 + 1;
    *v8 = v9;
    v8 = *v2;
    if (*v2 >= v2[3])
    {
      v8 = v2[2];
      *v2 = v8;
    }
    v9 = aVer[v10++];
  }
  while (v10 != 7);
  v11 = v1482[0];
  if (LOBYTE(v1482[0]))
  {
    v12 = (unsigned __int8 *)v1482 + 1;
    do
    {
      *v2 = v8 + 1;
      *v8 = v11;
      v8 = *v2;
      if (*v2 >= v2[3])
      {
        v8 = v2[2];
        *v2 = v8;
      }
      v13 = *v12++;
      v11 = v13;
    }
    while (v13);
  }
  *v2 = v8 + 1;
  *v8 = 32;
  v14 = *v2;
  if (*v2 >= v2[3])
    v14 = v2[2];
  *v2 = v14 + 1;
  *v14 = 91;
  v15 = *v2;
  if (*v2 >= v2[3])
  {
    v15 = v2[2];
    *v2 = v15;
  }
  v16 = *(_BYTE *)(v6 + 152);
  if (v16)
  {
    v17 = (unsigned __int8 *)(v6 + 153);
    do
    {
      *v2 = v15 + 1;
      *v15 = v16;
      v15 = *v2;
      if (*v2 >= v2[3])
      {
        v15 = v2[2];
        *v2 = v15;
      }
      v18 = *v17++;
      v16 = v18;
    }
    while (v18);
  }
  *v2 = v15 + 1;
  *v15 = 93;
  v19 = *v2;
  if (*v2 >= v2[3])
    v19 = v2[2];
  for (i = 3; i > 1; --i)
  {
    *v2 = v19 + 1;
    *v19 = 32;
    v19 = *v2;
    if (*v2 >= v2[3])
    {
      v19 = v2[2];
      *v2 = v19;
    }
  }
  sprintf_2f((uint64_t)v2, (*(_DWORD *)(v4 + 32) - *(_DWORD *)(v5 + 68164)) / 0x64u);
  v21 = (*v2)++;
  *v21 = 32;
  v22 = *v2;
  if (*v2 >= v2[3])
    v22 = v2[2];
  v23 = &ch_GNSS_Exe_States[20 * *(int *)(v3 + 2016) + 1];
  v24 = 32;
  do
  {
    *v2 = v22 + 1;
    *v22 = v24;
    v22 = *v2;
    if (*v2 >= v2[3])
    {
      v22 = v2[2];
      *v2 = v22;
    }
    v25 = *v23++;
    v24 = v25;
  }
  while (v25);
  sprintf_sp1d(v2, *(unsigned __int8 *)(v3 + 2014));
  sprintf_sp1d(v2, v7);
  sprintf_sp1d(v2, *(unsigned __int8 *)(v5 + 29));
  v26 = (*v2)++;
  *v26 = 10;
  if (*v2 >= v2[3])
    *v2 = v2[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v2);
  v27 = (char **)a1[35];
  v28 = (double *)a1[6];
  v30 = (_DWORD *)a1[9];
  v29 = a1[10];
  v31 = (unsigned int *)(a1[16] + 27116);
  v32 = a1[21];
  v33 = *v27;
  v34 = 84;
  v35 = 1u;
  do
  {
    *v27 = v33 + 1;
    *v33 = v34;
    v33 = *v27;
    if (*v27 >= v27[3])
    {
      v33 = v27[2];
      *v27 = v33;
    }
    v34 = aTime[v35++];
  }
  while (v35 != 7);
  *(_QWORD *)&v1482[0] = 0;
  *(_WORD *)v1473 = 0;
  LOWORD(v1440) = 0;
  *(_DWORD *)v1438 = 0;
  *(_DWORD *)v1439 = 0;
  v1437 = 0;
  v36 = *(double *)(v29 + 48);
  v37 = *(_WORD *)(v29 + 62);
  v38 = (double *)(v29 + 152);
  *(_QWORD *)v1481 = 0;
  if (!R8_EQ((const double *)(v29 + 152), (const double *)v1481)
    || (v38 = (double *)(v29 + 160), *(_QWORD *)v1481 = 0, !R8_EQ((const double *)(v29 + 160), (const double *)v1481))
    || (v38 = (double *)(v29 + 168),
        *(_QWORD *)v1481 = 0,
        v39 = R8_EQ((const double *)(v29 + 168), (const double *)v1481),
        v40 = 0.0,
        !v39))
  {
    v40 = *v38;
  }
  for (j = v36 - v40; j >= 604800.0; ++v37)
    j = j + -604800.0;
  while (j < 0.0)
  {
    j = j + 604800.0;
    --v37;
  }
  API_Get_UTC_Cor(0, (double *)v1482);
  GPS_To_UTC_Time(v1473, (unsigned __int16 *)&v1440, &v1439[1], v1439, &v1438[1], v1438, &v1437, v37, j, *(double *)v1482);
  sprintf_02d(v27, v1439[0]);
  sprintf_02d(v27, v1438[1]);
  v42 = v1438[0];
  if (v1439[0] == 23 && v1438[1] == 59 && v1438[0] >= 0x3Au)
  {
    v1481[0] = 0;
    v1436 = 0;
    v1441[0] = 0;
    API_Get_Next_Leap_Second(v1481, &v1436, (int *)v1441);
    v42 = v1438[0];
    if (!v1441[0] && v1436 == 1)
      v42 = ++v1438[0];
  }
  sprintf_02d(v27, v42);
  v43 = (*v27)++;
  *v43 = 46;
  if (*v27 >= v27[3])
    *v27 = v27[2];
  sprintf_03d((uint64_t)v27, v1437);
  v44 = *(_DWORD *)(v29 + 32);
  v45 = (*v27)++;
  *v45 = 32;
  if (*v27 >= v27[3])
    *v27 = v27[2];
  sprintf_10u(v27, v44);
  sprintf_5d(v27, *(__int16 *)(v29 + 62));
  sprintf_12f3(v27, *(double *)(v29 + 48));
  sprintf_2d(v27, *(unsigned __int8 *)(v32 + 24));
  v46 = *v27;
  v47 = &g_TOW_Stat_As_String[10 * *(unsigned int *)v28 + 1];
  v48 = 32;
  do
  {
    *v27 = v46 + 1;
    *v46 = v48;
    v46 = *v27;
    if (*v27 >= v27[3])
    {
      v46 = v27[2];
      *v27 = v46;
    }
    v49 = *v47++;
    v48 = v49;
  }
  while (v49);
  sprintf_6d(v27, *v31);
  sprintf_6d(v27, v31[1]);
  sprintf_gR8(v27, v28[5] * 1000000000.0);
  sprintf_sgR8(v27, *(double *)(v29 + 184) * 1000000000.0);
  v50 = (*v27)++;
  *v50 = 32;
  v51 = *v27;
  if (*v27 >= v27[3])
    v51 = v27[2];
  v52 = *(_DWORD *)(v29 + 36);
  *v27 = v51 + 1;
  *v51 = 32;
  if (*v27 >= v27[3])
    *v27 = v27[2];
  sprintf_10u(v27, v52);
  v53 = v30[61];
  v54 = (*v27)++;
  *v54 = 32;
  if (*v27 >= v27[3])
    *v27 = v27[2];
  sprintf_9d(v27, v53);
  v55 = 0.0;
  if (*(_BYTE *)(v29 + 60) && *(int *)v28 >= 1)
    v55 = *(double *)(v29 + 48) + (double)(604800 * *(__int16 *)(v29 + 62) - 662342400);
  v1427 = a1;
  v56 = (*v27)++;
  *v56 = 32;
  if (*v27 >= v27[3])
    *v27 = v27[2];
  sprintf_14f3(v27, v55);
  v57 = (*v27)++;
  *v57 = 32;
  if (*v27 >= v27[3])
    *v27 = v27[2];
  sprintf_19U(v27, *(_QWORD *)(v29 + 40));
  if (*(int *)v28 < 1)
  {
    v62 = *v27;
    v63 = 32;
    v64 = 1u;
    do
    {
      *v27 = v62 + 1;
      *v62 = v63;
      v62 = *v27;
      if (*v27 >= v27[3])
      {
        v62 = v27[2];
        *v27 = v62;
      }
      v63 = a9999999999[v64++];
    }
    while (v64 != 20);
    goto LABEL_115;
  }
  v58 = *(double *)(v29 + 48) * 1000.0;
  v59 = -0.5;
  if (v58 > 0.0)
    v59 = 0.5;
  v60 = v58 + v59;
  if (v60 <= 2147483650.0)
  {
    if (v60 >= -2147483650.0)
      v61 = (int)v60;
    else
      v61 = 0x80000000;
  }
  else
  {
    v61 = 0x7FFFFFFF;
  }
  v65 = _MergedGlobals;
  v66 = *(_DWORD *)(v29 + 32);
  if (_MergedGlobals)
  {
    v67 = dword_257A47C24;
  }
  else
  {
    _MergedGlobals = *(_DWORD *)(v29 + 32);
    dword_257A47C24 = v61;
    v67 = v61;
    v65 = v66;
  }
  v68 = v65 + v61;
  v69 = v67 + v66;
  v70 = v69 - v68;
  if (v69 - v68 <= -302400000)
    v70 = -302400000;
  v71 = v70 + v68;
  v72 = (v71 - v69 - (v71 != v69)) / 0x240C8400;
  if (v71 != v69)
    ++v72;
  v73 = v69 + 604800000 * v72;
  if ((int)(v73 - v68) >= 302399999)
    v74 = 302399999;
  else
    v74 = v73 - v68;
  v75 = v73 - v68 - 604800000 * ((v73 + ~(v68 + v74) + 604800000) / 0x240C8400);
  v76 = (*v27)++;
  *v76 = 32;
  if (*v27 >= v27[3])
    *v27 = v27[2];
  sprintf_4d(v27, v75);
  LODWORD(v1482[0]) = 0;
  v1481[0] = 0;
  v1441[0] = 0;
  *(_DWORD *)v1473 = 0;
  if (!API_Get_FS_Pulse_TTick((unsigned int *)v1482, v1481, v1441, (unsigned int *)v1473))
  {
    v62 = *v27;
    v86 = 32;
    v87 = 1u;
    do
    {
      *v27 = v62 + 1;
      *v62 = v86;
      v62 = *v27;
      if (*v27 >= v27[3])
      {
        v62 = v27[2];
        *v27 = v62;
      }
      v86 = a9999999[v87++];
    }
    while (v87 != 15);
LABEL_115:
    k = 0.0;
    goto LABEL_120;
  }
  LODWORD(v77) = v1481[0];
  v78 = *(double *)(v29 + 48)
      - *(double *)(v29 + 152)
      + ((double)(*(_DWORD *)(v29 + 32) - LODWORD(v1482[0])) + (double)v77 * -0.0000152587891)
      * -0.001
      * (1.0 - *(double *)(v29 + 184));
  for (k = v78 - (double)(int)v78; k < -0.5; k = k + 1.0)
    ;
  for (; k > 0.5; k = k + -1.0)
    ;
  v80 = 0;
  v81 = *v27;
  v82 = 32;
  do
  {
    *v27 = v81 + 1;
    *v81 = v82;
    v81 = *v27;
    if (*v27 >= v27[3])
    {
      v81 = v27[2];
      *v27 = v81;
    }
    v82 = asc_24BBE405D[++v80];
  }
  while (v80 != 2);
  sprintf_10u(v27, v1482[0]);
  sprintf_10u(v27, v1481[0]);
  v83 = -0.5;
  if (k * 10000.0 > 0.0)
    v83 = 0.5;
  v84 = k * 10000.0 + v83;
  if (v84 <= 2147483650.0)
  {
    if (v84 >= -2147483650.0)
      v85 = (int)v84;
    else
      v85 = 0x80000000;
  }
  else
  {
    v85 = 0x7FFFFFFF;
  }
  sprintf_7f((uint64_t)v27, v85, 2);
  v62 = *v27;
LABEL_120:
  v88 = (*(double *)(v29 + 48) - *(double *)(v29 + 152) - v28[14]) * 1000.0
      - (double)(*(_DWORD *)(v29 + 32) - *((_DWORD *)v28 + 30));
  *v27 = v62 + 1;
  *v62 = 32;
  if (*v27 >= v27[3])
    *v27 = v27[2];
  sprintf_12f3(v27, v88);
  v89 = (*v27)++;
  *v89 = 32;
  if (*v27 >= v27[3])
    *v27 = v27[2];
  sprintf_2d(v27, v31[6]);
  v90 = v30[438];
  if (v90 == -1)
    v91 = 255;
  else
    v91 = v90 / 0xEA60;
  sprintf_4d(v27, v91);
  v92 = (*v27)++;
  *v92 = 32;
  if (*v27 >= v27[3])
    *v27 = v27[2];
  sprintf_1u(v27, v30[440]);
  v93 = *v27;
  v94 = 32;
  v95 = 1u;
  do
  {
    *v27 = v93 + 1;
    *v93 = v94;
    v93 = *v27;
    if (*v27 >= v27[3])
    {
      v93 = v27[2];
      *v27 = v93;
    }
    v94 = aGoh[v95++];
  }
  while (v95 != 6);
  sprintf_4d(v27, v30[455]);
  v96 = v30[452];
  if (v96)
  {
    v97 = 274877907 * (*(_DWORD *)(v29 + 36) - v96);
    v98 = (v97 >> 38) + ((unint64_t)v97 >> 63);
    v99 = (*v27)++;
    *v99 = 32;
    if (*v27 >= v27[3])
      *v27 = v27[2];
    sprintf_4d(v27, v98);
    v100 = v30[455];
    if (v100)
    {
      v101 = 274877907 * (*(_DWORD *)(v29 + 36) - v100);
      v102 = (v101 >> 38) + ((unint64_t)v101 >> 63);
    }
    else
    {
      v102 = 0;
    }
    v106 = (*v27)++;
    *v106 = 32;
    if (*v27 >= v27[3])
      *v27 = v27[2];
    sprintf_4d(v27, v102);
    v104 = *v27;
  }
  else
  {
    v103 = 0;
    v104 = *v27;
    v105 = 32;
    do
    {
      *v27 = v104 + 1;
      *v104 = v105;
      v104 = *v27;
      if (*v27 >= v27[3])
      {
        v104 = v27[2];
        *v27 = v104;
      }
      v105 = a00[++v103];
    }
    while (v103 != 4);
  }
  *v27 = v104 + 1;
  *v104 = 10;
  if (*v27 >= v27[3])
    *v27 = v27[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v27);
  v107 = (char **)a1[35];
  v109 = a1[6];
  v108 = a1[7];
  v110 = (unsigned __int8 *)(v108 + 17128);
  v111 = (char *)(v108 + 8986);
  v112 = a1[10];
  v113 = *v107;
  v114 = 71;
  v115 = 1u;
  do
  {
    *v107 = v113 + 1;
    *v113 = v114;
    v113 = *v107;
    if (*v107 >= v107[3])
    {
      v113 = v107[2];
      *v107 = v113;
    }
    v114 = aGlot[v115++];
  }
  while (v115 != 7);
  v116 = *(double *)(v109 + 80) - *(double *)(v112 + 160) + 0.0005;
  if (v116 >= 86400.0)
    v116 = v116 + -86400.0;
  v117 = ((v116 - (double)v116) * 1000.0);
  v118 = (unsigned __int16)(v116 / 0xE10);
  v119 = v116 - 3600 * v118;
  v120 = (unsigned __int16)(v119 / 0x3C);
  v121 = v119 - 60 * v120;
  sprintf_02d(v107, v118);
  sprintf_02d(v107, v120);
  sprintf_02d(v107, v121);
  v122 = (*v107)++;
  *v122 = 46;
  if (*v107 >= v107[3])
    *v107 = v107[2];
  sprintf_03d((uint64_t)v107, v117);
  sprintf_3d(v107, *(__int16 *)(v109 + 74));
  sprintf_5d(v107, *(__int16 *)(v109 + 76));
  v123 = v111[3];
  sprintf_3d(v107, *v111);
  sprintf_3d(v107, v123);
  v124 = 0;
  v125 = *v107;
  v126 = 32;
  do
  {
    *v107 = v125 + 1;
    *v125 = v126;
    v125 = *v107;
    if (*v107 >= v107[3])
    {
      v125 = v107[2];
      *v107 = v125;
    }
    v126 = asc_24BBE405D[++v124];
  }
  while (v124 != 2);
  sprintf_12f3(v107, *(double *)(v109 + 80));
  sprintf_2d(v107, *(unsigned __int8 *)(v109 + 72));
  sprintf_3d(v107, *v110);
  sprintf_5d(v107, *((unsigned __int16 *)v111 + 4067));
  v127 = (*v107)++;
  *v127 = 32;
  v128 = *v107;
  if (*v107 >= v107[3])
    v128 = v107[2];
  *v107 = v128 + 1;
  *v128 = 32;
  v129 = *v107;
  if (*v107 >= v107[3])
    v129 = v107[2];
  v130 = &g_TOW_Stat_As_String[10 * *(unsigned int *)(v109 + 68) + 1];
  v131 = 32;
  do
  {
    *v107 = v129 + 1;
    *v129 = v131;
    v129 = *v107;
    if (*v107 >= v107[3])
    {
      v129 = v107[2];
      *v107 = v129;
    }
    v132 = *v130++;
    v131 = v132;
  }
  while (v132);
  *v107 = v129 + 1;
  *v129 = 10;
  if (*v107 >= v107[3])
    *v107 = v107[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v107);
  v133 = a1[35];
  v134 = a1[28];
  v135 = *(char **)v133;
  v136 = 112;
  v137 = 1u;
  do
  {
    *(_QWORD *)v133 = v135 + 1;
    *v135 = v136;
    v135 = *(char **)v133;
    if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    {
      v135 = *(char **)(v133 + 16);
      *(_QWORD *)v133 = v135;
    }
    v136 = aPNd[v137++];
  }
  while (v137 != 7);
  v1482[0] = vmulq_f64(*(float64x2_t *)(v134 + 104), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D44uLL));
  sprintf_LaLo((char **)v133, (uint64_t)v1482);
  sprintf_sgR8((_QWORD *)v133, *(double *)(v134 + 120));
  sprintf_sgR8((_QWORD *)v133, *(double *)(v134 + 128));
  v138 = (_BYTE *)(*(_QWORD *)v133)++;
  *v138 = 32;
  if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    *(_QWORD *)v133 = *(_QWORD *)(v133 + 16);
  sprintf_sgR8((_QWORD *)v133, *(double *)(v134 + 136));
  v139 = *(double *)(v134 + 144) * 10.0;
  v140 = -0.5;
  if (v139 > 0.0)
    v140 = 0.5;
  v141 = v139 + v140;
  if (v141 <= 2147483650.0)
  {
    if (v141 >= -2147483650.0)
      v142 = (int)v141;
    else
      v142 = 0x80000000;
  }
  else
  {
    v142 = 0x7FFFFFFF;
  }
  sprintf_7f(v133, v142, 2);
  sprintf_sgR8((_QWORD *)v133, *(double *)(v134 + 152));
  v143 = *(char **)v133;
  v144 = 32;
  v145 = 1u;
  do
  {
    *(_QWORD *)v133 = v143 + 1;
    *v143 = v144;
    v143 = *(char **)v133;
    if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    {
      v143 = *(char **)(v133 + 16);
      *(_QWORD *)v133 = v143;
    }
    v144 = aSt[v145++];
  }
  while (v145 != 6);
  sprintf_2d((_QWORD *)v133, *(unsigned __int8 *)(v134 + 325));
  sprintf_2d((_QWORD *)v133, *(unsigned __int8 *)(v134 + 326));
  v146 = (_BYTE *)(*(_QWORD *)v133)++;
  *v146 = 32;
  v147 = *(char **)v133;
  if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    v147 = *(char **)(v133 + 16);
  v148 = *(unsigned int *)(v134 + 312);
  if (v148 >= 5)
    v149 = 45;
  else
    v149 = 0x484D4C562DuLL >> (8 * v148);
  *(_QWORD *)v133 = v147 + 1;
  *v147 = v149;
  v150 = *(char **)v133;
  if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    v150 = *(char **)(v133 + 16);
  *(_QWORD *)v133 = v150 + 1;
  *v150 = 32;
  v151 = *(char **)v133;
  if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    v151 = *(char **)(v133 + 16);
  v152 = *(_DWORD *)(v134 + 308) - 1;
  if (v152 > 3)
    v153 = "NC";
  else
    v153 = off_251CDB020[v152];
  v154 = *v153;
  if (*v153)
  {
    v155 = (unsigned __int8 *)(v153 + 1);
    do
    {
      *(_QWORD *)v133 = v151 + 1;
      *v151 = v154;
      v151 = *(char **)v133;
      if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
      {
        v151 = *(char **)(v133 + 16);
        *(_QWORD *)v133 = v151;
      }
      v156 = *v155++;
      v154 = v156;
    }
    while (v156);
  }
  *(_QWORD *)v133 = v151 + 1;
  *v151 = 32;
  v157 = *(char **)v133;
  if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    v157 = *(char **)(v133 + 16);
  v158 = *(_DWORD *)(v134 + 304) - 1;
  if (v158 > 4)
    v159 = "NF";
  else
    v159 = off_251CDB040[v158];
  v160 = *v159;
  if (*v159)
  {
    v161 = (unsigned __int8 *)(v159 + 1);
    do
    {
      *(_QWORD *)v133 = v157 + 1;
      *v157 = v160;
      v157 = *(char **)v133;
      if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
      {
        v157 = *(char **)(v133 + 16);
        *(_QWORD *)v133 = v157;
      }
      v162 = *v161++;
      v160 = v162;
    }
    while (v162);
  }
  *(_QWORD *)v133 = v157 + 1;
  *v157 = 32;
  v163 = *(char **)v133;
  if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    v163 = *(char **)(v133 + 16);
  v164 = *(unsigned int *)(v134 + 300);
  if (v164 >= 6)
    v165 = 45;
  else
    v165 = 0x2B465650532DuLL >> (8 * v164);
  *(_QWORD *)v133 = v163 + 1;
  *v163 = v165;
  v166 = *(char **)v133;
  if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    v166 = *(char **)(v133 + 16);
  v167 = 0;
  v168 = 32;
  do
  {
    *(_QWORD *)v133 = v166 + 1;
    *v166 = v168;
    v166 = *(char **)v133;
    if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    {
      v166 = *(char **)(v133 + 16);
      *(_QWORD *)v133 = v166;
    }
    v168 = a0x[++v167];
  }
  while (v167 != 4);
  v169 = *(unsigned int *)(v134 + 320);
  LOBYTE(v1481[0]) = hexTABLE[v169 >> 28];
  BYTE1(v1481[0]) = hexTABLE[(v169 >> 24) & 0xF];
  hex6(v133, v169, v1481, 2);
  v170 = 0;
  v171 = *(char **)v133;
  v172 = 32;
  do
  {
    *(_QWORD *)v133 = v171 + 1;
    *v171 = v172;
    v171 = *(char **)v133;
    if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    {
      v171 = *(char **)(v133 + 16);
      *(_QWORD *)v133 = v171;
    }
    v172 = a0x[++v170];
  }
  while (v170 != 4);
  sprintf_03x((char **)v133, *(unsigned int *)(v134 + 296));
  v173 = *(char **)v133;
  v174 = 32;
  v175 = 1u;
  do
  {
    *(_QWORD *)v133 = v173 + 1;
    *v173 = v174;
    v173 = *(char **)v133;
    if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    {
      v173 = *(char **)(v133 + 16);
      *(_QWORD *)v133 = v173;
    }
    v174 = aPa[v175++];
  }
  while (v175 != 6);
  sprintf_ACC((char **)v133, *(double *)(v134 + 208));
  v176 = (_BYTE *)(*(_QWORD *)v133)++;
  *v176 = 32;
  if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    *(_QWORD *)v133 = *(_QWORD *)(v133 + 16);
  sprintf_ACC((char **)v133, *(double *)(v134 + 216));
  v177 = (_BYTE *)(*(_QWORD *)v133)++;
  *v177 = 32;
  if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    *(_QWORD *)v133 = *(_QWORD *)(v133 + 16);
  sprintf_3d((_QWORD *)v133, (int)*(double *)(v134 + 224));
  v178 = (_BYTE *)(*(_QWORD *)v133)++;
  *v178 = 32;
  if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    *(_QWORD *)v133 = *(_QWORD *)(v133 + 16);
  sprintf_ACC((char **)v133, *(double *)(v134 + 200));
  v179 = *(char **)v133;
  v180 = 32;
  v181 = 1u;
  do
  {
    *(_QWORD *)v133 = v179 + 1;
    *v179 = v180;
    v179 = *(char **)v133;
    if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    {
      v179 = *(char **)(v133 + 16);
      *(_QWORD *)v133 = v179;
    }
    v180 = aVa[v181++];
  }
  while (v181 != 6);
  sprintf_ACC((char **)v133, *(double *)(v134 + 232));
  v182 = (_BYTE *)(*(_QWORD *)v133)++;
  *v182 = 32;
  if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    *(_QWORD *)v133 = *(_QWORD *)(v133 + 16);
  sprintf_ACC((char **)v133, *(double *)(v134 + 240));
  v183 = (_BYTE *)(*(_QWORD *)v133)++;
  *v183 = 32;
  if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    *(_QWORD *)v133 = *(_QWORD *)(v133 + 16);
  sprintf_ACC((char **)v133, *(double *)(v134 + 248));
  v184 = *(char **)v133;
  v185 = 32;
  v186 = 1u;
  do
  {
    *(_QWORD *)v133 = v184 + 1;
    *v184 = v185;
    v184 = *(char **)v133;
    if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    {
      v184 = *(char **)(v133 + 16);
      *(_QWORD *)v133 = v184;
    }
    v185 = aTa[v186++];
  }
  while (v186 != 6);
  sprintf_ACC((char **)v133, *(double *)(v134 + 160) * 1000.0);
  v187 = (_BYTE *)(*(_QWORD *)v133)++;
  *v187 = 32;
  if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    *(_QWORD *)v133 = *(_QWORD *)(v133 + 16);
  sprintf_ACC((char **)v133, *(double *)(v134 + 168) * 1000000000.0);
  v188 = (_BYTE *)(*(_QWORD *)v133)++;
  *v188 = 32;
  if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    *(_QWORD *)v133 = *(_QWORD *)(v133 + 16);
  sprintf_ACC((char **)v133, *(double *)(v134 + 176) * 1000000000.0);
  v189 = *(char **)v133;
  v190 = 32;
  v191 = 1u;
  do
  {
    *(_QWORD *)v133 = v189 + 1;
    *v189 = v190;
    v189 = *(char **)v133;
    if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    {
      v189 = *(char **)(v133 + 16);
      *(_QWORD *)v133 = v189;
    }
    v190 = aEt[v191++];
  }
  while (v191 != 6);
  v192 = *(_DWORD *)(v134 + 316);
  if (v192 >= 0)
    v193 = *(_DWORD *)(v134 + 316);
  else
    v193 = -v192;
  sprintf1da((_QWORD *)v133, v193, v1481, 0, v192 >> 31);
  v194 = (_BYTE *)(*(_QWORD *)v133)++;
  *v194 = 10;
  if (*(_QWORD *)v133 >= *(_QWORD *)(v133 + 24))
    *(_QWORD *)v133 = *(_QWORD *)(v133 + 16);
  GNSS_Nav_Debug_Flush_Check(v133);
  v195 = a1[35];
  v196 = a1[10];
  v197 = a1[16];
  v198 = a1[21];
  v199 = (double *)(v198 + 79704);
  strcpy((char *)v1482, "    -------------- ");
  v200 = *(char **)v195;
  v201 = 71;
  v202 = 1u;
  do
  {
    *(_QWORD *)v195 = v200 + 1;
    *v200 = v201;
    v200 = *(char **)v195;
    if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
    {
      v200 = *(char **)(v195 + 16);
      *(_QWORD *)v195 = v200;
    }
    v201 = aGeod[v202++];
  }
  while (v202 != 7);
  sprintf_LaLo((char **)v195, v196 + 224);
  sprintf_sgR8((_QWORD *)v195, *(double *)(v196 + 240));
  sprintf_sgR8((_QWORD *)v195, *(double *)(v196 + 240) - *(double *)(v196 + 248));
  v203 = *(_DWORD *)(v196 + 416);
  if (v203 == 2)
  {
    v204 = 115;
  }
  else
  {
    if (v203 != 1)
      goto LABEL_274;
    v204 = 83;
  }
  BYTE4(v1482[0]) = v204;
LABEL_274:
  v205 = *(_DWORD *)(v196 + 420);
  if (v205 == 2)
  {
    v206 = 98;
  }
  else
  {
    if (v205 != 1)
      goto LABEL_279;
    v206 = 66;
  }
  BYTE5(v1482[0]) = v206;
LABEL_279:
  v207 = *(_DWORD *)(v196 + 432);
  if (v207 == 2)
  {
    v208 = 100;
  }
  else
  {
    if (v207 != 1)
      goto LABEL_284;
    v208 = 68;
  }
  BYTE6(v1482[0]) = v208;
LABEL_284:
  v209 = *(_DWORD *)(v196 + 424);
  if (v209 == 2)
  {
    v210 = 103;
  }
  else
  {
    if (v209 != 1)
      goto LABEL_289;
    v210 = 71;
  }
  BYTE7(v1482[0]) = v210;
LABEL_289:
  v211 = *(_DWORD *)(v196 + 440);
  if (v211 == 2)
  {
    v212 = 104;
  }
  else
  {
    if (v211 != 1)
      goto LABEL_294;
    v212 = 72;
  }
  BYTE8(v1482[0]) = v212;
LABEL_294:
  v213 = *(_DWORD *)(v196 + 444);
  if (v213 == 2)
  {
    v214 = 97;
  }
  else
  {
    if (v213 != 1)
      goto LABEL_299;
    v214 = 65;
  }
  BYTE9(v1482[0]) = v214;
LABEL_299:
  v215 = *(_DWORD *)(v196 + 448);
  if (v215 == 2)
  {
    v216 = 118;
  }
  else
  {
    if (v215 != 1)
      goto LABEL_304;
    v216 = 86;
  }
  BYTE10(v1482[0]) = v216;
LABEL_304:
  v217 = *(_DWORD *)(v196 + 452);
  if (v217 == 2)
  {
    v218 = 100;
  }
  else
  {
    if (v217 != 1)
      goto LABEL_309;
    v218 = 68;
  }
  BYTE11(v1482[0]) = v218;
LABEL_309:
  v219 = *(_DWORD *)(v196 + 456);
  if (v219 == 2)
  {
    v220 = 103;
  }
  else
  {
    if (v219 != 1)
      goto LABEL_314;
    v220 = 71;
  }
  BYTE12(v1482[0]) = v220;
LABEL_314:
  v221 = *(_DWORD *)(v196 + 460);
  if (v221 == 2)
  {
    v222 = 115;
  }
  else
  {
    if (v221 != 1)
      goto LABEL_319;
    v222 = 83;
  }
  BYTE13(v1482[0]) = v222;
LABEL_319:
  v223 = *(_DWORD *)(v196 + 464);
  if (v223 == 2)
  {
    v224 = 100;
  }
  else
  {
    if (v223 != 1)
      goto LABEL_324;
    v224 = 68;
  }
  BYTE14(v1482[0]) = v224;
LABEL_324:
  v225 = *(_DWORD *)(v196 + 468);
  if (v225 == 2)
  {
    v226 = 103;
  }
  else
  {
    if (v225 != 1)
      goto LABEL_329;
    v226 = 71;
  }
  HIBYTE(v1482[0]) = v226;
LABEL_329:
  v227 = *(_DWORD *)(v196 + 472);
  if (v227 == 2)
  {
    v228 = 100;
  }
  else
  {
    if (v227 != 1)
      goto LABEL_334;
    v228 = 68;
  }
  LOBYTE(v1482[1]) = v228;
LABEL_334:
  v229 = *(_DWORD *)(v196 + 476);
  if (v229 == 2)
  {
    v230 = 116;
  }
  else
  {
    if (v229 != 1)
      goto LABEL_339;
    v230 = 84;
  }
  BYTE1(v1482[1]) = v230;
LABEL_339:
  v231 = *(_DWORD *)(v196 + 480);
  if (v231 == 2)
  {
    v232 = 100;
    goto LABEL_343;
  }
  if (v231 == 1)
  {
    v232 = 68;
LABEL_343:
    BYTE2(v1482[1]) = v232;
  }
  v233 = v1482[0];
  v234 = *(char **)v195;
  if (LOBYTE(v1482[0]))
  {
    v235 = (unsigned __int8 *)v1482 + 1;
    do
    {
      *(_QWORD *)v195 = v234 + 1;
      *v234 = v233;
      v234 = *(char **)v195;
      if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
      {
        v234 = *(char **)(v195 + 16);
        *(_QWORD *)v195 = v234;
      }
      v236 = *v235++;
      v233 = v236;
    }
    while (v236);
  }
  v237 = 32;
  v238 = 1u;
  do
  {
    *(_QWORD *)v195 = v234 + 1;
    *v234 = v237;
    v234 = *(char **)v195;
    if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
    {
      v234 = *(char **)(v195 + 16);
      *(_QWORD *)v195 = v234;
    }
    v237 = aSf[v238++];
  }
  while (v238 != 6);
  v239 = *(unsigned int *)(v197 + 27204);
  v240 = ch_Stat_Fil[v239];
  if (v240)
  {
    v241 = (unsigned __int8 *)&ch_Stat_Fil[v239] + 1;
    do
    {
      *(_QWORD *)v195 = v234 + 1;
      *v234 = v240;
      v234 = *(char **)v195;
      if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
      {
        v234 = *(char **)(v195 + 16);
        *(_QWORD *)v195 = v234;
      }
      v242 = *v241++;
      v240 = v242;
    }
    while (v242);
  }
  sprintf_2d((_QWORD *)v195, *(unsigned __int8 *)(v197 + 27249));
  sprintf_2d((_QWORD *)v195, *(_DWORD *)(v197 + 27208));
  sprintf_2d((_QWORD *)v195, *(unsigned __int8 *)(v197 + 27248));
  v243 = *(double *)(v197 + 27216);
  if (v243 >= 9.89999962)
    v244 = 98.9999962;
  else
    v244 = v243 * 10.0;
  v245 = -0.5;
  if (v244 > 0.0)
    v245 = 0.5;
  v246 = v244 + v245;
  if (v246 <= 2147483650.0)
  {
    if (v246 >= -2147483650.0)
      v247 = (int)v246;
    else
      v247 = 0x80000000;
  }
  else
  {
    v247 = 0x7FFFFFFF;
  }
  sprintf_3f(v195, v247, 2);
  sprintf_sgR8((_QWORD *)v195, *(double *)(v197 + 27232));
  sprintf_sgR8((_QWORD *)v195, *(double *)(v197 + 27240));
  v248 = *(char **)v195;
  v249 = 32;
  v250 = 1u;
  do
  {
    *(_QWORD *)v195 = v248 + 1;
    *v248 = v249;
    v248 = *(char **)v195;
    if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
    {
      v248 = *(char **)(v195 + 16);
      *(_QWORD *)v195 = v248;
    }
    v249 = aHf[v250++];
  }
  while (v250 != 6);
  v251 = *(unsigned int *)(v197 + 27276);
  v252 = ch_Heading[v251];
  if (v252)
  {
    v253 = (unsigned __int8 *)&ch_Heading[v251] + 1;
    do
    {
      *(_QWORD *)v195 = v248 + 1;
      *v248 = v252;
      v248 = *(char **)v195;
      if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
      {
        v248 = *(char **)(v195 + 16);
        *(_QWORD *)v195 = v248;
      }
      v254 = *v253++;
      v252 = v254;
    }
    while (v254);
  }
  v255 = *(double *)(v197 + 27280);
  v256 = -0.5;
  if (v255 > 0.0)
    v256 = 0.5;
  v257 = v255 + v256;
  if (v257 <= 2147483650.0)
  {
    if (v257 >= -2147483650.0)
      v258 = (int)v257;
    else
      v258 = 0x80000000;
  }
  else
  {
    v258 = 0x7FFFFFFF;
  }
  sprintf_5d((_QWORD *)v195, v258);
  v259 = (_BYTE *)(*(_QWORD *)v195)++;
  *v259 = 32;
  if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
    *(_QWORD *)v195 = *(_QWORD *)(v195 + 16);
  v260 = *(_DWORD *)(v197 + 27296);
  if (v260)
    v261 = (*(_DWORD *)v198 - v260) / 1000;
  else
    v261 = 0;
  sprintf_4d((_QWORD *)v195, v261);
  v262 = *(double *)(v197 + 27328);
  v263 = -0.5;
  if (v262 > 0.0)
    v263 = 0.5;
  v264 = v262 + v263;
  if (v264 <= 2147483650.0)
  {
    if (v264 >= -2147483650.0)
      v265 = (int)v264;
    else
      v265 = 0x80000000;
  }
  else
  {
    v265 = 0x7FFFFFFF;
  }
  sprintf_5d((_QWORD *)v195, v265);
  v266 = (_BYTE *)(*(_QWORD *)v195)++;
  *v266 = 32;
  if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
    *(_QWORD *)v195 = *(_QWORD *)(v195 + 16);
  v267 = *(_DWORD *)(v197 + 27336);
  if (v267)
    v268 = (*(_DWORD *)v198 - v267) / 1000;
  else
    v268 = 0;
  sprintf_4d((_QWORD *)v195, v268);
  sprintf_2d((_QWORD *)v195, *(unsigned __int8 *)(v197 + 27320));
  v269 = (_BYTE *)(*(_QWORD *)v195)++;
  *v269 = 32;
  if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
    *(_QWORD *)v195 = *(_QWORD *)(v195 + 16);
  sprintf_11f9((_QWORD *)v195, *(double *)(v197 + 27304));
  v270 = (_BYTE *)(*(_QWORD *)v195)++;
  *v270 = 32;
  if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
    *(_QWORD *)v195 = *(_QWORD *)(v195 + 16);
  sprintf_11f9((_QWORD *)v195, *(double *)(v197 + 27312));
  v271 = *(char **)v195;
  v272 = 32;
  v273 = 1u;
  do
  {
    *(_QWORD *)v195 = v271 + 1;
    *v271 = v272;
    v271 = *(char **)v195;
    if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
    {
      v271 = *(char **)(v195 + 16);
      *(_QWORD *)v195 = v271;
    }
    v272 = aHi[v273++];
  }
  while (v273 != 6);
  v274 = *(double *)(v198 + 79728) * 10.0;
  v275 = -0.5;
  if (v274 > 0.0)
    v275 = 0.5;
  v276 = v274 + v275;
  if (v276 <= 2147483650.0)
  {
    if (v276 >= -2147483650.0)
      v277 = (int)v276;
    else
      v277 = 0x80000000;
  }
  else
  {
    v277 = 0x7FFFFFFF;
  }
  sprintf_2f(v195, v277);
  v278 = (_BYTE *)(*(_QWORD *)v195)++;
  *v278 = 32;
  if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
    *(_QWORD *)v195 = *(_QWORD *)(v195 + 16);
  v279 = -0.5;
  if (*v199 > 0.0)
    v279 = 0.5;
  v280 = *v199 + v279;
  if (v280 <= 2147483650.0)
  {
    if (v280 >= -2147483650.0)
      v281 = (int)v280;
    else
      v281 = 0x80000000;
  }
  else
  {
    v281 = 0x7FFFFFFF;
  }
  sprintf_3d((_QWORD *)v195, v281);
  v282 = (_BYTE *)(*(_QWORD *)v195)++;
  *v282 = 32;
  if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
    *(_QWORD *)v195 = *(_QWORD *)(v195 + 16);
  v283 = *(double *)(v198 + 1856);
  v284 = -0.5;
  if (v283 > 0.0)
    v284 = 0.5;
  v285 = v283 + v284;
  if (v285 <= 2147483650.0)
  {
    if (v285 >= -2147483650.0)
      v286 = (int)v285;
    else
      v286 = 0x80000000;
  }
  else
  {
    v286 = 0x7FFFFFFF;
  }
  sprintf_3d((_QWORD *)v195, v286);
  v287 = (_BYTE *)(*(_QWORD *)v195)++;
  *v287 = 32;
  if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
    *(_QWORD *)v195 = *(_QWORD *)(v195 + 16);
  v288 = *(double *)(v198 + 79720);
  v289 = -0.5;
  if (v288 > 0.0)
    v289 = 0.5;
  v290 = v288 + v289;
  if (v290 <= 2147483650.0)
  {
    if (v290 >= -2147483650.0)
      v291 = (int)v290;
    else
      v291 = 0x80000000;
  }
  else
  {
    v291 = 0x7FFFFFFF;
  }
  sprintf_3d((_QWORD *)v195, v291);
  v292 = (_BYTE *)(*(_QWORD *)v195)++;
  *v292 = 32;
  if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
    *(_QWORD *)v195 = *(_QWORD *)(v195 + 16);
  v293 = *(double *)(v198 + 79712);
  v294 = -0.5;
  if (v293 > 0.0)
    v294 = 0.5;
  v295 = v293 + v294;
  if (v295 <= 2147483650.0)
  {
    if (v295 >= -2147483650.0)
      v296 = (int)v295;
    else
      v296 = 0x80000000;
  }
  else
  {
    v296 = 0x7FFFFFFF;
  }
  sprintf_3d((_QWORD *)v195, v296);
  v297 = (_BYTE *)(*(_QWORD *)v195)++;
  *v297 = 32;
  v298 = *(char **)v195;
  if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
    v298 = *(char **)(v195 + 16);
  v299 = *(unsigned int *)(v198 + 79736);
  if (v299 >= 8)
    v300 = 120;
  else
    v300 = 0x4D30323146535578uLL >> (8 * v299);
  *(_QWORD *)v195 = v298 + 1;
  *v298 = v300;
  v301 = *(char **)v195;
  if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
    v301 = *(char **)(v195 + 16);
  *(_QWORD *)v195 = v301 + 1;
  *v301 = 32;
  v302 = *(char **)v195;
  if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
    v302 = *(char **)(v195 + 16);
  if (*(_BYTE *)(v198 + 79740))
    v303 = 83;
  else
    v303 = 45;
  *(_QWORD *)v195 = v302 + 1;
  *v302 = v303;
  v304 = *(char **)v195;
  if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
    v304 = *(char **)(v195 + 16);
  *(_QWORD *)v195 = v304 + 1;
  *v304 = 32;
  v305 = *(char **)v195;
  if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
    v305 = *(char **)(v195 + 16);
  if (*(_BYTE *)(v198 + 79741))
    v306 = 84;
  else
    v306 = 45;
  *(_QWORD *)v195 = v305 + 1;
  *v305 = v306;
  v307 = *(char **)v195;
  if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
    v307 = *(char **)(v195 + 16);
  *(_QWORD *)v195 = v307 + 1;
  *v307 = 10;
  if (*(_QWORD *)v195 >= *(_QWORD *)(v195 + 24))
    *(_QWORD *)v195 = *(_QWORD *)(v195 + 16);
  GNSS_Nav_Debug_Flush_Check(v195);
  v308 = a1[35];
  v309 = (double *)a1[10];
  v310 = a1[16];
  v311 = a1[21];
  v312 = *(char **)v308;
  v313 = 76;
  v314 = 1u;
  do
  {
    *(_QWORD *)v308 = v312 + 1;
    *v312 = v313;
    v312 = *(char **)v308;
    if (*(_QWORD *)v308 >= *(_QWORD *)(v308 + 24))
    {
      v312 = *(char **)(v308 + 16);
      *(_QWORD *)v308 = v312;
    }
    v313 = aLocal[v314++];
  }
  while (v314 != 8);
  v315 = (double *)(v310 + 68240);
  v316 = v309 + 28;
  v317 = -3;
  do
  {
    v318 = *v316 - *(v315 - 5);
    if ((_DWORD)v317 != -3)
    {
      if ((_DWORD)v317 != -2)
        goto LABEL_486;
      v319 = -6.28318531;
      if (v318 >= 3.14159265 || (v319 = 6.28318531, v318 < -3.14159265))
        v318 = v318 + v319;
    }
    v318 = v318 * *v315;
LABEL_486:
    v320 = (_BYTE *)(*(_QWORD *)v308)++;
    *v320 = 32;
    if (*(_QWORD *)v308 >= *(_QWORD *)(v308 + 24))
      *(_QWORD *)v308 = *(_QWORD *)(v308 + 16);
    sprintf_12f3((char **)v308, v318);
    ++v315;
    ++v316;
    v321 = __CFADD__(v317++, 1);
  }
  while (!v321);
  v322 = (_BYTE *)(*(_QWORD *)v308)++;
  *v322 = 32;
  if (*(_QWORD *)v308 >= *(_QWORD *)(v308 + 24))
    *(_QWORD *)v308 = *(_QWORD *)(v308 + 16);
  sprintf_sgR8((_QWORD *)v308, v309[46]);
  sprintf_sgR8((_QWORD *)v308, -v309[44]);
  sprintf_6d((_QWORD *)v308, (int)v309[124]);
  v323 = 0.0;
  v324 = 18;
  do
  {
    v323 = v323 + v309[v324] * v309[v324];
    v325 = v324 - 15;
    --v324;
  }
  while (v325 > 1);
  sprintf_sgR8((_QWORD *)v308, sqrt(v323));
  sprintf_6d((_QWORD *)v308, (int)*(double *)(v311 + 1856));
  sprintf_sgR8((_QWORD *)v308, v309[42]);
  sprintf_sgR8((_QWORD *)v308, v309[43]);
  sprintf_sgR8((_QWORD *)v308, v309[119]);
  sprintf_sgR8((_QWORD *)v308, v309[120]);
  sprintf_sgR8((_QWORD *)v308, v309[122]);
  sprintf_sgR8((_QWORD *)v308, v309[123]);
  v326 = (_BYTE *)(*(_QWORD *)v308)++;
  *v326 = 10;
  if (*(_QWORD *)v308 >= *(_QWORD *)(v308 + 24))
    *(_QWORD *)v308 = *(_QWORD *)(v308 + 16);
  GNSS_Nav_Debug_Flush_Check(v308);
  print_line_LS(a1, 1);
  print_line_LS(a1, 2);
  print_line_LS(a1, 3);
  print_line_LS(a1, 4);
  print_line_LS(a1, 5);
  v327 = (char **)a1[35];
  if (g_Logging_Cfg >= 7)
  {
    v328 = a1[16];
    v329 = *v327;
    v330 = 75;
    v331 = 1u;
    do
    {
      *v327 = v329 + 1;
      *v329 = v330;
      v329 = *v327;
      if (*v327 >= v327[3])
      {
        v329 = v327[2];
        *v327 = v329;
      }
      v330 = aKfarp[v331++];
    }
    while (v331 != 7);
    *v327 = v329 + 1;
    *v329 = 32;
    v332 = *v327;
    if (*v327 >= v327[3])
      v332 = v327[2];
    *v327 = v332 + 1;
    *v332 = 80;
    if (*v327 >= v327[3])
      *v327 = v327[2];
    sprintf_3d(v327, *(char *)(v328 + 27616));
    v333 = *(double *)(v328 + 27608);
    if (v333 >= 9.89999962)
      v334 = 98.9999962;
    else
      v334 = v333 * 10.0;
    v335 = -0.5;
    if (v334 > 0.0)
      v335 = 0.5;
    v336 = v334 + v335;
    if (v336 <= 2147483650.0)
    {
      if (v336 >= -2147483650.0)
        v337 = (int)v336;
      else
        v337 = 0x80000000;
    }
    else
    {
      v337 = 0x7FFFFFFF;
    }
    sprintf_3f((uint64_t)v327, v337, 2);
    v338 = (*v327)++;
    *v338 = 32;
    v339 = *v327;
    if (*v327 >= v327[3])
      v339 = v327[2];
    *v327 = v339 + 1;
    *v339 = 72;
    if (*v327 >= v327[3])
      *v327 = v327[2];
    sprintf_6d(v327, (int)fmin(*(double *)(v328 + 27568), 99999.0));
    v340 = (*v327)++;
    *v340 = 32;
    v341 = *v327;
    if (*v327 >= v327[3])
      v341 = v327[2];
    *v327 = v341 + 1;
    *v341 = 86;
    if (*v327 >= v327[3])
      *v327 = v327[2];
    sprintf_6d(v327, (int)fmin(*(double *)(v328 + 27576), 99999.0));
    v342 = (*v327)++;
    *v342 = 32;
    v343 = *v327;
    if (*v327 >= v327[3])
      v343 = v327[2];
    *v327 = v343 + 1;
    *v343 = 66;
    if (*v327 >= v327[3])
      *v327 = v327[2];
    sprintf_6d(v327, (int)fmin(*(double *)(v328 + 27584), 99999.0));
    v344 = (*v327)++;
    *v344 = 32;
    v345 = *v327;
    if (*v327 >= v327[3])
      v345 = v327[2];
    *v327 = v345 + 1;
    *v345 = 83;
    if (*v327 >= v327[3])
      *v327 = v327[2];
    sprintf_6d(v327, (int)fmin(*(double *)(v328 + 27592), 99999.0));
    v346 = (*v327)++;
    *v346 = 32;
    v347 = *v327;
    if (*v327 >= v327[3])
      v347 = v327[2];
    *v327 = v347 + 1;
    *v347 = 72;
    if (*v327 >= v327[3])
      *v327 = v327[2];
    sprintf_3d(v327, *(char *)(v328 + 27528));
    v348 = (*v327)++;
    *v348 = 32;
    v349 = *v327;
    if (*v327 >= v327[3])
      v349 = v327[2];
    *v327 = v349 + 1;
    *v349 = 86;
    if (*v327 >= v327[3])
      *v327 = v327[2];
    sprintf_3d(v327, *(char *)(v328 + 27529));
    v350 = (*v327)++;
    *v350 = 32;
    v351 = *v327;
    if (*v327 >= v327[3])
      v351 = v327[2];
    *v327 = v351 + 1;
    *v351 = 66;
    if (*v327 >= v327[3])
      *v327 = v327[2];
    sprintf_3d(v327, *(char *)(v328 + 27530));
    v352 = (*v327)++;
    *v352 = 32;
    v353 = *v327;
    if (*v327 >= v327[3])
      v353 = v327[2];
    *v327 = v353 + 1;
    *v353 = 83;
    if (*v327 >= v327[3])
      *v327 = v327[2];
    sprintf_3d(v327, *(char *)(v328 + 27531));
    v354 = (*v327)++;
    *v354 = 32;
    v355 = *v327;
    if (*v327 >= v327[3])
      v355 = v327[2];
    *v327 = v355 + 1;
    *v355 = 86;
    if (*v327 >= v327[3])
      *v327 = v327[2];
    sprintf_3d(v327, *(char *)(v328 + 27712));
    v356 = *(double *)(v328 + 27704);
    if (v356 >= 9.89999962)
      v357 = 98.9999962;
    else
      v357 = v356 * 10.0;
    v358 = -0.5;
    if (v357 > 0.0)
      v358 = 0.5;
    v359 = v357 + v358;
    if (v359 <= 2147483650.0)
    {
      if (v359 >= -2147483650.0)
        v360 = (int)v359;
      else
        v360 = 0x80000000;
    }
    else
    {
      v360 = 0x7FFFFFFF;
    }
    sprintf_3f((uint64_t)v327, v360, 2);
    v361 = (*v327)++;
    *v361 = 32;
    v362 = *v327;
    if (*v327 >= v327[3])
      v362 = v327[2];
    *v327 = v362 + 1;
    *v362 = 72;
    if (*v327 >= v327[3])
      *v327 = v327[2];
    sprintf_3d(v327, (int)fmin(*(double *)(v328 + 27664), 99.0));
    v363 = (*v327)++;
    *v363 = 32;
    v364 = *v327;
    if (*v327 >= v327[3])
      v364 = v327[2];
    *v327 = v364 + 1;
    *v364 = 86;
    if (*v327 >= v327[3])
      *v327 = v327[2];
    sprintf_3d(v327, (int)fmin(*(double *)(v328 + 27672), 99.0));
    v365 = (*v327)++;
    *v365 = 32;
    v366 = *v327;
    if (*v327 >= v327[3])
      v366 = v327[2];
    *v327 = v366 + 1;
    *v366 = 66;
    if (*v327 >= v327[3])
      *v327 = v327[2];
    sprintf_3d(v327, (int)fmin(*(double *)(v328 + 27680), 99.0));
    v367 = (*v327)++;
    *v367 = 32;
    v368 = *v327;
    if (*v327 >= v327[3])
      v368 = v327[2];
    *v327 = v368 + 1;
    *v368 = 83;
    if (*v327 >= v327[3])
      *v327 = v327[2];
    sprintf_3d(v327, (int)fmin(*(double *)(v328 + 27688), 99.0));
    v369 = (*v327)++;
    *v369 = 32;
    v370 = *v327;
    if (*v327 >= v327[3])
      v370 = v327[2];
    *v327 = v370 + 1;
    *v370 = 72;
    if (*v327 >= v327[3])
      *v327 = v327[2];
    sprintf_4d(v327, *(char *)(v328 + 27624));
    v371 = (*v327)++;
    *v371 = 32;
    v372 = *v327;
    if (*v327 >= v327[3])
      v372 = v327[2];
    *v327 = v372 + 1;
    *v372 = 86;
    if (*v327 >= v327[3])
      *v327 = v327[2];
    sprintf_4d(v327, *(char *)(v328 + 27625));
    v373 = (*v327)++;
    *v373 = 32;
    v374 = *v327;
    if (*v327 >= v327[3])
      v374 = v327[2];
    *v327 = v374 + 1;
    *v374 = 66;
    if (*v327 >= v327[3])
      *v327 = v327[2];
    sprintf_4d(v327, *(char *)(v328 + 27626));
    v375 = (*v327)++;
    *v375 = 32;
    v376 = *v327;
    if (*v327 >= v327[3])
      v376 = v327[2];
    *v327 = v376 + 1;
    *v376 = 83;
    if (*v327 >= v327[3])
      *v327 = v327[2];
    sprintf_4d(v327, *(char *)(v328 + 27627));
    v377 = (*v327)++;
    *v377 = 10;
    if (*v327 >= v327[3])
      *v327 = v327[2];
    GNSS_Nav_Debug_Flush_Check((uint64_t)v327);
    v327 = (char **)a1[35];
  }
  v378 = a1[7];
  v379 = a1[5];
  v380 = (unsigned __int8 *)(v379 + 8822);
  v381 = (_BYTE *)v1427[9];
  v382 = *v327;
  v383 = 78;
  v384 = 1u;
  do
  {
    *v327 = v382 + 1;
    *v382 = v383;
    v382 = *v327;
    if (*v327 >= v327[3])
    {
      v382 = v327[2];
      *v327 = v382;
    }
    v383 = aNavm[v384++];
  }
  while (v384 != 7);
  if (v381[22])
  {
    v385 = 0;
    v386 = 0;
    v387 = 31;
    v388 = 224;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(v378 + 80) + v385))
        v389 = 65;
      else
        v389 = 45;
      if (*(_BYTE *)(*(_QWORD *)(v378 + 64) + v385) || *(_BYTE *)(*(_QWORD *)(v378 + 72) + v385))
        v389 += 24;
      if (!*(_BYTE *)(*(_QWORD *)v378 + v385))
        v389 += 32;
      if (v389 == 77)
        v389 = 46;
      if (*(_BYTE *)(*(_QWORD *)(v378 + 64) + v385))
        v390 = *(_BYTE *)(*(_QWORD *)v378 + v385) == 0;
      else
        v390 = 1;
      if (!v390 && *(_DWORD *)(v378 + v388) == 0xFFFFFF)
        v386 = v386 | (1 << v387);
      *v327 = v382 + 1;
      *v382 = v389;
      v382 = *v327;
      if (*v327 >= v327[3])
      {
        v382 = v327[2];
        *v327 = v382;
      }
      if ((~(_BYTE)v385 & 3) == 0)
      {
        *v327 = v382 + 1;
        *v382 = 32;
        v382 = *v327;
        if (*v327 >= v327[3])
        {
          v382 = v327[2];
          *v327 = v382;
        }
      }
      ++v385;
      --v387;
      v388 += 116;
    }
    while (v385 != 32);
    v391 = 32;
    v392 = 1u;
    do
    {
      *v327 = v382 + 1;
      *v382 = v391;
      v382 = *v327;
      if (*v327 >= v327[3])
      {
        v382 = v327[2];
        *v327 = v382;
      }
      v391 = asc_24BBE414B[v392++];
    }
    while (v392 != 8);
    for (m = 0; m != 32; ++m)
    {
      if (v381[m + 249])
      {
        LOBYTE(v394) = 46;
      }
      else if (v381[m + 528])
      {
        LOBYTE(v394) = 58;
      }
      else
      {
        v395 = *(_DWORD *)(v379 + 7720 + 4 * m);
        v1115 = v395 > 2;
        v394 = 0x6E564Du >> (8 * v395);
        if (v1115)
          LOBYTE(v394) = 120;
      }
      *v327 = v382 + 1;
      *v382 = v394;
      v382 = *v327;
      if (*v327 >= v327[3])
      {
        v382 = v327[2];
        *v327 = v382;
      }
      if ((~(_BYTE)m & 3) == 0)
      {
        *v327 = v382 + 1;
        *v382 = 32;
        v382 = *v327;
        if (*v327 >= v327[3])
        {
          v382 = v327[2];
          *v327 = v382;
        }
      }
    }
    v396 = 0;
    v397 = 32;
    do
    {
      *v327 = v382 + 1;
      *v382 = v397;
      v382 = *v327;
      if (*v327 >= v327[3])
      {
        v382 = v327[2];
        *v327 = v382;
      }
      v397 = asc_24BBE4153[++v396];
    }
    while (v396 != 8);
    LOBYTE(v1482[0]) = hexTABLE[(unint64_t)v386 >> 28];
    BYTE1(v1482[0]) = hexTABLE[(v386 >> 24) & 0xF];
    hex6((uint64_t)v327, v386, v1482, 2);
    sprintf_sp1d(v327, *(_DWORD *)(v378 + 8956));
    sprintf_sp1d(v327, *(_DWORD *)(v378 + 8972));
    v382 = *v327;
  }
  else
  {
    v398 = 71;
    v399 = 1u;
    do
    {
      *v327 = v382 + 1;
      *v382 = v398;
      v382 = *v327;
      if (*v327 >= v327[3])
      {
        v382 = v327[2];
        *v327 = v382;
      }
      v398 = aGpsDisabled[v399++];
    }
    while (v399 != 15);
  }
  v400 = 32;
  v401 = 1u;
  do
  {
    *v327 = v382 + 1;
    *v382 = v400;
    v382 = *v327;
    if (*v327 >= v327[3])
    {
      v382 = v327[2];
      *v327 = v382;
    }
    v400 = aQzss[v401++];
  }
  while (v401 != 8);
  if (v381[24])
  {
    v402 = 0;
    v403 = 0;
    v404 = (_DWORD *)(v378 + 9256);
    v405 = 9;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(v378 + 9112) + v402))
        v406 = 65;
      else
        v406 = 45;
      if (*(_BYTE *)(*(_QWORD *)(v378 + 9096) + v402) || *(_BYTE *)(*(_QWORD *)(v378 + 9104) + v402))
        v406 += 24;
      if (!*(_BYTE *)(*(_QWORD *)(v378 + 9032) + v402))
        v406 += 32;
      if (v406 == 77)
        v406 = 46;
      if (*(_BYTE *)(*(_QWORD *)(v378 + 9096) + v402))
        v407 = *(_BYTE *)(*(_QWORD *)(v378 + 9032) + v402) == 0;
      else
        v407 = 1;
      if (!v407)
      {
        if (*v404 == 0xFFFFFF)
          v403 = v403 | (1 << v405);
        else
          v403 = v403;
      }
      *v327 = v382 + 1;
      *v382 = v406;
      v382 = *v327;
      if (*v327 >= v327[3])
      {
        v382 = v327[2];
        *v327 = v382;
      }
      ++v402;
      --v405;
      v404 += 29;
    }
    while (v402 != 10);
    *v327 = v382 + 1;
    *v382 = 32;
    v408 = *v327;
    if (*v327 >= v327[3])
      v408 = v327[2];
    for (n = 0; n != 10; ++n)
    {
      if (v381[n + 404])
      {
        LOBYTE(v410) = 46;
      }
      else if (v381[n + 683])
      {
        LOBYTE(v410) = 58;
      }
      else
      {
        v411 = *(_DWORD *)(v379 + 8340 + 4 * n);
        v1115 = v411 > 2;
        v410 = 0x6E564Du >> (8 * v411);
        if (v1115)
          LOBYTE(v410) = 120;
      }
      *v327 = v408 + 1;
      *v408 = v410;
      v408 = *v327;
      if (*v327 >= v327[3])
      {
        v408 = v327[2];
        *v327 = v408;
      }
    }
    *v327 = v408 + 1;
    *v408 = 32;
    if (*v327 >= v327[3])
      *v327 = v327[2];
    sprintf_03x(v327, v403);
    v382 = *v327;
  }
  else
  {
    v412 = 68;
    v413 = 1u;
    do
    {
      *v327 = v382 + 1;
      *v382 = v412;
      v382 = *v327;
      if (*v327 >= v327[3])
      {
        v382 = v327[2];
        *v327 = v382;
      }
      v412 = aDisabled[v413++];
    }
    while (v413 != 11);
  }
  v414 = 32;
  v415 = 1u;
  do
  {
    *v327 = v382 + 1;
    *v382 = v414;
    v382 = *v327;
    if (*v327 >= v327[3])
    {
      v382 = v327[2];
      *v327 = v382;
    }
    v414 = aSbas[v415++];
  }
  while (v415 != 8);
  if (v381[25])
  {
    v416 = 0;
    v417 = v379 + 8783;
    v418 = v1427;
    do
    {
      v419 = *(unsigned __int8 *)(v417 + v416);
      if (v419 >= 3)
        v420 = 90;
      else
        v420 = 0x41452Du >> (8 * v419);
      *v327 = v382 + 1;
      *v382 = v420;
      v382 = *v327;
      if (*v327 >= v327[3])
      {
        v382 = v327[2];
        *v327 = v382;
      }
      ++v416;
    }
    while (v416 != 39);
    sprintf_sp1d(v327, *v380);
    sprintf_sp1d(v327, v380[1]);
    v382 = *v327;
  }
  else
  {
    v421 = 68;
    v422 = 1u;
    v418 = v1427;
    do
    {
      *v327 = v382 + 1;
      *v382 = v421;
      v382 = *v327;
      if (*v327 >= v327[3])
      {
        v382 = v327[2];
        *v327 = v382;
      }
      v421 = aDisabled_0[v422++];
    }
    while (v422 != 10);
  }
  *v327 = v382 + 1;
  *v382 = 10;
  if (*v327 >= v327[3])
    *v327 = v327[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v327);
  v423 = v418[35];
  v424 = v418[9];
  v425 = (_QWORD *)v418[7];
  v426 = (char *)v425 + 11988;
  v427 = v418[5];
  v428 = v418[16];
  v429 = *(char **)v423;
  v430 = 71;
  v431 = 1u;
  do
  {
    *(_QWORD *)v423 = v429 + 1;
    *v429 = v430;
    v429 = *(char **)v423;
    if (*(_QWORD *)v423 >= *(_QWORD *)(v423 + 24))
    {
      v429 = *(char **)(v423 + 16);
      *(_QWORD *)v423 = v429;
    }
    v430 = aGlom[v431++];
  }
  while (v431 != 7);
  if (*(_BYTE *)(v424 + 23))
  {
    v432 = 0;
    v433 = 0;
    v434 = 23;
    v435 = (_WORD *)v425 + 5994;
    do
    {
      if (*(_BYTE *)(v425[2148] + v432))
        v436 = 65;
      else
        v436 = 45;
      if (*(_BYTE *)(v425[2146] + v432) || *(_BYTE *)(v425[2147] + v432))
        v436 += 24;
      if (!*(_BYTE *)(v425[1489] + v432))
        v436 += 32;
      if (v436 == 77)
        v436 = 46;
      if (*(_BYTE *)(v425[2146] + v432))
        v437 = *(_BYTE *)(v425[1489] + v432) == 0;
      else
        v437 = 1;
      if (!v437)
      {
        if (*v435 == 4095)
          v433 = v433 | (1 << v434);
        else
          v433 = v433;
      }
      *(_QWORD *)v423 = v429 + 1;
      *v429 = v436;
      v429 = *(char **)v423;
      if (*(_QWORD *)v423 >= *(_QWORD *)(v423 + 24))
      {
        v429 = *(char **)(v423 + 16);
        *(_QWORD *)v423 = v429;
      }
      if ((~(_BYTE)v432 & 3) == 0)
      {
        *(_QWORD *)v423 = v429 + 1;
        *v429 = 32;
        v429 = *(char **)v423;
        if (*(_QWORD *)v423 >= *(_QWORD *)(v423 + 24))
        {
          v429 = *(char **)(v423 + 16);
          *(_QWORD *)v423 = v429;
        }
      }
      ++v432;
      --v434;
      v435 += 32;
    }
    while (v432 != 24);
    v438 = 32;
    v439 = 1u;
    do
    {
      *(_QWORD *)v423 = v429 + 1;
      *v429 = v438;
      v429 = *(char **)v423;
      if (*(_QWORD *)v423 >= *(_QWORD *)(v423 + 24))
      {
        v429 = *(char **)(v423 + 16);
        *(_QWORD *)v423 = v429;
      }
      v438 = asc_24BBE4188[v439++];
    }
    while (v439 != 18);
    v440 = 0;
    v441 = v424 + 281;
    do
    {
      if (*(_BYTE *)(v441 + v440))
      {
        LOBYTE(v442) = 46;
      }
      else
      {
        v443 = *(_DWORD *)(v427 + 7848 + 4 * v440);
        v1115 = v443 > 2;
        v442 = 0x6E564Du >> (8 * v443);
        if (v1115)
          LOBYTE(v442) = 120;
      }
      *(_QWORD *)v423 = v429 + 1;
      *v429 = v442;
      v429 = *(char **)v423;
      if (*(_QWORD *)v423 >= *(_QWORD *)(v423 + 24))
      {
        v429 = *(char **)(v423 + 16);
        *(_QWORD *)v423 = v429;
      }
      if ((~((_BYTE)v440 + 32) & 3) == 0)
      {
        *(_QWORD *)v423 = v429 + 1;
        *v429 = 32;
        v429 = *(char **)v423;
        if (*(_QWORD *)v423 >= *(_QWORD *)(v423 + 24))
        {
          v429 = *(char **)(v423 + 16);
          *(_QWORD *)v423 = v429;
        }
      }
      ++v440;
    }
    while (v440 != 24);
    v444 = 0;
    v445 = v427 + 8600;
    do
    {
      v446 = *(_DWORD *)(v445 + 4 * v444);
      if (v446 >= 3)
        v447 = 120;
      else
        v447 = 0x6E564Du >> (8 * v446);
      *(_QWORD *)v423 = v429 + 1;
      *v429 = v447;
      v429 = *(char **)v423;
      if (*(_QWORD *)v423 >= *(_QWORD *)(v423 + 24))
      {
        v429 = *(char **)(v423 + 16);
        *(_QWORD *)v423 = v429;
      }
      if ((~(_BYTE)v444 & 3) == 0)
      {
        *(_QWORD *)v423 = v429 + 1;
        *v429 = 32;
        v429 = *(char **)v423;
        if (*(_QWORD *)v423 >= *(_QWORD *)(v423 + 24))
        {
          v429 = *(char **)(v423 + 16);
          *(_QWORD *)v423 = v429;
        }
      }
      ++v444;
    }
    while (v444 != 14);
    *(_QWORD *)v423 = v429 + 1;
    *v429 = 32;
    if (*(_QWORD *)v423 >= *(_QWORD *)(v423 + 24))
      *(_QWORD *)v423 = *(_QWORD *)(v423 + 16);
    sprintf_06x((char **)v423, v433);
    v448 = *(char **)v423;
    for (ii = 3; ii > 1; --ii)
    {
      *(_QWORD *)v423 = v448 + 1;
      *v448 = 32;
      v448 = *(char **)v423;
      if (*(_QWORD *)v423 >= *(_QWORD *)(v423 + 24))
      {
        v448 = *(char **)(v423 + 16);
        *(_QWORD *)v423 = v448;
      }
    }
    v450 = *((_DWORD *)v426 + 1282);
    if (v450 >= 0)
      v451 = *((_DWORD *)v426 + 1282);
    else
      v451 = -v450;
    sprintf1da((_QWORD *)v423, v451, v1482, 0, v450 >> 31);
    sprintf_sgR8((_QWORD *)v423, (double)*((int *)v426 + 1286) * 9.31322575e-10 * 299792458.0);
    sprintf_sgR8((_QWORD *)v423, *(double *)(v428 + 15528));
    v452 = (_BYTE *)(*(_QWORD *)v423)++;
    *v452 = 10;
    if (*(_QWORD *)v423 >= *(_QWORD *)(v423 + 24))
      *(_QWORD *)v423 = *(_QWORD *)(v423 + 16);
    GNSS_Nav_Debug_Flush_Check(v423);
  }
  else
  {
    v453 = 68;
    v454 = 1u;
    do
    {
      *(_QWORD *)v423 = v429 + 1;
      *v429 = v453;
      v429 = *(char **)v423;
      if (*(_QWORD *)v423 >= *(_QWORD *)(v423 + 24))
      {
        v429 = *(char **)(v423 + 16);
        *(_QWORD *)v423 = v429;
      }
      v453 = aDisabled_0[v454++];
    }
    while (v454 != 10);
    *(_QWORD *)v423 = v429 + 1;
    *v429 = 10;
    if (*(_QWORD *)v423 >= *(_QWORD *)(v423 + 24))
      *(_QWORD *)v423 = *(_QWORD *)(v423 + 16);
  }
  v455 = (char **)v418[35];
  v457 = v418[6];
  v456 = v418[7];
  v458 = v418[9];
  v459 = v418[5];
  v460 = v418[16];
  v461 = v418[21];
  v462 = *v455;
  v463 = 71;
  v464 = 1u;
  do
  {
    *v455 = v462 + 1;
    *v462 = v463;
    v462 = *v455;
    if (*v455 >= v455[3])
    {
      v462 = v455[2];
      *v455 = v462;
    }
    v463 = aGalm[v464++];
  }
  while (v464 != 7);
  if (*(_BYTE *)(v458 + 27))
  {
    v465 = 0;
    v466 = 0;
    v467 = 35;
    while (1)
    {
      if (*(_BYTE *)(*(_QWORD *)(v456 + 17632) + v465))
        v468 = 65;
      else
        v468 = 45;
      if (*(_BYTE *)(*(_QWORD *)(v456 + 17616) + v465) || *(_BYTE *)(*(_QWORD *)(v456 + 17624) + v465))
        v468 += 24;
      if (!*(_BYTE *)(*(_QWORD *)(v456 + 17552) + v465))
        v468 += 32;
      if (v468 == 77)
      {
        v468 = 46;
      }
      else if (*(_BYTE *)(v456 + 17672 + v465))
      {
        if (!*(_BYTE *)(*(_QWORD *)(v456 + 17616) + v465))
        {
          if (*(_BYTE *)(*(_QWORD *)(v456 + 17624) + v465))
            v468 = 77;
          else
            v468 = 109;
          goto LABEL_809;
        }
        v468 = 77;
LABEL_806:
        if (*(_BYTE *)(*(_QWORD *)(v456 + 17552) + v465))
          v466 = v466 | (1 << v467);
        else
          v466 = v466;
        goto LABEL_809;
      }
      if (*(_BYTE *)(*(_QWORD *)(v456 + 17616) + v465))
        goto LABEL_806;
LABEL_809:
      *v455 = v462 + 1;
      *v462 = v468;
      v462 = *v455;
      if (*v455 >= v455[3])
      {
        v462 = v455[2];
        *v455 = v462;
      }
      if ((~(_BYTE)v465 & 3) == 0)
      {
        *v455 = v462 + 1;
        *v462 = 32;
        v462 = *v455;
        if (*v455 >= v455[3])
        {
          v462 = v455[2];
          *v455 = v462;
        }
      }
      ++v465;
      --v467;
      if (v465 == 36)
      {
        v469 = 0;
        v470 = 32;
        do
        {
          *v455 = v462 + 1;
          *v462 = v470;
          v462 = *v455;
          if (*v455 >= v455[3])
          {
            v462 = v455[2];
            *v455 = v462;
          }
          v470 = asc_24BBE405D[++v469];
        }
        while (v469 != 2);
        v471 = 0;
        v472 = v459 + 7944;
        do
        {
          if (*(_BYTE *)(v458 + v471 + 305))
          {
            LOBYTE(v473) = 46;
          }
          else if (*(_BYTE *)(v458 + v471 + 584))
          {
            LOBYTE(v473) = 58;
          }
          else
          {
            v474 = *(_DWORD *)(v472 + 4 * v471);
            v1115 = v474 > 2;
            v473 = 0x6E564Du >> (8 * v474);
            if (v1115)
              LOBYTE(v473) = 120;
          }
          *v455 = v462 + 1;
          *v462 = v473;
          v462 = *v455;
          if (*v455 >= v455[3])
          {
            v462 = v455[2];
            *v455 = v462;
          }
          if ((~((_BYTE)v471 + 56) & 3) == 0)
          {
            *v455 = v462 + 1;
            *v462 = 32;
            v462 = *v455;
            if (*v455 >= v455[3])
            {
              v462 = v455[2];
              *v455 = v462;
            }
          }
          ++v471;
        }
        while (v471 != 36);
        v475 = 32;
        v476 = 1u;
        do
        {
          *v455 = v462 + 1;
          *v462 = v475;
          v462 = *v455;
          if (*v455 >= v455[3])
          {
            v462 = v455[2];
            *v455 = v462;
          }
          v475 = asc_24BBE41B0[v476++];
        }
        while (v476 != 4);
        LOBYTE(v1482[0]) = hexTABLE[(unint64_t)v466 >> 28];
        BYTE1(v1482[0]) = hexTABLE[(v466 >> 24) & 0xF];
        hex6((uint64_t)v455, v466, v1482, 2);
        sprintf_sp1d(v455, *(_DWORD *)(v456 + 25344));
        v477 = 0.0;
        if ((*(_DWORD *)(v456 + 25344) - 2) < 5)
        {
          v477 = *(double *)(v456 + 25368);
          if (*(int *)v457 >= 1)
          {
            if (*(_BYTE *)(v457 + 16))
              v477 = *(double *)(v461 + 1496);
          }
        }
        sprintf_sgR8(v455, v477 * 299792458.0);
        sprintf_sgR8(v455, *(double *)(v460 + 15544));
        v478 = (*v455)++;
        *v478 = 10;
        if (*v455 >= v455[3])
          *v455 = v455[2];
        GNSS_Nav_Debug_Flush_Check((uint64_t)v455);
        goto LABEL_852;
      }
    }
  }
  v479 = 71;
  v480 = 1u;
  do
  {
    *v455 = v462 + 1;
    *v462 = v479;
    v462 = *v455;
    if (*v455 >= v455[3])
    {
      v462 = v455[2];
      *v455 = v462;
    }
    v479 = aGalDisabled[v480++];
  }
  while (v480 != 15);
  *v455 = v462 + 1;
  *v462 = 10;
  if (*v455 >= v455[3])
    *v455 = v455[2];
LABEL_852:
  v481 = (char **)v1427[35];
  v483 = v1427[6];
  v482 = (_QWORD *)v1427[7];
  v484 = (double *)(v482 + 5930);
  v485 = v1427[9];
  v486 = v1427[5];
  v487 = v1427[16];
  v488 = *v481;
  v489 = 66;
  v490 = 1u;
  do
  {
    *v481 = v488 + 1;
    *v488 = v489;
    v488 = *v481;
    if (*v481 >= v481[3])
    {
      v488 = v481[2];
      *v481 = v488;
    }
    v489 = aBdsm[v490++];
  }
  while (v490 != 7);
  if (*(_BYTE *)(v485 + 26))
  {
    for (jj = 0; jj != 63; ++jj)
    {
      if (*(_BYTE *)(v482[3184] + jj))
        v492 = 65;
      else
        v492 = 45;
      if (*(_BYTE *)(v482[3182] + jj) || *(_BYTE *)(v482[3183] + jj))
        v492 += 24;
      if (!*(_BYTE *)(v482[3174] + jj))
        v492 += 32;
      if (v492 == 77)
        v492 = 46;
      *v481 = v488 + 1;
      *v488 = v492;
      v488 = *v481;
      if (*v481 >= v481[3])
      {
        v488 = v481[2];
        *v481 = v488;
      }
      if ((~(_BYTE)jj & 3) == 0)
      {
        *v481 = v488 + 1;
        *v488 = 32;
        v488 = *v481;
        if (*v481 >= v481[3])
        {
          v488 = v481[2];
          *v481 = v488;
        }
      }
    }
    v493 = 32;
    v494 = 1u;
    do
    {
      *v481 = v488 + 1;
      *v488 = v493;
      v488 = *v481;
      if (*v481 >= v481[3])
      {
        v488 = v481[2];
        *v481 = v488;
      }
      v493 = asc_24BBE41B0[v494++];
    }
    while (v494 != 4);
    v495 = 0;
    v496 = v486 + 8088;
    do
    {
      if (*(_BYTE *)(v485 + v495 + 341))
      {
        LOBYTE(v497) = 46;
      }
      else if (*(_BYTE *)(v485 + v495 + 620))
      {
        LOBYTE(v497) = 58;
      }
      else
      {
        v498 = *(_DWORD *)(v496 + 4 * v495);
        v1115 = v498 > 2;
        v497 = 0x6E564Du >> (8 * v498);
        if (v1115)
          LOBYTE(v497) = 120;
      }
      *v481 = v488 + 1;
      *v488 = v497;
      v488 = *v481;
      if (*v481 >= v481[3])
      {
        v488 = v481[2];
        *v481 = v488;
      }
      if ((~((_BYTE)v495 + 92) & 3) == 0)
      {
        *v481 = v488 + 1;
        *v488 = 32;
        v488 = *v481;
        if (*v481 >= v481[3])
        {
          v488 = v481[2];
          *v481 = v488;
        }
      }
      ++v495;
    }
    while (v495 != 63);
    *v481 = v488 + 1;
    *v488 = 32;
    if (*v481 >= v481[3])
      *v481 = v481[2];
    sprintf_sp1d(v481, *(_DWORD *)v484);
    v500 = 0.0;
    if ((*(_DWORD *)v484 - 2) < 5)
    {
      v500 = v484[9];
      if (*(int *)v483 >= 1)
      {
        if (*(_BYTE *)(v483 + 16))
        {
          LODWORD(v499) = *((_DWORD *)v484 + 2);
          v501 = *(double *)(v483 + 32)
               - (double)v499
               + (double)(604800 * (*(__int16 *)(v483 + 28) - *((unsigned __int16 *)v484 + 2)));
          v502 = (int)v501;
          if ((int)v501 < 0)
            v502 = -v502;
          if (v502 >> 5 <= 0xE0)
            v500 = v500 + v484[10] * v501;
        }
      }
    }
    sprintf_sgR8(v481, v500 * 299792458.0);
    sprintf_sgR8(v481, *(double *)(v487 + 15560));
    sprintf_sgR8(v481, v484[14] * 299792458.0);
    v503 = (*v481)++;
    *v503 = 10;
    if (*v481 >= v481[3])
      *v481 = v481[2];
    GNSS_Nav_Debug_Flush_Check((uint64_t)v481);
  }
  else
  {
    v504 = 66;
    v505 = 1u;
    do
    {
      *v481 = v488 + 1;
      *v488 = v504;
      v488 = *v481;
      if (*v481 >= v481[3])
      {
        v488 = v481[2];
        *v481 = v488;
      }
      v504 = aBdsDisabled[v505++];
    }
    while (v505 != 15);
    *v481 = v488 + 1;
    *v488 = 10;
    if (*v481 >= v481[3])
      *v481 = v481[2];
  }
  v506 = (char **)v1427[35];
  v507 = v1427[6];
  v508 = v1427[7] + 47584;
  v509 = v1427[9];
  v510 = v1427[5];
  v511 = v1427[16];
  v512 = *v506;
  v513 = 78;
  v514 = 1u;
  do
  {
    *v506 = v512 + 1;
    *v512 = v513;
    v512 = *v506;
    if (*v506 >= v506[3])
    {
      v512 = v506[2];
      *v506 = v512;
    }
    v513 = aNvcm[v514++];
  }
  while (v514 != 7);
  if (*(_BYTE *)(v509 + 28))
  {
    for (kk = 0; kk != 14; ++kk)
    {
      if (*(_BYTE *)(*(_QWORD *)(v508 + 72) + kk))
        v516 = 65;
      else
        v516 = 45;
      if (*(_BYTE *)(*(_QWORD *)(v508 + 56) + kk) || *(_BYTE *)(*(_QWORD *)(v508 + 64) + kk))
        v516 += 24;
      if (!*(_BYTE *)(*(_QWORD *)v508 + kk))
        v516 += 32;
      if (v516 == 77)
        v516 = 58;
      *v506 = v512 + 1;
      *v512 = v516;
      v512 = *v506;
      if (*v506 >= v506[3])
      {
        v512 = v506[2];
        *v506 = v512;
      }
      if ((~(_BYTE)kk & 3) == 0)
      {
        *v506 = v512 + 1;
        *v512 = 32;
        v512 = *v506;
        if (*v506 >= v506[3])
        {
          v512 = v506[2];
          *v506 = v512;
        }
      }
    }
    v517 = 32;
    v518 = 1u;
    do
    {
      *v506 = v512 + 1;
      *v512 = v517;
      v512 = *v506;
      if (*v506 >= v506[3])
      {
        v512 = v506[2];
        *v506 = v512;
      }
      v517 = asc_24BBE41B0[v518++];
    }
    while (v518 != 4);
    v519 = 0;
    v520 = v510 + 8380;
    v521 = v509 + 693;
    v522 = v1427;
    do
    {
      if (*(_BYTE *)(v521 + v519))
      {
        LOBYTE(v523) = 58;
      }
      else
      {
        v524 = *(_DWORD *)(v520 + 4 * v519);
        v1115 = v524 > 2;
        v523 = 0x6E564Du >> (8 * v524);
        if (v1115)
          LOBYTE(v523) = 120;
      }
      *v506 = v512 + 1;
      *v512 = v523;
      v512 = *v506;
      if (*v506 >= v506[3])
      {
        v512 = v506[2];
        *v506 = v512;
      }
      if ((~((_BYTE)v519 - 91) & 3) == 0)
      {
        *v506 = v512 + 1;
        *v512 = 32;
        v512 = *v506;
        if (*v506 >= v506[3])
        {
          v512 = v506[2];
          *v506 = v512;
        }
      }
      ++v519;
    }
    while (v519 != 14);
    *v506 = v512 + 1;
    *v512 = 32;
    if (*v506 >= v506[3])
      *v506 = v506[2];
    sprintf_sp1d(v506, *(_DWORD *)(v508 + 2972));
    v525 = 0.0;
    if ((*(_DWORD *)(v508 + 2972) - 2) < 5 && *(int *)v507 >= 1)
    {
      v525 = *(double *)(v508 + 3000);
      if (*(_BYTE *)(v507 + 16))
      {
        if (*(__int16 *)(v508 + 3028) - *(__int16 *)(v507 + 28) >= 0)
          v526 = -((*(__int16 *)(v508 + 3028) - *(__int16 *)(v507 + 28)) & 0x3FF);
        else
          v526 = (*(_WORD *)(v507 + 28) - *(_WORD *)(v508 + 3028)) & 0x3FF;
        if (v526 > 511)
          v526 -= 1024;
        if (v526 < -512)
          v526 += 1024;
        v527 = *(double *)(v507 + 32) - (double)*(int *)(v508 + 3024) + (double)(604800 * v526);
        v525 = v525 + *(double *)(v508 + 3008) * v527 + *(double *)(v508 + 3016) * (v527 * v527);
      }
    }
    sprintf_sgR8(v506, v525 * 299792458.0);
    sprintf_sgR8(v506, *(double *)(v511 + 15576));
    v528 = (*v506)++;
    *v528 = 10;
    if (*v506 >= v506[3])
      *v506 = v506[2];
    GNSS_Nav_Debug_Flush_Check((uint64_t)v506);
  }
  else
  {
    v529 = 0;
    v530 = 78;
    v522 = v1427;
    do
    {
      *v506 = v512 + 1;
      *v512 = v530;
      v512 = *v506;
      if (*v506 >= v506[3])
      {
        v512 = v506[2];
        *v506 = v512;
      }
      v530 = aNavicDisabled[++v529];
    }
    while (v529 != 16);
    *v506 = v512 + 1;
    *v512 = 10;
    if (*v506 >= v506[3])
      *v506 = v506[2];
  }
  v531 = (char **)v522[35];
  if (g_Logging_Cfg >= 5)
  {
    v532 = v522[11];
    v533 = v522[6];
    v534 = 83;
    v535 = 1u;
    v536 = *v531;
    do
    {
      *v531 = v536 + 1;
      *v536 = v534;
      v536 = *v531;
      if (*v531 >= v531[3])
      {
        v536 = v531[2];
        *v531 = v536;
      }
      v534 = aStage[v535++];
    }
    while (v535 != 7);
    v537 = v532 + 160;
    v538 = 197;
    do
    {
      if (*(_DWORD *)(v537 + 16))
      {
        v539 = (int)*(double *)(v533 + 32)
             - *(_DWORD *)v537
             + 604800 * (*(__int16 *)(v533 + 28) - *(__int16 *)(v537 + 4));
        if (v539 >= 99)
          v539 = 99;
        if (v539 <= -99)
          v540 = -99;
        else
          v540 = v539;
        sprintf_sp1d(v531, v540);
      }
      v537 += 192;
      --v538;
    }
    while (v538);
    v541 = (*v531)++;
    *v541 = 10;
    if (*v531 >= v531[3])
      *v531 = v531[2];
    GNSS_Nav_Debug_Flush_Check((uint64_t)v531);
    v531 = (char **)v522[35];
  }
  v542 = (unsigned __int8 *)v522[10];
  v543 = (double *)(v522[21] + 61688);
  v544 = v522[30];
  v545 = *v531;
  v546 = 65;
  v547 = 1u;
  do
  {
    *v531 = v545 + 1;
    *v545 = v546;
    v545 = *v531;
    if (*v531 >= v531[3])
    {
      v545 = v531[2];
      *v531 = v545;
    }
    v546 = aAcc[v547++];
  }
  while (v547 != 6);
  sprintf_2d(v531, *((_DWORD *)v542 + 1));
  sprintf_2d(v531, *((_DWORD *)v542 + 2));
  sprintf_2d(v531, *v542);
  sprintf_2d(v531, v542[1]);
  v548 = (*v531)++;
  *v548 = 32;
  if (*v531 >= v531[3])
    *v531 = v531[2];
  sprintf_ACC(v531, *((double *)v542 + 105));
  v549 = (*v531)++;
  *v549 = 32;
  if (*v531 >= v531[3])
    *v531 = v531[2];
  sprintf_ACC(v531, *((double *)v542 + 106));
  v550 = (*v531)++;
  *v550 = 32;
  if (*v531 >= v531[3])
    *v531 = v531[2];
  sprintf_ACC(v531, *((double *)v542 + 107));
  v551 = (*v531)++;
  *v551 = 32;
  v552 = *v531;
  if (*v531 >= v531[3])
  {
    v552 = v531[2];
    *v531 = v552;
  }
  v553 = *((double *)v542 + 109);
  if (v553 <= 99999.0 || v553 >= 8999100.0)
  {
    sprintf_ACC(v531, v553);
  }
  else
  {
    v554 = v553 / 299792.458;
    if (v554 <= 9999.0)
    {
      if (v554 <= 9.9)
      {
        v1418 = v554 * -100.0;
        v1419 = -0.5;
        if (v1418 > 0.0)
          v1419 = 0.5;
        v1420 = v1418 + v1419;
        if (v1420 <= 2147483650.0)
        {
          if (v1420 >= -2147483650.0)
            v1421 = (int)v1420;
          else
            v1421 = 0x80000000;
        }
        else
        {
          v1421 = 0x7FFFFFFF;
        }
        sprintf_4f((uint64_t)v531, v1421, 3);
      }
      else
      {
        v926 = -0.5;
        if (v554 < 0.0)
          v926 = 0.5;
        v927 = v926 - v554;
        if (v927 <= 2147483650.0)
        {
          if (v927 >= -2147483650.0)
            v928 = (int)v927;
          else
            v928 = 0x80000000;
        }
        else
        {
          v928 = 0x7FFFFFFF;
        }
        sprintf_5d(v531, v928);
      }
    }
    else
    {
      v555 = 45;
      v556 = 1u;
      do
      {
        *v531 = v552 + 1;
        *v552 = v555;
        v552 = *v531;
        if (*v531 >= v531[3])
        {
          v552 = v531[2];
          *v531 = v552;
        }
        v555 = a9999[v556++];
      }
      while (v556 != 6);
    }
  }
  v557 = (*v531)++;
  *v557 = 32;
  if (*v531 >= v531[3])
    *v531 = v531[2];
  sprintf_ACC(v531, *((double *)v542 + 108));
  v558 = (*v531)++;
  *v558 = 32;
  if (*v531 >= v531[3])
    *v531 = v531[2];
  sprintf_ACC(v531, *((double *)v542 + 110));
  v559 = (*v531)++;
  *v559 = 32;
  if (*v531 >= v531[3])
    *v531 = v531[2];
  sprintf_ACC(v531, *((double *)v542 + 113));
  v560 = (*v531)++;
  *v560 = 32;
  if (*v531 >= v531[3])
    *v531 = v531[2];
  sprintf_ACC(v531, *((double *)v542 + 115));
  v561 = (*v531)++;
  *v561 = 32;
  if (*v531 >= v531[3])
    *v531 = v531[2];
  v562 = *((double *)v542 + 98) * 100.0;
  if (v562 <= 0.0)
    v563 = -0.5;
  else
    v563 = 0.5;
  v564 = v562 + v563;
  if (v564 <= 2147483650.0)
  {
    if (v564 >= -2147483650.0)
      v565 = (int)v564;
    else
      v565 = 0x80000000;
  }
  else
  {
    v565 = 0x7FFFFFFF;
  }
  sprintf_6f((uint64_t)v531, v565, 3);
  v566 = *((double *)v542 + 99) * 100.0;
  if (v566 <= 0.0)
    v567 = -0.5;
  else
    v567 = 0.5;
  v568 = v566 + v567;
  if (v568 <= 2147483650.0)
  {
    if (v568 >= -2147483650.0)
      v569 = (int)v568;
    else
      v569 = 0x80000000;
  }
  else
  {
    v569 = 0x7FFFFFFF;
  }
  sprintf_6f((uint64_t)v531, v569, 3);
  v570 = *((double *)v542 + 100) * 100.0;
  v571 = -0.5;
  if (v570 > 0.0)
    v571 = 0.5;
  v572 = v570 + v571;
  if (v572 <= 2147483650.0)
  {
    if (v572 >= -2147483650.0)
      v573 = (int)v572;
    else
      v573 = 0x80000000;
  }
  else
  {
    v573 = 0x7FFFFFFF;
  }
  sprintf_6f((uint64_t)v531, v573, 3);
  v574 = (*v531)++;
  *v574 = 32;
  if (*v531 >= v531[3])
    *v531 = v531[2];
  sprintf_ACC(v531, *((double *)v542 + 114));
  v575 = 0;
  v576 = *v531;
  v577 = 32;
  do
  {
    *v531 = v576 + 1;
    *v576 = v577;
    v576 = *v531;
    if (*v531 >= v531[3])
    {
      v576 = v531[2];
      *v531 = v576;
    }
    v577 = aEl[++v575];
  }
  while (v575 != 4);
  sprintf_ACC(v531, *((double *)v542 + 116));
  v578 = (*v531)++;
  *v578 = 32;
  if (*v531 >= v531[3])
    *v531 = v531[2];
  sprintf_ACC(v531, *((double *)v542 + 117));
  v579 = (*v531)++;
  *v579 = 32;
  if (*v531 >= v531[3])
    *v531 = v531[2];
  sprintf_ACC(v531, *((double *)v542 + 118));
  v580 = *v531;
  for (mm = 5; mm > 1; --mm)
  {
    *v531 = v580 + 1;
    *v580 = 32;
    v580 = *v531;
    if (*v531 >= v531[3])
    {
      v580 = v531[2];
      *v531 = v580;
    }
  }
  sprintf_ACC(v531, *((double *)v542 + 111));
  v582 = (*v531)++;
  *v582 = 32;
  if (*v531 >= v531[3])
    *v531 = v531[2];
  sprintf_ACC(v531, *((double *)v542 + 112));
  v583 = (*v531)++;
  *v583 = 32;
  v584 = *v531;
  if (*v531 >= v531[3])
    v584 = v531[2];
  v585 = 0;
  v586 = 32;
  do
  {
    *v531 = v584 + 1;
    *v584 = v586;
    v584 = *v531;
    if (*v531 >= v531[3])
    {
      v584 = v531[2];
      *v531 = v584;
    }
    v586 = aSf_0[++v585];
  }
  while (v585 != 4);
  v587 = v543[91] * 100.0;
  v588 = -0.5;
  if (v587 > 0.0)
    v588 = 0.5;
  v589 = v587 + v588;
  if (v589 <= 2147483650.0)
  {
    if (v589 >= -2147483650.0)
      v590 = (int)v589;
    else
      v590 = 0x80000000;
  }
  else
  {
    v590 = 0x7FFFFFFF;
  }
  sprintf_3f((uint64_t)v531, v590, 3);
  v591 = (*v531)++;
  *v591 = 32;
  if (*v531 >= v531[3])
    *v531 = v531[2];
  v592 = v543[92] * 100.0;
  v593 = -0.5;
  if (v592 > 0.0)
    v593 = 0.5;
  v594 = v592 + v593;
  if (v594 <= 2147483650.0)
  {
    if (v594 >= -2147483650.0)
      v595 = (int)v594;
    else
      v595 = 0x80000000;
  }
  else
  {
    v595 = 0x7FFFFFFF;
  }
  sprintf_3f((uint64_t)v531, v595, 3);
  v596 = (*v531)++;
  *v596 = 32;
  v597 = *v531;
  if (*v531 >= v531[3])
    v597 = v531[2];
  v598 = 32;
  v599 = 1u;
  do
  {
    *v531 = v597 + 1;
    *v597 = v598;
    v597 = *v531;
    if (*v531 >= v531[3])
    {
      v597 = v531[2];
      *v531 = v597;
    }
    v598 = aFsd[v599++];
  }
  while (v599 != 6);
  sprintf_ACC(v531, *v543);
  v600 = (*v531)++;
  *v600 = 32;
  if (*v531 >= v531[3])
    *v531 = v531[2];
  sprintf_ACC(v531, v543[1]);
  v601 = (*v531)++;
  *v601 = 32;
  if (*v531 >= v531[3])
    *v531 = v531[2];
  sprintf_ACC(v531, v543[2]);
  v602 = (*v531)++;
  *v602 = 32;
  if (*v531 >= v531[3])
    *v531 = v531[2];
  sprintf_ACC(v531, v543[3]);
  v603 = (*v531)++;
  *v603 = 32;
  if (*v531 >= v531[3])
    *v531 = v531[2];
  sprintf_ACC(v531, v543[4]);
  v604 = (*v531)++;
  *v604 = 32;
  if (*v531 >= v531[3])
    *v531 = v531[2];
  sprintf_ACC(v531, v543[5]);
  v605 = *v531;
  if (g_Logging_Cfg >= 7)
  {
    v606 = 0;
    v607 = 32;
    do
    {
      *v531 = v605 + 1;
      *v605 = v607;
      v605 = *v531;
      if (*v531 >= v531[3])
      {
        v605 = v531[2];
        *v531 = v605;
      }
      v607 = aNv[++v606];
    }
    while (v606 != 4);
    v608 = (unsigned int *)(v544 + 32132);
    v609 = 18;
    do
    {
      if (*v608 && (int)*(v608 - 1) >= 1)
        sprintf_4d(v531, *v608);
      v608 += 8;
      --v609;
    }
    while (v609);
    v605 = *v531;
  }
  *v531 = v605 + 1;
  *v605 = 10;
  if (*v531 >= v531[3])
    *v531 = v531[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v531);
  v610 = (char **)v522[35];
  v611 = v522[21];
  v612 = (unsigned __int8 *)(v611 + 62316);
  v613 = *v610;
  v614 = 69;
  v615 = 1u;
  do
  {
    *v610 = v613 + 1;
    *v613 = v614;
    v613 = *v610;
    if (*v610 >= v610[3])
    {
      v613 = v610[2];
      *v610 = v613;
    }
    v614 = aExtp[v615++];
  }
  while (v615 != 7);
  Char_Ass_Status_Edit = Get_Char_Ass_Status_Edit(*(_DWORD *)(v611 + 62288));
  v617 = (*v610)++;
  *v617 = Char_Ass_Status_Edit;
  if (*v610 >= v610[3])
    *v610 = v610[2];
  v618 = Get_Char_Ass_Status_Edit(*(_DWORD *)(v611 + 62304));
  v619 = (*v610)++;
  *v619 = v618;
  v620 = *v610;
  if (*v610 >= v610[3])
    v620 = v610[2];
  *v610 = v620 + 1;
  *v620 = 32;
  v621 = *v610;
  if (*v610 >= v610[3])
  {
    v621 = v610[2];
    *v610 = v621;
  }
  if (*(_BYTE *)(v611 + 60200) || *(_BYTE *)(v611 + 60216))
  {
    v622 = 0;
    v623 = 72;
    do
    {
      *v610 = v621 + 1;
      *v621 = v623;
      v621 = *v610;
      if (*v610 >= v610[3])
      {
        v621 = v610[2];
        *v610 = v621;
      }
      v623 = aHor[++v622];
    }
    while (v622 != 4);
    v624 = print_line_ExtP(s_GN_Ptrs *)::ch_MEAS[*(unsigned int *)(v611 + 60204)];
    *v610 = v621 + 1;
    *v621 = v624;
    v625 = *v610;
    if (*v610 >= v610[3])
      v625 = v610[2];
    v626 = 0;
    v627 = 32;
    do
    {
      *v610 = v625 + 1;
      *v625 = v627;
      v625 = *v610;
      if (*v610 >= v610[3])
      {
        v625 = v610[2];
        *v610 = v625;
      }
      v627 = aT[++v626];
    }
    while (v626 != 4);
    v628 = print_line_ExtP(s_GN_Ptrs *)::ch_TRUST[*(unsigned int *)(v611 + 60208)];
    *v610 = v625 + 1;
    *v625 = v628;
    v629 = *v610;
    if (*v610 >= v610[3])
      v629 = v610[2];
    v630 = 0;
    v631 = 32;
    do
    {
      *v610 = v629 + 1;
      *v629 = v631;
      v629 = *v610;
      if (*v610 >= v610[3])
      {
        v629 = v610[2];
        *v610 = v629;
      }
      v631 = aC[++v630];
    }
    while (v630 != 4);
    v632 = print_line_ExtP(s_GN_Ptrs *)::ch_CORREL[*(unsigned int *)(v611 + 60212)];
    *v610 = v629 + 1;
    *v629 = v632;
    v633 = *v610;
    if (*v610 >= v610[3])
      v633 = v610[2];
    v634 = 0;
    v635 = 32;
    do
    {
      *v610 = v633 + 1;
      *v633 = v635;
      v633 = *v610;
      if (*v610 >= v610[3])
      {
        v633 = v610[2];
        *v610 = v633;
      }
      v635 = aE[++v634];
    }
    while (v634 != 4);
    if (*(_BYTE *)(v611 + 60216))
    {
      LOBYTE(v636) = 49;
      strcpy((char *)v1482, "1");
      v637 = 1;
      do
      {
        *v610 = v633 + 1;
        *v633 = v636;
        v633 = *v610;
        if (*v610 >= v610[3])
        {
          v633 = v610[2];
          *v610 = v633;
        }
        v636 = *((unsigned __int8 *)v1482 + v637++);
      }
      while (v636);
    }
    else
    {
      *v610 = v633 + 1;
      *v633 = 45;
      v633 = *v610;
      if (*v610 >= v610[3])
        v633 = v610[2];
    }
    for (nn = 4; nn > 1; --nn)
    {
      *v610 = v633 + 1;
      *v633 = 32;
      v633 = *v610;
      if (*v610 >= v610[3])
      {
        v633 = v610[2];
        *v610 = v633;
      }
    }
    v639 = *(_DWORD *)v611 - *(_DWORD *)(v611 + 60220);
    if (v639 >= -999999)
    {
      v641 = v639 / 1000;
      if (v641 >= 999)
        v640 = 999;
      else
        v640 = v641;
    }
    else
    {
      v640 = -999;
    }
    sprintf_4d(v610, v640);
    v642 = (*v610)++;
    *v642 = 32;
    if (*v610 >= v610[3])
      *v610 = v610[2];
    sprintf_ACC(v610, sqrt(*(double *)(v611 + 60248)));
    v643 = (*v610)++;
    *v643 = 32;
    if (*v610 >= v610[3])
      *v610 = v610[2];
    sprintf_ACC(v610, sqrt(*(double *)(v611 + 60256)));
    v644 = (*v610)++;
    *v644 = 32;
    if (*v610 >= v610[3])
      *v610 = v610[2];
    sprintf_ACC(v610, sqrt(*(double *)(v611 + 60272)));
    v645 = (*v610)++;
    *v645 = 32;
    if (*v610 >= v610[3])
      *v610 = v610[2];
    sprintf_ACC(v610, sqrt(*(double *)(v611 + 60280)));
    v646 = (*v610)++;
    *v646 = 32;
    if (*v610 >= v610[3])
      *v610 = v610[2];
    sprintf_sgR8(v610, *(double *)(v611 + 60288));
    v647 = (*v610)++;
    *v647 = 32;
    if (*v610 >= v610[3])
      *v610 = v610[2];
    sprintf_sgR8(v610, *(double *)(v611 + 60296));
    v648 = (*v610)++;
    *v648 = 32;
    if (*v610 >= v610[3])
      *v610 = v610[2];
    sprintf_sgR8(v610, sqrt(fabs(*(double *)(v611 + 60312))));
    v649 = (*v610)++;
    *v649 = 32;
    if (*v610 >= v610[3])
      *v610 = v610[2];
    sprintf_sgR8(v610, sqrt(fabs(*(double *)(v611 + 60320))));
    v522 = v1427;
    v612 = (unsigned __int8 *)(v611 + 62316);
  }
  if (*(_BYTE *)(v611 + 60328) || *(_BYTE *)(v611 + 60344))
  {
    v650 = *v610;
    v651 = 32;
    v652 = 1u;
    do
    {
      *v610 = v650 + 1;
      *v650 = v651;
      v650 = *v610;
      if (*v610 >= v610[3])
      {
        v650 = v610[2];
        *v610 = v650;
      }
      v651 = aVer_0[v652++];
    }
    while (v652 != 7);
    v653 = print_line_ExtP(s_GN_Ptrs *)::ch_MEAS[*(unsigned int *)(v611 + 60332)];
    *v610 = v650 + 1;
    *v650 = v653;
    v654 = *v610;
    if (*v610 >= v610[3])
      v654 = v610[2];
    v655 = 0;
    v656 = 32;
    do
    {
      *v610 = v654 + 1;
      *v654 = v656;
      v654 = *v610;
      if (*v610 >= v610[3])
      {
        v654 = v610[2];
        *v610 = v654;
      }
      v656 = aT[++v655];
    }
    while (v655 != 4);
    v657 = print_line_ExtP(s_GN_Ptrs *)::ch_TRUST[*(unsigned int *)(v611 + 60336)];
    *v610 = v654 + 1;
    *v654 = v657;
    v658 = *v610;
    if (*v610 >= v610[3])
      v658 = v610[2];
    v659 = 0;
    v660 = 32;
    do
    {
      *v610 = v658 + 1;
      *v658 = v660;
      v658 = *v610;
      if (*v610 >= v610[3])
      {
        v658 = v610[2];
        *v610 = v658;
      }
      v660 = aC[++v659];
    }
    while (v659 != 4);
    v661 = print_line_ExtP(s_GN_Ptrs *)::ch_CORREL[*(unsigned int *)(v611 + 60340)];
    *v610 = v658 + 1;
    *v658 = v661;
    v662 = *v610;
    if (*v610 >= v610[3])
      v662 = v610[2];
    v663 = 0;
    v664 = 32;
    do
    {
      *v610 = v662 + 1;
      *v662 = v664;
      v662 = *v610;
      if (*v610 >= v610[3])
      {
        v662 = v610[2];
        *v610 = v662;
      }
      v664 = aE[++v663];
    }
    while (v663 != 4);
    if (*(_BYTE *)(v611 + 60344))
    {
      LOBYTE(v665) = 49;
      strcpy((char *)v1482, "1");
      v666 = 1;
      do
      {
        *v610 = v662 + 1;
        *v662 = v665;
        v662 = *v610;
        if (*v610 >= v610[3])
        {
          v662 = v610[2];
          *v610 = v662;
        }
        v665 = *((unsigned __int8 *)v1482 + v666++);
      }
      while (v665);
    }
    else
    {
      *v610 = v662 + 1;
      *v662 = 45;
      v662 = *v610;
      if (*v610 >= v610[3])
        v662 = v610[2];
    }
    for (i1 = 4; i1 > 1; --i1)
    {
      *v610 = v662 + 1;
      *v662 = 32;
      v662 = *v610;
      if (*v610 >= v610[3])
      {
        v662 = v610[2];
        *v610 = v662;
      }
    }
    v668 = *(_DWORD *)v611 - *(_DWORD *)(v611 + 60348);
    if (v668 >= -999999)
    {
      if (v668 <= 999999)
        v669 = v668 / 1000;
      else
        v669 = 9999;
    }
    else
    {
      v669 = -9999;
    }
    sprintf_4d(v610, v669);
    v670 = (*v610)++;
    *v670 = 32;
    if (*v610 >= v610[3])
      *v610 = v610[2];
    sprintf_ACC(v610, sqrt(*(double *)(v611 + 60360)));
    v671 = (*v610)++;
    *v671 = 32;
    if (*v610 >= v610[3])
      *v610 = v610[2];
    sprintf_ACC(v610, sqrt(*(double *)(v611 + 60368)));
    v672 = (*v610)++;
    *v672 = 32;
    if (*v610 >= v610[3])
      *v610 = v610[2];
    sprintf_sgR8(v610, *(double *)(v611 + 60376));
    v673 = (*v610)++;
    *v673 = 32;
    if (*v610 >= v610[3])
      *v610 = v610[2];
    sprintf_sgR8(v610, sqrt(fabs(*(double *)(v611 + 60392))));
  }
  v674 = *v610;
  if (*v612)
  {
    v675 = 0;
    v676 = 32;
    do
    {
      *v610 = v674 + 1;
      *v674 = v676;
      v674 = *v610;
      if (*v610 >= v610[3])
      {
        v674 = v610[2];
        *v610 = v674;
      }
      v676 = aTepa[++v675];
    }
    while (v675 != 8);
    sprintf1da(v610, *v612, v1482, 0, 0);
    v677 = (*v610)++;
    *v677 = 32;
    if (*v610 >= v610[3])
      *v610 = v610[2];
    v678 = Get_Char_Ass_Status_Edit(*((_DWORD *)v612 + 1));
    v679 = (*v610)++;
    *v679 = v678;
    v680 = *v610;
    if (*v610 >= v610[3])
      v680 = v610[2];
    for (i2 = 3; i2 > 1; --i2)
    {
      *v610 = v680 + 1;
      *v680 = 32;
      v680 = *v610;
      if (*v610 >= v610[3])
      {
        v680 = v610[2];
        *v610 = v680;
      }
    }
    sprintf_4d(v610, *((_DWORD *)v612 + 3));
    v674 = *v610;
  }
  *v610 = v674 + 1;
  *v674 = 10;
  if (*v610 >= v610[3])
    *v610 = v610[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v610);
  v682 = (char **)v522[35];
  v683 = v522[21];
  v684 = (unsigned __int8 *)(v683 + 62188);
  v685 = (unsigned int *)(v683 + 59928);
  v686 = *v682;
  v687 = 67;
  v688 = 1u;
  do
  {
    *v682 = v686 + 1;
    *v686 = v687;
    v686 = *v682;
    if (*v682 >= v682[3])
    {
      v686 = v682[2];
      *v682 = v686;
    }
    v687 = aCtxt[v688++];
  }
  while (v688 != 7);
  v689 = 0;
  v690 = 85;
  do
  {
    *v682 = v686 + 1;
    *v686 = v690;
    v686 = *v682;
    if (*v682 >= v682[3])
    {
      v686 = v682[2];
      *v682 = v686;
    }
    v690 = aUac[++v689];
  }
  while (v689 != 4);
  sprintf_2d(v682, v684[16]);
  sprintf_2d(v682, v684[24]);
  v691 = (*v682)++;
  *v691 = 32;
  if (*v682 >= v682[3])
    *v682 = v682[2];
  v692 = Get_Char_Ass_Status_Edit(*((_DWORD *)v684 + 5));
  v693 = (*v682)++;
  *v693 = v692;
  v694 = *v682;
  if (*v682 >= v682[3])
    v694 = v682[2];
  *v682 = v694 + 1;
  *v694 = 32;
  if (*v682 >= v682[3])
    *v682 = v682[2];
  sprintf_3f((uint64_t)v682, *((_DWORD *)v684 + 7) / 10, 3);
  v695 = (*v682)++;
  *v695 = 32;
  v696 = *v682;
  if (*v682 >= v682[3])
    v696 = v682[2];
  v697 = print_line_CTXT(s_GN_Ptrs *)::ch_UAC_TXT[v685[3]];
  *v682 = v696 + 1;
  *v696 = v697;
  v698 = *v682;
  if (*v682 >= v682[3])
    v698 = v682[2];
  *v682 = v698 + 1;
  *v698 = 32;
  if (*v682 >= v682[3])
    *v682 = v682[2];
  sprintf_1x(v682, v685[5]);
  v699 = (*v682)++;
  *v699 = 32;
  v700 = *v682;
  if (*v682 >= v682[3])
    v700 = v682[2];
  v701 = print_line_CTXT(s_GN_Ptrs *)::ch_CTXT_SRC[v685[4]];
  *v682 = v700 + 1;
  *v700 = v701;
  v702 = *v682;
  if (*v682 >= v682[3])
    v702 = v682[2];
  v703 = 32;
  v704 = 1u;
  do
  {
    *v682 = v702 + 1;
    *v702 = v703;
    v702 = *v682;
    if (*v682 >= v682[3])
    {
      v702 = v682[2];
      *v682 = v702;
    }
    v703 = aDms[v704++];
  }
  while (v704 != 8);
  sprintf_2d(v682, *v684);
  sprintf_2d(v682, v684[8]);
  v705 = (*v682)++;
  *v705 = 32;
  if (*v682 >= v682[3])
    *v682 = v682[2];
  v706 = Get_Char_Ass_Status_Edit(*((_DWORD *)v684 + 1));
  v707 = (*v682)++;
  *v707 = v706;
  v708 = *v682;
  if (*v682 >= v682[3])
    v708 = v682[2];
  *v682 = v708 + 1;
  *v708 = 32;
  if (*v682 >= v682[3])
    *v682 = v682[2];
  sprintf_3f((uint64_t)v682, *((_DWORD *)v684 + 3) / 10, 3);
  v709 = (*v682)++;
  *v709 = 32;
  v710 = *v682;
  if (*v682 >= v682[3])
    v710 = v682[2];
  v711 = print_line_CTXT(s_GN_Ptrs *)::ch_DMS_STE[*v685];
  *v682 = v710 + 1;
  *v710 = v711;
  v712 = *v682;
  if (*v682 >= v682[3])
    v712 = v682[2];
  *v682 = v712 + 1;
  *v712 = 32;
  if (*v682 >= v682[3])
    *v682 = v682[2];
  sprintf_1x(v682, v685[2]);
  v713 = (*v682)++;
  *v713 = 32;
  v714 = *v682;
  if (*v682 >= v682[3])
    v714 = v682[2];
  v715 = print_line_CTXT(s_GN_Ptrs *)::ch_CTXT_SRC[v685[1]];
  *v682 = v714 + 1;
  *v714 = v715;
  v716 = *v682;
  if (*v682 >= v682[3])
    v716 = v682[2];
  v717 = 32;
  v718 = 1u;
  do
  {
    *v682 = v716 + 1;
    *v716 = v717;
    v716 = *v682;
    if (*v682 >= v682[3])
    {
      v716 = v682[2];
      *v682 = v716;
    }
    v717 = aFiv[v718++];
  }
  while (v718 != 8);
  sprintf_2d(v682, v684[32]);
  sprintf_2d(v682, v684[40]);
  v719 = (*v682)++;
  *v719 = 32;
  if (*v682 >= v682[3])
    *v682 = v682[2];
  v720 = Get_Char_Ass_Status_Edit(*((_DWORD *)v684 + 9));
  v721 = (*v682)++;
  *v721 = v720;
  v722 = *v682;
  if (*v682 >= v682[3])
    v722 = v682[2];
  *v682 = v722 + 1;
  *v722 = 32;
  if (*v682 >= v682[3])
    *v682 = v682[2];
  sprintf_3f((uint64_t)v682, *((_DWORD *)v684 + 11) / 10, 3);
  v723 = (*v682)++;
  *v723 = 32;
  if (*v682 >= v682[3])
    *v682 = v682[2];
  sprintf_1x(v682, v685[6]);
  v724 = (*v682)++;
  *v724 = 32;
  if (*v682 >= v682[3])
    *v682 = v682[2];
  sprintf_1x(v682, v685[8]);
  v725 = (*v682)++;
  *v725 = 32;
  v726 = *v682;
  if (*v682 >= v682[3])
    v726 = v682[2];
  v727 = print_line_CTXT(s_GN_Ptrs *)::ch_CTXT_SRC[v685[7]];
  *v682 = v726 + 1;
  *v726 = v727;
  v728 = *v682;
  if (*v682 >= v682[3])
    v728 = v682[2];
  *v682 = v728 + 1;
  *v728 = 10;
  if (*v682 >= v682[3])
    *v682 = v682[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v682);
  v729 = (char **)v522[35];
  v730 = (unsigned __int8 *)v522[21];
  v731 = v730 + 62252;
  if (v730[62252])
  {
    v732 = (double *)(v730 + 61024);
    v733 = *v729;
    v734 = 77;
    v735 = 1u;
    do
    {
      *v729 = v733 + 1;
      *v733 = v734;
      v733 = *v729;
      if (*v729 >= v729[3])
      {
        v733 = v729[2];
        *v729 = v733;
      }
      v734 = aMapv[v735++];
    }
    while (v735 != 7);
    v736 = 83;
    v737 = 1u;
    do
    {
      *v729 = v733 + 1;
      *v733 = v736;
      v733 = *v729;
      if (*v729 >= v729[3])
      {
        v733 = v729[2];
        *v729 = v733;
      }
      v736 = aStat[v737++];
    }
    while (v737 != 6);
    sprintf_2d(v729, *v731);
    sprintf_2d(v729, v731[8]);
    v738 = (*v729)++;
    *v738 = 32;
    v739 = *v729;
    if (*v729 >= v729[3])
      v739 = v729[2];
    *v729 = v739 + 1;
    *v739 = 101;
    if (*v729 >= v729[3])
      *v729 = v729[2];
    v740 = Get_Char_Ass_Status_Edit(*((_DWORD *)v731 + 1));
    v741 = (*v729)++;
    *v741 = v740;
    v742 = *v729;
    if (*v729 >= v729[3])
      v742 = v729[2];
    v743 = 32;
    v744 = 1u;
    do
    {
      *v729 = v742 + 1;
      *v742 = v743;
      v742 = *v729;
      if (*v729 >= v729[3])
      {
        v742 = v729[2];
        *v729 = v742;
      }
      v743 = aAge[v744++];
    }
    while (v744 != 6);
    sprintf_6d(v729, *((_DWORD *)v731 + 3));
    v745 = 0;
    v746 = *v729;
    v747 = 32;
    do
    {
      *v729 = v746 + 1;
      *v746 = v747;
      v746 = *v729;
      if (*v729 >= v729[3])
      {
        v746 = v729[2];
        *v729 = v746;
      }
      v747 = aAt[++v745];
    }
    while (v745 != 4);
    sprintf_sgR8(v729, v732[30]);
    v748 = 0;
    v749 = *v729;
    v750 = 32;
    do
    {
      *v729 = v749 + 1;
      *v749 = v750;
      v749 = *v729;
      if (*v729 >= v729[3])
      {
        v749 = v729[2];
        *v729 = v749;
      }
      v750 = aCt[++v748];
    }
    while (v748 != 4);
    sprintf_sgR8(v729, v732[31]);
    v751 = 0;
    v752 = *v729;
    v753 = 32;
    do
    {
      *v729 = v752 + 1;
      *v752 = v753;
      v752 = *v729;
      if (*v729 >= v729[3])
      {
        v752 = v729[2];
        *v729 = v752;
      }
      v753 = aHd[++v751];
    }
    while (v751 != 4);
    sprintf_sgR8(v729, v732[32]);
    v754 = 0;
    v755 = *v729;
    v756 = 32;
    do
    {
      *v729 = v755 + 1;
      *v755 = v756;
      v755 = *v729;
      if (*v729 >= v729[3])
      {
        v755 = v729[2];
        *v729 = v755;
      }
      v756 = aGs[++v754];
    }
    while (v754 != 4);
    sprintf_sgR8(v729, v732[29]);
    v757 = *v729;
    v758 = 32;
    v759 = 1u;
    do
    {
      *v729 = v757 + 1;
      *v757 = v758;
      v757 = *v729;
      if (*v729 >= v729[3])
      {
        v757 = v729[2];
        *v729 = v757;
      }
      v758 = aEpa[v759++];
    }
    while (v759 != 6);
    sprintf_sgR8(v729, v732[33]);
    v760 = *v729;
    v761 = 32;
    v762 = 1u;
    do
    {
      *v729 = v760 + 1;
      *v760 = v761;
      v760 = *v729;
      if (*v729 >= v729[3])
      {
        v760 = v729[2];
        *v729 = v760;
      }
      v761 = aEpc[v762++];
    }
    while (v762 != 6);
    sprintf_sgR8(v729, v732[34]);
    v763 = *v729;
    v764 = 77;
    v765 = 1u;
    do
    {
      *v729 = v763 + 1;
      *v763 = v764;
      v763 = *v729;
      if (*v729 >= v729[3])
      {
        v763 = v729[2];
        *v729 = v763;
      }
      v764 = aMv[v765++];
    }
    while (v765 != 4);
    sprintf_sgR8(v729, *v732);
    sprintf_sgR8(v729, v732[1]);
    sprintf_sgR8(v729, v732[2]);
    v766 = (*v729)++;
    *v766 = 32;
    if (*v729 >= v729[3])
      *v729 = v729[2];
    sprintf1da(v729, *((unsigned __int8 *)v732 + 24), v1482, 0, 0);
    sprintf1da(v729, *((unsigned __int8 *)v732 + 25), v1482, 0, 0);
    sprintf1da(v729, *((unsigned __int8 *)v732 + 26), v1482, 0, 0);
    sprintf1da(v729, *((unsigned __int8 *)v732 + 27), v1482, 0, 0);
    sprintf1da(v729, *((unsigned __int8 *)v732 + 28), v1482, 0, 0);
    v767 = (*v729)++;
    *v767 = 32;
    v768 = *v729;
    if (*v729 >= v729[3])
      v768 = v729[2];
    if (!*((_DWORD *)v731 + 1))
    {
      v769 = 72;
      v770 = 1u;
      do
      {
        *v729 = v768 + 1;
        *v768 = v769;
        v768 = *v729;
        if (*v729 >= v729[3])
        {
          v768 = v729[2];
          *v729 = v768;
        }
        v769 = aHpos[v770++];
      }
      while (v770 != 6);
      sprintf1da(v729, *((unsigned __int8 *)v732 + 1108), v1482, 0, 0);
      v771 = (*v729)++;
      *v771 = 32;
      v772 = *v729;
      if (*v729 >= v729[3])
        v772 = v729[2];
      v773 = 32;
      v774 = 1u;
      do
      {
        *v729 = v772 + 1;
        *v772 = v773;
        v772 = *v729;
        if (*v729 >= v729[3])
        {
          v772 = v729[2];
          *v729 = v772;
        }
        v773 = aHpre[v774++];
      }
      while (v774 != 7);
      sprintf_ACC(v729, sqrt(v732[10]));
      v775 = (*v729)++;
      *v775 = 32;
      if (*v729 >= v729[3])
        *v729 = v729[2];
      sprintf_ACC(v729, sqrt(v732[11]));
      v776 = (*v729)++;
      *v776 = 32;
      if (*v729 >= v729[3])
        *v729 = v729[2];
      sprintf_ACC(v729, sqrt(v732[13]));
      v777 = (*v729)++;
      *v777 = 32;
      if (*v729 >= v729[3])
        *v729 = v729[2];
      sprintf_ACC(v729, sqrt(v732[14]));
      v778 = (*v729)++;
      *v778 = 32;
      if (*v729 >= v729[3])
        *v729 = v729[2];
      sprintf_sgR8(v729, v732[15]);
      v779 = (*v729)++;
      *v779 = 32;
      if (*v729 >= v729[3])
        *v729 = v729[2];
      sprintf_sgR8(v729, v732[16]);
      v780 = *v729;
      v781 = 84;
      v782 = 1u;
      do
      {
        *v729 = v780 + 1;
        *v780 = v781;
        v780 = *v729;
        if (*v729 >= v729[3])
        {
          v780 = v729[2];
          *v729 = v780;
        }
        v781 = aTrck[v782++];
      }
      while (v782 != 6);
      sprintf1da(v729, *((unsigned __int8 *)v732 + 1109), v1482, 0, 0);
      v783 = (*v729)++;
      *v783 = 32;
      v784 = *v729;
      if (*v729 >= v729[3])
        v784 = v729[2];
      v785 = 0;
      v786 = 32;
      do
      {
        *v729 = v784 + 1;
        *v784 = v786;
        v784 = *v729;
        if (*v729 >= v729[3])
        {
          v784 = v729[2];
          *v729 = v784;
        }
        v786 = aTpre[++v785];
      }
      while (v785 != 8);
      sprintf_ACC(v729, sqrt(v732[24]));
      v787 = (*v729)++;
      *v787 = 32;
      if (*v729 >= v729[3])
        *v729 = v729[2];
      sprintf_sgR8(v729, v732[26]);
      v768 = *v729;
    }
    *v729 = v768 + 1;
    *v768 = 10;
    if (*v729 >= v729[3])
      *v729 = v729[2];
    GNSS_Nav_Debug_Flush_Check((uint64_t)v729);
    v729 = (char **)v522[35];
    v730 = (unsigned __int8 *)v522[21];
  }
  v788 = v730 + 62348;
  if (v730[62348] || v730[62380] || v730[62364])
  {
    v789 = *v729;
    v790 = 86;
    v791 = 1u;
    do
    {
      *v729 = v789 + 1;
      *v789 = v790;
      v789 = *v729;
      if (*v729 >= v729[3])
      {
        v789 = v729[2];
        *v729 = v789;
      }
      v790 = aVela[v791++];
    }
    while (v791 != 7);
    v792 = 0;
    v793 = 65;
    do
    {
      *v729 = v789 + 1;
      *v789 = v793;
      v789 = *v729;
      if (*v729 >= v729[3])
      {
        v789 = v729[2];
        *v729 = v789;
      }
      v793 = aAtv[++v792];
    }
    while (v792 != 4);
    sprintf_2d(v729, *v788);
    sprintf_2d(v729, v788[8]);
    v794 = (*v729)++;
    *v794 = 32;
    v795 = *v729;
    if (*v729 >= v729[3])
      v795 = v729[2];
    *v729 = v795 + 1;
    *v795 = 101;
    if (*v729 >= v729[3])
      *v729 = v729[2];
    v796 = Get_Char_Ass_Status_Edit(*((_DWORD *)v788 + 1));
    v797 = (*v729)++;
    *v797 = v796;
    v798 = *v729;
    if (*v729 >= v729[3])
      v798 = v729[2];
    v799 = 32;
    v800 = 1u;
    do
    {
      *v729 = v798 + 1;
      *v798 = v799;
      v798 = *v729;
      if (*v729 >= v729[3])
      {
        v798 = v729[2];
        *v729 = v798;
      }
      v799 = aAge[v800++];
    }
    while (v800 != 6);
    sprintf_6d(v729, *((_DWORD *)v788 + 3));
    v801 = (*v729)++;
    *v801 = 32;
    if (*v729 >= v729[3])
      *v729 = v729[2];
    if (*v788)
    {
      memset(v1482, 0, 24);
      Core_Get_ExtA_AT_Vel(120000, (uint64_t)v1482);
      sprintf_sgR8(v729, *((double *)v1482 + 1));
      v802 = *v729;
      v803 = 32;
      v804 = 1u;
      do
      {
        *v729 = v802 + 1;
        *v802 = v803;
        v802 = *v729;
        if (*v729 >= v729[3])
        {
          v802 = v729[2];
          *v729 = v802;
        }
        v803 = aRms[v804++];
      }
      while (v804 != 6);
      v805 = *(double *)&v1482[1];
    }
    else
    {
      sprintf_sgR8(v729, 0.0);
      v806 = *v729;
      v807 = 32;
      v808 = 1u;
      do
      {
        *v729 = v806 + 1;
        *v806 = v807;
        v806 = *v729;
        if (*v729 >= v729[3])
        {
          v806 = v729[2];
          *v729 = v806;
        }
        v807 = aRms[v808++];
      }
      while (v808 != 6);
      v805 = 0.0;
    }
    sprintf_sgR8(v729, v805);
    v809 = *v729;
    v810 = 32;
    v811 = 1u;
    do
    {
      *v729 = v809 + 1;
      *v809 = v810;
      v809 = *v729;
      if (*v729 >= v729[3])
      {
        v809 = v729[2];
        *v729 = v809;
      }
      v810 = aHed[v811++];
    }
    while (v811 != 6);
    sprintf_2d(v729, v788[32]);
    sprintf_2d(v729, v788[40]);
    v812 = (*v729)++;
    *v812 = 32;
    v813 = *v729;
    if (*v729 >= v729[3])
      v813 = v729[2];
    *v729 = v813 + 1;
    *v813 = 101;
    if (*v729 >= v729[3])
      *v729 = v729[2];
    v814 = Get_Char_Ass_Status_Edit(*((_DWORD *)v788 + 9));
    v815 = (*v729)++;
    *v815 = v814;
    v816 = *v729;
    if (*v729 >= v729[3])
      v816 = v729[2];
    v817 = 32;
    v818 = 1u;
    do
    {
      *v729 = v816 + 1;
      *v816 = v817;
      v816 = *v729;
      if (*v729 >= v729[3])
      {
        v816 = v729[2];
        *v729 = v816;
      }
      v817 = aAge[v818++];
    }
    while (v818 != 6);
    sprintf_6d(v729, *((_DWORD *)v788 + 11));
    v819 = (*v729)++;
    *v819 = 32;
    if (*v729 >= v729[3])
      *v729 = v729[2];
    if (v788[32])
    {
      memset(v1482, 0, 24);
      Core_Get_ExtA_Heading(120000, (uint64_t)v1482);
      sprintf_sgR8(v729, *((double *)v1482 + 1));
      v820 = *v729;
      v821 = 32;
      v822 = 1u;
      do
      {
        *v729 = v820 + 1;
        *v820 = v821;
        v820 = *v729;
        if (*v729 >= v729[3])
        {
          v820 = v729[2];
          *v729 = v820;
        }
        v821 = aRms[v822++];
      }
      while (v822 != 6);
      v823 = *(double *)&v1482[1];
    }
    else
    {
      sprintf_sgR8(v729, 0.0);
      v824 = *v729;
      v825 = 32;
      v826 = 1u;
      do
      {
        *v729 = v824 + 1;
        *v824 = v825;
        v824 = *v729;
        if (*v729 >= v729[3])
        {
          v824 = v729[2];
          *v729 = v824;
        }
        v825 = aRms[v826++];
      }
      while (v826 != 6);
      v823 = 0.0;
    }
    sprintf_sgR8(v729, v823);
    v827 = *v729;
    v828 = 32;
    v829 = 1u;
    do
    {
      *v729 = v827 + 1;
      *v827 = v828;
      v827 = *v729;
      if (*v729 >= v729[3])
      {
        v827 = v729[2];
        *v729 = v827;
      }
      v828 = aVvl[v829++];
    }
    while (v829 != 6);
    sprintf_2d(v729, v788[16]);
    sprintf_2d(v729, v788[24]);
    v830 = (*v729)++;
    *v830 = 32;
    v831 = *v729;
    if (*v729 >= v729[3])
      v831 = v729[2];
    *v729 = v831 + 1;
    *v831 = 101;
    if (*v729 >= v729[3])
      *v729 = v729[2];
    v832 = Get_Char_Ass_Status_Edit(*((_DWORD *)v788 + 5));
    v833 = (*v729)++;
    *v833 = v832;
    v834 = *v729;
    if (*v729 >= v729[3])
      v834 = v729[2];
    v835 = 32;
    v836 = 1u;
    do
    {
      *v729 = v834 + 1;
      *v834 = v835;
      v834 = *v729;
      if (*v729 >= v729[3])
      {
        v834 = v729[2];
        *v729 = v834;
      }
      v835 = aAge[v836++];
    }
    while (v836 != 6);
    sprintf_6d(v729, *((_DWORD *)v788 + 7));
    v837 = (*v729)++;
    *v837 = 32;
    if (*v729 >= v729[3])
      *v729 = v729[2];
    if (v788[16])
    {
      memset(v1482, 0, 24);
      Core_Get_ExtA_V_Vel(120000, (uint64_t)v1482);
      sprintf_sgR8(v729, *((double *)v1482 + 1));
      v838 = *v729;
      v839 = 32;
      v840 = 1u;
      do
      {
        *v729 = v838 + 1;
        *v838 = v839;
        v838 = *v729;
        if (*v729 >= v729[3])
        {
          v838 = v729[2];
          *v729 = v838;
        }
        v839 = aRms[v840++];
      }
      while (v840 != 6);
      v841 = *(double *)&v1482[1];
    }
    else
    {
      sprintf_sgR8(v729, 0.0);
      v842 = *v729;
      v843 = 32;
      v844 = 1u;
      do
      {
        *v729 = v842 + 1;
        *v842 = v843;
        v842 = *v729;
        if (*v729 >= v729[3])
        {
          v842 = v729[2];
          *v729 = v842;
        }
        v843 = aRms[v844++];
      }
      while (v844 != 6);
      v841 = 0.0;
    }
    sprintf_sgR8(v729, v841);
    v845 = (*v729)++;
    *v845 = 10;
    if (*v729 >= v729[3])
      *v729 = v729[2];
    GNSS_Nav_Debug_Flush_Check((uint64_t)v729);
    v729 = (char **)v522[35];
    v730 = (unsigned __int8 *)v522[21];
  }
  v846 = (double *)(v730 + 60752);
  v847 = v730 + 60328;
  v848 = v522[16];
  v849 = *v729;
  v850 = 65;
  v851 = 1u;
  do
  {
    *v729 = v849 + 1;
    *v849 = v850;
    v849 = *v729;
    if (*v729 >= v729[3])
    {
      v849 = v729[2];
      *v729 = v849;
    }
    v850 = aApa[v851++];
  }
  while (v851 != 6);
  if (*((_BYTE *)v846 + 72) || !*v847)
  {
    sprintf_2d(v729, *((unsigned __int8 *)v846 + 72));
    sprintf_sgR8(v729, v846[12]);
    sprintf_sgR8(v729, sqrt(v846[13]));
    v852 = v846 + 15;
  }
  else
  {
    sprintf_2d(v729, *((_DWORD *)v847 + 1) + 1);
    sprintf_sgR8(v729, *((double *)v847 + 3));
    sprintf_sgR8(v729, sqrt(*((double *)v847 + 4)));
    v852 = (double *)(v847 + 48);
  }
  sprintf_sgR8(v729, *v852);
  v853 = *v729;
  v854 = 32;
  v855 = 1u;
  do
  {
    *v729 = v853 + 1;
    *v853 = v854;
    v853 = *v729;
    if (*v729 >= v729[3])
    {
      v853 = v729[2];
      *v729 = v853;
    }
    v854 = aVva[v855++];
  }
  while (v855 != 7);
  sprintf_2d(v729, *(unsigned __int8 *)v846);
  sprintf_sgR8(v729, v846[3]);
  sprintf_sgR8(v729, sqrt(v846[4]));
  sprintf_sgR8(v729, v846[6]);
  v856 = 0;
  v857 = *v729;
  v858 = 32;
  do
  {
    *v729 = v857 + 1;
    *v857 = v858;
    v857 = *v729;
    if (*v729 >= v729[3])
    {
      v857 = v729[2];
      *v729 = v857;
    }
    v858 = aDy[++v856];
  }
  while (v856 != 4);
  v859 = *(_DWORD *)(v848 + 20);
  if (v859 >= 0)
    v860 = *(_DWORD *)(v848 + 20);
  else
    v860 = -v859;
  sprintf1da(v729, v860, v1482, 0, v859 >> 31);
  v861 = 0;
  v862 = *v729;
  v863 = 32;
  do
  {
    *v729 = v862 + 1;
    *v862 = v863;
    v862 = *v729;
    if (*v729 >= v729[3])
    {
      v862 = v729[2];
      *v729 = v862;
    }
    v863 = aT0[++v861];
  }
  while (v861 != 4);
  sprintf_1u(v729, *(_DWORD *)(v848 + 68164));
  LODWORD(v864) = *((_DWORD *)v846 + 477);
  sprintf_sgR8(v729, (double)v864);
  v865 = (*v729)++;
  *v865 = 10;
  if (*v729 >= v729[3])
    *v729 = v729[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v729);
  v866 = 0;
  v867 = (char **)v522[35];
  v868 = v522[9];
  v869 = v522[10];
  v870 = (unsigned __int16 *)(v522[16] + 27088);
  v871 = v522[21] + 60160;
  v872 = *v867;
  v873 = 83;
  do
  {
    *v867 = v872 + 1;
    *v872 = v873;
    v872 = *v867;
    if (*v867 >= v867[3])
    {
      v872 = v867[2];
      *v867 = v872;
    }
    v873 = aSigs[++v866];
  }
  while (v866 != 4);
  sprintf_sgR8(v867, *(double *)(v869 + 3816));
  sprintf_sgR8(v867, *(double *)(v869 + 3824));
  sprintf_sgR8(v867, *(double *)(v869 + 3840));
  sprintf_sgR8(v867, *(double *)(v869 + 3848));
  sprintf_sgR8(v867, *(double *)(v869 + 3864));
  sprintf_sgR8(v867, *(double *)(v869 + 3872));
  v874 = *v867;
  v875 = 32;
  v876 = 1u;
  do
  {
    *v867 = v874 + 1;
    *v874 = v875;
    v874 = *v867;
    if (*v867 >= v867[3])
    {
      v874 = v867[2];
      *v867 = v874;
    }
    v875 = aEc[v876++];
  }
  while (v876 != 4);
  if (*(unsigned __int16 *)(v869 + 3832) >= 0x270Fu)
    v877 = 9999;
  else
    v877 = *(unsigned __int16 *)(v869 + 3832);
  sprintf_5d(v867, v877);
  if (*(unsigned __int16 *)(v869 + 3856) >= 0x270Fu)
    v878 = 9999;
  else
    v878 = *(unsigned __int16 *)(v869 + 3856);
  sprintf_5d(v867, v878);
  if (*(unsigned __int16 *)(v869 + 3880) >= 0x270Fu)
    v879 = 9999;
  else
    v879 = *(unsigned __int16 *)(v869 + 3880);
  sprintf_5d(v867, v879);
  v880 = 0;
  v881 = *v867;
  v882 = 32;
  do
  {
    *v867 = v881 + 1;
    *v881 = v882;
    v881 = *v867;
    if (*v867 >= v867[3])
    {
      v881 = v867[2];
      *v867 = v881;
    }
    v882 = aJn0[++v880];
  }
  while (v880 != 8);
  v883 = 0;
  v884 = 32;
  do
  {
    *v867 = v881 + 1;
    *v881 = v884;
    v881 = *v867;
    if (*v867 >= v867[3])
    {
      v881 = v867[2];
      *v867 = v881;
    }
    v884 = aNaEc[++v883];
  }
  while (v883 != 8);
  sprintf1da(v867, v870[1], v1482, 0, 0);
  v885 = (*v867)++;
  *v885 = 32;
  if (*v867 >= v867[3])
    *v867 = v867[2];
  sprintf1da(v867, v870[2], v1482, 0, 0);
  v886 = (*v867)++;
  *v886 = 32;
  if (*v867 >= v867[3])
    *v867 = v867[2];
  sprintf1da(v867, *v870, v1482, 0, 0);
  v887 = (*v867)++;
  *v887 = 32;
  v888 = *v867;
  if (*v867 >= v867[3])
  {
    v888 = v867[2];
    *v867 = v888;
  }
  if (*(int *)(v871 + 1928) <= 0)
  {
    v893 = 32;
    v894 = 1u;
    do
    {
      *v867 = v888 + 1;
      *v888 = v893;
      v888 = *v867;
      if (*v867 >= v867[3])
      {
        v888 = v867[2];
        *v867 = v888;
      }
      v893 = aXXXX[v894++];
    }
    while (v894 != 10);
  }
  else
  {
    sprintf_2d(v867, (int)*(double *)(v871 + 128));
    v889 = (*v867)++;
    *v889 = 32;
    if (*v867 >= v867[3])
      *v867 = v867[2];
    sprintf_2d(v867, (int)*(double *)(v871 + 136));
    v890 = (*v867)++;
    *v890 = 32;
    if (*v867 >= v867[3])
      *v867 = v867[2];
    sprintf_2d(v867, (int)sqrt(*(double *)(v871 + 88)));
    v891 = (*v867)++;
    *v891 = 32;
    if (*v867 >= v867[3])
      *v867 = v867[2];
    sprintf_2d(v867, (int)sqrt(*(double *)(v871 + 96)));
    v892 = (*v867)++;
    *v892 = 32;
    v888 = *v867;
    if (*v867 >= v867[3])
    {
      v888 = v867[2];
      *v867 = v888;
    }
  }
  if (*(int *)(v871 + 1932) <= 0)
  {
    v897 = 32;
    v898 = 1u;
    do
    {
      *v867 = v888 + 1;
      *v888 = v897;
      v888 = *v867;
      if (*v867 >= v867[3])
      {
        v888 = v867[2];
        *v867 = v888;
      }
      v897 = aXX[v898++];
    }
    while (v898 != 6);
  }
  else
  {
    sprintf_2d(v867, (int)*(double *)(v871 + 216));
    v895 = (*v867)++;
    *v895 = 32;
    if (*v867 >= v867[3])
      *v867 = v867[2];
    sprintf_2d(v867, (int)sqrt(*(double *)(v871 + 200)));
    v896 = (*v867)++;
    *v896 = 32;
    v888 = *v867;
    if (*v867 >= v867[3])
    {
      v888 = v867[2];
      *v867 = v888;
    }
  }
  if (*(int *)(v871 + 1920) <= 0)
  {
    v901 = 32;
    v902 = 1u;
    do
    {
      *v867 = v888 + 1;
      *v888 = v901;
      v888 = *v867;
      if (*v867 >= v867[3])
      {
        v888 = v867[2];
        *v867 = v888;
      }
      v901 = aXX[v902++];
    }
    while (v902 != 6);
  }
  else
  {
    sprintf_sgR8(v867, *(double *)(v871 + 16));
    v899 = (*v867)++;
    *v899 = 32;
    if (*v867 >= v867[3])
      *v867 = v867[2];
    sprintf_2d(v867, (int)sqrt(*(double *)v871));
    v900 = (*v867)++;
    *v900 = 32;
    v888 = *v867;
    if (*v867 >= v867[3])
      v888 = v867[2];
  }
  v903 = 0;
  v904 = 32;
  do
  {
    *v867 = v888 + 1;
    *v888 = v904;
    v888 = *v867;
    if (*v867 >= v867[3])
    {
      v888 = v867[2];
      *v867 = v888;
    }
    v904 = aEs_0[++v903];
  }
  while (v903 != 4);
  v905 = *(_DWORD *)(v868 + 60);
  if (v905 >= 8)
    v906 = 48;
  else
    v906 = v905 + 48;
  *v867 = v888 + 1;
  *v888 = v906;
  v907 = *v867;
  if (*v867 >= v867[3])
    v907 = v867[2];
  *v867 = v907 + 1;
  *v907 = 10;
  if (*v867 >= v867[3])
    *v867 = v867[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v867);
  v908 = (char **)v522[35];
  if (g_Logging_Cfg >= 5)
  {
    v909 = 0;
    v910 = (unsigned __int8 *)v522[12];
    v911 = v522[21];
    v912 = (double *)v522[16];
    v913 = *(_DWORD *)v522;
    v914 = 86;
    v915 = *v908;
    do
    {
      *v908 = v915 + 1;
      *v915 = v914;
      v915 = *v908;
      if (*v908 >= v908[3])
      {
        v915 = v908[2];
        *v908 = v915;
      }
      v914 = aVarf[++v909];
    }
    while (v909 != 4);
    sprintf_sgR8(v908, *(double *)(v911 + 6784));
    sprintf_sgR8(v908, v912[3372]);
    sprintf_sgR8(v908, *(double *)(v911 + 21688));
    sprintf_sgR8(v908, v912[3375]);
    sprintf_sgR8(v908, *(double *)(v911 + 36592));
    sprintf_sgR8(v908, v912[3378]);
    v916 = 0;
    v917 = *v908;
    v918 = 32;
    do
    {
      *v908 = v917 + 1;
      *v917 = v918;
      v917 = *v908;
      if (*v908 >= v908[3])
      {
        v917 = v908[2];
        *v908 = v917;
      }
      v918 = aS[++v916];
    }
    while (v916 != 2);
    sprintf_3d(v908, v913);
    v919 = *v908;
    v920 = 32;
    v921 = 1u;
    do
    {
      *v908 = v919 + 1;
      *v919 = v920;
      v919 = *v908;
      if (*v908 >= v908[3])
      {
        v919 = v908[2];
        *v908 = v919;
      }
      v920 = aI[v921++];
    }
    while (v921 != 4);
    v922 = *(double *)(v911 + 1552) * 10.0;
    v923 = -0.5;
    if (v922 > 0.0)
      v923 = 0.5;
    v924 = v922 + v923;
    if (v924 <= 2147483650.0)
    {
      if (v924 >= -2147483650.0)
        v925 = (int)v924;
      else
        v925 = 0x80000000;
    }
    else
    {
      v925 = 0x7FFFFFFF;
    }
    sprintf_2f((uint64_t)v908, v925);
    v929 = *(_DWORD *)(v911 + 52);
    if (v929 > -10)
    {
      v930 = *v908;
      v933 = 32;
      if (v929 <= 99)
      {
        v935 = 1u;
        do
        {
          *v908 = v930 + 1;
          *v930 = v933;
          v930 = *v908;
          if (*v908 >= v908[3])
          {
            v930 = v908[2];
            *v908 = v930;
          }
          v933 = aTs[v935++];
        }
        while (v935 != 4);
        sprintf_sp1d(v908, *(_DWORD *)(v911 + 52));
        v930 = *v908;
      }
      else
      {
        v934 = 1u;
        do
        {
          *v908 = v930 + 1;
          *v930 = v933;
          v930 = *v908;
          if (*v908 >= v908[3])
          {
            v930 = v908[2];
            *v908 = v930;
          }
          v933 = aTs99[v934++];
        }
        while (v934 != 7);
      }
    }
    else
    {
      v930 = *v908;
      v931 = 32;
      v932 = 1u;
      do
      {
        *v908 = v930 + 1;
        *v930 = v931;
        v930 = *v908;
        if (*v908 >= v908[3])
        {
          v930 = v908[2];
          *v908 = v930;
        }
        v931 = aTs9[v932++];
      }
      while (v932 != 7);
    }
    v936 = 0;
    v937 = 32;
    do
    {
      *v908 = v930 + 1;
      *v930 = v937;
      v930 = *v908;
      if (*v908 >= v908[3])
      {
        v930 = v908[2];
        *v908 = v930;
      }
      v937 = aNf_0[++v936];
    }
    while (v936 != 4);
    sprintf_sp1d(v908, v910[80]);
    sprintf_sp1d(v908, v910[81]);
    sprintf_sp1d(v908, v910[82]);
    sprintf_sp1d(v908, v910[83]);
    v938 = (*v908)++;
    *v938 = 10;
    if (*v908 >= v908[3])
      *v908 = v908[2];
    GNSS_Nav_Debug_Flush_Check((uint64_t)v908);
    v908 = (char **)v522[35];
  }
  v939 = v522[21];
  v940 = *v908;
  v941 = 79;
  v942 = 1u;
  do
  {
    *v908 = v940 + 1;
    *v940 = v941;
    v940 = *v908;
    if (*v908 >= v908[3])
    {
      v940 = v908[2];
      *v908 = v940;
    }
    v941 = aOrigSig[v942++];
  }
  while (v942 != 10);
  v943 = 0;
  v944 = v939 + 61736;
  do
  {
    sprintf_sgR8F(v908, sqrt(*(double *)(v944 + v943)));
    v943 += 8;
  }
  while (v943 != 96);
  v945 = (*v908)++;
  *v945 = 10;
  if (*v908 >= v908[3])
    *v908 = v908[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v908);
  v946 = (char **)v522[35];
  v947 = v522[21];
  v948 = *v946;
  v949 = 83;
  v950 = 1u;
  do
  {
    *v946 = v948 + 1;
    *v948 = v949;
    v948 = *v946;
    if (*v946 >= v946[3])
    {
      v948 = v946[2];
      *v946 = v948;
    }
    v949 = aSvecCor[v950++];
  }
  while (v950 != 10);
  for (i3 = 0; i3 != 96; i3 += 8)
    sprintf_sgR8F(v946, *(double *)(v947 + 62560 + i3));
  v952 = *v946;
  for (i4 = 3; i4 > 1; --i4)
  {
    *v946 = v952 + 1;
    *v952 = 32;
    v952 = *v946;
    if (*v946 >= v946[3])
    {
      v952 = v946[2];
      *v946 = v952;
    }
  }
  v954 = 0;
  v955 = v947 + 62452;
  do
    sprintf1da(v946, *(unsigned __int8 *)(v955 + v954++), v1482, 0, 0);
  while (v954 != 12);
  v956 = (*v946)++;
  *v956 = 10;
  if (*v946 >= v946[3])
    *v946 = v946[2];
  v957 = (char **)v522[35];
  v958 = v522[21];
  v959 = *v957;
  v960 = 83;
  v961 = 1u;
  do
  {
    *v957 = v959 + 1;
    *v959 = v960;
    v959 = *v957;
    if (*v957 >= v957[3])
    {
      v959 = v957[2];
      *v957 = v959;
    }
    v960 = aSvecSig[v961++];
  }
  while (v961 != 10);
  v962 = 0;
  v963 = v958 + 61344;
  do
  {
    sprintf_sgR8F(v957, sqrt(*(double *)(v963 + v962)));
    v962 += 8;
  }
  while (v962 != 96);
  v964 = (*v957)++;
  *v964 = 10;
  if (*v957 >= v957[3])
    *v957 = v957[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v957);
  v965 = (char **)v522[35];
  v966 = v522[16];
  v967 = v522[21];
  if (!*(_DWORD *)(v966 + 152))
  {
    v968 = (double *)(v967 + 52744);
    v969 = *v965;
    v970 = 81;
    v971 = 1u;
    do
    {
      *v965 = v969 + 1;
      *v969 = v970;
      v969 = *v965;
      if (*v965 >= v965[3])
      {
        v969 = v965[2];
        *v965 = v969;
      }
      v970 = aQBSize[v971++];
    }
    while (v971 != 10);
    v972 = 0;
    v973 = v966 + 192;
    do
    {
      sprintf_sgR8F(v965, sqrt(*(double *)(v973 + v972)));
      v972 += 8;
    }
    while (v972 != 48);
    sprintf_sgR8F(v965, *v968);
    sprintf_sgR8F(v965, v968[1]);
    v974 = (*v965)++;
    *v974 = 10;
    if (*v965 >= v965[3])
      *v965 = v965[2];
    GNSS_Nav_Debug_Flush_Check((uint64_t)v965);
    v965 = (char **)v522[35];
    v966 = v522[16];
    v967 = v522[21];
  }
  if (g_Logging_Cfg >= 5)
  {
    v975 = (double *)(v967 + 79520);
    v976 = v522[10];
    v977 = *v965;
    v978 = 119;
    v979 = 1u;
    do
    {
      *v965 = v977 + 1;
      *v977 = v978;
      v977 = *v965;
      if (*v965 >= v965[3])
      {
        v977 = v965[2];
        *v965 = v977;
      }
      v978 = aWrdop[v979++];
    }
    while (v979 != 10);
    sprintf_sgR8F(v965, sqrt(*(double *)(v966 + 15488)));
    for (i5 = 0; i5 != 24; i5 += 8)
      sprintf_sgR8(v965, sqrt(*(double *)(v966 + 15496 + i5)));
    sprintf_sgR8(v965, *(double *)(v966 + 15520));
    v981 = *v965;
    v982 = 32;
    v983 = 1u;
    do
    {
      *v965 = v981 + 1;
      *v981 = v982;
      v981 = *v965;
      if (*v965 >= v965[3])
      {
        v981 = v965[2];
        *v965 = v981;
      }
      v982 = aPrefc[v983++];
    }
    while (v983 != 8);
    sprintf_LaLo(v965, v967 + 79520);
    sprintf_sgR8(v965, *(double *)(v967 + 79536));
    sprintf_sgR8(v965, *(double *)(v967 + 79536) - *(double *)(v976 + 248));
    v984 = (*v965)++;
    *v984 = 32;
    if (*v965 >= v965[3])
      *v965 = v965[2];
    v985 = (double *)(v966 + 68240);
    v986 = -3;
    while (1)
    {
      v987 = *v975 - *(v985 - 5);
      if ((_DWORD)v986 == -3)
        goto LABEL_1689;
      if ((_DWORD)v986 == -2)
        break;
LABEL_1690:
      sprintf_6d(v965, (int)v987);
      v989 = (*v965)++;
      *v989 = 32;
      v990 = *v965;
      if (*v965 >= v965[3])
      {
        v990 = v965[2];
        *v965 = v990;
      }
      ++v985;
      ++v975;
      v321 = __CFADD__(v986++, 1);
      if (v321)
      {
        v991 = 32;
        v992 = 1u;
        do
        {
          *v965 = v990 + 1;
          *v990 = v991;
          v990 = *v965;
          if (*v965 >= v965[3])
          {
            v990 = v965[2];
            *v965 = v990;
          }
          v991 = aVel[v992++];
        }
        while (v992 != 6);
        v993 = 0;
        v994 = v967 + 79544;
        do
        {
          sprintf_sgR8(v965, *(double *)(v994 + v993));
          v993 += 8;
        }
        while (v993 != 24);
        v995 = (*v965)++;
        *v995 = 10;
        if (*v965 >= v965[3])
          *v965 = v965[2];
        GNSS_Nav_Debug_Flush_Check((uint64_t)v965);
        v965 = (char **)v522[35];
        v967 = v522[21];
        goto LABEL_1703;
      }
    }
    v988 = -6.28318531;
    if (v987 >= 3.14159265 || (v988 = 6.28318531, v987 < -3.14159265))
      v987 = v987 + v988;
LABEL_1689:
    v987 = v987 * *v985;
    goto LABEL_1690;
  }
LABEL_1703:
  v996 = v522[9];
  v997 = *v965;
  v998 = 67;
  v999 = 1u;
  do
  {
    *v965 = v997 + 1;
    *v997 = v998;
    v997 = *v965;
    if (*v965 >= v965[3])
    {
      v997 = v965[2];
      *v965 = v997;
    }
    v998 = aClkbias[v999++];
  }
  while (v999 != 10);
  v1000 = (int)(*(double *)(v967 + 1632) * 2997924580.0);
  sprintf_9f((uint64_t)v965, v1000, 2);
  v1001 = (*v965)++;
  *v1001 = 32;
  if (*v965 >= v965[3])
    *v965 = v965[2];
  v1002 = (int)(*(double *)(v967 + 1640) * 2997924580.0);
  sprintf_9f((uint64_t)v965, v1002, 2);
  v1003 = (*v965)++;
  *v1003 = 32;
  if (*v965 >= v965[3])
    *v965 = v965[2];
  v1004 = (int)(*(double *)(v967 + 1648) * 2997924580.0);
  sprintf_9f((uint64_t)v965, v1004, 2);
  v1005 = (*v965)++;
  *v1005 = 32;
  v1006 = *v965;
  if (*v965 >= v965[3])
    v1006 = v965[2];
  v1007 = 32;
  v1008 = 1u;
  do
  {
    *v965 = v1006 + 1;
    *v1006 = v1007;
    v1006 = *v965;
    if (*v965 >= v965[3])
    {
      v1006 = v965[2];
      *v965 = v1006;
    }
    v1007 = aDclk[v1008++];
  }
  while (v1008 != 7);
  if (v1002)
    v1009 = v1000 == 0;
  else
    v1009 = 1;
  if (v1009)
    v1010 = 0;
  else
    v1010 = v1002 - v1000;
  *v965 = v1006 + 1;
  *v1006 = 32;
  if (*v965 >= v965[3])
    *v965 = v965[2];
  sprintf_5f((uint64_t)v965, v1010, 2);
  if (v1004)
    v1011 = v1000 == 0;
  else
    v1011 = 1;
  if (v1011)
    v1012 = 0;
  else
    v1012 = v1004 - v1000;
  v1013 = (*v965)++;
  *v1013 = 32;
  if (*v965 >= v965[3])
    *v965 = v965[2];
  sprintf_5f((uint64_t)v965, v1012, 2);
  v1014 = 0;
  v1015 = *v965;
  v1016 = 32;
  do
  {
    *v965 = v1015 + 1;
    *v1015 = v1016;
    v1015 = *v965;
    if (*v965 >= v965[3])
    {
      v1015 = v965[2];
      *v965 = v1015;
    }
    v1016 = aL5L1[++v1014];
  }
  while (v1014 != 8);
  v1017 = (int)(*(double *)(v967 + 1656) * 2.99792458e10);
  *v965 = v1015 + 1;
  *v1015 = 32;
  if (*v965 >= v965[3])
    *v965 = v965[2];
  sprintf_5f((uint64_t)v965, v1017, 3);
  v1018 = *v965;
  v1019 = 32;
  v1020 = 1u;
  do
  {
    *v965 = v1018 + 1;
    *v1018 = v1019;
    v1018 = *v965;
    if (*v965 >= v965[3])
    {
      v1018 = v965[2];
      *v965 = v1018;
    }
    v1019 = aIni[v1020++];
  }
  while (v1020 != 7);
  sprintf_2d(v965, *(unsigned __int8 *)(v967 + 1680));
  sprintf_2d(v965, *(unsigned __int8 *)(v967 + 1681));
  sprintf_2d(v965, *(unsigned __int8 *)(v967 + 1682));
  v1021 = 0;
  v1022 = *v965;
  v1023 = 32;
  do
  {
    *v965 = v1022 + 1;
    *v1022 = v1023;
    v1022 = *v965;
    if (*v965 >= v965[3])
    {
      v1022 = v965[2];
      *v965 = v1022;
    }
    v1023 = aLsKf[++v1021];
  }
  while (v1021 != 8);
  sprintf_2d(v965, *(unsigned __int8 *)(v967 + 79568));
  v1024 = *v965;
  v1025 = 32;
  v1026 = 1u;
  do
  {
    *v965 = v1024 + 1;
    *v1024 = v1025;
    v1024 = *v965;
    if (*v965 >= v965[3])
    {
      v1024 = v965[2];
      *v965 = v1024;
    }
    v1025 = aJit[v1026++];
  }
  while (v1026 != 7);
  sprintf_4f((uint64_t)v965, (int)((double)*(char *)(v996 + 242) * 2.99792458), 2);
  LOBYTE(v1027) = *(_BYTE *)(v996 + 243);
  sprintf_4f((uint64_t)v965, (int)((double)v1027 * 2.99792458), 2);
  v1028 = (*v965)++;
  *v1028 = 10;
  if (*v965 >= v965[3])
    *v965 = v965[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v965);
  v1029 = (char **)v522[35];
  v1030 = v522[7];
  if (g_Logging_Cfg >= 5)
  {
    v1031 = *v1029;
    v1032 = 71;
    v1033 = 1u;
    do
    {
      *v1029 = v1031 + 1;
      *v1031 = v1032;
      v1031 = *v1029;
      if (*v1029 >= v1029[3])
      {
        v1031 = v1029[2];
        *v1029 = v1031;
      }
      v1032 = aGlofrq[v1033++];
    }
    while (v1033 != 8);
    v1034 = 0;
    v1035 = v1030 + 17328;
    do
    {
      if (*(_DWORD *)(v1035 + 4 * v1034) != 2139062143)
      {
        sprintf_3d(v1029, v1034 + 1);
        sprintf_3d(v1029, *(_DWORD *)(v1035 + 4 * v1034));
        v1036 = (*v1029)++;
        *v1036 = 59;
        v1031 = *v1029;
        if (*v1029 >= v1029[3])
        {
          v1031 = v1029[2];
          *v1029 = v1031;
        }
      }
      ++v1034;
    }
    while (v1034 != 24);
    *v1029 = v1031 + 1;
    *v1031 = 10;
    if (*v1029 >= v1029[3])
      *v1029 = v1029[2];
    GNSS_Nav_Debug_Flush_Check((uint64_t)v1029);
    v1029 = (char **)v522[35];
    v1030 = v522[7];
  }
  v1037 = 0;
  v1038 = *v1029;
  v1039 = 71;
  do
  {
    *v1029 = v1038 + 1;
    *v1038 = v1039;
    v1038 = *v1029;
    if (*v1029 >= v1029[3])
    {
      v1038 = v1029[2];
      *v1029 = v1038;
    }
    v1039 = aGloslot[++v1037];
  }
  while (v1037 != 8);
  v1040 = 0;
  v1041 = v1030 + 17424;
  do
  {
    if (*(_DWORD *)(v1041 + 4 * v1040) != 2139062143)
    {
      sprintf_3d(v1029, v1040 - 7);
      sprintf_3d(v1029, *(_DWORD *)(v1041 + 4 * v1040));
      v1042 = (*v1029)++;
      *v1042 = 59;
      v1038 = *v1029;
      if (*v1029 >= v1029[3])
      {
        v1038 = v1029[2];
        *v1029 = v1038;
      }
    }
    ++v1040;
  }
  while (v1040 != 14);
  *v1029 = v1038 + 1;
  *v1038 = 10;
  if (*v1029 >= v1029[3])
    *v1029 = v1029[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1029);
  v1043 = (char **)v522[35];
  v1044 = v522[10];
  v1045 = v522[16];
  v1046 = v522[21];
  v1047 = (unsigned int *)v522[6];
  v1048 = *v1043;
  v1049 = 82;
  v1050 = 1u;
  do
  {
    *v1043 = v1048 + 1;
    *v1048 = v1049;
    v1048 = *v1043;
    if (*v1043 >= v1043[3])
    {
      v1048 = v1043[2];
      *v1043 = v1048;
    }
    v1049 = aReset[v1050++];
  }
  while (v1050 != 8);
  sprintf1da(v1043, *(unsigned __int8 *)(v1045 + 136), v1482, 0, 0);
  sprintf_3d(v1043, *(_DWORD *)(v1045 + 140));
  sprintf_5d(v1043, *(_DWORD *)(v1045 + 144));
  sprintf_6d(v1043, *(_DWORD *)(v1045 + 148));
  sprintf_2d(v1043, *(unsigned __int8 *)(v1045 + 176));
  v1051 = 0;
  v1052 = *v1043;
  v1053 = 32;
  do
  {
    *v1043 = v1052 + 1;
    *v1052 = v1053;
    v1052 = *v1043;
    if (*v1043 >= v1043[3])
    {
      v1052 = v1043[2];
      *v1043 = v1052;
    }
    v1053 = aQb[++v1051];
  }
  while (v1051 != 4);
  if (*(_BYTE *)(v1045 + 183))
    v1054 = 49;
  else
    v1054 = 48;
  *v1043 = v1052 + 1;
  *v1052 = v1054;
  if (*v1043 >= v1043[3])
    *v1043 = v1043[2];
  v1055 = *(unsigned __int8 *)(v1045 + 184);
  if (*(_BYTE *)(v1045 + 186))
    v1055 |= 2u;
  if (*(_BYTE *)(v1045 + 188))
    v1056 = v1055 | 4;
  else
    v1056 = v1055;
  sprintf1da(v1043, v1056, v1482, 0, 0);
  if (*(_BYTE *)(v1045 + 187))
    v1057 = *(unsigned __int8 *)(v1045 + 185) | 2;
  else
    v1057 = *(unsigned __int8 *)(v1045 + 185);
  sprintf1da(v1043, v1057, v1482, 0, 0);
  sprintf_6d(v1043, *(_DWORD *)(v1045 + 152));
  v1058 = 0;
  v1059 = *v1043;
  v1060 = 32;
  do
  {
    *v1043 = v1059 + 1;
    *v1059 = v1060;
    v1059 = *v1043;
    if (*v1043 >= v1043[3])
    {
      v1059 = v1043[2];
      *v1043 = v1059;
    }
    v1060 = aSt_0[++v1058];
  }
  while (v1058 != 4);
  sprintf1da(v1043, *((unsigned __int8 *)v1047 + 16), v1482, 0, 0);
  v1061 = *v1043;
  v1062 = &g_TOW_Stat_As_String[10 * *v1047 + 1];
  v1063 = 32;
  do
  {
    *v1043 = v1061 + 1;
    *v1061 = v1063;
    v1061 = *v1043;
    if (*v1043 >= v1043[3])
    {
      v1061 = v1043[2];
      *v1043 = v1061;
    }
    v1064 = *v1062++;
    v1063 = v1064;
  }
  while (v1064);
  v1065 = 0;
  v1066 = 32;
  do
  {
    *v1043 = v1061 + 1;
    *v1061 = v1066;
    v1061 = *v1043;
    if (*v1043 >= v1043[3])
    {
      v1061 = v1043[2];
      *v1043 = v1061;
    }
    v1066 = aSp[++v1065];
  }
  while (v1065 != 4);
  sprintf1da(v1043, *(unsigned __int8 *)(v1044 + 18), v1482, 0, 0);
  sprintf1da(v1043, *(unsigned __int8 *)(v1045 + 240), v1482, 0, 0);
  sprintf1da(v1043, *(unsigned __int8 *)(v1045 + 241), v1482, 0, 0);
  sprintf1da(v1043, *(unsigned __int8 *)(v1046 + 62451), v1482, 0, 0);
  v1067 = *v1043;
  v1068 = 32;
  v1069 = 1u;
  do
  {
    *v1043 = v1067 + 1;
    *v1067 = v1068;
    v1067 = *v1043;
    if (*v1043 >= v1043[3])
    {
      v1067 = v1043[2];
      *v1043 = v1067;
    }
    v1068 = aFf[v1069++];
  }
  while (v1069 != 6);
  sprintf_3f((uint64_t)v1043, 10 * *(_DWORD *)(v1045 + 27136) / 0x3E8u, 2);
  sprintf_sp1d(v1043, *(_DWORD *)(v1046 + 48));
  v1070 = *v1043;
  v1071 = 32;
  v1072 = 1u;
  do
  {
    *v1043 = v1070 + 1;
    *v1070 = v1071;
    v1070 = *v1043;
    if (*v1043 >= v1043[3])
    {
      v1070 = v1043[2];
      *v1043 = v1070;
    }
    v1071 = aOr[v1072++];
  }
  while (v1072 != 6);
  sprintf1da(v1043, *(unsigned __int8 *)(v1046 + 1880), v1482, 0, 0);
  v1073 = (*v1043)++;
  *v1073 = 10;
  if (*v1043 >= v1043[3])
    *v1043 = v1043[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1043);
  v1074 = (char **)v522[35];
  v1426 = v522[5];
  v1424 = v522[4];
  v1422 = v522[7];
  v1075 = v522[21];
  v1434 = v522[12];
  v1428 = v522[16];
  v1429 = v522[25];
  v1076 = k * 1000.0;
  if (!*(_BYTE *)(v1075 + 62457))
    v1076 = v1076 - *(double *)(v1075 + 62504);
  v1077 = 0;
  v1425 = v522[8];
  v1431 = v522[10];
  v1423 = v522[11];
  v1078 = v1434 + 88;
  *(_OWORD *)v1473 = *(_OWORD *)(v1075 + 1584);
  *(_QWORD *)&v1474 = *(_QWORD *)(v1075 + 1600);
  do
  {
    *(double *)&v1441[v1077] = *(double *)(v1075 + v1077 * 4 + 1560) - *(double *)(v1428 + 68176 + v1077 * 4);
    v1077 += 2;
  }
  while (v1077 != 6);
  bzero(v1482, 0x400uLL);
  bzero(v1481, 0x400uLL);
  v1079 = 0;
  v1080 = fabs(v1076);
  v1081 = v1075 + 52760;
  v1082 = 0.0;
  v1083 = v1075 + 21656;
  v1084 = 0.0;
  v1085 = 0.0;
  v1086 = 0.0;
  v1087 = v1075 + 6752;
  do
  {
    if (Is_Legal(*(_DWORD *)(v1078 + 4 * v1079)))
    {
      if (*(_BYTE *)(v1075 + v1079 + 7064)
        || (v1440 = 0.0, !R8_EQ((const double *)(v1075 + 8 * v1079 + 19608), &v1440)))
      {
        v1088 = 0;
        v1089 = 0.0;
        do
        {
          v1089 = v1089 + *(double *)&v1441[v1088] * *(double *)(v1081 + v1088 * 4);
          v1088 += 2;
        }
        while (v1088 != 6);
        if (v1080 > 0.5)
          v1089 = v1089 - *(double *)(v1075 + 56 * v1079 + 52808) * v1076;
        v1090 = v1089 + *(double *)(v1087 + 8 * v1079 + 12856);
        *((double *)v1482 + v1079) = v1090;
        if ((*(_DWORD *)(v1087 + 4 * v1079 + 568) - 1) >= 0x1D)
        {
          v1091 = 1.0 / *(double *)(v1075 + 8 * v1079 + 17432);
          v1086 = v1086 + v1091 * v1090;
          v1085 = v1085 + v1091;
        }
      }
      if (*(_BYTE *)(v1075 + v1079 + 21968)
        || (v1440 = 0.0, !R8_EQ((const double *)(v1075 + 8 * v1079 + 34512), &v1440)))
      {
        v1092 = 0;
        v1093 = 0.0;
        do
        {
          v1093 = v1093 + *(double *)&v1473[v1092] * *(double *)(v1081 + v1092);
          v1092 += 8;
        }
        while (v1092 != 24);
        v1094 = v1093 + *(double *)(v1083 + 8 * v1079 + 12856);
        *(double *)&v1481[2 * v1079] = v1094;
        if ((*(_DWORD *)(v1083 + 4 * v1079 + 568) - 1) >= 0x1D)
        {
          v1095 = 1.0 / *(double *)(v1075 + 8 * v1079 + 32336);
          v1084 = v1084 + v1095 * v1094;
          v1082 = v1082 + v1095;
        }
      }
    }
    ++v1079;
    v1081 += 56;
  }
  while (v1079 != 128);
  v1096 = 0;
  v1097 = 0;
  if (v1085 <= 0.0 || v1086 == 0.0)
    v1100 = 0.0;
  else
    v1100 = v1086 / v1085;
  if (v1082 <= 0.0 || v1084 == 0.0)
    v1103 = 0.0;
  else
    v1103 = v1084 / v1082;
  v1104 = v1075 + 19608;
  do
  {
    if (Is_Legal(*(_DWORD *)(v1078 + 4 * v1097)))
    {
      if (*(_BYTE *)(v1075 + 7064 + v1097) || (v1440 = 0.0, !R8_EQ((const double *)(v1104 + v1096), &v1440)))
        *((double *)v1482 + v1097) = *((double *)v1482 + v1097) - v1100;
      if (*(_BYTE *)(v1104 + v1097 + 2360) || (v1440 = 0.0, !R8_EQ((const double *)(v1075 + 34512 + v1096), &v1440)))
        *(double *)&v1481[2 * v1097] = (*(double *)&v1481[2 * v1097] - v1103) * 5.25503547;
    }
    ++v1097;
    v1096 += 8;
  }
  while (v1097 != 128);
  v1105 = 0;
  v1479 = 0u;
  v1480 = 0u;
  v1477 = 0u;
  v1478 = 0u;
  v1475 = 0u;
  v1476 = 0u;
  *(_OWORD *)v1473 = 0u;
  v1474 = 0u;
  v1471 = 0u;
  v1472 = 0u;
  v1469 = 0u;
  v1470 = 0u;
  v1467 = 0u;
  v1468 = 0u;
  v1465 = 0u;
  v1466 = 0u;
  v1463 = 0u;
  v1464 = 0u;
  v1461 = 0u;
  v1462 = 0u;
  v1459 = 0u;
  v1460 = 0u;
  v1457 = 0u;
  v1458 = 0u;
  v1455 = 0u;
  v1456 = 0u;
  v1453 = 0u;
  v1454 = 0u;
  v1451 = 0u;
  v1452 = 0u;
  v1449 = 0u;
  v1450 = 0u;
  v1448 = 0u;
  v1446 = 0u;
  v1447 = 0u;
  v1444 = 0u;
  v1445 = 0u;
  v1442 = 0u;
  v1443 = 0u;
  v1106 = (char *)(v1434 + 91);
  *(_OWORD *)v1441 = 0u;
  do
  {
    v1473[v1105] = v1105;
    v1107 = *(v1106 - 3);
    if (*(v1106 - 3))
    {
      if (v1107 == 2)
        v1108 = *v1106;
      else
        v1108 = *(v1106 - 1);
      v1441[v1105] = 1000000 * v1107 + 10000 * *(v1106 - 2) + v1108;
    }
    ++v1105;
    v1106 += 4;
  }
  while (v1105 != 128);
  VecSortIndexAscI4((int *)v1441, v1473, 0, 127);
  v1109 = 0;
  while (2)
  {
    v1110 = v1473[v1109];
    v1111 = v1434 + 4 * v1110;
    v1113 = *(unsigned __int8 *)(v1111 + 88);
    v1112 = (unsigned __int8 *)(v1111 + 88);
    if (v1113)
    {
      v1114 = *(_DWORD *)(v1431 + 4 * v1110 + 1640);
      v1115 = g_Logging_Cfg <= 3 && v1114 < 4;
      if (!v1115)
      {
        v1433 = v1112[2];
        if (v1112[2])
          v1116 = GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)v1112);
        else
          v1116 = -1;
        v1117 = *v1074;
        v1118 = 83;
        v1119 = 1u;
        do
        {
          *v1074 = v1117 + 1;
          *v1117 = v1118;
          v1117 = *v1074;
          if (*v1074 >= v1074[3])
          {
            v1117 = v1074[2];
            *v1074 = v1117;
          }
          v1118 = aSv[v1119++];
        }
        while (v1119 != 4);
        v1120 = ch_CONSTELL_ID[*v1112];
        *v1074 = v1117 + 1;
        *v1117 = v1120;
        v1121 = *v1074;
        if (*v1074 >= v1074[3])
        {
          v1121 = v1074[2];
          *v1074 = v1121;
        }
        v1122 = 3 * v1112[1];
        v1123 = ch_GNSS_SIGID[v1122];
        if (v1123)
        {
          v1124 = &ch_GNSS_SIGID[v1122 + 1];
          do
          {
            *v1074 = v1121 + 1;
            *v1121 = v1123;
            v1121 = *v1074;
            if (*v1074 >= v1074[3])
            {
              v1121 = v1074[2];
              *v1074 = v1121;
            }
            v1125 = *v1124++;
            v1123 = v1125;
          }
          while (v1125);
        }
        sprintf_4d(v1074, v1433);
        sprintf_3d(v1074, (char)v1112[3]);
        if (*v1112 == 2)
          v1126 = (char)v1112[3] + 8;
        else
          v1126 = 0;
        v1430 = v1116;
        sprintf_3d(v1074, v1126);
        v1432 = v1434 + v1110;
        sprintf_3d(v1074, *(unsigned __int8 *)(v1434 + v1110 + 856));
        v1127 = (*v1074)++;
        *v1127 = 32;
        if (*v1074 >= v1074[3])
          *v1074 = v1074[2];
        v1128 = v1434 + 2 * v1110;
        sprintf_04x(v1074, *(unsigned __int16 *)(v1128 + 984));
        sprintf_3d(v1074, *(_DWORD *)(v1434 + 4 * v1110 + 1240));
        LOBYTE(v1129) = *(_BYTE *)(v1432 + 1752);
        LOBYTE(v1130) = *(_BYTE *)(v1432 + 1880);
        v1131 = ((double)v1129 + (double)v1130 * 0.0625) * 10.0;
        if (v1131 <= 0.0)
          v1132 = -0.5;
        else
          v1132 = 0.5;
        v1133 = v1131 + v1132;
        if (v1133 <= 2147483650.0)
        {
          if (v1133 >= -2147483650.0)
            v1134 = (int)v1133;
          else
            v1134 = 0x80000000;
        }
        else
        {
          v1134 = 0x7FFFFFFF;
        }
        sprintf_4f((uint64_t)v1074, v1134, 2);
        LOBYTE(v1135) = *(_BYTE *)(v1434 + v1110 + 2008);
        LOBYTE(v1136) = *(_BYTE *)(v1434 + v1110 + 2136);
        v1137 = ((double)v1135 + (double)v1136 * 0.0625) * 10.0;
        if (v1137 <= 0.0)
          v1138 = -0.5;
        else
          v1138 = 0.5;
        v1139 = v1137 + v1138;
        if (v1139 <= 2147483650.0)
        {
          if (v1139 >= -2147483650.0)
            v1140 = (int)v1139;
          else
            v1140 = 0x80000000;
        }
        else
        {
          v1140 = 0x7FFFFFFF;
        }
        sprintf_4f((uint64_t)v1074, v1140, 2);
        v1141 = *(_WORD *)(v1128 + 984);
        if ((v1141 & 8) != 0)
        {
          if ((v1141 & 0xC0) != 0)
          {
            v1142 = (unsigned __int16 *)(v1434 + 2 * v1110 + 2904);
          }
          else
          {
            if ((v1141 & 0x30) == 0)
              goto LABEL_1917;
            v1142 = (unsigned __int16 *)(v1434 + 2 * v1110 + 2648);
          }
        }
        else
        {
LABEL_1917:
          v1142 = (unsigned __int16 *)(v1434 + 2 * v1110 + 2392);
        }
        sprintf_6d(v1074, *v1142);
        if (!v1433 || v1114 == 3)
        {
          v1144 = *v1074;
          v1145 = 32;
          v1146 = 1u;
          do
          {
            *v1074 = v1144 + 1;
            *v1144 = v1145;
            v1144 = *v1074;
            if (*v1074 >= v1074[3])
            {
              v1144 = v1074[2];
              *v1074 = v1144;
            }
            v1145 = aX90[v1146++];
          }
          while (v1146 != 13);
        }
        else
        {
          if (*(_BYTE *)(v1075 + v1110 + 57) && (v1143 = v1428 + 2 * v1110, *(_WORD *)(v1143 + 16648)))
          {
            sprintf_5d(v1074, *(unsigned __int16 *)(v1143 + 16648));
          }
          else
          {
            v1147 = *v1074;
            for (i6 = 5; i6 > 1; --i6)
            {
              *v1074 = v1147 + 1;
              *v1147 = 32;
              v1147 = *v1074;
              if (*v1074 >= v1074[3])
              {
                v1147 = v1074[2];
                *v1074 = v1147;
              }
            }
            if (*(__int16 *)(v1075 + 2 * v1110 + 62932) < 0)
            {
              *v1074 = v1147 + 1;
              v1150 = 120;
            }
            else if (*v1112 == 3
                   && (v1149 = v1433 - 1, *(_BYTE *)(v1422 + v1149 + 17672))
                   && !*(_BYTE *)(*(_QWORD *)(v1422 + 17616) + v1149))
            {
              *v1074 = v1147 + 1;
              v1150 = 109;
            }
            else
            {
              v1150 = ch_EPH_ALM[*(unsigned int *)(v1423 + 192 * *(unsigned __int16 *)(v1075 + 2 * v1110 + 62932) + 176)];
              *v1074 = v1147 + 1;
            }
            *v1147 = v1150;
            if (*v1074 >= v1074[3])
              *v1074 = v1074[2];
          }
          v1151 = *(char *)(v1424 + (int)GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)v1112));
          if (v1151 <= -9)
            v1152 = -9;
          else
            v1152 = v1151;
          sprintf_3d(v1074, v1152);
          v1153 = *(unsigned __int16 *)(v1424 + 2 * (int)GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)v1112) + 218);
          if ((v1153 & 0x8000) != 0)
          {
            v1154 = 0;
            v1155 = *v1074;
            v1156 = 32;
            do
            {
              *v1074 = v1155 + 1;
              *v1155 = v1156;
              v1155 = *v1074;
              if (*v1074 >= v1074[3])
              {
                v1155 = v1074[2];
                *v1074 = v1155;
              }
              v1156 = a0[++v1154];
            }
            while (v1154 != 4);
          }
          else
          {
            sprintf_4d(v1074, v1153);
          }
        }
        sprintf_4d(v1074, *(unsigned __int16 *)(v1434 + 2 * v1110 + 8152));
        v1157 = (*v1074)++;
        *v1157 = 32;
        if (*v1074 >= v1074[3])
          *v1074 = v1074[2];
        sprintf_sgR8(v1074, *(double *)(v1075 + 6752 + 8 * v1110 + 6328));
        v1158 = Meas_Used_BitField(v1075 + 6752, v1110);
        sprintf_2x(v1074, v1158);
        v1159 = *(int *)(v1075 + 6752 + 4 * v1110 + 568);
        if (v1159 >= 0x1E)
        {
          gn_report_assertion_failure("SV_Meas_Edit_Char");
          v1160 = 120;
        }
        else
        {
          v1160 = aCghkmnpqrstvya[v1159];
        }
        v1161 = (*v1074)++;
        *v1161 = v1160;
        v1162 = *v1074;
        if (*v1074 >= v1074[3])
          v1162 = v1074[2];
        *v1074 = v1162 + 1;
        *v1162 = 32;
        if (*v1074 >= v1074[3])
          *v1074 = v1074[2];
        if (*(_BYTE *)(v1075 + v1110 + 36872) || (*(_DWORD *)(v1075 + 4 * v1110 + 37128) - 1) <= 0x1C)
        {
          sprintf_sgR8(v1074, *(double *)(v1075 + 36560 + 8 * v1110 + 7352));
          v1163 = Meas_Used_BitField(v1075 + 36560, v1110);
          sprintf_2x(v1074, v1163);
          v1164 = *(int *)(v1075 + 36560 + 4 * v1110 + 568);
          if (v1164 >= 0x1E)
          {
            gn_report_assertion_failure("SV_Meas_Edit_Char");
            v1165 = 120;
          }
          else
          {
            v1165 = aCghkmnpqrstvya[v1164];
          }
          v1166 = v1430;
          v1167 = (*v1074)++;
          *v1167 = v1165;
          v1168 = *v1074;
          if (*v1074 >= v1074[3])
          {
            v1168 = v1074[2];
            *v1074 = v1168;
          }
          v1169 = " 1 ";
        }
        else
        {
          sprintf_sgR8(v1074, *(double *)(v1075 + 21656 + 8 * v1110 + 7352));
          v1187 = Meas_Used_BitField(v1075 + 21656, v1110);
          sprintf_2x(v1074, v1187);
          v1188 = *(int *)(v1075 + 21656 + 4 * v1110 + 568);
          if (v1188 >= 0x1E)
          {
            gn_report_assertion_failure("SV_Meas_Edit_Char");
            v1189 = 120;
          }
          else
          {
            v1189 = aCghkmnpqrstvya[v1188];
          }
          v1166 = v1430;
          v1206 = (*v1074)++;
          *v1206 = v1189;
          v1168 = *v1074;
          if (*v1074 >= v1074[3])
          {
            v1168 = v1074[2];
            *v1074 = v1168;
          }
          v1169 = " 2 ";
          if (!*(_BYTE *)(v1075 + v1110 + 51464))
            v1169 = " 0 ";
        }
        v1170 = *v1169;
        if (*v1169)
        {
          v1171 = (unsigned __int8 *)(v1169 + 1);
          do
          {
            *v1074 = v1168 + 1;
            *v1168 = v1170;
            v1168 = *v1074;
            if (*v1074 >= v1074[3])
            {
              v1168 = v1074[2];
              *v1074 = v1168;
            }
            v1172 = *v1171++;
            v1170 = v1172;
          }
          while (v1172);
        }
        if (v1433 && v1114 == 1)
        {
          v1173 = *(char *)(v1426 + (int)GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)v1112) + 5976);
          if (v1173 < 0 || !*(_BYTE *)(v1426 + 48 * v1173 + 76))
          {
            if (v1433 - 120 >= 0x27)
              v1175 = (int)((double)-*(__int16 *)(v1426 + 24) * 1.57542);
            else
              v1175 = -9999;
          }
          else
          {
            v1174 = v1112[1];
            if (v1174 <= 0xF && ((1 << v1174) & 0xDD77) != 0)
            {
              if (((1 << v1174) & 0xBBBF) != 0)
              {
                v1175 = *(__int16 *)(v1426 + 48 * v1173 + 94);
                goto LABEL_1987;
              }
              v1224 = *(__int16 *)(v1426 + 48 * v1173 + 94);
              v1225 = 118;
            }
            else
            {
              v1224 = *(__int16 *)(v1426 + 48 * v1173 + 94);
              v1225 = 115;
            }
            v1175 = v1224 * v1225 / 154;
          }
        }
        else
        {
          Get_SV_Carrier_Inv_Wavelength();
          v1175 = (int)(v1176 * *(double *)(v1434 + 8 * v1110 + 4440));
        }
LABEL_1987:
        sprintf_6d(v1074, v1175);
        v1177 = (*v1074)++;
        *v1177 = 32;
        v1178 = *v1074;
        if (*v1074 >= v1074[3])
        {
          v1178 = v1074[2];
          *v1074 = v1178;
        }
        if (*(_DWORD *)v1112)
        {
          v1179 = *(_DWORD *)v1075 - *(_DWORD *)(v1425 + 4 * v1110 + 576);
          if (v1179 >= -999)
          {
            v1183 = v1179 / 1000;
            if (v1183 >= 9)
              v1180 = 9;
            else
              v1180 = v1183;
          }
          else
          {
            v1180 = 0;
          }
          sprintf_2d(v1074, v1180);
        }
        else
        {
          v1181 = 0;
          v1182 = 32;
          do
          {
            *v1074 = v1178 + 1;
            *v1178 = v1182;
            v1178 = *v1074;
            if (*v1074 >= v1074[3])
            {
              v1178 = v1074[2];
              *v1074 = v1178;
            }
            v1182 = aX[++v1181];
          }
          while (v1181 != 2);
        }
        v1184 = 0;
        if (v1433)
        {
          LODWORD(v1185) = 0;
          if ((v1166 & 0x80000000) == 0)
          {
            if (*(char *)(v1426 + v1166 + 5976) < 0)
            {
              v1184 = (int)((double)-*(__int16 *)(v1426 + 24) * 1.57542) / 10;
              LODWORD(v1185) = (5381 * *(unsigned __int16 *)(v1426 + 4)) >> 10;
            }
            else
            {
              v1184 = *(unsigned __int16 *)(v1426 + 48 * *(unsigned __int8 *)(v1426 + v1166 + 5976) + 98);
              v1186 = v1112[1];
              if (v1186 <= 0xF && ((1 << v1186) & 0xDD77) != 0)
              {
                if (((1 << v1186) & 0xBBBF) != 0)
                  LODWORD(v1185) = *(unsigned __int16 *)(v1426 + 48 * *(unsigned __int8 *)(v1426 + v1166 + 5976) + 90);
                else
                  v1185 = (27889399
                         * (unint64_t)(118
                                            * *(unsigned __int16 *)(v1426
                                                                                + 48
                                                                                * *(unsigned __int8 *)(v1426 + v1166 + 5976)
                                                                                + 90))) >> 32;
              }
              else
              {
                v1185 = (27889399
                       * (unint64_t)(115
                                          * *(unsigned __int16 *)(v1426
                                                                              + 48
                                                                              * *(unsigned __int8 *)(v1426 + v1166 + 5976)
                                                                              + 90))) >> 32;
              }
            }
          }
        }
        else
        {
          LODWORD(v1185) = 0;
        }
        sprintf_5d(v1074, v1184);
        sprintf_6d(v1074, v1185);
        if (!Is_Legal(*(_DWORD *)v1112) || (v1166 & 0x80000000) != 0)
        {
          v1191 = *v1074;
          v1192 = 32;
          v1193 = 1u;
          v1190 = (_BYTE *)(v1075 + v1110 + 36872);
          do
          {
            *v1074 = v1191 + 1;
            *v1191 = v1192;
            v1191 = *v1074;
            if (*v1074 >= v1074[3])
            {
              v1191 = v1074[2];
              *v1074 = v1191;
            }
            v1192 = a00_0[v1193++];
          }
          while (v1193 != 15);
        }
        else
        {
          sprintf_8d(v1074, *(_DWORD *)(v1429 + 4 * v1110));
          sprintf_6d(v1074, *(__int16 *)(v1429 + 2 * v1110 + 512));
          v1190 = (_BYTE *)(v1075 + v1110 + 36872);
        }
        if (*(_BYTE *)(v1075 + v1110 + 7064)
          || (*(_DWORD *)(v1075 + 6752 + 4 * v1110 + 568) - 1) < 0x1D
          || *(_BYTE *)(v1075 + v1110 + 21968)
          || (*(_DWORD *)(v1075 + 4 * v1110 + 22224) - 1) < 0x1D
          || *v1190
          || (*(_DWORD *)(v1075 + 4 * v1110 + 37128) - 1) <= 0x1C)
        {
          v1194 = v1075 + 8 * v1110;
          sprintf_sgR8(v1074, *(double *)(v1194 + 19608));
          v1195 = sqrt(*(double *)(v1194 + 17432));
          if (v1195 <= 99999.0)
          {
            if (v1195 <= 999.9)
            {
              v1202 = v1195 * 10.0;
              if (v1202 <= 0.0)
                v1203 = -0.5;
              else
                v1203 = 0.5;
              v1204 = v1202 + v1203;
              if (v1204 <= 2147483650.0)
              {
                if (v1204 >= -2147483650.0)
                  v1205 = (int)v1204;
                else
                  v1205 = 0x80000000;
              }
              else
              {
                v1205 = 0x7FFFFFFF;
              }
              sprintf_5f((uint64_t)v1074, v1205, 2);
            }
            else
            {
              if (v1195 <= 0.0)
                v1199 = -0.5;
              else
                v1199 = 0.5;
              v1200 = v1195 + v1199;
              if (v1200 <= 2147483650.0)
              {
                if (v1200 >= -2147483650.0)
                  v1201 = (int)v1200;
                else
                  v1201 = 0x80000000;
              }
              else
              {
                v1201 = 0x7FFFFFFF;
              }
              sprintf_6d(v1074, v1201);
            }
          }
          else
          {
            v1196 = *v1074;
            v1197 = 32;
            v1198 = 1u;
            do
            {
              *v1074 = v1196 + 1;
              *v1196 = v1197;
              v1196 = *v1074;
              if (*v1074 >= v1074[3])
              {
                v1196 = v1074[2];
                *v1074 = v1196;
              }
              v1197 = a99999[v1198++];
            }
            while (v1198 != 7);
          }
          if (*v1190 || (*(_DWORD *)(v1075 + 4 * v1110 + 37128) - 1) <= 0x1C)
          {
            v1207 = v1075 + 8 * v1110;
            v1208 = v1207 + 36560;
            sprintf_sgR8(v1074, *(double *)(v1207 + 49416));
            v1209 = sqrt(*(double *)(v1208 + 10680));
            if (v1209 >= 9.89999962)
              v1210 = 9899.99962;
            else
              v1210 = v1209 * 1000.0;
            if (v1210 <= 0.0)
              v1211 = -0.5;
            else
              v1211 = 0.5;
            v1212 = v1210 + v1211;
            if (v1212 <= 2147483650.0)
            {
              if (v1212 >= -2147483650.0)
                v1213 = (int)v1212;
              else
                v1213 = 0x80000000;
            }
            else
            {
              v1213 = 0x7FFFFFFF;
            }
            v1214 = (uint64_t)v1074;
            v1215 = 4;
          }
          else
          {
            v1219 = v1075 + 8 * v1110;
            sprintf_sgR8(v1074, *(double *)(v1219 + 34512));
            v1220 = sqrt(*(double *)(v1219 + 32336));
            if (v1220 >= 99.9000015)
              v1221 = 9990.00015;
            else
              v1221 = v1220 * 100.0;
            if (v1221 <= 0.0)
              v1222 = -0.5;
            else
              v1222 = 0.5;
            v1223 = v1221 + v1222;
            if (v1223 <= 2147483650.0)
            {
              if (v1223 >= -2147483650.0)
                v1213 = (int)v1223;
              else
                v1213 = 0x80000000;
            }
            else
            {
              v1213 = 0x7FFFFFFF;
            }
            v1214 = (uint64_t)v1074;
            v1215 = 3;
          }
          sprintf_5f(v1214, v1213, v1215);
          sprintf_4d(v1074, *(unsigned __int8 *)(v1432 + 1752) - *(unsigned __int8 *)(v1075 + v1110 + 1882));
          v1216 = (*v1074)++;
          *v1216 = 32;
          if (*v1074 >= v1074[3])
            *v1074 = v1074[2];
          v1217 = v1429 + 8 * v1110;
          sprintf_sgR8(v1074, *(double *)(v1217 + 3168));
          sprintf_sgR8(v1074, *(double *)(v1217 + 4192));
          sprintf_3d(v1074, *(unsigned __int8 *)(v1428 + v1110 + 14208));
          sprintf_sgR8(v1074, sqrt(*(double *)(v1428 + 8 * v1110 + 13184)));
        }
        v1218 = (*v1074)++;
        *v1218 = 10;
        if (*v1074 >= v1074[3])
          *v1074 = v1074[2];
        GNSS_Nav_Debug_Flush_Check((uint64_t)v1074);
      }
    }
    if (++v1109 != 128)
      continue;
    break;
  }
  v1226 = 0;
  v1227 = (char **)v1427[35];
  v1228 = v1427[5];
  v1229 = v1427[10];
  v1230 = (unsigned __int8 *)v1427[8];
  v1231 = v1427[16];
  v1232 = v1427[21];
  v1233 = *v1227;
  v1234 = 84;
  do
  {
    *v1227 = v1233 + 1;
    *v1233 = v1234;
    v1233 = *v1227;
    if (*v1227 >= v1227[3])
    {
      v1233 = v1227[2];
      *v1227 = v1233;
    }
    v1234 = aTheEnd[++v1226];
  }
  while (v1226 != 8);
  v1235 = &ch_Pos_Confid[5 * *(unsigned int *)(v1229 + 12) + 1];
  v1236 = 32;
  do
  {
    *v1227 = v1233 + 1;
    *v1233 = v1236;
    v1233 = *v1227;
    if (*v1227 >= v1227[3])
    {
      v1233 = v1227[2];
      *v1227 = v1233;
    }
    v1237 = *v1235++;
    v1236 = v1237;
  }
  while (v1237);
  sprintf_sp1d(v1227, *(unsigned __int8 *)(v1231 + 243));
  sprintf_sp1d(v1227, *(_DWORD *)(v1232 + 1876));
  sprintf_sp1d(v1227, *v1230);
  sprintf_sp1d(v1227, *(unsigned __int8 *)(v1231 + 242));
  v1238 = 0;
  v1239 = *v1227;
  v1240 = 32;
  do
  {
    *v1227 = v1239 + 1;
    *v1239 = v1240;
    v1239 = *v1227;
    if (*v1227 >= v1227[3])
    {
      v1239 = v1227[2];
      *v1227 = v1239;
    }
    v1240 = aVis[++v1238];
  }
  while (v1238 != 4);
  sprintf_3d(v1227, *(unsigned __int8 *)(v1228 + 8592));
  if (*(_BYTE *)(v1228 + 8592))
  {
    v1241 = 0;
    do
    {
      v1481[0] = 0;
      v1242 = v1228 + 2 * v1241;
      v1243 = *(unsigned __int16 *)(v1242 + 6194);
      if ((__int16)v1243 < 1)
      {
        v1248 = 0;
        v1249 = (__int16 *)(v1242 + 6194);
        v1250 = *v1227;
        v1251 = 32;
        do
        {
          *v1227 = v1250 + 1;
          *v1250 = v1251;
          v1250 = *v1227;
          if (*v1227 >= v1227[3])
          {
            v1250 = v1227[2];
            *v1227 = v1250;
          }
          v1251 = aX[++v1248];
        }
        while (v1248 != 2);
        v1244 = *v1249;
      }
      else
      {
        v1244 = LongPrnIdx_To_Prn(v1243 - 1, (int *)v1481);
        v1245 = (*v1227)++;
        *v1245 = 32;
        v1246 = *v1227;
        if (*v1227 >= v1227[3])
          v1246 = v1227[2];
        v1247 = ch_CONSTELL_ID[v1481[0]];
        *v1227 = v1246 + 1;
        *v1246 = v1247;
        if (*v1227 >= v1227[3])
          *v1227 = v1227[2];
      }
      if (v1244 >= 0)
        v1252 = v1244;
      else
        v1252 = -v1244;
      sprintf1da(v1227, v1252, v1482, 0, v1244 >> 31);
      ++v1241;
    }
    while (v1241 < *(unsigned __int8 *)(v1228 + 8592));
  }
  v1253 = *v1227;
  for (i7 = 3; i7 > 1; --i7)
  {
    *v1227 = v1253 + 1;
    *v1253 = 32;
    v1253 = *v1227;
    if (*v1227 >= v1227[3])
    {
      v1253 = v1227[2];
      *v1227 = v1253;
    }
  }
  sprintf_sp1d(v1227, *(unsigned __int8 *)(v1231 + 15408));
  sprintf_sp1d(v1227, *(unsigned __int8 *)(v1231 + 15409));
  sprintf_sgR8(v1227, *(double *)(v1232 + 6792));
  sprintf_sp1d(v1227, *(unsigned __int8 *)(v1232 + 6755));
  sprintf_sp1d(v1227, *(unsigned __int8 *)(v1232 + 62033));
  sprintf_sgR8(v1227, *(double *)(v1232 + 21696));
  sprintf_sp1d(v1227, *(unsigned __int8 *)(v1232 + 21659));
  sprintf_sp1d(v1227, *(unsigned __int8 *)(v1232 + 62035));
  sprintf_sgR8(v1227, *(double *)(v1232 + 36600));
  sprintf_sp1d(v1227, *(unsigned __int8 *)(v1232 + 36563));
  sprintf_sp1d(v1227, *(unsigned __int8 *)(v1232 + 62036));
  sprintf_sp1d(v1227, *(unsigned __int16 *)(v1231 + 244));
  sprintf_sp1d(v1227, *(unsigned __int8 *)(v1232 + 62034));
  v1255 = (*v1227)++;
  *v1255 = 10;
  if (*v1227 >= v1227[3])
    *v1227 = v1227[2];
  result = GNSS_Nav_Debug_Flush_Check((uint64_t)v1227);
  if (g_Logging_Cfg < 6)
    return result;
  v1257 = (char **)v1427[35];
  v1258 = (_BYTE *)v1427[5];
  v1259 = *(double *)(v1427[10] + 48);
  v1260 = -0.5;
  if (v1259 > 0.0)
    v1260 = 0.5;
  v1261 = v1259 + v1260;
  if (v1261 <= 2147483650.0)
  {
    if (v1261 >= -2147483650.0)
      v1262 = (int)v1261;
    else
      v1262 = 0x80000000;
  }
  else
  {
    v1262 = 0x7FFFFFFF;
  }
  v1263 = v1258 + 8592;
  v1264 = v1427[4];
  v1435 = v1262 % 86400;
  if (g_Logging_Cfg >= 7)
  {
    v1265 = *v1257;
    v1266 = 83;
    v1267 = 1u;
    do
    {
      *v1257 = v1265 + 1;
      *v1265 = v1266;
      v1265 = *v1257;
      if (*v1257 >= v1257[3])
      {
        v1265 = v1257[2];
        *v1257 = v1265;
      }
      v1266 = aSvid[v1267++];
    }
    while (v1267 != 6);
    sprintf_8d(v1257, v1435);
    v1268 = (*v1257)++;
    *v1268 = 32;
    if (*v1257 >= v1257[3])
      *v1257 = v1257[2];
    v1269 = 0;
    while (1)
    {
      if (v1269 <= 91)
      {
        switch(v1269)
        {
          case 0:
            v1270 = "  G ";
            goto LABEL_2161;
          case 32:
            v1270 = "  R ";
LABEL_2161:
            v1271 = *v1270;
            if (*v1270)
            {
              v1272 = *v1257;
              v1273 = (unsigned __int8 *)(v1270 + 1);
              do
              {
                *v1257 = v1272 + 1;
                *v1272 = v1271;
                v1272 = *v1257;
                if (*v1257 >= v1257[3])
                {
                  v1272 = v1257[2];
                  *v1257 = v1272;
                }
                v1274 = *v1273++;
                v1271 = v1274;
              }
              while (v1274);
            }
            break;
          case 56:
            v1270 = "  E ";
            goto LABEL_2161;
        }
      }
      else if (v1269 > 164)
      {
        if (v1269 == 165)
        {
          v1270 = "  N ";
          goto LABEL_2161;
        }
        if (v1269 == 179)
        {
          v1270 = "  S ";
          goto LABEL_2161;
        }
      }
      else
      {
        if (v1269 == 92)
        {
          v1270 = "  B ";
          goto LABEL_2161;
        }
        if (v1269 == 155)
        {
          v1270 = "  Q ";
          goto LABEL_2161;
        }
      }
      v1275 = Num_Prn_Idx_To_GNSS_Id(v1269);
      sprintf_4d(v1257, v1275);
      if (++v1269 == 218)
      {
        v1276 = (*v1257)++;
        *v1276 = 10;
        if (*v1257 >= v1257[3])
          *v1257 = v1257[2];
        GNSS_Nav_Debug_Flush_Check((uint64_t)v1257);
        break;
      }
    }
  }
  v1277 = *v1257;
  v1278 = 69;
  v1279 = 1u;
  do
  {
    *v1257 = v1277 + 1;
    *v1277 = v1278;
    v1277 = *v1257;
    if (*v1257 >= v1257[3])
    {
      v1277 = v1257[2];
      *v1257 = v1277;
    }
    v1278 = aElev[v1279++];
  }
  while (v1279 != 6);
  sprintf_8d(v1257, v1435);
  v1280 = (*v1257)++;
  *v1280 = 32;
  if (*v1257 >= v1257[3])
    *v1257 = v1257[2];
  v1281 = 0;
  while (2)
  {
    if (v1281 <= 91)
    {
      switch(v1281)
      {
        case 0:
          v1282 = "  G ";
          goto LABEL_2193;
        case 32:
          v1282 = "  R ";
          goto LABEL_2193;
        case 56:
          v1282 = "  E ";
          goto LABEL_2193;
      }
    }
    else if (v1281 > 164)
    {
      if (v1281 == 165)
      {
        v1282 = "  N ";
        goto LABEL_2193;
      }
      if (v1281 == 179)
      {
        v1282 = "  S ";
        goto LABEL_2193;
      }
    }
    else
    {
      if (v1281 == 92)
      {
        v1282 = "  B ";
        goto LABEL_2193;
      }
      if (v1281 == 155)
      {
        v1282 = "  Q ";
LABEL_2193:
        v1283 = *v1282;
        if (*v1282)
        {
          v1284 = *v1257;
          v1285 = (unsigned __int8 *)(v1282 + 1);
          do
          {
            *v1257 = v1284 + 1;
            *v1284 = v1283;
            v1284 = *v1257;
            if (*v1257 >= v1257[3])
            {
              v1284 = v1257[2];
              *v1257 = v1284;
            }
            v1286 = *v1285++;
            v1283 = v1286;
          }
          while (v1286);
        }
      }
    }
    sprintf_4d(v1257, *(char *)(v1264 + v1281++));
    if (v1281 != 218)
      continue;
    break;
  }
  v1287 = (*v1257)++;
  *v1287 = 10;
  if (*v1257 >= v1257[3])
    *v1257 = v1257[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1257);
  v1288 = *v1257;
  v1289 = 65;
  v1290 = 1u;
  do
  {
    *v1257 = v1288 + 1;
    *v1288 = v1289;
    v1288 = *v1257;
    if (*v1257 >= v1257[3])
    {
      v1288 = v1257[2];
      *v1257 = v1288;
    }
    v1289 = aAzim[v1290++];
  }
  while (v1290 != 6);
  sprintf_8d(v1257, v1435);
  v1291 = (*v1257)++;
  *v1291 = 32;
  if (*v1257 >= v1257[3])
    *v1257 = v1257[2];
  v1292 = 0;
  while (2)
  {
    if (v1292 <= 91)
    {
      switch(v1292)
      {
        case 0:
          v1293 = "  G ";
          goto LABEL_2224;
        case 32:
          v1293 = "  R ";
          goto LABEL_2224;
        case 56:
          v1293 = "  E ";
          goto LABEL_2224;
      }
    }
    else if (v1292 > 164)
    {
      if (v1292 == 165)
      {
        v1293 = "  N ";
        goto LABEL_2224;
      }
      if (v1292 == 179)
      {
        v1293 = "  S ";
        goto LABEL_2224;
      }
    }
    else
    {
      if (v1292 == 92)
      {
        v1293 = "  B ";
        goto LABEL_2224;
      }
      if (v1292 == 155)
      {
        v1293 = "  Q ";
LABEL_2224:
        v1294 = *v1293;
        if (*v1293)
        {
          v1295 = *v1257;
          v1296 = (unsigned __int8 *)(v1293 + 1);
          do
          {
            *v1257 = v1295 + 1;
            *v1295 = v1294;
            v1295 = *v1257;
            if (*v1257 >= v1257[3])
            {
              v1295 = v1257[2];
              *v1257 = v1295;
            }
            v1297 = *v1296++;
            v1294 = v1297;
          }
          while (v1297);
        }
      }
    }
    sprintf_4d(v1257, *(__int16 *)(v1264 + 2 * v1292++ + 218));
    if (v1292 != 218)
      continue;
    break;
  }
  v1298 = (*v1257)++;
  *v1298 = 10;
  if (*v1257 >= v1257[3])
    *v1257 = v1257[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1257);
  v1299 = *v1257;
  v1300 = 83;
  v1301 = 1u;
  do
  {
    *v1257 = v1299 + 1;
    *v1299 = v1300;
    v1299 = *v1257;
    if (*v1257 >= v1257[3])
    {
      v1299 = v1257[2];
      *v1257 = v1299;
    }
    v1300 = aSidx[v1301++];
  }
  while (v1301 != 6);
  sprintf_8d(v1257, v1435);
  v1302 = (*v1257)++;
  *v1302 = 32;
  if (*v1257 >= v1257[3])
    *v1257 = v1257[2];
  v1303 = 0;
  while (2)
  {
    if (v1303 <= 91)
    {
      switch(v1303)
      {
        case 0:
          v1304 = "  G ";
          goto LABEL_2255;
        case 32:
          v1304 = "  R ";
          goto LABEL_2255;
        case 56:
          v1304 = "  E ";
          goto LABEL_2255;
      }
    }
    else if (v1303 > 164)
    {
      if (v1303 == 165)
      {
        v1304 = "  N ";
        goto LABEL_2255;
      }
      if (v1303 == 179)
      {
        v1304 = "  S ";
        goto LABEL_2255;
      }
    }
    else
    {
      if (v1303 == 92)
      {
        v1304 = "  B ";
        goto LABEL_2255;
      }
      if (v1303 == 155)
      {
        v1304 = "  Q ";
LABEL_2255:
        v1305 = *v1304;
        if (*v1304)
        {
          v1306 = *v1257;
          v1307 = (unsigned __int8 *)(v1304 + 1);
          do
          {
            *v1257 = v1306 + 1;
            *v1306 = v1305;
            v1306 = *v1257;
            if (*v1257 >= v1257[3])
            {
              v1306 = v1257[2];
              *v1257 = v1306;
            }
            v1308 = *v1307++;
            v1305 = v1308;
          }
          while (v1308);
        }
      }
    }
    sprintf_4d(v1257, (char)v1258[v1303++ + 5976]);
    if (v1303 != 218)
      continue;
    break;
  }
  v1309 = (*v1257)++;
  *v1309 = 10;
  if (*v1257 >= v1257[3])
    *v1257 = v1257[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1257);
  if (g_Logging_Cfg > 6)
  {
    v1310 = v1427[7];
    v1311 = v1427[9];
    v1312 = 72;
    v1313 = 1u;
    v1314 = *v1257;
    do
    {
      *v1257 = v1314 + 1;
      *v1314 = v1312;
      v1314 = *v1257;
      if (*v1257 >= v1257[3])
      {
        v1314 = v1257[2];
        *v1257 = v1314;
      }
      v1312 = aHL1[v1313++];
    }
    while (v1313 != 6);
    sprintf_8d(v1257, v1435);
    v1315 = (*v1257)++;
    *v1315 = 32;
    if (*v1257 >= v1257[3])
      *v1257 = v1257[2];
    v1316 = 0;
    while (2)
    {
      if (v1316 <= 91)
      {
        switch(v1316)
        {
          case 0:
            v1317 = "  G ";
            goto LABEL_2287;
          case 32:
            v1317 = "  R ";
            goto LABEL_2287;
          case 56:
            v1317 = "  E ";
            goto LABEL_2287;
        }
      }
      else if (v1316 > 164)
      {
        if (v1316 == 165)
        {
          v1317 = "  N ";
          goto LABEL_2287;
        }
        if (v1316 == 179)
        {
          v1317 = "  S ";
          goto LABEL_2287;
        }
      }
      else
      {
        if (v1316 == 92)
        {
          v1317 = "  B ";
          goto LABEL_2287;
        }
        if (v1316 == 155)
        {
          v1317 = "  Q ";
LABEL_2287:
          v1318 = *v1317;
          if (*v1317)
          {
            v1319 = *v1257;
            v1320 = (unsigned __int8 *)(v1317 + 1);
            do
            {
              *v1257 = v1319 + 1;
              *v1319 = v1318;
              v1319 = *v1257;
              if (*v1257 >= v1257[3])
              {
                v1319 = v1257[2];
                *v1257 = v1319;
              }
              v1321 = *v1320++;
              v1318 = v1321;
            }
            while (v1321);
          }
        }
      }
      sprintf_4d(v1257, *(unsigned __int8 *)(v1310 + v1316++ + 50616));
      if (v1316 != 218)
        continue;
      break;
    }
    v1322 = (*v1257)++;
    *v1322 = 10;
    if (*v1257 >= v1257[3])
      *v1257 = v1257[2];
    GNSS_Nav_Debug_Flush_Check((uint64_t)v1257);
    v1323 = *v1257;
    v1324 = 72;
    v1325 = 1u;
    do
    {
      *v1257 = v1323 + 1;
      *v1323 = v1324;
      v1323 = *v1257;
      if (*v1257 >= v1257[3])
      {
        v1323 = v1257[2];
        *v1257 = v1323;
      }
      v1324 = aHL5[v1325++];
    }
    while (v1325 != 6);
    sprintf_8d(v1257, v1435);
    v1326 = (*v1257)++;
    *v1326 = 32;
    if (*v1257 >= v1257[3])
      *v1257 = v1257[2];
    v1327 = 0;
    while (2)
    {
      if (v1327 <= 91)
      {
        switch(v1327)
        {
          case 0:
            v1328 = "  G ";
            goto LABEL_2318;
          case 32:
            v1328 = "  R ";
            goto LABEL_2318;
          case 56:
            v1328 = "  E ";
            goto LABEL_2318;
        }
      }
      else if (v1327 > 164)
      {
        if (v1327 == 165)
        {
          v1328 = "  N ";
          goto LABEL_2318;
        }
        if (v1327 == 179)
        {
          v1328 = "  S ";
          goto LABEL_2318;
        }
      }
      else
      {
        if (v1327 == 92)
        {
          v1328 = "  B ";
          goto LABEL_2318;
        }
        if (v1327 == 155)
        {
          v1328 = "  Q ";
LABEL_2318:
          v1329 = *v1328;
          if (*v1328)
          {
            v1330 = *v1257;
            v1331 = (unsigned __int8 *)(v1328 + 1);
            do
            {
              *v1257 = v1330 + 1;
              *v1330 = v1329;
              v1330 = *v1257;
              if (*v1257 >= v1257[3])
              {
                v1330 = v1257[2];
                *v1257 = v1330;
              }
              v1332 = *v1331++;
              v1329 = v1332;
            }
            while (v1332);
          }
        }
      }
      sprintf_4d(v1257, *(unsigned __int8 *)(v1310 + v1327++ + 50834));
      if (v1327 == 218)
      {
        v1333 = (*v1257)++;
        *v1333 = 10;
        if (*v1257 >= v1257[3])
          *v1257 = v1257[2];
        GNSS_Nav_Debug_Flush_Check((uint64_t)v1257);
        v1334 = *v1257;
        v1335 = 73;
        v1336 = 1u;
        do
        {
          *v1257 = v1334 + 1;
          *v1334 = v1335;
          v1334 = *v1257;
          if (*v1257 >= v1257[3])
          {
            v1334 = v1257[2];
            *v1257 = v1334;
          }
          v1335 = aIL1[v1336++];
        }
        while (v1336 != 6);
        sprintf_8d(v1257, v1435);
        v1337 = (*v1257)++;
        *v1337 = 32;
        if (*v1257 >= v1257[3])
          *v1257 = v1257[2];
        v1338 = 0;
        while (2)
        {
          if (v1338 <= 91)
          {
            switch(v1338)
            {
              case 0:
                v1339 = "  G ";
                goto LABEL_2349;
              case 32:
                v1339 = "  R ";
                goto LABEL_2349;
              case 56:
                v1339 = "  E ";
                goto LABEL_2349;
            }
          }
          else if (v1338 > 164)
          {
            if (v1338 == 165)
            {
              v1339 = "  N ";
              goto LABEL_2349;
            }
            if (v1338 == 179)
            {
              v1339 = "  S ";
              goto LABEL_2349;
            }
          }
          else
          {
            if (v1338 == 92)
            {
              v1339 = "  B ";
              goto LABEL_2349;
            }
            if (v1338 == 155)
            {
              v1339 = "  Q ";
LABEL_2349:
              v1340 = *v1339;
              if (*v1339)
              {
                v1341 = *v1257;
                v1342 = (unsigned __int8 *)(v1339 + 1);
                do
                {
                  *v1257 = v1341 + 1;
                  *v1341 = v1340;
                  v1341 = *v1257;
                  if (*v1257 >= v1257[3])
                  {
                    v1341 = v1257[2];
                    *v1257 = v1341;
                  }
                  v1343 = *v1342++;
                  v1340 = v1343;
                }
                while (v1343);
              }
            }
          }
          sprintf_4d(v1257, *(unsigned __int8 *)(v1311 + v1338++ + 249));
          if (v1338 != 218)
            continue;
          break;
        }
        v1344 = (*v1257)++;
        *v1344 = 10;
        if (*v1257 >= v1257[3])
          *v1257 = v1257[2];
        GNSS_Nav_Debug_Flush_Check((uint64_t)v1257);
        v1345 = *v1257;
        v1346 = 73;
        v1347 = 1u;
        do
        {
          *v1257 = v1345 + 1;
          *v1345 = v1346;
          v1345 = *v1257;
          if (*v1257 >= v1257[3])
          {
            v1345 = v1257[2];
            *v1257 = v1345;
          }
          v1346 = aIL5[v1347++];
        }
        while (v1347 != 6);
        sprintf_8d(v1257, v1435);
        v1348 = (*v1257)++;
        *v1348 = 32;
        if (*v1257 >= v1257[3])
          *v1257 = v1257[2];
        v1349 = 0;
        while (2)
        {
          if (v1349 <= 91)
          {
            switch(v1349)
            {
              case 0:
                v1350 = "  G ";
                goto LABEL_2380;
              case 32:
                v1350 = "  R ";
                goto LABEL_2380;
              case 56:
                v1350 = "  E ";
                goto LABEL_2380;
            }
          }
          else if (v1349 > 164)
          {
            if (v1349 == 165)
            {
              v1350 = "  N ";
              goto LABEL_2380;
            }
            if (v1349 == 179)
            {
              v1350 = "  S ";
              goto LABEL_2380;
            }
          }
          else
          {
            if (v1349 == 92)
            {
              v1350 = "  B ";
              goto LABEL_2380;
            }
            if (v1349 == 155)
            {
              v1350 = "  Q ";
LABEL_2380:
              v1351 = *v1350;
              if (*v1350)
              {
                v1352 = *v1257;
                v1353 = (unsigned __int8 *)(v1350 + 1);
                do
                {
                  *v1257 = v1352 + 1;
                  *v1352 = v1351;
                  v1352 = *v1257;
                  if (*v1257 >= v1257[3])
                  {
                    v1352 = v1257[2];
                    *v1257 = v1352;
                  }
                  v1354 = *v1353++;
                  v1351 = v1354;
                }
                while (v1354);
              }
            }
          }
          sprintf_4d(v1257, *(unsigned __int8 *)(v1311 + v1349++ + 528));
          if (v1349 == 218)
          {
            v1355 = (*v1257)++;
            *v1355 = 10;
            if (*v1257 >= v1257[3])
              *v1257 = v1257[2];
            GNSS_Nav_Debug_Flush_Check((uint64_t)v1257);
            goto LABEL_2389;
          }
          continue;
        }
      }
      continue;
    }
  }
LABEL_2389:
  v1356 = *v1257;
  v1357 = 75;
  v1358 = 1u;
  do
  {
    *v1257 = v1356 + 1;
    *v1356 = v1357;
    v1356 = *v1257;
    if (*v1257 >= v1257[3])
    {
      v1356 = v1257[2];
      *v1257 = v1356;
    }
    v1357 = aKvis[v1358++];
  }
  while (v1358 != 6);
  sprintf_8d(v1257, v1435);
  v1359 = *v1257;
  v1360 = 32;
  v1361 = 1u;
  do
  {
    *v1257 = v1359 + 1;
    *v1359 = v1360;
    v1359 = *v1257;
    if (*v1257 >= v1257[3])
    {
      v1359 = v1257[2];
      *v1257 = v1359;
    }
    v1360 = asc_24BBE4495[v1361++];
  }
  while (v1361 != 6);
  v1362 = 0;
  v1363 = *v1263;
  if (v1363 >= 0xD2)
    v1364 = 218;
  else
    v1364 = v1363 + 8;
  do
  {
    if (v1362 == *v1263)
    {
      v1365 = 0;
      v1366 = *v1257;
      v1367 = 32;
      do
      {
        *v1257 = v1366 + 1;
        *v1366 = v1367;
        v1366 = *v1257;
        if (*v1257 >= v1257[3])
        {
          v1366 = v1257[2];
          *v1257 = v1366;
        }
        v1367 = asc_24BBE449B[++v1365];
      }
      while (v1365 != 4);
    }
    sprintf_4d(v1257, *(__int16 *)&v1258[2 * v1362++ + 6194]);
  }
  while (v1362 != v1364);
  v1368 = (*v1257)++;
  *v1368 = 10;
  if (*v1257 >= v1257[3])
    *v1257 = v1257[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1257);
  v1369 = *v1257;
  v1370 = 77;
  v1371 = 1u;
  do
  {
    *v1257 = v1369 + 1;
    *v1369 = v1370;
    v1369 = *v1257;
    if (*v1257 >= v1257[3])
    {
      v1369 = v1257[2];
      *v1257 = v1369;
    }
    v1370 = aMvis[v1371++];
  }
  while (v1371 != 6);
  sprintf_8d(v1257, v1435);
  v1372 = *v1257;
  v1373 = 32;
  v1374 = 1u;
  do
  {
    *v1257 = v1372 + 1;
    *v1372 = v1373;
    v1372 = *v1257;
    if (*v1257 >= v1257[3])
    {
      v1372 = v1257[2];
      *v1257 = v1372;
    }
    v1373 = asc_24BBE4495[v1374++];
  }
  while (v1374 != 6);
  v1375 = 0;
  v1376 = v1258[8593];
  if (v1376 >= 0xD2)
    v1377 = 218;
  else
    v1377 = v1376 + 8;
  do
  {
    if (v1375 == v1258[8593])
    {
      v1378 = 0;
      v1379 = *v1257;
      v1380 = 32;
      do
      {
        *v1257 = v1379 + 1;
        *v1379 = v1380;
        v1379 = *v1257;
        if (*v1257 >= v1257[3])
        {
          v1379 = v1257[2];
          *v1257 = v1379;
        }
        v1380 = asc_24BBE449B[++v1378];
      }
      while (v1378 != 4);
    }
    sprintf_4d(v1257, *(__int16 *)&v1258[2 * v1375++ + 6630]);
  }
  while (v1375 != v1377);
  v1381 = (*v1257)++;
  *v1381 = 10;
  if (*v1257 >= v1257[3])
    *v1257 = v1257[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1257);
  v1382 = *v1257;
  v1383 = 65;
  v1384 = 1u;
  do
  {
    *v1257 = v1382 + 1;
    *v1382 = v1383;
    v1382 = *v1257;
    if (*v1257 >= v1257[3])
    {
      v1382 = v1257[2];
      *v1257 = v1382;
    }
    v1383 = aAaok[v1384++];
  }
  while (v1384 != 6);
  sprintf_8d(v1257, v1435);
  v1385 = *v1257;
  v1386 = 32;
  v1387 = 1u;
  do
  {
    *v1257 = v1385 + 1;
    *v1385 = v1386;
    v1385 = *v1257;
    if (*v1257 >= v1257[3])
    {
      v1385 = v1257[2];
      *v1257 = v1385;
    }
    v1386 = asc_24BBE4495[v1387++];
  }
  while (v1387 != 6);
  v1388 = 0;
  v1389 = v1258[8596];
  if (v1389 >= 0x73)
    v1390 = 123;
  else
    v1390 = v1389 + 8;
  do
  {
    if (v1388 == v1258[8596])
    {
      v1391 = 0;
      v1392 = *v1257;
      v1393 = 32;
      do
      {
        *v1257 = v1392 + 1;
        *v1392 = v1393;
        v1392 = *v1257;
        if (*v1257 >= v1257[3])
        {
          v1392 = v1257[2];
          *v1257 = v1392;
        }
        v1393 = asc_24BBE449B[++v1391];
      }
      while (v1391 != 4);
    }
    sprintf_4d(v1257, v1258[48 * v1388++ + 76]);
  }
  while (v1388 != v1390);
  v1394 = (*v1257)++;
  *v1394 = 10;
  if (*v1257 >= v1257[3])
    *v1257 = v1257[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1257);
  v1395 = *v1257;
  v1396 = 86;
  v1397 = 1u;
  do
  {
    *v1257 = v1395 + 1;
    *v1395 = v1396;
    v1395 = *v1257;
    if (*v1257 >= v1257[3])
    {
      v1395 = v1257[2];
      *v1257 = v1395;
    }
    v1396 = aViz[v1397++];
  }
  while (v1397 != 6);
  sprintf_8d(v1257, v1435);
  sprintf_5d(v1257, *v1263);
  sprintf_4d(v1257, v1258[8593]);
  sprintf_4d(v1257, v1258[8594]);
  sprintf_4d(v1257, v1258[8595]);
  sprintf_4d(v1257, v1258[8596]);
  if (*v1263)
  {
    v1398 = 0;
    do
    {
      v1481[0] = 0;
      v1399 = &v1258[2 * v1398];
      v1400 = *((unsigned __int16 *)v1399 + 3097);
      if ((__int16)v1400 < 1)
      {
        v1405 = 0;
        v1406 = (__int16 *)(v1399 + 6194);
        v1407 = *v1257;
        v1408 = 32;
        do
        {
          *v1257 = v1407 + 1;
          *v1407 = v1408;
          v1407 = *v1257;
          if (*v1257 >= v1257[3])
          {
            v1407 = v1257[2];
            *v1257 = v1407;
          }
          v1408 = aX[++v1405];
        }
        while (v1405 != 2);
        v1401 = *v1406;
      }
      else
      {
        v1401 = LongPrnIdx_To_Prn(v1400 - 1, (int *)v1481);
        v1402 = (*v1257)++;
        *v1402 = 32;
        v1403 = *v1257;
        if (*v1257 >= v1257[3])
          v1403 = v1257[2];
        v1404 = ch_CONSTELL_ID[v1481[0]];
        *v1257 = v1403 + 1;
        *v1403 = v1404;
        if (*v1257 >= v1257[3])
          *v1257 = v1257[2];
      }
      if (v1401 >= 0)
        v1409 = v1401;
      else
        v1409 = -v1401;
      sprintf1da(v1257, v1409, v1482, 0, v1401 >> 31);
      ++v1398;
    }
    while (v1398 < *v1263);
  }
  v1410 = 0;
  v1411 = *v1257;
  v1412 = 32;
  do
  {
    *v1257 = v1411 + 1;
    *v1411 = v1412;
    v1411 = *v1257;
    if (*v1257 >= v1257[3])
    {
      v1411 = v1257[2];
      *v1257 = v1411;
    }
    v1412 = aGfvz[++v1410];
  }
  while (v1410 != 8);
  sprintf_4d(v1257, (char)v1258[8671]);
  sprintf_3d(v1257, (char)v1258[8670]);
  v1413 = 0;
  v1414 = *v1257;
  v1415 = 32;
  do
  {
    *v1257 = v1414 + 1;
    *v1414 = v1415;
    v1414 = *v1257;
    if (*v1257 >= v1257[3])
    {
      v1414 = v1257[2];
      *v1257 = v1414;
    }
    v1415 = asc_24BBE405D[++v1413];
  }
  while (v1413 != 2);
  for (i8 = 0; i8 != 14; ++i8)
    sprintf_3d(v1257, (char)v1258[i8 + 8656]);
  v1417 = (*v1257)++;
  *v1417 = 10;
  if (*v1257 >= v1257[3])
    *v1257 = v1257[2];
  return GNSS_Nav_Debug_Flush_Check((uint64_t)v1257);
}

_QWORD *print_line_LS(_QWORD *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  double v9;
  double v10;
  double *v11;
  double *v12;
  const char *v13;
  char v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  _BYTE *v23;
  _BYTE *v24;
  char *v25;
  char v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  double v30;
  double v31;
  BOOL v32;
  double v33;
  double v34;
  double v35;
  unsigned int v36;
  uint64_t v37;
  char *v38;
  char v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  char *v43;
  char v44;
  _BYTE *v45;
  _BYTE *v46;
  char *v47;
  _BYTE *v48;
  char *v49;
  _BYTE *v50;
  char *v51;
  _BYTE *v52;
  char *v53;
  _BYTE *v54;
  char *v55;
  _BYTE *v56;
  char *v57;
  _BYTE *v58;
  char *v59;
  _BYTE *v60;
  char *v61;
  _BYTE *v62;
  char *v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  unsigned int v69;
  _BYTE *v70;
  char *v71;
  _BYTE *v72;
  char *v73;
  _BYTE *v74;
  char *v75;
  _BYTE *v76;
  char *v77;
  _BYTE *v78;
  char *v79;
  _BYTE *v80;
  char *v81;
  _BYTE *v82;
  char *v83;
  _BYTE *v84;
  char *v85;
  _BYTE *v86;

  v2 = result[35];
  v3 = result[10];
  v4 = result[16];
  v5 = (double *)result[25];
  switch(a2)
  {
    case 1:
      v6 = result[21];
      v7 = *(char *)(v6 + 63760);
      v8 = *(char *)(v6 + 63761);
      v9 = 0.0;
      if (*(char *)(v6 + 63759) < 0)
      {
        v10 = 9999000.0;
      }
      else
      {
        v10 = 9999000.0;
        if (*(double *)(v6 + 8 * *(unsigned __int8 *)(v6 + 63759) + 63464) <= 9999000.0)
        {
          v9 = *(double *)(v6 + 63280);
          v10 = *(double *)(v6 + 8 * *(unsigned __int8 *)(v6 + 63759) + 63464);
        }
      }
      v11 = (double *)(v6 + 63232);
      if ((v7 & 0x80000000) == 0 && v10 >= *(double *)(v6 + 8 * v7 + 63464))
      {
        v9 = *(double *)(v6 + 63296);
        v10 = *(double *)(v6 + 8 * v7 + 63464);
      }
      if ((v8 & 0x80000000) != 0 || v10 < *(double *)(v6 + 8 * v8 + 63464))
      {
        v13 = "LS_All ";
        goto LABEL_23;
      }
      v12 = (double *)(v6 + 63312);
      v13 = "LS_All ";
      break;
    case 2:
      if (g_Logging_Cfg < 5)
        return result;
      v11 = v5 + 128;
      v12 = v5 + 134;
      v13 = "LS_GPS ";
      break;
    case 3:
      if (g_Logging_Cfg < 5)
        return result;
      v11 = v5 + 195;
      v12 = v5 + 203;
      v13 = "LS_Glo ";
      break;
    case 4:
      if (g_Logging_Cfg < 5)
        return result;
      v11 = v5 + 262;
      v12 = v5 + 268;
      v13 = "LS_GAL ";
      break;
    default:
      if (g_Logging_Cfg < 5)
        return result;
      v11 = v5 + 329;
      v12 = v5 + 339;
      v13 = "LS_BDS ";
      break;
  }
  v9 = *v12;
LABEL_23:
  v14 = *v13;
  if (*v13)
  {
    v15 = *(char **)v2;
    v16 = (unsigned __int8 *)(v13 + 1);
    do
    {
      *(_QWORD *)v2 = v15 + 1;
      *v15 = v14;
      v15 = *(char **)v2;
      if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      {
        v15 = *(char **)(v2 + 16);
        *(_QWORD *)v2 = v15;
      }
      v17 = *v16++;
      v14 = v17;
    }
    while (v17);
  }
  v18 = 0;
  v19 = v4 + 68240;
  v20 = v3 + 224;
  do
  {
    if ((char)v11[51] < 0)
    {
      v21 = 0.0;
      if (!(_DWORD)v18)
        goto LABEL_37;
    }
    else
    {
      v21 = v11[v18 + 16] - *(double *)(v20 + 8 * v18);
      if (!(_DWORD)v18)
        goto LABEL_37;
    }
    if ((_DWORD)v18 != 1)
      goto LABEL_38;
    v22 = -6.28318531;
    if (v21 >= 3.14159265 || (v22 = 6.28318531, v21 < -3.14159265))
      v21 = v21 + v22;
LABEL_37:
    v21 = v21 * *(double *)(v19 + 8 * v18);
LABEL_38:
    v23 = (_BYTE *)(*(_QWORD *)v2)++;
    *v23 = 32;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
    sprintf_12f3((char **)v2, v21);
    ++v18;
  }
  while (v18 != 3);
  v24 = (_BYTE *)(*(_QWORD *)v2)++;
  *v24 = 32;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_sgR8((_QWORD *)v2, v11[24]);
  sprintf_sgR8((_QWORD *)v2, -v11[23]);
  sprintf_6d((_QWORD *)v2, (int)v11[25]);
  v25 = *(char **)v2;
  v26 = 32;
  v27 = 1u;
  do
  {
    *(_QWORD *)v2 = v25 + 1;
    *v25 = v26;
    v25 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    {
      v25 = *(char **)(v2 + 16);
      *(_QWORD *)v2 = v25;
    }
    v26 = aClk[v27++];
  }
  while (v27 != 6);
  sprintf_8d((_QWORD *)v2, (int)v9);
  sprintf_sgR8((_QWORD *)v2, v11[20]);
  sprintf_sgR8((_QWORD *)v2, v11[12]);
  v28 = (_BYTE *)(*(_QWORD *)v2)++;
  *v28 = 32;
  v29 = *(char **)v2;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    v29 = *(char **)(v2 + 16);
  *(_QWORD *)v2 = v29 + 1;
  *v29 = 80;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_2d((_QWORD *)v2, *((unsigned __int8 *)v11 + 392));
  sprintf_3d((_QWORD *)v2, *((char *)v11 + 408));
  v30 = v11[50];
  v31 = v30 * 10.0;
  v32 = v30 < 9.89999962;
  v33 = 98.9999962;
  if (v32)
    v33 = v31;
  v34 = -0.5;
  if (v33 > 0.0)
    v34 = 0.5;
  v35 = v33 + v34;
  if (v35 <= 2147483650.0)
  {
    if (v35 >= -2147483650.0)
      v36 = (int)v35;
    else
      v36 = 0x80000000;
  }
  else
  {
    v36 = 0x7FFFFFFF;
  }
  sprintf_3f(v2, v36, 2);
  v37 = 0;
  v38 = *(char **)v2;
  v39 = 32;
  do
  {
    *(_QWORD *)v2 = v38 + 1;
    *v38 = v39;
    v38 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    {
      v38 = *(char **)(v2 + 16);
      *(_QWORD *)v2 = v38;
    }
    v39 = aEl[++v37];
  }
  while (v37 != 4);
  sprintf_ACC((char **)v2, v11[26]);
  v40 = (_BYTE *)(*(_QWORD *)v2)++;
  *v40 = 32;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_ACC((char **)v2, v11[27]);
  v41 = (_BYTE *)(*(_QWORD *)v2)++;
  *v41 = 32;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_ACC((char **)v2, v11[28]);
  v42 = 0;
  v43 = *(char **)v2;
  v44 = 32;
  do
  {
    *(_QWORD *)v2 = v43 + 1;
    *v43 = v44;
    v43 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    {
      v43 = *(char **)(v2 + 16);
      *(_QWORD *)v2 = v43;
    }
    v44 = aVf[++v42];
  }
  while (v42 != 4);
  sprintf_sgR8((_QWORD *)v2, v11[2]);
  v45 = (_BYTE *)(*(_QWORD *)v2)++;
  *v45 = 32;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_sgR8((_QWORD *)v2, v11[4]);
  v46 = (_BYTE *)(*(_QWORD *)v2)++;
  *v46 = 32;
  v47 = *(char **)v2;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    v47 = *(char **)(v2 + 16);
  *(_QWORD *)v2 = v47 + 1;
  *v47 = 72;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_6d((_QWORD *)v2, (int)fmin(v11[45], 99999.0));
  v48 = (_BYTE *)(*(_QWORD *)v2)++;
  *v48 = 32;
  v49 = *(char **)v2;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    v49 = *(char **)(v2 + 16);
  *(_QWORD *)v2 = v49 + 1;
  *v49 = 86;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_6d((_QWORD *)v2, (int)fmin(v11[46], 99999.0));
  v50 = (_BYTE *)(*(_QWORD *)v2)++;
  *v50 = 32;
  v51 = *(char **)v2;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    v51 = *(char **)(v2 + 16);
  *(_QWORD *)v2 = v51 + 1;
  *v51 = 66;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_6d((_QWORD *)v2, (int)fmin(v11[47], 99999.0));
  v52 = (_BYTE *)(*(_QWORD *)v2)++;
  *v52 = 32;
  v53 = *(char **)v2;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    v53 = *(char **)(v2 + 16);
  *(_QWORD *)v2 = v53 + 1;
  *v53 = 83;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_6d((_QWORD *)v2, (int)fmin(v11[48], 99999.0));
  v54 = (_BYTE *)(*(_QWORD *)v2)++;
  *v54 = 32;
  v55 = *(char **)v2;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    v55 = *(char **)(v2 + 16);
  *(_QWORD *)v2 = v55 + 1;
  *v55 = 72;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_3d((_QWORD *)v2, *((char *)v11 + 320));
  v56 = (_BYTE *)(*(_QWORD *)v2)++;
  *v56 = 32;
  v57 = *(char **)v2;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    v57 = *(char **)(v2 + 16);
  *(_QWORD *)v2 = v57 + 1;
  *v57 = 86;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_3d((_QWORD *)v2, *((char *)v11 + 321));
  v58 = (_BYTE *)(*(_QWORD *)v2)++;
  *v58 = 32;
  v59 = *(char **)v2;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    v59 = *(char **)(v2 + 16);
  *(_QWORD *)v2 = v59 + 1;
  *v59 = 66;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_3d((_QWORD *)v2, *((char *)v11 + 322));
  v60 = (_BYTE *)(*(_QWORD *)v2)++;
  *v60 = 32;
  v61 = *(char **)v2;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    v61 = *(char **)(v2 + 16);
  *(_QWORD *)v2 = v61 + 1;
  *v61 = 83;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_3d((_QWORD *)v2, *((char *)v11 + 323));
  v62 = (_BYTE *)(*(_QWORD *)v2)++;
  *v62 = 32;
  v63 = *(char **)v2;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    v63 = *(char **)(v2 + 16);
  *(_QWORD *)v2 = v63 + 1;
  *v63 = 86;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_2d((_QWORD *)v2, *((unsigned __int8 *)v11 + 488));
  sprintf_3d((_QWORD *)v2, *((char *)v11 + 504));
  v64 = v11[62];
  v65 = v64 * 100.0;
  v32 = v64 < 9.98999977;
  v66 = 998.999977;
  if (v32)
    v66 = v65;
  v67 = -0.5;
  if (v66 > 0.0)
    v67 = 0.5;
  v68 = v66 + v67;
  if (v68 <= 2147483650.0)
  {
    if (v68 >= -2147483650.0)
      v69 = (int)v68;
    else
      v69 = 0x80000000;
  }
  else
  {
    v69 = 0x7FFFFFFF;
  }
  sprintf_4f(v2, v69, 3);
  if (g_Logging_Cfg >= 6)
  {
    v70 = (_BYTE *)(*(_QWORD *)v2)++;
    *v70 = 32;
    v71 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      v71 = *(char **)(v2 + 16);
    *(_QWORD *)v2 = v71 + 1;
    *v71 = 72;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
    sprintf_3d((_QWORD *)v2, (int)fmin(v11[57], 99.0));
    v72 = (_BYTE *)(*(_QWORD *)v2)++;
    *v72 = 32;
    v73 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      v73 = *(char **)(v2 + 16);
    *(_QWORD *)v2 = v73 + 1;
    *v73 = 86;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
    sprintf_3d((_QWORD *)v2, (int)fmin(v11[58], 99.0));
    v74 = (_BYTE *)(*(_QWORD *)v2)++;
    *v74 = 32;
    v75 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      v75 = *(char **)(v2 + 16);
    *(_QWORD *)v2 = v75 + 1;
    *v75 = 66;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
    sprintf_3d((_QWORD *)v2, (int)fmin(v11[59], 99.0));
    v76 = (_BYTE *)(*(_QWORD *)v2)++;
    *v76 = 32;
    v77 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      v77 = *(char **)(v2 + 16);
    *(_QWORD *)v2 = v77 + 1;
    *v77 = 83;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
    sprintf_3d((_QWORD *)v2, (int)fmin(v11[60], 99.0));
    v78 = (_BYTE *)(*(_QWORD *)v2)++;
    *v78 = 32;
    v79 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      v79 = *(char **)(v2 + 16);
    *(_QWORD *)v2 = v79 + 1;
    *v79 = 72;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
    sprintf_4d((_QWORD *)v2, *((char *)v11 + 416));
    v80 = (_BYTE *)(*(_QWORD *)v2)++;
    *v80 = 32;
    v81 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      v81 = *(char **)(v2 + 16);
    *(_QWORD *)v2 = v81 + 1;
    *v81 = 86;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
    sprintf_4d((_QWORD *)v2, *((char *)v11 + 417));
    v82 = (_BYTE *)(*(_QWORD *)v2)++;
    *v82 = 32;
    v83 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      v83 = *(char **)(v2 + 16);
    *(_QWORD *)v2 = v83 + 1;
    *v83 = 66;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
    sprintf_4d((_QWORD *)v2, *((char *)v11 + 418));
    v84 = (_BYTE *)(*(_QWORD *)v2)++;
    *v84 = 32;
    v85 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      v85 = *(char **)(v2 + 16);
    *(_QWORD *)v2 = v85 + 1;
    *v85 = 83;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
    sprintf_4d((_QWORD *)v2, *((char *)v11 + 419));
  }
  v86 = (_BYTE *)(*(_QWORD *)v2)++;
  *v86 = 10;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  return (_QWORD *)GNSS_Nav_Debug_Flush_Check(v2);
}

uint64_t sprintf_LaLo(char **a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  double v6;
  double v7;
  unsigned int v8;
  char v9;
  double v10;
  unsigned int v11;
  double v12;
  double v13;
  double v14;
  unsigned int v15;
  uint64_t result;
  char *v17;
  char v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;

  v4 = 0;
  v5 = 1;
  do
  {
    v6 = *(double *)(a2 + 8 * v4) * 57.2957795;
    v7 = -v6;
    if (v6 >= 0.0)
      v7 = *(double *)(a2 + 8 * v4) * 57.2957795;
    v8 = (int)v7;
    v9 = v5;
    v10 = (v7 - (double)(int)v7) * 60.0;
    v11 = (int)v10;
    v12 = (v10 - (double)(int)v10) * 60.0;
    sprintf_4d(a1, v8);
    sprintf_3d(a1, v11);
    if (v12 * 100000.0 <= 0.0)
      v13 = -0.5;
    else
      v13 = 0.5;
    v14 = v12 * 100000.0 + v13;
    if (v14 <= 2147483650.0)
    {
      if (v14 >= -2147483650.0)
        v15 = (int)v14;
      else
        v15 = 0x80000000;
    }
    else
    {
      v15 = 0x7FFFFFFF;
    }
    result = sprintf_8f((uint64_t)a1, v15, 6);
    v17 = &ch_NSEW[8 * v4];
    if (*(double *)(a2 + 8 * v4) < 0.0)
      v17 += 4;
    v18 = *v17;
    if (*v17)
    {
      v19 = *a1;
      v20 = (unsigned __int8 *)(v17 + 1);
      do
      {
        *a1 = v19 + 1;
        *v19 = v18;
        v19 = *a1;
        if (*a1 >= a1[3])
        {
          v19 = a1[2];
          *a1 = v19;
        }
        v21 = *v20++;
        v18 = v21;
      }
      while (v21);
    }
    v5 = 0;
    v4 = 1;
  }
  while ((v9 & 1) != 0);
  return result;
}

uint64_t Get_Char_Ass_Status_Edit(unsigned int a1)
{
  if (a1 >= 0x29)
  {
    gn_report_assertion_failure("Ass_Status_Edit_Char");
    return 120;
  }
  else
  {
    return aCghkmnpqrstvya[a1 + 30];
  }
}

uint64_t Meas_Used_BitField(uint64_t a1, unsigned int a2)
{
  _BYTE *v2;
  unsigned int v3;

  if (!*(_BYTE *)(a1 + a2 + 312))
    return 0;
  v2 = (_BYTE *)(a1 + a2);
  if (v2[9400])
    v3 = 3;
  else
    v3 = 1;
  if (v2[10552])
    v3 |= 4u;
  if (v2[12728])
    return v3 | 8;
  else
    return v3;
}

uint64_t GN_AGLON_Set_Alm_El(unsigned __int16 *a1)
{
  uint64_t result;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned __int16 v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  _DWORD v16[2];
  __int16 v17;
  char v18;
  char v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  char v24;
  __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  BOOL v28;
  char v29;
  char v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  __int16 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  result = Is_GN_API_Set_Allowed("GN_AGLON_Set_Alm_El");
  if ((_DWORD)result)
  {
    if (g_Logging_Cfg < 5)
      EvLog_d("GN_AGLON_Set_Alm_El: ", *((unsigned __int8 *)a1 + 2));
    else
      EvLog_v("GN_AGLON_Set_Alm_El: %4d %2d %2d %8d %7d %7d %8d %3d %5d %4d %d %d %d %d", *a1, *((unsigned __int8 *)a1 + 2), *((unsigned __int8 *)a1 + 3), *((_DWORD *)a1 + 1), *((_DWORD *)a1 + 2), *((_DWORD *)a1 + 3), *((_DWORD *)a1 + 4), *((char *)a1 + 20), a1[11], (__int16)a1[12], (__int16)a1[13], *((unsigned __int8 *)a1 + 28), *((unsigned __int8 *)a1 + 29), *((unsigned __int8 *)a1 + 30));
    v3 = *((unsigned __int8 *)a1 + 2);
    if ((v3 - 25) <= 0xFFFFFFE7)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: Sat_ID = %d <%d or >%d, Out of range!");
      return 0;
    }
    v4 = *a1;
    if ((v4 - 1462) <= 0xFFFFFA4A)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmNA = %d <1 or >%d, Out of range!");
      return 0;
    }
    v5 = *((unsigned __int8 *)a1 + 3);
    if (v5 >= 0x20)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmHA = %d >31, Out of range!");
      return 0;
    }
    v6 = *((_DWORD *)a1 + 1);
    if ((v6 - 0x100000) >> 21 != 2047)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmLambdaA = %d <-2^20 or >=2^20, Out of range!");
      return 0;
    }
    v7 = *((_DWORD *)a1 + 2);
    if (v7 >= 0x200000)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmtlambdaA = %d >=2^21, Out of range!");
      return 0;
    }
    v8 = *((_DWORD *)a1 + 3);
    if ((v8 - 0x20000) <= 0xFFFBFFFF)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmDeltaIa = %d <-2^17 or >=2^17, Out of range!");
      return 0;
    }
    v9 = *((_DWORD *)a1 + 4);
    if ((v9 - 0x200000) >> 22 != 1023)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmDeltaTA = %d <-2^21 or >=2^21, Out of range!");
      return 0;
    }
    v10 = *((char *)a1 + 20);
    if (((v10 - 64) & 0x80) == 0)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmDeltaTdotA = %d <-2^6 or >=2^6, Out of range!");
      return 0;
    }
    v11 = (__int16)a1[11];
    if (v11 < 0)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmEpsilonA = %d >=2^15, Out of range!");
      return 0;
    }
    v12 = a1[13];
    if ((unsigned __int16)((unsigned __int16)(v12 - 512) >> 10) <= 0x3Eu)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmTauA = %d <-2^9 or >=2^9, Out of range!");
      return 0;
    }
    v13 = *((unsigned __int8 *)a1 + 28);
    if (v13 >= 2)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmCA = %d >1, Out of range!");
      return 0;
    }
    v14 = *((unsigned __int8 *)a1 + 29);
    if (v14 >= 4)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmMA = %d >3, Out of range!");
      return 0;
    }
    if (*((_BYTE *)a1 + 30))
      v15 = 5;
    else
      v15 = 3;
    v16[0] = 0;
    v16[1] = v15;
    v17 = v4;
    v18 = v3;
    v19 = v5;
    v20 = v6;
    v21 = v7;
    v22 = v8;
    v23 = v9;
    v24 = v10;
    v25 = v11;
    v26 = a1[12];
    v27 = v12;
    v30 = 1;
    v28 = v13 != 0;
    v29 = v14;
    v35 = 0;
    v36 = 0;
    v37 = 0uLL;
    v38 = 0;
    GLON_AlmInt2Bin((uint64_t)v16, (uint64_t)&v35);
    v31 = 0;
    v32 = v37;
    v33 = v38;
    v34 = HIDWORD(v35) == 5;
    WORD2(v31) = v36;
    return GN_AGLON_Set_Alm(*((unsigned __int8 *)a1 + 2), (uint64_t)&v31);
  }
  return result;
}

void Init_DB_SV_AzEl(uint64_t a1)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)&v2 = 0x9D9D9D9D9D9D9D9DLL;
  *((_QWORD *)&v2 + 1) = 0x9D9D9D9D9D9D9D9DLL;
  *(_OWORD *)(a1 + 202) = v2;
  *(_OWORD *)(a1 + 176) = v2;
  *(_OWORD *)(a1 + 192) = v2;
  *(_OWORD *)(a1 + 144) = v2;
  *(_OWORD *)(a1 + 160) = v2;
  *(_OWORD *)(a1 + 112) = v2;
  *(_OWORD *)(a1 + 128) = v2;
  *(_OWORD *)(a1 + 80) = v2;
  *(_OWORD *)(a1 + 96) = v2;
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = v2;
  *(_OWORD *)(a1 + 32) = v2;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v2;
  memset_pattern16((void *)(a1 + 218), &memset_pattern, 0x1B4uLL);
  v3 = 218;
  v4 = a1;
  do
  {
    *(_DWORD *)(v4 + 656) = -99;
    *(_QWORD *)(v4 + 688) = 0xC058C00000000000;
    *(_DWORD *)(v4 + 9376) = -400;
    *(_QWORD *)(v4 + 9408) = 0xC079000000000000;
    v4 += 40;
    --v3;
  }
  while (v3);
  *(_BYTE *)(a1 + 654) = 0;
}

void GncP07_06SendPENVRestoreResp(int a1, int a2)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  char __str[966];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = gnssOsa_Calloc("GncP07_06SendPENVRestoreResp", 47, 1, 0x10uLL);
  if (v4)
  {
    v5 = v4;
    v4[12] = a1;
    v4[13] = a2;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_PE_NV_RESTORE_RSP =>GNM Code,%hhu,SeqNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP07_06SendPENVRestoreResp", a1, a2);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 128, 8654084, v5);
  }
}

uint64_t GncP07_07HandlePENVRestore(uint64_t a1)
{
  uint64_t v2;
  size_t v3;
  const void *v4;
  void *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char __str[966];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_PE_NV_RESTORE_REQ NVSize,%u,SeqNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP07_07HandlePENVRestore", *(unsigned __int16 *)(a1 + 12), *(unsigned __int8 *)(a1 + 24));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    v3 = *(unsigned __int16 *)(a1 + 12);
    if (*(_WORD *)(a1 + 12) && (v4 = *(const void **)(a1 + 16)) != 0)
    {
      if ((_DWORD)v3 == 33424)
      {
        if (qword_257A47BC8)
        {
          memcpy_s("GncP07_07HandlePENVRestore", 107, (void *)qword_257A47BC8, 0x8290u, v4, v3);
          v5 = *(void **)(a1 + 16);
          if (v5)
            free(v5);
          v6 = 0;
          *(_QWORD *)(a1 + 16) = 0;
        }
        else
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            v12 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "GncP07_07HandlePENVRestore", 769);
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          v6 = 3;
        }
      }
      else if (g_LbsOsaTrace_Config < 2)
      {
        v6 = 1;
      }
      else
      {
        bzero(__str, 0x3C6uLL);
        v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NVSize Mismatch PESize,%u,GNMSize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GncP07_07HandlePENVRestore", 33424, *(unsigned __int16 *)(a1 + 12));
        v6 = 1;
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      v8 = *(unsigned __int8 *)(a1 + 24);
      v9 = v6;
    }
    else
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 87, "GncP07_07HandlePENVRestore", 513);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      v8 = *(unsigned __int8 *)(a1 + 24);
      v9 = 2;
    }
  }
  else
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 69, "GncP07_07HandlePENVRestore", 517);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    v9 = 2;
    v8 = 255;
  }
  GncP07_06SendPENVRestoreResp(v9, v8);
  return 0;
}

void GncP07_08WriteNVStore(size_t a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  char __str[966];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    if (g_LbsOsaTrace_Config < 2)
      return;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NVStore\n");
LABEL_12:
    gnssOsa_PrintLog(__str, 2, 1, 0);
    return;
  }
  if (!(_DWORD)a1)
  {
    if (g_LbsOsaTrace_Config < 2)
      return;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NVSize,0\n");
    goto LABEL_12;
  }
  v4 = gnssOsa_Calloc("GncP07_08WriteNVStore", 134, 1, 0x18uLL);
  if (v4)
  {
    v5 = v4;
    v6 = gnssOsa_Calloc("GncP07_08WriteNVStore", 140, a1, 1uLL);
    v5[2] = v6;
    if (v6)
    {
      *((_WORD *)v5 + 6) = a1;
      memcpy_s("GncP07_08WriteNVStore", 148, v6, a1, a2, a1);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_PE_NV_BACKUP_IND =>GNM NVSize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncP07_08WriteNVStore", a1);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      AgpsSendFsmMsg(132, 128, 8653827, v5);
    }
    else
    {
      free(v5);
    }
  }
}

BOOL Is_BDS_IntEph_Same(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
      && *(unsigned __int8 *)(a1 + 9) == *(unsigned __int8 *)(a2 + 9)
      && *(unsigned __int8 *)(a1 + 10) == *(unsigned __int8 *)(a2 + 10)
      && *(unsigned __int8 *)(a1 + 11) == *(unsigned __int8 *)(a2 + 11)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
      && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)
      && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
      && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
      && *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48)
      && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56)
      && *(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64)
      && *(_QWORD *)(a1 + 72) == *(_QWORD *)(a2 + 72)
      && *(_QWORD *)(a1 + 80) == *(_QWORD *)(a2 + 80)
      && *(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88)
      && *(unsigned __int16 *)(a1 + 92) == *(unsigned __int16 *)(a2 + 92)
      && *(unsigned __int16 *)(a1 + 94) == *(unsigned __int16 *)(a2 + 94)
      && *(unsigned __int16 *)(a1 + 96) == *(unsigned __int16 *)(a2 + 96)
      && *(_DWORD *)(a1 + 100) == *(_DWORD *)(a2 + 100)
      && *(_DWORD *)(a1 + 104) == *(_DWORD *)(a2 + 104)
      && *(_DWORD *)(a1 + 108) == *(_DWORD *)(a2 + 108)
      && *(_DWORD *)(a1 + 112) == *(_DWORD *)(a2 + 112)
      && *(_DWORD *)(a1 + 116) == *(_DWORD *)(a2 + 116)
      && *(_DWORD *)(a1 + 120) == *(_DWORD *)(a2 + 120)
      && *(unsigned __int16 *)(a1 + 124) == *(unsigned __int16 *)(a2 + 124)
      && *(unsigned __int16 *)(a1 + 126) == *(unsigned __int16 *)(a2 + 126)
      && *(unsigned __int8 *)(a1 + 128) == *(unsigned __int8 *)(a2 + 128)
      && *(unsigned __int8 *)(a1 + 129) == *(unsigned __int8 *)(a2 + 129)
      && *(unsigned __int8 *)(a1 + 130) == *(unsigned __int8 *)(a2 + 130)
      && *(unsigned __int8 *)(a1 + 131) == *(unsigned __int8 *)(a2 + 131)
      && *(unsigned __int16 *)(a1 + 132) == *(unsigned __int16 *)(a2 + 132)
      && *(unsigned __int16 *)(a1 + 134) == *(unsigned __int16 *)(a2 + 134)
      && *(unsigned __int16 *)(a1 + 136) == *(unsigned __int16 *)(a2 + 136)
      && *(unsigned __int16 *)(a1 + 138) == *(unsigned __int16 *)(a2 + 138)
      && *(unsigned __int8 *)(a1 + 140) == *(unsigned __int8 *)(a2 + 140)
      && *(unsigned __int8 *)(a1 + 141) == *(unsigned __int8 *)(a2 + 141)
      && *(unsigned __int8 *)(a1 + 142) == *(unsigned __int8 *)(a2 + 142)
      && *(unsigned __int8 *)(a1 + 143) == *(unsigned __int8 *)(a2 + 143)
      && *(unsigned __int8 *)(a1 + 144) == *(unsigned __int8 *)(a2 + 144)
      && *(unsigned __int8 *)(a1 + 145) == *(unsigned __int8 *)(a2 + 145)
      && *(unsigned __int8 *)(a1 + 146) == *(unsigned __int8 *)(a2 + 146);
}

uint64_t GN_AGAL_Set_Eph_El(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  double v6;
  unsigned int v7;
  double v8;
  unsigned int v9;
  double v10;
  int v11;
  double v12;
  int v13;
  int v14;
  unsigned int v15;
  __int16 v16;
  __int16 v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int *v37;

  if (!Is_GN_API_Set_Allowed("GN_AGAL_Set_Eph"))
    return 0;
  EvLog_d("GN_AGAL_Set_Eph: ", *(unsigned __int8 *)(a1 + 6));
  if (*(_DWORD *)a1 > 0x93A7Fu)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: TOW = %d >604800, Out of range!");
    return 0;
  }
  v2 = *(unsigned __int16 *)(a1 + 4);
  if (v2 >= 0x1000)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: Week = %d >=4096, Out of range!");
    return 0;
  }
  v3 = *(unsigned __int8 *)(a1 + 6);
  if (v3 >= 0x40)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: SVid = %d >=64, Out of range!");
    return 0;
  }
  if (v3 >= 0x25)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: SVid = %d >36, Unrealistic value!");
    return 0;
  }
  v4 = *(unsigned __int16 *)(a1 + 8);
  if (v4 >= 0x400)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: IODnav = %d >=1024, Out of range!");
    return 0;
  }
  v5 = *(unsigned __int16 *)(a1 + 10);
  if (v5 >> 5 >= 0x13B)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: toe = %d >=10080, Out of range!");
    return 0;
  }
  v6 = 0.25;
  if (((v3 - 14) & 0xFB) != 0)
    v6 = 0.03;
  v7 = *(_DWORD *)(a1 + 16);
  v8 = (double)v7 * 1.16415322e-10;
  if (v8 < 0.0)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: e = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v8 > v6)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: e = %g > %g, Unrealistic value!");
    return 0;
  }
  v9 = *(_DWORD *)(a1 + 20);
  v10 = (double)v9 * 0.00000190734863;
  if (v10 < 4800.0)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: sqrtA = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v10 > 5800.0)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: sqrtA = %g > %g, Unrealistic value!");
    return 0;
  }
  if ((unsigned __int16)((unsigned __int16)(*(_WORD *)(a1 + 40) - 0x2000) >> 14) <= 2u)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: IDot = %d <-2^13 or >=2^13, Out of range!");
    return 0;
  }
  v11 = *(_DWORD *)(a1 + 36);
  if ((v11 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: OmegaDot = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  v12 = (double)v11 * 3.57157734e-13;
  if (v12 < -0.00000198862815)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: OmegaDot = %e < %e, Unrealistic value!");
    return 0;
  }
  if (v12 > 0.0)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: OmegaDot = %e > %e, Unrealistic value!");
    return 0;
  }
  v13 = *(_DWORD *)(a1 + 56);
  if (v13 - 0x40000000 >= 0)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: af0 = %d <-2^30 or >=2^30, Out of range!");
    return 0;
  }
  v14 = *(_DWORD *)(a1 + 60);
  if ((v14 - 0x100000) >> 21 != 2047)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: af1 = %d <-2^20 or >=2^20, Out of range!");
    return 0;
  }
  if ((unsigned __int16)((unsigned __int16)(*(_WORD *)(a1 + 64) - 32) >> 6) <= 0x3FEu)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: af2 = %d <-2^5 or >=2^5, Out of range!");
    return 0;
  }
  v15 = *(unsigned __int16 *)(a1 + 66);
  if (v15 >> 5 >= 0x13B)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: toc = %d >=10080, Out of range!");
    return 0;
  }
  v16 = *(_WORD *)(a1 + 68);
  if ((unsigned __int16)((unsigned __int16)(v16 - 512) >> 10) <= 0x3Eu)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: bgdE1E5b = %d <-2^9 or >=2^9, Out of range!");
    return 0;
  }
  v17 = *(_WORD *)(a1 + 70);
  if ((unsigned __int16)((unsigned __int16)(v17 - 512) >> 10) <= 0x3Eu)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: bgdE1E5a = %d <-2^9 or >=2^9, Out of range!");
    return 0;
  }
  v18 = *(unsigned __int8 *)(a1 + 72);
  if (v18 >= 2)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: Model_ID = %d >1, Out of range!");
    return 0;
  }
  v19 = *(unsigned __int8 *)(a1 + 73);
  if (v19 >= 2)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E5a_Nav_DVS = %d >1, Out of range!");
    return 0;
  }
  v20 = *(unsigned __int8 *)(a1 + 74);
  if (v20 >= 2)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E5b_Nav_DVS = %d >1, Out of range!");
    return 0;
  }
  v21 = *(unsigned __int8 *)(a1 + 75);
  if (v21 >= 2)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E1B_Nav_DVS = %d >1, Out of range!");
    return 0;
  }
  v22 = *(unsigned __int8 *)(a1 + 76);
  if (v22 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E5a_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  v23 = *(unsigned __int8 *)(a1 + 77);
  if (v23 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E5b_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  v24 = *(unsigned __int8 *)(a1 + 78);
  if (v24 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E1B_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  v25 = *(unsigned __int8 *)(a1 + 79);
  if (v25 >= 7)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: Fit_hours = %d >6, Out of range!");
    return 0;
  }
  v26 = v3 - 1;
  if (v26 > 0x23)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: SVid = %d <%d or >%d, Out of range!");
    return 0;
  }
  v27 = *(_WORD *)(a1 + 40);
  v28 = *(_WORD *)(a1 + 64);
  v29 = p_NA;
  v30 = p_NA + 88 * v26;
  *(_DWORD *)(v30 + 5596) = *(_DWORD *)a1;
  *(_WORD *)(v30 + 5600) = v2;
  *(_BYTE *)(v30 + 5602) = v3;
  *(_BYTE *)(v30 + 5603) = *(_BYTE *)(a1 + 7);
  *(_WORD *)(v30 + 5604) = v4;
  *(_WORD *)(v30 + 5606) = v5;
  *(_DWORD *)(v30 + 5608) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v30 + 5612) = v7;
  *(_DWORD *)(v30 + 5616) = v9;
  *(_QWORD *)(v30 + 5620) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v30 + 5628) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v30 + 5632) = v11;
  *(_WORD *)(v30 + 5636) = v27;
  *(_QWORD *)(v30 + 5638) = *(_QWORD *)(a1 + 42);
  *(_WORD *)(v30 + 5646) = *(_WORD *)(a1 + 50);
  *(_DWORD *)(v30 + 5648) = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(v30 + 5652) = v13;
  *(_DWORD *)(v30 + 5656) = v14;
  *(_WORD *)(v30 + 5660) = v28;
  *(_WORD *)(v30 + 5662) = v15;
  *(_WORD *)(v30 + 5664) = v16;
  *(_WORD *)(v30 + 5666) = v17;
  if (v25 >= 4)
    v31 = 4;
  else
    v31 = v25;
  *(_BYTE *)(v30 + 5675) = v31;
  *(_BYTE *)(v30 + 5668) = v18;
  *(_BYTE *)(v30 + 5669) = v19;
  *(_BYTE *)(v30 + 5670) = v20;
  *(_BYTE *)(v30 + 5671) = v21;
  *(_BYTE *)(v30 + 5672) = v22;
  *(_BYTE *)(v30 + 5673) = v23;
  *(_BYTE *)(v30 + 5674) = v24;
  if ((v3 == 18 || v3 == 14) && v31 >= 3)
    *(_BYTE *)(v30 + 5675) = 2;
  if (*(_BYTE *)(a1 + 80))
    v32 = 5;
  else
    v32 = 3;
  *(_DWORD *)(v29 + 88 * v26 + 5592) = v32;
  *(_BYTE *)(v29 + v26 + 147) = 1;
  v33 = *(_QWORD *)(p_api + 48);
  if (*(_BYTE *)(v33 + 16) && *(int *)v33 >= 3)
    v34 = 604800 * *(__int16 *)(v33 + 28) + (int)*(double *)(v33 + 32);
  else
    v34 = 0;
  v37 = (int *)(p_NA + 88 * v26 + 5588);
  *v37 = v34;
  v35 = 1;
  Debug_Log_GAL_Eph(1, (uint64_t)v37);
  return v35;
}

uint64_t GN_AGAL_Set_Alm_El(unsigned __int8 *a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  __int16 v6;
  double v7;
  unsigned int v8;
  double v9;
  double v10;
  __int16 v11;
  __int16 v12;
  double v13;
  __int16 v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int *v26;

  if (!Is_GN_API_Set_Allowed("GN_AGAL_Set_Alm"))
    return 0;
  EvLog_d("GN_AGAL_Set_Alm: ", *a1);
  v2 = *a1;
  if (v2 >= 0x40)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: SVid = %d >=64, Out of range!");
    return 0;
  }
  if (v2 >= 0x25)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: SVid = %d >36, Unrealistic value!");
    return 0;
  }
  v3 = a1[1];
  if (v3 >= 0x10)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: IODa = %d > 15, Out of range!");
    return 0;
  }
  v4 = a1[2];
  if (v4 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: WNa = %d > 3, Out of range!");
    return 0;
  }
  v5 = *((unsigned __int16 *)a1 + 2);
  if (v5 >= 0x400)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: toa = %d > 1023, Out of range!");
    return 0;
  }
  v6 = *((_WORD *)a1 + 3);
  if ((unsigned __int16)(v6 - 4097) <= 0xDFFEu)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: dsqrtA = %d <-2^12 or >=2^12, Out of range!");
    return 0;
  }
  v7 = (double)v6 * 0.001953125;
  if (v7 < -640.588203)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: dsqrtA = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v7 > 359.411797)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: dsqrtA = %g > %g, Unrealistic value!");
    return 0;
  }
  v8 = *((unsigned __int16 *)a1 + 4);
  if (v8 >= 0x800)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: e = %d >= 2^11, Out of range!");
    return 0;
  }
  v9 = 0.25;
  if (((v2 - 14) & 0xFB) != 0)
    v9 = 0.03;
  v10 = (double)v8 * 0.0000152587891;
  if (v10 < 0.0)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: e = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v10 > v9)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: e = %g > %g, Unrealistic value!");
    return 0;
  }
  v11 = *((_WORD *)a1 + 5);
  if ((unsigned __int16)(v11 - 1025) <= 0xF7FEu)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: di0 = %d <-2^10 or >2^10, Out of range!");
    return 0;
  }
  if ((unsigned __int16)(*((_WORD *)a1 + 7) - 1025) <= 0xF7FEu)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: OmegaDot = %d <-2^10 or >2^10, Out of range!");
    return 0;
  }
  v12 = *((_WORD *)a1 + 7);
  v13 = (double)v12 * 3.6572952e-10;
  if (v13 < -0.00000198862815)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: OmegaDot = %e < %e, Unrealistic value!");
    return 0;
  }
  if (v13 > 0.0)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: OmegaDot = %e > %e, Unrealistic value!");
    return 0;
  }
  v14 = *((_WORD *)a1 + 11);
  if ((unsigned __int16)((unsigned __int16)(v14 - 4096) >> 13) <= 6u)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: af1 = %d <-2^12 or >=2^12, Out of range!");
    return 0;
  }
  v15 = a1[24];
  if (v15 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: E5a_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  v16 = a1[25];
  if (v16 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: E5b_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  v17 = a1[26];
  if (v17 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: E1B_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  v18 = v2 - 1;
  if (v18 > 0x23)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: SVid = %d <%d or >%d, Out of range!");
    return 0;
  }
  v19 = p_NA;
  v20 = p_NA + 36 * v18;
  *(_BYTE *)(v20 + 8764) = v2;
  *(_BYTE *)(v20 + 8765) = v3;
  *(_WORD *)(v20 + 8766) = v4;
  *(_WORD *)(v20 + 8768) = v5;
  *(_WORD *)(v20 + 8770) = v6;
  *(_WORD *)(v20 + 8772) = v8;
  *(_WORD *)(v20 + 8774) = v11;
  *(_WORD *)(v20 + 8776) = *((_WORD *)a1 + 6);
  *(_WORD *)(v20 + 8778) = v12;
  *(_WORD *)(v20 + 8780) = *((_WORD *)a1 + 8);
  *(_DWORD *)(v20 + 8782) = *(_DWORD *)(a1 + 18);
  *(_WORD *)(v20 + 8786) = v14;
  *(_BYTE *)(v20 + 8788) = v15;
  *(_BYTE *)(v20 + 8789) = v16;
  *(_BYTE *)(v20 + 8790) = v17;
  if (a1[27])
    v21 = 5;
  else
    v21 = 3;
  *(_DWORD *)(v20 + 8760) = v21;
  *(_BYTE *)(v19 + v18 + 183) = 1;
  v22 = *(_QWORD *)(p_api + 48);
  if (*(_BYTE *)(v22 + 16) && *(int *)v22 >= 3)
    v23 = (int)*(double *)(v22 + 32) + 604800 * *(__int16 *)(v22 + 28);
  else
    v23 = 0;
  v26 = (int *)(p_NA + 36 * v18 + 8756);
  *v26 = v23;
  v24 = 1;
  Debug_Log_GAL_Alm(1, (uint64_t)v26);
  return v24;
}

uint64_t GN_AGAL_Set_GGTO(__int16 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!Is_GN_API_Set_Allowed("GN_AGAL_Set_GGTO"))
    return 0;
  if ((unsigned __int16)(a1[1] - 2049) <= 0xEFFEu)
  {
    EvCrt_v("GN_AGAL_Set_GGTO: FAILED: A1G = %d < -2^11 or >= 2^11, Out of range!");
    return 0;
  }
  if (*((unsigned __int8 *)a1 + 4) >= 0xA9u)
  {
    EvCrt_v("GN_AGAL_Set_GGTO: FAILED: ToG = %d > 168, Out of range!");
    return 0;
  }
  if (*((unsigned __int8 *)a1 + 5) >= 0x40u)
  {
    EvCrt_v("GN_AGAL_Set_GGTO: FAILED: WNoG = %d > 63, Out of range!");
    return 0;
  }
  v5 = *(_QWORD *)(p_api + 48);
  if (*(_BYTE *)(v5 + 16) && *(int *)v5 >= 3)
    v6 = (int)*(double *)(v5 + 32) + 604800 * *(__int16 *)(v5 + 28);
  else
    v6 = 0;
  v7 = p_NA;
  v8 = (_BYTE *)(p_NA + 5584);
  *(_DWORD *)(p_NA + 5572) = v6;
  if (*((_BYTE *)a1 + 6))
    v9 = 5;
  else
    v9 = 3;
  *(_DWORD *)(v7 + 5576) = v9;
  v10 = *a1;
  *(_WORD *)(v7 + 5580) = v10;
  v11 = a1[1];
  *(_WORD *)(v7 + 5582) = v11;
  v12 = *((unsigned __int8 *)a1 + 4);
  *v8 = v12;
  v13 = *((unsigned __int8 *)a1 + 5);
  v8[1] = v13;
  v3 = 1;
  *(_BYTE *)(v7 + 146) = 1;
  EvLog_nd("GN_AGAL_Set_GGTO: ", 4, v2, v10, v11, v12, v13);
  return v3;
}

BOOL umeas(_BOOL8 result, unsigned int a2, double a3, double *a4, double *a5, double *a6, double *a7, double a8)
{
  uint64_t v10;
  const double *v11;
  unsigned int v12;
  double *v13;
  double *v14;
  double *v17;
  double *v18;
  double *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  double v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  double *v38;
  double v39;
  double v40;
  unsigned int v41;
  double v42;
  double v43;
  double v44;
  double *v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double *v53;
  double v54;
  unsigned int v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  unsigned int v59;
  double v60;
  uint64_t v61;
  double *v62;
  unsigned int v63;
  double v64[2];

  v64[1] = *(double *)MEMORY[0x24BDAC8D0];
  v10 = result - 8;
  v11 = a4 - 1;
  v12 = a2 + 1;
  v63 = ((a2 + 1) * a2) >> 1;
  if (a2)
  {
    v13 = a6;
    v14 = a5;
    v17 = (double *)result;
    v61 = a2 + 1;
    v62 = a7;
    v18 = a6 - 1;
    v19 = a5 - 1;
    v20 = 1;
    while (1)
    {
      v64[0] = 0.0;
      result = R8_EQ(&v11[v20], v64);
      if (!result)
        break;
      if (++v20 > a2)
        goto LABEL_18;
    }
    if (!v20)
    {
LABEL_18:
      v12 = v61;
      a7 = v62;
      if (v61 <= 2)
        v31 = 2;
      else
        v31 = v61;
      v32 = v31 - 1;
      do
      {
        *v13++ = 0.0;
        *v14++ = 0.0;
        --v32;
      }
      while (v32);
      goto LABEL_23;
    }
    if (a2 < 2)
    {
      v21 = 0;
    }
    else
    {
      if (v20 <= 2)
        v21 = 2;
      else
        v21 = v20;
      if (v21 <= a2)
      {
        v22 = a2;
        v23 = v63;
        v24 = v63 - a2 + 1;
        v25 = 1 - a2;
        do
        {
          v26 = v11[v22];
          v27 = v22 - 1;
          if ((_DWORD)v22 != 1)
          {
            v28 = 0;
            do
            {
              v26 = v26 + *(double *)(v10 + 8 * (v24 + v28)) * a4[v28];
              v29 = (v28++ + 2);
            }
            while (v29 != v22);
          }
          v19[v22] = v26;
          v30 = *(double *)(v10 + 8 * v23);
          v23 -= v22;
          v18[v22] = v26 * v30;
          v24 += v25++;
          --v22;
        }
        while (v21 <= v27);
      }
    }
    if (v20 == 1)
    {
      v33 = *a4;
      *v14 = *a4;
      *v13 = v33 * *v17;
      v34 = v63;
    }
    else
    {
      v35 = v20;
      if (v20 <= 2uLL)
        v35 = 2;
      v36 = v35 - 1;
      v37 = v14;
      v38 = v13;
      v34 = v63;
      do
      {
        *v37++ = 0.0;
        *v38++ = 0.0;
        --v36;
      }
      while (v36);
    }
    if (a8 >= 0.0)
    {
      v39 = 0.0;
      v40 = a3;
      if (v20 <= a2)
      {
        v41 = v20;
        v40 = a3;
        do
        {
          v40 = v40 + v19[v41] * v18[v41];
          v39 = v39 + v11[v41] * *(double *)(v10 + 8 * (v34 + v41));
          ++v41;
        }
        while (v41 <= a2);
      }
      v42 = v11[v61] - v39;
      *(double *)(v10 + 8 * (v34 + v61)) = v42;
      if (a3 >= 0.0 && v42 * v42 > v40 * a8)
      {
        a3 = -v40;
        a7 = v62;
        goto LABEL_26;
      }
    }
    if (v20 == 1)
    {
      v43 = a3 + *v13 * *v14;
      if (fabs(v43) <= 6.0e-38)
        v44 = 0.0;
      else
        v44 = 1.0 / v43;
      *v17 = *v17 * (v44 * a3);
      v45 = v62;
      if (a2 == 1)
      {
LABEL_63:
        *v45 = v43;
        if (a8 > 0.0)
        {
          v57 = v44 * *(double *)(v10 + 8 * (v63 + v61));
          v19[v61] = v57;
          v58 = v61 - 1;
          v59 = v63 + 1;
          do
          {
            v60 = *v13++;
            *(double *)(v10 + 8 * v59) = *(double *)(v10 + 8 * v59) + v60 * v57;
            ++v59;
            --v58;
          }
          while (v58);
        }
        return result;
      }
      v46 = 2;
    }
    else
    {
      v46 = (((v20 - 1) * v20) >> 1) + 1;
      v44 = 0.0;
      v43 = a3;
      if (fabs(a3) > 6.0e-38)
        v44 = 1.0 / a3;
      v45 = v62;
    }
    if (v21 <= a2)
    {
      do
      {
        v47 = v43;
        v48 = v18[v21];
        v49 = v19[v21];
        v50 = v21;
        if (v21 >= 2)
        {
          v51 = v21 - 1;
          v52 = -(v49 * v44);
          v53 = v13;
          do
          {
            v54 = *(double *)(v10 + 8 * v46);
            *(double *)(v10 + 8 * v46) = v54 + v52 * *v53;
            *v53 = *v53 + v48 * v54;
            ++v53;
            ++v46;
            --v51;
          }
          while (v51);
          v49 = v19[v50];
        }
        v43 = v43 + v48 * v49;
        if (fabs(v43) > 6.0e-38)
        {
          v44 = 1.0 / v43;
          *(double *)(v10 + 8 * v46) = v47 * (1.0 / v43) * *(double *)(v10 + 8 * v46);
        }
        v64[0] = 0.0;
        result = R8_EQ((const double *)(v10 + 8 * v46), v64);
        if ((_DWORD)v50 && result)
        {
          v55 = v46;
          v56 = v50;
          do
          {
            *(_QWORD *)(v10 + 8 * v55--) = 0;
            --v56;
          }
          while (v56);
        }
        ++v46;
        v21 = v50 + 1;
      }
      while ((int)v50 + 1 <= a2);
    }
    goto LABEL_63;
  }
LABEL_23:
  if (fabs(a3) > 6.0e-38 && a8 >= 0.0)
    *(double *)(v10 + 8 * (v63 + v12)) = v11[v12] / a3;
LABEL_26:
  *a7 = a3;
  return result;
}

void Hal_GetMEAnalyticsData(void)
{
  int v0;
  uint64_t v1;
  int v2;
  unint64_t v3;
  char __str[966];
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _BYTE v8[24];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  memset(v8, 0, 22);
  v7 = 0u;
  v6 = 0u;
  v5 = 0x2A00364D6344787ALL;
  v8[22] = 10;
  if ((int)Hal22_ZxSendToChip((unsigned __int8 *)&v5, 0x3FuLL) <= 0)
  {
    if (!g_LbsOsaTrace_Config)
      return;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_15;
  }
  v0 = gnssOsa_SemWaitTimeOut(g_HandleAckSem, 0x96u);
  if (v0 == 1)
  {
    if (!g_LbsOsaTrace_Config)
      return;
LABEL_12:
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx err\n");
    goto LABEL_15;
  }
  if (v0)
  {
    if (!g_LbsOsaTrace_Config)
      return;
    goto LABEL_12;
  }
  if (g_GetAnalyticsResponseStatus == 32)
  {
    if (g_LbsOsaTrace_Config < 4)
      return;
    bzero(__str, 0x3C6uLL);
    v1 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "HAL", 73, "Hal_GetMEAnalyticsData");
    v2 = 4;
    goto LABEL_16;
  }
  if (!g_LbsOsaTrace_Config)
    return;
  bzero(__str, 0x3C6uLL);
  v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx err,%u\n", v3);
LABEL_15:
  v2 = 1;
LABEL_16:
  gnssOsa_PrintLog(__str, v2, 1, 0);
}

void Hal_GetMEAnalyticsDataResponse(unsigned __int8 *a1, int a2)
{
  BOOL v4;
  unsigned int v5;
  unint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  char __str[966];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config)
      return;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx data\n");
    goto LABEL_16;
  }
  if (a1[2] != 68 || a1[3] != 67)
  {
    if (!g_LbsOsaTrace_Config)
      return;
    bzero(__str, 0x3C6uLL);
    v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u,MIDEx,%u\n", v12, "HAL");
LABEL_16:
    v11 = 1;
    goto LABEL_17;
  }
  g_GetAnalyticsResponseStatus = a1[8];
  v4 = gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem);
  v5 = g_LbsOsaTrace_Config;
  if (!v4 && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v7 = __error();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v6, "HAL", 69, "Hal_GetMEAnalyticsDataResponse", 1542, *v7);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    v5 = g_LbsOsaTrace_Config;
  }
  if ((a2 - 45) <= 0xFFFFFFDA && v5 >= 3)
  {
    bzero(__str, 0x3C6uLL);
    v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ME_Analytics METTickMs %u-%u: ver,%u,L1rssimaxdB,%u,L1rssimeandB,%u,L5rssimaxdB,%u,L5rssimeandB,%u,GLOrssimaxdB,%u,GLOrssimeandB,%u,L1rssiper,%u,L5rssiper,%u,GLOrssiper,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "HAL", 77, "Hal_LogMEAnalyticsData", *((_DWORD *)a1 + 9), *((_DWORD *)a1 + 10), a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17],
      a1[18]);
    gnssOsa_PrintLog(__str, 3, 1, 0);
    if (g_LbsOsaTrace_Config >= 3)
    {
      bzero(__str, 0x3C6uLL);
      v9 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ME_Analytics METTickMs %u-%u: freq0Hz,%5.3f,freq1Hz,%5.3f,freq2Hz,%5.3f,CN0_0dBHz,%u,CN0_1dBHz,%u,CN0_2dBHz,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "HAL", 77, "Hal_LogMEAnalyticsData", *((_DWORD *)a1 + 9), *((_DWORD *)a1 + 10), (double)*(__int16 *)(a1 + 19) * 0.125, (double)*(__int16 *)(a1 + 21) * 0.125, (double)*(__int16 *)(a1 + 23) * 0.125, a1[25], a1[26], a1[27]);
      gnssOsa_PrintLog(__str, 3, 1, 0);
      if (g_LbsOsaTrace_Config >= 3)
      {
        bzero(__str, 0x3C6uLL);
        v10 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ME_Analytics METTickMs %u-%u: AggPow4gdBm,%u,Agg4gtimeS,%u,AggPow5gdBm,%u,Agg5gtimeS,%u,L5stateper,%u,NumInterfaceTeardown,%u,outages,%u,PEAidper,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "HAL", 77, "Hal_LogMEAnalyticsData", *((_DWORD *)a1 + 9), *((_DWORD *)a1 + 10), a1[28], a1[29], a1[34], a1[35], a1[30], a1[31], a1[32], a1[33]);
        v11 = 3;
LABEL_17:
        gnssOsa_PrintLog(__str, v11, 1, 0);
      }
    }
  }
}

uint64_t Gnm55_SendVar_GNSS_FW_NV_Data(char a1)
{
  int NvSize;
  __int16 v2;
  void *v3;
  uint64_t v4;
  __int16 v5;
  unsigned __int16 v6;
  char v7;
  __int16 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t result;
  unsigned __int8 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char __str[966];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if ((a1 & 1) == 0)
  {
    v6 = word_257A47C3A;
    v5 = qword_257A47C40;
    goto LABEL_10;
  }
  NvSize = gnssOsa_getNvSize(1, &qword_257A47C40);
  v2 = qword_257A47C40;
  if (!NvSize)
    goto LABEL_29;
  if (!qword_257A47C40)
  {
    v14 = 1;
    goto LABEL_30;
  }
  v3 = gnssOsa_Calloc("Gnm55_01Read_GNSS_FW_NV", 117, 1, qword_257A47C40);
  g_GNSS_FW_NV_Context = (uint64_t)v3;
  v2 = qword_257A47C40;
  if (!v3)
  {
LABEL_29:
    v14 = 2;
LABEL_30:
    word_257A47C3A = v2;
    _MergedGlobals_0 = 0;
    ++byte_2579E2C69;
    if (Hal_SendNoFirmwareNVData(v14))
    {
      if (!AgpsFsmStartTimer(0x802E06u, 0x7D0u))
      {
        result = 1;
        byte_2579E2C68 = 1;
        return result;
      }
      if (g_LbsOsaTrace_Config < 2)
      {
LABEL_37:
        v12 = (void *)g_GNSS_FW_NV_Context;
        if (!g_GNSS_FW_NV_Context)
          goto LABEL_22;
        goto LABEL_21;
      }
      bzero(__str, 0x3C6uLL);
      v15 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNM", 87, "Gnm55_SendVar_GNSS_FW_NV_Data", 1544);
      v16 = 2;
    }
    else
    {
      if (!g_LbsOsaTrace_Config)
        goto LABEL_37;
      bzero(__str, 0x3C6uLL);
      v17 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: No GNSS FW NV restore failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNM", 69, "Gnm55_SendVar_GNSS_FW_NV_Data");
      v16 = 1;
    }
    gnssOsa_PrintLog(__str, v16, 1, 0);
    goto LABEL_37;
  }
  if (!gnssOsa_readNv(1, v3, qword_257A47C40))
  {
    v2 = qword_257A47C40;
    goto LABEL_29;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Read GNSS FW NV success, size,%lu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm55_01Read_GNSS_FW_NV", qword_257A47C40);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  v5 = qword_257A47C40;
  _MergedGlobals_0 = 0;
  ++byte_2579E2C69;
  v6 = qword_257A47C40;
LABEL_10:
  if (v6 < 0xFF8u)
  {
    v8 = 0;
    byte_2579E2C6A = 1;
    v7 = -1;
  }
  else
  {
    v7 = _MergedGlobals_0 + 1;
    v8 = v6 - 4087;
  }
  _MergedGlobals_0 = v7;
  word_257A47C3A = v8;
  if (!Hal_SendFirmwareNVData((unsigned __int8 *)(g_GNSS_FW_NV_Context + (unsigned __int16)(v5 - v6))))
  {
    if (!g_LbsOsaTrace_Config)
      goto LABEL_20;
    bzero(__str, 0x3C6uLL);
    v11 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS FW NV restore failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 69, "Gnm55_SendVar_GNSS_FW_NV_Data");
    v10 = 1;
LABEL_19:
    gnssOsa_PrintLog(__str, v10, 1, 0);
LABEL_20:
    v12 = (void *)g_GNSS_FW_NV_Context;
    if (!g_GNSS_FW_NV_Context)
    {
LABEL_22:
      result = 0;
      *(_DWORD *)((char *)&g_GNSS_FW_NV_Context + 7) = 0;
      g_GNSS_FW_NV_Context = 0;
      return result;
    }
LABEL_21:
    free(v12);
    goto LABEL_22;
  }
  if (AgpsFsmStartTimer(0x802E06u, 0x7D0u))
  {
    if (g_LbsOsaTrace_Config < 2)
      goto LABEL_20;
    bzero(__str, 0x3C6uLL);
    v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 87, "Gnm55_SendVar_GNSS_FW_NV_Data", 1544);
    v10 = 2;
    goto LABEL_19;
  }
  result = 1;
  byte_2579E2C68 = 1;
  if (_MergedGlobals_0 == 255)
  {
    if (g_GNSS_FW_NV_Context)
    {
      free((void *)g_GNSS_FW_NV_Context);
      g_GNSS_FW_NV_Context = 0;
      return 1;
    }
  }
  return result;
}

void Gnm55_HandleRespNo_GNSS_FW_NV_ACK(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char __str[966];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (byte_2579E2C68)
  {
    if (AgpsFsmStopTimer(8400390) && g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 87, "Gnm55_HandleRespNo_GNSS_FW_NV_ACK", 1545);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    byte_2579E2C68 = 0;
  }
  if ((Gnm55_CheckRestoreStatus(a1[8], "No GNSS FW NV Ack") & 1) != 0)
  {
    if ((Ga05_GetDebugFeaturesBitmask() & 0x80) != 0)
      Gnm35_EnableBCTInTimeMarkMessage();
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)gp_Logger + 72))(gp_Logger);
    if ((v3 & 2) != 0)
    {
      Gnm_SendFWExtendedDbgConfig(v3);
    }
    else if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ExtDbg Config not enabled\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm55_HandleRespNo_GNSS_FW_NV_ACK");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if ((Hal_GNSS_SessionStart() & 1) == 0)
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS session start failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm55_HandleRespNo_GNSS_FW_NV_ACK");
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
    }
  }
  else
  {
    if (g_GNSS_FW_NV_Context)
      free((void *)g_GNSS_FW_NV_Context);
    *(_DWORD *)((char *)&g_GNSS_FW_NV_Context + 7) = 0;
    g_GNSS_FW_NV_Context = 0;
  }
}

uint64_t Gnm55_CheckRestoreStatus(int a1, const char *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char __str[966];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a1 <= 70)
  {
    if (a1 != 32)
    {
      if (a1 == 65)
      {
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          v4 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s: CLK TCXO, TCXO not defined in SSF\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm55_CheckRestoreStatus", a2);
          v5 = 4;
LABEL_25:
          gnssOsa_PrintLog(__str, v5, 1, 0);
          return 0;
        }
        return 0;
      }
      if (a1 == 67)
      {
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s: CS error\n");
LABEL_18:
          v5 = 1;
          goto LABEL_25;
        }
        return 0;
      }
LABEL_23:
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx %s: RespStatus,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 87, "Gnm55_CheckRestoreStatus", 770, a2, a1);
        v5 = 2;
        goto LABEL_25;
      }
      return 0;
    }
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s: Success\n");
      goto LABEL_21;
    }
    return 1;
  }
  if (a1 == 71)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s: Gen failure\n");
      goto LABEL_18;
    }
    return 0;
  }
  if (a1 == 78)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s: Fallback to fixed GNSS FW NV\n");
      goto LABEL_21;
    }
    return 1;
  }
  if (a1 != 84)
    goto LABEL_23;
  if (g_LbsOsaTrace_Config < 4)
    return 1;
  bzero(__str, 0x3C6uLL);
  mach_continuous_time();
  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s: TCXO defined in SSF\n");
LABEL_21:
  v6 = 1;
  gnssOsa_PrintLog(__str, 4, 1, 0);
  return v6;
}

void Gnm55_HandleRespVar_GNSS_FW_NV_ACK(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char __str[966];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (byte_2579E2C68)
  {
    if (AgpsFsmStopTimer(8400390) && g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 87, "Gnm55_HandleRespVar_GNSS_FW_NV_ACK", 1545);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    byte_2579E2C68 = 0;
  }
  if ((Gnm55_CheckRestoreStatus(a1[8], "GNSS FW NV Var Ack") & 1) != 0)
  {
    if (byte_2579E2C6A)
    {
      if ((Ga05_GetDebugFeaturesBitmask() & 0x80) != 0)
        Gnm35_EnableBCTInTimeMarkMessage();
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)gp_Logger + 72))(gp_Logger);
      if ((v3 & 2) != 0)
      {
        Gnm_SendFWExtendedDbgConfig(v3);
      }
      else if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v4 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ExtDbg Config not enabled\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm55_HandleRespVar_GNSS_FW_NV_ACK");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      if ((Hal_GNSS_SessionStart() & 1) == 0)
      {
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          v6 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS session start failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 69, "Gnm55_HandleRespVar_GNSS_FW_NV_ACK");
          gnssOsa_PrintLog(__str, 1, 1, 0);
        }
      }
    }
    else
    {
      Gnm55_SendVar_GNSS_FW_NV_Data(0);
    }
  }
  else
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Response error, NV Var Ack\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm55_HandleRespVar_GNSS_FW_NV_ACK");
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    if (g_GNSS_FW_NV_Context)
      free((void *)g_GNSS_FW_NV_Context);
    *(_DWORD *)((char *)&g_GNSS_FW_NV_Context + 7) = 0;
    g_GNSS_FW_NV_Context = 0;
  }
}

uint64_t Gnm55_HandleVar_GNSS_FW_NV_RestoreNoAck(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char __str[966];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_VAR_ME_NV_RESTORE_TIMER\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm55_HandleVar_GNSS_FW_NV_RestoreNoAck");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    if (byte_2579E2C68)
    {
      byte_2579E2C68 = 0;
      if (byte_2579E2C69 > 2u)
      {
        *(_DWORD *)((char *)&g_GNSS_FW_NV_Context + 7) = 0;
        g_GNSS_FW_NV_Context = 0;
        Gnm03_60BaseBandResetReq(6);
      }
      else
      {
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          v3 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS FW NV Restore failed, retry %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 87, "Gnm55_HandleVar_GNSS_FW_NV_RestoreNoAck", byte_2579E2C69);
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        Gnm55_SendVar_GNSS_FW_NV_Data(1);
      }
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm55_HandleVar_GNSS_FW_NV_RestoreNoAck", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void Gnm55_HandleBackupVar_GNSS_FW_NV(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const void ***v6;
  void **v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  uint64_t v22;
  char *v23;
  _BYTE *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  const void *v29;
  size_t v30;
  char *v31;
  void *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  const void **v40;
  void *v41;
  uint64_t v42;
  int v43;
  char __str[966];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (a2 > 8)
    {
      v6 = (const void ***)&unk_257A47000;
      v7 = (void **)p_MEBackupNVData;
      if (p_MEBackupNVData)
      {
        v8 = *(_BYTE **)p_MEBackupNVData;
      }
      else
      {
        v7 = (void **)operator new();
        v8 = 0;
        v7[1] = 0;
        v7[2] = 0;
        *v7 = 0;
        p_MEBackupNVData = (uint64_t)v7;
      }
      v9 = a1[9];
      v10 = a2 - 3;
      if (v10 >= 0xC)
      {
        v11 = a1 + 11;
        v12 = v10 - 11;
        v14 = v7[1];
        v13 = v7[2];
        if (v13 - v14 >= v10 - 11)
        {
          if (v12 <= 0)
          {
            v21 = v7[1];
            if (&v14[-v12] < v14)
            {
              v22 = 11 - v10;
              v21 = v7[1];
              do
                *v21++ = v14[v22++];
              while (v22);
            }
            v7[1] = v21;
            if (v14 != &v14[v12])
              memmove(&v14[v10 - 11], v14, 11 - v10);
            memmove(v14, a1 + 11, v10 - 11);
          }
          else
          {
            memmove(v14, a1 + 11, v10 - 11);
            v7[1] = &v14[v10 - 11];
            v6 = (const void ***)&unk_257A47000;
          }
        }
        else
        {
          v15 = (char *)(v14 - v8);
          v16 = v14 - v8 + v12;
          if (v16 < 0)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v17 = v13 - v8;
          if (2 * v17 > v16)
            v16 = 2 * v17;
          if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
            v18 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          v43 = a1[9];
          if (v18)
          {
            v19 = (char *)operator new(v18);
            v11 = a1 + 11;
            v20 = v19;
          }
          else
          {
            v20 = 0;
          }
          v23 = &v15[(_QWORD)v20];
          memcpy(&v15[(_QWORD)v20], v11, v12);
          if (v8 == v14)
          {
            v24 = v14;
            v25 = &v15[(_QWORD)v20];
          }
          else
          {
            do
            {
              v15[(_QWORD)v20 - 1] = v15[(_QWORD)(v8 - 1)];
              --v15;
            }
            while (v15);
            v24 = v7[1];
            v8 = v24;
            v25 = v20;
          }
          v26 = &v23[v12];
          v27 = &v20[v18];
          v28 = v24 - v14;
          if (v8 != v14)
          {
            v29 = v14;
            v30 = v24 - v14;
            v31 = v25;
            memmove(v26, v29, v30);
            v25 = v31;
          }
          v32 = *v7;
          *v7 = v25;
          v7[1] = &v26[v28];
          v7[2] = v27;
          v6 = (const void ***)&unk_257A47000;
          v9 = v43;
          if (v32)
            operator delete(v32);
        }
      }
      if (v9 == 255)
      {
        v34 = a1[a2 - 4];
        v35 = a1[a2 - 5];
        if ((gnssOsa_clearNV(1) & 1) == 0 && g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          v36 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx clear\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "GNM", 87, "Gnm55_HandleBackupVar_GNSS_FW_NV", 1570);
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        v37 = gnssOsa_storeBufferToNv(1, *v6[390], (_BYTE *)v6[390][1] - (_BYTE *)*v6[390]);
        if (g_LbsOsaTrace_Config < 2)
          v38 = 1;
        else
          v38 = v37;
        if ((v38 & 1) == 0)
        {
          bzero(__str, 0x3C6uLL);
          v39 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GNSS GNSS FW NV:ReqWrite,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "GNM", 87, "Gnm55_HandleBackupVar_GNSS_FW_NV", 1570, a2 - 14);
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        v40 = v6[390];
        v41 = (void *)*v40;
        v40[1] = *v40;
        if (v41)
          operator delete(v41);
        MEMORY[0x24BD2D7C8](v40, 0x10C402FEFCB83);
        v6[390] = 0;
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          v42 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FW NV:WriteSuccess Len,%uB, NVChecksum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "GNM", 73, "Gnm55_HandleBackupVar_GNSS_FW_NV", a2 - 14, v35 | (v34 << 8));
          gnssOsa_PrintLog(__str, 4, 1, 0);
        }
      }
      else if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v33 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FW NV:WriteSuccess Len,%uB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "GNM", 73, "Gnm55_HandleBackupVar_GNSS_FW_NV", a2 - 14);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
    }
    else if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx length err\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 69, "Gnm55_HandleBackupVar_GNSS_FW_NV", 1570);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx null buffer\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm55_HandleBackupVar_GNSS_FW_NV", 1570);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

uint64_t Gnm55_HandleXMessages(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  char __str[966];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: X class response\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm55_HandleXMessages");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  v5 = a1[3];
  if (v5 > 0x4D)
  {
    if (v5 == 86)
    {
      Gnm55_HandleRespVar_GNSS_FW_NV_ACK(a1);
    }
    else if (v5 == 78)
    {
      Gnm55_HandleRespNo_GNSS_FW_NV_ACK(a1);
    }
  }
  else
  {
    if (v5 == 69)
    {
      Gnm55_HandleBackupVar_GNSS_FW_NV(a1, a2);
    }
    else if (v5 != 77)
    {
      return 0;
    }
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Fixed NV response\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm55_HandleXMessages");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  return 0;
}

void Gnm55_RestoreVar_GNSS_FW_NV(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char __str[966];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS FW NV data resotre,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm55_RestoreVar_GNSS_FW_NV", a1);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!a1)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS FW NV:GOOH Occured\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 87, "Gnm55_RestoreVar_GNSS_FW_NV");
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    gnssOsa_clearNV(1);
  }
  *(_DWORD *)((char *)&g_GNSS_FW_NV_Context + 7) = 0;
  g_GNSS_FW_NV_Context = 0;
  if ((Gnm55_SendVar_GNSS_FW_NV_Data(1) & 1) == 0 && g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS FW NV:Sending error\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 87, "Gnm55_RestoreVar_GNSS_FW_NV");
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
}

uint64_t Gnm55_ClearVar_GNSS_FW_NV(void)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char __str[966];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS FW NV:Clearing GNSS FW NV file\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNM", 73, "Gnm55_ClearVar_GNSS_FW_NV");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  v1 = gnssOsa_clearNV(1);
  if ((v1 & 1) == 0 && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GNSS FW NV File\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 69, "Gnm55_ClearVar_GNSS_FW_NV", 1573);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return v1;
}

uint64_t GN_AGPS_Set_Eph_El(unsigned __int8 *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _DWORD v13[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[17];
  int v27;
  char v28;
  _QWORD v29[16];

  v29[15] = *MEMORY[0x24BDAC8D0];
  if (!Is_GN_API_Set_Allowed("GN_AGPS_Set_Eph_El"))
    return 0;
  v2 = *(_QWORD *)(p_api + 48);
  if (*(_BYTE *)(v2 + 16) && *(int *)v2 >= 3)
    v3 = (int)*(double *)(v2 + 32) + 604800 * *(__int16 *)(v2 + 28);
  else
    v3 = 0;
  v17 = *((_WORD *)a1 + 17);
  v20 = *((_DWORD *)a1 + 17);
  v21 = *((_WORD *)a1 + 36);
  v4 = a1[74] ? 5 : 3;
  v14 = *(_QWORD *)(a1 + 1);
  v15 = *(_OWORD *)(a1 + 10);
  v16 = *(_QWORD *)(a1 + 26);
  v18 = *(_OWORD *)(a1 + 36);
  v19 = *(_OWORD *)(a1 + 52);
  v13[0] = v3;
  v13[1] = v4;
  v5 = *a1;
  if (g_Logging_Cfg < 5)
    EvLog_d("GN_AGPS_Set_Eph_El: ", v5);
  else
    EvLog_GPS_IntEph("GN_AGPS_Set_Eph_El: ", v5, (uint64_t)v13);
  v6 = *a1;
  if (!Is_GPS_IntEph_Valid((uint64_t)"GN_AGPS_Set_Eph_El: ", v6, (uint64_t)v13))
    return 0;
  memset(v29, 0, 115);
  GPS_EphInt2Bin((uint64_t)v13, (uint64_t)v29);
  v23 = 0u;
  *(_OWORD *)v26 = 0u;
  v25 = 0u;
  v24 = 0u;
  v22 = v29[0];
  LOBYTE(v23) = v29[1];
  *(_WORD *)((char *)&v23 + 1) = *(_WORD *)((char *)&v29[1] + 1);
  v7 = 21;
  v8 = 11;
  v9 = 24;
  do
  {
    v10 = (char *)&v22 + v8;
    *v10 = *((_BYTE *)v29 + v9);
    *(_WORD *)(v10 + 1) = *(_WORD *)((char *)v29 + v9 + 1);
    --v7;
    v8 += 3;
    v9 += 4;
  }
  while (v7 > 1);
  *(_WORD *)&v26[15] = WORD2(v29[13]);
  v27 = *(_DWORD *)((char *)&v29[13] + 6);
  v28 = BYTE2(v29[14]);
  v11 = API_Set_GPS_CBinEph("GN_AGPS_Set_Eph_El: ", v6, (unsigned int *)&v22);
  if ((_DWORD)v11)
    Debug_Log_GPS_Eph(1, v6, (uint64_t)&v22);
  return v11;
}

uint64_t GN_AGPS_Set_Alm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  __int16 v19;
  signed int v20;
  signed int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  __int16 v27;
  signed int v28;
  signed int v29;
  uint64_t v30;

  if (!Is_GN_API_Set_Allowed("GN_AGPS_Set_Alm"))
    return 0;
  if ((a1 - 1) < 0x20u)
  {
    v4 = p_NA + 36 * (a1 - 1);
    v5 = *(_QWORD *)(a2 + 22);
    *(_OWORD *)(v4 + 3270) = *(_OWORD *)(a2 + 6);
    *(_QWORD *)(v4 + 3286) = v5;
    *(_DWORD *)(v4 + 3260) = *(_DWORD *)a2;
    *(_WORD *)(v4 + 3268) = *(_WORD *)(a2 + 4);
    if (*(_BYTE *)(a2 + 30))
      v6 = 5;
    else
      v6 = 3;
    *(_DWORD *)(v4 + 3264) = v6;
    v7 = 1;
    Debug_Log_GPS_Alm(1, a1, v4 + 3260);
    EvLog_nd("GN_AGPS_Set_Alm: ", 2, v8, a1, *(unsigned int *)(p_NA + 36 * (a1 - 1) + 3260));
    v9 = *(unsigned __int16 *)(a2 + 4);
    if (v9 <= 0x3FF)
    {
      if (v9 < 0x100)
      {
        v15 = *(__int16 *)(*(_QWORD *)(p_api + 72) + 1718);
        v16 = *(_QWORD *)(p_api + 48);
        if (*(_BYTE *)(v16 + 16)
          && *(int *)v16 >= 3
          && (v17 = (int)*(double *)(v16 + 32) + 604800 * *(__int16 *)(v16 + 28), v17 > 619315199))
        {
          v18 = v17 / 0x93A80u;
        }
        else
        {
          v18 = v15 + 128;
        }
        v19 = (v15 + (v15 >> 23)) & 0xFF00;
        v20 = v9 + v19;
        v21 = v18 - 128;
        if (v20 > v21)
          LOWORD(v21) = v9 + v19;
        LOWORD(v9) = v19 + v9 + ((v21 - v20 + 255) & 0xFF00);
      }
      else
      {
        LOWORD(v9) = Complete_WeekNo(v9);
      }
    }
    v22 = p_NA;
    *(_WORD *)(p_NA + 36 * (a1 - 1) + 3268) = v9;
    *(_BYTE *)(v22 + (a1 - 1) + 44) = 1;
    return v7;
  }
  if ((a1 + 63) >= 0xAu)
  {
    EvCrt_v("GN_AGPS_Set_Alm:  FAILED:  SV = %d, Out of range !", a1);
    return 0;
  }
  v10 = p_NA + 36 * (a1 + 63);
  v11 = *(_QWORD *)(a2 + 22);
  *(_OWORD *)(v10 + 5222) = *(_OWORD *)(a2 + 6);
  *(_QWORD *)(v10 + 5238) = v11;
  *(_DWORD *)(v10 + 5212) = *(_DWORD *)a2;
  *(_WORD *)(v10 + 5220) = *(_WORD *)(a2 + 4);
  if (*(_BYTE *)(a2 + 30))
    v12 = 5;
  else
    v12 = 3;
  *(_DWORD *)(v10 + 5216) = v12;
  v7 = 1;
  Debug_Log_GPS_Alm(1, a1, v10 + 5212);
  EvLog_nd("GN_AGPS_Set_Alm: ", 2, v13, a1, *(unsigned int *)(p_NA + 36 * (a1 + 63) + 5212));
  v14 = *(unsigned __int16 *)(a2 + 4);
  if (v14 <= 0x3FF)
  {
    if (v14 < 0x100)
    {
      v23 = *(__int16 *)(*(_QWORD *)(p_api + 72) + 1718);
      v24 = *(_QWORD *)(p_api + 48);
      if (*(_BYTE *)(v24 + 16)
        && *(int *)v24 >= 3
        && (v25 = (int)*(double *)(v24 + 32) + 604800 * *(__int16 *)(v24 + 28), v25 > 619315199))
      {
        v26 = v25 / 0x93A80u;
      }
      else
      {
        v26 = v23 + 128;
      }
      v27 = (v23 + (v23 >> 23)) & 0xFF00;
      v28 = v14 + v27;
      v29 = v26 - 128;
      if (v28 > v29)
        LOWORD(v29) = v14 + v27;
      LOWORD(v14) = v27 + v14 + ((v29 - v28 + 255) & 0xFF00);
    }
    else
    {
      LOWORD(v14) = Complete_WeekNo(v14);
    }
  }
  v30 = p_NA;
  *(_WORD *)(p_NA + 36 * (a1 + 63) + 5220) = v14;
  *(_BYTE *)(v30 + (a1 + 63) + 86) = 1;
  return v7;
}

uint64_t Complete_WeekNo(unsigned int a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  int v4;
  unsigned __int16 v5;

  if (a1 > 0x3FF)
  {
    v5 = a1;
  }
  else
  {
    v1 = *(_QWORD *)(p_api + 48);
    if (*(_BYTE *)(v1 + 16)
      && *(int *)v1 >= 3
      && (v2 = (int)*(double *)(v1 + 32) + 604800 * *(__int16 *)(v1 + 28), v2 > 619315199))
    {
      v3 = v2 / 0x93A80u;
    }
    else
    {
      v3 = *(__int16 *)(*(_QWORD *)(p_api + 72) + 1718) + 512;
    }
    v4 = v3 - 512;
    do
    {
      v5 = a1;
      a1 += 1024;
    }
    while (v4 > v5);
  }
  return (__int16)v5;
}

uint64_t GN_AGPS_Set_Ion(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  if (!Is_GN_API_Set_Allowed("GN_AGPS_Set_Ion"))
    return 0;
  v3 = *((char *)a1 + 4);
  v4 = *((char *)a1 + 5);
  v5 = *((_BYTE *)a1 + 6);
  if (!(v3 | v4))
  {
    if (!*((_BYTE *)a1 + 6))
    {
      if (!*((_BYTE *)a1 + 7)
        && !*((_BYTE *)a1 + 8)
        && !*((_BYTE *)a1 + 9)
        && !*((_BYTE *)a1 + 10)
        && !*((_BYTE *)a1 + 11))
      {
        v9 = "GN_AGPS_Set_Ion: Rejected: ALL ZERO";
        goto LABEL_14;
      }
      v5 = 0;
    }
    v4 = 0;
  }
  EvLog_nd("GN_AGPS_Set_Ion: ", 10, v2, *a1, v3, v4, v5, *((char *)a1 + 7), *((char *)a1 + 8), *((char *)a1 + 9), *((char *)a1 + 10), *((char *)a1 + 11), *((unsigned __int8 *)a1 + 12));
  v6 = p_NA;
  v7 = p_NA + 660;
  *(_DWORD *)(p_NA + 660) = *a1;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(a1 + 1);
  if (!*((_BYTE *)a1 + 12))
  {
    v9 = "GN_AGPS_Set_Ion: Rejected: Assisted source not allowed";
LABEL_14:
    EvLog(v9);
    return 0;
  }
  *(_DWORD *)(v6 + 664) = 5;
  v8 = 1;
  Debug_Log_GPS_Klob(1, v7);
  *(_BYTE *)(p_NA + 10) = 1;
  return v8;
}

uint64_t GN_AGPS_Set_UTC(unsigned int *a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  char *v19;

  if (!Is_GN_API_Set_Allowed("GN_AGPS_Set_UTC"))
    return 0;
  EvLog_nd("GN_AGPS_Set_UTC: ", 10, v2, *a1, a1[1], a1[2], *((unsigned __int8 *)a1 + 12), *((unsigned __int8 *)a1 + 13), *((char *)a1 + 14), *((unsigned __int8 *)a1 + 15), *((unsigned __int8 *)a1 + 16), *((char *)a1 + 17), *((unsigned __int8 *)a1 + 18));
  v3 = *((unsigned __int8 *)a1 + 12);
  if (v3 < 0x94)
  {
    v4 = *((char *)a1 + 14);
    if (v4 >= 0x21)
    {
      EvCrt_v("GN_AGPS_Set_UTC: FAILED: dtLS = %d <0 or >32, Unrealistic value!");
      return 0;
    }
    v5 = *((unsigned __int8 *)a1 + 16);
    if (v5 >= 8)
    {
      EvCrt_v("GN_AGPS_Set_UTC: FAILED: DN = %d >7, Out of range!");
      return 0;
    }
    v6 = *((char *)a1 + 17);
    if (v6 >= 0x21)
    {
      EvCrt_v("GN_AGPS_Set_UTC: FAILED: dtLSF = %d <0 or >32, Unrealistic value!");
      return 0;
    }
    if ((int)(v6 - v4) >= 0)
      v7 = v6 - v4;
    else
      v7 = v4 - v6;
    if (v7 >= 2)
    {
      EvCrt_v("GN_AGPS_Set_UTC: FAILED: (dtLSF-dtLS) = %d <-1 or >+1, Unrealistic difference!");
      return 0;
    }
    v8 = *((unsigned __int8 *)a1 + 14);
    v9 = *((unsigned __int8 *)a1 + 17);
    if (v9 != v8)
    {
      v10 = *(_QWORD *)(p_api + 48);
      if (*(_BYTE *)(v10 + 16) && *(int *)v10 >= 3)
      {
        v11 = 1861606989 * ((int)*(double *)(v10 + 32) + 604800 * *(__int16 *)(v10 + 28));
        v12 = (v11 >> 63) + (SHIDWORD(v11) >> 18);
      }
      else
      {
        v12 = 0;
      }
      if (Is_Future_Leap_Sec_Date_Not_Valid(v12, 1, *((unsigned __int8 *)a1 + 15), *((_BYTE *)a1 + 16)))
      {
        EvCrt_v("GN_AGPS_Set_UTC: FAILED: Invalid UTC Future Leap Second date %d  %d %d %d");
        return 0;
      }
    }
    v15 = a1[1];
    v16 = a1[2];
    if (v15)
    {
      v17 = *((_BYTE *)a1 + 13);
    }
    else
    {
      v17 = *((_BYTE *)a1 + 13);
      if (!(v8 | v3 | v9) && !v16 && !*((_BYTE *)a1 + 13))
      {
        if (!(*((unsigned __int8 *)a1 + 15) | v5))
        {
          v19 = "GN_AGPS_Set_UTC: Rejected: ALL ZERO";
LABEL_34:
          EvLog(v19);
          return 0;
        }
        v17 = 0;
      }
    }
    v18 = p_NA;
    *(_DWORD *)(p_NA + 676) = *a1;
    *(_DWORD *)(v18 + 684) = v15;
    *(_DWORD *)(v18 + 688) = v16;
    *(_BYTE *)(v18 + 692) = v3;
    *(_BYTE *)(v18 + 693) = v17;
    *(_BYTE *)(v18 + 694) = v4;
    *(_BYTE *)(v18 + 695) = *((_BYTE *)a1 + 15);
    *(_BYTE *)(v18 + 696) = v5;
    *(_BYTE *)(v18 + 697) = v6;
    if (*((_BYTE *)a1 + 18))
    {
      *(_DWORD *)(v18 + 680) = 5;
      v13 = 1;
      Debug_Log_GPS_UTC(1, v18 + 676);
      *(_BYTE *)(p_NA + 11) = 1;
      return v13;
    }
    v19 = "GN_AGPS_Set_UTC: Rejected: Assisted source not allowed";
    goto LABEL_34;
  }
  EvCrt_v("GN_AGPS_Set_UTC: FAILED: Tot = %d >=148, >604800s, Out of range!");
  return 0;
}

uint64_t GN_AGPS_Set_Ref_Time(unsigned int *a1)
{
  uint64_t result;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;

  result = Is_GN_API_Set_Allowed("GN_AGPS_Set_Ref_Time");
  if ((_DWORD)result)
  {
    EvLog_v("GN_AGPS_Set_Ref_Time:  %u  %u  %d  %d", *a1, a1[1], *((unsigned __int16 *)a1 + 4), *((unsigned __int16 *)a1 + 5));
    v3 = *a1;
    v4 = p_NA;
    *(_DWORD *)(p_NA + 404) = *a1;
    v5 = Complete_WeekNo(*((unsigned __int16 *)a1 + 4));
    v6 = a1[1];
    *(_WORD *)(v4 + 416) = v5;
    *(double *)(v4 + 408) = (double)v6 * 0.001;
    v7 = *((unsigned __int16 *)a1 + 5);
    *(double *)(v4 + 424) = (double)v7 * 0.001;
    *(_BYTE *)(v4 + 2) = 1;
    if (v3)
    {
      if (v6 <= 0x240C83FF)
      {
        if (v5 > 1023)
        {
          if (v7)
          {
            if ((int)((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v3) < 180001)
            {
              API_Set_Ref_Time(*(_DWORD *)(p_NA + 404), *(double *)(p_NA + 408), *(_WORD *)(p_NA + 416), *(double *)(p_NA + 424));
              Debug_Log_AGPS_Ref_Time(a1);
              return 1;
            }
            *(_BYTE *)(p_NA + 2) = 0;
            EvCrt_v("GN_AGPS_Set_Ref_Time: FAILED: OS_Time_ms = %u, too old by %d ms");
          }
          else
          {
            *(_BYTE *)(v4 + 2) = 0;
            EvCrt_v("GN_AGPS_Set_Ref_Time: FAILED: RMS_ms = %d ==0, Out of range!");
          }
        }
        else
        {
          *(_BYTE *)(v4 + 2) = 0;
          EvCrt_v("GN_AGPS_Set_Ref_Time: FAILED: WeekNo = %d <1024, Out of range!");
        }
      }
      else
      {
        *(_BYTE *)(v4 + 2) = 0;
        EvCrt_v("GN_AGPS_Set_Ref_Time: FAILED: TOW_ms = %d >%d, Out of range!");
      }
    }
    else
    {
      *(_BYTE *)(v4 + 2) = 0;
      EvCrt_v("GN_AGPS_Set_Ref_Time: FAILED: OS_Time_ms = %u ==0, Out of range!");
    }
    return 0;
  }
  return result;
}

uint64_t GN_AGPS_Set_Ref_Pos(uint64_t a1)
{
  uint64_t result;
  double v3;
  double v4;
  int v5;
  double v6;
  unsigned int v7;
  unsigned int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  long double v15;
  long double v16;
  double v17;
  long double v18;
  double v19;
  int v20;
  double v21;
  double v22;
  double v23;
  signed int v24;
  BOOL v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  int v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  double v44[2];

  v44[1] = *(double *)MEMORY[0x24BDAC8D0];
  result = Is_GN_API_Set_Allowed("GN_AGPS_Set_Ref_Pos");
  if ((_DWORD)result)
  {
    EvLog_v("GN_AGPS_Set_Ref_Pos: %u LL %g %g Sigma %d %d %d Ht %d %g %d C %d  S %d 0x%X", *(_DWORD *)a1, *(double *)(a1 + 8), *(double *)(a1 + 16), (int)*(double *)(a1 + 24), (int)*(double *)(a1 + 32), *(__int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42), *(double *)(a1 + 48), (int)*(double *)(a1 + 56), *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 68), *(_QWORD *)(a1 + 72));
    v3 = *(double *)(a1 + 8);
    if (v3 < -90.0 || v3 > 90.0)
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: Latitude = %g <-90.0 or >90.0, Out of range!");
      return 0;
    }
    v4 = *(double *)(a1 + 16);
    if (v4 < -180.0 || v4 > 360.0)
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: Longitude = %g <-180.0 or >360.0, Out of range!");
      return 0;
    }
    v44[0] = 0.0;
    if (R8_EQ((const double *)(a1 + 24), v44))
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: RMS_SMaj = %g ==0, Out of range!");
      return 0;
    }
    v44[0] = 0.0;
    if (R8_EQ((const double *)(a1 + 32), v44))
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: RMS_SMin = %g ==0, Out of range!");
      return 0;
    }
    if ((unsigned __int16)(*(_WORD *)(a1 + 40) - 361) <= 0xFDE2u)
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: RMS_SMajBrg = %d <-180 or >+360, Out of range!");
      return 0;
    }
    v5 = *(unsigned __int8 *)(a1 + 42);
    if (*(_BYTE *)(a1 + 42))
    {
      v6 = *(double *)(a1 + 48);
      if (v6 < -500.0 || v6 > 6000.0)
      {
        EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: Height = %g <%d or >%d, Out of range!");
        return 0;
      }
      if (*(double *)(a1 + 56) <= 0.0)
      {
        EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: RMS_Height = %g <=0, Invalid value!");
        return 0;
      }
    }
    v7 = *(_DWORD *)(a1 + 64);
    if (v7 >= 5)
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: Trust = %d <GN_AGPS_TRUST_UNKNOWN or >GN_AGPS_TRUST_HIGH, Out of range!");
      return 0;
    }
    v8 = *(_DWORD *)(a1 + 68);
    if (v8 >= 9)
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: Source = %d <GN_AGPS_SRC_UNKNOWN or >GN_AGPS_SRC_EXT, Out of range!");
      return 0;
    }
    v9 = v3 * 0.0174532925;
    v10 = v4 * 0.0174532925;
    v11 = *(double *)(a1 + 24);
    v12 = v11 * v11;
    v13 = p_NA;
    LODWORD(v14) = *(_DWORD *)a1;
    if (*(_BYTE *)(p_NA + 8))
    {
      v15 = *(double *)(p_NA + 552);
      v16 = (v9 - v15) * 6378137.0;
      v17 = (v10 - *(double *)(p_NA + 560)) * 6378137.0;
      v18 = cos(v15);
      v19 = v18 * v17 * (v18 * v17) + v16 * v16;
      v20 = v14 - *(_DWORD *)(v13 + 544);
      v21 = *(double *)(v13 + 600);
      v22 = v21 + (double)v20 * 0.015 * ((double)v20 * 0.015);
      v23 = (v12 + v22) * 9.0;
      if (v7 <= 2)
      {
        v24 = *(_DWORD *)(v13 + 636);
        if ((int)v7 < v24)
        {
          EvCrt_v("GN_AGPS_Set_Ref_Pos: Ignored: Trust %d worse than existing, %d dAge %d dPos %f Sig %f %f %f", v7, v24, v20, sqrt(v19), v11, sqrt(v21), sqrt(v22));
          v25 = v19 < 160000.0 && v19 < v23;
          if (!v25 || *(int *)(a1 + 64) <= 1 || !*(_BYTE *)(a1 + 42))
            goto LABEL_65;
          if (!*(_BYTE *)(p_NA + 9))
            goto LABEL_68;
LABEL_41:
          if (*(_DWORD *)(a1 + 68) != 7)
          {
LABEL_65:
            Debug_Log_AGPS_Ref_Pos(a1);
            return 1;
          }
          v26 = *(_DWORD *)a1 - *(_DWORD *)(p_NA + 544);
          v27 = *(double *)(p_NA + 624);
          v28 = v27 + (double)v26 * 0.0005 * ((double)v26 * 0.0005);
          v29 = *(double *)(a1 + 56);
          if (v29 * v29 <= v28)
            goto LABEL_67;
          v30 = *(double *)(a1 + 48) - *(double *)(p_NA + 568);
          v31 = v30 * v30;
          v32 = (v29 * v29 + v28) * 9.0;
          v33 = sqrt(v31);
          v34 = sqrt(v27);
          v35 = sqrt(v28);
          if (v31 < v32)
          {
            EvCrt_v("GN_AGPS_Set_Ref_Pos: New Altitude Ignored: Worse but consistent, dAge %d dAlt %f Sig %f %f %f", v26, v33, v29, v34, v35);
            goto LABEL_65;
          }
          EvCrt_v("GN_AGPS_Set_Ref_Pos: New Altitude replacing inconsistent Prev Altitude, dAge %d dAlt %f Sig %f %f %f", v26, v33, v29, v34, v35);
          if (*(_BYTE *)(p_NA + 9))
LABEL_67:
            EvCrt_v("GN_AGPS_Set_Ref_Pos: New Altitude replacing previous one, PrevAlt %f Sig %f CurrentAlt %f Sig %f");
          else
LABEL_68:
            EvCrt_v("GN_AGPS_Set_Ref_Pos: New Altitude replacing previously missing one, CurrentAlt %f Sig %f");
          v43 = p_NA;
          *(_BYTE *)(p_NA + 9) = 1;
          *(_QWORD *)(v43 + 568) = *(_QWORD *)(a1 + 48);
          *(double *)(v43 + 624) = *(double *)(a1 + 56) * *(double *)(a1 + 56);
          goto LABEL_65;
        }
      }
      if (v12 > v22)
      {
        if (v19 < v23)
        {
          EvCrt_v("GN_AGPS_Set_Ref_Pos: Ignored: Worse but consistent, dAge %d dPos %f Sig %f %f %f", v20, sqrt(v19), v11, sqrt(v21), sqrt(v22));
          if (!v5 || v19 >= 160000.0)
            goto LABEL_65;
          goto LABEL_41;
        }
        if ((v8 == 4 || v8 == 2) && *(_DWORD *)(v13 + 640) == 7)
        {
          EvCrt_v("GN_AGPS_Set_Ref_Pos: E911 Ref Pos replacing inconsistent OS Ref Pos, dAge %d dPos %f Sig %f %f %f", v20, sqrt(v19), v11, sqrt(v21), sqrt(v22));
          v13 = p_NA;
          LODWORD(v14) = *(_DWORD *)a1;
        }
      }
    }
    *(_BYTE *)(v13 + 8) = 1;
    if (!(_DWORD)v14)
    {
      v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v13 = p_NA;
    }
    *(_DWORD *)(v13 + 544) = v14;
    *(double *)(v13 + 552) = v9;
    *(double *)(v13 + 560) = v10;
    *(double *)(v13 + 576) = v12;
    v36 = *(double *)(a1 + 32) * *(double *)(a1 + 32);
    *(double *)(v13 + 584) = v36;
    v37 = (double)*(__int16 *)(a1 + 40) * 0.0174532925;
    *(double *)(v13 + 592) = v37;
    *(double *)(v13 + 600) = v12;
    *(double *)(v13 + 608) = v36;
    *(double *)(v13 + 616) = v37;
    if (*(_BYTE *)(a1 + 42))
    {
      *(_BYTE *)(v13 + 9) = 1;
      *(_QWORD *)(v13 + 568) = *(_QWORD *)(a1 + 48);
      *(double *)(v13 + 624) = *(double *)(a1 + 56) * *(double *)(a1 + 56);
    }
    v38 = *(_DWORD *)(a1 + 64);
    if (!**((_DWORD **)&xmmword_257A47B18 + 1))
    {
      v39 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v40 = v39 - *(_DWORD *)a1;
      v13 = p_NA;
      *(_DWORD *)(p_NA + 544) = v39;
      *(float64x2_t *)(v13 + 576) = vaddq_f64(*(float64x2_t *)(v13 + 576), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v40 * 0.015 * ((double)v40 * 0.015)), 0));
      *(double *)(v13 + 624) = (double)v40 * 0.0005 * ((double)v40 * 0.0005) + *(double *)(v13 + 624);
      v41 = v40 >= 0 ? v40 : -v40;
      if (v41 >= 0x249F1 && v38 >= 2)
      {
        EvCrt_v("GN_AGPS_Set_Ref_Pos: Very old Reference Position demoted to Very Low Trust, Age_ms %d", v40);
        v13 = p_NA;
        v38 = 1;
      }
    }
    *(_DWORD *)(v13 + 632) = v38;
    *(_DWORD *)(v13 + 636) = v38;
    v42 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(v13 + 640) = v42;
    *(_QWORD *)(v13 + 648) = *(_QWORD *)(a1 + 72);
    if (v42 == 7 && *(double *)(a1 + 24) < 400.0)
      *(_BYTE *)(v13 + 656) = 0;
    else
      *(_BYTE *)(v13 + 656) = 2;
    goto LABEL_65;
  }
  return result;
}

unint64_t GN_AGPS_Mark_Response_Sent(unsigned int a1, unsigned int a2)
{
  char *v4;
  char v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  char *v10;
  unint64_t result;
  unint64_t *v12;
  int v13;
  unint64_t v14;
  _BYTE *v15;
  int v16;
  int v17;
  BOOL v18;
  _QWORD *v19;
  int v20;
  unint64_t v21;
  void *v22;
  _BYTE *v23;
  int v24;
  int v25;
  unint64_t *v26;
  int v27;
  unint64_t v28;
  _BYTE *v29;
  int v30;
  int v31;
  char *v32;
  _BYTE *v33;
  char *v34;
  char *v35;
  _BYTE __src[100];
  _BYTE v37[36];
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  GNSS_Write_GNB_Ctrl((char *)qword_257A47BE0);
  GNSS_GNB_Debug_Ctl(qword_257A47C00);
  GNSS_Event_Log_Ctl(qword_257A47BF8);
  GNSS_Nav_Debug_Ctl(qword_257A47BF0);
  v4 = __src;
  v34 = __src;
  v35 = v37;
  v33 = __src;
  v5 = 10;
  v6 = 1u;
  do
  {
    v32 = v4 + 1;
    *v4 = v5;
    v4 = v32;
    if (v32 >= v35)
    {
      v4 = v34;
      v32 = v34;
    }
    v5 = str_58_0[v6++];
  }
  while (v6 != 35);
  sprintf_10u(&v32, a1);
  v7 = v32++;
  *v7 = 32;
  if (v32 >= v35)
    v32 = v34;
  sprintf_10u(&v32, a2);
  v8 = 0;
  v9 = 32;
  v10 = v32;
  do
  {
    v32 = v10 + 1;
    *v10 = v9;
    v10 = v32;
    if (v32 >= v35)
    {
      v10 = v34;
      v32 = v34;
    }
    v9 = str_59_0[++v8];
  }
  while (v8 != 8);
  result = API_Query_Config((uint64_t)v37);
  if (v38 >= 1)
  {
    v12 = (unint64_t *)qword_257A47BF8;
    v13 = (unsigned __int16)((_WORD)v32 - (_WORD)v33);
    v14 = *(_QWORD *)(qword_257A47BF8 + 24);
    result = *(_QWORD *)qword_257A47BF8;
    v15 = __src;
    do
    {
      v16 = v14 - result;
      if (v13 >= v16)
        v17 = v16;
      else
        v17 = v13;
      memcpy((void *)result, v15, v17);
      result = *v12 + v17;
      *v12 = result;
      v14 = v12[3];
      if (result >= v14)
      {
        result = v12[2];
        *v12 = result;
      }
      v15 += v17;
      v18 = __OFSUB__(v13, v17);
      v13 -= v17;
    }
    while (!((v13 < 0) ^ v18 | (v13 == 0)));
    if (v38 >= 4)
    {
      v19 = (_QWORD *)qword_257A47C00;
      v20 = (unsigned __int16)((_WORD)v32 - (_WORD)v33);
      v21 = *(_QWORD *)(qword_257A47C00 + 24);
      v22 = *(void **)qword_257A47C00;
      v23 = __src;
      do
      {
        v24 = v21 - (_DWORD)v22;
        if (v20 >= v24)
          v25 = v24;
        else
          v25 = v20;
        memcpy(v22, v23, v25);
        v22 = (void *)(*v19 + v25);
        *v19 = v22;
        v21 = v19[3];
        if ((unint64_t)v22 >= v21)
        {
          v22 = (void *)v19[2];
          *v19 = v22;
        }
        v23 += v25;
        v18 = __OFSUB__(v20, v25);
        v20 -= v25;
      }
      while (!((v20 < 0) ^ v18 | (v20 == 0)));
      v26 = (unint64_t *)qword_257A47BF0;
      v27 = (unsigned __int16)((_WORD)v32 - (_WORD)v33);
      v28 = *(_QWORD *)(qword_257A47BF0 + 24);
      result = *(_QWORD *)qword_257A47BF0;
      v29 = __src;
      do
      {
        v30 = v28 - result;
        if (v27 >= v30)
          v31 = v30;
        else
          v31 = v27;
        memcpy((void *)result, v29, v31);
        result = *v26 + v31;
        *v26 = result;
        v28 = v26[3];
        if (result >= v28)
        {
          result = v26[2];
          *v26 = result;
        }
        v29 += v31;
        v18 = __OFSUB__(v27, v31);
        v27 -= v31;
      }
      while (!((v27 < 0) ^ v18 | (v27 == 0)));
    }
  }
  return result;
}

uint64_t gnss::GnssAdaptDevice::decodeSuplInit()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char __str[966];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v0 = g_LbsOsaTrace_Config;
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v1 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "ADP", 68, "decodeSuplInit");
    gnssOsa_PrintLog(__str, 5, 1, 0);
    v0 = g_LbsOsaTrace_Config;
  }
  if (v0 >= 2)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SUPL not supported\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 87, "decodeSuplInit", 1026);
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "decodeSuplInit");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  return 0;
}

void gnss::GnssAdaptDevice::setSuplInit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char __str[966];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "setSuplInit");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (*(_QWORD *)(a4 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v12, a4);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v12, (uint64_t)"setSuplInit");
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        goto LABEL_11;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "setSuplInit", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "setSuplInit");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
    return;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "setSuplInit", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_24BABD618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void gnss::GnssAdaptDevice::setSuplLocationIdNeededReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;
  char __str[966];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v8, (uint64_t)"setSuplLocationIdNeededReport");
    v4 = v9;
    if (v9 == v8)
    {
      v5 = 4;
      v4 = v8;
    }
    else
    {
      if (!v9)
        goto LABEL_9;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_9:
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setSuplLocationIdNeededReport", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setSuplLocationIdNeededReport", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_24BABD804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void gnss::GnssAdaptDevice::setSuplLocationId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;
  char __str[966];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v8, (uint64_t)"setSuplLocationId");
    v4 = v9;
    if (v9 == v8)
    {
      v5 = 4;
      v4 = v8;
    }
    else
    {
      if (!v9)
        goto LABEL_9;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_9:
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setSuplLocationId", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setSuplLocationId", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_24BABD9F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void gnss::GnssAdaptDevice::abortSuplSession(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  char __str[966];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v7, (uint64_t)"abortSuplSession");
    v3 = v8;
    if (v8 == v7)
    {
      v4 = 4;
      v3 = v7;
    }
    else
    {
      if (!v8)
        goto LABEL_9;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_9:
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "abortSuplSession", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "abortSuplSession", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_24BABDBD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void gnss::GnssAdaptDevice::setSuplSessionStatusReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;
  char __str[966];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v8, (uint64_t)"setSuplSessionStatusReport");
    v4 = v9;
    if (v9 == v8)
    {
      v5 = 4;
      v4 = v8;
    }
    else
    {
      if (!v9)
        goto LABEL_9;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_9:
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setSuplSessionStatusReport", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setSuplSessionStatusReport", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_24BABDDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void gnss::GnssAdaptDevice::setSuplWlanMeasurementNeededReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;
  char __str[966];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v8, (uint64_t)"setSuplWlanMeasurementNeededReport");
    v4 = v9;
    if (v9 == v8)
    {
      v5 = 4;
      v4 = v8;
    }
    else
    {
      if (!v9)
        goto LABEL_9;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_9:
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setSuplWlanMeasurementNeededReport", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setSuplWlanMeasurementNeededReport", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_24BABDFB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void gnss::GnssAdaptDevice::setSuplWlanMeasurements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;
  char __str[966];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v8, (uint64_t)"setSuplWlanMeasurements");
    v4 = v9;
    if (v9 == v8)
    {
      v5 = 4;
      v4 = v8;
    }
    else
    {
      if (!v9)
        goto LABEL_9;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_9:
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setSuplWlanMeasurements", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setSuplWlanMeasurements", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_24BABE19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t NK_Check_Num_SV_Res(uint64_t result, int a2, unsigned int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10)
{
  uint64_t v10;
  _OWORD *v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  uint8x16_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint64_t v19;
  _OWORD *v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  uint8x16_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint64_t v28;
  _OWORD *v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  uint8x16_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  int v37;
  unsigned int v38;
  BOOL v39;
  BOOL v40;

  v10 = 0;
  v11 = (_OWORD *)(a7 + 312);
  v12 = 0uLL;
  v13 = 0uLL;
  v14 = 0uLL;
  v15 = 0uLL;
  do
  {
    v16 = (uint8x16_t)v11[v10];
    v17 = vmovl_u8(*(uint8x8_t *)v16.i8);
    v18 = vmovl_high_u8(v16);
    v15 = (int32x4_t)vaddw_high_u16((uint32x4_t)v15, v18);
    v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v18.i8);
    v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v17);
    v12 = (int32x4_t)vaddw_u16((uint32x4_t)v12, *(uint16x4_t *)v17.i8);
    ++v10;
  }
  while (v10 != 8);
  v19 = 0;
  *(_BYTE *)(a7 + 3) = vaddvq_s32(vaddq_s32(vaddq_s32(v12, v14), vaddq_s32(v13, v15)));
  v20 = (_OWORD *)(a10 + 312);
  v21 = 0uLL;
  v22 = 0uLL;
  v23 = 0uLL;
  v24 = 0uLL;
  do
  {
    v25 = (uint8x16_t)v20[v19];
    v26 = vmovl_u8(*(uint8x8_t *)v25.i8);
    v27 = vmovl_high_u8(v25);
    v24 = (int32x4_t)vaddw_high_u16((uint32x4_t)v24, v27);
    v23 = (int32x4_t)vaddw_u16((uint32x4_t)v23, *(uint16x4_t *)v27.i8);
    v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v26);
    v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v26.i8);
    ++v19;
  }
  while (v19 != 8);
  v28 = 0;
  *(_BYTE *)(a10 + 3) = vaddvq_s32(vaddq_s32(vaddq_s32(v21, v23), vaddq_s32(v22, v24)));
  v29 = (_OWORD *)(a8 + 312);
  v30 = 0uLL;
  v31 = 0uLL;
  v32 = 0uLL;
  v33 = 0uLL;
  do
  {
    v34 = (uint8x16_t)v29[v28];
    v35 = vmovl_u8(*(uint8x8_t *)v34.i8);
    v36 = vmovl_high_u8(v34);
    v33 = (int32x4_t)vaddw_high_u16((uint32x4_t)v33, v36);
    v32 = (int32x4_t)vaddw_u16((uint32x4_t)v32, *(uint16x4_t *)v36.i8);
    v31 = (int32x4_t)vaddw_high_u16((uint32x4_t)v31, v35);
    v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v35.i8);
    ++v28;
  }
  while (v28 != 8);
  LOBYTE(v37) = vaddvq_s32(vaddq_s32(vaddq_s32(v30, v32), vaddq_s32(v31, v33)));
  *(_BYTE *)(a8 + 3) = v37;
  v38 = *(unsigned __int8 *)(a7 + 3);
  if (v38 < a3 || v38 <= 2 && (a4 & 1) == 0 && (!(_DWORD)result || !a6 && a2))
  {
    *(_BYTE *)(a7 + 3) = 0;
    *v11 = 0u;
    *(_OWORD *)(a7 + 328) = 0u;
    *(_OWORD *)(a7 + 344) = 0u;
    *(_OWORD *)(a7 + 360) = 0u;
    *(_OWORD *)(a7 + 376) = 0u;
    *(_OWORD *)(a7 + 392) = 0u;
    *(_OWORD *)(a7 + 408) = 0u;
    *(_OWORD *)(a7 + 424) = 0u;
    v37 = *(unsigned __int8 *)(a8 + 3);
    if (v37 + *(unsigned __int8 *)(a10 + 3) < 3
      || (a9 <= 100000000.0 ? (v39 = a4 == 0) : (v39 = 1), !v39 ? (v40 = a5 <= 2) : (v40 = 1), v40))
    {
      LOBYTE(v37) = 0;
      *(_BYTE *)(a10 + 3) = 0;
      *v20 = 0uLL;
      *(_OWORD *)(a10 + 328) = 0uLL;
      *(_OWORD *)(a10 + 344) = 0uLL;
      *(_OWORD *)(a10 + 360) = 0uLL;
      *(_OWORD *)(a10 + 376) = 0uLL;
      *(_OWORD *)(a10 + 392) = 0uLL;
      *(_OWORD *)(a10 + 408) = 0uLL;
      *(_OWORD *)(a10 + 424) = 0uLL;
      *(_BYTE *)(a8 + 3) = 0;
      *v29 = 0uLL;
      *(_OWORD *)(a8 + 328) = 0uLL;
      *(_OWORD *)(a8 + 344) = 0uLL;
      *(_OWORD *)(a8 + 360) = 0uLL;
      *(_OWORD *)(a8 + 376) = 0uLL;
      *(_OWORD *)(a8 + 392) = 0uLL;
      *(_OWORD *)(a8 + 408) = 0uLL;
      *(_OWORD *)(a8 + 424) = 0uLL;
    }
  }
  if (a3 > (*(_BYTE *)(a10 + 3) + v37))
  {
    *(_BYTE *)(a10 + 3) = 0;
    *v20 = 0u;
    *(_OWORD *)(a10 + 328) = 0u;
    *(_OWORD *)(a10 + 344) = 0u;
    *(_OWORD *)(a10 + 360) = 0u;
    *(_OWORD *)(a10 + 376) = 0u;
    *(_OWORD *)(a10 + 392) = 0u;
    *(_OWORD *)(a10 + 408) = 0u;
    *(_OWORD *)(a10 + 424) = 0u;
    *(_BYTE *)(a8 + 3) = 0;
    *v29 = 0u;
    *(_OWORD *)(a8 + 328) = 0u;
    *(_OWORD *)(a8 + 344) = 0u;
    *(_OWORD *)(a8 + 360) = 0u;
    *(_OWORD *)(a8 + 376) = 0u;
    *(_OWORD *)(a8 + 392) = 0u;
    *(_OWORD *)(a8 + 408) = 0u;
    *(_OWORD *)(a8 + 424) = 0u;
  }
  return result;
}

uint64_t ARP_Calc(uint64_t result)
{
  unsigned int v1;
  double v2;
  float64x2_t v3;
  float64x2_t v4;

  if (*(char *)(result + 88) < 1)
  {
    v3 = (float64x2_t)vdupq_n_s64(0x416312D000000000uLL);
    v4 = v3;
  }
  else
  {
    v1 = *(unsigned __int8 *)(result + 88) - 1;
    if (v1 >= 9)
      v1 = 9;
    v2 = g_ARP_cBiasP_Table[v1 + 10];
    v3 = vmulq_n_f64(vsqrtq_f64(*(float64x2_t *)(result + 8)), v2);
    v4 = vmulq_n_f64(vsqrtq_f64(*(float64x2_t *)(result + 24)), v2);
  }
  *(float64x2_t *)(result + 40) = v3;
  *(float64x2_t *)(result + 56) = v4;
  return result;
}

uint64_t HSW_SetPEConfig(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  char __str[966];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = GN_GPS_Set_Config(a1);
  if ((v3 & 1) == 0 && g_LbsOsaTrace_Config >= 3)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: PE set config failed,%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 77, "HSW_SetPEConfig", a2);
    gnssOsa_PrintLog(__str, 3, 1, 0);
  }
  return v3;
}

void HSW_InitConfiguration(uint64_t a1)
{
  char DebugFeaturesBitmask;
  char v2;
  char v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  double PlatformCalibrationL5GroupDelayMeters;
  BOOL v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double *__p;
  double *v33;
  char __str[16];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)&qword_2579BA290 = 0u;
  *(_OWORD *)&qword_2579BA2A0 = 0u;
  g_HSWConfiguration = 0;
  dword_2579BA280 = 0;
  byte_2579BA284 = 1;
  *(_QWORD *)&byte_2579BA285 = 0;
  dword_2579BA28C = 0;
  qword_2579BA2B0 = 0x3E8000A000000F0;
  word_2579BA2B8 = 0;
  GN_GPS_Initialise(a1);
  LODWORD(g_HSWConfiguration) = 16843009;
  DebugFeaturesBitmask = Ga05_GetDebugFeaturesBitmask();
  LOBYTE(dword_2579BA280) = 1;
  BYTE1(dword_2579BA280) = DebugFeaturesBitmask & 1;
  v2 = Ga05_GetDebugFeaturesBitmask();
  BYTE6(g_HSWConfiguration) = 1;
  HIBYTE(g_HSWConfiguration) = (v2 & 2) != 0;
  WORD2(g_HSWConfiguration) = 257;
  v3 = Ga05_GetDebugFeaturesBitmask();
  BYTE2(dword_2579BA280) = 0;
  HIBYTE(dword_2579BA280) = (v3 & 4) != 0;
  v4 = *(_OWORD *)(qword_257A47BB0 + 16);
  *(_OWORD *)__str = *(_OWORD *)qword_257A47BB0;
  v35 = v4;
  v6 = *(_OWORD *)(qword_257A47BB0 + 48);
  v5 = *(_OWORD *)(qword_257A47BB0 + 64);
  v7 = *(_OWORD *)(qword_257A47BB0 + 32);
  v39 = *(_QWORD *)(qword_257A47BB0 + 80);
  v37 = v6;
  v38 = v5;
  v36 = v7;
  EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (uint64_t)__str);
  *(_DWORD *)__str = 1;
  BYTE2(v35) = 1;
  HIWORD(v35) = 200;
  LOBYTE(v39) = 1;
  HSW_SetPEConfig((uint64_t)__str, "HSW_InitializePEDefaultsConfig");
  HSW_SetPEConstelCfg();
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Setting Platform group delay\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 68, "HSW_SetPlatformGroupDelay");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  PlatformCalibrationL5GroupDelayMeters = Ga05_GetPlatformCalibrationL5GroupDelayMeters();
  v10 = GN_GPS_Set_Platform_Calibration_L5_Group_Delay(PlatformCalibrationL5GroupDelayMeters);
  v11 = g_LbsOsaTrace_Config < 2 || v10;
  if ((v11 & 1) == 0)
  {
    bzero(__str, 0x3C6uLL);
    v12 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: L5 GroupDelay set failed \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 87, "HSW_SetPlatformGroupDelay");
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  Ga05_GetPlatformCalibrationGlonassGroupDelayMeters();
  if (v33 == __p || (char *)v33 - (char *)__p != 112)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v16 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Glonass GroupDelay not set, data invalid\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 87, "HSW_SetPlatformGroupDelay");
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
  }
  else
  {
    v13 = GN_GPS_Set_Platform_Calibration_GLONASS_Group_Delays(__p);
    v14 = g_LbsOsaTrace_Config < 2 || v13;
    if ((v14 & 1) == 0)
    {
      bzero(__str, 0x3C6uLL);
      v15 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Glonass GroupDelay set failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNM", 87, "HSW_SetPlatformGroupDelay");
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
  }
  if (__p)
    operator delete(__p);
  v17 = *(_OWORD *)(qword_257A47BB0 + 16);
  *(_OWORD *)__str = *(_OWORD *)qword_257A47BB0;
  v35 = v17;
  v19 = *(_OWORD *)(qword_257A47BB0 + 48);
  v18 = *(_OWORD *)(qword_257A47BB0 + 64);
  v20 = *(_OWORD *)(qword_257A47BB0 + 32);
  v39 = *(_QWORD *)(qword_257A47BB0 + 80);
  v37 = v19;
  v38 = v18;
  v36 = v20;
  EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (uint64_t)__str);
  DWORD1(v36) = 0;
  if (g_LbsOsaTrace_Config == 1 && g_LbsOsaTrace_Config <= 5)
    DWORD1(v36) = g_LbsOsaTrace_Config;
  HSW_SetPEConfig((uint64_t)__str, "HSW_SetPELogCfg");
  HSW_SetRfBandCfg(1, 1);
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v21 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v22 = byte_2579BA286 ? 89 : 78;
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:SimulatedMode,%c\n", (unint64_t)v21, "GNM", 73, "HSW_InitConfiguration", v22);
    gnssOsa_PrintLog(__str, 4, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v23 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      v24 = 89;
      if (!byte_2579BA287)
        v24 = 78;
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:ExternalClock,%c\n", (unint64_t)v23, "GNM", 73, "HSW_InitConfiguration", v24);
      gnssOsa_PrintLog(__str, 4, 1, 0);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v25 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:EarliestGpsWkNo,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "GNM", 73, "HSW_InitConfiguration", (unsigned __int16)word_2579BA288);
        gnssOsa_PrintLog(__str, 4, 1, 0);
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          v26 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
          v27 = 89;
          if (!byte_2579BA284)
            v27 = 78;
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:L1_Enable,%c\n", (unint64_t)v26, "GNM", 73, "HSW_InitConfiguration", v27);
          gnssOsa_PrintLog(__str, 4, 1, 0);
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            v28 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            v29 = 89;
            if (!byte_2579BA284)
              v29 = 78;
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:L5_Enable,%c\n", (unint64_t)v28, "GNM", 73, "HSW_InitConfiguration", v29);
            gnssOsa_PrintLog(__str, 4, 1, 0);
            if (g_LbsOsaTrace_Config >= 4)
            {
              bzero(__str, 0x3C6uLL);
              v30 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:v_SWBuildGPSWeekNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "GNM", 73, "HSW_InitConfiguration", (unsigned __int16)word_2579BA28A);
              gnssOsa_PrintLog(__str, 4, 1, 0);
              if (g_LbsOsaTrace_Config >= 4)
              {
                bzero(__str, 0x3C6uLL);
                v31 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:EarliestGpsWkNo,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNM", 73, "HSW_InitConfiguration", (unsigned __int16)word_2579BA288);
                gnssOsa_PrintLog(__str, 4, 1, 0);
              }
            }
          }
        }
      }
    }
  }
}

void sub_24BABED54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t HSW_SetPEConstelCfg(void)
{
  __int128 v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  char __str[966];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v0 = *(_OWORD *)(qword_257A47BB0 + 16);
  v25 = *(_OWORD *)qword_257A47BB0;
  v26 = v0;
  v2 = *(_OWORD *)(qword_257A47BB0 + 48);
  v1 = *(_OWORD *)(qword_257A47BB0 + 64);
  v3 = *(_OWORD *)(qword_257A47BB0 + 32);
  v30 = *(_QWORD *)(qword_257A47BB0 + 80);
  v28 = v2;
  v29 = v1;
  v27 = v3;
  EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (uint64_t)&v25);
  BYTE11(v25) = BYTE1(g_HSWConfiguration);
  BYTE4(v25) = g_HSWConfiguration;
  BYTE12(v25) = BYTE3(g_HSWConfiguration);
  BYTE5(v25) = BYTE2(g_HSWConfiguration);
  HIBYTE(v25) = BYTE1(dword_2579BA280);
  BYTE8(v25) = dword_2579BA280;
  LOBYTE(v26) = HIBYTE(g_HSWConfiguration);
  BYTE9(v25) = BYTE6(g_HSWConfiguration);
  BYTE13(v25) = BYTE5(g_HSWConfiguration);
  BYTE6(v25) = BYTE4(g_HSWConfiguration);
  BYTE1(v26) = HIBYTE(dword_2579BA280);
  BYTE10(v25) = BYTE2(dword_2579BA280);
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:Constel Constellation  Search\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "HSW_SetPEConstelCfg");
    gnssOsa_PrintLog(__str, 4, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v5 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      v6 = BYTE1(g_HSWConfiguration) ? 89 : 78;
      v7 = (_BYTE)g_HSWConfiguration ? 89 : 78;
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:GPS          %c          %c\n", (unint64_t)v5, "GNM", 73, "HSW_SetPEConstelCfg", v7, v6);
      gnssOsa_PrintLog(__str, 4, 1, 0);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v8 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        v9 = 89;
        if (BYTE3(g_HSWConfiguration))
          v10 = 89;
        else
          v10 = 78;
        if (!BYTE2(g_HSWConfiguration))
          v9 = 78;
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:GLON         %c          %c\n", (unint64_t)v8, "GNM", 73, "HSW_SetPEConstelCfg", v9, v10);
        gnssOsa_PrintLog(__str, 4, 1, 0);
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          v11 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
          v12 = 89;
          if (BYTE5(g_HSWConfiguration))
            v13 = 89;
          else
            v13 = 78;
          if (!BYTE4(g_HSWConfiguration))
            v12 = 78;
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:QZSS         %c          %c\n", (unint64_t)v11, "GNM", 73, "HSW_SetPEConstelCfg", v12, v13);
          gnssOsa_PrintLog(__str, 4, 1, 0);
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            v14 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            v15 = 89;
            if (HIBYTE(g_HSWConfiguration))
              v16 = 89;
            else
              v16 = 78;
            if (!BYTE6(g_HSWConfiguration))
              v15 = 78;
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:GAL          %c          %c\n", (unint64_t)v14, "GNM", 73, "HSW_SetPEConstelCfg", v15, v16);
            gnssOsa_PrintLog(__str, 4, 1, 0);
            if (g_LbsOsaTrace_Config >= 4)
            {
              bzero(__str, 0x3C6uLL);
              v17 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
              v18 = 89;
              if (BYTE1(dword_2579BA280))
                v19 = 89;
              else
                v19 = 78;
              if (!(_BYTE)dword_2579BA280)
                v18 = 78;
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:BDS          %c          %c\n", (unint64_t)v17, "GNM", 73, "HSW_SetPEConstelCfg", v18, v19);
              gnssOsa_PrintLog(__str, 4, 1, 0);
              if (g_LbsOsaTrace_Config >= 4)
              {
                bzero(__str, 0x3C6uLL);
                v20 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
                v21 = 89;
                if (HIBYTE(dword_2579BA280))
                  v22 = 89;
                else
                  v22 = 78;
                if (!BYTE2(dword_2579BA280))
                  v21 = 78;
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:NVC          %c          %c\n", (unint64_t)v20, "GNM", 73, "HSW_SetPEConstelCfg", v21, v22);
                gnssOsa_PrintLog(__str, 4, 1, 0);
              }
            }
          }
        }
      }
    }
  }
  return HSW_SetPEConfig((uint64_t)&v25, "HSW_SetPEConstelCfg");
}

uint64_t HSW_SetRfBandCfg(char a1, int a2)
{
  double v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char __str[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if ((Ga05_GetDebugFeaturesBitmask() & 0x200) == 0)
  {
    if (g_LbsOsaTrace_Config <= 3)
    {
      byte_2579BA284 = a1;
      byte_2579BA285 = 1;
      goto LABEL_14;
    }
    bzero(__str, 0x3C6uLL);
    v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v5 = 78;
    if (a2)
      v5 = 89;
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: L5 disable not allowed, GPSD - EnableL5,%c\n", (unint64_t)v4, "GNM", 73, "HSW_SetRfBandCfg", v5);
    LOBYTE(a2) = 1;
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  byte_2579BA284 = a1;
  byte_2579BA285 = a2;
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v7 = 89;
    if (!byte_2579BA284)
      v7 = 78;
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:L1_Enable,%c\n", (unint64_t)v6, "GNM", 73, "HSW_SetRfBandCfg", v7);
    gnssOsa_PrintLog(__str, 4, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v8 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      v9 = 89;
      if (!byte_2579BA285)
        v9 = 78;
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:L5_Enable,%c\n", (unint64_t)v8, "GNM", 73, "HSW_SetRfBandCfg", v9);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
LABEL_14:
  v10 = *(_OWORD *)(qword_257A47BB0 + 16);
  *(_OWORD *)__str = *(_OWORD *)qword_257A47BB0;
  v16 = v10;
  v12 = *(_OWORD *)(qword_257A47BB0 + 48);
  v11 = *(_OWORD *)(qword_257A47BB0 + 64);
  v13 = *(_OWORD *)(qword_257A47BB0 + 32);
  v20 = *(_QWORD *)(qword_257A47BB0 + 80);
  v18 = v12;
  v19 = v11;
  v17 = v13;
  EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (uint64_t)__str);
  *(_WORD *)((char *)&v16 + 9) = *(_WORD *)&byte_2579BA284 ^ 1;
  return HSW_SetPEConfig((uint64_t)__str, "HSW_SetRfBandCfg");
}

uint64_t HSW_SetSimulatorModeCfg(int a1, __int16 a2, char a3)
{
  double v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char __str[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  byte_2579BA286 = a1;
  byte_2579BA287 = a3;
  if (a1)
    word_2579BA288 = a2;
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v3 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v4 = 89;
    if (!byte_2579BA286)
      v4 = 78;
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:SimulatedMode,%c\n", (unint64_t)v3, "GNM", 73, "HSW_SetSimulatorModeCfg", v4);
    gnssOsa_PrintLog(__str, 4, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v5 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      v6 = 89;
      if (!byte_2579BA287)
        v6 = 78;
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:ExternalClock,%c\n", (unint64_t)v5, "GNM", 73, "HSW_SetSimulatorModeCfg", v6);
      gnssOsa_PrintLog(__str, 4, 1, 0);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:EarliestGpsWkNo,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "HSW_SetSimulatorModeCfg", (unsigned __int16)word_2579BA288);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
    }
  }
  v8 = *(_OWORD *)(qword_257A47BB0 + 16);
  *(_OWORD *)__str = *(_OWORD *)qword_257A47BB0;
  v14 = v8;
  v10 = *(_OWORD *)(qword_257A47BB0 + 48);
  v9 = *(_OWORD *)(qword_257A47BB0 + 64);
  v11 = *(_OWORD *)(qword_257A47BB0 + 32);
  v18 = *(_QWORD *)(qword_257A47BB0 + 80);
  v16 = v10;
  v17 = v9;
  v15 = v11;
  EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (uint64_t)__str);
  BYTE11(v14) = byte_2579BA286;
  WORD5(v15) = word_2579BA288;
  return HSW_SetPEConfig((uint64_t)__str, "HSW_SetSimulatorModeCfg");
}

uint64_t HSW_SetConstellationCfg(char a1)
{
  char v2;
  char v3;
  unsigned int v4;
  char v5;
  unsigned int v6;
  char v7;

  if ((a1 & 4) == 0)
  {
    v2 = 0;
    v3 = 0;
    if ((a1 & 8) != 0)
      goto LABEL_3;
LABEL_6:
    v5 = 0;
    LOBYTE(v4) = 0;
    if ((a1 & 0x20) != 0)
      goto LABEL_4;
LABEL_7:
    v7 = 0;
    LOBYTE(v6) = 0;
    goto LABEL_8;
  }
  v3 = Ga05_GetDebugFeaturesBitmask() & 1;
  v2 = 1;
  if ((a1 & 8) == 0)
    goto LABEL_6;
LABEL_3:
  v4 = (Ga05_GetDebugFeaturesBitmask() >> 1) & 1;
  v5 = 1;
  if ((a1 & 0x20) == 0)
    goto LABEL_7;
LABEL_4:
  v6 = (Ga05_GetDebugFeaturesBitmask() >> 2) & 1;
  v7 = 1;
LABEL_8:
  LOBYTE(g_HSWConfiguration) = a1 & 1;
  BYTE1(g_HSWConfiguration) = a1 & 1;
  BYTE2(g_HSWConfiguration) = (a1 & 2) != 0;
  BYTE3(g_HSWConfiguration) = (a1 & 2) != 0;
  BYTE4(g_HSWConfiguration) = (a1 & 0x10) != 0;
  BYTE5(g_HSWConfiguration) = (a1 & 0x10) != 0;
  BYTE6(g_HSWConfiguration) = v5;
  HIBYTE(g_HSWConfiguration) = v4;
  LOBYTE(dword_2579BA280) = v2;
  BYTE1(dword_2579BA280) = v3;
  BYTE2(dword_2579BA280) = v7;
  HIBYTE(dword_2579BA280) = v6;
  return HSW_SetPEConstelCfg();
}

uint64_t HSW_SetSWBuildGPSWKNum(__int16 a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char __str[16];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if ((Ga05_GetDebugFeaturesBitmask() & 0x100) != 0)
  {
    word_2579BA28A = 2049;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:SWBuildGPSWeekNum (default override),%u\n");
      goto LABEL_6;
    }
  }
  else
  {
    word_2579BA28A = a1;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:SWBuildGPSWeekNum,%u\n");
LABEL_6:
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  v2 = *(_OWORD *)(qword_257A47BB0 + 16);
  *(_OWORD *)__str = *(_OWORD *)qword_257A47BB0;
  v8 = v2;
  v4 = *(_OWORD *)(qword_257A47BB0 + 48);
  v3 = *(_OWORD *)(qword_257A47BB0 + 64);
  v5 = *(_OWORD *)(qword_257A47BB0 + 32);
  v12 = *(_QWORD *)(qword_257A47BB0 + 80);
  v10 = v4;
  v11 = v3;
  v9 = v5;
  EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (uint64_t)__str);
  WORD6(v9) = word_2579BA28A;
  WORD5(v9) = word_2579BA28A;
  return HSW_SetPEConfig((uint64_t)__str, "HSW_SetSWBuildGPSWKNum");
}

uint64_t HSW_SetCrossCorrelationCfg(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  double v7[4];
  char __str[966];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  qword_2579BA290 = *(_QWORD *)&a1;
  *(double *)algn_2579BA298 = a2;
  qword_2579BA2A0 = *(_QWORD *)&a3;
  unk_2579BA2A8 = *(_QWORD *)&a4;
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a4;
  v4 = GN_GPS_Set_CrossCorr_Params(v7);
  if ((v4 & 1) == 0 && g_LbsOsaTrace_Config >= 3)
  {
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: PE SetCrossCorr failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 77, "HSW_SetCrossCorrelationCfg");
    gnssOsa_PrintLog(__str, 3, 1, 0);
  }
  return v4;
}

uint64_t HSW_SetEarliestGPSWKNum(__int16 a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  char __str[966];
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  word_2579BA288 = a1;
  v1 = *(_OWORD *)(qword_257A47BB0 + 16);
  v8[0] = *(_OWORD *)qword_257A47BB0;
  v8[1] = v1;
  v3 = *(_OWORD *)(qword_257A47BB0 + 48);
  v2 = *(_OWORD *)(qword_257A47BB0 + 64);
  v4 = *(_OWORD *)(qword_257A47BB0 + 32);
  v12 = *(_QWORD *)(qword_257A47BB0 + 80);
  v10 = v3;
  v11 = v2;
  v9 = v4;
  EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (uint64_t)v8);
  WORD5(v9) = word_2579BA288;
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:EarliestGpsWkNo,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "HSW_SetEarliestGPSWKNum", (unsigned __int16)word_2579BA288);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  return HSW_SetPEConfig((uint64_t)v8, "HSW_SetEarliestGPSWKNum");
}

unint64_t HSW_GetSleepTimeout(void)
{
  if ((Ga05_GetDebugFeaturesBitmask() & 0x40) != 0)
    return Get_TestConfigurationSleepTimeoutSeconds();
  else
    return (unsigned __int16)qword_2579BA2B0;
}

void HSW_SetFixInterval(unsigned int a1)
{
  unsigned int v1;
  uint64_t v2;
  char __str[966];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if (a1 <= 0x64)
    v1 = 100;
  else
    v1 = a1;
  if (HIWORD(qword_2579BA2B0) != v1 && GN_GPS_Set_FixInterval(v1))
  {
    HIWORD(qword_2579BA2B0) = v1;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: MEUpdtInt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "HSW_SetFixInterval", v1);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
}

void Gnm31_04SendClearNv(int a1)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  char __str[966];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = gnssOsa_Calloc("Gnm31_04SendClearNv", 471, 1, 0x10uLL);
  if (v2)
  {
    v3 = v2;
    *((_DWORD *)v2 + 3) = a1;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_CLEAR_GNSS_REQ =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm31_04SendClearNv");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(128, 132, 8391168, v3);
  }
}

uint64_t GM_Get_Best_ASSS(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4;
  int v6;
  _WORD *v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;

  v4 = (a4 - 1);
  if (a4 - 1 < 0)
    return 0xFFFFFFFFLL;
  v6 = 0;
  v7 = (_WORD *)(a1 + 36 * v4 + 8);
  v8 = (_BYTE *)(a2 + 48 * v4 + 12);
  v9 = 0xFFFFFFFFLL;
  do
  {
    if (Is_Legal(*((_DWORD *)v7 - 2)))
    {
      v10 = *((unsigned __int8 *)v7 - 4);
      if (v10 >= a3 && (*v7 & 0x308) == 0x208)
      {
        if (*(v8 - 8))
        {
          if (*v8)
            v11 = 70;
          else
            v11 = 64;
          v10 += v11;
          if (v8[3])
            v10 += 128;
        }
        if ((int)v10 <= v6)
        {
          v9 = v9;
        }
        else
        {
          v6 = v10;
          v9 = v4;
        }
      }
    }
    v7 -= 18;
    v8 -= 48;
  }
  while (v4-- > 0);
  return v9;
}

uint64_t SV_Gen_Meas(uint64_t a1, char *__dst, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  void *v14;
  char *v15;
  char *v16;
  int UTC_Cor;
  double v18;
  double v19;
  int v20;
  int v21;
  int v22;
  _BYTE *v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *GNSS_SV_Str;
  _WORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _WORD *v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  _WORD *v39;
  int v40;
  BOOL v41;
  unsigned __int8 v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int *v49;
  int v50;
  char *v51;
  uint64_t v52;
  char *v53;
  double v54;
  __int16 v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  BOOL v63;
  int v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  char *v69;
  unsigned int v70;
  char *v71;
  double v72;
  double v73;
  double v74;
  double v75;
  int v76;
  uint64_t v77;
  _WORD *v78;
  int v79;
  BOOL v80;
  signed int v81;
  int v82;
  __int16 v83;
  unsigned __int16 v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int Min_SNR;
  char *v89;
  uint64_t i;
  char *v91;
  int v92;
  __int16 v93;
  unint64_t v94;
  int v95;
  BOOL v96;
  char *v97;
  int v98;
  double v99;
  double v100;
  double v101;
  char *v102;
  int v103;
  char *v104;
  int v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  _WORD *v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  double v114;
  int v115;
  int v116;
  double v117;
  double v118;
  int v119;
  int v120;
  _BOOL4 v121;
  int v122;
  int v123;
  unsigned __int8 *v124;
  unsigned int v125;
  char *v126;
  unsigned __int8 v127;
  int v128;
  int v129;
  double v130;
  int v131;
  unsigned int v132;
  __int16 v133;
  __int16 v134;
  __int16 v135;
  double v136;
  double v137;
  int v138;
  double *v139;
  double v140;
  double v141;
  double v142;
  int v143;
  unsigned int v144;
  BOOL v145;
  char v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int16 v153;
  int v154;
  int v155;
  int v156;
  double v157;
  double v158;
  int v159;
  int v160;
  __int16 v161;
  int v162;
  char Pos_LLH;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  double v173;
  uint64_t v174;
  char *v175;
  int *v176;
  int v177;
  int v178;
  uint64_t v179;
  int *v180;
  int v181;
  int v182;
  int v183;
  unint64_t v184;
  unsigned int v185;
  int v186;
  int v187;
  unsigned int v188;
  BOOL v189;
  int v190;
  unsigned int v191;
  BOOL v192;
  char *v194;
  int *v195;
  int v196;
  _BOOL4 v197;
  double v198;
  double *v199;
  double v200;
  double v201;
  int v202;
  unint64_t v203;
  double v204;
  int v205;
  unsigned int v206;
  int v207;
  int v208;
  BOOL v209;
  char *v210;
  char *v212;
  int v213;
  int v214;
  int v215;
  uint64_t v217;
  double v218;
  double *v219;
  int SV_Carrier_Freq_I4;
  double v221;
  int v222;
  int *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  _BOOL4 v232;
  int v233;
  double v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  int v244;
  int v245;
  uint64_t v246;
  __int16 v247;
  double v248;
  uint64_t v249;
  unsigned __int8 v250;
  int v251;
  unsigned __int8 *v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  char v258;
  _BYTE *v259;
  _WORD *v260;
  _BYTE *v261;
  _WORD *v262;
  uint64_t v263;
  unint64_t v264;
  __int128 v265;
  uint64_t v266;
  int v267;
  uint64_t result;
  BOOL v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  int v273;
  unsigned int v274;
  unsigned int v275;
  uint64_t v276;
  _BOOL4 v277;
  void *v278;
  void *v279;
  void *v280;
  void *__src;
  int *v282;
  char *v283;
  int v284;
  unsigned __int8 v285;
  __int16 *v286;
  char v287;
  char *v288;
  unsigned int Best_NSSS;
  double *v291;
  unsigned int v292;
  uint64_t v293;
  int v294;
  char *v295;
  double *v296;
  int v297;
  char *v298;
  int v299;
  __int16 *v300;
  int v301;
  __int16 *v302;
  int v304;
  int v305;
  char v306;
  uint64_t v307;
  _BOOL4 v308;
  _BOOL4 v309;
  _BOOL4 v310;
  uint64_t v311;
  int *v314;
  char v315;
  unsigned __int8 v316;
  int v317;
  int v318;
  int v319;
  unsigned __int8 *v320;
  int v322;
  int v323;
  uint64_t v325;
  double v326;
  int v327;
  __int16 v328;
  int v329;
  uint64_t v330;
  double v331[3];
  _OWORD v332[8];
  _OWORD v333[8];
  uint64_t v334;

  v11 = a8;
  v14 = __dst;
  v334 = *MEMORY[0x24BDAC8D0];
  v320 = (unsigned __int8 *)(__dst + 17932);
  v15 = __dst + 11780;
  v283 = __dst + 4653;
  v16 = (char *)(a5 + 11816);
  v330 = 0;
  v329 = 0;
  v295 = __dst + 11780;
  if (!*(_BYTE *)(a5 + 11816))
  {
    *(_QWORD *)&v333[0] = 0;
    UTC_Cor = API_Get_UTC_Cor(1, (double *)v333);
    v18 = -0.5;
    if (*(double *)v333 > 0.0)
      v18 = 0.5;
    v19 = *(double *)v333 + v18;
    if (v19 <= 2147483650.0)
    {
      if (v19 >= -2147483650.0)
        v20 = (int)v19;
      else
        LOBYTE(v20) = 0;
    }
    else
    {
      LOBYTE(v20) = -1;
    }
    v14 = __dst;
    if (UTC_Cor)
    {
      v21 = v16[1];
      v22 = (char)v20 - v21;
      if ((char)v20 != v21)
      {
        v23 = (_BYTE *)(a5 + 7208);
        v24 = (double)v22 * 1023000.0;
        v25 = -0.5;
        if (v24 > 0.0)
          v25 = 0.5;
        v26 = v24 + v25;
        v315 = v20;
        if (v26 <= 2147483650.0)
        {
          if (v26 >= -2147483650.0)
            v27 = (int)v26;
          else
            v27 = 0x80000000;
        }
        else
        {
          v27 = 0x7FFFFFFFLL;
        }
        v28 = 0;
        v29 = a5 + 40;
        do
        {
          if (*v23 == 2 && (*(_DWORD *)v29 || *(_DWORD *)(v29 + 4) || *(_WORD *)(v29 + 8)))
          {
            Inc_CA_Chips(v27, (int *)(v29 + 4), (int *)v29);
            GNSS_SV_Str = Get_GNSS_SV_Str(*(unsigned int *)v23);
            EvLog_v("SV_Gen_Meas: Adj GLO ZC&CP  %d  %s  dUTC %3d  Chip_Inc %6d", v28, GNSS_SV_Str, v22, (int)v27 / 1000);
            v14 = __dst;
          }
          ++v28;
          v29 += 56;
          v23 += 36;
        }
        while (v28 != 128);
        v16[1] = v315;
        v15 = v295;
        v11 = a8;
      }
      *v16 = 1;
    }
  }
  v304 = *(_DWORD *)a5;
  v297 = *(_DWORD *)(a5 + 4);
  v293 = *(_QWORD *)(a5 + 8);
  memcpy(v14, (const void *)(a5 + 7208), 0x1200uLL);
  v288 = __dst + 4608;
  memcpy(__dst + 4608, (const void *)(a5 + 40), 0x1C00uLL);
  v15[3] = *v16;
  *((_DWORD *)__dst + 2944) = *(_DWORD *)(a5 + 27);
  *v15 = *(_BYTE *)(a5 + 31);
  *(_WORD *)(v15 + 1) = *(_WORD *)(a5 + 32);
  v31 = __dst + 8;
  v32 = 128;
  do
  {
    if (*((_BYTE *)v31 - 8) == 2)
    {
      v33 = *(_DWORD *)(v11 + 4 * *((char *)v31 - 5) + 17452);
      if (v33 == 2139062143)
      {
        *((_BYTE *)v31 - 6) = 0;
        if ((*v31 & 0x200) != 0)
          *v31 &= 0xFCFFu;
      }
      else
      {
        *((_BYTE *)v31 - 6) = v33;
      }
    }
    v31 += 18;
    --v32;
  }
  while (v32);
  memset(v332, 0, sizeof(v332));
  if (*(_BYTE *)(a6 + 43))
  {
    v34 = 0;
    v35 = __dst + 8;
    do
    {
      v36 = *((_DWORD *)v35 - 2);
      if (Is_Legal(v36))
      {
        v37 = BYTE1(v36) > 0xFu || ((1 << SBYTE1(v36)) & 0xE6CC) == 0;
        if (v37 && (*v35 & 8) != 0)
        {
          *v35 &= ~8u;
          *((_BYTE *)v332 + v34) = 1;
        }
      }
      ++v34;
      v35 += 18;
    }
    while (v34 != 128);
  }
  if (!*(_BYTE *)(a6 + 44))
  {
    v77 = 0;
    v78 = __dst + 8;
    do
    {
      v79 = *((_DWORD *)v78 - 2);
      if (Is_Legal(v79))
      {
        v80 = BYTE1(v79) > 0xFu || ((1 << SBYTE1(v79)) & 0xDD77) == 0;
        if (v80 && (*v78 & 8) != 0)
        {
          *v78 &= ~8u;
          *((_BYTE *)v332 + v77) = 1;
        }
      }
      ++v77;
      v78 += 18;
    }
    while (v77 != 128);
  }
  v38 = 0;
  v39 = __dst + 8;
  do
  {
    v40 = *((_DWORD *)v39 - 2);
    if (Is_Legal(v40))
      v41 = v40 == 4;
    else
      v41 = 0;
    if (v41 && BYTE2(v40) - 59 <= 0xFFFFFFCA && (*v39 & 8) != 0)
    {
      *v39 &= ~8u;
      *((_BYTE *)v332 + v38) = 1;
    }
    ++v38;
    v39 += 18;
  }
  while (v38 != 128);
  v42 = 0;
  v43 = (unsigned __int8 *)(__dst + 4);
  v44 = 128;
  do
  {
    if (Is_Legal(*((_DWORD *)v43 - 1)) && (*((_WORD *)v43 + 2) & 8) != 0 && *v43 > v42)
      v42 = *v43;
    v43 += 36;
    --v44;
  }
  while (v44);
  GM_CA_Jammer_Protection(0, *(_DWORD *)a5, (uint64_t)v288, (uint64_t)__dst, (uint64_t)v332, a11);
  GM_CA_Jammer_Protection(4u, *(_DWORD *)a5, (uint64_t)v288, (uint64_t)__dst, (uint64_t)v332, a11);
  GM_CA_Jammer_Protection(3u, *(_DWORD *)a5, (uint64_t)v288, (uint64_t)__dst, (uint64_t)v332, a11);
  v285 = v42;
  if (v42 > 0x1Du)
  {
    v45 = 0;
    v46 = (v42 - 21);
    v47 = (v42 - 24);
    v48 = a5 + 40;
    v49 = (int *)__dst;
    do
    {
      v50 = *v49;
      if (!Is_Legal(*v49)
        || (v49[2] & 8) == 0
        || *((_BYTE *)v332 + v45)
        || *((unsigned __int8 *)v49 + 4) >= v46)
      {
        goto LABEL_79;
      }
      switch(v50)
      {
        case 5u:
          goto LABEL_71;
        case 4u:
          goto LABEL_73;
        case 1u:
LABEL_71:
          if (BYTE1(v50))
          {
            if (v50 == 4)
            {
LABEL_73:
              if (BYTE1(v50) != 12
                || BYTE2(v50) - 6 > 0x34
                || !GM_CrossCorr_Protection(4, v47, (uint64_t)v49, v48, a7))
              {
                break;
              }
LABEL_78:
              *((_BYTE *)v332 + v45) = 1;
              v51 = Get_GNSS_SV_Str(*v49);
              EvVrb_v("SV_Gen_Meas: Cross-Corr, Rej !  %d  %s  SNR %d  Thr %d %d", v45, v51, *((unsigned __int8 *)v49 + 4), v46, v47);
            }
          }
          else if ((GM_CrossCorr_Protection(7, v47, (uint64_t)v49, v48, a7) & 1) != 0)
          {
            goto LABEL_78;
          }
          break;
      }
LABEL_79:
      ++v45;
      v49 += 9;
      v48 += 56;
    }
    while (v45 != 128);
  }
  *((_DWORD *)v295 + 1537) = *(_DWORD *)a9;
  v320[52] = *(_BYTE *)(a9 + 4);
  *v320 = *(_BYTE *)(a9 + 16);
  v52 = *(_QWORD *)(a9 + 20);
  v53 = __dst;
  *((_QWORD *)__dst + 2246) = v52;
  *((_QWORD *)__dst + 2247) = *(_QWORD *)(a9 + 8);
  *((_WORD *)v320 + 1) = *(_WORD *)(a9 + 28);
  v300 = (__int16 *)(v320 + 2);
  v296 = (double *)(__dst + 17936);
  *((_QWORD *)__dst + 2242) = *(_QWORD *)(a9 + 32);
  v54 = *(double *)(a9 + 40);
  *((_DWORD *)v320 + 3) = *(_DWORD *)(a9 + 68);
  v55 = *(_WORD *)(a9 + 74);
  *((_WORD *)v320 + 10) = *(_WORD *)(a9 + 76);
  *((_WORD *)v320 + 8) = v55;
  v286 = (__int16 *)(v320 + 20);
  v320[18] = *(_BYTE *)(a9 + 72);
  v291 = (double *)(__dst + 17960);
  *((_QWORD *)__dst + 2245) = *(_QWORD *)(a9 + 80);
  *((double *)__dst + 2249) = v54 + *(double *)(a9 + 48) * ((double)(v304 - (int)v52) * 0.001);
  v56 = -6144;
  do
  {
    v57 = &__dst[v56 + 17928];
    *(_OWORD *)(v57 + 30) = 0uLL;
    *(_OWORD *)v57 = 0uLL;
    *((_OWORD *)v57 + 1) = 0uLL;
    v56 += 48;
  }
  while (v56);
  v58 = 0;
  v59 = 0;
  v316 = 0;
  v60 = 11799;
  v61 = 11784;
  do
  {
    v62 = v53[v58];
    if (v53[v58])
      v63 = v62 == 7;
    else
      v63 = 1;
    if (!v63)
    {
      if (v53[v58 + 2])
      {
        v64 = GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)&v53[v58]);
        if ((*(char *)(a7 + v64 + 5976) & 0x80000000) == 0)
        {
          v65 = &v53[v61];
          v66 = a7 + 48 * *(unsigned __int8 *)(a7 + v64 + 5976);
          v67 = *(_OWORD *)(v66 + 72);
          v68 = *(_OWORD *)(v66 + 104);
          *((_OWORD *)v65 + 1) = *(_OWORD *)(v66 + 88);
          *((_OWORD *)v65 + 2) = v68;
          *(_OWORD *)v65 = v67;
          if (v53[v60 - 11])
            v316 |= v53[v60] != 0;
        }
        v69 = &v53[v58];
        if ((*(_WORD *)&v53[v58 + 8] & 0x200) != 0)
        {
          v70 = v69[1];
          if (v70 <= 0xF && ((1 << v70) & 0xDD77) != 0)
          {
            if (!*(_BYTE *)(a8 + v64 + 50616) || *(_BYTE *)(a6 + v64 + 249))
              goto LABEL_99;
          }
          else if (!*(_BYTE *)(a8 + v64 + 50834) || *(_BYTE *)(a6 + v64 + 528))
          {
LABEL_99:
            *((_WORD *)v69 + 4) = *(_WORD *)&v53[v58 + 8] & 0xFCFF;
          }
        }
      }
      else if (v62 != 2)
      {
        EvCrt_v("SV_Gen_Meas:  %d  SVid zero for non-GLONASS constelation %d ", v59, v62);
        v53 = __dst;
      }
    }
    ++v59;
    v58 += 36;
    v60 += 48;
    v61 += 48;
  }
  while (v59 != 128);
  *(_OWORD *)(v53 + 18484) = 0u;
  *(_OWORD *)(v53 + 18500) = 0u;
  *(_OWORD *)(v53 + 18452) = 0u;
  *(_OWORD *)(v53 + 18468) = 0u;
  *(_OWORD *)(v53 + 18420) = 0u;
  *(_OWORD *)(v53 + 18436) = 0u;
  *(_OWORD *)(v53 + 18388) = 0u;
  *(_OWORD *)(v53 + 18404) = 0u;
  *(_OWORD *)(v53 + 18356) = 0u;
  *(_OWORD *)(v53 + 18372) = 0u;
  *(_OWORD *)(v53 + 18324) = 0u;
  *(_OWORD *)(v53 + 18340) = 0u;
  *(_OWORD *)(v53 + 18292) = 0u;
  *(_OWORD *)(v53 + 18308) = 0u;
  *(_OWORD *)(v53 + 18260) = 0u;
  *(_OWORD *)(v53 + 18276) = 0u;
  *(_OWORD *)(v53 + 18228) = 0u;
  *(_OWORD *)(v53 + 18244) = 0u;
  *(_OWORD *)(v53 + 18196) = 0u;
  *(_OWORD *)(v53 + 18212) = 0u;
  *(_OWORD *)(v53 + 18164) = 0u;
  *(_OWORD *)(v53 + 18180) = 0u;
  *(_OWORD *)(v53 + 18132) = 0u;
  *(_OWORD *)(v53 + 18148) = 0u;
  *(_OWORD *)(v53 + 18100) = 0u;
  *(_OWORD *)(v53 + 18116) = 0u;
  *(_OWORD *)(v53 + 18068) = 0u;
  *(_OWORD *)(v53 + 18084) = 0u;
  *(_OWORD *)(v53 + 18036) = 0u;
  *(_OWORD *)(v53 + 18052) = 0u;
  *(_OWORD *)(v53 + 18004) = 0u;
  *(_OWORD *)(v53 + 18020) = 0u;
  __src = v53 + 18520;
  v282 = (int *)(v53 + 18004);
  bzero(v53 + 18520, 0x1000uLL);
  GM_Inc_Local_Time(v304, (uint64_t)__dst);
  v71 = __dst;
  *((_DWORD *)v320 + 10) = v297;
  *((_QWORD *)__dst + 2247) = v293;
  v72 = *((double *)__dst + 2249);
  if (fabs(v72) > 0.0005001)
    *(_BYTE *)(a1 + 4) = 1;
  if (*v320 && *(_BYTE *)(a1 + 4))
  {
    v73 = v72 * 1000.0;
    v74 = -0.5;
    if (v73 > 0.0)
      v74 = 0.5;
    v75 = v73 + v74;
    if (v75 <= 2147483650.0)
    {
      if (v75 >= -2147483650.0)
        v76 = (int)v75;
      else
        v76 = 0x80000000;
    }
    else
    {
      v76 = 0x7FFFFFFF;
    }
    Inc_Local_Time(-v76, 86400, v291, v286);
    v81 = *((__int16 *)v320 + 10);
    v82 = *((unsigned __int16 *)v320 + 8);
    if (v81 >= 1462)
    {
      if (v81 >= 2922)
        v83 = 2922;
      else
        v83 = *((_WORD *)v320 + 10);
      v84 = v81 - v83 + 1460;
      v81 = v81 - 1461 * (v84 / 0x5B5u) - 1461;
      v82 += v84 / 0x5B5u + 1;
      *((_WORD *)v320 + 10) = v81;
      *((_WORD *)v320 + 8) = v82;
    }
    if ((__int16)v81 <= 0)
    {
      if ((__int16)v81 <= -1460)
        v133 = -1460;
      else
        v133 = v81;
      v134 = (unsigned __int16)(v133 - v81 - ((__int16)v81 < -1460)) / 0x5B5u;
      if ((__int16)v81 < -1460)
        ++v134;
      v135 = v82 + ~v134;
      *((_WORD *)v320 + 10) = v81 + 1461 * v134 + 1461;
      *((_WORD *)v320 + 8) = v135;
      if (v135 < 0)
        goto LABEL_211;
    }
    else
    {
      if ((v82 & 0x8000) == 0)
        goto LABEL_134;
LABEL_211:
      *((_WORD *)v320 + 8) = 0;
    }
LABEL_134:
    GM_Apply_LT_Slew((double *)__dst + 2249, v300, v296, (_WORD *)(a1 + 4));
    v71 = __dst;
    if (*(_BYTE *)(a1 + 5))
    {
      v85 = *(__int16 *)(a1 + 6);
      if (*(_WORD *)(a1 + 6))
      {
        v86 = 0;
        v87 = a1 + 1040;
        do
        {
          if (*(_BYTE *)(v87 + v86))
            *(_DWORD *)(v87 + 4 * v86 - 1024) -= *(_DWORD *)(v87 + 4 * v86 - 512) * v85;
          ++v86;
        }
        while (v86 != 128);
      }
    }
  }
  else
  {
    *(_WORD *)(a1 + 6) = 0;
    *(_BYTE *)(a1 + 5) = 0;
  }
  v278 = v71 + 19544;
  v279 = v71 + 20568;
  v280 = v71 + 21592;
  Min_SNR = GM_Get_Min_SNR((uint64_t)v71, 128);
  v298 = __dst + 11784;
  GM_Prop_AAD(*((unsigned int *)v320 + 9), 128, (uint64_t)(__dst + 11784));
  v89 = __dst;
  if (*v320 && *((int *)v295 + 1537) >= 7 && *(_BYTE *)(a4 + 1) && *(_DWORD *)(a4 + 12) == 3)
  {
    for (i = 0; i != 128; ++i)
    {
      v91 = &v89[36 * i];
      v92 = GM_Gen_SV_Meas_QI((uint64_t)v91);
      v93 = *((_WORD *)v91 + 4);
      v94 = *(unsigned int *)v91;
      v95 = Is_Legal(*(_DWORD *)v91);
      v89 = __dst;
      if (v95)
        v96 = v92 < 8;
      else
        v96 = 1;
      if (!v96 && (v93 & 0x300u) >= 0x200 && __dst[48 * i + 11788] && __dst[48 * i + 11799])
      {
        v97 = &__dst[56 * i];
        v98 = *((_DWORD *)v97 + 1152);
        LODWORD(v97) = (unint64_t)(2149582851 * *((int *)v97 + 1153)) >> 32;
        v99 = (double)(int)(((int)v97 >> 9) + (v97 >> 31) + 1500 * v98) * 0.001;
        v100 = *((double *)__dst + 2242);
        v101 = v100 - v99;
        if (v94 == 2)
        {
          while (v101 >= 43200.0)
          {
            v99 = v99 + 86400.0;
            v101 = v100 - v99;
          }
          while (v101 < -43200.0)
          {
            v99 = v99 + -86400.0;
            v101 = v100 - v99;
          }
        }
        if (v101 >= 302400.0)
        {
          v101 = v101 + -604800.0;
        }
        else if (v101 < -302400.0)
        {
          v101 = v101 + 604800.0;
        }
        if (fabs(v101) > 3.0)
        {
          *((_WORD *)v91 + 4) = v93 & 0xFCFF;
          v102 = Get_GNSS_SV_Str(v94);
          v103 = (unsigned __int16)(v93 & 0x300) >> 8;
          EvLog_v("SV_Gen_Meas: SF Sync Rej !  %d  %s  SF Sync %d  d_TOW %g", i, v102, v103, v101);
          *(_BYTE *)(a11 + i + 448) = 3;
          *(_DWORD *)(a11 + 4 * i + 576) = *((_DWORD *)v320 + 9);
          v104 = Get_GNSS_SV_Str(*(unsigned int *)v91);
          EvCrt_v("ChanReset %d : SVGM  %s  SNR %d  QI %d  Bad SF Sync %d  d_TOW %g", i, v104, __dst[36 * i + 4], v92, v103, v101);
          v89 = __dst;
        }
      }
    }
  }
  GM_Cross_Constell((uint64_t)v89, a8);
  GM_Get_Best_SyncSV((uint64_t)v288, (uint64_t)__dst, (uint64_t)v298, Min_SNR, (_DWORD *)&v330 + 1, &v330);
  Best_NSSS = GM_Get_Best_NSSS((uint64_t)__dst, (uint64_t)v298, Min_SNR, 128);
  v105 = GM_Adjust_AAD(v330, Best_NSSS, (uint64_t)v288, 128, (uint64_t)v298);
  v106 = __dst;
  v107 = 0;
  v108 = 0;
  *((_DWORD *)v320 + 17) = v105;
  v109 = a3 + 192;
  v110 = 11816;
  v111 = 11828;
  do
  {
    v112 = *(_DWORD *)&v106[4 * v108];
    v113 = Is_Legal(v112);
    v106 = __dst;
    if (v113)
    {
      v115 = *((_DWORD *)v320 + 17) - *(_DWORD *)&__dst[v110] + *(_DWORD *)&__dst[v107 + 4612];
      v116 = (v115 + (v115 < 0 ? 0x176A24 : 0)) % 1023;
      if (v116 > 511)
        v116 -= 1023;
      v117 = ((double)v116
            + (double)(*(unsigned __int16 *)&__dst[v107 + 4616] - *(unsigned __int16 *)&__dst[v111 - 8])
            * 0.0000152587891)
           * 293.052256;
      if (BYTE1(v112) > 0xFu || ((1 << SBYTE1(v112)) & 0xDD77) == 0)
        v117 = v117 + (double)*(__int16 *)&__dst[v111] * 0.125;
      if (v117 <= 0.0)
        v118 = -0.5;
      else
        v118 = 0.5;
      v114 = v117 + v118;
      if (v114 <= 2147483650.0)
      {
        if (v114 >= -2147483650.0)
          v119 = (int)v114;
        else
          v119 = 0x80000000;
      }
      else
      {
        v119 = 0x7FFFFFFF;
      }
      *a3 = v119;
      *(v109 - 128) = (__int16)*(_DWORD *)&__dst[v107 + 4620] / 12470 - *(_WORD *)&__dst[v111 - 22];
      *v109 = *(_DWORD *)&__dst[v107 + 4624] / 12470 - *(_WORD *)&__dst[v111 - 22];
    }
    v108 += 9;
    ++v109;
    v107 += 56;
    v110 += 48;
    ++a3;
    v111 += 48;
  }
  while (v108 != 1152);
  v329 = 0;
  v120 = *(_DWORD *)(a1 + 12);
  v121 = *v300 > *(__int16 *)(a9 + 28);
  v122 = *((_DWORD *)v295 + 1537);
  if (v120 <= 4)
    v123 = v120 > 2;
  else
    v123 = 2;
  v294 = v123;
  if (v120 <= 4)
  {
    v124 = v320;
    v125 = Best_NSSS;
    v126 = "%10u %s%c %s: #%04hx Moving State,%u\n" + 13;
    v127 = v316;
    if (v120 >= 3 && v122 < 9)
      goto LABEL_190;
LABEL_193:
    if (v122 == 11)
    {
      v121 = 0;
      v124[52] = 1;
      *(_DWORD *)(a1 + 12) = 6;
      goto LABEL_281;
    }
    if (v120 > 4 || v330 < 0)
    {
      v128 = v330;
      if (v120 <= 2 && (v330 & 0x80000000) == 0)
        goto LABEL_199;
      if ((v125 & 0x80000000) != 0 || v120)
        goto LABEL_281;
LABEL_198:
      if ((v128 & 0x80000000) == 0)
        goto LABEL_199;
      v121 = 1;
      if ((v125 & 0x80000000) == 0)
      {
        GM_Set_MSec_TOW_NSSS((uint64_t)&__dst[56 * v125 + 4608], (uint64_t)&__dst[48 * v125 + 11784], v296, &v329, *((double *)v126 + 271));
        v124[52] = 0;
        *(_DWORD *)(a1 + 12) = 1;
      }
      goto LABEL_281;
    }
LABEL_197:
    v128 = v330;
    goto LABEL_198;
  }
  v124 = v320;
  v125 = Best_NSSS;
  v126 = " #%04hx Moving State,%u\n";
  v127 = v316;
  if (v122 >= 9)
    goto LABEL_193;
LABEL_190:
  v294 = 0;
  v124[52] = 0;
  *(_DWORD *)(a1 + 12) = 2;
  if ((v330 & 0x8000000000000000) == 0)
    goto LABEL_197;
  v294 = 0;
  v128 = v330;
  if ((v330 & 0x80000000) != 0)
    goto LABEL_280;
LABEL_199:
  v129 = v128;
  if (__dst[48 * v128 + 11788])
  {
    LOWORD(v114) = *(_WORD *)&__dst[48 * v128 + 11800];
    v130 = (double)*(unint64_t *)&v114 * 0.5;
  }
  else
  {
    v131 = *(_DWORD *)&__dst[36 * v128];
    switch(*(_DWORD *)&__dst[36 * v129])
    {
      case 2u:
        v132 = 73;
        break;
      case 3u:
        v132 = 87;
        break;
      case 4u:
        if (BYTE2(v131) - 59 >= 0xFFFFFFCB)
          v132 = 81;
        else
          v132 = 119;
        break;
      case 5u:
      case 7u:
        v132 = 129;
        break;
      case 6u:
        v132 = 120;
        break;
      default:
        v132 = 77;
        break;
    }
    v130 = (double)v132;
  }
  v136 = *((double *)v126 + 271);
  GM_Set_MSec_TOT_SSS((uint64_t)&__dst[56 * v129 + 4608], v130, v136, *((double *)__dst + 2242));
  v138 = *((_DWORD *)v295 + 1537);
  if (v138)
  {
LABEL_228:
    v139 = (double *)__dst;
  }
  else
  {
    if (v137 < 0.0)
    {
      v137 = v137 + v136;
      goto LABEL_228;
    }
    v139 = (double *)__dst;
    if (v137 >= v136)
      v137 = v137 + -604800.0;
  }
  v140 = (v137 - *v296) * 1000.0;
  v141 = -0.5;
  if (v140 > 0.0)
    v141 = 0.5;
  v142 = v140 + v141;
  if (v142 <= 2147483650.0)
  {
    if (v142 >= -2147483650.0)
      v143 = (int)v142;
    else
      v143 = 0x80000000;
  }
  else
  {
    v143 = 0x7FFFFFFF;
  }
  v329 = v143;
  *v296 = v137;
  if (v143 >= 0)
    v144 = v143;
  else
    v144 = -v143;
  v145 = v138 > 1 && v144 > 0xEA60;
  v146 = v145;
  if (v145)
  {
    *((_DWORD *)v124 + 3) = 0;
    v147 = (char *)(v139 + 1473);
    v148 = -6144;
    do
    {
      v149 = &v147[v148];
      *((_OWORD *)v149 + 385) = 0uLL;
      *((_OWORD *)v149 + 384) = 0uLL;
      *(_OWORD *)&v147[v148 + 6174] = 0uLL;
      v148 += 48;
    }
    while (v148);
    v150 = a7 + 72;
    v151 = -5904;
    do
    {
      v152 = v150 + v151;
      *(_OWORD *)(v152 + 5920) = 0uLL;
      *(_OWORD *)(v152 + 5904) = 0uLL;
      *(_OWORD *)(v150 + v151 + 5934) = 0uLL;
      v151 += 48;
    }
    while (v151);
    v154 = *v124;
    if (!*v124)
    {
      v127 = 0;
      goto LABEL_262;
    }
    if (v143 < 302400000)
    {
      if (v143 > -302400001)
      {
        v127 = 0;
        goto LABEL_261;
      }
      v127 = 0;
      v153 = *v300 + 1;
    }
    else
    {
      v127 = 0;
      v153 = *v300 - 1;
    }
    *v300 = v153;
LABEL_261:
    v154 = 1;
    goto LABEL_262;
  }
  v154 = *v124;
LABEL_262:
  EvLog_v("GLO_TIM: SV_Gen_Meas GPS set %g   TOW_adjust %d ms   WeekNo %d %d", v139[2242], v143, v154, *v300);
  v155 = v330;
  if (((__dst[48 * (int)v330 + 11788] == 0) & v127) != 0)
    v156 = 8;
  else
    v156 = 9;
  *((_DWORD *)v295 + 1537) = v156;
  if (__dst[36 * v155] == 2)
  {
    *(_QWORD *)&v333[0] = 0;
    API_Get_UTC_Cor(1, (double *)v333);
    v157 = -86400.0;
    v158 = *v296 + floor(*v296 / 86400.0) * -86400.0 + 10800.0 - *(double *)v333;
    *v291 = v158;
    if (v158 >= 86400.0 || (v157 = 86400.0, v158 < 0.0))
    {
      v158 = v158 + v157;
      *v291 = v158;
    }
    v159 = *((_DWORD *)v295 + 1537);
    if (*((_DWORD *)v124 + 3) < v159 && (*(_DWORD *)(a8 + 8972) - 2) <= 4)
      *((_DWORD *)v124 + 3) = v159;
    EvLog_v("GLO_TIM: SV_Gen_Meas GPS->Glon set Glon_TOD  %g", v158);
    v156 = *((_DWORD *)v295 + 1537);
  }
  if (v156 == 9)
  {
    if (v330 < 0 || HIDWORD(v330) != (_DWORD)v330)
    {
      *(_DWORD *)(a1 + 12) = 3;
      v124[52] = 0;
      v294 = 1;
      goto LABEL_280;
    }
    *(_DWORD *)(a1 + 12) = 5;
    v121 = 1;
    v124[52] = 1;
    v294 = 2;
  }
  else
  {
    if ((v146 & 1) == 0)
    {
      GM_Prop_AAD((*((_DWORD *)v124 + 9) + v143), 128, (uint64_t)v298);
      v329 = 0;
    }
LABEL_280:
    v121 = 1;
  }
LABEL_281:
  if (*v124)
  {
    v160 = *((_DWORD *)v295 + 1537);
    if (v160 >= 1 && v160 >= *((_DWORD *)v124 + 3))
    {
      LODWORD(v331[0]) = 0;
      LODWORD(v326) = 0;
      *(_QWORD *)&v333[0] = 0;
      API_Get_UTC_Cor(1, (double *)v333);
      GPS_To_Glon_Time(0, *((__int16 *)v124 + 1), *v296, *(double *)v333, (int *)&v326, (int *)v331, v291);
      v161 = LOWORD(v331[0]);
      if (!v124[18] || LODWORD(v331[0]) != *v286)
      {
        if (g_Logging_Cfg >= 4)
          EvLog_v("SV_Gen_Meas: GPS_GLO %d %d ", *v286, LODWORD(v331[0]));
        *((_WORD *)v124 + 8) = LOWORD(v326);
        *((_WORD *)v124 + 10) = v161;
        v124[18] = 1;
      }
      v162 = *((_DWORD *)v295 + 1537);
      if (*((_DWORD *)v124 + 3) < v162 && (*(_DWORD *)(a8 + 8972) - 2) <= 4)
        *((_DWORD *)v124 + 3) = v162;
    }
  }
  v277 = v121;
  v299 = v304 - *(_DWORD *)a1;
  v328 = 0;
  v327 = 0;
  v325 = 0;
  v326 = 0.0;
  Pos_LLH = Core_Get_Pos_LLH(*((_DWORD *)v124 + 9), 150000, 0, &v327, (uint64_t)v333, (uint64_t)v331, (uint64_t *)&v326, (_BYTE *)&v328 + 1, &v328, &v325, (int *)&v325 + 1);
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v292 = 0;
  if ((HIDWORD(v325) - 3) < 2)
    v167 = Pos_LLH;
  else
    v167 = 0;
  v287 = v167;
  memset(v333, 0, sizeof(v333));
  v276 = a11 + 576;
  v168 = 18520;
  v169 = 18004;
  v170 = 11784;
  v171 = 4608;
  v172 = 11806;
  v173 = *((double *)v126 + 271);
  v275 = v125;
  v174 = 11788;
  v175 = __dst;
  while (2)
  {
    v176 = (int *)&v175[v164];
    v177 = *((unsigned __int8 *)v332 + v166);
    if (*((_BYTE *)v332 + v166))
    {
      v178 = 8;
      goto LABEL_333;
    }
    v322 = *((unsigned __int8 *)v332 + v166);
    v179 = v172;
    v180 = (int *)&v175[v164];
    v178 = GM_Gen_SV_Meas_QI((uint64_t)v176);
    if (v178 < 11)
      goto LABEL_331;
    v175 = __dst;
    v176 = v180;
    v177 = v322;
    if (*(_DWORD *)(a6 + 52) > 4u)
    {
      v172 = v179;
      goto LABEL_333;
    }
    v172 = v179;
    if (__dst[v174] && ((v287 & 1) != 0 || *(_DWORD *)a6 == 1))
    {
      v182 = *(_DWORD *)&__dst[v171 + 12];
      v181 = *(_DWORD *)&__dst[v171 + 16];
      v183 = *(__int16 *)&__dst[v179];
      LODWORD(v184) = *(unsigned __int16 *)&__dst[v179 - 4];
      v185 = __dst[v164 + 1];
      if (v185 <= 0xF && ((1 << v185) & 0xDD77) != 0)
      {
        if (((1 << v185) & 0xBBBF) != 0)
        {
          v186 = v181 / 12470;
          v187 = v182 / 12470;
        }
        else
        {
          v187 = v182 / 16275;
          v186 = v181 / 16275;
          v183 = 118 * v183 / 154;
          v184 = (27889399 * (unint64_t)(118 * v184)) >> 32;
        }
      }
      else
      {
        v187 = v182 / 16700;
        v186 = v181 / 16700;
        v183 = 115 * v183 / 154;
        v184 = (27889399 * (unint64_t)(115 * v184)) >> 32;
      }
      v188 = (3 * v184) <= 0x226 ? 550 : 3 * v184;
      v189 = !v181 || *(_BYTE *)(a6 + 1824) == 0;
      v190 = v189 ? 0 : v187 - v186;
      v191 = v190 >= 0 ? v190 : -v190;
      v192 = v191 <= v188 && v187 <= (int)(v188 + v183);
      if (!v192 || v187 < (int)(v183 - v188))
      {
        v273 = v190;
        v274 = v188;
        v284 = v186;
        v301 = v187;
        v305 = v184;
        v317 = v183;
        if (Is_Legal(*v180))
        {
          *(_BYTE *)(a11 + v166 + 448) = 5;
          *(_DWORD *)(v276 + 4 * v166) = *((_DWORD *)v320 + 9);
          v194 = Get_GNSS_SV_Str(*(unsigned int *)&__dst[v164]);
          EvCrt_v("ChanReset %d : SVGM  %s   Dopp %d %d %d   AA %d %d %d   SNR %d  JNR %d", v166, v194, v301, v284, v273, v317, v305, v274, __dst[v164 + 4], __dst[v164 + 5]);
          v175 = __dst;
          v178 = 4;
LABEL_332:
          v172 = v179;
          v176 = v180;
          v177 = v322;
          goto LABEL_333;
        }
        v178 = 4;
LABEL_331:
        v175 = __dst;
        goto LABEL_332;
      }
    }
LABEL_333:
    v195 = (int *)&v175[v171];
    v196 = v176[2] & 0x308;
    v197 = v196 == 776;
    *((_BYTE *)v333 + v166) = v197;
    v198 = (double)*(int *)&v175[v171 + 12];
    v331[0] = 0.0;
    v199 = (double *)&v175[v168];
    v199[128] = v198 * 0.0000152587891;
    v199[256] = (double)*(int *)&v175[v171 + 16] * 0.0000152587891;
    v200 = 0.0;
    if (*(_BYTE *)v176 && *(_BYTE *)v176 != 7)
    {
      v314 = v176;
      v323 = v177;
      if (v178 < 11)
        goto LABEL_389;
      v318 = v178;
      v302 = (__int16 *)v172;
      v201 = *v296;
      if (v196 == 776)
      {
        v306 = 0;
        v202 = 1;
      }
      else
      {
        v307 = (uint64_t)&v175[v170];
        if ((GM_Aid_NSSS_Meas((uint64_t)&v175[v170], 3u, (int *)&v175[v171]) & 1) != 0
          || (Best_NSSS & 0x80000000) == 0 && *(int *)(a1 + 12) >= 1 && (GM_Aid_NSSS_Meas(v307, 0, v195) & 1) != 0)
        {
          v306 = 0;
          v202 = 1;
        }
        else
        {
          v176 = v314;
          if ((v314[2] & 0x308) != 0x208)
          {
            v197 = 0;
            v175 = __dst;
            LOWORD(v203) = *(_WORD *)&__dst[v165 + 4616];
            v200 = ((double)(1023 * (*(_DWORD *)&__dst[v171 + 4] / 1023) - *(_DWORD *)&__dst[v171 + 4] + 1023)
                  + (double)v203 * -0.0000152587891)
                 * 293.052256;
            v331[0] = v200;
            *((_BYTE *)v333 + v166) = 0;
            v172 = (uint64_t)v302;
            goto LABEL_354;
          }
          v202 = 0;
          v306 = 1;
        }
        v175 = __dst;
      }
      v204 = Comp_Sig_TOT(*(_DWORD *)&v175[v171], *(_DWORD *)&v175[v171 + 4], *(unsigned __int16 *)&v175[v165 + 4616], v201, v173);
      *((_BYTE *)v333 + v166) = v202;
      v197 = v202;
      if (v204 >= -1.0)
      {
        v200 = (*v296 - v204) * 299792458.0;
        v331[0] = v200;
        if (fabs(v200) >= 2130706430.0)
          v205 = 2130706432;
        else
          v205 = (int)v200;
        v176 = v314;
        v206 = *(unsigned __int8 *)v314 - 4;
        v172 = (uint64_t)v302;
        v177 = v323;
        if (v206 > 2)
        {
          v208 = 40000000;
          v207 = 5000000;
        }
        else
        {
          v207 = dword_24BC08F48[(char)v206];
          v208 = dword_24BC08F54[(char)v206];
        }
        v175 = __dst;
        if ((v306 & 1) != 0 || !v294 || !*v320 || (v205 >= v207 ? (v209 = v205 <= v208) : (v209 = 0), v209))
        {
          if (v205 >= v207 && v205 <= v208)
          {
            v178 = v318;
          }
          else
          {
            v309 = v197;
            v212 = Get_GNSS_SV_Str(*(unsigned int *)&__dst[v164]);
            EvCrt_v("SV_Gen_Meas: QI_REJECTED4  %d  %s  SNR %d  QI %d  Sync %d %d  PR %d  iBest %d %d %d", v166, v212, __dst[v164 + 4], v318, v309, v294, v205, HIDWORD(v330), v330, Best_NSSS);
            v197 = v309;
            v177 = v323;
            v176 = v314;
            v172 = (uint64_t)v302;
            v175 = __dst;
            ++v292;
            v331[0] = 0.0;
            v178 = 7;
            v200 = 0.0;
          }
        }
        else
        {
          ++v292;
          v331[0] = 0.0;
          v200 = 0.0;
          if ((v330 & 0x80000000) != 0 || !__dst[48 * v330 + 11788])
          {
            v178 = 6;
          }
          else
          {
            v308 = v197;
            if (Is_Legal(*v314))
            {
              *(_BYTE *)(a11 + v166 + 448) = 11;
              *(_DWORD *)(v276 + 4 * v166) = *((_DWORD *)v320 + 9);
              v210 = Get_GNSS_SV_Str(*(unsigned int *)&__dst[v164]);
              EvCrt_v("ChanReset %d : SVGM  %s  SNR %d  QI %d  Sync %d %d  PR %d  iBest %d %d %d", v166, v210, __dst[v164 + 4], 6, v308, v294, v205, HIDWORD(v330), v330, v275);
              v197 = v308;
              v178 = 6;
              v175 = __dst;
              v172 = (uint64_t)v302;
              v176 = v314;
              v177 = v323;
            }
            else
            {
              v178 = 6;
              v175 = __dst;
              v172 = (uint64_t)v302;
              v176 = v314;
              v177 = v323;
              v197 = v308;
            }
          }
        }
        v213 = *(unsigned __int8 *)v176;
        if (v213 == 5)
        {
          v214 = 20000000;
          v215 = 50000000;
        }
        else
        {
          v214 = 18000000;
          v215 = 50000000;
          if (v213 != 4)
            v215 = 27000000;
        }
        if (*v320 && *((int *)v295 + 1537) >= 9 && (v205 < v214 || v205 > v215))
          *(_BYTE *)(a1 + 4) = 1;
LABEL_389:
        if (v299 > *(unsigned __int16 *)&v175[v164 + 14])
          *(_BYTE *)(a1 + v166 + 1040) = 0;
        v319 = v178;
        if (v178 < 15)
        {
          if (v178 < 11)
            goto LABEL_335;
          if (!v197)
            goto LABEL_403;
        }
        else
        {
          v310 = v197;
          v217 = v172;
          v218 = *(double *)&v175[v165 + 4632];
          v219 = (double *)&v175[v168];
          *(double *)&v175[v168 + 3072] = v218;
          SV_Carrier_Freq_I4 = Get_SV_Carrier_Freq_I4(*v176);
          v221 = 299792458.0 / (double)SV_Carrier_Freq_I4;
          if (*(_BYTE *)(a1 + v166 + 1040))
          {
            v222 = *(_DWORD *)(a1 + 4 * v166 + 16);
          }
          else
          {
            v234 = v200 + 8993773.74;
            if (v200 > 329771.704)
              v234 = v200;
            v222 = (int)((v234 - v218) / v221);
            v235 = a1 + 4 * v166;
            *(_DWORD *)(v235 + 16) = v222;
            *(_DWORD *)(v235 + 528) = SV_Carrier_Freq_I4 / 1000;
            *(_BYTE *)(a1 + v166 + 1040) = 1;
          }
          v172 = v217;
          v177 = v323;
          v219[384] = v218 + (double)v222 * v221;
          v175 = __dst;
          v176 = v314;
          if (!v310)
          {
LABEL_403:
            v233 = 10;
            goto LABEL_404;
          }
        }
        v326 = 0.0;
        v223 = v176;
        v224 = v172;
        v311 = v168;
        v225 = v164;
        v226 = v171;
        v227 = v169;
        v228 = v174;
        v229 = v165;
        v230 = v170;
        v231 = v177;
        v232 = R8_EQ(v331, &v326);
        v177 = v231;
        v170 = v230;
        v165 = v229;
        v174 = v228;
        v169 = v227;
        v171 = v226;
        v164 = v225;
        v168 = v311;
        v172 = v224;
        v175 = __dst;
        v37 = !v232;
        v176 = v223;
        if (v37)
          v233 = v319;
        else
          v233 = 8;
LABEL_404:
        *(_DWORD *)&v175[v169] = v233;
        *(double *)&v175[v168] = v200;
        if (v177)
          goto LABEL_338;
        goto LABEL_339;
      }
      v175 = __dst;
      v172 = (uint64_t)v302;
      v176 = v314;
LABEL_354:
      v177 = v323;
      v178 = v318;
      goto LABEL_389;
    }
LABEL_335:
    *(_DWORD *)&v175[v169] = v178;
    *(double *)&v175[v168] = v200;
    if (v178 <= 1)
    {
      v199[128] = 0.0;
      v199[256] = 0.0;
    }
    if (v177)
LABEL_338:
      *((_WORD *)v176 + 4) |= 8u;
LABEL_339:
    ++v166;
    v168 += 8;
    v169 += 4;
    v165 += 56;
    v164 += 36;
    v170 += 48;
    v171 += 56;
    v172 += 48;
    v174 += 48;
    if (v166 != 128)
      continue;
    break;
  }
  GM_Reject_Rep_SV((uint64_t)v175, 0x80u, v282);
  GM_Conv_Lock_Units(128, (uint64_t)__dst, (uint64_t)v288);
  GM_Cross_Check_Meas_Aiding((uint64_t)__dst);
  v236 = __dst;
  v237 = 0;
  v238 = a1 + 1040;
  v239 = __dst + 18004;
  v240 = v277;
  do
  {
    if (*(int *)&v239[4 * v237] > 14)
    {
      if (!*((_BYTE *)v333 + v237))
      {
        v242 = a1 + 4 * v237;
        *(_DWORD *)(v242 + 16) = 0;
        *(_DWORD *)(v242 + 528) = 0;
        *(_BYTE *)(v238 + v237) = 0;
        *(_DWORD *)&v239[4 * v237] = 15;
      }
    }
    else
    {
      v241 = a1 + 4 * v237;
      *(_DWORD *)(v241 + 16) = 0;
      *(_DWORD *)(v241 + 528) = 0;
      *(_BYTE *)(v238 + v237) = 0;
    }
    ++v237;
  }
  while (v237 != 128);
  v243 = *((_DWORD *)v295 + 1537);
  if (v292 > 2)
  {
    if (v243 >= 4)
    {
      v243 = 3;
      *((_DWORD *)v295 + 1537) = 3;
      v240 = 1;
    }
    *(_DWORD *)(a1 + 12) = 0;
    *(_BYTE *)(a1 + 4) = 1;
  }
  v244 = *((_DWORD *)v320 + 9);
  *(_DWORD *)(a9 + 20) = v244;
  v245 = *((_DWORD *)v320 + 10);
  *(_DWORD *)(a9 + 24) = v245;
  v246 = *((_QWORD *)__dst + 2247);
  *(_QWORD *)(a9 + 8) = v246;
  v247 = *((_WORD *)v320 + 1);
  *(_WORD *)(a9 + 28) = v247;
  v248 = *((double *)__dst + 2242);
  *(double *)(a9 + 32) = v248;
  v249 = *((_QWORD *)__dst + 2249);
  *(_QWORD *)(a9 + 40) = v249;
  *(_DWORD *)a9 = v243;
  v250 = v320[52];
  *(_BYTE *)(a9 + 4) = v250;
  v251 = *v320;
  *(_BYTE *)(a9 + 16) = v251;
  *(_DWORD *)(a9 + 68) = *((_DWORD *)v320 + 3);
  *(_BYTE *)(a9 + 72) = v320[18];
  *(_WORD *)(a9 + 74) = *((_WORD *)v320 + 8);
  *(_WORD *)(a9 + 76) = *((_WORD *)v320 + 10);
  *(_QWORD *)(a9 + 80) = *((_QWORD *)__dst + 2245);
  if (v240 && v243 >= 7)
  {
    Core_Save_ApxTime(v251 != 0, v243, v247, v245, v248);
    v236 = __dst;
    v244 = *((_DWORD *)v320 + 9);
    v245 = *((_DWORD *)v320 + 10);
    v246 = *((_QWORD *)__dst + 2247);
    v243 = *((_DWORD *)v295 + 1537);
    LOBYTE(v251) = *v320;
    v247 = *((_WORD *)v320 + 1);
    v250 = v320[52];
    v248 = *((double *)__dst + 2242);
    v249 = *((_QWORD *)__dst + 2249);
  }
  *(_DWORD *)a10 = v244;
  *(_DWORD *)(a10 + 4) = v245;
  *(_QWORD *)(a10 + 8) = v246;
  *(_DWORD *)(a10 + 16) = v243;
  *(_BYTE *)(a10 + 22) = v251;
  *(_WORD *)(a10 + 24) = v247;
  *(_BYTE *)(a10 + 20) = v250;
  *(double *)(a10 + 32) = v248;
  *(_QWORD *)(a10 + 40) = v249;
  if (v329)
    *(_DWORD *)(a10 + 48) += v329;
  v252 = (unsigned __int8 *)v283;
  if (*(_BYTE *)(a1 + 5))
    *(_DWORD *)(a10 + 52) = *(__int16 *)(a1 + 6);
  v253 = 0;
  *(_BYTE *)(a10 + 21) = v294;
  *(_DWORD *)(a10 + 56) = *((_DWORD *)v320 + 3);
  *(_BYTE *)(a10 + 60) = v320[18];
  *(_WORD *)(a10 + 62) = *((_WORD *)v320 + 8);
  *(_WORD *)(a10 + 64) = *((_WORD *)v320 + 10);
  *(_QWORD *)(a10 + 72) = *((_QWORD *)v236 + 2245);
  *(_DWORD *)(a10 + 80) = *((_DWORD *)v236 + 2944);
  *(_BYTE *)(a10 + 84) = *v295;
  *(_WORD *)(a10 + 85) = *(_WORD *)(v295 + 1);
  *(_BYTE *)(a10 + 87) = v285;
  v254 = v236 + 12;
  v255 = 7512;
  v256 = 7768;
  do
  {
    *(_DWORD *)(a10 + 4 * v253 + 88) = *((_DWORD *)v254 - 3);
    v257 = *(v254 - 11) - 2;
    if (v257 > 0xC)
      v258 = 0;
    else
      v258 = byte_24BC08F60[(char)v257];
    v259 = (_BYTE *)(a10 + v253);
    v259[600] = v258;
    v259[856] = *(v254 - 6);
    v260 = (_WORD *)(a10 + 2 * v253);
    v260[492] = *((_WORD *)v254 - 2);
    v259[1752] = *(v254 - 8);
    v259[1880] = v254[6];
    v259[2008] = *(v254 - 7);
    v259[2136] = v254[7];
    v260[1452] = *((_WORD *)v254 + 1);
    v260[1196] = *((_WORD *)v254 - 1);
    v260[1324] = *(_WORD *)v254;
    v261 = (_BYTE *)(a10 + v256);
    *v261 = *(v254 - 5);
    v262 = (_WORD *)(a10 + v255);
    v262[448] = *((_WORD *)v254 + 4);
    v261[896] = v254[10];
    v259[2264] = *(v252 - 3);
    v260[1580] = *(_WORD *)(v252 - 7);
    v261[128] = *(v252 - 2);
    v261[256] = *(v252 - 1);
    v262[320] = *v252;
    v262[640] = *(_WORD *)(v252 - 13);
    v262[768] = *(_WORD *)(v252 - 11);
    v262[896] = *(_WORD *)(v252 - 9);
    if (*(_WORD *)(v252 - 5))
      *(_WORD *)(a10 + v255) = *(_WORD *)(v252 - 5);
    v254 += 36;
    ++v253;
    v255 += 2;
    v252 += 56;
    ++v256;
  }
  while (v253 != 128);
  memcpy((void *)(a10 + 1240), v282, 0x200uLL);
  memcpy((void *)(a10 + 3416), __src, 0x400uLL);
  memcpy((void *)(a10 + 4440), v278, 0x400uLL);
  memcpy((void *)(a10 + 5464), v279, 0x400uLL);
  memcpy((void *)(a10 + 6488), v280, 0x400uLL);
  v263 = 0;
  v264 = 0;
  *(_QWORD *)&v265 = -1;
  *((_QWORD *)&v265 + 1) = -1;
  *(_OWORD *)(a10 + 728) = v265;
  *(_OWORD *)(a10 + 744) = v265;
  *(_OWORD *)(a10 + 760) = v265;
  *(_OWORD *)(a10 + 776) = v265;
  *(_OWORD *)(a10 + 792) = v265;
  *(_OWORD *)(a10 + 808) = v265;
  *(_OWORD *)(a10 + 824) = v265;
  *(_OWORD *)(a10 + 840) = v265;
  do
  {
    v266 = a10 + 4 * v264;
    v267 = *(_DWORD *)(v266 + 88);
    result = Is_Legal(v267);
    if ((_DWORD)result && *(int *)(v266 + 1240) >= 10)
    {
      v269 = v267 > 7u || ((1 << v267) & 0xC5) == 0;
      if (v269 && v264 <= 0x7E)
      {
        v270 = v263;
        v271 = v264;
        do
        {
          v272 = v271 + 1;
          if (*(unsigned __int8 *)(a10 + v271 + 729) == 255
            && *(unsigned __int8 *)(a10 + v270 + 94) == BYTE2(v267)
            && *(unsigned __int8 *)(a10 + v270 + 92) == v267
            && *(int *)(a10 + 4 * v271 + 1244) >= 10)
          {
            *(_BYTE *)(a10 + v264 + 728) = v272;
            *(_BYTE *)(a10 + v271 + 729) = v264;
          }
          v270 += 4;
          ++v271;
        }
        while (v272 != 127);
      }
    }
    ++v264;
    v263 += 4;
  }
  while (v264 != 128);
  *(_DWORD *)a1 = *((_DWORD *)v320 + 9);
  return result;
}

void GM_CA_Jammer_Protection(unsigned int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  _WORD *v15;
  int v16;
  int v17;
  BOOL v18;
  _BOOL4 v19;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  _BYTE *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  __int16 *v32;
  uint64_t i;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  __int16 *v39;
  uint64_t v40;
  unsigned int *v41;
  char *GNSS_SV_Str;
  _DWORD v45[199];
  int v46;
  _BYTE v47[6];
  __int16 v48;
  _BYTE v49[774];

  *(_QWORD *)&v49[758] = *MEMORY[0x24BDAC8D0];
  bzero(v47, 0x300uLL);
  v10 = 12470;
  if (a1 <= 0xF)
  {
    if (((1 << a1) & 0xEFE6) != 0)
    {
      EvCrt_Illegal_switch_case("GM_CA_Jammer_Protection", 0x809u);
      return;
    }
    if (a1 == 4)
      v11 = 12264;
    else
      v11 = 12470;
    if (a1 == 3)
      v10 = 16700;
    else
      v10 = v11;
  }
  bzero(v45, 0x320uLL);
  v12 = 0;
  v13 = 0;
  v14 = (_DWORD *)(a3 + 12);
  v15 = (_WORD *)(a4 + 8);
  do
  {
    v16 = *((_DWORD *)v15 - 2);
    if (!v16 || a1 != BYTE1(v16) || (*v15 & 8) == 0)
      goto LABEL_33;
    v17 = *((_DWORD *)v15 - 2);
    v18 = a1 != 3 || v17 == 6;
    v19 = v18;
    if (v17 == 7 || !v19)
      goto LABEL_33;
    v21 = (v16 >> 22) & 0xFFFFFFFC;
    if (v17 != 2)
      v21 = 0;
    v22 = *v14 / (int)(v10 - v21);
    v23 = v22 % 1000 + (v22 % 1000 < 0 ? 0x3E8 : 0);
    v24 = v23 / 5uLL;
    ++v45[v24];
    if (v23 <= 4)
    {
      ++v46;
LABEL_30:
      ++v45[(v24 + 1)];
      goto LABEL_31;
    }
    ++v45[(v24 - 1)];
    if (v23 - 995 > 4)
      goto LABEL_30;
    ++v45[0];
LABEL_31:
    v25 = &v47[12 * v13];
    *(_WORD *)v25 = v12;
    *((_WORD *)v25 + 2) = v22;
    *((_WORD *)v25 + 3) = v23;
    v25[3] = v24;
    v26 = v13 + 1;
    if (v13 >= 63)
    {
      EvCrt_v("GM_CA_Jammer_Protection:  WARNING:  num_Dopplers >= DOPPLER_STORE_SIZE,  %d >= %d", v26, 64);
      v13 = v26;
      goto LABEL_35;
    }
    ++v13;
LABEL_33:
    ++v12;
    v14 += 14;
    v15 += 18;
  }
  while (v12 != 128);
  if (v13 < 6)
    return;
LABEL_35:
  v27 = 0;
  v28 = 0;
  v29 = v13;
  while (2)
  {
    v30 = v45[v27];
    if ((int)v30 >= 6)
    {
      v31 = 5 * v27;
      EvCrt_v("GM_CA_Jammer_Protection:  Jammer detected at Doppler % 1000Hz = %d   count %d", (5 * v27), v30);
      v32 = (__int16 *)v49;
      for (i = v29; i; --i)
      {
        v34 = *(v32 - 2) - v31;
        v35 = v34 + 1000;
        if (v34 >= -500)
          v35 = *(v32 - 2) - v31;
        if (v34 <= 499)
          v36 = v35;
        else
          v36 = v34 - 1000;
        if (v36 >= 0)
          v37 = v36;
        else
          v37 = -v36;
        if (v37 > 0xA)
          goto LABEL_54;
        if (*((_BYTE *)v32 - 8))
        {
          v38 = *v32;
          if (v38 < 0)
            v38 = -v38;
          if (v37 >= v38)
            goto LABEL_54;
          *(v32 - 1) = v31;
        }
        else
        {
          *((_BYTE *)v32 - 8) = 1;
          *(v32 - 1) = v31;
          ++v28;
        }
        *v32 = v36;
LABEL_54:
        v32 += 6;
      }
    }
    if (++v27 != 200)
      continue;
    break;
  }
  if (v28 >= 1)
  {
    v39 = &v48;
    do
    {
      if (*((_BYTE *)v39 - 4))
      {
        v40 = (unsigned __int16)*(v39 - 3);
        v41 = (unsigned int *)(a4 + 36 * v40);
        *((_WORD *)v41 + 4) &= ~8u;
        *(_BYTE *)(a5 + v40) = 1;
        *(_BYTE *)(a6 + v40 + 448) = 33;
        *(_DWORD *)(a6 + 4 * v40 + 576) = a2;
        GNSS_SV_Str = Get_GNSS_SV_Str(*v41);
        EvCrt_v("ChanReset %d : SVGM  %s  Doppler %d  modKHz %d  Jammer %d  diff %d  SNR %d  JNR %d", v40, GNSS_SV_Str, *(v39 - 1), *v39, v39[1], v39[2], *((unsigned __int8 *)v41 + 4), *((unsigned __int8 *)v41 + 5));
      }
      v39 += 6;
      --v29;
    }
    while (v29);
  }
}

uint64_t GM_CrossCorr_Protection(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  int v14;
  int v15;

  result = 0;
  if (a1 == 7)
  {
    v7 = 39;
  }
  else
  {
    if (a1 != 4)
      return result;
    LOBYTE(result) = 1;
    v7 = 63;
  }
  v8 = 0;
  v9 = ((unint64_t)(1473445877 * *(int *)(a4 + 12)) >> 32) - *(_DWORD *)(a4 + 12);
  v10 = (v9 >> 13) + (v9 >> 31);
  v11 = Num_Prn[a1 - 1] + a5 + 5976;
  while (1)
  {
    v12 = v8 - 5 < 0x35 ? result : 0;
    if ((v12 & 1) == 0 && (*(char *)(v11 + v8) & 0x80000000) == 0)
    {
      v13 = (v10 + *(__int16 *)(a5 + 48 * *(unsigned __int8 *)(v11 + v8) + 94)) % 1000;
      v14 = v13 + 1000;
      if (v13 >= -500)
        v14 = (v10 + *(__int16 *)(a5 + 48 * *(unsigned __int8 *)(v11 + v8) + 94)) % 1000;
      v15 = v13 <= 499 ? v14 : v13 - 1000;
      if (v15 < 0)
        v15 = -v15;
      if (v15 < 0xF || v15 <= 0x18 && *(unsigned __int8 *)(a3 + 4) < a2)
        break;
    }
    if (v7 == ++v8)
      return 0;
  }
  *(_WORD *)(a3 + 8) &= ~8u;
  return 1;
}

uint64_t GnssDbgMgr_DebugClassInd(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      if (*(unsigned __int16 *)(v2 + 5) <= 0xFF7u)
      {
        v3 = *(unsigned __int8 *)(v2 + 3);
        if (v3 == 80)
        {
          v4 = *(unsigned __int16 *)(a1 + 24);
        }
        else
        {
          if (v3 != 71)
            goto LABEL_9;
          v4 = *(unsigned __int16 *)(a1 + 24);
        }
        GnssDbgMgr_HandleDbgData(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (!v2)
        {
LABEL_10:
          *(_QWORD *)(a1 + 16) = 0;
          return 0;
        }
LABEL_9:
        free((void *)v2);
        goto LABEL_10;
      }
    }
  }
  return 0;
}

uint64_t GnssDbgMgr_DefaultMsgHandler()
{
  return 0;
}

void GnssDbgMgr_HandleDbgData(uint64_t a1)
{
  __int16 v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  __int16 v6;
  unsigned int v7;
  int v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char __dst[951];
  char __str[4112];
  uint64_t v15;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v15 = *MEMORY[0x24BDAC8D0];
  if (v2)
  {
    v4 = v3;
    v5 = v2;
    v6 = v1;
    v7 = GnssDbgMgr_LogSeverity(*(unsigned __int8 *)(v2 + 4));
    v8 = v7;
    if ((v7 & 6) == 4)
    {
      if (g_LbsOsaTrace_Config >= v7)
      {
        v9 = LbsOsaTrace_FormatBuffer(v4, v7, (const void *)(v5 + 8), (unsigned __int16)(v6 - 8), __str, 0x1010u);
        gnssOsa_PrintLog(__str, v8, 0, v9);
      }
    }
    else if (g_LbsOsaTrace_Config >= v7)
    {
      v10 = *(unsigned __int16 *)(v5 + 5);
      if (v10 <= 0x3B5)
      {
        bzero(__dst, 0x3B7uLL);
        memcpy_s("GnssDbgMgr_HandleDbgData", 252, __dst, 0x3B7u, (const void *)(v5 + 8), v10);
        bzero(__str, 0x3E8uLL);
        v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        v12 = LbsOsaTrace_ModuleString(v4);
        snprintf(__str, 0x3E7uLL, "%10u %s%c %s\n", v11, v12, dword_24BC08F70[v8 - 1], __dst);
        gnssOsa_PrintLog(__str, v8, 1, 0);
        if (v4 == 1 && (word_2579BA2B8 & 0x200) != 0)
          Gnm15_09UpdateNmeaData(__dst, v10);
      }
    }
  }
}

void GnssDbgMgr_DestMissingHandler(uint64_t a1)
{
  void *v2;

  if (*(_DWORD *)(a1 + 4) == 8585216)
  {
    v2 = *(void **)(a1 + 16);
    if (v2)
      free(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void GnssDbgMgr_WriteLog(size_t a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  if (a2)
  {
    v4 = gnssOsa_Calloc("GnssDbgMgr_WriteLog", 174, 1, 0x20uLL);
    if (v4)
    {
      v5 = v4;
      v6 = gnssOsa_Calloc("GnssDbgMgr_WriteLog", 181, 1, a1);
      v5[2] = v6;
      if (v6)
      {
        *((_WORD *)v5 + 12) = a1;
        memcpy_s("GnssDbgMgr_WriteLog", 191, v6, a1, a2, a1);
        AgpsSendFsmMsg(131, 131, 8585216, v5);
      }
      else
      {
        free(v5);
      }
    }
  }
}

uint64_t GnssDbgMgr_LogSeverity(int a1)
{
  if (a1 <= 77)
  {
    if (a1 != 65)
    {
      if (a1 != 69)
        return 4;
      return 1;
    }
    return 3;
  }
  if (a1 == 78)
    return 3;
  if (a1 != 86)
  {
    if (a1 == 87)
      return 2;
    return 4;
  }
  return 5;
}

_QWORD *gnss::Device::Device(_QWORD *result)
{
  *result = &off_251CDB0C0;
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDeviceC2ENSt3__110unique_ptrIN7GnssHal4GpioENS1_14default_deleteIS4_EEEENS2_INS3_4CommENS5_IS8_EEEENS2_INS3_6LoggerENS5_ISB_EEEENS2_INS3_9NvStorageENS5_ISE_EEEENS2_INS3_10ExtensionsENS5_ISH_EEEENS2_INS_9Emergency4Supl17ConnectionManagerENS5_ISM_EEEENS1_8functionIFvNS_6ResultEEEE_block_invoke(uint64_t result)
{
  gp_GnssAdaptDeviceInstance = *(_QWORD *)(result + 32);
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDeviceC2ENSt3__110unique_ptrIN7GnssHal4GpioENS1_14default_deleteIS4_EEEENS2_INS3_4CommENS5_IS8_EEEENS2_INS3_6LoggerENS5_ISB_EEEENS2_INS3_9NvStorageENS5_ISE_EEEENS2_INS3_10ExtensionsENS5_ISH_EEEENS2_INS_9Emergency4Supl17ConnectionManagerENS5_ISM_EEEENS1_8functionIFvNS_6ResultEEEE_block_invoke_2(uint64_t a1)
{
  gnss::GnssAdaptDevice *v1;
  uint64_t v2;
  unsigned __int8 v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v1 = *(gnss::GnssAdaptDevice **)(a1 + 32);
  std::function<void ()(gnss::Result)>::operator=((_QWORD *)v1 + 7, a1 + 40);
  v4 = 0;
  Ga05_GetPlatformType(&v4);
  if (v4 && !*((_QWORD *)v1 + 1))
  {
    gnssOsa_FlushLog();
    __assert_rtn("GnssAdaptDevice_block_invoke_2", "ga00GnssDevice.cpp", 91, "false && \"Invalid GPIO pointer\"");
  }
  gp_Comm = gnss::GnssAdaptDevice::getComm(*((_QWORD *)v1 + 2));
  gp_Logger = gnss::GnssAdaptDevice::getLogger(*((_QWORD *)v1 + 3));
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)gp_Logger + 56))(gp_Logger);
  LbsOsaTrace_Init(v2);
  gp_NvStorage = gnss::GnssAdaptDevice::getNvStore(*((_QWORD *)v1 + 4));
  gp_HalExtensionIndusInstance = (uint64_t)gnss::GnssAdaptDevice::getHalExtensions(v1);
  return gnss::GnssAdaptDevice::Ga00_04HandleDeviceInit(v1, 0);
}

_QWORD *std::function<void ()(gnss::Result)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(gnss::Result)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t gnss::GnssAdaptDevice::getComm(uint64_t this)
{
  if (!this)
  {
    gnssOsa_FlushLog();
    __assert_rtn("getComm", "gaGnssAdaptDevice.h", 303, "false && \"Comm null\"");
  }
  return this;
}

uint64_t gnss::GnssAdaptDevice::getLogger(uint64_t this)
{
  if (!this)
  {
    gnssOsa_FlushLog();
    __assert_rtn("getLogger", "gaGnssAdaptDevice.h", 304, "false && \"Logger null\"");
  }
  return this;
}

uint64_t gnss::GnssAdaptDevice::getNvStore(uint64_t this)
{
  if (!this)
  {
    gnssOsa_FlushLog();
    __assert_rtn("getNvStore", "gaGnssAdaptDevice.h", 305, "false && \"NvStorage null\"");
  }
  return this;
}

void *gnss::GnssAdaptDevice::getHalExtensions(gnss::GnssAdaptDevice *this)
{
  const void *v1;
  void *result;

  v1 = (const void *)*((_QWORD *)this + 5);
  if (!v1
  {
    gnssOsa_FlushLog();
    __assert_rtn("getHalExtensions", "gaGnssAdaptDevice.h", 309, "false && \"Failed to dynamic cast HalExtensions\"");
  }
  return result;
}

uint64_t gnss::GnssAdaptDevice::Ga00_04HandleDeviceInit(gnss::GnssAdaptDevice *this, int a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD block[4];
  _BYTE v14[24];
  _BYTE *v15;
  char __str[24];
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a2 == 1)
    {
      *((_BYTE *)this + 88) = 0;
      *((_BYTE *)this + 90) = 1;
      if ((gnss::GnssAdaptDevice::Ga00_02GnssDeInit((NSObject **)this) & 1) != 0)
      {
        gp_Logger = gnss::GnssAdaptDevice::getLogger(*((_QWORD *)this + 3));
        v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)gp_Logger + 56))(gp_Logger);
        LbsOsaTrace_Init(v3);
        __str[0] = 0;
        Ga05_GetPlatformType((unsigned __int8 *)__str);
        if (__str[0] && !*((_QWORD *)this + 1))
        {
          gnssOsa_FlushLog();
          __assert_rtn("Ga00_03GnssReset", "ga00GnssDevice.cpp", 569, "false && \"Invalid GPIO pointer\"");
        }
        gp_Comm = gnss::GnssAdaptDevice::getComm(*((_QWORD *)this + 2));
        gp_NvStorage = gnss::GnssAdaptDevice::getNvStore(*((_QWORD *)this + 4));
        result = gnss::GnssAdaptDevice::Ga00_01GnssInit((dispatch_semaphore_s **)this);
        if ((result & 1) != 0)
          return result;
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          v5 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "Ga00_03GnssReset", 1293);
          gnssOsa_PrintLog(__str, 1, 1, 0);
        }
      }
      else if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga00_03GnssReset", 1296);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
    }
    else if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InitType\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 87, "Ga00_04HandleDeviceInit", 770);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
  }
  else
  {
    *((_BYTE *)this + 88) = 0;
    result = gnss::GnssAdaptDevice::Ga00_01GnssInit((dispatch_semaphore_s **)this);
    if ((result & 1) != 0)
      return result;
  }
  gnss::GnssAdaptDevice::Ga07_06SetDefaultState(this, 0);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)__str, (uint64_t)this + 56);
  v8 = *((_QWORD *)this + 20);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZN4gnss15GnssAdaptDevice23Ga00_04HandleDeviceInitENS_17e_Ga_GnssInitTypeE_block_invoke;
  block[3] = &__block_descriptor_tmp_57;
  v9 = v14;
  v10 = (uint64_t)v17;
  if (!v17)
    goto LABEL_18;
  if (v17 != __str)
  {
    v10 = (*(uint64_t (**)(void))(*(_QWORD *)v17 + 16))();
LABEL_18:
    v15 = (_BYTE *)v10;
    goto LABEL_20;
  }
  v15 = v14;
  (*(void (**)(char *, _BYTE *))(*(_QWORD *)__str + 24))(__str, v14);
LABEL_20:
  dispatch_async(v8, block);
  if (v15 == v14)
  {
    v11 = 4;
    goto LABEL_24;
  }
  if (v15)
  {
    v11 = 5;
    v9 = v15;
LABEL_24:
    (*(void (**)(_QWORD *))(*v9 + 8 * v11))(v9);
  }
  result = (uint64_t)v17;
  if (v17 == __str)
  {
    v12 = 4;
    result = (uint64_t)__str;
  }
  else
  {
    if (!v17)
      return result;
    v12 = 5;
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v12))();
}

void sub_24BAC35C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v27;
  uint64_t v28;

  v27 = a26;
  if (a26 == &a23)
  {
    v28 = 4;
    v27 = &a23;
  }
  else
  {
    if (!a26)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

_QWORD *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void gnss::GnssAdaptDevice::~GnssAdaptDevice(gnss::GnssAdaptDevice *this)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  gnss::GnssAdaptDevice *v6;
  uint64_t v7;
  gnss::GnssAdaptDevice *v8;
  uint64_t v9;
  gnss::GnssAdaptDevice *v10;
  uint64_t v11;
  gnss::GnssAdaptDevice *v12;
  uint64_t v13;
  gnss::GnssAdaptDevice *v14;
  uint64_t v15;
  gnss::GnssAdaptDevice *v16;
  uint64_t v17;
  gnss::GnssAdaptDevice *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD block[5];
  char __str[966];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_251CDB2A8;
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Destructor\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 73, "~GnssAdaptDevice");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  v3 = *((_QWORD *)this + 19);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN4gnss15GnssAdaptDeviceD2Ev_block_invoke;
  block[3] = &__block_descriptor_tmp_5;
  block[4] = this;
  dispatch_sync(v3, block);
  dispatch_sync((dispatch_queue_t)g_GnssGlobalStaticQueue, &__block_literal_global);
  v4 = *((_QWORD *)this + 20);
  if (v4)
  {
    dispatch_release(v4);
    *((_QWORD *)this + 20) = 0;
  }
  if (g_GnssGlobalStaticQueue)
  {
    dispatch_release((dispatch_object_t)g_GnssGlobalStaticQueue);
    g_GnssGlobalStaticQueue = 0;
  }
  v5 = *((_QWORD *)this + 19);
  if (v5)
  {
    dispatch_release(v5);
    *((_QWORD *)this + 19) = 0;
  }
  v6 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 44);
  if (v6 == (gnss::GnssAdaptDevice *)((char *)this + 328))
  {
    v7 = 4;
    v6 = (gnss::GnssAdaptDevice *)((char *)this + 328);
  }
  else
  {
    if (!v6)
      goto LABEL_14;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_14:
  v8 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 40);
  if (v8 == (gnss::GnssAdaptDevice *)((char *)this + 296))
  {
    v9 = 4;
    v8 = (gnss::GnssAdaptDevice *)((char *)this + 296);
  }
  else
  {
    if (!v8)
      goto LABEL_19;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_19:
  v10 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 36);
  if (v10 == (gnss::GnssAdaptDevice *)((char *)this + 264))
  {
    v11 = 4;
    v10 = (gnss::GnssAdaptDevice *)((char *)this + 264);
  }
  else
  {
    if (!v10)
      goto LABEL_24;
    v11 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
LABEL_24:
  v12 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 32);
  if (v12 == (gnss::GnssAdaptDevice *)((char *)this + 232))
  {
    v13 = 4;
    v12 = (gnss::GnssAdaptDevice *)((char *)this + 232);
  }
  else
  {
    if (!v12)
      goto LABEL_29;
    v13 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
LABEL_29:
  v14 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 28);
  if (v14 == (gnss::GnssAdaptDevice *)((char *)this + 200))
  {
    v15 = 4;
    v14 = (gnss::GnssAdaptDevice *)((char *)this + 200);
  }
  else
  {
    if (!v14)
      goto LABEL_34;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_34:
  v16 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 24);
  if (v16 == (gnss::GnssAdaptDevice *)((char *)this + 168))
  {
    v17 = 4;
    v16 = (gnss::GnssAdaptDevice *)((char *)this + 168);
  }
  else
  {
    if (!v16)
      goto LABEL_39;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_39:
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy((uint64_t)this + 120, *((_QWORD **)this + 16));
  std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy((uint64_t)this + 96, *((_QWORD **)this + 13));
  v18 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 10);
  if (v18 == (gnss::GnssAdaptDevice *)((char *)this + 56))
  {
    v19 = 4;
    v18 = (gnss::GnssAdaptDevice *)((char *)this + 56);
  }
  else
  {
    if (!v18)
      goto LABEL_44;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_44:
  v20 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
  v21 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
}

{
  gnss::GnssAdaptDevice::~GnssAdaptDevice(this);
}

{
  gnss::GnssAdaptDevice::~GnssAdaptDevice(this);
  JUMPOUT(0x24BD2D7C8);
}

void sub_24BAC3A3C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t ___ZN4gnss15GnssAdaptDeviceD2Ev_block_invoke(uint64_t a1)
{
  return gnss::GnssAdaptDevice::Ga00_02GnssDeInit(*(NSObject ***)(a1 + 32));
}

uint64_t gnss::GnssAdaptDevice::Ga00_02GnssDeInit(NSObject **this)
{
  uint64_t v2;
  uint64_t v4;
  char __str[8];
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  gnss::GnssAdaptDevice::Ga01_06GnssReportPower(this, 0);
  gnss::GnssAdaptDevice::Ga00_08GnssStopPositioning((uint64_t)this, 1);
  GNS_EaInitialize(0);
  GNS_EeInitialize(0);
  Gnm_RegisterApiStatusCb(0);
  if (!gnssOsa_DeinitCountingSem(this + 45) && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx StopSem\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 69, "Ga00_02GnssDeInit", 1540);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  if (g_GnsInit && (g_GnsInit = 0, (AgpsShutdownAllFsm() & 1) != 0))
  {
    *(_QWORD *)__str = this + 18;
    v6 = 0;
    std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>((uint64_t)__str, 8uLL);
    return 1;
  }
  else
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "Ga00_02GnssDeInit", 1296);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 0;
  }
}

void sub_24BAC3C60(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZN4gnss15GnssAdaptDeviceD2Ev_block_invoke_2()
{
  gp_GnssAdaptDeviceInstance = 0;
}

void gnss::GnssAdaptDevice::reset(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD block[5];
  _BYTE v7[24];
  _BYTE *v8;
  char __str[966];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice5resetENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_10;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
    dispatch_async(v2, block);
    v3 = v8;
    if (v8 == v7)
    {
      v4 = 4;
      v3 = v7;
    }
    else
    {
      if (!v8)
        return;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "reset", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void ___ZN4gnss15GnssAdaptDevice5resetENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char __str[966];
  _QWORD block[4];
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 90))
  {
    v2 = *(NSObject **)(v1 + 160);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice5resetENSt3__18functionIFvNS_6ResultEEEE_block_invoke_2;
    block[3] = &__block_descriptor_tmp_8;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a1 + 40);
    dispatch_async(v2, block);
    v3 = v9;
    if (v9 == v8)
    {
      v4 = 4;
      v3 = v8;
    }
    else
    {
      if (!v9)
        return;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  else
  {
    std::function<void ()(gnss::Result)>::operator=((_QWORD *)(v1 + 56), a1 + 40);
    gnss::GnssAdaptDevice::Ga00_04HandleDeviceInit((gnss::GnssAdaptDevice *)v1, 1);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Reset Triggered\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 73, "reset_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
}

uint64_t ___ZN4gnss15GnssAdaptDevice5resetENSt3__18functionIFvNS_6ResultEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v3 = 0;
  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

uint64_t __copy_helper_block_e8_32c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_e8_32c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void gnss::GnssAdaptDevice::clear(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD block[5];
  _BYTE v7[24];
  _BYTE *v8;
  char __str[966];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice5clearENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_17;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
    dispatch_async(v2, block);
    v3 = v8;
    if (v8 == v7)
    {
      v4 = 4;
      v3 = v7;
    }
    else
    {
      if (!v8)
        return;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "clear", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void ___ZN4gnss15GnssAdaptDevice5clearENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];
  _BYTE *v23;
  _BYTE v24[24];
  _BYTE *v25;
  _BYTE v26[24];
  _BYTE *v27;
  _BYTE v28[24];
  _BYTE *v29;
  char __str[966];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "clear_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!*(_BYTE *)(v2 + 88))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v28, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v28, (uint64_t)"clear_block_invoke");
    v7 = v29;
    if (v29 == v28)
    {
      v8 = 4;
      v7 = v28;
    }
    else
    {
      if (!v29)
      {
LABEL_21:
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          v13 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "clear_block_invoke", 1302);
          gnssOsa_PrintLog(__str, 1, 1, 0);
          if (g_LbsOsaTrace_Config >= 5)
          {
            bzero(__str, 0x3C6uLL);
            v14 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "clear_block_invoke");
            gnssOsa_PrintLog(__str, 5, 1, 0);
          }
        }
        return;
      }
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
    goto LABEL_21;
  }
  v4 = a1 + 40;
  if (*(_BYTE *)(v2 + 89))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v26, v4);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 0, (uint64_t)v26, (uint64_t)"clear_block_invoke");
    v5 = v27;
    if (v27 == v26)
    {
      v6 = 4;
      v5 = v26;
    }
    else
    {
      if (!v27)
        goto LABEL_16;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_16:
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "clear_block_invoke", 2056);
      gnssOsa_PrintLog(__str, 1, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        v12 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "clear_block_invoke");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
    return;
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v22, v4);
  v25 = 0;
  gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(v2, 16, (uint64_t)v22);
  v9 = v25;
  if (v25 == v24)
  {
    v10 = 4;
    v9 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_26;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_26:
  v15 = v23;
  if (v23 == v22)
  {
    v16 = 4;
    v15 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_31;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_31:
  v17 = Gnm_ClearGNSSCache(0x10000);
  if (v17)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v18 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ClearCache,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "clear_block_invoke", 257, v17);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, v17, 0x10u);
    if (g_LbsOsaTrace_Config >= 5)
      goto LABEL_43;
  }
  else
  {
    if (!gnssOsa_SemWaitTimeOut(*(NSObject **)(v2 + 360), 0x1F4u))
    {
      if (g_LbsOsaTrace_Config < 4)
        return;
      bzero(__str, 0x3C6uLL);
      v20 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: COLD\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 73, "clear_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
      if (g_LbsOsaTrace_Config < 5)
        return;
LABEL_43:
      bzero(__str, 0x3C6uLL);
      v21 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "clear_block_invoke");
      gnssOsa_PrintLog(__str, 5, 1, 0);
      return;
    }
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v19 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ClearCache\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 69, "clear_block_invoke", 257);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, 0xBu, 0x10u);
    if (g_LbsOsaTrace_Config >= 5)
      goto LABEL_43;
  }
}

void sub_24BAC4970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  gnss::s_StatusCB::~s_StatusCB((gnss::s_StatusCB *)va);
  _Unwind_Resume(a1);
}

void gnss::s_StatusCB::~s_StatusCB(gnss::s_StatusCB *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  gnss::s_StatusCB *v5;
  uint64_t v6;

  v2 = (char *)this + 32;
  v3 = (char *)*((_QWORD *)this + 7);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (gnss::s_StatusCB *)*((_QWORD *)this + 3);
  if (v5 == this)
  {
    v6 = 4;
    v5 = this;
  }
  else
  {
    if (!v5)
      return;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
}

void gnss::GnssAdaptDevice::start(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD block[5];
  _BYTE v13[24];
  _BYTE *v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;
  char __str[966];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a3 + 24))
  {
    if (!g_LbsOsaTrace_Config)
      return;
    goto LABEL_7;
  }
  if (!*(_QWORD *)(a4 + 24))
  {
    if (!g_LbsOsaTrace_Config)
      return;
LABEL_7:
    bzero(__str, 0x3C6uLL);
    v10 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "start", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    return;
  }
  v6 = *(NSObject **)(a1 + 152);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZN4gnss15GnssAdaptDevice5startEyNSt3__18functionIFvNS_6ResultEEEES5__block_invoke;
  block[3] = &__block_descriptor_tmp_21;
  block[4] = a1;
  v7 = v13;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, a3);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v15, a4);
  v17 = a2;
  dispatch_async(v6, block);
  v8 = v16;
  if (v16 == v15)
  {
    v9 = 4;
    v8 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_12;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_12:
  if (v14 == v13)
  {
    v11 = 4;
  }
  else
  {
    if (!v14)
      return;
    v11 = 5;
    v7 = v14;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v11))(v7);
}

void sub_24BAC4CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___ZN4gnss15GnssAdaptDevice5startEyNSt3__18functionIFvNS_6ResultEEEES5__block_invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _DWORD v33[7];
  __int16 v34;
  _BYTE v35[24];
  _BYTE *v36;
  _BYTE v37[24];
  _BYTE *v38;
  _BYTE v39[24];
  _BYTE *v40;
  _BYTE v41[24];
  _BYTE *v42;
  _BYTE v43[24];
  _BYTE *v44;
  char __str[966];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = g_LbsOsaTrace_Config;
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "start_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
    v3 = g_LbsOsaTrace_Config;
  }
  if (v3 >= 3)
  {
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    v6 = *(double *)&g_MacClockTicksToMsRelation;
    snprintf(getVersionString::a_Version, 0x200uLL, "Device Interface %.2f,host,%s,FW,%s", 25.02, "v2.31.0.2024-06-15", ga_HwVersion);
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 24) + 72))(*(_QWORD *)(v2 + 24));
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 40) + 64))(*(_QWORD *)(v2 + 40));
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #SessionStart,%s ,logmask,%llu, dbgmask,%llu\n", (unint64_t)(v6 * (double)v5), "ADP", 77, "start_block_invoke", getVersionString::a_Version, v7, v8);
    gnssOsa_PrintLog(__str, 3, 1, 0);
  }
  if (*(_BYTE *)(v2 + 88))
  {
    if (*(_BYTE *)(v2 + 89))
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v41, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 0, (uint64_t)v41, (uint64_t)"start_block_invoke");
      v9 = v42;
      if (v42 == v41)
      {
        v10 = 4;
        v9 = v41;
      }
      else
      {
        if (!v42)
          goto LABEL_19;
        v10 = 5;
      }
      (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_19:
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        v16 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 69, "start_block_invoke", 2056);
        gnssOsa_PrintLog(__str, 1, 1, 0);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          v17 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 68, "start_block_invoke");
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
      }
      return;
    }
    v13 = *(_QWORD *)(v2 + 144);
    if ((v13 & 0x40) == 0)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v39, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 8, (uint64_t)v39, (uint64_t)"start_block_invoke");
      v14 = v40;
      if (v40 == v39)
      {
        v15 = 4;
        v14 = v39;
      }
      else
      {
        if (!v40)
        {
LABEL_32:
          if (g_LbsOsaTrace_Config > 1)
          {
            bzero(__str, 0x3C6uLL);
            v23 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Invalid PVTM Config\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 87, "start_block_invoke", 258);
            gnssOsa_PrintLog(__str, 2, 1, 0);
            if (g_LbsOsaTrace_Config >= 5)
            {
              bzero(__str, 0x3C6uLL);
              v24 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 68, "start_block_invoke");
              gnssOsa_PrintLog(__str, 5, 1, 0);
            }
          }
          return;
        }
        v15 = 5;
      }
      (*(void (**)(void))(*v14 + 8 * v15))();
      goto LABEL_32;
    }
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v35, a1 + 40);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v37, a1 + 72);
    gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(v2, 2, (uint64_t)v35);
    v20 = (2 * (v13 & 1)) | (4 * ((v13 & 0x3A) != 0));
    v21 = v38;
    if (v38 == v37)
    {
      v22 = 4;
      v21 = v37;
    }
    else
    {
      if (!v38)
        goto LABEL_37;
      v22 = 5;
    }
    (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_37:
    v25 = v36;
    if (v36 == v35)
    {
      v26 = 4;
      v25 = v35;
    }
    else
    {
      if (!v36)
        goto LABEL_42;
      v26 = 5;
    }
    (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_42:
    v27 = *(_QWORD *)(a1 + 104);
    v31 = 0;
    v32 = 1000;
    *(_QWORD *)v33 = 0;
    *(_QWORD *)((char *)&v33[1] + 2) = 0;
    *(_QWORD *)&v33[5] = v27;
    v34 = 0;
    v28 = Gnm_RegisterPeriodicFix(0, 0, (uint64_t)gnss::GnssAdaptDevice::Ga06_00GnssPeriodicFixCB, v20, (unsigned int *)&v31);
    if (v28)
    {
      gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, v28, 2u);
      if (!g_LbsOsaTrace_Config)
        return;
      bzero(__str, 0x3C6uLL);
      v29 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RegPeriodicFix,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 69, "start_block_invoke", 257, v28);
      gnssOsa_PrintLog(__str, 1, 1, 0);
      if (g_LbsOsaTrace_Config < 5)
        return;
    }
    else
    {
      *(_BYTE *)(v2 + 89) = 1;
      *(_BYTE *)(v2 + 93) = 0;
      if (g_LbsOsaTrace_Config < 5)
        return;
    }
    bzero(__str, 0x3C6uLL);
    v30 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 68, "start_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
    return;
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v43, a1 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v43, (uint64_t)"start_block_invoke");
  v11 = v44;
  if (v44 == v43)
  {
    v12 = 4;
    v11 = v43;
    goto LABEL_23;
  }
  if (v44)
  {
    v12 = 5;
LABEL_23:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v18 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "start_block_invoke", 1302);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v19 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 68, "start_block_invoke");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
}

void sub_24BAC54D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  gnss::s_StatusCB::~s_StatusCB((gnss::s_StatusCB *)va);
  _Unwind_Resume(a1);
}

char *getVersionString()
{
  snprintf(getVersionString::a_Version, 0x200uLL, "Device Interface %.2f,host,%s,FW,%s", 25.02, "v2.31.0.2024-06-15", ga_HwVersion);
  return getVersionString::a_Version;
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_24BAC5684(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = v2;
  v5 = *(_QWORD **)(v3 + 64);
  if (v5 == v1)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v1 = v5;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 5;
  v3 = a1 + 9;
  v4 = (_QWORD *)a1[12];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = (_QWORD *)a1[8];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void gnss::GnssAdaptDevice::stop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD block[5];
  _BYTE v11[24];
  _BYTE *v12;
  _BYTE v13[24];
  _BYTE *v14;
  char __str[966];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a2 + 24))
  {
    if (!g_LbsOsaTrace_Config)
      return;
    goto LABEL_7;
  }
  if (!*(_QWORD *)(a3 + 24))
  {
    if (!g_LbsOsaTrace_Config)
      return;
LABEL_7:
    bzero(__str, 0x3C6uLL);
    v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "stop", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    return;
  }
  v4 = *(NSObject **)(a1 + 152);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZN4gnss15GnssAdaptDevice4stopENSt3__18functionIFvNS_6ResultEEEES5__block_invoke;
  block[3] = &__block_descriptor_tmp_25;
  block[4] = a1;
  v5 = v11;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v11, a2);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, a3);
  dispatch_async(v4, block);
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_12;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
  if (v12 == v11)
  {
    v9 = 4;
  }
  else
  {
    if (!v12)
      return;
    v9 = 5;
    v5 = v12;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v9))(v5);
}

void sub_24BAC59C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22)
{
  _QWORD *v22;
  uint64_t v24;

  if (a22 == v22)
  {
    v24 = 4;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v24 = 5;
    v22 = a22;
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v24))(v22);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___ZN4gnss15GnssAdaptDevice4stopENSt3__18functionIFvNS_6ResultEEEES5__block_invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  _BYTE v34[24];
  _BYTE *v35;
  _BYTE v36[24];
  _BYTE *v37;
  char __str[966];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = g_LbsOsaTrace_Config;
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "stop_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
    v3 = g_LbsOsaTrace_Config;
  }
  if (v3 >= 3)
  {
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    v6 = *(double *)&g_MacClockTicksToMsRelation;
    snprintf(getVersionString::a_Version, 0x200uLL, "Device Interface %.2f,host,%s,FW,%s", 25.02, "v2.31.0.2024-06-15", ga_HwVersion);
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 24) + 72))(*(_QWORD *)(v2 + 24));
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 40) + 64))(*(_QWORD *)(v2 + 40));
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #SessionStop,%s ,logmask,%llu, dbgmask,%llu\n", (unint64_t)(v6 * (double)v5), "ADP", 77, "stop_block_invoke", getVersionString::a_Version, v7, v8);
    gnssOsa_PrintLog(__str, 3, 1, 0);
  }
  if (*(_BYTE *)(v2 + 88))
  {
    v9 = a1 + 40;
    if (*(_BYTE *)(v2 + 89))
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v28, v9);
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v30, a1 + 72);
      gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(v2, 1, (uint64_t)v28);
      v10 = v31;
      if (v31 == v30)
      {
        v11 = 4;
        v10 = v30;
      }
      else
      {
        if (!v31)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      v16 = v29;
      if (v29 == v28)
      {
        v17 = 4;
        v16 = v28;
      }
      else
      {
        if (!v29)
          goto LABEL_23;
        v17 = 5;
      }
      (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_23:
      v18 = gnss::GnssAdaptDevice::Ga00_08GnssStopPositioning(v2, 0);
      if (g_LbsOsaTrace_Config > 3)
      {
        v19 = v18;
        bzero(__str, 0x3C6uLL);
        v20 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: StopResp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 73, "stop_block_invoke", v19);
        gnssOsa_PrintLog(__str, 4, 1, 0);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          v21 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "stop_block_invoke");
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
      }
      return;
    }
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v34, v9);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v34, (uint64_t)"stop_block_invoke");
    v14 = v35;
    if (v35 == v34)
    {
      v15 = 4;
      v14 = v34;
    }
    else
    {
      if (!v35)
        goto LABEL_33;
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_33:
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v32, a1 + 72);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v32, (uint64_t)"stop_block_invoke");
    v24 = v33;
    if (v33 == v32)
    {
      v25 = 4;
      v24 = v32;
    }
    else
    {
      if (!v33)
      {
LABEL_38:
        if (g_LbsOsaTrace_Config > 3)
        {
          bzero(__str, 0x3C6uLL);
          v26 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Stop Rcvd,session inactive\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 73, "stop_block_invoke");
          gnssOsa_PrintLog(__str, 4, 1, 0);
          if (g_LbsOsaTrace_Config >= 5)
          {
            bzero(__str, 0x3C6uLL);
            v27 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 68, "stop_block_invoke");
            gnssOsa_PrintLog(__str, 5, 1, 0);
          }
        }
        return;
      }
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
    goto LABEL_38;
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v36, a1 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v36, (uint64_t)"stop_block_invoke");
  v12 = v37;
  if (v37 == v36)
  {
    v13 = 4;
    v12 = v36;
    goto LABEL_27;
  }
  if (v37)
  {
    v13 = 5;
LABEL_27:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v22 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 69, "stop_block_invoke", 1302);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v23 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 68, "stop_block_invoke");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
}

void sub_24BAC6008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  char *v36;
  char *v38;
  uint64_t v39;

  v38 = a28;
  if (a28 == v36)
  {
    v39 = 4;
    v38 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v39 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v38 + 8 * v39))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t gnss::GnssAdaptDevice::Ga00_08GnssStopPositioning(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char __str[966];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 89))
    return 14;
  if (a2 == 1)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Internal Stop Request\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga00_08GnssStopPositioning");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    atomic_store(1u, (unsigned __int8 *)(a1 + 91));
  }
  v4 = Gnm_StopPosnReq(0);
  if ((_DWORD)v4)
  {
    v5 = v4;
    gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(a1, v4, 1u);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx StopPosReq,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "Ga00_08GnssStopPositioning", 257, v5);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Processed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 73, "Ga00_08GnssStopPositioning");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if (gnssOsa_SemWaitTimeOut(*(NSObject **)(a1 + 360), 0x1F4u))
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx StopReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "Ga00_08GnssStopPositioning", 257);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      v5 = 11;
    }
    else
    {
      v5 = 0;
    }
    *(_BYTE *)(a1 + 89) = 0;
  }
  return v5;
}

void gnss::GnssAdaptDevice::deleteGnssData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD block[5];
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;
  char __str[966];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a3 + 24))
  {
    v4 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice14deleteGnssDataEyNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_43;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
    v11 = a2;
    dispatch_async(v4, block);
    v5 = v10;
    if (v10 == v9)
    {
      v6 = 4;
      v5 = v9;
    }
    else
    {
      if (!v10)
        return;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "deleteGnssData", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void ___ZN4gnss15GnssAdaptDevice14deleteGnssDataEyNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[24];
  _BYTE *v39;
  _BYTE v40[24];
  _BYTE *v41;
  _BYTE v42[24];
  _BYTE *v43;
  _BYTE v44[24];
  _BYTE *v45;
  char __str[966];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "deleteGnssData_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!*(_BYTE *)(v2 + 88))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v44, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v44, (uint64_t)"deleteGnssData_block_invoke");
    v7 = v45;
    if (v45 == v44)
    {
      v8 = 4;
      v7 = v44;
    }
    else
    {
      if (!v45)
      {
LABEL_80:
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          v33 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "ADP", 69, "deleteGnssData_block_invoke", 1302);
          gnssOsa_PrintLog(__str, 1, 1, 0);
          if (g_LbsOsaTrace_Config >= 5)
          {
            bzero(__str, 0x3C6uLL);
            v34 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "ADP", 68, "deleteGnssData_block_invoke");
            gnssOsa_PrintLog(__str, 5, 1, 0);
          }
        }
        return;
      }
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
    goto LABEL_80;
  }
  v4 = *(_QWORD *)(a1 + 72);
  if (g_LbsOsaTrace_Config >= 3)
  {
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Flags,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 77, "deleteGnssData_block_invoke", v4);
    gnssOsa_PrintLog(__str, 3, 1, 0);
  }
  if ((v4 & 0x4000) == 0)
  {
    v6 = 0;
    if ((v4 & 2) == 0)
      goto LABEL_17;
    goto LABEL_15;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Eph\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 73, "deleteGnssData_block_invoke");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  v6 = 1;
  if ((v4 & 2) != 0)
  {
LABEL_15:
    v6 |= 2u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Alm\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
LABEL_17:
  if ((v4 & 4) != 0)
  {
    v6 |= 4u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Pos\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 8) != 0)
  {
    v6 |= 8u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v12 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Time\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 0x10) != 0)
  {
    v6 |= 0x10u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v13 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Iono\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 0x20) != 0)
  {
    v6 |= 0x20u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v14 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: UTC\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 0x40) != 0)
  {
    v6 |= 0x40u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v15 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: SvHealth\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 0x80) != 0)
  {
    v6 |= 0x100u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v16 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Clear_GNSS_FW_NV_Data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 0x400) != 0)
  {
    v6 |= 0x10000u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v17 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Cold\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 0x800) != 0)
  {
    v6 |= 0x20000u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v18 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Warm\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 0x1000) != 0)
  {
    v6 |= 0x40000u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v19 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Factory\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 0x100) != 0)
  {
    v6 |= 0x200u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v20 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: RTI\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 0x200) != 0)
  {
    v6 |= 0x400u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v21 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ORB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 0x2000) != 0)
  {
    v6 |= 0x800u;
    if (g_LbsOsaTrace_Config < 4)
      goto LABEL_59;
    bzero(__str, 0x3C6uLL);
    v24 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ME_TTICK\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 73, "deleteGnssData_block_invoke");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  else if (!v6)
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v42, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v42, (uint64_t)"deleteGnssData_block_invoke");
    v22 = v43;
    if (v43 == v42)
    {
      v23 = 4;
      v22 = v42;
    }
    else
    {
      if (!v43)
        goto LABEL_87;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_87:
    if (g_LbsOsaTrace_Config > 1)
    {
      bzero(__str, 0x3C6uLL);
      v36 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx field 0\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "ADP", 87, "deleteGnssData_block_invoke", 770);
      gnssOsa_PrintLog(__str, 2, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        v37 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "ADP", 68, "deleteGnssData_block_invoke");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
    return;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v25 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Fields,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 73, "deleteGnssData_block_invoke", v6);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
LABEL_59:
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v38, a1 + 40);
  v41 = 0;
  gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(v2, 16, (uint64_t)v38);
  v26 = v41;
  if (v41 == v40)
  {
    v27 = 4;
    v26 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_64;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_64:
  v28 = v39;
  if (v39 == v38)
  {
    v29 = 4;
    v28 = v38;
    goto LABEL_68;
  }
  if (v39)
  {
    v29 = 5;
LABEL_68:
    (*(void (**)(void))(*v28 + 8 * v29))();
  }
  v30 = Gnm_ClearGNSSCache(v6);
  if (v30)
  {
    gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, v30, 0x10u);
    if (!g_LbsOsaTrace_Config)
      return;
    bzero(__str, 0x3C6uLL);
    v31 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ClearCache,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "ADP", 69, "deleteGnssData_block_invoke", 257, v30);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    if (g_LbsOsaTrace_Config < 5)
      return;
    goto LABEL_84;
  }
  if (!gnssOsa_SemWaitTimeOut(*(NSObject **)(v2 + 360), 0x1F4u))
  {
    if (g_LbsOsaTrace_Config < 5)
      return;
    goto LABEL_84;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v32 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ClearCache\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "ADP", 69, "deleteGnssData_block_invoke", 257);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, 0xBu, 0x10u);
  if (g_LbsOsaTrace_Config >= 5)
  {
LABEL_84:
    bzero(__str, 0x3C6uLL);
    v35 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "ADP", 68, "deleteGnssData_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
}

void sub_24BAC72C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  char *v30;
  char *v32;
  uint64_t v33;

  v32 = a26;
  if (a26 == v30)
  {
    v33 = 4;
    v32 = &a23;
  }
  else
  {
    if (!a26)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(gnss::GnssAdaptDevice *this)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = 0;
  v5 = &v4;
  v6 = 0x2000000000;
  v7 = 0;
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = ___ZN4gnss15GnssAdaptDevice24Ga00_00GetDeviceInstanceEv_block_invoke;
  v3[3] = &unk_251CDB658;
  v3[4] = &v4;
  dispatch_sync((dispatch_queue_t)g_GnssGlobalStaticQueue, v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t ___ZN4gnss15GnssAdaptDevice24Ga00_00GetDeviceInstanceEv_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = gp_GnssAdaptDeviceInstance;
  return result;
}

uint64_t gnss::GnssAdaptDevice::Ga00_01GnssInit(dispatch_semaphore_s **this)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v13[950];
  char __str[966];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!GNS_Initialize())
    return 0;
  if (GNS_EaInitialize((uint64_t)gnss::GnssAdaptDevice::Ga03_00RegisterGnsEaStatusResponse) != 1)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EaInit Resp,%u\n", v9);
      goto LABEL_14;
    }
    return 0;
  }
  if (GNS_EeInitialize((uint64_t)gnss::GnssAdaptDevice::Ga04_00RegisterGnsEeStatusResponse) != 1)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EeInit Resp,%u\n", v10);
      goto LABEL_14;
    }
    return 0;
  }
  v12 = 0;
  if ((Ga05_GetPlatformType((unsigned __int8 *)&v12) & 1) == 0)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Invalid Pltfm Type\n");
      goto LABEL_14;
    }
    return 0;
  }
  if (Gnm_HwInitialize(v12, (uint64_t)gnss::GnssAdaptDevice::Ga00_07RegisterHWStatusInd, 0))
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InitStatusCb Resp,%u\n", v8);
LABEL_14:
      gnssOsa_PrintLog(__str, 1, 1, 0);
      return 0;
    }
    return 0;
  }
  if (Gnm_RegisterApiStatusCb((uint64_t)gnss::GnssAdaptDevice::Ga07_17RegisterGnmStatusResponse))
  {
    if (!g_LbsOsaTrace_Config)
      return 0;
    bzero(__str, 0x3C6uLL);
    v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ApiStatusCb Resp,%u\n", v11);
    goto LABEL_14;
  }
  if (!gnssOsa_SemInit(this + 45, 0))
  {
    snprintf(v13, 0x3B6uLL, "ASSERT,%s,%d,%s", "Ga00_01GnssInit", 508, "Semaphore creation failed");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 69, "Ga00_01GnssInit", v13);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("Ga00_01GnssInit", "ga00GnssDevice.cpp", 508, "false && \"Semaphore creation failed\"");
  }
  if (g_LbsOsaTrace_Config < 3)
    return 1;
  bzero(__str, 0x3C6uLL);
  v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  snprintf(getVersionString::a_Version, 0x200uLL, "Device Interface %.2f,host,%s,FW,%s", 25.02, "v2.31.0.2024-06-15", ga_HwVersion);
  v5 = (*(uint64_t (**)(dispatch_semaphore_s *))(*(_QWORD *)this[3] + 72))(this[3]);
  v6 = (*(uint64_t (**)(dispatch_semaphore_s *))(*(_QWORD *)this[5] + 64))(this[5]);
  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #Init,%s ,logmask,%llu, dbgmask,%llu\n", v4, "ADP", 77, "Ga00_01GnssInit", getVersionString::a_Version, v5, v6);
  v2 = 1;
  gnssOsa_PrintLog(__str, 3, 1, 0);
  return v2;
}

void gnss::GnssAdaptDevice::Ga00_07RegisterHWStatusInd(gnss::GnssAdaptDevice *a1, int a2, char *a3)
{
  char v5;
  uint64_t DeviceInstance;

  v5 = (char)a1;
  DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(a1);
  if (DeviceInstance)
    gnss::GnssAdaptDevice::Ga07_05HandleGnssHwStatusInd(DeviceInstance, v5, a2, a3);
}

uint64_t ___ZN4gnss15GnssAdaptDevice23Ga00_04HandleDeviceInitENS_17e_Ga_GnssInitTypeE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v3 = 8;
  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

void gnss::GnssAdaptDevice::Ga00_10GnssSetHwVersionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  char __str[966];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v4 = 0;
  Ga05_GetPlatformType(&v4);
  if (v4)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Invalid Pltfm,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 69, "Ga00_10GnssSetHwVersionInfo", 770, v4);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else
  {
    snprintf(ga_HwVersion, 0x200uLL, "%s", (const char *)(a2 + 2));
  }
}

_QWORD *newGnssDevice(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  dispatch_queue_t v15;
  uint64_t v16;
  NSObject *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD block[5];
  int v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[5];
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (!*a1)
    return 0;
  v6 = (_QWORD *)operator new();
  v7 = *(_QWORD *)(*a1 + 8);
  *(_QWORD *)(*a1 + 8) = 0;
  v8 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)(*a1 + 16) = 0;
  v9 = *(_QWORD *)(*a1 + 32);
  *(_QWORD *)(*a1 + 32) = 0;
  v10 = *(_QWORD *)(*a1 + 40);
  *(_QWORD *)(*a1 + 40) = 0;
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 48);
  *(_QWORD *)(v11 + 48) = 0;
  v13 = *a2;
  *a2 = 0;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v26, a3);
  *v6 = &off_251CDB2A8;
  v6[1] = v7;
  v6[2] = v8;
  v6[3] = v9;
  v6[4] = v10;
  v6[5] = v12;
  v6[10] = 0;
  v6[13] = 0;
  v6[6] = v13;
  v6[12] = v6 + 13;
  v6[14] = 0;
  *(_QWORD *)((char *)v6 + 86) = 0;
  v6[16] = 0;
  v6[15] = v6 + 16;
  v6[24] = 0;
  v6[28] = 0;
  v6[32] = 0;
  v6[36] = 0;
  v6[40] = 0;
  v6[17] = 0;
  v6[18] = 0;
  v6[19] = 0;
  v6[20] = 0;
  v6[44] = 0;
  v6[45] = 0;
  if (v27)
  {
    v14 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
    v6[19] = dispatch_queue_create("com.gnss.AdapterMainQueue", v14);
    g_GnssGlobalStaticQueue = (uint64_t)dispatch_queue_create("com.gnss.AdaptGlobalStaticQueue", v14);
    v15 = dispatch_queue_create("com.gnss.AdaptOutQueue", v14);
    v6[20] = v15;
    if (!v6[19] || !v15 || !g_GnssGlobalStaticQueue)
    {
      v25 = 2;
      if (!v27)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, int *))(*v27 + 48))(v27, &v25);
      goto LABEL_19;
    }
    v16 = MEMORY[0x24BDAC760];
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZN4gnss15GnssAdaptDeviceC2ENSt3__110unique_ptrIN7GnssHal4GpioENS1_14default_deleteIS4_EEEENS2_INS3_4CommENS5_IS8_EEEENS2_INS3_6LoggerENS5_ISB_EEEENS2_INS3_9NvStorageENS5_ISE_EEEENS2_INS3_10ExtensionsENS5_ISH_EEEENS2_INS_9Emergency4Supl17ConnectionManagerENS5_ISM_EEEENS1_8functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp;
    block[4] = v6;
    dispatch_sync((dispatch_queue_t)g_GnssGlobalStaticQueue, block);
    v17 = v6[19];
    v28[0] = v16;
    v28[1] = 1174405120;
    v28[2] = ___ZN4gnss15GnssAdaptDeviceC2ENSt3__110unique_ptrIN7GnssHal4GpioENS1_14default_deleteIS4_EEEENS2_INS3_4CommENS5_IS8_EEEENS2_INS3_6LoggerENS5_ISB_EEEENS2_INS3_9NvStorageENS5_ISE_EEEENS2_INS3_10ExtensionsENS5_ISH_EEEENS2_INS_9Emergency4Supl17ConnectionManagerENS5_ISM_EEEENS1_8functionIFvNS_6ResultEEEE_block_invoke_2;
    v28[3] = &__block_descriptor_tmp_3;
    v28[4] = v6;
    v18 = v29;
    v19 = (uint64_t)v27;
    if (v27)
    {
      if (v27 == v26)
      {
        v30 = v29;
        (*(void (**)(_QWORD *, _BYTE *))(v26[0] + 24))(v26, v29);
LABEL_14:
        dispatch_async(v17, v28);
        if (v30 == v29)
        {
          v20 = 4;
        }
        else
        {
          if (!v30)
          {
LABEL_19:
            v21 = v27;
            if (v27 == v26)
            {
              v22 = 4;
              v21 = v26;
              goto LABEL_23;
            }
            if (v27)
            {
              v22 = 5;
LABEL_23:
              (*(void (**)(void))(*v21 + 8 * v22))();
              return v6;
            }
            return v6;
          }
          v20 = 5;
          v18 = v30;
        }
        (*(void (**)(_QWORD *))(*v18 + 8 * v20))(v18);
        goto LABEL_19;
      }
      v19 = (*(uint64_t (**)(void))(*v27 + 16))();
    }
    v30 = (_BYTE *)v19;
    goto LABEL_14;
  }
  return v6;
}

void sub_24BAC7E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD **v30;
  _QWORD **v31;
  _QWORD *v32;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;

  if ((_QWORD *)*v32 == v26)
  {
    v34 = 4;
  }
  else
  {
    if (!*v32)
      goto LABEL_6;
    v34 = 5;
    v26 = (_QWORD *)*v32;
  }
  (*(void (**)(_QWORD *))(*v26 + 8 * v34))(v26);
LABEL_6:
  v35 = (_QWORD *)v25[40];
  if (v35 == a10)
  {
    v36 = 4;
  }
  else
  {
    if (!v35)
      goto LABEL_11;
    v36 = 5;
    a10 = (_QWORD *)v25[40];
  }
  (*(void (**)(void))(*a10 + 8 * v36))();
LABEL_11:
  v37 = (_QWORD *)v25[36];
  if (v37 == a11)
  {
    v38 = 4;
  }
  else
  {
    if (!v37)
      goto LABEL_16;
    v38 = 5;
    a11 = (_QWORD *)v25[36];
  }
  (*(void (**)(void))(*a11 + 8 * v38))();
LABEL_16:
  v39 = (_QWORD *)v25[32];
  if (v39 == a12)
  {
    v40 = 4;
  }
  else
  {
    if (!v39)
      goto LABEL_21;
    v40 = 5;
    a12 = (_QWORD *)v25[32];
  }
  (*(void (**)(void))(*a12 + 8 * v40))();
LABEL_21:
  v41 = (_QWORD *)v25[28];
  if (v41 == a13)
  {
    v42 = 4;
  }
  else
  {
    if (!v41)
      goto LABEL_26;
    v42 = 5;
    a13 = (_QWORD *)v25[28];
  }
  (*(void (**)(void))(*a13 + 8 * v42))();
LABEL_26:
  v43 = (_QWORD *)v25[24];
  if (v43 == a14)
  {
    v44 = 4;
  }
  else
  {
    if (!v43)
      goto LABEL_31;
    v44 = 5;
    a14 = (_QWORD *)v25[24];
  }
  (*(void (**)(void))(*a14 + 8 * v44))();
LABEL_31:
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy(v28, *v31);
  std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy(v27, *v30);
  if ((_QWORD *)*v29 == a15)
  {
    v45 = 4;
  }
  else
  {
    if (!*v29)
      goto LABEL_36;
    v45 = 5;
    a15 = (_QWORD *)*v29;
  }
  (*(void (**)(void))(*a15 + 8 * v45))();
LABEL_36:
  v46 = v25[6];
  v25[6] = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 48))(v46);
  v47 = v25[5];
  v25[5] = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = v25[4];
  v25[4] = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = v25[3];
  v25[3] = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = v25[2];
  v25[2] = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = v25[1];
  v25[1] = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = a25;
  if (a25 == &a22)
  {
    v53 = 4;
    v52 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_53;
    v53 = 5;
  }
  (*(void (**)(char *))(*(_QWORD *)v52 + 8 * v53))(v52);
LABEL_53:
  MEMORY[0x24BD2D7C8](v25, 0x10A1C409636C9D0);
  _Unwind_Resume(a1);
}

uint64_t getGnssDeviceVersion()
{
  return 2502;
}

uint64_t gnss::Device::getObjectVersionNumber(gnss::Device *this)
{
  return 2502;
}

uint64_t gnss::Device::setEmergencyConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v5 = 7;
  v3 = *(_QWORD *)(a3 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v3 + 48))(v3, &v5);
}

uint64_t gnss::Device::startEmergencyPositionRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v5 = 7;
  v3 = *(_QWORD *)(a3 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v3 + 48))(v3, &v5);
}

uint64_t gnss::Device::setSuplInit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v5 = 7;
  v3 = *(_QWORD *)(a3 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v3 + 48))(v3, &v5);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
}

{
  std::exception::~exception(this);
  JUMPOUT(0x24BD2D7C8);
}

void std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<e_Gnm_Api const,gnss::s_StatusCB>,0>(a2 + 4);
    operator delete(a2);
  }
}

_QWORD *std::__destroy_at[abi:ne180100]<std::pair<e_Gnm_Api const,gnss::s_StatusCB>,0>(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 5;
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy(a1, a2[1]);
    v4 = (_QWORD *)a2[8];
    if (v4 == a2 + 5)
    {
      v5 = 4;
      v4 = a2 + 5;
    }
    else
    {
      if (!v4)
      {
LABEL_8:
        operator delete(a2);
        return;
      }
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
    goto LABEL_8;
  }
}

_QWORD *std::__function::__value_func<void ()(gnss::Result)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_24BAC8794(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

BOOL KFSt_Meas_Update(unsigned int a1, unsigned int a2, unsigned __int8 *a3, double *a4, _WORD *a5, double a6)
{
  double v9;
  double v10;
  double v11;
  int v12;
  double v14;
  _OWORD v15[16];
  uint64_t v16;
  double v17[32];
  double v18[34];

  v18[33] = *(double *)MEMORY[0x24BDAC8D0];
  if (*((int *)a3 + 1) < 1)
    return 0;
  a3[16] = 0;
  if (*a3)
  {
    v9 = *((double *)a3 + 4);
    v10 = a6 - *((double *)a3 + 3);
    memset(v15, 0, sizeof(v15));
    v14 = 0.0;
    *((double *)a3 + 6) = v10;
    v16 = 0;
    *((_QWORD *)v15 + a1) = 0x3FF0000000000000;
    *((double *)v15 + a2) = v10;
    umeas((_BOOL8)a4, a2, v9, (double *)v15, v18, v17, &v14, *((double *)a3 + 7));
    v11 = v14;
    if (v14 <= 0.0)
    {
      v12 = 0;
      *a3 = 0;
      a3[16] = 1;
      ++*a5;
    }
    else
    {
      v11 = *((double *)a3 + 4) * (v14 * (v18[a2] * v18[a2]));
      v12 = *a3;
    }
    *((double *)a3 + 8) = v11;
  }
  else
  {
    v12 = 0;
  }
  return v12 != 0;
}

uint64_t Taylor_sin_cos(uint64_t result, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;

  if ((int)result < 1)
  {
    if ((int)result >= -51472)
    {
      v11 = (unsigned __int16)(1029 - result) / 0x80Bu;
      v12 = g_Table_sinQ15[v11];
      v9 = g_Table_sinQ15[25 - v11];
      v6 = result + ((16471 * v11) >> 3);
      v4 = -v12;
      goto LABEL_9;
    }
    v7 = ((int)result + 103973) / 2059;
    v8 = g_Table_sinQ15[v7];
    v5 = g_Table_sinQ15[25 - v7];
    v6 = result + 103973 - ((16471 * v7) >> 3) - 1029;
    v4 = -v8;
  }
  else
  {
    if (result <= 0xC910)
    {
      v10 = (result + 1029) / 0x80BuLL;
      v4 = g_Table_sinQ15[v10];
      v9 = g_Table_sinQ15[(25 - v10)];
      v6 = result - ((16471 * v10) >> 3);
      goto LABEL_9;
    }
    v3 = (103973 - (int)result) / 2059;
    v4 = g_Table_sinQ15[v3];
    v5 = g_Table_sinQ15[25 - v3];
    v6 = result + ((16471 * v3) >> 3) - 102944;
  }
  v9 = -v5;
LABEL_9:
  v13 = (v6 * v6) >> 16;
  *a2 = v4 + ((int)(v6 * v9 - v13 * v4) >> 15);
  *a3 = v9 - ((int)(v6 * v4 + v13 * v9) >> 15);
  return result;
}

BOOL HswUtil_AddNmeaCS(char *a1, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v7;
  uint64_t v8;
  char *v9;
  char v10;

  v4 = *a3;
  v5 = v4 + 4;
  if ((int)v4 + 4 <= a2)
  {
    if (v4 < 2)
    {
      v7 = 0;
    }
    else
    {
      LOBYTE(v7) = 0;
      v8 = v4 - 1;
      v9 = a1 + 1;
      do
      {
        v10 = *v9++;
        LOBYTE(v7) = v10 ^ v7;
        --v8;
      }
      while (v8);
      v7 = v7;
    }
    snprintf(&a1[v4], a2 - v4, "*%02x\n", v7);
    *a3 += 4;
  }
  return v5 <= a2;
}

void Pre_Positioning(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  double v22;
  unsigned __int8 *v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  double v30;
  uint64_t v31;
  double v32;
  double *v33;
  double v34;
  double *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  float64x2_t v48;
  float64_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  unint64_t v55;
  double v56;
  int v57;
  double v58;
  unsigned int v59;
  float64x2_t v60;
  double v61;
  double v62;
  uint64_t v63;
  int32x2_t v64;
  int64x2_t v65;
  double v66;
  __int16 v67;
  __int16 v68;
  __int16 v69;
  double v70;
  double v71;
  double *v72;
  unsigned int v73;
  int v74;
  double v75;
  double v76;
  int v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  BOOL v95;
  int v96;
  int v97;
  double v98;
  unsigned int v99;
  double v100;
  double v101;
  double v102;
  int v103;
  double v104;
  int v105;
  double v106;
  unsigned int v107;
  int v108;
  __int16 v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  BOOL v117;
  BOOL v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  BOOL v132;
  double v133;
  double v134;
  double v135;
  double v136;
  __int16 v137;
  int v138;
  int v139;
  double v140;
  double v141;
  int v142;
  double v143;
  double v144;
  double v145;
  double v146;
  __int16 v147;
  __int16 v148;
  double v149;
  double v150;
  double v151;
  __int16 v152;
  __int16 v153;
  double v154;
  double v155;
  int v156;
  int v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  unsigned __int8 v164;
  unsigned __int8 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  int v172;
  unsigned int v173;
  int v174;
  int v175;
  unsigned int v176;
  uint64_t v177;
  int v178;
  char v179;
  _BYTE *v180;
  uint64_t v181;
  _WORD *v182;
  unsigned int v183;
  uint64_t v184;
  _OWORD *v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  char v192;
  int v193;
  unsigned int v194;
  int v195;
  int v196;
  int v197;
  unsigned int v198;
  unsigned __int8 v199;
  char v200;
  BOOL v201;
  unsigned int v202;
  uint64_t v203;
  _WORD *v204;
  __int16 *v205;
  __int16 v206;
  uint64_t v207;
  double *v208;
  int v209;
  int v210;
  BOOL v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t i;
  int Constell_Prn;
  _BOOL4 v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  _BYTE *v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  double v232;
  double v233;
  int v234;
  int v235;
  double v236;
  uint64_t j;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _OWORD *v246;
  int v247;
  int v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  double v256;
  double v257;
  _DWORD *v258;
  int v259;
  double v260;
  uint64_t v261;
  _BOOL4 v262;
  uint64_t v263;
  int v264;
  unsigned __int8 v265;
  int v266;
  unsigned int v267;
  _BOOL4 v268;
  BOOL v269;
  unsigned __int8 v270;
  uint64_t v271;
  __int128 v272;
  __int128 v273;
  int v274;
  int v275;
  uint64_t v276;
  double v277;
  unint64_t v278;
  uint64_t v279;
  _DWORD *v280;
  uint64_t v281;
  int v282;
  __int16 v283;
  int v284;
  BOOL v285;
  BOOL v286;
  unsigned int v287;
  int v288;
  unsigned __int8 *v289;
  char v290;
  __int128 v291;
  const float *v292;
  uint64_t v293;
  float32x4_t v294;
  uint64_t k;
  uint64_t v296;
  unsigned int *v297;
  int v298;
  const float *v299;
  float32x4_t v300;
  uint64_t m;
  char *GNSS_SV_Str;
  uint64_t v303;
  __int16 v304;
  unsigned int v305;
  uint64_t v306;
  int v307;
  unsigned __int8 v308;
  unint64_t n;
  unint64_t v310;
  _WORD *v311;
  __int16 v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  int v316;
  uint64_t v317;
  int v318;
  uint64_t ii;
  int v320;
  int v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  int v325;
  int v326;
  int v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unsigned __int16 *v338;
  __int16 v339;
  int v340;
  int v341;
  _BYTE *v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  _DWORD *v350;
  uint64_t v351;
  char v352;
  int v353;
  int v354;
  int v355;
  uint64_t v356;
  _BOOL4 v357;
  _BOOL4 v358;
  int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  __int128 v364;
  uint64_t v365;
  _WORD *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  _OWORD *v370;
  float64x2_t *v371;
  __int16 v372;
  int v373;
  int v374;
  _BOOL4 v375;
  int v376;
  int __dst;
  _OWORD *v378;
  uint64_t v379;
  double *v380;
  uint64_t v381;
  uint64_t v382;
  double v383;
  int v384;
  uint64_t v385;
  float64_t v386;
  uint64_t v387;
  unsigned __int8 *v388;
  unsigned __int8 *v389;
  int v390;
  __int16 v391;
  double v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  _OWORD v405[3];
  double v406[2];
  _OWORD v407[8];
  __int16 v408;
  _DWORD v409[3];
  _OWORD v410[12];
  _OWORD v411[12];
  _OWORD v412[2];
  unsigned __int8 v413[16];
  _OWORD v414[13];
  _OWORD v415[2];
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  _BYTE v426[26];
  _OWORD __src[55];
  _OWORD __b[109];
  uint64_t v429;

  v10 = MEMORY[0x24BDAC7A8](a1);
  v379 = v12;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = (double *)v19;
  v21 = v10;
  v429 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(v19 + 332) = 0;
  __dst = *(__int16 *)(v10 + 6);
  v22 = *(double *)(v10 + 16);
  v405[2] = *(_OWORD *)(v10 + 24);
  v406[0] = *(double *)(v10 + 40);
  v389 = v23;
  v384 = *v23;
  *(_BYTE *)v10 = *(_BYTE *)(v15 + 18);
  *(_WORD *)(v10 + 6) = *(_WORD *)(v15 + 62);
  *(_DWORD *)(v19 + 324) = *(_DWORD *)(v15 + 56);
  *(_DWORD *)(v19 + 208) = *(_DWORD *)(v15 + 32);
  *(_QWORD *)(v19 + 128) = *(_QWORD *)(v15 + 48);
  *(_DWORD *)(v19 + 328) = *(_DWORD *)(v15 + 204);
  *(_QWORD *)v19 = *(_QWORD *)(v15 + 224);
  *(_QWORD *)(v19 + 8) = *(_QWORD *)(v15 + 232);
  *(_QWORD *)(v19 + 16) = *(_QWORD *)(v15 + 240);
  *(double *)(v19 + 24) = *(double *)(v15 + 240) - *(double *)(v15 + 248);
  v24 = *(_OWORD *)(v15 + 80);
  *(_QWORD *)(v10 + 40) = *(_QWORD *)(v15 + 96);
  *(_OWORD *)(v10 + 24) = v24;
  v25 = *(_QWORD *)(v15 + 120);
  *(_OWORD *)(v19 + 32) = *(_OWORD *)(v15 + 104);
  *(_QWORD *)(v19 + 48) = v25;
  *(_OWORD *)(v19 + 136) = *(_OWORD *)(v15 + 256);
  v27 = *(_OWORD *)(v15 + 288);
  v26 = *(_OWORD *)(v15 + 304);
  v28 = *(_QWORD *)(v15 + 320);
  *(_OWORD *)(v19 + 152) = *(_OWORD *)(v15 + 272);
  *(_QWORD *)(v19 + 200) = v28;
  *(_OWORD *)(v19 + 184) = v26;
  *(_OWORD *)(v19 + 168) = v27;
  v29 = *(_OWORD *)(v15 + 336);
  *(_QWORD *)(v19 + 72) = *(_QWORD *)(v15 + 352);
  *(_OWORD *)(v19 + 56) = v29;
  v30 = *(double *)(v15 + 152);
  *(double *)(v19 + 96) = v30;
  v31 = v19 + 96;
  v382 = v11;
  *(_QWORD *)(v19 + 80) = *(_QWORD *)(v15 + 360);
  *(_QWORD *)(v19 + 88) = *(_QWORD *)(v15 + 992);
  v32 = *(double *)(v15 + 160);
  *(double *)(v19 + 112) = v32;
  v33 = (double *)(v19 + 112);
  v34 = *(double *)(v15 + 168);
  *(double *)(v19 + 120) = v34;
  v35 = (double *)(v19 + 120);
  *(_QWORD *)&__src[0] = 0;
  *(_QWORD *)(v19 + 104) = *(_QWORD *)(v15 + 184);
  v36 = 0.0;
  v37 = 0.0;
  if (*(_BYTE *)(v11 + 17192))
    v37 = (double)-*(_DWORD *)(v11 + 17132) * 9.31322575e-10;
  v368 = v11 + 17132;
  if (*(int *)(v11 + 47496) >= 1)
    v36 = *(double *)(v11 + 47512) * 0.000000001;
  v369 = v11 + 47496;
  *(_QWORD *)&__b[0] = 0;
  if (R8_EQ((const double *)v31, (const double *)__b))
  {
    *(_QWORD *)&__b[0] = 0;
    if (R8_EQ(v33, (const double *)__b))
    {
      *(_QWORD *)&__b[0] = 0;
      v38 = 0.0;
      if (R8_EQ(v35, (const double *)__b))
        goto LABEL_12;
      v38 = v34 + v36;
    }
    else
    {
      v38 = v32 + v37;
    }
    *(double *)__src = v38;
  }
  else
  {
    *(double *)__src = v30;
    v38 = v30;
  }
LABEL_12:
  *(_QWORD *)&__b[0] = 0;
  if (!R8_EQ((const double *)__src, (const double *)__b))
  {
    *(_QWORD *)&__b[0] = 0;
    if (R8_EQ((const double *)v31, (const double *)__b))
    {
      *(double *)v31 = v38;
      v30 = v38;
    }
    *(_QWORD *)&__b[0] = 0;
    if (R8_EQ(v33, (const double *)__b))
    {
      v32 = v38 - v37;
      *v33 = v38 - v37;
    }
    *(_QWORD *)&__b[0] = 0;
    if (R8_EQ(v35, (const double *)__b))
      *v35 = v38 - v36;
  }
  *(_QWORD *)&__b[0] = 0;
  v380 = v20;
  if (R8_EQ((const double *)__src, (const double *)__b))
  {
    v39 = 0.0;
  }
  else
  {
    *(_QWORD *)&v415[0] = 0;
    v39 = 0.0;
    if (!R8_EQ((const double *)v31, (const double *)v415))
    {
      *(_QWORD *)&__b[0] = 0;
      if (!R8_EQ(v33, (const double *)__b))
      {
        v40 = v30 - v32;
        v41 = vabdd_f64(v30 - v32, v37);
        if (v41 > 0.0000000333564095)
        {
          *v33 = v38 - v37;
          EvCrt_v("PP_SetReceiverPos:  ClkGlon deviation %f m,  New ClkGlon %f m", (v40 - v37) * 299792458.0, (v38 - v37) * 299792458.0);
          v39 = v41;
        }
      }
      *(_QWORD *)&__b[0] = 0;
      if (!R8_EQ(v35, (const double *)__b))
      {
        v42 = *(double *)v31 - *v35;
        v43 = vabdd_f64(v42, v36);
        if (v43 > 0.0000000333564095)
        {
          *v35 = v38 - v36;
          v39 = v39 + v43;
          EvCrt_v("PP_SetReceiverPos:  ClkBDS deviation %f m,  New ClkBDS %f m", (v42 - v36) * 299792458.0, (v38 - v36) * 299792458.0);
        }
      }
    }
  }
  v20[39] = Zen_Trop_Delay_STANAG_4294(v20[3]);
  v44 = *(double *)(v16 + 864);
  v20[27] = v44;
  v45 = *(double *)(v16 + 872);
  v20[28] = v45;
  *(_OWORD *)(v20 + 29) = *(_OWORD *)(v16 + 840);
  v46 = *(double *)(v16 + 920);
  v47 = *(double *)(v16 + 904);
  v48.f64[0] = *(float64_t *)(v16 + 888);
  v49 = *(double *)(v16 + 896);
  v20[35] = *(double *)(v16 + 912);
  *((_DWORD *)v20 + 74) = *(_DWORD *)(v16 + 12);
  *(_QWORD *)(v31 + 204) = *(_QWORD *)(v16 + 20);
  if (v39 > 0.0)
  {
    v50 = v39 * 0.5 * 299792458.0 * (v39 * 0.5 * 299792458.0);
    v51 = sqrt(v50 + v44 * v44);
    v52 = sqrt(v50 + v45 * v45);
    v20[27] = v51;
    v20[28] = v52;
    v386 = v48.f64[0];
    v383 = v49;
    EvCrt_v("PP_SetReceiverPos:  New  B_Acc %f -> %f  T_Acc %f -> %f", v44, v51, v45, v52);
    v49 = v383;
    v48.f64[0] = v386;
  }
  if (*(_BYTE *)(v16 + 388))
  {
    v53 = 0.0;
    v54 = 18;
    do
    {
      v53 = v53 + *(double *)(v16 + 8 * v54) * *(double *)(v16 + 8 * v54);
      v55 = v54 - 15;
      --v54;
    }
    while (v55 > 1);
    v56 = sqrt(v53) * *(double *)(v16 + 72);
    v47 = v47 + v56;
    v48.f64[0] = v48.f64[0] + v56;
  }
  v57 = *(_DWORD *)(v21 + 8);
  if (!v57)
  {
    v57 = *((_DWORD *)v20 + 52);
    *(_DWORD *)(v21 + 8) = v57;
  }
  *((_DWORD *)v20 + 84) = v57;
  *(double *)(v21 + 16) = v20[16] - v20[12];
  v58 = *(double *)(v18 + 1704) * 99930819.3;
  if (*(_DWORD *)v18 || *(_DWORD *)(v18 + 8))
  {
    v59 = *(_DWORD *)(v31 + 204);
    v60 = (float64x2_t)xmmword_24BC09110;
    v61 = 10.0;
    v62 = 5.0;
    switch(v59)
    {
      case 0u:
      case 1u:
        goto LABEL_47;
      case 2u:
        break;
      case 3u:
        v60 = (float64x2_t)xmmword_24BC09160;
        v61 = 15.0;
        break;
      case 4u:
        v60 = (float64x2_t)xmmword_24BC09150;
        v61 = 25.0;
        break;
      case 5u:
        v60 = (float64x2_t)xmmword_24BC09140;
        *(double *)&v63 = 50.0;
        goto LABEL_44;
      case 6u:
        v60 = (float64x2_t)xmmword_24BC09130;
        *(double *)&v63 = 200.0;
LABEL_44:
        v61 = *(double *)&v63;
        break;
      case 7u:
        v60 = (float64x2_t)xmmword_24BC09120;
        v61 = 350.0;
        break;
      case 8u:
        v60 = (float64x2_t)vdupq_n_s64(0x412E848000000000uLL);
        v61 = 1000000.0;
        break;
      default:
        v62 = 1000000.0;
LABEL_47:
        v64 = vdup_n_s32(v59 < 2);
        v65.i64[0] = v64.u32[0];
        v65.i64[1] = v64.u32[1];
        v60 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v65, 0x3FuLL)), (int8x16_t)xmmword_24BC09100, (int8x16_t)vdupq_n_s64(0x412E848000000000uLL));
        v61 = v62;
        break;
    }
  }
  else
  {
    v60 = (float64x2_t)xmmword_24BC09100;
    v61 = 5.0;
  }
  if (v46 > v58)
  {
    v20[13] = *(double *)(v18 + 1696);
    v46 = v58;
  }
  v370 = v20 + 4;
  v371 = (float64x2_t *)(v21 + 24);
  v20[32] = v46 * 5.25503547;
  if (v47 > v61)
  {
    if (*(_DWORD *)(v31 + 204) < 4u || v20[10] < v61 + v61)
    {
      v20[10] = 0.0;
      *((_OWORD *)v20 + 3) = 0u;
      *((_OWORD *)v20 + 4) = 0u;
      *v370 = 0u;
    }
    v47 = v61;
  }
  v381 = v21;
  v66 = sqrt(v47 * v47 + 0.0 + v46 * v46) * 5.25503547;
  if (v66 <= 1.0)
    v66 = 1.0;
  v20[31] = v66;
  v48.f64[1] = v49;
  *(float64x2_t *)(v31 + 168) = vmulq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v48, v60), (int8x16_t)v60, (int8x16_t)v48), (float64x2_t)vdupq_n_s64(0x4015052804935343uLL));
  if (v66 < 21840.0)
    v67 = (int)(v66 * 3.0) + 1;
  else
    v67 = -1;
  *((_WORD *)v20 + 144) = v67;
  if (v46 < 4156.01381)
    v68 = (int)(v46 * 15.7651064) + 1;
  else
    v68 = -1;
  *((_WORD *)v20 + 145) = v68;
  if (v47 < 4156.01381)
    v69 = (int)(v47 * 15.7651064) + 1;
  else
    v69 = -1;
  *((_WORD *)v20 + 146) = v69;
  *(int64x2_t *)(v31 + 264) = vdupq_n_s64(0xC023CCCCCCCCCCCDLL);
  v70 = v20[27];
  v71 = v20[29];
  v20[43] = v70;
  v20[44] = v71;
  *((_WORD *)v20 + 188) = 0;
  v387 = v31 + 168;
  if (v71 <= 1000.0 && v70 <= 1000.0 && !v384 && *((int *)v20 + 74) > 2)
  {
    v375 = 0;
    goto LABEL_119;
  }
  v391 = 0;
  v390 = 0;
  *(_QWORD *)&v415[0] = 0;
  *(_QWORD *)v413 = 0;
  *(_QWORD *)&v411[0] = 0;
  *(_QWORD *)&v393 = 0;
  v375 = 0;
  if (!Core_Get_GPS_TimePos(*((_DWORD *)v20 + 52), (_BYTE *)&v391 + 1, &v391, &v390, (double *)v415, (double *)v413, (uint64_t)__b, (double *)v411, (double *)&v393))goto LABEL_119;
  *(_QWORD *)&v410[0] = 0;
  *(_QWORD *)&v407[0] = 0;
  v72 = v20;
  v73 = v390 - 3;
  v375 = (v390 - 3) < 2;
  v74 = HIBYTE(v391);
  v75 = *(double *)v413;
  v76 = *(double *)v411;
  if (*(double *)v411 <= 150000.0 || v391 == 0)
    v78 = v391;
  else
    v78 = 0;
  if (*((int *)v72 + 74) > 2 || *(unsigned __int8 *)(v381 + 4) > 0x63u || !v78 || v380[29] >= 1000.0)
    goto LABEL_93;
  if (!v384)
  {
    if (v73 <= 1)
    {
      v79 = Horiz_Diff_Sqd(v380, (const double *)__b);
      if (v79 > 193229.156)
      {
        v80 = v76 * (v76 * 4.0);
        if (v80 <= v380[29] * (v380[29] * 9.0))
          v80 = v380[29] * (v380[29] * 9.0);
        if (v79 > v80)
        {
          *((_BYTE *)v380 + 332) = 1;
          EvCrt_v("PrePos:  PosDisc = TRUE    Between Nav Pos and Ref Pos");
        }
      }
    }
    if (*((_BYTE *)v380 + 332))
      goto LABEL_92;
LABEL_93:
    v81 = v380[27];
    v82 = 0.0;
    if (v81 <= 1000.0)
      goto LABEL_99;
    goto LABEL_94;
  }
  *((_BYTE *)v380 + 332) = 1;
LABEL_92:
  v380[29] = 9999000.0;
  v380[27] = 9999000.0;
  v81 = 9999000.0;
LABEL_94:
  v82 = 0.0;
  if (v74)
  {
    if (v75 <= 0.0005 && v75 < 0.001)
    {
      v82 = v75 * 99930819.3;
      *(double *)v410 = v75 * 99930819.3;
      v380[45] = v75 * 99930819.3;
      v380[46] = -1.1;
      if (v75 * 99930819.3 >= v81 * 1.5)
      {
        *(_QWORD *)&v410[0] = 0;
        v82 = 0.0;
      }
    }
  }
LABEL_99:
  v83 = 0.0;
  if (v73 > 1)
  {
    v20 = v380;
  }
  else
  {
    v20 = v380;
    v84 = v380[29];
    if (v84 > 1000.0)
    {
      if (v78)
      {
        v83 = v76 / 3.0;
        *(double *)v407 = v76 / 3.0;
        v380[45] = -1.1;
        v380[46] = v76 / 3.0;
        if (v76 / 3.0 >= v84 * 1.5)
        {
          *(_QWORD *)&v407[0] = 0;
          v83 = 0.0;
        }
      }
    }
  }
  v392 = 0.0;
  if (R8_EQ((const double *)v410, &v392))
    goto LABEL_117;
  v85 = v20[16];
  v86 = (*(double *)v415 - v85) * 1000.0;
  v87 = -0.5;
  if (v86 > 0.0)
    v87 = 0.5;
  v88 = v86 + v87;
  v89 = 2147483650.0;
  if (v88 <= 2147483650.0)
  {
    v89 = -2147483650.0;
    if (v88 >= -2147483650.0)
      v89 = (double)(int)v88;
  }
  v90 = v85 + v89 / 1000.0 - *(double *)v415;
  v91 = *(double *)v31 - v90;
  if (v91 > 0.0005)
  {
    v92 = 0.001;
LABEL_115:
    v90 = v90 + v92;
    goto LABEL_116;
  }
  if (v91 < -0.0005)
  {
    v92 = -0.001;
    goto LABEL_115;
  }
LABEL_116:
  v20[12] = v90;
  v20[27] = v82;
  *((_BYTE *)v20 + 376) = 1;
LABEL_117:
  v392 = 0.0;
  if (!R8_EQ((const double *)v407, &v392))
  {
    Geo2ECEF((uint64_t)__b, (uint64_t)&WGS84_Datum, v371->f64);
    *(_OWORD *)v20 = __b[0];
    v93 = *(double *)&__b[1];
    v20[2] = *(double *)&__b[1];
    v20[3] = v93 - *(double *)(v16 + 248);
    v94 = *(double *)&v393 / 3.0;
    v20[29] = v83;
    v20[30] = v94;
    *((_BYTE *)v20 + 377) = 1;
  }
LABEL_119:
  v95 = 0;
  v96 = *((_DWORD *)v20 + 81);
  v97 = *(__int16 *)(v381 + 6);
  if (v96 >= 1 && v97 >= 1024)
    v95 = *(_BYTE *)v381 != 0;
  *(_DWORD *)a9 = *((_DWORD *)v20 + 52);
  *(_WORD *)(a9 + 32) = v97;
  v98 = *(double *)(v381 + 16);
  v99 = (v98 * 1000.0);
  *(_DWORD *)(a9 + 36) = v99;
  v100 = -((double)v99 - v98 * 1000.0) * 65536.0;
  v101 = -0.5;
  if (v100 > 0.0)
    v101 = 0.5;
  v102 = v100 + v101;
  if (v102 <= 2147483650.0)
  {
    if (v102 >= -2147483650.0)
      v103 = (int)v102;
    else
      LOWORD(v103) = 0;
  }
  else
  {
    LOWORD(v103) = -1;
  }
  v385 = v18;
  v378 = (_OWORD *)v14;
  *(_WORD *)(a9 + 40) = v103;
  *(_DWORD *)(a9 + 44) = v96;
  *(_DWORD *)(a9 + 48) = ((*(double *)(v16 + 216) - *(double *)(v16 + 160)) * 1000.0);
  *(_QWORD *)&__b[0] = 0;
  API_Get_UTC_Cor(1, (double *)__b);
  *(_BYTE *)(a9 + 52) = (int)*(double *)__b;
  v104 = v20[13];
  v105 = (int)(v104 * 1575420000.0);
  if (fabs(v104) >= 0.0000207995328)
    LOWORD(v105) = 0;
  *((_WORD *)v20 + 160) = v105;
  v106 = v20[31];
  if (v106 >= 20500.0)
  {
    *((_WORD *)v20 + 161) = -536;
  }
  else
  {
    v107 = *((_DWORD *)v20 + 52);
    v108 = *((_DWORD *)v20 + 84);
    if (v107 <= v108 + 60000 && v107 >= v108 + 3000)
      v110 = 1600;
    else
      v110 = 3941;
    v111 = (unsigned __int16)(v110 + (int)(v106 * 3.0));
    if (v111 <= 0xDAC)
      v111 = 3500;
    *((_WORD *)v20 + 161) = v111;
    if (v111 < 0xFA1)
      goto LABEL_177;
  }
  v112 = 0;
  v113 = v379 + 4440;
  v114 = 999999;
  v115 = -999999;
  do
  {
    v116 = *(_DWORD *)(v379 + 88 + 4 * v112);
    if (Is_Legal(v116) && *(int *)(v113 + 4 * v112 - 3200) >= 10)
    {
      v117 = BYTE1(v116) > 0xFu || ((1 << SBYTE1(v116)) & 0xE6CC) == 0;
      v118 = v117 || v116 == 6;
      if (v118 && !*(_BYTE *)(v18 + (int)GNSS_Id_To_Num_Prn_Idx(v116) + 249))
      {
        v119 = (int)(*(double *)(v113 + 8 * v112) * 5.25503547);
        if (v114 >= v119)
          v114 = (int)(*(double *)(v113 + 8 * v112) * 5.25503547);
        if (v115 <= v119)
          v115 = (int)(*(double *)(v113 + 8 * v112) * 5.25503547);
      }
    }
    ++v112;
  }
  while (v112 != 128);
  v20 = v380;
  v120 = *((__int16 *)v380 + 160);
  LOWORD(v105) = *((_WORD *)v380 + 160);
  v111 = *((unsigned __int16 *)v380 + 161);
  if (v114 != 999999 && v115 != -999999)
  {
    if (v115 - 8000 <= (signed int)-(v120 + v111))
      v121 = -(v120 + v111);
    else
      v121 = v115 - 8000;
    v122 = v111 - v120;
    if ((int)(v111 - v120) >= v114 + 8000)
      v122 = v114 + 8000;
    v123 = v122 - v121;
    if (v122 - v121 < 8001)
    {
      if (v123 <= 3999)
      {
        EvCrt_v("PP_Update_SS_Data:  Warning:  Out of range Sky Search Dopp_Low/High %d %d   min/max_Dopp %d %d   SS_Dopp_SR %d   OscFreq %d", v121, v122, v114, v115, *((unsigned __int16 *)v380 + 161), v120);
        LOWORD(v105) = *((_WORD *)v380 + 160);
        LOWORD(v111) = *((_WORD *)v380 + 161);
      }
    }
    else
    {
      v111 = (v123 + 1) >> 1;
      *((_WORD *)v380 + 161) = v111;
      v124 = v121 + v122;
      v125 = -(v121 + v122);
      if (v124 < 0)
        v126 = ~v124;
      else
        v126 = v125;
      v105 = v126 >> 1;
      v127 = v105 - v120;
      *((_WORD *)v380 + 160) = v105;
      if (v127 < 0)
        v127 = -v127;
      *((_WORD *)v380 + 145) += v127;
    }
  }
LABEL_177:
  *(_WORD *)(a9 + 24) = (int)((double)(__int16)v105 * 0.634751368);
  *(_WORD *)(a9 + 4) = (int)((double)(unsigned __int16)v111 * 0.190293673);
  v128 = *(_DWORD *)v18;
  *(_DWORD *)(a9 + 56) = *(_DWORD *)v18;
  v129 = *(_QWORD *)(v387 + 36);
  *(_QWORD *)(a9 + 60) = v129;
  LOWORD(v129) = *((_WORD *)v20 + 145);
  *(double *)&v130 = (double)v129 * 0.634751368;
  *(_WORD *)(a9 + 26) = (int)*(double *)&v130;
  LOWORD(v130) = *((_WORD *)v20 + 146);
  *(_WORD *)(a9 + 14) = (int)((double)v130 * 19.0293673);
  v132 = v128 == 1 || v375;
  *(_BYTE *)(a9 + 68) = v132;
  v133 = v20[28] * 0.0100069229;
  v134 = -0.5;
  if (v133 <= 0.0)
    v135 = -0.5;
  else
    v135 = 0.5;
  v136 = v133 + v135;
  if (v136 <= 2147483650.0)
  {
    if (v136 < -2147483650.0 || ((int)v136 >= 0xFFFF ? (v137 = -1) : (v137 = (int)v136), (int)v136 <= 0))
      v137 = 1;
  }
  else
  {
    v137 = -1;
  }
  *(_WORD *)(a9 + 6) = v137;
  v138 = 3 * (int)v20[29] / 5;
  if (v138 >= 65534)
    LOWORD(v138) = -2;
  *(_WORD *)(a9 + 8) = v138 + 1;
  v139 = 3 * (int)v20[30];
  if (v139 >= 65534)
    LOWORD(v139) = -2;
  *(_WORD *)(a9 + 10) = v139 + 1;
  v140 = v20[10] * 100.0;
  if (v140 > 0.0)
    v134 = 0.5;
  v141 = v140 + v134;
  if (v141 > 2147483650.0)
    goto LABEL_204;
  if (v141 < -2147483650.0)
  {
    v142 = 0x80000000;
    goto LABEL_205;
  }
  v142 = (int)v141;
  if ((int)v141 >= 0xFFFF)
  {
LABEL_204:
    LOWORD(v142) = -1;
    *(_WORD *)(a9 + 14) = -1;
    goto LABEL_207;
  }
LABEL_205:
  if (v142 <= 1)
    LOWORD(v142) = 1;
LABEL_207:
  v388 = (unsigned __int8 *)(a9 + 8592);
  *(_WORD *)(a9 + 12) = v142;
  v143 = v20[7] * 100.0;
  v144 = -0.5;
  if (v143 <= 0.0)
    v145 = -0.5;
  else
    v145 = 0.5;
  v146 = v143 + v145;
  if (v146 >= -2147483650.0)
    v147 = (int)v146;
  else
    v147 = 0;
  if (v146 <= 2147483650.0)
    v148 = v147;
  else
    v148 = -1;
  *(_WORD *)(a9 + 18) = v148;
  v149 = v20[8] * 100.0;
  if (v149 <= 0.0)
    v150 = -0.5;
  else
    v150 = 0.5;
  v151 = v149 + v150;
  if (v151 >= -2147483650.0)
    v152 = (int)v151;
  else
    v152 = 0;
  if (v151 <= 2147483650.0)
    v153 = v152;
  else
    v153 = -1;
  *(_WORD *)(a9 + 16) = v153;
  v154 = v20[9] * 100.0;
  if (v154 > 0.0)
    v144 = 0.5;
  v155 = v154 + v144;
  if (v155 <= 2147483650.0)
  {
    if (v155 >= -2147483650.0)
      v156 = (int)v155;
    else
      LOWORD(v156) = 0;
  }
  else
  {
    LOWORD(v156) = -1;
  }
  *(_WORD *)(a9 + 20) = v156;
  *(_BYTE *)(a9 + 22) = v20[11] >> 1;
  v157 = 3 * (int)v20[35];
  if (v157 >= 254)
    LOBYTE(v157) = -2;
  *(_BYTE *)(a9 + 23) = v157 + 1;
  if (!v95)
  {
    v213 = a9 + 72;
    v214 = -5904;
    do
    {
      v215 = v213 + v214;
      *(_OWORD *)(v215 + 5920) = 0uLL;
      *(_OWORD *)(v215 + 5904) = 0uLL;
      *(_OWORD *)(v213 + v214 + 5934) = 0uLL;
      v214 += 48;
    }
    while (v214);
    *(_OWORD *)(a9 + 7704) = 0u;
    *(_OWORD *)(a9 + 7678) = 0u;
    *(_OWORD *)(a9 + 7694) = 0u;
    *(_OWORD *)(a9 + 7646) = 0u;
    *(_OWORD *)(a9 + 7662) = 0u;
    *(_OWORD *)(a9 + 7614) = 0u;
    *(_OWORD *)(a9 + 7630) = 0u;
    *(_OWORD *)(a9 + 7582) = 0u;
    *(_OWORD *)(a9 + 7598) = 0u;
    *(_OWORD *)(a9 + 7550) = 0u;
    *(_OWORD *)(a9 + 7566) = 0u;
    *(_OWORD *)(a9 + 7518) = 0u;
    *(_OWORD *)(a9 + 7534) = 0u;
    *(_OWORD *)(a9 + 7502) = 0u;
    memset((void *)(a9 + 5976), 255, 0x5F6uLL);
    *(_DWORD *)(a9 + 8592) = 0;
    *(_BYTE *)(a9 + 8596) = 0;
    memset(__b, 0, 218);
    Get_SS_Order(__b);
    for (i = 0; i != 218; ++i)
    {
      if (*((_BYTE *)__b + i))
      {
        Constell_Prn = Get_Constell_Prn(i);
        switch(Constell_Prn)
        {
          case 0:
            EvCrt_Illegal_switch_case("PP_invalidate_AAdata", 0xA31u);
            continue;
          case 1:
            v219 = v18;
            v220 = *(unsigned __int8 *)(v18 + 22);
            goto LABEL_361;
          case 2:
            v219 = v18;
            v220 = *(unsigned __int8 *)(v18 + 23);
            goto LABEL_361;
          case 3:
            v219 = v18;
            v220 = *(unsigned __int8 *)(v18 + 27);
            goto LABEL_361;
          case 4:
            v219 = v18;
            v220 = *(unsigned __int8 *)(v18 + 26);
            goto LABEL_361;
          case 5:
            v219 = v18;
            v220 = *(unsigned __int8 *)(v18 + 24);
            goto LABEL_361;
          case 6:
            v219 = v18;
            v220 = *(unsigned __int8 *)(v18 + 28);
LABEL_361:
            v218 = v220 != 0;
            goto LABEL_362;
          case 7:
            continue;
          default:
            v218 = 1;
            v219 = v18;
LABEL_362:
            LODWORD(v221) = *((unsigned __int8 *)__b + i) - 1;
            if (Constell_Prn == 2)
              v221 = i;
            else
              v221 = v221;
            v222 = v219 + v221;
            v223 = *(unsigned __int8 *)(v219 + v221 + 808);
            if (v223 && *(_BYTE *)(v222 + 1088) || !v218)
              goto LABEL_378;
            if (Constell_Prn == 6)
              goto LABEL_369;
            if (*(_BYTE *)(v382 + v221 + 50616) && !*(_BYTE *)(v18 + v221 + 249))
              goto LABEL_381;
            if ((Constell_Prn - 1) < 5 || Constell_Prn == 7)
              goto LABEL_375;
LABEL_369:
            if (!*(_BYTE *)(v382 + v221 + 50834) || *(_BYTE *)(v18 + v221 + 528))
            {
LABEL_375:
              if (Constell_Prn == 2 || v223)
              {
LABEL_378:
                ++*(_BYTE *)(a9 + 8594);
                *(_DWORD *)(a9 + 4 * v221 + 7720) = 2;
              }
              else
              {
                v224 = *(unsigned __int8 *)(a9 + 8595);
                *(_WORD *)(a9 + 2 * v224 + 7066) = v221 + 1;
                *(_BYTE *)(a9 + 8595) = v224 + 1;
                *(_DWORD *)(a9 + 4 * v221 + 7720) = 3;
              }
            }
            else
            {
LABEL_381:
              v225 = *(unsigned __int8 *)(a9 + 8593);
              *(_WORD *)(a9 + 2 * v225 + 6630) = v221 + 1;
              *(_BYTE *)(a9 + 8593) = v225 + 1;
              *(_DWORD *)(a9 + 4 * v221 + 7720) = 0;
            }
            break;
        }
      }
    }
    *(_QWORD *)&v273 = 0x9D9D9D9D9D9D9D9DLL;
    *((_QWORD *)&v273 + 1) = 0x9D9D9D9D9D9D9D9DLL;
    *(_OWORD *)(a10 + 202) = v273;
    *(_OWORD *)(a10 + 176) = v273;
    *(_OWORD *)(a10 + 192) = v273;
    *(_OWORD *)(a10 + 144) = v273;
    *(_OWORD *)(a10 + 160) = v273;
    *(_OWORD *)(a10 + 112) = v273;
    *(_OWORD *)(a10 + 128) = v273;
    *(_OWORD *)(a10 + 80) = v273;
    *(_OWORD *)(a10 + 96) = v273;
    *(_OWORD *)(a10 + 48) = v273;
    *(_OWORD *)(a10 + 64) = v273;
    *(_OWORD *)(a10 + 16) = v273;
    *(_OWORD *)(a10 + 32) = v273;
    *(_OWORD *)a10 = v273;
    memset_pattern16((void *)(a10 + 218), &unk_24BC09190, 0x1B4uLL);
    *(_BYTE *)(a10 + 654) = 0;
    *(_WORD *)(v381 + 2) = -1;
    *(_BYTE *)v381 = 0;
    goto LABEL_500;
  }
  v404 = 0u;
  memset(v405, 0, 26);
  v402 = 0u;
  v403 = 0u;
  v400 = 0u;
  v401 = 0u;
  v398 = 0u;
  v399 = 0u;
  v396 = 0u;
  v397 = 0u;
  v394 = 0u;
  v395 = 0u;
  v393 = 0u;
  if ((*v388 || *(_BYTE *)(a9 + 8594)) && !*(_BYTE *)(a10 + 655))
  {
    v274 = *(unsigned __int16 *)(v381 + 2);
    if (v274 != 0xFFFF)
    {
      v275 = (int)v22 - (int)*(double *)(v381 + 16) + 604800 * (__dst - *(__int16 *)(v381 + 6));
      if (v275 < 0)
        v275 = -v275;
      if (v275 <= 4)
      {
        v276 = 0;
        v277 = 0.0;
        do
        {
          v277 = v277
               + (v406[v276] - *(double *)(v381 + 40 + 8 * v276)) * (v406[v276] - *(double *)(v381 + 40 + 8 * v276));
          v278 = v276 + 3;
          --v276;
        }
        while (v278 > 1);
        if (v277 <= 1.0e10)
        {
          v279 = 0;
          v280 = (_DWORD *)(v14 + 176);
          v281 = v382 + 50616;
          do
          {
            if ((*(_BYTE *)(v281 + v279) && !*(_BYTE *)(v18 + v279 + 249)
               || *(_BYTE *)(v281 + v279 + 218) && !*(_BYTE *)(v18 + v279 + 528))
              && *v280
              && *(_DWORD *)(a9 + 7720 + 4 * v279) <= 1u)
            {
              *((_BYTE *)&v393 + v279) = 1;
            }
            ++v279;
            v280 += 48;
          }
          while (v279 != 179);
          v282 = 54;
          while (1)
          {
            if ((__int16)(v274 + 1) <= 217)
              v283 = v274 + 1;
            else
              v283 = 0;
            *(_WORD *)(v381 + 2) = v283;
            v284 = Get_Constell_Prn(v283);
            if (*(_BYTE *)(v18 + 22))
              v285 = 0;
            else
              v285 = v284 == 1;
            if (v285)
            {
              LOWORD(v274) = 31;
              *(_WORD *)(v381 + 2) = 31;
            }
            else
            {
              if (*(_BYTE *)(v18 + 23))
                v286 = 0;
              else
                v286 = v284 == 2;
              if (v286)
              {
                LOWORD(v274) = 55;
              }
              else if (*(_BYTE *)(v18 + 27) || v284 != 3)
              {
                if (*(_BYTE *)(v18 + 26) || v284 != 4)
                {
                  if (*(_BYTE *)(v18 + 24) || v284 != 5)
                  {
                    if (*(_BYTE *)(v18 + 25) || v284 != 7)
                    {
                      LOWORD(v274) = *(_WORD *)(v381 + 2);
                      *((_BYTE *)&v393 + (__int16)v274) = 1;
                      goto LABEL_486;
                    }
                    LOWORD(v274) = 217;
                  }
                  else
                  {
                    LOWORD(v274) = 164;
                  }
                }
                else
                {
                  LOWORD(v274) = 154;
                }
              }
              else
              {
                LOWORD(v274) = 91;
              }
              *(_WORD *)(v381 + 2) = v274;
            }
LABEL_486:
            if (!--v282)
              goto LABEL_239;
          }
        }
      }
    }
  }
  *(_BYTE *)(a10 + 655) = 0;
  *(_QWORD *)&v158 = 0x101010101010101;
  *((_QWORD *)&v158 + 1) = 0x101010101010101;
  v393 = v158;
  v394 = v158;
  v395 = v158;
  v396 = v158;
  v397 = v158;
  v398 = v158;
  v399 = v158;
  v400 = v158;
  v401 = v158;
  v402 = v158;
  v403 = v158;
  v404 = v158;
  v405[0] = v158;
  *(_OWORD *)((char *)v405 + 10) = v158;
  *(_WORD *)(v381 + 2) = 218;
LABEL_239:
  LODWORD(v392) = 0;
  memset(__b, 255, sizeof(__b));
  memset_pattern16(__src, &unk_24BC09170, 0x368uLL);
  memset(v426, 0, sizeof(v426));
  v425 = 0u;
  v424 = 0u;
  v423 = 0u;
  v422 = 0u;
  v421 = 0u;
  v420 = 0u;
  v419 = 0u;
  v418 = 0u;
  v417 = 0u;
  v416 = 0u;
  memset(v415, 0, sizeof(v415));
  memset(v414, 0, 202);
  *(_OWORD *)v413 = 0u;
  Get_SS_Order(v413);
  if (!*(_BYTE *)(v18 + 22))
  {
    *(_QWORD *)&v159 = 0x9D9D9D9D9D9D9D9DLL;
    *((_QWORD *)&v159 + 1) = 0x9D9D9D9D9D9D9D9DLL;
    *(_OWORD *)a10 = v159;
    *(_OWORD *)(a10 + 16) = v159;
    memset_pattern16((void *)(a10 + 218), &unk_24BC09190, 0x40uLL);
  }
  if (!*(_BYTE *)(v18 + 23))
  {
    memset((void *)(a10 + 32), 157, 24);
    memset_pattern16((void *)(a10 + 282), &unk_24BC09190, 0x30uLL);
  }
  if (!*(_BYTE *)(v18 + 27))
  {
    *(_DWORD *)(a10 + 88) = -1650614883;
    *(_QWORD *)&v160 = 0x9D9D9D9D9D9D9D9DLL;
    *((_QWORD *)&v160 + 1) = 0x9D9D9D9D9D9D9D9DLL;
    *(_OWORD *)(a10 + 72) = v160;
    *(_OWORD *)(a10 + 56) = v160;
    memset_pattern16((void *)(a10 + 330), &unk_24BC09190, 0x48uLL);
  }
  if (!*(_BYTE *)(v18 + 26))
  {
    *(_QWORD *)&v161 = 0x9D9D9D9D9D9D9D9DLL;
    *((_QWORD *)&v161 + 1) = 0x9D9D9D9D9D9D9D9DLL;
    *(_OWORD *)(a10 + 139) = v161;
    *(_OWORD *)(a10 + 124) = v161;
    *(_OWORD *)(a10 + 108) = v161;
    *(_OWORD *)(a10 + 92) = v161;
    memset_pattern16((void *)(a10 + 402), &unk_24BC09190, 0x7EuLL);
  }
  if (!*(_BYTE *)(v18 + 24))
  {
    *(_QWORD *)(a10 + 155) = 0x9D9D9D9D9D9D9D9DLL;
    *(_WORD *)(a10 + 163) = -25187;
    memset_pattern16((void *)(a10 + 528), &unk_24BC09190, 0x14uLL);
  }
  if (!*(_BYTE *)(v18 + 28))
  {
    *(_QWORD *)(a10 + 171) = 0x9D9D9D9D9D9D9D9DLL;
    *(_QWORD *)(a10 + 165) = 0x9D9D9D9D9D9D9D9DLL;
    memset_pattern16((void *)(a10 + 548), &unk_24BC09190, 0x1CuLL);
  }
  v366 = (_WORD *)(v382 + 25388);
  if (!*(_BYTE *)(v18 + 25))
  {
    *(_QWORD *)(a10 + 210) = 0x9D9D9D9D9D9D9D9DLL;
    *(_QWORD *)&v162 = 0x9D9D9D9D9D9D9D9DLL;
    *((_QWORD *)&v162 + 1) = 0x9D9D9D9D9D9D9D9DLL;
    *(_OWORD *)(a10 + 195) = v162;
    *(_OWORD *)(a10 + 179) = v162;
    memset_pattern16((void *)(a10 + 576), &unk_24BC09190, 0x4EuLL);
  }
  v163 = 0;
  v373 = 0;
  v164 = 0;
  v165 = 0;
  v166 = *(_OWORD *)(a10 + 176);
  v411[10] = *(_OWORD *)(a10 + 160);
  v411[11] = v166;
  v412[0] = *(_OWORD *)(a10 + 192);
  *(_OWORD *)((char *)v412 + 10) = *(_OWORD *)(a10 + 202);
  v167 = *(_OWORD *)(a10 + 112);
  v411[6] = *(_OWORD *)(a10 + 96);
  v411[7] = v167;
  v168 = *(_OWORD *)(a10 + 144);
  v411[8] = *(_OWORD *)(a10 + 128);
  v411[9] = v168;
  v169 = *(_OWORD *)(a10 + 48);
  v411[2] = *(_OWORD *)(a10 + 32);
  v411[3] = v169;
  v170 = *(_OWORD *)(a10 + 80);
  v411[4] = *(_OWORD *)(a10 + 64);
  v411[5] = v170;
  v171 = *(_OWORD *)(a10 + 16);
  v411[0] = *(_OWORD *)a10;
  v411[1] = v171;
  while (2)
  {
    if (!v413[v163])
    {
LABEL_274:
      v183 = 2;
      v177 = v163;
      goto LABEL_333;
    }
    v172 = Get_Constell_Prn(v164);
    v173 = v172 - 1;
    v174 = v172;
    switch(v172)
    {
      case 1:
        v175 = *(unsigned __int8 *)(v18 + 22);
        goto LABEL_264;
      case 2:
        if (!*(_BYTE *)(v18 + 23))
          goto LABEL_274;
        LongPrnIdx_To_ShortPrnIdx(v163, 0);
        v176 = v163;
        goto LABEL_268;
      case 3:
        if (!*(_BYTE *)(v18 + 27))
          goto LABEL_274;
        v176 = v413[v163] - 1;
        LongPrnIdx_To_ShortPrnIdx(v176, 0);
        goto LABEL_268;
      case 4:
        if (!*(_BYTE *)(v18 + 26))
          goto LABEL_274;
        goto LABEL_267;
      case 5:
        v175 = *(unsigned __int8 *)(v18 + 24);
LABEL_264:
        if (!v175)
          goto LABEL_274;
        v176 = v413[v163] - 1;
        goto LABEL_268;
      case 6:
        if (!*(_BYTE *)(v18 + 28))
          goto LABEL_274;
LABEL_267:
        v176 = v413[v163] - 1;
LABEL_268:
        v177 = v176;
        if (!*(_BYTE *)(v382 + v176 + 50616) || *(_BYTE *)(v18 + v176 + 249))
        {
          if (*(_BYTE *)(v382 + v176 + 50834))
          {
            v178 = *(unsigned __int8 *)(v18 + v176 + 528);
            v179 = *(_BYTE *)(v18 + v176 + 528) == 0;
            if (!*((_BYTE *)&v393 + v176))
              goto LABEL_286;
            v180 = (_BYTE *)(a10 + v176);
            *v180 = -99;
            v181 = a10 + 2 * v176;
            *(_WORD *)(v181 + 218) = -400;
            v182 = (_WORD *)(v181 + 218);
            if (v178)
            {
              v179 = 0;
LABEL_284:
              v18 = v385;
              goto LABEL_288;
            }
            goto LABEL_279;
          }
          v179 = *((_BYTE *)&v393 + v176);
          if (v179)
          {
            v179 = 0;
            *(_BYTE *)(a10 + v176) = -99;
            *(_WORD *)(a10 + 2 * v176 + 218) = -400;
            goto LABEL_288;
          }
LABEL_286:
          if (!LODWORD(v378[12 * v176 + 11]))
            *(_BYTE *)(a10 + v176) = -99;
          goto LABEL_288;
        }
        if (!*((_BYTE *)&v393 + v176))
        {
          v179 = 1;
          goto LABEL_286;
        }
        v180 = (_BYTE *)(a10 + v176);
        *v180 = -99;
        v184 = a10 + 2 * v176;
        *(_WORD *)(v184 + 218) = -400;
        v182 = (_WORD *)(v184 + 218);
LABEL_279:
        if (!LODWORD(v378[12 * v177 + 11]))
        {
          v179 = 1;
          goto LABEL_284;
        }
        v408 = 0;
        v185 = &v378[12 * v177];
        memset(v407, 0, sizeof(v407));
        v409[0] = 0;
        *(_DWORD *)((char *)v409 + 3) = 0;
        v186 = v185[9];
        v410[8] = v185[8];
        v410[9] = v186;
        v187 = v185[11];
        v410[10] = v185[10];
        v410[11] = v187;
        v188 = v185[5];
        v410[4] = v185[4];
        v410[5] = v188;
        v189 = v185[7];
        v410[6] = v185[6];
        v410[7] = v189;
        v190 = v185[1];
        v410[0] = *v185;
        v410[1] = v190;
        v191 = v185[3];
        v410[2] = v185[2];
        v410[3] = v191;
        if (Comp_CurrState(0x258u, *(__int16 *)(v381 + 6), (uint64_t)v410, (uint64_t)v407, *(double *)(v381 + 16), 22000000.0))Comp_AzEl((uint64_t)v371, (uint64_t)(v380 + 17), (uint64_t)v407, v180, v182, (_DWORD *)(a10 + 40 * v177 + 656), (int *)(a10 + 40 * v177 + 9376));
        v179 = 1;
        v18 = v385;
LABEL_288:
        if (*(_BYTE *)(v18 + v177 + 808) && *(_BYTE *)(v18 + v177 + 1088))
          goto LABEL_290;
        if ((v179 & 1) == 0)
        {
          if (v173 >= 5)
          {
            if (!*(_BYTE *)(v18 + v177 + 1088))
            {
LABEL_312:
              v200 = BYTE3(v392);
              *((_WORD *)&__b[81] + BYTE3(v392) + 6) = v177 + 1;
              BYTE3(v392) = v200 + 1;
              v183 = 3;
              goto LABEL_333;
            }
          }
          else if (!*(_BYTE *)(v18 + v177 + 808))
          {
            goto LABEL_312;
          }
LABEL_290:
          v192 = BYTE2(v392);
          *((_WORD *)&__b[54] + BYTE2(v392) + 4) = v177 + 1;
          BYTE2(v392) = v192 + 1;
          v183 = 2;
          goto LABEL_333;
        }
        v193 = *(char *)(a10 + v177);
        if (v193 < -90)
        {
          v183 = 0;
          *((_WORD *)__b + v165++) = v177 + 1;
        }
        else
        {
          v194 = *(unsigned __int8 *)(a10 + v177);
          v195 = (char)v193;
          v196 = v373;
          if (v195 > 1)
            v196 = v373 + 1;
          v373 = v196;
          if (v195 > 1)
            v183 = 1;
          else
            v183 = 2;
          if (v195 >= 2)
          {
            v197 = v378[12 * v177 + 11];
            if (v174 == 2)
              v198 = 15;
            else
              v198 = 10;
            if (v197 == 2)
            {
              if (*(_BYTE *)(a9 + v177 + 7502))
                v201 = v198 > v194;
              else
                v201 = 0;
              if (v201)
                v199 = *(_BYTE *)(a10 + v177);
              else
                v199 = v194 + 9;
            }
            else if (v197 == 1)
            {
              if (v198 > v194 && *(_BYTE *)(a9 + v177 + 7502))
                v199 = v194 + 9;
              else
                v199 = v194 + 100;
            }
            else
            {
              v199 = 0;
            }
            *((_BYTE *)v415 + v177) = v199;
            v202 = BYTE1(v392);
            if (BYTE1(v392))
            {
              v203 = 0;
              while (*((unsigned __int8 *)v415 + *((__int16 *)&__b[27] + v203 + 2) - 1) >= v199)
              {
                if (BYTE1(v392) == ++v203)
                  goto LABEL_331;
              }
            }
            else
            {
              LODWORD(v203) = 0;
            }
            if (v203 < BYTE1(v392))
            {
              v204 = (_WORD *)&__b[27] + BYTE1(v392) + 2;
              v205 = (__int16 *)&__b[27] + BYTE1(v392) + 1;
              do
              {
                v206 = *v205--;
                *v204-- = v206;
                --v202;
              }
              while (v203 < v202);
              v202 = v203;
            }
LABEL_331:
            *((_WORD *)&__b[27] + v202 + 2) = v177 + 1;
          }
          ++*((_BYTE *)&v392 + v183);
        }
LABEL_333:
        *((_DWORD *)__src + v177) = v183;
LABEL_334:
        ++v163;
        ++v164;
        if (v163 != 218)
          continue;
        v207 = 0;
        v208 = v380;
        while (2)
        {
          v209 = *((char *)v411 + v207);
          if (v209 < -90 || ((v210 = *(char *)(a10 + v207), v210 >= -90) ? (v211 = v209 < v210) : (v211 = 1), v211))
          {
            v212 = 0;
            goto LABEL_343;
          }
          if (v209 > v210)
          {
            v212 = 1;
LABEL_343:
            *(_BYTE *)(a9 + 7502 + v207) = v212;
          }
          if (++v207 != 218)
            continue;
          break;
        }
        memcpy((void *)(a9 + 7720), __src, 0x368uLL);
        memcpy((void *)(a9 + 7066), (char *)&__b[81] + 12, 0x1B4uLL);
        memcpy((void *)(a9 + 6630), __b, 0x1B4uLL);
        memcpy((void *)(a9 + 6194), (char *)&__b[27] + 4, 0x1B4uLL);
        v226 = BYTE1(v392);
        *v388 = BYTE1(v392);
        *(_WORD *)(a9 + 8594) = WORD1(v392);
        v227 = (_BYTE *)(a9 + 8594);
        *(_BYTE *)(a9 + 8593) = v165;
        *(_BYTE *)(a10 + 654) = v373;
        if (!v226 && !*(_BYTE *)(a9 + 8596))
        {
          *(_QWORD *)&v364 = -1;
          *((_QWORD *)&v364 + 1) = -1;
          *(_OWORD *)(a9 + 6178) = v364;
          *(_OWORD *)(a9 + 6152) = v364;
          *(_OWORD *)(a9 + 6168) = v364;
          *(_OWORD *)(a9 + 6120) = v364;
          *(_OWORD *)(a9 + 6136) = v364;
          *(_OWORD *)(a9 + 6088) = v364;
          *(_OWORD *)(a9 + 6104) = v364;
          *(_OWORD *)(a9 + 6056) = v364;
          *(_OWORD *)(a9 + 6072) = v364;
          *(_OWORD *)(a9 + 6024) = v364;
          *(_OWORD *)(a9 + 6040) = v364;
          *(_OWORD *)(a9 + 5992) = v364;
          *(_OWORD *)(a9 + 6008) = v364;
          *(_OWORD *)(a9 + 5976) = v364;
          v14 = (uint64_t)v378;
          goto LABEL_501;
        }
        LOBYTE(v415[0]) = 0;
        *((_QWORD *)&v415[1] + 1) = 0;
        LODWORD(v416) = 0;
        *(_QWORD *)&v418 = 0;
        *(_OWORD *)((char *)v415 + 4) = 0uLL;
        *(_QWORD *)&v417 = 0;
        *((_QWORD *)&v416 + 1) = 0;
        *(_QWORD *)((char *)&v417 + 5) = 0;
        memset(&__src[2], 0, 159);
        *(_QWORD *)&v228 = -1;
        *((_QWORD *)&v228 + 1) = -1;
        *(_OWORD *)(a9 + 5976) = v228;
        *(_OWORD *)(a9 + 5992) = v228;
        *(_OWORD *)(a9 + 6008) = v228;
        *(_OWORD *)(a9 + 6024) = v228;
        *(_OWORD *)(a9 + 6040) = v228;
        *(_OWORD *)(a9 + 6056) = v228;
        *(_OWORD *)(a9 + 6072) = v228;
        *(_OWORD *)(a9 + 6088) = v228;
        *(_OWORD *)(a9 + 6104) = v228;
        *(_OWORD *)(a9 + 6120) = v228;
        *(_OWORD *)(a9 + 6136) = v228;
        *(_OWORD *)(a9 + 6152) = v228;
        *(_OWORD *)(a9 + 6168) = v228;
        *(_OWORD *)(a9 + 6178) = v228;
        v229 = a9 + 72;
        v230 = -5904;
        memset(__src, 0, 32);
        do
        {
          v231 = v229 + v230;
          *(_OWORD *)(v231 + 5920) = 0uLL;
          *(_OWORD *)(v231 + 5904) = 0uLL;
          *(_OWORD *)(v229 + v230 + 5934) = 0uLL;
          v230 += 48;
        }
        while (v230);
        *(_BYTE *)(a9 + 8596) = 0;
        v232 = 0.0;
        v233 = 0.0;
        if ((*(_DWORD *)(v368 + 8212) - 2) <= 4)
        {
          if ((unsigned __int16)*v366 - *(__int16 *)(v381 + 6) >= 0)
            v234 = -(((unsigned __int16)*v366 - *(__int16 *)(v381 + 6)) & 0x3F);
          else
            v234 = (*(_WORD *)(v381 + 6) - *v366) & 0x3F;
          if (v234 > 31)
            v234 -= 64;
          v233 = *(double *)(v382 + 25368)
               + *(double *)(v382 + 25376)
               * (double)((int)*(double *)(v381 + 16) - *(_DWORD *)(v368 + 8252) + 604800 * v234);
        }
        v367 = a9 + 7720;
        if ((*(_DWORD *)(v369 + 3060) - 2) <= 4)
        {
          if (*(__int16 *)(v369 + 3116) - *(__int16 *)(v381 + 6) >= 0)
            v235 = -((*(__int16 *)(v369 + 3116) - *(__int16 *)(v381 + 6)) & 0x3FF);
          else
            v235 = (*(_WORD *)(v381 + 6) - *(_WORD *)(v369 + 3116)) & 0x3FF;
          if (v235 > 511)
            v235 -= 1024;
          if (v235 < -512)
            v235 += 1024;
          v236 = *(double *)(v381 + 16) - (double)*(int *)(v369 + 3112) + (double)(604800 * v235);
          v232 = *(double *)(v369 + 3088) + *(double *)(v369 + 3096) * v236 + *(double *)(v369 + 3104) * (v236 * v236);
        }
        bzero(__b, 0x6D0uLL);
        for (j = 0; j != 218; ++j)
        {
          v238 = Get_Constell_Prn(j) - 1;
          if (v238 <= 6)
            *((_QWORD *)__b + j) = qword_24BC091C8[v238];
        }
        v239 = 0;
        v240 = v379 + 3416;
        do
        {
          v241 = v240 + 4 * v239;
          v242 = *(_DWORD *)(v241 - 3328);
          if (Is_Legal(v242) && *(int *)(v241 - 2176) >= 11)
            *((_QWORD *)__b + (int)GNSS_Id_To_Num_Prn_Idx(v242)) = *(_QWORD *)(v240 + 8 * v239);
          ++v239;
        }
        while (v239 != 128);
        v243 = 0;
        v365 = v382 + 59772;
        v244 = 656;
        v245 = 9376;
        v14 = (uint64_t)v378;
        v246 = v378;
        while (2)
        {
          LODWORD(v411[0]) = 0;
          v247 = Get_Constell_Prn(v243);
          LODWORD(v411[0]) = v247;
          if (v247 == 7)
            goto LABEL_450;
          if (*(unsigned __int8 *)(a9 + 8596) <= 0x7Au)
          {
            v248 = v247;
            if ((!*(_BYTE *)(v385 + v243 + 808) || !*(_BYTE *)(v385 + v243 + 1088)) && *(char *)(a10 + v243) >= 2)
            {
              v249 = v246[9];
              __src[8] = v246[8];
              __src[9] = v249;
              v250 = v246[11];
              __src[10] = v246[10];
              __src[11] = v250;
              v251 = v246[5];
              __src[4] = v246[4];
              __src[5] = v251;
              v252 = v246[7];
              __src[6] = v246[6];
              __src[7] = v252;
              v253 = v246[1];
              __src[0] = *v246;
              __src[1] = v253;
              v254 = v246[3];
              __src[2] = v246[2];
              __src[3] = v254;
              if (LODWORD(__src[11]))
              {
                v255 = *((unsigned int *)v380 + 81);
                v256 = v380[12];
                v257 = v380[28];
                v259 = v248 - 1;
                v258 = (_DWORD *)(v368 + 8212);
                v260 = v233;
                switch(v259)
                {
                  case 0:
                    goto LABEL_424;
                  case 1:
                    v256 = v380[14];
                    v261 = *((unsigned int *)v380 + 82);
                    if ((int)v261 >= (int)v255)
                      goto LABEL_434;
                    v262 = 0;
                    v257 = sqrt((g_TOW_Stat_Var99_Table[v255] * -299792458.0 + g_TOW_Stat_Var99_Table[v261] * 299792458.0)* 299792458.0+ v257 * v257);
                    LODWORD(v255) = *((_DWORD *)v380 + 82);
                    break;
                  case 2:
                    goto LABEL_428;
                  case 3:
                    v256 = *v35;
LABEL_424:
                    if (*(_BYTE *)(v385 + 44))
                    {
                      v263 = v385 + v243;
                      if (!*(_BYTE *)(v385 + v243 + 1088))
                        goto LABEL_433;
                    }
                    goto LABEL_434;
                  case 4:
                    goto LABEL_431;
                  case 5:
                    v258 = (_DWORD *)(v369 + 3060);
                    v260 = v232;
LABEL_428:
                    if ((*v258 - 2) >= 5)
                      v260 = 0.0;
                    v256 = v256 - v260;
LABEL_431:
                    if (!*(_BYTE *)(v385 + 44))
                      goto LABEL_434;
                    v263 = v385 + v243;
LABEL_433:
                    v262 = *(unsigned __int8 *)(v263 + 528) == 0;
                    break;
                  default:
LABEL_434:
                    v262 = 0;
                    break;
                }
                v264 = Comp_PrePos(v255, *(__int16 *)(v381 + 6), (uint64_t)__src, v371, (uint64_t)v370, a10 + v245, (double *)(a10 + v244), v262, v256, v380[13], v380[27], v257, v380[29], v380[30], v380[32], v380[33], v380[34], *(double *)(v381 + 16), v380,
                         *((double *)__b + v243),
                         v380[39],
                         (char *)(v382 + 8952),
                         *(_DWORD *)(v385 + 60),
                         (uint64_t)v415);
                LOBYTE(v415[0]) = v264;
                if (v264)
                {
                  *(_DWORD *)v413 = 0;
                  v413[4] = 0;
                  *(_QWORD *)&v413[8] = 0;
                  *(_QWORD *)&v414[0] = 0;
                  BYTE8(v414[0]) = 0;
                  memset((char *)v414 + 10, 0, 20);
                  v265 = LongPrnIdx_To_Prn(v243, (int *)v411);
                  v413[10] = v265;
                  v413[8] = v411[0];
                  if (LODWORD(v411[0]) == 2)
                  {
                    v266 = *(_DWORD *)(*(_QWORD *)(a9 + 8680) + 4 * v265 - 4);
                    v413[11] = v266;
                    if (((v266 << 24) - 100663297) < 0xF2FFFFFF)
                    {
                      EvCrt_v("PP_Update_AcqAid:  %d  Skipping AA for R %d  Freq Id not known %d", v243, v243 - 31, (char)v266);
                      goto LABEL_450;
                    }
                    v413[10] = v266;
                  }
                  BYTE8(v414[1]) = -1;
                  BYTE10(v414[1]) = -1;
                  BYTE9(v414[1]) = *(_BYTE *)(a10 + v243);
                  v267 = *(unsigned __int16 *)(a10 + 2 * v243 + 218);
                  if (v267 <= 0x168)
                    BYTE10(v414[1]) = v267 >> 1;
                  v268 = Comp_AcqAid(*((_DWORD *)v380 + 52), *((_WORD *)v380 + 160), *((unsigned __int16 *)v380 + 161), (unsigned __int8 *)v415, (uint64_t)v413, v380[16]);
                  v413[4] = v268;
                  if (*(_BYTE *)(v365 + v243))
                    v269 = 1;
                  else
                    v269 = *(_BYTE *)(v365 + v243 + 218) != 0;
                  v413[12] = v269;
                  v413[13] = *(_BYTE *)(v365 + v243 + 436);
                  if (*((int *)v380 + 74) <= 1 && v413[14] >= 2u)
                    v413[14] = 1;
                  if (v268)
                  {
                    v270 = *(_BYTE *)(a9 + 8596);
                    v271 = a9 + 48 * v270;
                    v272 = v414[0];
                    *(_OWORD *)(v271 + 72) = *(_OWORD *)v413;
                    *(_OWORD *)(v271 + 88) = v272;
                    *(_OWORD *)(v271 + 104) = v414[1];
                    *(_BYTE *)(a9 + 5976 + v243) = v270;
                    ++*(_BYTE *)(a9 + 8596);
                  }
                }
              }
            }
LABEL_450:
            ++v243;
            v244 += 40;
            v245 += 40;
            v246 += 12;
            if (v243 == 179)
              goto LABEL_499;
            continue;
          }
          break;
        }
        gn_report_assertion_failure("PP_Update_AcqAid: num_AA overflow caught");
LABEL_499:
        PP_BDS_D2_Set_Not_Visible(v388, v227, a9 + 6194, v367);
        PP_BDS_D2_Set_Not_Visible((_BYTE *)(a9 + 8593), v227, a9 + 6630, v367);
        PP_BDS_D2_Set_Not_Visible((_BYTE *)(a9 + 8595), v227, a9 + 7066, v367);
LABEL_500:
        v18 = v385;
        v208 = v380;
LABEL_501:
        if (*((_BYTE *)v208 + 332))
        {
          v287 = *(unsigned __int8 *)(v381 + 4);
          if (v287 <= 0xC7)
            *(_BYTE *)(v381 + 4) = v287 + 1;
          if (*v389)
          {
            *((_BYTE *)v208 + 332) = 0;
            goto LABEL_506;
          }
          v290 = 0;
          v289 = v389 + 4;
          v288 = *((_DWORD *)v389 + 1);
LABEL_509:
          if (*v388 || *(_BYTE *)(a9 + 8596))
          {
            if (!v375)
              v290 = 1;
            if (v288 == 2 || (v290 & 1) == 0)
            {
              if (!v389[444])
                ++*((_WORD *)v389 + 223);
              v389[444] = 1;
              *(_QWORD *)&v291 = 0x1111111111111111;
              *((_QWORD *)&v291 + 1) = 0x1111111111111111;
              *((_OWORD *)v389 + 28) = v291;
              *((_OWORD *)v389 + 29) = v291;
              *((_OWORD *)v389 + 30) = v291;
              *((_OWORD *)v389 + 31) = v291;
              *((_OWORD *)v389 + 32) = v291;
              *((_OWORD *)v389 + 33) = v291;
              *((_OWORD *)v389 + 34) = v291;
              *((_OWORD *)v389 + 35) = v291;
              v292 = (const float *)(v380 + 26);
              v293 = 1072;
              v294 = vld1q_dup_f32(v292);
              do
              {
                *(float32x4_t *)&v389[v293] = v294;
                v293 -= 16;
              }
              while (v293 != 560);
              EvCrt_v("ChanReset ALL : PrePos2  BadNav %d  PosDisc %d  NavProbs %d  NavDiscrep %d  Count %d", v288, *((unsigned __int8 *)v380 + 332), *(unsigned __int8 *)(v381 + 4), *v389, *((unsigned __int16 *)v389 + 223));
              v288 = *((_DWORD *)v389 + 1);
            }
            if (v288 && *((_BYTE *)v380 + 332) && !v375)
            {
              for (k = 0; k != 128; ++k)
              {
                v296 = v379 + 4 * k;
                v298 = *(_DWORD *)(v296 + 88);
                v297 = (unsigned int *)(v296 + 88);
                if (Is_Legal(v298) && *(unsigned __int8 *)(v379 + k + 1752) <= 0x18u)
                {
                  v389[k + 448] = 17;
                  v299 = (const float *)(v380 + 26);
                  v300 = vld1q_dup_f32(v299);
                  for (m = 1072; m != 560; m -= 16)
                    *(float32x4_t *)&v389[m] = v300;
                  GNSS_SV_Str = Get_GNSS_SV_Str(*v297);
                  EvCrt_v("ChanReset %d : PrePos3  %s  NavProbs %d  NavDiscrep %d  SNR %d", k, GNSS_SV_Str, *(unsigned __int8 *)(v381 + 4), *v389, *(unsigned __int8 *)(v379 + k + 1752));
                }
              }
            }
          }
          else
          {
            memcpy(__b, (const void *)(a9 + 6630), 0x1B4uLL);
            v303 = 0;
            v304 = 0;
            v305 = 0;
            v376 = *((_DWORD *)v380 + 52);
            v374 = -*((unsigned __int16 *)v380 + 160);
            v372 = *((_WORD *)v380 + 161);
            do
            {
              if (v389[v303 + 8])
              {
                v306 = a9 + 4 * v303;
                if (*(_DWORD *)(v306 + 7720) || v305 > 0x7A)
                  goto LABEL_554;
                LODWORD(__src[0]) = 0;
                v307 = LongPrnIdx_To_Prn(v303, (int *)__src);
                v308 = __src[0];
                if (LODWORD(__src[0]) == 2)
                  v307 = *(_DWORD *)(*(_QWORD *)(a9 + 8680) + 4 * (v307 - 1));
                for (n = 0; n != 218; ++n)
                {
                  if ((__int16)(v303 + 1) == *((__int16 *)__b + n))
                  {
                    if (n <= 0xD8)
                    {
                      v310 = n;
                      do
                      {
                        v311 = (_WORD *)__b + v310++;
                        *v311 = v311[1];
                      }
                      while (v310 != 217);
                    }
                    WORD1(__b[27]) = -1;
                  }
                }
                switch(v308)
                {
                  case 2u:
                    v312 = 146;
                    break;
                  case 3u:
                    v312 = 174;
                    break;
                  case 4u:
                    if (v307 - 59 >= 0xFFFFFFCB)
                      v312 = 162;
                    else
                      v312 = 238;
                    break;
                  case 5u:
                  case 7u:
                    v312 = 258;
                    break;
                  case 6u:
                    v312 = 240;
                    break;
                  default:
                    v312 = 154;
                    break;
                }
                v313 = a9 + 48 * v305;
                *(_DWORD *)(v313 + 72) = v376;
                *(_BYTE *)(v313 + 76) = 1;
                *(_DWORD *)(v313 + 80) = v308 | (v307 << 16);
                *(_DWORD *)(v313 + 84) = 0;
                *(_WORD *)(v313 + 88) = v312;
                *(_WORD *)(v313 + 90) = v372;
                *(_WORD *)(v313 + 92) = 0;
                *(_WORD *)(v313 + 94) = v374;
                *(_BYTE *)(v313 + 96) = -1;
                *(_WORD *)(v313 + 98) = 5115;
                *(_QWORD *)(v313 + 100) = 0;
                *(_DWORD *)(v313 + 108) = 0;
                *(_DWORD *)(v313 + 112) = 157;
                *(_WORD *)(v313 + 116) = 0;
                memcpy((void *)(a9 + 6630), __b, 0x1B4uLL);
                *(_BYTE *)(a9 + v303 + 5976) = v305;
                *(_WORD *)(a9 + 2 * v305 + 6194) = v304 + 1;
                *(_DWORD *)(v306 + 7720) = 1;
                *(_BYTE *)(a9 + 8596) = ++v305;
                *v388 = v305;
                --*(_BYTE *)(a9 + 8593);
                if (v389[v303 + 8])
                {
LABEL_554:
                  v314 = v389[v303 + 226];
                  v389[v314 + 448] = 17;
                  *(_DWORD *)&v389[4 * v314 + 576] = *((_DWORD *)v380 + 52);
                  v315 = Get_GNSS_SV_Str(*(unsigned int *)(v379 + 4 * v314 + 88));
                  EvCrt_v("ChanReset %d : PrePos1  %s  BadNav %d  PosDisc %d  NavProbs %d  NavDiscrep %d  SNR %d", v314, v315, *((_DWORD *)v389 + 1), *((unsigned __int8 *)v380 + 332), *(unsigned __int8 *)(v381 + 4), *v389, *(unsigned __int8 *)(v379 + v303 + 1752));
                }
              }
              ++v303;
              ++v304;
            }
            while (v303 != 218);
          }
          if (*(_DWORD *)v289)
          {
            *((_QWORD *)v289 + 54) = 0;
            *((_OWORD *)v289 + 25) = 0u;
            *((_OWORD *)v289 + 26) = 0u;
            *((_OWORD *)v289 + 23) = 0u;
            *((_OWORD *)v289 + 24) = 0u;
            *((_OWORD *)v289 + 21) = 0u;
            *((_OWORD *)v289 + 22) = 0u;
            *((_OWORD *)v289 + 19) = 0u;
            *((_OWORD *)v289 + 20) = 0u;
            *((_OWORD *)v289 + 17) = 0u;
            *((_OWORD *)v289 + 18) = 0u;
            *((_OWORD *)v289 + 15) = 0u;
            *((_OWORD *)v289 + 16) = 0u;
            *((_OWORD *)v289 + 13) = 0u;
            *((_OWORD *)v289 + 14) = 0u;
            *((_OWORD *)v289 + 11) = 0u;
            *((_OWORD *)v289 + 12) = 0u;
            *((_OWORD *)v289 + 9) = 0u;
            *((_OWORD *)v289 + 10) = 0u;
            *((_OWORD *)v289 + 7) = 0u;
            *((_OWORD *)v289 + 8) = 0u;
            *((_OWORD *)v289 + 5) = 0u;
            *((_OWORD *)v289 + 6) = 0u;
            *((_OWORD *)v289 + 3) = 0u;
            *((_OWORD *)v289 + 4) = 0u;
            *((_OWORD *)v289 + 1) = 0u;
            *((_OWORD *)v289 + 2) = 0u;
            *(_OWORD *)v289 = 0u;
          }
          v14 = (uint64_t)v378;
          v18 = v385;
          if (*((_BYTE *)v380 + 332))
            *v389 = 1;
        }
        else
        {
LABEL_506:
          v289 = v389 + 4;
          v288 = *((_DWORD *)v389 + 1);
          if (v288)
          {
            v290 = 1;
            goto LABEL_509;
          }
        }
        v316 = *(unsigned __int8 *)(v18 + 23);
        *(_BYTE *)(a9 + 8670) = 0;
        if (v316)
        {
          v317 = 0;
          *(_WORD *)(a9 + 8671) = 14;
          *(_QWORD *)(a9 + 8656) = 0;
          *(_QWORD *)(a9 + 8662) = 0;
          do
          {
            if (!*(_BYTE *)(*(_QWORD *)(v18 + 480) + v317) && !*(_BYTE *)(*(_QWORD *)(v18 + 1040) + v317))
            {
              v318 = 0;
              goto LABEL_569;
            }
            ++v317;
          }
          while (v317 != 24);
          *(_WORD *)(a9 + 8671) = 3584;
          v318 = 3;
LABEL_569:
          for (ii = 0; ii != 56; ii += 4)
            *(_DWORD *)(a9 + 8600 + ii) = v318;
          v320 = 0;
          while (2)
          {
            LODWORD(__b[0]) = 0;
            v321 = *(__int16 *)(a9 + 2 * v320 + 6194);
            v322 = (v321 - 1);
            if (v321 >= 1)
            {
              v323 = LongPrnIdx_To_ShortPrnIdx((v321 - 1), __b);
              if (LODWORD(__b[0]) == 2)
              {
                v325 = v323;
                v326 = *(_DWORD *)(*(_QWORD *)(a9 + 8680) + 4 * v323);
                if (v326 != 2139062143)
                {
                  v327 = v326 + 7;
                  v328 = a9 + 4 * v322;
                  v329 = *(_DWORD *)(v328 + 7720);
                  if (v329 == 3)
                  {
                    v334 = a9 + 4 * v327;
                    if (!*(_DWORD *)(v334 + 8600))
                      --*(_BYTE *)(a9 + 8671);
                    ++*(_BYTE *)(a9 + 8672);
                    *(_DWORD *)(v334 + 8600) = 3;
                    *(_DWORD *)(*(_QWORD *)(a9 + 8688) + 4 * v327) = v323 + 1;
                    v333 = v382 + 4 * v327;
LABEL_585:
                    *(_DWORD *)(v333 + 17480) = 3;
                  }
                  else if (v329 == 1)
                  {
                    v330 = a9 + 4 * v327;
                    v331 = *(_DWORD *)(v330 + 8600);
                    if (v331 != 1)
                    {
                      v332 = *(char *)(a9 + 8670);
                      if (v332 <= 13)
                      {
                        if (!v331)
                          --*(_BYTE *)(a9 + 8671);
                        *(_BYTE *)(a9 + v332 + 8656) = v326;
                        ++*(_BYTE *)(a9 + 8670);
                        *(_DWORD *)(v330 + 8600) = 1;
                        *(_DWORD *)(*(_QWORD *)(a9 + 8688) + 4 * v327) = v323 + 1;
                        v333 = v382 + 4 * v327;
                        goto LABEL_585;
                      }
                    }
                    *(_DWORD *)(v328 + 7720) = 2;
                    v335 = *v388;
                    if ((_DWORD)v335 == *(unsigned __int8 *)(a9 + 8596))
                    {
                      EvLog_v("PP_Update_Glonass: num_viz & num_AA miss-match,  %d  %d   FrqId %d   Slot %d", *v388, v335, v327, v323 + 1);
                      v335 = *v388;
                    }
                    v336 = 0;
                    if ((_DWORD)v335)
                    {
                      v337 = v335;
                      v338 = (unsigned __int16 *)(a9 + 6194);
                      do
                      {
                        v340 = *v338++;
                        v339 = v340;
                        if (v340 != (unsigned __int16)v321)
                        {
                          *(_WORD *)(a9 + 2 * v336 + 6194) = v339;
                          v336 = (v336 + 1);
                        }
                        --v337;
                      }
                      while (v337);
                    }
                    if ((_DWORD)v336 != (v335 - 1))
                      EvLog_nd("PP_Update_Glonass: num_vis not decremented", 2, v324, v336, v335);
                    *(_WORD *)(a9 + 2 * v336 + 6194) = -1;
                    *v388 = v336;
                    v341 = *(unsigned __int8 *)(a9 + 8596) - 1;
                    if (v341 == v336)
                    {
                      v342 = (_BYTE *)(a9 + v322 + 5976);
                      v343 = (char)*v342;
                      *(_BYTE *)(a9 + 8596) = v341;
                      v14 = (uint64_t)v378;
                      if ((v343 & 0x80000000) == 0)
                      {
                        v344 = a9 + 48 * v343;
                        *(_OWORD *)(v344 + 102) = 0u;
                        *(_OWORD *)(v344 + 88) = 0u;
                        *(_OWORD *)(v344 + 72) = 0u;
                        *v342 = -1;
                      }
                      v320 -= v320 > 0;
                      EvCrt_v("PP_Update_Glonass:  Error:  Two Glonass SVs visible on same freq,  FrqId %d  Slot %d", v327, v325 + 1);
                    }
                    else
                    {
                      v14 = (uint64_t)v378;
                    }
                  }
                }
              }
            }
            v201 = v320++ < 217;
            if (v201)
              continue;
            break;
          }
          v345 = 0;
          v346 = a9 + 7848;
          v18 = v385;
          while (2)
          {
            v347 = a9 + 4 * v345;
            if (*(_DWORD *)(v347 + 8600))
            {
LABEL_603:
              if (++v345 == 14)
                goto LABEL_567;
              continue;
            }
            break;
          }
          v348 = 0;
          v349 = 0;
          v350 = (_DWORD *)(v347 + 8600);
          *(_QWORD *)&__b[0] = 0;
          v351 = *(_QWORD *)(a9 + 8680);
          v352 = 1;
          do
          {
            v353 = *(_DWORD *)(v351 + 4 * v348);
            if (v353 == (_DWORD)v345 - 7)
              *((_DWORD *)__b + v349++) = v348;
            else
              v352 &= v353 != 2139062143;
            if (v348 > 0x16)
              break;
            ++v348;
          }
          while ((int)v349 < 2);
          if (v349 == 2)
          {
            v354 = *(_DWORD *)(v346 + 4 * SLODWORD(__b[0]));
            if (v354 == 3)
            {
              v355 = *(_DWORD *)(v346 + 4 * SDWORD1(__b[0]));
              if (v355 == 3)
              {
                *v350 = 3;
                v356 = a9 + 8592;
                ++*(_BYTE *)(a9 + 8672);
LABEL_623:
                --*(_BYTE *)(v356 + 79);
                goto LABEL_603;
              }
LABEL_617:
              v357 = v355 > 1;
              if ((v352 & 1) == 0)
              {
LABEL_624:
                v358 = 0;
                goto LABEL_626;
              }
LABEL_620:
              if (v349 != 1)
              {
                if (!v349)
                {
                  *v350 = 2;
                  v356 = a9 + 8592;
                  goto LABEL_623;
                }
                goto LABEL_624;
              }
              v358 = *(_DWORD *)(v346 + 4 * SLODWORD(__b[0])) > 1;
LABEL_626:
              if (v357 || v358)
              {
                *v350 = 2;
                --*(_BYTE *)(a9 + 8671);
                if (v349 == 2 && (v352 & 1) != 0)
                {
                  v359 = __b[0];
                  v360 = *(char *)(SLODWORD(__b[0]) + a10 + 32);
                  v361 = *(char *)(SDWORD1(__b[0]) + a10 + 32);
                  if (v361 <= -5)
                    v362 = __b[0];
                  else
                    v362 = DWORD1(__b[0]);
                  if (v360 <= -5)
                    v363 = DWORD1(__b[0]);
                  else
                    v363 = __b[0];
                  if (v360 < v361)
                    v359 = DWORD1(__b[0]);
                  if (v361 == -99)
                    v359 = v363;
                  if (v360 == -99)
                    v359 = v362;
                  *(_DWORD *)(*(_QWORD *)(a9 + 8688) + 4 * v345) = v359 + 1;
                  *(_DWORD *)(v382 + 4 * v345 + 17480) = 3;
                }
              }
              goto LABEL_603;
            }
            if (v354 >= 2)
            {
              v355 = *(_DWORD *)(v346 + 4 * SDWORD1(__b[0]));
              goto LABEL_617;
            }
          }
          v357 = 0;
          if ((v352 & 1) == 0)
            goto LABEL_624;
          goto LABEL_620;
        }
        *(_WORD *)(a9 + 8671) = 0;
        memset_pattern16((void *)(a9 + 8600), &unk_24BC09180, 0x38uLL);
LABEL_567:
        SB_SBAS_PrePos(v381, (uint64_t)v380, v18, v14, a9, a10);
        return;
      default:
        goto LABEL_334;
    }
  }
}

_BYTE *PP_BDS_D2_Set_Not_Visible(_BYTE *result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v7;
  unint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          v7 = result;
          if (*result)
          {
            v8 = 0;
            v9 = 0;
            do
            {
              v16 = 0;
              v10 = *(unsigned __int16 *)(a3 + 2 * v8);
              if ((__int16)v10 >= 1)
              {
                v11 = v10 - 1;
                result = (_BYTE *)LongPrnIdx_To_Prn(v10 - 1, &v16);
                if (v16 == 4 && result - 59 <= 0xFFFFFFCA)
                {
                  *(_WORD *)(a3 + 2 * v8) = -1;
                  *(_DWORD *)(a4 + 4 * v11) = 2;
                  ++v9;
                }
              }
              ++v8;
              v12 = *v7;
            }
            while (v8 < v12);
            if (v9)
            {
              if (*v7)
              {
                v13 = 0;
                LODWORD(v14) = 0;
                do
                {
                  v15 = *(__int16 *)(a3 + 2 * v13);
                  if (v15 >= 1)
                  {
                    *(_WORD *)(a3 + 2 * v14) = v15;
                    LODWORD(v14) = v14 + 1;
                    LOBYTE(v12) = *v7;
                  }
                  ++v13;
                }
                while (v13 < v12);
              }
              else
              {
                LODWORD(v14) = 0;
              }
              if (v14 < v12)
              {
                v14 = v14;
                do
                {
                  if (*(__int16 *)(a3 + 2 * v14) >= 1)
                  {
                    *(_WORD *)(a3 + 2 * v14) = -1;
                    LOBYTE(v12) = *v7;
                  }
                  ++v14;
                }
                while (v14 < v12);
              }
              *v7 = v12 - v9;
              *a2 += v9;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t NK_VVel_Aiding_Required(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  double *v10;
  int v11;
  _BOOL4 v12;
  unsigned __int8 v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  BOOL v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25[2];
  double v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v6 = a2 + 60400;
  v7 = (int *)(a1 + 27136);
  if ((!*(_DWORD *)(a1 + 27136) || *(int *)(a2 + 20) < 8 || *(_BYTE *)(a1 + 241)) && *(_BYTE *)v6
    || (v8 = *(_DWORD *)(a1 + 20), (v8 - 5) < 4)
    || v8 == 4 && *(double *)(a2 + 1840) > 50.0)
  {
    result = 0;
    *(_BYTE *)a3 = 0;
    return result;
  }
  v10 = (double *)(a2 + 36600);
  v25[0] = 0.0;
  v25[1] = 0.0;
  v26 = 0.0;
  Comp_NEDvar_UDU(a1 + 976, 0xCu, 9, (double (*)[3])(a2 + 1736), v25);
  v11 = *v7;
  v12 = *v7 && !*(_BYTE *)(a1 + 241) && (*(_DWORD *)(a1 + 20) & 0xFFFFFFFE) == 2 && *(double *)(a2 + 1848) < 2.0;
  if (*(int *)(a2 + 20) > 8)
    v13 = 4;
  else
    v13 = 5;
  if (*(_DWORD *)(v6 + 1696) == 1 && *(double *)(v6 + 32) < 4.0)
  {
    v13 = 0;
  }
  else if (v12 && *(unsigned __int8 *)(v6 + 1636) < 4u)
  {
    v13 = 0x80;
  }
  else if (*(_DWORD *)(v6 + 1680) == 1 && *(double *)(a2 + 60160) < 1.0e-16)
  {
    --v13;
  }
  v14 = v26;
  if ((*(unsigned __int8 *)(v6 + 1637) < v13
     || *(double *)(a2 + 21696) + *v10 < 1.5
     || ((v15 = *(int *)(a1 + 20), v15 > 8) ? (v16 = 1000000.0) : (v16 = dbl_24BC092D0[v15]), v26 > v16))
    && (*(_BYTE *)(v6 + 1637)
     || *(_DWORD *)(v6 + 1700)
     || *(_DWORD *)(v6 + 1708)
     || *(_DWORD *)(v6 + 1724)
     || *(_DWORD *)(v6 + 1728)))
  {
    *(_BYTE *)a3 = 1;
  }
  else if (!*(_BYTE *)a3)
  {
    return 0;
  }
  if (v11 && !*(_BYTE *)(a1 + 241))
  {
    v19 = *(double *)(a2 + 1832);
    *(double *)(a3 + 24) = -v19;
    if (v12
      && ((v20 = *(double *)(a2 + 1848), v20 < 1.0) ? (v21 = *(unsigned __int8 *)(v6 + 1636) >= 3u) : (v21 = 1),
          !v21 || v20 < 0.2)
      || v19 * v19 > v14 * 9.0)
    {
      *(_QWORD *)(a3 + 24) = 0;
    }
    v22 = *(int *)(a1 + 20);
    if (v22 > 8)
      v23 = 9000000.0;
    else
      v23 = dbl_24BC09240[v22];
    if (v14 <= v23)
    {
      if (v22 > 8)
        v23 = 250000.0;
      else
        v23 = dbl_24BC09288[v22];
      if (v14 >= v23)
        goto LABEL_64;
    }
    else
    {
      *(_QWORD *)(a3 + 24) = 0;
    }
    v14 = v23;
LABEL_64:
    if (v22 > 8)
      v24 = 1000000.0;
    else
      v24 = dbl_24BC092D0[v22];
    v18 = v14 + v24;
    goto LABEL_68;
  }
  *(_QWORD *)(a3 + 24) = 0;
  v17 = *(int *)(a1 + 20);
  if (v17 >= 9)
    v18 = 1000000.0;
  else
    v18 = dbl_24BC092D0[v17];
LABEL_68:
  *(double *)(a3 + 32) = v18;
  *(_DWORD *)(a3 + 4) = 2;
  *(_DWORD *)(a3 + 20) = *(_DWORD *)a2;
  *(_BYTE *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 48) = xmmword_24BC09230;
  *(_QWORD *)(a3 + 64) = 0;
  return 1;
}

__n128 GN_GPS_Get_LibVersion(char *a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  char *v12;
  uint64_t v13;
  int v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 result;
  __int128 v25;
  __int128 v26;
  char *v27[2];
  char *v28;
  char *v29;
  _BYTE v30[15];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned __int16 *)(qword_257A47B48 + 476);
  v3 = *(unsigned __int16 *)(qword_257A47B48 + 478);
  v4 = *(_DWORD *)(qword_257A47B48 + 480);
  v5 = *(unsigned __int8 *)(qword_257A47B48 + 484);
  v6 = *(unsigned __int8 *)(qword_257A47B48 + 485);
  v7 = *(unsigned __int8 *)(qword_257A47B48 + 486);
  v8 = *(unsigned __int8 *)(qword_257A47B48 + 487);
  v9 = qword_257A47BA8;
  if (__PAIR64__(*(unsigned __int16 *)(qword_257A47BA8 + 14), *(unsigned __int16 *)(qword_257A47BA8 + 8)) != __PAIR64__(v3, v2)
    || *(_DWORD *)(qword_257A47BA8 + 16) != v4
    || *(unsigned __int8 *)(qword_257A47BA8 + 20) != v5
    || *(unsigned __int8 *)(qword_257A47BA8 + 21) != v6
    || *(unsigned __int8 *)(qword_257A47BA8 + 22) != v7
    || *(unsigned __int8 *)(qword_257A47BA8 + 23) != v8)
  {
    *(_WORD *)(qword_257A47BA8 + 8) = v2;
    *(_WORD *)(v9 + 14) = v3;
    *(_DWORD *)(v9 + 16) = v4;
    *(_BYTE *)(v9 + 20) = v5;
    *(_BYTE *)(v9 + 21) = v6;
    *(_BYTE *)(v9 + 22) = v7;
    *(_BYTE *)(v9 + 23) = v8;
    v10 = (v2 >> 10) & 0x1F | 0x40;
    *(_BYTE *)(v9 + 10) = (v2 >> 10) & 0x1F | 0x40;
    *(_BYTE *)(v9 + 11) = (v2 >> 5) & 0x1F | 0x40;
    v11 = (unsigned __int8 *)(v9 + 11);
    *(_BYTE *)(v9 + 12) = v2 & 0x1F | 0x40;
    *(_BYTE *)(v9 + 13) = 0;
    v12 = *(char **)v9;
    v13 = *(_QWORD *)v9 + 33;
    v28 = v12;
    v29 = (char *)v13;
    v27[1] = v12;
    do
    {
      v27[0] = v12 + 1;
      *v12 = v10;
      v12 = v27[0];
      if (v27[0] >= v29)
      {
        v12 = v28;
        v27[0] = v28;
      }
      v14 = *v11++;
      LOBYTE(v10) = v14;
    }
    while (v14);
    v27[0] = v12 + 1;
    *v12 = 58;
    if (v27[0] >= v29)
      v27[0] = v28;
    sprintf_03x(v27, *(unsigned __int16 *)(v9 + 14));
    v15 = v27[0]++;
    *v15 = 45;
    if (v27[0] >= v29)
      v27[0] = v28;
    v16 = *(unsigned int *)(v9 + 16);
    v30[0] = hexTABLE[v16 >> 28];
    v30[1] = hexTABLE[(v16 >> 24) & 0xF];
    hex6((uint64_t)v27, v16, v30, 2);
    v17 = v27[0]++;
    *v17 = 45;
    if (v27[0] >= v29)
      v27[0] = v28;
    sprintf_02d(v27, *(unsigned __int8 *)(v9 + 20));
    v18 = v27[0]++;
    *v18 = 46;
    if (v27[0] >= v29)
      v27[0] = v28;
    sprintf_02d(v27, *(unsigned __int8 *)(v9 + 21));
    v19 = v27[0]++;
    *v19 = 46;
    if (v27[0] >= v29)
      v27[0] = v28;
    sprintf_02d(v27, *(unsigned __int8 *)(v9 + 22));
    v20 = v27[0]++;
    *v20 = 46;
    if (v27[0] >= v29)
      v27[0] = v28;
    sprintf_02d(v27, *(unsigned __int8 *)(v9 + 23));
  }
  v21 = *(_OWORD *)(v9 + 24);
  v22 = *(_OWORD *)(v9 + 40);
  v23 = *(_OWORD *)(v9 + 72);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(v9 + 56);
  *((_OWORD *)a1 + 3) = v23;
  *(_OWORD *)a1 = v21;
  *((_OWORD *)a1 + 1) = v22;
  result = *(__n128 *)(v9 + 88);
  v25 = *(_OWORD *)(v9 + 104);
  v26 = *(_OWORD *)(v9 + 136);
  *((_OWORD *)a1 + 6) = *(_OWORD *)(v9 + 120);
  *((_OWORD *)a1 + 7) = v26;
  *((__n128 *)a1 + 4) = result;
  *((_OWORD *)a1 + 5) = v25;
  return result;
}

uint64_t GN_GPS_Initialise(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  void *inited;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  __int16 v13;
  uint64_t i;
  char *v15;
  uint64_t j;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  _OWORD *v43;
  __int128 v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _OWORD __src[2089];
  __int128 v50;
  _BYTE v51[28];
  char v52[15];
  uint64_t v53;

  MEMORY[0x24BDAC7A8](a1);
  v53 = *MEMORY[0x24BDAC8D0];
  v1 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  v2 = 10;
  do
  {
    *(_DWORD *)&v51[4 * v2 - 16] = v1;
    v3 = v2-- + 1;
  }
  while (v3 > 1);
  Last_Published_Nav_Data_TTag = 0;
  Last_Published_Raw_Meas_TTag = 0;
  _MergedGlobals_1 = 0;
  inited = GNSS_Init_p_list();
  GNSS_Clear_DataAreas((uint64_t)inited);
  v5 = *((_QWORD *)&g_GN_GPS_Data_p_list + 1);
  **((_OWORD **)&g_GN_GPS_Data_p_list + 1) = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  GNSS_HL_Data_Bases_Clear((uint64_t)&g_GN_GPS_Data_p_list);
  EvCrt_v("GN_GPS_Initialise: ");
  g_Logging_Cfg = 4;
  v6 = qword_257A47BA8;
  *(_WORD *)(qword_257A47BA8 + 8) = 0;
  *(_WORD *)(v6 + 14) = 0;
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0x7375646E6962696CLL;
  LOBYTE(v7) = 32;
  *(_BYTE *)(v6 + 32) = 32;
  *((_QWORD *)&__src[1] + 1) = v6 + 41;
  *(_QWORD *)&__src[1] = v6 + 32;
  *((_QWORD *)&__src[0] + 1) = v6 + 32;
  v8 = (_BYTE *)(v6 + 33);
  strcpy(v52, " 2");
  v9 = 1;
  do
  {
    *(_QWORD *)&__src[0] = v8 + 1;
    *v8 = v7;
    v8 = *(_BYTE **)&__src[0];
    if (*(_QWORD *)&__src[0] >= *((_QWORD *)&__src[1] + 1))
    {
      v8 = *(_BYTE **)&__src[1];
      *(_QWORD *)&__src[0] = *(_QWORD *)&__src[1];
    }
    v7 = v52[v9++];
  }
  while (v7);
  *(_QWORD *)&__src[0] = v8 + 1;
  *v8 = 46;
  if (*(_QWORD *)&__src[0] >= *((_QWORD *)&__src[1] + 1))
    *(_QWORD *)&__src[0] = *(_QWORD *)&__src[1];
  digit2((uint64_t)__src, 0x1Fu, v52, 0, 0);
  v10 = (_BYTE *)(*(_QWORD *)&__src[0])++;
  *v10 = 46;
  if (*(_QWORD *)&__src[0] >= *((_QWORD *)&__src[1] + 1))
    v11 = *(_BYTE **)&__src[1];
  else
    v11 = *(_BYTE **)&__src[0];
  *(_QWORD *)&__src[0] = v11 + 1;
  *v11 = 48;
  if (*(_QWORD *)&__src[0] >= *((_QWORD *)&__src[1] + 1))
    v12 = *(_BYTE **)&__src[1];
  else
    v12 = *(_BYTE **)&__src[0];
  *(_QWORD *)&__src[0] = v12 + 1;
  *v12 = 45;
  strcpy((char *)(v6 + 41), "240615-000:0000-00000000-00.00.00.00  Aug  3 2024 08:38:42");
  *(_QWORD *)v6 = v6 + 48;
  *(_BYTE *)(v6 + 152) = 0;
  *(_DWORD *)&word_257A47E56 = 0;
  if (byte_257A47E54 == 1)
  {
    v13 = word_257A47E5A + 1;
  }
  else
  {
    v13 = 1;
    byte_257A47E54 = 1;
  }
  word_257A47E5A = v13;
  GNSS_Mark_Restart(0);
  DWORD1(v50) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  EvLog("GN_GPS_Initialise:  Read NV_Store NO Data");
  bzero(__src, 0x8290uLL);
  for (i = 192; i != 1984; i += 56)
  {
    v15 = (char *)__src + i;
    *((_DWORD *)v15 + 12) = 0;
    *((_OWORD *)v15 + 1) = 0uLL;
    *((_OWORD *)v15 + 2) = 0uLL;
    *(_OWORD *)v15 = 0uLL;
  }
  for (j = 124; j != 380; j += 8)
  {
    v17 = &__src[j];
    *(_OWORD *)((char *)v17 + 107) = 0uLL;
    v17[5] = 0uLL;
    v17[6] = 0uLL;
    v17[3] = 0uLL;
    v17[4] = 0uLL;
    v17[1] = 0uLL;
    v17[2] = 0uLL;
    *v17 = 0uLL;
  }
  memset(&__src[380], 0, 22);
  v18 = -560;
  do
  {
    *(_DWORD *)((char *)&__src[419] + v18 + 8) = 0;
    v19 = (_OWORD *)((char *)&__src[416] + v18 + 8);
    v19[1] = 0uLL;
    v19[2] = 0uLL;
    *v19 = 0uLL;
    v18 += 56;
  }
  while (v18);
  v20 = 0xFFFFFFFFFFFFFB0;
  do
  {
    v21 = (_OWORD *)((char *)&__src[v20 + 496] + 8);
    *(_OWORD *)((char *)v21 + 107) = 0uLL;
    v21[5] = 0uLL;
    v21[6] = 0uLL;
    v21[3] = 0uLL;
    v21[4] = 0uLL;
    v21[1] = 0uLL;
    v21[2] = 0uLL;
    *v21 = 0uLL;
    v20 += 8;
  }
  while (v20 * 16);
  *(_QWORD *)((char *)&__src[500] + 6) = 0;
  *(_OWORD *)((char *)&__src[498] + 8) = 0u;
  *(_OWORD *)((char *)&__src[499] + 8) = 0u;
  *(_OWORD *)((char *)&__src[496] + 8) = 0u;
  *(_OWORD *)((char *)&__src[497] + 8) = 0u;
  v22 = 0xFFFFFFFFFFFFF94;
  do
  {
    v23 = &__src[v22];
    v23[610] = 0uLL;
    v23[609] = 0uLL;
    *(_OWORD *)((char *)&__src[v22 + 610] + 11) = 0uLL;
    v22 += 3;
  }
  while (v22 * 16);
  LOWORD(__src[832]) = 0;
  *(_QWORD *)((char *)&__src[831] + 4) = 0;
  *(_DWORD *)((char *)&__src[831] + 11) = 0;
  WORD4(__src[834]) = 0;
  *(_QWORD *)((char *)&__src[833] + 12) = 0;
  *(_DWORD *)((char *)&__src[834] + 3) = 0;
  *(_OWORD *)((char *)&__src[832] + 8) = 0u;
  WORD4(__src[833]) = 0;
  v24 = (char *)&__src[1055] + 8;
  memset(&__src[830], 0, 18);
  bzero(&__src[609], 0xDCBuLL);
  v25 = -3528;
  do
  {
    v26 = (char *)&__src[1055] + v25 + 8;
    *(_DWORD *)(v26 + 47) = 0;
    *((_OWORD *)v26 + 1) = 0uLL;
    *((_OWORD *)v26 + 2) = 0uLL;
    *(_OWORD *)v26 = 0uLL;
    v25 += 56;
  }
  while (v25);
  v27 = 630;
  do
  {
    *(_OWORD *)(v24 + 90) = 0uLL;
    *(_OWORD *)(v24 + 76) = 0uLL;
    *(_OWORD *)(v24 + 60) = 0uLL;
    *(_OWORD *)(v24 + 44) = 0uLL;
    *(_OWORD *)(v24 + 28) = 0uLL;
    *(_OWORD *)(v24 + 108) = 0uLL;
    *(_OWORD *)(v24 + 124) = 0uLL;
    *(_OWORD *)(v24 + 140) = 0uLL;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = 0;
    *(_QWORD *)v24 = 0;
    *((_WORD *)v24 + 12) = 0;
    v24 += 160;
    v27 -= 10;
  }
  while (v27 * 16);
  LOWORD(__src[1687]) = 0;
  *((_QWORD *)&__src[1686] + 1) = 0;
  *(_OWORD *)((char *)&__src[1685] + 8) = 0u;
  *(_DWORD *)((char *)&__src[1688] + 14) = 0;
  *(_OWORD *)((char *)&__src[1687] + 8) = 0u;
  *(_QWORD *)((char *)&__src[1688] + 5) = 0;
  do
  {
    WORD6(__src[v27 + 1690]) = 0;
    v28 = (char *)&__src[v27 + 1690] + 12;
    *((_WORD *)v28 + 1) = 0;
    *((_WORD *)v28 + 2) = 0;
    *((_DWORD *)v28 + 2) = 0;
    *((_WORD *)v28 + 6) = 0;
    *((_QWORD *)v28 + 2) = 0;
    *((_QWORD *)v28 + 3) = 0;
    *(_QWORD *)(v28 + 29) = 0;
    *(_QWORD *)(v28 - 12) = 0;
    *(_QWORD *)(v28 - 20) = 0;
    v27 += 4;
    *(_DWORD *)(v28 - 5) = 0;
  }
  while (v27 != 56);
  v29 = -1232;
  do
  {
    v30 = (char *)&__src[1822] + v29 + 8;
    *((_DWORD *)v30 + 20) = 0;
    *((_OWORD *)v30 + 3) = 0uLL;
    *((_OWORD *)v30 + 4) = 0uLL;
    *((_OWORD *)v30 + 1) = 0uLL;
    *((_OWORD *)v30 + 2) = 0uLL;
    *(_OWORD *)v30 = 0uLL;
    v29 += 88;
  }
  while (v29);
  v31 = 0;
  DWORD2(__src[1824]) = 0;
  *(_OWORD *)((char *)&__src[1822] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1823] + 8) = 0u;
  DWORD1(__src[1826]) = 0;
  BYTE8(__src[1826]) = 0;
  HIDWORD(__src[1826]) = 0;
  LOBYTE(__src[1827]) = 0;
  memset(&__src[1825], 0, 18);
  do
  {
    v32 = (char *)&__src[v31 + 1827] + 8;
    v33 = (char *)&__src[v31 + 1828] + 12;
    *((_QWORD *)v33 + 2) = 0;
    *(_OWORD *)v33 = 0uLL;
    *(_OWORD *)v32 = 0uLL;
    *((_WORD *)v32 + 8) = 0;
    v31 += 3;
  }
  while (v31 != 72);
  v34 = -1728;
  do
  {
    v35 = (char *)&__src[2007] + v34 + 8;
    *(_QWORD *)(v35 + 62) = 0;
    *((_OWORD *)v35 + 2) = 0uLL;
    *((_OWORD *)v35 + 3) = 0uLL;
    *(_OWORD *)v35 = 0uLL;
    *((_OWORD *)v35 + 1) = 0uLL;
    v34 += 72;
  }
  while (v34);
  v36 = 0xFFFFFFFFFFFFFDCLL;
  do
  {
    *((_QWORD *)&__src[v36 + 2044] + 1) = 0;
    v37 = (char *)&__src[v36 + 2043] + 8;
    *((_DWORD *)v37 + 6) = 0;
    *(_OWORD *)v37 = 0uLL;
    v36 += 2;
  }
  while (v36 * 16);
  *(_QWORD *)((char *)&__src[2044] + 14) = 0;
  *((_QWORD *)&__src[2044] + 1) = 0;
  *(_OWORD *)((char *)&__src[2043] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2073] + 2) = 0u;
  *(_OWORD *)((char *)&__src[2045] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2046] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2047] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2048] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2049] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2050] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2051] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2052] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2053] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2054] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2055] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2056] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2057] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2058] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2059] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2060] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2061] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2062] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2063] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2064] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2065] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2066] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2067] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2068] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2069] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2070] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2071] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2072] + 8) = 0u;
  DWORD2(__src[2075]) = 0;
  *(_OWORD *)((char *)&__src[2074] + 8) = 0u;
  memset(&__src[2076], 0, 204);
  v38 = (_QWORD *)qword_257A47BC8;
  memcpy((void *)qword_257A47BC8, __src, 0x828CuLL);
  NV_Ram_Init(v38);
  Debug_Log_NonVol(0, qword_257A47BC8);
  v48 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  DWORD2(v50) = v48;
  v39 = qword_257A47BD0;
  EvLog("NA_Ram_Init:");
  p_NA = v39;
  bzero(__src, 0x69F8uLL);
  s_NA_Ram::s_NA_Ram((s_NA_Ram *)__src);
  memcpy((void *)p_NA, __src, 0x69F8uLL);
  GNSS_HL_Data_Bases_Init(&g_GN_GPS_Data_p_list);
  *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1648) = -1169279272;
  Nav_Kalman_Update_Init(xmmword_257A47B58);
  v47 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  HIDWORD(v50) = v47;
  API_Query_Config(qword_257A47BB0);
  g_GN_GNSS_Nav_Debug_Port = 1;
  v46 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  *(_DWORD *)v51 = v46;
  v40 = qword_257A47B48;
  v41 = *(_DWORD *)(qword_257A47B48 + 436);
  *(_DWORD *)(qword_257A47B48 + 512) = v41;
  *(_DWORD *)(v40 + 504) = 0;
  EvLog_v("GN_GPS_Initialise:  GNB ME HW 0x%x 0x%x   ME FW Checksum 0x%x   TTick %u", *(unsigned __int16 *)(v40 + 476), *(unsigned __int16 *)(v40 + 478), *(_DWORD *)(v40 + 480), v41);
  EvLog_v("GN_GPS_Initialise:  %d %d %d  %d %d %d %d %d %d %d  %d %d %d %d %d %d %d  %d %d %d %d %d %d %d  %d %d  %d %d  %d %d %d %d  %d %d %d %d  %d  %d %d  %d %d  %d %d %d", *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 4), *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 65), *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 66), *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 22), *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 23), *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 24), *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 25), *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 26), *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 27), *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 28), *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 29), *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 30), *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 31), *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 32), *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 33), *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 34), *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 35),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 36),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 37),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 38),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 39),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 40),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 41),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 42),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 43),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 44),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 45),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 46),
    *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1652),
    *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1752),
    *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1744),
    *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 16),
    (int)*(double *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1664),
    (int)*(double *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1672),
    (int)*(double *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1680),
    (int)*(double *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1688),
    *(__int16 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1716),
    *(__int16 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1718),
    *(__int16 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1720),
    *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1812),
    *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1816),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1824),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1825),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1826));
  v42 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  *(_DWORD *)&v51[4] = v42;
  *(_DWORD *)&v51[8] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  EvLog_v("GN_GPS_Initialise: OS Time Waypoints: %u %d %d %d %d %d %d", (_DWORD)v50, DWORD1(v50) - (_DWORD)v50, v48 - (_DWORD)v50, v47 - (_DWORD)v50, v46 - (_DWORD)v50, v42 - (_DWORD)v50, *(_DWORD *)&v51[8] - (_DWORD)v50);
  v43 = (_OWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1764);
  *(_OWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1792) = *(_OWORD *)&v51[12];
  v44 = *(_OWORD *)v51;
  *v43 = v50;
  v43[1] = v44;
  return GNSS_Event_Log_Ctl(qword_257A47BF8);
}

void GNSS_Mark_Restart(int a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  char v6;
  char v7;
  unsigned __int8 *v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  __int16 *v16;
  const char *v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned __int8 *v28;
  int v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned __int8 *v33;
  int v34;
  uint64_t v35;
  char v36;
  char *v37;
  uint64_t v38;
  char v39;
  _BYTE v40[127];
  char v41[36];
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  GNSS_Write_NMEA((_QWORD *)qword_257A47BE8);
  GNSS_Write_GNB_Ctrl((char *)qword_257A47BE0);
  GNSS_GNB_Debug_Ctl(qword_257A47C00);
  GNSS_Event_Log_Ctl(qword_257A47BF8);
  GNSS_Nav_Debug_Ctl(qword_257A47BF0);
  API_Query_Config((uint64_t)v41);
  v2 = qword_257A47BE0;
  v3 = *(char **)(qword_257A47BE0 + 16);
  *(_QWORD *)qword_257A47BE0 = v3;
  *(_QWORD *)(v2 + 8) = v3;
  if (a1 == 2)
  {
    GN_GPS_Get_LibVersion(&v39);
    v4 = 0;
    v5 = *(char **)v2;
    v6 = 10;
    do
    {
      *(_QWORD *)v2 = v5 + 1;
      *v5 = v6;
      v5 = *(char **)v2;
      if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      {
        v5 = *(char **)(v2 + 16);
        *(_QWORD *)v2 = v5;
      }
      v6 = aPeGnLibVer[++v4];
    }
    while (v4 != 16);
    v7 = v39;
    if (v39)
    {
      v8 = v40;
      do
      {
        *(_QWORD *)v2 = v5 + 1;
        *v5 = v7;
        v5 = *(char **)v2;
        if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
        {
          v5 = *(char **)(v2 + 16);
          *(_QWORD *)v2 = v5;
        }
        v9 = *v8++;
        v7 = v9;
      }
      while (v9);
    }
    v10 = 32;
    v11 = 1u;
    do
    {
      *(_QWORD *)v2 = v5 + 1;
      *v5 = v10;
      v5 = *(char **)v2;
      if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      {
        v5 = *(char **)(v2 + 16);
        *(_QWORD *)v2 = v5;
      }
      v10 = aOsms[v11++];
    }
    while (v11 != 7);
    v12 = mach_continuous_time();
    sprintf_10u((_QWORD *)v2, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12));
    v13 = *(char **)v2;
    goto LABEL_47;
  }
  v14 = 10;
  v15 = 1u;
  do
  {
    *(_QWORD *)v2 = v3 + 1;
    *v3 = v14;
    v3 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    {
      v3 = *(char **)(v2 + 16);
      *(_QWORD *)v2 = v3;
    }
    v14 = asc_24BBE954D[v15++];
  }
  while (v15 != 46);
  switch(a1)
  {
    case 0:
      v16 = &word_257A47E5A;
      v17 = "GN_GPS_Initialise ";
      goto LABEL_26;
    case 3:
      v16 = &word_257A47E58;
      v17 = "WAKE ";
      goto LABEL_26;
    case 1:
      v16 = &word_257A47E56;
      v17 = "RESTART ";
LABEL_26:
      v18 = *v17;
      if (*v17)
      {
        v19 = (unsigned __int8 *)(v17 + 1);
        do
        {
          *(_QWORD *)v2 = v3 + 1;
          *v3 = v18;
          v3 = *(char **)v2;
          if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
          {
            v3 = *(char **)(v2 + 16);
            *(_QWORD *)v2 = v3;
          }
          v20 = *v19++;
          v18 = v20;
        }
        while (v20);
      }
      sprintf1da((_QWORD *)v2, (unsigned __int16)*v16, &v39, 0, 0);
      v3 = *(char **)v2;
      break;
  }
  v21 = 32;
  v22 = 1u;
  do
  {
    *(_QWORD *)v2 = v3 + 1;
    *v3 = v21;
    v3 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    {
      v3 = *(char **)(v2 + 16);
      *(_QWORD *)v2 = v3;
    }
    v21 = asc_24BBE959D[v22++];
  }
  while (v22 != 45);
  v23 = mach_continuous_time();
  sprintf_10u((_QWORD *)v2, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23));
  v24 = (_BYTE *)(*(_QWORD *)v2)++;
  *v24 = 10;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  GN_GPS_Get_LibVersion(&v39);
  v25 = 0;
  v13 = *(char **)v2;
  v26 = 10;
  do
  {
    *(_QWORD *)v2 = v13 + 1;
    *v13 = v26;
    v13 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    {
      v13 = *(char **)(v2 + 16);
      *(_QWORD *)v2 = v13;
    }
    v26 = aPeGnLibVer[++v25];
  }
  while (v25 != 16);
  v27 = v39;
  if (v39)
  {
    v28 = v40;
    do
    {
      *(_QWORD *)v2 = v13 + 1;
      *v13 = v27;
      v13 = *(char **)v2;
      if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      {
        v13 = *(char **)(v2 + 16);
        *(_QWORD *)v2 = v13;
      }
      v29 = *v28++;
      v27 = v29;
    }
    while (v29);
  }
LABEL_47:
  if (*(_BYTE *)(qword_257A47BA8 + 152))
  {
    v30 = 10;
    v31 = 1u;
    do
    {
      *(_QWORD *)v2 = v13 + 1;
      *v13 = v30;
      v13 = *(char **)v2;
      if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      {
        v13 = *(char **)(v2 + 16);
        *(_QWORD *)v2 = v13;
      }
      v30 = aHostversion[v31++];
    }
    while (v31 != 15);
    v32 = *(_BYTE *)(qword_257A47BA8 + 152);
    if (v32)
    {
      v33 = (unsigned __int8 *)(qword_257A47BA8 + 153);
      do
      {
        *(_QWORD *)v2 = v13 + 1;
        *v13 = v32;
        v13 = *(char **)v2;
        if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
        {
          v13 = *(char **)(v2 + 16);
          *(_QWORD *)v2 = v13;
        }
        v34 = *v33++;
        v32 = v34;
      }
      while (v34);
    }
  }
  v35 = 0;
  v36 = 10;
  do
  {
    *(_QWORD *)v2 = v13 + 1;
    *v13 = v36;
    v13 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    {
      v13 = *(char **)(v2 + 16);
      *(_QWORD *)v2 = v13;
    }
    v36 = asc_24BBE95F1[++v35];
  }
  while (v35 != 2);
  v37 = *(char **)(v2 + 16);
  if (v42 >= 1)
  {
    v38 = (unsigned __int16)((_WORD)v13 - *(_DWORD *)(v2 + 8));
    GN_GPS_Write_Event_Log(v38, v37);
    GNSS_Write_NMEA((_QWORD *)v2);
    v37 = *(char **)(v2 + 16);
    if (v42 >= 4)
    {
      GN_GPS_Write_GNB_Debug(v38, v37);
      GN_GPS_Write_Nav_Debug(v38, *(char **)(v2 + 16));
      v37 = *(char **)(v2 + 16);
    }
  }
  *(_QWORD *)v2 = v37;
  *(_QWORD *)(v2 + 8) = v37;
  if (a1)
    GNSS_Nav_Debug_InitWrite((uint64_t)&g_GN_GPS_Data_p_list);
}

char *GN_GPS_Update(void)
{
  _DWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char *v4;
  BOOL v6;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  char v15;
  double v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char **v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  double v32;
  double v33;
  double v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  char *GNSS_SV_Str;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v0 = (_DWORD *)*((_QWORD *)&xmmword_257A47B18 + 1);
  v1 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  v2 = 451;
  do
  {
    v0[v2] = v1;
    v3 = v2 - 440;
    --v2;
  }
  while (v3 > 1);
  if ((_DWORD)g_GN_GPS_Data_p_list == 1)
  {
    v4 = "GN_GPS_Update:  ERROR:  Called while in PowerOff !";
    return EvCrt_v(v4);
  }
  if (!*(_BYTE *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 46))
  {
    if ((_DWORD)g_GN_GPS_Data_p_list)
    {
      if ((_DWORD)g_GN_GPS_Data_p_list == 7 || (_DWORD)g_GN_GPS_Data_p_list == 4)
      {
        v4 = "GN_GPS_Update:  ERROR:  Called while in Sleep/Coma !";
        return EvCrt_v(v4);
      }
      goto LABEL_23;
    }
LABEL_21:
    if (*(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1648) != -1169279272)
      EvCrt_v("GN_GPS_Update:  WARNING:  Called with unexpected GNSS_INVALID_EXE_STATE");
    goto LABEL_23;
  }
  if (!(_DWORD)g_GN_GPS_Data_p_list)
    goto LABEL_21;
  v6 = (_DWORD)g_GN_GPS_Data_p_list == 7 || (_DWORD)g_GN_GPS_Data_p_list == 4;
  if (v6)
  {
    v0[442] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    GNSS_Write_GNB_Ctrl((char *)qword_257A47BE0);
    GNSS_GNB_Debug_Ctl(qword_257A47C00);
    GNSS_Event_Log_Ctl(qword_257A47BF8);
    v0[443] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    return EvLog_v("Sensor in Sleep or Coma Mode: OS Time Waypoints, %u %d %d");
  }
LABEL_23:
  G5K_Read_GNB_Meas((char **)qword_257A47BD8);
  v0[444] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  G5K_ME_Decode_Meas(qword_257A47BD8, (char *)qword_257A47B48);
  v8 = (_DWORD *)qword_257A47B48;
  *(_DWORD *)(qword_257A47B48 + 516) = 0;
  if ((_DWORD)g_GN_GPS_Data_p_list == 5 || (_DWORD)g_GN_GPS_Data_p_list == 8)
  {
    v9 = v8[128];
    v10 = *((_QWORD *)&xmmword_257A47B18 + 1);
    if (v9)
      v8[129] = *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1652) + v9;
    v8[139] = 0;
    if (!*(_DWORD *)(v10 + 1836))
    {
      if (*(_BYTE *)(v10 + 1827))
      {
        *(_BYTE *)(v10 + 1827) = 0;
        *(_DWORD *)(v10 + 1836) = *(_DWORD *)(v10 + 1840);
      }
      else
      {
        v11 = mach_continuous_time();
        v10 = *((_QWORD *)&xmmword_257A47B18 + 1);
        *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1836) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                                                     * (double)v11);
        v8 = (_DWORD *)qword_257A47B48;
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)&xmmword_257A47B18 + 1);
  }
  v83 = 0;
  if (!G5K_ME_Poll_New_Meas((uint64_t)v8, v10, *((uint64_t *)&g_GN_GPS_Data_p_list + 1), qword_257A47AE8, (_DWORD *)qword_257A47AF0, &v83))
  {
    if (*(_QWORD *)(qword_257A47BE0 + 8) != *(_QWORD *)qword_257A47BE0)
      GNSS_Write_GNB_Ctrl((char *)qword_257A47BE0);
    if (*(_QWORD *)(qword_257A47BE8 + 8) != *(_QWORD *)qword_257A47BE8)
      GNSS_Write_NMEA((_QWORD *)qword_257A47BE8);
    if (*(_QWORD *)(qword_257A47BF0 + 8) != *(_QWORD *)qword_257A47BF0)
      GNSS_Nav_Debug_Ctl(qword_257A47BF0);
    if (*(_QWORD *)(qword_257A47BF8 + 8) != *(_QWORD *)qword_257A47BF8)
      GNSS_Event_Log_Ctl(qword_257A47BF8);
    if (*(_QWORD *)(qword_257A47C00 + 8) != *(_QWORD *)qword_257A47C00)
      GNSS_GNB_Debug_Ctl(qword_257A47C00);
    ++_MergedGlobals_1;
    v16 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v17 = (unint64_t)v16;
    v18 = *(_DWORD *)(qword_257A47AE8 + 4);
    v19 = (unint64_t)v16 - v18;
    _MergedGlobals_1 = 0;
    v20 = *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1652);
    if (g_GN_GPS_Data_p_list <= 8 && ((1 << g_GN_GPS_Data_p_list) & 0x124) != 0)
    {
      v21 = *(_DWORD *)(qword_257A47B48 + 504);
      if (v21 && (int)v17 - v21 < 501)
        goto LABEL_79;
      v22 = 5 * v20;
      if (v22 <= 3000)
        v22 = 3000;
      if (v19 >= v22)
      {
        EvLog_v("GN_GPS_Hard_Reset_GNB:  %d > %d ms gap!, >>>POWEROFF_WAKE_UP  (%u)", (unint64_t)v16 - v18, v22, v18);
        LODWORD(g_GN_GPS_Data_p_list) = 2;
        GN_GPS_Hard_Reset_GNB();
        *(_DWORD *)(qword_257A47AE8 + 4) = v17;
        v38 = qword_257A47B48;
        *(_DWORD *)(qword_257A47B48 + 480) = 0;
        *(_WORD *)(v38 + 488) = 0;
        goto LABEL_79;
      }
      EvLog_v("No valid comms :  %u  %d", v18, (unint64_t)v16 - v18);
      v23 = (char **)qword_257A47BE0;
      v24 = qword_257A47C00;
    }
    else
    {
      v36 = 3 * v20;
      if (v36 <= 1500)
        v36 = 1500;
      if (v19 < v36)
        goto LABEL_79;
      EvLog_v("GN_GPS_Update:  Lost BB Coms for %d > %d ms, >>>SLEEP_WAKE_UP  (%u)", (unint64_t)v16 - v18, v36, v18);
      LODWORD(g_GN_GPS_Data_p_list) = 8;
      v23 = (char **)qword_257A47BE0;
      v24 = qword_257A47C00;
    }
    G5K_ME_Send_WakeUp(v23, v24);
LABEL_79:
    GNSS_Event_Log_Ctl(qword_257A47BF8);
    return (char *)GNSS_GNB_Debug_Ctl(qword_257A47C00);
  }
  v12 = qword_257A47BD0;
  v13 = (_OWORD *)xmmword_257A47B18;
  *(_BYTE *)(xmmword_257A47B18 + 444) = 0;
  v13[28] = 0u;
  v13[29] = 0u;
  v13[30] = 0u;
  v13[31] = 0u;
  v13[32] = 0u;
  v13[33] = 0u;
  v13[34] = 0u;
  v13[35] = 0u;
  GNSS_GNB_Debug_Ctl(qword_257A47C00);
  if ((_DWORD)g_GN_GPS_Data_p_list != 11)
    EvCrt_d("GN_GPS_Update: GNSS_Exe_State = ", g_GN_GPS_Data_p_list);
  if (v83)
  {
    *(_WORD *)(v12 + 2) = 0;
    *(_BYTE *)(v12 + 4) = 0;
    *(_BYTE *)(v12 + 6) = 0;
    *(_WORD *)(v12 + 8) = 0;
    EvLog("GN_GPS_Update:  Cleared NA data because ME_Reset_Detected");
    v14 = qword_257A47B48;
    if (v83)
    {
      v15 = 1;
      goto LABEL_61;
    }
  }
  else
  {
    v14 = qword_257A47B48;
    v25 = *(_DWORD *)(qword_257A47B48 + 520);
    v26 = *(_DWORD *)(qword_257A47B48 + 556);
    if (v25 + 10 < v26 && v25 + 10000 < v26)
      return EvLog_v("GN_GPS_Update:  Warning - possible throughput problem  %u  %u  %u  %u");
  }
  v27 = g_GN_GPS_Data_p_list;
  if ((_DWORD)g_GN_GPS_Data_p_list != 2)
  {
    v37 = *(_DWORD *)(v14 + 448);
    if ((_DWORD)g_GN_GPS_Data_p_list == 5 || v37)
    {
      if ((_DWORD)g_GN_GPS_Data_p_list != 5)
      {
        EvLog_v("GN_GPS_Update:  Unexpected Coma_Ticks (%d) > 0 for GNSS_Exe_State (%d)", v37, (_DWORD)g_GN_GPS_Data_p_list);
        DbgLog_v(1, "GN_GPS_Update:  Unexpected Coma_Ticks (%d) > 0 for GNSS_Exe_State (%d)", *(_DWORD *)(qword_257A47B48 + 448), (_DWORD)g_GN_GPS_Data_p_list);
        v37 = *(_DWORD *)(qword_257A47B48 + 448);
      }
      if (!v37)
      {
        EvCrt_v("GN_GPS_Update: WARNING Coma Ticks = 0 even though Coma wakeup %d", (_DWORD)g_GN_GPS_Data_p_list);
        DbgLog_v(1, "GN_GPS_Update: WARNING Coma Ticks = 0 even though Coma wakeup %d", (_DWORD)g_GN_GPS_Data_p_list);
      }
      v27 = 6;
      LODWORD(g_GN_GPS_Data_p_list) = 6;
      v15 = v83;
    }
    else
    {
      v15 = 0;
      if ((_DWORD)g_GN_GPS_Data_p_list == 8)
      {
        v27 = 9;
        LODWORD(g_GN_GPS_Data_p_list) = 9;
      }
    }
    goto LABEL_62;
  }
  v15 = 0;
LABEL_61:
  v27 = 3;
  LODWORD(g_GN_GPS_Data_p_list) = 3;
  *(_WORD *)(v14 + 394) = 0;
  *(_DWORD *)(v14 + 556) = 0;
LABEL_62:
  v28 = *((_QWORD *)&xmmword_257A47B18 + 1);
  v80 = xmmword_257A47B18;
  *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 2016) = v27;
  *(_BYTE *)(v28 + 2014) = v15;
  v29 = qword_257A47B08;
  v30 = (_DWORD *)qword_257A47AE8;
  *(_WORD *)(qword_257A47B08 + 96) = 0;
  v31 = *(_DWORD *)v29;
  if (*(_DWORD *)v29)
  {
    v32 = *(double *)(v29 + 32) * 1000.0;
    v33 = -0.5;
    if (v32 > 0.0)
      v33 = 0.5;
    v34 = v32 + v33;
    if (v34 <= 2147483650.0)
    {
      if (v34 >= -2147483650.0)
        v35 = (int)v34;
      else
        v35 = 0x80000000;
    }
    else
    {
      v35 = 0x7FFFFFFF;
    }
    v39 = *(_DWORD *)(v29 + 20);
    v40 = *v30 + v35;
    v82 = v40 - 75 - v39;
    if (v31 > 0xB)
      v41 = 604800000;
    else
      v41 = dword_24BC09358[v31 - 1];
    v81 = v41;
    v42 = 0;
    v43 = 0;
    v79 = v39 - v40 + 75;
    v78 = v39 + 86400000 - v40 + 74;
    v44 = 1803;
    v45 = 10;
    v77 = v40 - 75 - v39;
    do
    {
      v46 = &v30[v42];
      if (v30[v42 + 1802] && (~*((unsigned __int16 *)v46 + 3608) & 0x208) == 0)
      {
        v47 = v30[v42 + 1802];
        if (v47 == 4 || v47 == 2)
        {
          v49 = 1500 * v30[v45];
          v50 = v30[v45 + 1] / 1023;
          v51 = v50 + v49;
          v52 = v50 + v49 - v82;
          if (v47 == 2)
          {
            if (v52 >= 43199999)
              v53 = 43199999;
            else
              v53 = v50 + v49 - v82;
            v54 = 86400000 * ((v78 + v49 + v50 - v53) / 0x5265C00u);
            v55 = v79 + v49 + v50 - v54;
            if (v55 <= -43200000)
              v56 = -43200000;
            else
              v56 = v79 + v49 + v50 - v54;
            v57 = v77 - v50 + v54 + v56;
            v6 = v57 == v49;
            v58 = (v57 - v49 - (v57 != v49)) / 0x5265C00;
            if (!v6)
              ++v58;
            v52 = v55 + 86400000 * v58;
          }
          if (v52 >= 0)
            v59 = v52;
          else
            v59 = -v52;
          if (v59 > v81)
          {
            *(_BYTE *)(v80 + v43 + 448) = 3;
            *(_DWORD *)(v80 + 576 + 4 * v43) = *v30;
            GNSS_SV_Str = Get_GNSS_SV_Str(v46[1802]);
            EvCrt_v("ChanReset %d : SF_Sync_Spoofing  %s  %d  SNR %d  %x  d_Sig_ToT_ms  %d(%d - %d) > %d", v43, GNSS_SV_Str, SHIBYTE(v30[v44 - 1]), LOBYTE(v30[v44]), *((unsigned __int16 *)v46 + 3608), v52, v51, v82, v81);
            *((_WORD *)v46 + 3608) &= 0xFDF7u;
            *(_BYTE *)(v29 + 96) = 0;
          }
        }
      }
      ++v43;
      v44 += 9;
      v45 += 14;
      v42 += 9;
    }
    while (v43 != 128);
    v27 = g_GN_GPS_Data_p_list;
  }
  switch(v27)
  {
    case 3:
      if (*(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1648) != -1169279272)
        goto LABEL_114;
      GNSS_Starting_Initialised();
      break;
    case 6:
    case 9:
      API_Set_Config((int *)qword_257A47BB0);
      GNSS_HL_System_Re_Start((uint64_t)&g_GN_GPS_Data_p_list);
      g_GN_GNSS_Nav_Debug_Port = 1;
      ++word_257A47E58;
      GNSS_Mark_Restart(3);
      v61 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v62 = *((_QWORD *)&xmmword_257A47B18 + 1);
      *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1760) = v61;
      *(_DWORD *)(v62 + 1808) = v61;
      break;
    case 11:
      GNSS_Nav_Debug_InitWrite((uint64_t)&g_GN_GPS_Data_p_list);
      API_Set_Config((int *)qword_257A47BB0);
      GNSS_HL_System_Run_Update((uint64_t)&g_GN_GPS_Data_p_list);
      break;
    default:
      EvLog_d("GN_GPS_Update: Unexpected GNSS_Exe_State state - restarting ", v27);
LABEL_114:
      GNSS_Starting_NotInitialised();
      break;
  }
  *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1648) = 0;
  v0[447] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  if ((_DWORD)g_GN_GPS_Data_p_list != 11)
    return EvLog_v("OS Time Waypoints: %u %u %d %d %d %d %d %d %d %d %d %d %d", *(unsigned int *)qword_257A47BB8, *(unsigned int *)(qword_257A47B48 + 456), (v0[441] - *(_DWORD *)(qword_257A47B48 + 456)));
  G5K_ME_Send_Ctrl(qword_257A47BE0, qword_257A47BE0, qword_257A47B48, *((uint64_t *)&xmmword_257A47B18 + 1), qword_257A47B00, xmmword_257A47B18);
  if (*(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1808))
  {
    v63 = mach_continuous_time();
    v66 = *(double *)&g_MacClockTicksToMsRelation * (double)v63;
    v67 = (unint64_t)v66;
    v68 = *(unsigned int *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1808);
    v69 = (unint64_t)v66 - v68;
    if ((unint64_t)v66 < v68)
    {
      EvCrt_nd("GN_GPS_Update: Detected OS ms Time has gone backwards", 2, v65, (unint64_t)v66, v68);
      *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1808) = 0;
      goto LABEL_133;
    }
    v70 = v69 / 1000;
    if (v69 / 1000 >= (uint64_t)*(unsigned int *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1812))
    {
      v71 = *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1820);
      if (v71)
      {
        v72 = ((int)v67 - v71) / 1000;
        if (v72 >= v70 && v72 < (uint64_t)*(unsigned int *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1816))
          goto LABEL_133;
      }
      else
      {
        v72 = 0;
      }
      GncP16_34HandleRestartAcq(v63, v64, v65);
      v73 = *((_QWORD *)&xmmword_257A47B18 + 1);
      *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1820) = v67;
      *(_DWORD *)(v73 + 1808) = 0;
      EvCrt_v("GN_GPS_Restart_Acquisition(): API call due to No Fix within %d s; Time since last call %d s", v70, v72);
    }
  }
LABEL_133:
  v0[448] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  if (*(double *)(*(_QWORD *)(p_api + 80) + 360) > 600.0)
  {
    v76 = qword_257A47B28;
    EvCrt_v("WARNING:  Nav Output Inhibited:  Wassenaar / ITAR Export License speed exceeded:  %f > %f m/s", *(double *)(qword_257A47B28 + 360), 600.0);
    GNSS_Event_Log_Ctl(qword_257A47BF8);
    GN_GPS_Wassenaar_ITAR_Speed_Exceeded(*(double *)(v76 + 360), 600.0);
  }
  else
  {
    if (API_Get_Nav_Data(qword_257A47BB8))
    {
      if (g_Logging_Cfg >= 1)
      {
        NMEA_Encode((char **)qword_257A47BE8, qword_257A47BB8, qword_257A47BC0);
        GNSS_Write_NMEA((_QWORD *)qword_257A47BE8);
      }
      v0[449] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v74 = v0[436];
      if (v74)
      {
        v75 = v0[413] + v0[437];
        v0[437] = v75;
        if (v75 >= v74)
        {
          if (g_GncPStateInfo != 8)
            GncP07_08WriteNVStore(0x8290uLL, (unsigned __int8 *)qword_257A47BC8);
          EvLog("GN_GPS_Write_NV_Store:  1");
          v0[437] = 0;
        }
      }
      v0[450] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    }
    GNSS_Nav_Debug_Screens(&g_GN_GPS_Data_p_list);
    GNSS_Event_Log_Ctl(qword_257A47BF8);
    GNSS_GNB_Debug_Ctl(qword_257A47C00);
    v0[451] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  }
  return EvLog_v("OS Time Waypoints: %u %u %d %d %d %d %d %d %d %d %d %d %d", *(unsigned int *)qword_257A47BB8, *(unsigned int *)(qword_257A47B48 + 456), (v0[441] - *(_DWORD *)(qword_257A47B48 + 456)));
}

BOOL GNSS_Starting_Initialised(void)
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;

  EvLog("GN_GPS_Update: Starting after initialisation");
  GNSS_Mark_Restart(2);
  v0 = qword_257A47B48;
  v1 = *(_QWORD *)(qword_257A47B48 + 476);
  v2 = *(_DWORD *)(qword_257A47B48 + 436);
  *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1756) = v2;
  v3 = *(_DWORD *)(v0 + 484);
  v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  v5 = *((_QWORD *)&xmmword_257A47B18 + 1);
  *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1760) = (unint64_t)v4;
  *(_DWORD *)(v5 + 1808) = (unint64_t)v4;
  *(_DWORD *)(qword_257A47B08 + 120) = v2;
  GNSS_HL_System_Start_Up((uint64_t)&g_GN_GPS_Data_p_list);
  v6 = qword_257A47B48;
  *(_QWORD *)(qword_257A47B48 + 476) = v1;
  *(_DWORD *)(v6 + 484) = v3;
  result = API_Set_Config((int *)qword_257A47BB0);
  LODWORD(g_GN_GPS_Data_p_list) = 11;
  return result;
}

BOOL GNSS_Starting_NotInitialised(void)
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  char v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;

  EvLog("GN_GPS_Update: Starting from Power Off but without having been initialised");
  g_GN_GNSS_Nav_Debug_Port = 1;
  ++word_257A47E56;
  word_257A47E58 = 0;
  GNSS_Mark_Restart(1);
  v0 = *(_DWORD *)(qword_257A47B48 + 476);
  v1 = *(unsigned __int16 *)(qword_257A47B48 + 480);
  v2 = *(_DWORD *)(qword_257A47B48 + 436);
  v3 = *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1836);
  v4 = *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1840);
  v5 = *(_BYTE *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 2014);
  v6 = *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 2016);
  v7 = *(_BYTE *)(qword_257A47B10 + 62170);
  GNSS_HL_System_Start_Up((uint64_t)&g_GN_GPS_Data_p_list);
  v8 = qword_257A47B48;
  *(_DWORD *)(qword_257A47B48 + 476) = v0;
  *(_DWORD *)(v8 + 480) = v1;
  v9 = *((_QWORD *)&xmmword_257A47B18 + 1);
  *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1836) = v3;
  *(_DWORD *)(v9 + 1840) = v4;
  *(_BYTE *)(v9 + 2014) = v5;
  *(_DWORD *)(v9 + 2016) = v6;
  *(_BYTE *)(qword_257A47B10 + 62170) = v7;
  *(_DWORD *)(v9 + 1756) = v2;
  v10 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  v11 = *((_QWORD *)&xmmword_257A47B18 + 1);
  *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1760) = (unint64_t)v10;
  *(_DWORD *)(v11 + 1808) = (unint64_t)v10;
  v12 = qword_257A47BB0;
  if (*(_BYTE *)(qword_257A47BB0 + 25))
  {
    EvLog_v("GNSS_Starting_NotInitialised:  Cleared Disabling L1 Band Family signals");
    v12 = qword_257A47BB0;
  }
  *(_BYTE *)(v12 + 25) = 0;
  return API_Set_Config((int *)v12);
}

uint64_t GN_GPS_Shutdown(void)
{
  uint64_t v1;

  EvLog("GN_GPS_Shutdown: ");
  if (g_GN_GPS_Data_p_list > 7 || ((1 << g_GN_GPS_Data_p_list) & 0x92) == 0)
  {
    G5K_ME_Send_Sleep((char *)qword_257A47BE0, (char **)qword_257A47C00, 0, 0xFFFFu, *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1826));
    EvLog("GN_GPS_Shutdown: Send ME to Coma ");
    *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1748) = 0;
    *(_DWORD *)(qword_257A47B48 + 504) = 0;
    LODWORD(g_GN_GPS_Data_p_list) = 4;
    if (g_GncPStateInfo != 8)
      GncP07_08WriteNVStore(0x8290uLL, (unsigned __int8 *)qword_257A47BC8);
    Debug_Log_NonVol(1, qword_257A47BC8);
    EvLog_nd("GN_GPS_Shutdown: GN_GPS_Write_NV_Store ", 4, v1, *(unsigned int *)(qword_257A47BC8 + 4), *(unsigned int *)(qword_257A47BC8 + 33416), 33424, 22);
  }
  else
  {
    EvLog_d("GN_GPS_Shutdown: GNSS already Idle or Off ", g_GN_GPS_Data_p_list);
  }
  return GNSS_Event_Log_Ctl(qword_257A47BF8);
}

uint64_t GN_GPS_WakeUp(void)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x24BDAC8D0];
  EvCrt_v("GN_GPS_WakeUp: ");
  v0 = qword_257A47B48;
  *(_DWORD *)(qword_257A47B48 + 512) = *(_DWORD *)(qword_257A47B48 + 436);
  G5K_ME_Flush_Data(v0);
  if ((_DWORD)g_GN_GPS_Data_p_list != 11)
  {
    *(_DWORD *)qword_257A47AE8 = 0;
    v1 = mach_continuous_time();
    v2 = qword_257A47AE8;
    *(_DWORD *)(qword_257A47AE8 + 4) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1);
    *(_QWORD *)(v2 + 8) = 0;
    v3 = -4608;
    do
    {
      v4 = qword_257A47AE8 + v3 + 11816;
      *(_BYTE *)(v4 + 32) = 0;
      *(_OWORD *)v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      v3 += 36;
    }
    while (v3);
    v5 = qword_257A47BD8;
    v6 = *(_QWORD *)(qword_257A47BD8 + 16);
    *(_QWORD *)qword_257A47BD8 = v6;
    *(_QWORD *)(v5 + 8) = v6;
    G5K_Read_GNB_Meas((char **)v5);
    v7 = *(_QWORD *)qword_257A47BD8 - *(_QWORD *)(qword_257A47BD8 + 8);
    if (v7)
    {
      EvLog_v("%s: Flushed bytes  %d", "GN_GPS_WakeUp", v7);
      v8 = qword_257A47BD8;
      v9 = *(_QWORD *)(qword_257A47BD8 + 16);
      *(_QWORD *)qword_257A47BD8 = v9;
      *(_QWORD *)(v8 + 8) = v9;
    }
  }
  G5K_ME_Send_WakeUp((char **)qword_257A47BE0, qword_257A47C00);
  EvLog_v("%s:  Read NV_Store NO Data", "GN_GPS_WakeUp");
  Debug_Log_NonVol(1, qword_257A47BC8);
  memset(v13, 0, 24);
  Debug_Log_ApxTime((unsigned __int16 *)v13);
  _MergedGlobals_1 = 0;
  if ((g_GN_GPS_Data_p_list - 4) < 3)
  {
    LODWORD(g_GN_GPS_Data_p_list) = 5;
    if (*(int *)qword_257A47B08 >= 11)
      *(_DWORD *)qword_257A47B08 = 10;
  }
  else if ((g_GN_GPS_Data_p_list - 7) > 2)
  {
    LODWORD(g_GN_GPS_Data_p_list) = 2;
    v10 = qword_257A47B08;
    *(_DWORD *)qword_257A47B08 = 0;
    *(_BYTE *)(v10 + 16) = 0;
  }
  else
  {
    LODWORD(g_GN_GPS_Data_p_list) = 8;
  }
  *(_WORD *)(qword_257A47BD0 + 3) = 0;
  v11 = *((_QWORD *)&xmmword_257A47B18 + 1);
  if (*(_BYTE *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 43))
  {
    EvLog_v("%s:  Cleared Disabling L1 Band Family signals", "GN_GPS_WakeUp");
    v11 = *((_QWORD *)&xmmword_257A47B18 + 1);
  }
  *(_BYTE *)(v11 + 43) = 0;
  return GNSS_Event_Log_Ctl(qword_257A47BF8);
}

uint64_t GN_GPS_Sleep(unsigned int a1, unsigned int a2, uint64_t a3)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t result;

  v4 = a1;
  EvCrt_nd("GN_GPS_Sleep: ", 2, a3, a1, a2);
  if (v4 >= 0x100)
  {
    v4 = 255;
    EvLog_v("GN_GPS_Sleep:  SleepModeTimeOut limited to %d s", 255);
  }
  switch((int)g_GN_GPS_Data_p_list)
  {
    case 0:
      LODWORD(g_GN_GPS_Data_p_list) = 1;
      EvCrt_Illegal_switch_case("GN_GPS_Sleep", 0x5C0u);
      break;
    case 1:
    case 2:
    case 3:
      v5 = 1;
      goto LABEL_8;
    case 4:
    case 5:
    case 6:
      goto LABEL_6;
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      if (v4)
        v5 = 7;
      else
LABEL_6:
        v5 = 4;
LABEL_8:
      LODWORD(g_GN_GPS_Data_p_list) = v5;
      break;
    default:
      break;
  }
  G5K_ME_Send_Sleep((char *)qword_257A47BE0, (char **)qword_257A47C00, v4, a2, *(unsigned __int8 *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1826));
  if (g_GncPStateInfo != 8)
    GncP07_08WriteNVStore(0x8290uLL, (unsigned __int8 *)qword_257A47BC8);
  *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1748) = 0;
  *(_DWORD *)(qword_257A47B48 + 504) = 0;
  EvLog_nd("GN_GPS_Sleep:  GN_GPS_Write_NV_Store ", 4, v6, *(unsigned int *)(qword_257A47BC8 + 4), *(unsigned int *)(qword_257A47BC8 + 33416), 33424, 22);
  if (*(_QWORD *)(qword_257A47BE8 + 8) != *(_QWORD *)qword_257A47BE8)
    GNSS_Write_NMEA((_QWORD *)qword_257A47BE8);
  if (*(_QWORD *)(qword_257A47BF8 + 8) != *(_QWORD *)qword_257A47BF8)
    GNSS_Event_Log_Ctl(qword_257A47BF8);
  if (*(_QWORD *)(qword_257A47BF0 + 8) != *(_QWORD *)qword_257A47BF0)
    GNSS_Nav_Debug_Ctl(qword_257A47BF0);
  if (*(_QWORD *)(qword_257A47BE0 + 8) != *(_QWORD *)qword_257A47BE0)
    GNSS_Write_GNB_Ctrl((char *)qword_257A47BE0);
  result = qword_257A47C00;
  if (*(_QWORD *)(qword_257A47C00 + 8) != *(_QWORD *)qword_257A47C00)
    return GNSS_GNB_Debug_Ctl(qword_257A47C00);
  return result;
}

char *EvLog_GN_GNSS_Config(const char *a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  int v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double v12;
  int v13;

  v2 = *(double *)(a2 + 48) * 1000000.0;
  v3 = -0.5;
  if (v2 <= 0.0)
    v4 = -0.5;
  else
    v4 = 0.5;
  v5 = v2 + v4;
  if (v5 <= 2147483650.0)
  {
    if (v5 >= -2147483650.0)
      v6 = (int)v5;
    else
      v6 = 0x80000000;
  }
  else
  {
    v6 = 0x7FFFFFFF;
  }
  v7 = *(double *)(a2 + 56) * 1000000.0;
  if (v7 > 0.0)
    v3 = 0.5;
  v8 = v7 + v3;
  if (v8 <= 2147483650.0)
  {
    if (v8 >= -2147483650.0)
      v9 = (int)v8;
    else
      v9 = 0x80000000;
  }
  else
  {
    v9 = 0x7FFFFFFF;
  }
  v10 = *(double *)(a2 + 64);
  v11 = -0.5;
  if (v10 > 0.0)
    v11 = 0.5;
  v12 = v10 + v11;
  if (v12 <= 2147483650.0)
  {
    if (v12 >= -2147483650.0)
      v13 = (int)v12;
    else
      v13 = 0x80000000;
  }
  else
  {
    v13 = 0x7FFFFFFF;
  }
  return EvLog_v("%s  %d  %d %d %d %d %d %d %d  %d %d %d %d %d %d %d  %d %d %d %d %d %d %d  %d %d  %d %d %d  %d  %d  %d  %d %d  %d %d %d  %d %d  %d %d", a1, *(_DWORD *)a2, *(unsigned __int8 *)(a2 + 4), *(unsigned __int8 *)(a2 + 5), *(unsigned __int8 *)(a2 + 6), *(unsigned __int8 *)(a2 + 7), *(unsigned __int8 *)(a2 + 8), *(unsigned __int8 *)(a2 + 9), *(unsigned __int8 *)(a2 + 10), *(unsigned __int8 *)(a2 + 11), *(unsigned __int8 *)(a2 + 12), *(unsigned __int8 *)(a2 + 13), *(unsigned __int8 *)(a2 + 14), *(unsigned __int8 *)(a2 + 15), *(unsigned __int8 *)(a2 + 16), *(unsigned __int8 *)(a2 + 17), *(unsigned __int8 *)(a2 + 18),
           *(unsigned __int8 *)(a2 + 19),
           *(unsigned __int8 *)(a2 + 20),
           *(unsigned __int8 *)(a2 + 21),
           *(unsigned __int8 *)(a2 + 22),
           *(unsigned __int8 *)(a2 + 23),
           *(unsigned __int8 *)(a2 + 24),
           *(unsigned __int8 *)(a2 + 25),
           *(unsigned __int8 *)(a2 + 26),
           *(unsigned __int8 *)(a2 + 27),
           *(unsigned __int8 *)(a2 + 28),
           *(unsigned __int16 *)(a2 + 30),
           *(unsigned __int8 *)(a2 + 32),
           *(_DWORD *)(a2 + 36),
           *(__int16 *)(a2 + 40),
           *(unsigned __int16 *)(a2 + 42),
           *(unsigned __int16 *)(a2 + 44),
           v6,
           v9,
           v13,
           *(_DWORD *)(a2 + 72),
           *(_DWORD *)(a2 + 76),
           *(unsigned __int8 *)(a2 + 80),
           *(unsigned __int8 *)(a2 + 81));
}

uint64_t GN_GPS_Set_Config(uint64_t a1)
{
  int v2;
  double v3;
  double v4;
  double v5;

  if (!a1)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: No changes applied");
    return 0;
  }
  v2 = g_Logging_Cfg;
  g_Logging_Cfg = 5;
  EvLog_GN_GNSS_Config("GN_GPS_Set_Config: ", a1);
  if (*(int *)a1 >= 3)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: PowerPerf = %d >%d, Out of range!");
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 44) > 0x2000u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: Birth_GPS_WeekNo = %d > %d, Out of range!");
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 30) <= 0x63u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: FixInterval = %d <100, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: ForceCold_Timeout = %d ==255, Out of range!");
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 42) >= 0x2000u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: Earliest_GPS_WeekNo = %d > 8191, Out of range!");
    return 0;
  }
  v3 = *(double *)(a1 + 48);
  if (v3 < -90.0 || v3 > 90.0)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: Reference_LLH[0] = %g <-90.0 or >90.0, Out of range!");
    return 0;
  }
  v4 = *(double *)(a1 + 56);
  if (v4 < -180.0 || v4 > 360.0)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: Reference_LLH[1] = %g <-180.0 or >360.0, Out of range!");
    return 0;
  }
  v5 = *(double *)(a1 + 64);
  if (v5 < -1000.0 || v5 > 20000.0)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: Reference_LLH[2] = %g <-1000.0 or >20000.0, Out of range!");
    return 0;
  }
  if (*(_DWORD *)(a1 + 72) >= 0xE11u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: NoFixTime_to_RestartAcq_s = %d >SECS_IN_HOUR, Out of range!");
    return 0;
  }
  if (*(_DWORD *)(a1 + 76) >= 0xE11u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: ReAcq_Call_Interval_s = %d >SECS_IN_HOUR, Out of range!");
    return 0;
  }
  if (!*(_BYTE *)(a1 + 4))
    EvCrt_v("GN_GPS_Set_Config: WARNING: GPS has been disabled");
  if (!*(_BYTE *)(a1 + 5))
    EvCrt_v("GN_GPS_Set_Config: WARNING: Glonass has been disabled");
  if (!*(_BYTE *)(a1 + 8))
    EvCrt_v("GN_GPS_Set_Config: WARNING: BeiDou has been disabled");
  if (!*(_BYTE *)(a1 + 9))
    EvCrt_v("GN_GPS_Set_Config: WARNING: Galileo has been disabled");
  if (!*(_BYTE *)(a1 + 6))
    EvCrt_v("GN_GPS_Set_Config: WARNING: QZSS has been disabled");
  if (!*(_BYTE *)(a1 + 10))
    EvCrt_v("GN_GPS_Set_Config: WARNING: NavIC has been disabled");
  if (!*(_BYTE *)(a1 + 7))
    EvCrt_v("GN_GPS_Set_Config: WARNING: SBAS has been disabled");
  if (*(_BYTE *)(a1 + 25))
    EvCrt_v("GN_GPS_Set_Config: WARNING: L1 Band Family signals have been disabled");
  if (!*(_BYTE *)(a1 + 26))
    EvCrt_v("GN_GPS_Set_Config: WARNING: L5 Band Family signals have been disabled");
  if (*(int *)(a1 + 36) <= 3)
  {
    EvCrt_v("GN_GPS_Set_Config: WARNING: Logging Level < 'Info' disables GNB and Nav Debug");
    if (!*(_DWORD *)(a1 + 36))
      EvCrt_v("GN_GPS_Set_Config: WARNING: Diagnostic Logging has been disabled");
  }
  if (!*(_BYTE *)(a1 + 80))
    EvCrt_v("GN_GPS_Set_Config: WARNING: Avg Doppler Usage has been disabled");
  if (*(_BYTE *)(a1 + 81))
    EvCrt_v("GN_GPS_Set_Config: WARNING: Broadcast Navigation Message Data Use disabled to test XOF Data");
  g_Logging_Cfg = v2;
  if (API_Set_Config((int *)a1))
    API_Query_Config(qword_257A47BB0);
  else
    EvCrt_v("GN_GPS_Set_Config: API_Set_Config() FAILED");
  GNSS_Event_Log_Ctl(qword_257A47BF8);
  return 1;
}

uint64_t GN_GPS_Set_FixInterval(unsigned int a1)
{
  uint64_t result;
  uint64_t v2;
  int v3;

  if (a1 > 0x63)
  {
    result = API_Set_FixInterval(a1);
    if ((_DWORD)result)
    {
      v2 = *(_QWORD *)(p_api + 72);
      v3 = *(_DWORD *)(v2 + 1656);
      if (!v3)
        v3 = *(_DWORD *)(v2 + 1652);
      *(_WORD *)(qword_257A47BB0 + 30) = v3;
      return 1;
    }
  }
  else
  {
    EvCrt_v("GN_GPS_Set_FixInterval:  FAILED:  FixInterval = %d  < 100, Out of range !", a1);
    return 0;
  }
  return result;
}

uint64_t GN_GPS_Set_CrossCorr_Params(double *a1)
{
  BOOL v2;
  double v3;
  BOOL v4;
  double v5;
  BOOL v6;
  double v7;
  BOOL v8;
  uint64_t v9;
  __int128 v10;
  uint64_t result;
  double v12[2];

  v12[1] = *(double *)MEMORY[0x24BDAC8D0];
  v2 = *a1 >= 6.0 && *a1 <= 60.0;
  if (v2 || (v12[0] = 0.0, R8_EQ(a1, v12)))
  {
    v3 = a1[1];
    v4 = v3 >= 6.0 && v3 <= 60.0;
    if (v4 || (v12[0] = 0.0, R8_EQ(a1 + 1, v12)))
    {
      v5 = a1[2];
      v6 = v5 >= 6.0 && v5 <= 60.0;
      if (v6 || (v12[0] = 0.0, R8_EQ(a1 + 2, v12)))
      {
        v7 = a1[3];
        v8 = v7 >= 6.0 && v7 <= 60.0;
        if (v8 || (v12[0] = 0.0, R8_EQ(a1 + 3, v12)))
        {
          v9 = *((_QWORD *)&xmmword_257A47B18 + 1);
          v10 = *((_OWORD *)a1 + 1);
          *(_OWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 2080) = *(_OWORD *)a1;
          *(_OWORD *)(v9 + 2096) = v10;
          result = 1;
          *(_BYTE *)(v9 + 2112) = 1;
          return result;
        }
        EvCrt_v("GN_GPS_Set_CrossCorr_Params: FAILED: XCorr_Margin_BDS_B1 = %f [0, 6..60 dB], Out of range!");
      }
      else
      {
        EvCrt_v("GN_GPS_Set_CrossCorr_Params: FAILED: XCorr_Margin_GAL_E1 = %f [0, 6..60 dB], Out of range!");
      }
    }
    else
    {
      EvCrt_v("GN_GPS_Set_CrossCorr_Params: FAILED: XCorr_Margin_GPS_L1 = %f [0, 6..60 dB], Out of range!");
    }
  }
  else
  {
    EvCrt_v("GN_GPS_Set_CrossCorr_Params: FAILED: Strong_Signal_Threshold = %f [0, 6..60 dBHz], Out of range!");
  }
  return 0;
}

uint64_t GN_GPS_Set_XOF_Time(unsigned int a1, unsigned int a2)
{
  EvLog_v("GN_GPS_Set_XOF_Time: %u %u", a1, a2);
  if (a1 >= 0x2000)
  {
    EvCrt_v("GN_GPS_Set_XOF_Time: FAILED: XOF_GPS_WeekNo = %d >8191, Out of range!");
    return 0;
  }
  if (a2 > 0x93A7F)
  {
    EvCrt_v("GN_GPS_Set_XOF_Time: FAILED: XOF_GPS_TOW = %d >604799, Out of range!");
    return 0;
  }
  *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1724) = 604800 * a1 + a2;
  return 1;
}

uint64_t GN_GPS_Set_RTI_Time(unsigned int a1, unsigned int a2)
{
  EvLog_v("GN_GPS_Set_RTI_Time: %u %u", a1, a2);
  if (a1 >= 0x2000)
  {
    EvCrt_v("GN_GPS_Set_RTI_Time: FAILED: RTI_GPS_WeekNo = %d >8191, Out of range!");
    return 0;
  }
  if (a2 > 0x93A7F)
  {
    EvCrt_v("GN_GPS_Set_RTI_Time: FAILED: RTI_GPS_TOW = %d >604799, Out of range!");
    return 0;
  }
  *(_DWORD *)(*((_QWORD *)&xmmword_257A47B18 + 1) + 1728) = 604800 * a1 + a2;
  return 1;
}

uint64_t GN_GPS_Set_EE_Start_Time(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int Constell_Prn;
  uint64_t v10;
  char v11;

  EvLog_v("GN_GPS_Set_EE_Start_Time: %u %u", a1, a2);
  if (a1 < 0x2000)
  {
    if (a2 >= 0x93A80)
    {
      EvCrt_v("GN_GPS_Set_EE_Start_Time: FAILED: EE_Start_GPS_TOW = %d >604799, Out of range!");
      return 0;
    }
    v6 = *((_QWORD *)&xmmword_257A47B18 + 1);
    v7 = a2 + 604800 * a1;
    Debug_Log_GPS_EE_Start_Time(a1, a2);
    v4 = 1;
    if (v7 == *(_QWORD *)(v6 + 1736))
      return v4;
    v8 = 0;
    *(_QWORD *)(v6 + 1736) = v7;
    while (1)
    {
      Constell_Prn = Get_Constell_Prn(v8);
      if (Constell_Prn <= 7)
      {
        if (((1 << Constell_Prn) & 0x38) != 0)
        {
          v10 = v6 + v8;
          if (*(_BYTE *)(v6 + v8 + 249))
            v11 = 1;
          else
            v11 = *(_BYTE *)(v10 + 528) != 0;
          goto LABEL_18;
        }
        if (((1 << Constell_Prn) & 0x86) != 0)
        {
          v10 = v6 + v8;
          v11 = *(_BYTE *)(v6 + v8 + 249);
LABEL_18:
          *(_BYTE *)(v10 + 1368) = v11;
          goto LABEL_19;
        }
        if (Constell_Prn == 6)
        {
          v10 = v6 + v8;
          v11 = *(_BYTE *)(v6 + v8 + 528);
          goto LABEL_18;
        }
      }
LABEL_19:
      if (++v8 == 218)
      {
        Core_Save_Inhib_EE((BOOL *)(v6 + 1368), *(_QWORD *)(v6 + 1736));
        return 1;
      }
    }
  }
  EvCrt_v("GN_GPS_Set_EE_Start_Time: FAILED: EE_Start_GPS_WeekNo = %d >8191, Out of range!");
  return 0;
}

uint64_t GN_GPS_Encode_NMEA(unsigned int a1, char *a2, int a3, _DWORD *a4, _DWORD *a5)
{
  unsigned __int16 v5;
  char *v6;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v5 = 0;
  v12 = *MEMORY[0x24BDAC8D0];
  if (a1 >= 4 && a2)
  {
    if (!a5 || *a5 == *a4 && a5[1] == a4[1])
    {
      if (a3)
      {
        v10 = a2;
        v11 = &a2[a1];
        v8 = a2;
        v9 = a2;
        NMEA_Encode(&v8, (uint64_t)a4, (uint64_t)a5);
        v6 = v8;
        v5 = (_WORD)v8++ - (_WORD)v9;
        *v6 = 0;
      }
      else
      {
        v5 = 0;
        *a2 = 0;
      }
    }
    else
    {
      EvCrt_v("GN_GPS_Encode_NMEA:  FAILED:  Incompatible Nav & Debug Data Local_TTag or OS_Time_ms");
      return 0;
    }
  }
  return v5;
}

void *GN_GPS_Mark_Single_Pos_Used(int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  char *v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char v17;
  char *v18;
  _QWORD *v19;
  int v20;
  unint64_t v21;
  void *v22;
  _BYTE *v23;
  int v24;
  int v25;
  BOOL v26;
  _QWORD *v27;
  int v28;
  unint64_t v29;
  void *v30;
  _BYTE *v31;
  int v32;
  int v33;
  _QWORD *v34;
  int v35;
  unint64_t v36;
  void *result;
  _BYTE *v38;
  int v39;
  int v40;
  char *v41;
  _BYTE *v42;
  char *v43;
  char *v44;
  _BYTE __src[100];
  _BYTE v46[88];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  GNSS_Write_GNB_Ctrl((char *)qword_257A47BE0);
  GNSS_GNB_Debug_Ctl(qword_257A47C00);
  GNSS_Event_Log_Ctl(qword_257A47BF8);
  GNSS_Nav_Debug_Ctl(qword_257A47BF0);
  v8 = __src;
  v43 = __src;
  v44 = v46;
  v42 = __src;
  v9 = 10;
  v10 = 1u;
  do
  {
    v41 = v8 + 1;
    *v8 = v9;
    v8 = v41;
    v11 = (unint64_t)v44;
    if (v41 >= v44)
    {
      v8 = v43;
      v41 = v43;
    }
    v9 = str_82[v10++];
  }
  while (v10 != 36);
  if (a1)
    v12 = 70;
  else
    v12 = 66;
  *v8 = v12;
  v13 = v8 + 1;
  if ((unint64_t)v13 >= v11)
    v13 = v43;
  v41 = v13 + 1;
  *v13 = 32;
  if ((unint64_t)(v13 + 1) >= v11)
    v41 = v43;
  sprintf_2d(&v41, a2);
  v14 = v41++;
  *v14 = 32;
  if (v41 >= v44)
    v41 = v43;
  sprintf_10u(&v41, a3);
  v15 = v41++;
  *v15 = 32;
  if (v41 >= v44)
    v41 = v43;
  sprintf_10u(&v41, a4);
  v16 = 0;
  v17 = 32;
  v18 = v41;
  do
  {
    v41 = v18 + 1;
    *v18 = v17;
    v18 = v41;
    if (v41 >= v44)
    {
      v18 = v43;
      v41 = v43;
    }
    v17 = str_83[++v16];
  }
  while (v16 != 8);
  API_Query_Config((uint64_t)v46);
  v19 = (_QWORD *)qword_257A47C00;
  v20 = (unsigned __int16)((_WORD)v41 - (_WORD)v42);
  v21 = *(_QWORD *)(qword_257A47C00 + 24);
  v22 = *(void **)qword_257A47C00;
  v23 = __src;
  do
  {
    v24 = v21 - (_DWORD)v22;
    if (v20 >= v24)
      v25 = v24;
    else
      v25 = v20;
    memcpy(v22, v23, v25);
    v22 = (void *)(*v19 + v25);
    *v19 = v22;
    v21 = v19[3];
    if ((unint64_t)v22 >= v21)
    {
      v22 = (void *)v19[2];
      *v19 = v22;
    }
    v23 += v25;
    v26 = __OFSUB__(v20, v25);
    v20 -= v25;
  }
  while (!((v20 < 0) ^ v26 | (v20 == 0)));
  v27 = (_QWORD *)qword_257A47BF8;
  v28 = (unsigned __int16)((_WORD)v41 - (_WORD)v42);
  v29 = *(_QWORD *)(qword_257A47BF8 + 24);
  v30 = *(void **)qword_257A47BF8;
  v31 = __src;
  do
  {
    v32 = v29 - (_DWORD)v30;
    if (v28 >= v32)
      v33 = v32;
    else
      v33 = v28;
    memcpy(v30, v31, v33);
    v30 = (void *)(*v27 + v33);
    *v27 = v30;
    v29 = v27[3];
    if ((unint64_t)v30 >= v29)
    {
      v30 = (void *)v27[2];
      *v27 = v30;
    }
    v31 += v33;
    v26 = __OFSUB__(v28, v33);
    v28 -= v33;
  }
  while (!((v28 < 0) ^ v26 | (v28 == 0)));
  v34 = (_QWORD *)qword_257A47BF0;
  v35 = (unsigned __int16)((_WORD)v41 - (_WORD)v42);
  v36 = *(_QWORD *)(qword_257A47BF0 + 24);
  result = *(void **)qword_257A47BF0;
  v38 = __src;
  do
  {
    v39 = v36 - (_DWORD)result;
    if (v35 >= v39)
      v40 = v39;
    else
      v40 = v35;
    memcpy(result, v38, v40);
    result = (void *)(*v34 + v40);
    *v34 = result;
    v36 = v34[3];
    if ((unint64_t)result >= v36)
    {
      result = (void *)v34[2];
      *v34 = result;
    }
    v38 += v40;
    v26 = __OFSUB__(v35, v40);
    v35 -= v40;
  }
  while (!((v35 < 0) ^ v26 | (v35 == 0)));
  return result;
}

uint64_t GN_GPS_Set_TM_FSP_OS_Time_ms(uint64_t a1, unsigned int a2)
{
  double v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;

  EvLog_v("GN_GPS_Set_TM_FSP_OS_Time_ms: %u %u %d", a1, a2, a1 - a2);
  Debug_Log_TM_FCP_OS_Time_ms(a1, a2);
  v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  if ((int)((unint64_t)v4 - a1) >= 0)
    v5 = (unint64_t)v4 - a1;
  else
    v5 = a1 - (unint64_t)v4;
  if (v5 < 0x1389)
  {
    result = Is_GN_API_Set_Allowed("API_Set_TM_FSP_OS_Time_ms");
    if ((_DWORD)result)
    {
      v7 = *(_QWORD *)(p_api + 248);
      result = 1;
      *(_BYTE *)v7 = 1;
      *(_DWORD *)(v7 + 392) = a1;
      *(_DWORD *)(v7 + 396) = a2;
    }
  }
  else
  {
    EvLog_v("GN_GPS_Set_TM_FSP_OS_Time_ms: REJECTED: OS_Time too different %d", (unint64_t)v4 - a1);
    return 0;
  }
  return result;
}

BOOL GN_GPS_Set_Platform_Calibration_GLONASS_Group_Delays(double *a1)
{
  EvLog_v("GN_GPS_Set_Platform_Calibration_GLONASS_Group_Delays:  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f", *a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13]);
  Debug_Log_Platform_Calibration_GLONASS_Group_Delays((uint64_t)a1);
  return API_Set_Platform_Calibration_GLONASS_Group_Delays(a1);
}

BOOL GN_GPS_Set_Platform_Calibration_L5_Group_Delay(double a1)
{
  double v2;
  uint64_t v3;

  EvLog_v("GN_GPS_Set_Platform_Calibration_L5_Group_Delay:  %f", a1);
  Debug_Log_Platform_Calibration_L5_Group_Delay(a1);
  v2 = fabs(a1);
  if (v2 > 100.0)
  {
    EvCrt_v("API_Set_Platform_Calibration_L5_Group_Delays:  FAILED  Group Delay %f larger than +/-100m", a1);
  }
  else
  {
    v3 = *(_QWORD *)(p_api + 72);
    *(double *)(v3 + 1976) = a1;
    *(_BYTE *)(v3 + 1984) = 1;
  }
  return v2 <= 100.0;
}

uint64_t GN_GPS_Set_RTI_Bad_SV_List(uint64_t a1, unsigned int a2, int *a3, unsigned __int8 *a4)
{
  uint64_t result;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  _OWORD v32[14];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  memset(v32, 0, 218);
  result = Is_GN_API_Set_Allowed("GN_GPS_Set_RTI_Bad_SV_List");
  if (!(_DWORD)result)
    return result;
  Debug_Log_GPS_RTI_Bad_SV_List(a1, a2, a3, a4);
  v9 = "--";
  if ((_DWORD)a1 == 1)
    v9 = "L5";
  if ((_DWORD)a1)
    v10 = v9;
  else
    v10 = "L1";
  if (a2 > 0xDA)
  {
    EvCrt_v("GN_GPS_Set_RTI_Bad_SV_List: FAILED:  %s  RTI_Num_Bad_SV = %d >%d, Out of range!");
    return 0;
  }
  if (!a2)
  {
    v27 = 0;
    v26 = 0;
    v25 = 0;
    v24 = 0;
    v23 = 0;
    v22 = 0;
    v21 = 0;
    goto LABEL_52;
  }
  v11 = 0;
  v12 = a2;
  do
  {
    v13 = 0;
    v14 = a3[v11];
    if (v14 <= 15)
    {
      v15 = 0;
      v16 = 32;
      v17 = 0;
      v18 = 0;
      switch(v14)
      {
        case 0:
          EvCrt_v("GN_GPS_Set_RTI_Bad_SV_List: FAILED:  %s  RTI_Bad_SV_Type_List[%d] = 0x%x, Out of range!", v10, v11, 0);
          goto LABEL_30;
        case 1:
          goto LABEL_23;
        case 2:
          v16 = 24;
          v15 = 1;
          v14 = 1;
          goto LABEL_23;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_24;
        case 4:
          v16 = 202;
          v14 = 193;
          v15 = 4;
          goto LABEL_23;
        case 8:
          v16 = 158;
          v14 = 120;
          v15 = 6;
          goto LABEL_23;
        default:
          v17 = 0;
          v18 = 0;
          goto LABEL_24;
      }
    }
    if (v14 == 64)
    {
      v16 = 14;
      v14 = 1;
      v15 = 5;
    }
    else if (v14 == 32)
    {
      v16 = 63;
      v14 = 1;
      v15 = 3;
    }
    else
    {
      v17 = 0;
      v18 = 0;
      if (v14 != 16)
        goto LABEL_24;
      v16 = 36;
      v14 = 1;
      v15 = 2;
    }
LABEL_23:
    v18 = Num_Prn[v15];
    v13 = v14;
    v17 = v16;
LABEL_24:
    v19 = a4[v11];
    if (v13 > v19 || v17 < v19)
    {
      EvCrt_v("GN_GPS_Set_RTI_Bad_SV_List: FAILED:  %s  RTI_Bad_SV_Id_List[%d] = %d <%d or >%d, Out of range!");
      return 0;
    }
    *((_BYTE *)v32 + (int)(v18 - v13 + v19)) = 1;
LABEL_30:
    ++v11;
  }
  while (a2 != v11);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  do
  {
    v29 = *a3++;
    v28 = v29;
    if (v29 > 15)
    {
      if (v28 == 64)
        v30 = v21 + 1;
      else
        v30 = v21;
      if (v28 == 32)
        v31 = v22 + 1;
      else
        v31 = v22;
      if (v28 == 32)
        v30 = v21;
      if (v28 == 16)
      {
        ++v23;
      }
      else
      {
        v22 = v31;
        v21 = v30;
      }
    }
    else
    {
      switch(v28)
      {
        case 1:
          ++v27;
          break;
        case 2:
          ++v26;
          break;
        case 4:
          ++v24;
          break;
        case 8:
          ++v25;
          break;
        default:
          break;
      }
    }
    --v12;
  }
  while (v12);
LABEL_52:
  EvLog_v("GN_GPS_Set_RTI_Bad_SV_List:  %s  G %d R %d Q %d S %d B %d E %d N %d", v10, v27, v26, v24, v25, v22, v23, v21);
  if ((API_Set_RTI_Bad_SV_List(a1, v32) & 1) != 0)
    return 1;
  EvLog_v("GN_GPS_Set_RTI_Bad_SV_List: FAILED:   %s", v10);
  return 0;
}

uint64_t HalFactory_CommsInit(void)
{
  char v0;
  int v2;
  char __str[966];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if (Hal35_Is_HW_SPI_EN_Default() && (Ga05_GetDebugFeaturesBitmask() & 0x10) == 0)
  {
    Hal35_Set_SPI_InUse(1);
    Hal35_BaseBandSPMI_GNSSWake();
    if ((v0 & 1) == 0)
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: SPMI wake trigger failed\n");
        goto LABEL_13;
      }
      return 0;
    }
    if (!Hal35_InitSPI())
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: SPI Init failed\n");
LABEL_13:
        gnssOsa_PrintLog(__str, 1, 1, 0);
        return 0;
      }
      return 0;
    }
    return 1;
  }
  if (!Hal34_InitPciGnssDevice(&v2))
    return 1;
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_13;
  }
  return 0;
}

uint64_t HalFactory_Init(void)
{
  unint64_t v0;
  unint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  mach_timebase_info info;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  info = 0;
  mach_timebase_info(&info);
  LODWORD(v1) = info.denom;
  LODWORD(v0) = info.numer;
  v2 = (double)v0 / (double)v1;
  *(double *)&g_MacClockTicksToMsRelation = v2 * 0.000001;
  g_MacClockTicksToNs = *(_QWORD *)&v2;
  Hal22_InitializeConn();
  v3 = HalFactory_CommsInit();
  if ((_DWORD)v3)
  {
    g_RouteZxData = (uint64_t (*)(unsigned __int8 *, unsigned __int16))HalFactory_ProcessData;
    if (g_LbsOsaTrace_Config >= 3)
    {
      bzero(&info, 0x3C6uLL);
      v4 = mach_continuous_time();
      snprintf((char *)&info, 0x3C5uLL, "%10u %s%c %s: Hal factory interface init success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 77, "HalFactory_Init");
      gnssOsa_PrintLog((char *)&info, 3, 1, 0);
    }
  }
  return v3;
}

void HalFactory_ProcessData(unsigned __int8 *a1, uint64_t a2)
{
  int v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 *p_dst;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t __dst;
  char __str[966];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (a2 > 7)
    {
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Data,MC,%c,MID,%c,MIDX,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 73, "HalFactory_ProcessData", a1[2], a1[3], a1[4]);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      if (a1[2] != 68)
      {
        v8 = 0;
        __dst = 0;
        do
        {
          p_dst = &a1[v8];
          if ((int)(a2 - v8) <= 7)
          {
            memcpy(&__dst, &a1[v8], (int)(a2 - v8));
            p_dst = (unsigned __int8 *)&__dst;
          }
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            v10 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\"%02hhX %02hhX %02hhX %02hhX %02hhX %02hhX %02hhX %02hhX\"\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "HAL", 73, "HalFactory_ProcessData", "Rcvd data ", *p_dst, p_dst[1], p_dst[2], p_dst[3], p_dst[4], p_dst[5], p_dst[6], p_dst[7]);
            gnssOsa_PrintLog(__str, 4, 1, 0);
          }
          v8 = (unsigned __int16)(v8 + 8);
        }
        while (v8 < a2);
        v11 = a1[2];
        if (v11 == 84)
        {
          v12 = a1[3];
          if (v12 == 66)
          {
            if (a1[8] == 32)
            {
              if (g_LbsOsaTrace_Config >= 4)
              {
                bzero(__str, 0x3C6uLL);
                v13 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Test mode indication success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "HAL", 73, "HalFactory_ProcessData");
                gnssOsa_PrintLog(__str, 4, 1, 0);
              }
              if (!gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem) && g_LbsOsaTrace_Config)
              {
                bzero(__str, 0x3C6uLL);
                v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                v15 = __error();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v14, "HAL", 69, "HalFactory_ProcessData", 1542, *v15);
                gnssOsa_PrintLog(__str, 1, 1, 0);
              }
            }
            v12 = a1[3];
          }
          if (v12 == 76)
          {
            if (a1[4] == 32 && a1[8] == 83)
            {
              if (g_LbsOsaTrace_Config >= 4)
              {
                v16 = *(_DWORD *)(a1 + 9);
                v17 = *(unsigned __int16 *)(a1 + 13);
                bzero(__str, 0x3C6uLL);
                v18 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TSync success ME TTick=%u, SubMs=%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "HAL", 73, "HalFactory_ProcessData", v16, v17);
                gnssOsa_PrintLog(__str, 4, 1, 0);
              }
              g_TSyncEventReceived = 1;
            }
          }
          else if (v12 == 80 && a1[4] == 77)
          {
            if (a1[9] == 1)
            {
              HalFactory_HandleCWResponse(a1);
            }
            else if (g_LbsOsaTrace_Config >= 2)
            {
              bzero(__str, 0x3C6uLL);
              v19 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Invalid testID %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "HAL", 87, "HalFactory_ProcessData", a1[9]);
              v3 = 2;
              goto LABEL_8;
            }
          }
          return;
        }
        if (v11 != 68)
        {
          if (v11 == 66)
          {
            if (a1[3] - 83 > 1)
              Hal02_HandleResp(a1, a2);
            else
              HalFactory_SleepAckHandler(a1);
          }
          return;
        }
      }
      v6 = a1[3];
      if (v6 == 80)
      {
        v7 = a2;
      }
      else
      {
        if (v6 != 71)
          return;
        v7 = a2;
      }
      GnssDbgMgr_HandleDbgData(v7);
    }
    else if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx len\n");
LABEL_7:
      v3 = 1;
LABEL_8:
      gnssOsa_PrintLog(__str, v3, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx data\n");
    goto LABEL_7;
  }
}

void HalFactory_SleepAckHandler(unsigned __int8 *a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  int v13;
  int v14;
  char __str[966];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v1 = a1[3];
  if (v1 != 84)
  {
    if (v1 == 83 && a1[4] == 80)
    {
      v2 = a1[8];
      switch(v2)
      {
        case 'm':
LABEL_7:
          HalFactory_SleepAckHandler(unsigned char *,unsigned short)::v_SleepAckRcvd = 1;
          return;
        case 'M':
          if (g_LbsOsaTrace_Config >= 3)
          {
            bzero(__str, 0x3C6uLL);
            v6 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS Sleep idle state\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 77, "HalFactory_SleepAckHandler");
            gnssOsa_PrintLog(__str, 3, 1, 0);
          }
          g_SleepStatus = 1;
          if (gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem) || !g_LbsOsaTrace_Config)
            goto LABEL_28;
          bzero(__str, 0x3C6uLL);
          v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          v13 = *__error();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v7, "HAL", 69, "HalFactory_SleepAckHandler", 1542, v13);
          break;
        case ' ':
          goto LABEL_7;
        default:
          if (g_LbsOsaTrace_Config)
          {
            bzero(__str, 0x3C6uLL);
            v8 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS sleep ack err %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "HAL", 69, "HalFactory_SleepAckHandler", v2);
            gnssOsa_PrintLog(__str, 1, 1, 0);
          }
          g_SleepStatus = 0;
          if (gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem) || !g_LbsOsaTrace_Config)
            goto LABEL_28;
          bzero(__str, 0x3C6uLL);
          v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          v14 = *__error();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v9, "HAL", 69, "HalFactory_SleepAckHandler", 1542, v14);
          break;
      }
      gnssOsa_PrintLog(__str, 1, 1, 0);
LABEL_28:
      HalFactory_SleepAckHandler(unsigned char *,unsigned short)::v_SleepAckRcvd = 0;
      return;
    }
    goto LABEL_14;
  }
  if (a1[4] != 32 || HalFactory_SleepAckHandler(unsigned char *,unsigned short)::v_SleepAckRcvd != 1)
  {
LABEL_14:
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS Sleep, Invalid message\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 69, "HalFactory_SleepAckHandler");
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return;
  }
  v3 = a1[8];
  if (v3 == 77)
  {
    if (g_LbsOsaTrace_Config >= 3)
    {
      bzero(__str, 0x3C6uLL);
      v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS sleep idle state event\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 77, "HalFactory_SleepAckHandler");
      gnssOsa_PrintLog(__str, 3, 1, 0);
    }
    g_SleepStatus = 1;
  }
  else
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS sleep event err %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "HAL", 69, "HalFactory_SleepAckHandler", v3);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    g_SleepStatus = 0;
  }
  if (!gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem) && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v12 = __error();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v11, "HAL", 69, "HalFactory_SleepAckHandler", 1542, *v12);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  HalFactory_SleepAckHandler(unsigned char *,unsigned short)::v_SleepAckRcvd = 0;
}

void HalFactory_HandleCWResponse(unsigned __int8 *a1)
{
  NSObject *v1;
  _QWORD v2[6];

  v2[5] = *MEMORY[0x24BDAC8D0];
  v1 = *(NSObject **)(g_TestObject + 16);
  v2[0] = MEMORY[0x24BDAC760];
  v2[1] = 0x40000000;
  v2[2] = ___Z27HalFactory_HandleCWResponsePht_block_invoke;
  v2[3] = &__block_descriptor_tmp_0;
  v2[4] = a1;
  dispatch_async(v1, v2);
}

uint64_t HalFactory_ComsPing(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  double v5;
  void **v6;
  void *__p[2];
  char v8;
  char __str[16];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (Hal15_ReadHwRevision(80))
  {
    if (g_LbsOsaTrace_Config)
      goto LABEL_6;
    return 0;
  }
  if (Hal15_ReadHwRevision(77))
  {
    if (g_LbsOsaTrace_Config)
    {
LABEL_6:
      bzero(__str, 0x3C6uLL);
      v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: read rev failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 69, "HalFactory_ComsPing");
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 0;
  }
  Hal15_GetGNSSVersionString(__str);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)__str;
  *(_QWORD *)(a1 + 16) = v10;
  if (g_LbsOsaTrace_Config >= 3)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    v5 = *(double *)&g_MacClockTicksToMsRelation;
    Hal15_GetGNSSVersionString(__p);
    if (v8 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Rev %s\n", (unint64_t)(v5 * (double)v4), "HAL", 77, "HalFactory_ComsPing", (const char *)v6);
    if (v8 < 0)
      operator delete(__p[0]);
    gnssOsa_PrintLog(__str, 3, 1, 0);
  }
  return 1;
}

uint64_t HalFactory_PowerMode(char a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if ((a1 & 1) != 0)
  {
    if (HalFactory_SendEnterSleepCmd())
    {
      v1 = gnssOsa_SemWaitTimeOut(g_HandleAckSem, 0x1F4u);
      switch(v1)
      {
        case 2:
          if (g_LbsOsaTrace_Config)
          {
            bzero(__p, 0x3C6uLL);
            v5 = mach_continuous_time();
            snprintf((char *)__p, 0x3C5uLL, "%10u %s%c %s: #%04hx GNSS Sleep\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 69, "HalFactory_PowerMode", 1541);
            gnssOsa_PrintLog((char *)__p, 1, 1, 0);
          }
          break;
        case 1:
          if (g_LbsOsaTrace_Config)
          {
            bzero(__p, 0x3C6uLL);
            v6 = mach_continuous_time();
            snprintf((char *)__p, 0x3C5uLL, "%10u %s%c %s: #%04hx GNSS Sleep\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 69, "HalFactory_PowerMode", 1543);
            gnssOsa_PrintLog((char *)__p, 1, 1, 0);
          }
          break;
        case 0:
          return g_SleepStatus;
        default:
          if (g_LbsOsaTrace_Config)
          {
            bzero(__p, 0x3C6uLL);
            v7 = mach_continuous_time();
            snprintf((char *)__p, 0x3C5uLL, "%10u %s%c %s: #%04hx GNSS Sleep\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "HAL", 69, "HalFactory_PowerMode", 515);
            gnssOsa_PrintLog((char *)__p, 1, 1, 0);
          }
          break;
      }
    }
    else if (g_LbsOsaTrace_Config)
    {
      bzero(__p, 0x3C6uLL);
      v3 = mach_continuous_time();
      snprintf((char *)__p, 0x3C5uLL, "%10u %s%c %s: sleep cmd send failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "HAL", 69, "HalFactory_PowerMode");
      gnssOsa_PrintLog((char *)__p, 1, 1, 0);
    }
    return 0;
  }
  __p[0] = 0;
  __p[1] = 0;
  v9 = 0;
  v2 = HalFactory_ComsPing((uint64_t)__p);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_24BAD0E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(exception_object);
}

BOOL HalFactory_SendEnterSleepCmd(void)
{
  __int16 v0;
  uint64_t i;
  unint64_t v2;
  size_t v3;
  unsigned __int8 *p_dst;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  char __str[966];
  uint64_t __dst;
  unsigned __int8 v12[15];
  __int16 v13;
  char v14;
  uint64_t v15;

  v0 = 0;
  v15 = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v13 = 0;
  *(_QWORD *)v12 = 0xE0009507342787ALL;
  memset(&v12[8], 0, 7);
  for (i = 8; i != 15; ++i)
    v0 += v12[i];
  v2 = 0;
  v13 = v0;
  v3 = 18;
  v14 = 10;
  __dst = 0;
  do
  {
    p_dst = &v12[v2];
    if (v2 >= 0xB)
    {
      memcpy(&__dst, &v12[v2], v3);
      p_dst = (unsigned __int8 *)&__dst;
    }
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\"%02hhX %02hhX %02hhX %02hhX %02hhX %02hhX %02hhX %02hhX\"\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 73, "HalFactory_SendEnterSleepCmd", "factory_zx_sleep_cmd ", *p_dst, p_dst[1], p_dst[2], p_dst[3], p_dst[4], p_dst[5], p_dst[6], p_dst[7]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    v3 -= 8;
    v6 = v2 >= 0xA;
    v2 += 8;
  }
  while (!v6);
  v7 = Hal22_ZxSendToChip(v12, 0x12uLL);
  if (v7 <= 0 && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx LP cmd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "HAL", 69, "HalFactory_SendEnterSleepCmd", 1282);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return v7 > 0;
}

uint64_t HalFactory_EnableTestMode(void)
{
  char __str[966];
  uint64_t v2;
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v2 = 0x90003506254787ALL;
  v3 = 167772417;
  if ((int)Hal22_ZxSendToChip((unsigned __int8 *)&v2, 0xCuLL) <= 0)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx test mode indication\n");
      goto LABEL_7;
    }
    return 0;
  }
  if (gnssOsa_SemWaitTimeOut(g_HandleAckSem, 0xC8u))
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: test mode indication failed\n");
LABEL_7:
      gnssOsa_PrintLog(__str, 1, 1, 0);
      return 0;
    }
    return 0;
  }
  usleep(0xF4240u);
  return 1;
}

uint64_t HalFactory_RunCWTest(int a1, int a2, double a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v18;
  uint64_t i;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  void *__p[2];
  uint64_t v25;
  unsigned __int8 v26[8];
  char v27;
  _QWORD v28[2];
  char __str[966];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a6)
  {
    g_TestObject = a6;
    __p[0] = 0;
    __p[1] = 0;
    v25 = 0;
    if ((HalFactory_ComsPing((uint64_t)__p) & 1) != 0)
    {
      if ((HalFactory_EnableTestMode() & 1) != 0)
      {
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          v10 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Input CW params: duration %u seconds, band %u, searchRange %f kHz, integrationtime %d msec\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "HAL", 73, "HalFactory_RunCWTest", a1, a2, a3, a5);
          gnssOsa_PrintLog(__str, 4, 1, 0);
        }
        memset(v28, 0, 15);
        *(_QWORD *)v26 = 0x20000F4D7054787ALL;
        v27 = 1;
        v11 = 0;
        switch(a2)
        {
          case 0:
          case 2:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
            if (g_LbsOsaTrace_Config)
            {
              bzero(__str, 0x3C6uLL);
              v12 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Incorrect band %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "HAL", 69, "HalFactory_RunCWTest", a2);
              gnssOsa_PrintLog(__str, 1, 1, 0);
            }
            goto LABEL_16;
          case 1:
            goto LABEL_22;
          case 3:
            v11 = 6;
            goto LABEL_22;
          case 4:
            v11 = 3;
LABEL_22:
            LOBYTE(v28[0]) = v11;
            break;
          default:
            break;
        }
        v18 = 0;
        *(_WORD *)((char *)v28 + 1) = 0;
        BYTE3(v28[0]) = 0;
        strcpy((char *)&v28[1], "\n");
        BYTE2(v28[1]) = -56;
        for (i = 8; i != 23; ++i)
          v18 += v26[i];
        v20 = 0;
        WORD2(v28[1]) = v18;
        BYTE6(v28[1]) = 10;
        do
        {
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            v21 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\"%02hhX %02hhX %02hhX %02hhX %02hhX %02hhX %02hhX %02hhX\"\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "HAL", 73, "HalFactory_RunCWTest", "cw command ", v26[v20], v26[v20 + 1], v26[v20 + 2], v26[v20 + 3], v26[v20 + 4], v26[v20 + 5], v26[v20 + 6], v26[v20 + 7]);
            gnssOsa_PrintLog(__str, 4, 1, 0);
          }
          v22 = v20 >= 0x10;
          v20 += 8;
        }
        while (!v22);
        if ((int)Hal22_ZxSendToChip(v26, 0x18uLL) > 0)
        {
          usleep(1000000 * a1);
          v14 = 1;
LABEL_17:
          if (SHIBYTE(v25) < 0)
            operator delete(__p[0]);
          return v14;
        }
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          v23 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx CW test command\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "HAL", 69, "HalFactory_RunCWTest", 1282);
          gnssOsa_PrintLog(__str, 1, 1, 0);
        }
      }
      else if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        v16 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: CW test not started, set factory test mode failed \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "HAL", 69, "HalFactory_RunCWTest");
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
    }
    else if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v15 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: CW test not started, failed to ping GNSS HW \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "HAL", 69, "HalFactory_RunCWTest");
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
LABEL_16:
    v14 = 0;
    goto LABEL_17;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v13 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: callback nullptr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "HAL", 69, "HalFactory_RunCWTest");
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void sub_24BAD1744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___Z27HalFactory_HandleCWResponsePht_block_invoke(uint64_t a1, double a2)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  double v5;
  int v6;
  double v7;
  int v8;
  BOOL v9;
  double v10;
  int v11;
  BOOL v12;
  double v13;
  double *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  void *__p;
  void *v21;
  char *v22;
  char __str[966];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(v2 + 14);
  if (v3 >= 7)
    v4 = 0;
  else
    v4 = 0x3000004000001uLL >> (8 * v3);
  LOWORD(a2) = *(_WORD *)(v2 + 17);
  v5 = (double)*(unint64_t *)&a2 * 0.00390625;
  v6 = *(__int16 *)(v2 + 15);
  if (v6 < 0)
    v6 = -v6;
  v7 = (double)(unsigned __int16)v6;
  v8 = *(__int16 *)(v2 + 25);
  v9 = v8 < 0;
  if (v8 < 0)
    v8 = -v8;
  if (v9)
    v10 = -((double)(unsigned __int16)v8 * 0.0625);
  else
    v10 = (double)(unsigned __int16)v8 * 0.0625;
  v11 = *(__int16 *)(v2 + 23);
  v12 = v11 < 0;
  if (v11 < 0)
    v11 = -v11;
  if (v12)
    v13 = -(double)(unsigned __int16)v11;
  else
    v13 = (double)(unsigned __int16)v11;
  v14 = (double *)operator new(0x28uLL);
  *(_BYTE *)v14 = v4;
  *((_DWORD *)v14 + 1) = 0;
  v14[1] = v5;
  v14[2] = v10;
  v14[3] = v7;
  v14[4] = v13;
  if (*(_BYTE *)(v2 + 8) == 32)
  {
    v15 = g_TestObject;
    __p = 0;
    v16 = operator new(0x28uLL);
    v21 = v16 + 5;
    v22 = (char *)(v16 + 5);
    v16[4] = *((_QWORD *)v14 + 4);
    v17 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v16 = *(_OWORD *)v14;
    *((_OWORD *)v16 + 1) = v17;
    __p = v16;
    v18 = *(_QWORD *)(v15 + 48);
    if (!v18)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v18 + 48))(v18, &__p);
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v19 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: CN0 %.2f, band %u, FreqOffsetHz %.3f, RSSI %.3f, FreqOffsetPpb %.3f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "HAL", 73, "HalFactory_HandleCWResponse_block_invoke", v5, *(unsigned __int8 *)(v2 + 14), v7, v10, v13);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  operator delete(v14);
}

void sub_24BAD1998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;

  operator delete(v19);
  _Unwind_Resume(a1);
}

uint64_t HalFactory_TriggerTSync(void)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  uint64_t v8;
  unsigned int v9;
  char __str[966];
  unsigned __int8 v11[8];
  int v12;
  __int16 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  if ((HalFactory_ComsPing((uint64_t)__p) & 1) != 0)
  {
    if ((HalFactory_EnableTestMode() & 1) != 0)
    {
      *(_QWORD *)v11 = 0x1200054D6C54787ALL;
      v12 = 16842752;
      v13 = 2560;
      if ((int)Hal22_ZxSendToChip(v11, 0xEuLL) <= 0)
      {
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          v4 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx TimeMark test command\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 69, "HalFactory_SendTimeMarkCmd", 1282);
          gnssOsa_PrintLog(__str, 1, 1, 0);
        }
      }
      else
      {
        v9 = 0;
        if (Hal25_TriggerTimeMarkStrobe(&v9))
        {
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            v0 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s:  TimeMark PulseOSTime %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "HAL", 73, "HalFactory_SendTimeMarkCmd", v9);
            gnssOsa_PrintLog(__str, 4, 1, 0);
          }
          usleep(0x7A120u);
          if (g_TSyncEventReceived == 1)
          {
            g_TSyncEventReceived = 0;
            v1 = 1;
            goto LABEL_18;
          }
        }
        else if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          v5 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TimeMark pulse trigger failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 69, "HalFactory_SendTimeMarkCmd");
          gnssOsa_PrintLog(__str, 1, 1, 0);
        }
      }
    }
    else if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TSync test not started, set factory test mode failed \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "HAL", 69, "HalFactory_TriggerTSync");
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TSync test not started, failed to ping GNSS HW \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 69, "HalFactory_TriggerTSync");
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  v1 = 0;
LABEL_18:
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return v1;
}

void sub_24BAD1D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void GncP25_02StopTimemarkSessTimer(void)
{
  uint64_t v0;
  char __str[966];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  if (g_TimemarkTimerStatus == 1)
  {
    if (AgpsFsmStopTimer(8656902))
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v0 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 87, "GncP25_02StopTimemarkSessTimer", 1545);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
    }
    else
    {
      g_TimemarkTimerStatus = 0;
    }
  }
}

void GncP25_04HandleTimeMarkEvent(unsigned __int8 *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  char *v11;
  unint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  double v21;
  double v22;
  char v23;
  char v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t __dst;
  char __str[966];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (g_TimeMarkState == 1)
  {
    if (g_LbsOsaTrace_Config < 2)
      return;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Pulse not processed\n");
LABEL_10:
    gnssOsa_PrintLog(__str, 2, 1, 0);
    return;
  }
  if (a1[8] != 83)
  {
    if (g_LbsOsaTrace_Config < 2)
      return;
    bzero(__str, 0x3C6uLL);
    v29 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Status,%u\n", v29);
    goto LABEL_10;
  }
  __dst = 0;
  v1 = *(_DWORD *)(a1 + 9);
  v2 = a1[14];
  v3 = a1[13] | (v2 << 8);
  if (a1[3] == 66)
  {
    v4 = *(unsigned __int16 *)(a1 + 15);
    if (a1[17])
    {
      memcpy_s("GncP25_04HandleTimeMarkEvent", 184, &__dst, 8u, a1 + 18, 8uLL);
      v5 = (unint64_t)((double)__dst * 6.51041667);
    }
    else
    {
      v5 = 0;
    }
    if (g_LbsOsaTrace_Config < 4)
    {
      v7 = 125;
    }
    else
    {
      bzero(__str, 0x3C6uLL);
      v8 = mach_continuous_time();
      v7 = 125;
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TMEvent BBTICK,%u,SubMs,%u,SequenceNum,%u,BCTTtick,%llu,BCTNs,%llu,BCTUncNs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GncP25_04HandleTimeMarkEvent", v1, v3, v4, __dst, v5, 125);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  else
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TMEvent BBTICK,%u,SubMs,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP25_04HandleTimeMarkEvent", v1, v3);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    v7 = 0;
    v5 = 0;
  }
  v9 = gnssOsa_Calloc("GncP25_04HandleTimeMarkEvent", 197, 1, 0x50uLL);
  if (v9)
  {
    v10 = v9;
    v9[2] = 0u;
    v9[3] = 0u;
    v9[1] = 0u;
    *((_DWORD *)v9 + 14) = v1;
    *((_QWORD *)v9 + 8) = v5;
    *((_QWORD *)v9 + 9) = v7;
    if (g_GncP_PEUpdate[0])
      v11 = g_GncP_PEUpdate;
    else
      v11 = 0;
    if (g_GncP_PEUpdate[0])
    {
      if (byte_2579E4051)
      {
        *(double *)&v12 = (double)v3;
        LODWORD(v12) = qword_2579E4040;
        v13 = (double)v1 + (double)v3 * 0.0000152587891 - (double)v12;
        v14 = v13 * (1.0 - *(double *)qword_2579E4080[0].i64);
        v15 = v14 + *(double *)&qword_2579E4068 * 1000.0;
        v16 = sqrt(*(double *)&qword_2579E40F0 * (v14 * (v14 * *(double *)&qword_2579E40F0))+ *(double *)&qword_2579E40E0 * 1000.0 * (*(double *)&qword_2579E40E0 * 1000.0));
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          v17 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: DeltaToW,%.12f,DeltaTick,%.12f,Clk_drift,%.12f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 68, "GncP25_06CalculateTOW", v14, v13, *(double *)qword_2579E4080[0].i64);
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        v18 = 0;
        v19 = 0;
        v20 = word_2579E4060;
        v21 = v15 + -604800000.0;
        if (v15 < 604800000.0)
          v21 = v15;
        else
          v20 = word_2579E4060 + 1;
        *((_WORD *)v10 + 9) = v20;
        *((_BYTE *)v10 + 16) = 1;
        *((double *)v10 + 3) = v21;
        *((double *)v10 + 4) = v16;
        v22 = unk_2579E4088;
        if (!byte_2579E4039)
          v22 = 0.0;
        *((_BYTE *)v10 + 40) = byte_2579E4039;
        *((double *)v10 + 6) = v22;
        if (dword_2579E4170 == 4)
          v23 = 5;
        else
          v23 = 0;
        if (dword_2579E4170 == 2)
          v24 = 3;
        else
          v24 = v23;
        v25 = v11 + 340;
        v26 = v11 + 6104;
        *((_BYTE *)v10 + 60) = v24;
        do
        {
          if (v26[v18])
          {
            switch(*(_DWORD *)&v25[4 * v18])
            {
              case 0:
                if (g_LbsOsaTrace_Config >= 2)
                {
                  bzero(__str, 0x3C6uLL);
                  v27 = mach_continuous_time();
                  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Const,%u,Idx,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "GNC", 87, "GncP25_05GetConstellationUsed", 770, *(_DWORD *)&v25[4 * v18], v18);
                  gnssOsa_PrintLog(__str, 2, 1, 0);
                }
                break;
              case 1:
                v19 |= 1u;
                break;
              case 2:
                v19 |= 0x20u;
                break;
              case 3:
                v19 |= 0x10u;
                break;
              case 4:
                v19 |= 0x40u;
                break;
              case 5:
                v19 |= 2u;
                break;
              case 6:
                v19 |= 0x80u;
                break;
              default:
                break;
            }
          }
          ++v18;
        }
        while (v18 != 128);
        *((_WORD *)v10 + 31) = v19;
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          v28 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_EVENT_IND =>GNM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "GNC", 73, "GncP25_04HandleTimeMarkEvent");
          gnssOsa_PrintLog(__str, 4, 1, 0);
        }
        AgpsSendFsmMsg(132, 128, 8651779, v10);
        GncP25_09UpdateTimeMarkInfo(0, 1, 0, v1 + (v2 >> 7));
        return;
      }
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GpsTime NA,date_set,false,TimeMark event posted\n");
        goto LABEL_56;
      }
    }
    else if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GpsTime NA,TimeMark event posted\n");
LABEL_56:
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 128, 8651779, v10);
  }
}

void GncP25_09UpdateTimeMarkInfo(int a1, int a2, int a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char __str[966];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    _MergedGlobals_2 = a3;
    GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidOSTime = 1;
  }
  if (a2)
  {
    dword_257A47E74 = a4;
    dword_257A47E78 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidBBTick = 1;
  }
  else if (GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidBBTick != 1)
  {
    return;
  }
  if (GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidOSTime == 1)
  {
    GncP25_02StopTimemarkSessTimer();
    v4 = _MergedGlobals_2;
    if ((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v4 > 0x1F3
      || (v5 = dword_257A47E78,
          (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time())
        - v5 > 0x1F3))
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v9 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Invalid OStime %u,BBtick,%u,BBTickRx,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 87, "GncP25_09UpdateTimeMarkInfo", _MergedGlobals_2, dword_257A47E74, dword_257A47E78);
        v8 = 2;
        goto LABEL_16;
      }
    }
    else
    {
      if ((GN_GPS_Set_TM_FSP_OS_Time_ms(_MergedGlobals_2, dword_257A47E74) & 1) == 0)
      {
        if (g_LbsOsaTrace_Config < 2)
          goto LABEL_17;
        bzero(__str, 0x3C6uLL);
        v6 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GN_GPS_Set_TM_FSP_OS_Time_ms\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 87, "GncP25_09UpdateTimeMarkInfo", 257);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TMInfo OStime %u,BBtick,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncP25_09UpdateTimeMarkInfo", _MergedGlobals_2, dword_257A47E74);
        v8 = 4;
LABEL_16:
        gnssOsa_PrintLog(__str, v8, 1, 0);
      }
    }
LABEL_17:
    GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidOSTime = 0;
    GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidBBTick = 0;
    g_TimeMarkState = 1;
  }
}

uint64_t GncP25_01HandleStartTimeMarkReq(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char __str[966];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_START_TIMEMARK_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 73, "GncP25_01HandleStartTimeMarkReq");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    v2 = gnssOsa_Calloc("GncP25_01HandleStartTimeMarkReq", 346, 1, 0x10uLL);
    if (v2)
    {
      v3 = v2;
      if ((g_TimeMarkState & 1) != 0)
      {
        v4 = g_GncPStateInfo;
        if (g_GncPStateInfo == 7)
        {
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            v5 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TM started ME ON\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 73, "GncP25_03HandleStartTimeMark");
            gnssOsa_PrintLog(__str, 4, 1, 0);
          }
          g_TimeMarkState = 0;
          GncP25_02StopTimemarkSessTimer();
          if (AgpsFsmStartTimer(0x841806u, 0x3E8u))
          {
            if (g_LbsOsaTrace_Config >= 2)
            {
              bzero(__str, 0x3C6uLL);
              v6 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Dur,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 87, "GncP25_03StartTimemarkSessTimer", 1544, 1000);
              gnssOsa_PrintLog(__str, 2, 1, 0);
            }
          }
          else
          {
            g_TimemarkTimerStatus = 1;
          }
          Hal_TriggerTimeMarkPulse((void (*)(unsigned int, BOOL))GncP25_07TimeMarkPulseCb);
          v3[12] = 1;
        }
        else
        {
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            v9 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx TM ReqRejected MEState,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 73, "GncP25_03HandleStartTimeMark", 2049, v4);
            gnssOsa_PrintLog(__str, 4, 1, 0);
          }
          g_TimeMarkState = 1;
          v3[12] = 0;
        }
      }
      else
      {
        v2[12] = 0;
        if (g_LbsOsaTrace_Config < 2)
        {
LABEL_23:
          AgpsSendFsmMsg(132, 128, 8389124, v3);
          return 0;
        }
        bzero(__str, 0x3C6uLL);
        v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP25_01HandleStartTimeMarkReq", 2056);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v10 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_START_TIMEMARK_RSP =>GNM Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 73, "GncP25_01HandleStartTimeMarkReq", v3[12]);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      goto LABEL_23;
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 69, "GncP25_01HandleStartTimeMarkReq", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void GncP25_07TimeMarkPulseCb(int a1, int a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char __str[966];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = gnssOsa_Calloc("GncP25_07TimeMarkPulseCb", 389, 1, 0x10uLL);
    if (v3)
    {
      v4 = v3;
      *((_DWORD *)v3 + 3) = a1;
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_PULSE_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 73, "GncP25_07TimeMarkPulseCb");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      AgpsSendFsmMsg(132, 132, 8657667, v4);
    }
  }
  else if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TimeMark Trig fail\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 87, "GncP25_07TimeMarkPulseCb");
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
}

uint64_t GncP25_08HandleTimeMarkPulseInd(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char __str[966];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_PULSE_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP25_08HandleTimeMarkPulseInd");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if ((g_TimeMarkState & 1) == 0)
    {
      GncP25_09UpdateTimeMarkInfo(1, 0, *(_DWORD *)(a1 + 12), 0);
      return 0;
    }
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Session Stopped\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GncP25_08HandleTimeMarkPulseInd", 262);
      v4 = 2;
LABEL_9:
      gnssOsa_PrintLog(__str, v4, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 69, "GncP25_08HandleTimeMarkPulseInd", 517);
    v4 = 1;
    goto LABEL_9;
  }
  return 0;
}

void GncP25_10TimemarkSessTimerExpiry(void)
{
  _OWORD *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  char __str[966];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  g_TimemarkTimerStatus = 0;
  GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidOSTime = 0;
  GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidBBTick = 0;
  g_TimeMarkState = 1;
  v0 = gnssOsa_Calloc("GncP25_10TimemarkSessTimerExpiry", 493, 1, 0x50uLL);
  if (v0)
  {
    v1 = v0;
    v0[3] = 0u;
    v0[4] = 0u;
    v0[1] = 0u;
    v0[2] = 0u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GpsTime NotAvail\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP25_10TimemarkSessTimerExpiry");
      gnssOsa_PrintLog(__str, 4, 1, 0);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v3 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_EVENT_IND =>GNM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 73, "GncP25_10TimemarkSessTimerExpiry");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
    }
    AgpsSendFsmMsg(132, 128, 8651779, v1);
  }
}

uint64_t sprintf_eR8(_QWORD *a1, double a2)
{
  double v3;
  unsigned int i;
  unsigned int v5;
  double v6;
  double v7;
  double v8;
  int v9;
  _BYTE *v10;

  v3 = -a2;
  if (a2 >= 0.0)
    v3 = a2;
  if (v3 <= 0.0)
  {
    i = 0;
    v5 = 0;
  }
  else
  {
    for (i = 0; v3 < 0.00001; v3 = v3 * 10000.0)
      i -= 4;
    for (; v3 < 0.1; v3 = v3 * 10.0)
      --i;
    for (; v3 > 10000.0; v3 = v3 * 0.0001)
      i += 4;
    while (v3 > 10.0)
    {
      ++i;
      v3 = v3 * 0.1;
    }
    v6 = v3 * 10000000.0;
    v7 = -0.5;
    if (v6 > 0.0)
      v7 = 0.5;
    v8 = v6 + v7;
    if (v8 <= 2147483650.0)
    {
      if (v8 >= -2147483650.0)
        v9 = (int)v8;
      else
        v9 = 0x80000000;
    }
    else
    {
      v9 = 0x7FFFFFFF;
    }
    if (a2 >= 0.0)
      v5 = v9;
    else
      v5 = -v9;
  }
  sprintf_9f((uint64_t)a1, v5, 8);
  v10 = (_BYTE *)(*a1)++;
  *v10 = 101;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  return sprintf_03d((uint64_t)a1, i);
}

_QWORD *sprintf_gR8(_QWORD *a1, double a2)
{
  double v2;
  _BYTE *v3;
  double v4;
  double v5;
  double v6;
  unsigned int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  unsigned int v26;

  v2 = fabs(a2);
  v3 = (_BYTE *)(*a1)++;
  *v3 = 32;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  if (v2 < 99.0)
  {
    v4 = a2 * 1000000.0;
    v5 = -0.5;
    if (v4 > 0.0)
      v5 = 0.5;
    v6 = v4 + v5;
    if (v6 <= 2147483650.0)
    {
      if (v6 >= -2147483650.0)
        v7 = (int)v6;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 7;
    return (_QWORD *)sprintf_9f((uint64_t)a1, v7, v14);
  }
  if (v2 < 999.0)
  {
    v8 = a2 * 100000.0;
    v9 = -0.5;
    if (v8 > 0.0)
      v9 = 0.5;
    v10 = v8 + v9;
    if (v10 <= 2147483650.0)
    {
      if (v10 >= -2147483650.0)
        v7 = (int)v10;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 6;
    return (_QWORD *)sprintf_9f((uint64_t)a1, v7, v14);
  }
  if (v2 < 9999.0)
  {
    v11 = a2 * 10000.0;
    v12 = -0.5;
    if (v11 > 0.0)
      v12 = 0.5;
    v13 = v11 + v12;
    if (v13 <= 2147483650.0)
    {
      if (v13 >= -2147483650.0)
        v7 = (int)v13;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 5;
    return (_QWORD *)sprintf_9f((uint64_t)a1, v7, v14);
  }
  if (v2 < 99999.0)
  {
    v15 = a2 * 1000.0;
    v16 = -0.5;
    if (v15 > 0.0)
      v16 = 0.5;
    v17 = v15 + v16;
    if (v17 <= 2147483650.0)
    {
      if (v17 >= -2147483650.0)
        v7 = (int)v17;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 4;
    return (_QWORD *)sprintf_9f((uint64_t)a1, v7, v14);
  }
  if (v2 < 999999.0)
  {
    v18 = a2 * 100.0;
    v19 = -0.5;
    if (v18 > 0.0)
      v19 = 0.5;
    v20 = v18 + v19;
    if (v20 <= 2147483650.0)
    {
      if (v20 >= -2147483650.0)
        v7 = (int)v20;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 3;
    return (_QWORD *)sprintf_9f((uint64_t)a1, v7, v14);
  }
  if (v2 < 9999999.0)
  {
    v21 = a2 * 10.0;
    v22 = -0.5;
    if (v21 > 0.0)
      v22 = 0.5;
    v23 = v21 + v22;
    if (v23 <= 2147483650.0)
    {
      if (v23 >= -2147483650.0)
        v7 = (int)v23;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 2;
    return (_QWORD *)sprintf_9f((uint64_t)a1, v7, v14);
  }
  if (v2 >= 99999999.0)
    return (_QWORD *)sprintf_eR8(a1, a2);
  v24 = -0.5;
  if (a2 > 0.0)
    v24 = 0.5;
  v25 = v24 + a2;
  if (v25 <= 2147483650.0)
  {
    if (v25 >= -2147483650.0)
      v26 = (int)v25;
    else
      v26 = 0x80000000;
  }
  else
  {
    v26 = 0x7FFFFFFF;
  }
  return sprintf_10d(a1, v26);
}

_QWORD *sprintf_seR8(_QWORD *a1, double a2)
{
  double v3;
  unsigned int i;
  unsigned int v5;
  double v6;
  double v7;
  double v8;
  int v9;
  _BYTE *v10;

  v3 = -a2;
  if (a2 >= 0.0)
    v3 = a2;
  if (v3 <= 0.0)
  {
    i = 0;
    v5 = 0;
  }
  else
  {
    for (i = 0; v3 < 0.0001; v3 = v3 * 1000.0)
      i -= 3;
    for (; v3 < 0.1; v3 = v3 * 10.0)
      --i;
    for (; v3 > 1000.0; v3 = v3 * 0.001)
      i += 3;
    while (v3 > 9.999)
    {
      ++i;
      v3 = v3 * 0.1;
    }
    v6 = v3 * 1000.0;
    v7 = -0.5;
    if (v6 > 0.0)
      v7 = 0.5;
    v8 = v6 + v7;
    if (v8 <= 2147483650.0)
    {
      if (v8 >= -2147483650.0)
        v9 = (int)v8;
      else
        v9 = 0x80000000;
    }
    else
    {
      v9 = 0x7FFFFFFF;
    }
    if (a2 >= 0.0)
      v5 = v9;
    else
      v5 = -v9;
  }
  sprintf_5f((uint64_t)a1, v5, 4);
  v10 = (_BYTE *)(*a1)++;
  *v10 = 101;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  return sprintf_02d(a1, i);
}

_QWORD *sprintf_sgR8(_QWORD *a1, double a2)
{
  double v2;
  _BYTE *v3;
  double v4;
  double v5;
  double v6;
  unsigned int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  double v15;
  double v16;
  unsigned int v17;

  v2 = fabs(a2);
  v3 = (_BYTE *)(*a1)++;
  *v3 = 32;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  if (v2 < 99.0)
  {
    v4 = a2 * 1000.0;
    v5 = -0.5;
    if (v4 > 0.0)
      v5 = 0.5;
    v6 = v4 + v5;
    if (v6 <= 2147483650.0)
    {
      if (v6 >= -2147483650.0)
        v7 = (int)v6;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 4;
    return (_QWORD *)sprintf_6f((uint64_t)a1, v7, v14);
  }
  if (v2 < 999.0)
  {
    v8 = a2 * 100.0;
    v9 = -0.5;
    if (v8 > 0.0)
      v9 = 0.5;
    v10 = v8 + v9;
    if (v10 <= 2147483650.0)
    {
      if (v10 >= -2147483650.0)
        v7 = (int)v10;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 3;
    return (_QWORD *)sprintf_6f((uint64_t)a1, v7, v14);
  }
  if (v2 < 9999.0)
  {
    v11 = a2 * 10.0;
    v12 = -0.5;
    if (v11 > 0.0)
      v12 = 0.5;
    v13 = v11 + v12;
    if (v13 <= 2147483650.0)
    {
      if (v13 >= -2147483650.0)
        v7 = (int)v13;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 2;
    return (_QWORD *)sprintf_6f((uint64_t)a1, v7, v14);
  }
  if (v2 >= 99999.0)
    return sprintf_seR8(a1, a2);
  v15 = -0.5;
  if (a2 > 0.0)
    v15 = 0.5;
  v16 = v15 + a2;
  if (v16 <= 2147483650.0)
  {
    if (v16 >= -2147483650.0)
      v17 = (int)v16;
    else
      v17 = 0x80000000;
  }
  else
  {
    v17 = 0x7FFFFFFF;
  }
  return sprintf_7d(a1, v17);
}

_QWORD *sprintf_sgR8F(_QWORD *a1, double a2)
{
  double v2;
  _BYTE *v3;
  double v4;
  double v5;
  double v6;
  unsigned int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  double v15;
  double v16;
  unsigned int v17;

  v2 = fabs(a2);
  v3 = (_BYTE *)(*a1)++;
  *v3 = 32;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  if (v2 < 99.0)
  {
    v4 = a2 * 1000.0;
    v5 = -0.5;
    if (v4 > 0.0)
      v5 = 0.5;
    v6 = v4 + v5;
    if (v6 <= 2147483650.0)
    {
      if (v6 >= -2147483650.0)
        v7 = (int)v6;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 4;
    return (_QWORD *)sprintf_8f((uint64_t)a1, v7, v14);
  }
  if (v2 < 999.0)
  {
    v8 = a2 * 100.0;
    v9 = -0.5;
    if (v8 > 0.0)
      v9 = 0.5;
    v10 = v8 + v9;
    if (v10 <= 2147483650.0)
    {
      if (v10 >= -2147483650.0)
        v7 = (int)v10;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 3;
    return (_QWORD *)sprintf_8f((uint64_t)a1, v7, v14);
  }
  if (v2 < 9999.0)
  {
    v11 = a2 * 10.0;
    v12 = -0.5;
    if (v11 > 0.0)
      v12 = 0.5;
    v13 = v11 + v12;
    if (v13 <= 2147483650.0)
    {
      if (v13 >= -2147483650.0)
        v7 = (int)v13;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 2;
    return (_QWORD *)sprintf_8f((uint64_t)a1, v7, v14);
  }
  if (v2 >= 99999.0)
    return sprintf_seR8(a1, a2);
  v15 = -0.5;
  if (a2 > 0.0)
    v15 = 0.5;
  v16 = v15 + a2;
  if (v16 <= 2147483650.0)
  {
    if (v16 >= -2147483650.0)
      v17 = (int)v16;
    else
      v17 = 0x80000000;
  }
  else
  {
    v17 = 0x7FFFFFFF;
  }
  return sprintf_9d(a1, v17);
}

char **sprintf_ACC(char **result, double a2)
{
  char *v2;
  char v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned int v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int v18;

  if (a2 <= 99999.0)
  {
    if (a2 <= 9.9)
    {
      if (a2 <= 0.99)
      {
        if (a2 <= 0.099)
        {
          v15 = a2 * 1000.0;
          v16 = -0.5;
          if (v15 > 0.0)
            v16 = 0.5;
          v17 = v15 + v16;
          if (v17 <= 2147483650.0)
          {
            if (v17 >= -2147483650.0)
              v11 = (int)v17;
            else
              v11 = 0x80000000;
          }
          else
          {
            v11 = 0x7FFFFFFF;
          }
          v18 = 4;
        }
        else
        {
          v12 = a2 * 100.0;
          v13 = -0.5;
          if (v12 > 0.0)
            v13 = 0.5;
          v14 = v12 + v13;
          if (v14 <= 2147483650.0)
          {
            if (v14 >= -2147483650.0)
              v11 = (int)v14;
            else
              v11 = 0x80000000;
          }
          else
          {
            v11 = 0x7FFFFFFF;
          }
          v18 = 3;
        }
      }
      else
      {
        v8 = a2 * 10.0;
        v9 = -0.5;
        if (v8 > 0.0)
          v9 = 0.5;
        v10 = v8 + v9;
        if (v10 <= 2147483650.0)
        {
          if (v10 >= -2147483650.0)
            v11 = (int)v10;
          else
            v11 = 0x80000000;
        }
        else
        {
          v11 = 0x7FFFFFFF;
        }
        v18 = 2;
      }
      return (char **)sprintf_4f((uint64_t)result, v11, v18);
    }
    else
    {
      v5 = -0.5;
      if (a2 > 0.0)
        v5 = 0.5;
      v6 = v5 + a2;
      if (v6 <= 2147483650.0)
      {
        if (v6 >= -2147483650.0)
          v7 = (int)v6;
        else
          v7 = 0x80000000;
      }
      else
      {
        v7 = 0x7FFFFFFF;
      }
      return (char **)sprintf_5d(result, v7);
    }
  }
  else
  {
    v2 = *result;
    v3 = 57;
    v4 = 1u;
    do
    {
      *result = v2 + 1;
      *v2 = v3;
      v2 = *result;
      if (*result >= result[3])
      {
        v2 = result[2];
        *result = v2;
      }
      v3 = str_7[v4++];
    }
    while (v4 != 6);
  }
  return result;
}

uint64_t sprintf_v(uint64_t result, char *a2, uint64_t *a3)
{
  char **v3;
  unsigned __int8 v4;
  char *v5;
  char v6;
  char *v7;
  int v8;
  uint64_t *v9;
  char *v10;
  int v11;
  unint64_t *v12;
  uint64_t *v13;
  int *v14;
  int v15;
  unsigned int v16;
  double *v17;
  double *v18;
  double *v19;
  uint64_t *v20;
  unint64_t *v21;
  uint64_t *v22;
  _BYTE *v23;
  char v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  unsigned int *v28;
  char *v29;
  char *v30;
  char v31;
  char *v32;
  char v34[15];
  uint64_t v35;

  v3 = (char **)result;
  v35 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*a2)
  {
    v5 = a2;
    v6 = 0;
    do
    {
      if (v4 == 37 || (v6 & 1) != 0)
      {
        if ((v6 & 1) == 0)
        {
          v8 = *++v5;
          v4 = v8;
          if (!v8)
            return result;
        }
        if ((char)v4 <= 98)
        {
          switch(v4)
          {
            case 'D':
              v20 = a3++;
              result = (uint64_t)sprintf_1D(v3, *v20);
              goto LABEL_7;
            case 'U':
              v21 = (unint64_t *)a3++;
              result = (uint64_t)sprintf_1U(v3, *v21);
              goto LABEL_7;
            case 'X':
              v12 = (unint64_t *)a3++;
              result = (uint64_t)sprintf_1X(v3, *v12);
              goto LABEL_7;
          }
        }
        else
        {
          if ((char)v4 <= 114)
          {
            switch(v4)
            {
              case 'c':
                v9 = a3++;
                LODWORD(v9) = *(_DWORD *)v9;
                v10 = (*v3)++;
                *v10 = (char)v9;
                goto LABEL_6;
              case 'd':
                v14 = (int *)a3++;
                v15 = *v14;
                if (v15 >= 0)
                  v16 = v15;
                else
                  v16 = -v15;
                result = (uint64_t)sprintf1da(v3, v16, v34, 0, v15 >> 31);
                goto LABEL_7;
              case 'e':
                v17 = (double *)a3++;
                result = sprintf_eR8(v3, *v17);
                goto LABEL_7;
              case 'f':
                v18 = (double *)a3++;
                result = (uint64_t)sprintf_sgR8(v3, *v18);
                goto LABEL_7;
              case 'g':
                v19 = (double *)a3++;
                result = (uint64_t)sprintf_gR8(v3, *v19);
                goto LABEL_7;
              default:
                goto LABEL_41;
            }
          }
          switch(v4)
          {
            case 's':
              v22 = a3++;
              v23 = (_BYTE *)*v22;
              v24 = *v23;
              if (*v23)
              {
                v25 = *v3;
                v26 = v23 + 1;
                do
                {
                  *v3 = v25 + 1;
                  *v25 = v24;
                  v25 = *v3;
                  if (*v3 >= v3[3])
                  {
                    v25 = v3[2];
                    *v3 = v25;
                  }
                  v27 = *v26++;
                  v24 = v27;
                }
                while (v27);
              }
              goto LABEL_7;
            case 'u':
              v28 = (unsigned int *)a3++;
              result = (uint64_t)sprintf_1u(v3, *v28);
              goto LABEL_7;
            case 'x':
              v13 = a3++;
              result = (uint64_t)sprintf_1x(v3, *(unsigned int *)v13);
              goto LABEL_7;
          }
        }
LABEL_41:
        if ((v4 - 48) < 0xAu || v4 <= 0x2Eu && ((1 << v4) & 0x680800000000) != 0)
        {
          v6 = 1;
          goto LABEL_15;
        }
        v29 = (*v3)++;
        *v29 = 37;
        v30 = *v3;
        if (*v3 >= v3[3])
        {
          v30 = v3[2];
          *v3 = v30;
        }
        v31 = *v5;
        *v3 = v30 + 1;
        *v30 = v31;
      }
      else
      {
        v7 = (*v3)++;
        *v7 = v4;
      }
LABEL_6:
      if (*v3 >= v3[3])
      {
        v6 = 0;
        *v3 = v3[2];
        goto LABEL_15;
      }
LABEL_7:
      v6 = 0;
LABEL_15:
      v11 = *++v5;
      v4 = v11;
    }
    while (v11);
  }
  v32 = (*v3)++;
  *v32 = 10;
  if (*v3 >= v3[3])
    *v3 = v3[2];
  return result;
}

uint64_t GncP04_05HandlePosEventInd(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  unint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  unsigned __int8 *v26;
  unsigned __int16 *v27;
  unsigned __int8 *v28;
  _DWORD *v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  const char *v39;
  char v40;
  uint64_t v41;
  int v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  unint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char __str[966];
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v1 = &unk_2579E5000;
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_POS_EVENT SMClient,%hhu,Ses,%u,PosOp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 73, "GncP04_05HandlePosEventInd", *(unsigned __int8 *)(a1 + 12), *(unsigned __int16 *)(a1 + 14), *(unsigned __int8 *)(a1 + 16));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    v4 = *(unsigned __int8 *)(a1 + 12);
    v5 = *(unsigned __int16 *)(a1 + 14);
    if (*(_BYTE *)(a1 + 16))
    {
      v6 = 0;
      v7 = 1;
      while (1)
      {
        v8 = v7;
        if (*((_BYTE *)&g_GncPCntxtInfo + 36 * v6 + 8) == 1
          && *((unsigned __int8 *)&g_GncPCntxtInfo + 36 * v6 + 4) == v4
          && *((unsigned __int16 *)&g_GncPCntxtInfo + 18 * v6 + 3) == v5)
        {
          break;
        }
        v7 = 0;
        v6 = 1;
        if ((v8 & 1) == 0)
        {
          v6 = 0;
          v9 = 1;
          while (1)
          {
            v10 = v9;
            if (!*((_BYTE *)&g_GncPCntxtInfo + 36 * v6 + 8))
              break;
            v9 = 0;
            v6 = 1;
            if ((v10 & 1) == 0)
            {
              if (g_LbsOsaTrace_Config < 2)
                goto LABEL_41;
              bzero(__str, 0x3C6uLL);
              v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              v60 = *(unsigned __int16 *)(a1 + 14);
              v62 = *(unsigned __int8 *)(a1 + 16);
              v55 = 2054;
              v58 = *(unsigned __int8 *)(a1 + 12);
              v12 = "GncP04_07ProcessPosEvent";
              v13 = "%10u %s%c %s: #%04hx Client,%hhu,ID,%u,PosOp,%u\n";
              goto LABEL_25;
            }
          }
          if (g_GncPCntxtInfo < 2u)
          {
            LOBYTE(g_GncPCntxtInfo) = g_GncPCntxtInfo + 1;
            if (g_LbsOsaTrace_Config < 4)
              break;
            bzero(__str, 0x3C6uLL);
            v24 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Instance,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNC", 73, "GncP04_03IncreaseInstnCount", g_GncPCntxtInfo);
            v23 = 4;
          }
          else
          {
            if (g_LbsOsaTrace_Config < 2)
              break;
            bzero(__str, 0x3C6uLL);
            v22 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Count,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "GNC", 87, "GncP04_03IncreaseInstnCount", 770, g_GncPCntxtInfo);
            v23 = 2;
          }
          gnssOsa_PrintLog(__str, v23, 1, 0);
          break;
        }
      }
      v25 = (char *)&g_GncPCntxtInfo + 36 * v6;
      v25[8] = 1;
      v25[4] = *(_BYTE *)(a1 + 12);
      v26 = (unsigned __int8 *)(v25 + 4);
      *((_WORD *)v25 + 3) = *(_WORD *)(a1 + 14);
      v27 = (unsigned __int16 *)(v25 + 6);
      v25[9] = *(_BYTE *)(a1 + 16);
      v28 = (unsigned __int8 *)(v25 + 9);
      *(_OWORD *)(v25 + 12) = *(_OWORD *)(a1 + 20);
      v29 = v25 + 12;
      *((_WORD *)v25 + 14) = *(_WORD *)(a1 + 36);
      v30 = (unsigned __int16 *)(v25 + 28);
      *(_DWORD *)(v25 + 30) = *(_DWORD *)(a1 + 38);
      v31 = (unsigned __int16 *)(v25 + 30);
      *(_DWORD *)(v25 + 34) = *(_DWORD *)(a1 + 42);
      v32 = (unsigned __int8 *)(v25 + 34);
      v25[38] = *(_BYTE *)(a1 + 46);
      v33 = (unsigned __int8 *)(v25 + 38);
      if (g_LbsOsaTrace_Config >= 4)
      {
        v34 = v26;
        bzero(__str, 0x3C6uLL);
        v35 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Client,%hhu,ID,%u,Output,%u,ReqRcvd,%u,Deadline,%u,Emergency,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "GNC", 73, "GncP04_07ProcessPosEvent", 2057, *v34, *v27, *v28, *v29, *((_DWORD *)&g_GncPCntxtInfo + 9 * v6 + 4), *((unsigned __int8 *)&g_GncPCntxtInfo + 36 * v6 + 37));
        gnssOsa_PrintLog(__str, 4, 1, 0);
        v26 = v34;
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          v36 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx StartTime,%u,Int,%u,HAcc,%u,Vacc,%u,ConstMask,%u,PrefFtaMeasTime,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "GNC", 73, "GncP04_07ProcessPosEvent", 2057, *(_DWORD *)(v33 - 18), *(_DWORD *)(v33 - 14), *v30, *v31, *v32, *v33);
          gnssOsa_PrintLog(__str, 4, 1, 0);
          v26 = v34;
        }
      }
      if (*v26 == 1)
      {
        GncP16_23UpdateStateFGSession(1);
        v1 = (_DWORD *)&unk_2579E5000;
        goto LABEL_41;
      }
      v1 = &unk_2579E5000;
      if (g_LbsOsaTrace_Config < 2)
        goto LABEL_41;
      v37 = v26;
      bzero(__str, 0x3C6uLL);
      v38 = mach_continuous_time();
      v56 = *v37;
      v54 = "GncP04_07ProcessPosEvent";
      v53 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38);
      v39 = "%10u %s%c %s: Invalid ClientID,%hhu\n";
LABEL_39:
      snprintf(__str, 0x3C5uLL, v39, v53, "GNC", 87, v54, v56, v57, v59, v61);
      goto LABEL_40;
    }
    v16 = 0;
    v17 = 1;
    while (1)
    {
      v18 = v17;
      if (*((_BYTE *)&g_GncPCntxtInfo + 36 * v16 + 8) == 1)
      {
        v19 = (char *)&g_GncPCntxtInfo + 36 * v16;
        v21 = v19[4];
        v20 = v19 + 4;
        if (v21 == v4 && *((unsigned __int16 *)&g_GncPCntxtInfo + 18 * v16 + 3) == v5)
          break;
      }
      v17 = 0;
      v16 = 1;
      if ((v18 & 1) == 0)
      {
        if (g_LbsOsaTrace_Config < 2)
          goto LABEL_41;
        bzero(__str, 0x3C6uLL);
        v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        v60 = *(unsigned __int16 *)(a1 + 14);
        v62 = *(unsigned __int8 *)(a1 + 16);
        v55 = 2050;
        v58 = *(unsigned __int8 *)(a1 + 12);
        v12 = "GncP04_06HandleStopPosEvent";
        v13 = "%10u %s%c %s: #%04hx Client,%hhu,Ses,%u,PosOp,%u\n";
LABEL_25:
        snprintf(__str, 0x3C5uLL, v13, v11, "GNC", 87, v12, v55, v58, v60, v62);
LABEL_40:
        gnssOsa_PrintLog(__str, 2, 1, 0);
LABEL_41:
        switch((char)g_GncPStateInfo)
        {
          case 0:
          case 5:
          case 10:
          case 11:
          case 16:
            return 0;
          case 1:
          case 3:
            v40 = 2;
            goto LABEL_52;
          case 2:
          case 4:
            v40 = 3;
            goto LABEL_52;
          case 6:
            v40 = 7;
            goto LABEL_52;
          case 7:
          case 8:
          case 9:
          case 14:
          case 15:
            if (*(_BYTE *)(a1 + 16))
              v40 = 6;
            else
              v40 = 1;
LABEL_52:
            GncP04_19SendPosEvntResp(v40);
            return 0;
          default:
            if (v1[588] < 2u)
              return 0;
            bzero(__str, 0x3C6uLL);
            v44 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "GNC", 87, "GncP04_05HandlePosEventInd", 770);
            v15 = 2;
            break;
        }
LABEL_17:
        gnssOsa_PrintLog(__str, v15, 1, 0);
        return 0;
      }
    }
    if (v4 != 1)
    {
      if (g_LbsOsaTrace_Config < 2)
        goto LABEL_41;
      bzero(__str, 0x3C6uLL);
      v45 = mach_continuous_time();
      v56 = 770;
      v57 = *(unsigned __int8 *)(a1 + 12);
      v54 = "GncP04_06HandleStopPosEvent";
      v53 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45);
      v39 = "%10u %s%c %s: #%04hx ClientID,%hhu\n";
      goto LABEL_39;
    }
    *(_DWORD *)(v20 + 31) = 0;
    *(_OWORD *)v20 = 0u;
    *((_OWORD *)v20 + 1) = 0u;
    if ((g_GncPCntxtInfo - 3) > 0xFDu)
    {
      LOBYTE(g_GncPCntxtInfo) = g_GncPCntxtInfo - 1;
      if (g_LbsOsaTrace_Config < 4)
        goto LABEL_61;
      bzero(__str, 0x3C6uLL);
      v46 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Instance,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "GNC", 73, "GncP04_04DecreaseInstnCount", g_GncPCntxtInfo);
      v42 = 4;
    }
    else
    {
      if (g_LbsOsaTrace_Config < 2)
        goto LABEL_61;
      bzero(__str, 0x3C6uLL);
      v41 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Count,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "GNC", 87, "GncP04_04DecreaseInstnCount", 770, g_GncPCntxtInfo);
      v42 = 2;
    }
    gnssOsa_PrintLog(__str, v42, 1, 0);
LABEL_61:
    v47 = 0;
    v48 = 1;
    while (1)
    {
      v49 = v48;
      if (*((_BYTE *)&g_GncPCntxtInfo + 36 * v47 + 8) == 1 && !*((_BYTE *)&g_GncPCntxtInfo + 36 * v47 + 36))
        break;
      v48 = 0;
      v47 = 1;
      if ((v49 & 1) == 0)
      {
        GncP16_23UpdateStateFGSession(0);
        break;
      }
    }
    v50 = 0;
    v51 = 1;
    while (1)
    {
      v52 = v51;
      if (*((_BYTE *)&g_GncPCntxtInfo + 36 * v50 + 8) == 1 && (*((_BYTE *)&g_GncPCntxtInfo + 36 * v50 + 9) & 2) != 0)
        goto LABEL_41;
      v51 = 0;
      v50 = 1;
      if ((v52 & 1) == 0)
      {
        if (qword_2579E5920)
          free((void *)qword_2579E5920);
        qword_2579E5920 = 0;
        goto LABEL_41;
      }
    }
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v14 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 69, "GncP04_05HandlePosEventInd", 517);
    v15 = 1;
    goto LABEL_17;
  }
  return 0;
}

void GncP04_19SendPosEvntResp(char a1)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  char __str[966];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = gnssOsa_Calloc("GncP04_19SendPosEvntResp", 494, 1, 0x10uLL);
  if (v2)
  {
    v3 = v2;
    v2[12] = a1;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_POS_EVENT_RSP =>GNCS Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 73, "GncP04_19SendPosEvntResp", v3[12]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 130, 8653315, v3);
  }
}

uint64_t GncP04_08GetNextSessInstn(unsigned int a1, void *__dst, unsigned __int8 a3)
{
  uint64_t v3;
  int v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char __str[966];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (__dst)
  {
    v3 = 0;
    v4 = 0;
    v5 = 1;
    while (1)
    {
      v6 = v5;
      if (*((_BYTE *)&g_GncPCntxtInfo + 36 * v3 + 8) == 1
        && (*((_BYTE *)&g_GncPCntxtInfo + 36 * v3 + 9) & a3) != 0
        && a1 < ++v4)
      {
        break;
      }
      v5 = 0;
      v7 = 0;
      v3 = 1;
      if ((v6 & 1) == 0)
        return v7;
    }
    memcpy_s("GncP04_08GetNextSessInstn", 389, __dst, 0x24u, (char *)&g_GncPCntxtInfo + 36 * v3 + 4, 0x24uLL);
    return 1;
  }
  else
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP04_08GetNextSessInstn", 513);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 0;
  }
}

void GncP04_21SendClearGnssAck(char a1)
{
  int v1;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  char __str[966];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = g_GnssDataClrMask;
  if (g_GnssDataClrMask)
  {
    v3 = gnssOsa_Calloc("GncP04_21SendClearGnssAck", 522, 1, 0x14uLL);
    if (v3)
    {
      v4 = v3;
      v3[12] = a1;
      *((_DWORD *)v3 + 4) = v1;
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_CLEAR_GNSS_RSP =>GNM Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 73, "GncP04_21SendClearGnssAck", v4[12]);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      AgpsSendFsmMsg(132, 128, 8653316, v4);
      g_GnssDataClrMask = 0;
    }
  }
}

char *NK_IntConstel_TO_IntMeas(char *result, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  unsigned __int8 *v8;
  unsigned int v9;
  _BOOL4 v10;
  int v11;
  double v12;
  int v13;
  double v14;
  unsigned int v15;
  double v16;
  unsigned int v17;
  double v18;
  _WORD *v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned __int8 v23[4];
  int v24;
  uint64_t v25;
  char v26;
  int v27;
  _BYTE v28[28];
  __int128 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = (unsigned __int8 *)(a2 + 60472);
  if (result[241]
    || *((_DWORD *)result + 6780) > *((unsigned __int16 *)result + 8)
    || *(_DWORD *)(a2 + 1872) != 1)
  {
    v10 = 0;
  }
  else
  {
    v9 = *((_DWORD *)result + 37);
    if (v9 >= *((_DWORD *)result + 38))
      v9 = *((_DWORD *)result + 38);
    if (v9 >= *((_DWORD *)result + 39))
      v9 = *((_DWORD *)result + 39);
    v10 = v9 > 0xA;
  }
  v11 = *v8;
  if (v11 == 4)
  {
    v13 = *(_DWORD *)(a2 + 60476);
    if (v13 == 5)
    {
      if (*(int *)(a3 + 47536) < 1 || !*(_WORD *)(a3 + 47544))
        return result;
      v12 = *(double *)(a3 + 47552) * 299792458.0;
      if (fabs(v12) > 100.0)
        return EvLog_v("NK_IntConstel_TO_IntMeas:  Large BDS-GLO Time Offset  %d");
      v16 = 1.0;
      if (v10)
        v16 = 9.0;
      v18 = *(double *)(a2 + 1640) - *(double *)(a2 + 1648);
      v19 = result + 27086;
      v20 = 2;
      v17 = 1;
    }
    else
    {
      if (v13 != 4)
        return result;
      if (*(int *)(a3 + 47496) >= 1 && *(_WORD *)(a3 + 47504))
      {
        v12 = *(double *)(a3 + 47512) * 299792458.0;
        if (*(int *)(a2 + 20) >= 1 && *(_BYTE *)(a2 + 25))
        {
          LODWORD(a7) = *(_DWORD *)(a3 + 47508);
          v14 = *(double *)(a2 + 32)
              - (double)*(unint64_t *)&a7
              + (double)(604800 * (*(__int16 *)(a2 + 26) - *(unsigned __int16 *)(a3 + 47504)));
          v15 = (int)v14;
          if ((int)v14 < 0)
            v15 = -v15;
          if (v15 >> 5 <= 0xE0)
            v12 = v12 + v14 * *(double *)(a3 + 47520) * 299792458.0;
        }
        if (fabs(v12) > 30.0)
          return EvLog_v("NK_IntConstel_TO_IntMeas:  Large BDS-GPS Time Offset  %d");
        v16 = 1.0;
        if (v10)
          v16 = 9.0;
        *((double *)result + 1945) = v12;
        *((double *)result + 1946) = v16;
      }
      else
      {
        if (v10)
          return result;
        v12 = 0.0;
        v16 = 100.0;
      }
      v17 = 0;
      v18 = *(double *)(a2 + 1632) - *(double *)(a2 + 1648);
      v19 = result + 27084;
      v20 = 2;
    }
    goto LABEL_44;
  }
  if (v11 == 2 && *(_BYTE *)(a3 + 17192))
  {
    v12 = (double)*(int *)(a3 + 17132) * 9.31322575e-10 * -299792458.0;
    if (fabs(v12) > 100.0)
      return EvLog_v("NK_IntConstel_TO_IntMeas:  Large GLO-GPS Time Offset  %d");
    v16 = 1.0;
    if (v10)
      v16 = 9.0;
    *((double *)result + 1941) = v12;
    *((double *)result + 1942) = v16;
    if (*(_DWORD *)(a2 + 60476) == 1)
    {
      v17 = 0;
      v18 = *(double *)(a2 + 1632) - *(double *)(a2 + 1640);
      v19 = result + 27082;
      v20 = 1;
LABEL_44:
      v26 = 0;
      v25 = 0;
      v27 = 0;
      *(_OWORD *)&v28[12] = 0u;
      v29 = 0u;
      v30 = 0;
      *(double *)v28 = v12;
      *(double *)&v28[8] = v16;
      v23[0] = 1;
      v24 = 2;
      *(_QWORD *)((char *)&v29 + 4) = 0x4415AF1D78B58C40;
      result = (char *)KFSt_DMeas_Update(v17, v20, 0xCu, v23, (double *)result + 122, v19, v18 * 299792458.0);
      if ((_DWORD)result)
      {
        v21 = *v8;
        if (v21 == 4)
        {
          *((_DWORD *)v8 + 401) = v24;
          v22 = *((_DWORD *)v8 + 1);
          if (v22 == 5)
          {
            v8[1664] = 1;
          }
          else if (v22 == 4)
          {
            v8[1663] = 1;
            v8[32] = 1;
            *(_OWORD *)(a2 + 60512) = *(_OWORD *)v28;
          }
        }
        else if (v21 == 2)
        {
          *((_DWORD *)v8 + 400) = v24;
          v8[1662] = 1;
          v8[8] = 1;
          *((_OWORD *)v8 + 1) = *(_OWORD *)v28;
        }
        if (g_Logging_Cfg >= 7)
          return EvLog_v("NK_IntConstel_TO_IntMeas: Time Offset applied:  %d  %d");
      }
    }
  }
  return result;
}

unsigned __int16 *Gnm02_13ReqNewNafInstn(int a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned __int16 v8;
  unint64_t v9;
  BOOL v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char __str[966];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (Gnm02_32GetInstnFromNafId(a1))
  {
    if (g_LbsOsaTrace_Config < 2)
      return 0;
    bzero(__str, 0x3C6uLL);
    v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx %s\n", v18);
LABEL_27:
    gnssOsa_PrintLog(__str, 2, 1, 0);
    return 0;
  }
  v4 = 2u;
  do
  {
    if (!*(_QWORD *)&g_GnmInstances[v4])
    {
      v6 = (unsigned __int16 *)gnssOsa_Calloc("Gnm02_11ReqNewInstn", 139, 1, 0x10uLL);
      *(_QWORD *)&g_GnmInstances[v4] = v6;
      if (!v6)
      {
LABEL_25:
        if (g_LbsOsaTrace_Config < 2)
          return 0;
        bzero(__str, 0x3C6uLL);
        v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NewInstn %s\n", v19);
        goto LABEL_27;
      }
      v7 = v6;
      v8 = g_GnmInstances[0];
      do
      {
        v9 = 0;
        v10 = 0;
        if ((unsigned __int16)(v8 >> 2) < 0xFFFu)
          ++v8;
        else
          v8 = 1;
        do
        {
          v11 = *(unsigned __int16 **)&g_GnmInstances[2 * v9 + 2];
          if (v11 && *v11 == v8)
            break;
          v10 = v9++ > 1;
        }
        while (v9 != 3);
      }
      while (!v10);
      g_GnmInstances[0] = __PAIR32__(HIWORD(g_GnmInstances[0]), v8) + 0x10000;
      *v6 = v8;
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v12 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InstnId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 73, "Gnm02_11ReqNewInstn", 2057, *v7);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      v13 = 2u;
      while (*(unsigned __int16 **)&g_GnmInstances[v13] != v7)
      {
        v13 += 2;
        if (v13 == 8)
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Instn\n");
            goto LABEL_34;
          }
LABEL_37:
          Gnm02_21DeleteInstn(v7);
          return 0;
        }
      }
      if (*((_BYTE *)v7 + 2))
      {
        if (g_LbsOsaTrace_Config < 2)
          goto LABEL_37;
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InstnType\n");
      }
      else
      {
        if (!*((_QWORD *)v7 + 1))
        {
          v16 = gnssOsa_Calloc("Gnm02_04AddNafParams", 100, 1, 0x50uLL);
          *((_QWORD *)v7 + 1) = v16;
          if (v16)
          {
            *((_BYTE *)v7 + 2) = 1;
            *v16 = a1;
            if (g_LbsOsaTrace_Config >= 4)
            {
              bzero(__str, 0x3C6uLL);
              v17 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx %s GNMInstn,%u,NaftInstn,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNM", 73, "Gnm02_13ReqNewNafInstn", 2057, a2, *v7, a1);
              gnssOsa_PrintLog(__str, 4, 1, 0);
            }
            return v7;
          }
LABEL_35:
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            v14 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NewNafInst %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 87, "Gnm02_13ReqNewNafInstn", 2049, a2);
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          goto LABEL_37;
        }
        if (g_LbsOsaTrace_Config < 2)
          goto LABEL_37;
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n");
      }
LABEL_34:
      gnssOsa_PrintLog(__str, 2, 1, 0);
      goto LABEL_35;
    }
    v4 += 2;
  }
  while (v4 != 8);
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 87, "Gnm02_11ReqNewInstn", 2054);
    gnssOsa_PrintLog(__str, 2, 1, 0);
    goto LABEL_25;
  }
  return 0;
}

uint64_t Gnm02_32GetInstnFromNafId(int a1)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char __str[966];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = 2u;
  while (1)
  {
    result = *(_QWORD *)&g_GnmInstances[v2];
    if (result)
    {
      v4 = *(_DWORD **)(result + 8);
      if (v4)
      {
        if (*(_BYTE *)(result + 2) == 1 && *v4 == a1)
          break;
      }
    }
    v2 += 2;
    if (v2 == 8)
    {
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NafId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 68, "Gnm02_32GetInstnFromNafId", 2052, a1);
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
      return 0;
    }
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNMInstn,%u,NafInstn,%u found\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm02_32GetInstnFromNafId", **(unsigned __int16 **)&g_GnmInstances[v2], a1);
    gnssOsa_PrintLog(__str, 4, 1, 0);
    return *(_QWORD *)&g_GnmInstances[v2];
  }
  return result;
}

BOOL Gnm02_21DeleteInstn(unsigned __int16 *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char __str[966];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v2 = 2u;
    while (*(unsigned __int16 **)&g_GnmInstances[v2] != a1)
    {
      v2 += 2;
      if (v2 == 8)
        goto LABEL_5;
    }
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Deleted GNMInstn,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm02_21DeleteInstn", *a1);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    v7 = *((_QWORD *)a1 + 1);
    if (v7)
    {
      if (*((_BYTE *)a1 + 2) == 1)
      {
        v8 = *(void **)(v7 + 72);
        if (v8)
          free(v8);
        *(_QWORD *)(v7 + 72) = 0;
        v4 = (*(_BYTE *)(v7 + 4) & 7) != 0;
      }
      else
      {
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          v10 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InstnType,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 87, "Gnm02_21DeleteInstn", 2050, *((unsigned __int8 *)a1 + 2));
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        v4 = 0;
      }
      v11 = (void *)*((_QWORD *)a1 + 1);
      if (v11)
        free(v11);
      *((_QWORD *)a1 + 1) = 0;
      *((_BYTE *)a1 + 2) = 0;
    }
    else
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v9 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InstnInfo\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 87, "Gnm02_21DeleteInstn", 2050);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      v4 = 0;
    }
    v12 = 2u;
    while (*(unsigned __int16 **)&g_GnmInstances[v12] != a1)
    {
      v12 += 2;
      if (v12 == 8)
        return v4;
    }
    free(a1);
    *(_QWORD *)&g_GnmInstances[v12] = 0;
    if (HIWORD(g_GnmInstances[0]))
      --HIWORD(g_GnmInstances[0]);
  }
  else
  {
LABEL_5:
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Instn\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 87, "Gnm02_21DeleteInstn", 2050);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 0;
  }
  return v4;
}

BOOL Gnm02_23StopNafSession(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v9;
  char __str[966];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Clearing Instance NafID,%u,PosnType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 73, "Gnm02_23StopNafSession", *(_DWORD *)v2, *(unsigned __int8 *)(v2 + 4));
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  v4 = *(unsigned __int8 *)(v2 + 4);
  v5 = v4 > 4;
  v6 = (1 << v4) & 0x16;
  if (!v5 && v6 != 0)
    return Gnm10_28StopPositioning((unsigned __int16 *)a1);
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx PosnType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 87, "Gnm02_23StopNafSession", 770, *(unsigned __int8 *)(v2 + 4));
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return 0;
}

uint64_t Gnm02_24AbortAllNafSessions(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unsigned int *v5;
  void (*v6)(uint64_t, uint64_t, _QWORD *);
  uint64_t v7;
  _QWORD v8[2];
  int v9;
  char v10;
  char __str[966];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Aborting all NAF sessions\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm02_24AbortAllNafSessions");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  v3 = 2u;
  do
  {
    result = *(_QWORD *)&g_GnmInstances[v3];
    if (result)
    {
      v5 = *(unsigned int **)(result + 8);
      if (v5)
      {
        if (*(_BYTE *)(result + 2) == 1)
        {
          if ((v5[1] & 7) != 0 && *((_BYTE *)v5 + 64) == 1)
          {
            v6 = (void (*)(uint64_t, uint64_t, _QWORD *))*((_QWORD *)v5 + 7);
            v7 = *v5;
            v8[0] = 0;
            v8[1] = 0;
            v9 = 0;
            v10 = 1;
            v6(a1, v7, v8);
            result = *(_QWORD *)&g_GnmInstances[v3];
          }
          Gnm02_23StopNafSession(result);
          result = Gnm02_21DeleteInstn(*(unsigned __int16 **)&g_GnmInstances[v3]);
        }
      }
    }
    v3 += 2;
  }
  while (v3 != 8);
  return result;
}

unsigned __int16 *Gnm02_31GetInstnFromInstnId(int a1)
{
  uint64_t v2;
  unsigned __int16 *result;
  uint64_t v4;
  char __str[966];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = 2u;
  while (1)
  {
    result = *(unsigned __int16 **)&g_GnmInstances[v2];
    if (result)
    {
      if (*result == a1)
        break;
    }
    v2 += 2;
    if (v2 == 8)
    {
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        v4 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InstnId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 68, "Gnm02_31GetInstnFromInstnId", 2052, a1);
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
      return 0;
    }
  }
  return result;
}

unsigned __int16 *Gnm02_52DeInitializeInstances(void)
{
  uint64_t v0;
  unsigned __int16 *result;

  v0 = 2u;
  do
  {
    result = *(unsigned __int16 **)&g_GnmInstances[v0];
    if (result)
      result = (unsigned __int16 *)Gnm02_21DeleteInstn(result);
    v0 += 2;
  }
  while (v0 != 8);
  g_GnmInstances[0] = 0;
  return result;
}

double GAL_EphReal2Kep(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  char v3;
  BOOL v4;
  char v5;
  char v6;
  char v7;
  int v8;
  char v9;
  int v10;
  double v11;
  uint64_t v12;
  double result;
  uint64_t v14;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 8) = 3;
  *(_BYTE *)(a2 + 12) = *(_BYTE *)(a1 + 14);
  v2 = *(unsigned __int8 *)(a1 + 15);
  if (v2 > 0x31)
  {
    if (v2 > 0x4B)
    {
      if (v2 <= 0x64)
      {
        if (v2 >= 0x51)
        {
          if (v2 >= 0x5D)
            v3 = 0;
          else
            v3 = -1;
        }
        else
        {
          v3 = -2;
        }
        goto LABEL_58;
      }
      if (v2 > 0x7D)
      {
        if (v2 > 0x96)
        {
          if (v2 > 0xAF)
          {
            if (v2 > 0xC8)
            {
              if (v2 > 0xE1)
              {
                if (v2 > 0xFA)
                {
                  if (v2 == 255)
                    v3 = 15;
                  else
                    v3 = 14;
                  goto LABEL_58;
                }
                v4 = v2 >= 0xEE;
                v3 = 9;
              }
              else
              {
                v4 = v2 >= 0xD6;
                v3 = 8;
              }
            }
            else
            {
              v4 = v2 >= 0xBE;
              v3 = 7;
            }
          }
          else
          {
            v4 = v2 >= 0xA6;
            v3 = 6;
          }
        }
        else
        {
          if (v2 < 0x82)
          {
            v3 = 3;
            goto LABEL_58;
          }
          if (v2 < 0x8B)
          {
            v3 = 4;
            goto LABEL_58;
          }
          v4 = v2 >= 0x96;
          v3 = 5;
        }
      }
      else
      {
        if (v2 < 0x67)
        {
          v3 = 0;
          goto LABEL_58;
        }
        if (v2 < 0x6D)
        {
          v3 = 1;
          goto LABEL_58;
        }
        v4 = v2 >= 0x76;
        v3 = 2;
      }
    }
    else
    {
      if (v2 < 0x38)
      {
        v3 = -4;
        goto LABEL_58;
      }
      v4 = v2 >= 0x44;
      v3 = -3;
    }
  }
  else
  {
    if (v2 < 2)
    {
      v3 = -15;
      goto LABEL_58;
    }
    if (v2 == 2)
    {
      v3 = -14;
      goto LABEL_58;
    }
    if (v2 < 4)
    {
      v3 = -13;
      goto LABEL_58;
    }
    if (v2 == 4)
    {
      v3 = -12;
      goto LABEL_58;
    }
    if (v2 < 7)
    {
      v3 = -11;
      goto LABEL_58;
    }
    if (v2 < 9)
    {
      v3 = -10;
      goto LABEL_58;
    }
    if (v2 < 0xC)
    {
      v3 = -9;
      goto LABEL_58;
    }
    if (v2 < 0x10)
    {
      v3 = -8;
      goto LABEL_58;
    }
    if (v2 < 0x16)
    {
      v3 = -7;
      goto LABEL_58;
    }
    if (v2 < 0x1F)
    {
      v3 = -6;
      goto LABEL_58;
    }
    v4 = v2 >= 0x2C;
    v3 = -5;
  }
  if (v4)
    ++v3;
LABEL_58:
  *(_BYTE *)(a2 + 19) = v3;
  *(_BYTE *)(a2 + 18) = *(_BYTE *)(a1 + 202);
  v5 = v2 == 255;
  *(_BYTE *)(a2 + 14) = v5 << 6;
  v6 = *(_BYTE *)(a1 + 201);
  v7 = *(_BYTE *)(a1 + 198);
  v8 = *(unsigned __int8 *)(a1 + 199);
  v9 = *(_BYTE *)(a1 + 196);
  *(_BYTE *)(a2 + 14) = (4 * v7) | (8 * v8) | (32 * v9) | (v5 << 6) | v6;
  *(_BYTE *)(a2 + 15) = v8 == 0;
  *(_BYTE *)(a2 + 16) = (v6 | v7) == 0;
  *(_BYTE *)(a2 + 17) = (v8 | v9) == 0;
  *(_WORD *)(a2 + 20) = *(_WORD *)(a1 + 194);
  *(_WORD *)(a2 + 22) = *(_WORD *)(a1 + 12) + 1024;
  v10 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a2 + 28) = v10;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 152);
  v11 = *(double *)(a1 + 184);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 168);
  *(double *)(a2 + 64) = v11;
  *(double *)(a2 + 72) = v11;
  *(double *)(a2 + 80) = v11 * 1.79327032;
  *(double *)(a2 + 88) = v11 * 1.79327032;
  *(double *)(a2 + 96) = v11;
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 176) = v12;
  *(_QWORD *)(a2 + 184) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 200) = *(_OWORD *)(a1 + 48);
  result = *(double *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 216) = *(_QWORD *)(a1 + 64);
  *(double *)(a2 + 224) = result;
  *(_QWORD *)(a2 + 232) = v14;
  return result;
}

double *NK_Comp_DOPS(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  double *v19;
  double v20;
  double *result;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v29;
  double v30[5];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  double v36;
  _OWORD v37[8];
  int8x16_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = a2;
  v4 = 0;
  v40 = *MEMORY[0x24BDAC8D0];
  memset(v37, 0, sizeof(v37));
  do
  {
    *(_QWORD *)((char *)v37 + v4) = 0x40D3880000000000;
    v4 += 40;
  }
  while (v4 != 160);
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  memset(&v30[1], 0, 32);
  v5 = 1.99960002e14;
  if (*(_BYTE *)(a1 + 15411))
    v5 = *(double *)(a1 + 15440) + fabs((double)(*(_DWORD *)a2 - *(_DWORD *)(a1 + 15432)) * 0.001);
  *(double *)&v31 = v5;
  v30[0] = v5;
  v6 = 1.99960002e14;
  if (*(_BYTE *)(a1 + 15412))
    v6 = *(double *)(a1 + 15456) + fabs((double)(*(_DWORD *)a2 - *(_DWORD *)(a1 + 15448)) * 0.001);
  *((double *)&v33 + 1) = v6;
  v7 = 1.99960002e14;
  if (*(_BYTE *)(a1 + 15410))
    v7 = *(double *)(a1 + 15424) + fabs((double)(*(_DWORD *)a2 - *(_DWORD *)(a1 + 15416)) * 0.001);
  v8 = 0;
  v36 = v7;
  do
  {
    if (v30[v8] > 1.99960002e14)
      v30[v8] = 1.99960002e14;
    v8 += 5;
  }
  while (v8 != 20);
  v29 = a1 + 15410;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2 + 3680;
  v13 = 0.0;
  v14 = 7048;
  v15 = 13184;
  v16 = 14208;
  do
  {
    if (*(_BYTE *)(a1 + v16))
    {
      v17 = a1 + 8 * v9;
      v18 = (int8x16_t)vmulq_n_f64(*(float64x2_t *)(a1 + v14), *(double *)(v17 + 1936));
      v38 = vextq_s8(v18, v18, 8uLL);
      v39 = *(_QWORD *)(v17 + 1928);
      v19 = (double *)(*(_BYTE *)(v2 + 2400) ? v12 : a1 + v15);
      v20 = *v19 >= 0.0001 ? *v19 : 0.0001;
      DOP4_Upd_W_Meas((double *)v38.i64, v20, (double (*)[4])v30);
      if (v20 < 800000.0)
      {
        ++v10;
        v13 = v13 + v20;
        if (*(_BYTE *)(v2 + 7064))
        {
          DOP4_Upd_U_Meas((uint64_t)&v38, (double (*)[4])v37);
          ++v11;
        }
      }
    }
    v9 += 5;
    v14 += 40;
    ++v2;
    v15 += 8;
    v12 += 8;
    ++v16;
  }
  while (v9 != 640);
  if (v11 <= 3)
    DOP4_Upd_U_Elem(2, (double (*)[4])v37);
  result = DOP4_Calc_U((double *)v37, (double *)(a2 + 61848));
  if (v10)
    v22 = v13 / (double)v10;
  else
    v22 = 0.0;
  *(double *)(a1 + 14336) = v22;
  v23 = v36 * 8.0;
  *(double *)(a1 + 15488) = v36 * 8.0;
  v24 = *(double *)&v31;
  v25 = *((double *)&v33 + 1) * 8.0;
  *(double *)(a1 + 15512) = *((double *)&v33 + 1) * 8.0;
  v26 = v30[1];
  v27 = v30[0] + v30[0];
  *(double *)(a1 + 15496) = v30[0] + v30[0];
  *(double *)(a1 + 15504) = v24 + v24;
  *(double *)(a1 + 15520) = v26 + v26;
  if (v23 > 3600.0)
    *(_QWORD *)(a1 + 15488) = 0x40AC200000000000;
  if (v25 > 3600.0)
    *(_QWORD *)(a1 + 15512) = 0x40AC200000000000;
  if (v27 > 900.0 || v24 + v24 > 900.0)
  {
    *(int64x2_t *)(v29 + 86) = vdupq_n_s64(0x408C200000000000uLL);
    *(_QWORD *)(a1 + 15520) = 0;
  }
  return result;
}

uint64_t NK_Get_Ext_Time(uint64_t result, uint64_t a2, uint64_t a3)
{
  __int16 *v3;
  double v4;
  int v7;
  double *v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int v19;
  double v20;
  int v21;
  float64x2_t v22;
  double v23;
  __int16 v24;
  double v25;
  unsigned __int8 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v3 = (__int16 *)(a2 + 59966);
  *(_BYTE *)(a2 + 59984) = 0;
  *(_BYTE *)(a2 + 60000) = 0;
  *(_BYTE *)(a2 + 60056) = 0;
  *(_BYTE *)(a2 + 60072) = 0;
  v4 = *(double *)(a2 + 32);
  if (v4 > 3.0 && v4 < 604797.0)
  {
    v7 = result;
    v26 = 0;
    v8 = (double *)(a2 + 59968);
    v9 = (double *)(a2 + 59976);
    result = Get_FSP_Time(result, (__int16 *)(a2 + 59966), (double *)(a2 + 59968), (double *)(a2 + 59976), &v26);
    if ((_DWORD)result)
    {
      v10 = *v8;
      v11 = *(double *)(a2 + 1528);
      v12 = *v8 - (v11 - *(double *)(a2 + 1632));
      *(double *)(a2 + 63768) = v12;
      v13 = *v9;
      v14 = *(unsigned int *)(a2 + 20);
      if (*v9 < g_TOW_Stat_Var99_Table[v14])
      {
        v15 = v12 * 1000.0;
        v16 = -0.5;
        if (v15 > 0.0)
          v16 = 0.5;
        v17 = v15 + v16;
        v18 = 2147483650.0;
        if (v17 <= 2147483650.0)
        {
          v18 = -2147483650.0;
          if (v17 >= -2147483650.0)
            v18 = (double)(int)v17;
        }
        *((_BYTE *)v3 + 18) = 1;
        *(_DWORD *)(v3 + 11) = 1;
        *(_DWORD *)(v3 + 19) = v7;
        *(double *)(v3 + 21) = v18;
        *(double *)(v3 + 25) = v13 * 1000000.0;
        v19 = *(unsigned __int8 *)(a3 + 241);
        v20 = 36.0;
        if (*(_BYTE *)(a3 + 241))
          v20 = 1.0e20;
        *(double *)(v3 + 37) = v20;
        v21 = v26;
        *(_DWORD *)(v3 + 15) = v26;
        if (v13 <= 0.00000025 || (int)v14 <= 8)
        {
          v22.f64[0] = v11 + v18 * 0.001 - v10;
          *((_BYTE *)v3 + 90) = 1;
          *(_DWORD *)(v3 + 47) = 1;
          *(_DWORD *)(v3 + 55) = v7;
          v22.f64[1] = v13;
          *(float64x2_t *)(a2 + 60080) = vmulq_f64(v22, (float64x2_t)xmmword_24BC094B0);
          v23 = 16.0;
          if (v19)
            v23 = 1.0e20;
          *(double *)(v3 + 73) = v23;
          *(_DWORD *)(v3 + 51) = v21;
        }
        v24 = *v3;
        *(_WORD *)(a2 + 1542) = *v3;
        *(_WORD *)(a2 + 26) = v24;
      }
    }
    if (*((_BYTE *)v3 + 90) && (v25 = *(double *)(v3 + 61), v25 < 2.25e10))
    {
      *(_BYTE *)(a3 + 15410) = 1;
      *(_DWORD *)(a3 + 15416) = *(_DWORD *)(v3 + 55);
      *(double *)(a3 + 15424) = v25;
    }
    else if (*(_BYTE *)(a3 + 15410))
    {
      if ((v7 - *(_DWORD *)(a3 + 15416)) >= 0x1D4C1)
        *(_BYTE *)(a3 + 15410) = 0;
    }
  }
  return result;
}

uint64_t NK_Prop_Cov_Mat(double a1, double *a2)
{
  unsigned __int8 v3;
  int v4;
  char v5;
  unsigned __int8 v6[4];
  __int16 v7;
  unsigned __int8 v8[4];
  __int16 v9;
  double v10[13];

  v10[12] = *(double *)MEMORY[0x24BDAC8D0];
  v3 = 1;
  v10[0] = a1;
  v10[1] = a1;
  v4 = 16843009;
  v5 = 1;
  v10[2] = a1;
  v10[3] = a1;
  *(_DWORD *)v6 = 117637633;
  *(_DWORD *)v8 = 168101125;
  v7 = 2312;
  v9 = 3083;
  v10[4] = a1;
  v10[5] = a1;
  return stphiu((uint64_t)a2, 0xCu, v10, v8, 6, v6, &v3);
}

uint64_t Gnm14_11HandleStartPosResp(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned __int16 *InstnFromInstnId;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  char __str[966];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_START_POS_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm14_11HandleStartPosResp");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config)
      return 0;
    bzero(__str, 0x3C6uLL);
    v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 69, "Gnm14_11HandleStartPosResp", 517);
    v9 = 1;
LABEL_14:
    gnssOsa_PrintLog(__str, v9, 1, 0);
    return 0;
  }
  v3 = *(unsigned __int8 *)(a1 + 14);
  v4 = *(unsigned __int16 *)(a1 + 12);
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: SessId,%u,RespCode,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm14_11HandleStartPosResp", v4, *(unsigned __int8 *)(a1 + 14));
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  InstnFromInstnId = Gnm02_31GetInstnFromInstnId(v4);
  if (!InstnFromInstnId)
  {
    if (g_LbsOsaTrace_Config < 2)
      return 0;
    bzero(__str, 0x3C6uLL);
    v10 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Instn SessId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 87, "Gnm14_11HandleStartPosResp", 2052, v4);
    v9 = 2;
    goto LABEL_14;
  }
  v7 = InstnFromInstnId;
  if (!*((_QWORD *)InstnFromInstnId + 1))
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InstnInfo SessId,%u\n", v12);
LABEL_19:
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
LABEL_20:
    Gnm02_21DeleteInstn(v7);
    return 0;
  }
  if (*((_BYTE *)InstnFromInstnId + 2) != 1)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InstnType,%hhu\n", v13);
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  Gnm11_07StartPosResp((uint64_t)InstnFromInstnId, v3 == 255);
  return 0;
}

uint64_t Gnm14_12HandleStopPosResp(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned __int16 *InstnFromInstnId;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char __str[966];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_STOP_POS_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm14_12HandleStopPosResp");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config)
      return 0;
    bzero(__str, 0x3C6uLL);
    v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 69, "Gnm14_12HandleStopPosResp", 517);
    v9 = 1;
LABEL_14:
    gnssOsa_PrintLog(__str, v9, 1, 0);
    return 0;
  }
  v3 = *(unsigned __int8 *)(a1 + 14);
  v4 = *(unsigned __int16 *)(a1 + 12);
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: SessId,%u,RespCode,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm14_12HandleStopPosResp", v4, *(unsigned __int8 *)(a1 + 14));
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  InstnFromInstnId = Gnm02_31GetInstnFromInstnId(v4);
  if (!InstnFromInstnId)
  {
    if (g_LbsOsaTrace_Config < 2)
      return 0;
    bzero(__str, 0x3C6uLL);
    v10 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Instn SessId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 87, "Gnm14_12HandleStopPosResp", 2052, v4);
    v9 = 2;
    goto LABEL_14;
  }
  v7 = InstnFromInstnId;
  if (*((_QWORD *)InstnFromInstnId + 1))
  {
    if (*((_BYTE *)InstnFromInstnId + 2) == 1)
    {
      Gnm11_08StopPosResp(InstnFromInstnId, v3 == 255);
    }
    else
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v12 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InstnType,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 87, "Gnm14_12HandleStopPosResp", 770, *((unsigned __int8 *)v7 + 2));
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      Gnm02_21DeleteInstn(v7);
    }
    gnssOsa_flushNv();
  }
  else
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InstnInfo SessId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "Gnm14_12HandleStopPosResp", 2052, v4);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    Gnm02_21DeleteInstn(v7);
  }
  return 0;
}

uint64_t Gnm14_13HandleClearGNSSRsp(uint64_t a1)
{
  uint64_t v2;
  int v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char __str[966];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_CLEAR_GNSS_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm14_13HandleClearGNSSRsp");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    v3 = *(unsigned __int8 *)(a1 + 12);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      v5 = 89;
      if (!v3)
        v5 = 78;
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Status,%c,Mask0x%X\n", (unint64_t)v4, "GNM", 73, "Gnm14_13HandleClearGNSSRsp", v5, *(_DWORD *)(a1 + 16));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if (v3 && ((*(_DWORD *)(a1 + 16) & 0x40100) == 0 || (Gnm55_ClearVar_GNSS_FW_NV() & 1) != 0))
    {
      if (byte_2579E5F09)
      {
        byte_2579E5F09 = 0;
        v6 = 0;
LABEL_17:
        Gnm11_00ApiStatusCB(v6, 0, 0, 16);
      }
    }
    else if (byte_2579E5F09)
    {
      byte_2579E5F09 = 0;
      v6 = 11;
      goto LABEL_17;
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm14_13HandleClearGNSSRsp", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void Comp_AzEl(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, _WORD *a5, _DWORD *a6, int *a7)
{
  uint64_t v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  int v24;
  int v25;
  unsigned int v26;
  double v27[3];
  double v28;
  double v29;
  double v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a3 + 120))
  {
    v11 = 0;
    v28 = 0.0;
    v29 = 0.0;
    v30 = 0.0;
    do
    {
      *(double *)((char *)&v28 + v11) = *(double *)(a3 + 8 + v11) - *(double *)(a1 + v11);
      v11 += 8;
    }
    while (v11 != 24);
    v12 = 0.0;
    v13 = 2;
    do
    {
      v12 = v12 + *(&v28 + v13) * *(&v28 + v13);
      v14 = v13-- + 1;
    }
    while (v14 > 1);
    v15 = 0;
    v16 = sqrt(v12);
    do
    {
      *(double *)((char *)&v28 + v15) = *(double *)((char *)&v28 + v15) / v16;
      v15 += 8;
    }
    while (v15 != 24);
    v17 = 0;
    memset(v27, 0, sizeof(v27));
    v18 = v28;
    v19 = v29;
    v20 = (double *)(a2 + 16);
    v21 = v30;
    do
    {
      v22 = *(v20 - 1) * v19 + *(v20 - 2) * v18;
      v23 = *v20;
      v20 += 3;
      v27[v17++] = v22 + v23 * v21;
    }
    while (v17 != 3);
    AzEl_SinCos(v27, (uint64_t)a7, (uint64_t)a6);
    AzEl_RadDeg((uint64_t)a7, (uint64_t)a6);
    v24 = *a7;
    if (*a7 < 0)
    {
      if (v24 <= -360)
        v25 = -360;
      else
        v25 = *a7;
      v26 = (v25 - v24 - (v24 < 0xFFFFFE98)) / 0x168;
      if (v24 < 0xFFFFFE98)
        ++v26;
      *a7 = v24 + 360 * v26 + 360;
    }
    *a4 = *a6;
    *a5 = *a7;
  }
}

int8x8_t Decode_GPS_Health_From_AS_Subfr(const unsigned int *a1, int8x8_t *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint8x8_t v4;
  uint16x8_t v5;
  uint32x4_t v6;
  int64x2_t v7;
  int64x2_t v8;
  uint32x4_t v9;
  uint64x2_t v10;
  int8x8_t result;

  v2 = a1[8];
  v3 = a1[9];
  v4.i8[0] = a1[7] & 0x1F;
  v4.i8[1] = (v2 >> 18) & 0x1F;
  v4.i8[2] = (v2 >> 12) & 0x1F;
  v4.i8[3] = (v2 >> 6) & 0x1F;
  v4.i8[4] = v2 & 0x1F;
  v4.i8[5] = (v3 >> 18) & 0x1F;
  v4.i8[6] = (v3 >> 12) & 0x1F;
  v4.i8[7] = (v3 >> 6) & 0x1F;
  v5 = vmovl_u8(v4);
  v6 = vmovl_high_u16(v5);
  v7.i64[0] = v6.u32[0];
  v7.i64[1] = v6.u32[1];
  v8 = v7;
  v9 = vmovl_u16(*(uint16x4_t *)v5.i8);
  v7.i64[0] = v9.u32[0];
  v7.i64[1] = v9.u32[1];
  v10 = (uint64x2_t)vdupq_n_s64(0xE4FE7F3uLL);
  result = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v10, (uint64x2_t)vnegq_s64(v7)), (int32x4_t)vshlq_u64(v10, vsubw_high_u32((uint64x2_t)0, v9))), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v10, (uint64x2_t)vnegq_s64(v8)), (int32x4_t)vshlq_u64(v10, vsubw_high_u32((uint64x2_t)0, v6))))), (int8x8_t)0x101010101010101);
  *a2 = result;
  return result;
}

double *Comp_Track_velLOS(double a1, double a2, double *result, double *a4)
{
  double v9;
  double v10;

  if (fabs(a1) > 0.0001 || fabs(a2) > 0.0001)
  {
    v10 = 57.2957795 / (a1 * a1 + a2 * a2);
    *a4 = v10 * (result[3] * a1 - *result * a2);
    a4[1] = v10 * (result[4] * a1 - result[1] * a2);
    v9 = v10 * -(result[2] * a2);
  }
  else
  {
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)a4 = _Q0;
    v9 = 1.0;
  }
  a4[2] = v9;
  return result;
}

uint64_t GN_ABDS_Set_CNAV_Eph_El(unsigned __int8 *a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  char v32;
  int v33;
  __int16 v34;
  unsigned __int8 v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  __int16 v55;
  int v56;

  if (!Is_GN_API_Set_Allowed("GN_ABDS_Set_CNAV_Eph_El"))
    return 0;
  if (g_Logging_Cfg < 5)
    EvLog_d("GN_ABDS_Set_CNAV_Eph_El: ", *a1);
  else
    EvLog_ABDS_CNAV_Eph_El(a1);
  v2 = *a1;
  if ((v2 - 64) <= 0xFFFFFFC0)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: SVid = %d <%d or >%d, Out of range!");
    return 0;
  }
  v3 = a1[1];
  if (v3 >= 2)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: SatH1 = %d >1, Out of range!");
    return 0;
  }
  v4 = a1[2];
  if (v4 >= 4)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: SV_type = %d >3, Out of range!");
    return 0;
  }
  v5 = a1[3];
  if (v5 >= 7)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: Fit_hours = %d >6, Out of range!");
    return 0;
  }
  v6 = *((_DWORD *)a1 + 1);
  if (v6 >> 7 >= 0x627)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: sSOW = %d >201599, Out of range!");
    return 0;
  }
  v7 = *((unsigned __int16 *)a1 + 4);
  if (v7 >= 0x2000)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: Week = %d >=8191, Out of range!");
    return 0;
  }
  v8 = *((unsigned __int16 *)a1 + 5);
  if (v8 >= 0x83B)
    goto LABEL_18;
  v9 = *((unsigned __int16 *)a1 + 6);
  if (v9 >= 0x83B)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: toc = %d >2106, Out of range!");
    return 0;
  }
  v12 = *((unsigned __int16 *)a1 + 7);
  if (v12 >= 0x83B)
  {
LABEL_18:
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: toe = %d >2106, Out of range!");
    return 0;
  }
  v13 = *((_DWORD *)a1 + 4);
  if ((v13 - 0x2000000) >> 26 != 63)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: delta_A = %d <-2^25 or >=2^25, Out of range!");
    return 0;
  }
  v14 = *((_DWORD *)a1 + 5);
  if ((v14 - 0x1000000) >> 25 != 127)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: A_dot = %d <-2^24 or >=2^24, Out of range!");
    return 0;
  }
  v15 = *((_DWORD *)a1 + 6);
  if ((v15 - 0x2000000) >> 26 != 63)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: dN = %d <-2^25 or >=2^25, Out of range!");
    return 0;
  }
  v16 = *((_DWORD *)a1 + 7);
  if ((v16 - 0x400000) >> 23 != 511)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: dN_dot = %d <-2^22 or >=2^22, Out of range!");
    return 0;
  }
  v17 = *((_QWORD *)a1 + 4);
  if ((unint64_t)(v17 - 0x100000000) <= 0xFFFFFFFDFFFFFFFFLL)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: M0 = %d <-2^32 or >=2^32, Out of range!");
    return 0;
  }
  v18 = *((_QWORD *)a1 + 5);
  if (v18 >> 33)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: e = %d >=2^33, Out of range!");
    return 0;
  }
  v19 = (double)v18 * 5.82076609e-11;
  if (v19 < 0.0)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: e = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v19 > dbl_24BC094D0[(v2 - 6) < 0x35])
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: e = %g > %g, Unrealistic value!");
    return 0;
  }
  v20 = *((_QWORD *)a1 + 6);
  if ((unint64_t)(v20 - 0x100000000) <= 0xFFFFFFFDFFFFFFFFLL)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: w = %d <-2^32 or >=2^32, Out of range!");
    return 0;
  }
  v21 = *((_QWORD *)a1 + 7);
  if ((unint64_t)(v21 - 0x100000000) <= 0xFFFFFFFDFFFFFFFFLL)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: Omega0 = %d <-2^32 or >=2^32, Out of range!");
    return 0;
  }
  v22 = *((_QWORD *)a1 + 8);
  if ((unint64_t)(v22 - 0x100000000) <= 0xFFFFFFFDFFFFFFFFLL)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: i0 = %d <-2^32 or >=2^32, Out of range!");
    return 0;
  }
  v23 = *((_DWORD *)a1 + 18);
  if ((v23 - 0x40000) <= 0xFFF7FFFF)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: Omega_dot = %d <-2^18 or >=2^18, Out of range!");
    return 0;
  }
  v24 = (double)v23 * 1.78578867e-13;
  if (v24 < -0.00000198862815)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: Omega_dot = %e < %e, Unrealistic value!");
    return 0;
  }
  if (v24 > 0.000000314159265)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: Omega_dot = %e > %e, Unrealistic value!");
    return 0;
  }
  v25 = *((__int16 *)a1 + 38);
  if (((v25 - 0x4000) & 0x8000) == 0)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: i_dot = %d <-2^14 or >=2^14, Out of range!");
    return 0;
  }
  v26 = *((_DWORD *)a1 + 21);
  if ((v26 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: Crs = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  v27 = *((_DWORD *)a1 + 22);
  if ((v27 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: Crc = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  v28 = *((_DWORD *)a1 + 23);
  if ((v28 - 0x100000) >> 21 != 2047)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: Cus = %d <-2^20 or >=2^20, Out of range!");
    return 0;
  }
  v29 = *((_DWORD *)a1 + 24);
  if ((v29 - 0x100000) >> 21 != 2047)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: Cuc = %d <-2^20 or >=2^20, Out of range!");
    return 0;
  }
  v30 = *((_DWORD *)a1 + 25);
  if ((v30 - 0x1000000) >> 25 != 127)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: af0 = %d <-2^24 or >=2^24, Out of range!");
    return 0;
  }
  v56 = *((_DWORD *)a1 + 26);
  if ((v56 - 0x200000) >> 22 != 1023)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: af1 = %d <-2^21 or >=2^21, Out of range!");
    return 0;
  }
  v55 = *((_WORD *)a1 + 54);
  if ((unsigned __int16)((unsigned __int16)(v55 - 1024) >> 11) <= 0x1Eu)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: af2 = %d <-2^10 or >=2^10, Out of range!");
    return 0;
  }
  v54 = a1[112];
  if (v54 >= 0x20)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: SISA_Ocb = %d >31, Out of range!");
    return 0;
  }
  v53 = a1[113];
  if (v53 >= 8)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: SISA_Oc1 = %d >7, Out of range!");
    return 0;
  }
  v52 = a1[114];
  if (v52 >= 8)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: SISA_Oc2 = %d >7, Out of range!");
    return 0;
  }
  v51 = a1[115];
  if (v51 >= 0x20)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: SISA_Oce = %d >31, Out of range!");
    return 0;
  }
  v50 = *((_WORD *)a1 + 58);
  if ((unsigned __int16)((unsigned __int16)(v50 - 1024) >> 11) <= 0x1Eu)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: TGD_B1C_p = %d <-2^10 or >=2^10, Out of range!");
    return 0;
  }
  v49 = *((_WORD *)a1 + 59);
  if ((unsigned __int16)((unsigned __int16)(v49 - 1024) >> 11) <= 0x1Eu)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: TGD_B2a_p = %d <-2^10 or >=2^10, Out of range!");
    return 0;
  }
  v48 = *((_WORD *)a1 + 60);
  if ((unsigned __int16)((unsigned __int16)(v48 - 1024) >> 11) <= 0x1Eu)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: ISC_B1C_d = %d <-2^10 or >=2^10, Out of range!");
    return 0;
  }
  v47 = *((_WORD *)a1 + 61);
  if ((unsigned __int16)((unsigned __int16)(v47 - 1024) >> 11) <= 0x1Eu)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: ISC_B2a_d = %d <-2^10 or >=2^10, Out of range!");
    return 0;
  }
  v46 = a1[124];
  if (v46 >= 2)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: dif_B1C = %d >1, Out of range!");
    return 0;
  }
  v45 = a1[125];
  if (v45 >= 2)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: sif_B1C = %d >1, Out of range!");
    return 0;
  }
  v44 = a1[126];
  if (v44 >= 2)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: aif_B1C = %d >1, Out of range!");
    return 0;
  }
  v43 = a1[127];
  if (v43 >= 2)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: dif_B2a = %d >1, Out of range!");
    return 0;
  }
  v42 = a1[128];
  if (v42 >= 2)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: sif_B2a = %d >1, Out of range!");
    return 0;
  }
  v41 = a1[129];
  if (v41 >= 2)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: aif_B2a = %d >1, Out of range!");
    return 0;
  }
  v40 = a1[130];
  if ((v40 - 16) <= 0xDFu)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: URAI = %d <-16 or >15, Out of range!");
    return 0;
  }
  v38 = v2 - 1;
  v39 = p_NA;
  v31 = p_NA + 152 * ((int)v2 - 1);
  *(_BYTE *)(v31 + 10120) = v2;
  *(_BYTE *)(v31 + 10121) = v3;
  *(_BYTE *)(v31 + 10122) = v4;
  if (v5 >= 4)
    v32 = 4;
  else
    v32 = v5;
  *(_BYTE *)(v31 + 10123) = v32;
  *(_DWORD *)(v31 + 10124) = v6;
  *(_WORD *)(v31 + 10128) = v7;
  *(_DWORD *)(v31 + 10132) = v8;
  *(_DWORD *)(v31 + 10136) = v9;
  *(_DWORD *)(v31 + 10140) = v12;
  *(_DWORD *)(v31 + 10144) = v13;
  *(_DWORD *)(v31 + 10148) = v14;
  *(_DWORD *)(v31 + 10152) = v15;
  *(_DWORD *)(v31 + 10156) = v16;
  *(_QWORD *)(v31 + 10160) = v17;
  *(_QWORD *)(v31 + 10168) = v18;
  *(_QWORD *)(v31 + 10176) = v20;
  *(_QWORD *)(v31 + 10184) = v21;
  *(_QWORD *)(v31 + 10192) = v22;
  *(_DWORD *)(v31 + 10200) = v23;
  *(_WORD *)(v31 + 10204) = v25;
  *(_DWORD *)(v31 + 10206) = *(_DWORD *)(a1 + 78);
  *(_DWORD *)(v31 + 10212) = v26;
  *(_DWORD *)(v31 + 10216) = v27;
  *(_DWORD *)(v31 + 10220) = v28;
  *(_DWORD *)(v31 + 10224) = v29;
  *(_DWORD *)(v31 + 10228) = v30;
  *(_DWORD *)(v31 + 10232) = v56;
  if (a1[132])
    v33 = 5;
  else
    v33 = 3;
  v34 = *((_WORD *)a1 + 55);
  v35 = a1[131];
  *(_DWORD *)(v31 + 10116) = v33;
  *(_WORD *)(v31 + 10236) = v55;
  *(_WORD *)(v31 + 10238) = v34;
  *(_BYTE *)(v31 + 10240) = v54;
  *(_BYTE *)(v31 + 10241) = v53;
  *(_BYTE *)(v31 + 10242) = v52;
  *(_BYTE *)(v31 + 10243) = v51;
  *(_WORD *)(v31 + 10244) = v50;
  *(_WORD *)(v31 + 10246) = v49;
  *(_WORD *)(v31 + 10248) = v48;
  *(_WORD *)(v31 + 10250) = v47;
  *(_BYTE *)(v31 + 10252) = v46;
  *(_BYTE *)(v31 + 10253) = v45;
  *(_BYTE *)(v31 + 10254) = v44;
  *(_BYTE *)(v31 + 10255) = v43;
  *(_BYTE *)(v31 + 10256) = v42;
  *(_BYTE *)(v31 + 10257) = v41;
  *(_BYTE *)(v31 + 10258) = v40;
  *(_BYTE *)(v31 + 10259) = v35;
  *(_BYTE *)(v39 + v38 + 221) = 1;
  v36 = *(_QWORD *)(p_api + 48);
  if (*(_BYTE *)(v36 + 16) && *(int *)v36 >= 3)
    v37 = (int)*(double *)(v36 + 32) + 604800 * *(__int16 *)(v36 + 28);
  else
    v37 = 0;
  *(_DWORD *)(v31 + 10112) = v37;
  v10 = 1;
  Debug_Log_BDS_Eph(1, v31 + 10112);
  return v10;
}

uint64_t GN_ABDS_Set_Alm_El(unsigned __int8 *a1)
{
  uint64_t v2;
  __int16 v3;
  __int16 v4;
  double v5;
  double v6;
  unsigned int v7;
  double v8;
  unsigned int v9;
  double v10;
  int v11;
  int v12;
  double v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  int *v25;
  int v26;

  if (!Is_GN_API_Set_Allowed("GN_ABDS_Set_Alm"))
    return 0;
  EvLog_d("GN_ABDS_Set_Alm: ", a1[1]);
  v2 = a1[1];
  if ((v2 - 64) <= 0xFFFFFFC0)
  {
    EvCrt_v("GN_ABDS_Set_Alm: SVid = %d <%d or >%d, Out of range!");
    return 0;
  }
  v3 = *((_WORD *)a1 + 15);
  if ((unsigned __int16)((unsigned __int16)(v3 - 1024) >> 11) <= 0x1Eu)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: af0 = %d <-2^10 or >=2^10, Out of range!");
    return 0;
  }
  v4 = *((_WORD *)a1 + 16);
  if ((unsigned __int16)((unsigned __int16)(v4 - 1024) >> 11) <= 0x1Eu)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: af1 = %d <-2^10 or >=2^10, Out of range!");
    return 0;
  }
  v5 = dbl_24BC094D0[(v2 - 6) < 0x35];
  if ((v2 - 59) >= 0xFFFFFFCB)
    v5 = 0.1;
  v6 = 7000.0;
  if ((v2 - 59) < 0xFFFFFFCB)
    v6 = dbl_24BC094E0[(v2 - 6) < 0x35];
  v7 = *((_DWORD *)a1 + 1);
  v8 = (double)v7 * 0.00048828125;
  if (v8 < dbl_24BC094F0[(v2 - 59) < 0xFFFFFFCB])
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: sqrtA = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v8 > v6)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: sqrtA = %g > %g, Unrealistic value!");
    return 0;
  }
  v9 = *((_DWORD *)a1 + 2);
  v10 = (double)v9 * 0.000000476837158;
  if (v10 < 0.0)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: e = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v10 > v5)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: e = %g > %g, Unrealistic value!");
    return 0;
  }
  v11 = *((_DWORD *)a1 + 5);
  if ((v11 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: Omega0 = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  v12 = *((_DWORD *)a1 + 6);
  v13 = (double)v12 * 1.14290475e-11;
  if (v13 < -0.00000198862815)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: OmegaDot = %e < %e, Unrealistic value!");
    return 0;
  }
  if (v13 > 0.000000314159265)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: OmegaDot = %e > %e, Unrealistic value!");
    return 0;
  }
  v14 = *((_DWORD *)a1 + 3);
  if ((v14 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: w = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  v15 = *((_DWORD *)a1 + 4);
  if ((v15 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: M0 = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  v16 = *((unsigned __int16 *)a1 + 17);
  if (v16 == 0xFFFF)
  {
    if (v2 <= 0x1E)
    {
      EvCrt_v("GN_ABDS_Set_Alm: FAILED: SVHealth Unknown for SV %d in range 1..30, Out of range!");
      return 0;
    }
  }
  else if (v16 >= 0x200)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: SVHealth = %x > 0x1FF or < 0xFFFF, Out of range!");
    return 0;
  }
  v19 = v2 - 1;
  v20 = p_NA;
  v21 = p_NA + 44 * ((int)v2 - 1) + 19688;
  *(_WORD *)(v21 + 8) = *a1;
  *(_BYTE *)(v21 + 10) = v2;
  *(_BYTE *)(v21 + 11) = a1[2];
  *(_DWORD *)(v21 + 12) = v7;
  *(_DWORD *)(v21 + 16) = v9;
  *(_DWORD *)(v21 + 20) = v14;
  *(_DWORD *)(v21 + 24) = v15;
  *(_DWORD *)(v21 + 28) = v11;
  *(_DWORD *)(v21 + 32) = v12;
  *(_WORD *)(v21 + 36) = *((_WORD *)a1 + 14);
  *(_WORD *)(v21 + 38) = v3;
  *(_WORD *)(v21 + 40) = v4;
  v22 = v16 != 0xFFFF && (int)Decode_BDS_Alm_Health_Sts(v16) > 3;
  *(_BYTE *)(v20 + 44 * (int)v19 + 19730) = v22;
  *(_BYTE *)(v20 + v19 + 284) = 1;
  v23 = *(_QWORD *)(p_api + 48);
  if (*(_BYTE *)(v23 + 16) && *(int *)v23 >= 3)
    v24 = (int)*(double *)(v23 + 32) + 604800 * *(__int16 *)(v23 + 28);
  else
    v24 = 0;
  v25 = (int *)(v20 + 44 * (int)v19 + 19688);
  if (a1[36])
    v26 = 5;
  else
    v26 = 3;
  *v25 = v24;
  *(_DWORD *)(v20 + 44 * (int)v19 + 19692) = v26;
  v17 = 1;
  Debug_Log_BDS_Alm(1, (uint64_t)v25);
  return v17;
}

uint64_t GN_ABDS_Set_BGTO(int a1, unsigned __int16 *a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v9;
  int v10;
  unsigned __int16 v11;
  int v12;
  char v13;
  unsigned __int16 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  result = Is_GN_API_Set_Allowed("GN_ABDS_Set_BGTO");
  if ((_DWORD)result)
  {
    v6 = *((_DWORD *)a2 + 2);
    if ((v6 - 0x10000) <= 0xFFFDFFFF)
    {
      EvCrt_v("GN_ABDS_Set_BGTO: FAILED: A0 = %d < -2^16 or >= 2^16, Out of range!");
      return 0;
    }
    v7 = (__int16)a2[6];
    if (v7 != 0x7FFF && (unsigned __int16)((unsigned __int16)(a2[6] - 0x2000) >> 14) <= 2u)
    {
      EvCrt_v("GN_ABDS_Set_BGTO: FAILED: A1 = %d < -2^13 or >= 2^13, Out of range!");
      return 0;
    }
    v9 = *(_QWORD *)(p_api + 48);
    v10 = *(unsigned __int8 *)(v9 + 16);
    if (*(_BYTE *)(v9 + 16))
    {
      if (*(int *)v9 < 3)
        v10 = 0;
      else
        v10 = (int)*(double *)(v9 + 32) + 604800 * *(__int16 *)(v9 + 28);
    }
    v11 = *a2;
    v12 = *((_DWORD *)a2 + 1);
    v13 = *((_BYTE *)a2 + 14);
    v14 = a2[8];
    if (*((_BYTE *)a2 + 18))
      v15 = 5;
    else
      v15 = 3;
    v16 = p_NA;
    v17 = p_NA + 10060;
    if (a1)
    {
      *(_DWORD *)(p_NA + 10052) = v10;
      *(_DWORD *)(v16 + 10056) = v15;
      *(_WORD *)v17 = v11;
      *(_DWORD *)(v16 + 10064) = v12;
      *(_DWORD *)(v16 + 10068) = v6;
      *(_WORD *)(v17 + 12) = v7;
      *(_BYTE *)(v17 + 14) = v13;
      *(_WORD *)(v17 + 16) = v14;
      *(_BYTE *)(v16 + 219) = 1;
    }
    else
    {
      *(_DWORD *)(p_NA + 10080) = v10;
      *(_DWORD *)(v16 + 10084) = v15;
      *(_WORD *)(v17 + 28) = v11;
      *(_DWORD *)(v16 + 10092) = v12;
      *(_DWORD *)(v16 + 10096) = v6;
      *(_WORD *)(v17 + 40) = v7;
      *(_BYTE *)(v17 + 42) = v13;
      *(_WORD *)(v17 + 44) = v14;
      *(_BYTE *)(v16 + 220) = 1;
    }
    EvLog_nd("GN_ABDS_Set_BGTO: ", 7, v5, *a2, *((unsigned int *)a2 + 1), *((unsigned int *)a2 + 2), (__int16)a2[6], *((char *)a2 + 14), (__int16)a2[8], *((unsigned __int8 *)a2 + 18), v18);
    return 1;
  }
  return result;
}

uint64_t stphiu(uint64_t result, unsigned int a2, const double *a3, const unsigned __int8 *a4, int a5, const unsigned __int8 *a6, const unsigned __int8 *a7)
{
  int v7;
  uint64_t v8;
  const double *v9;
  const unsigned __int8 *v10;
  const unsigned __int8 *v11;
  const unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  double v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  if (a2 >= 2 && a5)
  {
    v7 = 0;
    v8 = result - 8;
    v9 = a3 - 1;
    v10 = a4 - 1;
    v11 = a6 - 1;
    v12 = a7 - 1;
    if ((a5 + 1) > 2)
      v13 = (a5 + 1);
    else
      v13 = 2;
    v14 = 1;
    do
    {
      v15 = v12[v14];
      if (v12[v14])
      {
        result = v11[v14];
        v16 = 1;
        v17 = v7;
        do
        {
          v18 = v9[++v17];
          v19 = v10[v17];
          v20 = (v19 - 1) * v19;
          v21 = result + (v20 >> 1);
          *(double *)(v8 + 8 * v21) = v18 + *(double *)(v8 + 8 * v21);
          if (v19 < a2)
          {
            v22 = (v20 >> 1) + v19;
            do
            {
              v21 += v19;
              v22 += v19;
              *(double *)(v8 + 8 * v21) = *(double *)(v8 + 8 * v21) + v18 * *(double *)(v8 + 8 * v22);
              ++v19;
            }
            while (a2 != v19);
          }
        }
        while (v16++ != v15);
      }
      v7 += v15;
      ++v14;
    }
    while (v14 != v13);
  }
  return result;
}

uint64_t Debug_Log_Platform_Calibration_GLONASS_Group_Delays(uint64_t result)
{
  uint64_t v1;
  char *v2;
  char v3;
  uint64_t v4;
  uint64_t i;
  _BYTE *v6;
  double v7;
  double v8;
  double v9;
  unsigned int v10;
  _BYTE *v11;

  if (g_Logging_Cfg)
  {
    v1 = result;
    v2 = (char *)g_CB_GDbg;
    v3 = 36;
    v4 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v2 + 1);
      *v2 = v3;
      v2 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v2 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v3 = str_9[v4++];
    }
    while (v4 != 6);
    for (i = 0; i != 112; i += 8)
    {
      v6 = (_BYTE *)g_CB_GDbg++;
      *v6 = 32;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
        g_CB_GDbg = qword_257A47950;
      v7 = *(double *)(v1 + i) * 1000.0;
      if (v7 <= 0.0)
        v8 = -0.5;
      else
        v8 = 0.5;
      v9 = v7 + v8;
      if (v9 <= 2147483650.0)
      {
        if (v9 >= -2147483650.0)
          v10 = (int)v9;
        else
          v10 = 0x80000000;
      }
      else
      {
        v10 = 0x7FFFFFFF;
      }
      sprintf_4f((uint64_t)&g_CB_GDbg, v10, 4);
    }
    v11 = (_BYTE *)g_CB_GDbg++;
    *v11 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_Platform_Calibration_L5_Group_Delay(double a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  unsigned int v7;
  _BYTE *v8;
  uint64_t result;

  if (g_Logging_Cfg)
  {
    v1 = (char *)g_CB_GDbg;
    v2 = 36;
    v3 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v1 + 1);
      *v1 = v2;
      v1 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v1 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v2 = str_1_2[v3++];
    }
    while (v3 != 7);
    v4 = a1 * 1000.0;
    v5 = -0.5;
    if (v4 > 0.0)
      v5 = 0.5;
    v6 = v4 + v5;
    if (v6 <= 2147483650.0)
    {
      if (v6 >= -2147483650.0)
        v7 = (int)v6;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    sprintf_4f((uint64_t)&g_CB_GDbg, v7, 4);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned __int16 *Debug_Log_ApxTime(unsigned __int16 *result)
{
  unsigned __int16 *v1;
  char *v2;
  char v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  _BYTE *v13;
  unsigned int v14;
  _BYTE *v15;
  unsigned int v16;
  _BYTE *v17;
  unsigned int v18;
  _BYTE *v19;
  unsigned int v20;
  _BYTE *v21;
  _BYTE *v22;

  if (g_Logging_Cfg)
  {
    v1 = result;
    v2 = (char *)g_CB_GDbg;
    v3 = 36;
    v4 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v2 + 1);
      *v2 = v3;
      v2 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v2 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v3 = str_2_2[v4++];
    }
    while (v4 != 6);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v2 + 1);
    *v2 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v5);
    v6 = v1[1];
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v6);
    v8 = v1[2];
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v8);
    v10 = v1[3];
    v11 = (_BYTE *)g_CB_GDbg++;
    *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v10);
    v12 = v1[4];
    v13 = (_BYTE *)g_CB_GDbg++;
    *v13 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v12);
    v14 = v1[5];
    v15 = (_BYTE *)g_CB_GDbg++;
    *v15 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v14);
    v16 = v1[6];
    v17 = (_BYTE *)g_CB_GDbg++;
    *v17 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v16);
    v18 = *((_DWORD *)v1 + 4);
    v19 = (_BYTE *)g_CB_GDbg++;
    *v19 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v18);
    v20 = *((_DWORD *)v1 + 5);
    v21 = (_BYTE *)g_CB_GDbg++;
    *v21 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v20);
    v22 = (_BYTE *)g_CB_GDbg++;
    *v22 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return (unsigned __int16 *)GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_NonVol(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  char *v11;
  unint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  signed int v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  BOOL *v25;
  signed int i;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  BOOL *v30;
  signed int v31;
  unsigned int v32;
  uint64_t v33;
  char *v34;
  BOOL *v35;
  signed int j;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  BOOL *v40;
  unsigned int v41;
  unsigned int k;
  unsigned int v43;
  _BYTE *v44;
  unsigned int v45;
  _BYTE *v46;
  unsigned int v47;
  _BYTE *v48;
  unsigned int v49;
  _BYTE *v50;
  unsigned int v51;
  _BYTE *v52;
  unsigned int v53;
  _BYTE *v54;
  _BYTE *v55;
  unsigned __int8 v56;
  unsigned int v57;
  unsigned __int8 v58;
  unsigned int v59;
  unsigned int v60;
  _BYTE *v61;
  unsigned int v62;
  _BYTE *v63;
  unsigned int v64;
  _BYTE *v65;
  unsigned int v66;
  _BYTE *v67;
  unsigned int v68;
  _BYTE *v69;
  _BYTE *v70;
  unsigned __int8 v71;
  unsigned int v72;
  unsigned __int8 v73;
  unsigned int v74;
  unsigned __int8 v75;
  unsigned int v76;
  unsigned __int8 v77;
  unsigned int v78;
  unsigned int v79;
  _BYTE *v80;
  unsigned int v81;
  _BYTE *v82;
  unsigned int v83;
  _BYTE *v84;
  unsigned int v85;
  _BYTE *v86;
  unsigned int v87;
  _BYTE *v88;
  unsigned int v89;
  _BYTE *v90;
  _BYTE *v91;
  unsigned int v92;
  unsigned int v93;
  _BYTE *v95;
  _BYTE *v96;
  unsigned int v97;
  _BYTE *v98;
  unsigned int v99;
  _BYTE *v100;
  unsigned int v101;
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  double v105;
  unsigned int v106;
  char v107;
  char *v108;
  _BYTE *v109;
  _BYTE *v110;
  _BOOL4 Inhib_EE;
  int v112;
  uint64_t v113;
  unsigned int v114;
  char *v115;
  char v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char v147;
  uint64_t v148;
  char *v149;
  char v150;
  uint64_t v151;
  char *v152;
  char v153;
  uint64_t v154;
  char *v155;
  char v156;
  uint64_t v157;
  char *v158;
  char v159;
  uint64_t v160;
  char *v161;
  char v162;
  uint64_t v163;
  char *v164;
  char v165;
  _BYTE *v166;
  uint64_t v167;
  double v168;
  unsigned int v169;
  char v170;
  char *v171;
  _BYTE *v172;
  double v173;
  double v174;
  double v175;
  unsigned int v176;
  _BYTE *v177;
  __int128 v178;
  _QWORD v179[3];
  __int128 v180;
  _OWORD v181[9];
  __int128 v182;
  __int128 v183;
  _BYTE v184[26];
  BOOL v185[32];
  BOOL v186[48];
  BOOL v187[32];
  __int16 v188;
  BOOL v189[74];
  int v190;
  char v191;
  uint64_t v192;

  v192 = *MEMORY[0x24BDAC8D0];
  if (g_Logging_Cfg)
  {
    v2 = result;
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 4);
    v5 = *(_DWORD *)(a2 + 33416);
    v6 = *(_QWORD *)(a2 + 33192);
    v8 = *(_DWORD *)(a2 + 33200);
    v7 = *(_DWORD *)(a2 + 33204);
    v9 = *(_DWORD *)(a2 + 33208);
    v10 = 36;
    v11 = (char *)g_CB_GDbg;
    do
    {
      g_CB_GDbg = (uint64_t)(v11 + 1);
      *v11 = v10;
      v11 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v11 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v10 = aNg[++v3];
    }
    while (v3 != 4);
    v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v13 = (_BYTE *)g_CB_GDbg++;
    *v13 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v12);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v4);
    v15 = (_BYTE *)g_CB_GDbg++;
    *v15 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v5);
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v6);
    v17 = (_BYTE *)g_CB_GDbg++;
    *v17 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v8);
    v18 = (_BYTE *)g_CB_GDbg++;
    *v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v7);
    v19 = (_BYTE *)g_CB_GDbg++;
    *v19 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v9);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    GNB_Debug_Flush_Check();
    if ((v2 & 1) != 0)
    {
      v190 = 0;
      v191 = 0;
      memset(&v189[8], 0, 65);
      v188 = 0;
      memset(v187, 0, sizeof(v187));
      v180 = 0u;
      memset(v181, 0, 99);
      memset(v186, 0, 44);
      memset(v185, 0, sizeof(v185));
      memset(v179, 0, sizeof(v179));
      v21 = 1;
      v178 = 0uLL;
      do
      {
        if (Core_Load_GPS_Eph(v21, (uint64_t)&v180) && (int)v180 >= 1)
        {
          *(_QWORD *)v189 = v180;
          v189[8] = BYTE8(v180);
          *(_WORD *)&v189[9] = *(_WORD *)((char *)&v180 + 9);
          v22 = 21;
          v23 = 11;
          v24 = (char *)v181 + 8;
          do
          {
            v25 = &v189[v23];
            *v25 = *v24;
            *(_WORD *)(v25 + 1) = *(_WORD *)(v24 + 1);
            v24 += 4;
            --v22;
            v23 += 3;
          }
          while (v22 > 1);
          *(_WORD *)&v189[71] = WORD6(v181[5]);
          v190 = *(_DWORD *)((char *)&v181[5] + 14);
          v191 = BYTE2(v181[6]);
          Debug_Log_GPS_Eph(0, v21, (uint64_t)v189);
        }
        ++v21;
      }
      while (v21 != 33);
      for (i = 1; i != 33; ++i)
      {
        if (Core_Load_GPS_Alm(i, v186) && *(int *)v186 >= 1)
        {
          *(_DWORD *)v187 = *(_DWORD *)v186;
          *(_DWORD *)&v187[4] = *(_DWORD *)&v186[4];
          *(_WORD *)&v187[8] = *(_WORD *)&v186[10];
          v27 = 9;
          v28 = 10;
          v29 = (unint64_t)v186 | 0xC;
          do
          {
            v30 = &v187[v28];
            *v30 = *(_BYTE *)v29;
            *(_WORD *)(v30 + 1) = *(_WORD *)(v29 + 1);
            v29 += 4;
            --v27;
            v28 += 3;
          }
          while (v27 > 1);
          Debug_Log_GPS_Alm(0, i, (uint64_t)v187);
        }
      }
      if (Core_Load_GPS_Health(v185))
        Debug_Log_GNSS_Health(1, (unsigned __int8 *)v185);
      if (Core_Load_GPS_UTC((uint64_t)v179) && SLODWORD(v179[0]) >= 1)
        Debug_Log_GPS_UTC(0, (uint64_t)v179);
      if (Core_Load_GPS_Klob(&v178) && (int)v178 >= 1)
        Debug_Log_GPS_Klob(0, (uint64_t)&v178);
      v190 = 0;
      v191 = 0;
      memset(&v189[8], 0, 65);
      v188 = 0;
      memset(v187, 0, sizeof(v187));
      v180 = 0u;
      memset(v181, 0, 99);
      memset(v186, 0, 44);
      *(_WORD *)&v185[8] = 0;
      v31 = 193;
      *(_QWORD *)v185 = 0;
      do
      {
        if (Core_Load_QZSS_Eph(v31, (uint64_t)&v180) && (int)v180 >= 1)
        {
          *(_QWORD *)v189 = v180;
          v189[8] = BYTE8(v180);
          *(_WORD *)&v189[9] = *(_WORD *)((char *)&v180 + 9);
          v32 = 21;
          v33 = 11;
          v34 = (char *)v181 + 8;
          do
          {
            v35 = &v189[v33];
            *v35 = *v34;
            *(_WORD *)(v35 + 1) = *(_WORD *)(v34 + 1);
            v34 += 4;
            --v32;
            v33 += 3;
          }
          while (v32 > 1);
          *(_WORD *)&v189[71] = WORD6(v181[5]);
          v190 = *(_DWORD *)((char *)&v181[5] + 14);
          v191 = BYTE2(v181[6]);
          Debug_Log_GPS_Eph(0, v31, (uint64_t)v189);
        }
        ++v31;
      }
      while (v31 != 203);
      for (j = 193; j != 203; ++j)
      {
        if (Core_Load_QZSS_Alm(j, v186) && *(int *)v186 >= 1)
        {
          *(_DWORD *)v187 = *(_DWORD *)v186;
          *(_DWORD *)&v187[4] = *(_DWORD *)&v186[4];
          *(_WORD *)&v187[8] = *(_WORD *)&v186[10];
          v37 = 9;
          v38 = 10;
          v39 = (unint64_t)v186 | 0xC;
          do
          {
            v40 = &v187[v38];
            *v40 = *(_BYTE *)v39;
            *(_WORD *)(v40 + 1) = *(_WORD *)(v39 + 1);
            v39 += 4;
            --v37;
            v38 += 3;
          }
          while (v37 > 1);
          Debug_Log_GPS_Alm(0, j, (uint64_t)v187);
        }
      }
      if (Core_Load_QZSS_Health(v185))
        Debug_Log_GNSS_Health(3, (unsigned __int8 *)v185);
      memset(v181, 0, 46);
      v180 = 0u;
      *(_QWORD *)v189 = 0;
      *(_WORD *)&v189[8] = 0;
      memset(&v189[12], 0, 24);
      memset(v187, 0, 24);
      *(_QWORD *)v186 = 0;
      *(_WORD *)&v186[8] = 0;
      *(_DWORD *)&v186[12] = 0;
      v186[16] = 0;
      *(_DWORD *)&v186[20] = 0;
      v41 = 1;
      v186[24] = 0;
      do
      {
        if (Core_Load_GLON_Eph(v41, &v180) && (int)v180 >= 1)
          Debug_Log_GLO_Eph(0, v41, (uint64_t)&v180);
        ++v41;
      }
      while (v41 != 25);
      for (k = 1; k != 25; ++k)
      {
        if (Core_Load_GLON_Alm(k, (uint64_t)v189) && *(int *)v189 >= 1)
          Debug_Log_GLO_Alm(0, k, (uint64_t)v189);
      }
      if (Core_Load_GLON_Health(v187))
        Debug_Log_GNSS_Health(2, (unsigned __int8 *)v187);
      if (Core_Load_GLON_Clk1(v186))
      {
        v43 = *(_DWORD *)v186;
        if (*(int *)v186 >= 1)
        {
          if (g_Logging_Cfg)
          {
            sprintf_NA_x_header(0, "C-");
            v44 = (_BYTE *)g_CB_GDbg++;
            *v44 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_2d(&g_CB_GDbg, v43);
            v45 = *(unsigned __int16 *)&v186[8];
            v46 = (_BYTE *)g_CB_GDbg++;
            *v46 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_2d(&g_CB_GDbg, v45);
            v47 = *(_DWORD *)&v186[12];
            v48 = (_BYTE *)g_CB_GDbg++;
            *v48 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_2d(&g_CB_GDbg, v47);
            v49 = v186[16];
            v50 = (_BYTE *)g_CB_GDbg++;
            *v50 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_2d(&g_CB_GDbg, v49);
            v51 = *(_DWORD *)&v186[20];
            v52 = (_BYTE *)g_CB_GDbg++;
            *v52 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_2d(&g_CB_GDbg, v51);
            v53 = v186[24];
            v54 = (_BYTE *)g_CB_GDbg++;
            *v54 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_2d(&g_CB_GDbg, v53);
            sprintf_sp1d(&g_CB_GDbg, *(int *)&v186[4]);
            v55 = (_BYTE *)g_CB_GDbg++;
            *v55 = 10;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            GNB_Debug_Flush_Check();
          }
        }
      }
      memset(v181, 0, 72);
      v180 = 0u;
      memset(v189, 0, 35);
      memset(v186, 0, 36);
      *(_QWORD *)&v187[6] = 0;
      v56 = 1;
      *(_QWORD *)v187 = 0;
      do
      {
        v57 = v56;
        if (Core_Load_GAL_Eph(v56, (uint64_t)&v180) && (int)v180 >= 1)
          Debug_Log_GAL_Eph(0, (uint64_t)&v180);
        ++v56;
      }
      while (v57 < 0x24);
      v58 = 1;
      do
      {
        v59 = v58;
        if (Core_Load_GAL_Alm(v58, (uint64_t)v189) && *(int *)v189 >= 1)
          Debug_Log_GAL_Alm(0, (uint64_t)v189);
        ++v58;
      }
      while (v59 < 0x24);
      if (Core_Load_GAL_Health(v186))
        Debug_Log_GNSS_Health(5, (unsigned __int8 *)v186);
      if (Core_Load_GAL_GGTO(v187))
      {
        v60 = *(_DWORD *)v187;
        if (*(int *)v187 >= 1)
        {
          if (g_Logging_Cfg)
          {
            sprintf_NA_x_header(0, "OE");
            v61 = (_BYTE *)g_CB_GDbg++;
            *v61 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_2d(&g_CB_GDbg, v60);
            v62 = *(__int16 *)&v187[8];
            v63 = (_BYTE *)g_CB_GDbg++;
            *v63 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_2d(&g_CB_GDbg, v62);
            v64 = *(__int16 *)&v187[10];
            v65 = (_BYTE *)g_CB_GDbg++;
            *v65 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_2d(&g_CB_GDbg, v64);
            v66 = v187[12];
            v67 = (_BYTE *)g_CB_GDbg++;
            *v67 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_2d(&g_CB_GDbg, v66);
            v68 = v187[13];
            v69 = (_BYTE *)g_CB_GDbg++;
            *v69 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_2d(&g_CB_GDbg, v68);
            sprintf_sp1d(&g_CB_GDbg, *(int *)&v187[4]);
            v70 = (_BYTE *)g_CB_GDbg++;
            *v70 = 10;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            GNB_Debug_Flush_Check();
          }
        }
      }
      v180 = 0uLL;
      LOWORD(v181[0]) = 0;
      memset((char *)v181 + 4, 0, 64);
      *(_OWORD *)((char *)&v181[4] + 2) = 0u;
      memset((char *)&v181[5] + 4, 0, 48);
      memset(v186, 0, 43);
      v71 = 1;
      memset(v189, 0, 63);
      do
      {
        v72 = v71;
        if (Core_Load_BDS_Eph(v71, (uint64_t)&v180) && (int)v180 >= 1)
          Debug_Log_BDS_Eph(0, (uint64_t)&v180);
        ++v71;
      }
      while (v72 < 0x3F);
      v73 = 1;
      do
      {
        v74 = v73;
        if (Core_Load_BDS_Alm(v73, v186) && *(int *)v186 >= 1)
          Debug_Log_BDS_Alm(0, (uint64_t)v186);
        ++v73;
      }
      while (v74 < 0x3F);
      if (Core_Load_BDS_Health(v189))
        Debug_Log_GNSS_Health(4, (unsigned __int8 *)v189);
      *(_QWORD *)v187 = 0;
      *(_WORD *)&v187[8] = 0;
      *(_WORD *)&v187[24] = 0;
      *(_QWORD *)&v187[12] = 0;
      *(_DWORD *)&v187[19] = 0;
      *(_QWORD *)v185 = 0;
      *(_WORD *)&v185[8] = 0;
      *(_WORD *)&v185[24] = 0;
      *(_QWORD *)&v185[12] = 0;
      *(_DWORD *)&v185[19] = 0;
      if (Core_Load_BDS_BGTO(v187, v185))
      {
        if (*(int *)v187 >= 1)
          Debug_Log_BDS_BGTO((uint64_t)v187, 1);
        if (*(int *)v185 >= 1)
          Debug_Log_BDS_BGTO((uint64_t)v185, 2);
      }
      v180 = 0u;
      memset(v181, 0, 60);
      *(_DWORD *)&v189[12] = 0;
      *(_WORD *)&v189[16] = 0;
      *(_DWORD *)&v189[20] = 0;
      *(_WORD *)&v189[24] = 0;
      *(_QWORD *)v189 = 0;
      *(_DWORD *)&v189[7] = 0;
      memset(&v189[28], 0, 21);
      *(_QWORD *)&v187[6] = 0;
      *(_DWORD *)&v186[14] = 0;
      *(_QWORD *)v186 = 0;
      *(_QWORD *)&v186[5] = 0;
      v75 = 1;
      *(_QWORD *)v187 = 0;
      do
      {
        v76 = v75;
        if (Core_Load_NVIC_Eph(v75, &v180) && (int)v180 >= 1)
          Debug_Log_NVC_Eph(0, (uint64_t)&v180);
        ++v75;
      }
      while (v76 < 0xE);
      v77 = 1;
      do
      {
        v78 = v77;
        if (Core_Load_NVIC_Alm(v77, (uint64_t)v189) && *(int *)v189 >= 1)
          Debug_Log_NVC_Alm(0, (uint64_t)v189);
        ++v77;
      }
      while (v78 < 0xE);
      if (Core_Load_NVIC_Health(v187))
        Debug_Log_GNSS_Health(6, (unsigned __int8 *)v187);
      if (Core_Load_NVIC_NGTO((uint64_t)v186))
      {
        v79 = *(_DWORD *)v186;
        if (*(int *)v186 >= 1)
        {
          if (g_Logging_Cfg)
          {
            sprintf_NA_x_header(0, "ON");
            v80 = (_BYTE *)g_CB_GDbg++;
            *v80 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_2d(&g_CB_GDbg, v79);
            v81 = *(__int16 *)&v186[8];
            v82 = (_BYTE *)g_CB_GDbg++;
            *v82 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_2d(&g_CB_GDbg, v81);
            v83 = *(__int16 *)&v186[10];
            v84 = (_BYTE *)g_CB_GDbg++;
            *v84 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_2d(&g_CB_GDbg, v83);
            v85 = v186[12];
            v86 = (_BYTE *)g_CB_GDbg++;
            *v86 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_2d(&g_CB_GDbg, v85);
            v87 = *(unsigned __int16 *)&v186[14];
            v88 = (_BYTE *)g_CB_GDbg++;
            *v88 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_2d(&g_CB_GDbg, v87);
            v89 = *(unsigned __int16 *)&v186[16];
            v90 = (_BYTE *)g_CB_GDbg++;
            *v90 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_2d(&g_CB_GDbg, v89);
            sprintf_sp1d(&g_CB_GDbg, *(int *)&v186[4]);
            v91 = (_BYTE *)g_CB_GDbg++;
            *v91 = 10;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            GNB_Debug_Flush_Check();
          }
        }
      }
      DWORD2(v180) = 0;
      *(_QWORD *)&v180 = 0;
      v92 = 120;
      *(_DWORD *)v189 = 0;
      do
      {
        if (Core_Load_SBAS_Apx(v92, (int *)v189, (int *)&v180))
        {
          v93 = *(_DWORD *)v189;
          if (*(int *)v189 >= 1 && g_Logging_Cfg != 0)
          {
            sprintf_NA_A_header(0, 83);
            v95 = (_BYTE *)g_CB_GDbg++;
            *v95 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_3d(&g_CB_GDbg, v92);
            v96 = (_BYTE *)g_CB_GDbg++;
            *v96 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_10d(&g_CB_GDbg, v93);
            v97 = v180;
            v98 = (_BYTE *)g_CB_GDbg++;
            *v98 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_9d(&g_CB_GDbg, v97);
            v99 = DWORD1(v180);
            v100 = (_BYTE *)g_CB_GDbg++;
            *v100 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_9d(&g_CB_GDbg, v99);
            v101 = DWORD2(v180);
            v102 = (_BYTE *)g_CB_GDbg++;
            *v102 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            sprintf_8d(&g_CB_GDbg, v101);
            v103 = (_BYTE *)g_CB_GDbg++;
            *v103 = 10;
            if (g_CB_GDbg >= (unint64_t)qword_257A47958)
              g_CB_GDbg = qword_257A47950;
            GNB_Debug_Flush_Check();
          }
        }
        ++v92;
      }
      while (v92 != 159);
      *(_DWORD *)v189 = 0;
      *(_QWORD *)&v180 = 0;
      if (Core_Load_Clk_Drift((int *)v189, (double *)&v180) && g_Logging_Cfg)
      {
        v104 = 0;
        v105 = *(double *)&v180;
        v106 = *(_DWORD *)v189;
        v107 = 36;
        v108 = (char *)g_CB_GDbg;
        do
        {
          g_CB_GDbg = (uint64_t)(v108 + 1);
          *v108 = v107;
          v108 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_257A47958)
          {
            v108 = (char *)qword_257A47950;
            g_CB_GDbg = qword_257A47950;
          }
          v107 = aNd[++v104];
        }
        while (v104 != 4);
        g_CB_GDbg = (uint64_t)(v108 + 1);
        *v108 = 32;
        if (g_CB_GDbg >= (unint64_t)qword_257A47958)
          g_CB_GDbg = qword_257A47950;
        sprintf_2d(&g_CB_GDbg, v106);
        v109 = (_BYTE *)g_CB_GDbg++;
        *v109 = 32;
        if (g_CB_GDbg >= (unint64_t)qword_257A47958)
          g_CB_GDbg = qword_257A47950;
        sprintf_11f9(&g_CB_GDbg, v105 * 1000000.0);
        v110 = (_BYTE *)g_CB_GDbg++;
        *v110 = 10;
        if (g_CB_GDbg >= (unint64_t)qword_257A47958)
          g_CB_GDbg = qword_257A47950;
        GNB_Debug_Flush_Check();
      }
      v183 = 0u;
      memset(v184, 0, sizeof(v184));
      v182 = 0u;
      v180 = 0u;
      memset(v181, 0, sizeof(v181));
      if (Core_Load_Not_Brd_SV(0, (uint64_t)&v180))
        Debug_Log_NV_Not_Brd_SV(0, (uint64_t)&v180);
      v183 = 0u;
      memset(v184, 0, sizeof(v184));
      v182 = 0u;
      v180 = 0u;
      memset(v181, 0, sizeof(v181));
      if (Core_Load_Not_Brd_SV(1, (uint64_t)&v180))
        Debug_Log_NV_Not_Brd_SV(1, (uint64_t)&v180);
      *(_QWORD *)v189 = 0;
      v183 = 0u;
      memset(v184, 0, sizeof(v184));
      v182 = 0u;
      v180 = 0u;
      memset(v181, 0, sizeof(v181));
      Inhib_EE = Core_Load_Inhib_EE((BOOL *)&v180, (uint64_t *)v189);
      v112 = g_Logging_Cfg;
      if (Inhib_EE && g_Logging_Cfg)
      {
        v113 = 0;
        v114 = *(_DWORD *)v189;
        v115 = (char *)g_CB_GDbg;
        v116 = 36;
        do
        {
          g_CB_GDbg = (uint64_t)(v115 + 1);
          *v115 = v116;
          v115 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_257A47958)
          {
            v115 = (char *)qword_257A47950;
            g_CB_GDbg = qword_257A47950;
          }
          v116 = aNi[++v113];
        }
        while (v113 != 4);
        v117 = 0;
        v118 = 0;
        v119 = 1;
        do
        {
          if (*((_BYTE *)&v181[-1] + v117))
            v120 = v119;
          else
            v120 = 0;
          v118 |= v120;
          v119 *= 2;
          ++v117;
        }
        while (v117 != 32);
        v121 = 0;
        v122 = 0;
        v123 = 1;
        do
        {
          if (*((_BYTE *)&v181[1] + v121))
            v124 = v123;
          else
            v124 = 0;
          v122 |= v124;
          v123 *= 2;
          ++v121;
        }
        while (v121 != 24);
        v125 = 0;
        v126 = 0;
        v127 = 1;
        do
        {
          if (*((_BYTE *)&v181[8] + v125 + 11))
            v128 = v127;
          else
            v128 = 0;
          v126 |= v128;
          v127 *= 2;
          ++v125;
        }
        while (v125 != 10);
        v129 = 0;
        v130 = 0;
        v131 = 1;
        do
        {
          if (v184[v129 - 13])
            v132 = v131;
          else
            v132 = 0;
          v130 |= v132;
          v131 *= 2;
          ++v129;
        }
        while (v129 != 39);
        v133 = 0;
        v134 = 0;
        v135 = 1;
        do
        {
          if (*((_BYTE *)&v181[4] + v133 + 12))
            v136 = v135;
          else
            v136 = 0;
          v134 |= v136;
          v135 *= 2;
          ++v133;
        }
        while (v133 != 63);
        v137 = 0;
        v138 = 0;
        v139 = 1;
        do
        {
          if (*((_BYTE *)&v181[2] + v137 + 8))
            v140 = v139;
          else
            v140 = 0;
          v138 |= v140;
          v139 *= 2;
          ++v137;
        }
        while (v137 != 36);
        v141 = 0;
        v142 = 0;
        v143 = 1;
        do
        {
          if (*((_BYTE *)&v182 + v141 + 5))
            v144 = v143;
          else
            v144 = 0;
          v142 |= v144;
          v143 *= 2;
          ++v141;
        }
        while (v141 != 14);
        g_CB_GDbg = (uint64_t)(v115 + 1);
        *v115 = 32;
        if (g_CB_GDbg >= (unint64_t)qword_257A47958)
          g_CB_GDbg = qword_257A47950;
        sprintf_2d(&g_CB_GDbg, v114);
        v145 = 0;
        v146 = (char *)g_CB_GDbg;
        v147 = 32;
        do
        {
          g_CB_GDbg = (uint64_t)(v146 + 1);
          *v146 = v147;
          v146 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_257A47958)
          {
            v146 = (char *)qword_257A47950;
            g_CB_GDbg = qword_257A47950;
          }
          v147 = aG[++v145];
        }
        while (v145 != 4);
        sprintf_1X((char **)&g_CB_GDbg, v118);
        v148 = 0;
        v149 = (char *)g_CB_GDbg;
        v150 = 32;
        do
        {
          g_CB_GDbg = (uint64_t)(v149 + 1);
          *v149 = v150;
          v149 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_257A47958)
          {
            v149 = (char *)qword_257A47950;
            g_CB_GDbg = qword_257A47950;
          }
          v150 = aR[++v148];
        }
        while (v148 != 4);
        sprintf_1X((char **)&g_CB_GDbg, v122);
        v151 = 0;
        v152 = (char *)g_CB_GDbg;
        v153 = 32;
        do
        {
          g_CB_GDbg = (uint64_t)(v152 + 1);
          *v152 = v153;
          v152 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_257A47958)
          {
            v152 = (char *)qword_257A47950;
            g_CB_GDbg = qword_257A47950;
          }
          v153 = aQ[++v151];
        }
        while (v151 != 4);
        sprintf_1X((char **)&g_CB_GDbg, v126);
        v154 = 0;
        v155 = (char *)g_CB_GDbg;
        v156 = 32;
        do
        {
          g_CB_GDbg = (uint64_t)(v155 + 1);
          *v155 = v156;
          v155 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_257A47958)
          {
            v155 = (char *)qword_257A47950;
            g_CB_GDbg = qword_257A47950;
          }
          v156 = aS_0[++v154];
        }
        while (v154 != 4);
        sprintf_1X((char **)&g_CB_GDbg, v130);
        v157 = 0;
        v158 = (char *)g_CB_GDbg;
        v159 = 32;
        do
        {
          g_CB_GDbg = (uint64_t)(v158 + 1);
          *v158 = v159;
          v158 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_257A47958)
          {
            v158 = (char *)qword_257A47950;
            g_CB_GDbg = qword_257A47950;
          }
          v159 = aB[++v157];
        }
        while (v157 != 4);
        sprintf_1X((char **)&g_CB_GDbg, v134);
        v160 = 0;
        v161 = (char *)g_CB_GDbg;
        v162 = 32;
        do
        {
          g_CB_GDbg = (uint64_t)(v161 + 1);
          *v161 = v162;
          v161 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_257A47958)
          {
            v161 = (char *)qword_257A47950;
            g_CB_GDbg = qword_257A47950;
          }
          v162 = aE_0[++v160];
        }
        while (v160 != 4);
        sprintf_1X((char **)&g_CB_GDbg, v138);
        v163 = 0;
        v164 = (char *)g_CB_GDbg;
        v165 = 32;
        do
        {
          g_CB_GDbg = (uint64_t)(v164 + 1);
          *v164 = v165;
          v164 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_257A47958)
          {
            v164 = (char *)qword_257A47950;
            g_CB_GDbg = qword_257A47950;
          }
          v165 = aN[++v163];
        }
        while (v163 != 4);
        sprintf_1X((char **)&g_CB_GDbg, v142);
        v166 = (_BYTE *)g_CB_GDbg++;
        *v166 = 10;
        if (g_CB_GDbg >= (unint64_t)qword_257A47958)
          g_CB_GDbg = qword_257A47950;
        GNB_Debug_Flush_Check();
        v112 = g_Logging_Cfg;
      }
      *(_DWORD *)v189 = 0;
      *(_QWORD *)&v180 = 0;
      if (Core_Load_Clk_L5L1((int *)v189, (double *)&v180) && v112)
      {
        v167 = 0;
        v168 = *(double *)&v180;
        v169 = *(_DWORD *)v189;
        v170 = 36;
        v171 = (char *)g_CB_GDbg;
        do
        {
          g_CB_GDbg = (uint64_t)(v171 + 1);
          *v171 = v170;
          v171 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_257A47958)
          {
            v171 = (char *)qword_257A47950;
            g_CB_GDbg = qword_257A47950;
          }
          v170 = aN55[++v167];
        }
        while (v167 != 4);
        g_CB_GDbg = (uint64_t)(v171 + 1);
        *v171 = 32;
        if (g_CB_GDbg >= (unint64_t)qword_257A47958)
          g_CB_GDbg = qword_257A47950;
        sprintf_2d(&g_CB_GDbg, v169);
        v172 = (_BYTE *)g_CB_GDbg++;
        *v172 = 32;
        if (g_CB_GDbg >= (unint64_t)qword_257A47958)
          g_CB_GDbg = qword_257A47950;
        v173 = v168 * 299792458.0 * 1000.0;
        v174 = -0.5;
        if (v173 > 0.0)
          v174 = 0.5;
        v175 = v173 + v174;
        if (v175 <= 2147483650.0)
        {
          if (v175 >= -2147483650.0)
            v176 = (int)v175;
          else
            v176 = 0x80000000;
        }
        else
        {
          v176 = 0x7FFFFFFF;
        }
        sprintf_6f((uint64_t)&g_CB_GDbg, v176, 4);
        v177 = (_BYTE *)g_CB_GDbg++;
        *v177 = 10;
        if (g_CB_GDbg >= (unint64_t)qword_257A47958)
          g_CB_GDbg = qword_257A47950;
        GNB_Debug_Flush_Check();
      }
      result = Debug_Log_NV_End();
      if (*(_QWORD *)&dword_257A47948 != g_CB_GDbg)
        return GNSS_GNB_Debug_Ctl((uint64_t)&g_CB_GDbg);
    }
    else
    {
      result = Debug_Log_NV_End();
      if (*(_QWORD *)&dword_257A47948 != g_CB_GDbg)
        return GNSS_GNB_Debug_Ctl((uint64_t)&g_CB_GDbg);
    }
  }
  return result;
}

uint64_t Debug_Log_NV_End(void)
{
  char *v0;
  char v1;
  uint64_t v2;
  uint64_t result;

  if (g_Logging_Cfg)
  {
    v0 = (char *)g_CB_GDbg;
    v1 = 36;
    v2 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v0 + 1);
      *v0 = v1;
      v0 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v0 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v1 = aN_0[v2++];
    }
    while (v2 != 6);
    g_CB_GDbg = (uint64_t)(v0 + 1);
    *v0 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_GPS_Eph(uint64_t result, signed int a2, uint64_t a3)
{
  char v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t i;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  _BYTE *v19;

  if (g_Logging_Cfg)
  {
    if (a2 <= 192)
      v5 = 71;
    else
      v5 = 81;
    sprintf_NA_E_header(result, v5);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_3d(&g_CB_GDbg, a2);
    v7 = *(_DWORD *)a3;
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v7);
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    for (i = 0; i != 63; ++i)
      sprintf_02x((char **)&g_CB_GDbg, *(unsigned __int8 *)(a3 + 8 + i));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a3 + 4));
    v11 = *(unsigned __int8 *)(a3 + 71);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v11);
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a3 + 72));
    v13 = *(__int16 *)(a3 + 74);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v13);
    v15 = *(__int16 *)(a3 + 76);
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v15);
    v17 = *(char *)(a3 + 78);
    v18 = (_BYTE *)g_CB_GDbg++;
    *v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_3d(&g_CB_GDbg, v17);
    v19 = (_BYTE *)g_CB_GDbg++;
    *v19 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_GPS_Alm(uint64_t result, signed int a2, uint64_t a3)
{
  char v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t i;
  _BYTE *v13;

  if (g_Logging_Cfg)
  {
    if (a2 <= 192)
      v5 = 71;
    else
      v5 = 81;
    sprintf_NA_A_header(result, v5);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_3d(&g_CB_GDbg, a2);
    v7 = *(_DWORD *)a3;
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v7);
    v9 = *(__int16 *)(a3 + 8);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v9);
    v11 = (_BYTE *)g_CB_GDbg++;
    *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    for (i = 0; i != 24; ++i)
      sprintf_02x((char **)&g_CB_GDbg, *(unsigned __int8 *)(a3 + 10 + i));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a3 + 4));
    v13 = (_BYTE *)g_CB_GDbg++;
    *v13 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_GNSS_Health(uint64_t result, unsigned __int8 *a2)
{
  int v3;
  unsigned int v4;
  int v5;
  char v6;
  char *v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  _BYTE v12[15];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (g_Logging_Cfg)
  {
    v3 = result;
    sprintf_NA_x_header(0, "H");
    v4 = 32;
    v5 = 1;
    v6 = 71;
    switch(v3)
    {
      case 1:
        break;
      case 2:
        v4 = 24;
        v6 = 82;
        break;
      case 3:
        v4 = 10;
        v6 = 81;
        break;
      case 4:
        v4 = 63;
        v6 = 66;
        break;
      case 5:
        v4 = 36;
        v6 = 69;
        break;
      case 6:
        v4 = 14;
        v6 = 78;
        break;
      default:
        v5 = 0;
        v4 = 0;
        v6 = 88;
        break;
    }
    v7 = (char *)g_CB_GDbg++;
    *v7 = v6;
    v8 = (_BYTE *)g_CB_GDbg;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      v8 = (_BYTE *)qword_257A47950;
    g_CB_GDbg = (uint64_t)(v8 + 1);
    *v8 = 32;
    v9 = (_BYTE *)g_CB_GDbg;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
    {
      v9 = (_BYTE *)qword_257A47950;
      g_CB_GDbg = qword_257A47950;
    }
    if (v5)
    {
      if (v4 <= 1)
        v10 = 1;
      else
        v10 = v4;
      do
      {
        v11 = *a2++;
        sprintf1da(&g_CB_GDbg, v11, v12, 0, 0);
        --v10;
      }
      while (v10);
      v9 = (_BYTE *)g_CB_GDbg;
    }
    g_CB_GDbg = (uint64_t)(v9 + 1);
    *v9 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_GPS_UTC(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;

  if (g_Logging_Cfg)
  {
    sprintf_NA_x_header(result, "UG");
    v3 = *(_DWORD *)a2;
    v4 = (_BYTE *)g_CB_GDbg++;
    *v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v3);
    v5 = *(_DWORD *)(a2 + 8);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v5);
    v7 = *(_DWORD *)(a2 + 12);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v7);
    v9 = *(unsigned __int8 *)(a2 + 16);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v9);
    v11 = *(unsigned __int8 *)(a2 + 17);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v11);
    v13 = *(char *)(a2 + 18);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v13);
    v15 = *(unsigned __int8 *)(a2 + 19);
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v15);
    v17 = *(unsigned __int8 *)(a2 + 20);
    v18 = (_BYTE *)g_CB_GDbg++;
    *v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v17);
    v19 = *(char *)(a2 + 21);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v19);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    v21 = (_BYTE *)g_CB_GDbg++;
    *v21 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_GPS_Klob(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;

  if (g_Logging_Cfg)
  {
    sprintf_NA_x_header(result, "KG");
    v3 = *(_DWORD *)a2;
    v4 = (_BYTE *)g_CB_GDbg++;
    *v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v3);
    v5 = *(char *)(a2 + 8);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v5);
    v7 = *(char *)(a2 + 9);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v7);
    v9 = *(char *)(a2 + 10);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v9);
    v11 = *(char *)(a2 + 11);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v11);
    v13 = *(char *)(a2 + 12);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v13);
    v15 = *(char *)(a2 + 13);
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v15);
    v17 = *(char *)(a2 + 14);
    v18 = (_BYTE *)g_CB_GDbg++;
    *v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v17);
    v19 = *(char *)(a2 + 15);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v19);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    v21 = (_BYTE *)g_CB_GDbg++;
    *v21 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_GLO_Eph(uint64_t result, unsigned int a2, uint64_t a3)
{
  _BYTE *v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  unsigned int v10;
  _BYTE *v11;
  uint64_t i;
  _BYTE *v13;
  unint64_t v14;
  _BYTE *v15;
  _BYTE v16[15];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (g_Logging_Cfg)
  {
    sprintf_NA_E_header(result, 82);
    v5 = (_BYTE *)g_CB_GDbg++;
    *v5 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, a2);
    v6 = *(_DWORD *)a3;
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v6);
    v8 = *(_DWORD *)(a3 + 8);
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v8);
    v10 = *(unsigned __int16 *)(a3 + 60);
    v11 = (_BYTE *)g_CB_GDbg++;
    *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v10);
    for (i = 12; i != 60; i += 4)
    {
      v13 = (_BYTE *)g_CB_GDbg++;
      *v13 = 32;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
        g_CB_GDbg = qword_257A47950;
      v14 = *(unsigned int *)(a3 + i);
      v16[0] = hexTABLE[v14 >> 28];
      v16[1] = hexTABLE[(v14 >> 24) & 0xF];
      hex6((uint64_t)&g_CB_GDbg, v14, v16, 2);
    }
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a3 + 4));
    v15 = (_BYTE *)g_CB_GDbg++;
    *v15 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_GLO_Alm(uint64_t result, unsigned int a2, uint64_t a3)
{
  _BYTE *v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t i;
  _BYTE *v11;
  unint64_t v12;
  _BYTE *v13;
  _BYTE v14[15];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (g_Logging_Cfg)
  {
    sprintf_NA_A_header(result, 82);
    v5 = (_BYTE *)g_CB_GDbg++;
    *v5 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, a2);
    v6 = *(_DWORD *)a3;
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v6);
    v8 = *(unsigned __int16 *)(a3 + 8);
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v8);
    for (i = 0; i != 24; i += 4)
    {
      v11 = (_BYTE *)g_CB_GDbg++;
      *v11 = 32;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
        g_CB_GDbg = qword_257A47950;
      v12 = *(unsigned int *)(a3 + 12 + i);
      v14[0] = hexTABLE[v12 >> 28];
      v14[1] = hexTABLE[(v12 >> 24) & 0xF];
      hex6((uint64_t)&g_CB_GDbg, v12, v14, 2);
    }
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a3 + 4));
    v13 = (_BYTE *)g_CB_GDbg++;
    *v13 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_GAL_Eph(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  _BYTE *v28;
  unsigned int v29;
  _BYTE *v30;
  unsigned int v31;
  _BYTE *v32;
  unsigned int v33;
  _BYTE *v34;
  unsigned int v35;
  _BYTE *v36;
  unsigned int v37;
  _BYTE *v38;
  unsigned int v39;
  _BYTE *v40;
  unsigned int v41;
  _BYTE *v42;
  unsigned int v43;
  _BYTE *v44;
  unsigned int v45;
  _BYTE *v46;
  unsigned int v47;
  _BYTE *v48;
  unsigned int v49;
  _BYTE *v50;
  unsigned int v51;
  _BYTE *v52;
  unsigned int v53;
  _BYTE *v54;
  _BYTE *v55;

  if (g_Logging_Cfg)
  {
    sprintf_NA_E_header(result, 69);
    v3 = *(_DWORD *)a2;
    v4 = (_BYTE *)g_CB_GDbg++;
    *v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_10d(&g_CB_GDbg, v3);
    v5 = *(_DWORD *)(a2 + 8);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v5);
    v7 = *(__int16 *)(a2 + 12);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v7);
    v9 = *(unsigned __int8 *)(a2 + 14);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v9);
    v11 = *(unsigned __int8 *)(a2 + 15);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_3d(&g_CB_GDbg, v11);
    v13 = *(unsigned __int16 *)(a2 + 16);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v13);
    v15 = *(unsigned __int16 *)(a2 + 18);
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v15);
    sprintf_sp11d(&g_CB_GDbg, *(_DWORD *)(a2 + 20));
    v17 = *(_DWORD *)(a2 + 24);
    v18 = (_BYTE *)g_CB_GDbg++;
    *v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_10u(&g_CB_GDbg, v17);
    v19 = *(_DWORD *)(a2 + 28);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_10u(&g_CB_GDbg, v19);
    sprintf_sp11d(&g_CB_GDbg, *(_DWORD *)(a2 + 32));
    sprintf_sp11d(&g_CB_GDbg, *(_DWORD *)(a2 + 36));
    sprintf_sp11d(&g_CB_GDbg, *(_DWORD *)(a2 + 40));
    v21 = *(_DWORD *)(a2 + 44);
    v22 = (_BYTE *)g_CB_GDbg++;
    *v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v21);
    v23 = *(__int16 *)(a2 + 48);
    v24 = (_BYTE *)g_CB_GDbg++;
    *v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v23);
    v25 = *(__int16 *)(a2 + 50);
    v26 = (_BYTE *)g_CB_GDbg++;
    *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v25);
    v27 = *(__int16 *)(a2 + 52);
    v28 = (_BYTE *)g_CB_GDbg++;
    *v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v27);
    v29 = *(__int16 *)(a2 + 54);
    v30 = (_BYTE *)g_CB_GDbg++;
    *v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v29);
    v31 = *(__int16 *)(a2 + 56);
    v32 = (_BYTE *)g_CB_GDbg++;
    *v32 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v31);
    v33 = *(__int16 *)(a2 + 58);
    v34 = (_BYTE *)g_CB_GDbg++;
    *v34 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v33);
    v35 = *(__int16 *)(a2 + 60);
    v36 = (_BYTE *)g_CB_GDbg++;
    *v36 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v35);
    v37 = *(__int16 *)(a2 + 62);
    v38 = (_BYTE *)g_CB_GDbg++;
    *v38 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v37);
    sprintf_sp11d(&g_CB_GDbg, *(_DWORD *)(a2 + 64));
    v39 = *(_DWORD *)(a2 + 68);
    v40 = (_BYTE *)g_CB_GDbg++;
    *v40 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v39);
    v41 = *(__int16 *)(a2 + 72);
    v42 = (_BYTE *)g_CB_GDbg++;
    *v42 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_3d(&g_CB_GDbg, v41);
    v43 = *(unsigned __int16 *)(a2 + 74);
    v44 = (_BYTE *)g_CB_GDbg++;
    *v44 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v43);
    v45 = *(__int16 *)(a2 + 76);
    v46 = (_BYTE *)g_CB_GDbg++;
    *v46 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v45);
    v47 = *(__int16 *)(a2 + 78);
    v48 = (_BYTE *)g_CB_GDbg++;
    *v48 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v47);
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 80));
    v49 = *(unsigned __int8 *)(a2 + 81);
    v50 = (_BYTE *)g_CB_GDbg++;
    *v50 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v49);
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 82));
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 83));
    v51 = *(unsigned __int8 *)(a2 + 84);
    v52 = (_BYTE *)g_CB_GDbg++;
    *v52 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v51);
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 85));
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 86));
    v53 = *(_DWORD *)(a2 + 4);
    v54 = (_BYTE *)g_CB_GDbg++;
    *v54 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v53);
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 87));
    v55 = (_BYTE *)g_CB_GDbg++;
    *v55 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_GAL_Alm(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  _BYTE *v28;
  unsigned int v29;
  _BYTE *v30;
  _BYTE *v31;

  if (g_Logging_Cfg)
  {
    sprintf_NA_A_header(result, 69);
    v3 = *(_DWORD *)a2;
    v4 = (_BYTE *)g_CB_GDbg++;
    *v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_10d(&g_CB_GDbg, v3);
    v5 = *(unsigned __int8 *)(a2 + 8);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v5);
    v7 = *(unsigned __int8 *)(a2 + 9);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v7);
    v9 = *(__int16 *)(a2 + 10);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v9);
    v11 = *(unsigned __int16 *)(a2 + 12);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v11);
    v13 = *(__int16 *)(a2 + 14);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v13);
    v15 = *(unsigned __int16 *)(a2 + 16);
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v15);
    v17 = *(__int16 *)(a2 + 18);
    v18 = (_BYTE *)g_CB_GDbg++;
    *v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v17);
    v19 = *(__int16 *)(a2 + 20);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v19);
    v21 = *(__int16 *)(a2 + 22);
    v22 = (_BYTE *)g_CB_GDbg++;
    *v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v21);
    v23 = *(__int16 *)(a2 + 24);
    v24 = (_BYTE *)g_CB_GDbg++;
    *v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v23);
    v25 = *(__int16 *)(a2 + 26);
    v26 = (_BYTE *)g_CB_GDbg++;
    *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v25);
    v27 = *(__int16 *)(a2 + 28);
    v28 = (_BYTE *)g_CB_GDbg++;
    *v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v27);
    v29 = *(__int16 *)(a2 + 30);
    v30 = (_BYTE *)g_CB_GDbg++;
    *v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v29);
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 32));
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 33));
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 34));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    v31 = (_BYTE *)g_CB_GDbg++;
    *v31 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_BDS_Eph(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  char v5;
  unsigned int v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE *v34;
  unsigned int v35;
  _BYTE *v36;
  unsigned int v37;
  _BYTE *v38;
  unsigned int v39;
  _BYTE *v40;
  unsigned int v41;
  _BYTE *v42;
  unsigned int v43;
  _BYTE *v44;
  unsigned int v45;
  _BYTE *v46;
  unsigned int v47;
  _BYTE *v48;
  unsigned int v49;
  _BYTE *v50;
  unsigned int v51;
  _BYTE *v52;
  unsigned int v53;
  _BYTE *v54;
  unsigned int v55;
  _BYTE *v56;
  unsigned int v57;
  _BYTE *v58;
  unsigned int v59;
  _BYTE *v60;
  unsigned int v61;
  _BYTE *v62;
  unsigned int v63;
  _BYTE *v64;
  unsigned int v65;
  _BYTE *v66;
  unsigned int v67;
  _BYTE *v68;
  unsigned int v69;
  _BYTE *v70;
  unsigned int v71;
  _BYTE *v72;
  _BYTE *v73;

  if (g_Logging_Cfg)
  {
    sprintf_NA_E_header(result, 66);
    v3 = 0;
    v4 = (char *)g_CB_GDbg;
    v5 = 32;
    do
    {
      g_CB_GDbg = (uint64_t)(v4 + 1);
      *v4 = v5;
      v4 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v4 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v5 = aC_1[++v3];
    }
    while (v3 != 2);
    v6 = *(_DWORD *)a2;
    g_CB_GDbg = (uint64_t)(v4 + 1);
    *v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_10d(&g_CB_GDbg, v6);
    v7 = *(unsigned __int8 *)(a2 + 8);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v7);
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 9));
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 10));
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 11));
    v9 = *(_DWORD *)(a2 + 12);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v9);
    v11 = *(__int16 *)(a2 + 16);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v11);
    v13 = *(_DWORD *)(a2 + 20);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v13);
    v15 = *(_DWORD *)(a2 + 24);
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v15);
    v17 = *(_DWORD *)(a2 + 28);
    v18 = (_BYTE *)g_CB_GDbg++;
    *v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v17);
    v19 = *(_DWORD *)(a2 + 32);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_9d(&g_CB_GDbg, v19);
    v21 = *(_DWORD *)(a2 + 36);
    v22 = (_BYTE *)g_CB_GDbg++;
    *v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v21);
    v23 = *(_DWORD *)(a2 + 40);
    v24 = (_BYTE *)g_CB_GDbg++;
    *v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v23);
    v25 = *(_DWORD *)(a2 + 44);
    v26 = (_BYTE *)g_CB_GDbg++;
    *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v25);
    v27 = *(_QWORD *)(a2 + 48);
    v28 = (_BYTE *)g_CB_GDbg++;
    *v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_11D(&g_CB_GDbg, v27);
    sprintf_sp10U(&g_CB_GDbg, *(_QWORD *)(a2 + 56));
    v29 = *(_QWORD *)(a2 + 64);
    v30 = (_BYTE *)g_CB_GDbg++;
    *v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_11D(&g_CB_GDbg, v29);
    v31 = *(_QWORD *)(a2 + 72);
    v32 = (_BYTE *)g_CB_GDbg++;
    *v32 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_11D(&g_CB_GDbg, v31);
    v33 = *(_QWORD *)(a2 + 80);
    v34 = (_BYTE *)g_CB_GDbg++;
    *v34 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_11D(&g_CB_GDbg, v33);
    v35 = *(_DWORD *)(a2 + 88);
    v36 = (_BYTE *)g_CB_GDbg++;
    *v36 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_7d(&g_CB_GDbg, v35);
    v37 = *(__int16 *)(a2 + 92);
    v38 = (_BYTE *)g_CB_GDbg++;
    *v38 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v37);
    v39 = *(__int16 *)(a2 + 94);
    v40 = (_BYTE *)g_CB_GDbg++;
    *v40 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v39);
    v41 = *(__int16 *)(a2 + 96);
    v42 = (_BYTE *)g_CB_GDbg++;
    *v42 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v41);
    v43 = *(_DWORD *)(a2 + 100);
    v44 = (_BYTE *)g_CB_GDbg++;
    *v44 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v43);
    v45 = *(_DWORD *)(a2 + 104);
    v46 = (_BYTE *)g_CB_GDbg++;
    *v46 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v45);
    v47 = *(_DWORD *)(a2 + 108);
    v48 = (_BYTE *)g_CB_GDbg++;
    *v48 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v47);
    v49 = *(_DWORD *)(a2 + 112);
    v50 = (_BYTE *)g_CB_GDbg++;
    *v50 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v49);
    v51 = *(_DWORD *)(a2 + 116);
    v52 = (_BYTE *)g_CB_GDbg++;
    *v52 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_9d(&g_CB_GDbg, v51);
    v53 = *(_DWORD *)(a2 + 120);
    v54 = (_BYTE *)g_CB_GDbg++;
    *v54 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v53);
    v55 = *(__int16 *)(a2 + 124);
    v56 = (_BYTE *)g_CB_GDbg++;
    *v56 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v55);
    v57 = *(unsigned __int16 *)(a2 + 126);
    v58 = (_BYTE *)g_CB_GDbg++;
    *v58 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_3d(&g_CB_GDbg, v57);
    v59 = *(unsigned __int8 *)(a2 + 128);
    v60 = (_BYTE *)g_CB_GDbg++;
    *v60 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v59);
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 129));
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 130));
    v61 = *(unsigned __int8 *)(a2 + 131);
    v62 = (_BYTE *)g_CB_GDbg++;
    *v62 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v61);
    v63 = *(__int16 *)(a2 + 132);
    v64 = (_BYTE *)g_CB_GDbg++;
    *v64 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v63);
    v65 = *(__int16 *)(a2 + 134);
    v66 = (_BYTE *)g_CB_GDbg++;
    *v66 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v65);
    v67 = *(__int16 *)(a2 + 136);
    v68 = (_BYTE *)g_CB_GDbg++;
    *v68 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v67);
    v69 = *(__int16 *)(a2 + 138);
    v70 = (_BYTE *)g_CB_GDbg++;
    *v70 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v69);
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 140));
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 141));
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 142));
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 143));
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 144));
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 145));
    sprintf_sp1d(&g_CB_GDbg, *(char *)(a2 + 146));
    v71 = *(char *)(a2 + 147);
    v72 = (_BYTE *)g_CB_GDbg++;
    *v72 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v71);
    sprintf_sp1u(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    v73 = (_BYTE *)g_CB_GDbg++;
    *v73 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_BDS_Alm(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  _BYTE *v28;
  unsigned int v29;
  _BYTE *v30;
  _BYTE *v31;

  if (g_Logging_Cfg)
  {
    sprintf_NA_A_header(result, 66);
    v3 = *(_DWORD *)a2;
    v4 = (_BYTE *)g_CB_GDbg++;
    *v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_10d(&g_CB_GDbg, v3);
    v5 = *(__int16 *)(a2 + 8);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_3d(&g_CB_GDbg, v5);
    v7 = *(unsigned __int8 *)(a2 + 10);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v7);
    v9 = *(unsigned __int8 *)(a2 + 11);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_3d(&g_CB_GDbg, v9);
    v11 = *(_DWORD *)(a2 + 12);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v11);
    v13 = *(_DWORD *)(a2 + 16);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v13);
    v15 = *(_DWORD *)(a2 + 20);
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v15);
    v17 = *(_DWORD *)(a2 + 24);
    v18 = (_BYTE *)g_CB_GDbg++;
    *v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v17);
    v19 = *(_DWORD *)(a2 + 28);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v19);
    v21 = *(_DWORD *)(a2 + 32);
    v22 = (_BYTE *)g_CB_GDbg++;
    *v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_7d(&g_CB_GDbg, v21);
    v23 = *(__int16 *)(a2 + 36);
    v24 = (_BYTE *)g_CB_GDbg++;
    *v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_7d(&g_CB_GDbg, v23);
    v25 = *(__int16 *)(a2 + 38);
    v26 = (_BYTE *)g_CB_GDbg++;
    *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v25);
    v27 = *(__int16 *)(a2 + 40);
    v28 = (_BYTE *)g_CB_GDbg++;
    *v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v27);
    v29 = *(unsigned __int8 *)(a2 + 42);
    v30 = (_BYTE *)g_CB_GDbg++;
    *v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v29);
    sprintf_sp1d(&g_CB_GDbg, 0);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    v31 = (_BYTE *)g_CB_GDbg++;
    *v31 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_BDS_BGTO(uint64_t result, int a2)
{
  uint64_t v3;
  unsigned int v4;
  _BYTE *v5;
  char v6;
  _BYTE *v7;
  char *v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;

  if (g_Logging_Cfg)
  {
    v3 = result;
    sprintf_NA_x_header(0, "OB");
    v4 = *(_DWORD *)v3;
    v5 = (_BYTE *)g_CB_GDbg++;
    *v5 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v4);
    if (a2 == 2)
      v6 = 82;
    else
      v6 = 88;
    if (a2 == 1)
      v6 = 71;
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    v8 = (char *)g_CB_GDbg;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      v8 = (char *)qword_257A47950;
    g_CB_GDbg = (uint64_t)(v8 + 1);
    *v8 = v6;
    v9 = (_BYTE *)g_CB_GDbg;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      v9 = (_BYTE *)qword_257A47950;
    v10 = *(unsigned __int16 *)(v3 + 8);
    g_CB_GDbg = (uint64_t)(v9 + 1);
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v10);
    v11 = *(_DWORD *)(v3 + 12);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v11);
    v13 = *(_DWORD *)(v3 + 16);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v13);
    v15 = *(__int16 *)(v3 + 20);
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v15);
    v17 = *(char *)(v3 + 22);
    v18 = (_BYTE *)g_CB_GDbg++;
    *v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v17);
    v19 = *(__int16 *)(v3 + 24);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v19);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(v3 + 4));
    v21 = (_BYTE *)g_CB_GDbg++;
    *v21 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_NVC_Eph(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  _BYTE *v28;
  unsigned int v29;
  _BYTE *v30;
  unsigned int v31;
  _BYTE *v32;
  unsigned int v33;
  _BYTE *v34;
  unsigned int v35;
  _BYTE *v36;
  unsigned int v37;
  _BYTE *v38;
  unsigned int v39;
  _BYTE *v40;
  unsigned int v41;
  _BYTE *v42;
  unsigned int v43;
  _BYTE *v44;
  unsigned int v45;
  _BYTE *v46;
  _BYTE *v47;

  if (g_Logging_Cfg)
  {
    sprintf_NA_E_header(result, 78);
    v3 = *(_DWORD *)a2;
    v4 = (_BYTE *)g_CB_GDbg++;
    *v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_10d(&g_CB_GDbg, v3);
    v5 = *(unsigned __int8 *)(a2 + 8);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v5);
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 9));
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 10));
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 11));
    v7 = *(unsigned __int8 *)(a2 + 12);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_3d(&g_CB_GDbg, v7);
    v9 = *(unsigned __int8 *)(a2 + 13);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_3d(&g_CB_GDbg, v9);
    v11 = *(unsigned __int16 *)(a2 + 14);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v11);
    v13 = *(unsigned __int16 *)(a2 + 16);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v13);
    v15 = *(unsigned __int16 *)(a2 + 18);
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v15);
    v17 = *(_DWORD *)(a2 + 20);
    v18 = (_BYTE *)g_CB_GDbg++;
    *v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_9d(&g_CB_GDbg, v17);
    v19 = *(__int16 *)(a2 + 24);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v19);
    v21 = *(char *)(a2 + 26);
    v22 = (_BYTE *)g_CB_GDbg++;
    *v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v21);
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 27));
    v23 = *(__int16 *)(a2 + 28);
    v24 = (_BYTE *)g_CB_GDbg++;
    *v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v23);
    v25 = *(__int16 *)(a2 + 30);
    v26 = (_BYTE *)g_CB_GDbg++;
    *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v25);
    v27 = *(_DWORD *)(a2 + 32);
    v28 = (_BYTE *)g_CB_GDbg++;
    *v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_10u(&g_CB_GDbg, v27);
    v29 = *(_DWORD *)(a2 + 36);
    v30 = (_BYTE *)g_CB_GDbg++;
    *v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_10u(&g_CB_GDbg, v29);
    sprintf_sp11d(&g_CB_GDbg, *(_DWORD *)(a2 + 40));
    sprintf_sp11d(&g_CB_GDbg, *(_DWORD *)(a2 + 44));
    sprintf_sp11d(&g_CB_GDbg, *(_DWORD *)(a2 + 48));
    sprintf_sp11d(&g_CB_GDbg, *(_DWORD *)(a2 + 52));
    v31 = *(_DWORD *)(a2 + 56);
    v32 = (_BYTE *)g_CB_GDbg++;
    *v32 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v31);
    v33 = *(_DWORD *)(a2 + 60);
    v34 = (_BYTE *)g_CB_GDbg++;
    *v34 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v33);
    v35 = *(__int16 *)(a2 + 64);
    v36 = (_BYTE *)g_CB_GDbg++;
    *v36 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v35);
    v37 = *(__int16 *)(a2 + 66);
    v38 = (_BYTE *)g_CB_GDbg++;
    *v38 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v37);
    v39 = *(__int16 *)(a2 + 68);
    v40 = (_BYTE *)g_CB_GDbg++;
    *v40 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v39);
    v41 = *(__int16 *)(a2 + 70);
    v42 = (_BYTE *)g_CB_GDbg++;
    *v42 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v41);
    v43 = *(__int16 *)(a2 + 72);
    v44 = (_BYTE *)g_CB_GDbg++;
    *v44 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v43);
    v45 = *(__int16 *)(a2 + 74);
    v46 = (_BYTE *)g_CB_GDbg++;
    *v46 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v45);
    sprintf_sp1u(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    v47 = (_BYTE *)g_CB_GDbg++;
    *v47 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_NVC_Alm(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  _BYTE *v28;
  unsigned int v29;
  _BYTE *v30;
  _BYTE *v31;

  if (g_Logging_Cfg)
  {
    sprintf_NA_A_header(result, 78);
    v3 = *(_DWORD *)a2;
    v4 = (_BYTE *)g_CB_GDbg++;
    *v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_10d(&g_CB_GDbg, v3);
    v5 = *(unsigned __int8 *)(a2 + 8);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v5);
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 9));
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 10));
    v7 = *(unsigned __int16 *)(a2 + 12);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v7);
    v9 = *(unsigned __int16 *)(a2 + 14);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v9);
    v11 = *(unsigned __int16 *)(a2 + 16);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v11);
    v13 = *(_DWORD *)(a2 + 20);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v13);
    v15 = *(__int16 *)(a2 + 24);
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v15);
    v17 = *(_DWORD *)(a2 + 28);
    v18 = (_BYTE *)g_CB_GDbg++;
    *v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v17);
    v19 = *(_DWORD *)(a2 + 32);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v19);
    v21 = *(_DWORD *)(a2 + 36);
    v22 = (_BYTE *)g_CB_GDbg++;
    *v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v21);
    v23 = *(_DWORD *)(a2 + 40);
    v24 = (_BYTE *)g_CB_GDbg++;
    *v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v23);
    v25 = *(__int16 *)(a2 + 44);
    v26 = (_BYTE *)g_CB_GDbg++;
    *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v25);
    v27 = *(__int16 *)(a2 + 46);
    v28 = (_BYTE *)g_CB_GDbg++;
    *v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v27);
    v29 = *(char *)(a2 + 48);
    v30 = (_BYTE *)g_CB_GDbg++;
    *v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v29);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    v31 = (_BYTE *)g_CB_GDbg++;
    *v31 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_NV_Not_Brd_SV(uint64_t result, uint64_t a2)
{
  char *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  char v36;
  unsigned __int8 *v37;
  int v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char *v42;
  char v43;
  uint64_t v44;
  char *v45;
  char v46;
  uint64_t v47;
  char *v48;
  char v49;
  uint64_t v50;
  char *v51;
  char v52;
  uint64_t v53;
  char *v54;
  char v55;
  uint64_t v56;
  char *v57;
  char v58;
  _BYTE *v59;

  if (g_Logging_Cfg)
  {
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    v5 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v3 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v4 = aNb[v5++];
    }
    while (v5 != 6);
    v6 = 0;
    v7 = 0;
    v8 = 1;
    do
    {
      if (*(_BYTE *)(a2 + v6))
        v9 = v8;
      else
        v9 = 0;
      v7 |= v9;
      v8 *= 2;
      ++v6;
    }
    while (v6 != 32);
    v10 = 0;
    v11 = 0;
    v12 = 1;
    do
    {
      if (*(_BYTE *)(a2 + 32 + v10))
        v13 = v12;
      else
        v13 = 0;
      v11 |= v13;
      v12 *= 2;
      ++v10;
    }
    while (v10 != 24);
    v14 = 0;
    v15 = 0;
    v16 = 1;
    do
    {
      if (*(_BYTE *)(a2 + 155 + v14))
        v17 = v16;
      else
        v17 = 0;
      v15 |= v17;
      v16 *= 2;
      ++v14;
    }
    while (v14 != 10);
    v18 = 0;
    v19 = 0;
    v20 = 1;
    do
    {
      if (*(_BYTE *)(a2 + 179 + v18))
        v21 = v20;
      else
        v21 = 0;
      v19 |= v21;
      v20 *= 2;
      ++v18;
    }
    while (v18 != 39);
    v22 = 0;
    v23 = 0;
    v24 = 1;
    do
    {
      if (*(_BYTE *)(a2 + 92 + v22))
        v25 = v24;
      else
        v25 = 0;
      v23 |= v25;
      v24 *= 2;
      ++v22;
    }
    while (v22 != 63);
    v26 = 0;
    v27 = 0;
    v28 = 1;
    do
    {
      if (*(_BYTE *)(a2 + 56 + v26))
        v29 = v28;
      else
        v29 = 0;
      v27 |= v29;
      v28 *= 2;
      ++v26;
    }
    while (v26 != 36);
    v30 = 0;
    v31 = 0;
    v32 = a2 + 165;
    v33 = 1;
    do
    {
      if (*(_BYTE *)(v32 + v30))
        v34 = v33;
      else
        v34 = 0;
      v31 |= v34;
      v33 *= 2;
      ++v30;
    }
    while (v30 != 14);
    v35 = "--";
    if ((_DWORD)result == 1)
      v35 = "L5";
    if (!(_DWORD)result)
      v35 = "L1";
    v36 = *v35;
    if (*v35)
    {
      v37 = (unsigned __int8 *)(v35 + 1);
      do
      {
        g_CB_GDbg = (uint64_t)(v3 + 1);
        *v3 = v36;
        v3 = (char *)g_CB_GDbg;
        if (g_CB_GDbg >= (unint64_t)qword_257A47958)
        {
          v3 = (char *)qword_257A47950;
          g_CB_GDbg = qword_257A47950;
        }
        v38 = *v37++;
        v36 = v38;
      }
      while (v38);
    }
    v39 = 0;
    v40 = 32;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v40;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v3 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v40 = aG[++v39];
    }
    while (v39 != 4);
    sprintf_1X((char **)&g_CB_GDbg, v7);
    v41 = 0;
    v42 = (char *)g_CB_GDbg;
    v43 = 32;
    do
    {
      g_CB_GDbg = (uint64_t)(v42 + 1);
      *v42 = v43;
      v42 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v42 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v43 = aR[++v41];
    }
    while (v41 != 4);
    sprintf_1X((char **)&g_CB_GDbg, v11);
    v44 = 0;
    v45 = (char *)g_CB_GDbg;
    v46 = 32;
    do
    {
      g_CB_GDbg = (uint64_t)(v45 + 1);
      *v45 = v46;
      v45 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v45 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v46 = aQ[++v44];
    }
    while (v44 != 4);
    sprintf_1X((char **)&g_CB_GDbg, v15);
    v47 = 0;
    v48 = (char *)g_CB_GDbg;
    v49 = 32;
    do
    {
      g_CB_GDbg = (uint64_t)(v48 + 1);
      *v48 = v49;
      v48 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v48 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v49 = aS_0[++v47];
    }
    while (v47 != 4);
    sprintf_1X((char **)&g_CB_GDbg, v19);
    v50 = 0;
    v51 = (char *)g_CB_GDbg;
    v52 = 32;
    do
    {
      g_CB_GDbg = (uint64_t)(v51 + 1);
      *v51 = v52;
      v51 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v51 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v52 = aB[++v50];
    }
    while (v50 != 4);
    sprintf_1X((char **)&g_CB_GDbg, v23);
    v53 = 0;
    v54 = (char *)g_CB_GDbg;
    v55 = 32;
    do
    {
      g_CB_GDbg = (uint64_t)(v54 + 1);
      *v54 = v55;
      v54 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v54 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v55 = aE_0[++v53];
    }
    while (v53 != 4);
    sprintf_1X((char **)&g_CB_GDbg, v27);
    v56 = 0;
    v57 = (char *)g_CB_GDbg;
    v58 = 32;
    do
    {
      g_CB_GDbg = (uint64_t)(v57 + 1);
      *v57 = v58;
      v57 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v57 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v58 = aN[++v56];
    }
    while (v56 != 4);
    sprintf_1X((char **)&g_CB_GDbg, v31);
    v59 = (_BYTE *)g_CB_GDbg++;
    *v59 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t sprintf_NA_x_header(uint64_t result, _BYTE *a2)
{
  _BYTE *v2;
  char *v3;
  char v4;
  _BYTE *v5;
  char v6;
  unsigned __int8 *v7;
  int v8;

  v2 = (_BYTE *)g_CB_GDbg++;
  *v2 = 36;
  v3 = (char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_257A47958)
    v3 = (char *)qword_257A47950;
  if ((_DWORD)result)
    v4 = 65;
  else
    v4 = 78;
  g_CB_GDbg = (uint64_t)(v3 + 1);
  *v3 = v4;
  v5 = (_BYTE *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_257A47958)
  {
    v5 = (_BYTE *)qword_257A47950;
    g_CB_GDbg = qword_257A47950;
  }
  v6 = *a2;
  if (*a2)
  {
    v7 = a2 + 1;
    do
    {
      g_CB_GDbg = (uint64_t)(v5 + 1);
      *v5 = v6;
      v5 = (_BYTE *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v5 = (_BYTE *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v8 = *v7++;
      v6 = v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sprintf_NA_E_header(uint64_t result, char a2)
{
  _BYTE *v2;
  char *v3;
  char v4;
  _BYTE *v5;
  _BYTE *v6;

  v2 = (_BYTE *)g_CB_GDbg++;
  *v2 = 36;
  v3 = (char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_257A47958)
    v3 = (char *)qword_257A47950;
  if ((_DWORD)result == 1)
    v4 = 65;
  else
    v4 = 69;
  if (!(_DWORD)result)
    v4 = 78;
  g_CB_GDbg = (uint64_t)(v3 + 1);
  *v3 = v4;
  v5 = (_BYTE *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_257A47958)
    v5 = (_BYTE *)qword_257A47950;
  g_CB_GDbg = (uint64_t)(v5 + 1);
  *v5 = 69;
  v6 = (_BYTE *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_257A47958)
    v6 = (_BYTE *)qword_257A47950;
  g_CB_GDbg = (uint64_t)(v6 + 1);
  *v6 = a2;
  if (g_CB_GDbg >= (unint64_t)qword_257A47958)
    g_CB_GDbg = qword_257A47950;
  return result;
}

uint64_t Debug_Log_SBA_Eph(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4)
{
  _BYTE *v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  _BYTE *v28;
  unsigned int v29;
  _BYTE *v30;
  unsigned int v31;
  _BYTE *v32;
  unsigned int v33;
  _BYTE *v34;
  unsigned int v35;
  _BYTE *v36;
  _BYTE *v37;

  if (g_Logging_Cfg)
  {
    sprintf_NA_E_header(result, 83);
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_3d(&g_CB_GDbg, a2);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_3d(&g_CB_GDbg, a3);
    v9 = *(_DWORD *)a4;
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_10d(&g_CB_GDbg, v9);
    v11 = *(unsigned __int16 *)(a4 + 8);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v11);
    v13 = *(unsigned __int8 *)(a4 + 10);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v13);
    v15 = *(_DWORD *)(a4 + 12);
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_5d(&g_CB_GDbg, v15);
    v17 = *(_DWORD *)(a4 + 16);
    v18 = (_BYTE *)g_CB_GDbg++;
    *v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v17);
    v19 = *(_DWORD *)(a4 + 20);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_10d(&g_CB_GDbg, v19);
    v21 = *(_DWORD *)(a4 + 24);
    v22 = (_BYTE *)g_CB_GDbg++;
    *v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_10d(&g_CB_GDbg, v21);
    v23 = *(_DWORD *)(a4 + 28);
    v24 = (_BYTE *)g_CB_GDbg++;
    *v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_10d(&g_CB_GDbg, v23);
    v25 = *(_DWORD *)(a4 + 32);
    v26 = (_BYTE *)g_CB_GDbg++;
    *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v25);
    v27 = *(_DWORD *)(a4 + 36);
    v28 = (_BYTE *)g_CB_GDbg++;
    *v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v27);
    v29 = *(_DWORD *)(a4 + 40);
    v30 = (_BYTE *)g_CB_GDbg++;
    *v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v29);
    v31 = *(_DWORD *)(a4 + 44);
    v32 = (_BYTE *)g_CB_GDbg++;
    *v32 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v31);
    v33 = *(_DWORD *)(a4 + 48);
    v34 = (_BYTE *)g_CB_GDbg++;
    *v34 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v33);
    v35 = *(_DWORD *)(a4 + 52);
    v36 = (_BYTE *)g_CB_GDbg++;
    *v36 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v35);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a4 + 4));
    v37 = (_BYTE *)g_CB_GDbg++;
    *v37 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t sprintf_NA_A_header(uint64_t result, char a2)
{
  _BYTE *v2;
  char *v3;
  char v4;
  _BYTE *v5;
  _BYTE *v6;

  v2 = (_BYTE *)g_CB_GDbg++;
  *v2 = 36;
  v3 = (char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_257A47958)
    v3 = (char *)qword_257A47950;
  if ((_DWORD)result)
    v4 = 65;
  else
    v4 = 78;
  g_CB_GDbg = (uint64_t)(v3 + 1);
  *v3 = v4;
  v5 = (_BYTE *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_257A47958)
    v5 = (_BYTE *)qword_257A47950;
  g_CB_GDbg = (uint64_t)(v5 + 1);
  *v5 = 65;
  v6 = (_BYTE *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_257A47958)
    v6 = (_BYTE *)qword_257A47950;
  g_CB_GDbg = (uint64_t)(v6 + 1);
  *v6 = a2;
  if (g_CB_GDbg >= (unint64_t)qword_257A47958)
    g_CB_GDbg = qword_257A47950;
  return result;
}

uint64_t Debug_Log_TM_FCP_OS_Time_ms(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  char *v4;
  char v5;
  _BYTE *v6;

  if (g_Logging_Cfg)
  {
    v3 = 0;
    v4 = (char *)g_CB_GDbg;
    v5 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v4 + 1);
      *v4 = v5;
      v4 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v4 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v5 = str_12_2[++v3];
    }
    while (v3 != 4);
    sprintf_sp1u(&g_CB_GDbg, result);
    sprintf_sp1u(&g_CB_GDbg, a2);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_AGPS_Ref_Time(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  if (g_Logging_Cfg)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v3 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v4 = str_13_1[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v5);
    v6 = v1[1];
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v6);
    v8 = *((unsigned __int16 *)v1 + 4);
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v8);
    v10 = *((unsigned __int16 *)v1 + 5);
    v11 = (_BYTE *)g_CB_GDbg++;
    *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v10);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_AGPS_Ref_Pos(uint64_t result)
{
  uint64_t v1;
  char *v2;
  char v3;
  uint64_t v4;
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  char *v9;
  char v10;
  uint64_t v11;
  _BYTE *v12;

  if (g_Logging_Cfg)
  {
    v1 = result;
    v2 = (char *)g_CB_GDbg;
    v3 = 36;
    v4 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v2 + 1);
      *v2 = v3;
      v2 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v2 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v3 = str_16_1[v4++];
    }
    while (v4 != 6);
    sprintf_gR8(&g_CB_GDbg, *(double *)(result + 8));
    sprintf_gR8(&g_CB_GDbg, *(double *)(v1 + 16));
    sprintf_gR8(&g_CB_GDbg, *(double *)(v1 + 24));
    sprintf_gR8(&g_CB_GDbg, *(double *)(v1 + 32));
    v5 = *(__int16 *)(v1 + 40);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v5);
    v7 = *(unsigned __int8 *)(v1 + 42);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v7);
    sprintf_gR8(&g_CB_GDbg, *(double *)(v1 + 48));
    sprintf_gR8(&g_CB_GDbg, *(double *)(v1 + 56));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(v1 + 64));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(v1 + 68));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)v1);
    v9 = (char *)g_CB_GDbg;
    v10 = 32;
    v11 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v9 + 1);
      *v9 = v10;
      v9 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v9 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v10 = str_17_0[v11++];
    }
    while (v11 != 4);
    sprintf_1X((char **)&g_CB_GDbg, *(_QWORD *)(v1 + 72));
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_AGNSS_Time_Model(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  _BYTE *v13;
  unsigned int v14;
  _BYTE *v15;
  unsigned int v16;
  _BYTE *v17;
  unsigned int v18;
  _BYTE *v19;
  _BYTE *v20;

  if (g_Logging_Cfg)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v3 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v4 = str_18_0[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_3d(&g_CB_GDbg, v5);
    v6 = v1[1];
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v6);
    v8 = *((unsigned __int16 *)v1 + 4);
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_4d(&g_CB_GDbg, v8);
    sprintf_sp11d(&g_CB_GDbg, v1[3]);
    v10 = v1[4];
    v11 = (_BYTE *)g_CB_GDbg++;
    *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_8d(&g_CB_GDbg, v10);
    v12 = *((char *)v1 + 20);
    v13 = (_BYTE *)g_CB_GDbg++;
    *v13 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_3d(&g_CB_GDbg, v12);
    v14 = *((char *)v1 + 21);
    v15 = (_BYTE *)g_CB_GDbg++;
    *v15 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v14);
    v16 = v1[6];
    v17 = (_BYTE *)g_CB_GDbg++;
    *v17 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v16);
    v18 = *((__int16 *)v1 + 11);
    v19 = (_BYTE *)g_CB_GDbg++;
    *v19 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_6d(&g_CB_GDbg, v18);
    sprintf_sp1d(&g_CB_GDbg, *((unsigned __int8 *)v1 + 28));
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_AGNSS_Not_Brd_SV_List(uint64_t result, unsigned int a2, int *a3, unsigned __int8 *a4)
{
  int v7;
  char *v8;
  uint64_t v9;
  char v10;
  const char *v11;
  char v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  _BYTE *v23;
  _BYTE v24[15];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (!g_Logging_Cfg)
    return result;
  v7 = result;
  v8 = *(char **)&dword_257A47948;
  if (*(_QWORD *)&dword_257A47948 != g_CB_GDbg)
  {
    GNSS_GNB_Debug_Ctl((uint64_t)&g_CB_GDbg);
    v8 = (char *)g_CB_GDbg;
  }
  v9 = 0;
  v10 = 36;
  do
  {
    g_CB_GDbg = (uint64_t)(v8 + 1);
    *v8 = v10;
    v8 = (char *)g_CB_GDbg;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
    {
      v8 = (char *)qword_257A47950;
      g_CB_GDbg = qword_257A47950;
    }
    v10 = str_19_0[++v9];
  }
  while (v9 != 4);
  if (!v7)
  {
    v11 = " L1 ";
LABEL_13:
    v12 = *v11;
    if (*v11)
    {
      v13 = (unsigned __int8 *)(v11 + 1);
      do
      {
        g_CB_GDbg = (uint64_t)(v8 + 1);
        *v8 = v12;
        v8 = (char *)g_CB_GDbg;
        if (g_CB_GDbg >= (unint64_t)qword_257A47958)
        {
          v8 = (char *)qword_257A47950;
          g_CB_GDbg = qword_257A47950;
        }
        v14 = *v13++;
        v12 = v14;
      }
      while (v14);
    }
    goto LABEL_18;
  }
  if (v7 == 1)
  {
    v11 = " L5 ";
    goto LABEL_13;
  }
LABEL_18:
  sprintf_sp1d(&g_CB_GDbg, a2);
  if (a2)
  {
    v15 = 0;
    v16 = a2;
    do
    {
      v17 = (_BYTE *)g_CB_GDbg++;
      *v17 = 32;
      v18 = (_BYTE *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v18 = (_BYTE *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v19 = *a3;
      if (*a3 > 15)
      {
        if (v19 == 128)
          v20 = 78;
        else
          v20 = v15;
        if (v19 == 64)
          v20 = 66;
        if (v19 == 32)
          v21 = 82;
        else
          v21 = v15;
        if (v19 == 16)
          v21 = 81;
        if (v19 <= 63)
          v15 = v21;
        else
          v15 = v20;
      }
      else
      {
        switch(v19)
        {
          case 0:
            EvCrt_Illegal_switch_case("Debug_Log_AGNSS_Not_Brd_SV_List", 0x7DFu);
            v18 = (_BYTE *)g_CB_GDbg;
            v15 = 88;
            break;
          case 1:
            v15 = 71;
            break;
          case 2:
            v15 = 69;
            break;
          case 4:
            v15 = 83;
            break;
          case 8:
            v15 = 77;
            break;
          default:
            break;
        }
      }
      g_CB_GDbg = (uint64_t)(v18 + 1);
      *v18 = v15;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
        g_CB_GDbg = qword_257A47950;
      v22 = *a4++;
      sprintf1da(&g_CB_GDbg, v22, v24, 0, 0);
      ++a3;
      --v16;
    }
    while (v16);
  }
  v23 = (_BYTE *)g_CB_GDbg++;
  *v23 = 10;
  if (g_CB_GDbg >= (unint64_t)qword_257A47958)
    g_CB_GDbg = qword_257A47950;
  return GNB_Debug_Flush_Check();
}

uint64_t Debug_Log_GPS_RTI_Bad_SV_List(uint64_t result, unsigned int a2, int *a3, unsigned __int8 *a4)
{
  int v7;
  char *v8;
  uint64_t v9;
  char v10;
  const char *v11;
  char v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  int v18;
  char v19;
  unsigned int v20;
  _BYTE *v21;
  _BYTE v22[15];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (!g_Logging_Cfg)
    return result;
  v7 = result;
  v8 = *(char **)&dword_257A47948;
  if (*(_QWORD *)&dword_257A47948 != g_CB_GDbg)
  {
    GNSS_GNB_Debug_Ctl((uint64_t)&g_CB_GDbg);
    v8 = (char *)g_CB_GDbg;
  }
  v9 = 0;
  v10 = 36;
  do
  {
    g_CB_GDbg = (uint64_t)(v8 + 1);
    *v8 = v10;
    v8 = (char *)g_CB_GDbg;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
    {
      v8 = (char *)qword_257A47950;
      g_CB_GDbg = qword_257A47950;
    }
    v10 = str_22_0[++v9];
  }
  while (v9 != 4);
  if (!v7)
  {
    v11 = " L1 ";
LABEL_13:
    v12 = *v11;
    if (*v11)
    {
      v13 = (unsigned __int8 *)(v11 + 1);
      do
      {
        g_CB_GDbg = (uint64_t)(v8 + 1);
        *v8 = v12;
        v8 = (char *)g_CB_GDbg;
        if (g_CB_GDbg >= (unint64_t)qword_257A47958)
        {
          v8 = (char *)qword_257A47950;
          g_CB_GDbg = qword_257A47950;
        }
        v14 = *v13++;
        v12 = v14;
      }
      while (v14);
    }
    goto LABEL_18;
  }
  if (v7 == 1)
  {
    v11 = " L5 ";
    goto LABEL_13;
  }
LABEL_18:
  sprintf_sp1d(&g_CB_GDbg, a2);
  if (a2)
  {
    v15 = a2;
    do
    {
      v16 = (_BYTE *)g_CB_GDbg++;
      *v16 = 32;
      v17 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v17 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v18 = *a3;
      v19 = 88;
      if (*a3 > 15)
      {
        if (v18 == 64)
          v19 = 78;
        else
          v19 = 88;
        if (v18 == 32)
          v19 = 66;
        if (v18 == 16)
          v19 = 69;
      }
      else
      {
        switch(v18)
        {
          case 0:
            EvCrt_Illegal_switch_case("Debug_Log_GPS_RTI_Bad_SV_List", 0x819u);
            v17 = (char *)g_CB_GDbg;
            v19 = 88;
            break;
          case 1:
            v19 = 71;
            break;
          case 2:
            v19 = 82;
            break;
          case 4:
            v19 = 81;
            break;
          case 8:
            v19 = 83;
            break;
          default:
            break;
        }
      }
      g_CB_GDbg = (uint64_t)(v17 + 1);
      *v17 = v19;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
        g_CB_GDbg = qword_257A47950;
      v20 = *a4++;
      sprintf1da(&g_CB_GDbg, v20, v22, 0, 0);
      ++a3;
      --v15;
    }
    while (v15);
  }
  v21 = (_BYTE *)g_CB_GDbg++;
  *v21 = 10;
  if (g_CB_GDbg >= (unint64_t)qword_257A47958)
    g_CB_GDbg = qword_257A47950;
  return GNB_Debug_Flush_Check();
}

uint64_t Debug_Log_GPS_EE_Start_Time(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  char *v4;
  char v5;
  _BYTE *v6;
  _BYTE *v7;

  if (g_Logging_Cfg)
  {
    v3 = 0;
    v4 = (char *)g_CB_GDbg;
    v5 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v4 + 1);
      *v4 = v5;
      v4 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v4 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v5 = str_23_0[++v3];
    }
    while (v3 != 4);
    g_CB_GDbg = (uint64_t)(v4 + 1);
    *v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, result);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, a2);
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_AGLON_ChanNum(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  char *v4;
  char v5;
  _BYTE *v6;
  _BYTE *v7;

  if (g_Logging_Cfg)
  {
    v3 = 0;
    v4 = (char *)g_CB_GDbg;
    v5 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v4 + 1);
      *v4 = v5;
      v4 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v4 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v5 = str_24_0[++v3];
    }
    while (v3 != 4);
    g_CB_GDbg = (uint64_t)(v4 + 1);
    *v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, result);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, a2);
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_ExtA_DMS(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  _BYTE *v10;

  if (g_Logging_Cfg)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v3 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v4 = str_25_0[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v5);
    v6 = v1[1];
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v6);
    v8 = v1[2];
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v8);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_ExtA_UAC(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  _BYTE *v10;

  if (g_Logging_Cfg)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v3 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v4 = str_26_1[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v5);
    v6 = v1[1];
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v6);
    v8 = v1[2];
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v8);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_ExtA_FIV(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  _BYTE *v10;

  if (g_Logging_Cfg)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v3 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v4 = str_27_1[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v5);
    v6 = v1[1];
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v6);
    v8 = v1[2];
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v8);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_ExtA_SES(uint64_t result)
{
  uint64_t v1;
  char *v2;
  char v3;
  _BYTE *v4;

  if (g_Logging_Cfg)
  {
    v1 = 0;
    v2 = (char *)g_CB_GDbg;
    v3 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v2 + 1);
      *v2 = v3;
      v2 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v2 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v3 = str_28_1[++v1];
    }
    while (v1 != 4);
    g_CB_GDbg = (uint64_t)(v2 + 1);
    *v2 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, result);
    v4 = (_BYTE *)g_CB_GDbg++;
    *v4 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_ExtA_Alt(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  if (g_Logging_Cfg)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v3 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v4 = str_29_1[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v5);
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 1));
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 2));
    v6 = v1[6];
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v6);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_ExtA_MapV(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  uint64_t i;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  _BYTE *v13;
  unsigned int v14;
  _BYTE *v15;
  unsigned int v16;
  _BYTE *v17;
  unsigned int v18;
  _BYTE *v19;
  _BYTE *v20;

  if (g_Logging_Cfg)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v3 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v4 = str_30[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v5);
    for (i = 2; i != 8; i += 2)
    {
      v7 = (_BYTE *)g_CB_GDbg++;
      *v7 = 32;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
        g_CB_GDbg = qword_257A47950;
      sprintf_11f9(&g_CB_GDbg, *(double *)&v1[i]);
    }
    v8 = *((unsigned __int8 *)v1 + 32);
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v8);
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 5));
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 6));
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 7));
    v10 = *((unsigned __int8 *)v1 + 64);
    v11 = (_BYTE *)g_CB_GDbg++;
    *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v10);
    v12 = *((unsigned __int8 *)v1 + 65);
    v13 = (_BYTE *)g_CB_GDbg++;
    *v13 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v12);
    v14 = *((unsigned __int8 *)v1 + 66);
    v15 = (_BYTE *)g_CB_GDbg++;
    *v15 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v14);
    v16 = *((unsigned __int8 *)v1 + 67);
    v17 = (_BYTE *)g_CB_GDbg++;
    *v17 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v16);
    v18 = *((unsigned __int8 *)v1 + 68);
    v19 = (_BYTE *)g_CB_GDbg++;
    *v19 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v18);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_ExtA_SpdC(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  if (g_Logging_Cfg)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v3 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v4 = str_31[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v5);
    v6 = v1[1];
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v6);
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 1));
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 2));
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_ExtA_AT_Vel(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  _BYTE *v6;

  if (g_Logging_Cfg)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v3 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v4 = str_32_0[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v5);
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 1));
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 2));
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_ExtA_V_Vel(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  _BYTE *v6;

  if (g_Logging_Cfg)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v3 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v4 = str_33_0[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v5);
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 1));
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 2));
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_ExtA_Heading(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  _BYTE *v6;

  if (g_Logging_Cfg)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v3 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v4 = str_34_0[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v5);
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 1));
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 2));
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_ExtA_Tunnel_End_Point(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  _BYTE *v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  if (g_Logging_Cfg)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v3 = (char *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      v4 = str_35_0[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v5);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_11f9(&g_CB_GDbg, *((double *)v1 + 1));
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_11f9(&g_CB_GDbg, *((double *)v1 + 2));
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 3));
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 4));
    v8 = *((__int16 *)v1 + 20);
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v8);
    v10 = *((unsigned __int8 *)v1 + 42);
    v11 = (_BYTE *)g_CB_GDbg++;
    *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    sprintf_2d(&g_CB_GDbg, v10);
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 6));
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 7));
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      g_CB_GDbg = qword_257A47950;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

void SB_SBAS_PrePos(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v7;
  _BYTE *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t i;
  char v32;
  char v33;
  unsigned __int8 v34;
  uint64_t j;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v43;
  int v44;
  int v45[2];
  int v46;
  _BYTE v47[80];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int16 v51;
  _DWORD v52[3];
  _BYTE v53[48];
  _BYTE v54[40];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v7 = (_BYTE *)(a5 + 5548);
  if (*(_BYTE *)(a3 + 25) && *(_BYTE *)a1)
  {
    memset(v54, 0, 39);
    memset(v53, 0, 39);
    if (*(_DWORD *)(a2 + 208) == *(_DWORD *)(a3 + 1756))
      *(_BYTE *)(a1 + 48) = 0;
    v44 = (int)*(double *)(a1 + 16) + 604800 * *(__int16 *)(a1 + 6);
    v8 = (_BYTE *)(a5 + 8823);
    v9 = (unsigned __int8 *)(a5 + 8696);
    *(_OWORD *)(a5 + 8696) = 0uLL;
    *(_OWORD *)(a5 + 8712) = 0uLL;
    *(_OWORD *)(a5 + 8728) = 0uLL;
    *(_OWORD *)(a5 + 8744) = 0uLL;
    *(_OWORD *)(a5 + 8760) = 0uLL;
    *(_OWORD *)(a5 + 8776) = 0uLL;
    *(_OWORD *)(a5 + 8792) = 0uLL;
    *(_OWORD *)(a5 + 8808) = 0uLL;
    *(_WORD *)(a5 + 8824) = 0;
    *(_DWORD *)(a5 + 5544) = 0;
    *v7 = 0;
    *(_QWORD *)(a5 + 5549) = 0;
    *(_QWORD *)(a5 + 5569) = 0;
    v10 = 9;
    do
    {
      *(_DWORD *)(a5 + 5565) = 0;
      *(_QWORD *)(a5 + 5557) = 0;
      *(_QWORD *)(a5 + 5577) = 0;
      *(_QWORD *)(a5 + 5582) = 0;
      --v10;
    }
    while (v10);
    v11 = (unsigned __int8 *)(a5 + 8822);
    v36 = (unsigned __int8 *)(a5 + 8705);
    *(_QWORD *)(a5 + 6186) = -1;
    *(_QWORD *)&v12 = -1;
    *((_QWORD *)&v12 + 1) = -1;
    *(_OWORD *)(a5 + 6171) = v12;
    *(_OWORD *)(a5 + 6155) = v12;
    v37 = a2 + 136;
    v38 = a1 + 24;
    v13 = a4 + 34368;
    v14 = 18;
    v43 = a6;
    do
    {
      if (*v11 > 8u)
        break;
      if (*(_DWORD *)(v13 + 176) == 1)
      {
        v15 = *(unsigned __int8 *)(v13 + 188);
        v16 = (v15 - 120);
        if (v16 <= 0x26)
        {
          v50 = 0u;
          memset(v47, 0, 32);
          v17 = *(_OWORD *)(v13 + 16);
          *(_OWORD *)&v47[8] = *(_OWORD *)v13;
          v18 = v15 + 59;
          memset(&v47[40], 0, 40);
          v51 = 0;
          v48 = 0u;
          v49 = 0u;
          v52[0] = 0;
          *(_DWORD *)((char *)v52 + 3) = 0;
          DWORD2(v50) = 2;
          *(_OWORD *)&v47[24] = v17;
          *(_OWORD *)&v47[40] = *(_OWORD *)(v13 + 32);
          *(_OWORD *)&v47[56] = *(_OWORD *)(v13 + 96);
          v19 = (_BYTE *)(a6 + v15 + 59);
          v20 = *v19;
          if (v20 == 157 || (_DWORD)v16 == *(unsigned __int8 *)(a1 + 48))
          {
            Comp_AzEl(v38, v37, (uint64_t)v47, v19, (_WORD *)(a6 + 2 * v18 + 218), (_DWORD *)(a6 + 40 * v18 + 656), (int *)(a6 + 40 * v18 + 9376));
            a6 = v43;
            LOBYTE(v20) = *(_BYTE *)(v43 + v18);
          }
          if ((char)v20 < 1)
          {
            ++v7[3277];
            v21 = v53;
          }
          else
          {
            Comp_AA((uint64_t)v47, v20, *(__int16 *)(a6 + 2 * v18 + 218), a1, a2, a5, v15);
            a6 = v43;
            v21 = v54;
          }
          v21[v16] = 1;
        }
      }
      v13 += 192;
      --v14;
    }
    while (v14);
    v22 = 0;
    v23 = 16536;
    v24 = 7816;
    v25 = 576;
    v26 = a2;
    do
    {
      if (*v11 > 8u)
        break;
      v46 = 0;
      *(_QWORD *)v45 = 0;
      if (!v54[v22] && !v53[v22])
      {
        v39 = v22 + 120;
        if (Core_Load_SBAS_Apx((v22 + 120), &v44, v45))
        {
          v50 = 0u;
          *(_QWORD *)v47 = 0;
          v51 = 0;
          v48 = 0u;
          v49 = 0u;
          memset(&v47[32], 0, 48);
          v52[0] = 0;
          *(_DWORD *)((char *)v52 + 3) = 0;
          v27.i64[0] = v45[0];
          v27.i64[1] = v45[1];
          *(float64x2_t *)&v47[8] = vcvtq_f64_s64(v27);
          DWORD2(v50) = 2;
          *(double *)&v47[24] = (double)v46;
          v28 = v43;
          v29 = *(unsigned __int8 *)(v43 + v22 + 179);
          if (v29 == 157 || v22 == *(unsigned __int8 *)(a1 + 48))
          {
            Comp_AzEl(v38, v37, (uint64_t)v47, (_BYTE *)(v43 + v22 + 179), (_WORD *)(v43 + v25), (_DWORD *)(v43 + v24), (int *)(v43 + v23));
            v28 = v43;
            LOBYTE(v29) = *(_BYTE *)(v43 + v22 + 179);
          }
          if ((char)v29 < 1)
          {
            v53[v22] = 1;
            ++v7[3277];
            v26 = a2;
          }
          else
          {
            v26 = a2;
            Comp_AA((uint64_t)v47, v29, *(__int16 *)(v28 + 2 * v22 + 576), a1, a2, a5, (v22 + 120));
            v54[v22] = 1;
          }
          if (*(_DWORD *)(a3 + 1756) == *(_DWORD *)(v26 + 208))
            EvLog_d("SBAS_PrePos: Loaded NV almanac ", v39);
        }
        else if (*(_DWORD *)(a3 + 1756) == *(_DWORD *)(v26 + 208))
        {
          EvLog_d("SBAS_PrePos: Failed to load NV almanac ", v39);
        }
      }
      ++v22;
      v23 += 40;
      v24 += 40;
      v25 += 2;
    }
    while (v22 != 39);
    v30 = 0;
    while (!*(_BYTE *)(*(_QWORD *)(a3 + 1056) + v30))
    {
      if (v53[v30])
        goto LABEL_39;
LABEL_40:
      if (++v30 == 39)
      {
        for (i = 0; i != 39; ++i)
        {
          if (!v54[i] && !v53[i])
            *(_BYTE *)(a5 + (*v8)++ + 8705) = i + 120;
        }
        v32 = *(_BYTE *)(a1 + 48);
        if ((v32 + 1) <= 0x26u)
          v33 = v32 + 1;
        else
          v33 = 0;
        *(_BYTE *)(a1 + 48) = v33;
        return;
      }
    }
    ++v7[3277];
    v53[v30] = 1;
LABEL_39:
    SB_SBAS_Remove_SV_in_List((v30 + 120), v7 + 3274, v9, 9u);
    SB_SBAS_Remove_SV_in_List((v30 + 120), v7 + 3275, v36, 0x27u);
    goto LABEL_40;
  }
  *(_DWORD *)(a5 + 8822) = 0;
  if (*(_BYTE *)(a3 + 25) && !*(_BYTE *)a1)
  {
    v34 = 0;
    for (j = 0; j != 39; ++j)
    {
      if (!*(_BYTE *)(*(_QWORD *)(a3 + 1056) + j))
      {
        *(_BYTE *)(a5 + v34 + 8705) = j + 120;
        v34 = *(_BYTE *)(a5 + 8823) + 1;
        *(_BYTE *)(a5 + 8823) = v34;
      }
    }
  }
  memset((void *)(a6 + 179), 157, 18);
  memset_pattern16((void *)(a6 + 576), &unk_24BC09190, 0x24uLL);
}

void Comp_AA(uint64_t a1, char a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  int v13;
  _BYTE *v14;
  unsigned int v15;
  double v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int v29;
  __int16 v30;
  double v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  double v40[3];
  float64x2_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v13 = *(_DWORD *)(a1 + 120);
  v14 = (_BYTE *)(a6 + 8822);
  v15 = *(unsigned __int8 *)(a6 + 8822) + 114;
  v41 = 0uLL;
  v42 = 0;
  v16 = Comp_SVrange_Sag_Corr(&v41, v40, (float64x2_t *)(a4 + 24), (float64x2_t *)(a1 + 8));
  v17 = 0;
  v18 = (int)((*(double *)(a5 + 96) - *(double *)(a1 + 56)) * 299792458.0);
  memset(v40, 0, sizeof(v40));
  do
  {
    v40[v17 + 2] = *(double *)(a1 + 48 + 8 * v17) - *(double *)(a5 + 48 + 8 * v17);
    v19 = v17 + 3;
    --v17;
  }
  while (v19 > 1);
  v20 = 0;
  v21 = (int)v16;
  v22 = 0.0;
  do
  {
    v22 = v22 + v41.f64[v20] * v40[v20];
    ++v20;
  }
  while (v20 != 3);
  v23 = a6 + 48 * v15;
  v24 = (v22 + (*(double *)(a5 + 104) - *(double *)(a1 + 64)) * 299792458.0) / -0.190293673;
  v25 = (double)(v18 + v21) / 299792458.0;
  v26 = *(double *)(a5 + 128) - v25;
  *(_DWORD *)(v23 + 72) = *(_DWORD *)(a5 + 208);
  *(_BYTE *)(v23 + 76) = 1;
  *(_BYTE *)(v23 + 82) = a7;
  *(_BYTE *)(v23 + 80) = 7;
  *(_BYTE *)(v23 + 84) = v13 == 1;
  *(_BYTE *)(v23 + 85) = v13 == 2;
  *(_WORD *)(v23 + 86) = 256;
  *(_WORD *)(v23 + 88) = (int)(v25 * 2000.0 + 0.5);
  *(_DWORD *)(v23 + 90) = 200;
  v27 = -0.5;
  if (v24 > 0.0)
    v27 = 0.5;
  v28 = v24 + v27;
  v29 = (int)v28;
  if (v28 < -2147483650.0)
    LOWORD(v29) = 0;
  if (v28 <= 2147483650.0)
    v30 = v29;
  else
    v30 = -1;
  v31 = v26 / 1.5;
  if (v26 / 1.5 <= 0.0)
    v31 = v26 / 1.5 + -1.0;
  v32 = (int)v31;
  v33 = a6 + 48 * v15;
  *(_DWORD *)(v33 + 100) = (int)v31;
  v34 = v33 + 100;
  *(_WORD *)(v34 - 6) = v30;
  *(_BYTE *)(v34 - 4) = -1;
  *(_WORD *)(v34 - 2) = 5115;
  v35 = (v26 + (double)(int)v31 * -1.5) * 1023000.0;
  *(_DWORD *)(v34 + 4) = (int)v35;
  *(_WORD *)(v34 + 8) = vcvtd_n_s64_f64(v35 - (double)(int)v35, 0x10uLL);
  if (v32 < 0)
    *(_DWORD *)v34 = v32 + 403200;
  v36 = a6 + 48 * v15;
  *(_WORD *)(v36 + 110) = 0;
  *(_BYTE *)(v36 + 112) = -1;
  *(_BYTE *)(v36 + 113) = a2;
  v37 = a3 >> 1;
  if (a3 >= 0x169)
    LOBYTE(v37) = -1;
  *(_BYTE *)(v36 + 114) = v37;
  *(_BYTE *)(v36 + 115) = 0;
  *(_WORD *)(v36 + 116) = 0;
  if (a7 >= 0x78)
  {
    if (v13 == 1)
      v38 = 1;
    else
      v38 = 2;
    *(_BYTE *)(a6 + a7 - 120 + 8783) += v38;
    v39 = *v14;
    *(_BYTE *)(a6 + a7 + 59 + 5976) = v39 + 114;
    *(_BYTE *)(a6 + v39 + 8696) = a7;
    ++*v14;
  }
}

uint64_t SB_SBAS_Remove_SV_in_List(uint64_t result, unsigned __int8 *a2, unsigned __int8 *a3, unsigned int a4)
{
  unsigned int v4;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 v11;

  if (a2 && a3)
  {
    v4 = *a2;
    if (*a2 && v4 <= a4)
    {
      v6 = 0;
      v7 = 0;
      do
      {
        while (a3[v6] == (_DWORD)result)
        {
          a3[v6] = 0;
          v8 = *a2;
          ++v6;
          v7 = 1;
          LOBYTE(v4) = *a2;
          if (v6 >= v8)
            goto LABEL_14;
        }
        ++v6;
      }
      while (v6 < v4);
      LOBYTE(v8) = v4;
      if ((v7 & 1) == 0)
        return result;
LABEL_14:
      if ((_BYTE)v8)
      {
        v9 = 0;
        LODWORD(v10) = 0;
        v11 = v8;
        do
        {
          if (a3[v9])
          {
            a3[v10] = a3[v9];
            LODWORD(v10) = v10 + 1;
            v11 = *a2;
          }
          ++v9;
        }
        while (v9 < v11);
      }
      else
      {
        v11 = 0;
        LODWORD(v10) = 0;
      }
      if (v10 < v11)
      {
        v10 = v10;
        do
        {
          if (a3[v10])
          {
            a3[v10] = 0;
            v11 = *a2;
          }
          ++v10;
        }
        while (v10 < v11);
      }
      *a2 = v11 - 1;
    }
  }
  return result;
}

char *GNSS_Write_GNB_Ctrl(char *result)
{
  char *v1;
  char *v2;
  uint64_t v3;
  unsigned __int16 v4;
  unsigned int v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;

  if (result)
  {
    v1 = result;
    v3 = *(_QWORD *)result;
    v2 = (char *)*((_QWORD *)result + 1);
    if (v2 != *(char **)result)
    {
      if ((unint64_t)v2 > *(_QWORD *)result)
        v3 = *((_QWORD *)result + 3);
      v4 = v3 - (_WORD)v2;
      v5 = GN_GPS_Write_GNB_Ctrl((unsigned __int16)(v3 - (_WORD)v2), v2);
      result = GNB_Debug_BlockMove(*((char **)v1 + 1), v5);
      v6 = (char *)(*((_QWORD *)v1 + 1) + v5);
      *((_QWORD *)v1 + 1) = v6;
      if ((unint64_t)v6 >= *((_QWORD *)v1 + 3))
      {
        v6 = (char *)*((_QWORD *)v1 + 2);
        *((_QWORD *)v1 + 1) = v6;
        if (v5 == v4)
        {
          v7 = GN_GPS_Write_GNB_Ctrl((unsigned __int16)(*(_WORD *)v1 - (_WORD)v6), v6);
          result = GNB_Debug_BlockMove(*((char **)v1 + 1), v7);
          v6 = (char *)(*((_QWORD *)v1 + 1) + v7);
          *((_QWORD *)v1 + 1) = v6;
        }
      }
      if (v6 == *(char **)v1)
      {
        v8 = *((_QWORD *)v1 + 2);
        *(_QWORD *)v1 = v8;
        *((_QWORD *)v1 + 1) = v8;
      }
    }
  }
  return result;
}

uint64_t G5K_ME_Send_WakeUp(char **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int i;
  char v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unsigned __int8 v18;
  char v19;
  char v20;
  unint64_t v21;
  char *v22;
  char *v23;

  v4 = (*a1)++;
  *v4 = 10;
  v5 = *a1;
  if (*a1 >= a1[3])
    v5 = a1[2];
  *a1 = v5 + 1;
  *v5 = 35;
  v6 = *a1;
  if (*a1 >= a1[3])
    v6 = a1[2];
  v7 = 0;
  v8 = 87;
  v9 = v6;
  do
  {
    *a1 = v9 + 1;
    *v9 = v8;
    v9 = *a1;
    if (*a1 >= a1[3])
    {
      v9 = a1[2];
      *a1 = v9;
    }
    v8 = str_10[++v7];
  }
  while (v7 != 4);
  v10 = mach_continuous_time();
  sprintf_sp1u(a1, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10));
  v11 = (*a1)++;
  *v11 = 32;
  v12 = *a1;
  if (*a1 >= a1[3])
    v12 = a1[2];
  for (i = 0; i != 10; ++i)
  {
    v14 = 91;
    v15 = 1u;
    do
    {
      *a1 = v12 + 1;
      *v12 = v14;
      v12 = *a1;
      if (*a1 >= a1[3])
      {
        v12 = a1[2];
        *a1 = v12;
      }
      v14 = str_1_3[v15++];
    }
    while (v15 != 10);
  }
  *a1 = v12 + 1;
  *v12 = 32;
  v16 = *a1;
  v17 = (unint64_t)a1[3];
  if ((unint64_t)*a1 >= v17)
  {
    v16 = a1[2];
    *a1 = v16;
  }
  if (v6 == v16)
  {
    v21 = 0;
  }
  else
  {
    v18 = 0;
    do
    {
      v20 = *v6++;
      v19 = v20;
      if ((unint64_t)v6 >= v17)
        v6 = a1[2];
      v18 += v19;
    }
    while (v6 != v16);
    v21 = v18;
  }
  *a1 = v16 + 1;
  *v16 = 38;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  sprintf_02x(a1, v21);
  v22 = (*a1)++;
  *v22 = 10;
  v23 = *a1;
  if (*a1 >= a1[3])
    v23 = a1[2];
  *a1 = v23 + 1;
  *v23 = 10;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  GNSS_Write_GNB_Ctrl((char *)a1);
  return GNSS_GNB_Debug_Ctl(a2);
}

uint64_t G5K_ME_Send_Sleep(char *a1, char **a2, unsigned int a3, unsigned int a4, int a5)
{
  char *v10;
  char *v11;
  char v12;
  uint64_t v13;
  char *v14;
  unsigned __int8 v16[4];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  GNSS_Write_GNB_Ctrl(a1);
  GNSS_GNB_Debug_Ctl((uint64_t)a2);
  if (g_Logging_Cfg >= 1)
  {
    v10 = (*a2)++;
    *v10 = 10;
    v11 = *a2;
    if (*a2 >= a2[3])
      v11 = a2[2];
    v12 = 35;
    v13 = 1u;
    do
    {
      *a2 = v11 + 1;
      *v11 = v12;
      v11 = *a2;
      if (*a2 >= a2[3])
      {
        v11 = a2[2];
        *a2 = v11;
      }
      v12 = str_2_3[v13++];
    }
    while (v13 != 8);
    sprintf_sp1u(a2, a3);
    sprintf_sp1u(a2, a4);
    v14 = (*a2)++;
    *v14 = 10;
    if (*a2 >= a2[3])
      *a2 = a2[2];
  }
  if (a5)
  {
    v17 = 0;
    v16[0] = BYTE1(a3);
    v16[1] = a3;
    v16[2] = BYTE1(a4);
    v16[3] = a4;
    STEU_Encode_c((char **)a1, 83, 12, v16);
  }
  GNSS_Write_GNB_Ctrl(a1);
  return GNSS_GNB_Debug_Ctl((uint64_t)a2);
}

uint64_t G5K_ME_Send_Ctrl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  double i;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  double v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  char v50;
  unint64_t v51;
  double v52;
  double v53;
  int v54;
  double v55;
  double v56;
  double j;
  uint64_t v58;
  _WORD *v59;
  int v60;
  double v61;
  unsigned int v62;
  double v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  unsigned int v72;
  int v73;
  unint64_t v74;
  _WORD *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  int v79;
  double v80;
  double v81;
  unint64_t v82;
  double v83;
  double v84;
  double v85;
  unint64_t v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  unint64_t v91;
  char v92;
  char v93;
  char v94;
  char v95;
  int Constell_Prn;
  unint64_t v97;
  char v98;
  char v99;
  int v100;
  unint64_t v101;
  char v102;
  char v103;
  int v104;
  _BYTE *v105;
  _BYTE *v106;
  _BYTE *v107;
  unint64_t v108;
  char v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  unint64_t v113;
  char v114;
  _BYTE *v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t k;
  uint64_t v119;
  _BYTE *v120;
  _BYTE *v121;
  unint64_t v122;
  char v123;
  unint64_t v124;
  char v125;
  char v126;
  unint64_t v127;
  char v128;
  _BYTE *v129;
  unint64_t v130;
  char v131;
  unint64_t v132;
  char v133;
  unint64_t v134;
  char v135;
  _BYTE *v136;
  unint64_t v137;
  char v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  char v142;
  _BYTE *v143;
  unint64_t v144;
  char v145;
  unint64_t v146;
  char v147;
  unint64_t v148;
  char v149;
  unint64_t v150;
  _BYTE *v151;
  unint64_t v152;
  _BYTE *v153;
  unint64_t v154;
  int v155;
  _BYTE *v156;
  unsigned __int8 v157;
  unint64_t v158;
  unsigned __int8 v159;
  signed __int8 v160;
  int v161;
  int v162;
  int v163;
  __int16 v164;
  int v165;
  int v166;
  int v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int32x4_t v175;
  int8x16_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  uint8x16_t v180;
  uint16x8_t v181;
  uint16x8_t v182;
  int v183;
  int v184;
  int v185;
  int v186;
  _BYTE *v187;
  uint64_t v188;
  int v189;
  BOOL v190;
  char v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  char v199;
  char v200;
  int v201;
  unsigned int v202;
  char v203;
  unsigned int v204;
  unsigned int v205;
  char v206;
  unsigned int v207;
  char v208;
  unsigned int v209;
  char v210;
  int v211;
  float64x2_t v212;
  float64x2_t v213;
  int8x8_t v214;
  int16x8_t v215;
  _BYTE *v216;
  uint64_t v218;
  _BYTE *v219;
  uint64_t v220;
  __int16 v221;
  char v222;
  char v223;
  char v224;
  int v225;
  uint64_t v228;
  _BYTE *v229;
  char v230;
  uint64_t v231;
  char v232;
  char v233;
  char v234;
  char v235;
  unint64_t v236;
  _BYTE v237[12];
  _BYTE v238[260];
  uint64_t v239;

  v239 = *MEMORY[0x24BDAC8D0];
  v10 = (_BYTE *)(*(_QWORD *)a1)++;
  *v10 = 10;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 24))
    *(_QWORD *)a1 = *(_QWORD *)(a1 + 16);
  v11 = (unsigned __int8 *)(a5 + 8592);
  v12 = *(unsigned int *)(a4 + 1656);
  v13 = *(_DWORD *)(a4 + 1652);
  if ((_DWORD)v12)
  {
    EvLog_nd("G5K_ME_Send_Ctrl: Fix_Int Updated ", 2, a3, *(unsigned int *)(a4 + 1652), v12);
    v13 = *(_DWORD *)(a4 + 1656);
    *(_QWORD *)(a4 + 1652) = v13;
  }
  v14 = *(_DWORD *)(*(_QWORD *)(p_api + 80) + 32);
  if (v13 >= 0x1F4)
    v15 = 100;
  else
    v15 = 50;
  v16 = -(int)API_Get_Est_ME_TTick();
  do
    v14 += v13;
  while (v16 + v14 <= v15);
  v18 = *(_DWORD *)(a4 + 1652);
  HIDWORD(v19) = 652835029 * v18;
  LODWORD(v19) = 652835029 * v18;
  if ((v19 >> 3) >= 0x418938 && 0x3E8 % v18)
  {
    v225 = 0;
    v221 = 0;
  }
  else
  {
    v20 = *(_QWORD *)(p_api + 80);
    LOWORD(v17) = *(_WORD *)(*(_QWORD *)(p_api + 72) + 2012);
    for (i = *(double *)(v20 + 48) - (*(double *)(v20 + 152) - (double)v17 * 0.000000001); i >= 604800.0; i = i + -604800.0)
      ;
    v22 = *(double *)(v20 + 184);
    while (i < 0.0)
      i = i + 604800.0;
    v23 = *(double *)(v20 + 872) / 299792458.0;
    v24 = *(_DWORD *)(v20 + 32);
    v25 = i + (double)*(__int16 *)(a4 + 1716) * 0.000000001;
    v26 = v25 - (double)(int)v25;
    v27 = (double)(v13 / 0x3E8u);
    if (v13 < 2000)
      v27 = 1.0;
    if (v26 >= 0.7)
      v27 = v27 + 1.0;
    v28 = (v22 + 1.0) * (v27 - v26) * 1000.0;
    v29 = vcvtd_n_u64_f64(v28 - (double)(int)v28, 0x10uLL);
    v225 = v24 + (int)v28;
    v221 = v29;
    if (v23 < 0.004)
    {
      v30 = v24 + (int)v28 - v14 + (v29 >> 15);
      v31 = v14 - v13 - ((int)v28 + v24 + (v29 >> 15));
      do
      {
        v32 = v30;
        v30 -= v13;
        v31 += v13;
      }
      while (v32 > 10);
      if (v13 < 500)
      {
        if (v32 < 0)
          v32 = 10;
      }
      else
      {
        v33 = 1 - v13;
        if (v32 > 1 - v13)
          v33 = v32;
        v34 = v33 + v31;
        v190 = v34 == 0;
        v35 = (v34 - (v34 != 0)) / v13;
        if (!v190)
          ++v35;
        v32 += v35 * v13;
        if (v32 <= -50)
          v32 = -50;
      }
      if (v32 >= 0)
        v36 = v32;
      else
        v36 = -v32;
      if (v36 <= 2 && v23 >= 0.0001)
        v32 = 0;
      v14 += v32;
    }
  }
  *(_DWORD *)(a3 + 556) = v14;
  G5K_ME_enc_n((char **)a1, v14, v18);
  *(_DWORD *)v238 = *(_DWORD *)a5;
  *(_WORD *)&v238[4] = *(_WORD *)(a5 + 4);
  *(_QWORD *)&v238[6] = *(_QWORD *)(a5 + 6);
  *(_DWORD *)&v238[14] = *(_DWORD *)(a5 + 16);
  *(_WORD *)&v238[18] = *(_WORD *)(a5 + 20);
  *(_WORD *)&v238[20] = *(_WORD *)(a5 + 14);
  *(_DWORD *)&v238[22] = *(_DWORD *)(a5 + 22);
  *(_WORD *)&v238[26] = *(_WORD *)(a5 + 26);
  *(_DWORD *)&v238[28] = *(_DWORD *)(a5 + 28);
  v38 = *(_DWORD *)(a5 + 56);
  v238[32] = *(_DWORD *)(a5 + 60);
  v238[33] = v38;
  v238[34] = v11[230] + v11[4];
  *(_DWORD *)&v238[35] = *(_DWORD *)(a5 + 36);
  v39 = *(_DWORD *)(a5 + 48);
  v238[39] = *(_DWORD *)(a5 + 44);
  *(_DWORD *)&v238[40] = v39;
  v238[44] = *(_BYTE *)(a5 + 52);
  *(_WORD *)&v238[45] = *(_WORD *)(a5 + 40);
  v238[47] = *(_BYTE *)(a5 + 68);
  *(_WORD *)&v238[48] = *(_WORD *)(a5 + 32);
  *(_QWORD *)v237 = &v238[50];
  STEU_Encode((char **)a1, 97, v238, (unint64_t *)v237);
  if (*(_QWORD *)v237 - (_QWORD)v238 != 51)
    gn_report_assertion_failure("ME_enc_a: Wrong Length!");
  v40 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
  if (v40 <= 0)
    v40 += *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16);
  v228 = a3;
  v229 = (_BYTE *)a4;
  if (v40 <= 0x1FF)
    GNSS_Write_GNB_Ctrl((char *)a1);
  GNB_Debug_Flush_Check();
  v42 = 0;
  v43 = 0;
  v44 = *((_QWORD *)&xmmword_257A47B18 + 1);
  do
  {
    if (*(__int16 *)(a5 + 2 * v42 + 6194) >= 1
      && (*(char *)(a5 + *(unsigned __int16 *)(a5 + 2 * v42 + 6194) - 1 + 5976) & 0x80000000) == 0)
    {
      v45 = *(unsigned __int8 *)(a5 + *(unsigned __int16 *)(a5 + 2 * v42 + 6194) - 1 + 5976);
      if (*(_BYTE *)(a5
                    + 48
                    * *(unsigned __int8 *)(a5 + *(unsigned __int16 *)(a5 + 2 * v42 + 6194) - 1 + 5976)
                    + 76))
      {
        v46 = a5 + 48 * *(unsigned __int8 *)(a5 + *(unsigned __int16 *)(a5 + 2 * v42 + 6194) - 1 + 5976);
        v49 = *(unsigned __int8 *)(v46 + 80);
        v48 = v46 + 80;
        v47 = v49;
        v50 = *(_BYTE *)(v48 + 6);
        if (*(_BYTE *)(v48 + 4))
          v50 |= 0x10u;
        if (*(_BYTE *)(v48 + 5))
          v50 |= 0x20u;
        *(double *)&v51 = (double)*(int *)(v48 + 24) * 0.000000977517107;
        v52 = *(double *)&v51 + (double)*(int *)(v48 + 20) * 1.5;
        LOWORD(v51) = *(_WORD *)(v48 + 28);
        v53 = v52 + (double)v51 * 1.49157273e-11;
        if ((_DWORD)v47 == 2)
        {
          v54 = *(char *)(v48 + 2);
          if ((*(_BYTE *)(v48 + 2) - 7) < 0xF2u)
            goto LABEL_99;
          v53 = v53
              + (double)(10800 - *(char *)(a5 + 52))
              + *(double *)(v44 + 8 * (v54 + 7) + 1848) * -0.00000000333564095;
          v55 = 86400.0;
        }
        else
        {
          if ((_DWORD)v47 == 4)
          {
            LOBYTE(v54) = *(_BYTE *)(v48 + 2);
            v53 = v53 + -14.0;
            if (*(_BYTE *)(v48 + 1) == 12)
              v53 = v53 + *(double *)(v44 + 1968) * -0.00000000333564095;
          }
          else
          {
            LOBYTE(v54) = *(_BYTE *)(v48 + 2);
          }
          v55 = 604800.0;
        }
        v56 = -0.0;
        if (v53 < 0.0)
          v56 = v55;
        for (j = v53 + v56; j > v55; j = j - v55)
          ;
        v58 = v47;
        switch((int)v47)
        {
          case 1:
            goto LABEL_78;
          case 2:
            LOBYTE(v54) = v54 + 8;
            v58 = 4;
            goto LABEL_78;
          case 3:
            LOBYTE(v54) = v54 + 64;
            v58 = 5;
            goto LABEL_78;
          case 4:
            LOBYTE(v54) = v54 + 0x80;
            v58 = 6;
            goto LABEL_78;
          case 5:
            v58 = 3;
            goto LABEL_78;
          case 6:
            LOBYTE(v54) = v54 + 100;
            v58 = 7;
            goto LABEL_78;
          case 7:
            v58 = 2;
LABEL_78:
            if (!(_BYTE)v54)
              goto LABEL_87;
            v238[0] = v58;
            v238[1] = v54;
            v238[2] = v50;
            v59 = (_WORD *)(a5 + 48 * v45);
            v60 = (int)((double)(__int16)v59[47] * 48.7151802);
            *(_WORD *)&v238[3] = v60;
            v61 = j * 1000.0;
            v238[5] = BYTE2(v60);
            v62 = v61 >> 24;
            *(_WORD *)&v238[6] = v61;
            v238[8] = v61 >> 16;
            v63 = v61 - (double)v61;
            v238[9] = v62;
            *(_WORD *)&v238[10] = vcvtd_n_s64_f64(v63, 0x10uLL);
            LOWORD(v63) = v59[45];
            *(_WORD *)&v238[12] = (int)((double)*(unint64_t *)&v63 * 1.90293673);
            v64 = (unsigned __int16)v59[49];
            if (v64 < 0x13FB)
            {
              v68 = 3439332561 * (v64 << 15);
              v66 = v68 >> 44;
              v67 = v68 >> 52;
            }
            else
            {
              if ((_DWORD)v47 == 3)
                v65 = 65280;
              else
                v65 = 0x8000;
              if ((_DWORD)v47 == 3)
                LOBYTE(v66) = -1;
              else
                LOBYTE(v66) = 0;
              LODWORD(v67) = v65 >> 8;
            }
            v238[14] = v66;
            v238[15] = v67;
            v69 = a5 + 48 * v45;
            *(double *)&v70 = (double)*(__int16 *)(v69 + 110) * 0.475734182;
            v71 = (int)*(double *)&v70;
            v238[16] = *(_BYTE *)(v69 + 96);
            LOBYTE(v70) = *(_BYTE *)(v69 + 112);
            v72 = ((double)v70 * 1.90293673);
            *(_WORD *)&v238[17] = v71;
            if (v72 >= 0xFF)
              LOBYTE(v72) = -1;
            v238[19] = v72;
            *(_WORD *)&v238[20] = *(_WORD *)(v69 + 113);
            *(_DWORD *)&v238[22] = 0;
            v238[26] = *(_BYTE *)(v69 + 115);
            *(_WORD *)&v238[27] = *(_WORD *)(v69 + 116);
            *(_QWORD *)v237 = &v238[29];
            STEU_Encode((char **)a1, 115, v238, (unint64_t *)v237);
            if (*(_QWORD *)v237 - (_QWORD)v238 != 30)
              gn_report_assertion_failure("ME_enc_s: Wrong Length!");
            if ((++v43 & 7) == 0)
            {
              v73 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
              if (v73 <= 0)
                v73 += *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16);
              if (v73 <= 0x1FF)
                GNSS_Write_GNB_Ctrl((char *)a1);
              GNB_Debug_Flush_Check();
            }
            break;
          default:
            v58 = 0;
LABEL_87:
            EvCrt_nd("ME_enc_s: Invalid Constel / SV ID ", 2, v41, v58, 0);
            break;
        }
      }
    }
LABEL_99:
    ++v42;
  }
  while (v42 != 218);
  if (v11[230])
  {
    v74 = 0;
    v75 = (_WORD *)(a5 + 5588);
    while (2)
    {
      if (!*((_BYTE *)v75 - 40))
        gn_report_assertion_failure("ME_enc_s: SBAS AA not valid!");
      v76 = *((unsigned __int8 *)v75 - 34);
      switch(*((_BYTE *)v75 - 36))
      {
        case 1:
          v77 = 1;
          goto LABEL_112;
        case 2:
          LOBYTE(v76) = v76 + 8;
          v77 = 4;
          goto LABEL_112;
        case 3:
          LOBYTE(v76) = v76 + 64;
          v77 = 5;
          goto LABEL_112;
        case 4:
          LOBYTE(v76) = v76 + 0x80;
          v77 = 6;
          goto LABEL_112;
        case 5:
          v77 = 3;
          goto LABEL_112;
        case 6:
          LOBYTE(v76) = v76 + 100;
          v77 = 7;
          goto LABEL_112;
        case 7:
          if (*((_BYTE *)v75 - 34))
          {
            v78 = *((_BYTE *)v75 - 30);
            if (*((_BYTE *)v75 - 32))
              v78 |= 0x10u;
            if (*((_BYTE *)v75 - 31))
              v78 |= 0x20u;
            v238[0] = 2;
            v238[1] = v76;
            v238[2] = v78;
            v79 = (int)((double)(__int16)*(v75 - 11) * 48.7151802);
            *(_WORD *)&v238[3] = v79;
            v80 = (double)*((int *)v75 - 4);
            v81 = (double)*((int *)v75 - 3);
            v238[5] = BYTE2(v79);
            *(double *)&v82 = v81 * 0.000000977517107;
            v83 = *(double *)&v82 + v80 * 1.5;
            LOWORD(v82) = *(v75 - 4);
            v84 = (v83 + (double)v82 * 1.49157273e-11) * 1000.0;
            *(_WORD *)&v238[6] = v84;
            v238[8] = v84 >> 16;
            v238[9] = v84 >> 24;
            v85 = v84 - (double)v84;
            *(_WORD *)&v238[10] = vcvtd_n_s64_f64(v85, 0x10uLL);
            LOWORD(v85) = *(v75 - 13);
            *(_WORD *)&v238[12] = (int)((double)*(unint64_t *)&v85 * 1.90293673);
            *(_WORD *)&v238[14] = (3439332561u * (unint64_t)((unsigned __int16)*(v75 - 9) << 15)) >> 44;
            *(double *)&v86 = (double)(__int16)*(v75 - 3) * 0.475734182;
            v87 = (int)*(double *)&v86;
            v238[16] = *((_BYTE *)v75 - 20);
            LOBYTE(v86) = *((_BYTE *)v75 - 4);
            v88 = ((double)v86 * 1.90293673);
            *(_WORD *)&v238[17] = v87;
            if (v88 >= 0xFF)
              LOBYTE(v88) = -1;
            v238[19] = v88;
            *(_WORD *)&v238[20] = *(_WORD *)((char *)v75 - 3);
            *(_DWORD *)&v238[22] = 0;
            v238[26] = *((_BYTE *)v75 - 1);
            *(_WORD *)&v238[27] = *v75;
            *(_QWORD *)v237 = &v238[29];
            STEU_Encode((char **)a1, 115, v238, (unint64_t *)v237);
            if (*(_QWORD *)v237 - (_QWORD)v238 != 30)
              gn_report_assertion_failure("ME_enc_s: S Wrong Length!");
            if ((++v43 & 7) == 0)
            {
              v89 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
              if (v89 <= 0)
                v89 += *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16);
              if (v89 <= 0x1FF)
                GNSS_Write_GNB_Ctrl((char *)a1);
              GNB_Debug_Flush_Check();
            }
          }
          else
          {
            v77 = 2;
LABEL_113:
            EvCrt_nd("ME_enc_s: S Invalid STE SV / Constel ID ", 2, v41, v77, v76);
          }
          ++v74;
          v75 += 24;
          if (v74 >= v11[230])
            break;
          continue;
        default:
          LOBYTE(v76) = 0;
          v77 = 0;
LABEL_112:
          v76 = v76;
          goto LABEL_113;
      }
      break;
    }
  }
  v90 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
  if (v90 <= 0)
    v90 += *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16);
  if (v90 <= 0x1FF)
    GNSS_Write_GNB_Ctrl((char *)a1);
  GNB_Debug_Flush_Check();
  LODWORD(v236) = 0;
  if (*v11)
  {
    v91 = 0;
    v92 = 0;
    v93 = 0;
    v94 = 0;
    v233 = 0;
    v95 = 0;
    do
    {
      Constell_Prn = Get_Constell_Prn((*(_WORD *)(a5 + 6194 + 2 * v91) - 1));
      switch(Constell_Prn)
      {
        case 1:
          ++v95;
          break;
        case 3:
          ++v233;
          break;
        case 4:
          ++v94;
          break;
        case 5:
          ++v93;
          break;
        case 6:
          ++v92;
          break;
        default:
          break;
      }
      ++v91;
    }
    while (v91 < *v11);
    LODWORD(v236) = Constell_Prn;
  }
  else
  {
    v95 = 0;
    v233 = 0;
    v94 = 0;
    v93 = 0;
    v92 = 0;
  }
  v222 = v94;
  v223 = v93;
  if (v11[1])
  {
    v97 = 0;
    v98 = 0;
    v235 = 0;
    v234 = 0;
    v232 = 0;
    v99 = 0;
    do
    {
      v100 = Get_Constell_Prn((*(_WORD *)(a5 + 6630 + 2 * v97) - 1));
      switch(v100)
      {
        case 1:
          ++v99;
          break;
        case 3:
          ++v232;
          break;
        case 4:
          ++v234;
          break;
        case 5:
          ++v235;
          break;
        case 6:
          ++v98;
          break;
        default:
          break;
      }
      ++v97;
    }
    while (v97 < v11[1]);
    LODWORD(v236) = v100;
  }
  else
  {
    v99 = 0;
    v232 = 0;
    v234 = 0;
    v235 = 0;
    v98 = 0;
  }
  v224 = v98;
  if (v11[3])
  {
    v101 = 0;
    v231 = 0;
    v230 = 0;
    v102 = 0;
    v103 = 0;
    do
    {
      v104 = Get_Constell_Prn((*(_WORD *)(a5 + 7066 + 2 * v101) - 1));
      switch(v104)
      {
        case 1:
          ++v103;
          break;
        case 3:
          ++v102;
          break;
        case 4:
          ++v230;
          break;
        case 5:
          LOBYTE(v231) = v231 + 1;
          break;
        case 6:
          ++BYTE4(v231);
          break;
        default:
          break;
      }
      ++v101;
    }
    while (v101 < v11[3]);
    LODWORD(v236) = v104;
  }
  else
  {
    v103 = 0;
    v102 = 0;
    v230 = 0;
    v231 = 0;
  }
  v105 = &v238[2];
  memset(&v238[2], 0, 258);
  v238[0] = 1;
  v238[1] = v95;
  *(_QWORD *)v237 = &v238[2];
  v106 = &v238[2];
  v107 = v229;
  if (*v11)
  {
    v108 = 0;
    do
    {
      v109 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 6194 + 2 * v108) - 1), &v236);
      if ((_DWORD)v236 == 1)
      {
        **(_BYTE **)v237 = v109 + 1;
        ++*(_QWORD *)v237;
      }
      ++v108;
    }
    while (v108 < *v11);
    v106 = *(_BYTE **)v237;
  }
  *v106 = v99;
  ++*(_QWORD *)v237;
  v110 = v228;
  if (v11[1])
  {
    v111 = 0;
    do
    {
      v112 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 6630 + 2 * v111) - 1), &v236);
      if ((_DWORD)v236 == 1)
      {
        **(_BYTE **)v237 = v112 + 1;
        ++*(_QWORD *)v237;
      }
      ++v111;
    }
    while (v111 < v11[1]);
  }
  if (v229[22])
  {
    **(_BYTE **)v237 = v103;
    ++*(_QWORD *)v237;
    if (v11[3])
    {
      v113 = 0;
      do
      {
        v114 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 7066 + 2 * v113) - 1), &v236);
        if ((_DWORD)v236 == 1)
        {
          **(_BYTE **)v237 = v114 + 1;
          ++*(_QWORD *)v237;
        }
        ++v113;
      }
      while (v113 < v11[3]);
    }
  }
  else
  {
    **(_BYTE **)v237 = 0;
    ++*(_QWORD *)v237;
  }
  STEU_Encode((char **)a1, 118, v238, (unint64_t *)v237);
  if ((uint64_t)(*(_QWORD *)v237 - (_QWORD)v238) >= 70)
    gn_report_assertion_failure("ME_enc_v: G Too Long!");
  memset(&v238[2], 0, 258);
  v238[0] = 4;
  v238[1] = v11[78];
  v115 = &v238[2];
  *(_QWORD *)v237 = &v238[2];
  if (v238[1] >= 1)
  {
    v116 = 0;
    v115 = &v238[2];
    do
    {
      *v115 = *(_BYTE *)(a5 + 8656 + v116) + 8;
      v115 = (_BYTE *)++*(_QWORD *)v237;
      ++v116;
    }
    while (v116 < (char)v11[78]);
  }
  *v115 = v11[79];
  v117 = (_BYTE *)++*(_QWORD *)v237;
  for (k = 2150; k != 2164; ++k)
  {
    if (!*(_DWORD *)(a5 + 4 * k))
    {
      *v117 = k - 101;
      v117 = (_BYTE *)++*(_QWORD *)v237;
    }
  }
  if (v229[23])
  {
    v119 = 0;
    *v117 = v11[80];
    v120 = (_BYTE *)++*(_QWORD *)v237;
    do
    {
      if (*(_DWORD *)(a5 + 8600 + 4 * v119) == 3)
      {
        *v120 = v119 + 1;
        v120 = (_BYTE *)++*(_QWORD *)v237;
      }
      ++v119;
    }
    while (v119 != 14);
  }
  else
  {
    *v117 = 0;
    ++*(_QWORD *)v237;
  }
  STEU_Encode((char **)a1, 118, v238, (unint64_t *)v237);
  if ((uint64_t)(*(_QWORD *)v237 - (_QWORD)v238) >= 70)
    gn_report_assertion_failure("ME_enc_v: R Too Long!");
  memset(&v238[2], 0, 258);
  v238[0] = 5;
  v238[1] = v233;
  *(_QWORD *)v237 = &v238[2];
  v121 = &v238[2];
  if (*v11)
  {
    v122 = 0;
    do
    {
      v123 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 6194 + 2 * v122) - 1), &v236);
      if ((_DWORD)v236 == 3)
      {
        **(_BYTE **)v237 = v123 + 65;
        ++*(_QWORD *)v237;
      }
      ++v122;
    }
    while (v122 < *v11);
    v121 = *(_BYTE **)v237;
  }
  *v121 = v232;
  ++*(_QWORD *)v237;
  if (v11[1])
  {
    v124 = 0;
    do
    {
      v125 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 6630 + 2 * v124) - 1), &v236);
      if ((_DWORD)v236 == 3)
      {
        **(_BYTE **)v237 = v125 + 65;
        ++*(_QWORD *)v237;
      }
      ++v124;
    }
    while (v124 < v11[1]);
  }
  if (v229[27])
  {
    **(_BYTE **)v237 = v102;
    ++*(_QWORD *)v237;
    v126 = v224;
    if (v11[3])
    {
      v127 = 0;
      do
      {
        v128 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 7066 + 2 * v127) - 1), &v236);
        if ((_DWORD)v236 == 3)
        {
          **(_BYTE **)v237 = v128 + 65;
          ++*(_QWORD *)v237;
        }
        ++v127;
      }
      while (v127 < v11[3]);
    }
  }
  else
  {
    **(_BYTE **)v237 = 0;
    ++*(_QWORD *)v237;
    v126 = v224;
  }
  STEU_Encode((char **)a1, 118, v238, (unint64_t *)v237);
  if ((uint64_t)(*(_QWORD *)v237 - (_QWORD)v238) >= 70)
    gn_report_assertion_failure("ME_enc_v: E Too Long!");
  memset(&v238[2], 0, 258);
  v238[0] = 6;
  v238[1] = v222;
  *(_QWORD *)v237 = &v238[2];
  v129 = &v238[2];
  if (*v11)
  {
    v130 = 0;
    do
    {
      v131 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 6194 + 2 * v130) - 1), &v236);
      if ((_DWORD)v236 == 4)
      {
        **(_BYTE **)v237 = v131 - 127;
        ++*(_QWORD *)v237;
      }
      ++v130;
    }
    while (v130 < *v11);
    v129 = *(_BYTE **)v237;
  }
  *v129 = v234;
  ++*(_QWORD *)v237;
  if (v11[1])
  {
    v132 = 0;
    do
    {
      v133 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 6630 + 2 * v132) - 1), &v236);
      if ((_DWORD)v236 == 4)
      {
        **(_BYTE **)v237 = v133 - 127;
        ++*(_QWORD *)v237;
      }
      ++v132;
    }
    while (v132 < v11[1]);
  }
  if (v229[26])
  {
    **(_BYTE **)v237 = v230;
    ++*(_QWORD *)v237;
    if (v11[3])
    {
      v134 = 0;
      do
      {
        v135 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 7066 + 2 * v134) - 1), &v236);
        if ((_DWORD)v236 == 4)
        {
          **(_BYTE **)v237 = v135 - 127;
          ++*(_QWORD *)v237;
        }
        ++v134;
      }
      while (v134 < v11[3]);
    }
  }
  else
  {
    **(_BYTE **)v237 = 0;
    ++*(_QWORD *)v237;
  }
  STEU_Encode((char **)a1, 118, v238, (unint64_t *)v237);
  if ((uint64_t)(*(_QWORD *)v237 - (_QWORD)v238) >= 70)
    gn_report_assertion_failure("ME_enc_v: B Too Long!");
  memset(&v238[2], 0, 258);
  v238[0] = 3;
  v238[1] = v223;
  *(_QWORD *)v237 = &v238[2];
  v136 = &v238[2];
  if (*v11)
  {
    v137 = 0;
    do
    {
      v138 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 6194 + 2 * v137) - 1), &v236);
      if ((_DWORD)v236 == 5)
      {
        **(_BYTE **)v237 = v138 - 63;
        ++*(_QWORD *)v237;
      }
      ++v137;
    }
    while (v137 < *v11);
    v136 = *(_BYTE **)v237;
  }
  *v136 = v235;
  ++*(_QWORD *)v237;
  if (v11[1])
  {
    v139 = 0;
    do
    {
      v140 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 6630 + 2 * v139) - 1), &v236);
      if ((_DWORD)v236 == 5)
      {
        **(_BYTE **)v237 = v140 - 63;
        ++*(_QWORD *)v237;
      }
      ++v139;
    }
    while (v139 < v11[1]);
  }
  if (v229[24])
  {
    **(_BYTE **)v237 = v231;
    ++*(_QWORD *)v237;
    if (v11[3])
    {
      v141 = 0;
      do
      {
        v142 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 7066 + 2 * v141) - 1), &v236);
        if ((_DWORD)v236 == 5)
        {
          **(_BYTE **)v237 = v142 - 63;
          ++*(_QWORD *)v237;
        }
        ++v141;
      }
      while (v141 < v11[3]);
    }
  }
  else
  {
    **(_BYTE **)v237 = 0;
    ++*(_QWORD *)v237;
  }
  STEU_Encode((char **)a1, 118, v238, (unint64_t *)v237);
  if ((uint64_t)(*(_QWORD *)v237 - (_QWORD)v238) >= 70)
    gn_report_assertion_failure("ME_enc_v: Q Too Long!");
  memset(&v238[2], 0, 258);
  v238[0] = 7;
  v238[1] = v92;
  *(_QWORD *)v237 = &v238[2];
  v143 = &v238[2];
  if (*v11)
  {
    v144 = 0;
    do
    {
      v145 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 6194 + 2 * v144) - 1), &v236);
      if ((_DWORD)v236 == 6)
      {
        **(_BYTE **)v237 = v145 + 101;
        ++*(_QWORD *)v237;
      }
      ++v144;
    }
    while (v144 < *v11);
    v143 = *(_BYTE **)v237;
  }
  *v143 = v126;
  ++*(_QWORD *)v237;
  if (v11[1])
  {
    v146 = 0;
    do
    {
      v147 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 6630 + 2 * v146) - 1), &v236);
      if ((_DWORD)v236 == 6)
      {
        **(_BYTE **)v237 = v147 + 101;
        ++*(_QWORD *)v237;
      }
      ++v146;
    }
    while (v146 < v11[1]);
  }
  if (v229[28])
  {
    **(_BYTE **)v237 = BYTE4(v231);
    ++*(_QWORD *)v237;
    if (v11[3])
    {
      v148 = 0;
      do
      {
        v149 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 7066 + 2 * v148) - 1), &v236);
        if ((_DWORD)v236 == 6)
        {
          **(_BYTE **)v237 = v149 + 101;
          ++*(_QWORD *)v237;
        }
        ++v148;
      }
      while (v148 < v11[3]);
    }
  }
  else
  {
    **(_BYTE **)v237 = 0;
    ++*(_QWORD *)v237;
  }
  STEU_Encode((char **)a1, 118, v238, (unint64_t *)v237);
  if ((uint64_t)(*(_QWORD *)v237 - (_QWORD)v238) >= 70)
    gn_report_assertion_failure("ME_enc_v: N Too Long!");
  v238[0] = 2;
  v238[1] = v11[230];
  *(_QWORD *)v237 = &v238[2];
  if (v238[1])
  {
    v150 = 0;
    do
    {
      *v105 = *(_BYTE *)(a5 + 8696 + v150);
      v105 = (_BYTE *)++*(_QWORD *)v237;
      ++v150;
    }
    while (v150 < v11[230]);
  }
  *v105 = v11[231];
  v151 = (_BYTE *)++*(_QWORD *)v237;
  if (v11[231])
  {
    v152 = 0;
    do
    {
      *v151 = *(_BYTE *)(a5 + 8705 + v152);
      v151 = (_BYTE *)++*(_QWORD *)v237;
      ++v152;
    }
    while (v152 < v11[231]);
  }
  *v151 = v11[232];
  v153 = (_BYTE *)++*(_QWORD *)v237;
  if (v11[232])
  {
    v154 = 0;
    do
    {
      *v153 = *(_BYTE *)(a5 + 8744 + v154);
      v153 = (_BYTE *)++*(_QWORD *)v237;
      ++v154;
    }
    while (v154 < v11[232]);
  }
  STEU_Encode((char **)a1, 118, v238, (unint64_t *)v237);
  if ((uint64_t)(*(_QWORD *)v237 - (_QWORD)v238) >= 70)
    gn_report_assertion_failure("ME_enc_v: S Too Long!");
  v155 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
  if (v155 <= 0)
    v155 += *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16);
  if (v155 <= 0x1FF)
    GNSS_Write_GNB_Ctrl((char *)a1);
  GNB_Debug_Flush_Check();
  v156 = &v238[1];
  memset(v238, 0, sizeof(v238));
  *(_QWORD *)v237 = &v238[1];
  v157 = *v11;
  if (*v11)
  {
    v158 = 0;
    v159 = 0;
    v160 = 0;
    do
    {
      v161 = *(__int16 *)(a5 + 6194 + 2 * v158);
      if (v161 >= 1)
      {
        LODWORD(v236) = 0;
        v162 = LongPrnIdx_To_ShortPrnIdx((unsigned __int16)v161 - 1, &v236);
        if ((_DWORD)v236 != 2)
        {
          v165 = 0;
          v163 = Prn_Offset[v236] + v162;
          v164 = 256;
          switch((int)v236)
          {
            case 1:
              goto LABEL_318;
            case 3:
              v163 += 64;
              v164 = 1280;
              goto LABEL_318;
            case 4:
              v163 += 128;
              v164 = 1536;
              goto LABEL_318;
            case 5:
              v164 = 768;
              goto LABEL_318;
            case 6:
              v163 += 100;
              v164 = 1792;
              goto LABEL_318;
            case 7:
              v164 = 512;
              goto LABEL_318;
            default:
              goto LABEL_320;
          }
        }
        if (v160 <= 13 && (char)v11[78] > v160)
        {
          v163 = *(char *)(a5 + v160++ + 8656) + 8;
          v164 = 1024;
LABEL_318:
          if ((v163 - 256) > 0xFFFFFF00)
          {
            *v156 = v163;
            v156[1] = (unsigned __int16)(v163 | v164) >> 8;
            v156 += 2;
            ++v159;
          }
          else
          {
            v165 = v163;
LABEL_320:
            EvLog_d("ME_enc_o:  Illegal STE SV ID ", v165);
          }
        }
        v157 = *v11;
      }
      ++v158;
    }
    while (v158 < v157);
    *(_QWORD *)v237 = v156;
    v110 = v228;
    v107 = v229;
  }
  else
  {
    v159 = 0;
  }
  v238[0] = v159;
  if (v11[4] != v159 || v159 != v157)
    EvLog_v("ME_enc_o:  num_Priority_SV  %d   !=  num_AA %d  or  num_vis %d", v159, v11[4], v157);
  STEU_Encode((char **)a1, 111, v238, (unint64_t *)v237);
  if ((uint64_t)(*(_QWORD *)v237 - (_QWORD)v238) >= 258)
    gn_report_assertion_failure("ME_enc_o: Too long!");
  v166 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
  if (v166 <= 0)
    v166 += *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16);
  if (v166 <= 0x1FF)
    GNSS_Write_GNB_Ctrl((char *)a1);
  GNB_Debug_Flush_Check();
  v167 = *(_DWORD *)(v110 + 28228);
  if (!v167)
    goto LABEL_339;
  v168 = *(_DWORD *)(v110 + 436) - v167;
  if (v168 < 0)
    v168 = -v168;
  if (v168 >> 5 >= 0x753)
  {
LABEL_339:
    v169 = 0;
    *(_QWORD *)&v238[6] = 0;
    *(_QWORD *)v238 = 0;
    v170 = *(_QWORD *)(a5 + 8680);
    while (*(_DWORD *)(v170 + v169) != 2139062143)
    {
      v169 += 4;
      if (v169 == 96)
      {
        v171 = 0;
        *(_QWORD *)&v238[6] = 0x101010101010101;
        *(_QWORD *)v238 = 0x101010101010101;
        v172 = *((_QWORD *)v107 + 130);
        do
        {
          if (!*(_BYTE *)(v172 + v171))
            v238[*(int *)(v170 + 4 * v171) + 7] = 0;
          ++v171;
        }
        while (v171 != 24);
        break;
      }
    }
    Encode_b((char **)a1, 1u, 0, 1, 0x20u, *((unsigned __int8 **)v107 + 129));
    Encode_b((char **)a1, 1u, 3, 1, 0x20u, *((unsigned __int8 **)v107 + 164));
    Encode_b((char **)a1, 2u, 4, -7, 0xEu, v238);
    Encode_b((char **)a1, 3u, 8, 1, 0x24u, *((unsigned __int8 **)v107 + 134));
    Encode_b((char **)a1, 4u, 11, 1, 0x3Fu, *((unsigned __int8 **)v107 + 133));
    Encode_b((char **)a1, 5u, 0, 193, 0xAu, *((unsigned __int8 **)v107 + 131));
    Encode_b((char **)a1, 6u, 3, 1, 0xEu, *((unsigned __int8 **)v107 + 170));
    Encode_b((char **)a1, 7u, 0, 120, 0x27u, *((unsigned __int8 **)v107 + 132));
    *(_DWORD *)(v110 + 28228) = *(_DWORD *)(v110 + 436);
    v173 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
    if (v173 <= 0)
      v173 += *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16);
    if (v173 <= 0x1FF)
      GNSS_Write_GNB_Ctrl((char *)a1);
    GNB_Debug_Flush_Check();
  }
  if (*(_BYTE *)(a6 + 444))
    goto LABEL_355;
  v174 = 0;
  v175 = 0uLL;
  v176.i64[0] = 0x100000001;
  v176.i64[1] = 0x100000001;
  v177 = 0uLL;
  v178 = 0uLL;
  v179 = 0uLL;
  do
  {
    v180 = (uint8x16_t)vtstq_s8(*(int8x16_t *)(a6 + 448 + v174), *(int8x16_t *)(a6 + 448 + v174));
    v181 = vmovl_u8(*(uint8x8_t *)v180.i8);
    v182 = vmovl_high_u8(v180);
    v179 = vaddq_s32(v179, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v182), v176));
    v178 = vaddq_s32(v178, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v182.i8), v176));
    v177 = vaddq_s32(v177, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v181), v176));
    v175 = vaddq_s32(v175, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v181.i8), v176));
    v174 += 16;
  }
  while (v174 != 128);
  v183 = vaddvq_s32(vaddq_s32(vaddq_s32(v175, v178), vaddq_s32(v177, v179)));
  if (v183 == 128)
  {
LABEL_355:
    v238[0] = -1;
    *(_QWORD *)v237 = &v238[1];
    goto LABEL_356;
  }
  if ((v183 - 1) <= 0x7E)
  {
    v218 = 0;
    v238[0] = v183;
    v219 = &v238[1];
    v220 = a6 + 448;
    do
    {
      if (*(_BYTE *)(v220 + v218))
      {
        *v219 = v218;
        v219[1] = *(_BYTE *)(v220 + v218);
        v219 += 2;
      }
      ++v218;
    }
    while (v218 != 128);
    *(_QWORD *)v237 = v219;
    if (v219 > v238)
    {
LABEL_356:
      STEU_Encode((char **)a1, 105, v238, (unint64_t *)v237);
      if ((uint64_t)(*(_QWORD *)v237 - (_QWORD)v238) >= 260)
        gn_report_assertion_failure("ME_enc_i: Too long!");
    }
  }
  v184 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
  if (v184 <= 0)
    v184 += *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16);
  if (v184 <= 0x1FF)
    GNSS_Write_GNB_Ctrl((char *)a1);
  GNB_Debug_Flush_Check();
  if (!v107[20])
  {
    v185 = *((_DWORD *)v107 + 4);
    *(_DWORD *)&v238[8] = 0;
    *(_QWORD *)&v238[1] = 0;
    if (v185 >= 3)
    {
      EvLog_d("ME_Send_PowUsage: Out of range: ", v185);
      LOBYTE(v185) = 1;
    }
    v238[0] = v185;
    STEU_Encode_c((char **)a1, 80, 12, v238);
  }
  if (v225)
  {
    *(_WORD *)&v238[10] = 0;
    *(_DWORD *)&v238[6] = 0;
    v238[0] = HIBYTE(v225);
    v238[1] = BYTE2(v225);
    v238[2] = BYTE1(v225);
    v238[3] = v225;
    v238[4] = HIBYTE(v221);
    v238[5] = v221;
    STEU_Encode_c((char **)a1, 79, 12, v238);
  }
  v238[11] = 0;
  *(_QWORD *)&v238[3] = 0;
  v238[0] = *((_DWORD *)v107 + 3);
  v186 = *((_DWORD *)v107 + 1);
  v238[1] = v186;
  if (v186 == 2)
  {
    if (*(_DWORD *)(a5 + 60) < 3u || !*(_DWORD *)v107)
    {
      v238[1] = 0;
      v187 = (_BYTE *)(a5 + 84);
      v188 = 123;
      v189 = 123;
      while (1)
      {
        if (!*v187
          || !*(v187 - 8)
          || (*((_DWORD *)v187 - 1) ? (v190 = *((_DWORD *)v187 - 1) == 7) : (v190 = 1), v190))
        {
          if (--v189 < 6)
            break;
        }
        v187 += 48;
        if (!--v188)
        {
          LOBYTE(v186) = 0;
          goto LABEL_383;
        }
      }
    }
    LOBYTE(v186) = 1;
    v238[1] = 1;
  }
LABEL_383:
  *((_DWORD *)v107 + 2) = v186;
  v191 = v107[65];
  v238[2] = v191;
  v192 = v107[22];
  if (v107[22] && v107[29])
    v238[2] = ++v191;
  v193 = v107[25];
  if (v107[25] && v107[32])
  {
    v191 += 2;
    v238[2] = v191;
  }
  v194 = v107[24];
  if (v107[24] && v107[31])
  {
    v191 += 4;
    v238[2] = v191;
  }
  v195 = v107[23];
  if (v107[23] && v107[30])
  {
    v191 += 8;
    v238[2] = v191;
  }
  v196 = v107[27];
  if (v107[27] && v107[34])
  {
    v191 += 16;
    v238[2] = v191;
  }
  v197 = v107[26];
  if (v107[26] && v107[33])
  {
    v191 += 32;
    v238[2] = v191;
  }
  v198 = v107[28];
  if (v107[28] && v107[35])
    v238[2] = v191 + 64;
  if (v193 | v192 | v194 | v195 | v196 | v197 | v198)
  {
    v199 = v192 | 2;
    if (!v193)
      v199 = v192;
    if (v194)
      v199 |= 4u;
    if (v195)
      v199 |= 8u;
    if (v196)
      v199 += 16;
    if (v197)
      v199 += 32;
    if (v198)
      v199 += 64;
    v238[3] = v199;
  }
  if (v192)
  {
    LOBYTE(v192) = v107[36];
    if ((_BYTE)v192)
    {
      LOBYTE(v192) = 1;
      v238[4] = 1;
    }
  }
  if (v193 && v107[39])
  {
    LOBYTE(v192) = v192 | 2;
    v238[4] = v192;
  }
  if (v194 && v107[38])
  {
    LOBYTE(v192) = v192 | 4;
    v238[4] = v192;
  }
  if (v195 && v107[37])
  {
    LOBYTE(v192) = v192 | 8;
    v238[4] = v192;
  }
  if (v196 && v107[41])
  {
    LOBYTE(v192) = v192 | 0x10;
    v238[4] = v192;
  }
  if (v197 && v107[40])
  {
    LOBYTE(v192) = v192 | 0x20;
    v238[4] = v192;
  }
  if (v198 && v107[42])
    v238[4] = v192 | 0x40;
  if (v107[44])
    v238[5] = 1;
  if (v107[43])
    v238[7] = 1;
  if (v107[45])
    v238[8] = 1;
  STEU_Encode_c((char **)a1, 67, 12, v238);
  v200 = 0;
  *(_WORD *)&v238[10] = 0;
  *(_DWORD *)&v238[6] = 0;
  v201 = *((_DWORD *)v107 + 513) - 1;
  if (v201 <= 0xA)
    v200 = byte_24BC095B6[v201];
  v238[0] = v200;
  v202 = *((_DWORD *)v107 + 515);
  if (v202 >= 4)
    v203 = -1;
  else
    v203 = 0x4B3219FFu >> (8 * v202);
  v238[1] = v203;
  v204 = *((_DWORD *)v107 + 510);
  if (v204 >= 4)
    LOBYTE(v204) = 0;
  v238[2] = v204;
  v205 = *((_DWORD *)v107 + 512);
  if (v205 >= 4)
    v206 = -1;
  else
    v206 = 0x4B3219FFu >> (8 * v205);
  v238[3] = v206;
  v207 = *((_DWORD *)v107 + 516);
  if (v207 >= 4)
    v208 = 0;
  else
    v208 = 0x1010300u >> (8 * v207);
  v238[4] = v208;
  v209 = *((_DWORD *)v107 + 518);
  if (v209 >= 4)
    v210 = -1;
  else
    v210 = 0x4B3219FFu >> (8 * v209);
  v238[5] = v210;
  if (v107[45])
  {
    LOBYTE(v211) = 1;
    goto LABEL_465;
  }
  if (*(_BYTE *)(p_NA + 381))
  {
    v211 = *(_DWORD *)(p_NA + 26780);
LABEL_465:
    v238[6] = v211;
  }
  STEU_Encode_c((char **)a1, 65, 12, v238);
  if (v107[2112])
  {
    *(_QWORD *)&v237[4] = 0;
    v212 = *((float64x2_t *)v107 + 130);
    v213 = *((float64x2_t *)v107 + 131);
    v214 = (int8x8_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcgtzq_f64(v212), (int32x4_t)vcgtzq_f64(v213)));
    v215 = (int16x8_t)vcvtq_n_s64_f64(v212, 2uLL);
    *(int8x8_t *)v215.i8 = vorn_s8(vand_s8((int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64((int64x2_t)v215), (int16x4_t)vmovn_s64(vcvtq_n_s64_f64(v213, 2uLL))), v214), v214);
    *(_QWORD *)v237 = vmovn_s16(v215).u32[0];
    STEU_Encode_c((char **)a1, 90, 12, v237);
  }
  *(_DWORD *)&v237[8] = 0;
  *(_QWORD *)&v237[1] = 0;
  v237[0] = v107[21];
  STEU_Encode_c((char **)a1, 69, 12, v237);
  *(_DWORD *)v238 = *(_DWORD *)a5;
  v236 = (unint64_t)&v238[4];
  STEU_Encode((char **)a1, 116, v238, &v236);
  if (v236 - (_QWORD)v238 != 6)
    gn_report_assertion_failure("ME_enc_t: Wrong Length!");
  v216 = (_BYTE *)(*(_QWORD *)a1)++;
  *v216 = 10;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 24))
    *(_QWORD *)a1 = *(_QWORD *)(a1 + 16);
  GNSS_Write_GNB_Ctrl((char *)a1);
  return GNSS_GNB_Debug_Ctl(a2);
}

char **G5K_ME_enc_n(char **a1, int a2, __int16 a3)
{
  char **result;
  _BYTE *v4;
  int v5;
  __int16 v6;
  _BYTE v7[262];

  *(_QWORD *)&v7[254] = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v4 = v7;
  result = STEU_Encode(a1, 110, (unsigned __int8 *)&v5, (unint64_t *)&v4);
  if (v4 - (_BYTE *)&v5 != 6)
    return (char **)gn_report_assertion_failure("ME_enc_n: Wrong Length!");
  return result;
}

char **Encode_b(char **a1, unsigned int a2, char a3, char a4, unsigned int a5, unsigned __int8 *a6)
{
  char v7;
  char v8;
  int v9;
  uint64_t v10;
  char v11;
  char v13;
  char v14;
  unint64_t v15;
  char **result;
  char *v17;
  unsigned __int8 v18[2];
  _OWORD v19[4];
  _OWORD __src[4];
  uint64_t v21;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  v21 = *MEMORY[0x24BDAC8D0];
  memset(__src, 0, sizeof(__src));
  v10 = a5;
  v11 = a4;
  do
  {
    if (*a6++)
    {
      v13 = v8 + a4;
      switch(a2)
      {
        case 1u:
          v7 = 1;
          goto LABEL_12;
        case 2u:
          v14 = v13 + 8;
          v7 = 4;
          break;
        case 3u:
          v14 = v13 + 64;
          v7 = 5;
          break;
        case 4u:
          v14 = v13 + 0x80;
          v7 = 6;
          break;
        case 5u:
          v7 = 3;
          goto LABEL_12;
        case 6u:
          v14 = v13 + 100;
          v7 = 7;
          break;
        case 7u:
          v7 = 2;
LABEL_12:
          v14 = v11;
          break;
        default:
          v14 = 0;
          v7 = 0;
          break;
      }
      *((_BYTE *)__src + v9++) = v14;
    }
    ++v8;
    ++v11;
    --v10;
  }
  while (v10);
  v15 = 0x207030605040100uLL >> (8 * a2);
  if (a2 > 7)
    LOBYTE(v15) = 0;
  if (v9)
    LOBYTE(v15) = v7;
  memset(v19, 0, sizeof(v19));
  v18[0] = a3 | (16 * v15);
  v18[1] = v9;
  v17 = (char *)v19;
  if (v9 >= 1)
  {
    memcpy(v19, __src, v9);
    v17 = (char *)v19 + v9;
  }
  result = STEU_Encode(a1, 98, v18, (unint64_t *)&v17);
  if (v17 - (char *)v18 >= 67)
    return (char **)gn_report_assertion_failure("ME_enc_b: Wrong Length!");
  return result;
}

uint64_t GncS02_09UpdatedPosAval(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char __str[966];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_UPDT_POS_AVAL_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 73, "GncS02_09UpdatedPosAval");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    GncS04_72SendUpdates(1);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 69, "GncS02_09UpdatedPosAval", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t GncS02_21FGSchedTimExp(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char __str[966];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_FG_SCHED_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 68, "GncS02_21FGSchedTimExp");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    GncS04_73FGPosTimerExpiry();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 69, "GncS02_21FGSchedTimExp", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t GncS02_22SessStopAckTimExp(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char __str[966];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_SESS_STOP_ACK_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 68, "GncS02_22SessStopAckTimExp");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    GncS04_33SessStopAckTimrExpiry();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 69, "GncS02_22SessStopAckTimExp", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t GncS02_23SessStartAckTimExp(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char __str[966];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_SESS_START_ACK_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 68, "GncS02_23SessStartAckTimExp");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    GncS04_36SessStartAckTimrExp();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 69, "GncS02_23SessStartAckTimExp", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t GM_Prop_AAD(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v9[3];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = (a2 - 1);
  if (a2 - 1 >= 0)
  {
    v4 = result;
    v5 = v3 + 1;
    v6 = a3 + 48 * v3;
    do
    {
      if (*(_BYTE *)(v6 + 8))
      {
        if (*(_BYTE *)(v6 + 4))
        {
          v7 = *(_OWORD *)(v6 + 16);
          v9[0] = *(_OWORD *)v6;
          v9[1] = v7;
          v9[2] = *(_OWORD *)(v6 + 32);
          *(_DWORD *)v6 = v4;
          result = Comp_Cur_Acq_Aid((uint64_t)v9, v6);
        }
      }
      v6 -= 48;
    }
    while (v5-- > 1);
  }
  return result;
}

double Nav_Kalman_Update_Init(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int64x2_t v11;
  double v12;
  __double2 v13;
  double v14;
  double v15;
  double v16;
  double result;
  _WORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  _QWORD v25[8662];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v21 = v3;
  v22 = v2;
  v4 = v1;
  *(_QWORD *)((char *)&v25[8660] + 4) = *MEMORY[0x24BDAC8D0];
  v5 = v1 + 68200;
  v19 = v1 + 27528;
  v18 = (_WORD *)(v1 + 27249);
  v20 = v1 + 15408;
  bzero(v23, 0x10EC0uLL);
  v24 = 0x500000002;
  memset(&v25[14], 0, 24);
  memset((char *)&v25[17] + 4, 0, 21);
  memset((char *)&v25[34] + 4, 0, 20);
  memset((char *)&v25[37] + 4, 0, 20);
  memset((char *)v25 + 4, 0, 96);
  *(_OWORD *)((char *)&v25[11] + 5) = 0u;
  memset((char *)&v25[20] + 4, 0, 54);
  memset((char *)&v25[27] + 4, 0, 52);
  bzero((char *)&v25[40] + 4, 0x54CuLL);
  memset((char *)&v25[210] + 4, 0, 24);
  HIDWORD(v25[213]) = -1;
  memset((char *)&v25[214] + 4, 0, 29);
  memset((char *)&v25[218] + 4, 0, 65);
  HIDWORD(v25[228]) = -1;
  memset((char *)&v25[229] + 4, 0, 48);
  *(_DWORD *)((char *)&v25[235] + 3) = 0;
  v6 = 240;
  do
  {
    v7 = &v23[v6];
    *(_DWORD *)v7 = 0;
    *(_OWORD *)(v7 + 1) = 0uLL;
    *(_OWORD *)(v7 + 3) = 0uLL;
    v6 += 5;
  }
  while (v7 + 5 != (_QWORD *)((char *)&v25[876] + 4));
  v8 = 880;
  do
  {
    v9 = &v23[v8];
    *(_DWORD *)v9 = 0;
    *(_OWORD *)(v9 + 1) = 0uLL;
    *(_OWORD *)(v9 + 3) = 0uLL;
    v8 += 5;
  }
  while (v9 + 5 != (_QWORD *)((char *)&v25[1516] + 4));
  HIDWORD(v25[1923]) = 0;
  *(_QWORD *)((char *)&v25[1924] + 4) = 0;
  HIDWORD(v25[1925]) = 0;
  *(_QWORD *)((char *)&v25[1926] + 4) = 0;
  HIDWORD(v25[1927]) = 0;
  *(_QWORD *)((char *)&v25[2510] + 4) = 0;
  BYTE4(v25[2511]) = 0;
  *(_QWORD *)((char *)&v25[2512] + 4) = 0;
  BYTE4(v25[2513]) = 0;
  *(_QWORD *)((char *)&v25[3398] + 4) = 0;
  HIDWORD(v25[3399]) = 0;
  *(_QWORD *)((char *)&v25[3412] + 4) = 0;
  HIDWORD(v25[3413]) = 0;
  *(_QWORD *)((char *)&v25[3447] + 4) = 0;
  BYTE4(v25[3448]) = 0;
  memset((char *)&v25[3438] + 4, 0, 65);
  *(_QWORD *)((char *)&v25[3459] + 4) = 0;
  BYTE4(v25[3460]) = 0;
  HIDWORD(v25[3449]) = 0;
  memset((char *)&v25[3450] + 4, 0, 65);
  BYTE4(v25[3461]) = 0;
  BYTE4(v25[8507]) = 0;
  v25[8517] = 0;
  v25[8531] = 0;
  bzero((char *)&v25[8532] + 4, 0x400uLL);
  bzero((char *)&v25[1516] + 4, 0xCB5uLL);
  memset((char *)&v25[1928] + 4, 0, 156);
  bzero((char *)&v25[1948] + 4, 0x118BuLL);
  bzero((char *)&v25[2514] + 4, 0x1B5CuLL);
  memset((char *)&v25[3390] + 4, 0, 25);
  memset(&v25[3394], 0, 32);
  memset((char *)&v25[3400] + 4, 0, 19);
  memset(&v25[3403], 0, 22);
  memset(&v25[3406], 0, 24);
  memset((char *)&v25[3409] + 4, 0, 17);
  memset((char *)&v25[3414] + 4, 0, 188);
  bzero(&v25[3462], 0x9D68uLL);
  memset((char *)&v25[8499] + 4, 0, 25);
  memset((char *)&v25[8503] + 4, 0, 29);
  memset((char *)&v25[8508] + 4, 0, 65);
  memset((char *)&v25[8518] + 4, 0, 97);
  *(_QWORD *)v4 = v23[0];
  *(_QWORD *)(v4 + 20) = v24;
  memcpy((void *)(v4 + 28), v25, 0x10EA4uLL);
  *(_DWORD *)v4 = 167870469;
  *(_WORD *)(v4 + 4) = 279;
  *(_QWORD *)(v4 + 8) = 0x10001000105DCLL;
  *(_DWORD *)(v4 + 16) = 655366;
  *(_DWORD *)(v4 + 1704) = 1;
  v10 = *(_QWORD *)(v21 + 52);
  *(_QWORD *)(v4 + 20) = v10;
  NK_Set_Dynamics(v10, v4 + 32);
  *(_BYTE *)(v4 + 136) = 1;
  *(_DWORD *)(v4 + 140) = 1;
  *(_DWORD *)(v4 + 160) = -1;
  *v18 = 1;
  *(_DWORD *)(v20 + 11816) = -1;
  *(_DWORD *)v19 = -1;
  v11 = vdupq_n_s64(0x416312D000000000uLL);
  *(int64x2_t *)(v4 + 27568) = v11;
  *(int64x2_t *)(v4 + 27584) = v11;
  *(_BYTE *)(v19 + 88) = -1;
  *(_DWORD *)(v19 + 96) = -1;
  *(int64x2_t *)(v4 + 27664) = v11;
  *(int64x2_t *)(v4 + 27680) = v11;
  *(_BYTE *)(v19 + 184) = -1;
  *(_QWORD *)(v4 + 280) = *(_QWORD *)(v22 + 240);
  v12 = dbl_24BC09630[*(_DWORD *)(v21 + 52) < 5u];
  *(double *)(v4 + 288) = v12;
  if (*(_BYTE *)(v22 + 18))
    *(double *)(v4 + 288) = v12 * 0.5;
  *(_QWORD *)(v4 + 336) = 0x4163125300000000;
  *(_QWORD *)(v4 + 312) = 0x4163125300000000;
  *(_WORD *)v20 = 4626;
  *(_WORD *)(v4 + 241) = 513;
  *(_WORD *)(v4 + 244) = 5;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = 0;
  Geo2ECEF(v5, (uint64_t)&WGS84_Datum, (double *)(v4 + 68176));
  v13 = __sincos_stret(*(double *)v5);
  *(__double2 *)(v5 + 24) = v13;
  v14 = 1.0 / sqrt(v13.__sinval * v13.__sinval * -0.00669437999 + 1.0);
  v15 = *(double *)(v5 + 16);
  v16 = v13.__cosval * (v15 + v14 * 6378137.0);
  if (v16 < 1.0)
    v16 = 1.0;
  result = v15 + v14 * (v14 * v14) * 6335439.33;
  *(double *)(v5 + 40) = result;
  *(double *)(v5 + 48) = v16;
  return result;
}

uint64_t NK_Set_Dynamics(uint64_t result, uint64_t a2)
{
  int64x2_t v2;
  double v3;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v16;

  *(_OWORD *)a2 = xmmword_24BC09640;
  *(_OWORD *)(a2 + 16) = xmmword_24BC09650;
  *(_OWORD *)(a2 + 32) = xmmword_24BC09660;
  v2 = vdupq_n_s64(0x3FA47AE147AE147CuLL);
  v3 = 25.0;
  __asm { FMOV            V6.2D, #25.0 }
  v9 = 0.25;
  v10 = 0;
  v11 = 400.0;
  v12 = 0.04;
  v13 = 0.0204081633;
  switch((int)result)
  {
    case 0:
    case 1:
      goto LABEL_4;
    case 2:
      goto LABEL_11;
    case 3:
      v2 = vdupq_n_s64(0x3FB9B9A5A89B951DuLL);
      v9 = 4.0;
      v12 = 0.100489;
      v13 = 0.01;
      goto LABEL_11;
    case 4:
      v2 = vdupq_n_s64(0x3FB9B9A5A89B951DuLL);
      v9 = 9.0;
      v12 = 0.100489;
      v13 = 0.00694444444;
LABEL_11:
      *(int64x2_t *)(a2 + 48) = v2;
      *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
      *(double *)(a2 + 80) = v9;
      *(double *)(a2 + 96) = v13;
      goto LABEL_20;
    case 5:
      *(int64x2_t *)(a2 + 48) = vdupq_n_s64(0x3FB9B9A5A89B951DuLL);
      *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
      *(_QWORD *)(a2 + 80) = 0x4039000000000000;
      *(_QWORD *)(a2 + 96) = 0x3FB0000000000000;
      v14 = 25.0;
      v13 = 0.0625;
      goto LABEL_24;
    case 6:
      __asm { FMOV            V0.2D, #1.0; jumptable 000000024BAE4D34 case 6 }
      *(_OWORD *)(a2 + 48) = _Q0;
      *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
      *(double *)&v16 = 100.0;
      *(_QWORD *)(a2 + 80) = 0x4059000000000000;
      *(_QWORD *)(a2 + 96) = 0x3FD0000000000000;
      v13 = 0.25;
      goto LABEL_22;
    case 7:
      goto LABEL_15;
    case 8:
      _Q6 = vdupq_n_s64(0x4202A05F20000000uLL);
      v11 = 1000000.0;
      v3 = 1.0e10;
LABEL_15:
      *(int64x2_t *)(a2 + 48) = _Q6;
      *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
      v12 = v3;
      break;
    default:
      v10 = 0x4202A05F20000000;
LABEL_4:
      if (result >= 2)
        v12 = 1.0e10;
      else
        v12 = 0.0;
      *(_QWORD *)(a2 + 48) = v10;
      *(double *)(a2 + 56) = v12;
      *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
      if (result >= 2)
        v11 = 1000000.0;
      else
        v11 = 0.0;
      break;
  }
  *(double *)(a2 + 80) = v11;
  *(_QWORD *)(a2 + 96) = 0x3FF0000000000000;
  v9 = 0.0;
  v13 = 1.0;
  if (result < 2)
  {
LABEL_20:
    *(double *)(a2 + 88) = v13 * v9;
    *(double *)(a2 + 72) = v13;
    *(double *)(a2 + 56) = v12 * 0.5;
  }
  else
  {
    if ((_DWORD)result == 7)
    {
      *(double *)&v16 = 400.0;
LABEL_22:
      v14 = *(double *)&v16;
    }
    else
    {
      if ((_DWORD)result == 8)
      {
        *(_QWORD *)(a2 + 88) = 0x412E848000000000;
        *(_QWORD *)(a2 + 72) = 0x3FF0000000000000;
        *(_OWORD *)(a2 + 24) = xmmword_24BC09670;
        return result;
      }
      v14 = 1000000.0;
    }
LABEL_24:
    *(double *)(a2 + 88) = v13 * v14;
    *(double *)(a2 + 72) = v13;
  }
  return result;
}

uint64_t NK_Set_XO_PN(uint64_t result, uint64_t a2)
{
  float64x2_t v2;
  double v3;
  int v4;
  float64x2_t v5;
  int32x2_t v6;
  int64x2_t v7;

  *(_OWORD *)(a2 + 24) = xmmword_24BC09680;
  if (*(_WORD *)(result + 240))
  {
    v2 = (float64x2_t)xmmword_24BC09690;
    *(_OWORD *)(a2 + 24) = xmmword_24BC09690;
    v3 = fabs(*(double *)(result + 112)) + -0.1;
    if (v3 > 0.0)
    {
      v2 = vmulq_n_f64((float64x2_t)xmmword_24BC09690, fmin(v3 * 19.375 + 1.0, 32.0));
      *(float64x2_t *)(a2 + 24) = v2;
    }
    v4 = (int)*(double *)(result + 72);
    if ((v4 - 71) <= 0xFFFFFFAE)
    {
      if ((v4 - 101) >= 0xFFFFFF73)
      {
        if ((v4 - 96) >= 0xFFFFFF7D)
        {
          if ((v4 - 91) >= 0xFFFFFF87)
          {
            if ((v4 - 86) >= 0xFFFFFF91)
            {
              if ((v4 - 81) >= 0xFFFFFF9B)
              {
                v6 = vdup_n_s32((v4 - 76) < 0xFFFFFFA5);
                v7.i64[0] = v6.u32[0];
                v7.i64[1] = v6.u32[1];
                v5 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v7, 0x3FuLL)), (int8x16_t)xmmword_24BC09700, (int8x16_t)xmmword_24BC096F0);
              }
              else
              {
                v5 = (float64x2_t)xmmword_24BC096E0;
              }
            }
            else
            {
              v5 = (float64x2_t)xmmword_24BC096D0;
            }
          }
          else
          {
            v5 = (float64x2_t)xmmword_24BC096C0;
          }
        }
        else
        {
          v5 = (float64x2_t)xmmword_24BC096B0;
        }
      }
      else
      {
        v5 = (float64x2_t)xmmword_24BC096A0;
      }
      *(float64x2_t *)(a2 + 24) = vmulq_f64(v2, v5);
    }
  }
  return result;
}

BOOL STEU_Checksum_OK(char *a1)
{
  unsigned __int8 v1;
  int v2;
  int v3;
  int v4;
  int v6;
  _BOOL8 result;
  unsigned __int8 v8;
  char v9[2];
  uint64_t v10;

  v1 = 0;
  v10 = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  v3 = 3;
  do
  {
    if (!v2)
      return 0;
    v4 = a1[v3 - 1];
    if (v4 == 10 || v4 == 13)
      return 0;
    v1 += v2;
    ++v3;
    v2 = v4;
  }
  while (v4 != 125);
  v8 = 0;
  v9[0] = a1[v3 - 1];
  v9[1] = a1[v3];
  v6 = AscToU1((uint64_t)v9, &v8);
  result = 0;
  if (v6)
    return v8 == v1;
  return result;
}

uint64_t Comp_NEDvar_UDU(uint64_t result, unsigned int a2, int a3, double (*a4)[3], double *a5)
{
  uint64_t v5;
  int v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned int v13;
  double v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  double *v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  double v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  double v30;
  unsigned int v31;
  uint64_t v32;
  double v33;
  double (*v34)[3];
  uint64_t v35;
  _QWORD *v36;
  double v37;
  uint64_t v38;
  double v39;
  uint64_t i;
  _QWORD v41[10];

  v5 = 0;
  v41[9] = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  do
  {
    v7 = v6++;
    v8 = (v7 * v7 + v7) >> 1;
    v9 = (v5 + a3);
    v10 = (v9 * v9 + v9) >> 1;
    v11 = v5;
    v12 = v6;
    do
    {
      v13 = (v11 + a3);
      if (v5 == v11)
      {
        v14 = *(double *)(result + 8 * (v10 + (v5 + a3)));
        v15 = v13 + 1;
      }
      else
      {
        v15 = v13 + 1;
        v16 = v9 + (((v13 + 1) * v13) >> 1);
        if (v9 >= v13)
          v16 = v10 + v13;
        v14 = *(double *)(result + 8 * (v13 + ((v15 * v13) >> 1))) * *(double *)(result + 8 * v16);
      }
      v17 = v12;
      v18 = (double *)&v41[3 * v5 + v11];
      *v18 = v14;
      if (a2 > v15)
      {
        v19 = v12;
        v20 = v19 * v19 + v12;
        v21 = 2 * v19 + 2;
        v22 = (v15 * v7) >> 1;
        v23 = v17;
        do
        {
          v24 = v23 + v23 * v23;
          v25 = v8 + v23;
          if (v23 > v9)
            v25 = v9 + (v24 >> 1);
          v26 = *(double *)(result + 8 * v25);
          v27 = v22 + v23;
          v28 = v23 > v13;
          v29 = v23 + 1;
          v30 = *(double *)(result + 8 * (v23 + ((unint64_t)v20 >> 1))) * v26;
          v31 = v13 + (v24 >> 1);
          if (!v28)
            v31 = v27;
          v14 = v14 + v30 * *(double *)(result + 8 * v31);
          v20 += v21;
          v21 += 2;
          v23 = v29;
        }
        while (v29 < a2);
        *v18 = v14;
      }
      *(double *)&v41[3 * v11++ + v5] = v14;
      v12 = v17 + 1;
      ++v7;
    }
    while (v11 != 3);
    ++v5;
  }
  while (v5 != 3);
  v32 = 0;
  v33 = 0.0;
  v34 = a4;
  do
  {
    v35 = 0;
    v36 = v41;
    v37 = 0.0;
    do
    {
      v38 = 0;
      v39 = 0.0;
      do
      {
        v39 = v39 + *(double *)&v36[v38] * (*v34)[v38];
        ++v38;
      }
      while (v38 != 3);
      if (!v32)
        v33 = v33 + v39 * (*a4)[v35 + 3];
      v37 = v37 + v39 * (*a4)[3 * v32 + v35++];
      v36 += 3;
    }
    while (v35 != 3);
    a5[v32++] = v37;
    ++v34;
  }
  while (v32 != 3);
  for (i = 0; i != 3; ++i)
  {
    if (a5[i] <= 0.00000001)
      a5[i] = 0.00000001;
  }
  return result;
}

uint64_t GM_Get_Best_NSSS(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4;
  int v6;
  _WORD *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;

  v4 = (a4 - 1);
  if (a4 - 1 < 0)
    return 0xFFFFFFFFLL;
  v6 = 0;
  v7 = (_WORD *)(a1 + 36 * v4 + 8);
  v8 = (unsigned __int8 *)(a2 + 48 * v4 + 12);
  v9 = 0xFFFFFFFFLL;
  do
  {
    if (Is_Legal(*((_DWORD *)v7 - 2)))
    {
      v10 = *((unsigned __int8 *)v7 - 4);
      if (v10 >= a3 && (*v7 & 8) != 0 && (*v7 & 0x300) != 0x300 && *(v8 - 8) && v8[3])
      {
        v11 = v10 + 6 * *v8;
        if (v11 <= v6)
        {
          v9 = v9;
        }
        else
        {
          v6 = v11;
          v9 = v4;
        }
      }
    }
    v7 -= 18;
    v8 -= 48;
  }
  while (v4-- > 0);
  return v9;
}

uint64_t GncP27_30PopulateRawMeas(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  unsigned __int16 *v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  void *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  char v27;
  int v28;
  char v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int32x4_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  int32x4_t v54;
  int32x4_t v55;
  int8x8_t v56;
  int v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  void *v72;
  void *v73;
  char __str[966];
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int16 *)(a1 + 88);
  if (*(_WORD *)(a1 + 88))
  {
    if (v4 >= 0x101)
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SigMeas Cnt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 87, "GncP27_30PopulateRawMeas", 514, *(unsigned __int16 *)(a1 + 88));
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      return 0;
    }
    result = (uint64_t)gnssOsa_Calloc("GncP27_30PopulateRawMeas", 423, v4, 0xC0uLL);
    *(_QWORD *)(a2 + 96) = result;
    if (!result)
      return result;
  }
  v7 = *(unsigned __int16 *)(a1 + 57664);
  if (*(_WORD *)(a1 + 57664))
  {
    if (v7 >= 0x101)
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SvUsg Cnt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP27_30PopulateRawMeas", 514, *(unsigned __int16 *)(a1 + 57664));
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      goto LABEL_16;
    }
    v9 = gnssOsa_Calloc("GncP27_30PopulateRawMeas", 441, v7, 0x68uLL);
    *(_QWORD *)(a2 + 336) = v9;
    if (!v9)
    {
LABEL_16:
      v13 = *(void **)(a2 + 96);
      if (v13)
        free(v13);
      result = 0;
      *(_QWORD *)(a2 + 96) = 0;
      return result;
    }
  }
  v10 = (unsigned __int16 *)(a1 + 84296);
  v11 = *(unsigned __int16 *)(a1 + 84296);
  if (*(_WORD *)(a1 + 84296))
  {
    if (v11 >= 0x101)
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v12 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SvUsg Cnt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "GncP27_30PopulateRawMeas", 514, *v10);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      goto LABEL_82;
    }
    v14 = gnssOsa_Calloc("GncP27_30PopulateRawMeas", 461, v11, 0x108uLL);
    *(_QWORD *)(a2 + 352) = v14;
    if (!v14)
    {
LABEL_82:
      v72 = *(void **)(a2 + 96);
      if (v72)
        free(v72);
      *(_QWORD *)(a2 + 96) = 0;
      v73 = *(void **)(a2 + 336);
      if (v73)
        free(v73);
      result = 0;
      *(_QWORD *)(a2 + 336) = 0;
      return result;
    }
  }
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 80);
  v15 = *(unsigned __int16 *)(a1 + 88);
  *(_WORD *)(a2 + 88) = v15;
  if (v15 >= 0x100)
    v16 = 256;
  else
    v16 = v15;
  if (v16)
  {
    v17 = 0;
    v18 = 224 * v16;
    v19 = (_WORD *)(*(_QWORD *)(a2 + 96) + 190);
    do
    {
      v20 = a1 + v17;
      *(v19 - 95) = *(_WORD *)(a1 + v17 + 96);
      v21 = *(_DWORD *)(a1 + v17 + 100);
      if (v21 >= 0xA)
        LOBYTE(v21) = 1;
      *((_BYTE *)v19 - 188) = v21;
      v22 = *(unsigned int *)(v20 + 104);
      if (v22 >= 7)
        v23 = 0;
      else
        v23 = 0x7060503020100uLL >> (8 * v22);
      *((_BYTE *)v19 - 187) = v23;
      *(v19 - 93) = *(_WORD *)(v20 + 108);
      *(_OWORD *)(v19 - 91) = *(_OWORD *)(v20 + 112);
      *(_QWORD *)(v19 - 83) = *(_QWORD *)(v20 + 128);
      *((_BYTE *)v19 - 158) = *(_BYTE *)(v20 + 136);
      *(_OWORD *)(v19 - 75) = *(_OWORD *)(v20 + 144);
      *(_QWORD *)(v19 - 67) = *(_QWORD *)(v20 + 160);
      *(_QWORD *)(v19 - 63) = *(_QWORD *)(v20 + 176);
      *((_BYTE *)v19 - 118) = *(_BYTE *)(v20 + 184);
      *(v19 - 58) = *(_WORD *)(v20 + 186);
      *(_OWORD *)(v19 - 55) = *(_OWORD *)(v20 + 192);
      *(_OWORD *)(v19 - 47) = *(_OWORD *)(v20 + 208);
      *(_OWORD *)(v19 - 39) = *(_OWORD *)(v20 + 224);
      v24 = *(_DWORD *)(v20 + 240);
      if (v24 >= 5)
        LOBYTE(v24) = 0;
      *((_BYTE *)v19 - 62) = v24;
      v25 = *(_DWORD *)(v20 + 244);
      if (v25 >= 5)
        LOBYTE(v25) = 0;
      *((_BYTE *)v19 - 61) = v25;
      *(v19 - 30) = *(_WORD *)(v20 + 248);
      *(v19 - 29) = *(_WORD *)(v20 + 250);
      *((_BYTE *)v19 - 56) = *(_BYTE *)(v20 + 252);
      *(_QWORD *)(v19 - 27) = *(_QWORD *)(v20 + 256);
      v26 = *(_DWORD *)(v20 + 264);
      if (v26 == 2)
        v27 = 2;
      else
        v27 = v26 == 1;
      *((_BYTE *)v19 - 46) = v27;
      *(_OWORD *)(v19 - 19) = *(_OWORD *)(v20 + 272);
      *(_OWORD *)(v19 - 11) = *(_OWORD *)(v20 + 288);
      v28 = *(_DWORD *)(v20 + 304);
      if (v28 == 2)
        v29 = 2;
      else
        v29 = 1;
      if (v28)
        v30 = v29;
      else
        v30 = 0;
      *((_BYTE *)v19 - 6) = v30;
      *(v19 - 2) = *(_WORD *)(v20 + 308);
      *(v19 - 1) = *(_WORD *)(v20 + 310);
      *v19 = *(_WORD *)(v20 + 312);
      v19 += 96;
      v17 += 224;
    }
    while (v18 != v17);
  }
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(a1 + 57440);
  *(_BYTE *)(a2 + 108) = *(_BYTE *)(a1 + 57444);
  *(_BYTE *)(a2 + 120) = *(_BYTE *)(a1 + 57456);
  *(_QWORD *)(a2 + 176) = *(_QWORD *)(a1 + 57512);
  *(_QWORD *)(a2 + 256) = *(_QWORD *)(a1 + 57592);
  *(_OWORD *)(a2 + 264) = *(_OWORD *)(a1 + 57600);
  *(_OWORD *)(a2 + 280) = *(_OWORD *)(a1 + 57616);
  *(_QWORD *)(a2 + 110) = *(_QWORD *)(a1 + 57446);
  *(_BYTE *)(a2 + 118) = *(_BYTE *)(a1 + 57454);
  *(_BYTE *)(a2 + 119) = *(_BYTE *)(a1 + 57455);
  *(_WORD *)(a2 + 128) = *(_WORD *)(a1 + 57464);
  *(_DWORD *)(a2 + 132) = *(_DWORD *)(a1 + 57468);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 57472);
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a1 + 57488);
  *(_WORD *)(a2 + 160) = *(_WORD *)(a1 + 57496);
  *(_BYTE *)(a2 + 162) = *(_BYTE *)(a1 + 57498);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(a1 + 57504);
  *(_WORD *)(a2 + 184) = *(_WORD *)(a1 + 57520);
  *(_DWORD *)(a2 + 188) = *(_DWORD *)(a1 + 57524);
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(a1 + 57528);
  *(_WORD *)(a2 + 208) = *(_WORD *)(a1 + 57544);
  *(_DWORD *)(a2 + 212) = *(_DWORD *)(a1 + 57548);
  *(_OWORD *)(a2 + 216) = *(_OWORD *)(a1 + 57552);
  *(_WORD *)(a2 + 232) = *(_WORD *)(a1 + 57568);
  *(_DWORD *)(a2 + 236) = *(_DWORD *)(a1 + 57572);
  *(_OWORD *)(a2 + 240) = *(_OWORD *)(a1 + 57576);
  *(_OWORD *)(a2 + 296) = *(_OWORD *)(a1 + 57632);
  *(_QWORD *)(a2 + 312) = *(_QWORD *)(a1 + 57648);
  *(_DWORD *)(a2 + 320) = *(_DWORD *)(a1 + 57656);
  v31 = *(unsigned __int16 *)(a1 + 57664);
  *(_WORD *)(a2 + 328) = v31;
  if (v31 >= 0x100)
    v32 = 256;
  else
    v32 = v31;
  if (v32)
  {
    v33 = 0;
    v34 = 104 * v32;
    v35 = *(_QWORD *)(a2 + 336);
    v36 = a1 + 57672;
    v37 = a1 + 57720;
    do
    {
      v38 = v35 + v33;
      *(_WORD *)(v35 + v33) = *(_WORD *)(v36 + v33);
      v39 = *(_DWORD *)(a1 + 57676 + v33);
      if (v39 >= 5)
        LOBYTE(v39) = 1;
      *(_BYTE *)(v38 + 2) = v39;
      *(_OWORD *)(v38 + 8) = *(_OWORD *)(a1 + v33 + 57680);
      v40 = *(_DWORD *)(a1 + 57696 + v33);
      if (v40 >= 5)
        LOBYTE(v40) = 1;
      *(_BYTE *)(v38 + 24) = v40;
      *(_BYTE *)(v38 + 25) = *(_BYTE *)(v36 + v33 + 28);
      *(_OWORD *)(v38 + 32) = *(_OWORD *)(v37 + v33 - 16);
      *(_OWORD *)(v38 + 48) = *(_OWORD *)(v37 + v33);
      *(_OWORD *)(v38 + 64) = *(_OWORD *)(v37 + v33 + 16);
      *(_OWORD *)(v38 + 80) = *(_OWORD *)(v37 + v33 + 32);
      *(_QWORD *)(v38 + 96) = *(_QWORD *)(a1 + 57768 + v33);
      v33 += 104;
    }
    while (v34 != v33);
  }
  v41 = *v10;
  *(_WORD *)(a2 + 344) = v41;
  if (v41)
  {
    v42 = 0;
    v43 = 0;
    v44 = a1 + 84516;
    v45 = a1 + 84592;
    v46 = a1 + 84560;
    v47 = a1 + 84400;
    v48 = 48;
    v49.i64[0] = 0x200000002;
    v49.i64[1] = 0x200000002;
    do
    {
      v50 = *(_QWORD *)(a2 + 352);
      v51 = v50 + 264 * v43;
      v52 = *(unsigned int *)(a1 + 296 * v43 + 84304);
      if (v52 >= 7)
        v53 = 0;
      else
        v53 = 0x7060503020100uLL >> (8 * v52);
      *(_BYTE *)v51 = v53;
      *(_WORD *)(v51 + 2) = *(_WORD *)(a1 + 296 * v43 + 84308);
      *(_BYTE *)(v51 + 4) = *(_BYTE *)(a1 + 296 * v43 + 84310);
      *(_OWORD *)(v51 + 144) = *(_OWORD *)(a1 + 296 * v43 + 84448);
      v54 = *(int32x4_t *)(a1 + 296 * v43 + 84464);
      v55 = *(int32x4_t *)(a1 + 296 * v43 + 84480);
      v56 = vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v54, v49), (int16x8_t)vceqq_s32(v55, v49)));
      *(int8x8_t *)(v51 + 160) = vbic_s8(vsub_s8(vand_s8(v56, (int8x8_t)0x202020202020202), vmvn_s8(v56)), vmovn_s16(vuzp1q_s16((int16x8_t)vceqzq_s32(v54), (int16x8_t)vceqzq_s32(v55))));
      v57 = *(_DWORD *)(a1 + 296 * v43 + 84496);
      if (v57 == 2)
        v58 = 2;
      else
        v58 = 1;
      if (v57)
        v59 = v58;
      else
        v59 = 0;
      *(_BYTE *)(v51 + 168) = v59;
      *(_QWORD *)(v51 + 176) = *(_QWORD *)(a1 + 296 * v43 + 84504);
      LODWORD(v60) = *(unsigned __int16 *)(a1 + 296 * v43 + 84512);
      *(_WORD *)(v51 + 184) = v60;
      if (v60 >= 2)
        v60 = 2;
      else
        v60 = v60;
      if ((_DWORD)v60)
      {
        v61 = 0;
        v62 = 0;
        v63 = v50 + v42;
        do
        {
          v64 = *(_DWORD *)(v44 + 4 * v62);
          if (v64 >= 0xA)
            LOBYTE(v64) = 1;
          v65 = v63 + v62;
          *(_BYTE *)(v65 + 186) = v64;
          v66 = (_QWORD *)(v63 + v61);
          v66[24] = *(_QWORD *)(v46 + v61 - 32);
          v66[26] = *(_QWORD *)(v46 + v61 - 16);
          v66[28] = *(_QWORD *)(v46 + v61);
          v66[30] = *(_QWORD *)(v46 + v61 + 16);
          *(_BYTE *)(v65 + 256) = *(_BYTE *)(v45 + v62++);
          v61 += 8;
        }
        while (v60 != v62);
      }
      v67 = v50 + 264 * v43;
      v68 = *(_DWORD *)(a1 + 296 * v43 + 84312);
      if (v68 >= 5)
        LOBYTE(v68) = 0;
      *(_BYTE *)(v67 + 8) = v68;
      *(_QWORD *)(v67 + 16) = *(_QWORD *)(a1 + 296 * v43 + 84320);
      *(_OWORD *)(v67 + 120) = *(_OWORD *)(a1 + 296 * v43 + 84424);
      *(_QWORD *)(v67 + 136) = *(_QWORD *)(a1 + 296 * v43 + 84440);
      v69 = v50 + v48;
      v70 = -24;
      do
      {
        v71 = (_QWORD *)(v69 + v70);
        *v71 = *(_QWORD *)(v47 + v70 - 48);
        v71[3] = *(_QWORD *)(v47 + v70 - 24);
        v71[6] = *(_QWORD *)(v47 + v70);
        v71[9] = *(_QWORD *)(v47 + v70 + 24);
        v70 += 8;
      }
      while (v70);
      if (v43 > 0xFE)
        break;
      ++v43;
      v44 += 296;
      v45 += 296;
      v42 += 264;
      v46 += 296;
      v48 += 264;
      v47 += 296;
    }
    while (v43 < *(unsigned __int16 *)(a2 + 344));
  }
  if (*(_DWORD *)(a1 + 160152))
  {
    *(_DWORD *)(a2 + 360) = *(_DWORD *)(a1 + 160080);
    *(_OWORD *)(a2 + 368) = *(_OWORD *)(a1 + 160088);
    *(_OWORD *)(a2 + 384) = *(_OWORD *)(a1 + 160104);
    *(_OWORD *)(a2 + 400) = *(_OWORD *)(a1 + 160120);
    *(_OWORD *)(a2 + 416) = *(_OWORD *)(a1 + 160136);
  }
  return 1;
}

BOOL R8_EQ(const double *a1, const double *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  _BOOL4 v13;
  BOOL v14;
  BOOL v15;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)a1 | 0x8000000000000000;
  if (*(uint64_t *)a1 < 0)
    v3 = -v2;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)a2 | 0x8000000000000000;
  if (*(uint64_t *)a2 < 0)
    v5 = -v4;
  v6 = ~v2 & 0x7FF0000000000000;
  v7 = v2 & 0xFFFFFFFFFFFFFLL;
  v8 = ~v4 & 0x7FF0000000000000;
  v9 = v4 & 0xFFFFFFFFFFFFFLL;
  v10 = v5 - v3;
  v11 = v3 >= v5;
  v12 = v3 - v5;
  if (!v11)
    v12 = v10;
  v13 = v12 < 4;
  if (v8)
    v14 = 1;
  else
    v14 = v9 == 0;
  if (!v14)
    v13 = 0;
  if (v6)
    v15 = 1;
  else
    v15 = v7 == 0;
  return v15 && v13;
}

uint64_t Core_Get_TM_FSP_Time(unsigned int *a1, unsigned int *a2)
{
  int v4;
  double v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t result;
  uint64_t v12;

  *a1 = 0;
  *a2 = 0;
  if (!*(_BYTE *)p_NA)
    return 0;
  v4 = *(_DWORD *)(p_NA + 392);
  v5 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  v6 = p_NA;
  v7 = *(_DWORD *)(p_NA + 396);
  v8 = **(_DWORD **)(p_api + 8) - v7;
  if ((unint64_t)v5 - v4 > 0xDBBA0 || v8 > 900000 || v8 <= -5001)
  {
    EvCrt_v("Core_Get_TM_FSP_Time: WARNING: Deleted OS_Time %u Age %d TTick %u Age %d ms", *(_DWORD *)(p_NA + 392), (unint64_t)v5 - v4, v7, v8);
    result = 0;
    v12 = p_NA;
    *(_BYTE *)p_NA = 0;
    *(_QWORD *)(v12 + 392) = 0;
    return result;
  }
  if (!*(_BYTE *)p_NA)
    return 0;
  *a1 = *(_DWORD *)(p_NA + 392);
  *a2 = *(_DWORD *)(v6 + 396);
  return 1;
}

uint64_t Core_Get_Ref_Time(int a1, double *a2, __int16 *a3, double *a4)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  double v8;

  v4 = p_NA;
  if (!*(_BYTE *)(p_NA + 2))
    return 0;
  v5 = a1 - *(_DWORD *)(p_NA + 404);
  if ((v5 - 900001) >= 0xFFF238A7)
  {
    *a2 = *(double *)(p_NA + 408);
    *a3 = *(_WORD *)(v4 + 416);
    *a4 = *(double *)(v4 + 424);
    v8 = (double)v5;
    Inc_GPS_TOW((double)v5 * 0.001, a2, a3);
    *a4 = *a4 + v8 * 0.00000001;
    return 1;
  }
  else
  {
    result = 0;
    *(_BYTE *)(p_NA + 2) = 0;
  }
  return result;
}

uint64_t Get_FSP_Time(unsigned int a1, __int16 *a2, double *a3, double *a4, unsigned __int8 *a5)
{
  _BOOL4 FS_Pulse_TTick;
  uint64_t result;
  unsigned int v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  double v24;
  unsigned int v25;
  char *v27;
  int v28;
  unsigned int v29;
  double v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35[2];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(p_NA + 3))
    return 0;
  *(_QWORD *)v35 = 0;
  v34 = 0;
  v33 = 0;
  FS_Pulse_TTick = API_Get_FS_Pulse_TTick(&v34, &v33, &v35[1], v35);
  result = 0;
  if (!FS_Pulse_TTick)
    return result;
  v12 = v35[1];
  v13 = (double)(int)(v35[1] - v34) + (double)v33 * -0.0000152587891;
  if (fabs(v13) > 60000.0)
  {
    EvCrt_v("Get_FSP_Time:  ERROR:  fabs(DeltaTTick) = fabs(%g) > %d", (double)(int)(v35[1] - v34) + (double)v33 * -0.0000152587891, 60000);
    return 0;
  }
  v32 = v34;
  v14 = *(_QWORD *)(p_api + 80);
  v15 = *(double *)(v14 + 920) / 299792458.0;
  v31 = v33;
  if (v15 > 0.000001)
  {
    EvLog("Get_FSP_Time:  Neglecting Clock Drift in FSP Time propogation!");
    v16 = 0.0;
    v15 = 0.000001;
  }
  else
  {
    v16 = *(double *)(v14 + 184);
  }
  v17 = 0;
  v18 = v35[0];
  v19 = v35[0] - (int)v13;
  v20 = p_NA;
  v21 = 1;
  while (1)
  {
    v22 = v21;
    if (*(_BYTE *)(v20 + v17 + 3))
    {
      v23 = v20 + 8 * v17;
      if (*(double *)(v23 + 456) > 0.0)
      {
        *a2 = *(_WORD *)(v20 + 2 * v17 + 448);
        *a3 = *(double *)(v23 + 432);
        v24 = *(double *)(v23 + 456) * *(double *)(v23 + 456);
        *a4 = v24;
        v25 = *(_DWORD *)(v20 + 4 * v17 + 488);
        if (!*(_BYTE *)(v20 + 5))
          break;
        if (v25 >= v19 - 500 && v25 <= v19 + 400)
          break;
      }
    }
    v21 = 0;
    v17 = 1;
    if ((v22 & 1) == 0)
    {
      v27 = "Get_FSP_Time:  WARNING:  No pulse found !";
LABEL_19:
      EvLog(v27);
      return 0;
    }
  }
  v28 = a1 - v12;
  if (a1 == v12)
  {
    v29 = v18;
  }
  else
  {
    if (a1 < v12)
    {
      v27 = "Get_FSP_Time:  ReqTTick earlier than FSP FS_DBTT_TTick !";
      goto LABEL_19;
    }
    v29 = v18;
    v13 = v13 + (double)v28;
  }
  v30 = (1.0 - v16) * (v13 * 0.001);
  *a4 = v24 + v15 * v30 * (v15 * v30);
  Inc_GPS_TOW(v30, a3, a2);
  EvLog_v("Get_FSP_Time:  %d %d %d %d %d %d %g %d %g %d %d %g %g", a1, v17, v32, v31, v29, v19, *(double *)(p_NA + 8 * v17 + 432), v25, v30, *a2, (int)*a3, *a3 - (double)(int)*a3, *a4 * 1000000.0 * 1000000.0);
  *a5 = 2;
  return 1;
}

BOOL Core_Get_GPS_TimePos(unsigned int a1, _BYTE *a2, _BYTE *a3, int *a4, double *a5, double *a6, uint64_t a7, double *a8, double *a9)
{
  int v17;
  double v18;
  double v19;
  int v20;
  __int16 v21;
  unsigned __int8 v22;
  char v23;
  double v24[4];

  v24[3] = *(double *)MEMORY[0x24BDAC8D0];
  v21 = 0;
  v18 = 0.0;
  *a2 = 0;
  *a3 = 0;
  *a8 = 0.0;
  *a9 = 0.0;
  *a6 = 0.0;
  if (Get_FSP_Time(a1, &v21, a5, &v18, &v22))
  {
    *a6 = sqrt(v18) * 3.0;
    *a2 = 1;
  }
  v23 = 0;
  v19 = 0.0;
  if (Core_Get_Pos_LLH(a1, 150000, 1, &v20, a7, (uint64_t)v24, (uint64_t *)&v19, &v23, &v22, &v17, a4)
    && v23)
  {
    *a8 = sqrt(v24[0]) * 3.0;
    *a9 = sqrt(v19) * 3.0;
    *a3 = 1;
  }
  return *a2 || *a3 != 0;
}

uint64_t Core_Get_Pos_LLH(int a1, int a2, int a3, int *a4, uint64_t a5, uint64_t a6, uint64_t *a7, _BYTE *a8, _BYTE *a9, _DWORD *a10, int *a11)
{
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t result;
  int v15;
  int v16;
  uint64_t *v17;
  int *v18;
  uint64_t v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;

  *a8 = 0;
  *a9 = 0;
  *a10 = 0;
  *a11 = 0;
  v11 = p_NA;
  if (!*(_BYTE *)(p_NA + 8))
    return 0;
  if (*(_BYTE *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10 && *(int *)(p_NA + 26764) >= 2)
    *(_DWORD *)(p_NA + 632) = 1;
  v12 = *(_DWORD **)(p_api + 8);
  if (*v12)
    v13 = *(_DWORD *)(v11 + 544) + *v12 - v12[4];
  else
    v13 = 0;
  v15 = a1 - v13;
  if (a1 - v13 <= -3001)
  {
    v16 = a3;
    v17 = a7;
    v33 = a6;
    v18 = a4;
    v19 = a5;
    v20 = a2;
    v21 = a8;
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Pos_LLH [0]", a1 - v13, a1, v13);
    a8 = v21;
    a2 = v20;
    a5 = v19;
    a4 = v18;
    a6 = v33;
    a7 = v17;
    a3 = v16;
    v15 = 999999000;
  }
  if (v15 <= a2)
  {
    *a4 = v13;
    v22 = p_NA;
    v23 = *(_QWORD *)(p_NA + 568);
    *(_OWORD *)a5 = *(_OWORD *)(p_NA + 552);
    *(_QWORD *)(a5 + 16) = v23;
    v24 = *(_QWORD *)(v22 + 592);
    *(_OWORD *)a6 = *(_OWORD *)(v22 + 576);
    *(_QWORD *)(a6 + 16) = v24;
    *a7 = *(_QWORD *)(v22 + 624);
    *a8 = *(_BYTE *)(v22 + 9);
    *a9 = *(_BYTE *)(v22 + 656);
    v25 = *(_DWORD *)(v22 + 640);
    *a10 = v25;
    v26 = *(_DWORD *)(v22 + 632);
    if (!v26)
    {
      *a11 = 0;
      v27 = 1;
      switch(v25)
      {
        case 0:
        case 6:
          goto LABEL_20;
        case 1:
        case 2:
        case 5:
          v27 = 4;
          goto LABEL_20;
        case 3:
        case 4:
          v27 = 3;
LABEL_20:
          *a11 = v27;
          goto LABEL_21;
        case 7:
        case 8:
          *a11 = 2;
          goto LABEL_31;
        default:
          goto LABEL_21;
      }
    }
    *a11 = v26;
    if ((v25 - 7) >= 2)
    {
LABEL_21:
      if (*(_BYTE *)(v22 + 9))
      {
        v28 = 0x412E848000000000;
        if (*(double *)a7 > 1000000.0 || (v28 = 0x4059000000000000, *(double *)a7 < 100.0))
          *a7 = v28;
      }
      if (*(_BYTE *)(v22 + 8) && *(double *)(a6 + 8) < 250000.0)
      {
        v29 = *(double *)a6;
        *(_QWORD *)(a6 + 8) = *(_QWORD *)a6;
        if (v29 < 250000.0)
          *(int64x2_t *)a6 = vdupq_n_s64(0x410E848000000000uLL);
        *(_QWORD *)(a6 + 16) = 0;
      }
    }
LABEL_31:
    v30 = *(double *)a6;
    v31 = *(double *)(a6 + 8);
    if (*(double *)a6 < v31)
    {
      *(double *)(a6 + 8) = v30;
      *(_QWORD *)(a6 + 16) = 0;
      v31 = v30;
    }
    if (a3)
    {
      v32 = (double)v15 * 0.015 * ((double)v15 * 0.015);
      if (v31 < v32)
      {
        *(double *)(a6 + 8) = v30;
        if (v30 < v32)
        {
          *(double *)a6 = v32;
          *(double *)(a6 + 8) = v32;
        }
        *(_QWORD *)(a6 + 16) = 0;
      }
    }
    return 1;
  }
  else
  {
    result = 0;
    *(_WORD *)(p_NA + 8) = 0;
  }
  return result;
}

uint64_t Core_Get_Clk_Drift(int a1, int a2, unsigned int *a3, double *a4, double *a5, unsigned __int8 *a6)
{
  uint64_t result;
  _DWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  double v16;

  if (!*(_BYTE *)(p_NA + 6))
    return 0;
  if (*(_BYTE *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10)
  {
    EvLog("Core_Get_Clk_Drift: Ext Freq Assist skipped in Airborne mode");
    return 0;
  }
  v12 = *(_DWORD **)(p_api + 8);
  if (*v12)
    v13 = *(_DWORD *)(p_NA + 496) + *v12 - v12[4];
  else
    v13 = 0;
  v14 = a1 - v13;
  if (a1 - v13 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Clk_Drift", a1 - v13, a1, v13);
    v14 = 999999000;
  }
  if (v14 / 1000 <= a2)
  {
    *a3 = v13;
    v15 = p_NA;
    *a4 = *(double *)(p_NA + 504);
    *a5 = *(double *)(v15 + 512);
    *a6 = *(_BYTE *)(v15 + 520);
    v16 = 9.0e-16;
    if (*a5 < 9.0e-16 || (v16 = *a5, *a5 < 2.77777778e-14))
    {
      if (v14 > 899999)
        *a5 = 2.77777778e-14;
      else
        *a5 = v16
            + (2.77777778e-14 - v16)
            * (-((double)(900 - v14 / 1000) * 0.00111111111 * ((double)(900 - v14 / 1000) * 0.00111111111))
             * ((double)(900 - v14 / 1000)
              * 0.00111111111)
             + 1.0);
    }
    return 1;
  }
  else
  {
    result = 0;
    *(_BYTE *)(p_NA + 6) = 0;
  }
  return result;
}

uint64_t Core_Get_Pos_H(int a1, int a2, double *a3, double *a4)
{
  uint64_t v4;
  int *v8;
  int v9;
  int v10;
  uint64_t result;

  v4 = p_NA;
  if (!*(_BYTE *)(p_NA + 9))
    return 0;
  if (*(_BYTE *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10 && *(int *)(p_NA + 26764) >= 2)
    *(_DWORD *)(p_NA + 632) = 1;
  v8 = *(int **)(p_api + 8);
  v9 = *v8;
  if (*v8)
    v9 = *(_DWORD *)(v4 + 544) + v9 - v8[4];
  v10 = a1 - v9;
  if (a1 - v9 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Pos_H", a1 - v9, a1, v9);
    v4 = p_NA;
    v10 = 999999000;
  }
  if (v10 <= a2)
  {
    *a3 = *(double *)(v4 + 568);
    *a4 = *(double *)(v4 + 624);
    return 1;
  }
  else
  {
    result = 0;
    *(_BYTE *)(v4 + 9) = 0;
  }
  return result;
}

uint64_t Core_Get_Static_Status(unsigned __int8 *a1)
{
  uint64_t v1;
  double v3;
  int v4;
  int v5;
  uint64_t result;

  v1 = p_NA;
  if (!*(_BYTE *)(p_NA + 376))
    return 0;
  if (!*(_BYTE *)(p_NA + 379) || *(_DWORD *)(p_NA + 26760) != 10 || *(int *)(p_NA + 26764) < 2)
  {
    v3 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v1 = p_NA;
    v4 = *(_DWORD *)(p_NA + 26724);
    v5 = (unint64_t)v3 - v4;
    if (v5 > -3001)
    {
      if (v5 < 2001)
      {
        *a1 = *(_BYTE *)(p_NA + 26728);
        return 1;
      }
    }
    else
    {
      EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Static_Status", (unint64_t)v3 - v4, (unint64_t)v3, v4);
      v1 = p_NA;
    }
  }
  result = 0;
  *(_BYTE *)(v1 + 376) = 0;
  return result;
}

uint64_t Core_Get_Ped_Status(_DWORD *a1, _BYTE *a2)
{
  uint64_t v2;
  double v5;
  int v6;
  int v7;
  uint64_t result;

  v2 = p_NA;
  if (!*(_BYTE *)(p_NA + 377))
    return 0;
  if (!*(_BYTE *)(p_NA + 379) || *(_DWORD *)(p_NA + 26760) != 10 || *(int *)(p_NA + 26764) < 2)
  {
    v5 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v2 = p_NA;
    v6 = *(_DWORD *)(p_NA + 26732);
    v7 = (unint64_t)v5 - v6;
    if (v7 > -3001)
    {
      if (v7 < 2001)
      {
        *a1 = *(_DWORD *)(p_NA + 26736);
        *a2 = *(_BYTE *)(v2 + 26740);
        return 1;
      }
    }
    else
    {
      EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Ped_Status", (unint64_t)v5 - v6, (unint64_t)v5, v6);
      v2 = p_NA;
    }
  }
  result = 0;
  *(_BYTE *)(v2 + 377) = 0;
  return result;
}

uint64_t Core_Get_ExtA_DMS(int a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  double v6;
  int v7;
  uint64_t result;
  uint64_t v9;

  v2 = p_NA;
  if (!*(_BYTE *)(p_NA + 378))
    return 0;
  if (*(_BYTE *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10 && *(int *)(p_NA + 26764) >= 2)
    goto LABEL_8;
  v5 = *(_DWORD *)(p_NA + 26744);
  v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_DMS", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_8:
    result = 0;
    *(_BYTE *)(v2 + 378) = 0;
    return result;
  }
  if (v7 >= 43200001)
    goto LABEL_8;
  if (v7 > a1)
    return 0;
  v9 = *(_QWORD *)(p_NA + 26744);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(p_NA + 26752);
  *(_QWORD *)a2 = v9;
  return 1;
}

uint64_t Core_Get_ExtA_UAC(int a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  double v6;
  int v7;
  uint64_t result;
  uint64_t v9;

  v2 = p_NA;
  if (!*(_BYTE *)(p_NA + 379))
    return 0;
  v5 = *(_DWORD *)(p_NA + 26756);
  v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_UAC", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_5:
    result = 0;
    *(_BYTE *)(v2 + 379) = 0;
    return result;
  }
  if (v7 >= 43200001)
    goto LABEL_5;
  if (v7 > a1)
    return 0;
  v9 = *(_QWORD *)(p_NA + 26756);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(p_NA + 26764);
  *(_QWORD *)a2 = v9;
  return 1;
}

uint64_t Core_Get_ExtA_FIV_Ind(int a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  double v6;
  int v7;
  uint64_t result;
  uint64_t v9;

  v2 = p_NA;
  if (!*(_BYTE *)(p_NA + 380))
    return 0;
  v5 = *(_DWORD *)(p_NA + 26768);
  v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_FIV_Ind", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_5:
    result = 0;
    *(_BYTE *)(v2 + 380) = 0;
    return result;
  }
  if (v7 >= 43200001)
    goto LABEL_5;
  if (v7 > a1)
    return 0;
  v9 = *(_QWORD *)(p_NA + 26768);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(p_NA + 26776);
  *(_QWORD *)a2 = v9;
  return 1;
}

uint64_t Core_Get_ExtA_Alt(int a1, _OWORD *a2)
{
  uint64_t v2;
  int v5;
  double v6;
  int v7;
  uint64_t result;
  __int128 v9;

  v2 = p_NA;
  if (!*(_BYTE *)(p_NA + 382))
    return 0;
  if (*(_BYTE *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10 && *(int *)(p_NA + 26764) >= 2)
    goto LABEL_8;
  v5 = *(_DWORD *)(p_NA + 26784);
  v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_Alt", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_8:
    result = 0;
    *(_BYTE *)(v2 + 382) = 0;
    return result;
  }
  if (v7 >= 120001)
    goto LABEL_8;
  if (v7 > a1)
    return 0;
  v9 = *(_OWORD *)(p_NA + 26800);
  *a2 = *(_OWORD *)(p_NA + 26784);
  a2[1] = v9;
  return 1;
}

uint64_t Core_Get_ExtA_MapV(int a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  double v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = p_NA;
  if (!*(_BYTE *)(p_NA + 383))
    return 0;
  if (*(_BYTE *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10 && *(int *)(p_NA + 26764) >= 2)
    goto LABEL_8;
  v5 = *(_DWORD *)(p_NA + 26816);
  v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_MapV", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_8:
    result = 0;
    *(_BYTE *)(v2 + 383) = 0;
    return result;
  }
  if (v7 >= 120001)
    goto LABEL_8;
  if (v7 > a1)
    return 0;
  v9 = p_NA;
  *(_OWORD *)a2 = *(_OWORD *)(p_NA + 26816);
  v10 = *(_OWORD *)(v9 + 26848);
  v11 = *(_OWORD *)(v9 + 26864);
  v12 = *(_OWORD *)(v9 + 26832);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(v9 + 26880);
  *(_OWORD *)(a2 + 32) = v10;
  *(_OWORD *)(a2 + 48) = v11;
  *(_OWORD *)(a2 + 16) = v12;
  return 1;
}

uint64_t Core_Get_ExtA_SpdC(int a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  double v6;
  int v7;
  uint64_t result;
  uint64_t v9;

  v2 = p_NA;
  if (!*(_BYTE *)(p_NA + 384))
    return 0;
  if (*(_BYTE *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10 && *(int *)(p_NA + 26764) >= 2)
    goto LABEL_8;
  v5 = *(_DWORD *)(p_NA + 26888);
  v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_SpdC", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_8:
    result = 0;
    *(_BYTE *)(v2 + 384) = 0;
    return result;
  }
  if (v7 >= 120001)
    goto LABEL_8;
  if (v7 > a1)
    return 0;
  v9 = *(_QWORD *)(p_NA + 26904);
  *(_OWORD *)a2 = *(_OWORD *)(p_NA + 26888);
  *(_QWORD *)(a2 + 16) = v9;
  return 1;
}

uint64_t Core_Get_ExtA_AT_Vel(int a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  double v6;
  int v7;
  uint64_t result;
  uint64_t v9;

  v2 = p_NA;
  if (!*(_BYTE *)(p_NA + 385))
    return 0;
  if (*(_BYTE *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10 && *(int *)(p_NA + 26764) >= 2)
    goto LABEL_8;
  v5 = *(_DWORD *)(p_NA + 26912);
  v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_AT_Vel", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_8:
    result = 0;
    *(_BYTE *)(v2 + 385) = 0;
    return result;
  }
  if (v7 >= 120001)
    goto LABEL_8;
  if (v7 > a1)
    return 0;
  v9 = *(_QWORD *)(p_NA + 26928);
  *(_OWORD *)a2 = *(_OWORD *)(p_NA + 26912);
  *(_QWORD *)(a2 + 16) = v9;
  return 1;
}

uint64_t Core_Get_ExtA_V_Vel(int a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  double v6;
  int v7;
  uint64_t result;
  uint64_t v9;

  v2 = p_NA;
  if (!*(_BYTE *)(p_NA + 386))
    return 0;
  if (*(_BYTE *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10 && *(int *)(p_NA + 26764) >= 2)
    goto LABEL_8;
  v5 = *(_DWORD *)(p_NA + 26936);
  v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_V_Vel", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_8:
    result = 0;
    *(_BYTE *)(v2 + 386) = 0;
    return result;
  }
  if (v7 >= 120001)
    goto LABEL_8;
  if (v7 > a1)
    return 0;
  v9 = *(_QWORD *)(p_NA + 26952);
  *(_OWORD *)a2 = *(_OWORD *)(p_NA + 26936);
  *(_QWORD *)(a2 + 16) = v9;
  return 1;
}

uint64_t Core_Get_ExtA_Heading(int a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  double v6;
  int v7;
  uint64_t result;
  uint64_t v9;

  v2 = p_NA;
  if (!*(_BYTE *)(p_NA + 387))
    return 0;
  if (*(_BYTE *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10 && *(int *)(p_NA + 26764) >= 2)
    goto LABEL_8;
  v5 = *(_DWORD *)(p_NA + 26960);
  v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_Heading", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_8:
    result = 0;
    *(_BYTE *)(v2 + 387) = 0;
    return result;
  }
  if (v7 >= 120001)
    goto LABEL_8;
  if (v7 > a1)
    return 0;
  v9 = *(_QWORD *)(p_NA + 26976);
  *(_OWORD *)a2 = *(_OWORD *)(p_NA + 26960);
  *(_QWORD *)(a2 + 16) = v9;
  return 1;
}

uint64_t Core_Get_ExtA_TunnelEP(int a1, _OWORD *a2)
{
  uint64_t v2;
  int v5;
  double v6;
  int v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v2 = p_NA;
  if (!*(_BYTE *)(p_NA + 388))
    return 0;
  if (*(_BYTE *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10 && *(int *)(p_NA + 26764) >= 2)
    goto LABEL_8;
  v5 = *(_DWORD *)(p_NA + 26984);
  v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_TunnelEP", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_8:
    result = 0;
    *(_BYTE *)(v2 + 388) = 0;
    return result;
  }
  if (v7 >= 30001)
    goto LABEL_8;
  if (v7 > a1)
    return 0;
  v9 = *(_OWORD *)(p_NA + 27032);
  v11 = *(_OWORD *)(p_NA + 26984);
  v10 = *(_OWORD *)(p_NA + 27000);
  a2[2] = *(_OWORD *)(p_NA + 27016);
  a2[3] = v9;
  *a2 = v11;
  a2[1] = v10;
  return 1;
}

uint64_t Core_Get_Speed(int a1, unsigned int *a2, double *a3, double *a4, double *a5)
{
  uint64_t v5;
  _DWORD *v6;
  int v7;
  uint64_t result;

  v5 = p_NA;
  if (!*(_BYTE *)(p_NA + 389))
    return 0;
  if (!*(_BYTE *)(p_NA + 379) || *(_DWORD *)(p_NA + 26760) != 10 || *(int *)(p_NA + 26764) < 2)
  {
    v6 = *(_DWORD **)(p_api + 8);
    if (*v6)
      v7 = *(_DWORD *)(p_NA + 27048) + *v6 - v6[4];
    else
      v7 = 0;
    if (a1 - v7 > -3001)
    {
      if (a1 - v7 < 3001)
      {
        *a2 = v7;
        *a3 = *(double *)(v5 + 27056);
        *a4 = *(double *)(v5 + 27064);
        *a5 = 0.0;
        return 1;
      }
    }
    else
    {
      EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Speed", a1 - v7, a1, v7);
      v5 = p_NA;
    }
  }
  result = 0;
  *(_BYTE *)(v5 + 389) = 0;
  return result;
}

uint64_t Core_Get_GSpeed(int a1, unsigned int *a2, double *a3, double *a4, double *a5)
{
  uint64_t v5;
  _DWORD *v6;
  int v7;
  uint64_t result;

  v5 = p_NA;
  if (!*(_BYTE *)(p_NA + 390))
    return 0;
  if (!*(_BYTE *)(p_NA + 379) || *(_DWORD *)(p_NA + 26760) != 10 || *(int *)(p_NA + 26764) < 2)
  {
    v6 = *(_DWORD **)(p_api + 8);
    if (*v6)
      v7 = *(_DWORD *)(p_NA + 27072) + *v6 - v6[4];
    else
      v7 = 0;
    if (a1 - v7 > -3001)
    {
      if (a1 - v7 < 3001)
      {
        *a2 = v7;
        *a3 = *(double *)(v5 + 27080);
        *a4 = *(double *)(v5 + 27088);
        *a5 = 0.0;
        return 1;
      }
    }
    else
    {
      EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "GSpeed", a1 - v7, a1, v7);
      v5 = p_NA;
    }
  }
  result = 0;
  *(_BYTE *)(v5 + 390) = 0;
  return result;
}

uint64_t Core_Get_Track(int a1, unsigned int *a2, double *a3, double *a4, double *a5, double *a6)
{
  uint64_t v6;
  _DWORD *v7;
  int v8;
  uint64_t result;

  v6 = p_NA;
  if (!*(_BYTE *)(p_NA + 391))
    return 0;
  if (!*(_BYTE *)(p_NA + 379) || *(_DWORD *)(p_NA + 26760) != 10 || *(int *)(p_NA + 26764) < 2)
  {
    v7 = *(_DWORD **)(p_api + 8);
    if (*v7)
      v8 = *(_DWORD *)(p_NA + 27096) + *v7 - v7[4];
    else
      v8 = 0;
    if (a1 - v8 > -3001)
    {
      if (a1 - v8 < 3001)
      {
        *a2 = v8;
        *a3 = *(double *)(v6 + 27112);
        *a4 = *(double *)(v6 + 27104);
        *a5 = *(double *)(v6 + 27120);
        *a6 = 0.0;
        return 1;
      }
    }
    else
    {
      EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Track", a1 - v8, a1, v8);
      v6 = p_NA;
    }
  }
  result = 0;
  *(_BYTE *)(v6 + 391) = 0;
  return result;
}

uint64_t Core_Get_GPS_Alm(int a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v7;
  int v8;
  _BYTE *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  BOOL v16;

  if ((a1 - 33) < 0xFFFFFFE0)
    return 0;
  v4 = (a1 - 1);
  if (a2 >= 619315201 && *(_BYTE *)(p_NA + v4 + 44))
  {
    v5 = *(_DWORD *)(p_NA + 36 * v4 + 3260);
    if (v5 >= 619315201 && a2 - v5 >= 15724801)
    {
      result = 0;
      *(_BYTE *)(p_NA + v4 + 44) = 0;
      return result;
    }
  }
  else
  {
    if (!*(_BYTE *)(p_NA + v4 + 44))
      return 0;
    v5 = *(_DWORD *)(p_NA + 36 * v4 + 3260);
  }
  v7 = p_NA + 36 * v4;
  v8 = *(_DWORD *)(v7 + 3264);
  *(_DWORD *)a3 = v5;
  *(_DWORD *)(a3 + 4) = v8;
  *(_WORD *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 10) = *(_WORD *)(v7 + 3268);
  v9 = (_BYTE *)(v7 + 3270);
  v10 = 9;
  v11 = 12;
  do
  {
    v12 = a3 + v11;
    *(_BYTE *)v12 = *v9;
    *(_BYTE *)(v12 + 1) = v9[1];
    *(_WORD *)(v12 + 2) = v9[2];
    --v10;
    v11 += 4;
    v9 += 3;
  }
  while (v10 > 1);
  v13 = *(_DWORD *)a3;
  if (a2 >= 1 && !v13)
  {
    *(_DWORD *)a3 = a2;
    v13 = a2;
  }
  if (a2)
    v14 = v13 < a2 + 50;
  else
    v14 = 1;
  v15 = v14;
  if (v13)
    v16 = v13 < 619315201;
  else
    v16 = 0;
  if (v16)
    return 0;
  else
    return v15;
}

uint64_t Core_Get_QZSS_Alm(int a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v7;
  int v8;
  _BYTE *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  BOOL v16;

  if ((a1 + 53) < 0xF6u)
    return 0;
  v4 = (a1 - 193);
  if (a2 >= 619315201 && *(_BYTE *)(p_NA + v4 + 86))
  {
    v5 = *(_DWORD *)(p_NA + 36 * v4 + 5212);
    if (v5 >= 619315201 && a2 - v5 >= 15724801)
    {
      result = 0;
      *(_BYTE *)(p_NA + v4 + 86) = 0;
      return result;
    }
  }
  else
  {
    if (!*(_BYTE *)(p_NA + v4 + 86))
      return 0;
    v5 = *(_DWORD *)(p_NA + 36 * v4 + 5212);
  }
  v7 = p_NA + 36 * v4;
  v8 = *(_DWORD *)(v7 + 5216);
  *(_DWORD *)a3 = v5;
  *(_DWORD *)(a3 + 4) = v8;
  *(_WORD *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 10) = *(_WORD *)(v7 + 5220);
  v9 = (_BYTE *)(v7 + 5222);
  v10 = 9;
  v11 = 12;
  do
  {
    v12 = a3 + v11;
    *(_BYTE *)v12 = *v9;
    *(_BYTE *)(v12 + 1) = v9[1];
    *(_WORD *)(v12 + 2) = v9[2];
    --v10;
    v11 += 4;
    v9 += 3;
  }
  while (v10 > 1);
  v13 = *(_DWORD *)a3;
  if (a2 >= 1 && !v13)
  {
    *(_DWORD *)a3 = a2;
    v13 = a2;
  }
  if (a2)
    v14 = v13 < a2 + 50;
  else
    v14 = 1;
  v15 = v14;
  if (v13)
    v16 = v13 < 619315201;
  else
    v16 = 0;
  if (v16)
    return 0;
  else
    return v15;
}

BOOL Core_Get_GLON_Alm(int a1, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  _BOOL8 result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;

  if ((a1 - 25) < 0xFFFFFFE8)
    return 0;
  v3 = (a1 - 1);
  if (a2 < 619315201 || !*(_BYTE *)(p_NA + v3 + 120))
  {
    if (*(_BYTE *)(p_NA + v3 + 120))
      goto LABEL_10;
    return 0;
  }
  v4 = *(_DWORD *)(p_NA + 36 * v3 + 25808);
  if (v4 >= 619315201 && a2 - v4 >= 15724801)
  {
    result = 0;
    *(_BYTE *)(p_NA + v3 + 120) = 0;
    return result;
  }
LABEL_10:
  v7 = p_NA + 36 * v3;
  v8 = *(_OWORD *)(v7 + 25824);
  v9 = *(_OWORD *)(v7 + 25808);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(v7 + 25840);
  *(_OWORD *)a3 = v9;
  *(_OWORD *)(a3 + 16) = v8;
  v10 = *(_DWORD *)a3;
  if (a2 >= 1 && !v10)
  {
    *(_DWORD *)a3 = a2;
    v10 = a2;
  }
  if (v10 && v10 < 619315201)
    return 0;
  return !a2 || v10 < a2 + 50;
}

BOOL Core_Get_GAL_Alm(int a1, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  _BOOL8 result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;

  if ((a1 - 37) < 0xFFFFFFDC)
    return 0;
  v3 = (a1 - 1);
  if (a2 < 619315201 || !*(_BYTE *)(p_NA + v3 + 183))
  {
    if (*(_BYTE *)(p_NA + v3 + 183))
      goto LABEL_10;
    return 0;
  }
  v4 = *(_DWORD *)(p_NA + 36 * v3 + 8756);
  if (v4 >= 619315201 && a2 - v4 >= 15724801)
  {
    result = 0;
    *(_BYTE *)(p_NA + v3 + 183) = 0;
    return result;
  }
LABEL_10:
  v7 = p_NA + 36 * v3;
  v9 = *(_OWORD *)(v7 + 8756);
  v8 = *(_OWORD *)(v7 + 8772);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(v7 + 8788);
  *(_OWORD *)a3 = v9;
  *(_OWORD *)(a3 + 16) = v8;
  v10 = *(_DWORD *)a3;
  if (a2 >= 1 && !v10)
  {
    *(_DWORD *)a3 = a2;
    v10 = a2;
  }
  if (v10 && v10 < 619315201)
    return 0;
  return !a2 || v10 < a2 + 50;
}

BOOL Core_Get_BDS_Alm(int a1, int a2, _OWORD *a3)
{
  uint64_t v3;
  int v4;
  _BOOL8 result;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  int v10;

  if ((a1 - 64) < 0xFFFFFFC1)
    return 0;
  v3 = (a1 - 1);
  if (a2 < 619315201 || !*(_BYTE *)(p_NA + v3 + 284))
  {
    if (*(_BYTE *)(p_NA + v3 + 284))
      goto LABEL_10;
    return 0;
  }
  v4 = *(_DWORD *)(p_NA + 44 * v3 + 19688);
  if (v4 >= 619315201 && a2 - v4 >= 15724801)
  {
    result = 0;
    *(_BYTE *)(p_NA + v3 + 284) = 0;
    return result;
  }
LABEL_10:
  v7 = (__int128 *)(p_NA + 44 * v3 + 19688);
  v9 = *v7;
  v8 = v7[1];
  *(_OWORD *)((char *)a3 + 28) = *(__int128 *)((char *)v7 + 28);
  *a3 = v9;
  a3[1] = v8;
  v10 = *(_DWORD *)a3;
  if (a2 >= 1 && !v10)
  {
    *(_DWORD *)a3 = a2;
    v10 = a2;
  }
  if (v10 && v10 < 619315201)
    return 0;
  return !a2 || v10 < a2 + 50;
}

BOOL Core_Get_NVIC_Alm(int a1, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  _BOOL8 result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;

  if ((a1 - 15) < 0xFFFFFFF2)
    return 0;
  v3 = (a1 - 1);
  if (a2 < 619315201 || !*(_BYTE *)(p_NA + v3 + 362))
  {
    if (*(_BYTE *)(p_NA + v3 + 362))
      goto LABEL_10;
    return 0;
  }
  v4 = *(_DWORD *)(p_NA + 52 * v3 + 23544);
  if (v4 >= 619315201 && a2 - v4 >= 15724801)
  {
    result = 0;
    *(_BYTE *)(p_NA + v3 + 362) = 0;
    return result;
  }
LABEL_10:
  v7 = p_NA + 52 * v3 + 23544;
  v9 = *(_OWORD *)(v7 + 16);
  v8 = *(_OWORD *)(v7 + 32);
  v10 = *(_OWORD *)v7;
  *(_DWORD *)(a3 + 48) = *(_DWORD *)(v7 + 48);
  *(_OWORD *)(a3 + 16) = v9;
  *(_OWORD *)(a3 + 32) = v8;
  *(_OWORD *)a3 = v10;
  v11 = *(_DWORD *)a3;
  if (a2 >= 1 && !v11)
  {
    *(_DWORD *)a3 = a2;
    v11 = a2;
  }
  if (v11 && v11 < 619315201)
    return 0;
  return !a2 || v11 < a2 + 50;
}

BOOL Core_Get_GPS_Eph(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BOOL8 result;
  int v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int v26;
  BOOL v27;

  if ((a1 - 33) < 0xFFFFFFE0)
    return 0;
  v6 = (a1 - 1);
  v7 = (_BYTE *)(p_NA + v6 + 12);
  if (!(_DWORD)a2 && !a3)
  {
    *v7 = 0;
    EvLog_d("Core_Get_GPS_Eph:  (a) Deleted SV", a1);
    return 0;
  }
  v9 = *v7;
  if ((int)a2 >= 619315201 && v9)
  {
    v10 = *(unsigned int *)(p_NA + 80 * v6 + 700);
    if ((int)v10 >= 619315201 && (int)a2 - (int)v10 >= 21601)
    {
      EvLog_nd("Core_Get_GPS_Eph:  (b) Deleted SV", 3, (uint64_t)a3, a1, a2, v10);
      result = 0;
      *(_BYTE *)(p_NA + v6 + 12) = 0;
      return result;
    }
    if (!a3)
      return 0;
  }
  else
  {
    result = 0;
    if (!a3 || !v9)
      return result;
  }
  UnCompact_GPS_BinEph((uint64_t)a3, p_NA + 80 * v6 + 700);
  v13 = a3[2];
  v14 = 16 * (unsigned __int16)a3[7];
  v15 = a3[17];
  if ((v13 & 0xFFC000) != 0 || ((a3[9] | v15) & 3) != 0 || (a3[25] & 3) != 0)
  {
    v16 = *a3;
    if ((int)v16 >= 1)
    {
      v17 = (v13 >> 14) & 0x3FF;
      do
      {
        v18 = (__int16)v17;
        LOWORD(v17) = v17 + 1024;
      }
      while (v18 < *(__int16 *)(*(_QWORD *)(p_api + 72) + 1718));
      LODWORD(v19) = 604800 * v18 + v14 - v16;
      if ((int)v16 >= 619315201 && (int)v19 >= 618105601)
      {
        if (v19 >= 0x49C18B00)
          LODWORD(v19) = 1237420800;
        LODWORD(v19) = v19 - 1238630399 + ((int)v14 + 604800 * v18 - (int)v16 - (int)v19 + 619315199) % 0x24EA0000u;
      }
      if ((int)v19 > -21601 || v14 >> 5 > 0x2A2)
      {
        if (v14 <= 0x8E620 || (int)v19 <= 21600)
          v19 = v19;
        else
          v19 = (v19 - 604800);
      }
      else
      {
        v19 = (v19 + 604800);
      }
      if ((int)v19 >= 0)
        v21 = v19;
      else
        v21 = -(int)v19;
      if (v21 >= 0x5461)
      {
        *(_BYTE *)(p_NA + v6 + 12) = 0;
        EvLog_nd("Core_Get_GPS_Eph:  (c) Deleted SV", 5, v12, a1, a2, v19, v14, v16);
      }
    }
  }
  if ((int)a2 >= 1)
  {
    LODWORD(v22) = ((int)a2 - (int)v14) % 604800;
    if ((int)v22 <= 302400)
      v22 = v22;
    else
      v22 = (v22 - 604800);
    v23 = (int)v22 > 10800 && (v15 & 0x80) == 0;
    v24 = *a3;
    if (v23 || (int)v22 >= 16201)
    {
      *(_BYTE *)(p_NA + v6 + 12) = 0;
      EvLog_nd("Core_Get_GPS_Eph:  (d) Deleted SV", 5, v12, a1, a2, v22, v14, v24);
      LODWORD(v24) = *a3;
    }
    if (!(_DWORD)v24)
      *a3 = a2;
  }
  if (!*(_BYTE *)(p_NA + v6 + 12))
    return 0;
  v26 = *a3;
  if (*a3)
  {
    if (v26 < 619315201)
      return 0;
  }
  if ((_DWORD)a2 && v26 >= (int)a2 + 300)
    return 0;
  if (v26)
    v27 = v26 <= (int)a2 - 7200;
  else
    v27 = 0;
  return !v27;
}

BOOL Core_Get_QZSS_Eph(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BOOL8 result;
  int v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int v26;
  BOOL v27;

  if ((a1 + 53) < 0xF6u)
    return 0;
  v6 = (a1 - 193);
  v7 = (_BYTE *)(p_NA + v6 + 76);
  if (!(_DWORD)a2 && !a3)
  {
    *v7 = 0;
    EvLog_d("Core_Get_QZSS_Eph:  (a) Deleted SV", a1);
    return 0;
  }
  v9 = *v7;
  if ((int)a2 >= 619315201 && v9)
  {
    v10 = *(unsigned int *)(p_NA + 80 * v6 + 4412);
    if ((int)v10 >= 619315201 && (int)a2 - (int)v10 >= 21601)
    {
      EvLog_nd("Core_Get_QZSS_Eph:  (b) Deleted SV", 3, (uint64_t)a3, a1, a2, v10);
      result = 0;
      *(_BYTE *)(p_NA + v6 + 76) = 0;
      return result;
    }
    if (!a3)
      return 0;
  }
  else
  {
    result = 0;
    if (!a3 || !v9)
      return result;
  }
  UnCompact_GPS_BinEph((uint64_t)a3, p_NA + 80 * v6 + 4412);
  v13 = a3[2];
  v14 = 16 * (unsigned __int16)a3[7];
  v15 = a3[17];
  if ((v13 & 0xFFC000) != 0 || ((a3[9] | v15) & 3) != 0 || (a3[25] & 3) != 0)
  {
    v16 = *a3;
    if ((int)v16 >= 1)
    {
      v17 = (v13 >> 14) & 0x3FF;
      do
      {
        v18 = (__int16)v17;
        LOWORD(v17) = v17 + 1024;
      }
      while (v18 < *(__int16 *)(*(_QWORD *)(p_api + 72) + 1718));
      LODWORD(v19) = 604800 * v18 + v14 - v16;
      if ((int)v16 >= 619315201 && (int)v19 >= 618105601)
      {
        if (v19 >= 0x49C18B00)
          LODWORD(v19) = 1237420800;
        LODWORD(v19) = v19 - 1238630399 + ((int)v14 + 604800 * v18 - (int)v16 - (int)v19 + 619315199) % 0x24EA0000u;
      }
      if ((int)v19 > -21601 || v14 >> 5 > 0x2A2)
      {
        if (v14 <= 0x8E620 || (int)v19 <= 21600)
          v19 = v19;
        else
          v19 = (v19 - 604800);
      }
      else
      {
        v19 = (v19 + 604800);
      }
      if ((int)v19 >= 0)
        v21 = v19;
      else
        v21 = -(int)v19;
      if (v21 >= 0x5461)
      {
        *(_BYTE *)(p_NA + v6 + 76) = 0;
        EvLog_nd("Core_Get_QZSS_Eph:  (c) Deleted SV", 5, v12, a1, a2, v19, v14, v16);
      }
    }
  }
  if ((int)a2 >= 1)
  {
    LODWORD(v22) = ((int)a2 - (int)v14) % 604800;
    if ((int)v22 <= 302400)
      v22 = v22;
    else
      v22 = (v22 - 604800);
    v23 = (int)v22 > 10800 && (v15 & 0x80) == 0;
    v24 = *a3;
    if (v23 || (int)v22 >= 16201)
    {
      *(_BYTE *)(p_NA + v6 + 76) = 0;
      EvLog_nd("Core_Get_QZSS_Eph:  (d) Deleted SV", 5, v12, a1, a2, v22, v14, v24);
      LODWORD(v24) = *a3;
    }
    if (!(_DWORD)v24)
      *a3 = a2;
  }
  if (!*(_BYTE *)(p_NA + v6 + 76))
    return 0;
  v26 = *a3;
  if (*a3)
  {
    if (v26 < 619315201)
      return 0;
  }
  if ((_DWORD)a2 && v26 >= (int)a2 + 300)
    return 0;
  if (v26)
    v27 = v26 <= (int)a2 - 7200;
  else
    v27 = 0;
  return !v27;
}

BOOL Core_Get_GAL_Eph(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  _BYTE *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  BOOL v23;

  if ((a1 - 37) < 0xFFFFFFDC)
    return 0;
  v4 = a2;
  v6 = (a1 - 1);
  v7 = p_NA;
  v8 = (_BYTE *)(p_NA + v6 + 147);
  if (!(_DWORD)a2 && !a3)
  {
    *v8 = 0;
    EvLog_d("Core_Get_GAL_Eph:  (a) Deleted SV", a1);
    return 0;
  }
  if ((int)a2 >= 619315201 && *v8)
  {
    v9 = *(unsigned int *)(p_NA + 88 * v6 + 5588);
    if ((int)v9 >= 619315201 && (int)a2 - (int)v9 >= 14401)
    {
      EvLog_nd("Core_Get_GAL_Eph:  (b) Deleted SV", 3, a3, a1, a2, v9);
      v7 = p_NA;
      *(_BYTE *)(p_NA + v6 + 147) = 0;
    }
    v11 = 60 * *(unsigned __int16 *)(v7 + 88 * v6 + 5606);
    v12 = v4 % 0x93A80 - v11;
    LODWORD(v13) = v12 + 604800;
    if (v12 >= -302400)
      LODWORD(v13) = v4 % 0x93A80 - v11;
    if (v12 <= 302399)
      v13 = v13;
    else
      v13 = (v12 - 604800);
    if ((int)v13 >= 0)
      v14 = v13;
    else
      v14 = -(int)v13;
    if (v14 >= 0x3841)
    {
      *(_BYTE *)(v7 + v6 + 147) = 0;
      EvLog_nd("Core_Get_GAL_Eph:  (c) Deleted SV", 4, a3, a1, v13, v4 % 0x93A80, v11);
    }
  }
  if (!a3)
    return 0;
  v15 = (_BYTE *)(p_NA + v6 + 147);
  if (!*v15)
    return 0;
  v16 = p_NA + 88 * v6 + 5588;
  v17 = *(_OWORD *)(p_NA + 88 * v6 + 5604);
  *(_OWORD *)a3 = *(_OWORD *)v16;
  *(_OWORD *)(a3 + 16) = v17;
  v18 = *(_OWORD *)(v16 + 32);
  v19 = *(_OWORD *)(v16 + 48);
  v20 = *(_OWORD *)(v16 + 64);
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(v16 + 80);
  *(_OWORD *)(a3 + 48) = v19;
  *(_OWORD *)(a3 + 64) = v20;
  *(_OWORD *)(a3 + 32) = v18;
  v21 = *(_DWORD *)a3;
  if ((int)v4 >= 1 && !v21)
  {
    *(_DWORD *)a3 = v4;
    v21 = v4;
  }
  if (!*v15 || v21 && v21 < 619315201 || v4 && v21 >= (int)(v4 + 300))
    return 0;
  if (v21)
    v23 = v21 <= (int)(v4 - 1800);
  else
    v23 = 0;
  return !v23;
}

BOOL Core_Get_BDS_Eph(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  _BYTE *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  BOOL v26;

  if ((a1 - 64) < 0xC1u)
    return 0;
  v4 = a2;
  v6 = p_NA;
  v7 = (_BYTE *)(p_NA + (a1 - 1) + 221);
  if (!(_DWORD)a2 && !a3)
  {
    *v7 = 0;
    EvLog_d("Core_Get_BDS_Eph:  (a) Deleted SV", a1);
    return 0;
  }
  v8 = (a1 - 1);
  if ((int)a2 >= 619315201 && *v7)
  {
    v9 = *(unsigned int *)(p_NA + 152 * (a1 - 1) + 10112);
    if ((int)v9 >= 619315201 && (int)a2 - (int)v9 >= 14401)
    {
      EvLog_nd("Core_Get_BDS_Eph:  (b) Deleted SV", 3, a3, a1, a2, v9);
      v6 = p_NA;
      *(_BYTE *)(p_NA + v8 + 221) = 0;
    }
    v11 = (300 * *(_DWORD *)(v6 + 152 * v8 + 10132));
    v12 = v4 % 0x93A80 - v11;
    LODWORD(v13) = v12 + 604800;
    if (v12 >= -302400)
      LODWORD(v13) = v4 % 0x93A80 - v11;
    if (v12 <= 302399)
      v13 = v13;
    else
      v13 = (v12 - 604800);
    if ((int)v13 >= 0)
      v14 = v13;
    else
      v14 = -(int)v13;
    if (v14 >= 0x3841)
    {
      *(_BYTE *)(v6 + v8 + 221) = 0;
      EvLog_nd("Core_Get_BDS_Eph:  (c) Deleted SV", 4, a3, a1, v13, v4 % 0x93A80, v11);
    }
  }
  if (!a3)
    return 0;
  v15 = (_BYTE *)(p_NA + v8 + 221);
  if (!*v15)
    return 0;
  v16 = p_NA + 152 * v8;
  v17 = *(_OWORD *)(v16 + 10128);
  *(_OWORD *)a3 = *(_OWORD *)(v16 + 10112);
  *(_OWORD *)(a3 + 16) = v17;
  v18 = *(_OWORD *)(v16 + 10144);
  v19 = *(_OWORD *)(v16 + 10160);
  v20 = *(_OWORD *)(v16 + 10192);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(v16 + 10176);
  *(_OWORD *)(a3 + 80) = v20;
  *(_OWORD *)(a3 + 32) = v18;
  *(_OWORD *)(a3 + 48) = v19;
  v21 = *(_OWORD *)(v16 + 10208);
  v22 = *(_OWORD *)(v16 + 10224);
  v23 = *(_OWORD *)(v16 + 10240);
  *(_QWORD *)(a3 + 144) = *(_QWORD *)(v16 + 10256);
  *(_OWORD *)(a3 + 112) = v22;
  *(_OWORD *)(a3 + 128) = v23;
  *(_OWORD *)(a3 + 96) = v21;
  v24 = *(_DWORD *)a3;
  if ((int)v4 >= 1 && !v24)
  {
    *(_DWORD *)a3 = v4;
    v24 = v4;
  }
  if (!*v15 || v24 && v24 < 619315201 || v4 && v24 >= (int)(v4 + 300))
    return 0;
  if (v24)
    v26 = v24 <= (int)(v4 - 1800);
  else
    v26 = 0;
  return !v26;
}

BOOL Core_Get_NVIC_Eph(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v11;
  signed int v12;
  uint64_t v13;
  unsigned int v14;
  _BYTE *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  BOOL v22;

  if ((a1 - 15) < 0xFFFFFFF2)
    return 0;
  v4 = a2;
  v6 = (a1 - 1);
  v7 = p_NA;
  v8 = (_BYTE *)(p_NA + v6 + 348);
  if (!(_DWORD)a2 && !a3)
  {
    *v8 = 0;
    EvLog_d("Core_Get_NVIC_Eph:  (a) Deleted SV", a1);
    return 0;
  }
  if ((int)a2 >= 619315201 && *v8)
  {
    v9 = *(unsigned int *)(p_NA + 76 * v6 + 22480);
    if ((int)v9 >= 619315201 && (int)a2 - (int)v9 >= 14401)
    {
      EvLog_nd("Core_Get_NVIC_Eph:  (b) Deleted SV", 3, (uint64_t)a3, a1, a2, v9);
      v7 = p_NA;
      *(_BYTE *)(p_NA + v6 + 348) = 0;
    }
    v11 = *(unsigned __int16 *)(v7 + 76 * v6 + 22498);
    v12 = v4 % 0x93A80 - 16 * v11;
    LODWORD(v13) = v12 + 604800;
    if (v12 >= -302400)
      LODWORD(v13) = v4 % 0x93A80 - 16 * v11;
    if (v12 <= 302399)
      v13 = v13;
    else
      v13 = (v12 - 604800);
    if ((int)v13 >= 0)
      v14 = v13;
    else
      v14 = -(int)v13;
    if (v14 >= 0x3841)
    {
      *(_BYTE *)(v7 + v6 + 348) = 0;
      EvLog_nd("Core_Get_NVIC_Eph:  (c) Deleted SV", 4, (uint64_t)a3, a1, v13, v4 % 0x93A80, (16 * v11));
    }
  }
  if (!a3 || !*(_BYTE *)(p_NA + v6 + 348))
    return 0;
  v15 = (_BYTE *)(p_NA + v6 + 348);
  v16 = (_OWORD *)(p_NA + 76 * v6);
  *a3 = v16[1405];
  v17 = v16[1406];
  v18 = v16[1407];
  v19 = v16[1408];
  *(_OWORD *)((char *)a3 + 60) = *(_OWORD *)((char *)v16 + 22540);
  a3[2] = v18;
  a3[3] = v19;
  a3[1] = v17;
  v20 = *(_DWORD *)a3;
  if ((int)v4 >= 1 && !v20)
  {
    *(_DWORD *)a3 = v4;
    v20 = v4;
  }
  if (!*v15 || v20 && v20 < 619315201 || v4 && v20 >= (int)(v4 + 300))
    return 0;
  if (v20)
    v22 = v20 <= (int)(v4 - 1800);
  else
    v22 = 0;
  return !v22;
}

BOOL Core_Get_GLON_Eph(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  _BYTE *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  BOOL v22;

  if ((a1 - 25) < 0xFFFFFFE8)
    return 0;
  v6 = (a1 - 1);
  v7 = p_NA;
  v8 = (_BYTE *)(p_NA + v6 + 96);
  if (!(_DWORD)a2 && !a3)
  {
    *v8 = 0;
    EvLog_d("Core_Get_GLON_Eph:  (a) Deleted SV", a1);
    return 0;
  }
  if ((int)a2 >= 619315201 && *v8)
  {
    v9 = *(unsigned int *)(p_NA + (v6 << 6) + 24272);
    if ((int)v9 >= 619315201 && (int)a2 - (int)v9 >= 9901)
    {
      EvLog_nd("Core_Get_GLON_Eph:  (b) Deleted SV", 3, (uint64_t)a3, a1, a2, v9);
      v7 = p_NA;
      v11 = p_NA + v6;
      *(_BYTE *)(v11 + 96) = 0;
      *(_BYTE *)(v11 + 26700) = 127;
    }
    v12 = 900 * (*(_WORD *)(v7 + (v6 << 6) + 24298) & 0x7Fu);
    v13 = ((int)a2 + 10800) % 0x15180u - v12;
    v14 = v13 + 86400;
    if (v13 >= -43200)
      v14 = ((int)a2 + 10800) % 0x15180u - v12;
    if (v13 > 43199)
      v14 = v13 - 86400;
    if (v14 < 0)
      v14 = -v14;
    if (v14 >= 0x26AD)
    {
      *(_BYTE *)(v7 + v6 + 96) = 0;
      EvLog_nd("Core_Get_GLON_Eph:  (c) Deleted SV", 4, (uint64_t)a3, a1, a2, ((int)a2 + 10800) % 0x15180u, v12);
      v7 = p_NA;
      *(_BYTE *)(p_NA + v6 + 26700) = 127;
    }
  }
  if (!a3)
    return 0;
  v15 = (_BYTE *)(v7 + v6 + 96);
  if (!*v15)
    return 0;
  v16 = (_OWORD *)(v7 + (v6 << 6));
  v17 = v16[1518];
  v18 = v16[1520];
  v19 = v16[1517];
  a3[2] = v16[1519];
  a3[3] = v18;
  *a3 = v19;
  a3[1] = v17;
  v20 = *(_DWORD *)a3;
  if ((int)a2 >= 1 && !v20)
  {
    *(_DWORD *)a3 = a2;
    v20 = a2;
  }
  if (!*v15 || v20 && v20 < 619315201 || (_DWORD)a2 && v20 >= (int)a2 + 300)
    return 0;
  if (v20)
    v22 = v20 <= (int)a2 - 1800;
  else
    v22 = 0;
  return !v22;
}

_QWORD *Core_Set_GPS_Eph_Invalid(_QWORD *result)
{
  if (((_DWORD)result - 33) >= 0xFFFFFFE0)
  {
    *(_BYTE *)(p_NA + ((_DWORD)result - 1) + 12) = 0;
    return EvLog_d("Core_Set_GPS_Eph_Invalid:  Deleted SV", (int)result);
  }
  return result;
}

_QWORD *Core_Set_QZSS_Eph_Invalid(_QWORD *result)
{
  if (((_BYTE)result + 53) >= 0xF6u)
  {
    *(_BYTE *)(p_NA + ((_DWORD)result - 193) + 76) = 0;
    return EvLog_d("Core_Set_QZSS_Eph_Invalid:  Deleted SV", (int)result);
  }
  return result;
}

_QWORD *Core_Set_GLON_Eph_Invalid(_QWORD *result)
{
  if (((_DWORD)result - 25) >= 0xFFFFFFE8)
  {
    *(_BYTE *)(p_NA + ((_DWORD)result - 1) + 96) = 0;
    return EvLog_d("Core_Set_GLON_Eph_Invalid:  Deleted SV", (int)result);
  }
  return result;
}

_QWORD *Core_Set_GAL_Eph_Invalid(_QWORD *result)
{
  if (((_DWORD)result - 37) >= 0xFFFFFFDC)
  {
    *(_BYTE *)(p_NA + ((_DWORD)result - 1) + 147) = 0;
    return EvLog_d("Core_Set_GAL_Eph_Invalid:  Deleted SV", (int)result);
  }
  return result;
}

_QWORD *Core_Set_BDS_Eph_Invalid(_QWORD *result)
{
  if (((_DWORD)result - 64) >= 0xFFFFFFC1)
  {
    *(_BYTE *)(p_NA + ((_DWORD)result - 1) + 221) = 0;
    return EvLog_d("Core_Set_BDS_Eph_Invalid:  Deleted SV", (int)result);
  }
  return result;
}

_QWORD *Core_Set_NVIC_Eph_Invalid(_QWORD *result)
{
  if (((_DWORD)result - 15) >= 0xFFFFFFF2)
  {
    *(_BYTE *)(p_NA + ((_DWORD)result - 1) + 348) = 0;
    return EvLog_d("Core_Set_NVIC_Eph_Invalid:  Deleted SV", (int)result);
  }
  return result;
}

uint64_t Core_Get_GLON_Clk1(int a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  __int128 v7;

  v2 = p_NA;
  if (!*(_BYTE *)(p_NA + 144))
    return 0;
  v3 = p_NA + 26672;
  v4 = *(_DWORD *)(p_NA + 26672);
  if (a1 < 619315201 || v4)
  {
    if (a1 < 619315201)
      goto LABEL_8;
  }
  else
  {
    v4 = a1 - 900;
    *(_DWORD *)v3 = a1 - 900;
  }
  if (a1 - v4 >= 1209601)
  {
    result = 0;
    *(_BYTE *)(v2 + 144) = 0;
    return result;
  }
LABEL_8:
  if (v4)
    v6 = v4 < 619315201;
  else
    v6 = 0;
  if (!v6)
  {
    v7 = *(_OWORD *)v3;
    *(_OWORD *)((char *)a2 + 12) = *(_OWORD *)(v3 + 12);
    *a2 = v7;
    return 1;
  }
  return 0;
}

uint64_t Core_Get_GPS_Klob(int a1, _OWORD *a2)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;
  uint64_t result;
  BOOL v6;

  v2 = p_NA;
  if (!*(_BYTE *)(p_NA + 10))
    return 0;
  v3 = (_DWORD *)(p_NA + 660);
  v4 = *(_DWORD *)(p_NA + 660);
  if (a1 < 619315201 || v4)
  {
    if (a1 < 619315201)
      goto LABEL_8;
  }
  else
  {
    v4 = a1 - 900;
    *v3 = a1 - 900;
  }
  if (a1 - v4 >= 1209601)
  {
    result = 0;
    *(_BYTE *)(v2 + 10) = 0;
    return result;
  }
LABEL_8:
  if (v4)
    v6 = v4 < 619315201;
  else
    v6 = 0;
  if (!v6)
  {
    *a2 = *(_OWORD *)v3;
    return 1;
  }
  return 0;
}

uint64_t Core_Get_GPS_UTC(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  __int128 v7;

  v2 = p_NA;
  if (!*(_BYTE *)(p_NA + 11))
    return 0;
  v3 = p_NA + 676;
  v4 = *(_DWORD *)(p_NA + 676);
  if (a1 < 619315201 || v4)
  {
    if (a1 < 619315201)
      goto LABEL_8;
  }
  else
  {
    v4 = a1 - 900;
    *(_DWORD *)v3 = a1 - 900;
  }
  if (a1 - v4 >= 1209601)
  {
    result = 0;
    *(_BYTE *)(v2 + 11) = 0;
    return result;
  }
LABEL_8:
  if (v4)
    v6 = v4 < 619315201;
  else
    v6 = 0;
  if (!v6)
  {
    v7 = *(_OWORD *)v3;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)a2 = v7;
    return 1;
  }
  return 0;
}

uint64_t Core_Get_GAL_GGTO(int a1, _OWORD *a2)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;
  uint64_t result;
  BOOL v6;

  v2 = p_NA;
  if (!*(_BYTE *)(p_NA + 146))
    return 0;
  v3 = (_DWORD *)(p_NA + 5572);
  v4 = *(_DWORD *)(p_NA + 5572);
  if (a1 < 619315201 || v4)
  {
    if (a1 < 619315201)
      goto LABEL_8;
  }
  else
  {
    v4 = a1 - 900;
    *v3 = a1 - 900;
  }
  if (a1 - v4 >= 1209601)
  {
    result = 0;
    *(_BYTE *)(v2 + 146) = 0;
    return result;
  }
LABEL_8:
  if (v4)
    v6 = v4 < 619315201;
  else
    v6 = 0;
  if (!v6)
  {
    *a2 = *(_OWORD *)v3;
    return 1;
  }
  return 0;
}

uint64_t Core_Get_BDS_BGTO(int a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  __int128 *v8;
  __int128 v9;
  int v10;
  __int128 *v12;
  __int128 v13;

  v3 = p_NA;
  v4 = *(unsigned __int8 *)(p_NA + 219);
  if (*(_BYTE *)(p_NA + 219) && a1 >= 619315201 && !*(_DWORD *)(p_NA + 10052))
    *(_DWORD *)(p_NA + 10052) = a1 - 900;
  v5 = *(unsigned __int8 *)(v3 + 220);
  if (*(_BYTE *)(v3 + 220) && a1 >= 619315201 && !*(_DWORD *)(v3 + 10080))
    *(_DWORD *)(v3 + 10080) = a1 - 900;
  if (a1 >= 619315201 && v4)
  {
    if (a1 - *(_DWORD *)(v3 + 10052) <= 1209600)
    {
      v4 = 1;
    }
    else
    {
      v4 = 0;
      *(_BYTE *)(v3 + 219) = 0;
    }
  }
  if (a1 < 619315201 || !v5)
  {
LABEL_18:
    if (!v4)
      goto LABEL_25;
    goto LABEL_19;
  }
  if (a1 - *(_DWORD *)(v3 + 10080) > 1209600)
  {
    v5 = 0;
    *(_BYTE *)(v3 + 220) = 0;
    goto LABEL_18;
  }
  v5 = 1;
  if (!v4)
    goto LABEL_25;
LABEL_19:
  v6 = *(_DWORD *)(v3 + 10052);
  if (v6)
    v7 = v6 < 619315201;
  else
    v7 = 0;
  if (!v7)
  {
    v8 = (__int128 *)(v3 + 10052);
    v9 = *v8;
    *(_OWORD *)((char *)a2 + 12) = *(__int128 *)((char *)v8 + 12);
    *a2 = v9;
    return 1;
  }
LABEL_25:
  if (v5)
  {
    v10 = *(_DWORD *)(v3 + 10080);
    if (!v10 || v10 >= 619315201)
    {
      v12 = (__int128 *)(v3 + 10080);
      v13 = *v12;
      *(_OWORD *)((char *)a3 + 12) = *(__int128 *)((char *)v12 + 12);
      *a3 = v13;
      return 1;
    }
  }
  return 0;
}

uint64_t Core_Get_NVIC_NGTO(int a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;
  uint64_t result;
  BOOL v6;
  __int128 v7;

  v2 = p_NA;
  if (!*(_BYTE *)(p_NA + 347))
    return 0;
  v3 = (_DWORD *)(p_NA + 22460);
  v4 = *(_DWORD *)(p_NA + 22460);
  if (a1 < 619315201 || v4)
  {
    if (a1 < 619315201)
      goto LABEL_8;
  }
  else
  {
    v4 = a1 - 900;
    *v3 = a1 - 900;
  }
  if (a1 - v4 >= 1209601)
  {
    result = 0;
    *(_BYTE *)(v2 + 347) = 0;
    return result;
  }
LABEL_8:
  if (v4)
    v6 = v4 < 619315201;
  else
    v6 = 0;
  if (!v6)
  {
    v7 = *(_OWORD *)v3;
    *(_DWORD *)(a2 + 16) = v3[4];
    *(_OWORD *)a2 = v7;
    return 1;
  }
  return 0;
}

void s_NA_Ram::s_NA_Ram(s_NA_Ram *this)
{
  uint64_t v2;
  char *v3;
  char *v4;
  _WORD *v5;
  _OWORD *v6;
  uint64_t i;
  char *v8;
  uint64_t j;
  char *v10;
  uint64_t k;
  char *v12;
  uint64_t m;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t n;
  _OWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  char *v25;

  v2 = 0;
  *((_QWORD *)this + 81) = 0;
  v3 = (char *)this + 26684;
  *((_BYTE *)this + 656) = 0;
  v4 = (char *)this + 22474;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  v5 = (_WORD *)((char *)this + 10060);
  *(_OWORD *)((char *)this + 484) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_WORD *)this + 208) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_DWORD *)this + 112) = 0;
  *((_QWORD *)this + 55) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((_BYTE *)this + 520) = 0;
  *((_OWORD *)this + 33) = 0u;
  *((_DWORD *)this + 136) = 0;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 628) = 0u;
  *(_QWORD *)((char *)this + 692) = 0;
  *(_OWORD *)((char *)this + 660) = 0u;
  *(_OWORD *)((char *)this + 676) = 0u;
  do
  {
    *(_DWORD *)((char *)this + v2 + 774) = 0;
    v6 = (_OWORD *)((char *)this + v2 + 700);
    *((_BYTE *)this + v2 + 778) = 0;
    *v6 = 0uLL;
    v6[1] = 0uLL;
    v6[2] = 0uLL;
    v6[3] = 0uLL;
    v2 += 80;
    *(_OWORD *)((char *)v6 + 57) = 0uLL;
  }
  while (v2 != 2560);
  for (i = 3260; i != 4412; i += 36)
  {
    v8 = (char *)this + i;
    *((_WORD *)v8 + 16) = 0;
    *(_OWORD *)v8 = 0uLL;
    *((_OWORD *)v8 + 1) = 0uLL;
  }
  for (j = 0; j != 800; j += 80)
  {
    v10 = (char *)this + j + 4486;
    *(_WORD *)v10 = 0;
    *(_WORD *)((char *)this + j + 4488) = 0;
    v10[4] = 0;
    *(_OWORD *)(v10 - 74) = 0uLL;
    *(_OWORD *)(v10 - 58) = 0uLL;
    *(_OWORD *)(v10 - 42) = 0uLL;
    *(_OWORD *)(v10 - 26) = 0uLL;
    *(_OWORD *)(v10 - 17) = 0uLL;
  }
  for (k = 0; k != 360; k += 36)
  {
    v12 = (char *)this + k + 5212;
    *((_WORD *)v12 + 16) = 0;
    *(_OWORD *)v12 = 0uLL;
    *((_OWORD *)v12 + 1) = 0uLL;
  }
  *(_QWORD *)((char *)this + 5578) = 0;
  *(_QWORD *)((char *)this + 5572) = 0;
  bzero((char *)this + 5588, 0xC60uLL);
  for (m = 0; m != 1296; m += 36)
  {
    v14 = (char *)this + m + 8756;
    *(_DWORD *)(v14 + 31) = 0;
    *(_OWORD *)v14 = 0uLL;
    *((_OWORD *)v14 + 1) = 0uLL;
  }
  *(_QWORD *)((char *)this + 10052) = 0;
  *v5 = 0;
  v5[8] = 0;
  *((_QWORD *)this + 1258) = 0;
  *(_DWORD *)((char *)this + 10071) = 0;
  v5[14] = 0;
  v5[22] = 0;
  *(_QWORD *)((char *)this + 10092) = 0;
  *(_DWORD *)((char *)this + 10099) = 0;
  v15 = 10112;
  *((_QWORD *)this + 1260) = 0;
  do
  {
    v16 = (char *)this + v15;
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_WORD *)v16 + 8) = 0;
    *(_OWORD *)(v16 + 20) = 0uLL;
    *(_OWORD *)(v16 + 36) = 0uLL;
    *(_OWORD *)(v16 + 52) = 0uLL;
    *(_OWORD *)(v16 + 68) = 0uLL;
    *(_OWORD *)(v16 + 82) = 0uLL;
    *(_OWORD *)(v16 + 100) = 0uLL;
    v15 += 152;
    *(_OWORD *)(v16 + 116) = 0uLL;
    *(_OWORD *)(v16 + 132) = 0uLL;
  }
  while (v16 + 152 != (char *)this + 19688);
  for (n = 0; n != 2772; n += 44)
  {
    v18 = (_OWORD *)((char *)this + n + 19688);
    *(_OWORD *)((char *)v18 + 27) = 0uLL;
    *v18 = 0uLL;
    v18[1] = 0uLL;
  }
  *(_DWORD *)v4 = 0;
  *(_QWORD *)((char *)this + 22460) = 0;
  *(_QWORD *)((char *)this + 22465) = 0;
  bzero((char *)this + 22480, 0x428uLL);
  v19 = 0;
  v20 = (char *)this + 23558;
  do
  {
    v21 = &v20[v19];
    *((_WORD *)v21 - 1) = 0;
    *(_WORD *)&v20[v19] = 0;
    *((_WORD *)v21 + 1) = 0;
    *(_DWORD *)(v21 + 6) = 0;
    *((_WORD *)v21 + 5) = 0;
    *(_QWORD *)(v21 - 14) = 0;
    *(_DWORD *)(v21 - 7) = 0;
    *(_QWORD *)(v21 + 22) = 0;
    *(_QWORD *)(v21 + 14) = 0;
    v19 += 52;
    *(_QWORD *)(v21 + 27) = 0;
  }
  while (v19 != 728);
  v22 = -1536;
  do
  {
    v23 = (_OWORD *)((char *)this + v22);
    v23[1615] = 0uLL;
    v23[1614] = 0uLL;
    v23[1613] = 0uLL;
    *(_OWORD *)((char *)this + v22 + 25854) = 0uLL;
    v22 += 64;
  }
  while (v22);
  v24 = 25808;
  do
  {
    v25 = (char *)this + v24;
    *(_QWORD *)v25 = 0;
    *((_WORD *)v25 + 4) = 0;
    *(_QWORD *)(v25 + 12) = 0;
    *(_QWORD *)(v25 + 28) = 0;
    *(_QWORD *)(v25 + 20) = 0;
    v24 += 36;
  }
  while (v25 + 36 != (char *)this + 26672);
  *((_QWORD *)this + 3334) = 0;
  *((_WORD *)v4 + 2103) = 0;
  *(_DWORD *)v3 = 0;
  v3[4] = 0;
  *((_DWORD *)v3 + 2) = 0;
  v3[12] = 0;
  *((_DWORD *)v3 + 33) = 0;
  *(_QWORD *)((char *)this + 26700) = 0;
  *(_OWORD *)((char *)this + 26708) = 0u;
  *(_QWORD *)((char *)this + 26721) = 0;
  *(_QWORD *)((char *)this + 26732) = 0;
  *((_BYTE *)this + 26740) = 0;
  *(_OWORD *)((char *)this + 26744) = 0u;
  *(_OWORD *)((char *)this + 26760) = 0u;
  *(_OWORD *)((char *)this + 26772) = 0u;
  *((_DWORD *)this + 6702) = 0;
  *(_OWORD *)((char *)this + 26792) = 0u;
  *((_QWORD *)this + 3355) = 0;
  *(_OWORD *)((char *)this + 26824) = 0u;
  *((_BYTE *)this + 26848) = 0;
  *(_QWORD *)((char *)this + 26877) = 0;
  *((_QWORD *)this + 3359) = 0;
  *(_OWORD *)((char *)this + 26856) = 0u;
  *((_QWORD *)this + 3363) = 0;
  *((_DWORD *)this + 6728) = 0;
  *(_OWORD *)((char *)this + 26888) = 0u;
  *((_DWORD *)this + 6734) = 0;
  *(_OWORD *)((char *)this + 26920) = 0u;
  *((_DWORD *)this + 6740) = 0;
  *((_OWORD *)this + 1684) = 0u;
  *((_DWORD *)this + 6746) = 0;
  *(_OWORD *)((char *)this + 26968) = 0u;
  *((_OWORD *)this + 1687) = 0u;
  *((_OWORD *)this + 1688) = 0u;
  *(_DWORD *)((char *)this + 27023) = 0;
  *(_OWORD *)((char *)this + 27032) = 0u;
  *((_DWORD *)this + 6762) = 0;
  *((_DWORD *)this + 6768) = 0;
  *((_OWORD *)this + 1691) = 0u;
  *((_DWORD *)this + 6774) = 0;
  *(_OWORD *)((char *)this + 27080) = 0u;
  *((_QWORD *)this + 3390) = 0;
  *((_OWORD *)this + 1694) = 0u;
}

__n128 SBAS_Eph2RefState(__n128 *a1, char a2, __int16 a3, int a4, uint64_t a5)
{
  unsigned __int32 v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  __n128 result;

  *(_OWORD *)(a5 + 175) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_BYTE *)(a5 + 188) = a2;
  *(_DWORD *)(a5 + 176) = 1;
  *(_DWORD *)(a5 + 184) = 7;
  *(_QWORD *)(a5 + 112) = 0x4083880000000000;
  v5 = a1->n128_u32[2];
  v6 = a4 % 86400 - v5;
  if (v6 >= -43200)
    v7 = 0;
  else
    v7 = -1;
  if (v6 > 43199)
    v8 = 1;
  else
    v8 = v7;
  v9 = v5 + 86400 * (v8 + a4 / 86400);
  v10 = v9 - 604800;
  if (v9 > 0x93A7F)
  {
    v11 = a3 + 1;
  }
  else
  {
    v10 = v9;
    v11 = a3;
  }
  if (v9 < 0)
    v12 = v9 + 604800;
  else
    v12 = v10;
  if (v9 < 0)
    v13 = a3 - 1;
  else
    v13 = v11;
  *(_DWORD *)(a5 + 160) = v12;
  *(_WORD *)(a5 + 164) = v13;
  *(_QWORD *)a5 = a1[2].n128_u64[0];
  *(_QWORD *)(a5 + 8) = a1[2].n128_u64[1];
  *(_QWORD *)(a5 + 16) = a1[3].n128_u64[0];
  *(_QWORD *)(a5 + 24) = a1[3].n128_u64[1];
  *(_QWORD *)(a5 + 32) = a1[4].n128_u64[0];
  *(_QWORD *)(a5 + 40) = a1[4].n128_u64[1];
  *(_QWORD *)(a5 + 48) = a1[5].n128_u64[0];
  *(_QWORD *)(a5 + 56) = a1[5].n128_u64[1];
  *(_QWORD *)(a5 + 64) = a1[6].n128_u64[0];
  result = a1[1];
  *(__n128 *)(a5 + 96) = result;
  return result;
}

void ds_Intermittent(char **a1, unsigned int a2, double *a3)
{
  uint64_t v6;
  char *v7;
  char v8;
  char *v9;
  char *v10;
  const char *v11;
  char v12;
  unsigned __int8 *v13;
  int v14;
  char *v15;
  char v16;
  int v17;
  unsigned int v18;
  char *v19;
  char *v20;
  char v21;
  int v22;
  char *v23;
  char *v24;
  char *v25;
  char v26;
  int v27;
  char *v28;
  char v29;
  int v30;
  char *v31;
  char v32;
  int v33;
  char *v34;
  char *v35;
  unsigned int i;
  char v37;
  unsigned __int8 *v38;
  int v39;
  char v40;
  _BYTE v41[135];

  v6 = 0;
  *(_QWORD *)&v41[127] = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = 84;
  do
  {
    *a1 = v7 + 1;
    *v7 = v8;
    v7 = *a1;
    if (*a1 >= a1[3])
    {
      v7 = a1[2];
      *a1 = v7;
    }
    v8 = aTsx[++v6];
  }
  while (v6 != 4);
  sprintf_5d(a1, *((unsigned __int16 *)a3 + 120));
  sprintf_sgR8(a1, a3[9]);
  sprintf_sgR8(a1, a3[10]);
  sprintf_sgR8(a1, a3[11]);
  sprintf_sgR8(a1, a3[12]);
  sprintf_sgR8(a1, a3[13]);
  sprintf_sgR8(a1, a3[14]);
  sprintf_sgR8(a1, a3[15]);
  sprintf_sgR8(a1, a3[17]);
  sprintf_sgR8(a1, a3[18]);
  sprintf_sgR8(a1, a3[19]);
  sprintf_sgR8(a1, a3[20]);
  sprintf_sgR8(a1, a3[21]);
  sprintf_sgR8(a1, a3[22]);
  sprintf_sgR8(a1, a3[23]);
  sprintf_sgR8(a1, a3[24]);
  sprintf_sgR8(a1, a3[25]);
  sprintf_sgR8(a1, a3[26]);
  sprintf_sgR8(a1, a3[27]);
  sprintf_sgR8(a1, a3[28]);
  sprintf_sgR8(a1, a3[29]);
  v9 = (*a1)++;
  *v9 = 10;
  v10 = *a1;
  if (*a1 >= a1[3])
    v10 = a1[2];
  v11 = "INT";
  if (a2 == 11)
    v11 = "Int";
  v12 = *v11;
  if (*v11)
  {
    v13 = (unsigned __int8 *)(v11 + 1);
    do
    {
      *a1 = v10 + 1;
      *v10 = v12;
      v10 = *a1;
      if (*a1 >= a1[3])
      {
        v10 = a1[2];
        *a1 = v10;
      }
      v14 = *v13++;
      v12 = v14;
    }
    while (v14);
  }
  v15 = &ch_GNSS_Exe_States[20 * a2 + 1];
  v16 = 32;
  do
  {
    *a1 = v10 + 1;
    *v10 = v16;
    v10 = *a1;
    if (*a1 >= a1[3])
    {
      v10 = a1[2];
      *a1 = v10;
    }
    v17 = *v15++;
    v16 = v17;
  }
  while (v17);
  v18 = **(_DWORD **)(p_api + 8);
  *a1 = v10 + 1;
  *v10 = 32;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  sprintf_10u(a1, v18);
  if (a2 <= 0xB)
  {
    if (((1 << a2) & 0xA48) != 0)
    {
      sprintf_5d(a1, *((_DWORD *)a3 + 413));
      v19 = *a1;
      v20 = &ch_Oper_Mode[6 * *(unsigned int *)a3 + 1];
      v21 = 32;
      do
      {
        *a1 = v19 + 1;
        *v19 = v21;
        v19 = *a1;
        if (*a1 >= a1[3])
        {
          v19 = a1[2];
          *a1 = v19;
        }
        v22 = *v20++;
        v21 = v22;
      }
      while (v22);
      sprintf_ACC(a1, a3[*(unsigned int *)a3 + 208]);
      v23 = (*a1)++;
      *v23 = 32;
      if (*a1 >= a1[3])
        *a1 = a1[2];
      sprintf_ACC(a1, a3[*(unsigned int *)a3 + 210]);
      v24 = *a1;
      v25 = &ch_Sens_Mode[4 * *((unsigned int *)a3 + 1) + 1];
      v26 = 32;
      do
      {
        *a1 = v24 + 1;
        *v24 = v26;
        v24 = *a1;
        if (*a1 >= a1[3])
        {
          v24 = a1[2];
          *a1 = v24;
        }
        v27 = *v25++;
        v26 = v27;
      }
      while (v27);
      v28 = &ch_Sens_Mode[4 * *((unsigned int *)a3 + 2) + 1];
      v29 = 32;
      do
      {
        *a1 = v24 + 1;
        *v24 = v29;
        v24 = *a1;
        if (*a1 >= a1[3])
        {
          v24 = a1[2];
          *a1 = v24;
        }
        v30 = *v28++;
        v29 = v30;
      }
      while (v30);
      v31 = &ch_Power_Mode[4 * *((unsigned int *)a3 + 4) + 1];
      v32 = 32;
      do
      {
        *a1 = v24 + 1;
        *v24 = v32;
        v24 = *a1;
        if (*a1 >= a1[3])
        {
          v24 = a1[2];
          *a1 = v24;
        }
        v33 = *v31++;
        v32 = v33;
      }
      while (v33);
      sprintf_sp1d(a1, *((unsigned __int8 *)a3 + 65));
      sprintf_sp1d(a1, *((unsigned __int8 *)a3 + 66));
      sprintf_4d(a1, *((char *)a3 + 242));
      sprintf_4d(a1, *((unsigned __int8 *)a3 + 243));
    }
    else if (a2 == 2)
    {
      GN_GPS_Get_LibVersion(&v40);
      v35 = *a1;
      for (i = 5; i > 1; --i)
      {
        *a1 = v35 + 1;
        *v35 = 32;
        v35 = *a1;
        if (*a1 >= a1[3])
        {
          v35 = a1[2];
          *a1 = v35;
        }
      }
      v37 = v40;
      if (v40)
      {
        v38 = v41;
        do
        {
          *a1 = v35 + 1;
          *v35 = v37;
          v35 = *a1;
          if (*a1 >= a1[3])
          {
            v35 = a1[2];
            *a1 = v35;
          }
          v39 = *v38++;
          v37 = v39;
        }
        while (v39);
      }
    }
  }
  v34 = (*a1)++;
  *v34 = 10;
  if (*a1 >= a1[3])
    *a1 = a1[2];
}

uint64_t Is_Legal(int a1)
{
  uint64_t result;
  BOOL v3;

  result = 0;
  if (BYTE2(a1) && a1 & 0xFF00FFFF | (BYTE2(a1) << 16))
  {
    switch((char)a1)
    {
      case 1:
        v3 = BYTE2(a1) >= 0x21u;
        goto LABEL_12;
      case 2:
        v3 = BYTE2(a1) >= 0x19u;
        goto LABEL_12;
      case 3:
        v3 = BYTE2(a1) >= 0x25u;
        goto LABEL_12;
      case 4:
        v3 = BYTE2(a1) >= 0x40u;
        goto LABEL_12;
      case 5:
        v3 = BYTE2(a1) - 193 >= 0xA;
        goto LABEL_12;
      case 6:
        v3 = BYTE2(a1) >= 0xFu;
        goto LABEL_12;
      case 7:
        v3 = BYTE2(a1) - 120 >= 0x27;
LABEL_12:
        result = !v3;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

char *Get_GNSS_SV_Str(unint64_t a1)
{
  int v1;
  unint64_t v2;
  char v3;
  unsigned __int8 v4;
  char *result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  char v9;
  BOOL v10;
  unsigned int v11;

  v1 = a1;
  v2 = a1 >> 8;
  v3 = Get_GNSS_SV_Str(GNSS_SV)::ch_Constell_Id[a1];
  v4 = BYTE2(a1);
  result = &g_GNSS_SV_Str;
  g_GNSS_SV_Str = v3;
  unk_2579E2D11 = *(_WORD *)((char *)&Get_GNSS_SV_Str(GNSS_SV)::str_Signal_Id[BYTE1(v1)] + v2);
  byte_2579E2D13 = 32;
  v6 = BYTE2(v1);
  v7 = (41 * v6) >> 12;
  v8 = -100 * v7 + v4;
  v9 = v7 | 0x30;
  if (v6 <= 0x63)
    v9 = 32;
  v10 = v8 > 9 || v6 > 0x63;
  byte_2579E2D14 = v9;
  v11 = v8 / 0xA + 48;
  if (!v10)
    LOBYTE(v11) = 32;
  byte_2579E2D15 = v11;
  byte_2579E2D16 = v8 % 0xA + 48;
  byte_2579E2D17 = 0;
  return result;
}

void Gnm05_31PrintNavSoln(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char __str[966];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (*(_BYTE *)(a1 + 10))
      v3 = 89;
    else
      v3 = 78;
    if (*(_BYTE *)(a1 + 9))
      v4 = 89;
    else
      v4 = 78;
    if (*(_BYTE *)(a1 + 8))
      v5 = 89;
    else
      v5 = 78;
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NAV:OsTime,%ums,BBTick,%ums,DateSet,%c,TimeSet,%c,UtcValid,%c,Year,%u,Month,%u,Day,%u,Hours,%u,Min,%u,Sec,%u,Msec,%u,WkNo,%d,Tow,%.12f,TowUnc%.12f,BCT_Tick,%llu,UtcCorr,%.1f,ClkDrift,%.12f,ClkDriftUnc,%.12f\n", v2, "GNM", 73, "Gnm05_31PrintNavSoln", *(_DWORD *)(a1 + 4), *(_DWORD *)a1, v5, v4, v3, *(unsigned __int16 *)(a1 + 12), *(unsigned __int16 *)(a1 + 14), *(unsigned __int16 *)(a1 + 16), *(unsigned __int16 *)(a1 + 18), *(unsigned __int16 *)(a1 + 20), *(unsigned __int16 *)(a1 + 22),
      *(unsigned __int16 *)(a1 + 24),
      *(__int16 *)(a1 + 28),
      *(double *)(a1 + 48),
      *(double *)(a1 + 40),
      *(_QWORD *)(a1 + 32),
      *(double *)(a1 + 72),
      *(double *)(a1 + 80),
      *(double *)(a1 + 176));
    gnssOsa_PrintLog(__str, 4, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NAV:OsTime,%ums,Lat,%.9f,Lon,%.9f,AltMSL,%f,Speed,%f,Course,%f,VerVel,%f,HAccMaj,%f,HAccMin,%f,PRRes,%f,FixT,%u,VSF,%u,VNM,%u,FixMode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm05_31PrintNavSoln", *(_DWORD *)(a1 + 4), *(double *)(a1 + 112), *(double *)(a1 + 120), *(double *)(a1 + 136), *(double *)(a1 + 144), *(double *)(a1 + 152), *(double *)(a1 + 160), *(double *)(a1 + 208), *(double *)(a1 + 216), *(double *)(a1 + 256), *(unsigned __int8 *)(a1 + 296),
        *(unsigned __int8 *)(a1 + 297),
        *(unsigned __int8 *)(a1 + 298),
        *(unsigned __int8 *)(a1 + 299));
      gnssOsa_PrintLog(__str, 4, 1, 0);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NAV:OsTime,%ums,SVSignalsInView,%u,SatsUsed,%u,UsrS,%u,GnssC,%u,Reliab,%u,AsstUsed,0x%X,SpoofMsk,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm05_31PrintNavSoln", *(_DWORD *)(a1 + 4), *(unsigned __int8 *)(a1 + 314), *(unsigned __int8 *)(a1 + 315), *(unsigned __int8 *)(a1 + 300), *(unsigned __int8 *)(a1 + 301), *(unsigned __int8 *)(a1 + 312), *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304));
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
    }
  }
}

uint64_t Gnm05_55AssignAppInfo(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;

  if (!a1 || !*a1)
    return 1;
  v4 = 1;
  v5 = gnssOsa_Calloc("Gnm05_55AssignAppInfo", 126, 1, 0xC4uLL);
  *(_QWORD *)a2 = v5;
  if (!v5)
    return 0;
  *v5 = 1;
  memcpy_s("Gnm05_55AssignAppInfo", 134, v5 + 66, 0x41u, a1 + 66, 0x41uLL);
  memcpy_s("Gnm05_55AssignAppInfo", 135, (void *)(*(_QWORD *)a2 + 1), 0x41u, a1 + 1, 0x41uLL);
  memcpy_s("Gnm05_55AssignAppInfo", 136, (void *)(*(_QWORD *)a2 + 131), 0x41u, a1 + 131, 0x41uLL);
  return v4;
}

_QWORD *EvLog(_QWORD *result)
{
  _BYTE *v1;
  char v2;
  _BYTE *v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;

  if (g_Logging_Cfg >= 4)
  {
    v1 = result;
    result = EvLog_Header();
    v2 = *v1;
    v3 = (_BYTE *)g_CB_ELog;
    if (*v1)
    {
      v4 = v1 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v3 + 1);
        *v3 = v2;
        v3 = (_BYTE *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
        {
          v3 = (_BYTE *)qword_257A47AA0;
          g_CB_ELog = qword_257A47AA0;
        }
        v5 = *v4++;
        v2 = v5;
      }
      while (v5);
    }
    g_CB_ELog = (uint64_t)(v3 + 1);
    *v3 = 10;
    v6 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
    {
      g_CB_ELog = qword_257A47AA0;
      v6 = qword_257A47AA0;
    }
    v7 = qword_257A47AA8 - qword_257A47AA0;
    if (dword_257A47A98 - v6 > 0)
      v7 = 0;
    if ((v7 + dword_257A47A98 - v6) <= 0xFF)
      return (_QWORD *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
  }
  return result;
}

_QWORD *EvLog_Header()
{
  uint64_t v0;
  _BYTE *v1;
  _QWORD *result;
  _BYTE *v3;

  v0 = mach_continuous_time();
  sprintf_10u(&g_CB_ELog, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0));
  v1 = (_BYTE *)g_CB_ELog++;
  *v1 = 32;
  if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
    g_CB_ELog = qword_257A47AA0;
  result = sprintf_10u(&g_CB_ELog, **(_DWORD **)(p_api + 8));
  v3 = (_BYTE *)g_CB_ELog++;
  *v3 = 32;
  if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
    g_CB_ELog = qword_257A47AA0;
  return result;
}

_QWORD *EvLog_d(_QWORD *result, int a2)
{
  _BYTE *v3;
  char v4;
  _BYTE *v5;
  unsigned __int8 *v6;
  int v7;
  _BYTE *v8;
  int v9;
  int v10;
  int v11;

  if (g_Logging_Cfg >= 4)
  {
    v3 = result;
    EvLog_Header();
    v4 = *v3;
    if (*v3)
    {
      v5 = (_BYTE *)g_CB_ELog;
      v6 = v3 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v5 + 1);
        *v5 = v4;
        v5 = (_BYTE *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
        {
          v5 = (_BYTE *)qword_257A47AA0;
          g_CB_ELog = qword_257A47AA0;
        }
        v7 = *v6++;
        v4 = v7;
      }
      while (v7);
    }
    result = sprintf_sp1d(&g_CB_ELog, a2);
    v8 = (_BYTE *)g_CB_ELog++;
    *v8 = 10;
    v9 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
    {
      g_CB_ELog = qword_257A47AA0;
      v9 = qword_257A47AA0;
    }
    v10 = dword_257A47A98 - v9;
    v11 = qword_257A47AA8 - qword_257A47AA0;
    if (v10 > 0)
      v11 = 0;
    if ((v11 + v10) <= 0xFF)
      return (_QWORD *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
  }
  return result;
}

_QWORD *EvLog_nd(_QWORD *result, int a2, uint64_t a3, ...)
{
  _BYTE *v4;
  char v5;
  _BYTE *v6;
  unsigned __int8 *v7;
  int v8;
  int *v9;
  _BYTE *v10;
  int v11;
  int v12;
  int v13;
  int *i;

  if (g_Logging_Cfg >= 4)
  {
    v4 = result;
    result = EvLog_Header();
    v5 = *v4;
    if (*v4)
    {
      v6 = (_BYTE *)g_CB_ELog;
      v7 = v4 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v6 + 1);
        *v6 = v5;
        v6 = (_BYTE *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
        {
          v6 = (_BYTE *)qword_257A47AA0;
          g_CB_ELog = qword_257A47AA0;
        }
        v8 = *v7++;
        v5 = v8;
      }
      while (v8);
    }
    for (i = (int *)&a3; a2; --a2)
    {
      v9 = i;
      i += 2;
      result = sprintf_sp1d(&g_CB_ELog, *v9);
    }
    v10 = (_BYTE *)g_CB_ELog++;
    *v10 = 10;
    v11 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
    {
      g_CB_ELog = qword_257A47AA0;
      v11 = qword_257A47AA0;
    }
    v12 = dword_257A47A98 - v11;
    v13 = qword_257A47AA8 - qword_257A47AA0;
    if (v12 > 0)
      v13 = 0;
    if ((v13 + v12) <= 0xFF)
      return (_QWORD *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
  }
  return result;
}

_QWORD *EvLog_VecI4(_QWORD *result, unsigned int a2, int *a3)
{
  _BYTE *v5;
  char v6;
  _BYTE *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;

  if (g_Logging_Cfg >= 4)
  {
    v5 = result;
    result = EvLog_Header();
    v6 = *v5;
    if (*v5)
    {
      v7 = (_BYTE *)g_CB_ELog;
      v8 = v5 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v7 + 1);
        *v7 = v6;
        v7 = (_BYTE *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
        {
          v7 = (_BYTE *)qword_257A47AA0;
          g_CB_ELog = qword_257A47AA0;
        }
        v9 = *v8++;
        v6 = v9;
      }
      while (v9);
    }
    if (a2)
    {
      v10 = a2;
      do
      {
        v11 = *a3++;
        result = sprintf_sp1d(&g_CB_ELog, v11);
        --v10;
      }
      while (v10);
    }
    v12 = (_BYTE *)g_CB_ELog++;
    *v12 = 10;
    v13 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
    {
      g_CB_ELog = qword_257A47AA0;
      v13 = qword_257A47AA0;
    }
    v14 = dword_257A47A98 - v13;
    v15 = qword_257A47AA8 - qword_257A47AA0;
    if (v14 > 0)
      v15 = 0;
    if ((v15 + v14) <= 0xFF)
      return (_QWORD *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
  }
  return result;
}

char *EvLog_v(char *result, ...)
{
  char *v1;
  int v2;
  va_list va;

  va_start(va, result);
  if (g_Logging_Cfg >= 4)
  {
    v1 = result;
    EvLog_Header();
    result = (char *)sprintf_v((uint64_t)&g_CB_ELog, v1, (uint64_t *)va);
    v2 = qword_257A47AA8 - qword_257A47AA0;
    if (dword_257A47A98 - (int)g_CB_ELog > 0)
      v2 = 0;
    if ((v2 + dword_257A47A98 - g_CB_ELog) <= 0xFF)
      return (char *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
  }
  return result;
}

uint64_t DbgLog_v(uint64_t result, char *a2, ...)
{
  char v3;
  char *v4;
  char v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int v11;
  va_list va;

  va_start(va, a2);
  if (g_Logging_Cfg >= 4)
  {
    v3 = result;
    if ((_DWORD)result)
    {
      v4 = (char *)g_CB_NDbg;
      v5 = 69;
      v6 = 1u;
      v7 = &g_CB_NDbg;
      do
      {
        g_CB_NDbg = (uint64_t)(v4 + 1);
        *v4 = v5;
        v4 = (char *)g_CB_NDbg;
        if (g_CB_NDbg >= (unint64_t)qword_257A47AC8)
        {
          v4 = (char *)qword_257A47AC0;
          g_CB_NDbg = qword_257A47AC0;
        }
        v5 = str_3_1[v6++];
      }
      while (v6 != 4);
    }
    else
    {
      v8 = mach_continuous_time();
      v7 = &g_CB_ELog;
      sprintf_10u(&g_CB_ELog, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8));
      v9 = (_BYTE *)g_CB_ELog++;
      *v9 = 32;
      if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
        g_CB_ELog = qword_257A47AA0;
    }
    sprintf_10u(v7, **(_DWORD **)(p_api + 8));
    v10 = (_BYTE *)(*v7)++;
    *v10 = 32;
    if (*v7 >= (unint64_t)v7[3])
      *v7 = v7[2];
    result = sprintf_v((uint64_t)v7, a2, (uint64_t *)va);
    if ((v3 & 1) == 0)
    {
      v11 = *((_DWORD *)v7 + 2) - *(_DWORD *)v7;
      if (v11 <= 0)
        v11 += *((_DWORD *)v7 + 6) - *((_DWORD *)v7 + 4);
      if (v11 <= 0xFF)
        return GNSS_Event_Log_Ctl((uint64_t)v7);
    }
  }
  return result;
}

_QWORD *EvCrt_d(_QWORD *result, int a2)
{
  _BYTE *v3;
  char v4;
  _BYTE *v5;
  unsigned __int8 *v6;
  int v7;
  _BYTE *v8;
  int v9;
  int v10;
  int v11;

  if (g_Logging_Cfg)
  {
    v3 = result;
    EvLog_Header();
    v4 = *v3;
    if (*v3)
    {
      v5 = (_BYTE *)g_CB_ELog;
      v6 = v3 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v5 + 1);
        *v5 = v4;
        v5 = (_BYTE *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
        {
          v5 = (_BYTE *)qword_257A47AA0;
          g_CB_ELog = qword_257A47AA0;
        }
        v7 = *v6++;
        v4 = v7;
      }
      while (v7);
    }
    result = sprintf_sp1d(&g_CB_ELog, a2);
    v8 = (_BYTE *)g_CB_ELog++;
    *v8 = 10;
    v9 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
    {
      g_CB_ELog = qword_257A47AA0;
      v9 = qword_257A47AA0;
    }
    v10 = dword_257A47A98 - v9;
    v11 = qword_257A47AA8 - qword_257A47AA0;
    if (v10 > 0)
      v11 = 0;
    if ((v11 + v10) <= 0xFF)
      return (_QWORD *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
  }
  return result;
}

_QWORD *EvCrt_nd(_QWORD *result, int a2, uint64_t a3, ...)
{
  _BYTE *v4;
  char v5;
  _BYTE *v6;
  unsigned __int8 *v7;
  int v8;
  int *v9;
  _BYTE *v10;
  int v11;
  int v12;
  int v13;
  int *i;

  if (g_Logging_Cfg)
  {
    v4 = result;
    result = EvLog_Header();
    v5 = *v4;
    if (*v4)
    {
      v6 = (_BYTE *)g_CB_ELog;
      v7 = v4 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v6 + 1);
        *v6 = v5;
        v6 = (_BYTE *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
        {
          v6 = (_BYTE *)qword_257A47AA0;
          g_CB_ELog = qword_257A47AA0;
        }
        v8 = *v7++;
        v5 = v8;
      }
      while (v8);
    }
    for (i = (int *)&a3; a2; --a2)
    {
      v9 = i;
      i += 2;
      result = sprintf_sp1d(&g_CB_ELog, *v9);
    }
    v10 = (_BYTE *)g_CB_ELog++;
    *v10 = 10;
    v11 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
    {
      g_CB_ELog = qword_257A47AA0;
      v11 = qword_257A47AA0;
    }
    v12 = dword_257A47A98 - v11;
    v13 = qword_257A47AA8 - qword_257A47AA0;
    if (v12 > 0)
      v13 = 0;
    if ((v13 + v12) <= 0xFF)
      return (_QWORD *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
  }
  return result;
}

char *EvCrt_v(char *result, ...)
{
  char *v1;
  int v2;
  va_list va;

  va_start(va, result);
  if (g_Logging_Cfg)
  {
    v1 = result;
    EvLog_Header();
    result = (char *)sprintf_v((uint64_t)&g_CB_ELog, v1, (uint64_t *)va);
    v2 = qword_257A47AA8 - qword_257A47AA0;
    if (dword_257A47A98 - (int)g_CB_ELog > 0)
      v2 = 0;
    if ((v2 + dword_257A47A98 - g_CB_ELog) <= 0xFF)
      return (char *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
  }
  return result;
}

_QWORD *EvCrt_Illegal_switch_case(_QWORD *result, unsigned int a2)
{
  _BYTE *v3;
  char v4;
  char *v5;
  unsigned __int8 *v6;
  int v7;
  char v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  int v12;
  int v13;

  if (g_Logging_Cfg)
  {
    v3 = result;
    EvLog_Header();
    v4 = *v3;
    v5 = (char *)g_CB_ELog;
    if (*v3)
    {
      v6 = v3 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v5 + 1);
        *v5 = v4;
        v5 = (char *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
        {
          v5 = (char *)qword_257A47AA0;
          g_CB_ELog = qword_257A47AA0;
        }
        v7 = *v6++;
        v4 = v7;
      }
      while (v7);
    }
    v8 = 58;
    v9 = 1u;
    do
    {
      g_CB_ELog = (uint64_t)(v5 + 1);
      *v5 = v8;
      v5 = (char *)g_CB_ELog;
      if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
      {
        v5 = (char *)qword_257A47AA0;
        g_CB_ELog = qword_257A47AA0;
      }
      v8 = str_5_2[v9++];
    }
    while (v9 != 50);
    result = sprintf_1u(&g_CB_ELog, a2);
    v10 = (_BYTE *)g_CB_ELog++;
    *v10 = 10;
    v11 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
    {
      g_CB_ELog = qword_257A47AA0;
      v11 = qword_257A47AA0;
    }
    v12 = dword_257A47A98 - v11;
    v13 = qword_257A47AA8 - qword_257A47AA0;
    if (v12 > 0)
      v13 = 0;
    if ((v13 + v12) <= 0xFF)
      return (_QWORD *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
  }
  return result;
}

_QWORD *EvCrt_Illegal_switch_default(_QWORD *result, unsigned int a2)
{
  _BYTE *v3;
  char v4;
  char *v5;
  unsigned __int8 *v6;
  int v7;
  char v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  int v12;
  int v13;

  if (g_Logging_Cfg)
  {
    v3 = result;
    EvLog_Header();
    v4 = *v3;
    v5 = (char *)g_CB_ELog;
    if (*v3)
    {
      v6 = v3 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v5 + 1);
        *v5 = v4;
        v5 = (char *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
        {
          v5 = (char *)qword_257A47AA0;
          g_CB_ELog = qword_257A47AA0;
        }
        v7 = *v6++;
        v4 = v7;
      }
      while (v7);
    }
    v8 = 58;
    v9 = 1u;
    do
    {
      g_CB_ELog = (uint64_t)(v5 + 1);
      *v5 = v8;
      v5 = (char *)g_CB_ELog;
      if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
      {
        v5 = (char *)qword_257A47AA0;
        g_CB_ELog = qword_257A47AA0;
      }
      v8 = str_6_1[v9++];
    }
    while (v9 != 53);
    result = sprintf_1u(&g_CB_ELog, a2);
    v10 = (_BYTE *)g_CB_ELog++;
    *v10 = 10;
    v11 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_257A47AA8)
    {
      g_CB_ELog = qword_257A47AA0;
      v11 = qword_257A47AA0;
    }
    v12 = dword_257A47A98 - v11;
    v13 = qword_257A47AA8 - qword_257A47AA0;
    if (v12 > 0)
      v13 = 0;
    if ((v13 + v12) <= 0xFF)
      return (_QWORD *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
  }
  return result;
}

char *EvDbg_v(char *result, ...)
{
  char *v1;
  int v2;
  va_list va;

  va_start(va, result);
  if (g_Logging_Cfg >= 5)
  {
    v1 = result;
    EvLog_Header();
    result = (char *)sprintf_v((uint64_t)&g_CB_ELog, v1, (uint64_t *)va);
    v2 = qword_257A47AA8 - qword_257A47AA0;
    if (dword_257A47A98 - (int)g_CB_ELog > 0)
      v2 = 0;
    if ((v2 + dword_257A47A98 - g_CB_ELog) <= 0xFF)
      return (char *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
  }
  return result;
}

char *EvVrb_v(char *result, ...)
{
  char *v1;
  int v2;
  va_list va;

  va_start(va, result);
  if (g_Logging_Cfg >= 6)
  {
    v1 = result;
    EvLog_Header();
    result = (char *)sprintf_v((uint64_t)&g_CB_ELog, v1, (uint64_t *)va);
    v2 = qword_257A47AA8 - qword_257A47AA0;
    if (dword_257A47A98 - (int)g_CB_ELog > 0)
      v2 = 0;
    if ((v2 + dword_257A47A98 - g_CB_ELog) <= 0xFF)
      return (char *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
  }
  return result;
}

double Comp_Sig_TOT(int a1, int a2, unsigned int a3, double a4, double a5)
{
  double i;
  double v6;

  for (i = ((double)a2 + (double)a3 * 0.0000152587891) * 0.000000977517107 + (double)a1 * 1.5; i >= a5; i = i - a5)
    ;
  while (i < 0.0)
    i = i + a5;
  v6 = a5 + -600.0;
  while (a4 - i > v6)
    i = i + a5;
  while (i - a4 > v6)
    i = i - a5;
  return i;
}

uint64_t Is_GN_API_Set_Allowed(const char *a1)
{
  uint64_t v1;

  v1 = *(int *)p_api;
  if (v1 > 7 || ((0x93u >> v1) & 1) == 0)
    return 1;
  EvCrt_v("%s:  FAILED:  Not allowed when in \"%s\" Mode", a1, off_251CDB758[v1]);
  return 0;
}

BOOL API_Set_Platform_Calibration_GLONASS_Group_Delays(double *a1)
{
  double v1;
  _BOOL8 v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v1 = *a1;
  if (fabs(*a1) <= 100.0)
  {
    v4 = 0;
    while (v4 != 13)
    {
      v1 = a1[++v4];
      if (fabs(v1) > 100.0)
      {
        v2 = (unint64_t)(v4 - 1) > 0xC;
        v3 = v4 - 7;
        goto LABEL_7;
      }
    }
    v5 = p_api;
    v6 = (_OWORD *)(*(_QWORD *)(p_api + 72) + 1848);
    v8 = *((_OWORD *)a1 + 1);
    v7 = *((_OWORD *)a1 + 2);
    *v6 = *(_OWORD *)a1;
    v6[1] = v8;
    v6[2] = v7;
    v9 = *((_OWORD *)a1 + 6);
    v11 = *((_OWORD *)a1 + 3);
    v10 = *((_OWORD *)a1 + 4);
    v6[5] = *((_OWORD *)a1 + 5);
    v6[6] = v9;
    v6[3] = v11;
    v6[4] = v10;
    v2 = 1;
    *(_BYTE *)(*(_QWORD *)(v5 + 72) + 1960) = 1;
  }
  else
  {
    v2 = 0;
    v3 = -7;
LABEL_7:
    EvCrt_v("API_Set_Platform_Calibration_GLONASS_Group_Delays:  FAILED  Group Delay %f larger than +/-100m on Freq Channel %d", v1, v3);
  }
  return v2;
}

BOOL API_Set_Inter_Chan_Bias_Model(unsigned int a1)
{
  if (a1 >= 8)
    EvCrt_d("API_Set_Inter_Chan_Bias_Model:  FAILED  Illegal ME RF Type", a1);
  else
    Init_Set_Inter_Chan_Bias(*(char **)(p_api + 72), a1);
  return a1 < 8;
}

uint64_t API_Set_TSX_ClkCorr_Params(double a1, double a2, unsigned int a3)
{
  __int16 v5;
  uint64_t v6;

  if (a3)
  {
    if (a3 >= 0xFA1)
    {
      v5 = 4000;
      EvLog_v("API_Set_TSX_ClkCorr_Params: Offset Unc %d capped to %d ppb");
LABEL_6:
      LOWORD(a3) = v5;
      goto LABEL_7;
    }
    if (a3 <= 0xAE)
    {
      v5 = 175;
      EvLog_v("API_Set_TSX_ClkCorr_Params: Offset Unc %d increased to %d ppb");
      goto LABEL_6;
    }
  }
LABEL_7:
  v6 = *(_QWORD *)(p_api + 72);
  *(double *)(v6 + 224) = a1;
  *(double *)(v6 + 232) = a2;
  *(_WORD *)(v6 + 240) = a3;
  return 1;
}

BOOL API_Set_Config(int *a1)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __double2 v9;
  double v10;
  double v11;
  double v12;
  uint64_t v14;
  double v15;
  double v16[2];

  v16[1] = *(double *)MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v2 = *(_QWORD *)(p_api + 72);
    v3 = *a1;
    *(_DWORD *)(v2 + 12) = *a1;
    *(_BYTE *)(v2 + 66) = 0;
    if (v3 == 1 || v3 == 2)
      *(_BYTE *)(v2 + 66) = v3;
    API_Set_FixInterval(*((unsigned __int16 *)a1 + 15));
    *(_WORD *)(v2 + 1716) = *((_WORD *)a1 + 20);
    v4 = *((unsigned __int16 *)a1 + 21);
    if (v4 < 0x400)
      LOWORD(v4) = 2139;
    *(_WORD *)(v2 + 1718) = v4;
    *(_OWORD *)(v2 + 22) = *(_OWORD *)(a1 + 1);
    *(_WORD *)(v2 + 1720) = *((_WORD *)a1 + 22);
    *(_QWORD *)(v2 + 38) = *(_QWORD *)(a1 + 5);
    *(_BYTE *)(v2 + 46) = *((_BYTE *)a1 + 28);
    v5 = *((unsigned __int8 *)a1 + 32);
    if (v5 == 255)
      v6 = -1;
    else
      v6 = 60000 * v5;
    *(_DWORD *)(v2 + 1752) = v6;
    *(_QWORD *)(v2 + 1812) = *((_QWORD *)a1 + 9);
    *(_WORD *)(v2 + 1824) = *((_WORD *)a1 + 40);
    g_Logging_Cfg = a1[9];
    v16[0] = 0.0;
    if (!R8_EQ((const double *)a1 + 6, v16)
      || (v15 = 0.0, !R8_EQ((const double *)a1 + 7, &v15))
      || (v14 = 0, !R8_EQ((const double *)a1 + 8, (const double *)&v14)))
    {
      v7 = *(_QWORD *)(p_api + 128);
      v8 = v7 + 68200;
      *(double *)(v7 + 68200) = *((double *)a1 + 6) * 0.0174532925;
      *(double *)(v7 + 68208) = *((double *)a1 + 7) * 0.0174532925;
      *(_QWORD *)(v7 + 68216) = *((_QWORD *)a1 + 8);
      Geo2ECEF(v7 + 68200, (uint64_t)&WGS84_Datum, (double *)(v7 + 68176));
      v9 = __sincos_stret(*(double *)v8);
      *(__double2 *)(v8 + 24) = v9;
      v10 = 1.0 / sqrt(v9.__sinval * v9.__sinval * -0.00669437999 + 1.0);
      v11 = *(double *)(v8 + 16);
      v12 = v9.__cosval * (v11 + v10 * 6378137.0);
      if (v12 < 1.0)
        v12 = 1.0;
      *(double *)(v8 + 40) = v11 + v10 * (v10 * v10) * 6335439.33;
      *(double *)(v8 + 48) = v12;
    }
  }
  return a1 != 0;
}

uint64_t API_Set_FixInterval(int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = *(_QWORD *)(p_api + 72);
  v3 = *(_DWORD *)(v2 + 1656);
  if (!v3)
  {
    v4 = *(_DWORD *)(v2 + 1652);
    if (a1 == (unsigned __int16)v4)
      return 1;
    v5 = *(_DWORD *)p_api;
    if (*(_DWORD *)p_api <= 0xBu)
    {
      if (((1 << v5) & 0xE48) != 0)
      {
        v6 = *(_DWORD **)(p_api + 112);
        v7 = v6[114];
        v8 = v6[139];
        v9 = v6[109];
        if ((int)(v8
                 + v7
                 - v9
                 - (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time())) > 99)
        {
          v10 = v6[139] + a1 - *(_DWORD *)(v2 + 1652);
          EvLog_v("API_Set_FixInterval:  GNSS_Exe_State   RUNNING(%d) Fix_Int %d %d", *(_DWORD *)p_api, *(_DWORD *)(v2 + 1652), a1);
          *(_DWORD *)(v2 + 1652) = a1;
          v6[139] = v10;
          G5K_ME_enc_n(*(char ***)(p_api + 264), v10, a1);
          GNSS_Write_GNB_Ctrl(*(char **)(p_api + 264));
          GNSS_GNB_Debug_Ctl(*(_QWORD *)(p_api + 296));
          return 1;
        }
        v5 = *(_DWORD *)p_api;
        v4 = *(_DWORD *)(v2 + 1652);
LABEL_12:
        *(_DWORD *)(v2 + 1656) = a1;
        EvLog_v("API_Set_FixInterval:  GNSS_Exe_State   RUNNING(%d) Fix_Int To Be Updated %d %d", v5, v4, a1);
        return 1;
      }
      if (((1 << v5) & 0x124) != 0)
        goto LABEL_12;
    }
    EvLog_v("API_Set_FixInterval:  GNSS_Exe_State NOT RUNNING(%d) Fix_Int %d %d", v5, 0, a1);
    *(_DWORD *)(v2 + 1652) = a1;
    *(_DWORD *)(v2 + 1656) = 0;
    return 1;
  }
  if (a1 != (unsigned __int16)v3)
  {
    EvLog_v("API_Set_FixInterval:  Fix_Int Update Pending %d %d", *(_DWORD *)(v2 + 1656), a1);
    *(_DWORD *)(v2 + 1656) = a1;
  }
  return 1;
}

BOOL API_Query_Config(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  if (a1)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    v1 = p_api;
    v2 = *(_QWORD *)(p_api + 72);
    *(_DWORD *)a1 = *(_DWORD *)(v2 + 12);
    *(_OWORD *)(a1 + 4) = *(_OWORD *)(v2 + 22);
    *(_QWORD *)(a1 + 20) = *(_QWORD *)(v2 + 38);
    *(_BYTE *)(a1 + 28) = *(_BYTE *)(v2 + 46);
    v3 = *(_DWORD *)(v2 + 1656);
    if (!v3)
      v3 = *(_DWORD *)(v2 + 1652);
    *(_WORD *)(a1 + 30) = v3;
    v4 = *(unsigned int *)(v2 + 1752);
    if (v4 == 0xFFFFFFFFLL)
      v5 = -1;
    else
      v5 = v4 / 0xEA60;
    *(_BYTE *)(a1 + 32) = v5;
    *(_WORD *)(a1 + 40) = *(_WORD *)(v2 + 1716);
    *(_DWORD *)(a1 + 42) = *(_DWORD *)(v2 + 1718);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v2 + 1812);
    *(_WORD *)(a1 + 80) = *(_WORD *)(v2 + 1824);
    *(_DWORD *)(a1 + 36) = g_Logging_Cfg;
    v6 = *(_QWORD *)(v1 + 128) + 68200;
    *(double *)(a1 + 48) = *(double *)v6 * 57.2957795;
    *(double *)(a1 + 56) = *(double *)(v6 + 8) * 57.2957795;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v6 + 16);
  }
  return a1 != 0;
}

uint64_t API_Set_Not_Broadcast_SVID(int a1, _OWORD *a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  const char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;

  v4 = *(_QWORD *)(p_api + 72);
  if (a1 == 1)
  {
    v5 = (_OWORD *)(v4 + 1088);
    v6 = (uint64_t *)(v4 + 1312);
    v7 = (uint64_t *)(v4 + 1320);
    v8 = (uint64_t *)(v4 + 1328);
    v9 = (uint64_t *)(v4 + 1336);
    v10 = (uint64_t *)(v4 + 1344);
    v11 = (uint64_t *)(v4 + 1352);
    v12 = (uint64_t *)(v4 + 1360);
    v13 = "L5";
  }
  else
  {
    if (a1)
      __assert_rtn("API_Set_Not_Broadcast_SVID", "GNSS_Core_api.cpp", 1089, "(sizeof_DBss_Not_Brd_SV) >= (((( 32)) + (( 24)) + (( 36)) + ((63)) + (( 10)) + (( 14)) + (( 39)))*sizeof(Not_Brd_SVID[0]))");
    v5 = (_OWORD *)(v4 + 808);
    v6 = (uint64_t *)(v4 + 1032);
    v7 = (uint64_t *)(v4 + 1040);
    v8 = (uint64_t *)(v4 + 1048);
    v9 = (uint64_t *)(v4 + 1056);
    v10 = (uint64_t *)(v4 + 1064);
    v11 = (uint64_t *)(v4 + 1072);
    v12 = (uint64_t *)(v4 + 1080);
    v13 = "L1";
  }
  v14 = 0;
  v15 = 0;
  v16 = *v12;
  v17 = *v11;
  v18 = *v10;
  v19 = *v9;
  v20 = *v8;
  v21 = *v7;
  v22 = *v6;
  v23 = a2[1];
  *v5 = *a2;
  v5[1] = v23;
  v24 = a2[5];
  v26 = a2[2];
  v25 = a2[3];
  v5[4] = a2[4];
  v5[5] = v24;
  v5[2] = v26;
  v5[3] = v25;
  v27 = a2[9];
  v29 = a2[6];
  v28 = a2[7];
  v5[8] = a2[8];
  v5[9] = v27;
  v5[6] = v29;
  v5[7] = v28;
  v31 = a2[11];
  v30 = a2[12];
  v32 = a2[10];
  *(_OWORD *)((char *)v5 + 202) = *(_OWORD *)((char *)a2 + 202);
  v5[11] = v31;
  v5[12] = v30;
  v5[10] = v32;
  v33 = 1;
  do
  {
    if (*(_BYTE *)(v22 + v14))
      v34 = v33;
    else
      v34 = 0;
    v15 |= v34;
    v33 *= 2;
    ++v14;
  }
  while (v14 != 32);
  v35 = 0;
  v36 = 0;
  v37 = 1;
  do
  {
    if (*(_BYTE *)(v20 + v35))
      v38 = v37;
    else
      v38 = 0;
    v36 |= v38;
    v37 *= 2;
    ++v35;
  }
  while (v35 != 10);
  v39 = 0;
  v40 = 0;
  v41 = 1;
  do
  {
    if (*(_BYTE *)(v21 + v39))
      v42 = v41;
    else
      v42 = 0;
    v40 |= v42;
    v41 *= 2;
    ++v39;
  }
  while (v39 != 24);
  v43 = 0;
  v44 = 0;
  v45 = 1;
  do
  {
    if (*(_BYTE *)(v19 + v43))
      v46 = v45;
    else
      v46 = 0;
    v44 |= v46;
    v45 *= 2;
    ++v43;
  }
  while (v43 != 39);
  v47 = 0;
  v48 = 0;
  v49 = 1;
  do
  {
    if (*(_BYTE *)(v18 + v47))
      v50 = v49;
    else
      v50 = 0;
    v48 |= v50;
    v49 *= 2;
    ++v47;
  }
  while (v47 != 63);
  v51 = 0;
  v52 = 0;
  v53 = 1;
  do
  {
    if (*(_BYTE *)(v17 + v51))
      v54 = v53;
    else
      v54 = 0;
    v52 |= v54;
    v53 *= 2;
    ++v51;
  }
  while (v51 != 36);
  v55 = 0;
  v56 = 0;
  v57 = 1;
  do
  {
    if (*(_BYTE *)(v16 + v55))
      v58 = v57;
    else
      v58 = 0;
    v56 |= v58;
    v57 *= 2;
    ++v55;
  }
  while (v55 != 14);
  EvLog_v("API_Set_Not_Broadcast_SVID:  %s  G %x Q %x R %x S %X B %X E %X N %X", v13, v15, v36, v40, v44, v48, v52, v56);
  Core_Save_Not_Brd_SV(a1, (uint64_t)a2);
  *(_DWORD *)(*(_QWORD *)(p_api + 112) + 28228) = 0;
  return 1;
}

uint64_t API_Set_RTI_Bad_SV_List(int a1, _OWORD *a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int *v19;
  unsigned int Constell_Prn;
  int v21;
  uint64_t v22;

  v4 = *(_QWORD *)(p_api + 72);
  if (a1 == 1)
  {
    v5 = (_OWORD *)(v4 + 528);
    v6 = 55412;
  }
  else
  {
    if (a1)
      __assert_rtn("API_Set_RTI_Bad_SV_List", "GNSS_Core_api.cpp", 1165, "(sizeof_DBss_Inhib) >= (((( 32)) + (( 24)) + (( 36)) + ((63)) + (( 10)) + (( 14)) + (( 39))) * sizeof(Inhib[0]))");
    v5 = (_OWORD *)(v4 + 249);
    v6 = 51052;
  }
  v7 = *(_QWORD *)(p_api + 56) + v6;
  v8 = 0;
  v9 = a2[1];
  *v5 = *a2;
  v5[1] = v9;
  v10 = a2[2];
  v11 = a2[3];
  v12 = a2[5];
  v5[4] = a2[4];
  v5[5] = v12;
  v5[2] = v10;
  v5[3] = v11;
  v13 = a2[6];
  v14 = a2[7];
  v15 = a2[9];
  v5[8] = a2[8];
  v5[9] = v15;
  v5[6] = v13;
  v5[7] = v14;
  v16 = a2[10];
  v17 = a2[11];
  v18 = a2[12];
  *(_OWORD *)((char *)v5 + 202) = *(_OWORD *)((char *)a2 + 202);
  v5[11] = v17;
  v5[12] = v18;
  v5[10] = v16;
  v19 = (int *)(v7 + 16);
  do
  {
    if (!*((_BYTE *)a2 + v8))
    {
      v21 = 1;
LABEL_18:
      *v19 = v21;
      goto LABEL_19;
    }
    Constell_Prn = Get_Constell_Prn(v8);
    if (a1 == 1)
    {
      if (Constell_Prn > 7 || ((1 << Constell_Prn) & 0x85) == 0)
      {
LABEL_14:
        if (*(_BYTE *)(v4 + v8 + 249) && *(_BYTE *)(v4 + v8 + 528))
          *(_BYTE *)(v4 + v8 + 1368) = 1;
        v21 = 2;
        goto LABEL_18;
      }
    }
    else if (Constell_Prn && Constell_Prn != 6)
    {
      goto LABEL_14;
    }
LABEL_19:
    ++v8;
    v19 += 5;
  }
  while (v8 != 218);
  v22 = *(_QWORD *)(v4 + 1736);
  if (v22 > 0)
    Core_Save_Inhib_EE((BOOL *)(v4 + 1368), v22);
  return 1;
}

uint64_t API_Get_Est_ME_TTick(void)
{
  int *v0;
  int v1;
  int v2;

  v0 = *(int **)(p_api + 8);
  if (!*v0)
    return 0;
  v2 = v0[4];
  v1 = *v0;
  return v1
       - v2
       + (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
}

BOOL API_Get_FS_Pulse_TTick(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int *v4;
  unsigned int v5;
  int v6;
  _BOOL8 v7;
  int v9;

  v4 = *(unsigned int **)(p_api + 8);
  *a3 = *v4;
  *a1 = v4[1];
  *a2 = v4[2];
  v5 = v4[4];
  *a4 = v5;
  v6 = *a1;
  if (!*a1)
    return 0;
  if (*a2 > 0x10000)
  {
    EvLog_v("API_Get_FS_Pulse_TTick:  FS_TTick_Fract = %u, out of range!", *a2);
    return 0;
  }
  v9 = *a3 - v6;
  v7 = v9 < 60001;
  if (g_Logging_Cfg >= 6)
    EvLog_v("API_Get_FS_Pulse_TTick:  valid %d,  age %d,  (%u, %u, %u, %u)", v9 < 60001, *a3 - v6, *a3, v6, *a2, v5);
  if (v9 < 60001 != v9 < 63001)
    EvCrt_v("API_Get_FS_Pulse_TTick:  Pulse invalidated, %d > 60s old", v9);
  return v7;
}

uint64_t API_Get_TM_FSP_OS_Time_ms_for_TTick(int a1)
{
  int TM_FSP_Time;
  uint64_t result;
  BOOL v4;
  unsigned int v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v5 = 0;
  TM_FSP_Time = Core_Get_TM_FSP_Time(&v5[1], v5);
  result = 0;
  if (TM_FSP_Time)
  {
    if (v5[1])
      v4 = v5[0] == 0;
    else
      v4 = 1;
    if (v4)
      return 0;
    else
      return v5[1] + a1 - v5[0];
  }
  return result;
}

uint64_t API_Get_Num_SV_and_Clock_Unknowns(unsigned int *a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _OWORD v14[8];
  uint64_t v15;

  v1 = 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v15 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(p_api + 80);
  memset(v14, 0, sizeof(v14));
  do
  {
    v7 = *(_DWORD *)(v6 + 4 * v1 + 1000);
    if (Is_Legal(v7) && *(_BYTE *)(v6 + v1 + 2536) && !*((_BYTE *)v14 + v1))
    {
      *((_BYTE *)v14 + v1) = 1;
      v8 = *(unsigned __int8 *)(v6 + v1 + 1512);
      if (v8 != 255)
        *((_BYTE *)v14 + v8) = 1;
      v5 = (v5 + 1);
      if (v7 <= 6u)
      {
        if (((1 << v7) & 0x6A) != 0)
        {
          v4 = 1;
        }
        else if (v7 == 2)
        {
          v3 = 1;
        }
        else if (v7 == 4)
        {
          v2 = 1;
        }
      }
    }
    ++v1;
  }
  while (v1 != 128);
  v9 = v4;
  if ((v4 & 1) != 0)
    v10 = 2;
  else
    v10 = 1;
  if ((v3 & 1) != 0)
    v9 = v10;
  v11 = v9 + (v2 & 1);
  if (v11 > 1)
  {
    if (((*(_BYTE *)(v6 + 486) != 0) & v4 & v3) == 1)
    {
      if (v11 - 3 > 0xFFFFFFFD)
        goto LABEL_30;
      v11 = 2;
    }
    if (((*(_BYTE *)(v6 + 487) != 0) & v4 & v2) != 1)
      goto LABEL_28;
    if (v11 - 3 <= 0xFFFFFFFD)
    {
      v11 = 2;
LABEL_28:
      if (((*(_BYTE *)(v6 + 488) != 0) & v3) == 1)
        v11 -= v2 & 1;
      goto LABEL_31;
    }
LABEL_30:
    v11 = 1;
  }
LABEL_31:
  if (*(int *)(v6 + 56) < 8)
    ++v11;
  *a1 = v11;
  return v5;
}

uint64_t API_Get_Fix_Reliability(void)
{
  uint64_t v0;
  uint64_t v2;
  int Num_SV_and_Clock_Unknowns;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v0 = *(_QWORD *)(p_api + 80);
  if (*(int *)(v0 + 56) < 6)
    return 1;
  v2 = *(_QWORD *)(p_api + 168);
  v7 = 0;
  Num_SV_and_Clock_Unknowns = API_Get_Num_SV_and_Clock_Unknowns((unsigned int *)&v7);
  if (*(double *)(v0 + 784) <= 10.0)
    v4 = -3;
  else
    v4 = -4;
  v5 = v4 + Num_SV_and_Clock_Unknowns - v7;
  if (*(_BYTE *)(v2 + 60200)
    && !*(_BYTE *)(v2 + 60216)
    && *(_DWORD *)(v2 + 60204) == 1
    && *(double *)(v2 + 60248) <= 160000.0
    && (*(_DWORD *)(v2 + 60208) - 3) < 2
    || *(_BYTE *)(v2 + 61056)
    && !*(_BYTE *)(v2 + 61072)
    && *(_DWORD *)(v2 + 61060) == 1
    && *(double *)(v2 + 61104) <= 160000.0)
  {
    v5 += 2;
  }
  if (*(_BYTE *)(v2 + 60328)
    && !*(_BYTE *)(v2 + 60344)
    && *(_DWORD *)(v2 + 60332) == 1
    && *(double *)(v2 + 60360) <= 160000.0
    && (*(_DWORD *)(v2 + 60208) - 3) < 2)
  {
    ++v5;
  }
  if (v5 == 2)
    v6 = 2;
  else
    v6 = 1;
  if (v5 == 3)
    v6 = 3;
  if (v5 >= 4)
    return 4;
  else
    return v6;
}

void API_Get_Dbg_Constell_ME_Data(int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  int v8;
  unsigned int v9;
  int v10;
  char v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t i;
  unsigned int v19;
  int v20;
  BOOL v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  unsigned int v27;
  unsigned int v28;
  unsigned __int16 *v29;
  unsigned int v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44[128];
  double v45[121];
  _OWORD v46[14];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(p_api + 96);
  v5 = *(_QWORD *)(p_api + 112);
  v6 = *(_BYTE **)(p_api + 72);
  switch(a1)
  {
    case 1:
      if (v6[22])
      {
        v7 = (char *)(v5 + 409);
        v8 = -1;
        v9 = 32;
        goto LABEL_13;
      }
      break;
    case 2:
      if (v6[23])
      {
        v7 = (char *)(v5 + 413);
        v8 = -1;
        v9 = 24;
        goto LABEL_13;
      }
      break;
    case 3:
      if (v6[27])
      {
        v11 = 0;
        v8 = -1;
        v9 = 36;
        goto LABEL_18;
      }
      break;
    case 4:
      if (v6[26])
      {
        v11 = 0;
        v8 = -1;
        v9 = 63;
        goto LABEL_18;
      }
      break;
    case 5:
      if (v6[24])
      {
        v7 = (char *)(v5 + 409);
        v8 = -193;
        v9 = 10;
LABEL_13:
        v11 = *v7;
        goto LABEL_18;
      }
      break;
    case 6:
      if (v6[28])
      {
        v11 = 0;
        v8 = -1;
        v9 = 14;
        goto LABEL_18;
      }
      break;
    case 7:
      if (v6[25])
      {
        v11 = 0;
        v8 = -120;
        v9 = 39;
LABEL_18:
        *(_BYTE *)(a2 + 17) = v11;
        v10 = 1;
        goto LABEL_19;
      }
      break;
    default:
      v10 = 0;
      v9 = 0;
      v8 = 0;
LABEL_19:
      memset(v46, 0, 218);
      bzero(v45, 0x400uLL);
      bzero(v44, 0x400uLL);
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      for (i = 1752; i != 1880; ++i)
      {
        if (*(unsigned __int8 *)(v4 + v14 + 88) == a1)
        {
          v19 = v8 + *(unsigned __int8 *)(v4 + v14 + 90);
          if (v19 < v9)
          {
            v20 = *(_DWORD *)(v4 + v14 + 1240);
            v21 = v20 > 9 || v20 == 8;
            if (v21)
            {
              ++*((_BYTE *)v46 + v19);
              ++*(_WORD *)(a2 + 2);
              v22 = (_BYTE *)(v4 + i);
              LOBYTE(v12) = *(_BYTE *)(v4 + i);
              LOBYTE(v13) = *(_BYTE *)(v4 + i + 128);
              *(double *)&v23 = (double)*(unint64_t *)&v13;
              v24 = 0x3FB0000000000000;
              v25 = (double)*(unint64_t *)&v12 + *(double *)&v23 * 0.0625;
              v45[v17] = v25;
              LOBYTE(v25) = *(_BYTE *)(v4 + i + 256);
              LOBYTE(v23) = *(_BYTE *)(v4 + i + 384);
              v26 = (double)*(unint64_t *)&v25 + (double)v23 * 0.0625;
              v44[v17] = v26;
              if (!*(_BYTE *)a2)
                *(_BYTE *)a2 = 1;
              v27 = *(unsigned __int16 *)(v4 + v15 + 984);
              v28 = (v27 >> 8) & 3;
              if (*(unsigned __int8 *)(a2 + 4) < v28)
                *(_BYTE *)(a2 + 4) = v28;
              if ((v27 & 8) != 0)
              {
                if ((v27 & 0xC0) != 0)
                {
                  v29 = (unsigned __int16 *)(v4 + 2 * v16 + 2904);
                }
                else
                {
                  v21 = (v27 & 0x30) == 0;
                  v29 = (unsigned __int16 *)(v4 + v15 + 2392);
                  if (!v21)
                    v29 = (unsigned __int16 *)(v4 + 2 * v16 + 2648);
                }
              }
              else
              {
                v29 = (unsigned __int16 *)(v4 + 2 * v16 + 2392);
              }
              v30 = *v29;
              if (*(unsigned __int16 *)(a2 + 8) < v30)
                *(_WORD *)(a2 + 8) = v30;
              LOWORD(v26) = *(_WORD *)(a2 + 10);
              v31 = (double)*(unint64_t *)&v26;
              LOBYTE(v26) = v22[256];
              LOBYTE(v24) = v22[384];
              v32 = (double)v24;
              v33 = (double)*(unint64_t *)&v26 + v32 * 0.0625;
              if (v33 > v31)
              {
                *(_WORD *)(a2 + 10) = (int)v33;
                LOBYTE(v33) = v22[256];
                LOBYTE(v31) = v22[384];
                v31 = (double)*(unint64_t *)&v31;
                v32 = 0.0625;
                v33 = (double)*(unint64_t *)&v33 + v31 * 0.0625;
              }
              LOBYTE(v31) = *v22;
              LOBYTE(v32) = v22[128];
              v13 = (double)*(unint64_t *)&v31 + (double)*(unint64_t *)&v32 * 0.0625;
              v12 = v13 - v33;
              if (v12 <= 6.0)
              {
                ++*(_WORD *)(a2 + 14);
                if (v12 <= 3.0)
                  ++*(_WORD *)(a2 + 12);
              }
              ++v17;
            }
          }
        }
        ++v16;
        v15 += 2;
        v14 += 4;
      }
      *(_BYTE *)(a2 + 16) = v17;
      if (v10)
      {
        if (v9 <= 1)
          v34 = 1;
        else
          v34 = v9;
        v35 = (unsigned __int8 *)v46;
        do
        {
          v36 = *v35++;
          if (v36 >= 2)
            ++*(_WORD *)(a2 + 6);
          --v34;
        }
        while (v34);
      }
      if (v17 > 0)
      {
        if (v17 >= 5)
          v37 = 5;
        else
          v37 = v17;
        v38 = (v17 - 1);
        VecSortAscR8(v45, 0, v17 - 1);
        v39 = v17 + ~v37;
        v40 = v17 - 1;
        v41 = v39;
        v42 = 0.0;
        do
          v42 = v42 + v45[v40--];
        while (v40 > v39);
        *(double *)(a2 + 24) = v42 / (double)v37;
        VecSortAscR8(v44, 0, v17 - 1);
        v43 = 0.0;
        do
          v43 = v43 + v44[v38--];
        while (v38 > v41);
        *(double *)(a2 + 32) = v43 / (double)v37;
      }
      break;
  }
}

void API_Get_Dbg_Constell_PE_Data(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _OWORD *v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  _OWORD *v43;
  _OWORD *v44;
  unint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  double v50[128];
  double v51[128];
  double v52[128];
  double v53[128];
  double v54[128];
  double v55[128];
  _OWORD v56[3];
  _OWORD v57[3];
  _BYTE v58[39];
  uint64_t v59;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v4 = v1;
  v59 = *MEMORY[0x24BDAC8D0];
  v5 = *(uint64_t **)(p_api + 56);
  v48 = *(_QWORD *)(p_api + 168);
  v6 = *(_BYTE **)(p_api + 72);
  v7 = *(_QWORD *)(p_api + 96);
  v8 = *(_QWORD *)(p_api + 40);
  memset(v58, 0, sizeof(v58));
  memset(v57, 0, 39);
  memset(v56, 0, 39);
  switch(v1)
  {
    case 1:
      if (v6[22])
      {
        v9 = (_BYTE *)v5[8];
        v10 = (_OWORD *)v5[9];
        v11 = 32;
        v12 = -1;
        v43 = (_OWORD *)v5[10];
        goto LABEL_16;
      }
      break;
    case 2:
      if (v6[23])
      {
        v9 = (_BYTE *)v5[2146];
        v10 = (_OWORD *)v5[2147];
        v43 = (_OWORD *)v5[2148];
        v5 += 1489;
        v11 = 24;
        goto LABEL_15;
      }
      break;
    case 3:
      if (v6[27])
      {
        v9 = (_BYTE *)v5[2202];
        v10 = (_OWORD *)v5[2203];
        v43 = (_OWORD *)v5[2204];
        v5 += 2194;
        v11 = 36;
        goto LABEL_15;
      }
      break;
    case 4:
      if (v6[26])
      {
        v9 = (_BYTE *)v5[3182];
        v10 = (_OWORD *)v5[3183];
        v43 = (_OWORD *)v5[3184];
        v5 += 3174;
        v11 = 63;
        goto LABEL_15;
      }
      break;
    case 5:
      if (v6[24])
      {
        v9 = (_BYTE *)v5[1137];
        v10 = (_OWORD *)v5[1138];
        v43 = (_OWORD *)v5[1139];
        v5 += 1129;
        v11 = 10;
        v12 = -193;
        goto LABEL_16;
      }
      break;
    case 6:
      if (v6[28])
      {
        v5 += 5948;
        v9 = (_BYTE *)v5[7];
        v10 = (_OWORD *)v5[8];
        v43 = (_OWORD *)v5[9];
        v11 = 14;
LABEL_15:
        v12 = -1;
        goto LABEL_16;
      }
      break;
    case 7:
      if (v6[25])
      {
        v41 = 0;
        while (1)
        {
          v42 = *(unsigned __int8 *)(v8 + 8783 + v41);
          if (v42 >= 3)
            break;
          v58[v41] = 0;
          *((_BYTE *)v57 + v41) = 0x10100u >> (8 * v42);
          *((_BYTE *)v56 + v41++) = 0;
          if (v41 == 39)
          {
            v5 += 2192;
            v11 = 39;
            v12 = -120;
            v43 = v56;
            v10 = v57;
            v9 = v58;
LABEL_16:
            v45 = __PAIR64__(v11, v12);
            v46 = *v5;
            goto LABEL_17;
          }
        }
        EvCrt_Illegal_switch_default("API_Get_Dbg_Constell_PE_Data", 0xA5Cu);
      }
      break;
    default:
      v9 = 0;
      v10 = 0;
      v43 = 0;
      v45 = 0;
      v46 = 0;
LABEL_17:
      v13 = (unsigned __int8 *)(v8 + 8592);
      if (*(_BYTE *)(v8 + 8592))
      {
        v14 = 0;
        do
        {
          LODWORD(v55[0]) = 0;
          v15 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(v8 + 6194 + 2 * v14) - 1), v55);
          if (LODWORD(v55[0]) == v4 && (v15 & 0x80000000) == 0)
          {
            ++*(_BYTE *)(v3 + 88);
            if (v9[v15] || *((_BYTE *)v10 + v15))
              ++*(_BYTE *)(v3 + 89);
          }
          ++v14;
        }
        while (v14 < *v13);
      }
      if (*(_BYTE *)(v8 + 8595))
      {
        v16 = 0;
        v17 = v8 + 7066;
        do
        {
          LODWORD(v55[0]) = 0;
          v18 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(v17 + 2 * v16) - 1), v55);
          if (LODWORD(v55[0]) == v4 && (v18 & 0x80000000) == 0)
            ++*(_BYTE *)(v3 + 90);
          ++v16;
        }
        while (v16 < v13[3]);
      }
      v44 = v10;
      v47 = v9;
      bzero(v55, 0x400uLL);
      bzero(v54, 0x400uLL);
      bzero(v53, 0x400uLL);
      bzero(v52, 0x400uLL);
      bzero(v51, 0x400uLL);
      bzero(v50, 0x400uLL);
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v49 = 0;
      v23 = 0;
      v24 = -1024;
      v25 = 36872;
      v26 = 22224;
      v27 = 7064;
      v28 = 29008;
      v29 = 21968;
      do
      {
        if (*(unsigned __int8 *)(v7 + v19 + 88) == v4 && *(int *)(v7 + v19 + 1240) >= 10)
        {
          v30 = v45 + *(unsigned __int8 *)(v7 + v19 + 90);
          if (v30 < HIDWORD(v45))
          {
            if (!*(_BYTE *)v3)
              *(_BYTE *)v3 = 1;
            if (v47[v30] || *((_BYTE *)v44 + v30))
            {
              ++*(_BYTE *)(v3 + 1);
            }
            else if (*((_BYTE *)v43 + v30))
            {
              ++*(_BYTE *)(v3 + 2);
            }
            if (*(_BYTE *)(v46 + v30))
              ++*(_BYTE *)(v3 + 3);
            else
              ++*(_BYTE *)(v3 + 4);
            if (*(_BYTE *)(v48 + v27))
            {
              v55[v23] = fabs(*(double *)(v48 + v24 + 14104));
              v52[v23++] = fabs(*(double *)(v48 + v24 + 20632));
            }
            v31 = *(_DWORD *)(v48 + v19 + 7320) - 1;
            if (v31 <= 0x1C && v22 <= 7)
              *(_BYTE *)(v3 + v22++ + 9) = aCghkmnpqrstvya_0[v31];
            if (*(_BYTE *)(v48 + v29))
            {
              v54[v49] = fabs(*(double *)(v48 + v28));
              v51[v49] = fabs(*(double *)(v48 + v28 + 5504));
              LODWORD(v49) = v49 + 1;
            }
            v32 = *(_DWORD *)(v48 + v26) - 1;
            if (v32 <= 0x1C && v21 <= 7)
              *(_BYTE *)(v3 + v21++ + 17) = aCghkmnpqrstvya_0[v32];
            if (*(_BYTE *)(v48 + v25))
            {
              v53[HIDWORD(v49)] = fabs(*(double *)(v48 + v28 + 14904));
              v50[HIDWORD(v49)] = fabs(*(double *)(v48 + v28 + 20408));
              ++HIDWORD(v49);
            }
            v33 = *(_DWORD *)(v48 + v26 + 14904) - 1;
            if (v33 <= 0x1C && v20 <= 7)
              *(_BYTE *)(v3 + v20++ + 25) = aCghkmnpqrstvya_0[v33];
          }
        }
        v19 += 4;
        ++v25;
        v26 += 4;
        ++v27;
        v28 += 8;
        ++v29;
        v24 += 8;
      }
      while (v19 != 512);
      if (v23)
      {
        *(_BYTE *)(v3 + 6) = v23;
        v34 = v23;
        VecMedian8(v55, v23);
        *(_QWORD *)(v3 + 40) = v35;
        VecMedian8(v52, v34);
        *(_QWORD *)(v3 + 64) = v36;
      }
      if ((_DWORD)v49)
      {
        *(_BYTE *)(v3 + 7) = v49;
        VecMedian8(v54, v49);
        *(_QWORD *)(v3 + 48) = v37;
        VecMedian8(v51, v49);
        *(_QWORD *)(v3 + 72) = v38;
      }
      if (HIDWORD(v49))
      {
        *(_BYTE *)(v3 + 8) = BYTE4(v49);
        VecMedian8(v53, SHIDWORD(v49));
        *(_QWORD *)(v3 + 56) = v39;
        VecMedian8(v50, SHIDWORD(v49));
        *(_QWORD *)(v3 + 80) = v40;
      }
      break;
  }
}

unint64_t API_Get_Dbg_Constell_Orb_Data(unint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  _OWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[3];
  _OWORD v24[3];
  _BYTE v25[39];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(p_api + 56);
  v3 = *(uint64_t **)(p_api + 72);
  v4 = *(_QWORD *)(p_api + 40);
  *(_BYTE *)a2 = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, 39);
  memset(v23, 0, 39);
  switch((int)result)
  {
    case 1:
      if (*((_BYTE *)v3 + 22))
      {
        v5 = (_BYTE *)v2[8];
        v6 = (_OWORD *)v2[9];
        v7 = v3 + 59;
        v8 = v3 + 94;
        v9 = 32;
        v10 = (_OWORD *)v2[10];
        goto LABEL_19;
      }
      break;
    case 2:
      if (*((_BYTE *)v3 + 23))
      {
        v5 = (_BYTE *)v2[2146];
        v6 = (_OWORD *)v2[2147];
        v10 = (_OWORD *)v2[2148];
        v2 += 1489;
        v7 = v3 + 60;
        v8 = v3 + 95;
        v9 = 24;
        goto LABEL_19;
      }
      break;
    case 3:
      if (*((_BYTE *)v3 + 27))
      {
        v5 = (_BYTE *)v2[2202];
        v6 = (_OWORD *)v2[2203];
        v10 = (_OWORD *)v2[2204];
        v2 += 2194;
        v7 = v3 + 64;
        v8 = v3 + 99;
        v9 = 36;
        goto LABEL_19;
      }
      break;
    case 4:
      if (*((_BYTE *)v3 + 26))
      {
        v5 = (_BYTE *)v2[3182];
        v6 = (_OWORD *)v2[3183];
        v10 = (_OWORD *)v2[3184];
        v2 += 3174;
        v7 = v3 + 63;
        v8 = v3 + 98;
        v9 = 63;
        goto LABEL_19;
      }
      break;
    case 5:
      if (*((_BYTE *)v3 + 24))
      {
        v5 = (_BYTE *)v2[1137];
        v6 = (_OWORD *)v2[1138];
        v10 = (_OWORD *)v2[1139];
        v2 += 1129;
        v7 = v3 + 61;
        v8 = v3 + 96;
        v9 = 10;
        goto LABEL_19;
      }
      break;
    case 6:
      if (*((_BYTE *)v3 + 28))
      {
        v2 += 5948;
        v5 = (_BYTE *)v2[7];
        v6 = (_OWORD *)v2[8];
        v10 = (_OWORD *)v2[9];
        v7 = v3 + 65;
        v8 = v3 + 100;
        v9 = 14;
        goto LABEL_19;
      }
      break;
    case 7:
      if (*((_BYTE *)v3 + 25))
      {
        v11 = 0;
        v12 = v4 + 8783;
        do
        {
          v13 = *(unsigned __int8 *)(v12 + v11);
          if (v13 >= 3)
            return (unint64_t)EvCrt_Illegal_switch_default("API_Get_Dbg_Constell_Orb_Data", 0xB82u);
          v25[v11] = 0;
          *((_BYTE *)v24 + v11) = 0x10100u >> (8 * v13);
          *((_BYTE *)v23 + v11++) = 0;
        }
        while (v11 != 39);
        v2 += 2192;
        v7 = v3 + 62;
        v8 = v3 + 97;
        v10 = v23;
        v6 = v24;
        v5 = v25;
        v9 = 39;
LABEL_19:
        v14 = 0;
        v15 = 0;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        result = 0;
        v19 = 0;
        v20 = *v7;
        v21 = *v2;
        v22 = *v8;
        do
        {
          if (v5[v19])
          {
            result |= 1 << v19;
            *(_QWORD *)(a2 + 8) = result;
          }
          if (*((_BYTE *)v10 + v19))
          {
            v18 |= 1 << v19;
            *(_QWORD *)(a2 + 24) = v18;
          }
          if (*(_BYTE *)(v21 + v19))
          {
            v17 |= 1 << v19;
            *(_QWORD *)(a2 + 32) = v17;
          }
          if (*((_BYTE *)v6 + v19))
          {
            v16 |= 1 << v19;
            *(_QWORD *)(a2 + 16) = v16;
          }
          if (*(_BYTE *)(v20 + v19))
          {
            v15 |= 1 << v19;
            *(_QWORD *)(a2 + 40) = v15;
          }
          if (*(_BYTE *)(v22 + v19))
          {
            v14 |= 1 << v19;
            *(_QWORD *)(a2 + 48) = v14;
          }
          ++v19;
        }
        while (v9 != v19);
        if (result || v18 || v16 || v14 || v15)
          *(_BYTE *)a2 = 1;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t API_Get_UTC_Cor(char a1, double *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int UTC_Leap_Second_For_GLON_Day_4yrBlk;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  char v21;
  double v22;
  int v23;
  double v24;
  int v25;

  v3 = *(_QWORD *)(p_api + 48);
  v4 = *(_QWORD *)(p_api + 56);
  v5 = *(_DWORD *)(v4 + 8972);
  if ((v5 - 1) > 5)
  {
LABEL_4:
    if (*(_BYTE *)(v3 + 72) && *(__int16 *)(v3 + 74) >= 1)
    {
      UTC_Leap_Second_For_GLON_Day_4yrBlk = Get_UTC_Leap_Second_For_GLON_Day_4yrBlk(*(unsigned __int16 *)(v3 + 74), *(__int16 *)(v3 + 76), *(double *)(v3 + 80));
      if (UTC_Leap_Second_For_GLON_Day_4yrBlk == -99)
        LOBYTE(v6) = 18;
      else
        LOBYTE(v6) = UTC_Leap_Second_For_GLON_Day_4yrBlk;
    }
    else
    {
      if (!*(_BYTE *)(v3 + 16) || (v8 = *(__int16 *)(v3 + 28), v8 < 1025))
      {
        v10 = 0;
        LOBYTE(v6) = 18;
LABEL_40:
        v25 = *(unsigned __int8 *)(v4 + 8986);
        if (v25 != v6)
        {
          EvLog_v("API_Get_UTC_Cor:  Default %d sec GPS-UTC Correction updated from %d sec", (char)v6, (char)v25);
          *(_BYTE *)(v4 + 8986) = v6;
          *(_BYTE *)(v4 + 8989) = v6;
          v4 = *(_QWORD *)(p_api + 56);
        }
        *(_DWORD *)(v4 + 8972) = 1;
        goto LABEL_43;
      }
      v9 = 0;
      while ((unsigned __int16)v8 < *(unsigned __int16 *)&Time_Data_At_Leap_Sec_Change[v9 + 4]
           || (unsigned __int16)v8 >= *(unsigned __int16 *)&Time_Data_At_Leap_Sec_Change[v9 + 16])
      {
        v9 += 12;
        if (v9 == 96)
          goto LABEL_38;
      }
      LOBYTE(v6) = Time_Data_At_Leap_Sec_Change[v9 + 10];
      if (v6 != 157)
        goto LABEL_39;
LABEL_38:
      LOBYTE(v6) = 18;
    }
LABEL_39:
    v10 = 1;
    goto LABEL_40;
  }
  if (v5 == 1)
  {
    v6 = *(char *)(v4 + 8986);
    if (v6 >= 18)
      goto LABEL_4;
LABEL_23:
    v10 = 1;
LABEL_43:
    v24 = (double)(char)v6;
LABEL_44:
    *a2 = v24;
    return v10;
  }
  v11 = v5 - 4;
  if (*(_BYTE *)(v3 + 16))
    v12 = v11 >= 3;
  else
    v12 = 1;
  if (v12)
  {
    LOBYTE(v6) = *(_BYTE *)(v4 + 8986);
    goto LABEL_23;
  }
  v13 = (int)(*(double *)(v3 + 32) - *(double *)(v3 + 40) + 0.0005);
  v14 = *(__int16 *)(v3 + 28);
  v15 = *(unsigned __int8 *)(v4 + 8987);
  v16 = v15 | 0x400;
  v17 = v14 - 127;
  if (v14 - 127 > (v15 | 0x400))
    v16 = v14 - 127;
  v18 = (v16 - v15 - 769) & 0xFFFFFF00 | v15;
  v19 = v13 + 604800 * v14;
  if (*(char *)(v4 + 8989) >= *(char *)(v4 + 8986))
    v20 = *(char *)(v4 + 8986);
  else
    v20 = *(char *)(v4 + 8989);
  if ((int)(86400 * *(unsigned __int8 *)(v4 + 8988) - v19 + v20 + 604800 * v18 + 619315200) <= 0)
    v21 = *(_BYTE *)(v4 + 8989);
  else
    v21 = *(_BYTE *)(v4 + 8986);
  v22 = (double)v21;
  *a2 = v22;
  if ((a1 & 1) == 0)
  {
    v23 = *(unsigned __int8 *)(v4 + 8985);
    if (v17 <= (v23 | 0x400))
      v17 = v23 | 0x400;
    v24 = v22
        + (double)*(int *)(v4 + 8980) * 9.31322575e-10
        + (double)*(int *)(v4 + 8976)
        * 8.8817842e-16
        * (double)(int)(v19
                      - (*(unsigned __int8 *)(v4 + 8984) << 12)
                      - 604800 * ((v17 - v23 - 769) & 0xFFFFFF00 | v23)
                      - 619315200);
    v10 = 1;
    goto LABEL_44;
  }
  return 1;
}

unsigned int *API_Get_Next_Leap_Second(unsigned int *result, signed __int8 *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  unsigned int *v11;
  double v12;
  double v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;

  v3 = p_api;
  v4 = *(_QWORD *)(p_api + 48);
  v5 = *(_QWORD *)(p_api + 56);
  *result = 0;
  *a2 = 0;
  *a3 = 0x7FFFFFFF;
  if (*(_BYTE *)(v4 + 16))
  {
    if (*(int *)v4 >= 1 && (*(_DWORD *)(*(_QWORD *)(v3 + 56) + 8972) - 4) <= 2)
    {
      v6 = (unsigned __int8 *)(v5 + 8986);
      v7 = v6[3];
      v8 = *v6;
      if (v7 != v8)
      {
        v11 = result;
        v12 = *(double *)(v4 + 32);
        v13 = *(double *)(v4 + 40);
        v14 = *(__int16 *)(v4 + 28);
        v15 = v6[1];
        v16 = v6[2];
        result = (unsigned int *)Is_Future_Leap_Sec_Date_Not_Valid(v14, 1, v15, v6[2]);
        if ((result & 1) == 0)
        {
          v17 = v15 | 0x400;
          if (v14 - 127 > (v15 | 0x400))
            v17 = v14 - 127;
          v18 = 604800 * ((v17 - v15 - 769) & 0xFFFFFF00 | v15) + 86400 * v16 + 619315200;
          *v11 = v18;
          v19 = (char)v8;
          if ((char)v7 < (char)v8)
            v19 = (char)v7;
          *a3 = v19 - (int)(v12 - v13 + 0.0005) - 604800 * v14 + v18;
          *v11 += v19;
          *a2 = v7 - v8;
        }
      }
    }
  }
  return result;
}

uint64_t API_Get_Nav_Data(uint64_t a1)
{
  char *v1;
  _DWORD *v2;
  _DWORD *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _OWORD *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  double v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned __int16 *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  uint64_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int32x4_t v48;
  uint8x16_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  int v72;
  int Num_SV_and_Clock_Unknowns;
  int v74;
  double v75;
  double v76;
  int v77;
  int v78;
  int *v79;
  int v80;
  int v81;
  int16x4_t *v82;
  int v83;
  unsigned int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int8x16_t v104;
  int v105;
  uint64_t v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  int v112;
  double v113;
  double v114;
  double v115;
  int v116;
  double v117;
  double v118;
  double v119;
  int v120;
  char Pos_LLH;
  int v122;
  BOOL v123;
  double v124;
  int v125;
  uint64_t v126;
  int v127;
  char v128;
  char v129;
  uint64_t v130;
  double v131;
  double v132;
  double v133;
  int v134;
  unint64_t v135;
  int v136;
  int v137;
  int v138;
  char v139;
  int v140;
  int v141;
  __int16 v142;
  int v143;
  __int16 v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  int v150;
  double v151;
  int v152;
  double v153;
  uint64_t v154;
  char v155;
  char v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  char *v161;
  int Constell_Prn;
  _BOOL4 v163;
  _BOOL4 v164;
  char v165;
  char v166;
  char v167;
  char v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  unsigned int v173;
  unint64_t v174;
  double v175;
  unsigned int v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  unint64_t v181;
  double v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  _WORD *v187;
  unsigned int v188;
  unsigned int v189;
  _OWORD *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  unsigned __int8 v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int *v204;
  unsigned __int8 *v205;
  char v206;
  char v207;
  uint64_t v208;
  unsigned __int8 v209;
  int v210;
  int v211;
  unsigned int v212;
  BOOL v213;
  unsigned int v214;
  unsigned __int8 v215;
  uint64_t v216;
  char *v217;
  char *v218;
  char v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  int v225;
  int v226;
  _QWORD *v227;
  _BOOL4 v228;
  char *v229;
  unsigned __int16 *v230;
  int v231;
  unsigned int v232;
  int v233;
  int *v234;
  int v235;
  unsigned __int16 v236;
  int v237;
  int v238;
  int *v239;
  int v240;
  int v241;
  __int16 v242;
  int *v243;
  int v244;
  unsigned __int16 v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  unsigned int v253;
  unsigned int v254;
  __int16 v255;
  uint64_t result;
  unint64_t v257;
  double v258;
  char *v259;
  char v260;
  char v261;
  int v262;
  int v263;
  char *v264;
  double *v265;
  double v266;
  _WORD *v267;
  uint64_t v268;
  double *v269;
  __int16 *v270;
  _BYTE *v271;
  uint64_t v272;
  double *v273;
  double *v274;
  _OWORD *v275;
  __int128 *v276;
  int32x2_t *v277;
  double *v278;
  _OWORD *v279;
  int *v280;
  int *v281;
  int *v282;
  int *v283;
  int *v284;
  uint64_t v285;
  int *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  int *v292;
  int *v293;
  int *v294;
  _BYTE *v295;
  _BYTE *v296;
  _BYTE *v297;
  __int32 *v298;
  _BYTE *v299;
  _BYTE *v300;
  _BYTE *v301;
  _BYTE *v302;
  _BYTE *v303;
  _BYTE *v304;
  _BYTE *v305;
  int *v306;
  uint64_t v307;
  _DWORD *v308;
  _BYTE *v309;
  _DWORD *v310;
  uint64_t v311;
  uint64_t v312;
  int *v313;
  _BYTE *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  int16x4_t *v319;
  int *v320;
  uint64_t v321;
  _BYTE *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  _QWORD *v329;
  unsigned int v330;
  uint64_t v331;
  _DWORD *v332;
  int v333;
  unint64_t v334;
  uint64_t v335;
  unsigned __int8 v336;
  unsigned int v337;
  int v338;
  uint64_t v339;
  _BYTE *v340;
  uint64_t v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  _QWORD *v345;
  uint64_t v346;
  char v347;
  uint64_t v348;
  unsigned int v349;
  signed __int8 v350[8];
  __int128 v351;
  uint64_t v352;
  char v353;
  int v354;
  int v355[8];
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  _OWORD v366[2];
  float64x2_t v367[2];
  _BYTE v368[16];
  double v369[14];
  double v370[14];
  _BYTE v371[16];
  _OWORD v372[12];
  _OWORD v373[2];
  _WORD v374[216];
  int v375;
  _OWORD v376[218];
  _OWORD v377[218];
  _WORD v378[216];
  int v379;
  _WORD v380[216];
  int v381;
  uint64_t v382;

  v1 = (char *)MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v4 = v1;
  v382 = *MEMORY[0x24BDAC8D0];
  v5 = p_api;
  v7 = *(_QWORD *)(p_api + 72);
  v6 = *(_QWORD *)(p_api + 80);
  v8 = *(_QWORD *)(p_api + 96);
  v325 = *(_QWORD *)(p_api + 248);
  v9 = *(_QWORD *)(p_api + 168);
  v10 = *(_QWORD *)(p_api + 128);
  v11 = *(_QWORD *)(p_api + 56);
  v268 = *(_QWORD *)(p_api + 48);
  v12 = *(_QWORD *)(p_api + 112);
  bzero(v1, 0x18D0uLL);
  bzero(v3, 0x878uLL);
  if (*(double *)(*(_QWORD *)(v5 + 80) + 360) > 600.0)
    return 0;
  v13 = 0;
  v14 = (_OWORD *)(v6 + 824);
  v272 = v11 + 50584;
  v344 = v11 + 47500;
  v267 = (_WORD *)(v11 + 25388);
  v316 = v11 + 17132;
  v271 = (_BYTE *)(v11 + 8986);
  v314 = (_BYTE *)(v9 + 79568);
  v312 = v9 + 60992;
  v310 = (_DWORD *)(v9 + 59928);
  v270 = (__int16 *)(v4 + 32);
  v269 = (double *)(v4 + 40);
  v319 = (int16x4_t *)v12;
  v308 = (_DWORD *)(v12 + 547);
  v298 = (__int32 *)(v10 + 27136);
  v326 = v11;
  v15 = v11 + 17328;
  v278 = (double *)(v9 + 1632);
  v274 = (double *)(v9 + 1640);
  v341 = v9;
  v273 = (double *)(v9 + 1648);
  v277 = (int32x2_t *)(v7 + 1756);
  v276 = (__int128 *)(v7 + 1764);
  v346 = v8 + 3;
  v16 = *(_DWORD *)(v6 + 32);
  v339 = v10;
  v328 = v10 + 183;
  v348 = v7 + 808;
  v275 = (_OWORD *)(v6 + 824);
  v342 = v4;
  v343 = v6;
  v321 = v7;
  v323 = v8;
  while (2)
  {
    v337 = v13;
    v338 = v16;
    v17 = *(_DWORD *)(v6 + 36);
    *((_DWORD *)v4 + 1) = v17;
    v3[1] = v17;
    v18 = *(_QWORD *)(v6 + 40);
    *((_QWORD *)v4 + 1) = v18;
    *((_QWORD *)v3 + 1) = v18;
    v19 = *(unsigned int *)(v6 + 56);
    v4[16] = (int)v19 > 0;
    v20 = (int)v19 >= 1 && *(_BYTE *)(v6 + 60) != 0;
    v4[17] = v20;
    *((_WORD *)v4 + 16) = *(_WORD *)(v6 + 62);
    v21 = *(_QWORD *)(v6 + 48);
    *((_QWORD *)v4 + 5) = v21;
    *((_QWORD *)v4 + 6) = v21;
    *((_QWORD *)v4 + 7) = *(_QWORD *)(v6 + 152);
    *((_QWORD *)v4 + 8) = *(_QWORD *)(v6 + 184);
    *((double *)v4 + 13) = *(double *)(v6 + 224) * 57.2957795;
    *((double *)v4 + 14) = *(double *)(v6 + 232) * 57.2957795;
    *((_QWORD *)v4 + 15) = *(_QWORD *)(v6 + 240);
    *((double *)v4 + 16) = *(double *)(v6 + 240) - *(double *)(v6 + 248);
    *((_QWORD *)v4 + 10) = *(_QWORD *)(v6 + 80);
    *((_QWORD *)v4 + 11) = *(_QWORD *)(v6 + 88);
    *((_QWORD *)v4 + 12) = *(_QWORD *)(v6 + 96);
    *(_OWORD *)(v4 + 136) = v14[10];
    *((double *)v4 + 19) = -*(double *)(v6 + 968);
    v22 = *(double *)(v6 + 872);
    if (v22 >= 9499050.0)
      v23 = g_TOW_stat_Sigma_Table[v19];
    else
      v23 = v22 * 0.00000000333564095;
    *((double *)v4 + 20) = v23;
    *((double *)v4 + 21) = *(double *)(v6 + 864) * 0.00000000333564095;
    *((double *)v4 + 22) = *(double *)(v6 + 920) * 0.00000000333564095;
    *(_OWORD *)(v4 + 184) = *v14;
    *((_QWORD *)v4 + 25) = *(_QWORD *)(v6 + 848);
    *((_OWORD *)v4 + 13) = *(_OWORD *)(v6 + 928);
    *((_QWORD *)v4 + 28) = *(_QWORD *)(v6 + 944);
    *(_OWORD *)(v4 + 232) = v14[4];
    v24 = *(double *)(v6 + 912);
    *((double *)v4 + 31) = v24;
    *((_QWORD *)v4 + 32) = *(_QWORD *)(v6 + 3824);
    if (v24 > 360.0)
      *((_QWORD *)v4 + 31) = 0x408F380000000000;
    *((_QWORD *)v4 + 33) = *(_QWORD *)(v6 + 808);
    *((_OWORD *)v4 + 17) = *(_OWORD *)(v6 + 784);
    *((_QWORD *)v4 + 36) = *(_QWORD *)(v6 + 800);
    v25 = *(_QWORD *)(p_api + 48);
    v26 = *(_QWORD *)(p_api + 56);
    v27 = *(_QWORD *)(p_api + 168);
    if (*(_BYTE *)(v25 + 16))
    {
      v28 = *(_QWORD *)(p_api + 72);
      v29 = *(__int16 *)(v25 + 28);
      v30 = v29 < *(__int16 *)(v28 + 1720);
      if (*(int *)v25 >= 9 && *(_QWORD *)(v28 + 1736) > (int)*(double *)(v25 + 32) + 604800 * v29)
        v30 |= 2u;
    }
    else
    {
      v30 = 0;
    }
    v31 = *(double *)(v27 + 40);
    if (v31 > 100.0 && *(int *)(v27 + 20) > 8)
      v30 |= 4u;
    if (v31 < -100.0 && *(int *)(v27 + 20) > 8)
      v30 |= 8u;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = *(_QWORD *)(p_api + 96) + 2648;
    v36 = (unsigned __int16 *)v35;
    do
    {
      if (*(int *)(v35 + 4 * v32 - 1408) >= 10 && *(v36 - 128) >= 0xC8u)
      {
        v37 = *(unsigned __int8 *)(v35 + v32 - 896);
        v38 = *(unsigned __int8 *)(v35 + v32 - 640);
        v39 = v37 <= 0x2C ? v34 : v34 + 1;
        v40 = v38 - v37;
        v41 = v38 <= 0x2C && v40 <= 5;
        v42 = v41 ? v33 : v33 + 1;
        if (*v36 >= 0xC8u)
        {
          v34 = v39;
          v33 = v42;
        }
      }
      ++v32;
      ++v36;
    }
    while (v32 != 128);
    v333 = v30;
    v335 = *(_QWORD *)(p_api + 48);
    v43 = 0;
    v44 = 0uLL;
    v45 = 0uLL;
    v46 = 0uLL;
    v47.i64[0] = 0x100000001;
    v47.i64[1] = 0x100000001;
    v48 = 0uLL;
    do
    {
      v49 = (uint8x16_t)vceqzq_s8(*(int8x16_t *)(v26 + 8994 + v43));
      v50 = vmovl_u8(*(uint8x8_t *)v49.i8);
      v51 = vmovl_high_u8(v49);
      v48 = vaddq_s32(v48, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v51), v47));
      v46 = vaddq_s32(v46, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v51.i8), v47));
      v45 = vaddq_s32(v45, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v50), v47));
      v44 = vaddq_s32(v44, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v50.i8), v47));
      v43 += 16;
    }
    while (v43 != 32);
    v52 = 0;
    v53 = 0;
    v330 = vaddvq_s32(vaddq_s32(vaddq_s32(v44, v46), vaddq_s32(v45, v48)));
    do
      v53 += *(unsigned __int8 *)(v26 + 61952 + v52++);
    while (v52 != 218);
    v54 = 0;
    v55 = 0;
    v56 = *(_QWORD *)(p_api + 80) + 1000;
    do
    {
      v57 = *(_DWORD *)(v56 + v54);
      Is_Legal(v57);
      switch((char)v57)
      {
        case 0:
          EvCrt_Illegal_switch_case("API_Get_Spoofing_Flags", 0x904u);
          break;
        case 1:
          v61 = BYTE2(v57) - 1;
          if (*(_BYTE *)(*(_QWORD *)(v26 + 64) + v61))
          {
            v62 = v26 + 116 * (int)v61 + 120;
            goto LABEL_55;
          }
          break;
        case 3:
          v58 = BYTE2(v57) - 1;
          if (*(_BYTE *)(*(_QWORD *)(v26 + 17616) + v58))
          {
            v59 = Is_GAL_IntEph_Real(v26 + 88 * (int)v58 + 17708);
            goto LABEL_56;
          }
          break;
        case 4:
          v63 = BYTE2(v57) - 1;
          if (*(_BYTE *)(*(_QWORD *)(v26 + 25456) + v63))
          {
            v59 = Is_BDS_IntEph_Real(v26 + 152 * (int)v63 + 25512);
            goto LABEL_56;
          }
          break;
        case 5:
          v64 = BYTE2(v57) - 193;
          if (*(_BYTE *)(*(_QWORD *)(v26 + 9096) + v64))
          {
            v62 = v26 + 116 * (int)v64 + 9152;
LABEL_55:
            v59 = Is_GPS_BinEph_Real(v62);
            goto LABEL_56;
          }
          break;
        case 6:
          v60 = BYTE2(v57) - 1;
          if (*(_BYTE *)(*(_QWORD *)(v26 + 47640) + v60))
          {
            v59 = Is_NVIC_IntEph_Real(v26 + 76 * (int)v60 + 47696);
LABEL_56:
            v55 += !v59;
          }
          break;
        default:
          break;
      }
      v54 += 4;
    }
    while (v54 != 512);
    v65 = v333 | 0x10;
    if (v34 <= 2)
      v65 = v333;
    if (v33 > 2)
      v65 |= 0x20u;
    if (v330 > 2)
      v65 |= 0x100u;
    if (v53 > 2)
      v65 |= 0x200u;
    if (v55 > 2)
      v65 |= 0x400u;
    if (*(_BYTE *)(v26 + 8992))
      v65 |= 0x1000u;
    if (*(_BYTE *)(v26 + 8993))
      v65 |= 0x2000u;
    if (*(_BYTE *)(v335 + 96))
      v65 |= 0x10000u;
    if (*(_BYTE *)(v335 + 97))
      v65 |= 0x20000u;
    v4 = v342;
    *((_DWORD *)v342 + 74) = v65;
    *((_DWORD *)v342 + 75) = *(_DWORD *)(v321 + 48);
    v66 = p_api;
    v67 = *(_QWORD *)(p_api + 80);
    v68 = *(_DWORD *)(v67 + 4);
    if (!v68)
    {
      v72 = 0;
      v69 = v323;
      v70 = v312;
      goto LABEL_86;
    }
    v69 = v323;
    v70 = v312;
    if (v68 == 4)
    {
      v71 = *(_BYTE *)(v67 + 17) == 0;
      v72 = 2;
    }
    else
    {
      if (v68 != 5)
      {
        v72 = 1;
        goto LABEL_86;
      }
      v71 = *(_BYTE *)(v67 + 17) == 0;
      v72 = 4;
    }
    if (!v71)
      ++v72;
LABEL_86:
    *((_DWORD *)v342 + 76) = v72;
    v355[0] = 0;
    Num_SV_and_Clock_Unknowns = API_Get_Num_SV_and_Clock_Unknowns((unsigned int *)v355);
    v74 = Num_SV_and_Clock_Unknowns - v355[0];
    if (*(int *)(v67 + 56) < 6)
    {
      if (!v68)
        goto LABEL_104;
      if (v74 < 3)
        goto LABEL_104;
      v75 = 10.0;
      if (*(double *)(v67 + 808) >= 10.0 || *(double *)(v67 + 784) >= 10.0)
        goto LABEL_104;
      v76 = *(double *)(v67 + 800);
      goto LABEL_102;
    }
    if (v74 >= 3)
    {
      if (*(double *)(v67 + 800) < 10.0)
      {
        v77 = 4;
        goto LABEL_105;
      }
    }
    else if (v74 != 2)
    {
      if (v74 < 1)
        goto LABEL_104;
      goto LABEL_100;
    }
    if (*(double *)(v67 + 784) < 10.0)
    {
      v77 = 3;
      goto LABEL_105;
    }
LABEL_100:
    if (!v68)
      goto LABEL_104;
    v76 = *(double *)(v67 + 808);
    v75 = 10.0;
LABEL_102:
    if (v76 < v75)
    {
      v77 = 2;
      goto LABEL_105;
    }
LABEL_104:
    v77 = Num_SV_and_Clock_Unknowns > 0;
LABEL_105:
    *((_DWORD *)v342 + 77) = v77;
    *((_DWORD *)v342 + 78) = API_Get_Fix_Reliability();
    v78 = *(unsigned __int8 *)(v67 + 18);
    if (*(_BYTE *)(v67 + 18))
    {
      v78 = *(_DWORD *)(v67 + 12);
      if (v78)
      {
        if (*(double *)(v67 + 840) <= 30000.0)
        {
          if (*(_BYTE *)(v67 + 500) && *(_BYTE *)(v67 + 516))
          {
            v78 = 3;
          }
          else if (*(_BYTE *)(v67 + 16))
          {
            v78 = 2;
          }
          else
          {
            v78 = 1;
          }
        }
        else
        {
          v78 = 0;
        }
      }
    }
    *((_DWORD *)v342 + 79) = v78;
    v79 = *(int **)(v66 + 48);
    v80 = 2 * (v68 != 0);
    if (*v79 > 8)
    {
      v82 = v319;
    }
    else
    {
      v81 = v79[23];
      v82 = v319;
      if (v81
        && (int)((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v81) < 300000)
      {
        v80 |= 4u;
      }
    }
    if (*(_DWORD *)(v67 + 432) == 1)
      v83 = v80 | 8;
    else
      v83 = v80;
    if (*(_DWORD *)(v67 + 420) == 1)
      v83 |= 0x10u;
    if (*(_DWORD *)(v67 + 416) == 1)
      v84 = v83 | 0x20;
    else
      v84 = v83;
    if (*(_DWORD *)(v67 + 440) == 1)
    {
      v85 = v84 | 0x40;
      v84 |= 0x80u;
      if (*(_DWORD *)(v67 + 444) != 1)
        v84 = v85;
    }
    v86 = 0;
    if (*(_BYTE *)(v67 + 548))
      v84 |= 0x100u;
    if (*(_BYTE *)(v67 + 564))
      v84 |= 0x200u;
    if (*(_BYTE *)(v67 + 580))
      v84 |= 0x400u;
    if (*(_BYTE *)(v67 + 596))
      v84 |= 0x800u;
    if (*(_BYTE *)(v67 + 692))
      v84 |= 0x1000u;
    if (*(_BYTE *)(v67 + 628))
      v84 |= 0x2000u;
    if (*(_BYTE *)(v67 + 612))
      v84 |= 0x4000u;
    if (*(_BYTE *)(v67 + 756))
      v84 |= 0x8000u;
    if (*(_BYTE *)(v67 + 708))
      v84 |= 0x10000u;
    if (*(_BYTE *)(v67 + 724))
      v84 |= 0x20000u;
    if (*(_BYTE *)(v67 + 740))
      v84 |= 0x40000u;
    if (*(_BYTE *)(v67 + 532))
      v84 |= 0x1000000u;
    if (*(_BYTE *)(v67 + 516))
      v84 |= 0x2000000u;
    if (*(_BYTE *)(v67 + 500))
      v84 |= 0x4000000u;
    if (*(_BYTE *)(v67 + 676))
      v84 |= 0x80000u;
    v87 = *(_QWORD *)(p_api + 72);
    while (!*(_BYTE *)(v87 + v86 + 249) && !*(_BYTE *)(v87 + v86 + 528)
         || *(char *)(*(_QWORD *)(p_api + 32) + v86) <= 0)
    {
      if (++v86 == 218)
        goto LABEL_169;
    }
    v84 |= 0x10000000u;
LABEL_169:
    v88 = 0;
    while (!*(_BYTE *)(*(_QWORD *)(p_api + 56) + 61516 + v88))
    {
      if (++v88 == 218)
        goto LABEL_174;
    }
    v84 |= 0x20000000u;
LABEL_174:
    if (v84 <= 1)
      v89 = 1;
    else
      v89 = v84;
    *((_DWORD *)v342 + 80) = v89;
    v342[324] = 2;
    if (sqrt(*((double *)v342 + 27) * *((double *)v342 + 27) + *((double *)v342 + 26) * *((double *)v342 + 26)) >= 400.0)
      goto LABEL_186;
    v90 = *((_DWORD *)v342 + 77);
    if (!(v90 | v89 & 2))
      goto LABEL_186;
    v91 = *((_DWORD *)v342 + 78);
    if (!v91)
      goto LABEL_186;
    if ((v90 - 5) < 0xFFFFFFFE || (v91 - 5) < 0xFFFFFFFD)
    {
      if ((v90 - 2) >= 3 && (v89 & 2) == 0)
        goto LABEL_186;
    }
    else
    {
      v342[325] = 1;
    }
    v342[326] = 1;
LABEL_186:
    *(_WORD *)((char *)v3 + 81) = v82[69].i16[0];
    *(int16x4_t *)(v3 + 21) = vuzp1_s16(v82[67], vrev32_s16(v82[67]));
    v3[23] = *v308;
    *((_BYTE *)v3 + 96) = v82[68].i8[7];
    *(_WORD *)((char *)v3 + 97) = *(_WORD *)(v321 + 242);
    *((_BYTE *)v3 + 99) = v82[68].i8[1];
    *((_BYTE *)v3 + 100) = v82[53].i8[4];
    *((_WORD *)v3 + 51) = v82[54].i32[0];
    *((_BYTE *)v3 + 104) = v82[56].i8[4];
    *(_QWORD *)((char *)v3 + 106) = 0;
    *(_DWORD *)((char *)v3 + 113) = 0;
    *((_QWORD *)v3 + 15) = *(_QWORD *)(v321 + 88);
    *((_QWORD *)v3 + 16) = *(_QWORD *)(v321 + 168);
    *((_QWORD *)v3 + 17) = *(_QWORD *)(v321 + 224);
    *((_QWORD *)v3 + 18) = *(_QWORD *)(v321 + 200);
    *((_QWORD *)v3 + 19) = 0;
    API_Get_Dbg_Constell_ME_Data(1, (uint64_t)(v3 + 40));
    API_Get_Dbg_Constell_ME_Data(5, (uint64_t)(v3 + 50));
    API_Get_Dbg_Constell_ME_Data(2, (uint64_t)(v3 + 60));
    API_Get_Dbg_Constell_ME_Data(3, (uint64_t)(v3 + 70));
    API_Get_Dbg_Constell_ME_Data(4, (uint64_t)(v3 + 80));
    API_Get_Dbg_Constell_ME_Data(6, (uint64_t)(v3 + 90));
    API_Get_Dbg_Constell_ME_Data(7, (uint64_t)(v3 + 100));
    v92 = *(_DWORD *)(v321 + 1724);
    if (v92 < 1)
    {
      v97 = 0;
      v94 = v316;
      v95 = v328;
    }
    else
    {
      v93 = *(_QWORD *)(p_api + 48);
      v94 = v316;
      v95 = v328;
      if (*(_BYTE *)(v93 + 16) && *(int *)v93 >= 3)
      {
        v96 = (int)*(double *)(v93 + 32) + 604800 * *(__int16 *)(v93 + 28);
        v95 = v328;
      }
      else
      {
        v96 = 0;
      }
      v97 = (v96 - v92) / 3600;
    }
    v3[110] = v97;
    v98 = *(_DWORD *)(v321 + 1728);
    if (v98 < 1)
    {
      *((_WORD *)v3 + 222) = 0;
      v99 = p_api;
    }
    else
    {
      v99 = p_api;
      v100 = *(_QWORD *)(p_api + 48);
      if (*(_BYTE *)(v100 + 16) && *(int *)v100 >= 3)
        v101 = (int)*(double *)(v100 + 32) + 604800 * *(__int16 *)(v100 + 28);
      else
        LOBYTE(v101) = 0;
      v95 = v328;
      *((_WORD *)v3 + 222) = ((char)(v101 - v98) / 16);
    }
    v102 = 0;
    v103 = *(_QWORD *)(v99 + 64) + 448;
    v104 = 0uLL;
    do
    {
      v104 = vsubq_s8(v104, vtstq_s8(*(int8x16_t *)(v103 + v102), *(int8x16_t *)(v103 + v102)));
      v102 += 16;
    }
    while (v102 != 128);
    *((_BYTE *)v3 + 446) = vaddvq_s8(v104);
    if (*(_BYTE *)(v339 + 136))
      v105 = *(_DWORD *)(v339 + 140);
    else
      v105 = 0;
    v106 = 0;
    v3[112] = v105;
    do
    {
      *((_BYTE *)v3 + v106 + 452) = *(_BYTE *)(v95 + v106);
      ++v106;
    }
    while (v106 != 6);
    *((_BYTE *)v3 + 458) = *v314;
    v104.i32[0] = *v298;
    *((double *)v3 + 58) = (double)v104.u64[0] * 0.001;
    *((_QWORD *)v3 + 59) = *(_QWORD *)(v343 + 3816);
    *((_QWORD *)v3 + 60) = *(_QWORD *)(v343 + 3840);
    *((_QWORD *)v3 + 61) = *(_QWORD *)(v343 + 3864);
    *((_BYTE *)v3 + 496) = *(_BYTE *)(v343 + 18);
    *((_BYTE *)v3 + 497) = *(_BYTE *)(v339 + 240);
    API_Get_Dbg_Constell_PE_Data(1);
    API_Get_Dbg_Constell_PE_Data(5);
    API_Get_Dbg_Constell_PE_Data(2);
    API_Get_Dbg_Constell_PE_Data(3);
    API_Get_Dbg_Constell_PE_Data(4);
    API_Get_Dbg_Constell_PE_Data(6);
    API_Get_Dbg_Constell_PE_Data(7);
    API_Get_Dbg_Constell_Orb_Data(1uLL, (uint64_t)(v3 + 308));
    API_Get_Dbg_Constell_Orb_Data(5uLL, (uint64_t)(v3 + 322));
    API_Get_Dbg_Constell_Orb_Data(2uLL, (uint64_t)(v3 + 336));
    API_Get_Dbg_Constell_Orb_Data(3uLL, (uint64_t)(v3 + 350));
    API_Get_Dbg_Constell_Orb_Data(4uLL, (uint64_t)(v3 + 364));
    API_Get_Dbg_Constell_Orb_Data(6uLL, (uint64_t)(v3 + 378));
    API_Get_Dbg_Constell_Orb_Data(7uLL, (uint64_t)(v3 + 392));
    *((_BYTE *)v3 + 16) = *(_BYTE *)(v343 + 556);
    *((_BYTE *)v3 + 17) = *(_BYTE *)(v343 + 564);
    *((_BYTE *)v3 + 18) = *(_DWORD *)(v343 + 560) != 0;
    v3[5] = *(_DWORD *)(v343 + 568);
    *((_BYTE *)v3 + 24) = v310[3];
    *((_BYTE *)v3 + 25) = v310[5];
    *((_BYTE *)v3 + 26) = *(_BYTE *)(v343 + 540);
    *((_BYTE *)v3 + 27) = *(_BYTE *)(v343 + 548);
    *((_BYTE *)v3 + 28) = *(_DWORD *)(v343 + 544) != 0;
    v3[8] = *(_DWORD *)(v343 + 552);
    *((_BYTE *)v3 + 36) = *v310;
    *((_BYTE *)v3 + 37) = v310[2];
    *((_BYTE *)v3 + 38) = *(_BYTE *)(v343 + 572);
    *((_BYTE *)v3 + 39) = *(_BYTE *)(v343 + 580);
    *((_BYTE *)v3 + 40) = *(_DWORD *)(v343 + 576) != 0;
    v3[11] = *(_DWORD *)(v343 + 584);
    *((_BYTE *)v3 + 48) = v310[6];
    *((_BYTE *)v3 + 49) = v310[8];
    *((_BYTE *)v3 + 50) = *(_BYTE *)(v343 + 620);
    *((_BYTE *)v3 + 51) = *(_BYTE *)(v343 + 628);
    *((_BYTE *)v3 + 52) = *(_DWORD *)(v343 + 624) != 0;
    v3[14] = *(_DWORD *)(v343 + 632);
    memset(v355, 0, sizeof(v355));
    Core_Get_ExtA_Alt(6000, v355);
    *((_OWORD *)v3 + 4) = *(_OWORD *)&v355[2];
    *((_BYTE *)v3 + 80) = v355[6];
    *((_BYTE *)v3 + 1176) = *(_BYTE *)(v343 + 604);
    *((_BYTE *)v3 + 1177) = *(_BYTE *)(v343 + 612);
    *((_BYTE *)v3 + 1178) = *(_DWORD *)(v343 + 608) != 0;
    v3[295] = *(_DWORD *)(v343 + 616);
    *((_BYTE *)v3 + 1184) = *(_BYTE *)(v70 + 24);
    *((double *)v3 + 149) = -(*(double *)(v343 + 224) - *(double *)v70 * 0.0174532925) * 6378137.0;
    *((double *)v3 + 150) = *(double *)(v343 + 328)
                          * (-(*(double *)(v343 + 232) - *(double *)(v70 + 8) * 0.0174532925)
                           * 6378137.0);
    v107 = *(double *)(v70 + 32);
    v108 = v107 - *(double *)(v343 + 376);
    *((double *)v3 + 151) = v108;
    v109 = -360.0;
    if (v108 >= 180.0 || (v109 = 360.0, v108 < -180.0))
    {
      *((double *)v3 + 151) = v108 + v109;
      v107 = *(double *)(v70 + 32);
    }
    if (v107 <= 0.0)
      v110 = -0.5;
    else
      v110 = 0.5;
    v111 = v107 + v110;
    if (v111 <= 2147483650.0)
    {
      if (v111 >= -2147483650.0)
        v112 = (int)v111;
      else
        LOWORD(v112) = 0;
    }
    else
    {
      LOWORD(v112) = -1;
    }
    *((_WORD *)v3 + 608) = v112;
    v113 = *(double *)(v70 + 40);
    if (v113 <= 0.0)
      v114 = -0.5;
    else
      v114 = 0.5;
    v115 = v113 + v114;
    if (v115 <= 2147483650.0)
    {
      if (v115 >= -2147483650.0)
        v116 = (int)v115;
      else
        LOWORD(v116) = 0;
    }
    else
    {
      LOWORD(v116) = -1;
    }
    *((_WORD *)v3 + 609) = v116;
    v117 = *(double *)(v70 + 48);
    if (v117 <= 0.0)
      v118 = -0.5;
    else
      v118 = 0.5;
    v119 = v117 + v118;
    if (v119 <= 2147483650.0)
    {
      if (v119 >= -2147483650.0)
        v120 = (int)v119;
      else
        LOBYTE(v120) = 0;
    }
    else
    {
      LOBYTE(v120) = -1;
    }
    *((_BYTE *)v3 + 1220) = v120;
    *(_DWORD *)((char *)v3 + 1221) = *(_DWORD *)(v70 + 56);
    *((_BYTE *)v3 + 1225) = *(_BYTE *)(v70 + 60);
    v354 = 0;
    memset(v355, 0, 24);
    memset(v367, 0, 24);
    *(_QWORD *)v350 = 0;
    v353 = 0;
    v352 = 0;
    Pos_LLH = Core_Get_Pos_LLH(*(_DWORD *)v341, 150000, 0, &v354, (uint64_t)v355, (uint64_t)v367, (uint64_t *)v350, (_BYTE *)v3 + 1634, &v353, (_DWORD *)&v352 + 1, (int *)&v352);
    *((_BYTE *)v3 + 1624) = Pos_LLH;
    if ((Pos_LLH & 1) != 0)
    {
      v3[407] = *(_DWORD *)(v343 + 436);
      *((_BYTE *)v3 + 1632) = BYTE4(v352);
      *((_BYTE *)v3 + 1633) = v352;
      v122 = *(_DWORD *)(v343 + 440);
      v123 = v122 == 1 && *(_BYTE *)(v343 + 644) != 0;
      *((_BYTE *)v3 + 1625) = v123;
      *((_BYTE *)v3 + 1626) = v122 == 1;
      *((_BYTE *)v3 + 1627) = *(_DWORD *)(v343 + 640) != 0;
      v124 = *(double *)&v355[2];
      *((double *)v3 + 205) = (*(double *)v355 - *(double *)(v343 + 224)) * 6378137.0;
      *((double *)v3 + 206) = *(double *)(v343 + 328) * ((v124 - *(double *)(v343 + 232)) * 6378137.0);
      *((int32x2_t *)v3 + 208) = vmovn_s64((int64x2_t)vcvtq_u64_f64(vsqrtq_f64(v367[0])));
      *((_BYTE *)v3 + 1672) = (int)(v367[1].f64[0] * 57.2957795);
      if (*((_BYTE *)v3 + 1634))
      {
        *((_QWORD *)v3 + 207) = *(_QWORD *)&v355[4];
        *((_WORD *)v3 + 837) = (int)sqrt(*(double *)v350);
      }
    }
    *((_BYTE *)v3 + 1676) = *(_BYTE *)(v343 + 684);
    *((_BYTE *)v3 + 1677) = *(_BYTE *)(v343 + 692);
    *((_BYTE *)v3 + 1678) = *(_DWORD *)(v343 + 688) != 0;
    *((_BYTE *)v3 + 1679) = 0;
    if (*(_BYTE *)(p_NA + 381))
    {
      v125 = *(_DWORD *)(p_NA + 26780);
      *((_BYTE *)v3 + 1676) = 1;
      *((_BYTE *)v3 + 1679) = v125;
    }
    *((_BYTE *)v3 + 1680) = *(_BYTE *)(v343 + 748);
    *((_BYTE *)v3 + 1681) = *(_BYTE *)(v343 + 756);
    *((_BYTE *)v3 + 1682) = *(_DWORD *)(v343 + 752) != 0;
    v3[421] = *(_DWORD *)(v343 + 760);
    *((_QWORD *)v3 + 212) = *(_QWORD *)(v70 + 328);
    memset(v355, 0, 24);
    if (Core_Get_ExtA_AT_Vel(120000, (uint64_t)v355))
    {
      *((_BYTE *)v3 + 1704) = *(_BYTE *)(v343 + 700);
      *((_BYTE *)v3 + 1705) = *(_BYTE *)(v343 + 708);
      *((_BYTE *)v3 + 1706) = *(_DWORD *)(v343 + 704) != 0;
      *((_OWORD *)v3 + 107) = *(_OWORD *)&v355[2];
    }
    memset(v367, 0, 24);
    if (Core_Get_ExtA_Heading(120000, (uint64_t)v367))
    {
      *((_BYTE *)v3 + 1728) = *(_BYTE *)(v343 + 732);
      *((_BYTE *)v3 + 1729) = *(_BYTE *)(v343 + 740);
      *((_BYTE *)v3 + 1730) = *(_DWORD *)(v343 + 736) != 0;
      *(float64x2_t *)(v3 + 434) = *(float64x2_t *)((char *)v367 + 8);
    }
    v351 = 0uLL;
    *(_QWORD *)v350 = 0;
    if (Core_Get_ExtA_V_Vel(120000, (uint64_t)v350))
    {
      *((_BYTE *)v3 + 1752) = *(_BYTE *)(v343 + 716);
      *((_BYTE *)v3 + 1753) = *(_BYTE *)(v343 + 724);
      *((_BYTE *)v3 + 1754) = *(_DWORD *)(v343 + 720) != 0;
      *((_OWORD *)v3 + 110) = v351;
    }
    v126 = 0;
    v127 = *(_DWORD *)(v343 + 36);
    v3[444] = v127;
    v3[445] = *(_DWORD *)(v343 + 32);
    *((_QWORD *)v3 + 223) = *(_QWORD *)(v343 + 40);
    *((_BYTE *)v3 + 1792) = 0;
    v128 = 1;
    do
    {
      v129 = v128;
      if (*(_BYTE *)(v325 + v126 + 3))
      {
        v130 = v325 + 8 * v126;
        if (*(double *)(v130 + 456) > 0.0)
        {
          *((_BYTE *)v3 + 1792) = 1;
          *((_WORD *)v3 + 897) = *(_WORD *)(v325 + 2 * v126 + 448);
          *((_QWORD *)v3 + 225) = *(_QWORD *)(v130 + 432);
          *((_QWORD *)v3 + 226) = *(_QWORD *)(v130 + 456);
          v3[454] = v127 - *(_DWORD *)(v325 + 4 * v126 + 488);
        }
      }
      v128 = 0;
      v126 = 1;
    }
    while ((v129 & 1) != 0);
    *((_BYTE *)v3 + 1820) = *(_BYTE *)(v325 + 6);
    v131 = *(double *)(v325 + 504) * 1000000000.0;
    if (v131 <= 0.0)
      v132 = -0.5;
    else
      v132 = 0.5;
    v133 = v131 + v132;
    v134 = (int)v133;
    if (v133 < -2147483650.0)
      v134 = 0x80000000;
    if (v133 > 2147483650.0)
      v134 = 0x7FFFFFFF;
    v3[456] = v134;
    v3[457] = (sqrt(*(double *)(v325 + 512)) * 1000000000.0);
    *((_BYTE *)v3 + 1832) = *(_BYTE *)(v341 + 24);
    *((_BYTE *)v3 + 1833) = *(_DWORD *)(v343 + 56);
    *((_QWORD *)v3 + 230) = *(_QWORD *)(v343 + 48);
    *((_WORD *)v3 + 924) = *(_WORD *)(v343 + 62);
    *((_BYTE *)v3 + 1850) = *(_DWORD *)(v343 + 204);
    *((_QWORD *)v3 + 232) = *(_QWORD *)(v343 + 216);
    HIDWORD(v135) = *(_DWORD *)(v343 + 210);
    LODWORD(v135) = HIDWORD(v135);
    v3[466] = v135 >> 16;
    *((_BYTE *)v3 + 1868) = 0;
    if (*(_BYTE *)(v343 + 60) && (*(_DWORD *)(v326 + 8972) - 4) <= 2)
    {
      v136 = *(unsigned __int8 *)(*(_QWORD *)(p_api + 56) + 8984);
      v137 = *(unsigned __int8 *)(*(_QWORD *)(p_api + 56) + 8985);
      v138 = *(unsigned __int8 *)(*(_QWORD *)(p_api + 56) + 8987);
      v139 = *(_BYTE *)(*(_QWORD *)(p_api + 56) + 8988);
      *((_BYTE *)v3 + 1868) = 1;
      v140 = v137 | 0x400;
      v141 = *(__int16 *)(v268 + 28) - 127;
      do
      {
        v142 = v140;
        v140 += 256;
      }
      while (v141 > v142);
      *((_WORD *)v3 + 936) = v142;
      *((_BYTE *)v3 + 1870) = (795365 * (unint64_t)(v136 << 12)) >> 36;
      *((_BYTE *)v3 + 1869) = *v271;
      v143 = v138 | 0x400;
      do
      {
        v144 = v143;
        v143 += 256;
      }
      while (v141 > v144);
      *((_WORD *)v3 + 938) = v144;
      *((_BYTE *)v3 + 1875) = v139;
      *((_BYTE *)v3 + 1874) = v271[3];
    }
    v3[470] = 0;
    if (*(_BYTE *)(v94 + 60))
      v3[470] = (int)((double)*(int *)v94 * 9.31322575e-10 * 1.0e12);
    v3[471] = 0;
    *(_QWORD *)v355 = 0;
    if (!R8_EQ(v278, (const double *)v355))
    {
      v367[0].f64[0] = 0.0;
      if (!R8_EQ(v274, v367[0].f64))
      {
        v145 = *v274 - *v278;
        v146 = 0.000999999999;
        if (v145 <= 0.000999999999)
        {
          v146 = *v274 - *v278;
          if (v145 < -0.000999999999)
            v146 = -0.000999999999;
        }
        v3[471] = (int)(v146 * 1.0e12);
      }
    }
    v3[472] = 0;
    if ((*(_DWORD *)v344 - 2) <= 4)
      v3[472] = (int)(*(double *)(v344 + 12) * -1000000000.0 * 1000.0);
    v3[473] = 0;
    *(_QWORD *)v355 = 0;
    if (!R8_EQ(v278, (const double *)v355))
    {
      v367[0].f64[0] = 0.0;
      if (!R8_EQ(v273, v367[0].f64))
      {
        v147 = *v273 - *v278;
        v148 = 0.000999999999;
        if (v147 <= 0.000999999999)
        {
          v148 = *v273 - *v278;
          if (v147 < -0.000999999999)
            v148 = -0.000999999999;
        }
        v3[473] = (int)(v148 * 1.0e12);
      }
    }
    v3[474] = 0;
    if ((*(_DWORD *)(v94 + 8232) - 2) <= 4)
    {
      v149 = *(double *)(v326 + 25368);
      if (v342[17] && v342[16])
      {
        if ((unsigned __int16)*v267 - *v270 >= 0)
          v150 = -(((unsigned __int16)*v267 - *v270) & 0x3F);
        else
          v150 = (*v270 - *v267) & 0x3F;
        if (v150 > 31)
          v150 -= 64;
        v149 = v149 + *(double *)(v326 + 25376) * (double)((int)*v269 - *(_DWORD *)(v94 + 8252) + 604800 * v150);
      }
      v3[474] = (int)(v149 * -1.0e12);
    }
    v3[475] = 0;
    if ((*(_DWORD *)(v344 + 3080) - 2) <= 4)
    {
      v151 = *(double *)v272;
      if (v342[17] && v342[16])
      {
        if (*(__int16 *)(v272 + 28) - *v270 >= 0)
          v152 = -((*(__int16 *)(v272 + 28) - *v270) & 0x3FF);
        else
          v152 = (*v270 - *(_WORD *)(v272 + 28)) & 0x3FF;
        if (v152 > 511)
          v152 -= 1024;
        if (v152 < -512)
          v152 += 1024;
        v153 = *v269 - (double)*(int *)(v272 + 24) + (double)(604800 * v152);
        v151 = v151 + *(double *)(v272 + 8) * v153 + *(double *)(v272 + 16) * (v153 * v153);
      }
      v3[475] = (int)(v151 * -1.0e12);
    }
    *((_WORD *)v3 + 952) = *(_WORD *)(v321 + 2012);
    *(_OWORD *)(v3 + 478) = *(_OWORD *)(v321 + 80);
    *(_OWORD *)(v3 + 482) = *(_OWORD *)(v321 + 96);
    *(_OWORD *)(v3 + 486) = *(_OWORD *)(v321 + 112);
    *(_OWORD *)(v3 + 490) = *(_OWORD *)(v321 + 128);
    *(_OWORD *)(v3 + 494) = *(_OWORD *)(v321 + 144);
    *(_OWORD *)(v3 + 498) = *(_OWORD *)(v321 + 160);
    *(_OWORD *)(v3 + 502) = *(_OWORD *)(v321 + 176);
    *(_OWORD *)(v3 + 506) = *(_OWORD *)(v321 + 224);
    *((_WORD *)v3 + 1020) = *(_WORD *)(v321 + 240);
    *((_OWORD *)v3 + 128) = *(_OWORD *)(v321 + 192);
    *((_OWORD *)v3 + 129) = *(_OWORD *)(v321 + 208);
    v154 = *(_QWORD *)(p_api + 208);
    *((_WORD *)v3 + 1040) = *(_WORD *)(v154 + 8);
    *((_BYTE *)v3 + 2082) = *(_BYTE *)(v154 + 10);
    *((_BYTE *)v3 + 2083) = *(_BYTE *)(v154 + 11);
    *((_BYTE *)v3 + 2084) = *(_BYTE *)(v154 + 12);
    *((_BYTE *)v3 + 2085) = *(_BYTE *)(v154 + 13);
    *((_WORD *)v3 + 1043) = *(_WORD *)(v154 + 14);
    *((_BYTE *)v3 + 2088) = *(_DWORD *)(v154 + 16);
    *(_DWORD *)((char *)v3 + 2089) = *(_DWORD *)(v154 + 20);
    *(_DWORD *)((char *)v3 + 2094) = 807337986;
    strcpy((char *)v3 + 2098, "240615");
    *(int32x2_t *)(v3 + 527) = vrev64_s32(vsub_s32(*(int32x2_t *)(v343 + 32), *v277));
    *((_BYTE *)v3 + 2116) = *(_BYTE *)(v321 + 66);
    *((_BYTE *)v3 + 2117) = *(_BYTE *)(v321 + 45);
    v155 = *(_BYTE *)(v321 + 22);
    *((_BYTE *)v3 + 2118) = v155;
    if (*(_BYTE *)(v321 + 25))
    {
      v155 |= 2u;
      *((_BYTE *)v3 + 2118) = v155;
    }
    if (*(_BYTE *)(v321 + 24))
    {
      v155 += 4;
      *((_BYTE *)v3 + 2118) = v155;
    }
    if (*(_BYTE *)(v321 + 23))
    {
      v155 += 8;
      *((_BYTE *)v3 + 2118) = v155;
    }
    if (*(_BYTE *)(v321 + 27))
    {
      v155 += 16;
      *((_BYTE *)v3 + 2118) = v155;
    }
    if (*(_BYTE *)(v321 + 26))
      *((_BYTE *)v3 + 2118) = v155 + 32;
    v156 = *(_BYTE *)(v321 + 36);
    *((_BYTE *)v3 + 2119) = v156;
    if (*(_BYTE *)(v321 + 39))
    {
      v156 |= 2u;
      *((_BYTE *)v3 + 2119) = v156;
    }
    if (*(_BYTE *)(v321 + 38))
    {
      v156 += 4;
      *((_BYTE *)v3 + 2119) = v156;
    }
    if (*(_BYTE *)(v321 + 37))
    {
      v156 += 8;
      *((_BYTE *)v3 + 2119) = v156;
    }
    if (*(_BYTE *)(v321 + 41))
    {
      v156 += 16;
      *((_BYTE *)v3 + 2119) = v156;
    }
    if (*(_BYTE *)(v321 + 40))
      *((_BYTE *)v3 + 2119) = v156 + 32;
    *((_BYTE *)v3 + 2120) = *(_DWORD *)(v321 + 52);
    v157 = *v276;
    v158 = v276[1];
    *(_OWORD *)(v3 + 538) = *(__int128 *)((char *)v276 + 28);
    *(_OWORD *)(v3 + 531) = v157;
    *(_OWORD *)(v3 + 535) = v158;
    memset(v380, 0, sizeof(v380));
    v381 = 0;
    v379 = 0;
    memset(v378, 0, sizeof(v378));
    bzero(v377, 0xDA0uLL);
    bzero(v376, 0xDA0uLL);
    v159 = 0;
    v375 = 0;
    memset(v374, 0, sizeof(v374));
    memset(v371, 0, 14);
    memset(v369, 0, sizeof(v369));
    memset(v370, 0, sizeof(v370));
    memset(v368, 0, 14);
    *(_QWORD *)&v160 = 0x8181818181818181;
    *((_QWORD *)&v160 + 1) = 0x8181818181818181;
    *(_OWORD *)((char *)v373 + 10) = v160;
    v372[11] = v160;
    v373[0] = v160;
    v372[9] = v160;
    v372[10] = v160;
    v372[7] = v160;
    v372[8] = v160;
    v372[5] = v160;
    v372[6] = v160;
    v372[3] = v160;
    v372[4] = v160;
    v372[1] = v160;
    v372[2] = v160;
    v161 = (char *)v380 + 1;
    v372[0] = v160;
    do
    {
      Constell_Prn = Get_Constell_Prn(v159);
      *(_WORD *)(v161 - 1) = 3855;
      if (*(_BYTE *)(v321 + 43))
        v163 = 0;
      else
        v163 = *(_BYTE *)(v348 + v159) == 0;
      if (*(_BYTE *)(v321 + 44))
        v164 = *(_BYTE *)(v348 + v159 + 280) == 0;
      else
        v164 = 0;
      switch(Constell_Prn)
      {
        case 0:
          EvCrt_Illegal_switch_case("API_Get_Nav_Data", 0x10FDu);
          break;
        case 1:
          if (*(_BYTE *)(v321 + 22))
            goto LABEL_352;
          break;
        case 2:
          v165 = !v163;
          if (!*(_BYTE *)(v321 + 23))
            v165 = 1;
          if ((v165 & 1) == 0)
            *(v161 - 1) = 4;
          break;
        case 3:
          if (*(_BYTE *)(v321 + 27))
          {
            if (v163)
              *(v161 - 1) = 8;
            if (v164)
            {
              v166 = 9;
              goto LABEL_360;
            }
          }
          break;
        case 4:
          if (*(_BYTE *)(v321 + 26) && Num_Prn_Idx_To_GNSS_Id(v159) - 6 <= 0x34)
          {
            if (v163)
              *(v161 - 1) = 11;
            if (v164)
            {
              v166 = 13;
              goto LABEL_360;
            }
          }
          break;
        case 5:
          if (*(_BYTE *)(v321 + 24))
          {
LABEL_352:
            if (v163)
              *(v161 - 1) = 0;
            if (v164)
              goto LABEL_359;
          }
          break;
        case 6:
          v167 = !v164;
          if (!*(_BYTE *)(v321 + 28))
            v167 = 1;
          if ((v167 & 1) == 0)
          {
LABEL_359:
            v166 = 3;
LABEL_360:
            *v161 = v166;
          }
          break;
        case 7:
          v168 = !v163;
          if (!*(_BYTE *)(v321 + 25))
            v168 = 1;
          if ((v168 & 1) == 0)
            *(v161 - 1) = 0;
          break;
        default:
          break;
      }
      ++v159;
      v161 += 2;
    }
    while (v159 != 218);
    v169 = 0;
    memset(v371, 4, 14);
    v6 = v343;
    do
    {
      v170 = *(_DWORD *)(v343 + 4 * v169 + 1000);
      v171 = HIWORD(v170);
      if ((v170 & 0xFF00FF) == 2)
      {
        v172 = 0;
        while (*(_DWORD *)(v15 + 4 * v172) != *(char *)(v346 + 4 * v169 + 88))
        {
          if (++v172 == 24)
            goto LABEL_373;
        }
        LOBYTE(v171) = v172 + 1;
      }
LABEL_373:
      v173 = v170 & 0xFF00FFFF | (v171 << 16);
      if (Is_Legal(v173))
      {
        v176 = GNSS_Id_To_Num_Prn_Idx(v173);
        if ((v176 & 0x80000000) == 0 && *(int *)(v343 + 4 * v169 + 1640) >= 10)
        {
          v178 = 0;
          v179 = v69 + 4 * v169;
          v180 = *(unsigned __int8 *)(v179 + 89);
          if (v180 <= 0xF)
          {
            if (((1 << v180) & 0x6688) != 0)
            {
              v178 = 1;
            }
            else if (((1 << v180) & 0x8044) != 0)
            {
              goto LABEL_387;
            }
          }
          *(_BYTE *)((unint64_t)&v380[v176] | v178) = v180;
          LOBYTE(v177) = *(_BYTE *)(v69 + v169 + 1752);
          LOBYTE(v175) = *(_BYTE *)(v69 + v169 + 1880);
          *(double *)&v181 = (double)*(unint64_t *)&v175;
          v182 = (double)v177 + *(double *)&v181 * 0.0625;
          *((double *)&v377[v176] + v178) = v182;
          LOBYTE(v182) = *(_BYTE *)(v69 + v169 + 2008);
          LOBYTE(v181) = *(_BYTE *)(v69 + v169 + 2136);
          v175 = (double)v181;
          *((double *)&v376[v176] + v178) = (double)*(unint64_t *)&v182 + v175 * 0.0625;
          *(_BYTE *)((unint64_t)&v374[v176] | v178) = *(_BYTE *)(v69 + v169 + 856);
          if (*(_BYTE *)(v343 + v169 + 2536))
            *(_BYTE *)((unint64_t)&v378[v176] | v178) = 1;
          if (v170 == 2)
            *((_BYTE *)v372 + v176) = *(_BYTE *)(v179 + 91);
        }
      }
      else if (*(int *)(v343 + 4 * v169 + 1640) >= 10)
      {
        v183 = v69 + 4 * v169;
        if ((*(_BYTE *)(v183 + 91) + 7) <= 0xDu)
        {
          v184 = (*(_BYTE *)(v183 + 91) + 7);
          v371[v184] = *(_BYTE *)(v183 + 89);
          LOBYTE(v174) = *(_BYTE *)(v69 + v169 + 1752);
          LOBYTE(v175) = *(_BYTE *)(v69 + v169 + 1880);
          *(double *)&v185 = (double)*(unint64_t *)&v175;
          *(double *)&v186 = (double)v174 + *(double *)&v185 * 0.0625;
          v370[v184] = *(double *)&v186;
          LOBYTE(v186) = *(_BYTE *)(v69 + v169 + 2008);
          LOBYTE(v185) = *(_BYTE *)(v69 + v169 + 2136);
          v175 = (double)v185;
          v369[v184] = (double)v186 + v175 * 0.0625;
          v368[v184] = *(_BYTE *)(v69 + v169 + 856);
        }
      }
LABEL_387:
      ++v169;
    }
    while (v169 != 128);
    v16 = *(_DWORD *)(v343 + 32);
    if (v16 != v338)
    {
      v13 = v337 + 1;
      v14 = v275;
      if (v337 == 5)
      {
LABEL_537:
        bzero(v342, 0x18D0uLL);
        bzero(v3, 0x878uLL);
        return 0;
      }
      continue;
    }
    break;
  }
  if (v337 > 3)
    goto LABEL_537;
  LOWORD(v175) = *(_WORD *)(v321 + 2012);
  Inc_GPS_TOW(-(*((double *)v342 + 7) - (double)*(unint64_t *)&v175 * 0.000000001), v269, v270);
  API_Get_UTC_Cor(0, (double *)v342 + 9);
  v187 = v342 + 28;
  GPS_To_UTC_Time((_WORD *)v342 + 9, (unsigned __int16 *)v342 + 10, (unsigned __int16 *)v342 + 11, (unsigned __int16 *)v342 + 12, (unsigned __int16 *)v342 + 13, (unsigned __int16 *)v342 + 14, (unsigned __int16 *)v342 + 15, *((_WORD *)v342 + 16), *((double *)v342 + 5), *((double *)v342 + 9));
  if (v342[17])
  {
    if (*((_WORD *)v342 + 12) == 23 && *((_WORD *)v342 + 13) == 59)
    {
      v188 = (unsigned __int16)*v187;
      if (v188 >= 0x3A)
      {
        v355[0] = 0;
        v350[0] = 0;
        LODWORD(v367[0].f64[0]) = 0;
        API_Get_Next_Leap_Second((unsigned int *)v355, v350, (int *)v367);
        if (!LODWORD(v367[0].f64[0]) && v350[0] == 1)
          *v187 = v188 + 1;
      }
    }
  }
  v347 = 0;
  v189 = 0;
  v190 = *(_OWORD **)(p_api + 32);
  v364 = v190[10];
  v365 = v190[11];
  v366[0] = v190[12];
  *(_OWORD *)((char *)v366 + 10) = *(_OWORD *)((char *)v190 + 202);
  v360 = v190[6];
  v361 = v190[7];
  v362 = v190[8];
  v363 = v190[9];
  v356 = v190[2];
  v357 = v190[3];
  v191 = v69 + 88;
  v358 = v190[4];
  v192 = v325;
  v279 = v190;
  v359 = v190[5];
  *(_OWORD *)v355 = *v190;
  *(_OWORD *)&v355[4] = v190[1];
  while (2)
  {
    v193 = 0;
    v194 = -100;
    LODWORD(v195) = -1;
    do
    {
      if (*((char *)v355 + v193) <= v194)
      {
        v195 = v195;
      }
      else
      {
        v194 = *((_BYTE *)v355 + v193);
        v195 = v193;
      }
      ++v193;
    }
    while (v193 != 218);
    if ((v195 & 0x80000000) == 0)
    {
      *((_BYTE *)v355 + v195) = -120;
      if (*((char *)v190 + v195) < 0
        && *(double *)&v377[v195] <= 0.0
        && *((double *)&v377[v195] + 1) <= 0.0
        || (LODWORD(v367[0].f64[0]) = 0, v196 = LongPrnIdx_To_Prn(v195, (int *)v367), LODWORD(v367[0].f64[0]) == 7))
      {
LABEL_535:
        if (v189 >= 0x80)
          goto LABEL_547;
        continue;
      }
      v197 = 0;
      v198 = (char *)v190 + 40 * v195;
      v332 = v198 + 9376;
      v329 = v198 + 9408;
      v345 = v198 + 688;
      v199 = v196 - 1;
      v286 = (int *)(v326 + 76 * (int)v199 + 47700);
      v200 = v326 + 116 * v196;
      v284 = (int *)(v200 - 13232);
      v283 = (int *)(v326 + 152 * (int)v199 + 25516);
      v282 = (int *)(v326 + 88 * (int)v199 + 17712);
      v280 = (int *)(v200 + 8);
      v281 = (int *)(v326 + (v199 << 6) + 11932);
      v324 = v192 + 76 * (int)v199 + 22484;
      v285 = v196 - 193;
      v322 = (_BYTE *)(v192 + v285 + 76);
      v201 = v192 + 80 * v196;
      v320 = (int *)(v201 - 11024);
      v318 = v192 + 152 * (int)v199 + 10116;
      v317 = v192 + 88 * (int)v199 + 5592;
      v313 = (int *)(v201 + 624);
      v315 = v192 + (v199 << 6) + 24276;
      v291 = v326 + 52 * (int)v199 + 49828;
      v290 = v326 + 44 * v196 + 2984;
      v202 = 44 * v196 - 44;
      v336 = v196;
      v4[v189 + 1740] = v196;
      v289 = v326 + v202 + 44668;
      v203 = 36 * v196 - 36;
      v288 = v326 + v203 + 24048;
      v287 = v326 + v203 + 16252;
      v331 = v326 + v202 + 7548;
      v327 = v199;
      v311 = v192 + 52 * (int)v199 + 23548;
      v307 = v192 + 36 * v196 - 1732;
      v309 = (_BYTE *)(v192 + v285 + 86);
      v306 = (int *)(v325 + 19692 + v202);
      v204 = (int *)(v192 + v203);
      v304 = (_BYTE *)(v192 + v199 + 221);
      v305 = (_BYTE *)(v192 + v199 + 348);
      v302 = (_BYTE *)(v192 + v199 + 96);
      v303 = (_BYTE *)(v192 + v199 + 147);
      v300 = (_BYTE *)(v192 + v199 + 362);
      v301 = (_BYTE *)(v192 + v199 + 12);
      v297 = (_BYTE *)(v192 + v199 + 183);
      v299 = (_BYTE *)(v192 + v199 + 284);
      v295 = (_BYTE *)(v192 + v199 + 44);
      v296 = (_BYTE *)(v192 + v199 + 120);
      v294 = v204 + 2190;
      v292 = v204 + 816;
      v293 = v204 + 6453;
      v340 = (_BYTE *)(v326 + v195 + 59990);
      v205 = (unsigned __int8 *)(v326 + v195 + 50616);
      v334 = (unint64_t)&v378[v195];
      v206 = 1;
      while (2)
      {
        v207 = v206;
        v208 = *((char *)&v380[v195] + v197);
        if (v208 == 15)
        {
LABEL_507:
          v206 = 0;
          v197 = 1;
          if ((v207 & 1) == 0)
            goto LABEL_534;
          continue;
        }
        break;
      }
      switch(LODWORD(v367[0].f64[0]))
      {
        case 1:
          v209 = v336;
          if (v208 >= 4)
            v210 = 0;
          else
            v210 = dword_24BC09AF0[v208];
          v211 = 1;
          goto LABEL_430;
        case 2:
          v212 = (v208 - 4);
          v213 = v212 >= 4;
          v210 = v212 + 33;
          v211 = 2;
          goto LABEL_418;
        case 3:
          v214 = (v208 - 8);
          v213 = v214 >= 3;
          v210 = v214 + 81;
          v211 = 5;
LABEL_418:
          if (v213)
            v210 = 0;
          goto LABEL_429;
        case 4:
          v215 = v208 - 11;
          v209 = v336;
          if (v215 >= 4u)
            v210 = 0;
          else
            v210 = dword_24BC09B00[(char)v215];
          v211 = 4;
          goto LABEL_430;
        case 5:
          v209 = v336;
          if (v208 >= 4)
            v210 = 0;
          else
            v210 = dword_24BC09B10[v208];
          v211 = 3;
          goto LABEL_430;
        case 6:
          if ((_DWORD)v208 == 3)
            v210 = 98;
          else
            v210 = 0;
          v211 = 6;
          goto LABEL_429;
        default:
          v211 = 0;
          v210 = 0;
LABEL_429:
          v209 = v336;
LABEL_430:
          v216 = 0;
          v217 = &v4[v189];
          v217[1740] = v209;
          v218 = &v4[4 * v189];
          *((_DWORD *)v218 + 83) = v211;
          v219 = *((_BYTE *)v372 + v195);
          *((_DWORD *)v218 + 211) = v210;
          v217[1868] = v219;
          v220 = &v4[8 * v189];
          *((_QWORD *)v220 + 250) = *((_QWORD *)&v377[v195] + v197);
          *((_QWORD *)v220 + 378) = *((_QWORD *)&v376[v195] + v197);
          v217[6224] = *((_BYTE *)&v374[v195] + v197);
          v221 = 1952;
          v349 = v189;
          v222 = v189;
          break;
      }
      while (1)
      {
        v223 = *(_DWORD *)(v191 + v216);
        if (Is_Legal(v223))
        {
          if (GNSS_Id_To_Num_Prn_Idx(v223) == (_DWORD)v195)
            break;
        }
        v221 += 40;
        v216 += 4;
        if (v216 == 512)
          goto LABEL_442;
      }
      v224 = *(_QWORD *)(p_api + 128);
      v225 = *(_DWORD *)(v224 + v216 + 12160);
      if (v225)
        v226 = *(_DWORD *)(v343 + 32) - v225;
      else
        v226 = 0x7FFFFFFF;
      if (v226 < 0)
        v226 = -v226;
      if (v226 >> 5 <= 0x752)
      {
        v227 = (_QWORD *)(v224 + v221);
        v4 = v342;
        *(_QWORD *)&v342[8 * v222 + 4048] = v227[640];
        goto LABEL_444;
      }
LABEL_442:
      v227 = v345;
      v4 = v342;
      if ((*v332 & 0x80000000) == 0)
      {
        *(_QWORD *)&v342[8 * v222 + 4048] = *v329;
        v227 = v345;
      }
LABEL_444:
      *(_QWORD *)&v4[8 * v222 + 5072] = *v227;
      v4[v222 + 6096] = *((_BYTE *)&v378[v195] + v197);
      if (*(_BYTE *)(v326 + v195 + 59772))
        v228 = 1;
      else
        v228 = *v340 != 0;
      v229 = &v4[3 * v222];
      v230 = (unsigned __int16 *)(v229 + 1356);
      v231 = *((_WORD *)v229 + 678) & 0xFFFE | (v229[1358] << 16) | v228;
      *((_WORD *)v229 + 678) = *((_WORD *)v229 + 678) & 0xFFFE | v228;
      v232 = v231 & 0xFFFFFFFD | (2 * (*v340 & 0x7F));
      *((_WORD *)v229 + 678) = v232;
      v233 = LODWORD(v367[0].f64[0]);
      if (v228)
      {
        switch(LODWORD(v367[0].f64[0]))
        {
          case 0:
            EvCrt_Illegal_switch_case("API_Get_Nav_Data", 0x1282u);
            v233 = LODWORD(v367[0].f64[0]);
            break;
          case 1:
            v250 = *v280;
            v251 = *(_QWORD *)(v326 + 96);
            goto LABEL_521;
          case 2:
            v250 = *v281;
            v251 = *(_QWORD *)(v326 + 17208);
            goto LABEL_521;
          case 3:
            v250 = *v282;
            v251 = *(_QWORD *)(v326 + 17648);
            goto LABEL_521;
          case 4:
            v250 = *v283;
            v251 = *(_QWORD *)(v326 + 25488);
            goto LABEL_521;
          case 5:
            v252 = v285;
            v250 = *v284;
            v251 = *(_QWORD *)(v326 + 9128);
            goto LABEL_522;
          case 6:
            v250 = *v286;
            v251 = *(_QWORD *)(v344 + 172);
LABEL_521:
            v252 = v327;
LABEL_522:
            v253 = *(unsigned __int8 *)(v251 + v252);
            if (v253)
            {
              v253 = HIWORD(v232);
              v232 |= 0x20u;
              *((_BYTE *)v230 + 2) = v253;
              *v230 = v232;
              LOBYTE(v253) = 1;
            }
            switch(v250)
            {
              case 3:
                v254 = HIWORD(v232);
                *((_BYTE *)v230 + 2) = BYTE2(v232);
                *v230 = v232 | 0x10;
                if ((v253 & 1) == 0)
                {
                  v255 = 272;
                  goto LABEL_531;
                }
                break;
              case 4:
                v254 = HIWORD(v232);
                *((_BYTE *)v230 + 2) = BYTE2(v232);
                *v230 = v232 | 4;
                if ((v253 & 1) == 0)
                {
                  v255 = 68;
                  goto LABEL_531;
                }
                break;
              case 5:
                v254 = HIWORD(v232);
                *((_BYTE *)v230 + 2) = BYTE2(v232);
                *v230 = v232 | 8;
                if ((v253 & 1) == 0)
                {
                  v255 = 136;
LABEL_531:
                  *((_BYTE *)v230 + 2) = v254;
                  *v230 = v232 | v255;
                }
                break;
              case 6:
                *((_BYTE *)v230 + 2) = BYTE2(v232);
                *v230 = v232 | 2;
                break;
              default:
                goto LABEL_450;
            }
            break;
          default:
            break;
        }
      }
LABEL_450:
      switch(v233)
      {
        case 0:
          EvCrt_Illegal_switch_case("API_Get_Nav_Data", 0x12AFu);
          v233 = LODWORD(v367[0].f64[0]);
          goto LABEL_468;
        case 1:
          v234 = v313;
          if (*v301)
            goto LABEL_463;
          v233 = 1;
          goto LABEL_468;
        case 2:
          v234 = (int *)v315;
          if (*v302)
            goto LABEL_463;
          v233 = 2;
          goto LABEL_468;
        case 3:
          v234 = (int *)v317;
          if (*v303)
            goto LABEL_463;
          v233 = 3;
          goto LABEL_468;
        case 4:
          v234 = (int *)v318;
          if (*v304)
            goto LABEL_463;
          v233 = 4;
          goto LABEL_468;
        case 5:
          v234 = v320;
          if (*v322)
            goto LABEL_463;
          v233 = 5;
          goto LABEL_468;
        case 6:
          v234 = (int *)v324;
          if (*v305)
          {
LABEL_463:
            v235 = *v234;
            if (v235 == 5)
            {
              v236 = *v230 | 8;
            }
            else
            {
              if (v235 != 3)
                goto LABEL_468;
              v236 = *v230 | 0x10;
            }
            *v230 = v236;
          }
          else
          {
            v233 = 6;
          }
LABEL_468:
          if (*(_BYTE *)(v326 + v195 + 60208))
          {
            v237 = *((unsigned __int8 *)v230 + 2);
            v238 = *v230;
            *v230 = v238 | 0x200;
            v239 = (int *)v331;
            switch(v233)
            {
              case 0:
                EvCrt_Illegal_switch_case("API_Get_Nav_Data", 0x12E0u);
                v233 = LODWORD(v367[0].f64[0]);
                break;
              case 1:
                goto LABEL_476;
              case 2:
                v239 = (int *)v287;
                goto LABEL_476;
              case 3:
                v239 = (int *)v288;
                goto LABEL_476;
              case 4:
                v239 = (int *)v289;
                goto LABEL_476;
              case 5:
                v239 = (int *)v290;
                goto LABEL_476;
              case 6:
                v239 = (int *)v291;
LABEL_476:
                v240 = v238 | (v237 << 16);
                v241 = *v239;
                if (*v239 == 5)
                {
                  v242 = 18944;
                }
                else if (v241 == 4)
                {
                  v242 = 9728;
                }
                else
                {
                  if (v241 != 3)
                    break;
                  v242 = -28160;
                }
                *((_BYTE *)v230 + 2) = BYTE2(v240);
                *v230 = v240 | v242;
                break;
              default:
                break;
            }
          }
          switch(v233)
          {
            case 0:
              EvCrt_Illegal_switch_case("API_Get_Nav_Data", 0x1301u);
              goto LABEL_501;
            case 1:
              v243 = v292;
              if (*v295)
                goto LABEL_496;
              goto LABEL_501;
            case 2:
              v243 = v293;
              if (*v296)
                goto LABEL_496;
              goto LABEL_501;
            case 3:
              v243 = v294;
              if (*v297)
                goto LABEL_496;
              goto LABEL_501;
            case 4:
              v243 = v306;
              if (*v299)
                goto LABEL_496;
              goto LABEL_501;
            case 5:
              v243 = (int *)v307;
              if (*v309)
                goto LABEL_496;
              goto LABEL_501;
            case 6:
              v243 = (int *)v311;
              if (!*v300)
                goto LABEL_501;
LABEL_496:
              v244 = *v243;
              if (v244 == 5)
              {
                v245 = *v230 | 0x800;
              }
              else
              {
                if (v244 != 3)
                  goto LABEL_501;
                v245 = *v230 | 0x1000;
              }
              *v230 = v245;
LABEL_501:
              v246 = (*v230 | (*((unsigned __int8 *)v230 + 2) << 16)) & 0xFFFEFFFF | (*v205 << 16);
              *((_BYTE *)v230 + 2) = BYTE2(v246);
              v247 = v246 & 0xFFFDFFFF | (*v205 << 17);
              *((_BYTE *)v230 + 2) = BYTE2(v247);
              v248 = v247 & 0xFFFBFFFF | (*v205 << 18);
              *((_BYTE *)v230 + 2) = BYTE2(v248);
              v249 = v248 & 0xFFF7FFFF | (*v205 << 19);
              *((_BYTE *)v230 + 2) = BYTE2(v249);
              *((_BYTE *)v230 + 2) = (v249 & 0xFFEFFFFF | (*v205 << 20)) >> 16;
              v189 = v349 + 1;
              if ((v207 & 1) != 0)
              {
                if (!*(_BYTE *)v334)
                  goto LABEL_507;
              }
              else if (!*(_BYTE *)(v334 | 1) || *(_BYTE *)v334)
              {
LABEL_534:
                v192 = v325;
                v190 = v279;
                goto LABEL_535;
              }
              ++v347;
              goto LABEL_507;
            default:
              goto LABEL_501;
          }
        default:
          goto LABEL_468;
      }
    }
    break;
  }
  v257 = 0;
  do
  {
    v258 = v370[v257];
    if (v258 > 0.0)
    {
      v259 = &v4[v189];
      v260 = v371[v257];
      v259[1868] = v257 - 7;
      v261 = v260 - 4;
      v262 = (v260 - 4) + 33;
      if ((v261 & 0xFC) != 0)
        v263 = 0;
      else
        v263 = v262;
      v264 = &v4[4 * v189];
      *((_DWORD *)v264 + 211) = v263;
      v265 = (double *)&v4[8 * v189];
      v265[250] = v258;
      v266 = v369[v257];
      *((_DWORD *)v264 + 83) = 2;
      v265[378] = v266;
      v259[6224] = v368[v257];
      v265[506] = 0.0;
      v265[634] = -99.0;
      v259[6096] = 0;
      ++v189;
    }
    if (v257 > 0xC)
      break;
    ++v257;
  }
  while (v189 < 0x80);
LABEL_547:
  v4[327] = v189;
  v4[328] = v347;
  *(_DWORD *)v4 = v338;
  result = 1;
  *v3 = v338;
  return result;
}

uint64_t API_Get_Raw_Meas_Data(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double *v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  int v38;
  _BYTE *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  int v52;
  int8x16_t *v53;
  int v54;
  __int16 v55;
  unsigned int v56;
  int8x16_t *v57;
  double v58;
  int8x16_t *v59;
  _WORD *v60;
  int v61;
  char v62;
  char v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  double PR_Raw_Meas_Unc;
  double *i64;
  unint64_t v70;
  double v71;
  unsigned int v72;
  int v73;
  double v74;
  int *v75;
  double DO_Raw_Meas_Unc;
  double *v77;
  __int16 v78;
  int v79;
  uint64_t *v80;
  uint64_t *v81;
  unsigned int v82;
  float64x2_t v83;
  int v84;
  BOOL v85;
  unsigned int v86;
  double v87;
  uint64_t *v88;
  int8x16_t *v89;
  uint64_t *v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  __int8 *v94;
  unsigned __int8 *v95;
  uint64_t v96;
  int v97;
  int v98;
  double v99;
  double v100;
  double v101;
  int v102;
  double v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  double v108;
  int8x16_t *v109;
  uint64_t v110;
  unsigned int Constell_Prn;
  unsigned __int8 v112;
  int v113;
  uint64_t v114;
  unsigned int v115;
  int8x16_t v116;
  unsigned int v117;
  unsigned int v118;
  int *v119;
  int v120;
  __int16 v121;
  unsigned __int8 v122;
  uint64_t v123;
  uint64_t v124;
  int32x4_t *v125;
  int32x4_t v126;
  int32x4_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int32x4_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int v133;
  int v134;
  double v135;
  uint64_t *v136;
  __int16 v137;
  __int16 *v138;
  unsigned int v139;
  unsigned __int8 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  int v148;
  double v149;
  double v150;
  double v151;
  double v152;
  uint64_t v153;
  uint64_t v154;
  double *v155;
  uint64_t v156;
  int v157;
  uint64_t *v158;
  char v159;
  double v160;
  BOOL v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  uint64_t v170;
  double *v171;
  uint64_t v172;
  uint64_t v173;
  _DWORD *v174;
  int *v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  int v184;
  int v185;
  unsigned int v186;
  uint64_t v187;
  int v188;
  __int16 *v189;
  int v190;
  __int16 v191;
  int v192;
  unsigned int v193;
  uint64_t v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  uint64_t v202;
  int *v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  int v211;
  int v212;
  int v213;
  __int16 v214;
  uint64_t v215;
  int64x2_t v216;
  int8x16_t v217;
  uint64_t v218;
  int64x2_t v219;
  int v220;
  int v221;
  unsigned int v222;
  double v223;
  float64x2_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  int v229;
  uint64_t v230;
  unsigned int v231;
  char *v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  double v242;
  uint64_t v243;
  int v244;
  float64_t v245;
  _WORD *v246;
  _WORD *v247;
  _WORD *v248;
  float64x2_t *v249;
  double v250;
  uint64_t *v251;
  unsigned int v252;
  _WORD *v253;
  uint64_t v254;
  double v255;
  int v256;
  int v257;
  int *v258;
  double *v259;
  double *v260;
  double *v261;
  uint64_t v262;
  unsigned __int8 *v263;
  uint64_t v264;
  _QWORD *v265;
  double v266;
  double *v267;
  double *v268;
  double *v269;
  double *v270;
  double *v271;
  double *v272;
  float64x2_t v273;
  float64x2_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  double *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _WORD *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  double *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unsigned int v293;
  uint64_t v294;
  unsigned int v295;
  double *v296;
  uint64_t v297;
  int v298;
  double *v299;
  uint64_t v300;
  _BYTE *v301;
  uint64_t v302;
  _BYTE *v303;
  unsigned __int8 v304;
  uint64_t v305;
  int8x16_t *v306;
  _OWORD v307[2];
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int16 v314;
  _DWORD v315[3];
  int v316[4];
  unint64_t v317;
  int v318[2];
  double v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  uint64_t v325;
  uint64_t v326;

  v326 = *MEMORY[0x24BDAC8D0];
  v261 = (double *)(a1 + 20010);
  v284 = a1 + 10537;
  v265 = a1 + 7180;
  bzero(a1, 0x271A0uLL);
  v275 = *(_QWORD *)(p_api + 32);
  v2 = *(_QWORD *)(p_api + 16);
  v3 = *(_QWORD *)(p_api + 72);
  v290 = *(_QWORD *)(p_api + 80);
  v4 = *(_QWORD *)(p_api + 56);
  v254 = v4 + 50584;
  v262 = v4 + 47500;
  v253 = (_WORD *)(v4 + 25388);
  v264 = v4 + 17128;
  v305 = v4;
  v263 = (unsigned __int8 *)(v4 + 8984);
  v5 = *(_QWORD *)(p_api + 96);
  v291 = *(_QWORD *)(p_api + 88);
  v6 = *(_QWORD *)(p_api + 128);
  v7 = *(_QWORD *)(p_api + 168);
  v283 = *(_QWORD *)(p_api + 48);
  *a1 = 1000000 * *(unsigned int *)(v283 + 20);
  if (*(_WORD *)(v3 + 240))
  {
    a1[1] = *(_QWORD *)(v3 + 152);
    a1[2] = *(_QWORD *)(v3 + 224);
    a1[3] = *(_QWORD *)(v3 + 72);
    a1[4] = *(_QWORD *)(v3 + 112);
    a1[5] = *(_QWORD *)(v3 + 80);
    *((float64x2_t *)a1 + 3) = vmulq_f64(vsqrtq_f64(*(float64x2_t *)(v6 + 56)), (float64x2_t)vdupq_n_s64(0x400AAF6485FFABE7uLL));
    *((double *)a1 + 8) = *(double *)(v3 + 216) * *(double *)(v3 + 216);
    *((double *)a1 + 9) = *(double *)(v3 + 200) * *(double *)(v3 + 200);
  }
  v278 = (double *)v6;
  v287 = v3;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v306 = (int8x16_t *)a1;
  *((_DWORD *)a1 + 20) = 0;
  v12 = (1000000 * *(_DWORD *)(v7 + 16));
  v13 = (double *)(v7 + 17432);
  v14 = (double *)(v7 + 19608);
  v15 = (double *)(v7 + 7320);
  v16 = v7 + 36872;
  v17 = v7 + 21968;
  v18 = v7 + 12056;
  v19 = v7 + 7064;
  v20 = 7208;
  v21 = 22224;
  v22 = 26960;
  v23 = 7960;
  v24 = 208;
  v25 = 7230;
  v26 = 3.33564095;
  v27 = 1000000000.0 / (double)v12 * 3.33564095;
  *(double *)&v28 = 1.0e11;
  v29 = 0.0000508978417;
  *(double *)&v30 = 100000.0;
  v31 = xmmword_24BC09AA0;
  *(double *)&v32 = -0.00000000333564095;
  v33 = 604800.0;
  v34 = 6.048e14;
  *(double *)&v35 = 86400.0;
  v294 = v2;
  while (2)
  {
    v36 = *(unsigned __int8 *)(v2 + v20);
    if (*(_BYTE *)(v2 + v20))
      v37 = v36 == 7;
    else
      v37 = 1;
    if (v37)
      goto LABEL_9;
    v302 = v2 + v25;
    v38 = *(unsigned __int8 *)(v2 + v25 - 20);
    if (v36 != 2 && v38 == 0)
      goto LABEL_9;
    v303 = (_BYTE *)(v2 + v20);
    v40 = (_BYTE *)(v2 + v20);
    if (v36 != *(unsigned __int8 *)(v5 + v10 + 88))
      goto LABEL_9;
    v300 = v2 + v25;
    if (*(unsigned __int8 *)(v2 + v25 - 21) != *(unsigned __int8 *)(v5 + v10 + 89))
      goto LABEL_9;
    v297 = v5 + v10;
    if (*(unsigned __int8 *)(v300 - 19) != *(unsigned __int8 *)(v5 + v10 + 91)
      || *(_BYTE *)(v2 + v25 - 20) && v38 != *(unsigned __int8 *)(v297 + 90))
    {
      goto LABEL_9;
    }
    if (*(int *)(v5 + 4 * v11 + 1240) < 10)
      goto LABEL_9;
    v41 = v306[5].u16[4];
    if (v41 > 0xFF)
      goto LABEL_129;
    v306[5].i16[4] = v41 + 1;
    v295 = v41;
    v42 = (uint64_t)&v306[14 * v41 + 5].i64[1];
    *(_WORD *)(v42 + 8) = -1;
    v246 = (_WORD *)(v42 + 8);
    v279 = v5;
    v281 = v19;
    v276 = v7;
    v277 = v12;
    v269 = v14;
    v271 = v13;
    v267 = v15;
    v292 = v16;
    v288 = v17;
    v285 = v18;
    v273 = (float64x2_t)v31;
    switch(*(_BYTE *)(v300 - 21))
    {
      case 0:
        v40 = (_BYTE *)(v2 + v20);
        v49 = ((*v303 - 1) & 0xFB) == 0;
        break;
      case 1:
        v49 = 1;
        goto LABEL_24;
      case 2:
        v49 = 2;
        goto LABEL_24;
      case 3:
        v49 = 3;
        goto LABEL_24;
      case 4:
        v49 = 4;
        goto LABEL_24;
      case 5:
      case 6:
      case 7:
      case 0xA:
      case 0xE:
      case 0xF:
        v255 = v26;
        v250 = v29;
        v43 = v30;
        v44 = v28;
        v45 = v34;
        v46 = v33;
        v47 = v32;
        v48 = v35;
        EvCrt_Illegal_switch_case("API_Get_Raw_Meas_Data", 0x1527u);
        v35 = v48;
        v32 = v47;
        v33 = v46;
        v34 = v45;
        v28 = v44;
        v30 = v43;
        v29 = v250;
        v26 = v255;
        v49 = 0;
        goto LABEL_24;
      case 8:
        v49 = 8;
        goto LABEL_24;
      case 9:
        v49 = 9;
        goto LABEL_24;
      case 0xB:
        v49 = 6;
        goto LABEL_24;
      case 0xC:
        v49 = 5;
        goto LABEL_24;
      case 0xD:
        v49 = 7;
LABEL_24:
        v40 = v303;
        break;
      default:
        v49 = 0;
        break;
    }
    v259 = (double *)v35;
    v266 = *(double *)&v32;
    v306[14 * v295 + 6].i32[1] = v49;
    switch(*v40)
    {
      case 0:
      case 7:
        EvCrt_Illegal_switch_case("API_Get_Raw_Meas_Data", 0x1536u);
        goto LABEL_35;
      case 1:
        v53 = &v306[14 * v295];
        v54 = 1;
        goto LABEL_34;
      case 2:
        v306[14 * v295 + 6].i32[2] = 2;
        goto LABEL_35;
      case 3:
        v53 = &v306[14 * v295];
        v54 = 5;
        goto LABEL_34;
      case 4:
        v53 = &v306[14 * v295];
        v54 = 4;
        goto LABEL_34;
      case 5:
        v53 = &v306[14 * v295];
        v54 = 3;
        goto LABEL_34;
      case 6:
        v53 = &v306[14 * v295];
        v54 = 6;
LABEL_34:
        v53[6].i32[2] = v54;
LABEL_35:
        v256 = *v303;
        v52 = GM_Gen_SV_Meas_QI((uint64_t)v303);
        if (v256 == 2)
        {
          v55 = *(char *)(v300 - 19);
          v2 = v294;
          v56 = v295;
          v5 = v279;
          v12 = v277;
        }
        else
        {
          v2 = v294;
          v5 = v279;
          v12 = v277;
LABEL_38:
          v56 = v295;
          v55 = *(unsigned __int8 *)(v302 - 20);
        }
        v57 = &v306[14 * v56];
        v57[6].i16[6] = v55;
        v58 = *(double *)(v283 + 32) * 1000000000.0;
        v57[8].i64[0] = (uint64_t)v58;
        v59 = v57 + 8;
        v59[-1].i64[0] = (uint64_t)v58 - v12;
        v59[-1].i64[1] = (uint64_t)v58;
        v60 = (_WORD *)(v2 + v9);
        v61 = *(unsigned __int16 *)(v2 + v9 + 7216);
        if ((v61 & 0x200) != 0)
          v62 = 9;
        else
          v62 = 1;
        if ((~v61 & 0x300) != 0)
          v63 = v62;
        else
          v63 = 15;
        v59->i8[8] = v63;
        v64 = v2 + v8;
        v251 = (uint64_t *)v59;
        *(double *)v59[1].i64 = *(double *)(v2 + v8 + 88) * 1000000000.0;
        v65 = *(double *)&v28;
        v16 = v292;
        v17 = v288;
        v66 = v285;
        v67 = v281;
        v257 = v52;
        if (v52 >= 10)
        {
          v65 = *(double *)&v28;
          if (v60[3609])
          {
            v247 = (_WORD *)(v2 + v9);
            v243 = v2 + v8;
            PR_Raw_Meas_Unc = NK_Get_PR_Raw_Meas_Unc(*(_DWORD *)v303, *(_BYTE *)(v2 + v25 - 18), *(_BYTE *)(v294 + v8 + 82), (unsigned __int16)v60[3609] / 0xAu, *(unsigned __int16 *)(v294 + v8 + 72));
            v64 = v243;
            v60 = v247;
            v52 = v257;
            v2 = v294;
            v56 = v295;
            v5 = v279;
            v67 = v281;
            v66 = v285;
            v17 = v288;
            v16 = v292;
            v12 = v277;
            v65 = PR_Raw_Meas_Unc * v26;
          }
        }
        i64 = (double *)v306[14 * v56].i64;
        i64[19] = v65;
        LOBYTE(v65) = *(_BYTE *)(v5 + v11 + 1752);
        LOBYTE(v51) = *(_BYTE *)(v5 + v11 + 1880);
        *(double *)&v70 = (double)v51;
        v71 = (double)*(unint64_t *)&v65 + *(double *)&v70 * 0.0625;
        i64[20] = v71;
        LOBYTE(v71) = *(_BYTE *)(v5 + v11 + 2008);
        LOBYTE(v70) = *(_BYTE *)(v5 + v11 + 2136);
        i64[21] = (double)*(unint64_t *)&v71 + (double)v70 * 0.0625;
        v72 = *(unsigned __int8 *)(v2 + v25);
        *((_BYTE *)i64 + 184) = v72;
        *((_WORD *)i64 + 93) = v60[3614];
        i64[24] = (double)*(int *)(v64 + 52) * v29;
        v73 = *(_DWORD *)(v64 + 56);
        i64[26] = (double)v73 * v29;
        v74 = *(double *)&v30;
        v75 = (int *)v303;
        if (v52 >= 10)
        {
          v74 = *(double *)&v30;
          if (*(_WORD *)(v2 + v9 + 7220))
          {
            v244 = v73;
            v248 = v60;
            DO_Raw_Meas_Unc = NK_Get_DO_Raw_Meas_Unc(*(_DWORD *)v303, *(_BYTE *)(v2 + v25 - 18), *(_BYTE *)(v294 + v8 + 82), *(unsigned __int16 *)(v2 + v9 + 7220) / 0xAu, v72, v52);
            v73 = v244;
            v60 = v248;
            v2 = v294;
            v56 = v295;
            v75 = (int *)v303;
            v5 = v279;
            v67 = v281;
            v66 = v285;
            v17 = v288;
            v16 = v292;
            v12 = v277;
            v74 = DO_Raw_Meas_Unc * v26;
          }
        }
        v77 = (double *)v306[14 * v56].i64;
        v77[25] = v74;
        if (!v73)
          v74 = -1.0;
        v77[27] = v74;
        *((_DWORD *)v77 + 60) = 2;
        v78 = v60[3608];
        if ((v78 & 0xC0) != 0)
        {
          v79 = 4;
          v7 = v276;
          v14 = v269;
          v13 = v271;
          v15 = v267;
          *(double *)&v32 = v266;
          v35 = (uint64_t)v259;
        }
        else
        {
          v80 = (uint64_t *)v306;
          v7 = v276;
          v14 = v269;
          v13 = v271;
          v15 = v267;
          *(double *)&v32 = v266;
          v35 = (uint64_t)v259;
          if ((v78 & 0x30) == 0)
            goto LABEL_58;
          v79 = 3;
        }
        v80 = (uint64_t *)v306;
        v306[14 * v56 + 15].i32[1] = v79;
LABEL_58:
        v81 = &v80[28 * v56];
        *((_WORD *)v81 + 124) = v11;
        *((_BYTE *)v81 + 252) = v257 > 9;
        *((_DWORD *)v81 + 66) = 0;
        if (v257 < 15 || (v82 = *(unsigned __int16 *)(v2 + v9 + 7222), v82 < 0x15))
        {
          v306[14 * v56 + 18].i64[1] = 0x42374876E8000000;
          v87 = -1.0;
          v86 = v56;
          v18 = v66;
          v19 = v67;
        }
        else
        {
          v258 = (int *)(v81 + 33);
          v249 = (float64x2_t *)&v306[14 * v56];
          v249[17].f64[1] = (double)*v251;
          v245 = *(double *)(v2 + v8 + 64);
          v252 = v82;
          v242 = NK_Get_DR_Raw_Meas_Unc(*(_BYTE *)(v2 + v25 - 18), *(_BYTE *)(v2 + v8 + 82), *(unsigned __int16 *)(v2 + v8 + 76))* v26;
          v83.f64[0] = v245;
          v83.f64[1] = v242;
          v249[18] = vmulq_f64(v83, v273);
          if (*(_DWORD *)(v287 + 1652) + 100 >= v252)
            v84 = 1;
          else
            v84 = 2;
          *v258 = v84;
          *(_QWORD *)&v307[0] = 0;
          v85 = R8_EQ((const double *)(v276 + v24), (const double *)v307);
          v2 = v294;
          v86 = v295;
          v75 = (int *)v303;
          v35 = (uint64_t)v259;
          *(double *)&v32 = v266;
          v5 = v279;
          v19 = v281;
          v18 = v285;
          v17 = v288;
          v16 = v292;
          v15 = v267;
          v14 = v269;
          v13 = v271;
          v7 = v276;
          v12 = v277;
          v87 = -1.0;
          if (!v85)
          {
            *(double *)v306[14 * v295 + 14].i64 = -(*(double *)(v276 + 8 * v11 + 208) * v27);
            v87 = v242;
          }
        }
        v88 = (uint64_t *)v306;
        *(double *)&v306[14 * v86 + 14].i64[1] = v87;
        v31 = (__int128)v273;
        if (*(_BYTE *)(v2 + v8 + 85))
        {
          v89 = &v306[14 * v86 + 19];
          if (*(unsigned __int8 *)(v2 + v8 + 85) > 9u)
            v89->i32[0] = 1;
          else
            v89->i32[0] = 2;
          v88 = (uint64_t *)v306;
        }
        else
        {
          v306[14 * v86 + 19].i32[0] = 0;
        }
        v90 = &v88[28 * v86];
        *((_WORD *)v90 + 154) = *(_WORD *)(v2 + v9 + 7218);
        *(_DWORD *)((char *)v90 + 310) = *(_DWORD *)(v2 + v9 + 7220);
        v91 = *(unsigned __int8 *)v75;
        if (v91 == 7)
          goto LABEL_9;
        if (v91 == 2)
        {
          v298 = *(unsigned __int8 *)(v297 + 90);
          if (!v298)
          {
            if (*(_DWORD *)(v305 + 4 * *(char *)(v300 - 19) + 17452) == 2139062143)
              goto LABEL_9;
            LOBYTE(v298) = *(_DWORD *)(v305 + 4 * *(char *)(v300 - 19) + 17452);
            if (!(_BYTE)v298)
              goto LABEL_9;
          }
          *(_BYTE *)(v302 - 20) = v298;
        }
        else
        {
          LOBYTE(v298) = 0;
        }
        v92 = GNSS_Id_To_Num_Pos_Idx(*v75);
        v16 = v292;
        v2 = v294;
        v5 = v279;
        v19 = v281;
        v7 = v276;
        v12 = v277;
        v14 = v269;
        v13 = v271;
        v15 = v267;
        v17 = v288;
        v18 = v285;
        v31 = (__int128)v273;
        *(double *)&v32 = v266;
        v35 = (uint64_t)v259;
        if (!v291 || !*(_DWORD *)(v291 + 192 * v92 + 176))
        {
LABEL_9:
          ++v11;
          v20 += 36;
          v10 += 4;
          v21 += 4;
          v22 += 8;
          v23 += 24;
          v9 += 36;
          v8 += 56;
          v24 += 8;
          v25 += 36;
          if (v11 == 128)
            goto LABEL_129;
          continue;
        }
        v93 = *((unsigned __int16 *)v265 + 112);
        if (v93 <= 0xFF)
        {
          v94 = &v306[3604].i8[104 * *((unsigned __int16 *)v265 + 112) + 8];
          *v94 = v306[5].i8[8] - 1;
          *v246 = v93;
          *((_WORD *)v265 + 112) = v93 + 1;
          v95 = v303;
          v94[1] = v298;
          if (*v303 == 2)
          {
            v96 = *(int *)(v305 + 4 * *(char *)(v300 - 19) + 17508);
            if (v96 <= 3)
            {
              v97 = dword_24BC09B20[v96];
              goto LABEL_86;
            }
          }
          else
          {
            v97 = 1;
LABEL_86:
            v306[3604].i32[26 * v93 + 3] = v97;
            v95 = v303;
          }
          v98 = *v95;
          if (v98 != 4)
          {
            if (v98 == 2)
            {
              v99 = *(double *)(v279 + 72) + *(double *)(v279 + 8 * v11 + 3416) * v266;
              v100 = v99 + *(double *)&v259;
LABEL_91:
              if (v99 < 0.0)
                v99 = v100;
            }
            else
            {
              v99 = *(double *)(v279 + 32) + *(double *)(v279 + 8 * v11 + 3416) * v266;
            }
            v101 = v99 * 1000000000.0;
            if (v101 < 0.0)
              v101 = v101 + v34;
            *(double *)&v306[3605].i64[13 * v93] = v101;
            v102 = *(unsigned __int8 *)(v281 + v11);
            if (*(_BYTE *)(v281 + v11))
            {
              v103 = sqrt(*(double *)(v276 + v23) + *(double *)(v276 + v23 + 8));
              v104 = (uint64_t)&v306[3604].i64[13 * v93 + 1];
              *(double *)(v104 + 80) = v103;
              *(double *)(v104 + 16) = v103 * v26;
              *(_QWORD *)(v104 + 32) = *(_QWORD *)(v285 + 8 * v11);
            }
            v306[3606].i32[26 * v93] = 0;
            v105 = *(unsigned __int8 *)(v288 + v11);
            if (*(_BYTE *)(v288 + v11))
              v306[3607].i64[13 * v93] = *(_QWORD *)(v276 + v22);
            v106 = *(unsigned __int8 *)(v292 + v11);
            if (*(_BYTE *)(v292 + v11))
              v306[3607].i64[13 * v93 + 1] = *(_QWORD *)(v276 + v22 + 14904);
            if (v102 && (*((_DWORD *)v267 + v11) - 1) >= 0x1D)
              *(double *)&v306[3608].i64[13 * v93] = v269[v11];
            if (v105 && (*(_DWORD *)(v276 + v21) - 1) >= 0x1D)
              v306[3608].i64[13 * v93 + 1] = *(_QWORD *)(v276 + v22 + 7552);
            if (v106 && (*(_DWORD *)(v276 + v21 + 14904) - 1) >= 0x1D)
              v306[3609].i64[13 * v93] = *(_QWORD *)(v276 + v22 + 22456);
            if (v102)
              *(double *)&v306[3609].i64[13 * v93 + 1] = sqrt(v271[v11]);
            if (v105)
              *(double *)&v306[3610].i64[13 * v93] = sqrt(*(double *)(v276 + v22 + 5376));
            if (v106)
              *(double *)&v306[3610].i64[13 * v93 + 1] = sqrt(*(double *)(v276 + v22 + 20280));
            goto LABEL_9;
          }
          v99 = *(double *)(v279 + 32) + -14.0 + *(double *)(v279 + 8 * v11 + 3416) * v266;
          v100 = v99 + v33;
          goto LABEL_91;
        }
LABEL_129:
        v107 = 0;
        v270 = (double *)(v290 + 168);
        v272 = (double *)(v290 + 160);
        v260 = v278 + 44;
        v108 = 0.5;
        v274 = (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL);
        v109 = v306;
        v110 = v287;
        v268 = (double *)(v290 + 152);
        while (2)
        {
          Constell_Prn = Get_Constell_Prn(v107);
          v112 = Num_Prn_Idx_To_GNSS_Id(v107);
          v304 = v112;
          if (Constell_Prn == 2)
          {
            v113 = *(_DWORD *)(v305 + 4 * v112 + 17324);
            if (v113 == 2139062143)
              goto LABEL_264;
          }
          else
          {
            if (Constell_Prn == 7)
              break;
            LOBYTE(v113) = 0;
          }
          v114 = v110 + v107;
          if (!*(_BYTE *)(v110 + v107 + 808) || !*(_BYTE *)(v114 + 1088))
          {
            v115 = Num_Prn_Idx_To_Num_Pos_Idx(v107);
            if (v115 - 1 <= 0xC3)
            {
              v117 = v115;
              v286 = v291 + 192 * v115;
              if (*(_DWORD *)(v286 + 176))
              {
                v118 = (unsigned __int16)*v284;
                if (v118 > 0xFF)
                  break;
                *v284 = v118 + 1;
                v119 = &v109[5269].i32[74 * v118];
                v120 = Constell_Prn;
                switch(Constell_Prn)
                {
                  case 0u:
                  case 7u:
                    EvCrt_Illegal_switch_case("API_Get_Raw_Meas_Data", 0x1752u);
                    if (Constell_Prn == 2)
                      goto LABEL_144;
                    break;
                  case 1u:
                    goto LABEL_149;
                  case 2u:
                    *v119 = 2;
LABEL_144:
                    v121 = (char)v113;
                    v122 = v304;
                    goto LABEL_151;
                  case 3u:
                    v120 = 5;
                    goto LABEL_149;
                  case 4u:
                    v120 = 4;
                    goto LABEL_149;
                  case 5u:
                    v120 = 3;
                    goto LABEL_149;
                  case 6u:
                    v120 = 6;
LABEL_149:
                    *v119 = v120;
                    break;
                  default:
                    break;
                }
                v122 = 0;
                v121 = v304;
LABEL_151:
                v123 = (uint64_t)&v109[5269].i64[37 * v118];
                *(_WORD *)(v123 + 4) = v121;
                *(_BYTE *)(v123 + 6) = v122;
                v293 = v117;
                *(double *)v116.i64 = sqrt(*(double *)(v291 + 192 * v117 + 112) * v108);
                *(_QWORD *)(v123 + 144) = v116.i64[0];
                *(double *)(v123 + 152) = *(double *)v116.i64 * v26;
                v124 = v305 + 20 * v107;
                v125 = (int32x4_t *)(v124 + 51052);
                v124 += 55412;
                v116.i64[0] = *(_QWORD *)v124;
                v126.i64[0] = 0x100000001;
                v126.i64[1] = 0x100000001;
                v127.i64[0] = 0x200000002;
                v127.i64[1] = 0x200000002;
                v128 = (int8x16_t)vceqq_s32(*v125, v127);
                v129 = (int8x16_t)vsubq_s32((int32x4_t)vandq_s8(v128, (int8x16_t)v127), (int32x4_t)vbicq_s8((int8x16_t)vceqq_s32(*v125, v126), v128));
                *(int8x16_t *)(v123 + 160) = v129;
                v129.i32[0] = v125[1].i32[0];
                v130 = (int32x4_t)vextq_s8(vextq_s8(v129, v129, 4uLL), v116, 0xCuLL);
                v130.i32[3] = *(_DWORD *)(v124 + 8);
                v131 = (int8x16_t)vceqq_s32(v130, v126);
                v132 = (int8x16_t)vceqq_s32(v130, v127);
                *(int32x4_t *)(v123 + 176) = vsubq_s32((int32x4_t)vandq_s8(v132, (int8x16_t)v127), (int32x4_t)vbicq_s8(v131, v132));
                v133 = *(_DWORD *)(v124 + 16);
                if (v133 == 2)
                  v134 = 2;
                else
                  v134 = v133 == 1;
                v109[5281].i32[74 * v118] = v134;
                v135 = v278[214];
                if (v135 > 0.0 && *(double *)(v275 + 40 * v107 + 688) >= 0.0)
                  *(double *)&v109[5281].i64[37 * v118 + 1] = v135 * Trop_Elev_MapF(v275 + 40 * v107 + 656);
                if (Constell_Prn <= 7)
                {
                  if (((1 << Constell_Prn) & 0x3A) != 0)
                  {
                    v136 = &v109->i64[37 * v118];
                    v137 = 2;
                    goto LABEL_162;
                  }
                  if (((1 << Constell_Prn) & 0x44) != 0)
                  {
                    v136 = &v109->i64[37 * v118];
                    v137 = 1;
LABEL_162:
                    *((_WORD *)v136 + 42256) = v137;
                  }
                  else
                  {
                    v109[5282].i16[148 * v118] = 0;
                    EvCrt_Illegal_switch_case("API_Get_Raw_Meas_Data", 0x1794u);
                  }
                }
                v138 = &v109[5282].i16[148 * v118];
                if (*v138)
                {
                  v139 = 0;
                  v140 = 0;
                  v301 = (_BYTE *)(v114 + 808);
                  v141 = v275 + 40 * v107;
                  v289 = (double *)(v141 + 688);
                  v280 = v141 + 9376;
                  v282 = v141 + 656;
                  v142 = v291 + 192 * v293;
                  v296 = (double *)(v142 + 152);
                  v299 = (double *)(v142 + 136);
                  v143 = 15;
                  do
                  {
                    if (v139)
                    {
                      if (v139 == 1)
                      {
                        v144 = 6071;
                        v145 = 3;
                        v146 = 3;
                        switch(Constell_Prn)
                        {
                          case 0u:
                          case 7u:
                            goto LABEL_171;
                          case 1u:
                          case 5u:
                            goto LABEL_174;
                          case 2u:
                          case 6u:
                            break;
                          case 3u:
                            v145 = 9;
                            v146 = 9;
                            goto LABEL_174;
                          case 4u:
                            v146 = 7;
                            v145 = 13;
                            goto LABEL_174;
                          default:
                            goto LABEL_172;
                        }
                      }
                    }
                    else
                    {
                      v147 = 0;
                      v144 = 6056;
                      v145 = 3;
                      v148 = 1;
                      v146 = 3;
                      switch(Constell_Prn)
                      {
                        case 0u:
                        case 7u:
LABEL_171:
                          EvCrt_Illegal_switch_case("API_Get_Raw_Meas_Data", v144);
                          goto LABEL_172;
                        case 1u:
                        case 5u:
                          goto LABEL_181;
                        case 2u:
                          v147 = 4;
                          v148 = 4;
                          goto LABEL_181;
                        case 3u:
                          v147 = 8;
                          v148 = 8;
                          goto LABEL_181;
                        case 4u:
                          v148 = 6;
                          v147 = 11;
                          goto LABEL_181;
                        case 6u:
                          goto LABEL_174;
                        default:
LABEL_172:
                          v148 = 0;
                          if (v143 > 0xE)
                          {
                            v147 = v143;
                          }
                          else
                          {
                            v147 = v143;
                            v145 = v143;
                            v146 = 0;
                            if (((1 << v143) & 0x66CC) != 0)
                            {
LABEL_174:
                              v147 = v145;
                              v148 = v146;
                              if (*(_BYTE *)(v287 + v107 + 1088))
                              {
                                v143 = v145;
                                break;
                              }
                              goto LABEL_183;
                            }
                          }
LABEL_181:
                          if (*v301)
                          {
                            v143 = v147;
                            break;
                          }
LABEL_183:
                          v143 = v147;
                          v306[5282].i32[74 * v118 + 1 + v140] = v148;
                          v149 = 0.0;
                          v150 = 0.0;
                          if (*(_DWORD *)(v305 + 8956))
                          {
                            v150 = 0.0;
                            if (*v289 >= 0.0)
                            {
                              v151 = GPS_Klob_Iono_Delay((double *)(v290 + 224), v280, v282, (char *)(v305 + 8952), *(double *)(v283 + 32));
                              GPS_L1_Iono_Scale_factor();
                              v150 = v151 * v152;
                            }
                          }
                          *(double *)&v306[5283].i64[37 * v118 + v140] = v150;
                          v153 = 0;
                          switch(v148)
                          {
                            case 0:
                            case 2:
                              EvCrt_Illegal_switch_case("API_Get_Raw_Meas_Data", 0x1860u);
                              goto LABEL_189;
                            case 1:
                            case 6:
                            case 8:
                              goto LABEL_190;
                            case 3:
                            case 7:
                            case 9:
                              v149 = *(double *)(v290 + 176) * 299792458.0;
                              v153 = *(_QWORD *)(v290 + 880);
                              goto LABEL_190;
                            case 4:
                              if (*(_BYTE *)(v287 + 1960))
                                v160 = 1.5;
                              else
                                v160 = 3.0;
                              *(_QWORD *)&v307[0] = 0;
                              if (R8_EQ(v272, (const double *)v307))
                                goto LABEL_205;
                              v319 = 0.0;
                              v161 = R8_EQ(v268, &v319);
                              v162 = 0.0;
                              v158 = (uint64_t *)v306;
                              if (v161)
                                goto LABEL_208;
                              v163 = *v268;
                              v164 = *v272;
                              v310 = 0u;
                              v311 = 0u;
                              v308 = 0u;
                              v309 = 0u;
                              memset(v307, 0, sizeof(v307));
                              v325 = 0;
                              v323 = 0u;
                              v324 = 0u;
                              v321 = 0u;
                              v322 = 0u;
                              v320 = 0u;
                              *(_QWORD *)v318 = 0;
                              *(_OWORD *)v316 = xmmword_24BC09AB0;
                              v319 = -1.0;
                              mapu((double *)v316, 1, 1u, 2, v260, 0xCu, (double *)v307, 1, &v319, (double *)v318);
                              v165 = sqrt(*(double *)v318);
                              v162 = 0.0;
                              if (v165 >= v160)
                                goto LABEL_212;
                              v166 = (v163 - v164) * -299792458.0;
                              v167 = v278[1941];
                              goto LABEL_211;
                            case 5:
                              *(_QWORD *)&v307[0] = 0;
                              if (R8_EQ(v270, (const double *)v307))
                              {
                                v160 = 1.5;
LABEL_205:
                                v162 = 0.0;
                                v158 = (uint64_t *)v306;
                                v156 = v294;
                              }
                              else
                              {
                                v319 = 0.0;
                                v158 = (uint64_t *)v306;
                                if (R8_EQ(v268, &v319))
                                {
                                  v160 = 1.5;
                                  v162 = 0.0;
LABEL_208:
                                  v156 = v294;
                                }
                                else
                                {
                                  v168 = *v268;
                                  v169 = *v270;
                                  v310 = 0u;
                                  v311 = 0u;
                                  v308 = 0u;
                                  v309 = 0u;
                                  memset(v307, 0, sizeof(v307));
                                  v325 = 0;
                                  v323 = 0u;
                                  v324 = 0u;
                                  v321 = 0u;
                                  v322 = 0u;
                                  v320 = 0u;
                                  *(_QWORD *)v318 = 0;
                                  *(_QWORD *)&v316[2] = 0;
                                  *(_QWORD *)v316 = 0x3FF0000000000000;
                                  v317 = 0xBFF0000000000000;
                                  v319 = -1.0;
                                  mapu((double *)v316, 1, 1u, 3, v260, 0xCu, (double *)v307, 1, &v319, (double *)v318);
                                  v165 = sqrt(*(double *)v318);
                                  v160 = 1.5;
                                  v162 = 0.0;
                                  if (v165 < 1.5)
                                  {
                                    v166 = (v168 - v169) * -299792458.0;
                                    v167 = v278[1945];
LABEL_211:
                                    v162 = v167 + v166;
                                    v160 = v165;
                                  }
LABEL_212:
                                  v156 = v294;
                                  v108 = 0.5;
                                }
                              }
                              v170 = (uint64_t)&v158[37 * v118 + 10538 + v140];
                              *(double *)(v170 + 240) = v162;
                              *(double *)(v170 + 256) = v160;
                              v171 = v299;
                              if (!v139)
                                v171 = v296;
                              *(double *)&v158[37 * v118 + 10572 + v140] = *v171 * 1000000000.0;
LABEL_216:
                              v159 = *(_BYTE *)(v156 + 32);
LABEL_217:
                              *((_BYTE *)&v158[37 * v118 + 10574] + v140++) = v159;
                              break;
                            default:
LABEL_189:
                              v153 = 0;
LABEL_190:
                              v154 = (uint64_t)&v306[5269].i64[37 * v118 + v140];
                              *(double *)(v154 + 240) = v149;
                              *(_QWORD *)(v154 + 256) = v153;
                              v155 = v299;
                              if (!v139)
                                v155 = v296;
                              *(double *)&v306[5286].i64[37 * v118 + v140] = *v155 * 1000000000.0;
                              v156 = v294;
                              v157 = 1 << v148;
                              v158 = (uint64_t *)v306;
                              if ((v157 & 0x172) != 0)
                                goto LABEL_216;
                              if ((v157 & 0x288) != 0)
                              {
                                v159 = *(_BYTE *)(v294 + 33);
                              }
                              else
                              {
                                EvCrt_Illegal_switch_case("API_Get_Raw_Meas_Data", 0x1884u);
                                v159 = 0;
                              }
                              goto LABEL_217;
                          }
                          break;
                      }
                    }
                    ++v139;
                  }
                  while (v139 < (unsigned __int16)*v138);
                }
                else
                {
                  v140 = 0;
                }
                *v138 = v140;
                v109 = v306;
                v110 = v287;
                v172 = v291;
                switch(Constell_Prn)
                {
                  case 1u:
                    v173 = v305 + 116 * (v304 - 1);
                    v174 = (_DWORD *)(v173 + 3836);
                    v175 = (int *)(v173 + 124);
                    v176 = v305 + 44 * (v304 - 1);
                    v177 = 7548;
                    goto LABEL_229;
                  case 2u:
                    v174 = (_DWORD *)(v305 + 116 * (v304 - 1) + 13468);
                    v175 = (int *)(v305 + ((unint64_t)(v304 - 1) << 6) + 11932);
                    v176 = v305 + 36 * (v304 - 1);
                    v177 = 16252;
                    goto LABEL_229;
                  case 3u:
                    v179 = v305 + 88 * (v304 - 1);
                    v174 = (_DWORD *)(v179 + 20880);
                    v175 = (int *)(v179 + 17712);
                    v176 = v305 + 36 * (v304 - 1);
                    v177 = 24048;
                    goto LABEL_229;
                  case 4u:
                    v180 = v305 + 152 * (v304 - 1);
                    v174 = (_DWORD *)(v180 + 35092);
                    v175 = (int *)(v180 + 25516);
                    v176 = v305 + 44 * (v304 - 1);
                    v177 = 44668;
                    goto LABEL_229;
                  case 5u:
                    v181 = v305 + 116 * (v304 + 63);
                    v174 = (_DWORD *)(v181 + 10316);
                    v175 = (int *)(v181 + 9156);
                    v176 = v305 + 44 * (v304 + 63);
                    v177 = 11476;
                    goto LABEL_229;
                  case 6u:
                    v182 = v305 + 76 * (v304 - 1);
                    v174 = (_DWORD *)(v182 + 48764);
                    v175 = (int *)(v182 + 47700);
                    v176 = v305 + 52 * (v304 - 1);
                    v177 = 49828;
LABEL_229:
                    v183 = *v175;
                    v184 = *(_DWORD *)(v176 + v177);
                    if (*v174 == 6)
                      v185 = 6;
                    else
                      v185 = v184;
                    if (v183)
                      v185 = v183;
                    v186 = v185 - 3;
                    if (v186 > 3)
                      v178 = 0;
                    else
                      v178 = dword_24BC09B30[v186];
                    break;
                  default:
                    v178 = 0;
                    v109 = v306;
                    v110 = v287;
                    v172 = v291;
                    break;
                }
                v109[5269].i32[74 * v118 + 2] = v178;
                v187 = v172 + 192 * v293;
                v190 = *(__int16 *)(v187 + 164);
                v189 = (__int16 *)(v187 + 164);
                v188 = v190;
                v191 = v190;
                switch(Constell_Prn)
                {
                  case 0u:
                  case 7u:
                    EvCrt_Illegal_switch_case("API_Get_Raw_Meas_Data", 0x18D4u);
                    v192 = 0;
                    v191 = *v189;
                    goto LABEL_242;
                  case 1u:
                  case 5u:
                    goto LABEL_240;
                  case 2u:
                    v194 = v172 + 192 * v293;
                    v195 = *(__int16 *)(v194 + 172);
                    v196 = *(_DWORD *)(v194 + 168);
                    if (v195 > 0 || v196 >= 1)
                    {
                      v193 = v293;
                      v197 = v195 + 1461 * *(__int16 *)(v172 + 192 * v293 + 174);
                    }
                    else
                    {
                      *(_QWORD *)&v307[0] = 0;
                      API_Get_UTC_Cor(1, (double *)v307);
                      v316[0] = 0;
                      v318[0] = 0;
                      v319 = 0.0;
                      v191 = *v189;
                      v193 = v293;
                      GPS_To_Glon_Time(0, *v189, (double)*(int *)(v172 + 192 * v293 + 160), *(double *)v307, v316, v318, &v319);
                      v197 = v318[0] + 1461 * v316[0];
                      v196 = (int)v319;
                    }
                    v192 = v196 + 86400 * v197 - 126316800;
                    break;
                  case 3u:
                  case 6u:
                    v188 -= 1024;
LABEL_240:
                    v193 = v293;
                    v192 = *(_DWORD *)(v172 + 192 * v293 + 160) + 604800 * v188;
                    break;
                  case 4u:
                    v193 = v293;
                    v198 = *(_DWORD *)(v172 + 192 * v293 + 160);
                    if (v198 < 14)
                      v199 = -1357;
                    else
                      v199 = -1356;
                    v200 = v199 + v188;
                    if (v198 >= 14)
                      v201 = -14;
                    else
                      v201 = 604786;
                    v192 = v201 + v198 + 604800 * v200;
                    break;
                  default:
                    v192 = 0;
LABEL_242:
                    v193 = v293;
                    break;
                }
                *(double *)&v109[5270].i64[37 * v118] = (double)v192;
                v314 = 0;
                v312 = 0u;
                v313 = 0u;
                v310 = 0u;
                v311 = 0u;
                v308 = 0u;
                v309 = 0u;
                memset(v307, 0, sizeof(v307));
                v315[0] = 0;
                *(_DWORD *)((char *)v315 + 3) = 0;
                v202 = v172 + 192 * v193;
                v204 = *(_DWORD *)(v202 + 160);
                v203 = (int *)(v202 + 160);
                if (Comp_CurrState(0x1Eu, v191, v286, (uint64_t)v307, (double)v204 + -15.0, 0.0))
                {
                  v205 = (uint64_t)&v109[5269].i64[37 * v118];
                  *(_OWORD *)(v205 + 24) = *(_OWORD *)((char *)v307 + 8);
                  *(_QWORD *)(v205 + 40) = *((_QWORD *)&v307[1] + 1);
                }
                if (Comp_CurrState(0x1Eu, *v189, v286, (uint64_t)v307, (double)*v203 + -5.0, 0.0))
                {
                  v206 = (uint64_t)&v109[5269].i64[37 * v118];
                  *(_OWORD *)(v206 + 48) = *(_OWORD *)((char *)v307 + 8);
                  *(_QWORD *)(v206 + 64) = *((_QWORD *)&v307[1] + 1);
                }
                if (Comp_CurrState(0x1Eu, *v189, v286, (uint64_t)v307, (double)*v203 + 5.0, 0.0))
                {
                  v207 = (uint64_t)&v109[5269].i64[37 * v118];
                  *(_OWORD *)(v207 + 72) = *(_OWORD *)((char *)v307 + 8);
                  *(_QWORD *)(v207 + 88) = *((_QWORD *)&v307[1] + 1);
                }
                if (Comp_CurrState(0x1Eu, *v189, v286, (uint64_t)v307, (double)*v203 + 15.0, 0.0))
                {
                  v208 = (uint64_t)&v109[5269].i64[37 * v118];
                  *(_OWORD *)(v208 + 96) = *(_OWORD *)((char *)v307 + 8);
                  *(_QWORD *)(v208 + 112) = *((_QWORD *)&v307[1] + 1);
                }
                v209 = (uint64_t)&v109[5269].i64[37 * v118];
                *(float64x2_t *)(v209 + 120) = vmulq_f64(*(float64x2_t *)(v172 + 192 * v293 + 96), v274);
                *(_QWORD *)(v209 + 136) = 0;
              }
            }
          }
LABEL_264:
          if (++v107 != 218)
            continue;
          break;
        }
        v210 = *(__int16 *)(v290 + 62);
        *(_WORD *)v265 = *(_WORD *)(v290 + 62);
        *((_WORD *)v265 + 1) = *(_WORD *)(v290 + 212);
        *((_BYTE *)v265 + 4) = *(_BYTE *)(v290 + 210);
        if (*(_BYTE *)(v290 + 60))
        {
          *((_WORD *)v265 + 3) = v210 - 1356;
          if (*(double *)(v290 + 48) < 14.0)
            *((_WORD *)v265 + 3) = v210 - 1357;
          *((_WORD *)v265 + 4) = v210 - 1024;
          *((_WORD *)v265 + 5) = v210 - 1024;
        }
        v211 = *(_DWORD *)(v305 + 8972);
        if ((v211 - 3) >= 4)
        {
          v218 = v262;
          if (v211 == 1)
            *((_BYTE *)v265 + 16) = v263[2];
        }
        else
        {
          v212 = v263[3];
          v213 = v210 - 127;
          if (v213 <= (v212 | 0x400))
            LOWORD(v213) = v212 | 0x400;
          v214 = ((v213 - v212 - 769) & 0xFF00 | v212) + 1024;
          *((_WORD *)v265 + 6) = v214;
          *((_WORD *)v265 + 7) = *((_WORD *)v263 + 2);
          *((_BYTE *)v265 + 16) = v263[2];
          *((_WORD *)v265 + 12) = v214;
          *((_DWORD *)v265 + 7) = *v263 << 12;
          v215 = *(_QWORD *)(v305 + 8976);
          v216.i64[0] = (int)v215;
          v216.i64[1] = SHIDWORD(v215);
          v217 = (int8x16_t)vmulq_f64(vcvtq_f64_s64(v216), (float64x2_t)xmmword_24BC09AC0);
          v109[3592] = vextq_s8(v217, v217, 8uLL);
          v218 = v262;
        }
        if (*(_BYTE *)(v264 + 64))
        {
          v219.i64[0] = -*((_DWORD *)v263 + 2035);
          v219.i64[1] = *(int *)(v264 + 4);
          v109[3594] = (int8x16_t)vmulq_f64(vcvtq_f64_s64(v219), (float64x2_t)xmmword_24BC09AD0);
          *((_BYTE *)v265 + 58) = *(_BYTE *)v264;
          *((_WORD *)v265 + 28) = v263[8136];
        }
        if ((*(_DWORD *)(v264 + 8236) - 3) <= 3)
        {
          v220 = (unsigned __int16)*v253;
          v221 = *((unsigned __int16 *)v265 + 4) - 31;
          if (v221 <= v220)
            LOWORD(v221) = *v253;
          *((_WORD *)v265 + 40) = ((v221 - v220 + 63) & 0xFFC0) + v220;
          *((_DWORD *)v265 + 21) = *(_DWORD *)(v264 + 8256);
          *(float64x2_t *)(v265 + 11) = vmulq_f64(*(float64x2_t *)(v264 + 8240), (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL));
        }
        if ((*(_DWORD *)v218 - 3) <= 3)
        {
          *((_WORD *)v265 + 52) = *(_WORD *)(v218 + 4);
          *((_DWORD *)v265 + 27) = *(_DWORD *)(v218 + 8);
          v109[3597] = (int8x16_t)vmulq_f64(*(float64x2_t *)(v218 + 12), (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL));
        }
        if ((*(_DWORD *)(v218 + 3080) - 3) <= 3)
        {
          v222 = *(unsigned __int16 *)(v254 + 28);
          if (v222 > 0x3FF)
            LOWORD(v222) = v222 - 1024;
          *((_WORD *)v265 + 64) = v222;
          *((_DWORD *)v265 + 33) = *(_DWORD *)(v254 + 24);
          *(float64x2_t *)(v265 + 17) = vmulq_f64(*(float64x2_t *)v254, (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL));
        }
        if (*(_BYTE *)(v283 + 16) && *(_DWORD *)v283)
        {
          v223 = *(double *)(v283 + 40);
          v265[19] = llround((*(double *)(v283 + 32) - v223) * 1000000000.0)
                   + 604800000000000 * *(__int16 *)(v283 + 28)
                   - 1000000 * *(unsigned int *)(v283 + 20);
          *((double *)v265 + 20) = (double)(uint64_t)round(v223 * -1000000000.0) - v223 * -1000000000.0;
          *((double *)v265 + 21) = *(double *)(v290 + 872) * v26;
        }
        v224.f64[0] = *(float64_t *)(v283 + 48);
        v224.f64[1] = *(float64_t *)(v290 + 920);
        v109[3601] = (int8x16_t)vmulq_f64(v224, (float64x2_t)xmmword_24BC09AE0);
        *((double *)v265 + 24) = *(double *)(v290 + 176) * 299792458.0;
        v265[25] = *(_QWORD *)(v290 + 880);
        v265[26] = *(_QWORD *)(v110 + 2000);
        *((_DWORD *)v265 + 54) = 0;
        v225 = *(_DWORD *)(v110 + 2008);
        v226 = p_api;
        if (v225 >= 1)
        {
          v227 = *(_QWORD *)(p_api + 48);
          if (*(_BYTE *)(v227 + 16) && *(int *)v227 >= 3)
          {
            v228 = (int)*(double *)(v227 + 32) + 604800 * *(__int16 *)(v227 + 28);
            v229 = v228 - v225;
            if (v228 <= 0)
              v229 = -1;
          }
          else
          {
            v229 = -1;
          }
          *((_DWORD *)v265 + 54) = v229;
        }
        v230 = *(_QWORD *)(v226 + 56);
        v231 = *(_DWORD *)(v230 + 8956);
        if (v231)
        {
          v232 = (char *)(v230 + 8960);
          v233 = *(_DWORD *)(v230 + 8952);
          v234 = *v232;
          v235 = v232[1];
          v236 = v232[2];
          v237 = v232[3];
          v238 = v232[4];
          v239 = v232[5];
          v240 = v232[6];
          LODWORD(v232) = v232[7];
          v261[1] = (double)v234 * 9.31322575e-10;
          v261[2] = (double)v235 * 0.0000000074505806;
          v261[3] = (double)v236 * 0.0000000596046448;
          v261[4] = (double)v237 * 0.0000000596046448;
          v261[5] = (double)v238 * 2048.0;
          v261[6] = (double)v239 * 16384.0;
          *(_DWORD *)v261 = v233;
          v261[7] = (double)v240 * 65536.0;
          v261[8] = (double)(int)v232 * 65536.0;
          if (v231 <= 6)
            *((_DWORD *)v261 + 18) = dword_24BC09A70[v231 - 1];
        }
        return 1;
      default:
        v50 = GM_Gen_SV_Meas_QI((uint64_t)v40);
        v12 = v277;
        v5 = v279;
        v2 = v294;
        v52 = v50;
        goto LABEL_38;
    }
  }
}

uint64_t API_Qual_Pos(const char *a1, int a2, unint64_t a3, int a4, uint64_t a5)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  char *v13;
  char v14;
  uint64_t v15;
  char v16;
  const char *v17;
  int v18;
  const char *v19;
  char v20;
  unsigned __int8 *v21;
  int v22;
  _BYTE *v23;
  int v24;
  int v25;
  uint64_t v26;
  char v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  BOOL v54;
  BOOL v55;
  double v56;
  int v57;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  _BYTE *v65;
  _DWORD *v66;
  _DWORD *v67;
  _QWORD v68[2];
  char *v69;
  uint64_t *v70;
  _OWORD v71[8];
  uint64_t v72;

  LODWORD(v6) = a4;
  v7 = a3;
  v8 = a2;
  v72 = *MEMORY[0x24BDAC8D0];
  v9 = *(_DWORD **)(p_api + 72);
  v10 = *(_QWORD *)(p_api + 80);
  v11 = *(_QWORD *)(p_api + 168);
  v63 = (_BYTE *)(v11 + 21660);
  v64 = *(_QWORD *)(p_api + 128);
  v65 = (_BYTE *)(v11 + 6756);
  memset(v71, 0, sizeof(v71));
  v66 = (_DWORD *)(v64 + 68164);
  v67 = v9;
  v12 = (unsigned int *)(v64 + 27116);
  v13 = (char *)v71;
  v69 = (char *)v71;
  v70 = &v72;
  v68[1] = v71;
  v14 = 81;
  v15 = 1u;
  do
  {
    v68[0] = v13 + 1;
    *v13 = v14;
    v13 = (char *)v68[0];
    if (v68[0] >= (unint64_t)v70)
    {
      v13 = v69;
      v68[0] = v69;
    }
    v14 = aQualPos[v15++];
  }
  while (v15 != 11);
  v16 = *a1;
  if (*a1)
  {
    v17 = a1 + 1;
    do
    {
      v68[0] = v13 + 1;
      *v13 = v16;
      v13 = (char *)v68[0];
      if (v68[0] >= (unint64_t)v70)
      {
        v13 = v69;
        v68[0] = v69;
      }
      v18 = *(unsigned __int8 *)v17++;
      v16 = v18;
    }
    while (v18);
  }
  v19 = " NM";
  if (a2)
    v19 = " SS";
  v20 = *v19;
  if (*v19)
  {
    v21 = (unsigned __int8 *)(v19 + 1);
    do
    {
      v68[0] = v13 + 1;
      *v13 = v20;
      v13 = (char *)v68[0];
      if (v68[0] >= (unint64_t)v70)
      {
        v13 = v69;
        v68[0] = v69;
      }
      v22 = *v21++;
      v20 = v22;
    }
    while (v22);
  }
  v68[0] = v13 + 1;
  *v13 = 32;
  if (v68[0] >= (unint64_t)v70)
    v68[0] = v69;
  sprintf_2d(v68, a3);
  v23 = (_BYTE *)v68[0]++;
  *v23 = 32;
  if (v68[0] >= (unint64_t)v70)
    v68[0] = v69;
  sprintf_3d(v68, v6);
  if ((_DWORD)a5)
    v24 = v8;
  else
    v24 = 0;
  if (v24 == 1)
    v25 = a5 - (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  else
    v25 = 0;
  sprintf_sp1d(v68, v25);
  v26 = 0;
  v27 = 32;
  v28 = (char *)v68[0];
  v29 = v10;
  do
  {
    v68[0] = v28 + 1;
    *v28 = v27;
    v28 = (char *)v68[0];
    if (v68[0] >= (unint64_t)v70)
    {
      v28 = v69;
      v68[0] = v69;
    }
    v27 = asc_24BBED0E4[++v26];
  }
  while (v26 != 2);
  if (v24)
  {
    if (v25 < v67[413])
    {
      v59 = a5;
      v60 = v67[413];
      v30 = "%s %s  - Deadline up %d  FixInt %d";
LABEL_111:
      v51 = 1;
      DbgLog_v(1, v30, v71, " TRUE ", v59, v60, v61, v62);
      return v51;
    }
    if ((_DWORD)v7 == -1)
    {
      DbgLog_v(1, "%s %s  - Waiting for full time-out");
      return 0;
    }
  }
  v31 = *(_DWORD *)(v10 + 4);
  if (v8)
  {
    if (v31 <= 3)
    {
      DbgLog_v(1, "%s %s  - SS FixType %d < SV_2D");
      return 0;
    }
  }
  else if (v31 <= 0)
  {
    DbgLog_v(1, "%s %s  - NM FixType %d < INT_AID");
    return 0;
  }
  v32 = v8 ^ 1u;
  if ((_DWORD)v7)
  {
    if (!(_DWORD)v6)
      LODWORD(v6) = 5 * v7;
  }
  else
  {
    if (!(_DWORD)v6)
      LODWORD(v6) = *(double *)&v67[2 * v32 + 420];
    v7 = *(double *)&v67[2 * v32 + 416];
  }
  v33 = 3 * v7;
  if (v6 < 3 * (int)v7)
    v33 = v6;
  if (v24)
    v6 = v33;
  else
    v6 = v6;
  if ((_DWORD)a5)
    v8 = 0;
  if (v8 == 1)
  {
    v34 = (unsigned int *)(v64 + 27116);
    v35 = v11 + 61864;
    if (*(_DWORD *)(v64 + 27136))
    {
      v36 = *v12;
      if (*v12 >= 4 && *(unsigned __int8 *)(v11 + 62033) >= 4u && *(double *)(v11 + 61880) <= 10.0)
      {
        v37 = *(_DWORD *)(v10 + 56);
        if (v37 >= 6)
        {
          v38 = 10000;
          if ((v37 - 7) <= 4)
            v38 = dword_24BC09A88[v37 - 7];
          if (v36 >= 0xD)
            v36 = 13;
          v39 = v67[413] * (v36 - 3);
          if (v39 >= 10000)
            v39 = 10000;
          v40 = v39 + v38;
          DbgLog_v(1, "%s %s  - SS Scaling required  %d", (const char *)v71, " info ", v39 + v38);
          v7 = (v40 * v7) / 0x2710uLL;
          v6 = (v40 * v6) / 0x2710uLL;
          v35 = v11 + 61864;
          v34 = (unsigned int *)(v64 + 27116);
          v29 = v10;
        }
      }
    }
  }
  else
  {
    v35 = v11 + 61864;
    v34 = (unsigned int *)(v64 + 27116);
  }
  if (!(_DWORD)a5 && (_DWORD)v32)
  {
    if (v34[5]
      && *v34
      && *(unsigned __int8 *)(v35 + 169) >= 4u
      && *(double *)v35 <= 10.0
      && *(double *)(v35 + 16) <= 20.0
      && *(int *)(v29 + 56) >= 10)
    {
      v41 = v67[413] * v34[4];
      if (v41 >= 10000)
        v41 = 10000;
      v42 = v41 + 10000;
      DbgLog_v(1, "%s %s  - NM Scaling required  %d", (const char *)v71, " info ", v41 + 10000);
      v29 = v10;
      v7 = (v42 * v7) / 0x2710uLL;
      v34 = (unsigned int *)(v64 + 27116);
      v35 = v11 + 61864;
      v6 = (v42 * v6) / 0x2710uLL;
    }
    goto LABEL_84;
  }
  if (!(_DWORD)a5)
  {
LABEL_84:
    v43 = *(double *)(v29 + 928);
    v45 = *(double *)(v29 + 848);
    goto LABEL_85;
  }
  v43 = *(double *)(v29 + 928);
  if (v43 > 10.0)
    v43 = v43 * 1.5;
  v44 = *(double *)(v29 + 848);
  v45 = v44 * 1.5;
  if (v44 <= 15.0)
    v45 = *(double *)(v29 + 848);
LABEL_85:
  v46 = v45;
  v47 = v43;
  if (v7 < v47 || v6 < v46)
  {
    DbgLog_v(1, "%s %s  - Insufficient :  H %d %d  V %d %d");
    return 0;
  }
  if (v8)
  {
    if (!*v67 && *(int *)(v29 + 56) >= 9 && *(_DWORD *)(v29 + 32) - *v66 >= 24001 && *v34 <= 0x3C)
    {
      v49 = (double)v7 * 0.3 >= (double)*(unsigned int *)(v35 + 796) && *(double *)(v35 + 16) <= 20.0;
      if (!v49
        || (v67[15] & 0xFFFFFFFE) == 6 && *(_BYTE *)(v64 + 241)
        || *v65 + 2 >= *(unsigned __int8 *)(v29 + 385))
      {
        DbgLog_v(1, "%s %s  - Delay :  H %d %d  V %d %d  :  %d  :  %d  :  %d %d %d  :  %d %d", v71, " FALSE", v47, v7);
        return 0;
      }
    }
LABEL_110:
    v61 = v45;
    v62 = v6;
    v59 = v43;
    v60 = v7;
    v30 = "%s %s  - NM or noDL OK :  H %d %d  V %d %d";
    goto LABEL_111;
  }
  if (!(_DWORD)a5 || (_DWORD)v32)
    goto LABEL_110;
  v50 = *v34;
  if (*v34 < 0x11)
  {
    v52 = *v65;
    v54 = v52 > 2
       || (v53 = *v63, v53 > 2)
       || *v65 && v52 + 10 >= *(unsigned __int8 *)(v29 + 385)
       || *v63 && v53 + 10 >= *(unsigned __int8 *)(v29 + 387);
    if (v50 >= 3)
    {
      if (*(_BYTE *)(v64 + 241))
        v55 = 1;
      else
        v55 = *(_DWORD *)(v29 + 32) - *v66 < 7001;
      if (v55)
        v54 = 1;
      if (!v54)
      {
        LODWORD(v43) = *(_DWORD *)(v35 + 800);
        v56 = (double)*(unint64_t *)&v43;
        if ((double)v7 * 0.3 >= (double)*(unint64_t *)&v43)
        {
          LODWORD(v56) = *(_DWORD *)(v35 + 804);
          if ((double)v6 * 0.3 >= (double)*(unint64_t *)&v56 && *(_DWORD *)(v35 + 792) <= 0xAu)
          {
            v57 = *(_DWORD *)(v29 + 56);
            if (v57 >= 8 && (v7 > 0x31 || v57 != 8) && *(unsigned __int8 *)(v11 + 1881) > 0x1Bu)
            {
              v61 = v46;
              v62 = v6;
              v59 = v47;
              v60 = v7;
              v30 = "%s %s  - OK :  H %d %d  V %d %d";
              goto LABEL_111;
            }
          }
        }
      }
    }
    DbgLog_v(1, "%s %s  - Wait :  H %d %d  V %d %d  :  %d %d %d  :  %d %d  :  %d %d %d :  %d %d", v71, " FALSE", v47, v7, v46);
    return 0;
  }
  v51 = 1;
  DbgLog_v(1, "%s %s  - Already waited :  H %d %d  V %d %d  :  FixTime %d > 16", v71);
  return v51;
}

uint64_t API_Set_GPS_CBinEph(char *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  result = Is_GN_API_Set_Allowed(a1);
  if ((_DWORD)result)
  {
    v8 = a2 - 1;
    if ((a2 - 1) >= 0x20u)
    {
      v8 = a2 + 63;
      if ((a2 + 63) >= 0xAu)
      {
        EvCrt_v("%s FAILED:  SV = %d, Out of range !");
        return 0;
      }
    }
    if (*((unsigned __int8 *)a3 + 71) >= 2u)
    {
      EvCrt_v("%s FAILED: L5_Health = %d >1, Out of range!");
      return 0;
    }
    if (*((unsigned __int8 *)a3 + 72) >= 2u)
    {
      EvCrt_v("%s FAILED: Integrity = %d >1, Out of range!");
      return 0;
    }
    if ((unsigned __int16)((unsigned __int16)(*((_WORD *)a3 + 37) - 4096) >> 13) <= 6u)
    {
      EvCrt_v("%s FAILED: ISC_L1_CA = %d <-2^12 or >=2^12, Out of range!");
      return 0;
    }
    if ((unsigned __int16)((unsigned __int16)(*((_WORD *)a3 + 38) - 4096) >> 13) <= 6u)
    {
      EvCrt_v("%s FAILED: ISC_L5_Q5 = %d <-2^12 or >=2^12, Out of range!");
      return 0;
    }
    if ((*((_BYTE *)a3 + 78) - 16) <= 0xDFu)
    {
      EvCrt_v("%s FAILED: URA = %d <-16 or >15, Out of range!");
      return 0;
    }
    v9 = *(_QWORD *)(p_api + 248);
    EvLog_nd(a1, 2, v7, a2, *a3);
    v10 = v9 + 80 * v8;
    if ((a2 - 1) <= 0x1Fu)
    {
      v15 = (_OWORD *)(v10 + 700);
      *v15 = *(_OWORD *)a3;
      v16 = *((_OWORD *)a3 + 1);
      v17 = *((_OWORD *)a3 + 2);
      v18 = *((_OWORD *)a3 + 4);
      v15[3] = *((_OWORD *)a3 + 3);
      v15[4] = v18;
      v15[1] = v16;
      v15[2] = v17;
      result = 1;
      *(_BYTE *)(v9 + v8 + 12) = 1;
    }
    else
    {
      v11 = (_OWORD *)(v10 + 4412);
      *v11 = *(_OWORD *)a3;
      v12 = *((_OWORD *)a3 + 1);
      v13 = *((_OWORD *)a3 + 2);
      v14 = *((_OWORD *)a3 + 4);
      v11[3] = *((_OWORD *)a3 + 3);
      v11[4] = v14;
      v11[1] = v12;
      v11[2] = v13;
      result = 1;
      *(_BYTE *)(v9 + v8 + 76) = 1;
    }
  }
  return result;
}

uint64_t API_Set_Ref_Time(int a1, double i, __int16 a3, double a4)
{
  int v5;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  double v16;
  int v17;
  BOOL v18;
  int v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v25;
  double v26;
  int v27;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  double v44;
  unsigned __int8 v45[8];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD *)p_api;
  if (*(_DWORD *)p_api > 0xBu || ((1 << v5) & 0xD2C) == 0)
  {
    EvCrt_d("API_Set_Ref_Time:  REJECTED.  Incompatible GPS Exe State ", v5);
    return 0;
  }
  v10 = *(_QWORD *)(p_api + 48);
  v11 = *(_DWORD *)(v10 + 24);
  v12 = v11 - a1;
  if (v11 - a1 >= 0)
    v13 = v11 - a1;
  else
    v13 = a1 - v11;
  if (v13 >= 0xDBBA1)
    EvCrt_v("API_Set_Ref_Time:  WARNING  Large Time latency (%u - %u) = %d", a1, *(_DWORD *)(v10 + 24), v11 - a1);
  if (v11 != a1)
  {
    for (i = (double)v12 * 0.001 + i; i >= 604800.0; ++a3)
      i = i + -604800.0;
    while (i < 0.0)
    {
      i = i + 604800.0;
      --a3;
    }
    a4 = a4 + (double)v12 * 0.00000001;
  }
  v14 = 8;
  v15 = 6;
  while (v15 != -1)
  {
    v16 = TOW_stat_Promotion_timeRMSms_Table[v15];
    --v14;
    --v15;
    if (a4 <= v16)
      goto LABEL_22;
  }
  v14 = 0;
LABEL_22:
  v17 = *(_DWORD *)v10;
  if (*(_BYTE *)(v10 + 16))
    v18 = v17 < 1;
  else
    v18 = 1;
  if (v18)
  {
    if (v17)
    {
      if (!*(_BYTE *)(v10 + 16))
      {
        *(_BYTE *)(v10 + 16) = 1;
        *(_WORD *)(v10 + 28) = a3;
        EvLog_v("API_Set_Ref_Time:  Applied.  GPS Wk %d  ", a3);
        v44 = 0.0;
        *(_QWORD *)v45 = 0;
        API_Get_UTC_Cor(1, &v44);
        v29 = v44;
        GPS_To_Glon_Time(0, *(__int16 *)(v10 + 28), *(double *)(v10 + 32), v44, (int *)v45, (int *)&v45[4], (double *)(v10 + 80));
        *(_WORD *)(v10 + 76) = *(_WORD *)&v45[4];
        *(_WORD *)(v10 + 74) = *(_WORD *)v45;
        *(_BYTE *)(v10 + 72) = 1;
        *(_DWORD *)(v10 + 68) = *(_DWORD *)v10;
        v30 = -0.5;
        if (v29 > 0.0)
          v30 = 0.5;
        v31 = v29 + v30;
        if (v31 <= 2147483650.0)
        {
          if (v31 >= -2147483650.0)
            v32 = (int)v31;
          else
            v32 = 0x80000000;
        }
        else
        {
          v32 = 0x7FFFFFFFLL;
        }
        GLON_Clear_SV_Ref_State_On_LeapSec_Jump((char *)v32, v10, *(_QWORD *)(p_api + 88));
        *(_DWORD *)(v10 + 88) = v32;
        EvLog_v("API_Set_Ref_Time:  Glo Time  %d  %d  %d  %g  %d", *(__int16 *)(v10 + 74), *(__int16 *)(v10 + 76), *(unsigned __int8 *)(v10 + 72), *(double *)(v10 + 80), *(_DWORD *)(v10 + 68));
        return 1;
      }
      v19 = a3;
      v20 = 0.0;
      goto LABEL_48;
    }
    v22 = p_api;
    v20 = 0.0;
  }
  else
  {
    v21 = *(double *)(v10 + 32);
    v19 = a3;
    v20 = v21 - i + (double)(604800 * (*(__int16 *)(v10 + 28) - a3));
    if (v14 <= v17 && v20 * v20 <= a4 * (a4 * 25.0))
      goto LABEL_48;
    EvLog_v("API_Set_Ref_Time: dT %g,  Sigma %g, (%g-%g), (%d-%d)", v20, a4, v21, i, *(__int16 *)(v10 + 28), a3);
    *(_DWORD *)v10 = 0;
    *(_DWORD *)(v10 + 68) = 0;
    v22 = p_api;
    *(_DWORD *)(*(_QWORD *)(p_api + 120) + 12) = 0;
    v23 = *(_QWORD *)(v22 + 128);
    *(_BYTE *)(v23 + 136) = 1;
    *(_DWORD *)(v23 + 140) = 5;
  }
  if (*(_DWORD *)v22 == 8 || *(_DWORD *)v22 == 5)
    *(_DWORD *)v22 = 2;
  EvLog_v("API_Set_Ref_Time:  Applied.  %u  %d  %g  Sigma  %g  %d  dT  %g", a1, a3, i, a4, v14, v20);
  if (!v14)
  {
    v19 = a3;
    EvCrt_v("API_Set_Ref_Time:  WARNING: Input Ref_Sigma too big !");
    v17 = *(_DWORD *)v10;
LABEL_48:
    EvLog_v("API_Set_Ref_Time:  Not Used.  %u  %d  %g  Sigma  %g  %d  dT  %g", a1, v19, i, a4, v17, v20);
    return 0;
  }
  *(_BYTE *)(v10 + 16) = 1;
  *(_WORD *)(v10 + 28) = a3;
  *(double *)(v10 + 32) = i;
  *(_DWORD *)v10 = v14;
  *(_QWORD *)(v10 + 40) = 0;
  *(_DWORD *)(v10 + 92) = a1;
  if (v14 - 4 <= 4)
  {
    v25 = -0.5;
    if (i * 1000.0 > 0.0)
      v25 = 0.5;
    v26 = i * 1000.0 + v25;
    if (v26 <= 2147483650.0)
    {
      if (v26 >= -2147483650.0)
        v27 = (int)v26;
      else
        v27 = 0x80000000;
    }
    else
    {
      v27 = 0x7FFFFFFF;
    }
    v33 = *(_DWORD *)(v10 + 20);
    v34 = *(_DWORD *)(v10 + 24);
    v35 = v27 - v33;
    LODWORD(v44) = 0;
    v45[4] = 0;
    if (Core_Load_TTick_Cal(v33, v34, v27 - v33, (unsigned int *)&v44, &v45[4]))
    {
      v36 = v45[4];
      v37 = v45[4] >= 0x5Au ? 6 : 7;
      v38 = v45[4] >= 0x1Eu ? v37 : 8;
      if (v38 >= v14)
      {
        v39 = LODWORD(v44);
        Inc_GPS_TOW((double)SLODWORD(v44) * 0.001, (double *)(v10 + 32), (__int16 *)(v10 + 28));
        *(_DWORD *)v10 = v38;
        EvLog_v("API_Set_Ref_Time:  Calib.  %d  %g  %d  %d", v39, *(double *)(v10 + 32), v35, v36);
      }
    }
  }
  v44 = 0.0;
  *(_QWORD *)v45 = 0;
  API_Get_UTC_Cor(1, &v44);
  v40 = v44;
  GPS_To_Glon_Time(0, *(__int16 *)(v10 + 28), *(double *)(v10 + 32), v44, (int *)v45, (int *)&v45[4], (double *)(v10 + 80));
  *(_WORD *)(v10 + 76) = *(_WORD *)&v45[4];
  *(_WORD *)(v10 + 74) = *(_WORD *)v45;
  *(_BYTE *)(v10 + 72) = 1;
  *(_DWORD *)(v10 + 68) = *(_DWORD *)v10;
  v41 = -0.5;
  if (v40 > 0.0)
    v41 = 0.5;
  v42 = v40 + v41;
  if (v42 <= 2147483650.0)
  {
    if (v42 >= -2147483650.0)
      v43 = (int)v42;
    else
      v43 = 0x80000000;
  }
  else
  {
    v43 = 0x7FFFFFFFLL;
  }
  GLON_Clear_SV_Ref_State_On_LeapSec_Jump((char *)v43, v10, *(_QWORD *)(p_api + 88));
  *(_DWORD *)(v10 + 88) = v43;
  EvLog_v("API_Set_Ref_Time:  Glo Time  %d  %d  %d  %g  %d", *(__int16 *)(v10 + 74), *(__int16 *)(v10 + 76), *(unsigned __int8 *)(v10 + 72), *(double *)(v10 + 80), *(_DWORD *)(v10 + 68));
  if (!*(_DWORD *)(v10 + 100))
  {
    *(_DWORD *)(v10 + 120) = *(_DWORD *)(v10 + 20);
    *(_DWORD *)(v10 + 100) = *(_DWORD *)v10;
    *(_QWORD *)(v10 + 112) = *(_QWORD *)(v10 + 32);
    if (!*(_WORD *)(v10 + 104))
    {
      if (*(_BYTE *)(v10 + 16))
        *(_WORD *)(v10 + 104) = *(_WORD *)(v10 + 28);
    }
  }
  return 1;
}

char *GLON_Clear_SV_Ref_State_On_LeapSec_Jump(char *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  _OWORD *v6;

  v3 = *(_DWORD *)(a2 + 88);
  if (v3 >= 1 && v3 != (_DWORD)result)
  {
    v5 = -4608;
    do
    {
      v6 = (_OWORD *)(a3 + v5);
      if ((*(_DWORD *)(a3 + v5 + 10928) - 1) <= 1)
      {
        v6[682] = 0uLL;
        v6[681] = 0uLL;
        v6[680] = 0uLL;
        v6[679] = 0uLL;
        v6[678] = 0uLL;
        v6[677] = 0uLL;
        v6[676] = 0uLL;
        v6[675] = 0uLL;
        v6[674] = 0uLL;
        v6[673] = 0uLL;
        v6[672] = 0uLL;
        *(_OWORD *)((char *)v6 + 10927) = 0uLL;
      }
      v5 += 192;
    }
    while (v5);
    return EvLog_v("GLON_Clear_SV_Ref_State_On_LeapSec_Jump: Leap Sec jump [prev_LS: %d curr_LS: %d], Clearing Prev Computed GLON Orbit Ref States", *(_DWORD *)(a2 + 88), (_DWORD)result);
  }
  return result;
}

char *EvLog_GPS_IntEph(const char *a1, int a2, uint64_t a3)
{
  return EvLog_v("%s  %2d %d %3d %2d %d %3d %d %3d %3d %4d %5d %5d %4d %5d %5d %5d %5d %5d %5d %5d %5d %5d %8d %11d %10u %10u %11d %11d %11d %8d %2d %2d %5d %5d", a1, a2, *(unsigned __int8 *)(a3 + 8), *(char *)(a3 + 9), *(unsigned __int8 *)(a3 + 10), *(unsigned __int8 *)(a3 + 11), *(unsigned __int8 *)(a3 + 12), *(char *)(a3 + 13), *(char *)(a3 + 14), *(char *)(a3 + 15), *(unsigned __int16 *)(a3 + 16), *(unsigned __int16 *)(a3 + 18), *(unsigned __int16 *)(a3 + 20), *(unsigned __int16 *)(a3 + 22), *(__int16 *)(a3 + 24), *(__int16 *)(a3 + 26), *(__int16 *)(a3 + 28),
           *(__int16 *)(a3 + 30),
           *(__int16 *)(a3 + 32),
           *(__int16 *)(a3 + 34),
           *(__int16 *)(a3 + 36),
           *(__int16 *)(a3 + 38),
           *(__int16 *)(a3 + 40),
           *(_DWORD *)(a3 + 44),
           *(_DWORD *)(a3 + 48),
           *(_DWORD *)(a3 + 52),
           *(_DWORD *)(a3 + 56),
           *(_DWORD *)(a3 + 60),
           *(_DWORD *)(a3 + 64),
           *(_DWORD *)(a3 + 68),
           *(_DWORD *)(a3 + 72),
           *(unsigned __int8 *)(a3 + 76),
           *(unsigned __int8 *)(a3 + 77),
           *(__int16 *)(a3 + 78),
           *(__int16 *)(a3 + 80));
}

uint64_t Is_GPS_IntEph_Valid(uint64_t a1, int a2, uint64_t a3)
{
  int v3;
  int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  if ((a2 + 53) >= 0xF6u)
    v3 = 5;
  else
    v3 = (a2 - 1) < 0x20;
  if (!v3)
  {
    EvCrt_v("%s FAILED: Sat_ID = %d, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a3 + 8) >= 4u)
  {
    EvCrt_v("%s FAILED: CodeOnL2 = %d >3, Out of range!");
    return 0;
  }
  if ((*(_BYTE *)(a3 + 9) - 16) <= 0xDFu)
  {
    EvCrt_v("%s FAILED: URA = %d <-16 or >15, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a3 + 10) >= 0x40u)
  {
    EvCrt_v("%s FAILED: SVHealth = %d >63, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a3 + 11) >= 2u)
  {
    EvCrt_v("%s FAILED: FitIntFlag = %d >1, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a3 + 12) >= 0x20u)
  {
    EvCrt_v("%s FAILED: AODA = %d >31, Out of range!");
    return 0;
  }
  if (*(char *)(a3 + 13) >= 2)
  {
    EvCrt_v("%s FAILED: L2Pflag = %d <0 or >1, Out of range!");
    return 0;
  }
  if (*(unsigned __int16 *)(a3 + 16) >= 0xBDCu)
  {
    EvCrt_v("%s FAILED: Week = %d >=3036, Out of range!");
    return 0;
  }
  if (*(unsigned __int16 *)(a3 + 22) >= 0x400u)
  {
    EvCrt_v("%s FAILED: IODC = %d >1023, Out of range!");
    return 0;
  }
  if ((unsigned __int16)((unsigned __int16)(*(_WORD *)(a3 + 28) - 0x2000) >> 14) <= 2u)
  {
    EvCrt_v("%s FAILED: IDot = %d <-2^13 or >=2^13, Out of range!");
    return 0;
  }
  if ((*(_DWORD *)(a3 + 44) - 0x200000) >> 22 != 1023)
  {
    EvCrt_v("%s FAILED: af0 = %d <-2^21 or >=2^21, Out of range!");
    return 0;
  }
  v4 = *(_DWORD *)(a3 + 72);
  if ((v4 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("%s FAILED: OmegaDot = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  v5 = 0.0;
  if ((a2 + 53) >= 0xF6u)
    v5 = 0.000000314159265;
  v6 = (double)v4 * 3.57157734e-13;
  if (v6 < -0.00000198862815)
  {
    EvCrt_v("%s FAILED: OmegaDot = %e < %e rad/s, Unrealistic value!");
    return 0;
  }
  if (v6 > v5)
  {
    EvCrt_v("%s FAILED: OmegaDot = %e > %e rad/s, Unrealistic value!");
    return 0;
  }
  if (*(unsigned __int16 *)(a3 + 20) >= 0x93A8u)
  {
    EvCrt_v("%s FAILED: toe = %d >=37800, Out of range!");
    return 0;
  }
  if (*(unsigned __int16 *)(a3 + 18) >= 0x93A8u)
  {
    EvCrt_v("%s FAILED: toc = %d >37800, Out of range!");
    return 0;
  }
  if (v3 == 5)
    v7 = 0.1;
  else
    v7 = 0.03;
  LODWORD(v5) = *(_DWORD *)(a3 + 52);
  v8 = (double)*(unint64_t *)&v5 * 1.16415322e-10;
  if (v8 < 0.0)
  {
    EvCrt_v("%s FAILED: e = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v8 > v7)
  {
    EvCrt_v("%s FAILED: e = %g > %g, Unrealistic value!");
    return 0;
  }
  if (v3 == 5)
    v9 = 7000.0;
  else
    v9 = 5800.0;
  LODWORD(v8) = *(_DWORD *)(a3 + 56);
  v10 = (double)*(unint64_t *)&v8 * 0.00000190734863;
  if (v10 < 4800.0)
  {
    EvCrt_v("%s FAILED: APowerHalf = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v10 > v9)
  {
    EvCrt_v("%s FAILED: APowerHalf = %g > %g, Unrealistic value!");
    return 0;
  }
  if (*(unsigned __int8 *)(a3 + 76) >= 2u)
  {
    EvCrt_v("%s FAILED: L5_Health = %d >1, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a3 + 77) >= 2u)
  {
    EvCrt_v("%s FAILED: Integrity = %d >1, Out of range!");
    return 0;
  }
  if ((unsigned __int16)((unsigned __int16)(*(_WORD *)(a3 + 78) - 4096) >> 13) <= 6u)
  {
    EvCrt_v("%s FAILED: ISC_L1_CA = %d <-2^12 or >=2^12, Out of range!");
    return 0;
  }
  if ((unsigned __int16)((unsigned __int16)(*(_WORD *)(a3 + 80) - 4096) >> 13) <= 6u)
  {
    EvCrt_v("%s FAILED: ISC_L5_Q5 = %d <-2^12 or >=2^12, Out of range!");
    return 0;
  }
  return 1;
}

char *EvLog_ABDS_CNAV_Eph_El(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = a1[1];
  v2 = (char)a1[131];
  v3 = a1[132];
  return EvLog_v("GN_ABDS_Set_CNAV_Eph_El: %2u %2u %1u %1u %6u  %4u %4u %4u %4u  %9d %8d  %6d %8d  %11D %11U %11D %11D %11D  %7d %6d  %6d %6d %8d %8d %8d %8d   %9d %8d %5d %5u  %2u %1u %1u %2u  %5d %5d %5d %5d  %1u %1u %1u %1u %1u %1u  %1d  %4d  %1u", *a1, v4, a1[2], a1[3], *((unsigned int *)a1 + 1), *((unsigned __int16 *)a1 + 4), *((unsigned __int16 *)a1 + 5), *((unsigned __int16 *)a1 + 6), *((unsigned __int16 *)a1 + 7), *((unsigned int *)a1 + 4), *((unsigned int *)a1 + 5), *((unsigned int *)a1 + 6), *((unsigned int *)a1 + 7), *((_QWORD *)a1 + 4), *((_QWORD *)a1 + 5), *((_QWORD *)a1 + 6), *((_QWORD *)a1 + 7),
           *((_QWORD *)a1 + 8),
           *((unsigned int *)a1 + 18),
           *((__int16 *)a1 + 38),
           *((__int16 *)a1 + 39),
           *((__int16 *)a1 + 40),
           *((unsigned int *)a1 + 21),
           *((unsigned int *)a1 + 22),
           *((unsigned int *)a1 + 23),
           *((unsigned int *)a1 + 24),
           *((unsigned int *)a1 + 25),
           *((unsigned int *)a1 + 26),
           *((__int16 *)a1 + 54),
           *((unsigned __int16 *)a1 + 55),
           a1[112],
           a1[113],
           a1[114],
           a1[115],
           *((__int16 *)a1 + 58),
           *((__int16 *)a1 + 59),
           *((__int16 *)a1 + 60),
           *((__int16 *)a1 + 61),
           a1[124],
           a1[125],
           a1[126],
           a1[127],
           a1[128],
           a1[129],
           (char)a1[130],
           v2,
           v3);
}

char *EvLog_ANVIC_Eph_El(unsigned __int8 *a1)
{
  return EvLog_v("GN_ANVIC_Set_Eph_El: %2u %1u %1u %1u %3u %3d  %4u %5d %5d %8d %6d %4d  %1d  %6d  %5d %10u %10u %11d %11d %11d %11d %6d %8d  %6d %6d %6d %6d %6d %6d  %1u", *a1, a1[1], a1[2], a1[3], a1[4], (char)a1[5], *((unsigned __int16 *)a1 + 3), *((unsigned __int16 *)a1 + 4), *((unsigned __int16 *)a1 + 5), *((_DWORD *)a1 + 3), *((__int16 *)a1 + 8), (char)a1[18], a1[19], *((__int16 *)a1 + 10), *((__int16 *)a1 + 11), *((_DWORD *)a1 + 6), *((_DWORD *)a1 + 7),
           *((_DWORD *)a1 + 8),
           *((_DWORD *)a1 + 9),
           *((_DWORD *)a1 + 10),
           *((_DWORD *)a1 + 11),
           *((_DWORD *)a1 + 12),
           *((_DWORD *)a1 + 13),
           *((__int16 *)a1 + 28),
           *((__int16 *)a1 + 29),
           *((__int16 *)a1 + 30),
           *((__int16 *)a1 + 31),
           *((__int16 *)a1 + 32),
           *((__int16 *)a1 + 33),
           a1[68]);
}

BOOL Is_BDS_IntEph_Real(uint64_t a1)
{
  return *(_DWORD *)(a1 + 36)
      || *(_DWORD *)(a1 + 88)
      || *(_WORD *)(a1 + 92)
      || *(_DWORD *)(a1 + 40)
      || *(_DWORD *)(a1 + 44)
      || *(_DWORD *)(a1 + 112)
      || *(_DWORD *)(a1 + 108)
      || *(_DWORD *)(a1 + 104)
      || *(_DWORD *)(a1 + 100)
      || *(_WORD *)(a1 + 96)
      || *(_WORD *)(a1 + 94)
      || *(_WORD *)(a1 + 124) != 0;
}

void *GNSS_HL_System_Start_Up(uint64_t a1)
{
  _QWORD *v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  char v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _OWORD *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _OWORD *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  _OWORD *v99;
  void *result;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  char v110;
  _OWORD __src[1765];
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _OWORD v124[2];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  _OWORD v137[2];
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  _OWORD v150[2];
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _OWORD v159[5];
  uint64_t v160;
  uint64_t v161;

  v1 = (_QWORD *)MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v4 = (uint64_t)v1;
  v161 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned __int8 *)(v1[7] + 62170);
  if (v2)
  {
    v6 = v1[9];
    v7 = *(_DWORD *)(v1[14] + 436);
    v8 = *(_DWORD *)(v6 + 16);
    v9 = *(_BYTE *)(v6 + 21);
    v10 = *(_WORD *)(v6 + 1718);
    v110 = *(_BYTE *)(v6 + 248);
    v11 = *(_QWORD *)(v6 + 208);
    v108 = *(_OWORD *)(v6 + 216);
    v109 = *(_OWORD *)(v6 + 192);
    v106 = *(_OWORD *)(v6 + 88);
    v107 = *(_OWORD *)(v6 + 72);
    v104 = *(_OWORD *)(v6 + 120);
    v105 = *(_OWORD *)(v6 + 104);
    v102 = *(_OWORD *)(v6 + 152);
    v103 = *(_OWORD *)(v6 + 136);
    v101 = *(_OWORD *)(v6 + 168);
    v12 = *(_QWORD *)(v6 + 184);
    v155 = xmmword_257A2EA78;
    v156 = unk_257A2EA88;
    v157 = xmmword_257A2EA98;
    v158 = unk_257A2EAA8;
    v151 = xmmword_257A2EA38;
    v152 = unk_257A2EA48;
    v153 = xmmword_257A2EA58;
    v154 = unk_257A2EA68;
    v13 = *(_OWORD *)(v6 + 425);
    v14 = *(_OWORD *)(v6 + 441);
    v15 = *(_OWORD *)(v6 + 393);
    __src[10] = *(_OWORD *)(v6 + 409);
    __src[11] = v13;
    __src[12] = v14;
    *(_OWORD *)((char *)&__src[12] + 10) = *(_OWORD *)(v6 + 451);
    v16 = *(_OWORD *)(v6 + 361);
    v17 = *(_OWORD *)(v6 + 377);
    v18 = *(_OWORD *)(v6 + 329);
    __src[6] = *(_OWORD *)(v6 + 345);
    __src[7] = v16;
    __src[8] = v17;
    __src[9] = v15;
    v19 = *(_OWORD *)(v6 + 297);
    v20 = *(_OWORD *)(v6 + 313);
    v21 = *(_OWORD *)(v6 + 265);
    __src[2] = *(_OWORD *)(v6 + 281);
    __src[3] = v19;
    v22 = *(_QWORD *)(v6 + 232);
    v23 = *(_WORD *)(v6 + 240);
    __src[4] = v20;
    __src[5] = v18;
    __src[0] = *(_OWORD *)(v6 + 249);
    __src[1] = v21;
    v24 = *(_OWORD *)(v6 + 704);
    v148 = *(_OWORD *)(v6 + 688);
    v149 = v24;
    v150[0] = *(_OWORD *)(v6 + 720);
    *(_OWORD *)((char *)v150 + 10) = *(_OWORD *)(v6 + 730);
    v25 = *(_OWORD *)(v6 + 640);
    v144 = *(_OWORD *)(v6 + 624);
    v145 = v25;
    v26 = *(_OWORD *)(v6 + 672);
    v146 = *(_OWORD *)(v6 + 656);
    v147 = v26;
    v27 = *(_OWORD *)(v6 + 576);
    v140 = *(_OWORD *)(v6 + 560);
    v141 = v27;
    v28 = *(_OWORD *)(v6 + 608);
    v142 = *(_OWORD *)(v6 + 592);
    v143 = v28;
    v29 = *(_OWORD *)(v6 + 544);
    v138 = *(_OWORD *)(v6 + 528);
    v139 = v29;
    v30 = *(_OWORD *)(v6 + 984);
    v135 = *(_OWORD *)(v6 + 968);
    v136 = v30;
    v137[0] = *(_OWORD *)(v6 + 1000);
    *(_OWORD *)((char *)v137 + 10) = *(_OWORD *)(v6 + 1010);
    v31 = *(_OWORD *)(v6 + 920);
    v131 = *(_OWORD *)(v6 + 904);
    v132 = v31;
    v32 = *(_OWORD *)(v6 + 952);
    v133 = *(_OWORD *)(v6 + 936);
    v134 = v32;
    v33 = *(_OWORD *)(v6 + 856);
    v127 = *(_OWORD *)(v6 + 840);
    v128 = v33;
    v34 = *(_OWORD *)(v6 + 888);
    v129 = *(_OWORD *)(v6 + 872);
    v130 = v34;
    v35 = *(_OWORD *)(v6 + 824);
    v125 = *(_OWORD *)(v6 + 808);
    v126 = v35;
    v36 = *(_OWORD *)(v6 + 1264);
    v122 = *(_OWORD *)(v6 + 1248);
    v123 = v36;
    v124[0] = *(_OWORD *)(v6 + 1280);
    *(_OWORD *)((char *)v124 + 10) = *(_OWORD *)(v6 + 1290);
    v37 = *(_OWORD *)(v6 + 1200);
    v118 = *(_OWORD *)(v6 + 1184);
    v119 = v37;
    v38 = *(_OWORD *)(v6 + 1232);
    v120 = *(_OWORD *)(v6 + 1216);
    v121 = v38;
    v39 = *(_OWORD *)(v6 + 1136);
    v114 = *(_OWORD *)(v6 + 1120);
    v115 = v39;
    v40 = *(_OWORD *)(v6 + 1168);
    v116 = *(_OWORD *)(v6 + 1152);
    v117 = v40;
    v41 = *(_OWORD *)(v6 + 1104);
    v112 = *(_OWORD *)(v6 + 1088);
    v113 = v41;
    v42 = *(_OWORD *)(qword_257A47BB0 + 16);
    v159[0] = *(_OWORD *)qword_257A47BB0;
    v159[1] = v42;
    v44 = *(_OWORD *)(qword_257A47BB0 + 48);
    v43 = *(_OWORD *)(qword_257A47BB0 + 64);
    v45 = *(_OWORD *)(qword_257A47BB0 + 32);
    v160 = *(_QWORD *)(qword_257A47BB0 + 80);
    v159[3] = v44;
    v159[4] = v43;
    v159[2] = v45;
    EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (uint64_t)v159);
    GNSS_HL_Data_Bases_Clear(v4);
    GNSS_HL_Data_Bases_Init((_QWORD *)v4);
    GNSS_HL_Data_Bases_Init_NV(v4);
    v46 = *(_QWORD *)(v4 + 72);
    *(_DWORD *)(v46 + 1756) = v7;
    *(_DWORD *)(v46 + 16) = v8;
    *(_BYTE *)(v46 + 21) = v9;
    *(_WORD *)(v46 + 1718) = v10;
    *(_BYTE *)(v46 + 248) = v110;
    *(_OWORD *)(v6 + 192) = v109;
    *(_QWORD *)(v6 + 208) = v11;
    *(_OWORD *)(v6 + 216) = v108;
    *(_QWORD *)(v6 + 232) = v22;
    *(_WORD *)(v6 + 240) = v23;
    *(_OWORD *)(v6 + 72) = v107;
    *(_OWORD *)(v6 + 88) = v106;
    *(_OWORD *)(v6 + 104) = v105;
    *(_OWORD *)(v6 + 120) = v104;
    *(_OWORD *)(v6 + 136) = v103;
    *(_OWORD *)(v6 + 152) = v102;
    *(_OWORD *)(v6 + 168) = v101;
    *(_QWORD *)(v6 + 184) = v12;
    *(_BYTE *)(*(_QWORD *)(v4 + 72) + 20) = 0;
    xmmword_257A2EA58 = v153;
    unk_257A2EA68 = v154;
    xmmword_257A2EA38 = v151;
    unk_257A2EA48 = v152;
    xmmword_257A2EA78 = v155;
    unk_257A2EA88 = v156;
    xmmword_257A2EA98 = v157;
    unk_257A2EAA8 = v158;
    v47 = (_OWORD *)(*(_QWORD *)(v4 + 72) + 249);
    v48 = __src[1];
    *v47 = __src[0];
    v50 = __src[4];
    v49 = __src[5];
    v51 = __src[2];
    v47[3] = __src[3];
    v47[4] = v50;
    v47[1] = v48;
    v47[2] = v51;
    v53 = __src[8];
    v52 = __src[9];
    v54 = __src[6];
    v47[7] = __src[7];
    v47[8] = v53;
    v47[5] = v49;
    v47[6] = v54;
    *(_OWORD *)((char *)v47 + 202) = *(_OWORD *)((char *)&__src[12] + 10);
    v55 = __src[12];
    v56 = __src[10];
    v47[11] = __src[11];
    v47[12] = v55;
    v47[9] = v52;
    v47[10] = v56;
    v57 = *(_OWORD **)(v4 + 72);
    v58 = v139;
    v57[33] = v138;
    v57[34] = v58;
    v59 = v143;
    v57[37] = v142;
    v57[38] = v59;
    v60 = v141;
    v57[35] = v140;
    v57[36] = v60;
    v61 = v147;
    v57[41] = v146;
    v57[42] = v61;
    v62 = v145;
    v57[39] = v144;
    v57[40] = v62;
    v63 = v150[0];
    v64 = v148;
    v57[44] = v149;
    v57[45] = v63;
    v57[43] = v64;
    *(_OWORD *)((char *)v57 + 730) = *(_OWORD *)((char *)v150 + 10);
    v65 = (_OWORD *)(*(_QWORD *)(v4 + 72) + 808);
    v66 = v126;
    *v65 = v125;
    v65[1] = v66;
    v67 = v130;
    v65[4] = v129;
    v65[5] = v67;
    v68 = v128;
    v65[2] = v127;
    v65[3] = v68;
    v69 = v134;
    v65[8] = v133;
    v65[9] = v69;
    v70 = v132;
    v65[6] = v131;
    v65[7] = v70;
    *(_OWORD *)((char *)v65 + 202) = *(_OWORD *)((char *)v137 + 10);
    v71 = v137[0];
    v72 = v135;
    v65[11] = v136;
    v65[12] = v71;
    v65[10] = v72;
    v73 = *(_OWORD **)(v4 + 72);
    v74 = v112;
    v73[69] = v113;
    v73[68] = v74;
    v75 = v116;
    v73[73] = v117;
    v73[72] = v75;
    v76 = v114;
    v73[71] = v115;
    v73[70] = v76;
    v77 = v120;
    v73[77] = v121;
    v73[76] = v77;
    v78 = v118;
    v73[75] = v119;
    v73[74] = v78;
    v73[80] = v124[0];
    v79 = v122;
    v73[79] = v123;
    v73[78] = v79;
    *(_OWORD *)((char *)v73 + 1290) = *(_OWORD *)((char *)v124 + 10);
    GN_GPS_Set_Config((uint64_t)v159);
  }
  else
  {
    GNSS_HL_Data_Bases_Init_NV((uint64_t)v1);
    GNSS_HL_Data_Bases_TimeSynch((_QWORD *)v4, v80, v81);
  }
  if (v5)
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + 62170) = 1;
  v82 = *(int **)(v4 + 8);
  v83 = *(_QWORD *)(v4 + 16);
  v84 = *v82;
  *(_DWORD *)v83 = *v82;
  *(_DWORD *)(v83 + 4) = v82[4];
  *(_QWORD *)(v83 + 8) = *((_QWORD *)v82 + 3);
  v86 = *(_QWORD *)(v4 + 72);
  v85 = *(_QWORD *)(v4 + 80);
  v87 = *(_DWORD *)(v86 + 1660);
  v88 = v87 + v84;
  if (!v87)
    v88 = 0;
  *(_DWORD *)(v86 + 1712) = v88;
  v89 = *(unsigned __int16 *)(v86 + 240);
  if (*(_WORD *)(v86 + 240))
  {
    *(_QWORD *)(v86 + 1696) = 0;
    *(double *)(v86 + 1704) = (double)v89 * 0.000000001;
    *(_QWORD *)(v85 + 920) = 0x4163125300000000;
    *(_QWORD *)(v85 + 184) = 0;
    *(_BYTE *)(p_NA + 6) = 0;
  }
  SV_Data_Decode_Init(*(_QWORD *)(v4 + 136));
  SV_Data_Decode_Update_Wrapper(v4);
  GPS_State_Update_Init(*(_QWORD *)(v4 + 144), *(_QWORD *)(v4 + 184), *(_QWORD *)(v4 + 48), *(_QWORD **)(v4 + 56), *(_QWORD *)(v4 + 72), *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88));
  GLON_State_Update_Init(*(char **)(v4 + 144), *(_QWORD *)(v4 + 48), *(int **)(v4 + 56), *(_QWORD *)(v4 + 88));
  bzero(*(void **)(v4 + 120), 0xC70uLL);
  SV_Gen_Meas_Update_Wrapper(v4);
  Nav_Kalman_Update_Init(*(_QWORD *)(v4 + 128));
  Nav_Kalman_Update_Wrapper(v4);
  if (v3)
  {
    v90 = *(_QWORD *)(v4 + 104);
    *(_QWORD *)(v90 + 248) = *(_QWORD *)(v90 + 240);
    *(_BYTE *)(v90 + 308) = 0;
    v91 = *(_QWORD *)(v4 + 104);
    *(_QWORD *)(v91 + 320) = *(_QWORD *)(v91 + 312);
    *(_BYTE *)(v91 + 380) = 0;
    v92 = *(_QWORD *)(v4 + 104);
    *(_QWORD *)(v92 + 392) = *(_QWORD *)(v92 + 384);
    *(_BYTE *)(v92 + 452) = 0;
  }
  v93 = *(_QWORD *)(v4 + 152);
  *(_BYTE *)(v93 + 48) = 0;
  *(_OWORD *)(v93 + 16) = 0u;
  *(_OWORD *)(v93 + 32) = 0u;
  *(_OWORD *)v93 = 0u;
  *(_WORD *)(v93 + 2) = -1;
  *(_BYTE *)v93 = 1;
  Pre_Positioning_Update_Wrapper(v4);
  bzero(__src, 0x6E48uLL);
  v94 = 560;
  do
  {
    v95 = (char *)__src + v94;
    *(_QWORD *)v95 = 0;
    *((_WORD *)v95 + 4) = 0;
    *(_QWORD *)(v95 + 12) = 0;
    *((_QWORD *)v95 + 6) = 0;
    *((_QWORD *)v95 + 3) = 0;
    *((_QWORD *)v95 + 4) = 0;
    v94 += 56;
    *(_QWORD *)(v95 + 38) = 0;
  }
  while (v95 + 56 != (char *)&__src[483]);
  v96 = -4608;
  do
  {
    v97 = (char *)__src + v96;
    *((_OWORD *)v97 + 772) = 0uLL;
    *((_OWORD *)v97 + 771) = 0uLL;
    *((_BYTE *)&__src[773] + v96) = 0;
    v96 += 36;
  }
  while (v96);
  v98 = -15872;
  do
  {
    v99 = (_OWORD *)((char *)__src + v98);
    v99[1769] = 0uLL;
    v99[1768] = 0uLL;
    v99[1767] = 0uLL;
    v99[1766] = 0uLL;
    v99[1765] = 0uLL;
    v99[1764] = 0uLL;
    v99[1763] = 0uLL;
    *(__int128 *)((char *)&v116 + v98 + 9) = 0uLL;
    v98 += 124;
  }
  while (v98);
  *(_QWORD *)((char *)&__src[1764] + 4) = 0;
  HIDWORD(__src[1764]) = 0;
  memset(&__src[1763], 0, 18);
  result = memcpy(*(void **)(v4 + 112), __src, 0x6E50uLL);
  *(_QWORD *)(*(_QWORD *)(v4 + 112) + 384) = *(_QWORD *)(v4 + 112);
  *(_DWORD *)v4 = 11;
  return result;
}

const void **GNSS_HL_System_Re_Start(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  double v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  double v20;
  double v21;
  unsigned int v22;
  double v23;
  uint64_t v24;
  int i;
  uint64_t v26;
  unsigned int j;
  double v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  double *v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  double *v41;
  double v42;
  double v43;
  unsigned int v44;
  double *v45;
  double v46;
  double *v47;
  const void **result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53[2];
  int v54[2];
  int v55;
  __int16 v56;
  double v57[13];

  v57[12] = *(double *)MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)v2 = *(_DWORD *)v3;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(v3 + 16);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(v3 + 24);
  v4 = v2 + 7208;
  v5 = -4608;
  do
  {
    v6 = v4 + v5;
    *(_OWORD *)(v6 + 4624) = 0uLL;
    *(_OWORD *)(v6 + 4608) = 0uLL;
    *(_BYTE *)(v4 + v5 + 4640) = 0;
    v5 += 36;
  }
  while (v5);
  bzero(*(void **)(a1 + 24), 0x3E00uLL);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_DWORD *)(v7 + 1660);
  if (v8)
    v8 += **(_DWORD **)(a1 + 8);
  *(_DWORD *)(v7 + 1712) = v8;
  if (*(_DWORD *)a1 == 6)
  {
    v9 = *(unsigned __int16 *)(v7 + 240);
    if (*(_WORD *)(v7 + 240))
    {
      v10 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(v7 + 1696) = 0;
      v11 = (double)v9 * 0.000000001;
      *(double *)(v7 + 1704) = v11;
      *(_QWORD *)(v10 + 920) = 0x4163125300000000;
      *(_QWORD *)(v10 + 184) = 0;
      *(_BYTE *)(p_NA + 6) = 0;
      v12 = v11 * 299792458.0 / 3.0 * (v11 * 299792458.0 / 3.0);
    }
    else
    {
      v15 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 12);
      v12 = 0.0;
      if (v15 >= 0x493E1)
      {
        v16 = *(double *)(v7 + 1704);
        v17 = 0x3E877CF447651960;
        if (v16 >= 0.000000175)
        {
          if (v15 < 0xDBBA1 || v16 >= 0.0000005)
            goto LABEL_18;
          v17 = 0x3EA0C6F7A0B5ED8ELL;
        }
        *(_QWORD *)(v7 + 1704) = v17;
      }
    }
LABEL_18:
    v13 = *(_QWORD *)(a1 + 72);
    goto LABEL_19;
  }
  v13 = *(_QWORD *)(a1 + 72);
  v12 = 0.0;
  if (*(_DWORD *)a1 != 9)
    goto LABEL_48;
  v14 = *(_DWORD *)(v13 + 244);
  if (v14 < 0x191)
    goto LABEL_48;
  *(_DWORD *)a1 = 6;
  EvCrt_v("GNSS_HL_System_Re_Start: Deprecate SLEEP_RESTART to COMA_RESTART since ME Wakeup TTick Unc = %d > 400 us", v14);
  if (*(_DWORD *)a1 != 6)
    goto LABEL_48;
LABEL_19:
  v57[0] = 0.0;
  v56 = 0;
  v55 = 0;
  v18 = *(int **)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 80);
  v20 = *(double *)(v19 + 872);
  if (v20 >= 9999000.0)
    v21 = (double)TOW_stat_ms[*v18];
  else
    v21 = v20 * 0.0000100069229 + 1.0;
  v22 = *(_DWORD *)(v13 + 244);
  if (v22)
  {
    v23 = fmax((double)v22 * 0.001, 1.0);
  }
  else
  {
    LODWORD(v20) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 12);
    v23 = (double)*(unint64_t *)&v20 * 0.00006;
  }
  v24 = *(_QWORD *)(a1 + 16);
  if (v21 + v23 <= 600000.0)
  {
    for (i = 10; i != -1; --i)
    {
      if (TOW_stat_ms[i] >= (int)(v21 + v23))
        break;
    }
  }
  else
  {
    i = 0;
  }
  v26 = v18[17];
  j = i;
  if ((_DWORD)v26 != *v18)
  {
    v28 = v23 + (double)(TOW_stat_ms[v26] + 1);
    if (v28 <= 600000.0)
    {
      for (j = 10; j != -1; --j)
      {
        if (TOW_stat_ms[j] >= (int)v28)
          break;
      }
    }
    else
    {
      j = 0;
    }
  }
  *(_DWORD *)(v19 + 56) = i;
  *(_DWORD *)(v19 + 204) = j;
  *((_BYTE *)v18 + 4) = 0;
  *v18 = i;
  v18[17] = j;
  if (!Core_Load_ApxTime(*(unsigned int *)(v24 + 4), &v56, v57, &v55))
    goto LABEL_43;
  v29 = v56;
  if (v56 < 1025)
    goto LABEL_43;
  if (v55 <= i)
  {
    if (*((_BYTE *)v18 + 16))
      goto LABEL_43;
    *((_BYTE *)v18 + 16) = 1;
    *((_WORD *)v18 + 14) = v29;
  }
  else
  {
    *v18 = v55;
    *((_BYTE *)v18 + 4) = 0;
    *((_BYTE *)v18 + 16) = 1;
    *(_QWORD *)(v18 + 5) = *(_QWORD *)v24;
    *((_QWORD *)v18 + 1) = *(_QWORD *)(v24 + 8);
    *((_WORD *)v18 + 14) = v29;
    *((double *)v18 + 4) = v57[0];
    *((_QWORD *)v18 + 5) = 0;
  }
  *(_QWORD *)v53 = 0;
  *(_QWORD *)v54 = 0;
  API_Get_UTC_Cor(1, (double *)v53);
  GPS_To_Glon_Time(0, *((__int16 *)v18 + 14), *((double *)v18 + 4), *(double *)v53, v54, &v54[1], (double *)v18 + 10);
  *((_WORD *)v18 + 38) = v54[1];
  *((_WORD *)v18 + 37) = v54[0];
  *((_BYTE *)v18 + 72) = 1;
  v18[17] = *v18;
LABEL_43:
  v30 = *(_QWORD *)(a1 + 120);
  if (*v18 < 10 || *(int *)(v30 + 12) < 4)
    *(_DWORD *)(v30 + 12) = 0;
  else
    *(_DWORD *)(v30 + 12) = 3;
  *(_BYTE *)(v30 + 4) = 0;
LABEL_48:
  SV_Gen_Meas_Update_Wrapper(a1);
  SV_Data_Decode_Update_Wrapper(a1);
  SV_State_Update_Wrapper(a1);
  v31 = *(_QWORD *)(a1 + 128);
  v32 = *(_QWORD *)(a1 + 80);
  v53[0] = 0;
  *(_BYTE *)(v31 + 30) = 0;
  *(_OWORD *)(v31 + 15592) = 0u;
  ++*(_DWORD *)(v31 + 27120);
  ++*(_DWORD *)(v31 + 27132);
  v33 = *(_DWORD *)(v32 + 36);
  v34 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v33;
  if (v34 >= 1)
  {
    v35 = v34 / *(_DWORD *)(v13 + 1652);
    *(_DWORD *)(v31 + 27120) += v35;
    *(_DWORD *)(v31 + 27132) += v35;
  }
  if (*(_DWORD *)a1 == 9
    && (*(_DWORD *)(v31 + 20) - 4) <= 4
    && *(_DWORD *)(v31 + 27116)
    && *(_DWORD *)(v31 + 27128))
  {
    v36 = (double *)*(unsigned __int16 *)(v31 + 18);
  }
  else
  {
    v36 = 0;
  }
  v37 = *(_DWORD *)(v13 + 1652);
  if (v37 * *(_DWORD *)(v31 + 27120) > (1000 * (_DWORD)v36) && *(double *)(v32 + 360) > 0.0)
  {
    NK_Decay_Speed(v36, v37, v32 + 32, v31);
    *(_QWORD *)(v31 + 27344) = 0;
    *(_DWORD *)(v31 + 27352) = 0;
    *(_QWORD *)(v31 + 27328) = 0;
    *(_DWORD *)(v31 + 27336) = 0;
  }
  *(_QWORD *)(v31 + 27112) = 0;
  *(_DWORD *)(v31 + 27120) = 0;
  *(_QWORD *)(v31 + 152) = 0;
  *(_OWORD *)(v31 + 27128) = 0u;
  *(_DWORD *)(v31 + 160) = -1;
  *(_DWORD *)(v31 + 276) = 0;
  *(_BYTE *)(v31 + 68160) = 0;
  *(_DWORD *)(v31 + 68164) = 0;
  *(_BYTE *)(v31 + 20120) = 0;
  *(_BYTE *)(v31 + 20136) = 0;
  *(_OWORD *)(v31 + 25792) = 0u;
  *(_OWORD *)(v31 + 25808) = 0u;
  *(_OWORD *)(v31 + 25824) = 0u;
  *(_OWORD *)(v31 + 25840) = 0u;
  *(_OWORD *)(v31 + 25856) = 0u;
  *(_OWORD *)(v31 + 25872) = 0u;
  *(_OWORD *)(v31 + 25888) = 0u;
  *(_OWORD *)(v31 + 25904) = 0u;
  *(_OWORD *)(v31 + 16104) = 0u;
  *(_OWORD *)(v31 + 16120) = 0u;
  *(_OWORD *)(v31 + 16072) = 0u;
  *(_OWORD *)(v31 + 16088) = 0u;
  *(_OWORD *)(v31 + 16040) = 0u;
  *(_OWORD *)(v31 + 16056) = 0u;
  *(_OWORD *)(v31 + 16008) = 0u;
  *(_OWORD *)(v31 + 16024) = 0u;
  *(_OWORD *)(v31 + 15976) = 0u;
  *(_OWORD *)(v31 + 15992) = 0u;
  *(_OWORD *)(v31 + 15944) = 0u;
  *(_OWORD *)(v31 + 15960) = 0u;
  *(_OWORD *)(v31 + 15912) = 0u;
  *(_OWORD *)(v31 + 15928) = 0u;
  *(_OWORD *)(v31 + 15880) = 0u;
  *(_OWORD *)(v31 + 15896) = 0u;
  *(_OWORD *)(v31 + 15848) = 0u;
  *(_OWORD *)(v31 + 15864) = 0u;
  *(_OWORD *)(v31 + 15816) = 0u;
  *(_OWORD *)(v31 + 15832) = 0u;
  *(_OWORD *)(v31 + 15784) = 0u;
  *(_OWORD *)(v31 + 15800) = 0u;
  *(_OWORD *)(v31 + 15752) = 0u;
  *(_OWORD *)(v31 + 15768) = 0u;
  *(_OWORD *)(v31 + 15720) = 0u;
  *(_OWORD *)(v31 + 15736) = 0u;
  *(_OWORD *)(v31 + 15688) = 0u;
  *(_OWORD *)(v31 + 15704) = 0u;
  *(_OWORD *)(v31 + 15656) = 0u;
  *(_OWORD *)(v31 + 15672) = 0u;
  *(_OWORD *)(v31 + 15624) = 0u;
  *(_OWORD *)(v31 + 15640) = 0u;
  *(_OWORD *)(v31 + 17000) = 0u;
  *(_OWORD *)(v31 + 17016) = 0u;
  *(_OWORD *)(v31 + 16968) = 0u;
  *(_OWORD *)(v31 + 16984) = 0u;
  *(_OWORD *)(v31 + 16936) = 0u;
  *(_OWORD *)(v31 + 16952) = 0u;
  *(_OWORD *)(v31 + 16904) = 0u;
  *(_OWORD *)(v31 + 16920) = 0u;
  bzero((void *)(v31 + 18056), 0x803uLL);
  if (*(_DWORD *)a1 != 6)
  {
    LODWORD(v38) = *(_DWORD *)(v13 + 244);
    v46 = (double)v38 * 99.9308193 * ((double)v38 * 99.9308193) + 900.0;
    v47 = (double *)(v31 + 352);
    Apply_Q_Boost(v46, 0, 1u, v47, v53, v57);
    Apply_Q_Boost(v46, 1u, 1u, v47, v53, v57);
    Apply_Q_Boost(v46, 2u, 1u, v47, v53, v57);
    v43 = 8.98755179;
    if (*(_WORD *)(v13 + 240))
      v43 = v12;
    v44 = 4;
    v45 = v47;
    goto LABEL_67;
  }
  v39 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v32 + 864) = 0x4163125300000000;
  *(_WORD *)(v32 + 200) = 0;
  *(_BYTE *)(v32 + 202) = 0;
  *(_QWORD *)(v32 + 160) = 0;
  *(_QWORD *)(v32 + 168) = 0;
  *(_QWORD *)(v32 + 152) = 0;
  v40 = *(_DWORD *)(v39 + 12);
  if (v40 <= 0x2BF1F)
  {
    v41 = (double *)(v31 + 352);
    Apply_Q_Boost(4.40390038e10, 0, 1u, v41, v53, v57);
    Apply_Q_Boost(4.40390038e10, 1u, 1u, v41, v53, v57);
    Apply_Q_Boost(4.40390038e10, 2u, 1u, v41, v53, v57);
    Apply_Q_Boost(1.0, 3u, 1u, v41, v53, v57);
    v42 = 224.688795;
    if (*(_WORD *)(v13 + 240))
      v42 = v12;
    Apply_Q_Boost(v42, 4u, 1u, v41, v53, v57);
    v43 = 1.0;
    v44 = 5;
    v45 = v41;
LABEL_67:
    Apply_Q_Boost(v43, v44, 1u, v45, v53, v57);
    goto LABEL_68;
  }
  *(_BYTE *)(v31 + 136) = 1;
  *(_DWORD *)(v31 + 140) = 3;
  *(_WORD *)(v31 + 240) = 256;
  *(_BYTE *)(v31 + 242) = 2;
  *(_BYTE *)(v31 + 27176) = 0;
  *(_OWORD *)(v31 + 27232) = 0u;
  v52 = *(_DWORD *)(v32 + 12);
  if (v52 != 2)
  {
    if (v52 != 3)
      goto LABEL_68;
    *(_DWORD *)(v32 + 12) = 2;
  }
  if (v40 >= 0x36EE81)
    *(_DWORD *)(v32 + 12) = 1;
LABEL_68:
  *(_DWORD *)v13 = 0;
  Nav_Kalman_Update_Wrapper(a1);
  result = Pre_Positioning_Update_Wrapper(a1);
  v49 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(v49 + 248) = *(_QWORD *)(v49 + 240);
  *(_BYTE *)(v49 + 308) = 0;
  v50 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(v50 + 320) = *(_QWORD *)(v50 + 312);
  *(_BYTE *)(v50 + 380) = 0;
  v51 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(v51 + 392) = *(_QWORD *)(v51 + 384);
  *(_BYTE *)(v51 + 452) = 0;
  *(_DWORD *)a1 = 11;
  return result;
}

uint64_t Ga05_GetPlatformType(unsigned __int8 *a1)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char __str[966];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a1)
    v2 = gp_HalExtensionIndusInstance == 0;
  else
    v2 = 1;
  v3 = !v2;
  if (v2)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Null Pltfm\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "Ga05_GetPlatformType", 770);
      v5 = 1;
      goto LABEL_14;
    }
  }
  else
  {
    if (!(*(unsigned int (**)(void))(*(_QWORD *)gp_HalExtensionIndusInstance + 96))())
      *a1 = 0;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Platform Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 73, "Ga05_GetPlatformType", *a1);
      v5 = 4;
LABEL_14:
      gnssOsa_PrintLog(__str, v5, 1, 0);
    }
  }
  return v3;
}

void Ga05_HandleResetBbResetReq(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  char __str[966];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 68, "Ga05_HandleResetBbResetReq");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  v3 = gp_HalExtensionIndusInstance;
  if (gp_HalExtensionIndusInstance)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, off_251CDB798[(char)a1]);
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v3 + 120))(v3, a1, __p);
    if (v7 < 0)
      operator delete(__p[0]);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga05_HandleResetBbResetReq");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx null object HalExtIndus\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "Ga05_HandleResetBbResetReq", 770);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_24BAF5E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Ga05_GetPlatformCalibrationGlonassGroupDelayMeters(void)
{
  uint64_t v0;
  char __str[966];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "ADP", 68, "Ga05_GetPlatformCalibrationGlonassGroupDelayMeters");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)gp_HalExtensionIndusInstance + 112))(gp_HalExtensionIndusInstance);
}

double Ga05_GetPlatformCalibrationL5GroupDelayMeters(void)
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  char __str[966];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "ADP", 68, "Ga05_GetPlatformCalibrationL5GroupDelayMeters");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (gp_HalExtensionIndusInstance)
    return (*(double (**)(uint64_t))(*(_QWORD *)gp_HalExtensionIndusInstance + 104))(gp_HalExtensionIndusInstance);
  v1 = 0.0;
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx null object HalExtIndus\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 69, "Ga05_GetPlatformCalibrationL5GroupDelayMeters", 770);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return v1;
}

uint64_t Ga05_GetDebugFeaturesBitmask(void)
{
  uint64_t v1;
  char __str[966];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if (gp_HalExtensionIndusInstance)
    return (*(uint64_t (**)(void))(*(_QWORD *)gp_HalExtensionIndusInstance + 64))();
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v1 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx null object HalExtIndus\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "ADP", 69, "Ga05_GetDebugFeaturesBitmask", 770);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

uint64_t GncP23_30HandleEaDataInd(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  unint64_t v45;
  uint64_t __s;
  __int128 v47;
  __int128 v48;
  _BYTE v49[24];
  unsigned int v50;
  int v51;
  uint64_t v52;
  char __str[966];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND EAType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP23_30HandleEaDataInd", *(_DWORD *)(a1 + 16));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    switch(*(_DWORD *)(a1 + 16))
    {
      case 1:
        v3 = *(_DWORD *)(a1 + 104);
        if (v3 >= 2)
        {
          if (v3 == 2)
          {
            if ((GncP23_22SetTunnelEndPt(a1 + 24) & 1) != 0)
              goto LABEL_112;
            goto LABEL_116;
          }
          if (g_LbsOsaTrace_Config < 2)
            goto LABEL_116;
          bzero(__str, 0x3C6uLL);
          v45 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EaPos Type,%u\n", v45);
        }
        else
        {
          memset_s(&__s, 0x50uLL, 0, 0x50uLL);
          if (g_LbsOsaTrace_Config >= 5)
          {
            bzero(__str, 0x3C6uLL);
            v4 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:RPOS,OsTime,%u,Lat,%f,Long,%f,RmsSMaj,%f,RmsSMin,%f,RmsSMajB,%hd,HeightAvl,%u,Height,%f,RmsH,%f,T,%u,Src,%u,SrcHash,0x%llX\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GncP23_11SetWgs84RefPos", *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(__int16 *)(a1 + 64), *(unsigned __int8 *)(a1 + 66), *(double *)(a1 + 72), *(double *)(a1 + 80), *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92),
              *(_QWORD *)(a1 + 96));
            gnssOsa_PrintLog(__str, 5, 1, 0);
          }
          v5 = *(_OWORD *)(a1 + 48);
          v47 = *(_OWORD *)(a1 + 32);
          LODWORD(__s) = *(_DWORD *)(a1 + 24);
          v48 = v5;
          *(_WORD *)v49 = *(_WORD *)(a1 + 64);
          v49[2] = *(_BYTE *)(a1 + 66);
          *(_OWORD *)&v49[8] = *(_OWORD *)(a1 + 72);
          v52 = *(_QWORD *)(a1 + 96);
          v6 = *(_DWORD *)(a1 + 88);
          if (v6 >= 5)
          {
            if (g_LbsOsaTrace_Config >= 2)
            {
              bzero(__str, 0x3C6uLL);
              v7 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Trust,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 87, "GncP23_11SetWgs84RefPos", 770, *(_DWORD *)(a1 + 88));
              gnssOsa_PrintLog(__str, 2, 1, 0);
            }
            v6 = 0;
          }
          v50 = v6;
          v8 = *(int *)(a1 + 92);
          if (v8 < 9 && ((0x1F9u >> v8) & 1) != 0)
          {
            v10 = dword_24BC09BD0[v8];
          }
          else
          {
            if (g_LbsOsaTrace_Config >= 2)
            {
              bzero(__str, 0x3C6uLL);
              v9 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Source,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 87, "GncP23_11SetWgs84RefPos", 770, *(_DWORD *)(a1 + 92));
              gnssOsa_PrintLog(__str, 2, 1, 0);
            }
            v10 = 0;
          }
          v51 = v10;
          if ((GN_AGPS_Set_Ref_Pos((uint64_t)&__s) & 1) != 0)
            goto LABEL_112;
          if (g_LbsOsaTrace_Config < 2)
            goto LABEL_116;
          bzero(__str, 0x3C6uLL);
          mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:RefPos\n");
        }
        goto LABEL_115;
      case 2:
        memset_s(&__s, 0xCuLL, 0, 0xCuLL);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          v14 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:DMS,OsTime,%u,State,%u,Reliab,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 68, "GncP23_12SetDevMotionState", *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        v15 = *(_DWORD *)(a1 + 28);
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        if (v15 >= 4)
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            v16 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx State,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 87, "GncP23_12SetDevMotionState", 770, *(_DWORD *)(a1 + 28));
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          v15 = 0;
        }
        HIDWORD(__s) = v15;
        v17 = *(_DWORD *)(a1 + 32);
        if (v17 >= 4)
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            v18 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Reliability,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNC", 87, "GncP23_12SetDevMotionState", 770, *(_DWORD *)(a1 + 32));
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          v17 = 0;
        }
        LODWORD(v47) = v17;
        if ((GN_ExtA_Set_Device_Motion_State((unsigned int *)&__s) & 1) != 0)
          goto LABEL_112;
        if (g_LbsOsaTrace_Config < 2)
          goto LABEL_116;
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Dms\n");
        goto LABEL_115;
      case 3:
        memset_s(&__s, 0xCuLL, 0, 0xCuLL);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          v19 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:UAC,OsTime,%u,Context,%u,Reliab,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 68, "GncP23_13SetUsrActCtxt", *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        v20 = *(_DWORD *)(a1 + 28);
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        if (v20 >= 0xC)
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            v21 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Context,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNC", 87, "GncP23_13SetUsrActCtxt", 770, *(_DWORD *)(a1 + 28));
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          v20 = 0;
        }
        HIDWORD(__s) = v20;
        v22 = *(_DWORD *)(a1 + 32);
        if (v22 >= 4)
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            v23 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Reliability,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "GNC", 87, "GncP23_13SetUsrActCtxt", 770, *(_DWORD *)(a1 + 32));
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          v22 = 0;
        }
        LODWORD(v47) = v22;
        if ((GN_ExtA_Set_User_Activity_Context((unsigned int *)&__s) & 1) != 0)
          goto LABEL_112;
        if (g_LbsOsaTrace_Config < 2)
          goto LABEL_116;
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:UAC\n");
        goto LABEL_115;
      case 4:
        memset_s(&__s, 0xCuLL, 0, 0xCuLL);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          v24 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:FIV,OsTime,%u,Fiv,%u,Reliab,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNC", 68, "GncP23_14SetFixedInVehicle", *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        v25 = *(_DWORD *)(a1 + 28);
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        if (v25 >= 4)
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            v26 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Indication,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "GNC", 87, "GncP23_14SetFixedInVehicle", 770, *(_DWORD *)(a1 + 28));
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          v25 = 0;
        }
        HIDWORD(__s) = v25;
        v27 = *(_DWORD *)(a1 + 32);
        if (v27 >= 4)
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            v28 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Reliability,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "GNC", 87, "GncP23_14SetFixedInVehicle", 770, *(_DWORD *)(a1 + 32));
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          v27 = 0;
        }
        LODWORD(v47) = v27;
        if ((GN_ExtA_Set_Fixed_In_Vehicle((unsigned int *)&__s) & 1) != 0)
          goto LABEL_112;
        if (g_LbsOsaTrace_Config < 2)
          goto LABEL_116;
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:FIV\n");
        goto LABEL_115;
      case 5:
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          v29 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:SES,Severity,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "GNC", 68, "GncP23_15SetSigEnvSev", *(_DWORD *)(a1 + 24));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        v30 = *(unsigned int *)(a1 + 24);
        if (v30 >= 8)
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            v31 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SigEnv,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 87, "GncP23_15SetSigEnvSev", 770, *(_DWORD *)(a1 + 24));
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          v30 = 0;
        }
        if ((GN_ExtA_Set_Sig_Env_Sev(v30) & 1) != 0)
          goto LABEL_112;
        if (g_LbsOsaTrace_Config < 2)
          goto LABEL_116;
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:SES\n");
        goto LABEL_115;
      case 6:
        memset_s(&__s, 0x20uLL, 0, 0x20uLL);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          v32 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:ALT,OsTime,%u,Alt,%f,RmsAlt,%f,Trust,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "GNC", 68, "GncP23_16SetAltitudeAid", *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(_DWORD *)(a1 + 48));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        v47 = *(_OWORD *)(a1 + 32);
        v33 = *(int *)(a1 + 48);
        if (v33 >= 5)
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            v40 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Trust,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "GNC", 87, "GncP23_16SetAltitudeAid", 770, *(_DWORD *)(a1 + 48));
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          v34 = 0;
        }
        else
        {
          v34 = dword_24BC09BF4[v33];
        }
        LODWORD(v48) = v34;
        if ((GN_ExtA_Set_Altitude((uint64_t)&__s) & 1) != 0)
          goto LABEL_112;
        if (g_LbsOsaTrace_Config < 2)
          goto LABEL_116;
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Alt\n");
        goto LABEL_115;
      case 7:
        memset_s(&__s, 0x48uLL, 0, 0x48uLL);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          v35 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:RPOS,OsTime,%u,Lat,%f,Long,%f,HeightAvl,%u,Height,%.2f,Dir,%.2f,Length,%.2f,Width,%.2f,Tunnel,%u,Freeway,%u,Railway,%u,OneWay,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "GNC", 68, "GncP23_17SetMapVectorSeg", *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(double *)(a1 + 48), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(unsigned __int8 *)(a1 + 90),
            *(unsigned __int8 *)(a1 + 91));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        v47 = *(_OWORD *)(a1 + 32);
        *(_QWORD *)&v48 = *(_QWORD *)(a1 + 48);
        BYTE8(v48) = *(_BYTE *)(a1 + 56);
        *(_OWORD *)v49 = *(_OWORD *)(a1 + 64);
        *(_QWORD *)&v49[16] = *(_QWORD *)(a1 + 80);
        v50 = *(_DWORD *)(a1 + 88);
        LOBYTE(v51) = *(_BYTE *)(a1 + 92);
        if ((GN_ExtA_Set_Map_Vector_Seg((uint64_t)&__s) & 1) != 0)
          goto LABEL_112;
        if (g_LbsOsaTrace_Config < 2)
          goto LABEL_116;
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Mapv\n");
        goto LABEL_115;
      case 8:
        memset_s(&__s, 0x18uLL, 0, 0x18uLL);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          v36 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:SPDC,OsTime,%u,Dur,%u,SpdL,%.2f,SpdU,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "GNC", 68, "GncP23_18SetSpeedC", *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(double *)(a1 + 32), *(double *)(a1 + 40));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        __s = *(_QWORD *)(a1 + 24);
        v47 = *(_OWORD *)(a1 + 32);
        if ((GN_ExtA_Set_Speed_Constraint((uint64_t)&__s) & 1) != 0)
          goto LABEL_112;
        if (g_LbsOsaTrace_Config < 2)
          goto LABEL_116;
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:SpeedC\n");
        goto LABEL_115;
      case 9:
        memset_s(&__s, 0x18uLL, 0, 0x18uLL);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          v37 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:VEL,OsTime,%u,Vel,%.2f,RmsVel,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "GNC", 68, "GncP23_19SetAtVel", *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        v47 = *(_OWORD *)(a1 + 32);
        if ((GN_ExtA_Set_Along_Track_Vel((uint64_t)&__s) & 1) != 0)
          goto LABEL_112;
        if (g_LbsOsaTrace_Config < 2)
          goto LABEL_116;
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Vel\n");
        goto LABEL_115;
      case 0xA:
        memset_s(&__s, 0x18uLL, 0, 0x18uLL);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          v38 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:HDNG,OsTime,%u,Heading,%.2f,RmsHeading,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), "GNC", 68, "GncP23_20SetHeading", *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        v47 = *(_OWORD *)(a1 + 32);
        if ((GN_ExtA_Set_User_Heading((uint64_t)&__s) & 1) != 0)
          goto LABEL_112;
        if (g_LbsOsaTrace_Config < 2)
          goto LABEL_116;
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Heading\n");
        goto LABEL_115;
      case 0xB:
        memset_s(&__s, 0x18uLL, 0, 0x18uLL);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          v39 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:VEL,OsTime,%u,Vel,%.2f,RmsVel,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "GNC", 68, "GncP23_21SetVertVel", *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        v47 = *(_OWORD *)(a1 + 32);
        if ((GN_ExtA_Set_Vertical_Vel((uint64_t)&__s) & 1) != 0)
        {
LABEL_112:
          v41 = *(_DWORD *)(a1 + 12);
          v42 = *(_DWORD *)(a1 + 16);
          v43 = 1;
        }
        else
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:VertVel\n");
LABEL_115:
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
LABEL_116:
          v41 = *(_DWORD *)(a1 + 12);
          v42 = *(_DWORD *)(a1 + 16);
          v43 = 0;
        }
        GncP23_01SendApiStatus(v41, v42, v43);
        break;
      default:
        if (g_LbsOsaTrace_Config < 2)
          return 0;
        bzero(__str, 0x3C6uLL);
        v13 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EaData Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "GncP23_30HandleEaDataInd", 770, *(_DWORD *)(a1 + 16));
        v12 = 2;
        goto LABEL_19;
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v11 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 69, "GncP23_30HandleEaDataInd", 517);
    v12 = 1;
LABEL_19:
    gnssOsa_PrintLog(__str, v12, 1, 0);
  }
  return 0;
}

uint64_t GncP23_22SetTunnelEndPt(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD v6[4];
  char __str[966];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  memset(v6, 0, 48);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:POS_TYPE,OsTime,%u,Lat,%f,Long,%f,RmsSMaj,%f,RmsSMin,%f,RmsSMajB,%d,HeightAvl,%d,Height,%f,RmsH,%f,PosType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "GncP23_22SetTunnelEndPt", *(_DWORD *)a1, *(double *)(a1 + 8), *(double *)(a1 + 16), *(double *)(a1 + 24), *(double *)(a1 + 32), *(__int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42), *(double *)(a1 + 48), *(double *)(a1 + 56), *(_DWORD *)(a1 + 80));
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  LODWORD(v6[0]) = *(_DWORD *)a1;
  *(_OWORD *)((char *)v6 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)((char *)&v6[1] + 8) = *(_OWORD *)(a1 + 24);
  WORD4(v6[2]) = *(_WORD *)(a1 + 40);
  BYTE10(v6[2]) = *(_BYTE *)(a1 + 42);
  v6[3] = *(_OWORD *)(a1 + 48);
  v3 = GN_ExtA_Set_Tunnel_End_Point((double *)v6);
  if ((v3 & 1) == 0 && g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA TunnelEP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP23_22SetTunnelEndPt", 257);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return v3;
}

uint64_t GncP23_01SendApiStatus(int a1, int a2, int a3)
{
  uint64_t v6;
  _DWORD v8[3];
  char __str[966];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[1] = a2;
  v8[2] = a3;
  v8[0] = a1;
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:API_STATUS =>EaCB,Api,%u,Id,%u,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP23_01SendApiStatus", a2, a1, a3);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  return g_GnsEaCallback(0, 12, v8);
}

uint64_t GncP23_31HandleEaCbInit(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD, _QWORD, _QWORD);
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char __str[966];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config)
      return 0;
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 69, "GncP23_31HandleEaCbInit", 517);
    v5 = 1;
LABEL_8:
    gnssOsa_PrintLog(__str, v5, 1, 0);
    return 0;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EA_CB_INIT_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP23_31HandleEaCbInit");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  v3 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 16);
  if (v3)
    goto LABEL_5;
  if (!g_GnsEaCallback)
  {
    if (g_LbsOsaTrace_Config < 2)
      return 0;
    bzero(__str, 0x3C6uLL);
    v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:CbPtr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP23_31HandleEaCbInit", 513);
    v5 = 2;
    goto LABEL_8;
  }
  if (g_LbsOsaTrace_Config < 4)
  {
    v3 = 0;
  }
  else
  {
    bzero(__str, 0x3C6uLL);
    v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:DeRegistering\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncP23_31HandleEaCbInit", 513);
    gnssOsa_PrintLog(__str, 4, 1, 0);
    v3 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 16);
  }
LABEL_5:
  g_GnsEaCallback = v3;
  return 0;
}

uint64_t GNS_EaInitialize(uint64_t a1)
{
  _QWORD *v2;

  v2 = gnssOsa_Calloc("GNS_EaInitialize", 617, 1, 0x18uLL);
  if (!v2)
    return 6;
  v2[2] = a1;
  AgpsSendFsmMsg(132, 132, 8658691, v2);
  return 1;
}

uint64_t GNS_EaWgs84RefPos(int a1, __int128 *a2)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char __str[966];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GNS_EaWgs84RefPos");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!a2)
  {
    if (g_LbsOsaTrace_Config < 2)
      return 2;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Wgs84RefPos\n");
LABEL_33:
    v16 = 2;
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v17 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 68, "GNS_EaWgs84RefPos");
LABEL_35:
      gnssOsa_PrintLog(__str, 5, 1, 0);
      return v16;
    }
    return v16;
  }
  if ((*((_DWORD *)a2 + 17) - 3) >= 3)
  {
    if (g_LbsOsaTrace_Config < 2)
      return 2;
    bzero(__str, 0x3C6uLL);
    v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Source,%u\n", v21);
    goto LABEL_33;
  }
  if (*((_DWORD *)a2 + 16) >= 5u)
  {
    if (g_LbsOsaTrace_Config < 2)
      return 2;
    bzero(__str, 0x3C6uLL);
    v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Trust,%u\n", v22);
    goto LABEL_33;
  }
  v5 = *((double *)a2 + 1);
  if (v5 > 90.0 || v5 < -90.0)
  {
    if (g_LbsOsaTrace_Config < 2)
      return 2;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Latitude,%f\n");
    goto LABEL_33;
  }
  v6 = *((double *)a2 + 2);
  if (v6 > 180.0 || v6 < -180.0)
  {
    if (g_LbsOsaTrace_Config < 2)
      return 2;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Longitude,%f\n");
    goto LABEL_33;
  }
  if (*((_BYTE *)a2 + 42))
  {
    v7 = *((double *)a2 + 6);
    if (v7 > 100000.0 || v7 < -100000.0)
    {
      if (g_LbsOsaTrace_Config < 2)
        return 2;
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Height,%f\n");
      goto LABEL_33;
    }
  }
  if (*((unsigned __int16 *)a2 + 20) - 181 <= 0xFE96)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:RmsSemiMajBrg,%d\n", v20);
      goto LABEL_33;
    }
    return 2;
  }
  v8 = (char *)gnssOsa_Calloc("GNS_EaWgs84RefPos", 743, 1, 0x70uLL);
  if (v8)
  {
    v9 = v8;
    *((_DWORD *)v8 + 3) = a1;
    *((_DWORD *)v8 + 4) = 1;
    v10 = *a2;
    *(_OWORD *)(v8 + 40) = a2[1];
    *(_OWORD *)(v8 + 24) = v10;
    v11 = a2[2];
    v12 = a2[3];
    v13 = a2[4];
    *((_DWORD *)v8 + 26) = *((_DWORD *)a2 + 20);
    *(_OWORD *)(v8 + 88) = v13;
    *(_OWORD *)(v8 + 72) = v12;
    *(_OWORD *)(v8 + 56) = v11;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v14 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 73, "GNS_EaWgs84RefPos", *((_DWORD *)v9 + 4), *((_DWORD *)v9 + 3));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 132, 8650755, v9);
    if (g_LbsOsaTrace_Config < 5)
      return 1;
    bzero(__str, 0x3C6uLL);
    v15 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 68, "GNS_EaWgs84RefPos");
    v16 = 1;
    goto LABEL_35;
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v19 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 68, "GNS_EaWgs84RefPos");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 6;
}

uint64_t GNS_EaDevMovState(int a1, uint64_t *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char __str[966];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GNS_EaDevMovState");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!a2)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:DMS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GNS_EaDevMovState", 513);
      v10 = 2;
      gnssOsa_PrintLog(__str, 2, 1, 0);
      if (g_LbsOsaTrace_Config < 5)
        return v10;
LABEL_19:
      bzero(__str, 0x3C6uLL);
      v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", v12, "GNC", 68, "GNS_EaDevMovState");
LABEL_20:
      gnssOsa_PrintLog(__str, 5, 1, 0);
      return v10;
    }
    return 2;
  }
  if (*((_DWORD *)a2 + 1) >= 4u)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:MovState,%u\n", v15);
      goto LABEL_18;
    }
    return 2;
  }
  if (*((_DWORD *)a2 + 2) >= 4u)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:MovReliab,%u\n", v16);
LABEL_18:
      v10 = 2;
      gnssOsa_PrintLog(__str, 2, 1, 0);
      if (g_LbsOsaTrace_Config < 5)
        return v10;
      goto LABEL_19;
    }
    return 2;
  }
  v5 = gnssOsa_Calloc("GNS_EaDevMovState", 833, 1, 0x70uLL);
  if (v5)
  {
    v6 = v5;
    v5[3] = a1;
    v5[4] = 2;
    v7 = *a2;
    v5[8] = *((_DWORD *)a2 + 2);
    *((_QWORD *)v5 + 3) = v7;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GNS_EaDevMovState", v6[4], v6[3]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 132, 8650755, v6);
    if (g_LbsOsaTrace_Config < 5)
      return 1;
    bzero(__str, 0x3C6uLL);
    v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 68, "GNS_EaDevMovState");
    v10 = 1;
    goto LABEL_20;
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v14 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 68, "GNS_EaDevMovState");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 6;
}

uint64_t GNS_EaSpeedConstraint(int a1, __int128 *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char __str[966];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GNS_EaSpeedConstraint");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (a2)
  {
    v5 = (char *)gnssOsa_Calloc("GNS_EaSpeedConstraint", 890, 1, 0x70uLL);
    if (v5)
    {
      v6 = v5;
      *((_DWORD *)v5 + 3) = a1;
      *((_DWORD *)v5 + 4) = 8;
      v7 = *a2;
      *((_QWORD *)v5 + 5) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(v5 + 24) = v7;
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GNS_EaSpeedConstraint", *((_DWORD *)v6 + 4), *((_DWORD *)v6 + 3));
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      AgpsSendFsmMsg(132, 132, 8650755, v6);
      if (g_LbsOsaTrace_Config < 5)
        return 1;
      bzero(__str, 0x3C6uLL);
      v9 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 68, "GNS_EaSpeedConstraint");
      v10 = 1;
      goto LABEL_12;
    }
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v13 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 68, "GNS_EaSpeedConstraint");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    return 6;
  }
  else
  {
    if (g_LbsOsaTrace_Config < 2)
      return 2;
    bzero(__str, 0x3C6uLL);
    v11 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:SpdC\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GNS_EaSpeedConstraint", 513);
    v10 = 2;
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v12 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 68, "GNS_EaSpeedConstraint");
LABEL_12:
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  return v10;
}

uint64_t GNS_EaAlongTrackVel(int a1, __int128 *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char __str[966];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GNS_EaAlongTrackVel");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!a2)
  {
    if (g_LbsOsaTrace_Config < 2)
      return 2;
    bzero(__str, 0x3C6uLL);
    v12 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:AlongTrackVel\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "GNS_EaAlongTrackVel", 513);
    v10 = 2;
    v11 = 2;
LABEL_11:
    gnssOsa_PrintLog(__str, v11, 1, 0);
    return v10;
  }
  v5 = (char *)gnssOsa_Calloc("GNS_EaAlongTrackVel", 946, 1, 0x70uLL);
  if (v5)
  {
    v6 = v5;
    *((_DWORD *)v5 + 3) = a1;
    *((_DWORD *)v5 + 4) = 9;
    v7 = *a2;
    *((_QWORD *)v5 + 5) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(v5 + 24) = v7;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GNS_EaAlongTrackVel", *((_DWORD *)v6 + 4), *((_DWORD *)v6 + 3));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 132, 8650755, v6);
    if (g_LbsOsaTrace_Config < 5)
      return 1;
    bzero(__str, 0x3C6uLL);
    v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 68, "GNS_EaAlongTrackVel");
    v10 = 1;
    v11 = 5;
    goto LABEL_11;
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v13 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 68, "GNS_EaAlongTrackVel");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 6;
}

uint64_t GNS_EaUsrActCtxt(int a1, uint64_t *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char __str[966];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GNS_EaUsrActCtxt");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!a2)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:UAC\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GNS_EaUsrActCtxt", 513);
      v10 = 2;
      gnssOsa_PrintLog(__str, 2, 1, 0);
      if (g_LbsOsaTrace_Config < 5)
        return v10;
LABEL_19:
      bzero(__str, 0x3C6uLL);
      v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", v12, "GNC", 68, "GNS_EaUsrActCtxt");
LABEL_20:
      gnssOsa_PrintLog(__str, 5, 1, 0);
      return v10;
    }
    return 2;
  }
  if (*((_DWORD *)a2 + 1) >= 0xCu)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Ctxt,%u\n", v15);
      goto LABEL_18;
    }
    return 2;
  }
  if (*((_DWORD *)a2 + 2) >= 4u)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Reliab,%u\n", v16);
LABEL_18:
      v10 = 2;
      gnssOsa_PrintLog(__str, 2, 1, 0);
      if (g_LbsOsaTrace_Config < 5)
        return v10;
      goto LABEL_19;
    }
    return 2;
  }
  v5 = gnssOsa_Calloc("GNS_EaUsrActCtxt", 1169, 1, 0x70uLL);
  if (v5)
  {
    v6 = v5;
    v5[3] = a1;
    v5[4] = 3;
    v7 = *a2;
    v5[8] = *((_DWORD *)a2 + 2);
    *((_QWORD *)v5 + 3) = v7;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GNS_EaUsrActCtxt", v6[4], v6[3]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 132, 8650755, v6);
    if (g_LbsOsaTrace_Config < 5)
      return 1;
    bzero(__str, 0x3C6uLL);
    v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 68, "GNS_EaUsrActCtxt");
    v10 = 1;
    goto LABEL_20;
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v14 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 68, "GNS_EaUsrActCtxt");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 6;
}

uint64_t GNS_EaFixedInVehicle(int a1, uint64_t *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char __str[966];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GNS_EaFixedInVehicle");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!a2)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:FIV\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GNS_EaFixedInVehicle", 513);
      v10 = 2;
      gnssOsa_PrintLog(__str, 2, 1, 0);
      if (g_LbsOsaTrace_Config < 5)
        return v10;
LABEL_19:
      bzero(__str, 0x3C6uLL);
      v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", v12, "GNC", 68, "GNS_EaFixedInVehicle");
LABEL_20:
      gnssOsa_PrintLog(__str, 5, 1, 0);
      return v10;
    }
    return 2;
  }
  if (*((_DWORD *)a2 + 1) >= 4u)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:FivInd,%u\n", v15);
      goto LABEL_18;
    }
    return 2;
  }
  if (*((_DWORD *)a2 + 2) >= 4u)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:FIVReliab,%u\n", v16);
LABEL_18:
      v10 = 2;
      gnssOsa_PrintLog(__str, 2, 1, 0);
      if (g_LbsOsaTrace_Config < 5)
        return v10;
      goto LABEL_19;
    }
    return 2;
  }
  v5 = gnssOsa_Calloc("GNS_EaFixedInVehicle", 1258, 1, 0x70uLL);
  if (v5)
  {
    v6 = v5;
    v5[3] = a1;
    v5[4] = 4;
    v7 = *a2;
    v5[8] = *((_DWORD *)a2 + 2);
    *((_QWORD *)v5 + 3) = v7;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GNS_EaFixedInVehicle", v6[4], v6[3]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 132, 8650755, v6);
    if (g_LbsOsaTrace_Config < 5)
      return 1;
    bzero(__str, 0x3C6uLL);
    v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 68, "GNS_EaFixedInVehicle");
    v10 = 1;
    goto LABEL_20;
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v14 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 68, "GNS_EaFixedInVehicle");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 6;
}

uint64_t GNS_EaSigEnvSev(int a1, unsigned int a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char __str[966];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GNS_EaSigEnvSev");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (a2 >= 8)
  {
    if (g_LbsOsaTrace_Config < 2)
      return 2;
    bzero(__str, 0x3C6uLL);
    v10 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:SES,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "GNS_EaSigEnvSev", 515, a2);
    v9 = 2;
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 68, "GNS_EaSigEnvSev");
LABEL_12:
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  else
  {
    v5 = gnssOsa_Calloc("GNS_EaSigEnvSev", 1328, 1, 0x70uLL);
    if (v5)
    {
      v6 = v5;
      v5[3] = a1;
      v5[4] = 5;
      v5[6] = a2;
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GNS_EaSigEnvSev", v6[4], v6[3]);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      AgpsSendFsmMsg(132, 132, 8650755, v6);
      if (g_LbsOsaTrace_Config < 5)
        return 1;
      bzero(__str, 0x3C6uLL);
      v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "GNS_EaSigEnvSev");
      v9 = 1;
      goto LABEL_12;
    }
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v12 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 68, "GNS_EaSigEnvSev");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    return 6;
  }
  return v9;
}

uint64_t GNS_EaAltitude(int a1, __int128 *a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  char __str[966];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GNS_EaAltitude");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!a2)
  {
    if (g_LbsOsaTrace_Config < 2)
      return 2;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Alt\n");
LABEL_13:
    v6 = 2;
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 68, "GNS_EaAltitude");
LABEL_15:
      gnssOsa_PrintLog(__str, 5, 1, 0);
      return v6;
    }
    return v6;
  }
  v5 = *((double *)a2 + 1);
  if (v5 > 100000.0 || v5 < -100000.0)
  {
    if (g_LbsOsaTrace_Config < 2)
      return 2;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Altitude,%f\n");
    goto LABEL_13;
  }
  if (*((double *)a2 + 2) > 100000.0)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:RMSAltitude,%f\n");
      goto LABEL_13;
    }
    return 2;
  }
  if (*((_DWORD *)a2 + 6) >= 5u)
  {
    if (g_LbsOsaTrace_Config < 2)
      return 2;
    bzero(__str, 0x3C6uLL);
    v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Trust,%u\n", v15);
    goto LABEL_13;
  }
  v8 = (char *)gnssOsa_Calloc("GNS_EaAltitude", 1424, 1, 0x70uLL);
  if (v8)
  {
    v9 = v8;
    *((_DWORD *)v8 + 3) = a1;
    *((_DWORD *)v8 + 4) = 6;
    v10 = *a2;
    *(_OWORD *)(v8 + 36) = *(__int128 *)((char *)a2 + 12);
    *(_OWORD *)(v8 + 24) = v10;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 73, "GNS_EaAltitude", *((_DWORD *)v9 + 4), *((_DWORD *)v9 + 3));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 132, 8650755, v9);
    if (g_LbsOsaTrace_Config < 5)
      return 1;
    bzero(__str, 0x3C6uLL);
    v12 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 68, "GNS_EaAltitude");
    v6 = 1;
    goto LABEL_15;
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v14 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 68, "GNS_EaAltitude");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 6;
}

uint64_t GNS_EaMapVectorSeg(int a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char __str[966];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GNS_EaMapVectorSeg");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!a2)
  {
    if (g_LbsOsaTrace_Config < 2)
      return 2;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:MapVecSeg\n");
LABEL_28:
    v8 = 2;
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v9 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 68, "GNS_EaMapVectorSeg");
LABEL_30:
      gnssOsa_PrintLog(__str, 5, 1, 0);
      return v8;
    }
    return v8;
  }
  v5 = *(double *)(a2 + 8);
  if (v5 > 90.0 || v5 < -90.0)
  {
    if (g_LbsOsaTrace_Config < 2)
      return 2;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Latitude,%f\n");
    goto LABEL_28;
  }
  v6 = *(double *)(a2 + 16);
  if (v6 > 180.0 || v6 < -180.0)
  {
    if (g_LbsOsaTrace_Config < 2)
      return 2;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Longitude,%f\n");
    goto LABEL_28;
  }
  if (*(_BYTE *)(a2 + 32))
  {
    v7 = *(double *)(a2 + 24);
    if (v7 > 100000.0 || v7 < -100000.0)
    {
      if (g_LbsOsaTrace_Config < 2)
        return 2;
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Altitude,%f\n");
      goto LABEL_28;
    }
  }
  if (*(double *)(a2 + 40) > 360.0)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Direction,%f\n");
      goto LABEL_28;
    }
    return 2;
  }
  if (*(double *)(a2 + 48) > 100000.0)
  {
    if (g_LbsOsaTrace_Config < 2)
      return 2;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Length,%f\n");
    goto LABEL_28;
  }
  if (*(double *)(a2 + 56) > 100000.0)
  {
    if (g_LbsOsaTrace_Config < 2)
      return 2;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Width,%f\n");
    goto LABEL_28;
  }
  v11 = (char *)gnssOsa_Calloc("GNS_EaMapVectorSeg", 1542, 1, 0x70uLL);
  if (v11)
  {
    v12 = v11;
    *((_DWORD *)v11 + 3) = a1;
    *((_DWORD *)v11 + 4) = 7;
    *(_OWORD *)(v11 + 24) = *(_OWORD *)a2;
    v13 = *(_OWORD *)(a2 + 16);
    v14 = *(_OWORD *)(a2 + 32);
    v15 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(v11 + 85) = *(_QWORD *)(a2 + 61);
    *(_OWORD *)(v11 + 72) = v15;
    *(_OWORD *)(v11 + 56) = v14;
    *(_OWORD *)(v11 + 40) = v13;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v16 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 73, "GNS_EaMapVectorSeg", *((_DWORD *)v12 + 4), *((_DWORD *)v12 + 3));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 132, 8650755, v12);
    if (g_LbsOsaTrace_Config < 5)
      return 1;
    bzero(__str, 0x3C6uLL);
    v17 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 68, "GNS_EaMapVectorSeg");
    v8 = 1;
    goto LABEL_30;
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v18 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNC", 68, "GNS_EaMapVectorSeg");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 6;
}

char *NK_Get_Ext_Meas(unsigned int a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  double v15;
  _DWORD *v16;
  int v17;
  int v18;
  double v19;
  double v20;
  double v21;
  int v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  double v33;
  double v34;
  double v35;
  _BYTE *v36;
  int v37;
  _DWORD *v38;
  int v39;
  int ExtA_UAC;
  int v41;
  int v42;
  char v43;
  double v44;
  int v45;
  int v46;
  double *v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  BOOL v53;
  int v54;
  int v55;
  double v56;
  double v57;
  int v58;
  int v59;
  double v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  double v67;
  double v68;
  int v69;
  double v70;
  unsigned int v71;
  double v72;
  int v73;
  int v74;
  double v75;
  double v76;
  int v77;
  int v78;
  _DWORD *v79;
  int v80;
  int ExtA_MapV;
  _DWORD *v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  _DWORD *v88;
  int v89;
  double v90;
  int v91;
  int v92;
  double v93;
  double v94;
  int v95;
  int v96;
  double v97;
  int v98;
  double *v99;
  double v100;
  _DWORD *v101;
  _BYTE *v102;
  double v103;
  double v104;
  uint64_t v105;
  int v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  double v113;
  _DWORD *v114;
  int v115;
  double v116;
  _DWORD *v117;
  int v118;
  _DWORD *v119;
  int v120;
  double v121;
  double v122;
  double v123;
  char *result;
  unsigned int v125;
  unsigned int v126;
  double v127;
  _DWORD *v128;
  int v129;
  double v130;
  int v131;
  int v132;
  int v133;
  double v134;
  double v135;
  _DWORD *v136;
  int v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  unsigned int v145;
  double *v147;
  int v148;
  _BOOL4 v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  int v153;
  int v154;
  __int16 v155;
  double v156;
  unsigned int v157;
  _OWORD v158[4];
  uint64_t v159;
  double v160;
  double v161;
  uint64_t v162;
  __int128 v163;
  double v164;
  uint64_t v165;

  v165 = *MEMORY[0x24BDAC8D0];
  v8 = (_BYTE *)(a5 + 15411);
  v9 = a4 + 62268;
  v10 = (double *)(a4 + 61304);
  v11 = a4 + 60200;
  v157 = 0;
  if ((*(_DWORD *)(a5 + 20) - 5) < 4)
  {
    EvLog("NK_Get_Ext_Meas: Ext Ref Pos and Alt Assist skipped in Airborne mode");
    goto LABEL_204;
  }
  v156 = 0.0;
  v150 = a5 + 27120;
  v155 = 0;
  v153 = 0;
  v154 = 0;
  if (Core_Get_Pos_LLH(a1, 150000, 0, (int *)&v157, (uint64_t)&v163, (uint64_t)&v160, (uint64_t *)&v156, (_BYTE *)&v155 + 1, &v155, &v154, &v153))
  {
    v12 = v157;
    v13 = a1 - v157;
    *((_DWORD *)v10 + 195) = a1 - v157;
    if (v154 == 7)
    {
      *(_BYTE *)(v9 + 16) = 1;
      *(_DWORD *)(v9 + 28) = v13;
      if (HIBYTE(v155))
      {
        *(_BYTE *)(v9 + 32) = 1;
        *(_DWORD *)(v9 + 44) = v13;
      }
    }
    v14 = v153 - 3;
    v149 = (v153 - 3) < 2;
    if (!*(_BYTE *)(a4 + 1864))
    {
      v17 = 1;
      goto LABEL_20;
    }
    v15 = v160;
    if (v160 <= 4.0e10 && v14 <= 1)
    {
      v147 = v10;
      v16 = (_DWORD *)(v150 + 16);
      v149 = 1;
      v17 = 1;
LABEL_40:
      v22 = 1;
      goto LABEL_41;
    }
    v23 = *(double *)(a4 + 1704);
    v24 = __sincos_stret(v23);
    v25 = 1.0 / sqrt(v24.__sinval * v24.__sinval * -0.00669437999 + 1.0);
    v26 = *(double *)(a4 + 1720);
    v27 = v24.__cosval * (v26 + v25 * 6378137.0);
    if (v27 < 1.0)
      v27 = 1.0;
    v28 = (v23 - *(double *)&v163) * (v26 + v25 * (v25 * v25) * 6335439.33);
    v29 = (*(double *)(a4 + 1712) - *((double *)&v163 + 1))
        * v27
        * ((*(double *)(a4 + 1712) - *((double *)&v163 + 1))
         * v27)
        + v28 * v28;
    if (v15 <= 4.0e10 || v29 >= fmax(v15 * 9.0, 4.0e10))
    {
      v17 = 1;
      if (*(_DWORD *)(a4 + 1872) != 1 || v14 < 2)
        goto LABEL_20;
      if (v29 >= 22500.0)
      {
        if (v29 >= 9000000.0)
        {
          v149 = 0;
          goto LABEL_20;
        }
        v30 = 3;
      }
      else
      {
        v30 = 4;
      }
      v147 = v10;
      v153 = v30;
      if (v15 > v29)
        v29 = v15;
      v160 = v29;
      v16 = (_DWORD *)(v150 + 16);
      v149 = 1;
      goto LABEL_40;
    }
    *(_DWORD *)(v9 + 20) = 24;
  }
  else
  {
    v149 = (v153 - 3) < 2;
  }
  if (*(_DWORD *)(a5 + 20) <= 4u)
  {
    v12 = *(_DWORD *)(v150 + 24);
    if (v12)
    {
      v157 = *(_DWORD *)(v150 + 24);
      v163 = *(_OWORD *)(a5 + 27152);
      v164 = *(double *)(a5 + 27168);
      v18 = *(_DWORD *)a4 - v12;
      if (v18 >= -999)
      {
        if (v18 > 3599999)
        {
          v21 = 4000.0;
          v20 = 200000.0;
        }
        else
        {
          v19 = (double)(v18 / 1000) * 0.000277777778;
          v20 = v19 * 30000.0 + 400.0;
          v21 = v19 * 400.0 + 400.0;
          v157 = a1;
          v12 = a1;
        }
        v147 = v10;
        v160 = v20 * v20;
        v161 = v20 * v20;
        v162 = 0;
        v156 = v21 * v21;
        v153 = 3;
        v22 = 2;
        v155 = 258;
        v149 = 1;
        v16 = (_DWORD *)(v150 + 16);
        v17 = 1;
        goto LABEL_41;
      }
    }
  }
  v17 = 0;
  v22 = 0;
  if (!HIBYTE(v155))
    goto LABEL_137;
LABEL_20:
  v16 = (_DWORD *)(v150 + 16);
  if (*(_DWORD *)(v150 + 16) && !v149)
  {
    v149 = 0;
    v22 = v17;
    goto LABEL_137;
  }
  v147 = v10;
  v12 = v157;
  v22 = v17;
LABEL_41:
  v31 = a1 - v12;
  if ((int)(a1 - v12) >= 0)
    v32 = a1 - v12;
  else
    v32 = v12 - a1;
  if (v32 < 0x3E8 || v12 - *(_DWORD *)(a5 + 15484) - 1000 <= 0xFFFFF830)
  {
    *(_OWORD *)(a5 + 15464) = 0u;
    *(_DWORD *)(a5 + 15480) = a1;
    *(_DWORD *)(a5 + 15484) = v12;
    v33 = 0.0;
    v34 = 0.0;
    if (v32 < 0x3E8)
      goto LABEL_82;
  }
  if (*(_DWORD *)(a4 + 1868) == 3)
  {
    v35 = v147[83];
    if (v35 <= 3.0)
    {
      v48 = *(double *)(a4 + 1848);
      v44 = v48 + v35 * 3.0;
      v49 = 5.0;
      if (v147[85] <= 3.0)
      {
        v50 = v147[84];
        if (v50 <= 3.0)
        {
          v51 = *(double *)(a4 + 1840) * *(double *)(a4 + 1840) - v48 * v48;
          v52 = sqrt(v51) + v50 * 3.0;
          v53 = v51 < 0.0;
          v49 = 5.0;
          if (!v53)
            v49 = v52;
        }
      }
      goto LABEL_76;
    }
  }
  v145 = v32;
  v36 = v8;
  v37 = v17;
  v38 = v16;
  v39 = v22;
  ExtA_UAC = Core_Get_ExtA_UAC(120000, (uint64_t)v158);
  v41 = *(unsigned __int8 *)(p_NA + 381);
  if (*(_BYTE *)(p_NA + 381))
  {
    v42 = *(_DWORD *)(p_NA + 26780);
    if (!*(_BYTE *)(v9 + 72))
    {
      *(_BYTE *)(v9 + 64) = v41;
      *(_BYTE *)(v9 + 72) = v41;
    }
    if (DWORD2(v158[0]) == 3)
      v43 = ExtA_UAC;
    else
      v43 = 0;
    v22 = v39;
    v16 = v38;
    v17 = v37;
    if ((v43 & 1) == 0)
    {
      v8 = v36;
      if ((v42 - 2) >= 6)
        v44 = 45.0;
      else
        v44 = dbl_24BC09D10[v42 - 2];
      goto LABEL_74;
    }
LABEL_63:
    v44 = 45.0;
    v8 = v36;
    v32 = v145;
    switch(DWORD1(v158[0]))
    {
      case 2:
        v44 = 2.4;
        goto LABEL_75;
      case 3:
      case 5:
        v44 = 10.0;
        if (!v41)
          goto LABEL_75;
        v46 = v42 - 5;
        if ((v42 - 5) >= 3)
          goto LABEL_75;
        v47 = (double *)&unk_24BC09CE0;
        goto LABEL_321;
      case 4:
        v44 = 4.6;
        goto LABEL_75;
      case 6:
        v44 = 16.9;
        if (!v41)
          goto LABEL_75;
        goto LABEL_316;
      case 7:
        v44 = 30.0;
        if (!v41)
          goto LABEL_75;
LABEL_316:
        v46 = v42 - 5;
        if ((v42 - 5) >= 3)
          goto LABEL_75;
        v47 = (double *)&unk_24BC09CF8;
LABEL_321:
        v44 = v47[v46];
        break;
      case 8:
        if (!v41)
          goto LABEL_75;
        v46 = v42 - 5;
        if ((v42 - 5) >= 3)
          goto LABEL_75;
        v47 = (double *)&unk_24BC09CC8;
        goto LABEL_321;
      case 9:
        goto LABEL_75;
      case 0xA:
      case 0xB:
        v44 = 54.0;
        goto LABEL_75;
      default:
        goto LABEL_74;
    }
    goto LABEL_75;
  }
  if (DWORD2(v158[0]) == 3)
    v45 = ExtA_UAC;
  else
    v45 = 0;
  if (v45 == 1)
  {
    v42 = 0;
    v22 = v39;
    v16 = v38;
    v17 = v37;
    goto LABEL_63;
  }
  v44 = 45.0;
  v22 = v39;
  v16 = v38;
  v17 = v37;
  v8 = v36;
LABEL_74:
  v32 = v145;
LABEL_75:
  v49 = 5.0;
LABEL_76:
  v54 = *(_DWORD *)(a5 + 15480);
  if (v54)
  {
    v55 = a1 - v54;
    if (v55 < 0)
      v55 = -v55;
    v56 = (double)v55 * 0.001;
  }
  else
  {
    v56 = 0.0;
  }
  v34 = *(double *)(a5 + 15464) + v44 * v56;
  *(double *)(a5 + 15464) = v34;
  v33 = *(double *)(a5 + 15472) + v49 * v56;
  *(double *)(a5 + 15472) = v33;
  *(_DWORD *)(a5 + 15480) = a1;
LABEL_82:
  v57 = dbl_24BC09CA0[v154 == 7];
  v58 = *(_DWORD *)(a4 + 1872);
  if (!v58)
    v57 = 5400.0;
  if (v34 > v57)
  {
    HIBYTE(v155) = 0;
    if (v22 != 1)
    {
      v10 = v147;
      goto LABEL_137;
    }
    v59 = 0;
    *(_DWORD *)(v9 + 20) = 25;
    *(_DWORD *)(v9 + 36) = 25;
    v60 = 0.0;
    v10 = v147;
    goto LABEL_119;
  }
  if (v154 == 7)
  {
    v61 = v34 * v34;
    if (v58)
    {
      v10 = v147;
    }
    else
    {
      v10 = v147;
      if (v153 != 4 && (v153 != 3 || *(int *)(a4 + 20) <= 7))
        v61 = fmax(v61, 4356.0);
    }
    v60 = v33 * v33;
    if (*(_DWORD *)(a5 + 20) < 5u)
      v60 = v60 * 0.444444444;
    if (v17)
    {
      v63 = v161;
      goto LABEL_113;
    }
  }
  else
  {
    v62 = fmin((double)(int)(v32 / 0x3E8 * (v32 / 0x3E8)) * 225.0, 4.0e10);
    v63 = v161;
    v10 = v147;
    if (v161 < v62)
    {
      v63 = v160;
      v161 = v160;
      if (v160 < v62)
      {
        v160 = v62;
        v161 = v62;
        v63 = v62;
      }
      v162 = 0;
    }
    if (v155 > 1u)
    {
      v60 = 0.0;
      if (v17)
      {
        v61 = 0.0;
        goto LABEL_113;
      }
    }
    else
    {
      v64 = *(int *)(a5 + 20);
      if (v64 > 8)
        v65 = 100.0;
      else
        v65 = dbl_24BC09D40[v64];
      v60 = v65 * (double)(int)(v31 * v31);
      if (v155 == 1)
        v60 = v60 * 0.5;
      if ((v17 & 1) != 0)
      {
        v61 = v60;
LABEL_113:
        v66 = v162;
        v67 = v61 + v160;
        v68 = v63 + v61;
        *(_OWORD *)(a4 + 60224) = v163;
        v160 = v67;
        v161 = v68;
        *(_BYTE *)v11 = 1;
        *(_DWORD *)(v11 + 20) = v157;
        v69 = v153;
        *(_DWORD *)(v11 + 4) = v22;
        *(_DWORD *)(v11 + 8) = v69;
        *(double *)(v11 + 48) = v67;
        *(double *)(v11 + 56) = v68;
        *(_QWORD *)(v11 + 64) = v66;
        if (v58 || (v70 = 4.0, v149) && *(_DWORD *)v150 <= 0x18u)
          v70 = 25.0;
        *(double *)(v11 + 104) = v70;
        *(_DWORD *)(v11 + 12) = v155;
        v59 = 1;
        goto LABEL_119;
      }
    }
  }
  v59 = 0;
LABEL_119:
  v71 = v157;
  if (HIBYTE(v155))
  {
    v72 = v60 + v156;
    v156 = v72;
    *(_BYTE *)(v11 + 128) = 1;
    v73 = v153;
    *(_DWORD *)(v11 + 148) = v71;
    *(_DWORD *)(v11 + 132) = v22;
    *(_DWORD *)(v11 + 136) = v73;
    *(double *)(v11 + 152) = v164;
    *(double *)(v11 + 160) = v72;
    *(_QWORD *)(v11 + 184) = 0x4039000000000000;
    *(_DWORD *)(v11 + 140) = v155;
  }
  if (!v71)
    v59 = 0;
  if (v59 == 1 && (!*v16 || !*(_BYTE *)(a4 + 1864)))
  {
    v74 = v22;
    v75 = fmax(v160 * 9.0, 4.0e10);
    v76 = Horiz_Diff_Sqd((double *)(a4 + 1704), (const double *)(a4 + 60224));
    if (v76 <= v75)
    {
      v77 = *(unsigned __int8 *)(a4 + 1864);
    }
    else
    {
      v77 = 0;
      *(_BYTE *)(a4 + 1864) = 0;
    }
    v22 = v74;
    if (v76 > 40000.0 && !v77)
    {
      *(_OWORD *)(a4 + 1704) = *(_OWORD *)(a4 + 60224);
      if (HIBYTE(v155))
        *(_QWORD *)(a4 + 1720) = *(_QWORD *)(v11 + 152);
      Geo2ECEF(a4 + 1704, (uint64_t)&WGS84_Datum, (double *)(a4 + 1560));
      NK_Transform_State(a4 + 1512);
      if (*(_DWORD *)(a5 + 148) && !*(_BYTE *)(a5 + 136))
      {
        *(_BYTE *)(a5 + 136) = 1;
        *(_DWORD *)(a5 + 140) = 94;
      }
      *(_WORD *)(a5 + 244) = 5;
      v22 = v74;
    }
  }
LABEL_137:
  if (*(_DWORD *)(a5 + 20) <= 4u)
  {
    v148 = v22;
    v151 = 0u;
    v152 = 0u;
    if (!Core_Get_ExtA_Alt(6000, &v151))
    {
LABEL_183:
      v22 = v148;
      goto LABEL_184;
    }
    *(_BYTE *)v9 = 1;
    *(_BYTE *)(v9 + 8) = 1;
    v78 = v151;
    v79 = *(_DWORD **)(p_api + 8);
    if (*v79)
      v80 = v79[4] - (*v79 + v151);
    else
      v80 = 0;
    *(_DWORD *)(v9 + 12) = v80 + a1;
    v159 = 0;
    memset(v158, 0, sizeof(v158));
    ExtA_MapV = Core_Get_ExtA_MapV(30000, (uint64_t)v158);
    v82 = a3;
    if (ExtA_MapV)
    {
      if ((_BYTE)v159)
      {
        *(_BYTE *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 4) = 8;
        EvCrt_v("NK_Get_Ext_Meas:  ERROR:  DEM Altitude provided when Map Vector indicates Tunnel");
        v82 = a3;
      }
      if (BYTE4(v159))
      {
        *(_BYTE *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 4) = 9;
        EvCrt_v("NK_Get_Ext_Meas:  ERROR:  DEM Altitude provided when Map Vector indicates Bridge");
        v82 = a3;
      }
    }
    if (HIBYTE(v155) && *(_BYTE *)(v11 + 128) && (*(_DWORD *)(v11 + 136) - 3) <= 1)
    {
      v83 = *(double *)&v152;
      v84 = v83 * v83;
      v85 = *(double *)(v11 + 160);
      if (v85 < v83 * v83)
      {
        *(_BYTE *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 4) = 10;
        EvCrt_v("NK_Get_Ext_Meas:  WARNING:  DEM Altitude rejected - Worse Sigma Unc than Ref Pos, %f > %f", v83, sqrt(v85));
LABEL_152:
        v82 = a3;
        goto LABEL_158;
      }
      v86 = *((double *)&v151 + 1);
      v87 = *((double *)&v151 + 1) - *(double *)(v11 + 152);
      if (v87 * v87 > (v84 + v85) * 9.0)
      {
        *(_BYTE *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 4) = 11;
        EvCrt_v("NK_Get_Ext_Meas:  ERROR:  DEM Altitude rejected - Incompatible with Ref Pos, diff %f  Sigma %f %f", fabs(v87), v83, sqrt(v85));
        v82 = a3;
        if (!*(_BYTE *)(v150 + 130) && (a3[15] - 8) >= 0xFFFFFFFD && !*(_BYTE *)(a5 + 136))
        {
          if (*(_DWORD *)(a5 + 148))
          {
            v144 = *(double *)(a4 + 1720) - v86;
            if (v144 * v144 < v84 * 16.0)
            {
              *(_BYTE *)(a5 + 136) = 1;
              *(_DWORD *)(a5 + 140) = 98;
              EvLog_v("NK_Get_Ext_Meas:  KF Reset Type %d:  DEM Edit & KF Height near edited DEM Altitude,  diff %f  Sigma %f", 98, fabs(v144), sqrt(*(double *)(v11 + 160)));
              goto LABEL_152;
            }
          }
        }
      }
    }
LABEL_158:
    if (*(_BYTE *)(v9 + 8))
    {
      *(_BYTE *)(v11 + 128) = 1;
      *(_DWORD *)(v11 + 132) = 1;
      v88 = *(_DWORD **)(p_api + 8);
      if (*v88)
        v89 = *v88 + v78 - v88[4];
      else
        v89 = 0;
      *(_DWORD *)(v11 + 148) = v89;
      v90 = *((double *)&v151 + 1);
      *(_QWORD *)(v11 + 152) = *((_QWORD *)&v151 + 1);
      switch(DWORD2(v152))
      {
        case 0:
          if (*(double *)&v152 >= 25.0)
            v91 = 3;
          else
            v91 = 4;
          break;
        case 1:
          v91 = 2;
          break;
        case 2:
          v91 = 3;
          break;
        case 3:
          v91 = 4;
          break;
        default:
          v91 = 1;
          break;
      }
      *(_DWORD *)(v11 + 136) = v91;
      v92 = *(_DWORD *)(v9 + 12);
      if (v92 < 0)
        v92 = -v92;
      v93 = (double)v92 * 0.001;
      if (*(_BYTE *)(v150 + 129))
        v93 = v93 * 0.1;
      v94 = v93 * v93 + *(double *)&v152 * *(double *)&v152;
      *(double *)(v11 + 160) = v94;
      v95 = *(unsigned __int8 *)(v150 + 130);
      if (*(_BYTE *)(v150 + 130))
      {
        v96 = v82[15];
        v97 = 25.0;
        if ((v96 - 5) < 3)
          v97 = dbl_24BC09D88[v96 - 5];
      }
      else
      {
        v97 = 25.0;
        if (!*v82)
          v97 = 9.0;
        v96 = v82[15];
      }
      *(double *)(v11 + 184) = v97;
      *(_DWORD *)(v11 + 140) = 0;
      HIBYTE(v155) = 1;
      if (v95)
      {
        if ((v96 - 8) >= 0xFFFFFFFD && !*(_BYTE *)(a5 + 136))
        {
          if (*(_DWORD *)(a5 + 148))
          {
            v142 = *(double *)(a4 + 1720) - v90;
            v143 = v10[77];
            if (v142 * v142 > (v94 + v143 * v143) * 16.0)
            {
              *(_BYTE *)(a5 + 136) = 1;
              *(_DWORD *)(a5 + 140) = 95;
              EvLog_v("NK_Get_Ext_Meas:  KF Reset Type %d:  DEM Altitude Incompatible with current Height, diff %f  Sigma %f %f", 95, fabs(v142), sqrt(v94), v143);
            }
          }
        }
      }
    }
    goto LABEL_183;
  }
LABEL_184:
  if ((!*(_DWORD *)(v150 + 16) || *(_BYTE *)(a5 + 241)) && v10[78] > 200.0 && *(_DWORD *)(a5 + 20) <= 4u)
  {
    v98 = HIBYTE(v155);
    if (!HIBYTE(v155) || v10[77] < 100000.0 && *(double *)(v11 + 160) > 40000.0)
    {
      *(_BYTE *)(v11 + 128) = 1;
      *(_DWORD *)(v11 + 148) = a1;
      *(_QWORD *)(v11 + 132) = 0x300000002;
      *(_QWORD *)(v11 + 160) = 0x414E848000000000;
      if (v22 && v98 && v164 > -500.0 && v164 < 6000.0)
      {
        *(double *)(v11 + 152) = v164;
        if (v149)
          *(double *)(v11 + 160) = v156;
      }
      else
      {
        v99 = (double *)(a4 + 1720);
        *(_QWORD *)&v158[0] = 0;
        if (R8_EQ((const double *)(a4 + 1720), (const double *)v158) || (v100 = *v99, *v99 <= -500.0) || v100 >= 6000.0)
          *(_QWORD *)(v11 + 152) = 0x407F400000000000;
        else
          *(double *)(v11 + 152) = v100;
      }
      *(_QWORD *)(v11 + 184) = 0x4039000000000000;
      *(_DWORD *)(v11 + 140) = 2;
    }
  }
  if (!*(_BYTE *)(a4 + 1864) && *(_BYTE *)v11 && *(_DWORD *)(v11 + 4) == 1 && *(_BYTE *)(v11 + 128))
    *(_BYTE *)(a4 + 1864) = 1;
LABEL_204:
  v101 = (_DWORD *)(a4 + 59932);
  if (*(_BYTE *)v11)
  {
    *v8 = 1;
    *(_DWORD *)(a5 + 15432) = *(_DWORD *)(v11 + 20);
    *(_QWORD *)(a5 + 15440) = *(_QWORD *)(v11 + 48);
  }
  else if (*v8 && (int)(a1 - *(_DWORD *)(a5 + 15432)) > 120000)
  {
    *v8 = 0;
  }
  v102 = (_BYTE *)(a4 + 60528);
  if (*(_BYTE *)(v11 + 128))
  {
    v8[1] = 1;
    *(_DWORD *)(a5 + 15448) = *(_DWORD *)(v11 + 148);
    *(_QWORD *)(a5 + 15456) = *(_QWORD *)(v11 + 160);
  }
  else if (v8[1] && (int)(a1 - *(_DWORD *)(a5 + 15448)) > 120000)
  {
    v8[1] = 0;
  }
  *(_BYTE *)(a4 + 60128) = 0;
  *(_QWORD *)&v158[0] = 0;
  *(_QWORD *)&v151 = 0;
  LOBYTE(v163) = 0;
  if (Core_Get_Clk_Drift(a1, 300, &v157, (double *)v158, (double *)&v151, (unsigned __int8 *)&v163))
  {
    *(_BYTE *)(a4 + 60128) = 1;
    *(_DWORD *)(a4 + 60132) = 1;
    *(_DWORD *)(a4 + 60148) = v157;
    v103 = *(double *)v158;
    *(double *)(a4 + 60152) = *(double *)v158 * 299792458.0;
    v104 = *(double *)&v151 * 8.98755179e16;
    *(double *)(a4 + 60160) = *(double *)&v151 * 8.98755179e16;
    *(_QWORD *)(a4 + 60184) = 0x4030000000000000;
    *(_DWORD *)(a4 + 60140) = v163;
    if (v104 < v10[87] * v10[87])
    {
      v105 = *(_QWORD *)(p_api + 48);
      if (*(_BYTE *)(v105 + 16) && *(int *)v105 >= 3)
      {
        v106 = (int)*(double *)(v105 + 32) + 604800 * *(__int16 *)(v105 + 28);
        if (v106 <= 0)
          v107 = v106;
        else
          v107 = v106 - 1800;
      }
      else
      {
        v107 = 0;
      }
      Core_Save_Clk_Drift(1, v107, v103);
      EvLog_v("NK_Get_Ext_Meas: Core_Save_Clk_Drift %g, Sigma(m/s) %g < %g", v103 * 1000000000.0, sqrt(*(double *)(a4 + 60160)), v10[87]);
    }
  }
  *(_QWORD *)&v158[0] = 0;
  *(_QWORD *)&v163 = 0;
  *v102 = 0;
  if (Core_Get_Speed(a1, &v157, (double *)v158, (double *)&v163, (double *)&v151))
  {
    v108 = v157;
    v109 = a1 - v157;
    if ((int)(a1 - v157) < 0)
      v109 = v157 - a1;
    if (v109 <= 0x1F4)
    {
      *v102 = 1;
      *(_DWORD *)(a4 + 60532) = 1;
      *(_DWORD *)(a4 + 60544) = v108;
      v110 = v163;
      *(_QWORD *)(a4 + 60552) = *(_QWORD *)&v158[0];
      *(_QWORD *)(a4 + 60560) = v110;
      *(_QWORD *)(a4 + 60584) = 0x4030000000000000;
    }
  }
  *(_QWORD *)&v163 = 0;
  v156 = 0.0;
  *(_BYTE *)(a4 + 60600) = 0;
  if (Core_Get_GSpeed(a1, &v157, (double *)&v163, &v156, &v160))
  {
    v111 = v157;
    v112 = a1 - v157;
    if ((int)(a1 - v157) < 0)
      v112 = v157 - a1;
    if (v112 <= 0x1F4)
    {
      *(_BYTE *)(a4 + 60600) = 1;
      *(_DWORD *)(a4 + 60604) = 1;
      *(_DWORD *)(a4 + 60616) = v111;
      v113 = v156;
      *(_QWORD *)(a4 + 60624) = v163;
      *(double *)(a4 + 60632) = v113;
      *(_QWORD *)(a4 + 60656) = 0x4030000000000000;
    }
  }
  if (*(_DWORD *)(a5 + 20) < 5u)
  {
    memset(v158, 0, 24);
    if (Core_Get_ExtA_AT_Vel(1000, (uint64_t)v158))
    {
      *(_BYTE *)(v9 + 80) = 1;
      *(_BYTE *)(v9 + 88) = 1;
      *(_DWORD *)(v9 + 84) = 0;
      v114 = *(_DWORD **)(p_api + 8);
      if (*v114)
        v115 = LODWORD(v158[0]) + *v114 - v114[4];
      else
        v115 = 0;
      *(_DWORD *)(v9 + 92) = a1 - v115;
      v116 = *(double *)&v158[1] * *(double *)&v158[1];
      if (*(_BYTE *)(a4 + 60600) && *(double *)(a4 + 60632) < v116)
      {
        *(_BYTE *)(v9 + 88) = 0;
        if (*(_DWORD *)(a4 + 60604) == 1)
        {
          *(_DWORD *)(v9 + 84) = 30;
          EvCrt_v("Set_ExtA_VA_Horz_Spd: EXTA VA Along-Track Speed rejected - Worse Sigma Unc than Existing EXT Ground Speed Aiding [%d], %f > %f");
        }
        else
        {
          *(_DWORD *)(v9 + 84) = 31;
          EvCrt_v("Set_ExtA_VA_Horz_Spd: EXTA VA Along-Track Speed rejected - Worse Sigma Unc than Existing INT Ground Speed Aiding [%d], %f > %f");
        }
      }
      else if (*v101 == 1
             && *(_BYTE *)(a4 + 59964)
             && (*((double *)v158 + 1) >= 3.0 || *((double *)v158 + 1) >= *(double *)&v158[1] * 3.0))
      {
        *(_BYTE *)(v9 + 88) = 0;
        *(_DWORD *)(v9 + 84) = 28;
        EvCrt_v("Set_ExtA_VA_Horz_Spd: VA Along-Track Speed rejected - Discrepancy with CTXT Static Status, AT Spd %f  Sigma %f");
      }
      else
      {
        v151 = 0uLL;
        *(_QWORD *)&v152 = 0;
        if (Core_Get_ExtA_SpdC(120000, (uint64_t)&v151)
          && ((v117 = *(_DWORD **)(p_api + 8), !*v117) ? (v118 = 0) : (v118 = v117[4] - (v151 + *v117)),
              (int)(v118 + a1) <= SDWORD1(v151)
           && (*((double *)v158 + 1) > *(double *)&v152 || *((double *)v158 + 1) < *((double *)&v151 + 1))))
        {
          *(_BYTE *)(v9 + 88) = 0;
          *(_DWORD *)(v9 + 84) = 27;
          EvCrt_v("Set_ExtA_VA_Horz_Spd: VA Along-Track Speed rejected - Out of Speed constrains, AT Spd %f  SpdC %f %f");
        }
        else
        {
          *(_BYTE *)(a4 + 60600) = 1;
          *(_DWORD *)(a4 + 60616) = v115;
          *(_QWORD *)(a4 + 60624) = *((_QWORD *)&v158[0] + 1);
          *(double *)(a4 + 60632) = v116;
          *(_QWORD *)(a4 + 60604) = 0x400000001;
          *(_QWORD *)(a4 + 60656) = 0x4030000000000000;
        }
      }
    }
    if (*(_DWORD *)(a5 + 20) <= 4u)
    {
      memset(v158, 0, 24);
      if (Core_Get_ExtA_V_Vel(1000, (uint64_t)v158))
      {
        *(_BYTE *)(v9 + 96) = 1;
        *(_BYTE *)(v9 + 104) = 1;
        *(_DWORD *)(v9 + 100) = 0;
        v119 = *(_DWORD **)(p_api + 8);
        if (*v119)
          v120 = LODWORD(v158[0]) + *v119 - v119[4];
        else
          v120 = 0;
        *(_DWORD *)(v9 + 108) = a1 - v120;
        v121 = *(double *)&v158[1];
        if (*v101 == 1
          && *(_BYTE *)(a4 + 59964)
          && ((v122 = *((double *)v158 + 1), v123 = fabs(*((double *)v158 + 1)), v123 >= 3.0)
           || v123 >= *(double *)&v158[1] * 3.0))
        {
          *(_BYTE *)(v9 + 104) = 0;
          *(_DWORD *)(v9 + 100) = 32;
          EvCrt_v("Set_ExtA_VA_Vert_Vel: VA Vert Velocity rejected - Discrepancy with CTXT Static Status, Vert vel %f  Sigma %f", v122, v121);
        }
        else
        {
          *(_BYTE *)(v11 + 200) = 1;
          *(_DWORD *)(v11 + 220) = v120;
          *(_QWORD *)(v11 + 224) = *((_QWORD *)&v158[0] + 1);
          *(double *)(v11 + 232) = v121 * v121;
          *(_QWORD *)(v11 + 204) = 0x400000001;
          *(_QWORD *)(v11 + 256) = 0x4030000000000000;
        }
      }
    }
  }
  *(_QWORD *)&v151 = 0;
  v160 = 0.0;
  v156 = 0.0;
  *(_BYTE *)(a4 + 60672) = 0;
  result = (char *)Core_Get_Track(a1, &v157, (double *)&v151, &v156, &v160, (double *)&v163);
  if ((_DWORD)result)
  {
    v125 = v157;
    v126 = a1 - v157;
    if ((int)(a1 - v157) < 0)
      v126 = v157 - a1;
    if (v126 <= 0x1F4)
    {
      *(_BYTE *)(a4 + 60672) = 1;
      *(_DWORD *)(a4 + 60676) = 1;
      *(_DWORD *)(a4 + 60688) = v125;
      v127 = v160;
      *(_QWORD *)(a4 + 60696) = v151;
      *(double *)(a4 + 60704) = v127;
      *(_QWORD *)(a4 + 60728) = 0x4030000000000000;
      *(double *)(a4 + 60744) = v156;
    }
  }
  if (*(_DWORD *)(a5 + 20) < 5u)
  {
    memset(v158, 0, 24);
    result = (char *)Core_Get_ExtA_Heading(1000, (uint64_t)v158);
    if ((_DWORD)result)
    {
      *(_BYTE *)(v9 + 112) = 1;
      *(_BYTE *)(v9 + 120) = 1;
      *(_DWORD *)(v9 + 116) = 0;
      v128 = *(_DWORD **)(p_api + 8);
      if (*v128)
        v129 = LODWORD(v158[0]) + *v128 - v128[4];
      else
        v129 = 0;
      *(_DWORD *)(v9 + 124) = a1 - v129;
      v130 = *(double *)&v158[1] * *(double *)&v158[1];
      if (*(_BYTE *)(a4 + 60672) && *(double *)(a4 + 60704) < v130)
      {
        *(_BYTE *)(v9 + 120) = 0;
        if (*(_DWORD *)(a4 + 60676) == 1)
        {
          *(_DWORD *)(v9 + 116) = 36;
          result = EvCrt_v("Set_ExtA_VA_Heading: EXTA VA Heading rejected - Worse Sigma Unc than Existing EXT Track Aiding [%d], %f > %f");
        }
        else
        {
          *(_DWORD *)(v9 + 116) = 37;
          result = EvCrt_v("Set_ExtA_VA_Heading: EXTA VA Heading rejected - Worse Sigma Unc than Existing INT Track Aiding [%d], %f > %f");
        }
      }
      else
      {
        *(_BYTE *)(a4 + 60672) = 1;
        *(_DWORD *)(a4 + 60688) = v129;
        *(_QWORD *)(a4 + 60696) = *((_QWORD *)&v158[0] + 1);
        *(double *)(a4 + 60704) = v130;
        *(_QWORD *)(a4 + 60712) = *(_QWORD *)(a4 + 1856);
        *(_QWORD *)(a4 + 60676) = 0x400000001;
        *(_QWORD *)(a4 + 60728) = 0x4030000000000000;
        *(_QWORD *)(a4 + 60744) = 0x3FF0000000000000;
      }
    }
    if (*(_DWORD *)(a5 + 20) <= 4u)
    {
      memset(v158, 0, 24);
      result = (char *)Core_Get_ExtA_SpdC(120000, (uint64_t)v158);
      if ((_DWORD)result)
      {
        v131 = v158[0];
        result = (char *)mach_continuous_time();
        v132 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)(unint64_t)result) - v131;
        if (v132 >= SDWORD1(v158[0]))
        {
          *(_DWORD *)(v9 + 132) = 2;
        }
        else
        {
          *(_BYTE *)v10 = 1;
          *((_DWORD *)v10 + 1) = 1;
        }
        v136 = *(_DWORD **)(p_api + 8);
        if (*v136)
          v137 = *v136 + v131 - v136[4];
        else
          v137 = 0;
        *((_DWORD *)v10 + 2) = v137;
        *((_OWORD *)v10 + 1) = *(_OWORD *)((char *)v158 + 8);
      }
      else
      {
        if (!*(_BYTE *)(a4 + 60600) || *(_DWORD *)(a4 + 60604) != 1 || *(_DWORD *)(a4 + 60608) != 4)
        {
LABEL_301:
          if (*(_BYTE *)v10)
          {
            v138 = v10[2];
            v139 = *(double *)(a4 + 1848);
            if (v138 <= v139 + 0.3
              || (*(_BYTE *)v10 = 0,
                  *(_DWORD *)(v9 + 132) = 41,
                  result = EvCrt_v("NK_Get_Ext_Meas:  Speed Constraint Rejected:  Lower Limit > 2D_Speed+0.3 m/s, %f > %f", v138, v139), *(_BYTE *)v10))
            {
              v140 = v10[3];
              v141 = *(double *)(a4 + 1840);
              if (v140 < v141 + -0.3)
              {
                *(_BYTE *)v10 = 0;
                *(_DWORD *)(v9 + 132) = 42;
                return EvCrt_v("NK_Get_Ext_Meas:  Speed Constraint Rejected:  Upper Limit < 3D_Speed-0.3 m/s, %f < %f", v140, v141);
              }
            }
          }
          return result;
        }
        *(_BYTE *)v10 = 1;
        v133 = *(_DWORD *)(a4 + 60616);
        *((_DWORD *)v10 + 1) = 2;
        *((_DWORD *)v10 + 2) = v133;
        v134 = *(double *)(a4 + 60624);
        v135 = sqrt(*(double *)(a4 + 60632)) * 3.0;
        v10[2] = fmax(v134 - v135, 0.0);
        v10[3] = fmin(v134 + v135, 12.0);
        v132 = a1 - v133;
      }
      *(_BYTE *)(v9 + 128) = 1;
      *(_DWORD *)(v9 + 140) = v132;
      goto LABEL_301;
    }
  }
  return result;
}

uint64_t XofConstellationHeader::XofConstellationHeader(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = result;
  for (i = 0; i != 336; i += 48)
  {
    v4 = result + i;
    *(_WORD *)(v4 + 4) = 0;
    *(_DWORD *)v4 = 0;
    *(_OWORD *)(v4 + 8) = 0uLL;
    *(_OWORD *)(v4 + 24) = 0uLL;
    *(_QWORD *)(v4 + 40) = 0;
  }
  v5 = 0;
  v6 = *a2;
  do
  {
    v7 = v6 + v5;
    *(_BYTE *)v2 = *(_BYTE *)(v6 + v5 + 3);
    *(_BYTE *)(v2 + 1) = *(_BYTE *)(v6 + v5 + 35);
    *(_BYTE *)(v2 + 2) = *(_BYTE *)(v6 + v5 + 67);
    *(_BYTE *)(v2 + 3) = *(_BYTE *)(v6 + v5 + 99);
    *(_BYTE *)(v2 + 4) = *(_BYTE *)(v6 + v5 + 131);
    v8 = *(_QWORD *)(v6 + v5 + 304);
    *(_QWORD *)(v2 + 8) = *(_QWORD *)(v6 + v5 + 248);
    *(_QWORD *)(v2 + 16) = v8;
    v9 = *(_QWORD *)(v6 + v5 + 416);
    *(_QWORD *)(v2 + 24) = *(_QWORD *)(v6 + v5 + 360);
    *(_QWORD *)(v2 + 32) = v9;
    v5 += 504;
    *(_QWORD *)(v2 + 40) = *(_QWORD *)(v7 + 472);
    v2 += 48;
  }
  while (v5 != 3528);
  return result;
}

uint64_t XofConstellationHeaderCodec::DecodeFromHexData(uint64_t *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  double v11;
  void **v12;
  void *__p[2];
  char v15;
  char __str[966];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
    return 1;
  while (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)v3, a2, a3) == 1)
  {
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(v3 + 32), a2, a3) != 1)
      break;
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(v3 + 64), a2, a3) != 1)
      break;
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(v3 + 96), a2, a3) != 1)
      break;
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(v3 + 128), a2, a3) != 1)
      break;
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(v3 + 160), a2, a3) != 1)
      break;
    if (XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(v3 + 192), a2, a3) != 1)
      break;
    if (XofIntegralType<unsigned long long>::DecodeFromHexData(v3 + 224, a2, a3) != 1)
      break;
    if (XofIntegralType<unsigned long long>::DecodeFromHexData(v3 + 280, a2, a3) != 1)
      break;
    if (XofIntegralType<unsigned long long>::DecodeFromHexData(v3 + 336, a2, a3) != 1)
      break;
    if (XofIntegralType<unsigned long long>::DecodeFromHexData(v3 + 392, a2, a3) != 1)
      break;
    v7 = v3 + 448;
    if (XofIntegralType<unsigned long long>::DecodeFromHexData(v3 + 448, a2, a3) != 1)
      break;
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v8 = mach_continuous_time();
      v9 = *(char *)(v3 + 3);
      v10 = "   ";
      if (v9 <= 7)
        v10 = off_251CDB7F8[v9];
      v11 = *(double *)&g_MacClockTicksToMsRelation;
      std::string::basic_string[abi:ne180100]<0>(__p, v10);
      if (v15 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Decoded XOF Header constellation data for [%s]\n", (unint64_t)(v11 * (double)v8), "GNC", 68, "DecodeFromHexData", (const char *)v12);
      if (v15 < 0)
        operator delete(__p[0]);
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    v3 += 504;
    if (v7 + 56 == v4)
      return 1;
  }
  return 5;
}

uint64_t XofHeader::XofHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _BYTE __src[336];
  uint64_t v9;

  v4 = 0;
  v9 = *MEMORY[0x24BDAC8D0];
  v5 = (void *)(a1 + 16);
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
  do
  {
    v6 = a1 + v4;
    *(_WORD *)(v6 + 20) = 0;
    *(_DWORD *)(v6 + 16) = 0;
    *(_OWORD *)(v6 + 24) = 0uLL;
    *(_OWORD *)(v6 + 40) = 0uLL;
    v4 += 48;
    *(_QWORD *)(v6 + 56) = 0;
  }
  while (v4 != 336);
  *(_QWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  *(_WORD *)a1 = *(_WORD *)(a2 + 6);
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 38);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 142);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 180);
  XofConstellationHeader::XofConstellationHeader((uint64_t)__src, (uint64_t *)(a2 + 208));
  memcpy(v5, __src, 0x150uLL);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 300);
  *(_DWORD *)(a1 + 356) = *(_DWORD *)(a2 + 340);
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 420);
  return a1;
}

BOOL XofHeaderCodec::Decode(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  return XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)a1, a2, a3) == 1
      && XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 32), a2, a3) == 1
      && XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 64), a2, a3) == 1
      && XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 104), a2, a3) == 1
      && XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 136), a2, a3) == 1
      && XofGenericCodec::Decode<5ul,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofConstellationHeaderCodec,XofIntegralType<unsigned long long>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>>(a1, a2, a3);
}

uint64_t XofHeaderCodec::DecodeXofFormatVersion(uint64_t a1, _QWORD *a2, _WORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v8;
  std::string __p;
  unsigned __int16 v10[4];
  void *v11;
  char v12;
  char __str[966];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "formatVersion");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)v10, &__p, 1, 3, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8 = 0;
  if (XofIntegralType<unsigned short>::DecodeFromHexData(v10, a2, &v8) == 1)
  {
    *a3 = v10[3];
    v5 = 1;
  }
  else
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Could not decode XOF format version!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 69, "DecodeXofFormatVersion");
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    v5 = 5;
  }
  if (v12 < 0)
    operator delete(v11);
  return v5;
}

void sub_24BAFC5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t XofIntegralType<unsigned short>::DecodeFromHexData(unsigned __int16 *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  double v6;
  const char *v7;
  unsigned __int16 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v13;
  std::string v14;
  char __str[8];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  if ((unint64_t)(a2[1] - (*a2 + v5)) <= 1)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      v7 = (const char *)(a1 + 4);
      if (*((char *)a1 + 31) < 0)
        v7 = *(const char **)v7;
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Insufficient data to decode, in the buffer! Field decoding is %s\n", (unint64_t)v6, "GNC", 87, "DecodeFromHexData", v7);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 5;
  }
  *(_QWORD *)__str = 0;
  if (!XofBaseType::CopyDataFromBuffer((int)a1, a2, v5, 2uLL, (unint64_t *)__str))
    return 5;
  v8 = *(_WORD *)__str;
  a1[3] = *(_WORD *)__str;
  v9 = *a1;
  v10 = a1[1];
  v11 = a1[2];
  if (*((char *)a1 + 31) < 0)
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)a1 + 1), *((_QWORD *)a1 + 2));
  else
    v14 = *(std::string *)(a1 + 4);
  v13 = XofBaseType::ValidateUnsignedRange((uint64_t)a1, v8, v9, v10, v11, (const char *)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  *a3 += 2;
  if (v13)
    return 1;
  else
    return 5;
}

void sub_24BAFC7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

XofConstellationHeaderCodec::Payload *std::vector<XofConstellationHeaderCodec::Payload>::vector(XofConstellationHeaderCodec::Payload *a1, unint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  if (a2)
  {
    std::vector<XofConstellationHeaderCodec::Payload>::__vallocate[abi:ne180100](a1, a2);
    std::vector<XofConstellationHeaderCodec::Payload>::__construct_at_end(a1, a2);
  }
  return a1;
}

void sub_24BAFC84C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<XofConstellationHeaderCodec::Payload>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

char *std::vector<XofConstellationHeaderCodec::Payload>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x82082082082083)
    std::vector<XofConstellationHeaderCodec::Payload>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XofConstellationHeaderCodec::Payload>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[504 * v4];
  return result;
}

XofConstellationHeaderCodec::Payload *std::vector<XofConstellationHeaderCodec::Payload>::__construct_at_end(XofConstellationHeaderCodec::Payload *result, uint64_t a2)
{
  XofConstellationHeaderCodec::Payload *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result;
  v3 = *((_QWORD *)result + 1);
  if (a2)
  {
    v4 = v3 + 504 * a2;
    v5 = 504 * a2;
    do
    {
      *(_QWORD *)(v3 + 496) = 0;
      *(_OWORD *)(v3 + 464) = 0u;
      *(_OWORD *)(v3 + 480) = 0u;
      *(_OWORD *)(v3 + 432) = 0u;
      *(_OWORD *)(v3 + 448) = 0u;
      *(_OWORD *)(v3 + 400) = 0u;
      *(_OWORD *)(v3 + 416) = 0u;
      *(_OWORD *)(v3 + 368) = 0u;
      *(_OWORD *)(v3 + 384) = 0u;
      *(_OWORD *)(v3 + 336) = 0u;
      *(_OWORD *)(v3 + 352) = 0u;
      *(_OWORD *)(v3 + 304) = 0u;
      *(_OWORD *)(v3 + 320) = 0u;
      *(_OWORD *)(v3 + 272) = 0u;
      *(_OWORD *)(v3 + 288) = 0u;
      *(_OWORD *)(v3 + 240) = 0u;
      *(_OWORD *)(v3 + 256) = 0u;
      *(_OWORD *)(v3 + 208) = 0u;
      *(_OWORD *)(v3 + 224) = 0u;
      *(_OWORD *)(v3 + 176) = 0u;
      *(_OWORD *)(v3 + 192) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)v3 = 0u;
      result = XofConstellationHeaderCodec::Payload::Payload((XofConstellationHeaderCodec::Payload *)v3);
      v3 += 504;
      v5 -= 504;
    }
    while (v5);
    v3 = v4;
  }
  *((_QWORD *)v2 + 1) = v3;
  return result;
}

void sub_24BAFC9BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<XofConstellationHeaderCodec::Payload>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<XofConstellationHeaderCodec::Payload>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x82082082082083)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(504 * a2);
}

XofConstellationHeaderCodec::Payload *XofConstellationHeaderCodec::Payload::Payload(XofConstellationHeaderCodec::Payload *this)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  std::string __p;
  _OWORD v21[2];
  __int128 v22;
  uint64_t v23;
  std::string v24;
  _OWORD v25[2];
  __int128 v26;
  uint64_t v27;
  std::string v28;
  _OWORD v29[2];
  __int128 v30;
  uint64_t v31;
  std::string v32;
  _OWORD v33[2];
  __int128 v34;
  uint64_t v35;
  std::string v36;
  _OWORD v37[2];
  __int128 v38;
  uint64_t v39;
  std::string v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  std::string v44;
  int v45;
  __int128 v46;
  uint64_t v47;
  std::string v48;
  int v49;
  __int128 v50;
  uint64_t v51;
  std::string v52;
  int v53;
  __int128 v54;
  uint64_t v55;
  std::string v56;
  int v57;
  __int128 v58;
  uint64_t v59;
  std::string v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  std::string v64;
  int v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v64, "constId");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v65, &v64, 0, 6, 0);
  std::string::basic_string[abi:ne180100]<0>(&v60, "brdcstAlmNumSats");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v61, &v60, 0, 197, 0);
  std::string::basic_string[abi:ne180100]<0>(&v56, "brdcstEphNumSats");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v57, &v56, 0, 197, 0);
  std::string::basic_string[abi:ne180100]<0>(&v52, "extEphNumSats");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v53, &v52, 0, 197, 0);
  std::string::basic_string[abi:ne180100]<0>(&v48, "extEphNumBlocks");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v49, &v48, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v44, "reserved1");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v45, &v44, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v40, "reserved2");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v41, &v40, 0, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v36, "extEphprnBitmask");
  XofIntegralType<unsigned long long>::XofIntegralType((uint64_t)v37, &v36, 0, -1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v32, "l1CABrdcstingSats");
  XofIntegralType<unsigned long long>::XofIntegralType((uint64_t)v33, &v32, 0, -1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v28, "l5BrdcstingSats");
  XofIntegralType<unsigned long long>::XofIntegralType((uint64_t)v29, &v28, 0, -1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v24, "l1CADoNotUseSats");
  XofIntegralType<unsigned long long>::XofIntegralType((uint64_t)v25, &v24, 0, -1, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "l5DoNotUseSats");
  XofIntegralType<unsigned long long>::XofIntegralType((uint64_t)v21, &__p, 0, -1, 0);
  *(_DWORD *)this = v65;
  *(_OWORD *)((char *)this + 8) = v66;
  *((_QWORD *)this + 3) = v67;
  v66 = 0uLL;
  v67 = 0;
  *((_DWORD *)this + 8) = v61;
  *(_OWORD *)((char *)this + 40) = v62;
  *((_QWORD *)this + 7) = v63;
  v63 = 0;
  v62 = 0uLL;
  *((_DWORD *)this + 16) = v57;
  v2 = v58;
  *((_QWORD *)this + 11) = v59;
  *(_OWORD *)((char *)this + 72) = v2;
  v58 = 0uLL;
  v59 = 0;
  *((_DWORD *)this + 24) = v53;
  v3 = v54;
  *((_QWORD *)this + 15) = v55;
  *(_OWORD *)((char *)this + 104) = v3;
  v54 = 0uLL;
  v55 = 0;
  *((_DWORD *)this + 32) = v49;
  v4 = v50;
  *((_QWORD *)this + 19) = v51;
  *(_OWORD *)((char *)this + 136) = v4;
  v50 = 0uLL;
  v51 = 0;
  *((_DWORD *)this + 40) = v45;
  v5 = v47;
  *(_OWORD *)((char *)this + 168) = v46;
  v46 = 0uLL;
  v47 = 0;
  v6 = v41;
  v7 = v43;
  *((_QWORD *)this + 23) = v5;
  *((_QWORD *)this + 24) = v6;
  v8 = v42;
  *((_QWORD *)this + 27) = v7;
  *(_OWORD *)((char *)this + 200) = v8;
  v42 = 0uLL;
  v43 = 0;
  v9 = v37[1];
  *((_OWORD *)this + 14) = v37[0];
  *((_OWORD *)this + 15) = v9;
  v10 = v38;
  *((_QWORD *)this + 34) = v39;
  *((_OWORD *)this + 16) = v10;
  v38 = 0uLL;
  v39 = 0;
  v11 = v33[1];
  *(_OWORD *)((char *)this + 280) = v33[0];
  *(_OWORD *)((char *)this + 296) = v11;
  v12 = v34;
  *((_QWORD *)this + 41) = v35;
  *(_OWORD *)((char *)this + 312) = v12;
  v34 = 0uLL;
  v35 = 0;
  v13 = v29[1];
  *((_OWORD *)this + 21) = v29[0];
  *((_OWORD *)this + 22) = v13;
  v14 = v30;
  *((_QWORD *)this + 48) = v31;
  *((_OWORD *)this + 23) = v14;
  v30 = 0uLL;
  v31 = 0;
  v15 = v25[1];
  *(_OWORD *)((char *)this + 392) = v25[0];
  *(_OWORD *)((char *)this + 408) = v15;
  v16 = v26;
  *((_QWORD *)this + 55) = v27;
  *(_OWORD *)((char *)this + 424) = v16;
  v26 = 0uLL;
  v27 = 0;
  v17 = v21[1];
  *((_OWORD *)this + 28) = v21[0];
  *((_OWORD *)this + 29) = v17;
  v18 = v22;
  *((_QWORD *)this + 62) = v23;
  *((_OWORD *)this + 30) = v18;
  v22 = 0uLL;
  v23 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27) < 0)
      operator delete((void *)v26);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43) < 0)
    operator delete((void *)v42);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47) < 0)
    operator delete((void *)v46);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51) < 0)
    operator delete((void *)v50);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55) < 0)
    operator delete((void *)v54);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59) < 0)
    operator delete((void *)v58);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63) < 0)
    operator delete((void *)v62);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67) < 0)
    operator delete((void *)v66);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  return this;
}

void sub_24BAFCFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  void *a70;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  uint64_t v82;

  if (a14 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a27 < 0)
    operator delete(a22);
  if (a53 < 0)
    operator delete(a48);
  if (a43 < 0)
    operator delete(a38);
  if (a69 < 0)
    operator delete(a64);
  if (a59 < 0)
    operator delete(a54);
  if (a74 < 0)
    operator delete(a73);
  if (a72 < 0)
    operator delete(a70);
  if (a78 < 0)
    operator delete(a77);
  if (a76 < 0)
    operator delete(a75);
  if (a82 < 0)
    operator delete(a81);
  if (a80 < 0)
    operator delete(a79);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (*(char *)(v82 - 193) < 0)
    operator delete(*(void **)(v82 - 216));
  if (*(char *)(v82 - 225) < 0)
    operator delete(*(void **)(v82 - 248));
  if (*(char *)(v82 - 137) < 0)
    operator delete(*(void **)(v82 - 160));
  if (*(char *)(v82 - 169) < 0)
    operator delete(*(void **)(v82 - 192));
  if (*(char *)(v82 - 81) < 0)
    operator delete(*(void **)(v82 - 104));
  if (*(char *)(v82 - 113) < 0)
    operator delete(*(void **)(v82 - 136));
  if (*(char *)(v82 - 25) < 0)
    operator delete(*(void **)(v82 - 48));
  if (*(char *)(v82 - 57) < 0)
    operator delete(*(void **)(v82 - 80));
  _Unwind_Resume(a1);
}

void sub_24BAFD16C()
{
  JUMPOUT(0x24BAFD084);
}

void sub_24BAFD174()
{
  JUMPOUT(0x24BAFD094);
}

void sub_24BAFD17C()
{
  JUMPOUT(0x24BAFD0A4);
}

void sub_24BAFD184()
{
  JUMPOUT(0x24BAFD0B4);
}

void sub_24BAFD18C()
{
  JUMPOUT(0x24BAFD0C4);
}

void sub_24BAFD194()
{
  JUMPOUT(0x24BAFD0D4);
}

void sub_24BAFD19C()
{
  JUMPOUT(0x24BAFD0E4);
}

void sub_24BAFD1A4()
{
  JUMPOUT(0x24BAFD0F4);
}

void sub_24BAFD1AC()
{
  JUMPOUT(0x24BAFD104);
}

void sub_24BAFD1B4()
{
  JUMPOUT(0x24BAFD114);
}

void sub_24BAFD1BC()
{
  JUMPOUT(0x24BAFD124);
}

void sub_24BAFD1C4()
{
  JUMPOUT(0x24BAFD134);
}

void sub_24BAFD1CC()
{
  JUMPOUT(0x24BAFD144);
}

void sub_24BAFD1D4()
{
  JUMPOUT(0x24BAFD154);
}

void sub_24BAFD1DC()
{
  JUMPOUT(0x24BAFD164);
}

uint64_t XofIntegralType<unsigned char>::XofIntegralType(uint64_t a1, const std::string *a2, char a3, char a4, char a5)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::string::operator=((std::string *)(a1 + 8), a2);
  *(_BYTE *)a1 = a4;
  *(_BYTE *)(a1 + 1) = a3;
  *(_BYTE *)(a1 + 2) = a5;
  *(_BYTE *)(a1 + 3) = a5;
  return a1;
}

void sub_24BAFD278(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t XofIntegralType<unsigned long long>::XofIntegralType(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::string::operator=((std::string *)(a1 + 32), a2);
  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = a5;
  return a1;
}

void sub_24BAFD320(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::vector<XofConstellationHeaderCodec::Payload>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned long long>,XofIntegralType<unsigned long long>,XofIntegralType<unsigned long long>,XofIntegralType<unsigned long long>,XofIntegralType<unsigned long long>>::~__tuple_impl(v4 - 504);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned long long>,XofIntegralType<unsigned long long>,XofIntegralType<unsigned long long>,XofIntegralType<unsigned long long>,XofIntegralType<unsigned long long>>::~__tuple_impl(uint64_t a1)
{
  if (*(char *)(a1 + 503) < 0)
    operator delete(*(void **)(a1 + 480));
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  if (*(char *)(a1 + 279) < 0)
    operator delete(*(void **)(a1 + 256));
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t XofIntegralType<unsigned char>::DecodeFromHexData(unsigned __int8 *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  double v6;
  const char *v7;
  unsigned __int8 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v13;
  std::string v14;
  char __str[8];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  if (a2[1] - *a2 == v5)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      v7 = (const char *)(a1 + 8);
      if ((char)a1[31] < 0)
        v7 = *(const char **)v7;
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Insufficient data to decode, in the buffer! Field decoding is %s\n", (unint64_t)v6, "GNC", 87, "DecodeFromHexData", v7);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 5;
  }
  *(_QWORD *)__str = 0;
  if (!XofBaseType::CopyDataFromBuffer((int)a1, a2, v5, 1uLL, (unint64_t *)__str))
    return 5;
  v8 = __str[0];
  a1[3] = __str[0];
  v9 = *a1;
  v10 = a1[1];
  v11 = a1[2];
  if ((char)a1[31] < 0)
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)a1 + 1), *((_QWORD *)a1 + 2));
  else
    v14 = *(std::string *)(a1 + 8);
  v13 = XofBaseType::ValidateUnsignedRange((uint64_t)a1, v8, v9, v10, v11, (const char *)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  ++*a3;
  if (v13)
    return 1;
  else
    return 5;
}

void sub_24BAFD6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t XofIntegralType<unsigned long long>::DecodeFromHexData(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  double v6;
  const char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v13;
  std::string v14;
  char __str[8];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  if ((unint64_t)(a2[1] - (*a2 + v5)) <= 7)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      v7 = (const char *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v7 = *(const char **)v7;
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Insufficient data to decode, in the buffer! Field decoding is %s\n", (unint64_t)v6, "GNC", 87, "DecodeFromHexData", v7);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 5;
  }
  *(_QWORD *)__str = 0;
  if (!XofBaseType::CopyDataFromBuffer(a1, a2, v5, 8uLL, (unint64_t *)__str))
    return 5;
  v8 = *(_QWORD *)__str;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)__str;
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  if (*(char *)(a1 + 55) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
  else
    v14 = *(std::string *)(a1 + 32);
  v13 = XofBaseType::ValidateUnsignedRange(a1, v8, v9, v10, v11, (const char *)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  *a3 += 8;
  if (v13)
    return 1;
  else
    return 5;
}

void sub_24BAFD95C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t XofIntegralType<unsigned int>::DecodeFromHexData(unsigned int *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  double v6;
  const char *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v13;
  std::string v14;
  char __str[8];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  if ((unint64_t)(a2[1] - (*a2 + v5)) <= 3)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      v7 = (const char *)(a1 + 4);
      if (*((char *)a1 + 39) < 0)
        v7 = *(const char **)v7;
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Insufficient data to decode, in the buffer! Field decoding is %s\n", (unint64_t)v6, "GNC", 87, "DecodeFromHexData", v7);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 5;
  }
  *(_QWORD *)__str = 0;
  if (!XofBaseType::CopyDataFromBuffer((int)a1, a2, v5, 4uLL, (unint64_t *)__str))
    return 5;
  v8 = *(_DWORD *)__str;
  a1[3] = *(_DWORD *)__str;
  v9 = *a1;
  v10 = a1[1];
  v11 = a1[2];
  if (*((char *)a1 + 39) < 0)
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)a1 + 2), *((_QWORD *)a1 + 3));
  else
    v14 = *(std::string *)(a1 + 4);
  v13 = XofBaseType::ValidateUnsignedRange((uint64_t)a1, v8, v9, v10, v11, (const char *)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  *a3 += 4;
  if (v13)
    return 1;
  else
    return 5;
}

void sub_24BAFDB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL XofGenericCodec::Decode<5ul,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofConstellationHeaderCodec,XofIntegralType<unsigned long long>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>>(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  return XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 168), a2, a3) == 1
      && XofConstellationHeaderCodec::DecodeFromHexData((uint64_t *)(a1 + 208), a2, a3) == 1
      && XofIntegralType<unsigned long long>::DecodeFromHexData(a1 + 232, a2, a3) == 1
      && XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 288), a2, a3) == 1
      && XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 328), a2, a3) == 1
      && XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 368), a2, a3) == 1
      && XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 408), a2, a3) == 1;
}

uint64_t XofIntegralType<unsigned short>::XofIntegralType(uint64_t a1, const std::string *a2, __int16 a3, __int16 a4, __int16 a5)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::string::operator=((std::string *)(a1 + 8), a2);
  *(_WORD *)a1 = a4;
  *(_WORD *)(a1 + 2) = a3;
  *(_WORD *)(a1 + 4) = a5;
  *(_WORD *)(a1 + 6) = a5;
  return a1;
}

void sub_24BAFDCF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

double BDS_BGTOInt2Real(uint64_t a1, uint64_t a2)
{
  int v2;
  double v3;
  double result;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_WORD *)(a2 + 8) = *(_WORD *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  v3 = (double)*(__int16 *)(a1 + 20) * 4.4408921e-16;
  *(double *)(a2 + 16) = (double)v2 * 2.91038305e-11 + (double)*(__int16 *)(a1 + 24) * 2.91038305e-11;
  *(double *)(a2 + 24) = v3;
  result = (double)*(char *)(a1 + 22) * 3.38813179e-21;
  *(double *)(a2 + 32) = result;
  return result;
}

BOOL AzEl_SinCos(double *a1, uint64_t a2, uint64_t a3)
{
  double v5;
  double v6;
  unint64_t v7;
  _BOOL8 result;
  __int128 v9;
  double v10;
  double v11;
  double v12[2];

  v12[1] = *(double *)MEMORY[0x24BDAC8D0];
  v5 = a1[2];
  *(double *)(a3 + 8) = -v5;
  if (v5 <= -1.0)
  {
    v7 = 0x3FF0000000000000;
LABEL_6:
    *(_QWORD *)(a3 + 8) = v7;
    v6 = 0.0;
    goto LABEL_7;
  }
  if (v5 >= 1.0)
  {
    v7 = 0xBFF0000000000000;
    goto LABEL_6;
  }
  v6 = sqrt(v5 * -v5 + 1.0);
LABEL_7:
  *(double *)(a3 + 16) = v6;
  v12[0] = 0.0;
  result = R8_EQ((const double *)(a3 + 16), v12);
  if (result)
    goto LABEL_8;
  v10 = a1[1] / v6;
  *(double *)(a2 + 8) = v10;
  v11 = *a1 / v6;
  *(double *)(a2 + 16) = v11;
  if (v10 >= 1.0)
  {
    v9 = xmmword_24BC09DA0;
    goto LABEL_16;
  }
  if (v10 <= -1.0)
  {
    v9 = xmmword_24BC09DB0;
    goto LABEL_16;
  }
  if (v11 >= 1.0)
  {
LABEL_8:
    v9 = xmmword_24BC09DC0;
  }
  else
  {
    if (v11 > -1.0)
      return result;
    v9 = xmmword_24BC09DD0;
  }
LABEL_16:
  *(_OWORD *)(a2 + 8) = v9;
  return result;
}

_QWORD *NK_Obs_Equ_SV(_QWORD *result, int a2, __int16 a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v8;
  int v9;
  unsigned __int8 v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(a5 + 96) = 0;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  v8 = 4;
  if (a2)
    v9 = 4;
  else
    v9 = 2;
  if ((_DWORD)result != 2)
    v9 = (int)result;
  if ((v9 - 3) < 2)
  {
    v15 = 0;
    *(double *)(a5 + 32) = a6;
    *(_QWORD *)(a5 + 48) = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a5 + 56) = *(_QWORD *)(a4 + 32);
    *(_QWORD *)(a5 + 64) = *(_QWORD *)(a4 + 40);
    do
    {
      *(double *)(a5 + 72 + v15) = -(*(double *)(a4 + v15) * a6);
      v15 += 8;
    }
    while (v15 != 24);
  }
  else
  {
    if (v9 == 2)
    {
      v11 = 1.0;
      v12 = 11;
      v13 = 10;
      v14 = 9;
    }
    else
    {
      if (v9 != 1)
        return result;
      v10 = HIBYTE(a3);
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      switch((char)a3)
      {
        case 0:
          result = EvCrt_Illegal_switch_case("NK_Obs_Equ_SV", 0x6Du);
          break;
        case 1:
        case 3:
        case 5:
        case 6:
        case 7:
          *(_QWORD *)a5 = 0x3FF0000000000000;
          break;
        case 2:
          *(_QWORD *)(a5 + 8) = 0x3FF0000000000000;
          break;
        case 4:
          *(_QWORD *)(a5 + 16) = 0x3FF0000000000000;
          break;
        default:
          break;
      }
      if (v10 > 0xFu || ((1 << v10) & 0xDD77) == 0)
        *(_QWORD *)(a5 + 24) = 0x3FF0000000000000;
      v11 = *(double *)(a4 + 48);
      v12 = 8;
      v13 = 7;
      v14 = 6;
      v8 = 5;
    }
    *(double *)(a5 + 8 * v8) = v11;
    *(double *)(a5 + 8 * v14) = -*(double *)a4;
    *(double *)(a5 + 8 * v13) = -*(double *)(a4 + 8);
    *(double *)(a5 + 8 * v12) = -*(double *)(a4 + 16);
  }
  return result;
}

uint64_t GN_AGPS_Set_Alm_El(unsigned __int8 *a1)
{
  uint64_t result;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  double v7;
  unsigned int v8;
  double v9;
  double v10;
  __int16 v11;
  double v12;
  unsigned int v13;
  double v14;
  double v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  unsigned __int8 v21;
  int v22;
  __int16 v23;
  __int16 v24;
  char v25;
  __int16 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  __int16 v29;
  __int16 v30;
  char v31;
  __int16 v32;
  char v33;
  __int16 v34;
  char v35;
  __int16 v36;
  char v37;
  char v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  result = Is_GN_API_Set_Allowed("GN_AGPS_Set_Alm_El");
  if ((_DWORD)result)
  {
    v3 = a1[1];
    if (g_Logging_Cfg < 5)
      EvLog_d("GN_AGPS_Set_Alm_El: ", a1[1]);
    else
      EvLog_v("GN_AGPS_Set_Alm_El: %3d %2d %3d %3d %5d %5d %5d %5d %5d %8d %8d %8d %8d %d", *a1, v3, a1[2], a1[3], *((__int16 *)a1 + 2), *((__int16 *)a1 + 3), *((unsigned __int16 *)a1 + 4), *((__int16 *)a1 + 5), *((__int16 *)a1 + 6), *((_DWORD *)a1 + 4), *((_DWORD *)a1 + 5), *((_DWORD *)a1 + 6), *((_DWORD *)a1 + 7), a1[32]);
    if ((v3 + 53) >= 0xF6u)
      v4 = 5;
    else
      v4 = (v3 - 1) < 0x20;
    if (!v4)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: Sat_ID = %d, Out of range!");
      return 0;
    }
    v5 = *((__int16 *)a1 + 2);
    if ((unsigned __int16)((unsigned __int16)(*((_WORD *)a1 + 2) - 1024) >> 11) <= 0x1Eu)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: af0 = %d <-2^10 or >=2^10, Out of range!");
      return 0;
    }
    v6 = *((__int16 *)a1 + 3);
    if ((unsigned __int16)((unsigned __int16)(*((_WORD *)a1 + 3) - 1024) >> 11) <= 0x1Eu)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: af1 = %d <-2^10 or >=2^10, Out of range!");
      return 0;
    }
    if (v4 == 5)
      v7 = 0.1;
    else
      v7 = 0.03;
    v8 = *((unsigned __int16 *)a1 + 4);
    v9 = (double)v8 * 0.000000476837158;
    if (v9 < 0.0)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: e = %g < %g, Unrealistic value!");
      return 0;
    }
    if (v9 > v7)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: e = %g > %g, Unrealistic value!");
      return 0;
    }
    v10 = 0.0;
    if ((v3 + 53) >= 0xF6u)
      v10 = 0.000000314159265;
    v11 = *((_WORD *)a1 + 6);
    v12 = (double)v11 * 1.14290475e-11;
    if (v12 < -0.00000198862815)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: OmegaDot = %e < %e rad/s, Unrealistic value!");
      return 0;
    }
    if (v12 > v10)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: OmegaDot = %e > %e rad/s, Unrealistic value!");
      return 0;
    }
    v13 = *((_DWORD *)a1 + 4);
    if (HIBYTE(v13))
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: APowerHalf = %u >=2^24,  Out of range !");
      return 0;
    }
    if (v4 == 5)
      v14 = 7000.0;
    else
      v14 = 5800.0;
    v15 = (double)v13 * 0.00048828125;
    if (v15 < 4800.0)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: APowerHalf = %g < %g, Unrealistic value!");
      return 0;
    }
    if (v15 > v14)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: APowerHalf = %g > %g, Unrealistic value!");
      return 0;
    }
    v16 = *((_DWORD *)a1 + 5);
    if ((v16 - 0x800000) >> 24 != 255)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: Omega0 = %d <-2^23 or >=2^23, Out of range!");
      return 0;
    }
    v17 = *((_DWORD *)a1 + 6);
    if ((v17 - 0x800000) >> 24 != 255)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: w = %d <-2^23 or >=2^23, Out of range!");
      return 0;
    }
    v18 = *((_DWORD *)a1 + 7);
    if ((v18 - 0x800000) >> 24 != 255)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: M0 = %d <-2^23 or >=2^23, Out of range!");
      return 0;
    }
    v39 = 0;
    v19 = a1[1];
    v20 = v19 & 0x3F;
    if ((_DWORD)v19 == 32)
      v20 = 0;
    v24 = v8;
    v25 = v20;
    v21 = a1[3];
    v26 = *((_WORD *)a1 + 5);
    v27 = v21;
    v28 = a1[2];
    v29 = v11;
    v30 = v13;
    v31 = BYTE2(v13);
    v32 = v16;
    v33 = BYTE2(v16);
    v34 = v17;
    v35 = BYTE2(v17);
    v36 = v18;
    v37 = BYTE2(v18);
    v38 = (32 * v6) | (4 * (v5 & 7));
    LOBYTE(v39) = v6 >> 3;
    BYTE1(v39) = v5 >> 3;
    v23 = *a1;
    v22 = 0;
    BYTE2(v39) = a1[32];
    return GN_AGPS_Set_Alm(v19, (uint64_t)&v22);
  }
  return result;
}

void Kep_Calc_SV_Ref_State(int a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  __int16 v8;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  long double v19;
  unsigned int v20;
  double v21;
  double v22;
  double v23;
  double v25;
  double v26;
  long double v27;
  long double v28;
  double v29;
  __double2 v30;
  __double2 v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  __double2 v46;
  double v47;
  double v48;
  __double2 v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  unint64_t v84;
  double v85;
  double *v86;
  int v87;
  int v88;
  unsigned int v89;
  double v90;
  double v91;
  unsigned int v92;
  signed int v93;
  _BOOL4 v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;

  v8 = a2;
  if (*(_WORD *)(a4 + 22))
  {
    v10 = *(_DWORD *)(a4 + 28);
    v11 = a3 + 604800 * (a2 - *(__int16 *)(a4 + 22)) - v10;
  }
  else
  {
    v10 = *(_DWORD *)(a4 + 28);
    v12 = a3 - v10;
    v13 = a3 - v10 - 604800;
    if (a3 - v10 <= 302399)
      v13 = a3 - v10;
    if (v12 < -302400)
      v11 = v12 + 604800;
    else
      v11 = v13;
  }
  v14 = *(_DWORD *)(a4 + 8);
  v15 = *(double *)(a4 + 184);
  v16 = v15 * v15;
  v17 = *(double *)(a4 + 192);
  v108 = *(double *)(a4 + 104)
       + sqrt(dbl_24BC09DF0[v14 - 3 < 2]) / (v15 * (v15 * v15))
       + *(double *)(a4 + 112) * (double)v11 * 0.5;
  v18 = *(double *)(a4 + 176) + v108 * (double)v11;
  v19 = sin(v18);
  v20 = 0;
  v21 = *(double *)(a4 + 224);
  v22 = v18 + v21 * v19;
  do
  {
    v23 = v22;
    v22 = v18 + v21 * sin(v22);
  }
  while (vabdd_f64(v22, v23) > 1.0e-11 && v20++ < 0x13);
  v25 = 1.0 - v21 * v21;
  v26 = v16 + v17 * (double)v11;
  v27 = tan(v22 * 0.5);
  v28 = atan(sqrt((v21 + 1.0) / (1.0 - v21)) * v27);
  v29 = v28 + v28;
  if (v29 < 0.0)
    v29 = v29 + 6.28318531;
  v30 = __sincos_stret(v29);
  v31 = __sincos_stret(*(double *)(a4 + 216));
  v32 = v31.__sinval * v30.__cosval + v30.__sinval * v31.__cosval;
  v33 = v30.__cosval * v31.__cosval - v30.__sinval * v31.__sinval;
  v34 = v33 * (v32 + v32);
  if (a1 == 1)
  {
    v35 = v33 * v33 - v32 * v32;
    v36 = v35 * *(double *)(a4 + 136) + *(double *)(a4 + 144) * v34;
    v37 = v36 * v36 * -0.5 + 1.0;
    v38 = v33 * v36;
    v104 = v36;
    v39 = -(v32 * v36);
    v32 = v38 + v32 * v37;
    v33 = v39 + v33 * v37;
    v40 = v35 * *(double *)(a4 + 120) + *(double *)(a4 + 128) * v34;
  }
  else
  {
    v35 = 0.0;
    v40 = 0.0;
    v104 = 0.0;
  }
  v107 = 1.0 - v21 * v21;
  v106 = v26;
  v109 = v21 * v30.__cosval + 1.0;
  v110 = sqrt(v25);
  v102 = v34;
  v103 = v40;
  v41 = v26 * v25 / v109 + v40;
  v42 = v33 * v41;
  v43 = v32 * v41;
  v44 = *(double *)(a4 + 208);
  v101 = v35;
  if (a1 == 1)
  {
    v105 = v35 * *(double *)(a4 + 152) + *(double *)(a4 + 160) * v34;
    v45 = (double)v11;
    v44 = v44 + v105 + *(double *)(a4 + 168) * (double)v11;
  }
  else
  {
    v105 = 0.0;
    v45 = (double)v11;
  }
  v46 = __sincos_stret(v44);
  v47 = dbl_24BC09E00[v14 == 4];
  v48 = *(double *)(a4 + 232) - v47;
  v49 = __sincos_stret(*(double *)(a4 + 200) + v48 * v45 - v47 * (double)v10);
  *(double *)a5 = v42 * v49.__cosval - v43 * v46.__cosval * v49.__sinval;
  *(double *)(a5 + 8) = v43 * v46.__cosval * v49.__cosval + v42 * v49.__sinval;
  v50 = v43 * v46.__sinval;
  *(double *)(a5 + 16) = v43 * v46.__sinval;
  v51 = v108;
  v52 = v108 * (v109 * v109) / (v107 * v110) + *(double *)(a4 + 112) * v45 * 0.5;
  v53 = v52 + v52;
  v54 = v108 * (v106 * *(double *)(a4 + 224) / v110);
  v55 = *(double *)(a4 + 192) + v54 * v30.__sinval;
  v56 = 0.0;
  if (a1 == 1)
  {
    v57 = *(double *)(a4 + 144) * v101 - *(double *)(a4 + 136) * v102;
    v58 = *(double *)(a4 + 128) * v101 - *(double *)(a4 + 120) * v102;
    v59 = v52 + v53 * v57;
    v55 = v55 + v53 * v58;
    v60 = *(double *)(a4 + 160) * v101 - *(double *)(a4 + 152) * v102;
    v61 = *(double *)(a4 + 168) + v53 * v60;
  }
  else
  {
    v59 = v108 * (v109 * v109) / (v107 * v110) + *(double *)(a4 + 112) * v45 * 0.5;
    v57 = 0.0;
    v60 = 0.0;
    v58 = 0.0;
    v61 = 0.0;
  }
  v62 = v55 * v33 - v43 * v59;
  v63 = v42 * v59 + v55 * v32;
  v64 = v62 + -(v43 * v48) * v46.__cosval;
  v65 = v63 * v46.__cosval - v50 * v61 + v42 * v48;
  v66 = v64 * v49.__cosval - v65 * v49.__sinval;
  v67 = v49.__cosval * v65 + v64 * v49.__sinval;
  *(double *)(a5 + 24) = v66;
  *(double *)(a5 + 32) = v67;
  v68 = v46.__cosval * (v43 * v61) + v63 * v46.__sinval;
  *(double *)(a5 + 40) = v68;
  v69 = v109 * (v30.__sinval * (-(v53 * v108) * *(double *)(a4 + 224)) / (v107 * v110));
  v70 = v30.__cosval * (v54 * v52);
  if (a1 == 1)
  {
    v71 = v69 + v69;
    v72 = v53 * -v53;
    v70 = v70 + (v69 + v69) * v58 + v72 * v103;
    v69 = v69 + (v69 + v69) * v57 + v72 * v104;
    v56 = v105 * v72 + v71 * v60;
  }
  v73 = v59 * v55;
  v74 = v33 * v73 + v70 * v32 + v62 * v59 + v69 * v42;
  v75 = v70 * v33 - v73 * v32 - v63 * v59 - v69 * v43 + -(v63 * v48) * v46.__cosval + v48 * (v43 * v61) * v46.__sinval;
  v76 = v46.__sinval * -(v63 * v61) + v74 * v46.__cosval - v68 * v61 + -v50 * v56 + v62 * v48;
  v77 = v49.__cosval * v75 - v48 * v67 - v76 * v49.__sinval;
  v78 = v49.__sinval * v75 + v48 * v66 + v76 * v49.__cosval;
  *(double *)(a5 + 48) = v77;
  *(double *)(a5 + 56) = v78;
  v79 = v46.__cosval * ((v63 + v63) * v61) + v74 * v46.__sinval + v43 * v56 * v46.__cosval;
  v80 = -(v61 * v61);
  v81 = dbl_24BC09E10[v14 == 4];
  v82 = v79 + v80 * v50;
  v83 = dbl_24BC09E20[v14 == 4];
  *(double *)(a5 + 64) = v82;
  *(double *)(a5 + 72) = v81 * v78 + v83 * -3.0 * v66;
  *(double *)(a5 + 80) = v83 * -3.0 * v67 - v81 * v77;
  *(double *)(a5 + 88) = (v83 * -3.0 - v83) * v68;
  if (a1 != 1)
  {
    if (v11 >= 0)
      v87 = 302400;
    else
      v87 = -302400;
    v88 = v87 + v11;
    if (v88 < 0)
      v88 = -v88;
    v85 = (double)v11;
    if (v88 > 0x1E1337F)
      v89 = 65500;
    else
      v89 = v88 / 0x3E8u + 1200;
    v91 = (double)(v89 * v89);
    goto LABEL_59;
  }
  v84 = *(char *)(a4 + 19);
  v85 = (double)v11;
  if (v84 <= 0xF)
  {
    v86 = (double *)((char *)&GPS_Legacy_URA_Table + 8 * v84);
LABEL_39:
    v90 = *v86;
    goto LABEL_43;
  }
  if ((v84 + 16) <= 0x10u)
  {
    v86 = (double *)((char *)&GPS_Modern_URA_Table + 8 * -(int)v84);
    goto LABEL_39;
  }
  v90 = 99980001.0;
LABEL_43:
  *(double *)(a5 + 112) = v90;
  if (v11 >= 0)
    v92 = v11;
  else
    v92 = -v11;
  v93 = -30 * *(unsigned __int8 *)(a4 + 18) + v92 / 0x3C;
  if ((*(_DWORD *)(a4 + 4) & 0xFFFFFFFE) == 4 && v14 <= 6 && ((1 << v14) & 0x58) != 0)
    v93 -= 30 * *(unsigned __int8 *)(a4 + 18);
  if (v93 < 1)
  {
    if (v11 >= 10800 && (v93 == 0 || v93 >= 0xFFFFFFC5))
    {
      v95 = (double)((v93 + 60) * (v93 + 60)) * 0.00138888889;
      v91 = v90 + v95 * v95;
LABEL_59:
      *(double *)(a5 + 112) = v91;
      goto LABEL_60;
    }
  }
  else
  {
    v94 = Is_Eph_Kep_Real((const double *)a4);
    v51 = v108;
    if (v94)
      *(double *)(a5 + 112) = *(double *)(a5 + 112) + (double)(v93 * v93) * 0.025 * ((double)(v93 * v93) * 0.025);
  }
  if (v11 >= 14400 && (v93 & 0x80000000) == 0)
  {
    v91 = *(double *)(a5 + 112) + 25.0;
    goto LABEL_59;
  }
LABEL_60:
  v96 = v85 + (double)(*(_DWORD *)(a4 + 28) - *(_DWORD *)(a4 + 24));
  v97 = *(double *)(a4 + 224);
  v98 = v97 * -4.44280763e-10 * *(double *)(a4 + 184) / (v97 * v30.__cosval + 1.0);
  v99 = *(double *)(a4 + 48);
  v100 = v96 * *(double *)(a4 + 56);
  *(double *)(a5 + 96) = *(double *)(a4 + 40) + v96 * (v100 + v99) + v110 * v98 * v30.__sinval;
  *(double *)(a5 + 104) = v99 + v100 * 2.0 + v51 * v98 * (v30.__cosval + v97);
  *(_OWORD *)(a5 + 120) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(a5 + 136) = *(_OWORD *)(a4 + 80);
  *(_QWORD *)(a5 + 152) = *(_QWORD *)(a4 + 96);
  *(_DWORD *)(a5 + 160) = a3;
  *(_WORD *)(a5 + 164) = v8;
  *(_WORD *)(a5 + 166) = *(_WORD *)(a4 + 20);
  *(_DWORD *)(a5 + 176) = a1;
  *(_BYTE *)(a5 + 188) = *(_BYTE *)(a4 + 12);
  *(_QWORD *)(a5 + 180) = *(_QWORD *)(a4 + 4);
  *(_WORD *)(a5 + 189) = *(_WORD *)(a4 + 16);
}

void GM_Inc_Local_Time(int a1, uint64_t a2)
{
  __int16 *v3;
  int v4;
  int v5;
  __int16 v6;
  __int16 v7;
  unsigned __int16 v8;

  v3 = (__int16 *)(a2 + 17948);
  v4 = a1 - *(_DWORD *)(a2 + 17968);
  *(_DWORD *)(a2 + 17968) = a1;
  Inc_Local_Time(v4, 604800, (double *)(a2 + 17936), (__int16 *)(a2 + 17934));
  Inc_Local_Time(v4, 86400, (double *)(a2 + 17960), v3 + 2);
  v5 = v3[2];
  if (v5 >= 1462)
  {
    v6 = *v3;
    if (v5 >= 2922)
      v7 = 2922;
    else
      v7 = v3[2];
    v8 = v5 - v7 + 1460;
    v3[2] = v5 - 1461 * (v8 / 0x5B5u) - 1461;
    *v3 = v6 + v8 / 0x5B5u + 1;
  }
}

uint64_t DD_Assist_QZSS_Data(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  int v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[17];
  int v65;
  char v66;
  __int128 v67;
  _OWORD v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _BYTE v72[20];
  uint64_t v73;

  v6 = 0;
  v73 = *MEMORY[0x24BDAC8D0];
  v58 = result + 3654;
  v59 = result + 3584;
  v56 = result + 3644;
  v57 = a2 - 241;
  do
  {
    if (!*(_BYTE *)(a3[1137] + v6)
      || *((int *)a3 + 29 * v6 + 2289) < 6
      || (v57 - *((_DWORD *)a3 + 29 * v6 + 2288)) <= 0xFFFFF806)
    {
      v71 = 0u;
      memset(v72, 0, 19);
      v69 = 0u;
      v70 = 0u;
      memset(v68, 0, sizeof(v68));
      v67 = 0u;
      result = Core_Get_QZSS_Eph((v6 - 63), a2, (int *)&v67);
      if ((_DWORD)result)
      {
        v7 = a3[1137];
        if (*(_BYTE *)(v7 + v6))
        {
          v8 = (char *)a3 + 116 * v6;
          v9 = *((_DWORD *)v8 + 2288);
          if (*((int *)v8 + 2289) >= 6 && (int)v67 <= v9 && (int)a2 - v9 > -1801)
            goto LABEL_22;
          if ((int)v67 - v9 <= 10799)
          {
            v10 = v8 + 9152;
            result = Is_GPS_BinEph_Real((uint64_t)(v8 + 9152));
            if ((_DWORD)result)
            {
              result = Is_GPS_BinEph_Real((uint64_t)&v67);
              if ((result & 1) == 0)
              {
                *v10 = a2;
                goto LABEL_22;
              }
            }
          }
        }
        v11 = a3[1129];
        if (!*(_BYTE *)(v11 + v6))
        {
          v26 = a3[1139];
          if (*(_BYTE *)(v26 + v6))
          {
            if (*((_DWORD *)a3 + 11 * v6 + 2868) + 100 < (int)a2)
            {
              *(_BYTE *)(a3[1134] + v6) = 0;
              *(_BYTE *)(v26 + v6) = 0;
              *(_BYTE *)(v56 + v6) = -1;
              v7 = a3[1137];
              v11 = a3[1129];
            }
          }
        }
        v12 = v71;
        v13 = (char *)a3 + 116 * v6;
        *((_OWORD *)v13 + 576) = v70;
        *((_OWORD *)v13 + 577) = v12;
        *((_OWORD *)v13 + 578) = *(_OWORD *)v72;
        v14 = v68[0];
        *((_OWORD *)v13 + 572) = v67;
        *((_OWORD *)v13 + 573) = v14;
        v15 = v69;
        *((_OWORD *)v13 + 574) = v68[1];
        *((_DWORD *)v13 + 2316) = *(_DWORD *)&v72[16];
        *((_OWORD *)v13 + 575) = v15;
        *(_BYTE *)(a3[1133] + v6) = 1;
        *(_BYTE *)(v7 + v6) = 1;
        *(_BYTE *)(v11 + v6) = 1;
        v16 = a3[1131];
        if (*((_DWORD *)v13 + 2289) == 5)
        {
          *(_DWORD *)(v16 + 20 * v6 + 8) = 1;
          *(_BYTE *)(a3[1130] + v6) = 1;
          v17 = (_DWORD *)(a3[1132] + 20 * v6 + 8);
        }
        else
        {
          v17 = (_DWORD *)(v16 + 20 * v6 + 12);
        }
        *v17 = 1;
        if ((int)a2 >= 1)
        {
          *(_BYTE *)(a3[1140] + v6) = 1;
          result = Core_Save_QZSS_Eph((v6 - 63), 0, (__int128 *)v13 + 572);
          v11 = a3[1129];
        }
        v18 = 0;
        LODWORD(v19) = 0;
        v20 = p_NV;
        v21 = *(_WORD *)(v11 + 8);
        *(_QWORD *)(p_NV + 6092) = *(_QWORD *)v11;
        *(_WORD *)(v20 + 6100) = v21;
        v22 = v20 + 6088;
        v23 = -9871;
        do
        {
          v24 = *(unsigned __int8 *)(v22 + v18) ^ HIBYTE(v23);
          v23 = -12691 * (v23 + (*(unsigned __int8 *)(v22 + v18) ^ HIBYTE(v23))) + 22719;
          v19 = (v19 + v24);
          ++v18;
        }
        while (v18 != 40);
        *(_QWORD *)(v20 + 6080) = v19;
        v25 = v59 + 6 * v6;
        *(_DWORD *)v25 = 16777472;
        *(_WORD *)(v25 + 4) = 256;
        *(_WORD *)(v58 + 2 * v6) = 256;
      }
    }
LABEL_22:
    ++v6;
  }
  while (v6 != 10);
  v27 = a4;
  if ((int)a2 >= 1)
  {
    for (i = 0; i != 10; ++i)
    {
      if (*(_BYTE *)(a3[1129] + i)
        && !*(_BYTE *)(*(_QWORD *)(v27 + 1608) + i)
        && (!*(_BYTE *)(a3[1138] + i) || (int)a2 - *((_DWORD *)a3 + 29 * i + 2578) >= 241))
      {
        v71 = 0u;
        memset(v72, 0, 19);
        v69 = 0u;
        v70 = 0u;
        memset(v68, 0, sizeof(v68));
        v67 = 0u;
        result = EE_Get_GPS_BinEph((XofSvcsIf *)(i - 63), a2, (uint64_t)&v67);
        v29 = a3[1138];
        if (!(_DWORD)result || (v30 = v67, *(_BYTE *)(v29 + i)) && (int)v67 <= *((_DWORD *)a3 + 29 * i + 2578))
        {
          *(_BYTE *)(v29 + i) = 0;
        }
        else
        {
          v31 = (char *)a3 + 116 * i;
          *((_DWORD *)v31 + 2606) = *(_DWORD *)&v72[16];
          v32 = v68[0];
          *(_OWORD *)(v31 + 10312) = v67;
          *(_OWORD *)(v31 + 10328) = v32;
          v33 = v69;
          *(_OWORD *)(v31 + 10344) = v68[1];
          *(_OWORD *)(v31 + 10360) = v33;
          v34 = *(_OWORD *)v72;
          v35 = v70;
          *(_OWORD *)(v31 + 10392) = v71;
          *(_OWORD *)(v31 + 10408) = v34;
          *(_OWORD *)(v31 + 10376) = v35;
          *(_BYTE *)(a3[1133] + i) = 1;
          *(_BYTE *)(v29 + i) = 1;
          v36 = v59 + 6 * i;
          *(_DWORD *)v36 = 16777472;
          *(_WORD *)(v36 + 4) = 256;
          *(_WORD *)(v58 + 2 * i) = 256;
          v63 = 0u;
          *(_OWORD *)v64 = 0u;
          v61 = 0u;
          v62 = 0u;
          v60[0] = v30;
          v60[1] = DWORD1(v67);
          LOBYTE(v61) = BYTE8(v67);
          v37 = 21;
          v38 = 11;
          v39 = (char *)v68 + 8;
          *(_WORD *)((char *)&v61 + 1) = *(_WORD *)((char *)&v67 + 9);
          do
          {
            v40 = (char *)v60 + v38;
            *v40 = *v39;
            *(_WORD *)(v40 + 1) = *(_WORD *)(v39 + 1);
            v39 += 4;
            --v37;
            v38 += 3;
          }
          while (v37 > 1);
          *(_WORD *)&v64[15] = *(_WORD *)&v72[12];
          v65 = *(_DWORD *)&v72[14];
          v66 = v72[18];
          result = Debug_Log_GPS_Eph(2, (int)i + 193, (uint64_t)v60);
        }
        v27 = a4;
      }
    }
  }
  v41 = 0;
  v67 = 0u;
  memset(v68, 0, 28);
  do
  {
    if (!*(_BYTE *)(a3[1139] + v41) || (int)a2 - *((_DWORD *)a3 + 11 * v41 + 2868) >= 1801)
    {
      *(_OWORD *)((unint64_t)&v67 | 0xC) = 0u;
      *(_OWORD *)(((unint64_t)&v67 | 0xC) + 0x10) = 0u;
      result = Core_Get_QZSS_Alm((v41 - 63), a2, (uint64_t)&v67);
      if ((_DWORD)result)
      {
        v42 = a3[1139];
        if (!*(_BYTE *)(v42 + v41) || (int)v67 > *((_DWORD *)a3 + 11 * v41 + 2868))
        {
          v43 = a3[1129];
          if (!*(_BYTE *)(v43 + v41))
          {
            v53 = a3[1137];
            if (*(_BYTE *)(v53 + v41))
            {
              if (*((_DWORD *)a3 + 29 * v41 + 2288) + 100 < (int)a2)
              {
                *(_BYTE *)(a3[1133] + v41) = 0;
                *(_BYTE *)(v53 + v41) = 0;
                v54 = v59 + 6 * v41;
                *(_DWORD *)v54 = 16777472;
                *(_WORD *)(v54 + 4) = 256;
                *(_WORD *)(v58 + 2 * v41) = 256;
              }
            }
          }
          v44 = (__int128 *)((char *)a3 + 44 * v41);
          v45 = v68[0];
          v44[717] = v67;
          v44[718] = v45;
          *(__int128 *)((char *)v44 + 11500) = *(_OWORD *)((char *)v68 + 12);
          *(_BYTE *)(a3[1134] + v41) = 1;
          *(_BYTE *)(v42 + v41) = 1;
          *(_BYTE *)(v43 + v41) = 1;
          if ((int)a2 >= 1)
          {
            result = Core_Save_QZSS_Alm((v41 - 63), 0, v44 + 717);
            v43 = a3[1129];
          }
          v46 = 0;
          LODWORD(v47) = 0;
          v48 = p_NV;
          v49 = *(_WORD *)(v43 + 8);
          *(_QWORD *)(p_NV + 6092) = *(_QWORD *)v43;
          *(_WORD *)(v48 + 6100) = v49;
          v50 = v48 + 6088;
          v51 = -9871;
          do
          {
            v52 = *(unsigned __int8 *)(v50 + v46) ^ HIBYTE(v51);
            v51 = -12691 * (v51 + (*(unsigned __int8 *)(v50 + v46) ^ HIBYTE(v51))) + 22719;
            v47 = (v47 + v52);
            ++v46;
          }
          while (v46 != 40);
          *(_QWORD *)(v48 + 6080) = v47;
          *(_BYTE *)(v56 + v41) = -1;
        }
      }
    }
    ++v41;
  }
  while (v41 != 10);
  return result;
}

uint64_t Hal34_InitPciGnssDevice(_DWORD *a1)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  char __str[966];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = 4;
  do
  {
    result = Hal29_GetGNSSProxyStatus();
    if (!(_DWORD)result)
    {
      g_HalState = 0;
      return result;
    }
    --v2;
  }
  while (v2);
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Proxy status failure\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 69, "Hal34_InitPciGnssDevice");
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  *a1 = 6;
  return 4294967290;
}

void gnss::GnssAdaptDevice::setPVTMReport(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7, uint64_t a8, uint64_t a9)
{
  NSObject *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD block[5];
  _BYTE v23[24];
  _BYTE *v24;
  _BYTE v25[24];
  _BYTE *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char __str[966];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a9 + 24))
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v20 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 69, "setPVTMReport", 513);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return;
  }
  v16 = *(NSObject **)(a1 + 152);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZN4gnss15GnssAdaptDevice13setPVTMReportEbbbbbbNSt3__18functionIFvNS1_10unique_ptrINS_3FixENS1_14default_deleteIS4_EEEENS3_INS_17MeasurementReportENS5_IS8_EEEEONS1_6vectorINS_6SvInfoENS1_9allocatorISC_EEEEONSB_INS_23ReceiverBandCorrectionsENSD_ISH_EEEENS3_INS_18TimeConversionInfoENS5_ISL_EEEENS3_INS_24KlobucharModelParametersENS5_ISO_EEEEEEENS2_IFvNS_6ResultEEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  block[4] = a1;
  v17 = v23;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v23, a9);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v25, a8);
  v27 = a2;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v31 = a6;
  v32 = a7;
  dispatch_async(v16, block);
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
    goto LABEL_8;
  }
  if (v26)
  {
    v19 = 5;
LABEL_8:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }
  if (v24 == v23)
  {
    v21 = 4;
  }
  else
  {
    if (!v24)
      return;
    v21 = 5;
    v17 = v24;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v21))(v17);
}

void sub_24BAFF6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22)
{
  _QWORD *v22;
  uint64_t v24;

  if (a22 == v22)
  {
    v24 = 4;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v24 = 5;
    v22 = a22;
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v24))(v22);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___ZN4gnss15GnssAdaptDevice13setPVTMReportEbbbbbbNSt3__18functionIFvNS1_10unique_ptrINS_3FixENS1_14default_deleteIS4_EEEENS3_INS_17MeasurementReportENS5_IS8_EEEEONS1_6vectorINS_6SvInfoENS1_9allocatorISC_EEEEONSB_INS_23ReceiverBandCorrectionsENSD_ISH_EEEENS3_INS_18TimeConversionInfoENS5_ISL_EEEENS3_INS_24KlobucharModelParametersENS5_ISO_EEEEEEENS2_IFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint8x8_t v29;
  uint32x4_t v30;
  int64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  int8x16_t v36;
  _QWORD *v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[24];
  _BYTE *v48;
  _BYTE v49[24];
  _BYTE *v50;
  _BYTE v51[24];
  _BYTE *v52;
  _BYTE v53[24];
  _BYTE *v54;
  _BYTE v55[24];
  _BYTE *v56;
  _BYTE v57[24];
  _BYTE *v58;
  char __str[8];
  int v60;
  char *v61;
  _QWORD v62[4];

  v62[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setPVTMReport_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (*(_BYTE *)(v2 + 88))
  {
    if (*(_QWORD *)(a1 + 96))
    {
      if (*(_BYTE *)(v2 + 89))
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v53, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 0, (uint64_t)v53, (uint64_t)"setPVTMReport_block_invoke");
        v4 = v54;
        if (v54 == v53)
        {
          v5 = 4;
          v4 = v53;
        }
        else
        {
          if (!v54)
            goto LABEL_28;
          v5 = 5;
        }
        (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_28:
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          v14 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "setPVTMReport_block_invoke", 2056);
          gnssOsa_PrintLog(__str, 1, 1, 0);
          if (g_LbsOsaTrace_Config >= 5)
          {
            bzero(__str, 0x3C6uLL);
            v15 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 68, "setPVTMReport_block_invoke");
            gnssOsa_PrintLog(__str, 5, 1, 0);
          }
        }
        return;
      }
      if ((*(_BYTE *)(a1 + 104) | *(_BYTE *)(a1 + 107) | *(_BYTE *)(a1 + 108) | *(_BYTE *)(a1 + 109)) | (*(_BYTE *)(a1 + 105) | *(_BYTE *)(a1 + 106)))
      {
        if (!*(_BYTE *)(a1 + 105) && *(_BYTE *)(a1 + 106))
        {
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v49, a1 + 40);
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v49, (uint64_t)"setPVTMReport_block_invoke");
          v10 = v50;
          if (v50 == v49)
          {
            v11 = 4;
            v10 = v49;
          }
          else
          {
            if (!v50)
            {
LABEL_50:
              if (g_LbsOsaTrace_Config)
              {
                bzero(__str, 0x3C6uLL);
                v25 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx PVTM Invalid measReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 69, "setPVTMReport_block_invoke", 515);
                gnssOsa_PrintLog(__str, 1, 1, 0);
                if (g_LbsOsaTrace_Config >= 5)
                {
                  bzero(__str, 0x3C6uLL);
                  v26 = mach_continuous_time();
                  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 68, "setPVTMReport_block_invoke");
                  gnssOsa_PrintLog(__str, 5, 1, 0);
                }
              }
              return;
            }
            v11 = 5;
          }
          (*(void (**)(void))(*v10 + 8 * v11))();
          goto LABEL_50;
        }
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 72);
        v20 = v2 + 168;
        if (__str != (char *)(v2 + 168))
        {
          v21 = v61;
          v22 = *(_QWORD *)(v2 + 192);
          if (v61 == __str)
          {
            if (v22 == v20)
            {
              (*(void (**)(char *, _QWORD *))(*(_QWORD *)__str + 24))(__str, v62);
              (*(void (**)(char *))(*(_QWORD *)v61 + 32))(v61);
              v61 = 0;
              (*(void (**)(_QWORD, char *))(**(_QWORD **)(v2 + 192) + 24))(*(_QWORD *)(v2 + 192), __str);
              (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 192) + 32))(*(_QWORD *)(v2 + 192));
              *(_QWORD *)(v2 + 192) = 0;
              v61 = __str;
              (*(void (**)(_QWORD *, uint64_t))(v62[0] + 24))(v62, v2 + 168);
              (*(void (**)(_QWORD *))(v62[0] + 32))(v62);
            }
            else
            {
              (*(void (**)(char *, uint64_t))(*(_QWORD *)__str + 24))(__str, v2 + 168);
              (*(void (**)(char *))(*(_QWORD *)v61 + 32))(v61);
              v61 = *(char **)(v2 + 192);
            }
            *(_QWORD *)(v2 + 192) = v20;
          }
          else if (v22 == v20)
          {
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v20 + 24))(v2 + 168, __str);
            (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 192) + 32))(*(_QWORD *)(v2 + 192));
            *(_QWORD *)(v2 + 192) = v61;
            v61 = __str;
          }
          else
          {
            v61 = *(char **)(v2 + 192);
            *(_QWORD *)(v2 + 192) = v21;
          }
        }
        v27 = v61;
        if (v61 == __str)
        {
          v28 = 4;
          v27 = __str;
        }
        else
        {
          if (!v61)
            goto LABEL_63;
          v28 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_63:
        *(_QWORD *)__str = v2 + 144;
        v60 = 0;
        std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>((uint64_t)__str, 8uLL);
        v29.i32[0] = *(_DWORD *)(a1 + 105);
        v30 = vmovl_u16((uint16x4_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v29)));
        v31.i64[0] = v30.u32[0];
        v31.i64[1] = v30.u32[1];
        v32 = (int8x16_t)vshrq_n_s64(vshlq_n_s64(v31, 0x38uLL), 0x38uLL);
        v31.i64[0] = v30.u32[2];
        v31.i64[1] = v30.u32[3];
        v33 = vbicq_s8((int8x16_t)xmmword_24BC09F70, (int8x16_t)vshrq_n_s64(vshlq_n_s64(v31, 0x38uLL), 0x38uLL));
        v34 = vbicq_s8((int8x16_t)xmmword_24BC09F80, v32);
        v35 = 96;
        if (!*(_BYTE *)(a1 + 109))
          v35 = 64;
        v36 = vorrq_s8(v34, v33);
        *(_QWORD *)(v2 + 144) = *(_QWORD *)&vorr_s8(*(int8x8_t *)v36.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)) | v35 | *(_QWORD *)(v2 + 144) & 0xFFFFFFFFFFFFFF80 | *(unsigned __int8 *)(a1 + 104);
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v47, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v47, (uint64_t)"setPVTMReport_block_invoke");
        v37 = v48;
        if (v48 == v47)
        {
          v38 = 4;
          v37 = v47;
        }
        else
        {
          if (!v48)
          {
LABEL_70:
            if (g_LbsOsaTrace_Config > 3)
            {
              bzero(__str, 0x3C6uLL);
              v39 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
              v40 = *(_BYTE *)(a1 + 109) ? 84 : 70;
              v41 = *(_BYTE *)(a1 + 108) ? 84 : 70;
              v42 = *(_BYTE *)(a1 + 107) ? 84 : 70;
              v43 = *(_BYTE *)(a1 + 106) ? 84 : 70;
              v44 = *(_BYTE *)(a1 + 105) ? 84 : 70;
              v45 = *(_BYTE *)(a1 + 104) ? 84 : 70;
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Pvt,%c,Meas,%c,ExtMeas,%c,SvInfo,%c,BandCor,%c,TimeCon,%c\n", (unint64_t)v39, "ADP", 73, "setPVTMReport_block_invoke", v45, v44, v43, v42, v41, v40);
              gnssOsa_PrintLog(__str, 4, 1, 0);
              if (g_LbsOsaTrace_Config >= 5)
              {
                bzero(__str, 0x3C6uLL);
                v46 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "ADP", 68, "setPVTMReport_block_invoke");
                gnssOsa_PrintLog(__str, 5, 1, 0);
              }
            }
            return;
          }
          v38 = 5;
        }
        (*(void (**)(void))(*v37 + 8 * v38))();
        goto LABEL_70;
      }
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v51, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v51, (uint64_t)"setPVTMReport_block_invoke");
      v18 = v52;
      if (v52 == v51)
      {
        v19 = 4;
        v18 = v51;
      }
      else
      {
        if (!v52)
        {
LABEL_45:
          if (g_LbsOsaTrace_Config)
          {
            bzero(__str, 0x3C6uLL);
            v23 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx PVTM No valid flags\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 69, "setPVTMReport_block_invoke", 515);
            gnssOsa_PrintLog(__str, 1, 1, 0);
            if (g_LbsOsaTrace_Config >= 5)
            {
              bzero(__str, 0x3C6uLL);
              v24 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 68, "setPVTMReport_block_invoke");
              gnssOsa_PrintLog(__str, 5, 1, 0);
            }
          }
          return;
        }
        v19 = 5;
      }
      (*(void (**)(void))(*v18 + 8 * v19))();
      goto LABEL_45;
    }
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v55, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v55, (uint64_t)"setPVTMReport_block_invoke");
    v8 = v56;
    if (v56 == v55)
    {
      v9 = 4;
      v8 = v55;
    }
    else
    {
      if (!v56)
      {
LABEL_33:
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          v16 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx PVTM CB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 69, "setPVTMReport_block_invoke", 513);
          gnssOsa_PrintLog(__str, 1, 1, 0);
          if (g_LbsOsaTrace_Config >= 5)
          {
            bzero(__str, 0x3C6uLL);
            v17 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 68, "setPVTMReport_block_invoke");
            gnssOsa_PrintLog(__str, 5, 1, 0);
          }
        }
        return;
      }
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
    goto LABEL_33;
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v57, a1 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v57, (uint64_t)"setPVTMReport_block_invoke");
  v6 = v58;
  if (v58 == v57)
  {
    v7 = 4;
    v6 = v57;
    goto LABEL_22;
  }
  if (v58)
  {
    v7 = 5;
LABEL_22:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v12 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "setPVTMReport_block_invoke", 1302);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v13 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "setPVTMReport_block_invoke");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
}

void sub_24BB001C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c304_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss3FixENS_14default_deleteIS3_EEEENS1_INS2_17MeasurementReportENS4_IS7_EEEEONS_6vectorINS2_6SvInfoENS_9allocatorISB_EEEEONSA_INS2_23ReceiverBandCorrectionsENSC_ISG_EEEENS1_INS2_18TimeConversionInfoENS4_ISK_EEEENS1_INS2_24KlobucharModelParametersENS4_ISN_EEEEEEE(uint64_t a1, uint64_t a2)
{
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_24BB0031C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = v2;
  v5 = *(_QWORD **)(v3 + 64);
  if (v5 == v1)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v1 = v5;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c304_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss3FixENS_14default_deleteIS3_EEEENS1_INS2_17MeasurementReportENS4_IS7_EEEEONS_6vectorINS2_6SvInfoENS_9allocatorISB_EEEEONSA_INS2_23ReceiverBandCorrectionsENSC_ISG_EEEENS1_INS2_18TimeConversionInfoENS4_ISK_EEEENS1_INS2_24KlobucharModelParametersENS4_ISN_EEEEEEE(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 5;
  v3 = a1 + 9;
  v4 = (_QWORD *)a1[12];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = (_QWORD *)a1[8];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void gnss::GnssAdaptDevice::setNmeaHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD block[5];
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  char __str[966];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a4 + 24))
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "setNmeaHandler", 513);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return;
  }
  v6 = *(NSObject **)(a1 + 152);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZN4gnss15GnssAdaptDevice14setNmeaHandlerEyNSt3__18functionIFvONS1_6vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS7_IS9_EEEEEEENS2_IFvNS_6ResultEEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_14;
  block[4] = a1;
  v7 = v13;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, a4);
  v15 = a2;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v16, a3);
  dispatch_async(v6, block);
  v8 = v17;
  if (v17 == v16)
  {
    v9 = 4;
    v8 = v16;
    goto LABEL_8;
  }
  if (v17)
  {
    v9 = 5;
LABEL_8:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  if (v14 == v13)
  {
    v11 = 4;
  }
  else
  {
    if (!v14)
      return;
    v11 = 5;
    v7 = v14;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v11))(v7);
}

void sub_24BB005E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___ZN4gnss15GnssAdaptDevice14setNmeaHandlerEyNSt3__18functionIFvONS1_6vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS7_IS9_EEEEEEENS2_IFvNS_6ResultEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[24];
  _BYTE *v36;
  _BYTE v37[24];
  _BYTE *v38;
  _BYTE v39[24];
  _BYTE *v40;
  _BYTE v41[24];
  _BYTE *v42;
  _BYTE v43[24];
  _BYTE *v44;
  char __str[24];
  char *v46;
  _QWORD v47[4];

  v47[3] = *MEMORY[0x24BDAC8D0];
  v2 = a1[4];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setNmeaHandler_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (*(_BYTE *)(v2 + 88))
  {
    if (*(_BYTE *)(v2 + 89))
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v41, (uint64_t)(a1 + 5));
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 0, (uint64_t)v41, (uint64_t)"setNmeaHandler_block_invoke");
      v4 = v42;
      if (v42 == v41)
      {
        v5 = 4;
        v4 = v41;
      }
      else
      {
        if (!v42)
          goto LABEL_19;
        v5 = 5;
      }
      (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_19:
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "setNmeaHandler_block_invoke", 2056);
        gnssOsa_PrintLog(__str, 1, 1, 0);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          v12 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "setNmeaHandler_block_invoke");
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
      }
      return;
    }
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NmeaMask,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 73, "setNmeaHandler_block_invoke", a1[9]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if (a1[9] >= 0x400uLL)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v39, (uint64_t)(a1 + 5));
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v39, (uint64_t)"setNmeaHandler_block_invoke");
      v9 = v40;
      if (v40 == v39)
      {
        v10 = 4;
        v9 = v39;
      }
      else
      {
        if (!v40)
        {
LABEL_33:
          if (g_LbsOsaTrace_Config)
          {
            bzero(__str, 0x3C6uLL);
            v18 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Mask,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "setNmeaHandler_block_invoke", 515, a1[9]);
            gnssOsa_PrintLog(__str, 1, 1, 0);
            if (g_LbsOsaTrace_Config >= 5)
            {
              bzero(__str, 0x3C6uLL);
              v19 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 68, "setNmeaHandler_block_invoke");
              gnssOsa_PrintLog(__str, 5, 1, 0);
            }
          }
          return;
        }
        v10 = 5;
      }
      (*(void (**)(void))(*v9 + 8 * v10))();
      goto LABEL_33;
    }
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)__str, (uint64_t)(a1 + 10));
    v15 = v2 + 264;
    if (__str != (char *)(v2 + 264))
    {
      v16 = v46;
      v17 = *(_QWORD *)(v2 + 288);
      if (v46 == __str)
      {
        if (v17 == v15)
        {
          (*(void (**)(char *, _QWORD *))(*(_QWORD *)__str + 24))(__str, v47);
          (*(void (**)(char *))(*(_QWORD *)v46 + 32))(v46);
          v46 = 0;
          (*(void (**)(_QWORD, char *))(**(_QWORD **)(v2 + 288) + 24))(*(_QWORD *)(v2 + 288), __str);
          (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 288) + 32))(*(_QWORD *)(v2 + 288));
          *(_QWORD *)(v2 + 288) = 0;
          v46 = __str;
          (*(void (**)(_QWORD *, uint64_t))(v47[0] + 24))(v47, v2 + 264);
          (*(void (**)(_QWORD *))(v47[0] + 32))(v47);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(*(_QWORD *)__str + 24))(__str, v2 + 264);
          (*(void (**)(char *))(*(_QWORD *)v46 + 32))(v46);
          v46 = *(char **)(v2 + 288);
        }
        *(_QWORD *)(v2 + 288) = v15;
      }
      else if (v17 == v15)
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v15 + 24))(v2 + 264, __str);
        (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 288) + 32))(*(_QWORD *)(v2 + 288));
        *(_QWORD *)(v2 + 288) = v46;
        v46 = __str;
      }
      else
      {
        v46 = *(char **)(v2 + 288);
        *(_QWORD *)(v2 + 288) = v16;
      }
    }
    v20 = v46;
    if (v46 == __str)
    {
      v21 = 4;
      v20 = __str;
    }
    else
    {
      if (!v46)
      {
LABEL_46:
        if (a1[13] && (v22 = a1[9]) != 0)
        {
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            v23 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Request NMEA\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 73, "setNmeaHandler_block_invoke");
            gnssOsa_PrintLog(__str, 4, 1, 0);
            v22 = a1[9];
          }
          v24 = Gnm_RegisterNmeaUpdates((unsigned __int16)v22, gnss::GnssAdaptDevice::Ga06_15GnssRegisterNmeaCB);
        }
        else
        {
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            v25 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NMEA CB null kGaNmeaNone\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 73, "setNmeaHandler_block_invoke");
            gnssOsa_PrintLog(__str, 4, 1, 0);
          }
          v24 = Gnm_RegisterNmeaUpdates(0, 0);
        }
        v26 = v24;
        v27 = (uint64_t)(a1 + 5);
        if (v24)
        {
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v37, v27);
          gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(v2, v26, (uint64_t)v37, (uint64_t)"setNmeaHandler_block_invoke");
          v28 = v38;
          if (v38 == v37)
          {
            v29 = 4;
            v28 = v37;
          }
          else
          {
            if (!v38)
            {
LABEL_63:
              if (g_LbsOsaTrace_Config)
              {
                bzero(__str, 0x3C6uLL);
                v32 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SetNmea,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "ADP", 69, "setNmeaHandler_block_invoke", 257, v26);
                gnssOsa_PrintLog(__str, 1, 1, 0);
                if (g_LbsOsaTrace_Config >= 5)
                {
                  bzero(__str, 0x3C6uLL);
                  v33 = mach_continuous_time();
                  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "ADP", 68, "setNmeaHandler_block_invoke");
                  gnssOsa_PrintLog(__str, 5, 1, 0);
                }
              }
              return;
            }
            v29 = 5;
          }
          (*(void (**)(void))(*v28 + 8 * v29))();
          goto LABEL_63;
        }
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v35, v27);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v35, (uint64_t)"setNmeaHandler_block_invoke");
        v30 = v36;
        if (v36 == v35)
        {
          v31 = 4;
          v30 = v35;
        }
        else
        {
          if (!v36)
            goto LABEL_68;
          v31 = 5;
        }
        (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_68:
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          v34 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "ADP", 68, "setNmeaHandler_block_invoke");
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        return;
      }
      v21 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
    goto LABEL_46;
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v43, (uint64_t)(a1 + 5));
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v43, (uint64_t)"setNmeaHandler_block_invoke");
  v6 = v44;
  if (v44 == v43)
  {
    v7 = 4;
    v6 = v43;
    goto LABEL_23;
  }
  if (v44)
  {
    v7 = 5;
LABEL_23:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v13 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "setNmeaHandler_block_invoke", 1302);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v14 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "setNmeaHandler_block_invoke");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
}

void sub_24BB00F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  char *v35;
  char *v37;
  uint64_t v38;

  v37 = a19;
  if (a19 == v35)
  {
    v38 = 4;
    v37 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE80c108_ZTSNSt3__18functionIFvONS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEEE(uint64_t a1, uint64_t a2)
{
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 80, a2 + 80);
}

void sub_24BB010D0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = v2;
  v5 = *(_QWORD **)(v3 + 64);
  if (v5 == v1)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v1 = v5;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE80c108_ZTSNSt3__18functionIFvONS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEEE(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 5;
  v3 = a1 + 10;
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = (_QWORD *)a1[8];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void gnss::GnssAdaptDevice::setThermalRiskState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;
  char __str[966];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a4 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a4);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v8, (uint64_t)"setThermalRiskState");
    v5 = v9;
    if (v9 == v8)
    {
      v6 = 4;
      v5 = v8;
    }
    else
    {
      if (!v9)
        return;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setThermalRiskState", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_24BB01318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void gnss::GnssAdaptDevice::setPowerReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD block[5];
  _BYTE v11[24];
  _BYTE *v12;
  _BYTE v13[24];
  _BYTE *v14;
  char __str[966];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a3 + 24))
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "setPowerReport", 513);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return;
  }
  v4 = *(NSObject **)(a1 + 152);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZN4gnss15GnssAdaptDevice14setPowerReportENSt3__18functionIFvNS1_10unique_ptrINS_14PwrMeasurementENS1_14default_deleteIS4_EEEEEEENS2_IFvNS_6ResultEEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_19;
  block[4] = a1;
  v5 = v11;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v11, a3);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, a2);
  dispatch_async(v4, block);
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
    goto LABEL_8;
  }
  if (v14)
  {
    v7 = 5;
LABEL_8:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  if (v12 == v11)
  {
    v9 = 4;
  }
  else
  {
    if (!v12)
      return;
    v9 = 5;
    v5 = v12;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v9))(v5);
}

void sub_24BB01500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22)
{
  _QWORD *v22;
  uint64_t v24;

  if (a22 == v22)
  {
    v24 = 4;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v24 = 5;
    v22 = a22;
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v24))(v22);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___ZN4gnss15GnssAdaptDevice14setPowerReportENSt3__18functionIFvNS1_10unique_ptrINS_14PwrMeasurementENS1_14default_deleteIS4_EEEEEEENS2_IFvNS_6ResultEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  char __str[24];
  char *v23;
  _QWORD v24[4];

  v24[3] = *MEMORY[0x24BDAC8D0];
  v2 = a1[4];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setPowerReport_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (*(_BYTE *)(v2 + 88))
  {
    if (!a1[12])
    {
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v9 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: DISABLE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 73, "setPowerReport_block_invoke");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      v10 = gnss::GnssAdaptDevice::Ga01_06GnssReportPower((NSObject **)v2, 0);
      goto LABEL_33;
    }
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)__str, (uint64_t)(a1 + 9));
    v4 = v2 + 328;
    if (__str != (char *)(v2 + 328))
    {
      v5 = v23;
      v6 = *(_QWORD *)(v2 + 352);
      if (v23 == __str)
      {
        if (v6 == v4)
        {
          (*(void (**)(char *, _QWORD *))(*(_QWORD *)__str + 24))(__str, v24);
          (*(void (**)(char *))(*(_QWORD *)v23 + 32))(v23);
          v23 = 0;
          (*(void (**)(_QWORD, char *))(**(_QWORD **)(v2 + 352) + 24))(*(_QWORD *)(v2 + 352), __str);
          (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 352) + 32))(*(_QWORD *)(v2 + 352));
          *(_QWORD *)(v2 + 352) = 0;
          v23 = __str;
          (*(void (**)(_QWORD *, uint64_t))(v24[0] + 24))(v24, v2 + 328);
          (*(void (**)(_QWORD *))(v24[0] + 32))(v24);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(*(_QWORD *)__str + 24))(__str, v2 + 328);
          (*(void (**)(char *))(*(_QWORD *)v23 + 32))(v23);
          v23 = *(char **)(v2 + 352);
        }
        *(_QWORD *)(v2 + 352) = v4;
      }
      else if (v6 == v4)
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 24))(v2 + 328, __str);
        (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 352) + 32))(*(_QWORD *)(v2 + 352));
        *(_QWORD *)(v2 + 352) = v23;
        v23 = __str;
      }
      else
      {
        v23 = *(char **)(v2 + 352);
        *(_QWORD *)(v2 + 352) = v5;
      }
    }
    v13 = v23;
    if (v23 == __str)
    {
      v14 = 4;
      v13 = __str;
    }
    else
    {
      if (!v23)
      {
LABEL_30:
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          v15 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ENABLE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 73, "setPowerReport_block_invoke");
          gnssOsa_PrintLog(__str, 4, 1, 0);
        }
        v10 = gnss::GnssAdaptDevice::Ga01_06GnssReportPower((NSObject **)v2, 1);
LABEL_33:
        if ((v10 & 1) != 0)
        {
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            v16 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: SetPwrReport success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 73, "setPowerReport_block_invoke");
            gnssOsa_PrintLog(__str, 4, 1, 0);
          }
          *(_DWORD *)__str = 1;
          v17 = a1[8];
          if (!v17)
            std::__throw_bad_function_call[abi:ne180100]();
        }
        else
        {
          if (g_LbsOsaTrace_Config)
          {
            bzero(__str, 0x3C6uLL);
            v18 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SetPwrReport error\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "setPowerReport_block_invoke", 257);
            gnssOsa_PrintLog(__str, 1, 1, 0);
          }
          *(_DWORD *)__str = 7;
          v17 = a1[8];
          if (!v17)
            std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v17 + 48))(v17, __str);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          v19 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 68, "setPowerReport_block_invoke");
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        return;
      }
      v14 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
    goto LABEL_30;
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)(a1 + 5));
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v20, (uint64_t)"setPowerReport_block_invoke");
  v7 = v21;
  if (v21 == v20)
  {
    v8 = 4;
    v7 = v20;
    goto LABEL_16;
  }
  if (v21)
  {
    v8 = 5;
LABEL_16:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v11 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "setPowerReport_block_invoke", 1302);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v12 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "setPowerReport_block_invoke");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
}

void sub_24BB01B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t gnss::GnssAdaptDevice::Ga01_06GnssReportPower(NSObject **this, int a2)
{
  double v3;
  const char *v4;
  int v5;
  double v7;
  const char *v8;
  uint64_t v9;
  double v11;
  const char *v12;
  char __str[966];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (gnss::GnssAdaptDevice::Ga01_06GnssReportPower(BOOL)::v_PowerReportState == a2)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v3 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if (a2)
        v4 = "ENABLE";
      else
        v4 = "DISABLE";
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Ignoring %s PwrRep request\n", (unint64_t)v3, "ADP", 73, "Ga01_06GnssReportPower", v4);
      v5 = 4;
LABEL_12:
      gnssOsa_PrintLog(__str, v5, 1, 0);
      return 0;
    }
    return 0;
  }
  Hal_SetPowerReportStatus(a2, (void (*)(BOOL))gnss::GnssAdaptDevice::Ga01_SetPowerReportStatusCb, (void (*)(double, double, double, double))gnss::GnssAdaptDevice::Ga01_03HandlePowerReportCB);
  if (gnssOsa_SemWaitTimeOut(this[45], 0x1F4u))
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v7 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      v8 = "DISABLE";
      if (a2)
        v8 = "ENABLE";
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SetPwrRep %s timeout\n", (unint64_t)v7, "ADP", 69, "Ga01_06GnssReportPower", 257, v8);
      v5 = 1;
      goto LABEL_12;
    }
    return 0;
  }
  gnss::GnssAdaptDevice::Ga01_06GnssReportPower(BOOL)::v_PowerReportState = a2;
  if (g_LbsOsaTrace_Config < 4)
    return 1;
  bzero(__str, 0x3C6uLL);
  v11 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  if (a2)
    v12 = "ENABLED";
  else
    v12 = "DISABLED";
  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Power reporting,%s\n", (unint64_t)v11, "ADP", 73, "Ga01_06GnssReportPower", v12);
  v9 = 1;
  gnssOsa_PrintLog(__str, 4, 1, 0);
  return v9;
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c92_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss14PwrMeasurementENS_14default_deleteIS3_EEEEEEE(uint64_t a1, uint64_t a2)
{
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_24BB01EA8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = v2;
  v5 = *(_QWORD **)(v3 + 64);
  if (v5 == v1)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v1 = v5;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c92_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss14PwrMeasurementENS_14default_deleteIS3_EEEEEEE(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 5;
  v3 = a1 + 9;
  v4 = (_QWORD *)a1[12];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = (_QWORD *)a1[8];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void gnss::GnssAdaptDevice::setConfigCoexistence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD block[5];
  _BYTE v8[24];
  _BYTE *v9;
  char __str[966];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a3 + 24))
  {
    v3 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice20setConfigCoexistenceEyNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_21_0;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
    dispatch_async(v3, block);
    v4 = v9;
    if (v9 == v8)
    {
      v5 = 4;
      v4 = v8;
    }
    else
    {
      if (!v9)
        return;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setConfigCoexistence", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void ___ZN4gnss15GnssAdaptDevice20setConfigCoexistenceEyNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;
  char __str[966];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setConfigCoexistence_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a1 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v8, (uint64_t)"setConfigCoexistence_block_invoke");
  v4 = v9;
  if (v9 == v8)
  {
    v5 = 4;
    v4 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:
  if (g_LbsOsaTrace_Config > 1)
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Not Supported\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 87, "setConfigCoexistence_block_invoke", 264);
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 68, "setConfigCoexistence_block_invoke");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
}

void sub_24BB02320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void gnss::GnssAdaptDevice::setConfigDutyCycling(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD block[5];
  _BYTE v8[24];
  _BYTE *v9;
  char __str[966];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a3 + 24))
  {
    v3 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice20setConfigDutyCyclingEbNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_22;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
    dispatch_async(v3, block);
    v4 = v9;
    if (v9 == v8)
    {
      v5 = 4;
      v4 = v8;
    }
    else
    {
      if (!v9)
        return;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setConfigDutyCycling", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void ___ZN4gnss15GnssAdaptDevice20setConfigDutyCyclingEbNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;
  char __str[966];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setConfigDutyCycling_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a1 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v8, (uint64_t)"setConfigDutyCycling_block_invoke");
  v4 = v9;
  if (v9 == v8)
  {
    v5 = 4;
    v4 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:
  if (g_LbsOsaTrace_Config > 1)
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Not Supported\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 87, "setConfigDutyCycling_block_invoke", 264);
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 68, "setConfigDutyCycling_block_invoke");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
}

void sub_24BB026C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void gnss::GnssAdaptDevice::setConfigSimulatorMode(uint64_t a1, char a2, int a3, char a4, uint64_t a5)
{
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD block[5];
  _BYTE v13[24];
  _BYTE *v14;
  int v15;
  char v16;
  char v17;
  char __str[966];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a5 + 24))
  {
    v8 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice22setConfigSimulatorModeEbibNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_25_0;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, a5);
    v16 = a2;
    v15 = a3;
    v17 = a4;
    dispatch_async(v8, block);
    v9 = v14;
    if (v14 == v13)
    {
      v10 = 4;
      v9 = v13;
    }
    else
    {
      if (!v14)
        return;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v11 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "setConfigSimulatorMode", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void ___ZN4gnss15GnssAdaptDevice22setConfigSimulatorModeEbibNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;
  char __str[966];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setConfigSimulatorMode_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!*(_BYTE *)(v2 + 88))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v20, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v20, (uint64_t)"setConfigSimulatorMode_block_invoke");
    v10 = v21;
    if (v21 == v20)
    {
      v11 = 4;
      v10 = v20;
    }
    else
    {
      if (!v21)
      {
LABEL_19:
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          v12 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "setConfigSimulatorMode_block_invoke", 1302);
          gnssOsa_PrintLog(__str, 1, 1, 0);
          if (g_LbsOsaTrace_Config >= 5)
          {
            bzero(__str, 0x3C6uLL);
            v13 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "setConfigSimulatorMode_block_invoke");
            gnssOsa_PrintLog(__str, 5, 1, 0);
          }
        }
        return;
      }
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
    goto LABEL_19;
  }
  if (g_LbsOsaTrace_Config >= 3)
  {
    bzero(__str, 0x3C6uLL);
    v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v5 = 84;
    if (!*(_BYTE *)(a1 + 76))
      v5 = 70;
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: SimulatorEn,%c,Week,%d\n", (unint64_t)v4, "ADP", 77, "setConfigSimulatorMode_block_invoke", v5, *(_DWORD *)(a1 + 72));
    gnssOsa_PrintLog(__str, 3, 1, 0);
  }
  v6 = HSW_SetSimulatorModeCfg(*(unsigned __int8 *)(a1 + 76), *(_DWORD *)(a1 + 72), *(_BYTE *)(a1 + 77));
  v7 = a1 + 40;
  if (v6)
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v18, v7);
    gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(v2, 0, (uint64_t)v18, (uint64_t)"setConfigSimulatorMode_block_invoke");
    v8 = v19;
    if (v19 == v18)
    {
      v9 = 4;
      v8 = v18;
LABEL_23:
      (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
      goto LABEL_24;
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v16, v7);
    gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(v2, 0xBu, (uint64_t)v16, (uint64_t)"setConfigSimulatorMode_block_invoke");
    v8 = v17;
    if (v17 == v16)
    {
      v9 = 4;
      v8 = v16;
      goto LABEL_23;
    }
  }
  if (v8)
  {
    v9 = 5;
    goto LABEL_23;
  }
LABEL_24:
  if (*(_BYTE *)(a1 + 76))
  {
    HSW_SetEarliestGPSWKNum(*(_WORD *)(a1 + 72));
    if (g_LbsOsaTrace_Config < 5)
      return;
    bzero(__str, 0x3C6uLL);
    v14 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Simulation mode ON\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "setConfigSimulatorMode_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v15 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 68, "setConfigSimulatorMode_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
}

void sub_24BB02CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a18;
  if (a18 == v26)
  {
    v29 = 4;
    v28 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void gnss::GnssAdaptDevice::setConfigEnableGnssConstellations(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD block[5];
  _BYTE v9[24];
  _BYTE *v10;
  int v11;
  char __str[966];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a3 + 24))
  {
    v4 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice33setConfigEnableGnssConstellationsEjNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_27;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
    v11 = a2;
    dispatch_async(v4, block);
    v5 = v10;
    if (v10 == v9)
    {
      v6 = 4;
      v5 = v9;
    }
    else
    {
      if (!v10)
        return;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setConfigEnableGnssConstellations", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void ___ZN4gnss15GnssAdaptDevice33setConfigEnableGnssConstellationsEjNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  char __str[966];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setConfigEnableGnssConstellations_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (*(_BYTE *)(v2 + 88))
  {
    if (g_LbsOsaTrace_Config >= 3)
    {
      bzero(__str, 0x3C6uLL);
      v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Constellation,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 77, "setConfigEnableGnssConstellations_block_invoke", *(_DWORD *)(a1 + 72));
      gnssOsa_PrintLog(__str, 3, 1, 0);
    }
    v5 = HSW_SetConstellationCfg(*(_DWORD *)(a1 + 72));
    v6 = a1 + 40;
    if (v5)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v16, v6);
      gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(v2, 0, (uint64_t)v16, (uint64_t)"setConfigEnableGnssConstellations_block_invoke");
      v7 = v17;
      if (v17 == v16)
      {
        v8 = 4;
        v7 = v16;
        goto LABEL_21;
      }
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v14, v6);
      gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(v2, 0xBu, (uint64_t)v14, (uint64_t)"setConfigEnableGnssConstellations_block_invoke");
      v7 = v15;
      if (v15 == v14)
      {
        v8 = 4;
        v7 = v14;
        goto LABEL_21;
      }
    }
    if (!v7)
      goto LABEL_22;
    v8 = 5;
LABEL_21:
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_22:
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v13 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "setConfigEnableGnssConstellations_block_invoke");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    return;
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v18, a1 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v18, (uint64_t)"setConfigEnableGnssConstellations_block_invoke");
  v9 = v19;
  if (v19 == v18)
  {
    v10 = 4;
    v9 = v18;
    goto LABEL_16;
  }
  if (v19)
  {
    v10 = 5;
LABEL_16:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v11 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "setConfigEnableGnssConstellations_block_invoke", 1302);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v12 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "setConfigEnableGnssConstellations_block_invoke");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
}

void sub_24BB03234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a18;
  if (a18 == v26)
  {
    v29 = 4;
    v28 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void gnss::GnssAdaptDevice::setConfigRfBandEnable(uint64_t a1, char a2, char a3, uint64_t a4)
{
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD block[5];
  _BYTE v11[24];
  _BYTE *v12;
  char v13;
  char v14;
  char __str[966];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a4 + 24))
  {
    v6 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice21setConfigRfBandEnableEbbNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_31;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v11, a4);
    v13 = a2;
    v14 = a3;
    dispatch_async(v6, block);
    v7 = v12;
    if (v12 == v11)
    {
      v8 = 4;
      v7 = v11;
    }
    else
    {
      if (!v12)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "setConfigRfBandEnable", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void ___ZN4gnss15GnssAdaptDevice21setConfigRfBandEnableEbbNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  const char *v5;
  const char *v6;
  int v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;
  char __str[966];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setConfigRfBandEnable_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (*(_BYTE *)(v2 + 88))
  {
    if (g_LbsOsaTrace_Config >= 3)
    {
      bzero(__str, 0x3C6uLL);
      v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      v5 = "EN";
      if (*(_BYTE *)(a1 + 72))
        v6 = "EN";
      else
        v6 = "DIS";
      if (!*(_BYTE *)(a1 + 73))
        v5 = "DIS";
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: RFBandFamily,L1:%s,L5:%s\n", (unint64_t)v4, "ADP", 77, "setConfigRfBandEnable_block_invoke", v6, v5);
      gnssOsa_PrintLog(__str, 3, 1, 0);
    }
    v7 = HSW_SetRfBandCfg(*(_BYTE *)(a1 + 72), *(unsigned __int8 *)(a1 + 73));
    v8 = a1 + 40;
    if (v7)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v18, v8);
      gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(v2, 0, (uint64_t)v18, (uint64_t)"setConfigRfBandEnable_block_invoke");
      v9 = v19;
      if (v19 == v18)
      {
        v10 = 4;
        v9 = v18;
        goto LABEL_26;
      }
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v16, v8);
      gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(v2, 0xBu, (uint64_t)v16, (uint64_t)"setConfigRfBandEnable_block_invoke");
      v9 = v17;
      if (v17 == v16)
      {
        v10 = 4;
        v9 = v16;
        goto LABEL_26;
      }
    }
    if (!v9)
      goto LABEL_27;
    v10 = 5;
LABEL_26:
    (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_27:
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v15 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 68, "setConfigRfBandEnable_block_invoke");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    return;
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v20, a1 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v20, (uint64_t)"setConfigRfBandEnable_block_invoke");
  v11 = v21;
  if (v21 == v20)
  {
    v12 = 4;
    v11 = v20;
    goto LABEL_21;
  }
  if (v21)
  {
    v12 = 5;
LABEL_21:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v13 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "setConfigRfBandEnable_block_invoke", 1302);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v14 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "setConfigRfBandEnable_block_invoke");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
}

void sub_24BB037E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a18;
  if (a18 == v26)
  {
    v29 = 4;
    v28 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void gnss::GnssAdaptDevice::setConfigNetworkFreqAssistance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD block[5];
  _BYTE v8[24];
  _BYTE *v9;
  char __str[966];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a3 + 24))
  {
    v3 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice30setConfigNetworkFreqAssistanceEbNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_33;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
    dispatch_async(v3, block);
    v4 = v9;
    if (v9 == v8)
    {
      v5 = 4;
      v4 = v8;
    }
    else
    {
      if (!v9)
        return;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setConfigNetworkFreqAssistance", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void ___ZN4gnss15GnssAdaptDevice30setConfigNetworkFreqAssistanceEbNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE *v10;
  char __str[966];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = g_LbsOsaTrace_Config;
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "setConfigNetworkFreqAssistance_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
    v3 = g_LbsOsaTrace_Config;
  }
  if (v3 >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Not supported\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 73, "setConfigNetworkFreqAssistance_block_invoke");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a1 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 0, (uint64_t)v9, (uint64_t)"setConfigNetworkFreqAssistance_block_invoke");
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_10;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_10:
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "setConfigNetworkFreqAssistance_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
}

void sub_24BB03BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a16;
  if (a16 == v16)
  {
    v19 = 4;
    v18 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void gnss::GnssAdaptDevice::Ga01_SetPowerReportStatusCb(gnss::GnssAdaptDevice *this)
{
  uint64_t DeviceInstance;
  uint64_t v2;
  int v3;
  uint64_t v4;
  char __str[966];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(this);
  if (!DeviceInstance)
  {
    if (!g_LbsOsaTrace_Config)
      return;
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Invalid Device Instance\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "Ga01_SetPowerReportStatusCb", 513);
    v3 = 1;
    goto LABEL_7;
  }
  if (!gnssOsa_SemRelease(*(dispatch_semaphore_t *)(DeviceInstance + 360)) && g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx CtrlReqSem\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 87, "Ga01_SetPowerReportStatusCb", 257);
    v3 = 2;
LABEL_7:
    gnssOsa_PrintLog(__str, v3, 1, 0);
  }
}

void gnss::GnssAdaptDevice::Ga01_03HandlePowerReportCB(gnss::GnssAdaptDevice *this, double a2, double a3, double a4, double a5)
{
  uint64_t v9;
  uint64_t DeviceInstance;
  NSObject *v11;
  _QWORD block[9];
  char __str[966];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ActiveInt_Sec,%f,AvgPwr_milliwatts,%f,LocalTime,%f,MeasInt_Seconds,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 73, "Ga01_03HandlePowerReportCB", a2, a3, a4, a5);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(this);
  v11 = *(NSObject **)(DeviceInstance + 152);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN4gnss15GnssAdaptDevice26Ga01_03HandlePowerReportCBEdddd_block_invoke;
  block[3] = &__block_descriptor_tmp_51;
  block[4] = DeviceInstance;
  *(double *)&block[5] = a2;
  *(double *)&block[6] = a3;
  *(double *)&block[7] = a4;
  *(double *)&block[8] = a5;
  dispatch_async(v11, block);
}

void sub_24BB041D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  _Block_object_dispose(&a15, 8);
  v22 = a20;
  a20 = 0;
  if (v22)
    MEMORY[0x24BD2D7C8](v22, 0x1000C407A37F5ACLL);
  v23 = *(_QWORD **)(v20 - 48);
  if (v23 == (_QWORD *)(v20 - 72))
  {
    v24 = 4;
    v23 = (_QWORD *)(v20 - 72);
  }
  else
  {
    if (!v23)
      goto LABEL_8;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_8:
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose_(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
    JUMPOUT(0x24BD2D7C8);
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice26Ga01_03HandlePowerReportCBEdddd_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  v5[0] = v2;
  v3 = *(_QWORD *)(a1 + 64);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 48))(v3, v5);
  result = v5[0];
  v5[0] = 0;
  if (result)
    return MEMORY[0x24BD2D7C8](result, 0x1000C407A37F5ACLL);
  return result;
}

void sub_24BB043B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x24BD2D7C8](a9, 0x1000C407A37F5ACLL);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c92_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss14PwrMeasurementENS_14default_deleteIS3_EEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

_QWORD *__destroy_helper_block_e8_40c92_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss14PwrMeasurementENS_14default_deleteIS3_EEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void GncP02_10DataIndFromMECB(size_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  char __str[966];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (a1 > 8)
  {
    v5 = gnssOsa_Calloc("GncP02_10DataIndFromMECB", 93, 1, 0x20uLL);
    if (v5)
    {
      v6 = v5;
      v7 = gnssOsa_Calloc("GncP02_10DataIndFromMECB", 99, 1, a1);
      v6[2] = v7;
      if (v7)
      {
        memcpy_s("GncP02_10DataIndFromMECB", 106, v7, a1, a2, a1);
        *((_WORD *)v6 + 12) = a1;
        if (a2[2] == 77)
          v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        else
          LODWORD(v8) = 0;
        *((_DWORD *)v6 + 7) = v8;
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          v9 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_ME_BUF_RX_IND =>GNCP Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 68, "GncP02_10DataIndFromMECB", *((unsigned __int16 *)v6 + 12));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        AgpsSendFsmMsg(132, 132, 8655363, v6);
      }
      else
      {
        free(v6);
      }
    }
  }
  else if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MsgLen,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GncP02_10DataIndFromMECB", 783, a1);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
}

void GncP02_11StrtMEDataDelayTimr(unsigned int a1)
{
  uint64_t v2;
  uint64_t v3;
  char __str[966];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (g_GncPMeData == 1)
  {
    if (AgpsFsmStopTimer(8656134) && g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 87, "GncP02_11StrtMEDataDelayTimr", 1545);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    g_GncPMeData = 0;
  }
  if (AgpsFsmStartTimer(0x841506u, a1))
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Dur,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GncP02_11StrtMEDataDelayTimr", 1544, a1);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
  }
  else
  {
    g_GncPMeData = 1;
    mach_continuous_time();
  }
}

void GncP02_13ClearMEBuf(void)
{
  uint64_t v0;
  char __str[966];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  while (g_GncPMeData)
    GncP02_14ClearCurrMEBufElem();
  g_GncPMeData = 0;
  if (g_GncPMeData)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v0 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MEDataPack,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 87, "GncP02_13ClearMEBuf", 770, g_GncPMeData);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    g_GncPMeData = 0;
  }
}

void GncP02_14ClearCurrMEBufElem(void)
{
  uint64_t v0;
  uint64_t v1;
  char __str[966];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if (g_GncPMeData)
  {
    v0 = *(_QWORD *)(g_GncPMeData + 4104);
    free((void *)g_GncPMeData);
    if (g_GncPMeData)
    {
      --g_GncPMeData;
    }
    else if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 87, "GncP02_14ClearCurrMEBufElem", 770);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    g_GncPMeData = v0;
  }
}

BOOL GncP02_15AddMEDataElem(unsigned __int8 *a1, size_t a2, int a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char __str[966];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v6 = gnssOsa_Calloc("GncP02_15AddMEDataElem", 259, 1, 0x1010uLL);
  if (v6)
  {
    if (g_GncPMeData == 255)
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: MEData Overflow\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 87, "GncP02_15AddMEDataElem");
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      GncP02_13ClearMEBuf();
    }
    v6[1025] = a3;
    *((_WORD *)v6 + 2048) = a2;
    *((_QWORD *)v6 + 513) = 0;
    memcpy_s("GncP02_15AddMEDataElem", 278, v6, 0x1000u, a1 + 8, a2);
    v8 = &g_GncPMeData;
    v9 = g_GncPMeData;
    if (g_GncPMeData)
    {
      do
      {
        v10 = v9;
        v9 = *(_QWORD *)(v9 + 4104);
      }
      while (v9);
      v8 = (uint64_t *)(v10 + 4104);
    }
    *v8 = (uint64_t)v6;
    ++g_GncPMeData;
  }
  return v6 != 0;
}

uint64_t GncP02_16GetMEDataFrmBuf(unsigned int a1, char *a2)
{
  uint64_t v3;
  unsigned __int16 v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  char __str[966];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = g_GncPMeData;
  if (g_GncPMeData)
  {
    v5 = 0;
    while (1)
    {
      v6 = *(unsigned __int16 *)(v3 + 4096);
      if (!v5 && v6 > a1)
        break;
      if (v6 + v5 <= a1)
      {
        g_GncPMeData = *(_DWORD *)(v3 + 4100);
        memcpy_s("GncP02_16GetMEDataFrmBuf", 352, &a2[v5], a1 - v5, (const void *)v3, v6);
        v5 += *(_WORD *)(g_GncPMeData + 4096);
        GncP02_14ClearCurrMEBufElem();
        v3 = g_GncPMeData;
        if (g_GncPMeData)
          continue;
      }
      goto LABEL_11;
    }
    if (g_LbsOsaTrace_Config < 2)
      return 0;
    bzero(__str, 0x3C6uLL);
    v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: MaxBytes less than MeData in node, MaxBytes:%u, NodeDataLen:%u, PktTS:%u, PktCount:%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 87, "GncP02_16GetMEDataFrmBuf", a1, *(unsigned __int16 *)(g_GncPMeData + 4096), *(_DWORD *)(g_GncPMeData + 4100), g_GncPMeData);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  v5 = 0;
LABEL_11:
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: MaxBytes:%u, ReadBytes:%u, LatestReadTS:%u, NumPacketsLeft:%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GncP02_16GetMEDataFrmBuf", a1, v5, g_GncPMeData, g_GncPMeData);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  return v5;
}

uint64_t GncP02_22HandleDataFromME(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char __str[966];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_ME_BUF_RX_IND Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "GncP02_22HandleDataFromME", *(unsigned __int16 *)(a1 + 24));
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    if (!*(_WORD *)(a1 + 24))
      goto LABEL_23;
    if ((unsigned __int16)(*(_WORD *)(a1 + 24) - 4097) <= 0xF007u)
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MsgLen,%u,Max,%u\n", v3);
LABEL_22:
        gnssOsa_PrintLog(__str, 2, 1, 0);
        goto LABEL_23;
      }
      goto LABEL_23;
    }
    v5 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)v5 != 122 || *(_BYTE *)(v5 + 1) != 120)
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ME Data nonZX MC,%u,MID,%u\n", v9);
        goto LABEL_22;
      }
LABEL_23:
      v10 = *(void **)(a1 + 16);
      if (v10)
        free(v10);
      *(_QWORD *)(a1 + 16) = 0;
      return 0;
    }
    v6 = *(unsigned __int8 *)(v5 + 2);
    v7 = *(unsigned __int8 *)(v5 + 3);
    if (v6 == 66)
    {
      if (v7 == 83)
      {
        GncP02_25HandleDeRegGnssResp((unsigned __int8 *)*(unsigned __int8 *)(v5 + 8));
        goto LABEL_42;
      }
      if (g_LbsOsaTrace_Config < 2)
        goto LABEL_42;
    }
    else
    {
      if (v6 != 79)
      {
        if (v6 == 77)
        {
          if (v7 != 77)
            goto LABEL_42;
          if (GncP02_15AddMEDataElem(*(unsigned __int8 **)(a1 + 16), *(unsigned __int16 *)(v5 + 5), *(_DWORD *)(a1 + 28)))
          {
            if ((g_GncPMeData & 1) == 0)
            {
              if (WORD2(qword_2579BA2B0) && HIWORD(qword_2579BA2B0) >= 0x3E8u)
                GncP02_11StrtMEDataDelayTimr(WORD2(qword_2579BA2B0));
              if (g_LbsOsaTrace_Config < 4)
                goto LABEL_42;
              bzero(__str, 0x3C6uLL);
              v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FixInt,%u,Timer,%u,Started,%u,Len,%u,TS,%u,NumPks,%u\n", v15, "GNC", 73);
              goto LABEL_50;
            }
            if (g_LbsOsaTrace_Config >= 4)
            {
              bzero(__str, 0x3C6uLL);
              v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Len,%u,TS,%u,NumPks,%u\n", v8);
LABEL_50:
              v13 = 4;
              goto LABEL_41;
            }
LABEL_42:
            if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 2) == 77)
            {
              GncP16_26UpdateStateMEDataRcvd();
              if ((g_GncPMeData & 1) == 0)
                GncP01_32ExecutePE(v14);
            }
            goto LABEL_23;
          }
          if (g_LbsOsaTrace_Config < 2)
            goto LABEL_42;
          bzero(__str, 0x3C6uLL);
          mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: MEData Lost Len,%u\n");
        }
        else
        {
          if (g_LbsOsaTrace_Config < 2)
            goto LABEL_42;
          bzero(__str, 0x3C6uLL);
          v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MC,%u\n", v16);
        }
LABEL_40:
        v13 = 2;
LABEL_41:
        gnssOsa_PrintLog(__str, v13, 1, 0);
        goto LABEL_42;
      }
      if (v7 == 84 || v7 == 66)
      {
        GncP25_04HandleTimeMarkEvent(*(unsigned __int8 **)(a1 + 16));
        goto LABEL_42;
      }
      if (g_LbsOsaTrace_Config < 2)
        goto LABEL_42;
    }
    bzero(__str, 0x3C6uLL);
    v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u\n", v12);
    goto LABEL_40;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 69, "GncP02_22HandleDataFromME", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void GncP02_25HandleDeRegGnssResp(unsigned __int8 *a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  int v3;
  int SleepTimeout;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char __str[966];
  uint64_t v10;

  v1 = a1;
  v10 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config <= 3)
  {
    v3 = a1;
  }
  else
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    v3 = v1;
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Status,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP02_25HandleDeRegGnssResp", v1);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (v1 > 0x4Cu)
  {
    if (v1 == 77)
    {
      GncP16_31UpdateStateMEPowerState(7u);
      return;
    }
    if (v1 == 119)
    {
      if (g_LbsOsaTrace_Config < 4)
        return;
      bzero(__str, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ME Wake-up in progress\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncP02_25HandleDeRegGnssResp");
      v6 = 4;
      goto LABEL_19;
    }
    if (v1 != 109)
      goto LABEL_17;
LABEL_12:
    if (g_LbsOsaTrace_Config < 5)
      return;
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Success response\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "GncP02_25HandleDeRegGnssResp");
    v6 = 5;
    goto LABEL_19;
  }
  if (v1 == 32)
    goto LABEL_12;
  if (v1 == 67 || v1 == 71)
  {
    SleepTimeout = HSW_GetSleepTimeout();
    GncP03_SendGNSSSleepRequest(SleepTimeout, 0);
    return;
  }
LABEL_17:
  if (g_LbsOsaTrace_Config < 2)
    return;
  bzero(__str, 0x3C6uLL);
  v8 = mach_continuous_time();
  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP02_25HandleDeRegGnssResp", 770, v3);
  v6 = 2;
LABEL_19:
  gnssOsa_PrintLog(__str, v6, 1, 0);
}

uint64_t GncP02_31MEDataDelayTimExp(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char __str[966];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_MEDATA_DELAY_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 68, "GncP02_31MEDataDelayTimExp");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    v2 = g_GncPStateInfo;
    g_GncPMeData = 0;
    if (g_GncPStateInfo > 0x10u)
      goto LABEL_20;
    if (((1 << g_GncPStateInfo) & 0x10A3E) != 0)
    {
LABEL_6:
      GncP02_13ClearMEBuf();
      return 0;
    }
    if (((1 << g_GncPStateInfo) & 0xC5C1) == 0)
    {
LABEL_20:
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GncP02_12MEDataTimerExpiry", 262, v2);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
    }
    v4 = g_GncPMeData;
    if (!g_GncPMeData)
      return 0;
    v5 = g_GncPMeData;
    v6 = g_GncPMeData;
    while ((v6 & 1) == 0)
    {
      v7 = *(unsigned __int16 *)(v4 + 4096);
      a1 = GncP01_32ExecutePE(a1);
      v6 = g_GncPMeData;
      v8 = g_GncPMeData;
      v4 = g_GncPMeData;
      if (g_GncPMeData == (_DWORD)v5)
      {
        if (*(unsigned __int16 *)(g_GncPMeData + 4096) == v7)
          break;
        v8 = v5;
      }
      v5 = v8;
      if (!g_GncPMeData)
        return 0;
    }
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: State,%hhu,NumPks,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 69, "GncP02_12MEDataTimerExpiry", v2, v5);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    goto LABEL_6;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 69, "GncP02_31MEDataDelayTimExp", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t GncP02_32StateHndlTimExp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char __str[966];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_STATE_HNDL_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 68, "GncP02_32StateHndlTimExp");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    GncP16_25UpdateStateTimerExpiry(a1, a2, a3);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 69, "GncP02_32StateHndlTimExp", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t GncP02_33BBResetTimExp(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char __str[966];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_GNSSBBRESET_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 68, "GncP02_33BBResetTimExp");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    GncP19_04MEResetTimerExpiry();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 69, "GncP02_33BBResetTimExp", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t GncP02_34TimemarkSessTimExp(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char __str[966];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_SESS_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 68, "GncP02_34TimemarkSessTimExp");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    GncP25_10TimemarkSessTimerExpiry();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 69, "GncP02_34TimemarkSessTimExp", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

_QWORD *DD_Delete_Bad_NVIC_Data(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  _QWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = 0;
  v2 = p_NV + 27040;
  v3 = (_OWORD *)(p_NV + 27936);
  v4 = result + 6228;
  v5 = result + 5962;
  do
  {
    v6 = result[5953];
    if (*(_BYTE *)(v6 + v1))
    {
      *(_BYTE *)(v6 + v1) = 0;
      *(_BYTE *)(result[5951] + v1) = 0;
      *(_BYTE *)(result[5955] + v1) = 0;
      *(_OWORD *)((char *)v5 + 60) = 0uLL;
      v5[2] = 0uLL;
      v5[3] = 0uLL;
      *v5 = 0uLL;
      v5[1] = 0uLL;
      *(_BYTE *)(result[5961] + v1) = 0;
      *(_BYTE *)(result[5958] + v1) = 1;
      *((_QWORD *)v3 - 1) = 0xFFFFFFFFLL;
      *v3 = 0uLL;
      v3[1] = 0uLL;
      v3[2] = 0uLL;
      v3[3] = 0uLL;
      *(_OWORD *)((char *)v3 + 60) = 0uLL;
    }
    v7 = result[5954];
    if (*(_BYTE *)(v7 + v1))
    {
      *(_BYTE *)(v7 + v1) = 0;
      *(_BYTE *)(result[5952] + v1) = 0;
      *(_BYTE *)(result[5957] + v1) = 0;
      *((_BYTE *)v4 + 48) = 0;
      *((_OWORD *)v4 + 1) = 0uLL;
      *((_OWORD *)v4 + 2) = 0uLL;
      *(_OWORD *)v4 = 0uLL;
      *(_BYTE *)(result[5961] + v1) = 0;
      *(_QWORD *)(v2 - 8) = 0xFFFFFFFFLL;
      *(_OWORD *)v2 = 0uLL;
      *(_OWORD *)(v2 + 16) = 0uLL;
      *(_OWORD *)(v2 + 32) = 0uLL;
      *(_BYTE *)(v2 + 48) = 0;
    }
    ++v1;
    v2 += 64;
    v3 = (_OWORD *)((char *)v3 + 88);
    v4 = (_QWORD *)((char *)v4 + 52);
    v5 = (_OWORD *)((char *)v5 + 76);
  }
  while (v1 != 14);
  return result;
}

uint64_t DD_Delete_Inhib_NVIC_Data(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _OWORD *v6;

  v2 = 0;
  v3 = (_OWORD *)(p_NV + 27936);
  v4 = p_NV + 27040;
  v5 = a2 + 6228;
  v6 = a2 + 5962;
  do
  {
    if (*(_BYTE *)(result + v2))
    {
      *(_BYTE *)(a2[5953] + v2) = 0;
      *(_BYTE *)(a2[5951] + v2) = 0;
      *(_BYTE *)(a2[5955] + v2) = 0;
      *(_OWORD *)((char *)v6 + 60) = 0uLL;
      v6[2] = 0uLL;
      v6[3] = 0uLL;
      *v6 = 0uLL;
      v6[1] = 0uLL;
      *(_BYTE *)(a2[5956] + v2) = 0;
      *(_OWORD *)((char *)v6 + 1124) = 0uLL;
      *(_OWORD *)((char *)v6 + 1096) = 0uLL;
      *(_OWORD *)((char *)v6 + 1112) = 0uLL;
      *(_OWORD *)((char *)v6 + 1064) = 0uLL;
      *(_OWORD *)((char *)v6 + 1080) = 0uLL;
      *(_BYTE *)(a2[5961] + v2) = 0;
      *(_BYTE *)(a2[5958] + v2) = 1;
      *((_QWORD *)v3 - 1) = 0xFFFFFFFFLL;
      *v3 = 0uLL;
      v3[1] = 0uLL;
      v3[2] = 0uLL;
      v3[3] = 0uLL;
      *(_OWORD *)((char *)v3 + 60) = 0uLL;
      *(_BYTE *)(a2[5954] + v2) = 0;
      *(_BYTE *)(a2[5952] + v2) = 0;
      *(_BYTE *)(a2[5957] + v2) = 0;
      *((_BYTE *)v5 + 48) = 0;
      *((_OWORD *)v5 + 1) = 0uLL;
      *((_OWORD *)v5 + 2) = 0uLL;
      *(_OWORD *)v5 = 0uLL;
      *(_QWORD *)(v4 - 8) = 0xFFFFFFFFLL;
      *(_OWORD *)v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      *(_OWORD *)(v4 + 32) = 0uLL;
      *(_BYTE *)(v4 + 48) = 0;
    }
    ++v2;
    v3 = (_OWORD *)((char *)v3 + 88);
    v4 += 64;
    v5 = (_QWORD *)((char *)v5 + 52);
    v6 = (_OWORD *)((char *)v6 + 76);
  }
  while (v2 != 14);
  return result;
}

char *DD_Check_Age_NVIC_Data(char *result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  _BYTE *v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const char *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v25;
  const char *v26;
  const char *v27;
  int v28;
  int v29;
  const char *v30;
  uint64_t v31;
  _BYTE *v32;
  int v33;
  int v34;

  if ((int)result >= 1)
  {
    v3 = (int)result;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = (_BYTE *)(a2 + 62170);
    v8 = (_QWORD *)(a2 + 47624);
    v9 = (_DWORD)result + 900;
    if ((int)result <= 900)
      v10 = 900;
    else
      v10 = (int)result;
    v11 = v10 - 900;
    if ((int)result <= 86400)
      v12 = 86400;
    else
      v12 = (int)result;
    v13 = v12 - 86400;
    v14 = *(_QWORD *)(a2 + 47640);
    v15 = 47696;
    while (1)
    {
      if (*(_BYTE *)(v14 + v4))
      {
        v16 = *(_DWORD *)(a2 + v15);
        if (v16 < 1 || v16 >= v13)
        {
          if (!v16)
          {
            *(_DWORD *)(a2 + v15) = v11;
            goto LABEL_19;
          }
          if (v16 <= v9)
            goto LABEL_19;
          ++v5;
          if (*v7)
            goto LABEL_19;
        }
        v6 = 1;
        *(_BYTE *)(*v8 + v4) = 1;
      }
LABEL_19:
      ++v4;
      v15 += 76;
      if (v4 == 14)
      {
        v31 = a2 + 50552;
        if (v5 > 0)
        {
          if (*v7)
            v18 = "(Skipped)";
          else
            v18 = (const char *)&unk_24BBF04D5;
          result = EvLog_v("DD_Check_Age_NVIC_Data:  Deleting Future EPH, %d SVs  %s", v5, v18);
        }
        v32 = v7;
        v33 = 0;
        v19 = 0;
        if (v3 <= 15724800)
          v20 = 15724800;
        else
          v20 = v3;
        v21 = v20 - 15724800;
        v34 = (v3 - (v20 - 15724800)) / 604800;
        v22 = 49824;
        do
        {
          if (*(_BYTE *)(v8[4] + v19))
          {
            v23 = *(_DWORD *)(a2 + v22);
            if (v23 >= 1 && v23 < v21)
            {
              v6 = 1;
              *(_BYTE *)(v8[1] + v19) = 1;
              result = EvLog_v("DD_Check_Age_NVIC_Data:  Deleting Old ALM, SV %d age %d thresh %d", (int)v19 + 1, (v3 - v23) / 604800, v34);
            }
            else if (v23)
            {
              if (v23 > v9)
              {
                ++v33;
                v25 = v3 - v23;
                v26 = "(Skipped)";
                if (!*v32)
                  v26 = (const char *)&unk_24BBF04D5;
                result = EvLog_v("DD_Check_Age_NVIC_Data:  Deleting Future ALM, SV %d age %d thresh %d  %s", (int)v19 + 1, v25 / 604800, 0, v26);
                if (!*v32)
                {
                  v6 = 1;
                  *(_BYTE *)(v8[1] + v19) = 1;
                }
              }
            }
            else
            {
              *(_DWORD *)(a2 + v22) = v11;
            }
          }
          ++v19;
          v22 += 52;
        }
        while (v19 != 14);
        if (v33 > 0)
        {
          if (*v32)
            v27 = "(Skipped)";
          else
            v27 = (const char *)&unk_24BBF04D5;
          result = EvLog_v("DD_Check_Age_NVIC_Data:  Deleting Future ALM, %d SVs  %s", v33, v27);
        }
        if (*(_DWORD *)(v31 + 4))
        {
          if (v3 <= 2419200)
            v28 = 2419200;
          else
            v28 = v3;
          v29 = *(_DWORD *)v31;
          if (*(int *)v31 >= 1 && v29 < v28 - 2419200)
          {
LABEL_55:
            *(_QWORD *)v31 = 0;
            *(_QWORD *)(v31 + 8) = 0;
            *(_WORD *)(v31 + 16) = 0;
            *(_OWORD *)(a2 + 50576) = 0u;
            *(_OWORD *)(a2 + 50592) = 0u;
            *(_QWORD *)(a2 + 50606) = 0;
            if ((v6 & 1) == 0)
              return result;
            return (char *)DD_Delete_Bad_NVIC_Data((_QWORD *)a2);
          }
          if (!v29)
          {
            *(_DWORD *)v31 = v11;
            if ((v6 & 1) == 0)
              return result;
            return (char *)DD_Delete_Bad_NVIC_Data((_QWORD *)a2);
          }
          if (v29 > v9)
          {
            v30 = *v32 ? "(Skipped)" : (const char *)&unk_24BBF04D5;
            result = EvLog_v("DD_Check_Age_NVIC_Data:  Deleting Future NGTO, %d  %d  %s", v29, v9, v30);
            if (!*v32)
              goto LABEL_55;
          }
        }
        if ((v6 & 1) == 0)
          return result;
        return (char *)DD_Delete_Bad_NVIC_Data((_QWORD *)a2);
      }
    }
  }
  return result;
}

uint64_t Decode_BDS_Alm_Health_Sts(int a1)
{
  int v1;
  int v2;
  unsigned int v3;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  if ((a1 & 0x100) != 0)
  {
    if ((_BYTE)a1)
    {
      if ((a1 & 0xE0) != 0)
        v5 = 4;
      else
        v5 = 7;
      v6 = (a1 << 26 >> 31) & 6;
      if ((a1 & 0x40) != 0)
        v6 = 5;
      if ((a1 & 0x80) != 0)
        v7 = v5;
      else
        v7 = v6;
      if ((a1 & 0xE0) == 0)
        v7 = v5;
      if ((a1 & 2) != 0)
        v8 = 3;
      else
        v8 = v7;
      if (a1 == 255)
        return 2;
      else
        return v8;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if ((a1 & 0xE0) != 0)
      v1 = 8;
    else
      v1 = 11;
    v2 = (a1 << 26 >> 31) & 0xA;
    if ((a1 & 0x40) != 0)
      v2 = 9;
    if ((a1 & 0x80) != 0)
      v3 = v1;
    else
      v3 = v2;
    if ((a1 & 0xE0) == 0)
      v3 = v1;
    if ((a1 & 2) != 0)
      return 3;
    else
      return v3;
  }
}

BOOL Comp_AcqAid(int a1, __int16 a2, unsigned int a3, unsigned __int8 *a4, uint64_t a5, double a6)
{
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  double v12;
  double v13;
  int v14;
  unsigned int v15;
  double v16;
  double v17;
  double v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  double v24;
  int v25;
  double v26;
  double v27;
  double v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  double v32;
  double v33;
  double v34;
  int v35;

  v6 = *a4;
  *(_BYTE *)(a5 + 4) = v6;
  if (!v6)
    return v6 != 0;
  *(_DWORD *)a5 = a1;
  v7 = *((double *)a4 + 5) * 65.536;
  v8 = -0.5;
  if (v7 <= 0.0)
    v9 = -0.5;
  else
    v9 = 0.5;
  v10 = v7 + v9;
  if (v10 <= 2147483650.0)
  {
    if (v10 >= -2147483650.0)
      v11 = (int)v10;
    else
      LOWORD(v11) = 0;
  }
  else
  {
    LOWORD(v11) = -1;
  }
  *(_WORD *)(a5 + 20) = v11;
  v12 = *((double *)a4 + 3);
  if (v12 > 0.0)
    v8 = 0.5;
  v13 = v12 + v8;
  if (v13 <= 2147483650.0)
  {
    if (v13 >= -2147483650.0)
      v14 = (int)v13;
    else
      LOWORD(v14) = 0;
  }
  else
  {
    LOWORD(v14) = -1;
  }
  *(_WORD *)(a5 + 22) = v14;
  v15 = *((_DWORD *)a4 + 8);
  if (v15 >= a3)
  {
    *(_WORD *)(a5 + 22) = -a2;
    LOWORD(v15) = a3;
  }
  *(_WORD *)(a5 + 18) = v15;
  v16 = *((double *)a4 + 6) * 4.0;
  v17 = -0.5;
  if (v16 > 0.0)
    v17 = 0.5;
  v18 = v16 + v17;
  if (v18 <= 2147483650.0)
  {
    v19 = (int)v18;
    if (v18 < -2147483650.0)
      LOWORD(v19) = 0;
  }
  else
  {
    LOWORD(v19) = -1;
  }
  *(_WORD *)(a5 + 38) = v19;
  v20 = *((_DWORD *)a4 + 14);
  if (v20 >= 0xFF)
    LOBYTE(v20) = -1;
  *(_BYTE *)(a5 + 40) = v20;
  v21 = *((_DWORD *)a4 + 1);
  *(_BYTE *)(a5 + 15) = v21 >> 6 < 0x753;
  v22 = *((_DWORD *)a4 + 3);
  if (v22 >= 0x24988)
  {
    if (v22 > 0xDB930)
    {
      *(_BYTE *)(a5 + 14) = 0;
      goto LABEL_33;
    }
    v23 = 2;
  }
  else
  {
    v23 = 3;
  }
  *(_BYTE *)(a5 + 14) = v23;
LABEL_33:
  LODWORD(v18) = *((_DWORD *)a4 + 2);
  v24 = (double)*(unint64_t *)&v18 / 299792458.0;
  v25 = (int)(v24 * 2000.0 + 0.5);
  v26 = a6 - v24;
  v27 = v26 / 1.5;
  if (v26 / 1.5 <= 0.0)
    v27 = v26 / 1.5 + -1.0;
  *(_WORD *)(a5 + 16) = v25;
  v28 = (v26 + (double)(int)v27 * -1.5) * 1023000.0;
  *(_DWORD *)(a5 + 28) = (int)v27;
  *(_DWORD *)(a5 + 32) = (int)v28;
  *(_WORD *)(a5 + 36) = vcvtd_n_s64_f64(v28 - (double)(int)v28, 0x10uLL);
  if ((int)v27 < 0)
    *(_DWORD *)(a5 + 28) = (int)v27 + 403200;
  v29 = *((_DWORD *)a4 + 4);
  if (v29 >= 0x1E)
  {
    if (v29 <= 0x24988)
      v30 = (int)(((double)v29 + 29.3052256) / 29.3052256);
    else
      LOWORD(v30) = 5115;
  }
  else
  {
    LOWORD(v30) = 1;
  }
  *(_WORD *)(a5 + 26) = v30;
  if (v21 >= 0x4B1)
  {
    if (v21 <= 0x493DF)
      v31 = (v21 + 600) / 0x4B0;
    else
      LOBYTE(v31) = -1;
  }
  else
  {
    LOBYTE(v31) = 1;
  }
  *(_BYTE *)(a5 + 24) = v31;
  *(_BYTE *)(a5 + 43) = a4[60];
  v32 = *((double *)a4 + 8) * 8.0;
  v33 = -0.5;
  if (v32 > 0.0)
    v33 = 0.5;
  v34 = v32 + v33;
  if (v34 <= 2147483650.0)
  {
    if (v34 >= -2147483650.0)
      v35 = (int)v34;
    else
      LOWORD(v35) = 0;
  }
  else
  {
    LOWORD(v35) = -1;
  }
  *(_WORD *)(a5 + 44) = v35;
  return v6 != 0;
}

uint64_t Gnm28_01HandlePeNvBackup(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char __str[966];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_PE_NV_BACKUP_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm28_01HandlePeNvBackup");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      if (!*(_WORD *)(a1 + 12))
      {
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          v9 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NVSize,0\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 87, "Gnm28_01HandlePeNvBackup", 515);
          gnssOsa_PrintLog(__str, 2, 1, 0);
          v3 = *(void **)(a1 + 16);
          if (!v3)
            goto LABEL_22;
        }
        v10 = v3;
        goto LABEL_21;
      }
      if ((gnssOsa_storeBufferToNv(0, v3, *(unsigned __int16 *)(a1 + 12)) & 1) != 0)
      {
        if (g_LbsOsaTrace_Config < 4)
          goto LABEL_20;
        bzero(__str, 0x3C6uLL);
        v4 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Success NvSize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm28_01HandlePeNvBackup", *(unsigned __int16 *)(a1 + 12));
        v5 = 4;
      }
      else
      {
        if (g_LbsOsaTrace_Config < 2)
          goto LABEL_20;
        bzero(__str, 0x3C6uLL);
        v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ReqWrite,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "Gnm28_01HandlePeNvBackup", 1570, *(unsigned __int16 *)(a1 + 12));
        v5 = 2;
      }
      gnssOsa_PrintLog(__str, v5, 1, 0);
LABEL_20:
      v10 = *(void **)(a1 + 16);
      if (!v10)
      {
LABEL_22:
        *(_QWORD *)(a1 + 16) = 0;
        return 0;
      }
LABEL_21:
      free(v10);
      goto LABEL_22;
    }
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 87, "Gnm28_01HandlePeNvBackup", 513);
      v7 = 2;
      goto LABEL_13;
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 69, "Gnm28_01HandlePeNvBackup", 517);
    v7 = 1;
LABEL_13:
    gnssOsa_PrintLog(__str, v7, 1, 0);
  }
  return 0;
}

uint64_t Gnm28_11RestorePeNv(int a1)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  void *v12;
  unsigned __int16 Nv;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  size_t size;
  char __str[966];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Restore PE NV initiated\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm28_11RestorePeNv");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  v3 = (unsigned __int16 *)gnssOsa_Calloc("Gnm28_11RestorePeNv", 97, 1, 0x20uLL);
  if (!v3)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm28_11RestorePeNv", 1537);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 0;
  }
  v4 = v3;
  size = 0;
  if ((gnssOsa_getNvSize(0, &size) & 1) == 0)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v8 = 1572;
LABEL_14:
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", v7, "GNM", 87, "Gnm28_11RestorePeNv", v8);
      v9 = 2;
LABEL_17:
      gnssOsa_PrintLog(__str, v9, 1, 0);
    }
LABEL_18:
    free(v4);
    return 0;
  }
  if (!size)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Empty file\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm28_11RestorePeNv");
      v9 = 4;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (size >= 0x10000)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 87, "Gnm28_11RestorePeNv", 770);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    gnssOsa_clearNV(0);
    goto LABEL_18;
  }
  v12 = gnssOsa_Calloc("Gnm28_11RestorePeNv", 132, 1, size);
  *((_QWORD *)v4 + 2) = v12;
  if (!v12)
  {
    if (g_LbsOsaTrace_Config < 2)
      goto LABEL_18;
    bzero(__str, 0x3C6uLL);
    v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v8 = 1537;
    goto LABEL_14;
  }
  Nv = gnssOsa_readNv(0, v12, size);
  v4[6] = Nv;
  if (size != Nv)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v15 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ReqRead,%zu,Read,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNM", 87, "Gnm28_11RestorePeNv", 1571, size, v4[6]);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    v16 = (void *)*((_QWORD *)v4 + 2);
    if (v16)
      free(v16);
    goto LABEL_18;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v14 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_PE_NV_RESTORE_REQ =>GNCP NvSize,%u,SeqNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 73, "Gnm28_11RestorePeNv", v4[6], a1);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  *((_BYTE *)v4 + 24) = a1;
  AgpsSendFsmMsg(128, 132, 8654080, v4);
  return 1;
}

uint64_t Gnm28_12HandlePeNvRestoreNoAck(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  char __str[966];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_VAR_PE_NV_RESTORE_TIMER\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm28_12HandlePeNvRestoreNoAck");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config)
      return 0;
    bzero(__str, 0x3C6uLL);
    v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm28_12HandlePeNvRestoreNoAck", 517);
    v8 = 1;
LABEL_16:
    gnssOsa_PrintLog(__str, v8, 1, 0);
    return 0;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v3 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v4 = 89;
    if (!(_BYTE)g_Gnm_NVStoreCntxt)
      v4 = 78;
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TimerStart,%u,TimerStatus,%c\n", (unint64_t)v3, "GNM", 73, "Gnm28_12HandlePeNvRestoreNoAck", HIDWORD(g_Gnm_NVStoreCntxt), v4);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if ((_BYTE)g_Gnm_NVStoreCntxt)
  {
    v5 = HIDWORD(g_Gnm_NVStoreCntxt);
    if ((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v5 >= 0xFA)
    {
      LOBYTE(g_Gnm_NVStoreCntxt) = 0;
      HIDWORD(g_Gnm_NVStoreCntxt) = 0;
      if ((_BYTE)qword_2579E3FE0)
      {
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          v6 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Max PENvRestore attempts\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm28_12HandlePeNvRestoreNoAck");
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        LOBYTE(qword_2579E3FE0) = 0;
        return 0;
      }
      LOBYTE(qword_2579E3FE0) = 1;
      if (Gnm28_11RestorePeNv(1))
      {
        if (!AgpsFsmStartTimer(0x802F06u, 0xFAu))
        {
          HIDWORD(g_Gnm_NVStoreCntxt) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                         * (double)mach_continuous_time());
          LOBYTE(g_Gnm_NVStoreCntxt) = 1;
          return 0;
        }
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          v10 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 87, "Gnm28_12HandlePeNvRestoreNoAck", 1544);
          v8 = 2;
          goto LABEL_16;
        }
      }
    }
  }
  return 0;
}

uint64_t Gnm28_13HandlePeNvRestoreAck(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  char __str[966];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_PE_NV_RESTORE_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm28_13HandlePeNvRestoreAck");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config)
      return 0;
    bzero(__str, 0x3C6uLL);
    v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v8 = 517;
LABEL_17:
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", v7, "GNM", 69, "Gnm28_13HandlePeNvRestoreAck", v8);
    v9 = 1;
LABEL_18:
    gnssOsa_PrintLog(__str, v9, 1, 0);
    return 0;
  }
  if (qword_2579E3FE0 != *(unsigned __int8 *)(a1 + 13))
  {
    if (!g_LbsOsaTrace_Config)
      return 0;
    bzero(__str, 0x3C6uLL);
    v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v8 = 1028;
    goto LABEL_17;
  }
  if (AgpsFsmStopTimer(8400646) && g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 87, "Gnm28_13HandlePeNvRestoreAck", 1545);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  LOBYTE(g_Gnm_NVStoreCntxt) = 0;
  HIDWORD(g_Gnm_NVStoreCntxt) = 0;
  v4 = *(unsigned __int8 *)(a1 + 12);
  if ((v4 - 2) >= 2)
  {
    if (v4 != 1)
    {
      if (!*(_BYTE *)(a1 + 12))
      {
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          v5 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Success Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm28_13HandlePeNvRestoreAck", *(unsigned __int8 *)(a1 + 12));
          v6 = 4;
LABEL_39:
          gnssOsa_PrintLog(__str, v6, 1, 0);
        }
LABEL_40:
        LOBYTE(qword_2579E3FE0) = 0;
        return 0;
      }
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ErrCode,%hhu\n", v13);
LABEL_31:
        v9 = 2;
        goto LABEL_18;
      }
      return 0;
    }
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Fail Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "Gnm28_13HandlePeNvRestoreAck", *(unsigned __int8 *)(a1 + 12));
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    if ((gnssOsa_clearNV(0) & 1) != 0)
    {
      if (g_LbsOsaTrace_Config < 2)
        goto LABEL_40;
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: PeNv Deleted\n");
    }
    else
    {
      if (g_LbsOsaTrace_Config < 2)
        goto LABEL_40;
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n");
    }
LABEL_38:
    v6 = 2;
    goto LABEL_39;
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    v10 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Fail Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 87, "Gnm28_13HandlePeNvRestoreAck", *(unsigned __int8 *)(a1 + 12));
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  if ((_BYTE)qword_2579E3FE0)
  {
    if (g_LbsOsaTrace_Config < 2)
      goto LABEL_40;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Max PENvRestore attempts\n");
    goto LABEL_38;
  }
  LOBYTE(qword_2579E3FE0) = 1;
  if (Gnm28_11RestorePeNv(1))
  {
    if (!AgpsFsmStartTimer(0x802F06u, 0xFAu))
    {
      HIDWORD(g_Gnm_NVStoreCntxt) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                     * (double)mach_continuous_time());
      LOBYTE(g_Gnm_NVStoreCntxt) = 1;
      return 0;
    }
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n");
      goto LABEL_31;
    }
  }
  return 0;
}

double Gnm28_21InitRestorePeNv(void)
{
  double result;
  uint64_t v1;
  char __str[966];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  LOBYTE(g_Gnm_NVStoreCntxt) = 0;
  HIDWORD(g_Gnm_NVStoreCntxt) = 0;
  LOBYTE(qword_2579E3FE0) = 0;
  if (Gnm28_11RestorePeNv(0))
  {
    if (AgpsFsmStartTimer(0x802F06u, 0xFAu))
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v1 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNM", 87, "Gnm28_21InitRestorePeNv", 1544);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
    }
    else
    {
      result = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      HIDWORD(g_Gnm_NVStoreCntxt) = (unint64_t)result;
      LOBYTE(g_Gnm_NVStoreCntxt) = 1;
    }
  }
  return result;
}

uint64_t GM_Reject_Rep_SV(uint64_t result, unsigned int a2, int *a3)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  _DWORD *v7;
  int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int *v13;
  int *v14;
  unsigned __int8 *i;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned __int8 *v19;
  int *v20;
  unsigned int *v21;
  unsigned int v22;
  _DWORD v24[1];
  _BYTE v25[524];

  *(_QWORD *)&v25[508] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v4 = result;
    v5 = a2;
    v6 = (unsigned __int8 *)(result + 6);
    v7 = v24;
    v8 = a3;
    v9 = a2;
    do
    {
      *v7 = 0;
      if (Is_Legal(*(_DWORD *)(v6 - 6)) && *v8 >= 10)
      {
        v10 = *((unsigned __int16 *)v6 + 3);
        if (v10 >= 0x2710)
          v10 = 10000;
        *v7 = v10 + 1000 * (*v8 + *(v6 - 2) + *v6);
      }
      v6 += 36;
      ++v8;
      ++v7;
      --v9;
    }
    while (v9);
    v11 = 0;
    v12 = a2 - 1;
    v13 = (unsigned int *)v25;
    v14 = a3 + 1;
    for (i = (unsigned __int8 *)(v4 + 36); ; i += 36)
    {
      v16 = v4 + 36 * v11;
      v17 = *(_DWORD *)v16;
      result = Is_Legal(*(_DWORD *)v16);
      if ((_DWORD)result)
      {
        if (a3[v11] >= 10 && v11 + 1 < v5)
          break;
      }
LABEL_23:
      ++v11;
      --v12;
      ++v13;
      ++v14;
      if (v11 == v5)
        return result;
    }
    v18 = v24[v11];
    v19 = i;
    v20 = v14;
    v21 = v13;
    v22 = v12;
    while (1)
    {
      if (__PAIR64__(v19[1], *v19) == __PAIR64__(BYTE1(v17), v17))
      {
        if (v17 == 2)
        {
          if (v19[3] != *(unsigned __int8 *)(v16 + 3))
            goto LABEL_22;
        }
        else if (*(_DWORD *)v19 != v17)
        {
          goto LABEL_22;
        }
        if (*v20 >= 10)
        {
          if (v18 < *v21)
          {
            a3[v11] = 3;
            goto LABEL_23;
          }
          *v20 = 3;
        }
      }
LABEL_22:
      ++v21;
      ++v20;
      v19 += 36;
      if (!--v22)
        goto LABEL_23;
    }
  }
  return result;
}

uint64_t NK_SV_Meas_AP_Stats(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  double *v8;
  double *v9;
  _WORD *v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  double *v23;
  uint64_t v24;
  double v25;
  float64x2_t v26;
  double v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  int v42;
  double *v43;
  double *v44;
  unsigned __int8 v45;
  double v46;
  double v47;
  double *v48;
  double v49;
  double v50;
  double v51;
  unsigned __int8 v52;
  double v53;
  double v54;
  BOOL v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double *v63;
  _BYTE *v64;
  double *v65;
  double *v66;
  double *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _WORD *v71;
  double *v72;
  double v74;
  _OWORD v75[8];
  double v76[16];

  v76[13] = *(double *)MEMORY[0x24BDAC8D0];
  switch((_DWORD)a1)
  {
    case 3:
      v63 = (double *)(a4 + 52752);
      v7 = a4 + 36560;
      v8 = (double *)(a3 + 27024);
      v9 = (double *)(a3 + 27032);
      v65 = (double *)(a3 + 27040);
      v10 = (_WORD *)(a3 + 27076);
      break;
    case 2:
      v63 = (double *)(a4 + 52752);
      v7 = a4 + 21656;
      v8 = (double *)(a3 + 27000);
      v9 = (double *)(a3 + 27008);
      v65 = (double *)(a3 + 27016);
      v10 = (_WORD *)(a3 + 27074);
      break;
    case 1:
      v63 = (double *)(a4 + 52744);
      v7 = a4 + 6752;
      v8 = (double *)(a3 + 26976);
      v9 = (double *)(a3 + 26984);
      v65 = (double *)(a3 + 26992);
      v71 = (_WORD *)(a3 + 27072);
      goto LABEL_8;
    default:
      gn_report_assertion_failure((const char *)&unk_24BBF04D5);
      return 0;
  }
  v71 = v10;
LABEL_8:
  v64 = (_BYTE *)(a4 + 62039);
  if (!*(_DWORD *)(a3 + 148) || !*(_DWORD *)(a3 + 27136) || *(_BYTE *)(a3 + 241) || *v8 < 0.0 || *v9 < 0.0)
  {
    *v8 = 0.0;
    *v9 = 0.0;
  }
  v66 = v9;
  v67 = v8;
  v11 = 0;
  v69 = 0;
  v70 = 0;
  v68 = 0;
  memset(v76, 0, 104);
  *(_QWORD *)(v7 + 32) = 0;
  v72 = (double *)(a3 + 976);
  *(_QWORD *)(v7 + 16) = 0;
  v12 = 0.0;
  memset(v75, 0, sizeof(v75));
  v13 = 0.0;
  *(_QWORD *)(v7 + 40) = 0;
  do
  {
    v14 = v7 + v11;
    if (*(_BYTE *)(v7 + v11 + 312))
    {
      v74 = 0.0;
      v15 = a2 + 4 * v11;
      v17 = *(_DWORD *)(v15 + 88);
      v16 = (unsigned __int8 *)(v15 + 88);
      NK_Obs_Equ_SV(a1, *(unsigned __int8 *)(v14 + 440), v17, a4 + 56 * v11 + 52760, (uint64_t)v76, *(double *)(a4 + 1552));
      v19 = *(_DWORD *)(a3 + 20);
      v18 = *(_DWORD *)(a3 + 24);
      if (v19 == v18)
      {
LABEL_17:
        v20 = v7 + 8 * v11;
        v21 = 5304;
      }
      else
      {
        switch(v19)
        {
          case 0:
            break;
          case 1:
            if (!v18)
              goto LABEL_17;
            break;
          case 2:
            if (v18 <= 1)
              goto LABEL_17;
            break;
          case 3:
            if (v18 <= 2)
              goto LABEL_17;
            break;
          case 4:
            if (v18 - 5 >= 3)
              goto LABEL_17;
            break;
          case 5:
            if ((v18 & 0xFFFFFFFE) != 6)
              goto LABEL_17;
            break;
          case 6:
            if (v18 != 7)
              goto LABEL_17;
            break;
          default:
            goto LABEL_17;
        }
        v20 = v7 + 8 * v11;
        v21 = 7352;
      }
      v23 = (double *)(v20 + v21);
      v24 = 0;
      v25 = 0.0;
      do
      {
        v26 = vmulq_f64(*(float64x2_t *)&v76[v24], *(float64x2_t *)(a3 + 1600 + v24 * 8));
        v25 = v25 + v26.f64[0] + v26.f64[1];
        v24 += 2;
      }
      while (v24 != 12);
      v27 = *v23 - v25;
      v28 = (double *)(v7 + 8 * v11);
      v28[1607] = v27;
      invtst(v72, v76, 0xCu, v28[1335], v27, 1.0e20, &v74);
      v29 = v74;
      if (v74 <= 0.0)
        gn_report_assertion_failure("NK_SV_Meas_AP_Stats: -ve var");
      v30 = v28[1335];
      v31 = v30 + v30 - fabs(v29);
      v28[1735] = v31;
      v22 = *(_DWORD *)(v7 + 4 * v11 + 568) - 1;
      if (v22 >= 0x1D && ((_DWORD)a1 == 2 || *(_BYTE *)(a4 + v11 + 57)))
      {
        v32 = v28[1607];
        *(double *)(v7 + 40) = v31 / v30 + *(double *)(v7 + 40);
        if (!*((_BYTE *)v75 + v11))
        {
          *((_BYTE *)v75 + v11) = 1;
          v33 = *(unsigned __int8 *)(a2 + v11 + 728);
          if (v33 != 255)
            *((_BYTE *)v75 + v33) = 1;
          LOBYTE(v70) = v70 + 1;
          v34 = *v16;
          if (v34 <= 7)
          {
            if (((1 << v34) & 0xEA) != 0)
            {
              LOBYTE(v69) = v69 + 1;
            }
            else if (v34 == 2)
            {
              LOBYTE(v68) = v68 + 1;
            }
            else if (v34 == 4)
            {
              ++BYTE4(v68);
            }
          }
        }
        v12 = v12 + v32 * v32 / v30;
        v13 = v13 + 1.0 / v30;
        v35 = v16[1];
        if (v35 <= 0xD)
        {
          v36 = 1 << v35;
          if ((v36 & 0x923) != 0)
          {
            ++BYTE4(v70);
          }
          else if ((v36 & 0x2288) != 0)
          {
            ++BYTE4(v69);
          }
        }
      }
    }
    else
    {
      v22 = *(_DWORD *)(v7 + 4 * v11 + 568) - 1;
    }
    if (v22 > 0x1C)
    {
      switch((_DWORD)a1)
      {
        case 3:
          v39 = a3 + v11;
          v40 = 24640;
          break;
        case 2:
          v39 = a3 + v11;
          v40 = 24512;
          break;
        case 1:
          v39 = a3 + v11;
          v40 = 24384;
          break;
        default:
          goto LABEL_66;
      }
      *(_BYTE *)(v39 + v40) = 0;
    }
    else
    {
      *(_BYTE *)(v14 + 312) = 0;
      ++*v71;
      switch((_DWORD)a1)
      {
        case 3:
          v37 = a3 + v11;
          v38 = 24640;
          break;
        case 2:
          v37 = a3 + v11;
          v38 = 24512;
          break;
        case 1:
          v37 = a3 + v11;
          v38 = 24384;
          break;
        default:
          goto LABEL_66;
      }
      v41 = (_BYTE *)(v37 + v38);
      v42 = *v41;
      if (v42 != 255)
        *v41 = v42 + 1;
    }
LABEL_66:
    ++v11;
  }
  while (v11 != 128);
  if ((_DWORD)a1 == 1)
  {
    *v64 = v69;
    v64[5] = v68;
    v64[10] = BYTE4(v68);
    v64[15] = BYTE4(v70);
    v64[20] = BYTE4(v69);
    v44 = v66;
    v43 = v67;
  }
  else
  {
    v44 = v66;
    v43 = v67;
    if ((_DWORD)a1 == 2)
    {
      v64[1] = v69;
      v64[6] = v68;
      v64[11] = BYTE4(v68);
      v64[16] = BYTE4(v70);
      v64[21] = BYTE4(v69);
    }
    else if ((_DWORD)a1 == 3)
    {
      v64[2] = v69;
      v64[7] = v68;
      v64[12] = BYTE4(v68);
      v64[17] = BYTE4(v70);
      v64[22] = BYTE4(v69);
    }
  }
  v46 = *(double *)(v7 + 40);
  if (v46 < 1.0)
  {
    *(_QWORD *)(v7 + 32) = 0;
    v47 = *v44 * 0.98;
    *v44 = v47;
    *v43 = *v43 * dbl_24BC09FB0[*v43 > 1.0];
    v48 = v65;
    v45 = v70;
    if (v47 < 1.0)
    {
      *v43 = 0.0;
      *v44 = 0.0;
    }
    goto LABEL_106;
  }
  v49 = v12 * *(double *)(v7 + 48) / v46;
  *(double *)(v7 + 32) = v49;
  if (v49 > 3.02)
  {
    v50 = *v43;
    if (*v43 > 11.0)
    {
      if (v50 > 1.0)
      {
        if (v49 <= v50)
          v49 = *v43;
        v49 = v49 * 0.1;
      }
      goto LABEL_97;
    }
    v51 = v46 + 0.5;
    if ((int)v51 <= 4)
      v52 = (int)v51 - 1;
    else
      v52 = 4;
    v53 = F_dist[v52];
    v55 = v49 <= v53;
    v54 = fmin(v50, 4.0) * v53;
    v55 = v55 || v49 <= v54;
    if (!v55)
    {
      if (v50 > 1.0)
        v49 = v49 / v50;
LABEL_97:
      if (*(_DWORD *)(a4 + 1872) != 1 && v49 > *v63)
        *v63 = v49;
    }
  }
  if (*(_BYTE *)(a3 + 241))
  {
    *(_QWORD *)(v7 + 40) = 0;
    v48 = v65;
    v45 = v70;
  }
  else
  {
    v45 = v70;
    v56 = *v44 * 0.98;
    v57 = *(double *)(v7 + 40);
    v58 = *(double *)(v7 + 32) / (v13 / (double)v70);
    *(double *)(v7 + 16) = v58;
    v48 = v65;
    *v65 = v58 * v57 + *v65 * *v65 * v56;
    v59 = *(double *)(v7 + 32) * *(double *)(v7 + 40) + *v43 * v56;
    *v43 = v59;
    v60 = v56 + *(double *)(v7 + 40);
    *v44 = v60;
    *v43 = v59 / v60;
    *(double *)(v7 + 16) = sqrt(*(double *)(v7 + 16));
    *v65 = sqrt(*v65 / *v44);
    if (*v63 > 1.0 && *v43 > 11.0)
    {
      v61 = *v43 / *v63;
      *v43 = v61;
      if (v61 < 10.0)
        *v43 = 10.0;
    }
  }
LABEL_106:
  *(double *)(v7 + 24) = *v48;
  return v45;
}

uint64_t NK_PR_Res_ReWeight(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  double *v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  double *v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL4 v41;
  uint64_t v42;
  double *v43;
  double v44;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  double *v50;
  _BYTE *v51;
  double v52;
  BOOL v53;
  char v54;
  double v55;
  double v56;
  double v57;
  _OWORD v58[8];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a3 + 241)
    && *(_DWORD *)(a3 + 27120) <= *(unsigned __int16 *)(a3 + 16)
    && *(_DWORD *)(a4 + 1872) == 1)
  {
    v4 = *(_DWORD *)(a3 + 148);
    if (v4 >= *(_DWORD *)(a3 + 152))
      v4 = *(_DWORD *)(a3 + 152);
    if (v4 >= *(_DWORD *)(a3 + 156))
      v4 = *(_DWORD *)(a3 + 156);
    if (v4 >= 0xB)
    {
      result = 0;
      v5 = 0;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v15 = (_BYTE *)(a2 + 88);
      v16 = a2 + 728;
      v17 = (double *)(a4 + 12056);
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      do
      {
        if (*(_BYTE *)(a4 + 7064 + result))
        {
          v18 = v17[800];
          if (v18 > 0.0)
          {
            if (!*((_BYTE *)&v67 + result))
            {
              ++v5;
              *((_BYTE *)&v67 + result) = 1;
              v19 = *(unsigned __int8 *)(v16 + result);
              if (v19 != 255)
                *((_BYTE *)&v67 + v19) = 1;
            }
            v20 = *v17;
            v21 = fabs(*v17);
            if (v21 < 20.0 && !*((_BYTE *)&v59 + result))
            {
              ++v6;
              *((_BYTE *)&v59 + result) = 1;
              v22 = *(unsigned __int8 *)(v16 + result);
              if (v22 != 255)
                *((_BYTE *)&v59 + v22) = 1;
            }
            v23 = v20 * v20 / v18;
            if (v23 < 16.0)
            {
              ++v12;
              if (v23 < 9.0)
              {
                ++v13;
                if (v23 < 4.0)
                {
                  ++v14;
                  if (v23 < 1.0)
                    ++v8;
                }
              }
            }
            ++v7;
            if (v20 > 0.0)
              ++v11;
            if (*(_BYTE *)(v16 + result - 128) == 1 && *v15 != 6)
            {
              if (v21 < 10.0)
                ++v9;
              if (v20 > 25.0)
                ++v10;
            }
          }
        }
        ++result;
        v15 += 4;
        ++v17;
      }
      while (result != 128);
      if (v7 <= 0)
      {
        v25 = 0.0;
        v26 = 0.0;
        v27 = 0.0;
        v28 = 0.0;
      }
      else
      {
        result = 0x4059000000000000;
        v24 = 100.0 / (double)v7;
        v25 = v24 * (double)v8;
        v26 = v24 * (double)v14;
        v27 = v24 * (double)v13;
        v28 = v24 * (double)v12;
      }
      if (v5 >= 10
        && v6 >= 5
        && v7 >= 15
        && v11 >= 4
        && v10 <= 1
        && (v14 > 20 || v9 > 5 || v25 > 40.0 || v26 > 50.0 || v27 > 60.0 || v28 > 70.0))
      {
        v49 = 0;
        v50 = (double *)(a4 + 12056);
        v51 = (_BYTE *)(a2 + 88);
        do
        {
          if (*(_BYTE *)(a4 + 7064 + v49))
          {
            if ((v52 = *v50, *(_BYTE *)(a2 + 600 + v49) != 1)
              || *v51 == 6
              || (v52 > 0.0 ? (v53 = v9 < 6) : (v53 = 0), !v53 ? (v54 = 0) : (v54 = 1), v52 <= 20.0 && (v54 & 1) == 0))
            {
              v55 = v52 * v52;
              if (v52 * v52 > v50[800])
              {
                if (v52 <= 0.0)
                {
                  v57 = 3.0;
                  if (v52 >= -25.0)
                  {
                    v57 = 1.0;
                    if (v52 < -5.0)
                      v57 = (-5.0 - v52) * 0.1 + 1.0;
                  }
                  v56 = v55 * (v57 * v57);
                }
                else
                {
                  v56 = v50[672] * 4.0;
                  if (v55 < v56)
                    v56 = v55;
                }
                v50[672] = v56;
                *(_BYTE *)(a4 + 19480 + v49) = 1;
              }
            }
          }
          ++v49;
          ++v50;
          v51 += 4;
        }
        while (v49 != 128);
      }
      return result;
    }
  }
  if (!*(_DWORD *)(a4 + 1872) && *(_DWORD *)(a3 + 20) <= 3u && *(int *)(a4 + 20) >= 7 && *(int *)(result + 60) >= 5)
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v33 = a2 + 728;
    v34 = (double *)(a4 + 12056);
    memset(v58, 0, sizeof(v58));
    result = (uint64_t)v58;
    do
    {
      if (*(_BYTE *)(a4 + 7064 + v29) && v34[800] > 0.0)
      {
        if (!*((_BYTE *)&v67 + v29))
        {
          ++v32;
          *((_BYTE *)&v67 + v29) = 1;
          v35 = *(unsigned __int8 *)(v33 + v29);
          if (v35 != 255)
            *((_BYTE *)&v67 + v35) = 1;
        }
        v36 = fabs(*v34);
        if (v36 < 15.0 && !*((_BYTE *)&v59 + v29))
        {
          ++v31;
          *((_BYTE *)&v59 + v29) = 1;
          v37 = *(unsigned __int8 *)(v33 + v29);
          if (v37 != 255)
            *((_BYTE *)&v59 + v37) = 1;
        }
        if (v36 < 30.0 && !*((_BYTE *)v58 + v29))
        {
          ++v30;
          *((_BYTE *)v58 + v29) = 1;
          v38 = *(unsigned __int8 *)(v33 + v29);
          if (v38 != 255)
            *((_BYTE *)v58 + v38) = 1;
        }
      }
      ++v29;
      ++v34;
    }
    while (v29 != 128);
    if (v32 >= 5 && v30 >= 1)
    {
      v39 = 0;
      v41 = v32 > 7 && v30 > 3;
      v42 = a4 + 7064;
      v43 = (double *)(a4 + 12056);
      do
      {
        result = *(unsigned __int8 *)(v42 + v39);
        if (*(_BYTE *)(v42 + v39))
        {
          v44 = *v43;
          if (*v43 > 10.0 && v31 <= 11)
          {
            if (v43[672] > 100.0)
            {
              v43[672] = 100.0;
              goto LABEL_81;
            }
          }
          else if (v44 <= -10.0)
          {
            if (v44 * v44 > v43[800])
            {
              if (v41)
                v43[672] = v44 * v44;
              v48 = 3.0;
              if (v44 >= -50.0)
              {
                v48 = 1.0;
                if (v44 < -10.0)
                  v48 = (-10.0 - v44) * 0.1 + 1.0;
              }
              v47 = v43[672] * (v48 * v48);
LABEL_80:
              v43[672] = v47;
LABEL_81:
              *(_BYTE *)(a4 + 19480 + v39) = 1;
            }
          }
          else
          {
            v46 = v43[672];
            if (v46 > 400.0)
            {
              v47 = fmin(v46 * 0.25, 400.0);
              goto LABEL_80;
            }
          }
        }
        ++v39;
        ++v43;
      }
      while (v39 != 128);
    }
  }
  return result;
}

BOOL GN_ASBAS_Set_Eph_El(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  int v13;
  _BOOL8 v14;
  uint64_t v16;
  char v17;
  char v18;
  int v19;
  uint64_t i;
  uint64_t v21;
  int v22;
  int v23;
  int v24[2];
  unsigned __int16 v25;
  char v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (!Is_GN_API_Set_Allowed("GN_ASBAS_Set_Eph_El"))
    return 0;
  if (g_Logging_Cfg < 5)
    EvLog_nd("GN_ASBAS_Set_Eph_El: ", 2, v6, a1, a2);
  else
    EvLog_nd("GN_ASBAS_Set_Eph_El: ", 16, *((unsigned int *)a3 + 10), a1, a2, *a3, *((unsigned __int8 *)a3 + 2), *((unsigned int *)a3 + 1), *((unsigned int *)a3 + 2), *((unsigned int *)a3 + 3), *((unsigned int *)a3 + 4), *((unsigned int *)a3 + 5), *((unsigned int *)a3 + 6), *((unsigned int *)a3 + 7), *((unsigned int *)a3 + 8), *((unsigned int *)a3 + 9), *((unsigned int *)a3 + 10), *((unsigned int *)a3 + 11), *((unsigned __int8 *)a3 + 48));
  if (a1 <= 0x77)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: SVid = %d <%d, Out of range!");
    return 0;
  }
  if (a1 >= 0x9F)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: SVid = %d >%d, Out of range!");
    return 0;
  }
  if (*a3 >> 3 >= 0x2A3u)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: to = %d >=5400, Out of range!");
    return 0;
  }
  v7 = *((unsigned __int8 *)a3 + 2);
  if (v7 >= 0x10)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: URA = %d >15, Out of range!");
    return 0;
  }
  v8 = *((_DWORD *)a3 + 1);
  if ((v8 - 2048) <= 0xFFFFEFFF)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: agf0 = %d <-2^11 or >=2^11, Out of range!");
    return 0;
  }
  v9 = *((_DWORD *)a3 + 2);
  if (v9 != (char)v9)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: agf1 = %d <-2^7 or >=2^7, Out of range!");
    return 0;
  }
  v10 = 0;
  v11 = 1;
  do
  {
    v12 = v11;
    if ((*(_DWORD *)&a3[2 * v10 + 6] - 536870913) < 0xBFFFFFFF)
    {
      EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: pos[%d] = %d <-2^29 or >=2^29, Out of range!");
      return 0;
    }
    v11 = 0;
    v10 = 1;
  }
  while ((v12 & 1) != 0);
  v13 = *((_DWORD *)a3 + 5);
  if ((v13 - 16777217) < 0xFDFFFFFF)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: pos[2] = %d <-2^24 or >=2^24, Out of range!");
    return 0;
  }
  v16 = 0;
  v17 = 1;
  do
  {
    v18 = v17;
    if ((*(_DWORD *)&a3[2 * v16 + 12] - 65537) < 0xFFFDFFFF)
    {
      EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: vel[%d] = %d <-2^16 or >=2^16, Out of range!");
      return 0;
    }
    v17 = 0;
    v16 = 1;
  }
  while ((v18 & 1) != 0);
  v19 = *((_DWORD *)a3 + 8);
  if ((v19 - 131073) < 0xFFFBFFFF)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: vel[2] = %d <-2^17 or >=2^17, Out of range!");
    return 0;
  }
  for (i = 0; i != 3; ++i)
  {
    if ((*(_DWORD *)&a3[2 * i + 18] - 513) < 0xFFFFFBFF)
    {
      EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: acc[%d] = %d <-2^9 or >=2^9, Out of range!");
      return 0;
    }
  }
  v21 = *(_QWORD *)(p_api + 48);
  if (*(_BYTE *)(v21 + 16) && *(int *)v21 >= 3)
    v22 = (int)*(double *)(v21 + 32) + 604800 * *(__int16 *)(v21 + 28);
  else
    v22 = 0;
  v25 = *a3;
  v26 = v7;
  v27 = v8;
  v28 = v9;
  v29 = *(_QWORD *)(a3 + 6);
  v30 = v13;
  v31 = *((_QWORD *)a3 + 3);
  v32 = v19;
  v33 = *(_QWORD *)(a3 + 18);
  v34 = *((_DWORD *)a3 + 11);
  if (*((_BYTE *)a3 + 48))
    v23 = 5;
  else
    v23 = 3;
  v24[0] = v22;
  v24[1] = v23;
  v14 = SBAS_Set_StateTable(a1, a2, v24);
  if (v14)
    Debug_Log_SBA_Eph(1, a1, a2, (uint64_t)v24);
  return v14;
}

uint64_t G5K_Read_GNB_Meas(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  unint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  unsigned int v9;
  uint64_t result;
  char *v11;
  char *v12;
  char *v13;
  unsigned __int16 v14;
  char *v15;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *a1;
  if (*a1 != v3 && v4 == v2)
  {
    *a1 = v3;
    a1[1] = v3;
    v2 = v3;
    v4 = v3;
  }
  v6 = 15 * (a1[3] - v3) + (15 * (a1[3] - v3) < 0 ? 0xFuLL : 0);
  v7 = v6 >> 4;
  if (v4 >= v2)
    v2 = a1[3];
  else
    LOWORD(v2) = (_WORD)v2 - 1;
  v8 = (_WORD)v2 - (_WORD)v4;
  v9 = (unsigned __int16)(v6 >> 4);
  if (v9 < v8)
    v8 = v6 >> 4;
  result = GncP02_16GetMEDataFrmBuf(v8, v4);
  v11 = &(*a1)[result];
  *a1 = v11;
  if (v11 >= a1[3])
  {
    v13 = a1[1];
    v12 = a1[2];
    if (v13 != v12)
    {
      *a1 = v12;
      v14 = ~(_WORD)v12 + (_WORD)v13;
      if (v9 < v14)
        v14 = v7;
      result = GncP02_16GetMEDataFrmBuf(v14, v12);
      v15 = &(*a1)[result];
      *a1 = v15;
      if (v15 >= a1[3])
        *a1 = a1[2];
    }
  }
  return result;
}

unint64_t G5K_ME_Decode_Meas(unint64_t result, char *a2)
{
  char *v3;
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned __int16 v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  uint64_t v25;
  char *v26;
  int v27;
  char *v28;
  char **v29;
  char *v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  BOOL v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  double v51;
  double v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char *v62;
  char v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  char *v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  char *v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int16x8_t v81;
  int v82;
  __int128 v83;
  int v84;
  int v85;
  char v86;
  int v87;
  int v88;
  int v89;
  char v90;
  int v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  unsigned __int8 *v97;
  int v98;
  char v99;
  int v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  int *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  unsigned int v112;
  double *v113;
  uint64_t v114;
  char v115;
  int v116;
  char *v117;
  char v118;
  char v119;
  int v120;
  BOOL v122;
  __int128 v123;
  __int128 v124;
  char v125;
  __int128 v126;
  int v127;
  uint8x8_t v128;
  int v132;
  __int128 v133;
  uint64_t v134;
  char v135;
  char *v136;
  _BYTE *v137;
  char *v138;
  unsigned int v139;
  unsigned __int16 *v140;
  int v141;
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  _QWORD *v146;
  char v147;
  char v148;
  int16x4_t v149;
  int v150;
  unsigned int v151;
  int v152;
  unsigned int v153;
  int v154;
  unsigned int v155;
  char *v156;
  unsigned int v157;
  double v158;
  double v159;
  int v160;
  float64x2_t v161;
  float64x2_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  double v166;
  uint64_t v167;
  double v168;
  uint64_t v169;
  char *v170;
  double v171;
  double v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  int v178;
  __int16 v179;
  __int16 v180;
  __int16 v181;
  int v182;
  int v183;
  int v184;
  __int16 v185;
  char v186;
  __int16 v187;
  char v188;
  __int16 v189;
  int v190;
  int v191;
  int v192;
  __int16 v193;
  __int16 v194;
  __int16 v195;
  __int16 v196;
  __int16 v197;
  __int16 v198;
  __int16 v199;
  __int16 v200;
  __int16 v201;
  double *v202;
  unsigned __int16 v203;
  uint64_t v204;
  char *v205;
  int v206;
  int v207;
  unsigned __int16 v208;
  char *v209;
  char *v210;
  int v211;
  int v212;
  int v213;
  char v214;
  float64x2_t v215;
  int64x2_t v216;
  int64x2_t v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  int v225;
  unsigned __int8 *v226;
  _OWORD v227[8];
  uint64_t v228;

  v228 = *MEMORY[0x24BDAC8D0];
  v3 = (char *)*((_QWORD *)a2 + 48);
  v4 = *(unsigned __int8 **)(result + 8);
  if (v4 == *(unsigned __int8 **)result)
    goto LABEL_300;
  v5 = (unsigned __int8 **)result;
  v6 = a2 + 28224;
  v220 = a2 + 12336;
  v7 = a2 + 381;
  v8 = a2 + 1;
  v223 = a2 + 560;
  v224 = a2 + 402;
  v218 = a2 + 7756;
  v9 = a2 + 7728;
  v221 = a2 + 3;
  v219 = a2 + 12348;
  v217 = vdupq_n_s64(0x40F5180000000000uLL);
  v216 = vdupq_n_s64(0x4122750000000000uLL);
  v222 = a2 + 7728;
  while (1)
  {
    v12 = *v4;
    v10 = v4 + 1;
    v11 = v12;
    v5[1] = v10;
    if (v10 >= v5[3])
      v5[1] = v5[2];
    if (v3 < a2 || v3 >= v7)
    {
      result = (unint64_t)EvCrt_v("G5K_ME_Decode_Meas: Rec Buff out of bounds");
      a2[392] = 0;
      v3 = a2;
    }
    if (v11 != 123 && v11 != 36)
      break;
    a2[392] = 1;
    *a2 = v11;
    v3 = v8;
LABEL_11:
    v4 = v5[1];
    if (v4 == *v5)
      goto LABEL_300;
  }
  if (!a2[392])
    goto LABEL_11;
  *v3++ = v11;
  if (v11 != 10)
    goto LABEL_11;
  *v3 = 0;
  if (a2[392])
  {
    result = STEU_Checksum_OK(a2);
    if ((_DWORD)result)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 1;
      v18 = 1;
      switch(*v8)
      {
        case 'B':
          v14 = 0;
          v16 = 0;
          v17 = 0;
          v18 = 9;
          v15 = 1;
          goto LABEL_37;
        case 'C':
          v14 = 0;
          v15 = 0;
          v16 = 0;
          v17 = 0;
          v18 = 6;
          goto LABEL_37;
        case 'F':
          v14 = 0;
          v15 = 0;
          v16 = 0;
          v17 = 0;
          v18 = 5;
          goto LABEL_37;
        case 'G':
          v14 = 0;
          v15 = 0;
          v16 = 0;
          v17 = 0;
          v18 = 4;
          goto LABEL_37;
        case 'H':
          v21 = a2[405];
          if (a2[403] | v21)
          {
            v22 = a2[404] - v21;
            v23 = *((_WORD *)a2 + 200) + v22;
            *((_WORD *)a2 + 200) = v23;
            v24 = *((_WORD *)a2 + 198) + 1;
            *((_WORD *)a2 + 198) = v24;
            EvCrt_nd("G5K_ME_InComplete_Epoch_Check: Missed M & T", 3, v13, v22, v23, v24);
            *(_WORD *)(a2 + 403) = 0;
            a2[405] = 0;
            bzero(v223, 0x1C00uLL);
            v25 = -4608;
            do
            {
              v26 = &v9[v25];
              *((_OWORD *)v26 + 289) = 0uLL;
              *((_OWORD *)v26 + 288) = 0uLL;
              v9[v25 + 4640] = 0;
              v25 += 36;
            }
            while (v25);
            result = (unint64_t)EvCrt_v("G5K_ME_InComplete_Epoch_Check:  Flushing M");
          }
          v15 = 0;
          v16 = 0;
          v17 = 0;
          v18 = 3;
          v14 = 1;
          goto LABEL_37;
        case 'I':
          v14 = 0;
          v15 = 0;
          v16 = 0;
          v17 = 0;
          v18 = 7;
          goto LABEL_37;
        case 'M':
          goto LABEL_37;
        case 'N':
          v14 = 0;
          v15 = 0;
          v16 = 0;
          v17 = 0;
          v18 = 8;
          goto LABEL_37;
        case 'T':
          v14 = 0;
          v15 = 0;
          v17 = 0;
          v18 = 2;
          v16 = 1;
          goto LABEL_37;
        case 'W':
          v14 = 0;
          v15 = 0;
          v16 = 0;
          v17 = 0;
          v18 = 10;
LABEL_37:
          memset(v227, 0, sizeof(v227));
          v27 = *a2;
          if (v27 != 123)
          {
            v28 = "G5K_ME_Decode: Incorrect 1st ch";
            goto LABEL_41;
          }
          v27 = *v8;
          if ((v27 - 123) <= 0xFFFFFFC5)
          {
            v28 = "G5K_ME_Decode: Incorrect ID";
LABEL_41:
            result = (unint64_t)EvCrt_d(v28, v27);
            goto LABEL_42;
          }
          v54 = a2[2];
          if (v54 == 125)
          {
            v28 = "G5K_ME_Decode: Incorrect start";
            v27 = 125;
            goto LABEL_41;
          }
          v205 = v6;
          v55 = 0;
          v56 = 0;
          LODWORD(v226) = 0;
          v57 = v221;
          v209 = v8;
          v210 = v7;
          v206 = v17;
          break;
        default:
          result = (unint64_t)EvLog_v("ME_Get_Msg_Type: Unknown message type:  {%c", *v8);
          goto LABEL_43;
      }
      while (1)
      {
        if ((v54 - 112) <= 0xBFu)
        {
          v67 = v54;
          v68 = "G5K_ME_Decode: Illegal ch";
LABEL_115:
          result = (unint64_t)EvCrt_d(v68, v67);
          goto LABEL_117;
        }
        *((_BYTE *)&v226 + v55) = v54 - 48;
        v54 = *v57;
        if (v54 == 125)
        {
          if (v55 != 3)
          {
            v211 = v56;
            v58 = v16;
            v56 = v15;
            v59 = v14;
            v60 = v18;
            gn_report_assertion_failure("G5K_ME_Decode: Input not N x 4 bytes");
            result = (unint64_t)memset((char *)&v226 + v55 + 1, 32, (2 - v55) + 1);
            v18 = v60;
            v14 = v59;
            v15 = v56;
            v16 = v58;
            v17 = v206;
            v8 = v209;
            v7 = v210;
            LODWORD(v56) = v211;
          }
        }
        else if (v55 != 3)
        {
          ++v55;
          goto LABEL_108;
        }
        if (v56 >= 0x7D)
        {
          result = (unint64_t)EvCrt_v("G5K_ME_Decode: Input longer than buffer. Received  %d  Max %d bytes");
LABEL_117:
          v6 = v205;
          goto LABEL_42;
        }
        v55 = 0;
        v61 = BYTE1(v226);
        v62 = (char *)v227 + v56;
        *v62 = (BYTE1(v226) >> 4) + 4 * (_BYTE)v226;
        v63 = BYTE2(v226);
        v62[1] = (BYTE2(v226) >> 2) + 16 * v61;
        v62[2] = BYTE3(v226) + (v63 << 6);
        v56 = (v56 + 3);
        v54 = *v57;
LABEL_108:
        ++v57;
        if (v54 == 125)
        {
          v64 = v18 - 1;
          if (!(_DWORD)v14)
          {
            v6 = v205;
            goto LABEL_127;
          }
          v6 = v205;
          if ((int)v56 > 26)
          {
            if ((_DWORD)v56 == 27)
            {
              v65 = 27;
              v66 = -27;
              goto LABEL_124;
            }
            if ((_DWORD)v56 == 30)
            {
              v65 = 29;
              v66 = -29;
              goto LABEL_124;
            }
          }
          else
          {
            if ((_DWORD)v56 == 15)
            {
              v65 = 14;
              v66 = -14;
              goto LABEL_124;
            }
            if ((_DWORD)v56 == 21)
            {
              v65 = 19;
              v66 = -19;
LABEL_124:
              v69 = v66 + G5K_CompMsgSize[(v18 - 1)];
              if (!v69 || (v56 = (v69 + v65), v56 > 0x80))
              {
                v56 = v65;
                goto LABEL_152;
              }
              do
              {
                *((_BYTE *)v227 + v65) = 0;
                LODWORD(v65) = v65 + 1;
                --v69;
              }
              while (v69);
LABEL_127:
              if ((_DWORD)v15)
              {
                if ((_DWORD)v56 == 21)
                {
                  v56 = G5K_CompMsgSize[(v18 - 1)];
                  v70 = 21;
                  do
                    *((_BYTE *)v227 + v70++) = 0;
                  while ((_DWORD)v56 != v70);
                  goto LABEL_131;
                }
              }
              else
              {
LABEL_131:
                if ((_DWORD)v16)
                {
                  v71 = -15;
                  switch((int)v56)
                  {
                    case 15:
                      goto LABEL_139;
                    case 16:
                    case 17:
                    case 19:
                    case 20:
                    case 22:
                    case 23:
                      goto LABEL_152;
                    case 18:
                      v71 = -18;
                      goto LABEL_139;
                    case 21:
                      v56 = 20;
                      v71 = -20;
                      goto LABEL_139;
                    case 24:
                      v56 = 22;
                      v71 = -22;
                      goto LABEL_139;
                    default:
                      if ((_DWORD)v56 != 63)
                        goto LABEL_152;
                      v71 = -63;
LABEL_139:
                      v72 = v71 + G5K_CompMsgSize[(v18 - 1)];
                      if (!v72 || (v72 + v56) > 0x80)
                        goto LABEL_152;
                      do
                      {
                        *((_BYTE *)v227 + v56) = 0;
                        v56 = (v56 + 1);
                        --v72;
                      }
                      while (v72);
                      break;
                  }
                }
                if (v17)
                {
                  switch((_DWORD)v56)
                  {
                    case '6':
                      v73 = -54;
                      break;
                    case 'E':
                      v56 = 68;
                      v73 = -68;
                      break;
                    case 'B':
                      v56 = 64;
                      v73 = -64;
                      break;
                    default:
                      goto LABEL_152;
                  }
                  v74 = v73 + G5K_CompMsgSize[(v18 - 1)];
                  if (v74 && (v74 + v56) <= 0x80)
                  {
                    do
                    {
                      *((_BYTE *)v227 + v56) = 0;
                      v56 = (v56 + 1);
                      --v74;
                    }
                    while (v74);
                  }
                }
              }
            }
          }
LABEL_152:
          v75 = G5K_CompMsgSize[(v18 - 1)];
          if ((_DWORD)v56 == (_DWORD)v75
            || (v56 >= v75
              ? (v76 = "G5K_ME_Decode: Warning: {%c too long, %d < %d ")
              : (v76 = "G5K_ME_Decode: ERROR: {%c too short, %d < %d "),
                v212 = v18 - 1,
                result = (unint64_t)EvCrt_v(v76, G5K_CompMsgType[(v18 - 1)], v56, v75),
                v64 = v212,
                v56 >= v75))
          {
            if ((_DWORD)v56)
            {
              switch(v64)
              {
                case 0:
                  v77 = SLOBYTE(v227[0]);
                  v78 = LOBYTE(v227[0]);
                  ++a2[405];
                  if (v77 < 0)
                  {
                    result = (unint64_t)EvCrt_v("ME_dec_M: Warning: Unsupported channel index %d >= %d", v78, 128);
                    v6 = v205;
                    goto LABEL_42;
                  }
                  v79 = BYTE1(v227[0]) >> 4;
                  v80 = BYTE1(v227[0]) & 0xF;
                  v225 = 0;
                  v213 = BYTE2(v227[0]);
                  result = Decode_SVid_STE(BYTE2(v227[0]), v79, &v225);
                  v82 = v225;
                  v83 = 0uLL;
                  if (v80 == 15 && !v225 && !(_DWORD)result)
                    goto LABEL_117;
                  if (!(v225 | result))
                  {
                    result = (unint64_t)EvLog_v("ME_dec_M: Not Supported: SVID %d Const %d Sig %d", v213, v79, v80);
                    goto LABEL_117;
                  }
                  if (v225)
                  {
                    if (v80 == 15)
                    {
LABEL_283:
                      result = (unint64_t)EvCrt_v("G5K_ME_dec_M: Illegal STE SV:  ID %d  Const %d  Sig %d", v213, v79, v80);
                      v163 = &a2[56 * v78];
                      *((_QWORD *)v163 + 76) = 0;
                      *((_OWORD *)v163 + 36) = 0u;
                      *((_OWORD *)v163 + 37) = 0u;
                      *((_OWORD *)v163 + 35) = 0u;
                      v164 = &a2[36 * v78];
                      *((_OWORD *)v164 + 483) = 0u;
                      *((_OWORD *)v164 + 484) = 0u;
                      v164[7760] = 0;
                      goto LABEL_117;
                    }
                  }
                  else if (v80 != 15 || (_DWORD)result)
                  {
                    goto LABEL_283;
                  }
                  v141 = v77;
                  v204 = *((_QWORD *)&xmmword_257A47B18 + 1);
                  v142 = 9 * v77;
                  v143 = &a2[36 * v77];
                  v144 = v143 + 7728;
                  *(_QWORD *)(v143 + 7732) = 0;
                  *(_QWORD *)(v143 + 7740) = 0;
                  *(_QWORD *)(v143 + 7753) = 0;
                  v145 = &a2[56 * v77];
                  v146 = v145 + 560;
                  *(_QWORD *)(v143 + 7748) = 0;
                  *((_OWORD *)v145 + 35) = 0uLL;
                  *((_OWORD *)v145 + 36) = 0uLL;
                  *((_OWORD *)v145 + 37) = 0uLL;
                  *((_QWORD *)v145 + 76) = 0;
                  v143[7728] = v82;
                  v143[7729] = v80;
                  if (v82 == 2)
                    v147 = 0;
                  else
                    v147 = result;
                  if (v82 == 2)
                    v148 = result;
                  else
                    v148 = 0;
                  v143[7730] = v147;
                  v143[7731] = v148;
                  LODWORD(v83) = *(_DWORD *)((char *)v227 + 3);
                  v149 = (int16x4_t)vmovl_u8(*(uint8x8_t *)&v83).u64[0];
                  *(int16x4_t *)v81.i8 = vrev32_s16(v149);
                  v81.i32[0] = v149.i32[0];
                  *((_DWORD *)v143 + 1933) = vmovn_s16(v81).u32[0];
                  *((_WORD *)v143 + 3868) = *(_WORD *)((char *)v227 + 7);
                  v150 = HIBYTE(v227[0]);
                  v151 = *(_DWORD *)((char *)v227 + 9);
                  v152 = *(unsigned __int16 *)((char *)v227 + 13);
                  v153 = DWORD1(v227[1]);
                  *((_DWORD *)v145 + 143) = v227[1];
                  *((_WORD *)v143 + 3872) = WORD5(v227[1]);
                  *((_WORD *)v143 + 3869) = HIWORD(v227[1]);
                  *((_DWORD *)v143 + 1935) = v227[2];
                  *((_WORD *)v145 + 301) = WORD3(v227[2]);
                  v145[604] = BYTE8(v227[2]);
                  *(_DWORD *)(v145 + 598) = *(_DWORD *)((char *)&v227[2] + 9);
                  v145[605] = BYTE13(v227[2]);
                  v208 = WORD4(v227[1]);
                  v143[7750] = BYTE7(v227[3]);
                  *((_WORD *)v143 + 3874) = WORD4(v227[3]);
                  *((_WORD *)v145 + 296) = WORD5(v227[3]);
                  v154 = v227[4];
                  *(_DWORD *)(v145 + 594) = HIDWORD(v227[3]);
                  v155 = BYTE6(v227[3]);
                  *((_DWORD *)v145 + 144) = v154;
                  v143[7751] = BYTE4(v227[4]);
                  *((_DWORD *)v143 + 1938) = *(_DWORD *)((char *)&v227[4] + 5);
                  v156 = &v218[4 * v142];
                  *(_DWORD *)v156 = *(_DWORD *)((char *)&v227[4] + 9);
                  v156[4] = BYTE13(v227[4]);
                  v157 = v152 | (v150 << 16);
                  v143[7746] = v155 >> 4;
                  v143[7747] = v155 & 0xF;
                  *(double *)&v226 = 0.0;
                  if (!(v151 | v157))
                  {
                    *v146 = 0;
                    *(_WORD *)&a2[56 * v141 + 568] = 0;
                    goto LABEL_296;
                  }
                  v158 = (double)v151 * 0.001 + (double)v157 * 0.0000000596046448 * 0.001;
                  v202 = (double *)&a2[56 * v141 + 608];
                  v215.f64[0] = v158;
                  *v202 = v158;
                  if (v82 == 2)
                  {
                    result = API_Get_UTC_Cor(1, (double *)&v226);
                    *v205 = result;
                    if (*(double *)&v226 <= 0.0)
                      v159 = -0.5;
                    else
                      v159 = 0.5;
                    v160 = (int)(*(double *)&v226 + v159);
                    if (*(double *)&v226 + v159 < -2147483650.0)
                      v160 = 0x80000000;
                    if (*(double *)&v226 + v159 > 2147483650.0)
                      v160 = 0x7FFFFFFF;
                    *(double *)&v226 = (double)v160;
                    v205[1] = v160;
                    v161.f64[0] = *v202;
                    v161.f64[1] = v215.f64[0] + -10800.0 + (double)v160;
                    if (v80 == 4)
                      v161 = vaddq_f64(v161, (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)(v204 + 8 * v144[3] + 1904) * 0.00000000333564095), 0));
                    v162 = (float64x2_t)v217;
                    goto LABEL_289;
                  }
                  if (v82 == 4)
                  {
                    v161.f64[0] = (double)v151 * 0.001 + (double)v157 * 0.0000000596046448 * 0.001;
                    v161.f64[1] = v158 + 14.0;
                    if (v80 == 12)
                      v161 = vaddq_f64(v161, (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)(v204 + 1968) * 0.00000000333564095), 0));
                    v162 = (float64x2_t)v216;
LABEL_289:
                    v215 = vmlsq_f64(v161, v162, vrndmq_f64(vdivq_f64(v161, v162)));
                    *v202 = v215.f64[0];
                    v158 = v215.f64[1];
                  }
                  if (((1 << v80) & 0xDD77) == 0)
                  {
                    v172 = *(double *)(v204 + 1976) * 0.00000000333564095;
                    v158 = v158 + v172 - floor((v158 + v172) / 604800.0) * 604800.0;
                    *v202 = v215.f64[0] + v172 - floor((v215.f64[0] + v172) / 604800.0) * 604800.0;
                  }
                  v165 = (int)(v158 * 0.666666667);
                  *(_DWORD *)v146 = v165;
                  v166 = v158 + (double)(int)v165 * -1.5;
                  v167 = (int)(v166 * 1000.0);
                  v168 = v166 + (double)v167 * -0.001;
                  v169 = (int)(v168 * 1023000.0);
                  v170 = &a2[56 * v141];
                  v171 = (v168 + (double)v169 * -0.000000977517107) * 1023000.0 * 10000.0;
                  *((_DWORD *)v170 + 141) = v169 - v167 + ((_DWORD)v167 << 10);
                  *((_WORD *)v170 + 284) = (109951163 * (unint64_t)((int)v171 << 12)) >> 36;
                  if ((int)v165 <= 403199
                    && v167 <= 0x5DB
                    && v169 <= 0x3FE
                    && (int)v171 >> 4 < 0x271)
                  {
LABEL_296:
                    *(double *)&a2[56 * v141 + 584] = (double)v153 + (double)v208 * 0.0000152587891;
                    goto LABEL_117;
                  }
                  result = (unint64_t)EvLog_nd("G5K_ME_dec_M: Code TOT out of range ", 4, v13, v165, v167, v169, (int)v171);
                  break;
                case 1:
                  v84 = v227[0];
                  v85 = DWORD1(v227[0]);
                  *((_DWORD *)a2 + 109) = v227[0];
                  *((_DWORD *)a2 + 110) = v85;
                  *((_DWORD *)a2 + 111) = WORD4(v227[0]);
                  *((_DWORD *)a2 + 112) = 8 * *(_DWORD *)((char *)v227 + 10);
                  v86 = BYTE14(v227[0]);
                  if (BYTE14(v227[0]) > 7u)
                    v86 = -1;
                  a2[452] = v86;
                  v203 = *(_WORD *)((char *)v227 + 15);
                  v188 = BYTE1(v227[1]);
                  v201 = WORD1(v227[1]);
                  v214 = BYTE4(v227[1]);
                  v207 = SBYTE5(v227[1]);
                  v200 = WORD3(v227[1]);
                  v199 = WORD4(v227[1]);
                  v197 = WORD6(v227[1]);
                  v198 = WORD5(v227[1]);
                  v195 = v227[2];
                  v196 = HIWORD(v227[1]);
                  v193 = WORD2(v227[2]);
                  v194 = WORD1(v227[2]);
                  v191 = BYTE7(v227[2]);
                  v192 = BYTE6(v227[2]);
                  v183 = BYTE10(v227[2]);
                  v184 = BYTE9(v227[2]);
                  v182 = BYTE11(v227[2]);
                  v189 = WORD6(v227[2]);
                  v190 = BYTE8(v227[2]);
                  v177 = HIBYTE(v227[2]);
                  v178 = BYTE14(v227[2]);
                  v176 = LOBYTE(v227[3]);
                  v87 = BYTE1(v227[3]);
                  v88 = BYTE2(v227[3]);
                  v89 = BYTE3(v227[3]);
                  v186 = BYTE6(v227[3]);
                  v187 = WORD2(v227[3]);
                  v185 = *(_WORD *)((char *)&v227[3] + 7);
                  *((_DWORD *)a2 + 118) = LOWORD(v227[4]) | (BYTE2(v227[4]) << 16);
                  v180 = *(_WORD *)((char *)&v227[3] + 11);
                  v181 = *(_WORD *)((char *)&v227[3] + 9);
                  v179 = *(_WORD *)((char *)&v227[3] + 13);
                  v90 = HIBYTE(v227[3]);
                  if (a2[403] && v84 == *((_DWORD *)a2 + 130) && (v91 = *((_DWORD *)a2 + 131)) != 0)
                  {
                    *((_DWORD *)a2 + 114) = v91;
                    v92 = *((_QWORD *)a2 + 66);
                  }
                  else
                  {
                    v111 = mach_continuous_time();
                    v92 = 0;
                    *((_DWORD *)a2 + 114) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v111);
                  }
                  *((_QWORD *)a2 + 58) = v92;
                  *((_DWORD *)a2 + 126) = 0;
                  a2[508] = 0;
                  a2[402] = 1;
                  v112 = a2[452];
                  if (v112 != 255 && !a2[453])
                  {
                    API_Set_Inter_Chan_Bias_Model(v112);
                    a2[453] = 1;
                  }
                  v113 = *(double **)(p_api + 72);
                  v113[9] = (double)v188 + (double)v90 * 0.0078125;
                  v113[10] = (double)v200 * 0.00390625;
                  v113[11] = (double)v199 * 0.00390625;
                  v113[12] = (double)v198 * 0.00390625;
                  v113[13] = (double)v197 * 0.00390625;
                  v113[14] = (double)v201 * 0.00390625;
                  v113[15] = (double)v196 * 0.00390625;
                  v113[16] = (double)v195 * 0.00390625;
                  v113[17] = (double)v194 * 0.00390625;
                  v113[18] = (double)v193 * 0.00390625;
                  v113[19] = (double)(((v192 << 8) | (v191 << 16) | (v190 << 24)) >> 8) * 0.125;
                  v113[20] = (double)(((v184 << 8) | (v183 << 16) | (v182 << 24)) >> 8) * 0.125;
                  v113[21] = (double)v189 * 0.125;
                  v113[22] = (double)(((v178 << 8) | (v177 << 16) | (v176 << 24)) >> 8) * 0.125;
                  v113[23] = (double)(((v87 << 8) | (v88 << 16) | (v89 << 24)) >> 8) * 0.125;
                  result = API_Set_TSX_ClkCorr_Params((double)v187 * 0.125, (double)v186 * 0.125, v203);
                  v114 = *(_QWORD *)(p_api + 72);
                  *(double *)(v114 + 192) = (double)v185 * 0.125;
                  *(double *)(v114 + 200) = (double)v181 * 0.125;
                  *(double *)(v114 + 208) = (double)v180 * 0.125;
                  *(double *)(v114 + 216) = (double)v179 * 0.125;
                  v115 = v214;
                  if (v207 <= 0)
                    v115 = 0;
                  *(_BYTE *)(v114 + 242) = v115;
                  *(_BYTE *)(v114 + 243) = v207 & ~(v207 >> 31);
                  goto LABEL_117;
                case 2:
                  a2[404] = v227[0];
                  *((_DWORD *)a2 + 130) = *(_DWORD *)((char *)v227 + 1);
                  *((_WORD *)a2 + 268) = *(_WORD *)((char *)v227 + 5);
                  *((_WORD *)a2 + 270) = *(_WORD *)((char *)v227 + 7);
                  a2[544] = BYTE9(v227[0]);
                  *((_WORD *)a2 + 269) = WORD5(v227[0]);
                  *(_WORD *)(a2 + 545) = WORD6(v227[0]);
                  v93 = BYTE14(v227[0]);
                  a2[547] = BYTE14(v227[0]);
                  v94 = HIBYTE(v227[0]);
                  a2[548] = HIBYTE(v227[0]);
                  v95 = LOBYTE(v227[1]);
                  a2[549] = v227[1];
                  v96 = BYTE1(v227[1]);
                  a2[551] = BYTE1(v227[1]);
                  *(double *)&v226 = COERCE_DOUBLE((_OWORD *)((char *)&v227[1] + 3));
                  *((_QWORD *)a2 + 66) = ByteS_Ext_8(&v226);
                  v97 = v226;
                  *((_WORD *)a2 + 277) = *(_WORD *)v226;
                  *((_WORD *)a2 + 271) = *((_WORD *)v97 + 1);
                  v98 = v97[4];
                  a2[550] = v98;
                  a2[552] = v97[5];
                  v99 = v97[6];
                  v226 = v97 + 6;
                  a2[553] = v99;
                  a2[547] = (v93 + 8) >> 4;
                  a2[548] = (v94 + 8) >> 4;
                  a2[549] = (v95 + 8) >> 4;
                  a2[550] = (v98 + 8) >> 4;
                  a2[551] = (v96 + 8) >> 4;
                  LODWORD(v97) = g_GncPMeData;
                  *((_DWORD *)a2 + 131) = g_GncPMeData;
                  if (!(_DWORD)v97)
                    *((_DWORD *)a2 + 131) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                             * (double)mach_continuous_time());
                  result = API_Get_TM_FSP_OS_Time_ms_for_TTick(*((_DWORD *)a2 + 130));
                  v100 = *((_DWORD *)a2 + 131);
                  v6 = v205;
                  if ((_DWORD)result)
                  {
                    v101 = result;
                    v102 = (int)result - v100 >= 0 ? result - v100 : v100 - (int)result;
                    if (v102 >> 3 <= 0x270)
                    {
                      if (g_Logging_Cfg >= 7)
                        result = (unint64_t)EvLog_v("TM_FSP: Replacing %u with %u delta %d", v100, result, (int)result - v100);
                      *((_DWORD *)a2 + 131) = v101;
                      v100 = v101;
                    }
                  }
                  a2[403] = 1;
                  *((_DWORD *)v205 + 2) = v100;
                  goto LABEL_42;
                case 3:
                  v103 = 0;
                  v104 = (int *)v219;
                  while (1)
                  {
                    v105 = &a2[124 * v103 + 12456];
                    if (!*v105)
                      break;
                    ++v103;
                    v104 += 31;
                    if (v103 == 128)
                    {
                      result = (unint64_t)EvCrt_v("G5K_ME_dec_G: No empty slots!", v173, v174, v175);
                      goto LABEL_117;
                    }
                  }
                  LODWORD(v226) = 0;
                  v116 = v227[0] & 0xF;
                  result = Decode_SVid_STE(BYTE1(v227[0]), LOBYTE(v227[0]) >> 4, (int *)&v226);
                  if ((_DWORD)v226 == 1 && (int)result >= 1 && (int)result < 33
                    || (_DWORD)v226 == 5 && (int)result >= 193 && (int)result < 203)
                  {
                    v117 = &a2[124 * v103 + 12336];
                    *v117 = (char)v226;
                    v117[1] = v116;
                    v117[2] = result;
                    v117[3] = 0;
                    if (v116)
                    {
                      v68 = "ME_dec_G: Illegal GPS/QZSS Signal ";
                      v67 = v116;
                      goto LABEL_115;
                    }
                    v134 = 0;
                    v135 = 0;
                    v136 = &a2[124 * v103];
                    v137 = v136 + 12340;
                    v138 = v136 + 12336;
                    v136[12341] = result;
                    v139 = WORD2(v227[0]);
                    *((_WORD *)v138 + 4) = WORD2(v227[0]);
                    v140 = (unsigned __int16 *)v227 + 3;
                    do
                    {
                      *v104++ = *v140 | (*((unsigned __int8 *)v140 + 2) << 16);
                      v135 += ((v139 >> v134++) & 1) == 0;
                      v140 = (unsigned __int16 *)((char *)v140 + 3);
                    }
                    while (v134 != 10);
                    v137[2] = v135;
                    *v137 = 1;
                    ++a2[409];
                    *v105 = 1;
                  }
                  else
                  {
                    result = (unint64_t)EvCrt_v("ME_dec_G: Illegal GPS/QZSS STE SV:  ID %d  Const %d  Sig %d");
                  }
                  goto LABEL_117;
                case 4:
                  v106 = 128;
                  v107 = v220;
                  while (v107[120])
                  {
                    v107 += 124;
                    if (!--v106)
                    {
                      result = (unint64_t)EvCrt_v("G5K_ME_dec_F: No empty slots!");
                      goto LABEL_42;
                    }
                  }
                  LODWORD(v226) = 0;
                  v118 = v227[0] & 0xF;
                  result = Decode_SVid_STE(BYTE1(v227[0]), LOBYTE(v227[0]) >> 4, (int *)&v226);
                  if ((_DWORD)v226 != 2)
                  {
                    result = (unint64_t)EvCrt_v("ME_dec_F: Illegal F STE SV:  ID %d  Const %d  Sig %d");
                    goto LABEL_42;
                  }
                  *v107 = 2;
                  v107[1] = v118;
                  v107[2] = 0;
                  v107[3] = result;
                  v107[5] = result;
                  v45 = BYTE2(v227[0]) == 0;
                  v107[6] = BYTE2(v227[0]) != 0;
                  v119 = BYTE3(v227[0]);
                  if (v45)
                    v119 = -1;
                  v107[7] = v119;
                  *((_QWORD *)v107 + 1) = *(_QWORD *)((char *)v227 + 5);
                  *((_DWORD *)v107 + 4) = *(_DWORD *)((char *)v227 + 13);
                  v107[4] = 1;
                  ++a2[413];
                  goto LABEL_251;
                case 5:
                  v108 = 128;
                  v107 = v220;
                  while (v107[120])
                  {
                    v107 += 124;
                    if (!--v108)
                    {
                      result = (unint64_t)EvCrt_v("G5K_ME_dec_C: No empty slots!");
                      goto LABEL_42;
                    }
                  }
                  LODWORD(v226) = 0;
                  v120 = v227[0] & 0xF;
                  result = Decode_SVid_STE(BYTE1(v227[0]), LOBYTE(v227[0]) >> 4, (int *)&v226);
                  v122 = v120 != 11 || (_DWORD)v226 != 4 || (int)result < 1;
                  if (!v122 && (int)result < 64)
                  {
                    v123 = *(_OWORD *)((char *)v227 + 4);
                    *(_OWORD *)(v107 + 24) = *(_OWORD *)((char *)&v227[1] + 4);
                    v124 = *(_OWORD *)((char *)&v227[3] + 4);
                    *(_OWORD *)(v107 + 40) = *(_OWORD *)((char *)&v227[2] + 4);
                    *(_WORD *)v107 = 2820;
                    v107[2] = result;
                    v107[3] = 0;
                    v107[5] = result;
                    *((_WORD *)v107 + 3) = WORD1(v227[0]);
                    *(_OWORD *)(v107 + 56) = v124;
                    *(_OWORD *)(v107 + 67) = *(_OWORD *)((char *)&v227[3] + 15);
                    *(_OWORD *)(v107 + 8) = v123;
                    v125 = HIBYTE(v227[6]);
                    v126 = *(_OWORD *)((char *)&v227[5] + 15);
                    *(_OWORD *)(v107 + 83) = *(_OWORD *)((char *)&v227[4] + 15);
                    v107[115] = v125;
                    *(_OWORD *)(v107 + 99) = v126;
                    v107[116] = v107[83] & 3;
                    v107[4] = 1;
                    ++a2[417];
                    goto LABEL_251;
                  }
                  result = (unint64_t)EvCrt_v("ME_dec_C: Illegal BDS STE SV:  ID %d  Const %d  Sig %d");
                  goto LABEL_42;
                case 6:
                  v109 = 128;
                  v107 = v220;
                  while (v107[120])
                  {
                    v107 += 124;
                    if (!--v109)
                    {
                      result = (unint64_t)EvCrt_v("G5K_ME_dec_I: No empty slots!");
                      goto LABEL_42;
                    }
                  }
                  LODWORD(v226) = 0;
                  v127 = v227[0] & 0xF;
                  result = Decode_SVid_STE(BYTE1(v227[0]), LOBYTE(v227[0]) >> 4, (int *)&v226);
                  if (v127 == 3 && (_DWORD)v226 == 6 && (int)result >= 1 && (int)result < 15)
                  {
                    *(_WORD *)v107 = 774;
                    v107[2] = result;
                    v107[3] = 0;
                    v107[5] = result;
                    *((_WORD *)v107 + 3) = WORD1(v227[0]);
                    v128.i32[0] = DWORD1(v227[0]);
                    v133 = *(_OWORD *)((char *)&v227[1] + 8);
                    *(_OWORD *)(v107 + 12) = *(_OWORD *)((char *)v227 + 8);
                    *((_DWORD *)v107 + 2) = v128.i32[0];
                    *(_OWORD *)(v107 + 28) = v133;
                    *(_QWORD *)(v107 + 41) = *(_QWORD *)((char *)&v227[2] + 5);
                    v107[49] = -1;
                    if (vmovl_u8(v128).u8[0] == 1)
                      v107[49] = (v107[31] & 0x20) != 0;
                    v107[4] = 1;
                    ++a2[421];
LABEL_251:
                    v107[120] = 1;
                  }
                  else
                  {
                    result = (unint64_t)EvCrt_v("ME_dec_I: Illegal NVC STE SV:  ID %d  Const %d  Sig %d");
                  }
                  goto LABEL_42;
                case 7:
                  v110 = *(_DWORD *)((char *)v227 + 2);
                  if ((v227[0] & 0xD0) == 0x10)
                  {
                    if ((v227[0] & 0xF) == 0)
                    {
                      a2[408] = BYTE1(v227[0]);
                      *((_DWORD *)v220 + 3968) = v110;
                      a2[407] = 1;
                    }
                  }
                  else
                  {
                    v132 = LOBYTE(v227[0]) >> 4;
                    switch(v132)
                    {
                      case 2:
                      case 5:
                        break;
                      case 4:
                        a2[412] = BYTE1(v227[0]);
                        *((_DWORD *)v220 + 3969) = v110;
                        a2[411] = 1;
                        break;
                      case 6:
                        a2[416] = BYTE1(v227[0]);
                        *((_DWORD *)v220 + 3970) = v110;
                        a2[415] = 1;
                        break;
                      case 7:
                        a2[420] = BYTE1(v227[0]);
                        *((_DWORD *)v220 + 3971) = v110;
                        a2[419] = 1;
                        break;
                      default:
                        result = (unint64_t)EvCrt_d("G5K_ME_dec_N: Illegal Constell ", v132);
                        break;
                    }
                  }
                  a2[406] = 1;
                  goto LABEL_42;
                case 8:
                  *((_DWORD *)a2 + 119) = v227[0];
                  *((_QWORD *)v224 + 11) = *(_QWORD *)((char *)v227 + 4);
                  *((_WORD *)a2 + 249) = WORD6(v227[0]);
                  a2[500] = BYTE14(v227[0]);
                  *((_QWORD *)a2 + 60) = *(_QWORD *)((char *)v227 + 15);
                  *((_WORD *)a2 + 244) = *(_WORD *)((char *)&v227[1] + 7);
                  ++a2[508];
                  result = mach_continuous_time();
                  *((_DWORD *)a2 + 126) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)result);
                  goto LABEL_42;
                case 9:
                  *((_DWORD *)a2 + 106) = v227[0];
                  a2[428] = BYTE4(v227[0]);
                  *((_DWORD *)a2 + 108) = *(_DWORD *)((char *)v227 + 5);
                  goto LABEL_42;
                default:
                  goto LABEL_42;
              }
              goto LABEL_117;
            }
          }
LABEL_42:
          v9 = v222;
          goto LABEL_43;
        }
      }
    }
  }
  v19 = *((_WORD *)a2 + 197) + 1;
  *((_WORD *)a2 + 197) = v19;
  result = (unint64_t)EvCrt_v("G5K_ME_Decode_Meas: CheckSum Err %d >%s", v19, a2);
  v20 = *((_DWORD *)a2 + 109);
  if (v20 > 0xBB8)
  {
    if (v20 < 0xFFFFF447)
      goto LABEL_43;
  }
  else
  {
    if (*((unsigned __int16 *)a2 + 197) < 4u)
      goto LABEL_43;
    EvCrt_v("G5K_ME_Decode_Meas: GN_GPS_Hard_Reset_GNB >4 Checksum Errors in <=3000 ms !");
    result = GN_GPS_Hard_Reset_GNB();
  }
  *((_WORD *)a2 + 197) = 0;
LABEL_43:
  if (g_Logging_Cfg >= 1)
  {
    if (*((_DWORD *)v6 + 2) != *((_DWORD *)v6 + 3))
    {
      v29 = (char **)qword_257A47C00;
      v30 = *(char **)qword_257A47C00;
      v31 = 36;
      v32 = 1u;
      do
      {
        *v29 = v30 + 1;
        *v30 = v31;
        v30 = *v29;
        if (*v29 >= v29[3])
        {
          v30 = v29[2];
          *v29 = v30;
        }
        v31 = aT_0[v32++];
      }
      while (v32 != 4);
      sprintf_1u(v29, *((_DWORD *)v6 + 2));
      v33 = (*v29)++;
      *v33 = 32;
      if (*v29 >= v29[3])
        *v29 = v29[2];
      sprintf_1u(v29, *((_DWORD *)a2 + 130));
      v34 = (*v29)++;
      *v34 = 10;
      v35 = *v29;
      if (*v29 >= v29[3])
      {
        v35 = v29[2];
        *v29 = v35;
      }
      *v35 = 0;
      *((_DWORD *)v6 + 3) = *((_DWORD *)v6 + 2);
      v9 = v222;
    }
    result = (unint64_t)GNB_Debug_BlockMove(a2, (unsigned __int16)((_WORD)v3 - (_WORD)a2));
  }
  a2[392] = 0;
  v3 = a2;
  if (!a2[402])
    goto LABEL_11;
  v36 = *v5;
  v37 = v5[1];
  if (v37 == *v5)
    goto LABEL_75;
  if (v36 >= v37)
    v38 = ((_DWORD)v36 - (_DWORD)v37);
  else
    v38 = ((_DWORD)v36 - *((_DWORD *)v5 + 4) + *((_DWORD *)v5 + 6) - (_DWORD)v37);
  if (v38 >= 4)
  {
    result = (unint64_t)EvCrt_nd("G5K_ME_Decode_Meas: More data after {T message", 3, v13, v37, *v5, v38);
    v36 = *v5;
  }
  if (v37 == v36)
  {
LABEL_74:
    if (!*v224)
      goto LABEL_299;
LABEL_75:
    if (!a2[403])
      goto LABEL_299;
    v46 = *((_DWORD *)a2 + 130);
    if (*((_DWORD *)a2 + 109) == v46)
      goto LABEL_299;
    EvCrt_v("G5K_ME_Decode_Meas: Inconsistent TTicks %u %u", *((_DWORD *)a2 + 109), v46);
    goto LABEL_86;
  }
  v39 = 0;
  while (1)
  {
    v41 = *v37++;
    v40 = v41;
    if (v37 >= v5[3])
      v37 = v5[2];
    v42 = (v40 == 123) | v39;
    if (v40 != 123 && ((v39 ^ 1) & 1) == 0)
    {
      v43 = v40 - 72;
      v122 = v43 > 0xC;
      v44 = (1 << v43) & 0x1029;
      v45 = v122 || v44 == 0;
      v42 = v39;
      if (!v45)
        break;
    }
    v39 = v42;
    if (v37 == v36)
      goto LABEL_74;
  }
  if (!*v224 || !a2[403] || a2[405] || a2[409] || a2[413] || a2[417] || a2[421])
  {
    EvCrt_nd("G5K_ME_Decode_Meas: Throughput error, found next data set", 3, v13, *((unsigned int *)a2 + 109), *((unsigned int *)a2 + 130), v38);
LABEL_86:
    *(_QWORD *)&v227[0] = 0;
    a2[411] = 0;
    a2[415] = 0;
    a2[419] = 0;
    *((_WORD *)a2 + 206) = 0;
    *((_WORD *)a2 + 208) = 0;
    *((_WORD *)a2 + 210) = 0;
    *(_QWORD *)v224 = 0;
    bzero(v223, 0x1C00uLL);
    v47 = -4608;
    v48 = 12336;
    do
    {
      v49 = &a2[v47];
      *((_OWORD *)v49 + 772) = 0uLL;
      *((_OWORD *)v49 + 771) = 0uLL;
      a2[v47 + 12368] = 0;
      v50 = &a2[v48];
      *(_OWORD *)(v50 + 105) = 0uLL;
      *((_OWORD *)v50 + 5) = 0uLL;
      *((_OWORD *)v50 + 6) = 0uLL;
      *((_OWORD *)v50 + 3) = 0uLL;
      *((_OWORD *)v50 + 4) = 0uLL;
      *((_OWORD *)v50 + 1) = 0uLL;
      *((_OWORD *)v50 + 2) = 0uLL;
      v48 += 124;
      *(_OWORD *)v50 = 0uLL;
      v47 += 36;
    }
    while (v47);
    *v6 = 0;
    result = API_Get_UTC_Cor(1, (double *)v227);
    if (*(double *)v227 <= 0.0)
      v51 = -0.5;
    else
      v51 = 0.5;
    v52 = *(double *)v227 + v51;
    if (*(double *)v227 + v51 <= 2147483650.0)
    {
      if (v52 >= -2147483650.0)
        v53 = (int)v52;
      else
        LOBYTE(v53) = 0;
    }
    else
    {
      LOBYTE(v53) = -1;
    }
    v6[1] = v53;
    v3 = a2;
    goto LABEL_11;
  }
  result = (unint64_t)EvCrt_nd("G5K_ME_Decode_Meas: Throughput error, more data follows", 3, v13, *((unsigned int *)a2 + 109), *((unsigned int *)a2 + 130), v38);
LABEL_299:
  v3 = a2;
LABEL_300:
  *((_QWORD *)a2 + 48) = v3;
  return result;
}

uint64_t GM_Gen_SV_Meas_QI(uint64_t a1)
{
  int v1;
  uint64_t result;

  if (!*(_BYTE *)a1)
    return 0;
  v1 = *(unsigned __int16 *)(a1 + 8);
  if ((~v1 & 0x888) == 0)
    return 18;
  if ((~v1 & 0x88) == 0)
    return 17;
  if ((~v1 & 0x848) == 0)
    return 16;
  if ((~v1 & 0x48) == 0)
    return 15;
  if ((~v1 & 0x28) == 0)
    return 14;
  if ((~v1 & 0x18) == 0)
    return 13;
  result = 12;
  if ((~v1 & 0xC) != 0)
  {
    if ((~v1 & 0xA) != 0)
    {
      if ((v1 & 1) != 0)
      {
        return 9;
      }
      else if ((_BYTE)v1)
      {
        return 2;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 11;
    }
  }
  return result;
}

uint64_t Gnm52_11HandleStartTimeMarkRsp(uint64_t a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char __str[966];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v2 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if (*(_BYTE *)(a1 + 12))
        v3 = 84;
      else
        v3 = 70;
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_START_TIMEMARK_RSP Success,%c\n", (unint64_t)v2, "GNM", 73, "Gnm52_11HandleStartTimeMarkRsp", v3);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if (*(_BYTE *)(a1 + 12))
      v4 = 0;
    else
      v4 = 2;
    Gnm11_00ApiStatusCB(v4, 0, 0, 18);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm52_11HandleStartTimeMarkRsp", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t Gnm52_13HandleTimeMarkEvent(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char __str[966];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config)
      return 0;
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm52_13HandleTimeMarkEvent", 517);
    v5 = 1;
LABEL_11:
    gnssOsa_PrintLog(__str, v5, 1, 0);
    return 0;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_EVENT_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm52_13HandleTimeMarkEvent");
    gnssOsa_PrintLog(__str, 4, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GpsWk,%d,GpsTOW,%.9fms,GpsTimeUnc,%.9fms,UtcCorr,%f,METTick,%u,BCTNs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 73, "Gnm52_13HandleTimeMarkEvent", *(__int16 *)(a1 + 18), *(double *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 48), *(_DWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if (!off_2579E5EF0)
  {
    if (g_LbsOsaTrace_Config < 2)
      return 0;
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm52_13HandleTimeMarkEvent", 258);
    v5 = 2;
    goto LABEL_11;
  }
  off_2579E5EF0(0, a1 + 16);
  return 0;
}

uint64_t Gnm52_22HandleStartTimeMarkReq(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char __str[966];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_START_TIMEMARK_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm52_22HandleStartTimeMarkReq");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    off_2579E5EF0 = *(uint64_t (**)(_QWORD, _QWORD))(a1 + 16);
    v3 = gnssOsa_Calloc("Gnm52_22HandleStartTimeMarkReq", 114, 1, 0xCuLL);
    if (v3)
    {
      v4 = v3;
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_START_TIMEMARK_REQ =>GNC\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm52_22HandleStartTimeMarkReq");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      AgpsSendFsmMsg(128, 132, 8389120, v4);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 69, "Gnm52_22HandleStartTimeMarkReq", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t Gnm_StartTimeMarkSesion(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char __str[966];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm_StartTimeMarkSesion");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    v3 = gnssOsa_Calloc("Gnm_StartTimeMarkSesion", 156, 1, 0x18uLL);
    if (v3)
    {
      v3[2] = a1;
      AgpsSendFsmMsg(128, 128, 8405248, v3);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v4 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm_StartTimeMarkSesion");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      return 0;
    }
    else
    {
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm_StartTimeMarkSesion");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      return 5;
    }
  }
  else if (g_LbsOsaTrace_Config < 2)
  {
    return 1;
  }
  else
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm_StartTimeMarkSesion", 258);
    v5 = 1;
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm_StartTimeMarkSesion");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  return v5;
}

void Gnm03_51StartHalConnTimer(void)
{
  uint64_t v0;
  uint64_t v1;
  char __str[966];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if (!(_BYTE)g_HalStatusInfo)
  {
    if (AgpsFsmStartTimer(0x803006u, 0x3A98u))
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v0 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNM", 87, "Gnm03_51StartHalConnTimer", 1544);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
    }
    else
    {
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v1 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: DurMs,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNM", 73, "Gnm03_51StartHalConnTimer", 15000);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      LOBYTE(g_HalStatusInfo) = 1;
    }
  }
}

uint64_t Gnm03_11SetHWRev(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7[950];
  char __str[966];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_HAL_HW_REV_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_11SetHWRev");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    LOBYTE(g_HWStatus) = 1;
    memcpy_s("Gnm03_11SetHWRev", 247, (char *)&g_HWStatus + 4, 0x44u, (const void *)(a1 + 12), 0x44uLL);
    if (!(_BYTE)g_HWStatus)
      goto LABEL_8;
    if (DWORD1(g_HWStatus) != 3599)
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        v3 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ProdId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 69, "Gnm03_07ValidateHWSupport", 264, DWORD1(g_HWStatus));
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
LABEL_8:
      Hal_StopConn((uint64_t)Gnm_HalStopCnf);
      Gnm03_52StartHalDisConnTimer();
      snprintf(v7, 0x3B6uLL, "ASSERT: %s %d HWS : HW not supported by stack", "Gnm03_11SetHWRev", 255);
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        v4 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "OSA", 69, "Gnm03_11SetHWRev", v7);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      gnssOsa_FlushLog();
      __assert_rtn("Gnm03_11SetHWRev", "gnm03HwStatus.cpp", 256, "false && \"HW not supported by stack\"");
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm03_11SetHWRev", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void Gnm03_52StartHalDisConnTimer(void)
{
  uint64_t v0;
  uint64_t v1;
  char __str[966];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if (!BYTE1(g_HalStatusInfo))
  {
    if (AgpsFsmStartTimer(0x803106u, 0x3A98u))
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v0 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNM", 87, "Gnm03_52StartHalDisConnTimer", 1544);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
    }
    else
    {
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v1 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: DurMs,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNM", 73, "Gnm03_52StartHalDisConnTimer", 15000);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      BYTE1(g_HalStatusInfo) = 1;
    }
  }
}

void *Gnm03_12HalStartCnf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned int v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char __str[966];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_HAL_START_CNF\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_12HalStartCnf");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    if (!(_BYTE)g_HalStatusInfo)
    {
LABEL_15:
      v8 = 0;
      byte_2579E2D94 = 0;
      while (1)
      {
        v9 = v8;
        v10 = *(unsigned __int8 *)(pg_AgpsFsmTable + 168 * v8 + 4);
        if (!*(_BYTE *)(pg_AgpsFsmTable + 168 * v8 + 4))
          break;
        ++v8;
        if (v10 == 128)
        {
          v11 = *(void **)(pg_AgpsFsmTable + 168 * v9 + 96);
          goto LABEL_20;
        }
      }
      v11 = 0;
LABEL_20:
      if (v11 == &a_GnmInitState || v11 == &a_GnmResetState)
      {
        g_HalStatusInfo = 0;
        Gnm_03_05UpdtHWStatusGnc(1);
        Gnm35_15SendDbgCfg();
        if (v11 == &a_GnmInitState)
        {
          Gnm28_21InitRestorePeNv();
          Gnm03_04SendHWStatus((void (*)(_QWORD, uint64_t, _WORD *))*(&g_GnmCBs + 1), 0, 1);
        }
        if (g_LbsOsaTrace_Config < 3)
          return &a_GnmActiveState;
        bzero(__str, 0x3C6uLL);
        v12 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS HW Init complete\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 77, "Gnm03_19HwStartCnf");
        gnssOsa_PrintLog(__str, 3, 1, 0);
      }
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v13 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GnmState,Active\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 73, "Gnm03_12HalStartCnf", 261);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      return &a_GnmActiveState;
    }
    if (AgpsFsmStopTimer(8400902))
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v3 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 87, "Gnm03_53StopHalConnTimer", 1545);
        v4 = 2;
LABEL_13:
        gnssOsa_PrintLog(__str, v4, 1, 0);
      }
    }
    else if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm03_53StopHalConnTimer");
      v4 = 4;
      goto LABEL_13;
    }
    LOBYTE(g_HalStatusInfo) = 0;
    goto LABEL_15;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm03_12HalStartCnf", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void *Gnm03_14HalStopCnf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char __str[966];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_HAL_STOP_CNF\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_14HalStopCnf");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!a1)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm03_14HalStopCnf", 517);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 0;
  }
  if (*(_BYTE *)(a1 + 12))
  {
    if (!BYTE1(g_HalStatusInfo))
    {
LABEL_22:
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: HALStop success,starting again\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 73, "Gnm03_14HalStopCnf");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      ++BYTE2(g_HalStatusInfo);
      Hal_StartConn(g_GnssHw == 0, (uint64_t)Gnm_HalStartCnf);
      Gnm03_51StartHalConnTimer();
      return 0;
    }
    if (AgpsFsmStopTimer(8401158))
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v3 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 87, "Gnm03_54StopHalDisConnTimer", 1545);
        v4 = 2;
LABEL_20:
        gnssOsa_PrintLog(__str, v4, 1, 0);
      }
    }
    else if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm03_54StopHalDisConnTimer");
      v4 = 4;
      goto LABEL_20;
    }
    BYTE1(g_HalStatusInfo) = 0;
    goto LABEL_22;
  }
  v6 = HIBYTE(g_HalStatusInfo);
  if (HIBYTE(g_HalStatusInfo) <= 4u)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HALStop fail Attempt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm03_14HalStopCnf", 1296, HIBYTE(g_HalStatusInfo));
      gnssOsa_PrintLog(__str, 1, 1, 0);
      v6 = HIBYTE(g_HalStatusInfo);
    }
    HIBYTE(g_HalStatusInfo) = v6 + 1;
    Hal_StopConn((uint64_t)Gnm_HalStopCnf);
    Gnm03_52StartHalDisConnTimer();
    return 0;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HALStop fail Attempt,%u,GNSS service stopping\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 69, "Gnm03_14HalStopCnf", 1296, HIBYTE(g_HalStatusInfo));
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  Gnm_03_05UpdtHWStatusGnc(0);
  Gnm03_60BaseBandResetReq(1);
  return &a_GnmResetState;
}

void Gnm_03_05UpdtHWStatusGnc(int a1)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  char __str[966];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = gnssOsa_Calloc("Gnm_03_05UpdtHWStatusGnc", 158, 1, 0x10uLL);
  if (v2)
  {
    v3 = v2;
    v2[12] = a1;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_HW_STATUS_IND =>GNC HwStatus,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm_03_05UpdtHWStatusGnc", a1);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(128, 132, 8390147, v3);
  }
}

void Gnm03_60BaseBandResetReq(uint64_t a1)
{
  uint64_t v2;
  char __str[966];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Reason,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 69, "Gnm03_60BaseBandResetReq", a1);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  Hal_GnssBaseBandReset((uint64_t)Gnm03_BasebandResetCb);
  Ga05_HandleResetBbResetReq(a1);
}

void *Gnm03_15HandleHwStatus(uint64_t a1)
{
  uint64_t v2;
  void *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char __str[966];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_HW_STATUS_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_15HandleHwStatus");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    result = 0;
    switch(*(_DWORD *)(a1 + 12))
    {
      case 0:
        return result;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          v4 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HWStatus,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm03_15HandleHwStatus", 1297, *(_DWORD *)(a1 + 12));
          gnssOsa_PrintLog(__str, 1, 1, 0);
          if (g_LbsOsaTrace_Config >= 3)
          {
            bzero(__str, 0x3C6uLL);
            v5 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Initializing HW Reset\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 77, "Gnm03_06InitHWReset");
            gnssOsa_PrintLog(__str, 3, 1, 0);
          }
        }
        if (byte_2579E3FEF)
        {
          if (AgpsFsmStopTimer(8400390) && g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            v6 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm03_06InitHWReset", 1545);
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          byte_2579E3FEF = 0;
          if (byte_2579E3FF1)
            byte_2579E3FF2 = 11;
          Gnm10_31SendMEWakeRsp(0);
          Gnm10_29SendFwActivity(1, 0);
        }
        Gnm_03_05UpdtHWStatusGnc(2);
        if (g_LbsOsaTrace_Config < 4)
          return &a_GnmResetState;
        bzero(__str, 0x3C6uLL);
        v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GnmState,Active->Reset\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm03_15HandleHwStatus", 261);
        v8 = 4;
        goto LABEL_17;
      case 6:
        if (g_LbsOsaTrace_Config < 4)
          return 0;
        bzero(__str, 0x3C6uLL);
        v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ME LP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 73, "Gnm03_15HandleHwStatus", 1297);
        gnssOsa_PrintLog(__str, 4, 1, 0);
        goto LABEL_24;
      case 7:
        Gnm03_60BaseBandResetReq(8);
        return &a_GnmResetState;
      case 8:
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          v13 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HWStatus,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 69, "Gnm03_15HandleHwStatus", 1297, *(_DWORD *)(a1 + 12));
          v8 = 1;
LABEL_17:
          gnssOsa_PrintLog(__str, v8, 1, 0);
        }
        return &a_GnmResetState;
      default:
LABEL_24:
        if (g_LbsOsaTrace_Config < 4)
          return 0;
        bzero(__str, 0x3C6uLL);
        v12 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HWStatus,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 73, "Gnm03_15HandleHwStatus", 1297, *(_DWORD *)(a1 + 12));
        v10 = 4;
        break;
    }
    goto LABEL_20;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 69, "Gnm03_15HandleHwStatus", 517);
    v10 = 1;
LABEL_20:
    gnssOsa_PrintLog(__str, v10, 1, 0);
  }
  return 0;
}

void *Gnm03_16HandleHWInitFail(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  char __str[966];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_HAL_INIT_FAIL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_16HandleHWInitFail");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!a1)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm03_16HandleHWInitFail", 517);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 0;
  }
  Hal_StopConn(0);
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 73, "Gnm03_16HandleHWInitFail", 1294);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (BYTE2(g_HalStatusInfo) <= 4u)
  {
    if (g_LbsOsaTrace_Config >= 3)
    {
      bzero(__str, 0x3C6uLL);
      v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx WaitBeforeStart,%ums\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 77, "Gnm03_16HandleHWInitFail", 1291, 1000);
      gnssOsa_PrintLog(__str, 3, 1, 0);
    }
    usleep(0xF4240u);
    ++BYTE2(g_HalStatusInfo);
    Hal_StartConn(g_GnssHw == 0, (uint64_t)Gnm_HalStartCnf);
    Gnm03_51StartHalConnTimer();
    return 0;
  }
  v7 = *(unsigned __int8 *)(a1 + 12);
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Err,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 69, "Gnm03_20HwStartFailure", 1293, v7);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  byte_2579E2D94 = v7;
  Gnm_03_05UpdtHWStatusGnc(0);
  Gnm03_04SendHWStatus((void (*)(_QWORD, uint64_t, _WORD *))*(&g_GnmCBs + 1), 0, 0);
  Gnm03_60BaseBandResetReq(0);
  return &a_GnmResetState;
}

uint64_t Gnm03_17HandleGetHwInitStatus(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char __str[966];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_HW_INIT_STATUS_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_17HandleGetHwInitStatus");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    Gnm03_04SendHWStatus(*(void (**)(_QWORD, uint64_t, _WORD *))(a1 + 16), *(unsigned int *)(a1 + 12), 0);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 69, "Gnm03_17HandleGetHwInitStatus", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void Gnm03_04SendHWStatus(void (*a1)(_QWORD, uint64_t, _WORD *), uint64_t a2, char a3)
{
  unsigned __int8 v5;
  unsigned int v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char __str[966];
  _WORD v12[36];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  memset(v12, 0, 70);
  if (a1)
  {
    v5 = 0;
    HIBYTE(v12[0]) = byte_2579E2D94;
    while (1)
    {
      v6 = v5;
      v7 = *(unsigned __int8 *)(pg_AgpsFsmTable + 168 * v5 + 4);
      if (!*(_BYTE *)(pg_AgpsFsmTable + 168 * v5 + 4))
        break;
      ++v5;
      if (v7 == 128)
      {
        v8 = *(void **)(pg_AgpsFsmTable + 168 * v6 + 96);
        if ((a3 & 1) != 0)
          goto LABEL_12;
        goto LABEL_10;
      }
    }
    v8 = 0;
    if ((a3 & 1) != 0)
    {
LABEL_12:
      LOBYTE(v12[0]) = 1;
      v12[1] = WORD2(g_HWStatus);
      strncpy((char *)&v12[2], (const char *)&g_HWStatus + 8, 0x40uLL);
      LOBYTE(v12[34]) = 3;
      goto LABEL_13;
    }
LABEL_10:
    if (v8 != &a_GnmInitState && v8 != &a_GnmResetState)
      goto LABEL_12;
LABEL_13:
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: HwStatusCB called\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm03_04SendHWStatus");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    a1(0, a2, v12);
  }
  else if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 73, "Gnm03_04SendHWStatus", 258);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
}

uint64_t Gnm03_18InitializeHw(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char __str[966];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_HW_INIT\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_18InitializeHw");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    if (g_IsHwInit != 1)
    {
      g_GnssHw = *(_BYTE *)(a1 + 12);
      g_IsHwInit = 1;
      v4 = *(_QWORD *)(a1 + 24);
      *(&g_GnmCBs + 1) = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 16);
      qword_2579E5F00 = v4;
      g_HalCallbacks = (uint64_t (*)(_QWORD))Gnm_HardwareStatusNotif;
      Hal_StartConn(g_GnssHw == 0, (uint64_t)Gnm_HalStartCnf);
      Gnm03_51StartHalConnTimer();
      return 0;
    }
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ExistingHw,%hhu,ReqHw,%hhu\n", v3);
LABEL_9:
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_9;
  }
  return 0;
}

uint64_t Gnm03_40DiscardResetReqGnc(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char __str[966];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_HW_RESET_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 87, "Gnm03_40DiscardResetReqGnc");
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 87, "Gnm03_40DiscardResetReqGnc", 1028);
      v4 = 2;
LABEL_8:
      gnssOsa_PrintLog(__str, v4, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm03_40DiscardResetReqGnc", 517);
    v4 = 1;
    goto LABEL_8;
  }
  return 0;
}

void *Gnm03_41HandleResetReqGnc(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char __str[966];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_HW_RESET_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_41HandleResetReqGnc");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    Gnm03_60BaseBandResetReq(9);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GnmState,Active->Reset\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 73, "Gnm03_41HandleResetReqGnc", 261);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    return &a_GnmResetState;
  }
  else
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm03_41HandleResetReqGnc", 517);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 0;
  }
}

uint64_t Gnm03_42HandleMEWakeReq(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char __str[966];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_ME_WAKE_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_42HandleMEWakeReq");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    Gnm10_29SendFwActivity(1, 1);
    g_GNSS_FW_NV = *(_BYTE *)(a1 + 12);
    if (Hal_WakeUp_GNSS((void (*)(BOOL))Gnm03_HandleGNSSMEWakeResponse))
    {
      unk_2579E3FF0 = 0;
      byte_2579E3FEE = 1;
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 69, "Gnm03_42HandleMEWakeReq", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void Gnm03_HandleGNSSMEWakeResponse(int a1)
{
  uint64_t v1;
  uint64_t v2;
  char __str[966];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNM", 73, "Gnm03_HandleGNSSMEWakeResponse");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if ((Hal_SetCoexConfig() & 1) == 0)
      Gnm03_60BaseBandResetReq(10);
    Gnm55_RestoreVar_GNSS_FW_NV(g_GNSS_FW_NV);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: error\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 69, "Gnm03_HandleGNSSMEWakeResponse");
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

uint64_t Gnm03_43RejectMEWakeReq(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char __str[966];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_ME_WAKE_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_43RejectMEWakeReq");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    Gnm10_31SendMEWakeRsp(0);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 69, "Gnm03_43RejectMEWakeReq", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void *Gnm03_55HandleHalConnTimeout(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char __str[966];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_HAL_CONN_TIMER\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_55HandleHalConnTimeout");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!(_BYTE)g_HalStatusInfo)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Timer not running\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm03_55HandleHalConnTimeout");
      v6 = 4;
LABEL_12:
      gnssOsa_PrintLog(__str, v6, 1, 0);
    }
    return 0;
  }
  LOBYTE(g_HalStatusInfo) = 0;
  if (!a1)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm03_55HandleHalConnTimeout", 517);
      v6 = 1;
      goto LABEL_12;
    }
    return 0;
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: HAL Conn TO\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 87, "Gnm03_55HandleHalConnTimeout");
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  Gnm03_60BaseBandResetReq(2);
  return &a_GnmResetState;
}

void *Gnm03_56HandleHalDisconnTimeout(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char __str[966];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_HAL_DISCONN_TIMER\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_56HandleHalDisconnTimeout");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!BYTE1(g_HalStatusInfo))
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Timer not running\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm03_56HandleHalDisconnTimeout");
      v6 = 4;
LABEL_12:
      gnssOsa_PrintLog(__str, v6, 1, 0);
    }
    return 0;
  }
  BYTE1(g_HalStatusInfo) = 0;
  if (!a1)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm03_56HandleHalDisconnTimeout", 517);
      v6 = 1;
      goto LABEL_12;
    }
    return 0;
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: HAL Disconn TO\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 87, "Gnm03_56HandleHalDisconnTimeout");
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  Gnm03_60BaseBandResetReq(3);
  return &a_GnmResetState;
}

void Gnm03_BasebandResetCb(unsigned __int8 a1)
{
  uint64_t v2;
  char __str[966];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: status ,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_BasebandResetCb", a1);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
}

uint64_t GNSS_Nav_Debug_Ctl(uint64_t result)
{
  char **v1;
  char *v2;
  char *v3;
  char *v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  char *v7;

  if (result)
  {
    if (g_Logging_Cfg >= 4)
    {
      v1 = (char **)result;
      v3 = *(char **)result;
      v2 = *(char **)(result + 8);
      if (v2 != *(char **)result)
      {
        v4 = *(char **)result;
        if ((unint64_t)v2 > *(_QWORD *)result)
          v4 = *(char **)(result + 24);
        v5 = (_WORD)v4 - (_WORD)v2;
        if ((_WORD)v4 == (_WORD)v2)
        {
          if ((unint64_t)v2 >= *(_QWORD *)(result + 24))
          {
            v2 = *(char **)(result + 16);
            *(_QWORD *)(result + 8) = v2;
LABEL_12:
            v6 = (_WORD)v3 - (_WORD)v2;
            if (v6)
            {
              result = GN_GPS_Write_Nav_Debug(v6, v2);
              v2 = &v1[1][result];
              v1[1] = v2;
            }
          }
        }
        else
        {
          result = GN_GPS_Write_Nav_Debug((unsigned __int16)((_WORD)v4 - (_WORD)v2), v2);
          v2 = &v1[1][result];
          v1[1] = v2;
          if (v2 >= v1[3])
          {
            v2 = v1[2];
            v1[1] = v2;
            if ((_DWORD)result == v5)
            {
              v3 = *v1;
              goto LABEL_12;
            }
          }
        }
        if (v2 == *v1)
        {
          v7 = v1[2];
          *v1 = v7;
          v1[1] = v7;
        }
      }
    }
  }
  return result;
}

_QWORD *GNSS_Nav_Debug_Screens(_QWORD *result)
{
  _QWORD *v1;
  char **v2;

  if (result)
  {
    if (g_Logging_Cfg >= 4)
    {
      v1 = result;
      v2 = (char **)result[35];
      if (v2)
      {
        ds_NK_Summary(result);
        if (g_GN_GNSS_Nav_Debug_Port == 1)
          g_GN_GNSS_Nav_Debug_Port = 0;
        else
          ds_NK_Crude_Apx_Pos(v2, v1[21], v1[16]);
        ds_Intermittent(v2, *(_DWORD *)v1, (double *)v1[9]);
        return (_QWORD *)GNSS_Nav_Debug_Ctl((uint64_t)v2);
      }
    }
  }
  return result;
}

uint64_t GNSS_Nav_Debug_InitWrite(uint64_t result)
{
  uint64_t v1;

  if (g_Logging_Cfg >= 4)
  {
    v1 = *(_QWORD *)(result + 280);
    if (g_GN_GNSS_Nav_Debug_Port == 1)
      ds_Config(*(char ***)(result + 280), *(_QWORD *)(result + 72), *(_QWORD *)(result + 48), *(double **)(result + 128));
    return ds_NK_Summary_FirstLine(v1);
  }
  return result;
}

uint64_t GNSS_Nav_Debug_Flush_Check(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 8) - *(_DWORD *)result;
  if (v1 <= 0)
    v1 += *(_DWORD *)(result + 24) - *(_DWORD *)(result + 16);
  if (v1 <= 0x3FF)
    return GNSS_Nav_Debug_Ctl(result);
  return result;
}

uint64_t *mapu(double *a1, int a2, unsigned int a3, uint64_t a4, const double *a5, unsigned int a6, double *a7, int a8, double *a9, double *a10)
{
  double *v15;
  double v16;
  uint64_t *result;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  double *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  double v31;
  double *v32;
  int v33;
  double v34;
  double v35;
  uint64_t v36;
  int v37;
  double v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;

  v15 = a9;
  v16 = *a9;
  result = phiu((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (a6)
  {
    v18 = 0;
    v19 = 0;
    if (a6 + 1 > 2)
      v20 = a6 + 1;
    else
      v20 = 2;
    v21 = v20 - 1;
    do
    {
      v19 += v18 + 1;
      a9[v18++] = a5[v19 - 1];
    }
    while (v21 != v18);
  }
  v22 = a3 - 2;
  if (a3 >= 2)
  {
    v23 = a10 - 1;
    v24 = (a3 + a3 * a3) >> 1;
    if (a6 + 1 > 2)
      v25 = a6 + 1;
    else
      v25 = 2;
    v26 = a3;
    v27 = (uint64_t *)(v25 - 1);
    v28 = a3 - 1;
    v29 = v25 - 1;
    do
    {
      v30 = v26 - 1;
      v31 = 0.0;
      if (a6)
      {
        v32 = a9;
        result = v27;
        v33 = v26 - 1;
        do
        {
          v34 = *v32++;
          v35 = a7[v33];
          v31 = v31 + v35 * (v34 * v35);
          a7[v33] = v34 * v35;
          v33 += a8;
          result = (uint64_t *)((char *)result - 1);
        }
        while (result);
      }
      if (v16 >= 0.0)
      {
        v23[v24--] = v31;
        LODWORD(v36) = 1;
        LODWORD(result) = v22;
        do
        {
          if (a6)
          {
            v37 = 0;
            v38 = 0.0;
            v39 = v29;
            do
            {
              v38 = v38 + a7[(int)result + v37] * a7[v28 + v37];
              v37 += a8;
              --v39;
            }
            while (v39);
          }
          else
          {
            v38 = 0.0;
          }
          v23[v24] = v38;
          v36 = (v36 + 1);
          --v24;
          result = (uint64_t *)((_DWORD)result - 1);
        }
        while (v26 != v36);
      }
      else
      {
        v23[v26] = sqrt(v31);
      }
      --v22;
      --v28;
      --v26;
    }
    while (v30 > 1);
  }
  if (a6)
  {
    v40 = 0;
    if (a6 + 1 > 2)
      v41 = a6 + 1;
    else
      v41 = 2;
    v42 = v41 - 1;
    v43 = 0.0;
    do
    {
      v44 = *v15++;
      v43 = v43 + v44 * a7[v40] * a7[v40];
      v40 += a8;
      --v42;
    }
    while (v42);
  }
  else
  {
    v43 = 0.0;
  }
  v45 = sqrt(v43);
  if (v16 < 0.0)
    v43 = v45;
  *a10 = v43;
  return result;
}

uint64_t Hal32_SetPowerReport(int a1, void (*a2)(BOOL), uint64_t (*a3)(double, double, double, double))
{
  unsigned __int8 v4;
  char v5;
  double v6;
  const char *v7;
  uint64_t v9;
  double v10;
  const char *v11;
  double v12;
  const char *v13;
  double v14;
  const char *v15;
  char __str[966];
  unsigned __int8 v17[12];
  __int16 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  _MergedGlobals_3 = (uint64_t (*)(_QWORD))a2;
  off_257A47E98 = a3;
  *(_QWORD *)v17 = 0xFE0005506742787ALL;
  v17[8] = a1;
  v17[9] = a1;
  v17[10] = 1;
  if (a1)
    v4 = 3;
  else
    v4 = 1;
  v17[11] = v4;
  v18 = 2560;
  g_HalState = 5;
  if ((int)Hal22_ZxSendToChip(v17, 0xEuLL) <= 0)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v9 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "HAL", 69, "Hal32_SetPowerReport", 1282);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 4294967293;
  }
  else
  {
    v5 = gnssOsa_SemWaitTimeOut(g_HandleAckSem, 0x1C2u);
    if (v5 == 1)
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        v10 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        v11 = "Dis";
        if (a1)
          v11 = "En";
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx status,%s\n", (unint64_t)v10, "HAL", 69, "Hal32_SetPowerReport", 1543, v11);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      return 4294967291;
    }
    else if (v5)
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        v12 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        v13 = "Dis";
        if (a1)
          v13 = "En";
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx status,%s\n", (unint64_t)v12, "HAL", 69, "Hal32_SetPowerReport", 1541, v13);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      return 4294967289;
    }
    else if (g_PowerReportStatus == 32)
    {
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        if (a1)
          v7 = "En";
        else
          v7 = "Dis";
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Success,%s\n", (unint64_t)v6, "HAL", 73, "Hal32_SetPowerReport", v7);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      if (_MergedGlobals_3)
        _MergedGlobals_3(1);
      return 0;
    }
    else
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        v14 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        v15 = "Dis";
        if (a1)
          v15 = "En";
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx status,%s err,%x\n", (unint64_t)v14, "HAL", 69, "Hal32_SetPowerReport", 770, v15, g_PowerReportStatus);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      return 4294967292;
    }
  }
}

void Hal32_HandlePowerReportRsp(unsigned __int8 *a1)
{
  unint64_t v1;
  const char *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char __str[966];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config)
      return;
    bzero(__str, 0x3C6uLL);
    v5 = 513;
    v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v2 = "%10u %s%c %s: #%04hx data\n";
    goto LABEL_11;
  }
  if (a1[2] != 66 || a1[3] != 71)
  {
    if (!g_LbsOsaTrace_Config)
      return;
    bzero(__str, 0x3C6uLL);
    v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u,MIDEx,%u\n", v3, "HAL");
    goto LABEL_12;
  }
  g_PowerReportStatus = a1[8];
  if (!gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem) && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v1 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v5 = 1542;
    v6 = *__error();
    v4 = v1;
    v2 = "%10u %s%c %s: #%04hx HandleAckSem err,%d\n";
LABEL_11:
    snprintf(__str, 0x3C5uLL, v2, v4, "HAL", 69, "Hal32_HandlePowerReportRsp", v5, v6);
LABEL_12:
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void Hal32_HandlePowerReportData(unsigned __int8 *a1, uint64_t a2)
{
  const char *v3;
  uint64_t v5;
  unsigned __int16 v6;
  unsigned __int8 *v7;
  uint64_t v8;
  __int16 v9;
  unsigned int v10;
  double v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char __str[966];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config)
      return;
    bzero(__str, 0x3C6uLL);
    v16 = 513;
    v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v3 = "%10u %s%c %s: #%04hx data\n";
    goto LABEL_19;
  }
  if (a2 <= 8)
  {
    if (!g_LbsOsaTrace_Config)
      return;
    bzero(__str, 0x3C6uLL);
    v16 = 515;
    v17 = a2;
    v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v3 = "%10u %s%c %s: #%04hx length %u\n";
LABEL_19:
    snprintf(__str, 0x3C5uLL, v3, v15, "HAL", 69, "Hal32_HandlePowerReportData", v16, v17, v18);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    return;
  }
  v5 = *(unsigned __int16 *)&a1[a2 - 3];
  if ((_WORD)a2 == 11)
  {
    v6 = 0;
LABEL_17:
    if (!g_LbsOsaTrace_Config)
      return;
    bzero(__str, 0x3C6uLL);
    v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v17 = v5;
    v18 = v6;
    v16 = 771;
    v3 = "%10u %s%c %s: #%04hx zx chksum %u, computed %u\n";
    v15 = v14;
    goto LABEL_19;
  }
  v6 = 0;
  v7 = a1 + 8;
  v8 = (unsigned __int16)(a2 - 11);
  do
  {
    v9 = *v7++;
    v6 += v9;
    --v8;
  }
  while (v8);
  if ((_DWORD)v5 != v6)
    goto LABEL_17;
  if (a1[4] != 80)
  {
    v10 = *((_DWORD *)a1 + 2);
    v11 = (double)*((int *)a1 + 5) * 0.000001;
    v12 = (double)(*((_DWORD *)a1 + 6) / 1000);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v13 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: PwrReport:ME_TTick,%u,MeasInt,%fsec,ActiveInt,%fsec,AvgPwr%fmW,ClockMain-1,%u,ClockMain-2,%u,ClockRF-1,%u,ClockRF-2,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "HAL", 73, "Hal32_HandlePowerReportData", v10, v11, v11, v12, a1[148], a1[149], a1[150], a1[151]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if (off_257A47E98)
      off_257A47E98(v11, v12, (double)v10 * 0.001, v11);
  }
}

void *gnssOsa_Calloc(const char *a1, int a2, int a3, size_t size)
{
  uint64_t v7;
  void *result;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12[950];
  char __str[966];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v7 = a3;
  result = malloc_type_calloc(a3, size, 0x62C716FCuLL);
  if (!result)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v10 = mach_continuous_time();
      v9 = v7 * size;
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Size,%lu,Fn,%s,Line,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "OSA", 69, "gnssOsa_Calloc", 1537, v9, a1, a2);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    else
    {
      v9 = v7 * size;
    }
    snprintf(v12, 0x3B6uLL, "Size,%lu,Fn,%s,Line,%d", v9, a1, a2);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "OSA", 69, "gnssOsa_Calloc", v12);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_Calloc", "agpsmacosa.cpp", 76, "false && \"Memory allocation failure\"");
  }
  return result;
}

uint64_t gnssOsa_FlushLog(void)
{
  uint64_t result;

  result = gp_Logger;
  if (gp_Logger)
    return (*(uint64_t (**)(void))(*(_QWORD *)gp_Logger + 48))();
  return result;
}

BOOL gnssOsa_SemAcquire(dispatch_semaphore_t dsema)
{
  uint64_t v2;
  char __str[966];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (dsema)
  {
    dispatch_semaphore_wait(dsema, 0xFFFFFFFFFFFFFFFFLL);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "gnssOsa_SemAcquire", 1541);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return dsema != 0;
}

uint64_t gnssOsa_SemWaitTimeOut(NSObject *a1, unsigned int a2)
{
  dispatch_time_t v3;
  uint64_t v5;
  char __str[966];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v3 = dispatch_time(0, 1000000 * a2);
    return dispatch_semaphore_wait(a1, v3) != 0;
  }
  else
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "OSA", 69, "gnssOsa_SemWaitTimeOut", 1543);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 2;
  }
}

uint64_t gnssOsa_ReleaseOSTimer(void)
{
  gnssOsa_MacEnterCriticalSection("gnssOsa_ReleaseOSTimer", 128, &g_MacTimerCriticSection);
  if (g_curTimeState == 1)
    dispatch_suspend((dispatch_object_t)g_timerHandler);
  g_curTimeState = 0;
  return gnssOsa_MacExitCriticalSection("gnssOsa_ReleaseOSTimer", 140, &g_MacTimerCriticSection);
}

uint64_t gnssOsa_MacEnterCriticalSection(const char *a1, int a2, _opaque_pthread_mutex_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  char __s[966];
  char __str[950];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTE invalid input");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__s, 0x3C6uLL);
      v6 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 69, "gnssOsa_MacEnterCriticalSection", __str);
      gnssOsa_PrintLog(__s, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_MacEnterCriticalSection", "agpsmacosa.cpp", 757, "false && \"CRTE invalid input\"");
  }
  if (pthread_mutex_lock(a3))
  {
    snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTE OS API Failed");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__s, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 69, "gnssOsa_MacEnterCriticalSection", __str);
      gnssOsa_PrintLog(__s, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_MacEnterCriticalSection", "agpsmacosa.cpp", 762, "false && \"CRTE OS API Failed\"");
  }
  return 0;
}

uint64_t gnssOsa_MacExitCriticalSection(const char *a1, int a2, _opaque_pthread_mutex_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  char __s[966];
  char __str[950];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTX invalid input");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__s, 0x3C6uLL);
      v6 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 69, "gnssOsa_MacExitCriticalSection", __str);
      gnssOsa_PrintLog(__s, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_MacExitCriticalSection", "agpsmacosa.cpp", 772, "false && \"CRTX invalid input\"");
  }
  if (pthread_mutex_unlock(a3))
  {
    snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTX OS API Failed");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__s, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 69, "gnssOsa_MacExitCriticalSection", __str);
      gnssOsa_PrintLog(__s, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_MacExitCriticalSection", "agpsmacosa.cpp", 776, "false && \"CRTX OS API Failed\"");
  }
  return 0;
}

uint64_t gnssOsa_OSTimerInit(void)
{
  NSObject *v0;
  uint64_t v2;
  char __s[966];
  char __str[950];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v0 = dispatch_source_create(MEMORY[0x24BDACA18], 0, 1uLL, (dispatch_queue_t)g_TimerQueue);
  g_timerHandler = (uint64_t)v0;
  if (!v0)
  {
    snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", "gnssOsa_OSTimerInit", 152, "TIMC TimerHandler");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__s, 0x3C6uLL);
      v2 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "gnssOsa_OSTimerInit", __str);
      gnssOsa_PrintLog(__s, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_OSTimerInit", "agpsmacosa.cpp", 152, "false && \"TIMC TimerHandler\"");
  }
  dispatch_source_set_event_handler_f(v0, (dispatch_function_t)gnssOsa_TimerExpiryHandler);
  return 1;
}

uint64_t gnssOsa_TimerExpiryHandler(void *a1)
{
  uint64_t v1;
  char *v2;
  unsigned int v3;
  unsigned __int8 v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  char __str[1606];
  uint64_t v13;

  v1 = 0;
  v13 = *MEMORY[0x24BDAC8D0];
  do
  {
    v2 = &__str[v1 + 966];
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v2 + 1) = -1;
    *((_QWORD *)v2 + 2) = 0;
    *((_DWORD *)v2 + 6) = -1;
    v1 += 32;
    v2[28] = 0;
  }
  while (v1 != 640);
  gnssOsa_MacEnterCriticalSection("gnssOsa_TimerExpiryHandler", 258, &g_MacTimerContextCriticSection);
  v3 = 0;
  v4 = 0;
  v5 = vcvtad_u64_f64(*(double *)&g_MacClockTicksToNs * (double)mach_continuous_time());
  do
  {
    v6 = &g_MacOsaTimers[32 * v4];
    if (v6[28] && *((_QWORD *)v6 + 1) <= v5)
    {
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TimerExpired Handle,%u,ExpiryNs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 68, "gnssOsa_TimerExpiryHandler", *(_DWORD *)&g_MacOsaTimers[32 * v4 + 24], *((_QWORD *)v6 + 1));
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
      if (*(_QWORD *)v6)
      {
        v8 = &__str[32 * v3 + 966];
        *(_QWORD *)v8 = *(_QWORD *)v6;
        *((_QWORD *)v8 + 2) = *(_QWORD *)&g_MacOsaTimers[32 * v4 + 16];
        *(_QWORD *)v6 = 0;
        *((_QWORD *)v6 + 1) = 0;
        ++v3;
        *(_QWORD *)(v6 + 21) = 0;
        *((_QWORD *)v6 + 2) = 0;
        v4 = -1;
      }
      else if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        v9 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MacTimer\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 69, "gnssOsa_TimerExpiryHandler", 770);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
    }
    ++v4;
  }
  while (v4 < 0x14u);
  gnssOsa_TimerHandler();
  result = gnssOsa_MacExitCriticalSection("gnssOsa_TimerExpiryHandler", 290, &g_MacTimerContextCriticSection);
  if (v3)
  {
    v11 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD))&__str[32 * v11 + 966])(*(_QWORD *)&__str[32 * v11 + 982]);
      ++v11;
    }
    while (v3 > v11);
  }
  return result;
}

uint64_t gnssOsa_OSTimerDeInit(void)
{
  NSObject *v0;

  gnssOsa_MacEnterCriticalSection("gnssOsa_OSTimerDeInit", 160, &g_MacTimerCriticSection);
  v0 = g_timerHandler;
  if (!dispatch_source_testcancel((dispatch_source_t)g_timerHandler))
  {
    dispatch_source_cancel(v0);
    v0 = g_timerHandler;
  }
  if ((g_curTimeState & 1) == 0)
  {
    dispatch_resume(v0);
    v0 = g_timerHandler;
  }
  dispatch_release(v0);
  g_timerHandler = 0;
  g_curTimeState = 0;
  gnssOsa_MacExitCriticalSection("gnssOsa_OSTimerDeInit", 182, &g_MacTimerCriticSection);
  return 1;
}

uint64_t gnssOsa_TriggerOSTimer(int64_t a1)
{
  NSObject *v2;
  dispatch_time_t v3;

  gnssOsa_MacEnterCriticalSection("gnssOsa_TriggerOSTimer", 193, &g_MacTimerCriticSection);
  v2 = g_timerHandler;
  v3 = dispatch_time(0, a1);
  dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0);
  if ((g_curTimeState & 1) == 0)
    dispatch_resume((dispatch_object_t)g_timerHandler);
  g_curTimeState = 1;
  gnssOsa_MacExitCriticalSection("gnssOsa_TriggerOSTimer", 207, &g_MacTimerCriticSection);
  return 1;
}

uint64_t gnssOsa_TimerHandler(void)
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  int64_t v4;
  int64_t v5;

  v0 = 0;
  v1 = -1;
  do
  {
    if (g_MacOsaTimers[v0 + 28] && *(_QWORD *)&g_MacOsaTimers[v0 + 8] < v1)
      v1 = *(_QWORD *)&g_MacOsaTimers[v0 + 8];
    v0 += 32;
  }
  while (v0 != 640);
  if (v1 == -1)
    return gnssOsa_ReleaseOSTimer();
  v2 = vcvtad_u64_f64(*(double *)&g_MacClockTicksToNs * (double)mach_continuous_time());
  v3 = v1 >= v2;
  v4 = v1 - v2;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  return gnssOsa_TriggerOSTimer(v5);
}

BOOL gnssOsa_Init(void)
{
  unint64_t v0;
  unint64_t v1;
  double v2;
  NSObject *v3;
  uint64_t v4;
  dispatch_queue_t v5;
  uint64_t v6;
  mach_timebase_info info;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  info = 0;
  mach_timebase_info(&info);
  LODWORD(v1) = info.denom;
  LODWORD(v0) = info.numer;
  v2 = (double)v0 / (double)v1;
  *(double *)&g_MacClockTicksToMsRelation = v2 * 0.000001;
  g_MacClockTicksToNs = *(_QWORD *)&v2;
  v3 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, -7);
  if (!v3 && g_LbsOsaTrace_Config >= 2)
  {
    bzero(&info, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf((char *)&info, 0x3C5uLL, "%10u %s%c %s: #%04hx timer queueAttr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "OSA", 87, "gnssOsa_Init", 513);
    gnssOsa_PrintLog((char *)&info, 2, 1, 0);
  }
  v5 = dispatch_queue_create("TimerQueue", v3);
  g_TimerQueue = (uint64_t)v5;
  if (v5)
  {
    gnssOsa_InitCriticalSection("gnssOsa_Init", 336, &g_MacTimerCriticSection);
    gnssOsa_InitCriticalSection("gnssOsa_Init", 337, &g_MacTimerContextCriticSection);
    gnssOsa_OSTimerInit();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(&info, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf((char *)&info, 0x3C5uLL, "%10u %s%c %s: #%04hx Queue creation failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 69, "gnssOsa_Init", 513);
    gnssOsa_PrintLog((char *)&info, 1, 1, 0);
  }
  return v5 != 0;
}

uint64_t gnssOsa_InitCriticalSection(const char *a1, int a2, _opaque_pthread_mutex_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  char __s[966];
  char __str[950];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTC invalid input");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__s, 0x3C6uLL);
      v6 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 69, "gnssOsa_InitCriticalSection", __str);
      gnssOsa_PrintLog(__s, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_InitCriticalSection", "agpsmacosa.cpp", 786, "false && \"CRTC invalid input\"");
  }
  if (pthread_mutex_init(a3, 0))
  {
    snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTC OS API Failed");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__s, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 69, "gnssOsa_InitCriticalSection", __str);
      gnssOsa_PrintLog(__s, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_InitCriticalSection", "agpsmacosa.cpp", 790, "false && \"CRTC OS API Failed\"");
  }
  return 0;
}

void gnssOsa_Deinit(void)
{
  gnssOsa_StopAllTimers();
  gnssOsa_OSTimerDeInit();
  gnssOsa_MacDeinitCriticalSection("gnssOsa_Deinit", 346, &g_MacTimerCriticSection);
  gnssOsa_MacDeinitCriticalSection("gnssOsa_Deinit", 347, &g_MacTimerContextCriticSection);
  if (g_TimerQueue)
  {
    dispatch_release((dispatch_object_t)g_TimerQueue);
    g_TimerQueue = 0;
  }
  gp_Logger = 0;
}

uint64_t gnssOsa_StopAllTimers(void)
{
  uint64_t v0;
  uint64_t i;
  _QWORD *v2;
  char __str[966];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TimerStopAll\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "OSA", 68, "gnssOsa_StopAllTimers");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  gnssOsa_MacEnterCriticalSection("gnssOsa_StopAllTimers", 453, &g_MacTimerContextCriticSection);
  for (i = 0; i != 640; i += 32)
  {
    v2 = &g_MacOsaTimers[i];
    *v2 = 0;
    v2[1] = 0;
    *(_QWORD *)((char *)v2 + 21) = 0;
    v2[2] = 0;
  }
  gnssOsa_TimerHandler();
  gnssOsa_MacExitCriticalSection("gnssOsa_StopAllTimers", 466, &g_MacTimerContextCriticSection);
  return 1;
}

uint64_t gnssOsa_MacDeinitCriticalSection(const char *a1, int a2, _opaque_pthread_mutex_t *a3)
{
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char __str[966];
  char v10[950];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    snprintf(v10, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTD invalid input");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 69, "gnssOsa_MacDeinitCriticalSection", v10);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_MacDeinitCriticalSection", "agpsmacosa.cpp", 800, "false && \"CRTD invalid input\"");
  }
  result = pthread_mutex_destroy(a3);
  if ((_DWORD)result)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      v6 = result;
      bzero(__str, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: DeInit CriticalSec,errno,%d,%s,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 73, "gnssOsa_MacDeinitCriticalSection", v6, a1, a2);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t gnssOsa_StartTimer(const char *a1, int a2, unsigned int *a3, void (*a4)(void *), void *a5, unsigned int a6)
{
  BOOL v7;
  uint64_t v8;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char __str[950];
  char __s[966];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a3)
    v7 = a4 == 0;
  else
    v7 = 1;
  v8 = !v7;
  if (v7)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__s, 0x3C6uLL);
      v17 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: #%04hx MacTimer,ReqDurationMs,%u,%s,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "OSA", 69, "gnssOsa_StartTimer", 513, a6, a1, a2);
      gnssOsa_PrintLog(__s, 1, 1, 0);
    }
  }
  else
  {
    gnssOsa_MacEnterCriticalSection("gnssOsa_StartTimer", 367, &g_MacTimerContextCriticSection);
    v12 = 0;
    while (1)
    {
      v13 = &g_MacOsaTimers[v12];
      if (!g_MacOsaTimers[v12 + 28])
        break;
      v12 += 32;
      if (v12 == 640)
      {
        gnssOsa_MacExitCriticalSection("gnssOsa_StartTimer", 380, &g_MacTimerContextCriticSection);
        snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", "gnssOsa_StartTimer", 385, "Timer not started as max timer count hit");
        if (g_LbsOsaTrace_Config)
        {
          bzero(__s, 0x3C6uLL);
          v14 = mach_continuous_time();
          snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "OSA", 69, "gnssOsa_StartTimer", __str);
          gnssOsa_PrintLog(__s, 1, 1, 0);
        }
        gnssOsa_FlushLog();
        __assert_rtn("gnssOsa_StartTimer", "agpsmacosa.cpp", 385, "false && \"Timer not started as max timer count hit\"");
      }
    }
    v18 = vcvtad_u64_f64(*(double *)&g_MacClockTicksToNs * (double)mach_continuous_time());
    v19 = ++g_MacOsaTimerCount;
    *(_QWORD *)v13 = a4;
    *((_QWORD *)v13 + 1) = v18 + 1000000 * a6;
    *((_QWORD *)v13 + 2) = a5;
    *((_DWORD *)v13 + 6) = v19;
    v13[28] = 1;
    *a3 = v19;
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__s, 0x3C6uLL);
      v20 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: TimerStarted,Handle,%u,DurationMs,%u,CurrNs,%llu,ExpiryNs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "OSA", 68, "gnssOsa_StartTimer", *((_DWORD *)v13 + 6), a6, v18, *((_QWORD *)v13 + 1));
      gnssOsa_PrintLog(__s, 5, 1, 0);
    }
    gnssOsa_TimerHandler();
    gnssOsa_MacExitCriticalSection("gnssOsa_StartTimer", 409, &g_MacTimerContextCriticSection);
  }
  return v8;
}

uint64_t gnssOsa_StopTimer(const char *a1, unsigned int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char __str[966];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  gnssOsa_MacEnterCriticalSection("gnssOsa_StopTimer", 422, &g_MacTimerContextCriticSection);
  v4 = 0;
  while (*(_DWORD *)&g_MacOsaTimers[v4 + 24] != a3)
  {
    v4 += 32;
    if (v4 == 640)
      goto LABEL_8;
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TimerStopped,Handle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "OSA", 68, "gnssOsa_StopTimer", a3);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  v6 = &g_MacOsaTimers[v4];
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)((char *)v6 + 21) = 0;
  v6[2] = 0;
LABEL_8:
  gnssOsa_TimerHandler();
  gnssOsa_MacExitCriticalSection("gnssOsa_StopTimer", 440, &g_MacTimerContextCriticSection);
  return 1;
}

BOOL AgpsInitMsgQueue(uint64_t a1)
{
  _BOOL8 v2;
  uint64_t v3;
  char __str[966];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  gnssOsa_InitCriticalSection("AgpsInitMsgQueue", 494, (_opaque_pthread_mutex_t *)(a1 + 24));
  v2 = gnssOsa_SemInit((dispatch_semaphore_s **)(a1 + 88), 0);
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InitMsgQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 69, "AgpsInitMsgQueue", 1539);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return v2;
}

BOOL gnssOsa_SemInit(dispatch_semaphore_s **a1, intptr_t value)
{
  dispatch_semaphore_s *v3;
  uint64_t v4;
  char __str[966];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = (dispatch_semaphore_s *)dispatch_semaphore_create(value);
  *a1 = v3;
  if (!v3 && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "OSA", 69, "gnssOsa_SemInit", 1539);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return v3 != 0;
}

void AgpsDeinitMsgQueue(uint64_t a1)
{
  uint64_t v2;
  void **i;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char __str[966];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 68, "AgpsDeinitMsgQueue");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  gnssOsa_MacEnterCriticalSection("AgpsDeinitMsgQueue", 520, (_opaque_pthread_mutex_t *)(a1 + 24));
  for (i = *(void ***)(a1 + 8); i; i = *(void ***)(a1 + 8))
  {
    v4 = i + 1;
    v5 = i[1];
    if (!v5)
      v4 = (_QWORD *)(a1 + 16);
    *v4 = 0;
    *(_QWORD *)(a1 + 8) = v5;
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Event dropped Src,%u,Dest,%u,Event,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 87, "AgpsDeinitMsgQueue", 770, *(unsigned __int8 *)*i, *((unsigned __int8 *)*i + 1), *((_DWORD *)*i + 1));
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    if (*i)
      free(*i);
    free(i);
  }
  gnssOsa_MacExitCriticalSection("AgpsDeinitMsgQueue", 557, (_opaque_pthread_mutex_t *)(a1 + 24));
  if (gnssOsa_MacDeinitCriticalSection("AgpsDeinitMsgQueue", 564, (_opaque_pthread_mutex_t *)(a1 + 24))
    && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 69, "AgpsDeinitMsgQueue", 1553);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  if (!gnssOsa_DeinitCountingSem((dispatch_object_t *)(a1 + 88)))
  {
    if (!g_LbsOsaTrace_Config)
      return;
    bzero(__str, 0x3C6uLL);
    v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 69, "AgpsDeinitMsgQueue", 1540);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 68, "AgpsDeinitMsgQueue");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
}

BOOL gnssOsa_DeinitCountingSem(dispatch_object_t *a1)
{
  dispatch_object_t v1;
  uint64_t v3;
  char __str[966];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  if (*a1)
  {
    dispatch_release(*a1);
    *a1 = 0;
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 69, "gnssOsa_DeinitCountingSem", 1540);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return v1 != 0;
}

uint64_t AgpsEnQueueFsmMsg(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char __str[966];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v3 = (unsigned __int8 *)result;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Src,%x,Dest,%x,EnQEvent,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "OSA", 73, "AgpsEnQueueFsmMsg", *v3, v3[1], *((_DWORD *)v3 + 1));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    v5 = gnssOsa_Calloc("AgpsEnQueueFsmMsg", 590, 1, 0x10uLL);
    *v5 = v3;
    gnssOsa_MacEnterCriticalSection("AgpsEnQueueFsmMsg", 601, (_opaque_pthread_mutex_t *)(a2 + 24));
    v6 = *(_QWORD *)(a2 + 16);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = v5;
      *(_QWORD *)(a2 + 16) = v5;
      v5[1] = 0;
      if (!gnssOsa_SemRelease(*(dispatch_semaphore_t *)(a2 + 88)))
      {
        *(_QWORD *)(v6 + 8) = 0;
        goto LABEL_8;
      }
    }
    else
    {
      *(_QWORD *)(a2 + 8) = v5;
      *(_QWORD *)(a2 + 16) = v5;
      v5[1] = 0;
      if (!gnssOsa_SemRelease(*(dispatch_semaphore_t *)(a2 + 88)))
      {
LABEL_8:
        *(_QWORD *)(a2 + 16) = v6;
        free(v5);
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          v7 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Msg,%x,ProcessId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 69, "AgpsEnQueueFsmMsg", 1548, *((_DWORD *)v3 + 1), *(unsigned __int8 *)(a2 + 4));
          gnssOsa_PrintLog(__str, 1, 1, 0);
        }
      }
    }
    return gnssOsa_MacExitCriticalSection("AgpsEnQueueFsmMsg", 646, (_opaque_pthread_mutex_t *)(a2 + 24));
  }
  return result;
}

BOOL gnssOsa_SemRelease(dispatch_semaphore_t dsema)
{
  uint64_t v2;
  char __str[966];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (dsema)
  {
    dispatch_semaphore_signal(dsema);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "gnssOsa_SemRelease", 1542);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return dsema != 0;
}

unsigned __int8 *AgpsDeQueueFsmMsg(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char __str[966];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (!gnssOsa_SemAcquire(*(dispatch_semaphore_t *)(a1 + 88)) && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "AgpsDeQueueFsmMsg", 1541);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  gnssOsa_MacEnterCriticalSection("AgpsDeQueueFsmMsg", 667, (_opaque_pthread_mutex_t *)(a1 + 24));
  v3 = *(_QWORD **)(a1 + 8);
  if (v3)
  {
    v4 = v3 + 1;
    v5 = v3[1];
    if (!v5)
      v4 = (_QWORD *)(a1 + 16);
    *v4 = 0;
    *(_QWORD *)(a1 + 8) = v5;
    gnssOsa_MacExitCriticalSection("AgpsDeQueueFsmMsg", 692, (_opaque_pthread_mutex_t *)(a1 + 24));
    v6 = (unsigned __int8 *)*v3;
    free(v3);
    if (v6 && g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Src,%x,Dest,%x,DeQEvent,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 68, "AgpsDeQueueFsmMsg", *v6, v6[1], *((_DWORD *)v6 + 1));
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  else
  {
    gnssOsa_MacExitCriticalSection("AgpsDeQueueFsmMsg", 692, (_opaque_pthread_mutex_t *)(a1 + 24));
    return 0;
  }
  return v6;
}

void gnssOsa_MarkFsmMsgInvalid(int a1, uint64_t a2)
{
  _opaque_pthread_mutex_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char __str[966];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v4 = (_opaque_pthread_mutex_t *)(a2 + 24);
    gnssOsa_MacEnterCriticalSection("gnssOsa_MarkFsmMsgInvalid", 723, (_opaque_pthread_mutex_t *)(a2 + 24));
    v5 = *(_QWORD **)(a2 + 8);
    if (v5)
    {
      while (*(_DWORD *)(*v5 + 4) != a1)
      {
        v5 = (_QWORD *)v5[1];
        if (!v5)
          goto LABEL_10;
      }
      *(_BYTE *)(*v5 + 8) = 0;
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 73, "gnssOsa_MarkFsmMsgInvalid", a1);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
    }
LABEL_10:
    gnssOsa_MacExitCriticalSection("gnssOsa_MarkFsmMsgInvalid", 745, v4);
  }
  else if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx FsmCtxt\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 87, "gnssOsa_MarkFsmMsgInvalid", 513);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
}

void *memcpy_s(const char *a1, int a2, void *__dst, unsigned int a4, const void *__src, size_t __n)
{
  unint64_t v8;
  unint64_t v9;
  void *v10;
  char __str[966];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (__dst && __src)
  {
    if (a4 >= __n)
    {
      v10 = __dst;
      memcpy(__dst, __src, __n);
      return v10;
    }
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Caller,%s,line,%d\n", v8, "OSA", 69, "memcpy_s", 515, a1, a2);
LABEL_8:
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Caller,%s,line,%d\n", v9, "OSA", 69, "memcpy_s", 513, a1, a2);
    goto LABEL_8;
  }
  return 0;
}

char *strncpy_s(char *__dst, unsigned int a2, const char *__src, size_t __n)
{
  char *result;
  uint64_t v6;
  char __str[966];
  uint64_t v8;

  result = 0;
  v8 = *MEMORY[0x24BDAC8D0];
  if (__dst && __src)
  {
    if (a2 >= __n)
    {
      return strncpy(__dst, __src, __n);
    }
    else
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        v6 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 69, "strncpy_s", 515);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      return 0;
    }
  }
  return result;
}

BOOL gnssOsa_CreateThread(const char *a1, int a2, _opaque_pthread_t **a3, unsigned int a4, void *(__cdecl *a5)(void *), void *a6, unsigned int a7, void *a8, int a9)
{
  pthread_attr_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int priority_max;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  sched_param v26;
  char __str[950];
  char __s[966];
  pthread_attr_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  memset(&v29, 0, sizeof(v29));
  if (a3)
  {
    if (a4)
    {
      if (pthread_attr_init(&v29))
      {
        snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "THRD Init failed");
        if (g_LbsOsaTrace_Config)
        {
          bzero(__s, 0x3C6uLL);
          v23 = mach_continuous_time();
          snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "OSA", 69, "gnssOsa_CreateThread", __str);
          gnssOsa_PrintLog(__s, 1, 1, 0);
        }
        gnssOsa_FlushLog();
        __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1034, "false && \"THRD Init failed\"");
      }
      v15 = &v29;
      if (pthread_attr_setstacksize(&v29, a4))
      {
        snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "THRD Stack Size");
        if (g_LbsOsaTrace_Config)
        {
          bzero(__s, 0x3C6uLL);
          v16 = mach_continuous_time();
          snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "OSA", 69, "gnssOsa_CreateThread", __str);
          gnssOsa_PrintLog(__s, 1, 1, 0);
        }
        gnssOsa_FlushLog();
        __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1038, "false && \"THRD Stack Size\"");
      }
    }
    else
    {
      v15 = 0;
    }
    if (pthread_create(a3, v15, a5, a6))
    {
      snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "THRD Create failed");
      if (g_LbsOsaTrace_Config)
      {
        bzero(__s, 0x3C6uLL);
        v22 = mach_continuous_time();
        snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "OSA", 69, "gnssOsa_CreateThread", __str);
        gnssOsa_PrintLog(__s, 1, 1, 0);
      }
      gnssOsa_FlushLog();
      __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1045, "false && \"THRD Create failed\"");
    }
    v25 = 0;
    v26 = 0;
    if (pthread_getschedparam(*a3, &v25, &v26))
    {
      gnssOsa_FlushLog();
      __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1052, "false && \"THRD pthread_getschedparam failed\"");
    }
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__s, 0x3C6uLL);
      v18 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: #%04hx Requester,%s,Handle,%p,Prio,%d,DesiredPrio,%d,Policy,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "OSA", 73, "gnssOsa_CreateThread", 1569, a1, a3, v26.sched_priority, v25, a9);
      gnssOsa_PrintLog(__s, 4, 1, 0);
    }
    if (a9 == 99)
    {
      v25 = 4;
      priority_max = sched_get_priority_max(4);
    }
    else
    {
      if (a9 != 1)
      {
LABEL_23:
        if (a4 && pthread_attr_destroy(v15))
        {
          snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "THRD Destroy failed");
          if (g_LbsOsaTrace_Config)
          {
            bzero(__s, 0x3C6uLL);
            v24 = mach_continuous_time();
            snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "OSA", 69, "gnssOsa_CreateThread", __str);
            gnssOsa_PrintLog(__s, 1, 1, 0);
          }
          gnssOsa_FlushLog();
          __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1082, "false && \"THRD Destroy failed\"");
        }
        return a3 != 0;
      }
      priority_max = sched_get_priority_min(v25);
    }
    if (priority_max == -1)
    {
      gnssOsa_FlushLog();
      __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1069, "false && \"sched_get_priority failed\"");
    }
    v26.sched_priority = priority_max;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__s, 0x3C6uLL);
      v20 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: #%04hx Updated Prio,%d,Policy,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "OSA", 73, "gnssOsa_CreateThread", 1569, v26.sched_priority, v25);
      gnssOsa_PrintLog(__s, 4, 1, 0);
    }
    if (pthread_setschedparam(*a3, v25, &v26))
    {
      gnssOsa_FlushLog();
      __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1075, "false && \"pthread_setschedparam failed\"");
    }
    goto LABEL_23;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__s, 0x3C6uLL);
    v17 = mach_continuous_time();
    snprintf(__s, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "OSA", 69, "gnssOsa_CreateThread", 513);
    gnssOsa_PrintLog(__s, 1, 1, 0);
  }
  return a3 != 0;
}

void gnssOsa_PrintLog(char *__s, int a2, int a3, size_t a4)
{
  uint64_t v7;
  void *__p[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (gp_Logger)
  {
    if (a3)
    {
      a4 = strlen(__s);
      if (!a4)
        return;
    }
    else
    {
      a4 = a4;
      if (!(_DWORD)a4)
        return;
    }
    v7 = 2;
    switch(a2)
    {
      case 0:
        return;
      case 1:
        goto LABEL_8;
      case 2:
        v7 = 3;
LABEL_8:
        if (!a3)
          goto LABEL_16;
        goto LABEL_12;
      case 3:
        v7 = 4;
        if (!a3)
          goto LABEL_16;
LABEL_12:
        std::string::basic_string[abi:ne180100](__p, __s, a4);
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)gp_Logger + 16))(gp_Logger, v7, __p);
        if (v9 < 0)
          operator delete(__p[0]);
        break;
      case 4:
        v7 = 5;
        goto LABEL_16;
      default:
        v7 = 6;
LABEL_16:
        (*(void (**)(uint64_t, uint64_t, char *, size_t))(*(_QWORD *)gp_Logger + 32))(gp_Logger, v7, __s, a4);
        break;
    }
  }
}

void sub_24BB11F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24BB12100(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DD_GLON_Alm_Set_Health_Frq(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int *v10;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[13];
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v16 = 0;
  v17 = 0;
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  v20 = 0;
  result = GLON_AlmBin2Int(a1, (uint64_t)&v16);
  v4 = BYTE3(v17) - 32;
  if (BYTE3(v17) <= 0x18u)
    v4 = 2139062143;
  if (BYTE3(v17) >= 7u)
    v5 = v4;
  else
    v5 = BYTE3(v17);
  v6 = BYTE2(v17);
  v7 = BYTE2(v17) - 1;
  if (v7 <= 0x17)
  {
    if (BYTE6(v19))
    {
      if (g_Logging_Cfg >= 5)
      {
        v8 = *((_DWORD *)a2 + v7 + 4332);
        if (v8 != 2139062143 && v8 != v5)
          result = (uint64_t)EvCrt_v("DD_GLON_Alm_Set_Health_Frq:  Error:  Ignoring apparent change of Frq Id of Slot %d from %d to %d %d %d", BYTE2(v17), v8, v5, 1, v20);
      }
      v10 = (int *)a2 + v7 + 4332;
      if (*v10 == 2139062143 && v5 != 2139062143)
        *v10 = v5;
      v12 = a2[1489];
      if (!*(_BYTE *)(v12 + v7) && !*(_BYTE *)(a2[2146] + v7))
      {
        *(_BYTE *)(v12 + v7) = 1;
        result = (uint64_t)EvLog_v("DD_GLON_Alm_Set_Health_Frq:  Health U->H Alm:  Slot %d  FrqId %d", BYTE2(v17), v5);
        *(_DWORD *)(a2[1490] + 20 * v7 + 4) = 1;
      }
    }
    else
    {
      v13 = a2[1489];
      if (*(_BYTE *)(v13 + v7))
      {
        *(_BYTE *)(v13 + v7) = 0;
        result = (uint64_t)EvLog_v("DD_GLON_Alm_Set_Health_Frq:  Health H->U Alm:  Slot %d  FrqId %d", v6, v5);
        *(_DWORD *)(a2[1490] + 20 * v7 + 4) = 2;
      }
      v14 = (int *)a2 + v7 + 4332;
      if (*v14 == 2139062143 && v5 <= 6)
        *v14 = v5;
    }
  }
  return result;
}

uint64_t DD_Proc_GLON_Data(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4, int *a5, uint64_t a6)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  int *v20;
  int *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  uint64_t v26;
  _BYTE *v27;
  int v28;
  uint64_t v30;
  int v31;
  BOOL v33;
  int v34;
  _WORD *v35;
  uint64_t v36;
  int *v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  int v54;
  unsigned int v55;
  char v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _OWORD *v61;
  uint64_t v62;
  int v63;
  _DWORD *v64;
  BOOL v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *v70;
  _BOOL4 v71;
  __int128 v72;
  int *v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  _BOOL4 v79;
  int v80;
  int v81;
  __int128 v82;
  int *v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  __int16 v93;
  int v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  int v98;
  int v99;
  _BYTE *v100;
  int v101;
  uint64_t v102;
  int v103;
  __int16 v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int *v109;
  uint64_t v110;
  int v111;
  double v112;
  int *v113;
  int v114;
  _BYTE v115[29];
  uint64_t v116;
  char v117;
  double v118;
  int v119;
  int v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  v8 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 16);
  if ((v7 & 0x80000000) != 0)
  {
    if (g_Logging_Cfg >= 5)
      return (uint64_t)EvLog_d("DD_Proc_GLON_Data:  GLON MSB Zero test fail", *(unsigned __int8 *)(a2 + 59));
  }
  else
  {
    v11 = result;
    v12 = *(char *)(a2 + 58) + 7;
    v13 = (char *)*(int *)(a6 + 4 * v12 + 17424);
    v14 = v13 - 1;
    v15 = v7 >> 27;
    *(_BYTE *)(a2 + 59) = v7 >> 27;
    if (!(v7 >> 27))
      goto LABEL_45;
    if (*(int *)(a4 + 68) >= 7)
    {
      v16 = *(_DWORD *)(a6 + 8972);
      if ((v16 - 2) < 5 || (v16 - 1) <= 5 && *(_BYTE *)(a4 + 72))
      {
        v17 = (*(_DWORD *)(a2 + 60) % 30);
        v18 = (int)((*(_DWORD *)(a2 + 60) % 30 + (((*(_DWORD *)(a2 + 60) % 30) & 0x80u) >> 7)) << 24) >> 25;
        if ((v17 + 1) < 3)
          v18 = 15;
        if (v18 != v7 >> 27
          && !*a3
          && !*(_BYTE *)(*(_QWORD *)(a6 + 64) + *(unsigned __int8 *)(a2 + 8))
          && ((v18 - 2) > 3u || v15 + 1 != v18))
        {
          v20 = a5;
          result = (uint64_t)EvCrt_nd("DD_Proc_GLON_Data:  Decoded Str No error", 3, (uint64_t)a3, v7 >> 27, v18, v17);
          a5 = v20;
          *(_BYTE *)(a2 + 59) = 0;
          goto LABEL_45;
        }
      }
    }
    if (v15 == 2)
    {
      if ((v7 & 0x4000000) == 0)
        goto LABEL_20;
    }
    else if (v15 == 3)
    {
      if ((v7 & 0x800) == 0)
        goto LABEL_20;
    }
    else
    {
      if (v15 < 5 || ((v7 >> 27) & 1) == 0)
        goto LABEL_45;
      if ((*(_BYTE *)(a2 + 26) & 8) == 0)
      {
LABEL_20:
        if ((_DWORD)v13 != 2139062143)
        {
          *(_BYTE *)(result + v12 + 4706) = 0;
          if (!v14[*(_QWORD *)(a6 + 11912)])
          {
            if (v14[*(_QWORD *)(a6 + 17184)])
            {
              v21 = a5;
              memset(v115, 0, sizeof(v115));
              v116 = 0;
              v117 = 0;
              result = GLON_AlmBin2Int(a6 + 36 * (_QWORD)v14 + 16248, (uint64_t)v115);
              if (BYTE6(v116))
              {
                v14[*(_QWORD *)(a6 + 11912)] = 1;
                result = (uint64_t)EvLog_v("DD_Proc_GLON_Data:  Health U->H Imm:  Slot %d  FrqId %d", (_DWORD)v13, *(unsigned __int8 *)(a2 + 59));
                *(_DWORD *)(*(_QWORD *)(a6 + 11920) + 20 * (_QWORD)v14 + 4) = 1;
              }
              else if (g_Logging_Cfg >= 6)
              {
                result = (uint64_t)EvLog_v("DD_Proc_GLON_Data:  Health U->U Imm:  Slot %d  FrqId %d", (_DWORD)v13, *(unsigned __int8 *)(a2 + 59));
              }
              a5 = v21;
            }
          }
        }
LABEL_45:
        v24 = (_BYTE *)(v11 + 6005);
        v25 = *(unsigned __int8 *)(a2 + 59);
        if ((v25 - 1) > 4)
        {
          if ((v25 - 6) <= 9)
          {
            if ((v25 & 1) != 0)
            {
              v30 = 14;
              do
              {
                v31 = *v24;
                if (v31 != v25 && v31 != 0)
                  *v24 = 0;
                if (*(v24 - 1))
                  v33 = v25 - 1 == *(v24 - 1);
                else
                  v33 = 1;
                if (!v33)
                  *(v24 - 1) = 0;
                v24 += 2;
                --v30;
              }
              while (v30);
            }
            else
            {
              v26 = 14;
              v27 = (_BYTE *)(v11 + 6005);
              do
              {
                v28 = *(v27 - 1);
                if (v28 != v25 && v28 != 0)
                  *(v27 - 1) = 0;
                *v27 = 0;
                v27 += 2;
                --v26;
              }
              while (v26);
              *(_WORD *)(v11 + 6397) = 0;
            }
          }
        }
        else
        {
          *(_DWORD *)(v11 + 6028) = 0;
          *(_QWORD *)(v11 + 6020) = 0;
          *(_OWORD *)(v11 + 6004) = 0u;
          *(_BYTE *)(v11 + 6398) = 0;
          *(_WORD *)(v11 + 6396) = 0;
        }
        v34 = *(unsigned __int8 *)(a2 + 59);
        if ((v34 - 1) < 4)
        {
          if ((_DWORD)v13 == 2139062143
            || (v35 = (_WORD *)(a6 + ((_QWORD)v14 << 6) + 11988), *v35 == 4095)
            || !v14[*(_QWORD *)(a6 + 11912)]
            || !v14[*(_QWORD *)(a6 + 17168)]
            || *(_DWORD *)(a2 + 60) % 1800 < 30)
          {
            result = (uint64_t)DD_Proc_Glon_Eph_String((char *)v11, a2, a6, a4, a5);
          }
          else
          {
            v36 = v8;
            v37 = a5;
            DD_Proc_Glon_Eph_Bit_Validation(v13, v34, v36, a6);
            v38 = (unsigned __int16)*v35;
            result = (uint64_t)DD_Proc_Glon_Eph_String((char *)v11, a2, a6, a4, v37);
            if (v38 == 4095)
            {
              v39 = a6 + ((_QWORD)v14 << 6);
              *(_DWORD *)(v39 + 11928) = *v37;
              *(_DWORD *)(v39 + 11932) = 4;
              v14[*(_QWORD *)(a6 + 17200)] = 1;
              if (*(unsigned __int8 *)(v11 + v12 + 5508) >= 2u)
              {
                v40 = *(_QWORD **)(a6 + 17224);
                *v40 = 0;
                v40[1] = 0;
                v40[2] = 0;
              }
              if (*v37 >= 1)
                result = Core_Save_GLON_Eph(v13, 0, (__int128 *)(v39 + 11928));
            }
          }
          goto LABEL_90;
        }
        if (v34 != 5)
        {
          if (!*(_BYTE *)(a2 + 59))
          {
            result = (uint64_t)EvLog_d("DD_Proc_GLON_Data:  Bad string", *(unsigned __int8 *)(a2 + 9));
            goto LABEL_90;
          }
          if (*(int *)(a4 + 68) < 3)
            goto LABEL_90;
          v55 = *(_DWORD *)(a2 + 16);
          v56 = (int)(*(_DWORD *)(a2 + 60) - 2 * ((v55 >> 27) & 0xF) + 15) / 30 % 5 + 1;
          if (((((int)(*(_DWORD *)(a2 + 60) - 2 * ((v55 >> 27) & 0xF) + 15) / 30 % 5) + 1) & 0x100) != 0)
            goto LABEL_90;
          v57 = (v55 >> 27) & 0xF;
          v58 = *(char *)(a2 + 58) + 7;
          if (((v55 >> 27) & 1) != 0)
          {
            v95 = (int)v58;
            v96 = (_BYTE *)(v11 + 2 * (int)v58 + 6004);
            if (*v96 + 1 == v57 && *(_BYTE *)(v11 + (int)v58 + 5972))
            {
              v97 = v11 + 24 * (int)v58;
              v98 = *(_DWORD *)(v8 + 8);
              *(_QWORD *)(v97 + 6044) = *(_QWORD *)v8;
              *(_DWORD *)(v97 + 6052) = v98;
              if (!*(_DWORD *)(v11 + 6000))
              {
                v99 = *(_DWORD *)(a2 + 60);
                if (v99 >= 1)
                  *(_DWORD *)(v11 + 6000) = v99;
              }
              v100 = (_BYTE *)(v11 + 2 * v95);
              v100[6005] = v57;
              *(_BYTE *)(v11 + v95 + 5986) = v56;
              v100[6369] = *(_BYTE *)(a2 + 15);
              ++*(_BYTE *)(v11 + 6397);
              *(_DWORD *)(v11 + 4 * v95 + 6400) = *a5;
              if (!v100[6368] && !v100[6369])
                ++*(_BYTE *)(v11 + 6398);
            }
            else
            {
              if (g_Logging_Cfg >= 7)
              {
                if (*(_BYTE *)(v11 + (int)v58 + 5972))
                  result = (uint64_t)EvLog_v("DD_Proc_Glon_Alm_String:  String numbers not consecutive, 1stStrId %d  2ndStrId %d  FrqId %d  FrmId %d  StrId %d  glonALM_Str1:  0x%x ");
                else
                  result = (uint64_t)EvLog_v("DD_Proc_Glon_Alm_String:  Clk1 not Ready, FrqId %d  FrmId %d  StrId %d  Clk1_Ready %d ");
              }
              if (*v96)
                *v96 = 0;
            }
            goto LABEL_90;
          }
          if (v57 == 14
            && ((int)(*(_DWORD *)(a2 + 60) - 2 * ((v55 >> 27) & 0xF) + 15) / 30 % 5 + 1) == 5)
          {
            v59 = *(int *)(a6 + 4 * v58 + 17424);
            if ((_DWORD)v59 == 2139062143 || !*(_BYTE *)(v59 + *(_QWORD *)(a6 + 11912) - 1))
            {
              if (g_Logging_Cfg >= 5)
                result = (uint64_t)EvLog_v("DD_Proc_Glon_Alm_String:  Rejected:  Clk2 String,  SlotNum %d  FrqId %d  FrmId %d  StrId %d  glonALM_Str1:  0x%x ", v59, *(char *)(a2 + 58), 5, 14, *(_DWORD *)(v11 + 24 * (int)v58 + 6032));
              goto LABEL_90;
            }
LABEL_184:
            v105 = v11 + 24 * (int)v58;
            v106 = *(_QWORD *)v8;
            *(_DWORD *)(v105 + 6040) = *(_DWORD *)(v8 + 8);
            *(_QWORD *)(v105 + 6032) = v106;
            if (!*(_DWORD *)(v11 + 6000))
            {
              v107 = *(_DWORD *)(a2 + 60);
              if (v107 >= 1)
                *(_DWORD *)(v11 + 6000) = v107;
            }
            v108 = v11 + 2 * v58;
            *(_BYTE *)(v108 + 6004) = v57;
            *(_BYTE *)(v108 + 6368) = *(_BYTE *)(a2 + 15);
            ++*(_BYTE *)(v11 + 6396);
            *(_DWORD *)(v11 + 4 * v58 + 6400) = *a5;
            goto LABEL_90;
          }
          if (((v55 >> 19) & 0x1F) - 25 >= 0xFFFFFFE8)
          {
            v58 = (int)v58;
            goto LABEL_184;
          }
          result = (uint64_t)EvCrt_v("DD_Proc_Glon_Alm_String:  Rejected:  Invalid Slot %d  FrqId %d  FrmId %d  StrId %d  Word[0]: 0x%x ");
          goto LABEL_90;
        }
        v41 = *(_DWORD *)(a2 + 20);
        v42 = *(_DWORD *)(a2 + 24);
        v43 = HIWORD(*(_DWORD *)(a2 + 16)) & 0x7FF;
        HIDWORD(v45) = *(_DWORD *)(a2 + 16);
        LODWORD(v45) = v41;
        v44 = v45 >> 16;
        if (v44 < 0)
          v44 = (v44 ^ 0x7FFFFFFF) + 1;
        v46 = (v42 >> 20) & 0xFFC00FFF | ((v41 & 0x3FF) << 12);
        if ((v41 & 0x200) != 0)
          v46 = (v46 ^ 0xFFDFFFFF) + 1;
        if ((v43 - 1462) < 0xFFFFFA4B)
        {
          result = (uint64_t)EvCrt_v("DD_Proc_Glon_Clk1_String:  Rejected:  FrqId %d  NA = %d  - Out of range [1..1461]");
          goto LABEL_90;
        }
        v60 = 0;
        v61 = (_OWORD *)(a6 + 17112);
        v62 = (v41 >> 10) & 0x1F;
        v63 = (v42 >> 19) & 1;
        v64 = (_DWORD *)(v11 + 5600);
        v65 = 1;
        do
        {
          if (v44 == *(v64 - 2) && v46 == *v64 && (int)v62 - 2 < *((unsigned __int8 *)v64 - 4))
          {
            v66 = *((unsigned __int16 *)v64 - 6);
            v67 = __OFSUB__((_DWORD)v43, v66);
            LODWORD(result) = v43 - v66;
            result = (int)result < 0 != v67 ? (result + 1461) : result;
            if ((int)result < 4)
              break;
          }
          v65 = v60 < 0xD;
          v64 += 7;
          result = ++v60;
        }
        while (v60 != 14);
        v68 = *(char *)(a2 + 58) + 7;
        v69 = v11 + 28 * (int)v68;
        *(_DWORD *)(v69 + 5580) = *a5;
        v70 = (__int128 *)(v69 + 5580);
        *(_DWORD *)(v69 + 5584) = 0;
        *(_WORD *)(v69 + 5588) = v43;
        *(_DWORD *)(v69 + 5592) = v44;
        *(_BYTE *)(v69 + 5596) = v62;
        *(_DWORD *)(v69 + 5600) = v46;
        *(_BYTE *)(v69 + 5604) = v63;
        v71 = v65 || *(_BYTE *)(a2 + 15) == 0;
        *(_BYTE *)(v11 + v68 + 5972) = v71;
        if (*(_BYTE *)(a6 + 17192) || !v71)
        {
          if (!v65)
            goto LABEL_158;
          if (*(_BYTE *)(a6 + 17192))
          {
            if (*(unsigned __int8 *)(a6 + 17128) >= v62)
              goto LABEL_138;
            v80 = *(__int16 *)(a4 + 74) - (_DWORD)v62;
            if (v80 < 0)
              v80 = v62 - *(__int16 *)(a4 + 74);
            if (v80 >= 2)
            {
LABEL_138:
              if (*(unsigned __int16 *)(a6 + 17120) > v43)
                goto LABEL_158;
              v81 = *(__int16 *)(a4 + 76) - (_DWORD)v43;
              if (v81 < 0)
                v81 = v43 - *(__int16 *)(a4 + 76);
              if (v81 > 1)
              {
LABEL_158:
                if (g_Logging_Cfg >= 7)
                  result = (uint64_t)EvLog_nd("DD_Proc_Glon_Clk1_String:  Rejected: ", 6, (uint64_t)&unk_2579E5000, *(unsigned __int8 *)(a6 + 17128), *(unsigned __int16 *)(a6 + 17120), v62, v43, *(__int16 *)(a4 + 74), *(__int16 *)(a4 + 76));
                goto LABEL_90;
              }
            }
          }
          v82 = *v70;
          *(_OWORD *)(a6 + 17124) = *(_OWORD *)(v69 + 5592);
          *v61 = v82;
          v73 = a5;
          *(_DWORD *)v61 = *a5;
          *(_DWORD *)(a6 + 17116) = 4;
          v79 = 1;
          *(_BYTE *)(a6 + 17192) = 1;
          result = (uint64_t)EvVrb_v("DD_Proc_Glon_Clk1_String:  New Clk1:  FrqId %d  Source %d  GPS_secs %d  TauGPS %d");
        }
        else
        {
          v72 = *v70;
          *(_OWORD *)(a6 + 17124) = *(_OWORD *)(v69 + 5592);
          *v61 = v72;
          v73 = a5;
          *(_DWORD *)v61 = *a5;
          *(_DWORD *)(a6 + 17116) = 4;
          v74 = *(_DWORD *)(a6 + 17124);
          if (v74 >= 0)
            v75 = *(_DWORD *)(a6 + 17124);
          else
            v75 = -v74;
          v76 = *(_DWORD *)(a6 + 17132);
          if (v76 >= 0)
            v77 = *(_DWORD *)(a6 + 17132);
          else
            v77 = -v76;
          v79 = v75 < 0x865 && v77 < 0x433;
          if (v79)
            *(_BYTE *)(a6 + 17192) = 1;
          result = (uint64_t)EvVrb_v("DD_Proc_Glon_Clk1_String:  1st Clk1:  FrqId %d  Source %d  GPS_secs %d  TauGPS %d");
        }
        if (!*(_BYTE *)(a6 + 17192))
        {
LABEL_90:
          v47 = 0;
          LODWORD(v48) = 0;
          v49 = *(_QWORD *)(a6 + 11912);
          v50 = p_NV;
          v51 = *(_QWORD *)(v49 + 16);
          *(_OWORD *)(p_NV + 29172) = *(_OWORD *)v49;
          *(_QWORD *)(v50 + 29188) = v51;
          v52 = v50 + 29168;
          v53 = -9871;
          do
          {
            v54 = *(unsigned __int8 *)(v52 + v47) ^ HIBYTE(v53);
            v53 = -12691 * (v53 + (*(unsigned __int8 *)(v52 + v47) ^ HIBYTE(v53))) + 22719;
            v48 = (v48 + v54);
            ++v47;
          }
          while (v47 != 32);
          *(_QWORD *)(v50 + 29160) = v48;
          return result;
        }
        v83 = v73;
        v84 = *(__int16 *)(a4 + 76);
        v85 = *(unsigned __int16 *)(a6 + 17120);
        v86 = v84 - v85 + 1461;
        if (v84 - v85 >= -730)
          v86 = v84 - v85;
        if (v84 - v85 <= 729)
          v87 = v86;
        else
          v87 = v84 - v85 - 1461;
        if (v87 < 0)
          v87 = -v87;
        if (*(_BYTE *)(a4 + 72) && v87 >= 2)
        {
          *(_WORD *)(a4 + 74) = *(unsigned __int8 *)(a6 + 17128);
          *(_WORD *)(a4 + 76) = 0;
          *(_BYTE *)(a4 + 72) = 0;
          *(_BYTE *)(a4 + 97) = 1;
          goto LABEL_154;
        }
        v101 = *(unsigned __int16 *)(a4 + 76);
        v102 = *(unsigned __int8 *)(a6 + 17128);
        if (*(_BYTE *)(a4 + 72))
        {
          v103 = *(__int16 *)(a4 + 74);
          if ((_DWORD)v102 != v103)
          {
            if (v103 + 1 == (_DWORD)v102 && v101 == 1461)
            {
              result = (uint64_t)EvLog_nd("DD_Proc_Glon_Clk1_String:  4yrBlockNo roll-over ", 2, (uint64_t)&unk_2579E5000, *(__int16 *)(a4 + 74), v102);
              *(_WORD *)(a4 + 76) = 1;
            }
            else
            {
              result = (uint64_t)EvCrt_nd("DD_Proc_Glon_Clk1_String:  WARNING:  4yrBlockNo miss-match ", 2, (uint64_t)&unk_2579E5000, *(__int16 *)(a4 + 74), v102);
            }
            *(_WORD *)(a4 + 74) = *(unsigned __int8 *)(a6 + 17128);
            v83 = v73;
            if (!*(_BYTE *)(a4 + 72))
            {
LABEL_154:
              if (v79)
              {
                v88 = 0;
                LODWORD(v89) = 0;
                *(_DWORD *)v61 = *v83;
                *(_DWORD *)(a6 + 17116) = 4;
                v90 = p_NV;
                v91 = *(_OWORD *)(a6 + 17124);
                *(_OWORD *)(p_NV + 29208) = *v61;
                *(_OWORD *)(v90 + 29220) = v91;
                v92 = v90 + 29208;
                v93 = -9871;
                do
                {
                  v94 = *(unsigned __int8 *)(v92 + v88) ^ HIBYTE(v93);
                  v93 = -12691 * (v93 + (*(unsigned __int8 *)(v92 + v88) ^ HIBYTE(v93))) + 22719;
                  v89 = (v89 + v94);
                  ++v88;
                }
                while (v88 != 32);
                *(_QWORD *)(v90 + 29200) = v89;
              }
              goto LABEL_90;
            }
          }
LABEL_198:
          if (*(_BYTE *)(a4 + 16) && *(_DWORD *)a4)
            goto LABEL_209;
          *(_QWORD *)v115 = 0;
          v120 = 0;
          v119 = 0;
          v118 = 0.0;
          v109 = v83;
          API_Get_UTC_Cor(1, (double *)v115);
          Glon_To_GPS_Time(*(__int16 *)(a4 + 74), *(__int16 *)(a4 + 76), *(double *)(a4 + 80), *(double *)v115, &v120, &v119, &v118);
          result = (uint64_t)DD_Submit_WeekNum((_QWORD *)*(char *)(a2 + 58), v120, (__int16)v119, (double *)a4, v118);
          v83 = v109;
          if (!*v109)
          {
            v110 = *(_QWORD *)(p_api + 48);
            if (*(_BYTE *)(v110 + 16) && *(int *)v110 >= 3)
              v111 = (int)*(double *)(v110 + 32) + 604800 * *(__int16 *)(v110 + 28);
            else
              v111 = 0;
            *v109 = v111;
          }
          if (*(_BYTE *)(a4 + 72) && *(_BYTE *)(a4 + 16) && *(_DWORD *)a4)
          {
LABEL_209:
            v112 = *(double *)(a4 + 32);
            if (v112 > 31.0 && v112 < 604769.0)
            {
              v113 = v83;
              *(_QWORD *)v115 = 0;
              v120 = 0;
              v119 = 0;
              API_Get_UTC_Cor(1, (double *)v115);
              result = Glon_To_GPS_Time(*(__int16 *)(a4 + 74), *(__int16 *)(a4 + 76), *(double *)(a4 + 80), *(double *)v115, &v120, &v119, &v118);
              v114 = v119 + (v120 << 10);
              if (v114 != *(__int16 *)(a4 + 28))
              {
                result = (uint64_t)EvCrt_v("DD_Proc_Glon_Clk1_String:  WARNING:  GLONASS Date Spoofing suspected, 4yrBlk %d  Day %d  Wk  %d != %d  FreqId %d", *(__int16 *)(a4 + 74), *(__int16 *)(a4 + 76), v114, *(__int16 *)(a4 + 28), *(char *)(a2 + 58));
                *(_BYTE *)(a4 + 72) = 0;
                *(_DWORD *)(a4 + 74) = 0;
                *(_BYTE *)(a4 + 97) = 1;
              }
              v83 = v113;
            }
          }
          goto LABEL_154;
        }
        *(_WORD *)(a4 + 74) = v102;
        if ((__int16)v101 < 1)
          goto LABEL_154;
        if (v101 == 1461)
        {
          if (v85 != 1)
          {
LABEL_197:
            *(_BYTE *)(a4 + 72) = 1;
            goto LABEL_198;
          }
          v104 = -1;
        }
        else
        {
          if (v101 != 1 || v85 != 1461)
            goto LABEL_197;
          v104 = 1;
        }
        *(_WORD *)(a4 + 74) = v104 + v102;
        goto LABEL_197;
      }
    }
    if (!*(_BYTE *)(a2 + 15))
      ++*(_BYTE *)(result + v12 + 4706);
    if ((_DWORD)v13 == 2139062143)
    {
      return (uint64_t)EvLog_v("DD_Proc_GLON_Data:  Health H->U Imm:  Slot ?  FrqId %d  String %d  Suspect_Bits %d  Bad_Cnt %d   (Ignored, no Slot)");
    }
    else
    {
      if (!*(_BYTE *)(a2 + 15))
      {
        v22 = (unsigned __int8 *)(result + v12 + 4706);
        if (*v22 >= 2u)
        {
          v23 = *(_QWORD *)(a6 + 11912);
          if (v14[v23])
          {
            v14[v23] = 0;
            result = (uint64_t)EvLog_v("DD_Proc_GLON_Data:  Health H->U Imm:  Slot %d  FrqId %d  String %d  Suspect_Bits %d  Bad_Cnt %d", (_DWORD)v13, *(char *)(a2 + 58), *(unsigned __int8 *)(a2 + 59), 0, *v22);
            *(_DWORD *)(*(_QWORD *)(a6 + 11920) + 20 * (_QWORD)v14) = 2;
          }
        }
      }
      if (v14[*(_QWORD *)(a6 + 11912)])
        return (uint64_t)EvLog_v("DD_Proc_GLON_Data:  Health H->U Imm:  Slot %d  FrqId %d  String %d  Suspect_Bits %d  Bad_Cnt %d  (Waiting Confirmation)");
    }
  }
  return result;
}

char *DD_Proc_Glon_Eph_Bit_Validation(char *result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  char *v15;
  char v16;
  unsigned int v17;
  int v18;
  int v19;

  v4 = ((_DWORD)result - 1);
  v5 = a2 - 1;
  if (v4 <= 0x17 && v5 <= 3)
  {
    v9 = (int)result;
    v10 = 0;
    v11 = 3 * v5;
    v12 = a4 + (v4 << 6);
    v13 = v12 + 12 * v5 + 11940;
    v14 = (_WORD *)(v12 + 11988);
    v15 = (char *)&MaskToStrCheck + 12 * v5;
    v16 = 3 * a2 - 3;
    do
    {
      v17 = (unsigned __int16)*v14;
      if (((v17 >> (v16 + v10)) & 1) == 0)
      {
        v18 = *(_DWORD *)(a3 + 4 * v10);
        v19 = *(_DWORD *)&v15[4 * v10];
        if (((*(_DWORD *)(v13 + 4 * v10) ^ v18) & v19) != 0)
          result = EvDbg_v("DD_Proc_Glon_Eph_Bit_Validation:  Fail SV %d  St %d  Wd %d  0x%x 0x%x 0x%x", v9, a2, v10, v18, *(_DWORD *)(v13 + 4 * v10), v19);
        else
          *v14 = v17 | (1 << (v11 + v10));
      }
      ++v10;
    }
    while (v10 != 3);
  }
  return result;
}

char *DD_Proc_Glon_Eph_String(char *result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  int v22;
  int v23;
  char *v24;
  unsigned int v25;
  int v26;
  int *v27;
  uint64_t v28;
  int v29;
  _BYTE *v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  unsigned int v42;
  double v43;
  int v44[2];
  double v45[2];

  v8 = result;
  v45[1] = *(double *)MEMORY[0x24BDAC8D0];
  v9 = (char)(*(_BYTE *)(a2 + 58) + 7);
  v10 = &result[4 * v9 + 4724];
  v11 = (*(_BYTE *)(a2 + 59) - 1);
  v12 = &v10[v11];
  v13 = v10[v11];
  if (v10[v11])
  {
    if (((*(_DWORD *)&result[48 * (char)(*(_BYTE *)(a2 + 58) + 7)
                            + 4780
                            + 12 * (*(_BYTE *)(a2 + 59) - 1)] ^ *(_DWORD *)(a2 + 16)) & MaskToStrCheck[3 * *(unsigned __int8 *)(a2 + 59) - 3]) != 0)
    {
      v13 = 0;
    }
    else
    {
      v14 = 0;
      do
      {
        v15 = v14;
        if (v14 == 2)
          break;
        v16 = MaskToStrCheck[3 * *(unsigned __int8 *)(a2 + 59) - 2 + v14];
        v17 = *(_DWORD *)&result[48 * (char)(*(_BYTE *)(a2 + 58) + 7)
                               + 4784
                               + 12 * (*(_BYTE *)(a2 + 59) - 1)
                               + 4 * v14] ^ *(_DWORD *)(a2 + 20 + 4 * v14);
        ++v14;
      }
      while ((v17 & v16) == 0);
      v13 = v15 > 1;
    }
  }
  v18 = (uint64_t)&result[48 * (char)(*(_BYTE *)(a2 + 58) + 7) + 4780 + 12 * (*(_BYTE *)(a2 + 59) - 1)];
  v19 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(v18 + 8) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)v18 = v19;
  v20 = &result[4 * v9];
  v20[v11 + 5452] = *(_BYTE *)(a2 + 15);
  *((_DWORD *)v20 + 1381) = *a5;
  if (v13)
    v21 = *v12 + 1;
  else
    v21 = 1;
  *v12 = v21;
  if (!*((_DWORD *)result + 1180))
  {
    v22 = *(_DWORD *)(a2 + 60);
    if (v22 >= 1)
      *((_DWORD *)result + 1180) = v22;
  }
  v23 = *(unsigned __int8 *)(a2 + 59);
  if (v23 == 1)
  {
    if ((*(_WORD *)&result[48 * (int)v9 + 4782] & 0x180) == 0)
      goto LABEL_46;
    *(_DWORD *)v10 = 1;
    v23 = *(unsigned __int8 *)(a2 + 59);
  }
  if (v23 != 4)
    goto LABEL_46;
  v24 = &result[4 * v9 + 4727];
  v25 = *v24;
  if (!*v24)
    goto LABEL_24;
  v26 = (*(_DWORD *)&result[48 * (int)v9 + 4824] >> 21) & 0x1F;
  if ((v26 - 1) > 0x17)
  {
    *(_DWORD *)v10 = 0;
    return EvCrt_v("DD_Proc_Glon_Eph_String:  WARNING:  FrqId %d  Illegal SlotId %d !", *(char *)(a2 + 58), v26);
  }
  v27 = (int *)(a3 + 4 * v9 + 17424);
  v28 = a3 + 4 * (v26 - 1);
  if (*v27 != 2139062143 && *(_DWORD *)(v28 + 17328) != 2139062143)
  {
LABEL_31:
    v30 = (_BYTE *)(a4 + 72);
    v29 = *(unsigned __int8 *)(a4 + 72);
    v31 = *(_BYTE *)(a4 + 72) == 0;
    if (v25 > 1)
      goto LABEL_32;
    goto LABEL_25;
  }
  if (v25 > 1 || !result[4 * v9 + 5455])
  {
    *(_DWORD *)(v28 + 17328) = v9 - 7;
    *v27 = v26;
    *(_DWORD *)(a3 + 4 * v9 + 17480) = 2;
    result = EvLog_v("DD_Proc_Glon_Eph_String:  Set Slot Num %d for FreqId %d  (Str 4)", v26, *(_DWORD *)(v28 + 17328));
    if (*(_BYTE *)(a2 + 59) != 4)
      goto LABEL_46;
    v25 = *v24;
    goto LABEL_31;
  }
LABEL_24:
  v30 = (_BYTE *)(a4 + 72);
  v29 = *(unsigned __int8 *)(a4 + 72);
LABEL_25:
  if (v29 || *(_BYTE *)(a2 + 15))
    goto LABEL_46;
  v31 = 1;
LABEL_32:
  v32 = *(__int16 *)(a4 + 76);
  v33 = (*(_DWORD *)&v8[48 * (int)v9 + 4824] >> 26) & 0xFFFFF83F | ((*(_DWORD *)&v8[48 * (int)v9 + 4820] & 0x1F) << 6);
  *(_WORD *)(a4 + 76) = (*(_DWORD *)&v8[48 * (int)v9 + 4824] >> 26) & 0x3F | ((*(_WORD *)&v8[48 * (int)v9 + 4820] & 0x1F) << 6);
  if (v31)
  {
    if (*(__int16 *)(a4 + 74) >= 1)
    {
      *v30 = 1;
      result = (char *)EvLog_nd("DD_Proc_Glon_Eph_String:  New DayNo ", 2, a3, v33, *(char *)(a2 + 58));
    }
  }
  else
  {
    if ((_DWORD)v32 == (_DWORD)v33)
      goto LABEL_38;
    *v30 = 0;
    result = (char *)EvCrt_nd("DD_Proc_Glon_Eph_String:  WARNING:  DayNo miss-match", 3, a3, v33, v32, *(char *)(a2 + 58));
  }
  if (*v30)
  {
LABEL_38:
    if (!*(_BYTE *)(a4 + 16) || !*(_DWORD *)a4)
    {
      *(_QWORD *)v44 = 0;
      v45[0] = 0.0;
      v43 = 0.0;
      API_Get_UTC_Cor(1, v45);
      Glon_To_GPS_Time(*(__int16 *)(a4 + 74), *(__int16 *)(a4 + 76), *(double *)(a4 + 80), v45[0], &v44[1], v44, &v43);
      result = (char *)DD_Submit_WeekNum((_QWORD *)*(char *)(a2 + 58), v44[1], SLOWORD(v44[0]), (double *)a4, v43);
      if (!*a5)
      {
        v34 = *(_QWORD *)(p_api + 48);
        if (*(_BYTE *)(v34 + 16) && *(int *)v34 >= 3)
          v35 = (int)*(double *)(v34 + 32) + 604800 * *(__int16 *)(v34 + 28);
        else
          v35 = 0;
        *a5 = v35;
      }
    }
  }
LABEL_46:
  v36 = *v10;
  if (*v10)
  {
    v37 = &v8[4 * v9];
    if (v37[4725])
    {
      if (v37[4726])
      {
        v38 = &v8[4 * v9];
        if (v38[4727])
        {
          v39 = 0;
          v40 = &v8[v9 + 5508];
          *v40 = v36;
          v41 = v38 + 4725;
          do
          {
            v42 = v41[v39];
            if (v42 < v36)
            {
              *v40 = v42;
              v36 = v42;
            }
            ++v39;
          }
          while (v39 != 3);
        }
      }
    }
  }
  return result;
}

uint64_t DD_Save_New_GLON_Alm(uint64_t result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  __int128 v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  int *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  int v57;
  char *v58;
  int v59;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  _BYTE v68[16];
  _OWORD v69[3];
  uint64_t v70;
  _BYTE v71[16];
  _OWORD v72[3];
  uint64_t v73;
  uint64_t v74;

  v3 = a2;
  v74 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned __int8 *)(a3 + 6005);
  if (*(unsigned __int8 *)(a3 + 6397) <= 1u && !*(_BYTE *)(a3 + 6398))
    return result;
  v5 = 0;
  memset(v69, 0, sizeof(v69));
  v70 = 0;
  memset(v71, 0, 14);
  memset(v68, 0, 14);
  *(_QWORD *)&v6 = 0x7F7F7F7F7F7F7F7FLL;
  *((_QWORD *)&v6 + 1) = 0x7F7F7F7F7F7F7F7FLL;
  v72[0] = v6;
  v72[1] = v6;
  v73 = 0x7F7F7F7F7F7F7F7FLL;
  v7 = (unsigned __int8 *)(a3 + 6005);
  v8 = 2139062143;
  v72[2] = v6;
  do
  {
    v9 = *(v7 - 1);
    if ((v9 - 6) <= 8 && v9 + 1 == *v7 && *(_BYTE *)(a3 + 5972 + v5))
    {
      if ((_DWORD)v8 == 2139062143)
        v8 = v5;
      else
        v8 = v8;
      v71[v5] = 1;
    }
    v7 += 2;
    ++v5;
  }
  while (v5 != 14);
  v10 = (int *)&unk_257A47000;
  if ((_DWORD)v8 == 2139062143)
  {
    if (g_Logging_Cfg >= 7)
      result = (uint64_t)EvLog("DD_Check_GLON_Alm:  No valid Freq Id Channels for Cross-Checking Almanacs");
    goto LABEL_94;
  }
  v59 = result;
  v11 = 0;
  v12 = 0;
  *((_DWORD *)v69 + (int)v8) = 1;
  v61 = a3 + 6056;
  result = (uint64_t)v71;
  v13 = 1;
  v66 = a3;
  v62 = (unsigned __int8 *)(a3 + 6005);
  while ((int)v8 >= 13)
  {
    v25 = v13 - 1;
    v19 = 1;
    v21 = v8;
    v14 = v8;
LABEL_42:
    if (*(_BYTE *)(a3 + v14 + 5986) != 5 || *(_BYTE *)(a3 + 2 * v14 + 6004) != 14)
    {
      v26 = a3 + 2 * v14;
      if (!*(_BYTE *)(v26 + 6368) && !*(_BYTE *)(v26 + 6369))
      {
        if (v4[392] == v19)
          goto LABEL_72;
        v27 = ((*(_DWORD *)(a3 + 24 * v14 + 6032) >> 19) & 0x1F) - 1;
        if (v27 <= 0x17 && !*(_BYTE *)(a2[2148] + v27))
LABEL_40:
          v68[v25] = 1;
      }
    }
    if (v68[v25])
    {
      *((_DWORD *)v72 + v25) = v8;
      ++v11;
    }
    if ((_DWORD)v21 != (_DWORD)v8)
    {
      v12 += v19;
      *((_DWORD *)v69 + (int)v21) = ++v13;
      v8 = v21;
      if (v12 <= v4[392])
        continue;
    }
    v3 = a2;
    if (v11 >= 1)
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = (v13 + 1) - 1;
      do
      {
        if (v68[v28])
        {
          v8 = *((int *)v72 + v28);
          v33 = *(unsigned __int16 *)(a3 + 28 * (int)v8 + 5588);
          if (v30)
          {
            result = (v33 - v31 - 1461);
            v34 = v33 - v31 + 1461;
            if (v33 - v31 >= -730)
              v34 = v33 - v31;
            if (v33 - v31 <= 730)
              v35 = v34;
            else
              v35 = v33 - v31 - 1461;
            if (v35 <= 0)
              v8 = v29;
            else
              v8 = v8;
            if (v35 > 0)
              v31 = v33;
          }
          else
          {
            v30 = v28 + 1;
            v31 = *(unsigned __int16 *)(a3 + 28 * (int)v8 + 5588);
          }
        }
        else
        {
          v8 = v29;
        }
        ++v28;
        v29 = v8;
      }
      while (v32 != v28);
      goto LABEL_73;
    }
    goto LABEL_94;
  }
  v63 = v13;
  v64 = v12;
  v65 = v11;
  v14 = (int)v8;
  v15 = (unsigned __int8 *)(a3 + (int)v8 + 5986);
  v16 = (unsigned __int8 *)(a3 + 2 * (int)v8 + 6004);
  v17 = (_DWORD *)(a3 + 24 * (int)v8 + 6032);
  v18 = v61 + 24 * (int)v8;
  v19 = 1;
  v20 = (int)v8;
  v21 = v8;
  do
  {
    v22 = v20++;
    if (v71[v20] && *((int *)v69 + v20) <= 0)
    {
      if (*v15 == 5 && *v16 == 14 && *(_BYTE *)(a3 + v20 + 5986) == 5 && *(_BYTE *)(a3 + 2 * v20 + 6004) == 14)
      {
        if (((*(_DWORD *)(a3 + 24 * v20 + 6032) ^ *v17) & 0x78000030) == 0)
        {
LABEL_36:
          *((_DWORD *)v69 + v20) = *((_DWORD *)v69 + (int)v8);
          ++v19;
          goto LABEL_20;
        }
      }
      else
      {
        v24 = 0;
        while (((*(_DWORD *)(v18 + v24 * 4) ^ v17[v24]) & MaskToAlmCheck[v24]) == 0
             && ((*(_DWORD *)(v18 + v24 * 4 + 12) ^ v17[v24 + 3]) & MaskToAlmCheck[v24 + 3]) == 0)
        {
          if (++v24 == 3)
            goto LABEL_36;
        }
      }
      if ((_DWORD)v21 == (_DWORD)v8)
        v21 = v20;
      else
        v21 = v21;
      if (v10[692] >= 7)
      {
        v23 = v10;
        v67 = v21;
        EvLog_v("DD_Check_GLON_Alm:  Different Almanacs, FrqId_1 %d  FrqId_2 %d  FramId %d  StrId %d ", v8 - 7, v22 - 6, *v15, *v16);
        v21 = v67;
        result = (uint64_t)v71;
        v10 = v23;
        a3 = v66;
      }
    }
LABEL_20:
    v18 += 24;
  }
  while (v20 != 13);
  v13 = v63;
  v25 = v63 - 1;
  if (v19 < 2u)
  {
    v4 = v62;
    v12 = v64;
    v11 = v65;
    goto LABEL_42;
  }
  v4 = v62;
  v12 = v64;
  v11 = v65;
  if (v62[392] != v19)
    goto LABEL_40;
LABEL_72:
  v3 = a2;
LABEL_73:
  v36 = (int)v8;
  v37 = (unsigned __int8 *)(a3 + (int)v8 + 5986);
  v38 = *v37;
  if (v38 == 5 && *(_BYTE *)(a3 + 2 * (int)v8 + 6004) == 14)
    goto LABEL_78;
  v39 = a3 + 24 * (int)v8;
  v40 = (*(_DWORD *)(v39 + 6032) >> 19) & 0x1F;
  if ((v40 - 25) <= 0xFFFFFFE7)
  {
    result = (uint64_t)EvCrt_v("DD_Validate_GLON_Alm:  Rejected:  FrqCh %d   Slot Number %d - Out of range", (int)v8 - 7, v40);
    goto LABEL_77;
  }
  v41 = (v40 - 1);
  v42 = v3[2148];
  if (*(_BYTE *)(v42 + v41))
  {
    v43 = *(unsigned __int16 *)(a3 + 28 * (int)v8 + 5588) - *((unsigned __int16 *)v3 + 18 * v41 + 8128);
    v44 = v43 - 1461;
    if (v43 <= 730)
      v44 = *(unsigned __int16 *)(a3 + 28 * (int)v8 + 5588)
          - *((unsigned __int16 *)v3 + 18 * v41 + 8128);
    v45 = v43 >= -730 ? v44 : v43 + 1461;
    if (v45 <= 0)
    {
      if (v59 >= 1 && !v45 && (v38 != 5 || *(_BYTE *)(a3 + 2 * (int)v8 + 6004) != 14 && v41 <= 0x17))
      {
        v58 = (char *)v3 + 36 * v41;
        if (!*((_DWORD *)v58 + 4062))
        {
          *((_DWORD *)v58 + 4062) = v59;
          *((_DWORD *)v3 + 9 * v41 + 4063) = 4;
          result = Core_Save_GLON_Alm(v40, 0, (__int128 *)(v58 + 16248));
LABEL_77:
          a3 = v66;
        }
      }
LABEL_78:
      if (v4[392] == v4[391])
        goto LABEL_93;
      goto LABEL_94;
    }
  }
  if (v38 != 5 || *(_BYTE *)(a3 + 2 * (int)v8 + 6004) != 14)
  {
    v46 = (uint64_t)v3 + 36 * v41 + 16248;
    v47 = *(_OWORD *)(v39 + 6032);
    *(_QWORD *)(v46 + 28) = *(_QWORD *)(v39 + 6048);
    *(_OWORD *)(v46 + 12) = v47;
    if (v10[692] >= 7)
    {
      EvLog_v("DD_Save_New_GLON_Alm:  New Alm  Slot %d  FrqId %d  FramId %d  StrId %d  Suspect_Bits %d %d  Word[0] 0x%x  NA_Clk1 %d  NA_DBnmAlm  %d ", v40, v36 + 65, *v37, *(unsigned __int8 *)(a3 + 2 * v36 + 6004), *(unsigned __int8 *)(a3 + 2 * v36 + 6368), *(unsigned __int8 *)(a3 + 2 * v36 + 6369), *(_DWORD *)(v39 + 6032), *(unsigned __int16 *)(a3 + 28 * (int)v36 + 5588), *((unsigned __int16 *)v3 + 18 * v41 + 8128));
      a3 = v66;
      v42 = v3[2148];
    }
    v48 = (char *)v3 + 36 * v41;
    *((_WORD *)v48 + 8128) = *(_WORD *)(a3 + 28 * (int)v36 + 5588);
    *(_DWORD *)v46 = v59;
    *((_DWORD *)v48 + 4063) = 4;
    *(_BYTE *)(v3[2144] + v41) = 1;
    *(_BYTE *)(v42 + v41) = 1;
    result = DD_GLON_Alm_Set_Health_Frq((uint64_t)(v48 + 16248), v3);
    a3 = v66;
    if (v59 >= 1)
    {
      result = Core_Save_GLON_Alm(v40, 0, (__int128 *)((char *)v3 + 36 * v41 + 16248));
      a3 = v66;
    }
  }
LABEL_93:
  *(_DWORD *)(a3 + 6028) = 0;
  *(_QWORD *)(a3 + 6020) = 0;
  *(_OWORD *)(a3 + 6004) = 0u;
  v4[393] = 0;
  *(_WORD *)(v4 + 391) = 0;
LABEL_94:
  v49 = 0;
  LODWORD(v50) = 0;
  v51 = v3[1489];
  v52 = p_NV;
  v53 = p_NV + 29160;
  v54 = *(_QWORD *)(v51 + 16);
  *(_OWORD *)(p_NV + 29172) = *(_OWORD *)v51;
  *(_QWORD *)(v53 + 28) = v54;
  v55 = v52 + 29168;
  v56 = -9871;
  do
  {
    v57 = *(unsigned __int8 *)(v55 + v49) ^ HIBYTE(v56);
    v56 = -12691 * (v56 + (*(unsigned __int8 *)(v55 + v49) ^ HIBYTE(v56))) + 22719;
    v50 = (v50 + v57);
    ++v49;
  }
  while (v49 != 32);
  *(_QWORD *)(v52 + 29160) = v50;
  return result;
}

void DD_Save_New_GLON_Eph(int a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _OWORD *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int *v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  int v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64x2_t v44;
  double v45;
  uint64_t v46;
  unint64_t v47;
  double v48;
  int64x2_t v49;
  double v50;
  uint64_t v51;
  unint64_t v52;
  double v53;
  double v54;
  uint64_t v55;
  unint64_t v56;
  double v57;
  int v58;
  char *v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 *v68;
  __int16 v69;
  uint64_t v70;
  int v71;
  char *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int16 v82;
  int v83;
  uint64_t v84;
  double v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  float64x2_t v90;
  float64x2_t v91;
  __int128 v95;
  __int128 v96;
  _DWORD v97[8];
  _OWORD v98[4];
  _OWORD v99[4];
  double v100[3];
  float64x2_t v101;
  double v102;
  float64x2_t v103;
  double v104;
  uint64_t v105;

  v105 = *MEMORY[0x24BDAC8D0];
  if (a1 >= 1)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = (a1 + 10800) / 0x15180u;
    v12 = (a1 + 10800) % 0x15180u;
    v13 = ((22967 * (__int16)(v11 - 5839)) >> 25) + ((22967 * (__int16)(v11 - 5839)) >> 31);
    v14 = v11 - 1461 * v13 - 5838;
    v15 = v13 + 1;
    v16 = a4 + 11928;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(a4 + 17168) + v9))
      {
        v17 = *(_QWORD *)(a4 + 17200);
        if (!*(_BYTE *)(v17 + v9))
        {
          v18 = v8 == 0;
          if (v8)
            v19 = v7;
          else
            v19 = v14;
          if (!v8)
            v8 = v15;
          if (v18)
            v10 = v12;
          v20 = (*(_DWORD *)(v16 + 56) >> 26) & 0xFFFFF83F | ((*(_DWORD *)(v16 + 52) & 0x1F) << 6);
          v21 = *(_WORD *)(v16 + 26) & 0x7F;
          *(_BYTE *)(v17 + v9) = 1;
          if ((int)(v20 - v19) <= 730)
            v7 = v19;
          else
            v7 = v19 + 1461;
          *(_DWORD *)v16 = a1
                         - ((v10 - 900 * v21 + 86400 * (v7 - v20)) & ~((int)(v10 - 900 * v21 + 86400 * (v7 - v20)) >> 31));
          *(_DWORD *)(v16 + 4) = 4;
          Core_Save_GLON_Eph((v9 + 1), 0, (__int128 *)v16);
        }
      }
      ++v9;
      v16 += 64;
    }
    while (v9 != 24);
  }
  v22 = 0;
  v89 = (char)((2 * (a3 / 1800)) | 1);
  v23 = a5;
  v24 = a5 + 5453;
  v91 = (float64x2_t)vdupq_n_s64(0x3FDF400000000000uLL);
  v90 = (float64x2_t)vdupq_n_s64(0x3F4F400000000000uLL);
  do
  {
    v25 = (_BYTE *)(v23 + v22 + 5508);
    if (!*v25)
      goto LABEL_62;
    v96 = 0u;
    memset(v97, 0, 30);
    v95 = 0u;
    memset(&v99[1], 0, 46);
    v99[0] = 0u;
    v26 = (_OWORD *)(v23 + 48 * v22 + 4780);
    v27 = *(_OWORD *)(v23 + 48 * v22 + 4796);
    *(_OWORD *)((char *)v99 + 12) = *v26;
    *(_OWORD *)((char *)&v99[1] + 12) = v27;
    *(_OWORD *)((char *)&v99[2] + 12) = *(_OWORD *)(v23 + 48 * v22 + 4812);
    GLON_EphBin2Int((uint64_t)v99, (uint64_t)&v95, *(int32x4_t *)((char *)&v99[2] + 12));
    v28 = 0;
    v29 = SBYTE12(v95);
    v30 = BYTE12(v95);
    LOBYTE(v31) = *(_BYTE *)(v23 + 4 * v22 + 5452);
    do
    {
      if (*(unsigned __int8 *)(v24 + v28) <= v31)
        v31 = v31;
      else
        v31 = *(unsigned __int8 *)(v24 + v28);
      ++v28;
    }
    while (v28 != 3);
    v32 = SBYTE12(v95) - 1;
    if (*v25 >= 2u)
    {
      v33 = *(_DWORD *)(a4 + 4 * v22 + 17424);
LABEL_26:
      v34 = (int *)(a4 + 4 * v22 + 17424);
      v35 = (int)v32;
      v36 = SBYTE12(v95);
      v37 = BYTE12(v95);
      if (v33 != (_DWORD)v29)
      {
LABEL_27:
        v38 = SBYTE12(v95) - 1;
        v39 = BYTE12(v95);
        EvLog_v("DD_Save_New_GLON_Eph:  Set Slot Num %d for FreqId %d  (Eph)", SBYTE12(v95), *(_DWORD *)(a4 + 4 * v35 + 17328));
        v30 = v39;
        v32 = v38;
        v36 = SBYTE12(v95);
        v37 = BYTE12(v95);
      }
      *(_DWORD *)(a4 + 4 * v35 + 17328) = v22 - 7;
      *v34 = v29;
      goto LABEL_29;
    }
    if (*(_BYTE *)(*(_QWORD *)(a4 + 17176) + v32) || *(unsigned __int8 *)(*(_QWORD *)(a4 + 17168) + v32) | v31)
    {
      v40 = (_DWORD *)(a4 + 4 * v22 + 17424);
      if (*v40 == 2139062143 || *(_DWORD *)(a4 + 4 * v32 + 17328) == 2139062143)
      {
        v41 = v23 + 4 * v22;
        if (*(unsigned __int8 *)(v41 + 4727) > 1u || !*(_BYTE *)(v41 + 5455))
        {
          v42 = a4 + 4 * v32;
          *(_DWORD *)(v42 + 17328) = v22 - 7;
          *v40 = v29;
          *(_DWORD *)(a4 + 4 * v22 + 17480) = 2;
          EvLog_v("DD_Save_New_GLON_Eph:  Set Slot Num %d for FreqId %d  (Str 4)", v29, *(_DWORD *)(v42 + 17328));
        }
      }
      goto LABEL_61;
    }
    v34 = (int *)(a4 + 4 * v22 + 17424);
    v33 = *v34;
    v35 = SBYTE12(v95) - 1;
    if (*v34 == 2139062143)
      goto LABEL_27;
    if (*(_DWORD *)(a4 + 4 * v32 + 17328) == 2139062143)
      goto LABEL_26;
    v36 = SBYTE12(v95);
    v37 = BYTE12(v95);
LABEL_29:
    *(_DWORD *)(a4 + 4 * v22 + 17480) = 2;
    v23 = a5;
    if ((v37 - 25) <= 0xE7u)
    {
      if (g_Logging_Cfg >= 5)
        EvCrt_v("DD_Validate_GLON_Eph:  Rejected:  Invalid Out-of-range GLON Slot Num %d");
      goto LABEL_61;
    }
    if (a2 < 4 || (*(_DWORD *)(a4 + 8972) - 1) > 5 || v89 == BYTE13(v95))
    {
      v43 = (v36 - 1);
      v44.i64[0] = SHIDWORD(v96);
      v44.i64[1] = v97[0];
      v103 = vmulq_f64(vcvtq_f64_s64(v44), v91);
      v104 = (double)v97[1] * 0.48828125;
      v45 = 0.0;
      v46 = 2;
      do
      {
        v45 = v45 + v103.f64[v46] * v103.f64[v46];
        v47 = v46-- + 1;
      }
      while (v47 > 1);
      v48 = sqrt(v45);
      if (v48 < 25200000.0 || v48 > 25800000.0)
      {
        v85 = v48;
        v84 = v37;
        v59 = "DD_Validate_GLON_Eph:  Rejected:  SV Pos check, R %d  Mag_Pos %g";
      }
      else
      {
        v49.i64[0] = v97[2];
        v49.i64[1] = v97[3];
        v101 = vmulq_f64(vcvtq_f64_s64(v49), v90);
        v102 = (double)v97[4] * 0.000953674316;
        v50 = 0.0;
        v51 = 2;
        do
        {
          v50 = v50 + v101.f64[v51] * v101.f64[v51];
          v52 = v51-- + 1;
        }
        while (v52 > 1);
        v53 = sqrt(v50);
        if (v53 >= 2720.0 && v53 <= 4000.0)
        {
          v100[0] = (double)SLOBYTE(v97[5]) * 0.000000931322575;
          v100[1] = (double)SBYTE1(v97[5]) * 0.000000931322575;
          v100[2] = (double)SBYTE2(v97[5]) * 0.000000931322575;
          v54 = 0.0;
          v55 = 2;
          do
          {
            v54 = v54 + v100[v55] * v100[v55];
            v56 = v55-- + 1;
          }
          while (v56 > 1);
          v87 = v43;
          v57 = sqrt(v54);
          v86 = v30;
          if (v57 <= 0.000009)
          {
            if ((unsigned __int16)v96 - 1462 > 0xFFFFFA4A)
            {
              if (*(_BYTE *)(*(_QWORD *)(a4 + 17168) + v43))
              {
                memset(v98, 0, 62);
                GLON_EphBin2Int(a4 + (v43 << 6) + 11928, (uint64_t)v98, (int32x4_t)0);
                v61 = BYTE13(v95);
                v62 = BYTE13(v98[0]);
                if (BYTE13(v95) != BYTE13(v98[0]) && g_Logging_Cfg >= 7)
                  EvLog_v("DD_Validate_GLON_Eph:  New Eph SV %d  new Tb %d  existing Tb%d", SBYTE12(v95), BYTE13(v95), BYTE13(v98[0]));
                if (v61 == v62)
                {
                  v63 = *(unsigned __int16 *)(a4 + (v87 << 6) + 11988);
                  v23 = a5;
                  if (v63 == 4095)
                  {
                    v58 = 1;
                    goto LABEL_91;
                  }
                  if (g_Logging_Cfg >= 5)
                    EvLog_v("DD_Validate_GLON_Eph:  (Adopted) Eph Binary difference with same tb SV %d tb %d checked 0x%x", SBYTE12(v95), BYTE13(v95), v63);
                  v88 = 1;
                }
                else
                {
                  v88 = 0;
                  v23 = a5;
                }
              }
              else
              {
                v88 = 0;
              }
              v64 = a4 + (v32 << 6);
              v65 = *v26;
              v66 = v26[1];
              v67 = v26[2];
              v68 = (__int128 *)(v64 + 11928);
              *(_OWORD *)(v64 + 11972) = v67;
              *(_OWORD *)(v64 + 11956) = v66;
              *(_OWORD *)(v64 + 11940) = v65;
              *(_DWORD *)(v64 + 11928) = a1;
              *(_DWORD *)(v64 + 11932) = 4;
              if (*v25 <= 1u)
                v69 = 0;
              else
                v69 = 4095;
              *(_WORD *)(v64 + 11988) = v69;
              *(_DWORD *)(v64 + 11936) = v22 - 7;
              *(_BYTE *)(*(_QWORD *)(a4 + 17168) + v32) = 1;
              *(_BYTE *)(*(_QWORD *)(a4 + 17216) + v32) = 0;
              v70 = *(_QWORD *)(a4 + 11912);
              v71 = BYTE5(v96);
              if (*(_BYTE *)(v70 + v32)
                && (v72 = "DD_GLON_Alm_Set_Health_Frq:  Health H->U Eph:  Slot %d  FrqId %d ", BYTE5(v96))
                || !*(_BYTE *)(v70 + v32)
                && (v72 = "DD_GLON_Alm_Set_Health_Frq:  Health U->H Eph:  Slot %d  FrqId %d ", !BYTE5(v96)))
              {
                EvLog_v(v72, v29);
                v71 = BYTE5(v96);
                v70 = *(_QWORD *)(a4 + 11912);
              }
              *(_BYTE *)(v70 + v32) = v71 ^ 1;
              if (v71 != 1)
                v73 = 1;
              else
                v73 = 2;
              *(_DWORD *)(*(_QWORD *)(a4 + 11920) + 20 * (int)v32) = v73;
              v58 = v88;
              if (a1 < 1)
                goto LABEL_61;
              *(_BYTE *)(*(_QWORD *)(a4 + 17200) + v32) = 1;
              Core_Save_GLON_Eph(v86, 0, v68);
              goto LABEL_91;
            }
            EvCrt_v("DD_Validate_GLON_Eph:  Rejected:  Eph Nt check, R %d  Nt %d", v37, (unsigned __int16)v96);
            v58 = 0;
          }
          else
          {
            EvCrt_v("DD_Validate_GLON_Eph:  Rejected:  SV Acc check, R %d  Mag_Acc %g", v37, v57);
            v58 = 0;
            *(_BYTE *)(*(_QWORD *)(a4 + 17224) + v87) = 1;
          }
LABEL_91:
          if (a1 >= 1)
          {
            if (v58)
            {
              v74 = a4 + (v32 << 6);
              if (!*(_DWORD *)(v74 + 11928))
              {
                *(_DWORD *)(v74 + 11928) = a1;
                *(_DWORD *)(v74 + 11932) = 4;
                *(_BYTE *)(*(_QWORD *)(a4 + 17200) + v32) = 1;
                Core_Save_GLON_Eph(v86, 0, (__int128 *)(v74 + 11928));
              }
            }
          }
          goto LABEL_61;
        }
        v85 = v53;
        v84 = v37;
        v59 = "DD_Validate_GLON_Eph:  Rejected:  SV Vel check, R %d  Vel_Mag %g";
      }
      v60 = v43;
      EvCrt_v(v59, v84, *(_QWORD *)&v85);
      *(_BYTE *)(*(_QWORD *)(a4 + 17224) + v60) = 1;
    }
    else
    {
      EvCrt_v("DD_Validate_GLON_Eph:  FAIL:  Tb check, R %d  est %d  dec %d");
    }
LABEL_61:
    *v25 = 0;
LABEL_62:
    ++v22;
    v24 += 4;
  }
  while (v22 != 14);
  v75 = 0;
  LODWORD(v76) = 0;
  v77 = *(_QWORD *)(a4 + 11912);
  v78 = p_NV;
  v79 = p_NV + 29160;
  v80 = *(_QWORD *)(v77 + 16);
  *(_OWORD *)(p_NV + 29172) = *(_OWORD *)v77;
  *(_QWORD *)(v79 + 28) = v80;
  v81 = v78 + 29168;
  v82 = -9871;
  do
  {
    v83 = *(unsigned __int8 *)(v81 + v75) ^ HIBYTE(v82);
    v82 = -12691 * (v82 + (*(unsigned __int8 *)(v81 + v75) ^ HIBYTE(v82))) + 22719;
    v76 = (v76 + v83);
    ++v75;
  }
  while (v75 != 32);
  *(_QWORD *)(v78 + 29160) = v76;
}

int *DD_Check_Age_GLON_Data(int *result, _QWORD *a2, uint64_t a3)
{
  int *v3;
  uint64_t v5;
  unsigned __int16 *v6;
  _QWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  _OWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;

  if (*((_BYTE *)result + 72))
  {
    v3 = result;
    if (result[17] >= 2)
    {
      v5 = 0;
      v6 = (unsigned __int16 *)(a2 + 2032);
      v7 = a2 + 2154;
      v8 = a2 + 1498;
      v9 = 29248;
      do
      {
        v10 = a2[2146];
        if (*(_BYTE *)(v10 + v5))
        {
          v11 = (*v8 >> 26) & 0xFFFFF83F | ((*(v8 - 1) & 0x1F) << 6);
          v12 = (int)*((double *)v3 + 10) - 900 * (*((_WORD *)v8 - 15) & 0x7F);
          if (v11)
          {
            LODWORD(v13) = v12 + 86400 * (*((__int16 *)v3 + 38) - v11);
            if ((int)v13 > 63115200)
              LODWORD(v13) = v13 - 126230400;
            if ((int)v13 >= -63115200)
              v13 = v13;
            else
              v13 = (v13 + 126230400);
          }
          else
          {
            LODWORD(v13) = v12 + 86400;
            if (v12 >= -43200)
              LODWORD(v13) = (int)*((double *)v3 + 10) - 900 * (*((_WORD *)v8 - 15) & 0x7F);
            if ((int)v13 <= 43199)
              v13 = v13;
            else
              v13 = (v13 - 86400);
          }
          *((_DWORD *)v7 + v5) = v13;
          if ((int)v13 >= 0)
            v14 = v13;
          else
            v14 = -(int)v13;
          if (v14 >= 0x26AD)
          {
            v15 = v8 - 14;
            *(_BYTE *)(v10 + v5) = 0;
            *(_BYTE *)(a2[2152] + v5) = 0;
            *(_OWORD *)((char *)v15 + 46) = 0u;
            v15[1] = 0u;
            v15[2] = 0u;
            *v15 = 0u;
            *((_DWORD *)v7 + v5) = 0;
            *(_BYTE *)(a2[2145] + v5) = 1;
            *(_BYTE *)(a2[2153] + v5) = 0;
            if (g_Logging_Cfg >= 5)
              result = (int *)EvLog_nd("DD_Check_Age_GLON_Data:  Delete ", 2, a3, v5 + 1, v13);
          }
        }
        v16 = a2[2148];
        if (*(_BYTE *)(v16 + v5))
        {
          v17 = *((__int16 *)v3 + 38) - *v6;
          v18 = v17 + 1461;
          if (v17 >= -730)
            v18 = *((__int16 *)v3 + 38) - *v6;
          if (v17 <= 729)
            v19 = v18;
          else
            v19 = v17 - 1461;
          if ((v19 - 183) <= 0xFFFFFF3A)
          {
            *(_BYTE *)(a2[2144] + v5) = 0;
            *(_BYTE *)(v16 + v5) = 0;
            *((_DWORD *)v6 + 6) = 0;
            *(_OWORD *)(v6 + 4) = 0u;
            *(_OWORD *)(v6 - 4) = 0u;
            *(_BYTE *)(a2[2152] + v5) = 0;
            *(_BYTE *)(a2[2153] + v5) = 0;
            v20 = p_NV + v9;
            *(_QWORD *)(v20 - 8) = 0xFFFFFFFFLL;
            *(_OWORD *)v20 = 0u;
            *(_OWORD *)(v20 + 16) = 0u;
            *(_DWORD *)(v20 + 32) = 0;
            if (v19 <= 182)
              result = (int *)EvLog_v("DD_Check_Age_GLON_Data:  Future Almanac deleted,  SV %d age %d");
            else
              result = (int *)EvLog_v("DD_Check_Age_GLON_Data:  Old Almanac deleted,  SV %d age %d");
          }
        }
        ++v5;
        v9 += 48;
        v6 += 18;
        v8 += 16;
      }
      while (v5 != 24);
    }
  }
  return result;
}

uint64_t DD_Check_GLON_Strings(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  char v4;
  int v5;
  int v6;
  _BOOL4 v7;
  _BOOL4 v8;
  int v11;
  BOOL v12;

  if ((int)result >= 3 && (*(_DWORD *)(a4 + 8972) - 1) <= 5)
  {
    if ((a2 % 30 + 1) >= 3)
      v4 = (int)((a2 % 30 + (((a2 % 30) & 0x80u) >> 7)) << 24) >> 25;
    else
      v4 = 15;
    v5 = *(_DWORD *)(a3 + 6000);
    v6 = a2 - v5;
    if (a2 < v5)
      v6 = a2 - v5 + 86400;
    v7 = v6 > 24;
    v8 = v5 >= 1 && v7;
    if (a2 < 1)
      v8 = 0;
    if (v4 == 2 && result > 3 || v8)
    {
      *(_OWORD *)(a3 + 6000) = 0u;
      *(_OWORD *)(a3 + 6016) = 0u;
    }
    if (a2 >= 1 && (v11 = *(_DWORD *)(a3 + 4720), v11 >= 1) && (v11 + 10) / 0x708u != (a2 + 10) / 0x708u
      || (a2 % 1800 >= 1771 ? (v12 = v4 == 10) : (v12 = 0), v12))
    {
      *(_QWORD *)(a3 + 5514) = 0;
      *(_QWORD *)(a3 + 5508) = 0;
      *(_OWORD *)(a3 + 4720) = 0u;
      *(_OWORD *)(a3 + 4736) = 0u;
      *(_OWORD *)(a3 + 4752) = 0u;
      *(_OWORD *)(a3 + 4764) = 0u;
    }
  }
  return result;
}

char *DD_LS_Delete_EphAlm_Str(char *result, uint64_t a2, uint64_t a3)
{
  int v4;
  double v5;
  double v6;
  double v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v13;
  _QWORD *v15;

  if ((int)result >= 1 && *(_BYTE *)(a2 + 16) && *(int *)a2 >= 1)
  {
    v4 = (int)result;
    v5 = *(double *)(a2 + 32);
    v6 = -0.5;
    if (v5 > 0.0)
      v6 = 0.5;
    v7 = v5 + v6;
    if (v7 <= 2147483650.0)
    {
      if (v7 >= -2147483650.0)
        v8 = (int)v7;
      else
        v8 = 0x80000000;
    }
    else
    {
      v8 = 0x7FFFFFFF;
    }
    if ((604800 * *(__int16 *)(a2 + 28) + ~(_DWORD)result + v8) <= 0xE0E)
    {
      v9 = 0;
      do
      {
        v10 = (_DWORD *)(a3 + 4 * v9);
        v11 = v10[1381];
        if (v11 >= 1 && v11 <= v4)
        {
          v10[1181] = 0;
          *(_BYTE *)(a3 + v9 + 5508) = 0;
          v10[1381] = 0;
          result = EvLog_v("DD_LS_Delete_EphAlm_Str:  Del Eph , Frq %2d ", (int)v9 + 1);
        }
        v13 = v10[1600];
        if (v13 >= 1 && v13 <= v4)
        {
          v15 = (_QWORD *)(a3 + 24 * v9);
          v15[755] = 0;
          v15[754] = 0;
          v15[756] = 0;
          *(_WORD *)(a3 + 2 * v9 + 6004) = 0;
          *(_WORD *)(a3 + 6397) = 0;
          v10[1600] = 0;
          result = EvLog_v("DD_LS_Delete_EphAlm_Str:  Del Alm , Frq %2d ", ++v9);
        }
        else
        {
          ++v9;
        }
      }
      while (v9 != 14);
    }
  }
  return result;
}

uint64_t DD_Delete_Bad_GLON_Data(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _OWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;

  v2 = 0;
  v3 = a2 + 1491;
  v4 = a2 + 2166;
  v5 = 30400;
  do
  {
    v6 = a2[2145];
    if (*(_BYTE *)(v6 + v2))
    {
      v7 = *v4 + 7;
      if (v7 <= 0xD)
      {
        v8 = result + 4 * v7;
        *(_DWORD *)(v8 + 4724) = 0;
        v9 = (_OWORD *)(result + 48 * v7 + 4780);
        *v9 = 0uLL;
        v9[1] = 0uLL;
        v9[2] = 0uLL;
        *(_DWORD *)(v8 + 5452) = 0;
        *(_BYTE *)(result + v7 + 5508) = 0;
        v6 = a2[2145];
      }
      *(_BYTE *)(v6 + v2) = 0;
      *(_BYTE *)(a2[2143] + v2) = 0;
      *(_BYTE *)(a2[2146] + v2) = 0;
      *(_OWORD *)((char *)v3 + 46) = 0uLL;
      v3[1] = 0uLL;
      v3[2] = 0uLL;
      *v3 = 0uLL;
      *(v4 - 24) = 0;
      *(_BYTE *)(a2[2153] + v2) = 0;
      *(_BYTE *)(a2[2150] + v2) = 1;
      v10 = (_OWORD *)(p_NV + v5);
      *((_QWORD *)v10 - 1) = 0xFFFFFFFFLL;
      *v10 = 0uLL;
      v10[1] = 0uLL;
      v10[2] = 0uLL;
      *(_OWORD *)((char *)v10 + 46) = 0uLL;
    }
    ++v2;
    v5 += 72;
    v3 += 4;
    ++v4;
  }
  while (v2 != 24);
  return result;
}

uint64_t DD_Delete_Inhib_GLON_Data(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _OWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;

  v3 = 0;
  v4 = a3 + 2031;
  v5 = a3 + 1683;
  v6 = a3 + 1491;
  v7 = a3 + 2166;
  v8 = 29248;
  v9 = 30400;
  do
  {
    if (*(_BYTE *)(result + v3))
    {
      v10 = (*v7 + 7);
      if (v10 <= 0xD && v3 + 1 == *((_DWORD *)a3 + v10 + 4356))
      {
        v11 = a2 + 4 * v10;
        *(_DWORD *)(v11 + 4724) = 0;
        v12 = (_OWORD *)(a2 + 48 * v10 + 4780);
        *v12 = 0uLL;
        v12[1] = 0uLL;
        v12[2] = 0uLL;
        *(_DWORD *)(v11 + 5452) = 0;
        *(_BYTE *)(a2 + v10 + 5508) = 0;
      }
      *(_BYTE *)(a3[2145] + v3) = 0;
      *(_BYTE *)(a3[2143] + v3) = 0;
      *(_BYTE *)(a3[2146] + v3) = 0;
      *(_OWORD *)((char *)v6 + 46) = 0uLL;
      v6[1] = 0uLL;
      v6[2] = 0uLL;
      *v6 = 0uLL;
      *(_BYTE *)(a3[2147] + v3) = 0;
      *(v7 - 24) = 0;
      *(_DWORD *)((char *)v5 + 111) = 0;
      *((_OWORD *)v5 + 5) = 0uLL;
      *((_OWORD *)v5 + 6) = 0uLL;
      *((_OWORD *)v5 + 3) = 0uLL;
      *((_OWORD *)v5 + 4) = 0uLL;
      *((_OWORD *)v5 + 1) = 0uLL;
      *((_OWORD *)v5 + 2) = 0uLL;
      *(_OWORD *)v5 = 0uLL;
      *(_BYTE *)(a3[2153] + v3) = 0;
      *(_BYTE *)(a3[2150] + v3) = 1;
      v13 = p_NV;
      v14 = (_OWORD *)(p_NV + v9);
      *v14 = 0uLL;
      v14[1] = 0uLL;
      v14[2] = 0uLL;
      *(_OWORD *)((char *)v14 + 46) = 0uLL;
      *(_BYTE *)(a3[2144] + v3) = 0;
      *((_QWORD *)v14 - 1) = 0xFFFFFFFFLL;
      *(_BYTE *)(a3[2148] + v3) = 0;
      *((_DWORD *)v4 + 8) = 0;
      *(_OWORD *)v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      v15 = v13 + v8;
      *(_QWORD *)(v15 - 8) = 0xFFFFFFFFLL;
      *(_OWORD *)v15 = 0uLL;
      *(_OWORD *)(v15 + 16) = 0uLL;
      *(_DWORD *)(v15 + 32) = 0;
    }
    ++v3;
    v8 += 48;
    v9 += 72;
    v4 = (_QWORD *)((char *)v4 + 36);
    v5 = (_QWORD *)((char *)v5 + 116);
    v6 += 4;
    ++v7;
  }
  while (v3 != 24);
  return result;
}

_QWORD *DD_Submit_WeekNum(_QWORD *result, __int16 a2, uint64_t a3, double *a4, double a5)
{
  int v7;
  uint64_t v8;
  double v9;
  int v10;
  int v11;
  __int16 v12;
  __int16 v13;
  int v14;
  uint64_t v15;
  double v16;
  __int16 v17;
  int v18;
  int v19;

  if (!*((_BYTE *)a4 + 16))
  {
    v7 = (int)result;
    if (*(_DWORD *)a4)
    {
      v8 = (int)a5;
      v9 = a4[4];
      v10 = v8 - (int)v9;
      v11 = v10 + 604800;
      if (v10 <= -302401)
        v12 = a3 - 1;
      else
        v12 = a3;
      if (v10 > -302401)
        v11 = v8 - (int)v9;
      if (v10 >= 302400)
        v13 = a3 + 1;
      else
        v13 = v12;
      if (v10 >= 302400)
        v14 = v10 - 604800;
      else
        v14 = v11;
      if ((v14 + 129599) >= 0x2A2FF)
      {
        v15 = ((v14 + 43200) / 86400);
        v16 = v9 + (double)(86400 * (int)v15);
        a4[4] = v16;
        result = EvLog_nd("DD_Submit_WeekNum(R): Day number set ", 3, a3, v15, (int)v16, v8);
      }
      v17 = v13 + (a2 << 10);
    }
    else
    {
      a4[4] = a5;
      v18 = *((_DWORD *)a4 + 17);
      if (!v18 || (v18 >= 3 ? (v19 = 3) : (v19 = *((_DWORD *)a4 + 17)), *(_DWORD *)a4 = v19, v18 <= 2))
      {
        if (a5 < 86370.0 || a5 >= 518370.0)
        {
          v17 = *((_WORD *)a4 + 14);
LABEL_26:
          if (v17)
            return EvLog_nd("DD_Submit_WeekNum(R): GPS Week No set from Glon SV", 4, a3, v7, v17, (int)a4[4], *(unsigned int *)a4);
          return result;
        }
      }
      v17 = a3 + (a2 << 10);
    }
    *((_WORD *)a4 + 14) = v17;
    *((_BYTE *)a4 + 16) = 1;
    goto LABEL_26;
  }
  return result;
}

uint64_t Inc_CA_Chips(uint64_t result, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;

  v3 = *a2 + result;
  for (*a2 = v3; *a2 > 1534499; v3 = *a2)
  {
    *a2 = v3 - 1534500;
    if (*a3 <= 403198)
      v4 = 1;
    else
      v4 = -403199;
    *a3 += v4;
  }
  if (v3 < 0)
  {
    do
    {
      *a2 = v3 + 1534500;
      if (*a3 < 1)
        v5 = 403199;
      else
        v5 = -1;
      *a3 += v5;
      v3 = *a2;
    }
    while (*a2 < 0);
  }
  return result;
}

uint64_t Nav_Kalman_Update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _BYTE *a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  double v102;
  double v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  int v116;
  int v117;
  _BYTE *v118;
  int v119;
  double *v120;
  double v121;
  __double2 v122;
  double v123;
  double v124;
  unsigned int v125;
  int v126;
  char v127;
  uint64_t v128;
  double *v129;
  _BYTE *v130;
  double v131;
  int v132;
  double v133;
  int v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  _DWORD *v152;
  uint64_t v153;
  unsigned int *v154;
  uint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int *v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  unsigned __int8 *v167;
  double v168;
  unint64_t v169;
  unsigned int *v170;
  uint64_t v171;
  int v172;
  int v173;
  int v174;
  _BYTE *v175;
  double v176;
  _BOOL4 v177;
  _BOOL4 v178;
  _BOOL4 v179;
  _BOOL4 v180;
  _BOOL4 v181;
  _BOOL4 v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  uint64_t v189;
  int v190;
  int v191;
  BOOL v192;
  BOOL v193;
  double v194;
  double v195;
  uint64_t v196;
  unint64_t v197;
  double v198;
  long double v199;
  unsigned int v200;
  double v201;
  unsigned int v202;
  int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  int v207;
  _BOOL4 v208;
  unsigned int v209;
  int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  int v214;
  _BOOL4 v215;
  unsigned int v216;
  int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  unsigned int *v222;
  uint64_t v223;
  _BOOL4 v224;
  unsigned int v225;
  int v226;
  unsigned int v227;
  unsigned int v228;
  char v229;
  char v230;
  int64x2_t v231;
  uint64_t v232;
  double v233;
  char v234;
  char v235;
  char v236;
  int v237;
  __int128 *v238;
  int v239;
  const double *v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  const double *v249;
  const double *v250;
  __int128 v251;
  double v252;
  double v253;
  double v254;
  int v255;
  double v256;
  double v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  signed int v263;
  int v264;
  unsigned int v265;
  uint64_t v266;
  unsigned int v267;
  double v268;
  double v269;
  int v270;
  double *v271;
  _QWORD *v272;
  double v273;
  unsigned int v274;
  uint64_t v275;
  char *v276;
  char v277;
  uint64_t v278;
  _BYTE *v279;
  _BYTE *v280;
  _BYTE *v281;
  _BYTE *v282;
  _BYTE *v283;
  uint64_t result;
  int v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  __int16 v292;
  int v293;
  double v294;
  double v295;
  double v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  uint64_t v302;
  __int16 v303;
  int v304;
  int v305;
  double v306;
  __int128 v307;
  double v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  BOOL v312;
  BOOL v313;
  BOOL v314;
  BOOL v315;
  BOOL v316;
  BOOL v317;
  uint64_t v318;
  uint64_t v319;
  char v320;
  uint64_t v321;
  unsigned int *v322;
  double *v323;
  double *v324;
  BOOL v325;
  double *v326;
  uint64_t v327;
  uint64_t v328;
  int64x2_t *v329;
  uint64_t v330;
  _OWORD *v331;
  _BYTE *v332;
  uint64_t v333;
  unsigned __int8 *v334;
  uint64_t v335;
  _BYTE *v336;
  unsigned int *v337;
  uint64_t v338;
  unsigned int *v339;
  uint64_t v340;
  unsigned int *v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int *v344;
  double *v345;
  unsigned __int8 *v346;
  _BYTE *v347;
  double *v348;
  _BYTE *v349;
  double *v350;
  float64x2_t *v351;
  double *v352;
  uint64_t v353;
  double *v354;
  uint64_t v355;
  double *v356;
  _DWORD *v357;
  unsigned __int8 *v358;
  _OWORD __src[998];
  _BYTE v360[322];
  __int128 v361;
  __int16 v362;
  _BYTE v363[788];
  __int128 v364;
  __int128 v365;
  __int128 v366;
  _OWORD v367[16];
  _QWORD v368[2];
  _OWORD v369[46];
  __int128 v370;
  _OWORD v371[3];
  _OWORD v372[11];
  __int128 v373;
  _OWORD v374[4];
  __int128 v375;
  _OWORD v376[22];
  __int128 v377;
  _OWORD v378[4];
  __int128 v379;
  _OWORD v380[7];
  __int128 v381;
  _OWORD v382[4];
  __int128 v383;
  _OWORD v384[4];
  __int128 v385;
  _OWORD v386[4];
  __int128 v387;
  _BYTE v388[20];
  double v389[2925];
  double v390[1863];
  double v391[1863];
  _BYTE v392[4620];
  _DWORD v393[165];
  _BYTE v394[1292];
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  _OWORD v405[2];
  uint64_t v406;

  v12 = MEMORY[0x24BDAC7A8](a1);
  v333 = v13;
  v355 = v14;
  v350 = v15;
  v343 = v16;
  v353 = v17;
  v327 = v18;
  v20 = v19;
  v21 = v12;
  v406 = *MEMORY[0x24BDAC8D0];
  v22 = *(unsigned __int8 *)(v12 + 136);
  v337 = v19 + 19892;
  v322 = v19 + 15856;
  v23 = (uint64_t)(v19 + 15508);
  v340 = (uint64_t)(v19 + 15206);
  v339 = v19 + 15132;
  *(_WORD *)(v12 + 181) = 0;
  v341 = v19 + 15062;
  v349 = (_BYTE *)(v12 + 136);
  *(_DWORD *)(v12 + 177) = 0;
  v318 = v12 + 177;
  if (v22)
  {
    *a11 = 0;
  }
  else if (*a11)
  {
    *a11 = 0;
    *(_BYTE *)(v12 + 136) = 1;
    *(_DWORD *)(v12 + 140) = 77;
  }
  v404 = 0u;
  memset(v405, 0, 28);
  v402 = 0u;
  v403 = 0u;
  v400 = 0u;
  v401 = 0u;
  v398 = 0u;
  v399 = 0u;
  v396 = 0u;
  v397 = 0u;
  v395 = 0u;
  bzero(v394, 0x50BuLL);
  memset(&v393[152], 0, 52);
  memset(&v393[116], 0, 135);
  memset(&v393[72], 0, 171);
  memset(v393, 0, 273);
  bzero(v392, 0x120BuLL);
  bzero(v391, 0x3A38uLL);
  bzero(v390, 0x3A38uLL);
  bzero(v389, 0x5B68uLL);
  memset(v388, 0, sizeof(v388));
  LOWORD(v387) = 0;
  BYTE2(v387) = 0;
  memset(v386, 0, 56);
  LOWORD(v385) = 0;
  BYTE2(v385) = 0;
  memset(v384, 0, 56);
  BYTE2(v383) = 0;
  LOWORD(v383) = 0;
  memset(v382, 0, 56);
  BYTE2(v381) = 0;
  LOWORD(v381) = 0;
  memset(v380, 0, sizeof(v380));
  BYTE2(v379) = 0;
  LOWORD(v379) = 0;
  memset(v378, 0, 56);
  BYTE2(v377) = 0;
  LOWORD(v377) = 0;
  memset(&v376[15], 0, 104);
  memset((char *)&v376[14] + 4, 0, 12);
  memset(&v376[10], 0, 53);
  memset((char *)&v376[9] + 4, 0, 12);
  memset(&v376[5], 0, 53);
  memset((char *)&v376[4] + 4, 0, 12);
  memset(v376, 0, 61);
  BYTE2(v375) = 0;
  LOWORD(v375) = 0;
  memset(v374, 0, 56);
  BYTE2(v373) = 0;
  LOWORD(v373) = 0;
  memset(&v372[7], 0, 56);
  memset((char *)&v372[6] + 4, 0, 12);
  memset(&v372[2], 0, 61);
  v372[0] = 0uLL;
  *(_QWORD *)((char *)&v372[1] + 5) = 0;
  *(_QWORD *)&v372[1] = 0;
  memset(v371, 0, 36);
  BYTE2(v370) = 0;
  LOWORD(v370) = 0;
  memset(&v369[39], 0, 112);
  memset((char *)&v369[38] + 4, 0, 12);
  memset(&v369[31], 0, 102);
  memset(v369, 0, 495);
  LOWORD(v368[0]) = 0;
  memset(&v367[2], 0, 217);
  memset(v360, 0, sizeof(v360));
  *(_DWORD *)((char *)__src + 3) = 0;
  LODWORD(__src[0]) = 0;
  memset(&v393[117], 0, 131);
  *((_QWORD *)&v387 + 1) = 0;
  *(_QWORD *)((char *)&v387 + 3) = 0;
  *((_QWORD *)&v385 + 1) = 0;
  *(_QWORD *)((char *)&v385 + 3) = 0;
  *((_QWORD *)&v383 + 1) = 0;
  *(_QWORD *)((char *)&v383 + 3) = 0;
  *((_QWORD *)&v381 + 1) = 0;
  *(_QWORD *)((char *)&v381 + 3) = 0;
  *((_QWORD *)&v379 + 1) = 0;
  *(_QWORD *)((char *)&v379 + 3) = 0;
  *((_QWORD *)&v377 + 1) = 0;
  *(_QWORD *)((char *)&v377 + 3) = 0;
  *((_QWORD *)&v375 + 1) = 0;
  *(_QWORD *)((char *)&v375 + 3) = 0;
  *((_QWORD *)&v373 + 1) = 0;
  *(_QWORD *)((char *)&v373 + 3) = 0;
  *((_QWORD *)&v370 + 1) = 0;
  *(_QWORD *)((char *)&v370 + 3) = 0;
  memset(v367, 0, 25);
  v366 = 0u;
  v365 = 0u;
  v364 = 0u;
  v395 = 0uLL;
  DWORD2(v396) = 0;
  *(_QWORD *)&v396 = 0;
  v397 = 0u;
  v398 = 0u;
  v399 = 0u;
  v400 = 0u;
  v401 = 0u;
  v402 = 0u;
  v403 = 0u;
  v404 = 0u;
  memset(v405, 0, 25);
  bzero(&v394[2], 0x509uLL);
  memset((char *)&v393[153] + 3, 0, 45);
  *(_OWORD *)((char *)&v393[72] + 2) = 0u;
  *(_OWORD *)((char *)&v393[76] + 2) = 0u;
  *(_OWORD *)((char *)&v393[80] + 2) = 0u;
  *(_OWORD *)((char *)&v393[84] + 2) = 0u;
  *(_OWORD *)((char *)&v393[88] + 2) = 0u;
  *(_OWORD *)((char *)&v393[92] + 2) = 0u;
  *(_OWORD *)((char *)&v393[96] + 2) = 0u;
  *(_OWORD *)((char *)&v393[100] + 2) = 0u;
  *(_OWORD *)((char *)&v393[104] + 2) = 0u;
  *(_OWORD *)((char *)&v393[108] + 2) = 0u;
  *(_OWORD *)((char *)&v393[110] + 3) = 0u;
  *(_OWORD *)((char *)&v393[64] + 1) = 0u;
  *(_OWORD *)((char *)v393 + 3) = 0u;
  *(_OWORD *)((char *)&v393[4] + 3) = 0u;
  *(_OWORD *)((char *)&v393[8] + 3) = 0u;
  *(_OWORD *)((char *)&v393[12] + 3) = 0u;
  *(_OWORD *)((char *)&v393[16] + 3) = 0u;
  *(_OWORD *)((char *)&v393[20] + 3) = 0u;
  *(_OWORD *)((char *)&v393[24] + 3) = 0u;
  *(_OWORD *)((char *)&v393[28] + 3) = 0u;
  *(_OWORD *)((char *)&v393[32] + 3) = 0u;
  *(_OWORD *)((char *)&v393[36] + 3) = 0u;
  *(_OWORD *)((char *)&v393[40] + 3) = 0u;
  *(_OWORD *)((char *)&v393[44] + 3) = 0u;
  *(_OWORD *)((char *)&v393[48] + 3) = 0u;
  *(_OWORD *)((char *)&v393[52] + 3) = 0u;
  *(_OWORD *)((char *)&v393[56] + 3) = 0u;
  *(_OWORD *)((char *)&v393[60] + 3) = 0u;
  bzero(&v392[6], 0x1205uLL);
  bzero((char *)v391 + 3, 0x3A35uLL);
  bzero((char *)v390 + 3, 0x3A35uLL);
  bzero((char *)v389 + 3, 0x5B65uLL);
  memset(&v388[1], 0, 19);
  memset((char *)v386 + 3, 0, 48);
  *(_QWORD *)&v386[3] = 0;
  memset((char *)v384 + 3, 0, 48);
  *(_QWORD *)&v384[3] = 0;
  memset((char *)v382 + 3, 0, 48);
  *(_QWORD *)&v382[3] = 0;
  memset((char *)v380 + 3, 0, 96);
  v380[6] = 0u;
  memset((char *)v378 + 3, 0, 53);
  memset((char *)&v376[18] + 3, 0, 48);
  *(_QWORD *)&v376[21] = 0;
  memset((char *)&v376[16] + 15, 0, 17);
  memset((char *)&v376[15] + 7, 0, 17);
  memset((char *)&v376[10] + 4, 0, 49);
  memset((char *)&v376[5] + 4, 0, 49);
  memset((char *)v376 + 4, 0, 57);
  memset((char *)v374 + 3, 0, 53);
  memset((char *)&v372[7] + 3, 0, 53);
  memset((char *)&v372[2] + 4, 0, 57);
  *(_OWORD *)((char *)v372 + 12) = 0uLL;
  *(_QWORD *)((char *)v372 + 4) = 0;
  BYTE12(v372[1]) = 0;
  *(_OWORD *)((char *)v371 + 7) = 0uLL;
  *(_QWORD *)((char *)&v371[1] + 12) = 0;
  *(_QWORD *)((char *)&v371[1] + 7) = 0;
  memset((char *)&v369[39] + 3, 0, 109);
  memset((char *)&v369[31] + 4, 0, 98);
  *(_OWORD *)((char *)&v369[29] + 15) = 0u;
  *(_OWORD *)((char *)&v369[29] + 5) = 0u;
  WORD1(v368[1]) = 0;
  *(_QWORD *)((char *)v368 + 2) = 0;
  bzero(v363, 0x314uLL);
  v362 = 0;
  v361 = 0uLL;
  bzero((char *)__src + 7, 0x3E51uLL);
  v24 = v404;
  *((_OWORD *)v20 + 8) = v403;
  *((_OWORD *)v20 + 9) = v24;
  *((_OWORD *)v20 + 10) = v405[0];
  *(_OWORD *)(v20 + 43) = *(_OWORD *)((char *)v405 + 12);
  v25 = v400;
  *((_OWORD *)v20 + 4) = v399;
  *((_OWORD *)v20 + 5) = v25;
  v26 = v402;
  *((_OWORD *)v20 + 6) = v401;
  *((_OWORD *)v20 + 7) = v26;
  v27 = v396;
  *(_OWORD *)v20 = v395;
  *((_OWORD *)v20 + 1) = v27;
  v28 = v398;
  *((_OWORD *)v20 + 2) = v397;
  *((_OWORD *)v20 + 3) = v28;
  *((_WORD *)v20 + 98) = 0;
  *(_QWORD *)(v20 + 47) = 0;
  memcpy((char *)v20 + 198, v394, 0x50BuLL);
  v29 = *(_OWORD *)&v393[156];
  *(_OWORD *)((char *)v20 + 1489) = *(_OWORD *)&v393[152];
  *(_OWORD *)((char *)v20 + 1505) = v29;
  *(_OWORD *)((char *)v20 + 1521) = *(_OWORD *)&v393[160];
  *(unsigned int *)((char *)v20 + 1537) = v393[164];
  *((_BYTE *)v20 + 1541) = 0;
  *((_WORD *)v20 + 771) = 0;
  v20[386] = 0;
  v30 = *(_OWORD *)&v393[144];
  *(_OWORD *)(v20 + 411) = *(_OWORD *)&v393[140];
  *(_OWORD *)(v20 + 415) = v30;
  *(_QWORD *)((char *)v20 + 1675) = *(_QWORD *)((char *)&v393[147] + 3);
  v31 = *(_OWORD *)&v393[128];
  *(_OWORD *)(v20 + 395) = *(_OWORD *)&v393[124];
  *(_OWORD *)(v20 + 399) = v31;
  v32 = *(_OWORD *)&v393[136];
  *(_OWORD *)(v20 + 403) = *(_OWORD *)&v393[132];
  *(_OWORD *)(v20 + 407) = v32;
  v33 = *(_OWORD *)&v393[120];
  *(_OWORD *)(v20 + 387) = *(_OWORD *)&v393[116];
  *(_OWORD *)(v20 + 391) = v33;
  *(unsigned int *)((char *)v20 + 1690) = 0;
  *(_QWORD *)((char *)v20 + 1683) = 0;
  v34 = *(_OWORD *)&v393[108];
  *(_OWORD *)((char *)v20 + 1822) = *(_OWORD *)&v393[104];
  *(_OWORD *)((char *)v20 + 1838) = v34;
  *(_OWORD *)((char *)v20 + 1849) = *(_OWORD *)((char *)&v393[110] + 3);
  v35 = *(_OWORD *)&v393[92];
  *(_OWORD *)((char *)v20 + 1758) = *(_OWORD *)&v393[88];
  *(_OWORD *)((char *)v20 + 1774) = v35;
  v36 = *(_OWORD *)&v393[100];
  *(_OWORD *)((char *)v20 + 1790) = *(_OWORD *)&v393[96];
  *(_OWORD *)((char *)v20 + 1806) = v36;
  v37 = *(_OWORD *)&v393[76];
  *(_OWORD *)((char *)v20 + 1694) = *(_OWORD *)&v393[72];
  *(_OWORD *)((char *)v20 + 1710) = v37;
  v38 = *(_OWORD *)&v393[84];
  *(_OWORD *)((char *)v20 + 1726) = *(_OWORD *)&v393[80];
  *(_OWORD *)((char *)v20 + 1742) = v38;
  memcpy((char *)v20 + 1865, v393, 0x111uLL);
  memcpy((char *)v20 + 2138, v392, 0x120BuLL);
  memcpy((char *)v20 + 6757, v391, 0x3A38uLL);
  memcpy((char *)v20 + 21661, v390, 0x3A38uLL);
  memcpy((char *)v20 + 36565, v389, 0x5B68uLL);
  *(_OWORD *)((char *)v20 + 59965) = *(_OWORD *)v388;
  *(unsigned int *)((char *)v20 + 59981) = *(_DWORD *)&v388[16];
  *(_OWORD *)((char *)v20 + 59985) = v387;
  v39 = v386[1];
  *(_OWORD *)((char *)v20 + 60001) = v386[0];
  *(_OWORD *)((char *)v20 + 60017) = v39;
  *(_OWORD *)((char *)v20 + 60033) = v386[2];
  *(_QWORD *)((char *)v20 + 60049) = *(_QWORD *)&v386[3];
  *(_OWORD *)((char *)v20 + 60057) = v385;
  v40 = v384[0];
  v41 = v384[1];
  v42 = v384[2];
  *(_QWORD *)((char *)v20 + 60121) = *(_QWORD *)&v384[3];
  *(_OWORD *)((char *)v20 + 60089) = v41;
  *(_OWORD *)((char *)v20 + 60105) = v42;
  *(_OWORD *)((char *)v20 + 60129) = v383;
  *(_OWORD *)((char *)v20 + 60073) = v40;
  *(_QWORD *)((char *)v20 + 60193) = *(_QWORD *)&v382[3];
  v43 = v382[2];
  v44 = v382[0];
  *(_OWORD *)((char *)v20 + 60161) = v382[1];
  *(_OWORD *)((char *)v20 + 60177) = v43;
  *(_OWORD *)((char *)v20 + 60145) = v44;
  *(_OWORD *)((char *)v20 + 60201) = v381;
  v45 = v380[1];
  *(_OWORD *)((char *)v20 + 60217) = v380[0];
  *(_OWORD *)((char *)v20 + 60233) = v45;
  v46 = v380[2];
  v47 = v380[3];
  v48 = v380[6];
  v49 = v380[4];
  *(_OWORD *)((char *)v20 + 60297) = v380[5];
  *(_OWORD *)((char *)v20 + 60313) = v48;
  *(_OWORD *)((char *)v20 + 60265) = v47;
  *(_OWORD *)((char *)v20 + 60281) = v49;
  *(_OWORD *)((char *)v20 + 60249) = v46;
  *(_OWORD *)((char *)v20 + 60329) = v379;
  v50 = v378[0];
  v51 = v378[1];
  v52 = v378[2];
  *(_QWORD *)((char *)v20 + 60393) = *(_QWORD *)&v378[3];
  *(_OWORD *)((char *)v20 + 60361) = v51;
  *(_OWORD *)((char *)v20 + 60377) = v52;
  *(_OWORD *)((char *)v20 + 60401) = v377;
  *(_OWORD *)((char *)v20 + 60345) = v50;
  v53 = v376[18];
  v54 = v376[19];
  v55 = v376[20];
  *(_QWORD *)((char *)v20 + 60465) = *(_QWORD *)&v376[21];
  *(_OWORD *)((char *)v20 + 60433) = v54;
  *(_OWORD *)((char *)v20 + 60449) = v55;
  *(_OWORD *)((char *)v20 + 60417) = v53;
  *((_BYTE *)v20 + 60475) = 0;
  *(_WORD *)((char *)v20 + 60473) = 0;
  v341[57] = 0;
  *((_BYTE *)v341 + 232) = 0;
  v56 = *(_OWORD *)((char *)&v376[16] + 8);
  *(_QWORD *)((char *)v20 + 60497) = *((_QWORD *)&v376[17] + 1);
  *(_OWORD *)((char *)v20 + 60481) = v56;
  v57 = v376[15];
  *(_QWORD *)((char *)v20 + 60521) = *(_QWORD *)&v376[16];
  *(_OWORD *)((char *)v20 + 60505) = v57;
  v58 = *(_QWORD *)((char *)&v376[14] + 4);
  *(unsigned int *)((char *)v20 + 60537) = HIDWORD(v376[14]);
  *(_QWORD *)((char *)v20 + 60529) = v58;
  *((_BYTE *)v20 + 60543) = 0;
  *(_WORD *)((char *)v20 + 60541) = 0;
  v339[4] = 0;
  v59 = v376[10];
  v60 = v376[11];
  v61 = v376[12];
  *(_QWORD *)((char *)v20 + 60593) = *(_QWORD *)((char *)&v376[12] + 13);
  *(_OWORD *)(v20 + 15141) = v60;
  *(_OWORD *)(v20 + 15145) = v61;
  *(_OWORD *)(v20 + 15137) = v59;
  v62 = *(_QWORD *)((char *)&v376[9] + 4);
  *(unsigned int *)((char *)v20 + 60609) = HIDWORD(v376[9]);
  *(_QWORD *)((char *)v20 + 60601) = v62;
  *((_BYTE *)v20 + 60615) = 0;
  *(_WORD *)((char *)v20 + 60613) = 0;
  v339[22] = 0;
  v63 = v376[5];
  v64 = v376[6];
  v65 = v376[7];
  *(_QWORD *)((char *)v20 + 60665) = *(_QWORD *)((char *)&v376[7] + 13);
  *(_OWORD *)(v20 + 15159) = v64;
  *(_OWORD *)(v20 + 15163) = v65;
  *(_OWORD *)(v20 + 15155) = v63;
  v66 = *(_QWORD *)((char *)&v376[4] + 4);
  *(unsigned int *)((char *)v20 + 60681) = HIDWORD(v376[4]);
  *(_QWORD *)((char *)v20 + 60673) = v66;
  *((_BYTE *)v20 + 60687) = 0;
  *(_WORD *)((char *)v20 + 60685) = 0;
  v339[40] = 0;
  v67 = v376[0];
  v68 = v376[1];
  v69 = v376[2];
  *(_OWORD *)((char *)v20 + 60737) = *(_OWORD *)((char *)&v376[2] + 13);
  *(_OWORD *)(v20 + 15177) = v68;
  *(_OWORD *)(v20 + 15181) = v69;
  *(_OWORD *)(v20 + 15173) = v67;
  *(_OWORD *)((char *)v20 + 60753) = v375;
  v70 = v374[0];
  v71 = v374[1];
  v72 = v374[2];
  *(_QWORD *)((char *)v20 + 60817) = *(_QWORD *)&v374[3];
  *(_OWORD *)((char *)v20 + 60785) = v71;
  *(_OWORD *)((char *)v20 + 60801) = v72;
  *(_OWORD *)((char *)v20 + 60769) = v70;
  *(_OWORD *)((char *)v20 + 60825) = v373;
  v73 = v372[7];
  v74 = v372[8];
  v75 = v372[9];
  *(_QWORD *)((char *)v20 + 60889) = *(_QWORD *)&v372[10];
  *(_OWORD *)((char *)v20 + 60857) = v74;
  *(_OWORD *)((char *)v20 + 60873) = v75;
  *(_OWORD *)((char *)v20 + 60841) = v73;
  v76 = *(_QWORD *)((char *)&v372[6] + 4);
  *(unsigned int *)((char *)v20 + 60905) = HIDWORD(v372[6]);
  *(_QWORD *)((char *)v20 + 60897) = v76;
  *((_BYTE *)v20 + 60911) = 0;
  *(_WORD *)((char *)v20 + 60909) = 0;
  *(_DWORD *)(v340 + 88) = 0;
  v77 = v372[2];
  v78 = v372[3];
  v79 = v372[4];
  *(_OWORD *)((char *)v20 + 60961) = *(_OWORD *)((char *)&v372[4] + 13);
  *(_OWORD *)(v20 + 15233) = v78;
  *(_OWORD *)(v20 + 15237) = v79;
  *(_OWORD *)(v20 + 15229) = v77;
  v20[15245] = 0;
  *(unsigned int *)((char *)v20 + 60977) = 0;
  *(_DWORD *)(v340 + 160) = 0;
  v80 = v372[0];
  *(_OWORD *)((char *)v20 + 61001) = *(_OWORD *)((char *)v372 + 13);
  *(_OWORD *)(v20 + 15247) = v80;
  v81 = v371[0];
  v82 = v371[1];
  *(unsigned int *)((char *)v20 + 61049) = v371[2];
  *(_OWORD *)((char *)v20 + 61017) = v81;
  *(_OWORD *)((char *)v20 + 61033) = v82;
  *((_BYTE *)v20 + 61055) = 0;
  *(_WORD *)((char *)v20 + 61053) = 0;
  *(_BYTE *)(v340 + 232) = 0;
  *(_OWORD *)((char *)v20 + 61057) = v370;
  v83 = v369[40];
  *(_OWORD *)((char *)v20 + 61073) = v369[39];
  *(_OWORD *)((char *)v20 + 61089) = v83;
  v84 = v369[41];
  v85 = v369[42];
  v86 = v369[45];
  v87 = v369[43];
  *(_OWORD *)((char *)v20 + 61153) = v369[44];
  *(_OWORD *)((char *)v20 + 61169) = v86;
  *(_OWORD *)((char *)v20 + 61121) = v85;
  *(_OWORD *)((char *)v20 + 61137) = v87;
  *(_OWORD *)((char *)v20 + 61105) = v84;
  v88 = *(_QWORD *)((char *)&v369[38] + 4);
  *(unsigned int *)((char *)v20 + 61193) = HIDWORD(v369[38]);
  *(_QWORD *)((char *)v20 + 61185) = v88;
  *((_BYTE *)v20 + 61199) = 0;
  *(_WORD *)((char *)v20 + 61197) = 0;
  *(_DWORD *)(v340 + 376) = 0;
  v89 = v369[32];
  *(_OWORD *)(v20 + 15301) = v369[31];
  *(_OWORD *)(v20 + 15305) = v89;
  v90 = v369[33];
  v91 = v369[34];
  v92 = v369[35];
  v93 = v369[36];
  *(_QWORD *)((char *)v20 + 61298) = *(_QWORD *)((char *)&v369[36] + 14);
  *(_OWORD *)(v20 + 15317) = v92;
  *(_OWORD *)(v20 + 15321) = v93;
  *(_OWORD *)(v20 + 15309) = v90;
  *(_OWORD *)(v20 + 15313) = v91;
  *((_QWORD *)v20 + 7664) = 0;
  *(_QWORD *)((char *)v20 + 61306) = 0;
  *(unsigned int *)((char *)v20 + 61335) = 0;
  *(_OWORD *)(v20 + 15330) = 0u;
  memcpy((char *)v20 + 61339, v369, 0x1EFuLL);
  *(_QWORD *)((char *)v20 + 61834) = v368[0];
  *(unsigned int *)((char *)v20 + 61842) = v368[1];
  v94 = v367[13];
  *(_OWORD *)((char *)v20 + 62006) = v367[12];
  *(_OWORD *)((char *)v20 + 62022) = v94;
  *(_OWORD *)((char *)v20 + 62038) = v367[14];
  *(_OWORD *)((char *)v20 + 62047) = *(_OWORD *)((char *)&v367[14] + 9);
  v95 = v367[9];
  *(_OWORD *)((char *)v20 + 61942) = v367[8];
  *(_OWORD *)((char *)v20 + 61958) = v95;
  v96 = v367[11];
  *(_OWORD *)((char *)v20 + 61974) = v367[10];
  *(_OWORD *)((char *)v20 + 61990) = v96;
  v97 = v367[5];
  *(_OWORD *)((char *)v20 + 61878) = v367[4];
  *(_OWORD *)((char *)v20 + 61894) = v97;
  v98 = v367[7];
  *(_OWORD *)((char *)v20 + 61910) = v367[6];
  *(_OWORD *)((char *)v20 + 61926) = v98;
  v99 = v367[3];
  *(_OWORD *)((char *)v20 + 61846) = v367[2];
  *(_OWORD *)((char *)v20 + 61862) = v99;
  *(_BYTE *)(v23 + 31) = 0;
  v100 = v367[0];
  *(_OWORD *)(v23 + 64) = v366;
  *(_OWORD *)(v23 + 80) = v100;
  *(_OWORD *)(v23 + 89) = *(_OWORD *)((char *)v367 + 9);
  v101 = v365;
  *(_OWORD *)(v23 + 32) = v364;
  *(_OWORD *)(v23 + 48) = v101;
  *(_WORD *)((char *)v20 + 62137) = 0;
  *((_BYTE *)v20 + 62139) = 0;
  *(_BYTE *)(v23 + 108) = 0;
  *((_BYTE *)v20 + 62143) = 0;
  *(_WORD *)((char *)v20 + 62141) = 0;
  *(_DWORD *)(v23 + 112) = 0;
  *(_BYTE *)(v23 + 116) = 0;
  *(_WORD *)((char *)v20 + 62149) = 0;
  *((_BYTE *)v20 + 62151) = 0;
  *(_DWORD *)(v23 + 120) = 0;
  *(_BYTE *)(v23 + 124) = 0;
  *(_WORD *)((char *)v20 + 62157) = 0;
  *((_BYTE *)v20 + 62159) = 0;
  *(_DWORD *)(v23 + 128) = 0;
  *(_BYTE *)(v23 + 132) = 0;
  *((_BYTE *)v20 + 62167) = 0;
  *(_WORD *)((char *)v20 + 62165) = 0;
  *(_DWORD *)(v23 + 136) = 0;
  *(_BYTE *)(v23 + 140) = 0;
  *((_BYTE *)v20 + 62175) = 0;
  *(_WORD *)((char *)v20 + 62173) = 0;
  *(_DWORD *)(v23 + 144) = 0;
  *(_BYTE *)(v23 + 148) = 0;
  *((_BYTE *)v20 + 62183) = 0;
  *(_WORD *)((char *)v20 + 62181) = 0;
  *(_DWORD *)(v23 + 152) = 0;
  *(_BYTE *)(v23 + 156) = 0;
  *((_BYTE *)v20 + 62191) = 0;
  *(_WORD *)((char *)v20 + 62189) = 0;
  *(_DWORD *)(v23 + 160) = 0;
  *(_BYTE *)(v23 + 164) = 0;
  *((_BYTE *)v20 + 62199) = 0;
  *(_WORD *)((char *)v20 + 62197) = 0;
  *(_DWORD *)(v23 + 168) = 0;
  *(_BYTE *)(v23 + 172) = 0;
  *((_BYTE *)v20 + 62207) = 0;
  *(_WORD *)((char *)v20 + 62205) = 0;
  *(_DWORD *)(v23 + 176) = 0;
  *(_BYTE *)(v23 + 180) = 0;
  *((_BYTE *)v20 + 62215) = 0;
  *(_WORD *)((char *)v20 + 62213) = 0;
  *(_DWORD *)(v23 + 184) = 0;
  *(_BYTE *)(v23 + 188) = 0;
  *((_BYTE *)v20 + 62223) = 0;
  *(_WORD *)((char *)v20 + 62221) = 0;
  *(_DWORD *)(v23 + 192) = 0;
  *(_BYTE *)(v23 + 196) = 0;
  *((_BYTE *)v20 + 62231) = 0;
  *(_WORD *)((char *)v20 + 62229) = 0;
  *(_DWORD *)(v23 + 200) = 0;
  *(_BYTE *)(v23 + 204) = 0;
  *((_BYTE *)v20 + 62239) = 0;
  *(_WORD *)((char *)v20 + 62237) = 0;
  *(_DWORD *)(v23 + 208) = 0;
  *(_BYTE *)(v23 + 212) = 0;
  *((_BYTE *)v20 + 62247) = 0;
  *(_WORD *)((char *)v20 + 62245) = 0;
  *(_DWORD *)(v23 + 216) = 0;
  *(_BYTE *)(v23 + 220) = 0;
  *((_BYTE *)v20 + 62255) = 0;
  *(_WORD *)((char *)v20 + 62253) = 0;
  *(_DWORD *)(v23 + 224) = 0;
  *(_BYTE *)(v23 + 228) = 0;
  *((_BYTE *)v20 + 62263) = 0;
  *(_WORD *)((char *)v20 + 62261) = 0;
  *(_DWORD *)(v23 + 232) = 0;
  *(_BYTE *)(v23 + 236) = 0;
  *((_BYTE *)v20 + 62271) = 0;
  *(_WORD *)((char *)v20 + 62269) = 0;
  *(_DWORD *)(v23 + 240) = 0;
  *(_BYTE *)(v23 + 244) = 0;
  *((_BYTE *)v20 + 62279) = 0;
  *(_WORD *)((char *)v20 + 62277) = 0;
  *(_DWORD *)(v23 + 248) = 0;
  *(_BYTE *)(v23 + 252) = 0;
  *((_BYTE *)v20 + 62287) = 0;
  *(_WORD *)((char *)v20 + 62285) = 0;
  *(_DWORD *)(v23 + 256) = 0;
  *(_BYTE *)(v23 + 260) = 0;
  *((_BYTE *)v20 + 62295) = 0;
  *(_WORD *)((char *)v20 + 62293) = 0;
  *(_DWORD *)(v23 + 264) = 0;
  *(_BYTE *)(v23 + 268) = 0;
  *((_BYTE *)v20 + 62303) = 0;
  *(_WORD *)((char *)v20 + 62301) = 0;
  *(_DWORD *)(v23 + 272) = 0;
  *(_BYTE *)(v23 + 276) = 0;
  *((_BYTE *)v20 + 62311) = 0;
  *(_WORD *)((char *)v20 + 62309) = 0;
  *(_DWORD *)(v23 + 280) = 0;
  *(_BYTE *)(v23 + 284) = 0;
  *((_BYTE *)v20 + 62319) = 0;
  *(_WORD *)((char *)v20 + 62317) = 0;
  *(_DWORD *)(v23 + 288) = 0;
  *(_BYTE *)(v23 + 292) = 0;
  *((_BYTE *)v20 + 62327) = 0;
  *(_WORD *)((char *)v20 + 62325) = 0;
  *(_DWORD *)(v23 + 296) = 0;
  *(_BYTE *)(v23 + 300) = 0;
  *((_BYTE *)v20 + 62335) = 0;
  *(_WORD *)((char *)v20 + 62333) = 0;
  *(_DWORD *)(v23 + 304) = 0;
  *(_BYTE *)(v23 + 308) = 0;
  *((_BYTE *)v20 + 62343) = 0;
  *(_WORD *)((char *)v20 + 62341) = 0;
  *(_DWORD *)(v23 + 312) = 0;
  *(_BYTE *)(v23 + 316) = 0;
  *((_BYTE *)v20 + 62351) = 0;
  *(_WORD *)((char *)v20 + 62349) = 0;
  *(_DWORD *)(v23 + 320) = 0;
  *(_BYTE *)(v23 + 324) = 0;
  *((_BYTE *)v20 + 62359) = 0;
  *(_WORD *)((char *)v20 + 62357) = 0;
  *(_DWORD *)(v23 + 328) = 0;
  *(_BYTE *)(v23 + 332) = 0;
  *((_BYTE *)v20 + 62367) = 0;
  *(_WORD *)((char *)v20 + 62365) = 0;
  *(_DWORD *)(v23 + 336) = 0;
  *(_BYTE *)(v23 + 340) = 0;
  *((_BYTE *)v20 + 62375) = 0;
  *(_WORD *)((char *)v20 + 62373) = 0;
  *(_DWORD *)(v23 + 344) = 0;
  *(_BYTE *)(v23 + 348) = 0;
  *((_BYTE *)v20 + 62383) = 0;
  *(_WORD *)((char *)v20 + 62381) = 0;
  *(_DWORD *)(v23 + 352) = 0;
  *(_BYTE *)(v23 + 356) = 0;
  *((_BYTE *)v20 + 62391) = 0;
  *(_WORD *)((char *)v20 + 62389) = 0;
  *(_DWORD *)(v23 + 360) = 0;
  *(_BYTE *)(v23 + 364) = 0;
  *((_BYTE *)v20 + 62399) = 0;
  *(_WORD *)((char *)v20 + 62397) = 0;
  *(_DWORD *)(v23 + 368) = 0;
  *(_BYTE *)(v23 + 372) = 0;
  *((_BYTE *)v20 + 62407) = 0;
  *(_WORD *)((char *)v20 + 62405) = 0;
  *(_QWORD *)(v23 + 376) = 0;
  memcpy(v20 + 15604, v363, 0x314uLL);
  *(_QWORD *)(v20 + 15801) = 0;
  v20[15803] = 0;
  *((_OWORD *)v20 + 3951) = v361;
  *((_WORD *)v20 + 31616) = v362;
  memcpy((char *)v20 + 63234, v360, 0x142uLL);
  v322[33] = 0;
  *(_OWORD *)(v20 + 15898) = 0u;
  *(_OWORD *)(v20 + 15902) = 0u;
  *((_BYTE *)v20 + 63624) = 0;
  *(_OWORD *)(v20 + 15890) = 0u;
  *(_OWORD *)(v20 + 15894) = 0u;
  *(unsigned int *)((char *)v20 + 63625) = 0;
  v20[15907] = 0;
  *((_QWORD *)v322 + 26) = 0;
  *((_BYTE *)v322 + 216) = 0;
  v20[15911] = 0;
  *(unsigned int *)((char *)v20 + 63641) = 0;
  *((_QWORD *)v322 + 28) = 0;
  *((_BYTE *)v20 + 63720) = 0;
  *(_OWORD *)(v20 + 15922) = 0u;
  *(_OWORD *)(v20 + 15926) = 0u;
  *(_OWORD *)(v20 + 15914) = 0u;
  *(_OWORD *)(v20 + 15918) = 0u;
  v20[15931] = 0;
  *(unsigned int *)((char *)v20 + 63721) = 0;
  *((_QWORD *)v322 + 38) = 0;
  *((_BYTE *)v322 + 312) = 0;
  memcpy((char *)v20 + 63737, __src, 0x3E58uLL);
  *(unsigned int *)((char *)v20 + 79697) = 0;
  v20[19925] = 0;
  *(_OWORD *)(v337 + 34) = xmmword_24BC0A120;
  *(_OWORD *)(v337 + 38) = xmmword_24BC0A130;
  *((_QWORD *)v337 + 21) = 0;
  *(_OWORD *)(v23 + 364) = 0u;
  *(_OWORD *)(v23 + 336) = 0u;
  *(_OWORD *)(v23 + 352) = 0u;
  *(_OWORD *)(v23 + 304) = 0u;
  *(_OWORD *)(v23 + 320) = 0u;
  *(_OWORD *)(v23 + 272) = 0u;
  *(_OWORD *)(v23 + 288) = 0u;
  *(_OWORD *)(v23 + 240) = 0u;
  *(_OWORD *)(v23 + 256) = 0u;
  *(_OWORD *)(v23 + 208) = 0u;
  *(_OWORD *)(v23 + 224) = 0u;
  *(_OWORD *)(v23 + 176) = 0u;
  *(_OWORD *)(v23 + 192) = 0u;
  *(_OWORD *)(v23 + 144) = 0u;
  *(_OWORD *)(v23 + 160) = 0u;
  *(_OWORD *)(v23 + 112) = 0u;
  *(_OWORD *)(v23 + 128) = 0u;
  *(_OWORD *)(v23 + 80) = 0u;
  *(_OWORD *)(v23 + 96) = 0u;
  *(_OWORD *)(v23 + 48) = 0u;
  *(_OWORD *)(v23 + 64) = 0u;
  *(_OWORD *)(v23 + 16) = 0u;
  *(_OWORD *)(v23 + 32) = 0u;
  *(_OWORD *)v23 = 0u;
  *(_BYTE *)v23 = NK_Sample_Track_Meas((int *)v353, (_DWORD *)(v21 + 15608), (double *)(v21 + 15616), (uint64_t)v20, 0.0, v102, v103);
  *(_OWORD *)(v353 + 7736) = 0u;
  *(_OWORD *)(v353 + 7752) = 0u;
  *(_OWORD *)(v353 + 7704) = 0u;
  *(_OWORD *)(v353 + 7720) = 0u;
  *(_OWORD *)(v353 + 7672) = 0u;
  *(_OWORD *)(v353 + 7688) = 0u;
  *(_OWORD *)(v353 + 7640) = 0u;
  *(_OWORD *)(v353 + 7656) = 0u;
  *(_OWORD *)(v353 + 7608) = 0u;
  *(_OWORD *)(v353 + 7624) = 0u;
  *(_OWORD *)(v353 + 7576) = 0u;
  *(_OWORD *)(v353 + 7592) = 0u;
  *(_OWORD *)(v353 + 7544) = 0u;
  *(_OWORD *)(v353 + 7560) = 0u;
  *(_OWORD *)(v353 + 7512) = 0u;
  *(_OWORD *)(v353 + 7528) = 0u;
  *(_QWORD *)(v353 + 48) = 0;
  v348 = (double *)(v20 + 378);
  memcpy(v20 + 378, (const void *)(a9 + 32), 0x160uLL);
  v104 = *(_OWORD *)(a9 + 824);
  v105 = *(_OWORD *)(a9 + 840);
  v106 = *(_OWORD *)(a9 + 856);
  *((_OWORD *)v20 + 3872) = *(_OWORD *)(a9 + 872);
  *((_OWORD *)v20 + 3871) = v106;
  *((_OWORD *)v20 + 3870) = v105;
  *((_OWORD *)v20 + 3869) = v104;
  v107 = *(_OWORD *)(a9 + 888);
  v108 = *(_OWORD *)(a9 + 904);
  v109 = *(_OWORD *)(a9 + 920);
  *((_OWORD *)v20 + 3876) = *(_OWORD *)(a9 + 936);
  *((_OWORD *)v20 + 3875) = v109;
  *((_OWORD *)v20 + 3874) = v108;
  *((_OWORD *)v20 + 3873) = v107;
  v336 = v20 + 466;
  *((_BYTE *)v20 + 1864) = *(_BYTE *)(a9 + 18);
  v20[467] = *(_DWORD *)(a9 + 12);
  v110 = *(_DWORD *)(a10 + 2048);
  *((_QWORD *)v20 + 7491) = *(_QWORD *)(a10 + 2040);
  v20[14984] = v110;
  v111 = *(_DWORD *)(a10 + 2060);
  *(_QWORD *)(v20 + 14985) = *(_QWORD *)(a10 + 2052);
  v20[14987] = v111;
  v112 = *(_DWORD *)(a10 + 2072);
  *((_QWORD *)v20 + 7494) = *(_QWORD *)(a10 + 2064);
  v20[14990] = v112;
  NK_Get_Ext_CTXT(v20[1], (uint64_t)v20, v21, (_DWORD *)a10);
  v20[468] = *(_DWORD *)a10;
  v113 = *(_DWORD *)(a10 + 52);
  if (v113 == 2)
  {
    v114 = *(_DWORD *)(v21 + 20);
    v115 = (uint64_t)v349;
    if (v114 - 2 <= 2)
    {
      if (*v336)
      {
        if (v114 > 3 || (int)v20[467] >= 2)
          goto LABEL_25;
      }
      else if (v114 > 3)
      {
        goto LABEL_25;
      }
      v116 = 4;
      goto LABEL_23;
    }
LABEL_18:
    if (v113 == v114)
      goto LABEL_25;
    *(_DWORD *)(v21 + 20) = v113;
    *(_DWORD *)(v21 + 24) = *(_DWORD *)(a10 + 56);
    goto LABEL_24;
  }
  v114 = *(_DWORD *)(v21 + 20);
  v115 = (uint64_t)v349;
  if ((v113 - 5) > 3 || v114 - 5 > 3)
    goto LABEL_18;
  if (!*v336 || (int)v20[467] <= 1)
  {
    if (v114 == 5)
    {
      v116 = 6;
    }
    else
    {
      if (v114 != 6)
        goto LABEL_25;
      v116 = 7;
    }
LABEL_23:
    *(_DWORD *)(v21 + 20) = v116;
LABEL_24:
    NK_Set_Dynamics(*(_QWORD *)(v21 + 20), v21 + 32);
  }
LABEL_25:
  v358 = (unsigned __int8 *)(v115 + 19968);
  NK_Set_XO_PN(a10, v21 + 32);
  if (!*(_DWORD *)(a9 + 56))
  {
    *(_BYTE *)(v21 + 136) = 1;
    *(_DWORD *)(v21 + 140) = 20;
  }
  if (*(_BYTE *)(v21 + 7))
  {
    *(_BYTE *)(v21 + 7) = 0;
    *(_BYTE *)(v21 + 136) = 1;
    v117 = 33;
  }
  else
  {
    if (*(_DWORD *)(v21 + 140) != 33)
      goto LABEL_32;
    v117 = 34;
  }
  *(_DWORD *)(v21 + 140) = v117;
LABEL_32:
  v118 = (_BYTE *)(v115 + 68024);
  NK_Check_TOW_Adjust(v21, (uint64_t)v20);
  v119 = *(_DWORD *)(a10 + 1652);
  v120 = (double *)*(unsigned __int16 *)(v21 + 18);
  if (v119 * *(_DWORD *)(v115 + 26984) > (1000 * (_DWORD)v120) && *(double *)(a9 + 360) > 0.0)
    NK_Decay_Speed(v120, v119, (uint64_t)v348, v21);
  NK_Predict_State((double *)v20, v348);
  v121 = *(double *)(a9 + 224);
  if (fabs(v121) < 1.48352986)
  {
    v122 = __sincos_stret(v121);
    v123 = 1.0 / sqrt(v122.__sinval * v122.__sinval * -0.00669437999 + 1.0);
    v124 = v122.__cosval * (*(double *)(a9 + 240) + v123 * 6378137.0);
    if (v124 < 1.0)
      v124 = 1.0;
    *(double *)(v115 + 68112) = v124;
    *(double *)(v115 + 68104) = *(double *)(a9 + 240) + v123 * (v123 * v123) * 6335439.33;
  }
  v125 = *v20;
  v20[379] = v20[1];
  *((_QWORD *)v20 + 190) = *((_QWORD *)v20 + 1);
  if (!*v118)
  {
    *v118 = 1;
    *(_DWORD *)(v115 + 68028) = v125;
  }
  v319 = v115 + 68024;
  NK_Get_Ext_Meas(v125, v20[4], (_DWORD *)a10, (uint64_t)v20, v21);
  v126 = *((unsigned __int8 *)v20 + 60200);
  v352 = (double *)(v20 + 15050);
  if (*((_BYTE *)v20 + 60200))
    v325 = v20[15052] - 3 < 2;
  else
    v325 = 0;
  v354 = (double *)(v20 + 15434);
  if (*(_DWORD *)(v21 + 20) <= 4u
    && (!*(_BYTE *)(v21 + 241)
     || *((_BYTE *)v20 + 60200)
     && *((_BYTE *)v341 + 80)
     && (int)v20[5] >= 4
     && *(double *)v341 <= 6250000.0
     && *((double *)v341 + 14) <= 250000.0))
  {
    *((_BYTE *)v20 + 1880) = 1;
  }
  v335 = v115 + 27040;
  v329 = (int64x2_t *)(v20 + 15476);
  if (!*v336 || *(_BYTE *)(v115 + 68120))
    goto LABEL_63;
  if ((int)v20[467] < 2 || *((double *)v20 + 7742) > 30000.0 || !*(_DWORD *)(v115 + 27000))
  {
    v315 = v126 == 0;
    v127 = !v325;
    if (v315)
      v127 = 1;
    if ((v127 & 1) != 0 || *(double *)v341 > 900000000.0)
    {
LABEL_63:
      if (*((_BYTE *)v20 + 25) && (int)v20[5] >= 1)
        NK_Crude_Apx_Pos(v353);
    }
  }
  NK_Transform_State((uint64_t)v348);
  v323 = (double *)(v21 + 27528);
  v324 = (double *)(v21 + 27624);
  v331 = (_OWORD *)(v21 + 14208);
  if ((NK_Init_Cov_Mat(*((unsigned __int8 *)v20 + 1864), *(_QWORD *)(v21 + 20), v20[5], v352, v21 + 352, v115, (_OWORD *)(v21 + 14208), v21 + 27528, *(double *)(a10 + 1704), v21 + 27624, v329, (uint64_t)v354) & 1) == 0)
  {
    NK_Prop_Cov_Mat(*((double *)v20 + 194), (double *)(v21 + 352));
    NK_Add_Nominal_PN(v21, (uint64_t)v348, *((unsigned __int8 *)v20 + 1488), (double *)(v21 + 32), (double *)(v21 + 352), v115, v354);
    if (*(_BYTE *)(v21 + 136))
      NK_Init_Cov_Mat(*((unsigned __int8 *)v20 + 1864), *(_QWORD *)(v21 + 20), v20[5], v352, v21 + 352, v115, v331, (uint64_t)v323, *(double *)(a10 + 1704), (uint64_t)v324, v329, (uint64_t)v354);
  }
  v345 = (double *)(v21 + 352);
  bzero(v20 + 536, 0x1200uLL);
  v342 = (uint64_t)(v20 + 9140);
  v356 = (double *)(v353 + 88);
  NK_Comp_DR_Meas(0x80u, v20[13], v353 + 88, v353 + 728, v353 + 1752, v353 + 2904, v353 + 6488, v353 + 4440, *((double *)v20 + 194), v353 + 984, v353 + 1240, v21 + 20160, v21 + 25792, v20 + 52, v20 + 9154);
  *((_BYTE *)v20 + 61845) = NK_PrePro_SV_Meas(*(_QWORD *)(v21 + 20), v355 + 50616, v355 + 50834, v353, (uint64_t)v350, v333, a10, v343, (uint64_t)a11, v355, (char *)v21, (uint64_t)v20);
  NK_Set_Environ_Severity(v353, a10, v21, (uint64_t)v20);
  NK_Set_PR_Meas_Var(v353, a10, v21, (uint64_t)v20);
  NK_Set_DO_Meas_Var(v353, (uint64_t)v20);
  NK_Set_DR_Meas_Var(v353, (uint64_t)v20);
  if (*(_BYTE *)v335 && *(_DWORD *)(v115 + 26992) <= 1u)
  {
    v128 = 0;
    v129 = (double *)(v20 + 1992);
    v130 = (_BYTE *)(v353 + 88);
    do
    {
      if (*((_BYTE *)v20 + v128 + 6808))
      {
        v131 = *v129;
        if (*v129 >= dbl_24BC0A140[*v130 == 2])
          v131 = dbl_24BC0A140[*v130 == 2];
        *v129 = v131;
      }
      ++v128;
      v129 += 3;
      v130 += 4;
    }
    while (v128 != 128);
  }
  if ((*(_DWORD *)(v355 + 25344) - 2) <= 4)
  {
    if (*(unsigned __int16 *)(v355 + 25388) - *((__int16 *)v20 + 13) >= 0)
      v132 = -((*(unsigned __int16 *)(v355 + 25388) - *((__int16 *)v20 + 13)) & 0x3F);
    else
      v132 = (*((_WORD *)v20 + 13) - *(_WORD *)(v355 + 25388)) & 0x3F;
    if (v132 > 31)
      v132 -= 64;
    v133 = *(double *)(v355 + 25368)
         + *(double *)(v355 + 25376) * (double)((int)*((double *)v20 + 4) - *(_DWORD *)(v355 + 25384) + 604800 * v132);
    *((double *)v20 + 187) = v133;
    *(double *)(v21 + 15544) = v133 * 299792458.0;
  }
  v321 = v353 + 1752;
  if ((*(_DWORD *)(v355 + 50556) - 2) >= 5)
  {
    v137 = *(double *)(v21 + 15576);
  }
  else
  {
    if (*(__int16 *)(v355 + 50612) - *((__int16 *)v20 + 13) >= 0)
      v134 = -((*(__int16 *)(v355 + 50612) - *((__int16 *)v20 + 13)) & 0x3FF);
    else
      v134 = (*((_WORD *)v20 + 13) - *(_WORD *)(v355 + 50612)) & 0x3FF;
    if (v134 > 511)
      v134 -= 1024;
    if (v134 < -512)
      v134 += 1024;
    v135 = *((double *)v20 + 4) - (double)*(int *)(v355 + 50608) + (double)(604800 * v134);
    v136 = *(double *)(v355 + 50584) + *(double *)(v355 + 50592) * v135 + *(double *)(v355 + 50600) * (v135 * v135);
    *((double *)v20 + 188) = v136;
    v137 = v136 * 299792458.0;
    *(double *)(v21 + 15576) = v137;
  }
  v138 = (double)(int)v20[13];
  v139 = *(double *)(v21 + 25920) + v138 * 299792.458;
  *(double *)(v21 + 25920) = v139;
  v140 = *(double *)(v21 + 20112) + v138 * 299792.458;
  *(double *)(v21 + 20112) = v140;
  v141 = *(double *)(v21 + 20128) + v138 * 299792.458;
  *(double *)(v21 + 20128) = v141;
  Corr_Old_PR_Est(v356, *v358, v358[2], v358[16], v358[32], v358[1], 0x80u, v21 + 17032, *(double *)(v21 + 20152), v139, v140, v141, *(double *)(v21 + 20144), 0.0, 0.0, *(double *)(v21 + 15544) - *(double *)(v21 + 15592), v137 - *(double *)(v21 + 15600), v21 + 25928, v21 + 21184,
    (unsigned __int8 *)(v21 + 24256),
    (double *)(v21 + 24768));
  NK_Comp_PR_DO_Res(v353, (uint64_t)v350, v355, a10, v343, v21, (uint64_t)v20);
  if (!*((_BYTE *)v20 + 1680) || !*((_BYTE *)v20 + 1681) || !*((_BYTE *)v20 + 1682))
    NK_Set_Constell_Clock_Bias(v356, (uint64_t)v20, v355, *(_BYTE *)(v21 + 241), (uint64_t)v345, v142, v143, v144, v145, v146);
  NK_Comp_DR_Res(v353, v21, (uint64_t)v20);
  if (!*(_BYTE *)(v21 + 136))
    NK_Add_SV_ARes_PN_ClkDrift((char *)v21, (uint64_t)v20, *(double *)(a10 + 112));
  v334 = (unsigned __int8 *)(v20 + 15613);
  v326 = (double *)(v20 + 15336);
  v332 = (char *)v20 + 6755;
  v344 = (unsigned int *)(v115 + 26984);
  NK_SV_PR_LvsE_Check(a10, v353, v21, v20);
  NK_Reflection_Rejection_Ped(a10, v353, v21, (int *)v20);
  NK_Reduce_Num_SV(v353, v21, v20, (uint64_t)a11);
  NK_Dopp_Outlier(v353, v21, (uint64_t)v20);
  NK_SV_Res_RTests_FDist(*(_DWORD *)(a10 + 60), v353, v21, (uint64_t)v20);
  LOWORD(v389[0]) = 0;
  v389[1074] = 0.0;
  LOBYTE(v389[1075]) = 0;
  memset(&v389[1065], 0, 65);
  v389[1086] = 0.0;
  LOBYTE(v389[1087]) = 0;
  LODWORD(v389[1076]) = 0;
  memset(&v389[1077], 0, 65);
  bzero(&v389[1], 0x213CuLL);
  memset(&v389[1088], 0, 24);
  NK_Least_Squares_Check(v353);
  NK_Least_Squares_Publish_Soln((uint64_t)(v20 + 15808), (uint64_t)v389);
  memcpy((void *)(v327 + 3168), &v389[1], 0x400uLL);
  memcpy((void *)(v327 + 4192), &v389[131], 0x400uLL);
  NK_Least_Squares_Cross_Check((unsigned __int8 *)v356, v21, (uint64_t)v20, v389);
  if (*(_BYTE *)v337 && (!*((_BYTE *)v20 + 1680) || !*((_BYTE *)v20 + 1681) || !*((_BYTE *)v20 + 1682)))
    NK_Set_Constell_Clock_Bias(v356, (uint64_t)v20, v355, *(_BYTE *)(v21 + 241), (uint64_t)v345, v147, v148, v149, v150, v151);
  v152 = (_DWORD *)(v23 + 32);
  NK_Least_Squares_Check(v353);
  NK_Least_Squares_Publish_Soln(v327 + 1024, (uint64_t)v389);
  NK_Least_Squares_Check(v353);
  NK_Least_Squares_Publish_Soln(v327 + 1560, (uint64_t)v389);
  NK_Least_Squares_Check(v353);
  NK_Least_Squares_Publish_Soln(v327 + 2096, (uint64_t)v389);
  NK_Least_Squares_Check(v353);
  NK_Least_Squares_Publish_Soln(v327 + 2632, (uint64_t)v389);
  NK_SV_Meas_IVar((_QWORD *)1, (uint64_t)v356, (uint64_t)(v20 + 13190), v345, (uint64_t)(v20 + 1688), *((double *)v20 + 194));
  v328 = (uint64_t)(v20 + 5414);
  NK_SV_Meas_IVar((_QWORD *)2, (uint64_t)v356, (uint64_t)(v20 + 13190), v345, (uint64_t)(v20 + 5414), *((double *)v20 + 194));
  v338 = (uint64_t)(v20 + 13190);
  NK_SV_Meas_IVar((_QWORD *)3, (uint64_t)v356, (uint64_t)(v20 + 13190), v345, v342, *((double *)v20 + 194));
  NK_Bit_Sync_Check((char *)v353, v21, (uint64_t)v20, (uint64_t)a11);
  NK_Range_Chip_Check((char *)v353, v21, (uint64_t)v20, (uint64_t)a11);
  v153 = 0;
  v154 = v20 + 1766;
  v155 = a9;
  v156 = v341;
  do
  {
    if (*((_BYTE *)v154 + v153) && !*((_BYTE *)v20 + v153 + 57))
    {
      *((_BYTE *)v154 + v153) = 0;
      --*v332;
    }
    ++v153;
  }
  while (v153 != 128);
  v157 = *(_DWORD *)(v21 + 24);
  switch(*(_DWORD *)(v21 + 20))
  {
    case 0:
      goto LABEL_255;
    case 1:
      if (!v157)
        goto LABEL_110;
      goto LABEL_255;
    case 2:
      if (v157 > 1)
        goto LABEL_255;
      goto LABEL_110;
    case 3:
      if (v157 > 2)
        goto LABEL_255;
      goto LABEL_110;
    case 4:
      if (v157 - 5 < 3)
        goto LABEL_255;
      goto LABEL_110;
    case 5:
      if ((v157 & 0xFFFFFFFE) == 6)
        goto LABEL_255;
      goto LABEL_110;
    case 6:
      if (v157 != 7)
        goto LABEL_110;
LABEL_255:
      if (*v344 > *(unsigned __int16 *)(v21 + 16) || v20[468] != 1)
        goto LABEL_110;
      v200 = *(_DWORD *)(v21 + 148);
      if (v200 >= *(_DWORD *)(v21 + 152))
        v200 = *(_DWORD *)(v21 + 152);
      if (v200 >= *(_DWORD *)(v21 + 156))
        v200 = *(_DWORD *)(v21 + 156);
      if (v200 <= 0xA)
LABEL_110:
        NK_SV_Res_RTests(v353, v21, (uint64_t)v20, (uint64_t)a11);
      NK_SV_Res_RTests_Riskier_SVs(v353, (uint64_t)v20);
      NK_Check_Num_SV_Res(*((unsigned __int8 *)v20 + 1864), *(_QWORD *)(v21 + 20), *(unsigned __int8 *)(v21 + 2), *((unsigned __int8 *)v20 + 60200), v20[15052], *((_DWORD *)v358 + 1758), (uint64_t)(v20 + 1688), v342, *(double *)v341, v328);
      v158 = 0;
      v159 = v20 + 11810;
      do
      {
        if (*((_BYTE *)v20 + v158 + 36872) && v20[v158 + 1830] - 1 <= 0x1C)
        {
          *(double *)&v159[2 * v158] = *(double *)&v159[2 * v158] + 1.0;
          *((_BYTE *)v159 + v158 - 128) = 1;
        }
        ++v158;
      }
      while (v158 != 128);
      if (*v349
        || (NK_Add_SV_ARes_PN(*(unsigned int *)(a9 + 4), *(unsigned __int8 *)(a9 + 17), v353, v21, (uint64_t)v20, *(_DWORD *)(a10 + 60)), *(_BYTE *)(v21 + 136)))
      {
        NK_Init_Cov_Mat(*((unsigned __int8 *)v20 + 1864), *(_QWORD *)(v21 + 20), v20[5], v352, (uint64_t)v345, (uint64_t)v349, v331, (uint64_t)v323, *(double *)(a10 + 1704), (uint64_t)v324, v329, (uint64_t)v354);
      }
      v330 = (uint64_t)(v20 + 1688);
      if (!*(_BYTE *)(v21 + 6) && *v332 >= 6u && !*(_BYTE *)(v21 + 241) && v20[5] - 3 <= 2)
      {
        v160 = *((double *)v20 + 7722) * 25.0;
        *((double *)v20 + 7722) = v160;
        *(double *)(v21 + 512) = v160;
        EvLog("Nav_Kalman_Update: Freeing-up dT Synch ");
        v161 = *v354 * 25.0;
        *v354 = v161;
        *(double *)(v21 + 352) = v161;
        v162 = *((double *)v20 + 7718) * 25.0;
        *((double *)v20 + 7718) = v162;
        *(double *)(v21 + 368) = v162;
        v163 = *((double *)v20 + 7719) * 25.0;
        *((double *)v20 + 7719) = v163;
        *(double *)(v21 + 392) = v163;
      }
      NK_Get_Ext_Time(*v20, (uint64_t)v20, v21);
      NK_DeCor_Ext_Meas(v21, (uint64_t)v20);
      v320 = NK_Tunnel_Assist(v21, (int *)v20);
      memcpy((void *)(v21 + 976), v345, 0x270uLL);
      v166 = 0.0;
      *(_OWORD *)(v21 + 1600) = 0u;
      *(_OWORD *)(v21 + 1616) = 0u;
      *(_OWORD *)(v21 + 1632) = 0u;
      *(_OWORD *)(v21 + 1648) = 0u;
      *(_OWORD *)(v21 + 1664) = 0u;
      *(_OWORD *)(v21 + 1680) = 0u;
      *(_QWORD *)(v21 + 1696) = 0;
      v167 = (unsigned __int8 *)(v20 + 14996);
      if (*((_BYTE *)v20 + 59984)
        && KFSt_Meas_Update(5u, 0xCu, v167, (double *)(v21 + 976), (_WORD *)(v21 + 27078), *((double *)v20 + 209)))
      {
        *v152 = v20[14997];
      }
      v168 = *((double *)v20 + 7722);
      if (v168 > 0.000000001)
      {
        if ((v164 = *((double *)v20 + 7723), v166 = 1600000000.0, v164 < 1600000000.0)
          && (v164 = *((double *)v20 + 7724), v164 < 1600000000.0)
          && (v164 = *((double *)v20 + 7725), v164 < 1600000000.0)
          || *(_BYTE *)v352 && (v164 = *(double *)v341, *(double *)v341 < 1600000000.0))
        {
          v166 = 0.0001;
          if (*((_BYTE *)v20 + 56) == 2)
            goto LABEL_141;
          if (*((_BYTE *)v20 + 24))
            goto LABEL_141;
          if (*v167)
          {
            if (v20[14997] == 1)
            {
              v164 = *((double *)v20 + 7503);
              v165 = 0.00000004;
              if (v164 < 0.00000004)
                goto LABEL_141;
            }
          }
        }
      }
      if (*((_BYTE *)v20 + 56))
      {
        v166 = 0.9;
        if (v168 > 0.9)
        {
          v166 = 1.0;
          if (*v336)
          {
LABEL_141:
            v169 = *((_QWORD *)v20 + 209);
            v390[0] = 0.0;
            memset(&__src[7], 0, 152);
            memset(&__src[3], 0, 48);
            memset(__src, 0, 40);
            *((_QWORD *)&__src[2] + 1) = 0x3FF0000000000000;
            __src[6] = v169;
            umeas(v21 + 976, 0xCu, v166, (double *)__src, v389, v391, v390, 1.0e20);
            *v152 = 2;
          }
        }
      }
      v351 = (float64x2_t *)(v21 + 976);
      v170 = v20 + 14991;
      if (!*((_BYTE *)v20 + 60056))
        goto LABEL_155;
      v346 = (unsigned __int8 *)(v20 + 15014);
      v171 = 0;
      v172 = 0;
      v173 = 0;
      v174 = 0;
      v175 = (_BYTE *)(v353 + 88);
      do
      {
        if (*((_BYTE *)v20 + v171 + 7064))
        {
          switch(*v175)
          {
            case 0:
              EvCrt_Illegal_switch_case("Nav_Kalman_Update", 0x4C0u);
              break;
            case 1:
            case 3:
            case 5:
            case 7:
              ++v172;
              break;
            case 2:
              ++v173;
              break;
            case 4:
              ++v174;
              break;
            default:
              break;
          }
        }
        ++v171;
        v175 += 4;
      }
      while (v171 != 128);
      v168 = *((double *)v20 + 204);
      v166 = 299792458.0;
      if (v172 || !(v173 | v174))
      {
        v155 = a9;
        v170 = v20 + 14991;
        v156 = v341;
        if (!KFSt_Meas_Update(0, 0xCu, v346, v351->f64, (_WORD *)(v21 + 27080), v168 * 299792458.0))
          goto LABEL_155;
        goto LABEL_154;
      }
      v156 = v341;
      v170 = v20 + 14991;
      if (v173)
      {
        v155 = a9;
        if (!KFSt_Meas_Update(1u, 0xCu, v346, v351->f64, (_WORD *)(v21 + 27080), *((double *)v20 + 205) * 299792458.0))
          goto LABEL_155;
LABEL_154:
        *(_DWORD *)(v23 + 36) = v170[24];
        goto LABEL_155;
      }
      v155 = a9;
      if (v174
        && KFSt_Meas_Update(2u, 0xCu, v346, v351->f64, (_WORD *)(v21 + 27080), *((double *)v20 + 206) * 299792458.0))
      {
        goto LABEL_154;
      }
LABEL_155:
      if (*v332)
      {
        v176 = *v354;
        if (*v354 >= 90000.0)
        {
          v177 = 0;
        }
        else
        {
          v166 = *((double *)v20 + 7718);
          v177 = v166 < 90000.0;
        }
        if (v20[5] == 11 && (v389[0] = 0.0, !R8_EQ((const double *)v20 + 204, v389)))
        {
          *(_QWORD *)&__src[0] = 0;
          v192 = R8_EQ((const double *)v20 + 205, (const double *)__src);
          v178 = 0;
          v166 = 900000000.0;
          if (v176 < 900000000.0 && !v192)
          {
            v168 = *((double *)v20 + 7718);
            v178 = v168 < 900000000.0;
          }
        }
        else
        {
          v178 = 0;
        }
        v179 = !*((_DWORD *)v358 + 1758)
            && (v190 = *((char *)v20 + 63190), v190 >= 1)
            && *((char *)v20 + 63189) >= 1
            && *((unsigned __int8 *)v20 + 63189) + v190 < 6;
        if (v177 || v178 || v179)
        {
          *((_BYTE *)v156 + 224) = 2;
          v156[57] = 1;
          NK_IntConstel_TO_IntMeas((char *)v21, (uint64_t)v20, v355, v166, v168, v164, v165);
          v176 = *v354;
        }
        if (v176 >= 90000.0)
        {
          v180 = 0;
        }
        else
        {
          v166 = *((double *)v20 + 7719);
          v180 = v166 < 90000.0;
        }
        if (v20[5] == 11 && (v389[0] = 0.0, !R8_EQ((const double *)v20 + 204, v389)))
        {
          *(_QWORD *)&__src[0] = 0;
          v193 = R8_EQ((const double *)v20 + 206, (const double *)__src);
          v181 = 0;
          v166 = 900000000.0;
          if (v176 < 900000000.0 && !v193)
          {
            v168 = *((double *)v20 + 7719);
            v181 = v168 < 900000000.0;
          }
        }
        else
        {
          v181 = 0;
        }
        v182 = !*((_DWORD *)v358 + 1758)
            && (v191 = *((char *)v20 + 63192), v191 >= 1)
            && *((char *)v20 + 63189) >= 1
            && *((unsigned __int8 *)v20 + 63189) + v191 < 6;
        if (v180 || v181 || v182)
        {
          *((_BYTE *)v156 + 224) = 4;
          v156[57] = 4;
          NK_IntConstel_TO_IntMeas((char *)v21, (uint64_t)v20, v355, v166, v168, v164, v165);
        }
        v170 = v20 + 14991;
        if (*((double *)v20 + 7718) < 90000.0)
        {
          v183 = *((double *)v20 + 7719);
          if (v183 < 90000.0)
          {
            *((_BYTE *)v156 + 224) = 4;
            v156[57] = 5;
            NK_IntConstel_TO_IntMeas((char *)v21, (uint64_t)v20, v355, v183, v168, v164, v165);
          }
        }
      }
      if (*((_BYTE *)v170 + 164))
      {
        v184 = *((double *)v20 + 208) * 299792458.0;
        v185 = *((double *)v20 + 7721);
        if (v185 <= 80.8879661)
        {
          *((_BYTE *)v170 + 164) = 0;
          *((_BYTE *)v170 + 180) = 1;
          v186 = *(double *)(v170 + 47);
          v187 = v185 + *(double *)(v170 + 49);
          if ((v186 - v184) * (v186 - v184) > v187 * 9.0)
            EvLog_v("Nav_Kalman_Update: WARNING: Ext ClkD %g incompatible with NK ClkD %g Unc %g", v186, v184, sqrt(v187));
        }
        else if (KFSt_Meas_Update(4u, 0xCu, (unsigned __int8 *)v170 + 164, v351->f64, (_WORD *)(v21 + 27088), v184))
        {
          *(_DWORD *)(v23 + 48) = v170[42];
        }
      }
      *(_BYTE *)(v340 + 152) = NK_Map_Vector((int *)v20, v21, v155);
      if (*(_BYTE *)v352)
      {
        if (Horz_Meas_Update(6u, (double *)v20 + 213, (double *)v20 + 217, 0xCu, v352, (_BOOL8)v351, (_WORD *)(v21 + 27090)))
        {
          *(_DWORD *)(v23 + 56) = v170[60];
          if (*(_BYTE *)(v23 + 252) && *(double *)v156 < 160000.0)
            *(_BYTE *)(v23 + 260) = 1;
          if (*(_BYTE *)(v23 + 284) && *(double *)v156 < 160000.0)
            *(_BYTE *)(v23 + 292) = 1;
        }
        else
        {
          *(_DWORD *)(v23 + 256) = 3;
          if (*(_BYTE *)(v23 + 284))
            *(_DWORD *)(v23 + 288) = 3;
          if (v170[61] - 3 <= 1)
            *(_DWORD *)(p_NA + 632) = 2;
          v188 = *((double *)v156 + 6) * *((double *)v156 + 6) + *((double *)v156 + 5) * *((double *)v156 + 5);
          if (v188 > *((double *)v156 + 3))
          {
            v189 = p_NA;
            *(double *)(p_NA + 576) = v188;
            *(double *)(v189 + 584) = v188;
          }
        }
      }
      if (*((_BYTE *)v156 + 80))
      {
        if (Vert_Meas_Update(6u, (double *)v20 + 217, 0xCu, (unsigned __int8 *)v156 + 80, v351->f64, (_WORD *)(v21 + 27092), *((double *)v20 + 215)))
        {
          *(_DWORD *)(v23 + 60) = v156[21];
          if (!*(_BYTE *)(v23 + 244) && *(_BYTE *)(v23 + 268) && *((double *)v156 + 14) < 160000.0)
            *(_BYTE *)(v23 + 276) = 1;
        }
        else if (*(_BYTE *)(v23 + 244))
        {
          *(_BYTE *)(v23 + 244) = 0;
          *(_DWORD *)(v23 + 240) = 3;
        }
        else if (v156[21] == 1)
        {
          *(_DWORD *)(v23 + 272) = 3;
        }
      }
      if (*(_BYTE *)v170 && *((unsigned __int8 *)v20 + 21659) + *((unsigned __int8 *)v20 + 36563))
      {
        *(_BYTE *)v339 = 1;
        v339[1] = 1;
        v339[4] = *v20;
        *(_OWORD *)(v339 + 6) = xmmword_24BC0A150;
        *((_QWORD *)v339 + 7) = 0x4022000000000000;
      }
      if (*(_BYTE *)v339
        && Speed_Meas_Update(9u, (double *)v20 + 198, 0xCu, (unsigned __int8 *)v339, v351->f64, (_WORD *)(v21 + 27100), 1.0))
      {
        *(_DWORD *)(v23 + 76) = v339[1];
      }
      if (*((_BYTE *)v339 + 72))
      {
        if (*(_DWORD *)(v335 + 28) != 3)
        {
          v194 = *((double *)v20 + 7749);
          v195 = 0.0;
          v196 = 3243;
          do
          {
            v195 = v195 + *(double *)(v21 + 8 * v196) * *(double *)(v21 + 8 * v196);
            v197 = v196 - 3240;
            --v196;
          }
          while (v197 > 1);
          if (v194 < 45.0 && *((double *)v339 + 12) > 0.75)
          {
            v198 = *((double *)v20 + 231);
            if (v198 > 0.75 && *(double *)v322 > 0.75 && sqrt(v195) > 0.5)
            {
              v199 = cos(v194 * 0.0174532925);
              if (GSpeed_Meas_Update(9, (double *)v20 + 217, 0xCu, (unsigned __int8 *)v339 + 72, (_BOOL8)v351, (_WORD *)(v21 + 27104), v198, *(double *)(v21 + 27280), 1.0, 1.0 / v199))
              {
                *(_DWORD *)(v23 + 84) = v339[19];
              }
              else if (*(_BYTE *)(v23 + 324))
              {
                *(_BYTE *)(v23 + 324) = 0;
                *(_DWORD *)(v23 + 320) = 3;
              }
            }
          }
        }
      }
      if (*((_BYTE *)v156 + 152))
      {
        if (Vert_Meas_Update(9u, (double *)v20 + 217, 0xCu, (unsigned __int8 *)v156 + 152, v351->f64, (_WORD *)(v21 + 27094), -*((double *)v20 + 229)))
        {
          *(_DWORD *)(v23 + 64) = v156[39];
        }
        else if (*(_BYTE *)(v23 + 340))
        {
          *(_BYTE *)(v23 + 340) = 0;
          *(_DWORD *)(v23 + 336) = 3;
        }
      }
      if (*((_BYTE *)v339 + 144))
      {
        v201 = *((double *)v20 + 232);
        *((double *)v339 + 23) = v201;
        if (Track_Meas_Update(9, (double *)v20 + 217, 0xCu, (unsigned __int8 *)v339 + 144, (_BOOL8)v351, (_WORD *)(v21 + 27108), v201, *((double *)v20 + 231), 1.0))
        {
          *(_DWORD *)(v23 + 92) = v339[37];
        }
        else if (*(_BYTE *)(v23 + 356))
        {
          *(_BYTE *)(v23 + 356) = 0;
          *(_DWORD *)(v23 + 352) = 3;
        }
      }
      v203 = *(_DWORD *)(v21 + 20);
      v202 = *(_DWORD *)(v21 + 24);
      if (v203 != v202)
      {
        switch(v203)
        {
          case 0:
            goto LABEL_281;
          case 1:
            if (v202)
              goto LABEL_281;
            goto LABEL_282;
          case 2:
            if (v202 <= 1)
              goto LABEL_282;
            goto LABEL_281;
          case 3:
            if (v202 <= 2)
              goto LABEL_282;
            goto LABEL_281;
          case 4:
            if (v202 - 5 >= 3)
              goto LABEL_282;
            goto LABEL_281;
          case 5:
            if ((v202 & 0xFFFFFFFE) != 6)
              goto LABEL_282;
            goto LABEL_281;
          case 6:
            if (v202 != 7)
              goto LABEL_282;
LABEL_281:
            NK_Define_Meas_Innov_Sat_Thresh((uint64_t)v20, v21, (uint64_t)v348);
            v202 = *(_DWORD *)(v21 + 24);
LABEL_282:
            v203 = *(_DWORD *)(v21 + 20);
            break;
          default:
            break;
        }
        if (v203 != v202)
        {
          switch(v203)
          {
            case 0:
              goto LABEL_306;
            case 1:
              if (!v202)
                break;
              goto LABEL_306;
            case 2:
              if (v202 <= 1)
                break;
              goto LABEL_306;
            case 3:
              if (v202 <= 2)
                break;
              goto LABEL_306;
            case 4:
              if (v202 - 5 >= 3)
                break;
              goto LABEL_306;
            case 5:
              if ((v202 & 0xFFFFFFFE) != 6)
                break;
              goto LABEL_306;
            case 6:
              if (v202 == 7)
              {
LABEL_306:
                memset_pattern16(v20 + 7796, &unk_24BC0A170, 0x400uLL);
                memset_pattern16(v20 + 11522, &unk_24BC0A170, 0x400uLL);
                if (!*(_BYTE *)(v21 + 241) && *v344 <= *(unsigned __int16 *)(v21 + 16) && v20[468] == 1)
                {
                  v204 = *(_DWORD *)(v21 + 148);
                  if (v204 >= *(_DWORD *)(v21 + 152))
                    v204 = *(_DWORD *)(v21 + 152);
                  if (v204 >= *(_DWORD *)(v21 + 156))
                    v204 = *(_DWORD *)(v21 + 156);
                  if (v204 >= 0xB)
                  {
                    NK_Meas_Outlier_Check(2, (uint64_t)v356, *((unsigned __int8 *)v20 + 56), 0, v328, v342);
                    NK_Meas_ARP_Check(2u, v356, v328, v354, v324);
                  }
                }
              }
              break;
            default:
              break;
          }
        }
      }
      v347 = v156 + 20;
      if (*v344 > *(unsigned __int16 *)(v21 + 16) || v20[468] != 1)
        goto LABEL_323;
      v205 = *(_DWORD *)(v21 + 148);
      if (v205 >= *(_DWORD *)(v21 + 152))
        v205 = *(_DWORD *)(v21 + 152);
      if (v205 >= *(_DWORD *)(v21 + 156))
        v205 = *(_DWORD *)(v21 + 156);
      if (v205 >= 0xB && (v207 = *(_DWORD *)(v21 + 20), v206 = *(_DWORD *)(v21 + 24), v207 != v206))
      {
        v208 = 1;
        switch(v207)
        {
          case 0:
            break;
          case 1:
            v208 = v206 != 0;
            break;
          case 2:
            v312 = v206 > 1;
            goto LABEL_603;
          case 3:
            v312 = v206 > 2;
LABEL_603:
            v208 = v312;
            break;
          case 4:
            v208 = v206 - 5 < 3;
            break;
          case 5:
            v315 = (v206 & 0xFFFFFFFE) == 6;
            goto LABEL_621;
          case 6:
            v315 = v206 == 7;
LABEL_621:
            v208 = v315;
            break;
          default:
            goto LABEL_323;
        }
      }
      else
      {
LABEL_323:
        v208 = 0;
      }
      NK_SV_Meas_Update((char *)2, (uint64_t)v356, v338, (uint64_t)v20 + 57, v328, v351, v208, (uint64_t)(v20 + 396), *((double *)v20 + 194), (uint64_t)(v20 + 15326));
      v210 = *(_DWORD *)(v21 + 20);
      v209 = *(_DWORD *)(v21 + 24);
      if (v210 != v209)
      {
        switch(v210)
        {
          case 0:
            goto LABEL_339;
          case 1:
            if (!v209)
              goto LABEL_348;
            goto LABEL_339;
          case 2:
            if (v209 <= 1)
              goto LABEL_348;
            goto LABEL_339;
          case 3:
            if (v209 <= 2)
              goto LABEL_348;
            goto LABEL_339;
          case 4:
            if (v209 - 5 >= 3)
              goto LABEL_348;
            goto LABEL_339;
          case 5:
            if ((v209 & 0xFFFFFFFE) != 6)
              goto LABEL_348;
            goto LABEL_339;
          case 6:
            if (v209 == 7)
            {
LABEL_339:
              if (!*(_BYTE *)(v21 + 241) && *v344 <= *(unsigned __int16 *)(v21 + 16) && v20[468] == 1)
              {
                v211 = *(_DWORD *)(v21 + 148);
                if (v211 >= *(_DWORD *)(v21 + 152))
                  v211 = *(_DWORD *)(v21 + 152);
                if (v211 >= *(_DWORD *)(v21 + 156))
                  v211 = *(_DWORD *)(v21 + 156);
                if (v211 >= 0xB)
                  NK_Meas_ARP_Check(3u, v356, v342, v354, v324);
              }
            }
            break;
          default:
            goto LABEL_348;
        }
      }
      if (*v344 > *(unsigned __int16 *)(v21 + 16) || v20[468] != 1)
        goto LABEL_356;
LABEL_348:
      v212 = *(_DWORD *)(v21 + 148);
      if (v212 >= *(_DWORD *)(v21 + 152))
        v212 = *(_DWORD *)(v21 + 152);
      if (v212 >= *(_DWORD *)(v21 + 156))
        v212 = *(_DWORD *)(v21 + 156);
      if (v212 >= 0xB && (v214 = *(_DWORD *)(v21 + 20), v213 = *(_DWORD *)(v21 + 24), v214 != v213))
      {
        v215 = 1;
        switch(v214)
        {
          case 0:
            break;
          case 1:
            v215 = v213 != 0;
            break;
          case 2:
            v313 = v213 > 1;
            goto LABEL_609;
          case 3:
            v313 = v213 > 2;
LABEL_609:
            v215 = v313;
            break;
          case 4:
            v215 = v213 - 5 < 3;
            break;
          case 5:
            v316 = (v213 & 0xFFFFFFFE) == 6;
            goto LABEL_626;
          case 6:
            v316 = v213 == 7;
LABEL_626:
            v215 = v316;
            break;
          default:
            goto LABEL_356;
        }
      }
      else
      {
LABEL_356:
        v215 = 0;
      }
      NK_SV_Meas_Update((char *)3, (uint64_t)v356, v338, (uint64_t)v20 + 57, v342, v351, v215, (uint64_t)(v20 + 396), *((double *)v20 + 194), (uint64_t)(v20 + 15326));
      NK_Update_Intermediate_Residual((_QWORD *)1, (uint64_t)v356, v21, (uint64_t)v20);
      NK_PR_Res_ReWeight(a10, v353, v21, (uint64_t)v20);
      v217 = *(_DWORD *)(v21 + 20);
      v216 = *(_DWORD *)(v21 + 24);
      if (v217 != v216)
      {
        switch(v217)
        {
          case 0:
            goto LABEL_372;
          case 1:
            if (!v216)
              goto LABEL_381;
            goto LABEL_372;
          case 2:
            if (v216 <= 1)
              goto LABEL_381;
            goto LABEL_372;
          case 3:
            if (v216 <= 2)
              goto LABEL_381;
            goto LABEL_372;
          case 4:
            if (v216 - 5 >= 3)
              goto LABEL_381;
            goto LABEL_372;
          case 5:
            if ((v216 & 0xFFFFFFFE) != 6)
              goto LABEL_381;
            goto LABEL_372;
          case 6:
            if (v216 == 7)
            {
LABEL_372:
              memset_pattern16(v20 + 4070, &unk_24BC0A170, 0x400uLL);
              if (!*(_BYTE *)(v21 + 241) && *v344 <= *(unsigned __int16 *)(v21 + 16) && v20[468] == 1)
              {
                v218 = *(_DWORD *)(v21 + 148);
                if (v218 >= *(_DWORD *)(v21 + 152))
                  v218 = *(_DWORD *)(v21 + 152);
                if (v218 >= *(_DWORD *)(v21 + 156))
                  v218 = *(_DWORD *)(v21 + 156);
                if (v218 >= 0xB)
                {
                  NK_Meas_Outlier_Check(1, (uint64_t)v356, *((unsigned __int8 *)v20 + 56), v330, 0, 0);
                  NK_Meas_ARP_Check(1u, v356, v330, v354, v323);
                }
              }
            }
            break;
          default:
            goto LABEL_381;
        }
      }
      if (*v344 > *(unsigned __int16 *)(v21 + 16) || v20[468] != 1)
        goto LABEL_389;
LABEL_381:
      v219 = *(_DWORD *)(v21 + 148);
      if (v219 >= *(_DWORD *)(v21 + 152))
        v219 = *(_DWORD *)(v21 + 152);
      if (v219 >= *(_DWORD *)(v21 + 156))
        v219 = *(_DWORD *)(v21 + 156);
      if (v219 >= 0xB && (v221 = *(_DWORD *)(v21 + 20), v220 = *(_DWORD *)(v21 + 24), v221 != v220))
      {
        v222 = v156;
        v223 = v155;
        v224 = 1;
        switch(v221)
        {
          case 0:
            break;
          case 1:
            v224 = v220 != 0;
            break;
          case 2:
            v314 = v220 > 1;
            goto LABEL_615;
          case 3:
            v314 = v220 > 2;
LABEL_615:
            v224 = v314;
            break;
          case 4:
            v224 = v220 - 5 < 3;
            break;
          case 5:
            v317 = (v220 & 0xFFFFFFFE) == 6;
            goto LABEL_631;
          case 6:
            v317 = v220 == 7;
LABEL_631:
            v224 = v317;
            break;
          default:
            goto LABEL_390;
        }
      }
      else
      {
LABEL_389:
        v222 = v156;
LABEL_390:
        v223 = v155;
        v224 = 0;
      }
      NK_SV_Meas_Update((char *)1, (uint64_t)v356, v338, (uint64_t)v20 + 57, v330, v351, v224, (uint64_t)(v20 + 396), 0.0, (uint64_t)(v20 + 15326));
      *(_BYTE *)(v23 + 372) = *(_BYTE *)(v340 + 481);
      NK_Reject_DO_For_Rejected_PR(v338, (uint64_t)v356, v21, (uint64_t)v20);
      *(_OWORD *)(v20 + 13186) = 0u;
      v226 = *(_DWORD *)(v21 + 20);
      v225 = *(_DWORD *)(v21 + 24);
      if (v226 == v225)
        goto LABEL_413;
      switch(v226)
      {
        case 0:
          break;
        case 1:
          if (!v225)
            goto LABEL_413;
          break;
        case 2:
          if (v225 <= 1)
            goto LABEL_413;
          break;
        case 3:
          if (v225 <= 2)
            goto LABEL_413;
          break;
        case 4:
          if (v225 - 5 >= 3)
            goto LABEL_413;
          break;
        case 5:
          if ((v225 & 0xFFFFFFFE) != 6)
            goto LABEL_413;
          break;
        case 6:
          if (v225 != 7)
            goto LABEL_413;
          break;
        default:
          goto LABEL_413;
      }
      if (*v344 > *(unsigned __int16 *)(v21 + 16) || v20[468] != 1)
        goto LABEL_413;
      v227 = *(_DWORD *)(v21 + 148);
      if (v227 >= *(_DWORD *)(v21 + 152))
        v227 = *(_DWORD *)(v21 + 152);
      if (v227 >= *(_DWORD *)(v21 + 156))
        v227 = *(_DWORD *)(v21 + 156);
      if (v227 <= 0xA)
LABEL_413:
        NK_SV_Meas_Check((const double *)v353, v21, (uint64_t)v20);
      v228 = NK_SV_Meas_AP_Stats((_QWORD *)1, v353, v21, (uint64_t)v20);
      *(_BYTE *)(v23 + 1) = v228;
      *(_BYTE *)(v23 + 2) = 0;
      if (v228)
      {
        v229 = v228 - 1;
        *(_BYTE *)(v23 + 2) = v228 - 1;
        if (*(_BYTE *)(v23 + 7))
        {
          if (*(_BYTE *)(v23 + 12) && !*(_DWORD *)(v23 + 40))
          {
            v229 = v228 - 2;
            *(_BYTE *)(v23 + 2) = v228 - 2;
          }
          if (*(_BYTE *)(v23 + 17) && !*(_DWORD *)(v23 + 44))
            *(_BYTE *)(v23 + 2) = v229 - 1;
        }
        if (!*(_BYTE *)(v21 + 6))
          *(_BYTE *)(v21 + 6) = 1;
      }
      if (*((double *)v20 + 848) > 10000.0 && *(_BYTE *)v352 && v20[15051] == 1)
      {
        v230 = *((double *)v222 + 3) >= 900000000.0 ? 1 : v320 | v325;
        if ((v230 & 1) == 0)
        {
          v231 = vdupq_n_s64(0x41E2A05F20000000uLL);
          *(int64x2_t *)v222 = v231;
          *(int64x2_t *)(v222 + 6) = v231;
          v232 = p_NA;
          *(int64x2_t *)(p_NA + 576) = v231;
          if (*((_BYTE *)v222 + 80))
          {
            v233 = dbl_24BC0A160[*(_DWORD *)(v21 + 20) < 5u];
            if (*((double *)v222 + 15) < v233)
            {
              *((double *)v222 + 14) = v233;
              *((double *)v222 + 15) = v233;
              *(double *)(v232 + 624) = v233;
            }
          }
          if ((int)v20[467] >= 2)
            v20[467] = 1;
          *(_BYTE *)(v21 + 136) = 1;
          *(_DWORD *)(v21 + 140) = 38;
        }
      }
      if (v228 >= 3 && *v344 >= 0x1F && *((unsigned __int8 *)v20 + 1881) >= 0x1Bu)
      {
        v234 = *(_BYTE *)v352 ? v320 | v325 : 1;
        if ((v234 & 1) == 0 && v20[15051] == 1)
        {
          *(_WORD *)(p_NA + 8) = 0;
          *(_BYTE *)v352 = 0;
          *(_DWORD *)(v23 + 256) = 21;
          *v347 = 0;
          *(_DWORD *)(v23 + 272) = 21;
          if ((int)v20[467] >= 2)
            v20[467] = 1;
          *(_BYTE *)(v21 + 136) = 1;
          *(_DWORD *)(v21 + 140) = 39;
        }
      }
      v235 = NK_SV_Meas_AP_Stats((_QWORD *)2, v353, v21, (uint64_t)v20);
      *(_BYTE *)(v23 + 3) = v235;
      *(_BYTE *)(v23 + 5) = v235;
      v236 = NK_SV_Meas_AP_Stats((_QWORD *)3, v353, v21, (uint64_t)v20);
      *(_BYTE *)(v23 + 4) = v236;
      *(_BYTE *)(v23 + 5) = *(_BYTE *)(v23 + 3) + v236;
      *(_BYTE *)(v23 + 10) = *(_BYTE *)(v23 + 9) + *(_BYTE *)(v23 + 8);
      *(_BYTE *)(v23 + 15) = *(_BYTE *)(v23 + 14) + *(_BYTE *)(v23 + 13);
      *(_BYTE *)(v23 + 20) = *(_BYTE *)(v23 + 19) + *(_BYTE *)(v23 + 18);
      *(_BYTE *)(v23 + 25) = *(_BYTE *)(v23 + 24) + *(_BYTE *)(v23 + 23);
      *(_BYTE *)(v23 + 30) = *(_BYTE *)(v23 + 29) + *(_BYTE *)(v23 + 28);
      v237 = NK_VVel_Aiding_Required(v21, (uint64_t)v20, (uint64_t)(v339 + 56));
      *((_BYTE *)v339 + 224) = v237;
      if (v237
        && Vert_Meas_Update(9u, (double *)v20 + 217, 0xCu, (unsigned __int8 *)v339 + 224, v351->f64, (_WORD *)(v21 + 27094), -*((double *)v20 + 229)))
      {
        *(_DWORD *)(v23 + 64) = v339[57];
      }
      v238 = (__int128 *)(v21 + 1600);
      v239 = NK_AltP_Aiding_Required(v21, (uint64_t)v20, v340);
      *(_BYTE *)v340 = v239;
      if (v239
        && Vert_Meas_Update(6u, (double *)v20 + 217, 0xCu, (unsigned __int8 *)v340, v351->f64, (_WORD *)(v21 + 27092), *((double *)v20 + 215)))
      {
        *(_DWORD *)(v23 + 60) = *(_DWORD *)(v340 + 4);
      }
      *(_BYTE *)(v340 + 72) = 0;
      NK_Comp_DOPS(v21, (uint64_t)v20);
      v240 = (const double *)(v20 + 15616);
      v241 = *v238;
      *((_OWORD *)v20 + 3905) = *(_OWORD *)(v21 + 1616);
      *((_OWORD *)v20 + 3904) = v241;
      v242 = *(_OWORD *)(v21 + 1632);
      v243 = *(_OWORD *)(v21 + 1648);
      v244 = *(_OWORD *)(v21 + 1664);
      *((_OWORD *)v20 + 3909) = *(_OWORD *)(v21 + 1680);
      *((_OWORD *)v20 + 3908) = v244;
      *((_OWORD *)v20 + 3907) = v243;
      *((_OWORD *)v20 + 3906) = v242;
      NK_Comp_Sol_Acc(v21, (uint64_t)v20);
      NK_Static_Filter(v21, (uint64_t)v20, v223);
      v245 = *v238;
      *((_OWORD *)v20 + 3905) = *(_OWORD *)(v21 + 1616);
      *((_OWORD *)v20 + 3904) = v245;
      v246 = *(_OWORD *)(v21 + 1632);
      v247 = *(_OWORD *)(v21 + 1648);
      v248 = *(_OWORD *)(v21 + 1664);
      *((_OWORD *)v20 + 3909) = *(_OWORD *)(v21 + 1680);
      *((_OWORD *)v20 + 3908) = v248;
      *((_OWORD *)v20 + 3907) = v247;
      *((_OWORD *)v20 + 3906) = v246;
      *(_OWORD *)(v21 + 1632) = 0u;
      *(_OWORD *)(v21 + 1648) = 0u;
      *(_OWORD *)(v21 + 1664) = 0u;
      *(_OWORD *)(v21 + 1680) = 0u;
      *v238 = 0u;
      *(_OWORD *)(v21 + 1616) = 0u;
      NK_Validate_Cor((char *)v23, v326, (uint64_t)v354, (uint64_t)(v20 + 434), *(_QWORD *)(v21 + 20), *v20, (_BYTE *)(v21 + 241), v336, (uint64_t)v349, (_WORD *)(v21 + 244), (uint64_t)a11, (uint64_t)(v20 + 15616), (double *)v20 + 7692, (double *)v20 + 7680, (uint64_t)(v20 + 15613), (uint64_t)(v20 + 15640), v20 + 15664, v20 + 15665, v20 + 15666,
        v20 + 15667,
        v20 + 15668,
        (uint64_t)v331);
      NK_ARP_Kalman((unsigned __int8 *)v356, (unsigned __int8 *)(v353 + 728), (uint64_t)v20, v21);
      if (*v326 > 1000000000.0)
      {
        *((_QWORD *)v20 + 7808) = 0;
        *v334 = 0;
      }
      if (!*(_BYTE *)(v23 + 12) && !*(_DWORD *)(v23 + 36) && *((_BYTE *)v222 + 224) == 2 && !v222[57]
        || *((double *)v20 + 7669) > 1000000000.0)
      {
        *((_QWORD *)v20 + 7809) = 0;
        *((_BYTE *)v20 + 62453) = 0;
      }
      if (!*(_BYTE *)(v23 + 17) && !*(_DWORD *)(v23 + 36) && *((_BYTE *)v222 + 224) == 4 && !v222[57]
        || *((double *)v20 + 7670) > 1000000000.0)
      {
        *((_QWORD *)v20 + 7810) = 0;
        *((_BYTE *)v20 + 62454) = 0;
      }
      *v358 = *v334;
      v358[2] = *((_BYTE *)v20 + 62453);
      v358[16] = *((_BYTE *)v20 + 62454);
      v358[32] = *((_BYTE *)v20 + 62455);
      v358[1] = *((_BYTE *)v20 + 62458);
      *(_QWORD *)(v21 + 25920) = *((_QWORD *)v20 + 7808);
      v249 = (const double *)(v20 + 15618);
      *(_QWORD *)(v21 + 20112) = *((_QWORD *)v20 + 7809);
      v250 = (const double *)(v20 + 15620);
      *(_QWORD *)(v21 + 20128) = *((_QWORD *)v20 + 7810);
      *(_QWORD *)(v21 + 20144) = *((_QWORD *)v20 + 7811);
      v251 = *((_OWORD *)v20 + 3907);
      *(_QWORD *)(v21 + 25944) = *((_QWORD *)v20 + 7816);
      *(_OWORD *)(v21 + 25928) = v251;
      NK_Correct_State((double *)v20 + 7808, (_BYTE *)v20 + 62452, v348);
      NK_Transform_State((uint64_t)v348);
      NK_Heading(v21, (int *)v20, *(_DWORD *)(a10 + 60));
      NK_DT_Synch_ProcNoise(v21, (uint64_t)v20);
      v252 = *((double *)v20 + 209);
      v253 = -0.5;
      if (v252 > 0.0)
        v253 = 0.5;
      v254 = v252 + v253;
      if (v254 <= 2147483650.0)
      {
        if (v254 >= -2147483650.0)
        {
          v255 = (int)v254;
          if (!(int)v254)
            goto LABEL_482;
        }
        else
        {
          v255 = 0x80000000;
        }
      }
      else
      {
        v255 = 0x7FFFFFFF;
      }
      v256 = (double)v255;
      v257 = (double)v255 * 0.001;
      Inc_GPS_TOW(v257, (double *)v20 + 191, (__int16 *)v20 + 771);
      v389[0] = 0.0;
      if (!R8_EQ((const double *)v20 + 204, v389))
        *((double *)v20 + 204) = *((double *)v20 + 204) + *((double *)v20 + 208) * v257;
      v389[0] = 0.0;
      if (!R8_EQ((const double *)v20 + 205, v389))
        *((double *)v20 + 205) = *((double *)v20 + 205) + *((double *)v20 + 208) * v257;
      v389[0] = 0.0;
      if (!R8_EQ((const double *)v20 + 206, v389))
        *((double *)v20 + 206) = *((double *)v20 + 206) + *((double *)v20 + 208) * v257;
      *((double *)v20 + 209) = *((double *)v20 + 209) - v256;
LABEL_482:
      v357 = v358 + 7012;
      NK_Set_Fix_Type((_BYTE *)v20 + 62452, (double *)v20 + 7680, v23, (uint64_t)v349, *(_DWORD *)(a10 + 1652), v20[15665], v20[15668], *(_QWORD *)(v21 + 20), *(double *)v222, *((double *)v222 + 14), *(unsigned __int16 *)(v21 + 16), v320 | v325, *((_DWORD *)v358 + 1758), v20[5], (_BYTE *)(v21 + 241), (_DWORD *)v358 + 1753, v344, (_DWORD *)(v21 + 27112), (int *)v20 + 15459,
        (int *)v20 + 15460);
      NK_Set_TTFF(v21, (uint64_t)v20);
      NK_Check_State(v321, v21, (uint64_t)v20);
      NK_Limited_Reset(v21, (uint64_t)v20, *(_QWORD *)(a10 + 52), *(double *)(a10 + 1704));
      if (*((_BYTE *)v20 + 1680))
      {
        v258 = a9;
        v259 = v353;
      }
      else
      {
        v258 = a9;
        v259 = v353;
        if (*(_BYTE *)(v23 + 7) && (v389[0] = 0.0, !R8_EQ(v240, v389)))
        {
          *((_BYTE *)v20 + 1680) = 1;
        }
        else
        {
          v389[0] = 0.0;
          if (R8_EQ(v240, v389))
          {
            *(_QWORD *)&__src[0] = 0;
            if (!R8_EQ((const double *)v20 + 204, (const double *)__src))
              *((_QWORD *)v20 + 204) = 0;
          }
        }
      }
      if (*((_BYTE *)v20 + 1681))
        goto LABEL_485;
      if (*(_BYTE *)(v23 + 12))
      {
        v389[0] = 0.0;
        if (!R8_EQ(v249, v389))
        {
          *((_BYTE *)v20 + 1681) = 1;
          goto LABEL_485;
        }
      }
      v389[0] = 0.0;
      if (!R8_EQ(v249, v389))
      {
LABEL_485:
        v260 = (uint64_t)a11;
        goto LABEL_486;
      }
      *(_QWORD *)&__src[0] = 0;
      v260 = (uint64_t)a11;
      if (!R8_EQ((const double *)v20 + 205, (const double *)__src))
        *((_QWORD *)v20 + 205) = 0;
LABEL_486:
      if (*((_BYTE *)v20 + 1682))
      {
        v261 = a10;
      }
      else
      {
        v261 = a10;
        if (*(_BYTE *)(v23 + 17) && (v389[0] = 0.0, !R8_EQ(v250, v389)))
        {
          *((_BYTE *)v20 + 1682) = 1;
        }
        else
        {
          v389[0] = 0.0;
          if (R8_EQ(v250, v389))
          {
            *(_QWORD *)&__src[0] = 0;
            if (!R8_EQ((const double *)v20 + 206, (const double *)__src))
              *((_QWORD *)v20 + 206) = 0;
          }
        }
      }
      NK_Final_Check(v21, (uint64_t)v20, (_DWORD *)v261, v260, v259, *(_QWORD *)(v261 + 52), *(double *)(v261 + 1696), *(double *)(v261 + 1704));
      NK_Set_Accuracy(*(_DWORD *)(v261 + 1756), v321, *(_DWORD *)(v261 + 60), v21, (uint64_t)v20);
      NK_Set_TOW_Status(v21, (uint64_t)v20);
      if (*((_BYTE *)v20 + 1540))
      {
        v262 = v20[384];
        if (v262 >= 3 && (!R8_EQ((const double *)v20 + 191, (const double *)v20 + 4) || v262 != v20[5]))
        {
          LODWORD(__src[0]) = 0;
          LODWORD(v391[0]) = 0;
          v389[0] = 0.0;
          API_Get_UTC_Cor(1, v389);
          GPS_To_Glon_Time(0, *((__int16 *)v20 + 13), *((double *)v20 + 191), v389[0], (int *)v391, (int *)__src, (double *)v20 + 212);
          *((_WORD *)v20 + 845) = LOWORD(v391[0]);
          *((_WORD *)v20 + 846) = __src[0];
          *((_BYTE *)v20 + 1688) = 1;
          v263 = v20[384];
          if ((int)v20[421] < v263 && (*(_DWORD *)(v355 + 8972) - 2) <= 4)
            v20[421] = v263;
        }
      }
      NK_Publish_Nav_Soln(v259, (uint64_t)v20, v21, v258);
      if (*((_BYTE *)v20 + 1864))
        *(_BYTE *)(v21 + 28) = 1;
      NK_Validate_Fix(v21, (uint64_t)v20, v261);
      *(_BYTE *)v258 = *((_BYTE *)v20 + 61832);
      v264 = *((unsigned __int8 *)v20 + 61833);
      *(_BYTE *)(v258 + 1) = v264;
      if (v264)
      {
        *(_QWORD *)(v21 + 27344) = *(_QWORD *)(v258 + 368);
        *(_DWORD *)(v335 + 176) = *v20;
      }
      if (*v344)
      {
        v265 = *(unsigned __int8 *)(v23 + 401);
        v266 = a12;
        if (v265 <= 2)
          ++*((_DWORD *)v358 + 1755);
      }
      else
      {
        *((_DWORD *)v358 + 1755) = 0;
        v266 = a12;
      }
      if (*(double *)(v21 + 27344) < 10.0 || *((_DWORD *)v358 + 1755) < 4u)
      {
        if (*v357 >= 0x10u)
        {
          *(_BYTE *)v335 = 0;
          *(_DWORD *)(v335 + 4) = *v20;
          *(double *)(v21 + 27184) = *((double *)v20 + 208) * 299792458.0;
          *(_QWORD *)(v21 + 27192) = *((_QWORD *)v20 + 231);
        }
      }
      else
      {
        *(_BYTE *)v335 = 1;
      }
      v267 = v20[469];
      if (v267 && !*(_DWORD *)(v260 + 4))
        *(_DWORD *)(v260 + 4) = v267;
      *(_QWORD *)(v266 + 20) = *(_QWORD *)(v258 + 32);
      *(_QWORD *)(v266 + 8) = *(_QWORD *)(v258 + 40);
      *(_WORD *)(v266 + 28) = *(_WORD *)(v258 + 62);
      *(_BYTE *)(v266 + 16) = *(_BYTE *)(v258 + 60);
      *(_QWORD *)(v266 + 32) = *(_QWORD *)(v258 + 48);
      *(_DWORD *)v266 = *(_DWORD *)(v258 + 56);
      v268 = *v326;
      v269 = *((double *)v20 + 7669);
      v270 = *v326 > v269;
      if (*v326 > v269)
        v268 = *((double *)v20 + 7669);
      if (v268 > *((double *)v20 + 7670))
        v270 = 2;
      if (v270 == 1)
      {
        v272 = (_QWORD *)(v258 + 160);
        v271 = (double *)(v20 + 15434);
      }
      else
      {
        v271 = (double *)(v20 + 15434);
        if (v270)
          v272 = (_QWORD *)(v258 + 168);
        else
          v272 = (_QWORD *)(v258 + 152);
      }
      *(_QWORD *)(v266 + 40) = *v272;
      *(_DWORD *)(v266 + 74) = *(_DWORD *)(v258 + 210);
      *(_BYTE *)(v266 + 72) = *(_BYTE *)(v258 + 208);
      *(_QWORD *)(v266 + 80) = *(_QWORD *)(v258 + 216);
      *(_DWORD *)(v266 + 68) = *(_DWORD *)(v258 + 204);
      *(_QWORD *)(v266 + 48) = *(_QWORD *)(v258 + 184);
      *(_BYTE *)(v266 + 4) = *((_BYTE *)v20 + 24);
      v273 = v271[27];
      if (v273 >= 9999000.0)
      {
        v275 = (int)v20[5];
        if (v275 >= 0xC)
          __assert_rtn("Generate_DollarG_Message", "Nav_Kalman_Update.cpp", 3119, "FALSE");
        v274 = dword_24BC0A248[v275];
      }
      else
      {
        v274 = (int)fmin(v273 * 0.00000333564095, 999999999.0);
      }
      v276 = (char *)g_CB_GDbg;
      v277 = 36;
      v278 = 1u;
      do
      {
        g_CB_GDbg = (uint64_t)(v276 + 1);
        *v276 = v277;
        v276 = (char *)g_CB_GDbg;
        if (g_CB_GDbg >= (unint64_t)qword_257A47958)
        {
          v276 = (char *)qword_257A47950;
          g_CB_GDbg = qword_257A47950;
        }
        v277 = aG_0[v278++];
      }
      while (v278 != 4);
      sprintf_2d(&g_CB_GDbg, (int)((*((double *)v20 + 191) + 0.0005) * 1000.0));
      v279 = (_BYTE *)g_CB_GDbg++;
      *v279 = 32;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
        g_CB_GDbg = qword_257A47950;
      sprintf_1u(&g_CB_GDbg, v20[1]);
      v280 = (_BYTE *)g_CB_GDbg++;
      *v280 = 32;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
        g_CB_GDbg = qword_257A47950;
      sprintf_2d(&g_CB_GDbg, v274);
      v281 = (_BYTE *)g_CB_GDbg++;
      *v281 = 32;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
        g_CB_GDbg = qword_257A47950;
      sprintf_1u(&g_CB_GDbg, *v20);
      v282 = (_BYTE *)g_CB_GDbg++;
      *v282 = 10;
      v283 = (_BYTE *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_257A47958)
      {
        v283 = (_BYTE *)qword_257A47950;
        g_CB_GDbg = qword_257A47950;
      }
      *v283 = 0;
      GNB_Debug_Flush_Check();
      if (!*(_DWORD *)(v21 + 152))
      {
        *(_DWORD *)(v21 + 183) = *(_DWORD *)v318;
        *(_WORD *)(v21 + 187) = *(_WORD *)(v318 + 4);
      }
      result = (uint64_t)NK_Set_Aid_Data((_DWORD *)v21, (int *)v20, v21 + 280);
      v285 = v20[384];
      if (v285 >= 1)
      {
        result = Core_Save_ApxTime(*((unsigned __int8 *)v20 + 1540), v285, *((_WORD *)v20 + 771), v20[379], *((double *)v20 + 191));
        v286 = *(_DWORD *)(v355 + 8972);
        if (v286 != 3 && (v286 - 7) >= 0xFFFFFFFB)
        {
          v287 = 0;
          LODWORD(v288) = 0;
          v289 = p_NV;
          v290 = *(_QWORD *)(v355 + 8984);
          *(_OWORD *)(p_NV + 168) = *(_OWORD *)(v355 + 8968);
          *(_QWORD *)(v289 + 184) = v290;
          v291 = v289 + 168;
          v292 = -9871;
          do
          {
            v293 = *(unsigned __int8 *)(v291 + v287) ^ HIBYTE(v292);
            v292 = -12691 * (v292 + (*(unsigned __int8 *)(v291 + v287) ^ HIBYTE(v292))) + 22719;
            v288 = (v288 + v293);
            ++v287;
          }
          while (v287 != 24);
          *(_QWORD *)(v289 + 160) = v288;
        }
      }
      if (*(_BYTE *)(v266 + 16)
        && *(__int16 *)(v266 + 28) >= 1717
        && (int)v20[384] >= 9
        && *v20 != *(_DWORD *)(v319 + 4))
      {
        v294 = *((double *)v20 + 191) * 1000.0;
        v295 = -0.5;
        if (v294 > 0.0)
          v295 = 0.5;
        v296 = v294 + v295;
        if (v296 <= 2147483650.0)
        {
          if (v296 >= -2147483650.0)
            v297 = (int)v296;
          else
            v297 = 0x80000000;
        }
        else
        {
          v297 = 0x7FFFFFFF;
        }
        v298 = 0;
        LODWORD(v299) = 0;
        v300 = p_NV;
        v301 = (_QWORD *)(p_NV + 33192);
        *(_DWORD *)(p_NV + 33200) = v297 - *v20;
        *(double *)((char *)v301 + 12) = *v348;
        v302 = v300 + 33200;
        v303 = -9871;
        do
        {
          v304 = *(unsigned __int8 *)(v302 + v298) ^ HIBYTE(v303);
          v303 = -12691 * (v303 + (*(unsigned __int8 *)(v302 + v298) ^ HIBYTE(v303))) + 22719;
          v299 = (v299 + v304);
          ++v298;
        }
        while (v298 != 16);
        *v301 = v299;
      }
      v305 = v20[467];
      if (v305 == 3)
      {
        if (*v357 && (int)v20[384] >= 3)
        {
          if (v271[33] < 10.0)
          {
            result = Core_Save_Clk_Drift(1, (int)*((double *)v20 + 191) + 604800 * *((__int16 *)v20 + 771), *((double *)v20 + 208));
            *(_QWORD *)(a10 + 1696) = *((_QWORD *)v20 + 208);
            v306 = (double)*(unsigned __int16 *)(a10 + 240) * 0.000000001;
            if (!*(_WORD *)(a10 + 240))
              v306 = 0.0000001;
            *(double *)(a10 + 1704) = v306;
          }
          if (v271[25] < 400.0)
          {
            *((_DWORD *)v358 + 1760) = v20[378];
            v307 = *(_OWORD *)(v20 + 426);
            *(_QWORD *)(v21 + 27168) = *((_QWORD *)v20 + 215);
            *(_OWORD *)(v21 + 27152) = v307;
          }
        }
      }
      else if (v305 <= 1)
      {
        if (*(_WORD *)(a10 + 240))
        {
          *(double *)(a10 + 1704) = (double)*(unsigned __int16 *)(a10 + 240) * 0.000000001;
        }
        else if (*v344 >= 0x385)
        {
          *(_QWORD *)(a10 + 1704) = 0x3EA0C6F7A0B5ED8ELL;
        }
      }
      if (v20[468] == 1)
      {
        if (*((_BYTE *)v20 + 1540))
        {
          if ((int)v20[384] >= 10 && v20[467] == 3 && *v357 >= 0xAu)
          {
            v308 = *((double *)v20 + 207);
            if (fabs(v308) <= 0.000000066712819 && v271[25] <= 10.0 && v271[26] <= 10.0 && v271[28] <= 1.0)
              result = Core_Save_Clk_L5L1(1, (int)*((double *)v20 + 191) + 604800 * *((__int16 *)v20 + 771), v308);
          }
        }
      }
      v309 = *((_QWORD *)v20 + 7491);
      *(_DWORD *)(a10 + 2048) = v20[14984];
      *(_QWORD *)(a10 + 2040) = v309;
      v310 = *(_QWORD *)(v20 + 14985);
      *(_DWORD *)(a10 + 2060) = v20[14987];
      *(_QWORD *)(a10 + 2052) = v310;
      v311 = *((_QWORD *)v20 + 7494);
      *(_DWORD *)(a10 + 2072) = v20[14990];
      *(_QWORD *)(a10 + 2064) = v311;
      return result;
    default:
      goto LABEL_110;
  }
}

uint64_t XofAlmanacData::Decode(uint64_t **a1, _QWORD *a2, _DWORD *a3, unsigned __int8 *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _BYTE v21[560];
  _BYTE v22[592];
  _BYTE v23[640];
  _OWORD v24[30];
  uint64_t v25;
  _OWORD v26[30];
  _OWORD v27[30];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v8 = a4[17];
  memset(v27, 0, sizeof(v27));
  XofGpsQzssAlmCodec::XofGpsQzssAlmCodec((XofGpsQzssAlmCodec *)v27);
  v9 = XofAlmanacData::DecodeSVs<std::map<unsigned char,XofGpsQzssAlmanac>,XofGpsQzssAlmCodec>((uint64_t)a1, a2, a3, v8, 0, (uint64_t)v27, a1);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)v27);
  if (v9 != 1)
    return 5;
  v10 = a4[113];
  memset(v26, 0, sizeof(v26));
  XofGpsQzssAlmCodec::XofGpsQzssAlmCodec((XofGpsQzssAlmCodec *)v26);
  v11 = XofAlmanacData::DecodeSVs<std::map<unsigned char,XofGpsQzssAlmanac>,XofGpsQzssAlmCodec>((uint64_t)a1, a2, a3, v10, 2u, (uint64_t)v26, a1 + 9);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)v26);
  if (v11 != 1)
    return 5;
  v12 = a4[161];
  memset(v24, 0, sizeof(v24));
  v25 = 0;
  XofGalileoAlmCodec::XofGalileoAlmCodec((XofGalileoAlmCodec *)v24);
  v13 = XofAlmanacData::DecodeSVs<std::map<unsigned char,XofGalileoAlmanac>,XofGalileoAlmCodec>((uint64_t)a1, a2, a3, v12, 3u, (uint64_t)v24, a1 + 6);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)v24);
  if (v13 != 1)
    return 5;
  v14 = a4[209];
  bzero(v23, 0x280uLL);
  XofGlonassAlmCodec::XofGlonassAlmCodec((XofGlonassAlmCodec *)v23);
  v15 = XofAlmanacData::DecodeSVs<std::map<unsigned char,XofGlonassAlmanac>,XofGlonassAlmCodec>((uint64_t)a1, a2, a3, v14, 4u, (uint64_t)v23, a1 + 3);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>>::~__tuple_impl((uint64_t)v23);
  if (v15 != 1)
    return 5;
  v16 = a4[257];
  bzero(v22, 0x250uLL);
  XofBeidouAlmCodec::XofBeidouAlmCodec((XofBeidouAlmCodec *)v22);
  v17 = XofAlmanacData::DecodeSVs<std::map<unsigned char,XofBeidouAlmanac>,XofBeidouAlmCodec>((uint64_t)a1, a2, a3, v16, 5u, (uint64_t)v22, a1 + 12);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)v22);
  if (v17 != 1)
    return 5;
  v18 = a4[305];
  bzero(v21, 0x230uLL);
  XofNavicAlmCodec::XofNavicAlmCodec((XofNavicAlmCodec *)v21);
  v19 = XofAlmanacData::DecodeSVs<std::map<unsigned char,XofNavicAlmanac>,XofNavicAlmCodec>((uint64_t)a1, a2, a3, v18, 6u, (uint64_t)v21, a1 + 15);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>>::~__tuple_impl((uint64_t)v21);
  if (v19 == 1)
    return 1;
  else
    return 5;
}

void sub_24BB1A19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>>::~__tuple_impl((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t XofAlmanacData::DecodeSVs<std::map<unsigned char,XofGpsQzssAlmanac>,XofGpsQzssAlmCodec>(uint64_t a1, _QWORD *a2, _DWORD *a3, int a4, unsigned int a5, uint64_t a6, uint64_t **a7)
{
  int v10;
  __int128 v11;
  unsigned int v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t *v16;
  unsigned int v17;
  BOOL v18;
  uint64_t **v19;
  char v20;
  char v21;
  uint64_t **v22;
  __int16 v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v27;
  char *v28;
  double v29;
  void **v30;
  uint64_t v31;
  __int16 *v34;
  __int16 *v35;
  __int16 v36;
  int v37;
  int v38;
  int v39;
  int v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  char v44;
  unsigned __int16 *v45;
  __int16 *v46;
  __int16 *v47;
  unsigned __int16 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  uint64_t **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int *v69;
  int *v70;
  int *v71;
  unsigned int *v72;
  void *__p[2];
  char v74;
  _BYTE __str[32];
  _BYTE v76[32];
  _BYTE v77[32];
  _BYTE v78[32];
  _BYTE v79[32];
  _BYTE v80[32];
  _BYTE v81[32];
  _BYTE v82[32];
  __int128 v83;
  __int128 v84;
  _BYTE v85[48];
  __int128 v86;
  __int128 v87;
  _BYTE v88[48];
  _BYTE v89[32];
  _BYTE v90[32];
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return 1;
  v10 = 0;
  v53 = a7 + 1;
  v66 = a6 + 40;
  v67 = a6 + 8;
  v51 = (unsigned __int8 *)(a6 + 64);
  v52 = (unsigned __int8 *)(a6 + 32);
  v64 = a6 + 104;
  v65 = a6 + 72;
  v49 = (unsigned __int16 *)(a6 + 128);
  v50 = (unsigned __int8 *)(a6 + 96);
  v62 = a6 + 168;
  v63 = a6 + 136;
  v46 = (__int16 *)(a6 + 192);
  v47 = (__int16 *)(a6 + 160);
  v45 = (unsigned __int16 *)(a6 + 224);
  v60 = a6 + 232;
  v61 = a6 + 200;
  v11 = 0uLL;
  v71 = (int *)(a6 + 296);
  v72 = (unsigned int *)(a6 + 256);
  v58 = a6 + 312;
  v59 = a6 + 272;
  v69 = (int *)(a6 + 376);
  v70 = (int *)(a6 + 336);
  v56 = a6 + 392;
  v57 = a6 + 352;
  v55 = a6 + 424;
  v34 = (__int16 *)(a6 + 448);
  v35 = (__int16 *)(a6 + 416);
  v54 = a6 + 456;
  while (1)
  {
    v68 = v10;
    *(_OWORD *)v90 = v11;
    *(_OWORD *)&v90[16] = v11;
    *(_OWORD *)v89 = v11;
    *(_OWORD *)&v89[16] = v11;
    *(_OWORD *)&v88[16] = v11;
    *(_OWORD *)&v88[32] = v11;
    v87 = v11;
    *(_OWORD *)v88 = v11;
    *(_OWORD *)&v85[32] = v11;
    v86 = v11;
    *(_OWORD *)v85 = v11;
    *(_OWORD *)&v85[16] = v11;
    v83 = v11;
    v84 = v11;
    *(_OWORD *)v82 = v11;
    *(_OWORD *)&v82[16] = v11;
    *(_OWORD *)v81 = v11;
    *(_OWORD *)&v81[16] = v11;
    *(_OWORD *)v80 = v11;
    *(_OWORD *)&v80[16] = v11;
    *(_OWORD *)v79 = v11;
    *(_OWORD *)&v79[16] = v11;
    *(_OWORD *)&v78[16] = v11;
    *(_OWORD *)&v77[16] = v11;
    *(_OWORD *)v78 = v11;
    *(_OWORD *)&v76[16] = v11;
    *(_OWORD *)v77 = v11;
    *(_OWORD *)&__str[16] = v11;
    *(_OWORD *)v76 = v11;
    *(_OWORD *)__str = v11;
    XofGpsQzssAlmCodec::XofGpsQzssAlmCodec((XofGpsQzssAlmCodec *)__str);
    *(_DWORD *)a6 = *(_DWORD *)__str;
    if (*(char *)(a6 + 31) < 0)
      operator delete(*(void **)v67);
    *(_OWORD *)v67 = *(_OWORD *)&__str[8];
    *(_QWORD *)(v67 + 16) = *(_QWORD *)&__str[24];
    __str[31] = 0;
    __str[8] = 0;
    *(_DWORD *)(a6 + 32) = *(_DWORD *)v76;
    if (*(char *)(a6 + 63) < 0)
      operator delete(*(void **)v66);
    *(_OWORD *)v66 = *(_OWORD *)&v76[8];
    *(_QWORD *)(v66 + 16) = *(_QWORD *)&v76[24];
    v76[31] = 0;
    v76[8] = 0;
    *(_DWORD *)(a6 + 64) = *(_DWORD *)v77;
    if (*(char *)(a6 + 95) < 0)
      operator delete(*(void **)v65);
    *(_OWORD *)v65 = *(_OWORD *)&v77[8];
    *(_QWORD *)(v65 + 16) = *(_QWORD *)&v77[24];
    v77[31] = 0;
    v77[8] = 0;
    *(_DWORD *)(a6 + 96) = *(_DWORD *)v78;
    if (*(char *)(a6 + 127) < 0)
      operator delete(*(void **)v64);
    *(_OWORD *)v64 = *(_OWORD *)&v78[8];
    *(_QWORD *)(v64 + 16) = *(_QWORD *)&v78[24];
    v78[31] = 0;
    v78[8] = 0;
    *(_QWORD *)(a6 + 128) = *(_QWORD *)v79;
    if (*(char *)(a6 + 159) < 0)
      operator delete(*(void **)v63);
    *(_OWORD *)v63 = *(_OWORD *)&v79[8];
    *(_QWORD *)(v63 + 16) = *(_QWORD *)&v79[24];
    v79[31] = 0;
    v79[8] = 0;
    *(_QWORD *)(a6 + 160) = *(_QWORD *)v80;
    if (*(char *)(a6 + 191) < 0)
      operator delete(*(void **)v62);
    *(_OWORD *)v62 = *(_OWORD *)&v80[8];
    *(_QWORD *)(v62 + 16) = *(_QWORD *)&v80[24];
    v80[31] = 0;
    v80[8] = 0;
    *(_QWORD *)(a6 + 192) = *(_QWORD *)v81;
    if (*(char *)(a6 + 223) < 0)
      operator delete(*(void **)v61);
    *(_OWORD *)v61 = *(_OWORD *)&v81[8];
    *(_QWORD *)(v61 + 16) = *(_QWORD *)&v81[24];
    v81[31] = 0;
    v81[8] = 0;
    *(_QWORD *)(a6 + 224) = *(_QWORD *)v82;
    if (*(char *)(a6 + 255) < 0)
      operator delete(*(void **)v60);
    *(_OWORD *)v60 = *(_OWORD *)&v82[8];
    *(_QWORD *)(v60 + 16) = *(_QWORD *)&v82[24];
    v82[31] = 0;
    v82[8] = 0;
    *(_OWORD *)v72 = v83;
    if (*(char *)(a6 + 295) < 0)
      operator delete(*(void **)v59);
    *(_OWORD *)v59 = v84;
    *(_QWORD *)(v59 + 16) = *(_QWORD *)v85;
    v85[7] = 0;
    LOBYTE(v84) = 0;
    *(_OWORD *)v71 = *(_OWORD *)&v85[8];
    if (*(char *)(a6 + 335) < 0)
      operator delete(*(void **)v58);
    *(_OWORD *)v58 = *(_OWORD *)&v85[24];
    *(_QWORD *)(v58 + 16) = *(_QWORD *)&v85[40];
    v85[47] = 0;
    v85[24] = 0;
    *(_OWORD *)v70 = v86;
    if (*(char *)(a6 + 375) < 0)
      operator delete(*(void **)v57);
    *(_OWORD *)v57 = v87;
    *(_QWORD *)(v57 + 16) = *(_QWORD *)v88;
    v88[7] = 0;
    LOBYTE(v87) = 0;
    *(_OWORD *)v69 = *(_OWORD *)&v88[8];
    if (*(char *)(a6 + 415) < 0)
      operator delete(*(void **)v56);
    *(_OWORD *)v56 = *(_OWORD *)&v88[24];
    *(_QWORD *)(v56 + 16) = *(_QWORD *)&v88[40];
    v88[47] = 0;
    v88[24] = 0;
    *(_QWORD *)(a6 + 416) = *(_QWORD *)v89;
    if (*(char *)(a6 + 447) < 0)
      operator delete(*(void **)v55);
    *(_OWORD *)v55 = *(_OWORD *)&v89[8];
    *(_QWORD *)(v55 + 16) = *(_QWORD *)&v89[24];
    v89[31] = 0;
    v89[8] = 0;
    *(_QWORD *)(a6 + 448) = *(_QWORD *)v90;
    if (*(char *)(a6 + 479) < 0)
      operator delete(*(void **)v54);
    *(_OWORD *)v54 = *(_OWORD *)&v90[8];
    *(_QWORD *)(v54 + 16) = *(_QWORD *)&v90[24];
    v90[31] = 0;
    v90[8] = 0;
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)__str);
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)a6, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v52, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v51, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v50, a2, a3) != 1
      || XofIntegralType<unsigned short>::DecodeFromHexData(v49, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v47, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v46, a2, a3) != 1
      || XofIntegralType<unsigned short>::DecodeFromHexData(v45, a2, a3) != 1
      || XofIntegralType<unsigned int>::DecodeFromHexData(v72, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v71, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v70, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v69, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v35, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v34, a2, a3) != 1)
    {
      break;
    }
    v12 = *(unsigned __int8 *)(a6 + 3);
    v13 = v53;
    v14 = *v53;
    if (*v53)
    {
      v15 = v53;
      v16 = *v53;
      do
      {
        v17 = *((unsigned __int8 *)v16 + 28);
        v18 = v17 >= v12;
        if (v17 >= v12)
          v19 = (uint64_t **)v16;
        else
          v19 = (uint64_t **)(v16 + 1);
        if (v18)
          v15 = (uint64_t **)v16;
        v16 = *v19;
      }
      while (*v19);
      v13 = v53;
      if (v15 != v53 && v12 >= *((unsigned __int8 *)v15 + 28))
      {
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          v31 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Duplicate entry found for Broadcast Almanac data: Satellite Id [ %d ]\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 87, "DecodeSVs", v12);
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        return 5;
      }
    }
    v20 = *(_BYTE *)(a6 + 35);
    v21 = *(_BYTE *)(a6 + 67);
    v43 = *(_WORD *)(a6 + 134);
    v44 = *(_BYTE *)(a6 + 99);
    v41 = *(_WORD *)(a6 + 198);
    v42 = *(_WORD *)(a6 + 166);
    v39 = *(_DWORD *)(a6 + 308);
    v40 = *(_DWORD *)(a6 + 268);
    v37 = *(_DWORD *)(a6 + 388);
    v38 = *(_DWORD *)(a6 + 348);
    v36 = *(_WORD *)(a6 + 422);
    v22 = v13;
    v23 = *(_WORD *)(a6 + 454);
    if (v14)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t **)v14;
          v24 = *((unsigned __int8 *)v14 + 28);
          if (v24 <= v12)
            break;
          v14 = *v13;
          v22 = v13;
          if (!*v13)
            goto LABEL_63;
        }
        if (v24 >= v12)
          break;
        v14 = v13[1];
        if (!v14)
        {
          v22 = v13 + 1;
          goto LABEL_63;
        }
      }
    }
    else
    {
LABEL_63:
      v25 = operator new(0x40uLL);
      v25[28] = v12;
      v25[32] = v12;
      v25[33] = v20;
      v25[34] = v21;
      v25[35] = v44;
      *((_WORD *)v25 + 18) = v43;
      *((_WORD *)v25 + 19) = v42;
      *((_WORD *)v25 + 20) = v41;
      *((_DWORD *)v25 + 11) = v40;
      *((_DWORD *)v25 + 12) = v39;
      *((_DWORD *)v25 + 13) = v38;
      *((_DWORD *)v25 + 14) = v37;
      *((_WORD *)v25 + 30) = v36;
      *((_WORD *)v25 + 31) = v23;
      std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a7, (uint64_t)v13, v22, (uint64_t *)v25);
    }
    v10 = v68 + 1;
    v11 = 0uLL;
    if (v68 + 1 == a4)
      return 1;
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    v27 = mach_continuous_time();
    if (a5 > 7)
      v28 = "   ";
    else
      v28 = off_251CDBA40[a5];
    v29 = *(double *)&g_MacClockTicksToMsRelation;
    std::string::basic_string[abi:ne180100]<0>(__p, v28);
    if (v74 >= 0)
      v30 = __p;
    else
      v30 = (void **)__p[0];
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Almanac decode failure, constellation Id = [ %s ], sequence Id = [ %d ]\n", (unint64_t)(v29 * (double)v27), "GNC", 87, "DecodeSVs", (const char *)v30, v68 + 1);
    if (v74 < 0)
      operator delete(__p[0]);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return 5;
}

uint64_t XofAlmanacData::DecodeSVs<std::map<unsigned char,XofGalileoAlmanac>,XofGalileoAlmCodec>(uint64_t a1, _QWORD *a2, _DWORD *a3, int a4, unsigned int a5, uint64_t a6, uint64_t **a7)
{
  int v10;
  __int128 v11;
  unsigned int v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t *v16;
  unsigned int v17;
  BOOL v18;
  uint64_t **v19;
  char v20;
  __int16 v21;
  uint64_t **v22;
  __int16 v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v27;
  char *v28;
  double v29;
  void **v30;
  uint64_t v31;
  __int16 *v34;
  __int16 *v35;
  __int16 *v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  char v42;
  char v43;
  __int16 v44;
  __int16 v45;
  int v46;
  __int16 *v47;
  __int16 *v48;
  __int16 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  __int16 *v52;
  __int16 *v53;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int8 *v57;
  uint64_t **v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned int *v75;
  void *__p[2];
  char v77;
  _BYTE __str[32];
  _BYTE v79[32];
  _BYTE v80[32];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return 1;
  v10 = 0;
  v58 = a7 + 1;
  v72 = a6 + 40;
  v73 = a6 + 8;
  v56 = (unsigned __int16 *)(a6 + 64);
  v57 = (unsigned __int8 *)(a6 + 32);
  v75 = (unsigned int *)(a6 + 96);
  v70 = a6 + 112;
  v71 = a6 + 72;
  v55 = (unsigned __int16 *)(a6 + 136);
  v53 = (__int16 *)(a6 + 168);
  v68 = a6 + 176;
  v69 = a6 + 144;
  v51 = (unsigned __int8 *)(a6 + 232);
  v52 = (__int16 *)(a6 + 200);
  v66 = a6 + 240;
  v67 = a6 + 208;
  v65 = a6 + 272;
  v49 = (__int16 *)(a6 + 296);
  v50 = (unsigned __int8 *)(a6 + 264);
  v11 = 0uLL;
  v48 = (__int16 *)(a6 + 328);
  v63 = a6 + 336;
  v64 = a6 + 304;
  v47 = (__int16 *)(a6 + 360);
  v36 = (__int16 *)(a6 + 392);
  v61 = a6 + 400;
  v62 = a6 + 368;
  v34 = (__int16 *)(a6 + 456);
  v35 = (__int16 *)(a6 + 424);
  v59 = a6 + 464;
  v60 = a6 + 432;
  while (1)
  {
    v74 = v10;
    v105 = 0;
    v103 = v11;
    v104 = v11;
    v101 = v11;
    v102 = v11;
    v99 = v11;
    v100 = v11;
    v97 = v11;
    v98 = v11;
    v95 = v11;
    v96 = v11;
    v93 = v11;
    v94 = v11;
    v91 = v11;
    v92 = v11;
    v89 = v11;
    v90 = v11;
    v87 = v11;
    v88 = v11;
    v85 = v11;
    v86 = v11;
    v83 = v11;
    v84 = v11;
    v82 = v11;
    *(_OWORD *)&v80[16] = v11;
    v81 = v11;
    *(_OWORD *)&v79[16] = v11;
    *(_OWORD *)v80 = v11;
    *(_OWORD *)&__str[16] = v11;
    *(_OWORD *)v79 = v11;
    *(_OWORD *)__str = v11;
    XofGalileoAlmCodec::XofGalileoAlmCodec((XofGalileoAlmCodec *)__str);
    *(_DWORD *)a6 = *(_DWORD *)__str;
    if (*(char *)(a6 + 31) < 0)
      operator delete(*(void **)v73);
    *(_OWORD *)v73 = *(_OWORD *)&__str[8];
    *(_QWORD *)(v73 + 16) = *(_QWORD *)&__str[24];
    __str[31] = 0;
    __str[8] = 0;
    *(_DWORD *)(a6 + 32) = *(_DWORD *)v79;
    if (*(char *)(a6 + 63) < 0)
      operator delete(*(void **)v72);
    *(_OWORD *)v72 = *(_OWORD *)&v79[8];
    *(_QWORD *)(v72 + 16) = *(_QWORD *)&v79[24];
    v79[31] = 0;
    v79[8] = 0;
    *(_QWORD *)(a6 + 64) = *(_QWORD *)v80;
    if (*(char *)(a6 + 95) < 0)
      operator delete(*(void **)v71);
    *(_OWORD *)v71 = *(_OWORD *)&v80[8];
    *(_QWORD *)(v71 + 16) = *(_QWORD *)&v80[24];
    v80[31] = 0;
    v80[8] = 0;
    *(_OWORD *)v75 = v81;
    if (*(char *)(a6 + 135) < 0)
      operator delete(*(void **)v70);
    *(_OWORD *)v70 = v82;
    *(_QWORD *)(v70 + 16) = v83;
    BYTE7(v83) = 0;
    LOBYTE(v82) = 0;
    *(_QWORD *)(a6 + 136) = *((_QWORD *)&v83 + 1);
    if (*(char *)(a6 + 167) < 0)
      operator delete(*(void **)v69);
    *(_OWORD *)v69 = v84;
    *(_QWORD *)(v69 + 16) = v85;
    BYTE7(v85) = 0;
    LOBYTE(v84) = 0;
    *(_QWORD *)(a6 + 168) = *((_QWORD *)&v85 + 1);
    if (*(char *)(a6 + 199) < 0)
      operator delete(*(void **)v68);
    *(_OWORD *)v68 = v86;
    *(_QWORD *)(v68 + 16) = v87;
    BYTE7(v87) = 0;
    LOBYTE(v86) = 0;
    *(_QWORD *)(a6 + 200) = *((_QWORD *)&v87 + 1);
    if (*(char *)(a6 + 231) < 0)
      operator delete(*(void **)v67);
    *(_OWORD *)v67 = v88;
    *(_QWORD *)(v67 + 16) = v89;
    BYTE7(v89) = 0;
    LOBYTE(v88) = 0;
    *(_DWORD *)(a6 + 232) = DWORD2(v89);
    if (*(char *)(a6 + 263) < 0)
      operator delete(*(void **)v66);
    *(_OWORD *)v66 = v90;
    *(_QWORD *)(v66 + 16) = v91;
    BYTE7(v91) = 0;
    LOBYTE(v90) = 0;
    *(_DWORD *)(a6 + 264) = DWORD2(v91);
    if (*(char *)(a6 + 295) < 0)
      operator delete(*(void **)v65);
    *(_OWORD *)v65 = v92;
    *(_QWORD *)(v65 + 16) = v93;
    BYTE7(v93) = 0;
    LOBYTE(v92) = 0;
    *(_QWORD *)(a6 + 296) = *((_QWORD *)&v93 + 1);
    if (*(char *)(a6 + 327) < 0)
      operator delete(*(void **)v64);
    *(_OWORD *)v64 = v94;
    *(_QWORD *)(v64 + 16) = v95;
    BYTE7(v95) = 0;
    LOBYTE(v94) = 0;
    *(_QWORD *)(a6 + 328) = *((_QWORD *)&v95 + 1);
    if (*(char *)(a6 + 359) < 0)
      operator delete(*(void **)v63);
    *(_OWORD *)v63 = v96;
    *(_QWORD *)(v63 + 16) = v97;
    BYTE7(v97) = 0;
    LOBYTE(v96) = 0;
    *(_QWORD *)(a6 + 360) = *((_QWORD *)&v97 + 1);
    if (*(char *)(a6 + 391) < 0)
      operator delete(*(void **)v62);
    *(_OWORD *)v62 = v98;
    *(_QWORD *)(v62 + 16) = v99;
    BYTE7(v99) = 0;
    LOBYTE(v98) = 0;
    *(_QWORD *)(a6 + 392) = *((_QWORD *)&v99 + 1);
    if (*(char *)(a6 + 423) < 0)
      operator delete(*(void **)v61);
    *(_OWORD *)v61 = v100;
    *(_QWORD *)(v61 + 16) = v101;
    BYTE7(v101) = 0;
    LOBYTE(v100) = 0;
    *(_QWORD *)(a6 + 424) = *((_QWORD *)&v101 + 1);
    if (*(char *)(a6 + 455) < 0)
      operator delete(*(void **)v60);
    *(_OWORD *)v60 = v102;
    *(_QWORD *)(v60 + 16) = v103;
    BYTE7(v103) = 0;
    LOBYTE(v102) = 0;
    *(_QWORD *)(a6 + 456) = *((_QWORD *)&v103 + 1);
    if (*(char *)(a6 + 487) < 0)
      operator delete(*(void **)v59);
    *(_OWORD *)v59 = v104;
    *(_QWORD *)(v59 + 16) = v105;
    HIBYTE(v105) = 0;
    LOBYTE(v104) = 0;
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)__str);
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)a6, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v57, a2, a3) != 1
      || XofIntegralType<unsigned short>::DecodeFromHexData(v56, a2, a3) != 1
      || XofIntegralType<unsigned int>::DecodeFromHexData(v75, a2, a3) != 1
      || XofIntegralType<unsigned short>::DecodeFromHexData(v55, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v53, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v52, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v51, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v50, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v49, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v48, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v47, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v36, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v35, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v34, a2, a3) != 1)
    {
      break;
    }
    v12 = *(unsigned __int8 *)(a6 + 3);
    v13 = v58;
    v14 = *v58;
    if (*v58)
    {
      v15 = v58;
      v16 = *v58;
      do
      {
        v17 = *((unsigned __int8 *)v16 + 28);
        v18 = v17 >= v12;
        if (v17 >= v12)
          v19 = (uint64_t **)v16;
        else
          v19 = (uint64_t **)(v16 + 1);
        if (v18)
          v15 = (uint64_t **)v16;
        v16 = *v19;
      }
      while (*v19);
      v13 = v58;
      if (v15 != v58 && v12 >= *((unsigned __int8 *)v15 + 28))
      {
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          v31 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Duplicate entry found for Broadcast Almanac data: Satellite Id [ %d ]\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 87, "DecodeSVs", v12);
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        return 5;
      }
    }
    v20 = *(_BYTE *)(a6 + 35);
    v21 = *(_WORD *)(a6 + 142);
    v45 = *(_WORD *)(a6 + 174);
    v46 = *(_DWORD *)(a6 + 108);
    v43 = *(_BYTE *)(a6 + 235);
    v44 = *(_WORD *)(a6 + 206);
    v41 = *(_WORD *)(a6 + 302);
    v42 = *(_BYTE *)(a6 + 267);
    v39 = *(_WORD *)(a6 + 366);
    v40 = *(_WORD *)(a6 + 334);
    v37 = *(_WORD *)(a6 + 430);
    v38 = *(_WORD *)(a6 + 398);
    v22 = v13;
    v23 = *(_WORD *)(a6 + 462);
    if (v14)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t **)v14;
          v24 = *((unsigned __int8 *)v14 + 28);
          if (v24 <= v12)
            break;
          v14 = *v13;
          v22 = v13;
          if (!*v13)
            goto LABEL_66;
        }
        if (v24 >= v12)
          break;
        v14 = v13[1];
        if (!v14)
        {
          v22 = v13 + 1;
          goto LABEL_66;
        }
      }
    }
    else
    {
LABEL_66:
      v25 = operator new(0x40uLL);
      v25[28] = v12;
      v25[32] = v12;
      v25[33] = v20;
      *((_DWORD *)v25 + 9) = v46;
      *((_WORD *)v25 + 20) = v21;
      *((_WORD *)v25 + 21) = v45;
      *((_WORD *)v25 + 22) = v44;
      v25[46] = v43;
      v25[47] = v42;
      *((_WORD *)v25 + 24) = v41;
      *((_WORD *)v25 + 25) = v40;
      *((_WORD *)v25 + 26) = v39;
      *((_WORD *)v25 + 27) = v38;
      *((_WORD *)v25 + 28) = v37;
      *((_WORD *)v25 + 29) = v23;
      std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a7, (uint64_t)v13, v22, (uint64_t *)v25);
    }
    v10 = v74 + 1;
    v11 = 0uLL;
    if (v74 + 1 == a4)
      return 1;
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    v27 = mach_continuous_time();
    if (a5 > 7)
      v28 = "   ";
    else
      v28 = off_251CDBA40[a5];
    v29 = *(double *)&g_MacClockTicksToMsRelation;
    std::string::basic_string[abi:ne180100]<0>(__p, v28);
    if (v77 >= 0)
      v30 = __p;
    else
      v30 = (void **)__p[0];
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Almanac decode failure, constellation Id = [ %s ], sequence Id = [ %d ]\n", (unint64_t)(v29 * (double)v27), "GNC", 87, "DecodeSVs", (const char *)v30, v74 + 1);
    if (v77 < 0)
      operator delete(__p[0]);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return 5;
}

uint64_t XofAlmanacData::DecodeSVs<std::map<unsigned char,XofGlonassAlmanac>,XofGlonassAlmCodec>(uint64_t a1, _QWORD *a2, _DWORD *a3, int a4, unsigned int a5, uint64_t a6, uint64_t **a7)
{
  int v10;
  unsigned int v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  unsigned int v16;
  BOOL v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  uint64_t v27;
  char *v28;
  double v29;
  void **v30;
  uint64_t v31;
  char *v34;
  uint64_t v35;
  char v36;
  int v37;
  int v38;
  int v39;
  int v40;
  char v41;
  __int16 v42;
  char v43;
  char v44;
  char v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int16 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  uint64_t **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int *v74;
  int *v75;
  unsigned int *v76;
  int *v77;
  void *__p[2];
  char v79;
  char __str[8];
  __int128 v81;
  uint64_t v82;
  int v83;
  __int128 v84;
  uint64_t v85;
  int v86;
  __int128 v87;
  uint64_t v88;
  int v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  int v95;
  __int128 v96;
  uint64_t v97;
  int v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  int v113;
  __int128 v114;
  uint64_t v115;
  int v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  int v128;
  __int128 v129;
  uint64_t v130;
  int v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return 1;
  v10 = 0;
  v72 = a6 + 8;
  v53 = a7 + 1;
  v71 = a6 + 40;
  v51 = (unsigned __int8 *)(a6 + 64);
  v52 = (unsigned __int8 *)(a6 + 32);
  v70 = a6 + 72;
  v50 = (unsigned __int8 *)(a6 + 96);
  v49 = (unsigned __int16 *)(a6 + 128);
  v68 = a6 + 136;
  v69 = a6 + 104;
  v46 = (unsigned __int8 *)(a6 + 192);
  v47 = (unsigned __int8 *)(a6 + 160);
  v66 = a6 + 200;
  v67 = a6 + 168;
  v77 = (int *)(a6 + 224);
  v76 = (unsigned int *)(a6 + 264);
  v64 = a6 + 280;
  v65 = a6 + 240;
  v75 = (int *)(a6 + 304);
  v74 = (int *)(a6 + 344);
  v62 = a6 + 360;
  v63 = a6 + 320;
  v34 = (char *)(a6 + 384);
  v60 = a6 + 424;
  v61 = a6 + 392;
  v58 = a6 + 488;
  v59 = a6 + 456;
  v56 = a6 + 552;
  v57 = a6 + 520;
  v54 = a6 + 616;
  v55 = a6 + 584;
  while (1)
  {
    v73 = v10;
    bzero(__str, 0x280uLL);
    XofGlonassAlmCodec::XofGlonassAlmCodec((XofGlonassAlmCodec *)__str);
    *(_DWORD *)a6 = *(_DWORD *)__str;
    if (*(char *)(a6 + 31) < 0)
      operator delete(*(void **)v72);
    *(_OWORD *)v72 = v81;
    *(_QWORD *)(v72 + 16) = v82;
    HIBYTE(v82) = 0;
    LOBYTE(v81) = 0;
    *(_DWORD *)(a6 + 32) = v83;
    if (*(char *)(a6 + 63) < 0)
      operator delete(*(void **)v71);
    *(_OWORD *)v71 = v84;
    *(_QWORD *)(v71 + 16) = v85;
    HIBYTE(v85) = 0;
    LOBYTE(v84) = 0;
    *(_DWORD *)(a6 + 64) = v86;
    if (*(char *)(a6 + 95) < 0)
      operator delete(*(void **)v70);
    *(_OWORD *)v70 = v87;
    *(_QWORD *)(v70 + 16) = v88;
    HIBYTE(v88) = 0;
    LOBYTE(v87) = 0;
    *(_DWORD *)(a6 + 96) = v89;
    if (*(char *)(a6 + 127) < 0)
      operator delete(*(void **)v69);
    *(_OWORD *)v69 = v90;
    *(_QWORD *)(v69 + 16) = v91;
    HIBYTE(v91) = 0;
    LOBYTE(v90) = 0;
    *(_QWORD *)(a6 + 128) = v92;
    if (*(char *)(a6 + 159) < 0)
      operator delete(*(void **)v68);
    *(_OWORD *)v68 = v93;
    *(_QWORD *)(v68 + 16) = v94;
    HIBYTE(v94) = 0;
    LOBYTE(v93) = 0;
    *(_DWORD *)(a6 + 160) = v95;
    if (*(char *)(a6 + 191) < 0)
      operator delete(*(void **)v67);
    *(_OWORD *)v67 = v96;
    *(_QWORD *)(v67 + 16) = v97;
    HIBYTE(v97) = 0;
    LOBYTE(v96) = 0;
    *(_DWORD *)(a6 + 192) = v98;
    if (*(char *)(a6 + 223) < 0)
      operator delete(*(void **)v66);
    *(_OWORD *)v66 = v99;
    *(_QWORD *)(v66 + 16) = v100;
    HIBYTE(v100) = 0;
    LOBYTE(v99) = 0;
    *(_OWORD *)v77 = v101;
    if (*(char *)(a6 + 263) < 0)
      operator delete(*(void **)v65);
    *(_OWORD *)v65 = v102;
    *(_QWORD *)(v65 + 16) = v103;
    HIBYTE(v103) = 0;
    LOBYTE(v102) = 0;
    *(_OWORD *)v76 = v104;
    if (*(char *)(a6 + 303) < 0)
      operator delete(*(void **)v64);
    *(_OWORD *)v64 = v105;
    *(_QWORD *)(v64 + 16) = v106;
    HIBYTE(v106) = 0;
    LOBYTE(v105) = 0;
    *(_OWORD *)v75 = v107;
    if (*(char *)(a6 + 343) < 0)
      operator delete(*(void **)v63);
    *(_OWORD *)v63 = v108;
    *(_QWORD *)(v63 + 16) = v109;
    HIBYTE(v109) = 0;
    LOBYTE(v108) = 0;
    *(_OWORD *)v74 = v110;
    if (*(char *)(a6 + 383) < 0)
      operator delete(*(void **)v62);
    *(_OWORD *)v62 = v111;
    *(_QWORD *)(v62 + 16) = v112;
    HIBYTE(v112) = 0;
    LOBYTE(v111) = 0;
    *(_DWORD *)(a6 + 384) = v113;
    if (*(char *)(a6 + 415) < 0)
      operator delete(*(void **)v61);
    *(_OWORD *)v61 = v114;
    *(_QWORD *)(v61 + 16) = v115;
    HIBYTE(v115) = 0;
    LOBYTE(v114) = 0;
    *(_DWORD *)(a6 + 416) = v116;
    if (*(char *)(a6 + 447) < 0)
      operator delete(*(void **)v60);
    *(_OWORD *)v60 = v117;
    *(_QWORD *)(v60 + 16) = v118;
    HIBYTE(v118) = 0;
    LOBYTE(v117) = 0;
    *(_QWORD *)(a6 + 448) = v119;
    if (*(char *)(a6 + 479) < 0)
      operator delete(*(void **)v59);
    *(_OWORD *)v59 = v120;
    *(_QWORD *)(v59 + 16) = v121;
    HIBYTE(v121) = 0;
    LOBYTE(v120) = 0;
    *(_QWORD *)(a6 + 480) = v122;
    if (*(char *)(a6 + 511) < 0)
      operator delete(*(void **)v58);
    *(_OWORD *)v58 = v123;
    *(_QWORD *)(v58 + 16) = v124;
    HIBYTE(v124) = 0;
    LOBYTE(v123) = 0;
    *(_QWORD *)(a6 + 512) = v125;
    if (*(char *)(a6 + 543) < 0)
      operator delete(*(void **)v57);
    *(_OWORD *)v57 = v126;
    *(_QWORD *)(v57 + 16) = v127;
    HIBYTE(v127) = 0;
    LOBYTE(v126) = 0;
    *(_DWORD *)(a6 + 544) = v128;
    if (*(char *)(a6 + 575) < 0)
      operator delete(*(void **)v56);
    *(_OWORD *)v56 = v129;
    *(_QWORD *)(v56 + 16) = v130;
    HIBYTE(v130) = 0;
    LOBYTE(v129) = 0;
    *(_DWORD *)(a6 + 576) = v131;
    if (*(char *)(a6 + 607) < 0)
      operator delete(*(void **)v55);
    *(_OWORD *)v55 = v132;
    *(_QWORD *)(v55 + 16) = v133;
    HIBYTE(v133) = 0;
    LOBYTE(v132) = 0;
    *(_QWORD *)(a6 + 608) = v134;
    if (*(char *)(a6 + 639) < 0)
      operator delete(*(void **)v54);
    *(_OWORD *)v54 = v135;
    *(_QWORD *)(v54 + 16) = v136;
    HIBYTE(v136) = 0;
    LOBYTE(v135) = 0;
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>>::~__tuple_impl((uint64_t)__str);
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)a6, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v52, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v51, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v50, a2, a3) != 1
      || XofIntegralType<unsigned short>::DecodeFromHexData(v49, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v47, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v46, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v77, a2, a3) != 1
      || XofIntegralType<unsigned int>::DecodeFromHexData(v76, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v75, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v74, a2, a3) != 1
      || XofIntegralType<signed char>::DecodeFromHexData(v34, a2, a3) != 1
      || !XofGenericCodec::Decode<12ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>>(a6, a2, a3))
    {
      break;
    }
    v11 = *(unsigned __int8 *)(a6 + 3);
    v12 = v53;
    v13 = *v53;
    if (*v53)
    {
      v14 = v53;
      v15 = *v53;
      do
      {
        v16 = *((unsigned __int8 *)v15 + 28);
        v17 = v16 >= v11;
        if (v16 >= v11)
          v18 = (uint64_t **)v15;
        else
          v18 = (uint64_t **)(v15 + 1);
        if (v17)
          v14 = (uint64_t **)v15;
        v15 = *v18;
      }
      while (*v18);
      v12 = v53;
      if (v14 != v53 && v11 >= *((unsigned __int8 *)v14 + 28))
      {
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          v31 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Duplicate entry found for Broadcast Almanac data: Satellite Id [ %d ]\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 87, "DecodeSVs", v11);
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        return 5;
      }
    }
    v44 = *(_BYTE *)(a6 + 67);
    v45 = *(_BYTE *)(a6 + 35);
    v42 = *(_WORD *)(a6 + 134);
    v43 = *(_BYTE *)(a6 + 99);
    v40 = *(_DWORD *)(a6 + 236);
    v41 = *(_BYTE *)(a6 + 163);
    v38 = *(_DWORD *)(a6 + 316);
    v39 = *(_DWORD *)(a6 + 276);
    v36 = *(_BYTE *)(a6 + 387);
    v37 = *(_DWORD *)(a6 + 356);
    v19 = *(unsigned __int16 *)(a6 + 454);
    v20 = *(unsigned __int16 *)(a6 + 486);
    v21 = *(unsigned __int16 *)(a6 + 518);
    v35 = *(unsigned __int8 *)(a6 + 547);
    v22 = v12;
    v23 = *(unsigned __int8 *)(a6 + 579);
    if (v13)
    {
      while (1)
      {
        while (1)
        {
          v12 = (uint64_t **)v13;
          v24 = *((unsigned __int8 *)v13 + 28);
          if (v24 <= v11)
            break;
          v13 = *v12;
          v22 = v12;
          if (!*v12)
            goto LABEL_72;
        }
        if (v24 >= v11)
          break;
        v13 = v12[1];
        if (!v13)
        {
          v22 = v12 + 1;
          goto LABEL_72;
        }
      }
    }
    else
    {
LABEL_72:
      v25 = (char *)operator new(0x48uLL);
      v25[28] = v11;
      v25[32] = v11;
      v25[33] = v45;
      v25[34] = v44;
      v25[35] = v43;
      *((_WORD *)v25 + 18) = v42;
      v25[38] = v41;
      *((_DWORD *)v25 + 10) = v40;
      *((_DWORD *)v25 + 11) = v39;
      *((_DWORD *)v25 + 12) = v38;
      *((_DWORD *)v25 + 13) = v37;
      v25[56] = v36;
      *(_QWORD *)(v25 + 58) = v19 | (v20 << 16) | (v21 << 32) | (v35 << 48) | (v23 << 56);
      std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a7, (uint64_t)v12, v22, (uint64_t *)v25);
    }
    v10 = v73 + 1;
    if (v73 + 1 == a4)
      return 1;
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    v27 = mach_continuous_time();
    if (a5 > 7)
      v28 = "   ";
    else
      v28 = off_251CDBA40[a5];
    v29 = *(double *)&g_MacClockTicksToMsRelation;
    std::string::basic_string[abi:ne180100]<0>(__p, v28);
    if (v79 >= 0)
      v30 = __p;
    else
      v30 = (void **)__p[0];
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Almanac decode failure, constellation Id = [ %s ], sequence Id = [ %d ]\n", (unint64_t)(v29 * (double)v27), "GNC", 87, "DecodeSVs", (const char *)v30, v73 + 1);
    if (v79 < 0)
      operator delete(__p[0]);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return 5;
}

uint64_t XofAlmanacData::DecodeSVs<std::map<unsigned char,XofBeidouAlmanac>,XofBeidouAlmCodec>(uint64_t a1, _QWORD *a2, _DWORD *a3, int a4, unsigned int a5, uint64_t a6, uint64_t **a7)
{
  int v8;
  unsigned int v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t **v16;
  char v17;
  char v18;
  char v19;
  int v20;
  int v21;
  uint64_t **v22;
  __int16 v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v27;
  char *v28;
  double v29;
  void **v30;
  uint64_t v31;
  unsigned __int16 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  int v42;
  int v43;
  int v44;
  int v45;
  char v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  _OWORD *v49;
  _OWORD *v50;
  _OWORD *v51;
  uint64_t **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int *v71;
  unsigned int *v72;
  unsigned int *v73;
  void *__p[2];
  char v77;
  char __str[8];
  __int128 v79;
  uint64_t v80;
  int v81;
  __int128 v82;
  uint64_t v83;
  int v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  __int128 v88;
  uint64_t v89;
  int v90;
  __int128 v91;
  uint64_t v92;
  int v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;

  v129 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return 1;
  v8 = 0;
  v69 = a6 + 8;
  v52 = a7 + 1;
  v68 = a6 + 40;
  v47 = (unsigned __int8 *)(a6 + 64);
  v48 = (unsigned __int8 *)(a6 + 32);
  v67 = a6 + 72;
  v38 = (unsigned __int8 *)(a6 + 96);
  v65 = a6 + 136;
  v66 = a6 + 104;
  v35 = (unsigned __int8 *)(a6 + 160);
  v36 = (unsigned __int8 *)(a6 + 128);
  v34 = (unsigned __int16 *)(a6 + 192);
  v63 = a6 + 200;
  v64 = a6 + 168;
  v73 = (unsigned int *)(a6 + 224);
  v72 = (unsigned int *)(a6 + 264);
  v61 = a6 + 280;
  v62 = a6 + 240;
  v71 = (int *)(a6 + 304);
  v59 = a6 + 360;
  v60 = a6 + 320;
  v50 = (_OWORD *)(a6 + 384);
  v51 = (_OWORD *)(a6 + 344);
  v49 = (_OWORD *)(a6 + 424);
  v57 = a6 + 440;
  v58 = a6 + 400;
  v55 = a6 + 504;
  v56 = a6 + 472;
  v53 = a6 + 568;
  v54 = a6 + 536;
  while (1)
  {
    v70 = v8;
    bzero(__str, 0x250uLL);
    XofBeidouAlmCodec::XofBeidouAlmCodec((XofBeidouAlmCodec *)__str);
    *(_DWORD *)a6 = *(_DWORD *)__str;
    if (*(char *)(a6 + 31) < 0)
      operator delete(*(void **)v69);
    *(_OWORD *)v69 = v79;
    *(_QWORD *)(v69 + 16) = v80;
    HIBYTE(v80) = 0;
    LOBYTE(v79) = 0;
    *(_DWORD *)(a6 + 32) = v81;
    if (*(char *)(a6 + 63) < 0)
      operator delete(*(void **)v68);
    *(_OWORD *)v68 = v82;
    *(_QWORD *)(v68 + 16) = v83;
    HIBYTE(v83) = 0;
    LOBYTE(v82) = 0;
    *(_DWORD *)(a6 + 64) = v84;
    if (*(char *)(a6 + 95) < 0)
      operator delete(*(void **)v67);
    *(_OWORD *)v67 = v85;
    *(_QWORD *)(v67 + 16) = v86;
    HIBYTE(v86) = 0;
    LOBYTE(v85) = 0;
    *(_DWORD *)(a6 + 96) = v87;
    if (*(char *)(a6 + 127) < 0)
      operator delete(*(void **)v66);
    *(_OWORD *)v66 = v88;
    *(_QWORD *)(v66 + 16) = v89;
    HIBYTE(v89) = 0;
    LOBYTE(v88) = 0;
    *(_DWORD *)(a6 + 128) = v90;
    if (*(char *)(a6 + 159) < 0)
      operator delete(*(void **)v65);
    *(_OWORD *)v65 = v91;
    *(_QWORD *)(v65 + 16) = v92;
    HIBYTE(v92) = 0;
    LOBYTE(v91) = 0;
    *(_DWORD *)(a6 + 160) = v93;
    if (*(char *)(a6 + 191) < 0)
      operator delete(*(void **)v64);
    *(_OWORD *)v64 = v94;
    *(_QWORD *)(v64 + 16) = v95;
    HIBYTE(v95) = 0;
    LOBYTE(v94) = 0;
    *(_QWORD *)(a6 + 192) = v96;
    if (*(char *)(a6 + 223) < 0)
      operator delete(*(void **)v63);
    *(_OWORD *)v63 = v97;
    *(_QWORD *)(v63 + 16) = v98;
    HIBYTE(v98) = 0;
    LOBYTE(v97) = 0;
    *(_OWORD *)v73 = v99;
    if (*(char *)(a6 + 263) < 0)
      operator delete(*(void **)v62);
    *(_OWORD *)v62 = v100;
    *(_QWORD *)(v62 + 16) = v101;
    HIBYTE(v101) = 0;
    LOBYTE(v100) = 0;
    *(_OWORD *)v72 = v102;
    if (*(char *)(a6 + 303) < 0)
      operator delete(*(void **)v61);
    *(_OWORD *)v61 = v103;
    *(_QWORD *)(v61 + 16) = v104;
    HIBYTE(v104) = 0;
    LOBYTE(v103) = 0;
    *(_OWORD *)v71 = v105;
    if (*(char *)(a6 + 343) < 0)
      operator delete(*(void **)v60);
    *(_OWORD *)v60 = v106;
    *(_QWORD *)(v60 + 16) = v107;
    HIBYTE(v107) = 0;
    LOBYTE(v106) = 0;
    *v51 = v108;
    if (*(char *)(a6 + 383) < 0)
      operator delete(*(void **)v59);
    *(_OWORD *)v59 = v109;
    *(_QWORD *)(v59 + 16) = v110;
    HIBYTE(v110) = 0;
    LOBYTE(v109) = 0;
    *v50 = v111;
    if (*(char *)(a6 + 423) < 0)
      operator delete(*(void **)v58);
    *(_OWORD *)v58 = v112;
    *(_QWORD *)(v58 + 16) = v113;
    HIBYTE(v113) = 0;
    LOBYTE(v112) = 0;
    *v49 = v114;
    if (*(char *)(a6 + 463) < 0)
      operator delete(*(void **)v57);
    *(_OWORD *)v57 = v115;
    *(_QWORD *)(v57 + 16) = v116;
    HIBYTE(v116) = 0;
    LOBYTE(v115) = 0;
    *(_QWORD *)(a6 + 464) = v117;
    if (*(char *)(a6 + 495) < 0)
      operator delete(*(void **)v56);
    *(_OWORD *)v56 = v118;
    *(_QWORD *)(v56 + 16) = v119;
    HIBYTE(v119) = 0;
    LOBYTE(v118) = 0;
    *(_QWORD *)(a6 + 496) = v120;
    if (*(char *)(a6 + 527) < 0)
      operator delete(*(void **)v55);
    *(_OWORD *)v55 = v121;
    *(_QWORD *)(v55 + 16) = v122;
    HIBYTE(v122) = 0;
    LOBYTE(v121) = 0;
    *(_QWORD *)(a6 + 528) = v123;
    if (*(char *)(a6 + 559) < 0)
      operator delete(*(void **)v54);
    *(_OWORD *)v54 = v124;
    *(_QWORD *)(v54 + 16) = v125;
    HIBYTE(v125) = 0;
    LOBYTE(v124) = 0;
    *(_QWORD *)(a6 + 560) = v126;
    if (*(char *)(a6 + 591) < 0)
      operator delete(*(void **)v53);
    *(_OWORD *)v53 = v127;
    *(_QWORD *)(v53 + 16) = v128;
    HIBYTE(v128) = 0;
    LOBYTE(v127) = 0;
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)__str);
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)a6, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v48, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v47, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v38, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v36, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v35, a2, a3) != 1
      || XofIntegralType<unsigned short>::DecodeFromHexData(v34, a2, a3) != 1
      || XofIntegralType<unsigned int>::DecodeFromHexData(v73, a2, a3) != 1
      || XofIntegralType<unsigned int>::DecodeFromHexData(v72, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v71, a2, a3) != 1
      || !XofGenericCodec::Decode<10ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>(a6, a2, a3))
    {
      break;
    }
    v9 = *(unsigned __int8 *)(a6 + 3);
    v10 = v52;
    v11 = *v52;
    if (*v52)
    {
      v12 = v52;
      v13 = *v52;
      do
      {
        v14 = *((unsigned __int8 *)v13 + 28);
        v15 = v14 >= v9;
        if (v14 >= v9)
          v16 = (uint64_t **)v13;
        else
          v16 = (uint64_t **)(v13 + 1);
        if (v15)
          v12 = (uint64_t **)v13;
        v13 = *v16;
      }
      while (*v16);
      v10 = v52;
      if (v12 != v52 && v9 >= *((unsigned __int8 *)v12 + 28))
      {
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          v31 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Duplicate entry found for Broadcast Almanac data: Satellite Id [ %d ]\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 87, "DecodeSVs", v9);
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        return 5;
      }
    }
    v17 = *(_BYTE *)(a6 + 35);
    v18 = *(_BYTE *)(a6 + 67);
    v19 = *(_BYTE *)(a6 + 131);
    v20 = *(_DWORD *)(a6 + 236);
    v21 = *(_DWORD *)(a6 + 276);
    v45 = *(_DWORD *)(a6 + 316);
    v46 = *(_BYTE *)(a6 + 99);
    v43 = *(_DWORD *)(a6 + 396);
    v44 = *(_DWORD *)(a6 + 356);
    v41 = *(_WORD *)(a6 + 470);
    v42 = *(_DWORD *)(a6 + 436);
    v39 = *(_WORD *)(a6 + 534);
    v40 = *(_WORD *)(a6 + 502);
    v22 = v10;
    v23 = *(_WORD *)(a6 + 566);
    if (v11)
    {
      while (1)
      {
        while (1)
        {
          v10 = (uint64_t **)v11;
          v24 = *((unsigned __int8 *)v11 + 28);
          if (v24 <= v9)
            break;
          v11 = *v10;
          v22 = v10;
          if (!*v10)
            goto LABEL_66;
        }
        if (v24 >= v9)
          break;
        v11 = v10[1];
        if (!v11)
        {
          v22 = v10 + 1;
          goto LABEL_66;
        }
      }
    }
    else
    {
LABEL_66:
      v25 = operator new(0x48uLL);
      v25[28] = v9;
      v25[32] = v9;
      v25[33] = v17;
      v25[34] = v18;
      v25[35] = v46;
      v25[36] = v19;
      *((_DWORD *)v25 + 10) = v20;
      *((_DWORD *)v25 + 11) = v21;
      *((_DWORD *)v25 + 12) = v45;
      *((_DWORD *)v25 + 13) = v44;
      *((_DWORD *)v25 + 14) = v43;
      *((_DWORD *)v25 + 15) = v42;
      *((_WORD *)v25 + 32) = v41;
      *((_WORD *)v25 + 33) = v40;
      *((_WORD *)v25 + 34) = v39;
      *((_WORD *)v25 + 35) = v23;
      std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a7, (uint64_t)v10, v22, (uint64_t *)v25);
    }
    v8 = v70 + 1;
    if (v70 + 1 == a4)
      return 1;
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    v27 = mach_continuous_time();
    if (a5 > 7)
      v28 = "   ";
    else
      v28 = off_251CDBA40[a5];
    v29 = *(double *)&g_MacClockTicksToMsRelation;
    std::string::basic_string[abi:ne180100]<0>(__p, v28);
    if (v77 >= 0)
      v30 = __p;
    else
      v30 = (void **)__p[0];
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Almanac decode failure, constellation Id = [ %s ], sequence Id = [ %d ]\n", (unint64_t)(v29 * (double)v27), "GNC", 87, "DecodeSVs", (const char *)v30, v70 + 1);
    if (v77 < 0)
      operator delete(__p[0]);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return 5;
}

uint64_t XofAlmanacData::DecodeSVs<std::map<unsigned char,XofNavicAlmanac>,XofNavicAlmCodec>(uint64_t a1, _QWORD *a2, _DWORD *a3, int a4, unsigned int a5, uint64_t a6, uint64_t **a7)
{
  int v8;
  unsigned int v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t **v16;
  char v17;
  int v18;
  __int16 v19;
  char v20;
  int v21;
  uint64_t **v22;
  __int16 v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v27;
  char *v28;
  double v29;
  void **v30;
  uint64_t v31;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  __int16 *v36;
  char *v37;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  __int16 v42;
  int v43;
  int v44;
  int v45;
  char v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  _OWORD *v50;
  _OWORD *v51;
  _OWORD *v52;
  _OWORD *v53;
  _OWORD *v54;
  uint64_t **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int *v73;
  void *__p[2];
  char v77;
  char __str[8];
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  int v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  int v99;
  __int128 v100;
  uint64_t v101;
  int v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return 1;
  v8 = 0;
  v71 = a6 + 8;
  v55 = a7 + 1;
  v70 = a6 + 40;
  v40 = (unsigned __int16 *)(a6 + 64);
  v41 = (unsigned __int16 *)(a6 + 32);
  v39 = (unsigned __int16 *)(a6 + 96);
  v68 = a6 + 104;
  v69 = a6 + 72;
  v73 = (int *)(a6 + 160);
  v66 = a6 + 176;
  v67 = a6 + 136;
  v36 = (__int16 *)(a6 + 200);
  v37 = (char *)(a6 + 128);
  v64 = a6 + 240;
  v65 = a6 + 208;
  v34 = (unsigned __int8 *)(a6 + 264);
  v35 = (unsigned __int8 *)(a6 + 232);
  v62 = a6 + 312;
  v63 = a6 + 272;
  v53 = (_OWORD *)(a6 + 336);
  v54 = (_OWORD *)(a6 + 296);
  v60 = a6 + 392;
  v61 = a6 + 352;
  v51 = (_OWORD *)(a6 + 416);
  v52 = (_OWORD *)(a6 + 376);
  v58 = a6 + 464;
  v59 = a6 + 432;
  v50 = (_OWORD *)(a6 + 520);
  v56 = a6 + 536;
  v57 = a6 + 496;
  while (1)
  {
    v72 = v8;
    bzero(__str, 0x230uLL);
    XofNavicAlmCodec::XofNavicAlmCodec((XofNavicAlmCodec *)__str);
    *(_DWORD *)a6 = *(_DWORD *)__str;
    if (*(char *)(a6 + 31) < 0)
      operator delete(*(void **)v71);
    *(_OWORD *)v71 = v79;
    *(_QWORD *)(v71 + 16) = v80;
    HIBYTE(v80) = 0;
    LOBYTE(v79) = 0;
    *(_QWORD *)(a6 + 32) = v81;
    if (*(char *)(a6 + 63) < 0)
      operator delete(*(void **)v70);
    *(_OWORD *)v70 = v82;
    *(_QWORD *)(v70 + 16) = v83;
    HIBYTE(v83) = 0;
    LOBYTE(v82) = 0;
    *(_QWORD *)(a6 + 64) = v84;
    if (*(char *)(a6 + 95) < 0)
      operator delete(*(void **)v69);
    *(_OWORD *)v69 = v85;
    *(_QWORD *)(v69 + 16) = v86;
    HIBYTE(v86) = 0;
    LOBYTE(v85) = 0;
    *(_QWORD *)(a6 + 96) = v87;
    if (*(char *)(a6 + 127) < 0)
      operator delete(*(void **)v68);
    *(_OWORD *)v68 = v88;
    *(_QWORD *)(v68 + 16) = v89;
    HIBYTE(v89) = 0;
    LOBYTE(v88) = 0;
    *(_DWORD *)(a6 + 128) = v90;
    if (*(char *)(a6 + 159) < 0)
      operator delete(*(void **)v67);
    *(_OWORD *)v67 = v91;
    *(_QWORD *)(v67 + 16) = v92;
    HIBYTE(v92) = 0;
    LOBYTE(v91) = 0;
    *(_OWORD *)v73 = v93;
    if (*(char *)(a6 + 199) < 0)
      operator delete(*(void **)v66);
    *(_OWORD *)v66 = v94;
    *(_QWORD *)(v66 + 16) = v95;
    HIBYTE(v95) = 0;
    LOBYTE(v94) = 0;
    *(_QWORD *)(a6 + 200) = v96;
    if (*(char *)(a6 + 231) < 0)
      operator delete(*(void **)v65);
    *(_OWORD *)v65 = v97;
    *(_QWORD *)(v65 + 16) = v98;
    HIBYTE(v98) = 0;
    LOBYTE(v97) = 0;
    *(_DWORD *)(a6 + 232) = v99;
    if (*(char *)(a6 + 263) < 0)
      operator delete(*(void **)v64);
    *(_OWORD *)v64 = v100;
    *(_QWORD *)(v64 + 16) = v101;
    HIBYTE(v101) = 0;
    LOBYTE(v100) = 0;
    *(_DWORD *)(a6 + 264) = v102;
    if (*(char *)(a6 + 295) < 0)
      operator delete(*(void **)v63);
    *(_OWORD *)v63 = v103;
    *(_QWORD *)(v63 + 16) = v104;
    HIBYTE(v104) = 0;
    LOBYTE(v103) = 0;
    *v54 = v105;
    if (*(char *)(a6 + 335) < 0)
      operator delete(*(void **)v62);
    *(_OWORD *)v62 = v106;
    *(_QWORD *)(v62 + 16) = v107;
    HIBYTE(v107) = 0;
    LOBYTE(v106) = 0;
    *v53 = v108;
    if (*(char *)(a6 + 375) < 0)
      operator delete(*(void **)v61);
    *(_OWORD *)v61 = v109;
    *(_QWORD *)(v61 + 16) = v110;
    HIBYTE(v110) = 0;
    LOBYTE(v109) = 0;
    *v52 = v111;
    if (*(char *)(a6 + 415) < 0)
      operator delete(*(void **)v60);
    *(_OWORD *)v60 = v112;
    *(_QWORD *)(v60 + 16) = v113;
    HIBYTE(v113) = 0;
    LOBYTE(v112) = 0;
    *v51 = v114;
    if (*(char *)(a6 + 455) < 0)
      operator delete(*(void **)v59);
    *(_OWORD *)v59 = v115;
    *(_QWORD *)(v59 + 16) = v116;
    HIBYTE(v116) = 0;
    LOBYTE(v115) = 0;
    *(_QWORD *)(a6 + 456) = v117;
    if (*(char *)(a6 + 487) < 0)
      operator delete(*(void **)v58);
    *(_OWORD *)v58 = v118;
    *(_QWORD *)(v58 + 16) = v119;
    HIBYTE(v119) = 0;
    LOBYTE(v118) = 0;
    *(_QWORD *)(a6 + 488) = v120;
    if (*(char *)(a6 + 519) < 0)
      operator delete(*(void **)v57);
    *(_OWORD *)v57 = v121;
    *(_QWORD *)(v57 + 16) = v122;
    HIBYTE(v122) = 0;
    LOBYTE(v121) = 0;
    *v50 = v123;
    if (*(char *)(a6 + 559) < 0)
      operator delete(*(void **)v56);
    *(_OWORD *)v56 = v124;
    *(_QWORD *)(v56 + 16) = v125;
    HIBYTE(v125) = 0;
    LOBYTE(v124) = 0;
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>>::~__tuple_impl((uint64_t)__str);
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)a6, a2, a3) != 1
      || XofIntegralType<unsigned short>::DecodeFromHexData(v41, a2, a3) != 1
      || XofIntegralType<unsigned short>::DecodeFromHexData(v40, a2, a3) != 1
      || XofIntegralType<unsigned short>::DecodeFromHexData(v39, a2, a3) != 1
      || XofIntegralType<signed char>::DecodeFromHexData(v37, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v73, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v36, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v35, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v34, a2, a3) != 1
      || !XofGenericCodec::Decode<9ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>>(a6, a2, a3))
    {
      break;
    }
    v9 = *(unsigned __int8 *)(a6 + 3);
    v10 = v55;
    v11 = *v55;
    if (*v55)
    {
      v12 = v55;
      v13 = *v55;
      do
      {
        v14 = *((unsigned __int8 *)v13 + 28);
        v15 = v14 >= v9;
        if (v14 >= v9)
          v16 = (uint64_t **)v13;
        else
          v16 = (uint64_t **)(v13 + 1);
        if (v15)
          v12 = (uint64_t **)v13;
        v13 = *v16;
      }
      while (*v16);
      v10 = v55;
      if (v12 != v55 && v9 >= *((unsigned __int8 *)v12 + 28))
      {
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          v31 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Duplicate entry found for Broadcast Almanac data: Satellite Id [ %d ]\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 87, "DecodeSVs", v9);
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        return 5;
      }
    }
    v48 = *(_WORD *)(a6 + 70);
    v49 = *(_WORD *)(a6 + 38);
    v17 = *(_BYTE *)(a6 + 131);
    v18 = *(_DWORD *)(a6 + 172);
    v19 = *(_WORD *)(a6 + 206);
    v20 = *(_BYTE *)(a6 + 235);
    v46 = *(_BYTE *)(a6 + 267);
    v47 = *(_WORD *)(a6 + 102);
    v21 = *(_DWORD *)(a6 + 348);
    v44 = *(_DWORD *)(a6 + 388);
    v45 = *(_DWORD *)(a6 + 308);
    v42 = *(_WORD *)(a6 + 462);
    v43 = *(_DWORD *)(a6 + 428);
    v22 = v10;
    v23 = *(_WORD *)(a6 + 494);
    if (v11)
    {
      while (1)
      {
        while (1)
        {
          v10 = (uint64_t **)v11;
          v24 = *((unsigned __int8 *)v11 + 28);
          if (v24 <= v9)
            break;
          v11 = *v10;
          v22 = v10;
          if (!*v10)
            goto LABEL_63;
        }
        if (v24 >= v9)
          break;
        v11 = v10[1];
        if (!v11)
        {
          v22 = v10 + 1;
          goto LABEL_63;
        }
      }
    }
    else
    {
LABEL_63:
      v25 = operator new(0x48uLL);
      v25[28] = v9;
      v25[32] = v9;
      v25[33] = v17;
      *((_WORD *)v25 + 17) = v49;
      *((_WORD *)v25 + 18) = v48;
      *((_WORD *)v25 + 19) = v47;
      *((_DWORD *)v25 + 10) = v18;
      *((_WORD *)v25 + 22) = v19;
      v25[46] = v20;
      v25[47] = v46;
      *((_DWORD *)v25 + 12) = v45;
      *((_DWORD *)v25 + 13) = v21;
      *((_DWORD *)v25 + 14) = v44;
      *((_DWORD *)v25 + 15) = v43;
      *((_WORD *)v25 + 32) = v42;
      *((_WORD *)v25 + 33) = v23;
      std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a7, (uint64_t)v10, v22, (uint64_t *)v25);
    }
    v8 = v72 + 1;
    if (v72 + 1 == a4)
      return 1;
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    v27 = mach_continuous_time();
    if (a5 > 7)
      v28 = "   ";
    else
      v28 = off_251CDBA40[a5];
    v29 = *(double *)&g_MacClockTicksToMsRelation;
    std::string::basic_string[abi:ne180100]<0>(__p, v28);
    if (v77 >= 0)
      v30 = __p;
    else
      v30 = (void **)__p[0];
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Almanac decode failure, constellation Id = [ %s ], sequence Id = [ %d ]\n", (unint64_t)(v29 * (double)v27), "GNC", 87, "DecodeSVs", (const char *)v30, v72 + 1);
    if (v77 < 0)
      operator delete(__p[0]);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return 5;
}

void XofGpsQzssAlmCodec::XofGpsQzssAlmCodec(XofGpsQzssAlmCodec *this)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  std::string __p;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  std::string v24;
  uint64_t v25;
  void *v26[2];
  uint64_t v27;
  std::string v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  std::string v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  std::string v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  std::string v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  std::string v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  std::string v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  std::string v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  std::string v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  std::string v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  std::string v64;
  int v65;
  __int128 v66;
  uint64_t v67;
  std::string v68;
  int v69;
  __int128 v70;
  uint64_t v71;
  std::string v72;
  int v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v72, "svId");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v73, &v72, 1, 202, 0);
  std::string::basic_string[abi:ne180100]<0>(&v68, "weekNo");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v69, &v68, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v64, "toa");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v65, &v64, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v60, "svHealth");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v61, &v60, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v56, "e");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v57, &v56, 0, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v52, "deltaI");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v53, &v52, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v48, "omegaDot");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v49, &v48, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v44, "reserved");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v45, &v44, 0, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v40, "sqrtA");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v41, &v40, 0, 0xFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v36, "omega0");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v37, &v36, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v32, "w");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v33, &v32, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v28, "m");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v29, &v28, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v24, "af0");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v25, &v24, -1024, 1023, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "af1");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v21, &__p, -1024, 1023, 0);
  *(_OWORD *)((char *)this + 8) = v74;
  *(_OWORD *)((char *)this + 40) = v70;
  *(_OWORD *)((char *)this + 72) = v66;
  *(_OWORD *)((char *)this + 104) = v62;
  *(_OWORD *)((char *)this + 136) = v58;
  *(_OWORD *)((char *)this + 168) = v54;
  *(_OWORD *)((char *)this + 200) = v50;
  *(_OWORD *)((char *)this + 232) = v46;
  v2 = v42;
  *((_OWORD *)this + 16) = v41;
  *((_OWORD *)this + 17) = v2;
  v3 = v38;
  *(_OWORD *)((char *)this + 296) = v37;
  *(_OWORD *)((char *)this + 312) = v3;
  v4 = v34;
  *((_OWORD *)this + 21) = v33;
  *((_OWORD *)this + 22) = v4;
  v5 = v30;
  *(_OWORD *)((char *)this + 376) = v29;
  *(_DWORD *)this = v73;
  *((_QWORD *)this + 3) = v75;
  v74 = 0uLL;
  v75 = 0;
  *((_DWORD *)this + 8) = v69;
  *((_QWORD *)this + 7) = v71;
  v71 = 0;
  v70 = 0uLL;
  *((_DWORD *)this + 16) = v65;
  *((_QWORD *)this + 11) = v67;
  v66 = 0uLL;
  v67 = 0;
  *((_DWORD *)this + 24) = v61;
  v6 = v63;
  v62 = 0uLL;
  v63 = 0;
  v7 = v57;
  v8 = v59;
  *((_QWORD *)this + 15) = v6;
  *((_QWORD *)this + 16) = v7;
  v58 = 0uLL;
  v59 = 0;
  v9 = v53;
  v10 = v55;
  *((_QWORD *)this + 19) = v8;
  *((_QWORD *)this + 20) = v9;
  v54 = 0uLL;
  v55 = 0;
  v11 = v49;
  v12 = v51;
  *((_QWORD *)this + 23) = v10;
  *((_QWORD *)this + 24) = v11;
  v50 = 0uLL;
  v51 = 0;
  v13 = v45;
  v14 = v47;
  *((_QWORD *)this + 27) = v12;
  *((_QWORD *)this + 28) = v13;
  *((_QWORD *)this + 31) = v14;
  v46 = 0uLL;
  v47 = 0;
  *((_QWORD *)this + 36) = v43;
  v42 = 0uLL;
  v43 = 0;
  *((_QWORD *)this + 41) = v39;
  v38 = 0uLL;
  v39 = 0;
  *((_QWORD *)this + 46) = v35;
  v34 = 0uLL;
  v35 = 0;
  v15 = v31;
  *(_OWORD *)((char *)this + 392) = v5;
  v30 = 0uLL;
  v31 = 0;
  v16 = v25;
  *((_QWORD *)this + 51) = v15;
  *((_QWORD *)this + 52) = v16;
  v17 = v27;
  *(_OWORD *)((char *)this + 424) = *(_OWORD *)v26;
  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  v18 = v21;
  *((_QWORD *)this + 55) = v17;
  *((_QWORD *)this + 56) = v18;
  v19 = v22;
  *((_QWORD *)this + 59) = v23;
  *(_OWORD *)((char *)this + 456) = v19;
  v22 = 0uLL;
  v23 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27) < 0)
      operator delete(v26[0]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43) < 0)
    operator delete((void *)v42);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47) < 0)
    operator delete((void *)v46);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51) < 0)
    operator delete((void *)v50);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55) < 0)
    operator delete((void *)v54);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59) < 0)
    operator delete((void *)v58);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63) < 0)
    operator delete((void *)v62);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67) < 0)
    operator delete((void *)v66);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(v71) < 0)
    operator delete((void *)v70);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v75) < 0)
    operator delete((void *)v74);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
}

void sub_24BB1D98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a69;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;
  char a86;
  uint64_t v86;

  if (a15 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a25 < 0)
    operator delete(a20);
  if (a46 < 0)
    operator delete(a41);
  if (a38 < 0)
    operator delete(a33);
  if (a60 < 0)
    operator delete(a55);
  if (a52 < 0)
    operator delete(a47);
  if (a72 < 0)
    operator delete(a69);
  if (a66 < 0)
    operator delete(a61);
  if (a76 < 0)
    operator delete(a75);
  if (a74 < 0)
    operator delete(a73);
  if (a80 < 0)
    operator delete(a79);
  if (a78 < 0)
    operator delete(a77);
  if (a84 < 0)
    operator delete(a83);
  if (a82 < 0)
    operator delete(a81);
  if (SLOBYTE(STACK[0x21F]) < 0)
    operator delete((void *)STACK[0x208]);
  if (a86 < 0)
    operator delete(a85);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  if (*(char *)(v86 - 193) < 0)
    operator delete(*(void **)(v86 - 216));
  if (*(char *)(v86 - 225) < 0)
    operator delete(*(void **)(v86 - 248));
  if (*(char *)(v86 - 137) < 0)
    operator delete(*(void **)(v86 - 160));
  if (*(char *)(v86 - 169) < 0)
    operator delete(*(void **)(v86 - 192));
  if (*(char *)(v86 - 81) < 0)
    operator delete(*(void **)(v86 - 104));
  if (*(char *)(v86 - 113) < 0)
    operator delete(*(void **)(v86 - 136));
  if (*(char *)(v86 - 25) < 0)
    operator delete(*(void **)(v86 - 48));
  if (*(char *)(v86 - 57) < 0)
    operator delete(*(void **)(v86 - 80));
  _Unwind_Resume(a1);
}

void sub_24BB1DB88()
{
  JUMPOUT(0x24BB1DA60);
}

void sub_24BB1DB90()
{
  JUMPOUT(0x24BB1DA70);
}

void sub_24BB1DB98()
{
  JUMPOUT(0x24BB1DA80);
}

void sub_24BB1DBA0()
{
  JUMPOUT(0x24BB1DA90);
}

void sub_24BB1DBA8()
{
  JUMPOUT(0x24BB1DAA0);
}

void sub_24BB1DBB0()
{
  JUMPOUT(0x24BB1DAB0);
}

void sub_24BB1DBB8()
{
  JUMPOUT(0x24BB1DAC0);
}

void sub_24BB1DBC0()
{
  JUMPOUT(0x24BB1DAD0);
}

void sub_24BB1DBC8()
{
  JUMPOUT(0x24BB1DAE0);
}

void sub_24BB1DBD0()
{
  JUMPOUT(0x24BB1DAF0);
}

void sub_24BB1DBD8()
{
  JUMPOUT(0x24BB1DB00);
}

void sub_24BB1DBE0()
{
  JUMPOUT(0x24BB1DB10);
}

void sub_24BB1DBE8()
{
  JUMPOUT(0x24BB1DB20);
}

void sub_24BB1DBF0()
{
  JUMPOUT(0x24BB1DB30);
}

void sub_24BB1DBF8()
{
  JUMPOUT(0x24BB1DB40);
}

void sub_24BB1DC00()
{
  JUMPOUT(0x24BB1DB50);
}

void sub_24BB1DC08()
{
  JUMPOUT(0x24BB1DB60);
}

void sub_24BB1DC10()
{
  JUMPOUT(0x24BB1DB70);
}

void sub_24BB1DC18()
{
  JUMPOUT(0x24BB1DB80);
}

uint64_t XofIntegralType<short>::XofIntegralType(uint64_t a1, const std::string *a2, __int16 a3, __int16 a4, __int16 a5)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::string::operator=((std::string *)(a1 + 8), a2);
  *(_WORD *)a1 = a4;
  *(_WORD *)(a1 + 2) = a3;
  *(_WORD *)(a1 + 4) = a5;
  *(_WORD *)(a1 + 6) = a5;
  return a1;
}

void sub_24BB1DCB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t XofIntegralType<unsigned int>::XofIntegralType(uint64_t a1, const std::string *a2, int a3, int a4, int a5)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  std::string::operator=((std::string *)(a1 + 16), a2);
  *(_DWORD *)a1 = a4;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a5;
  *(_DWORD *)(a1 + 12) = a5;
  return a1;
}

void sub_24BB1DD5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t XofIntegralType<int>::XofIntegralType(uint64_t a1, const std::string *a2, int a3, int a4, int a5)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  std::string::operator=((std::string *)(a1 + 16), a2);
  *(_DWORD *)a1 = a4;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a5;
  *(_DWORD *)(a1 + 12) = a5;
  return a1;
}

void sub_24BB1DE04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl(uint64_t a1)
{
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  if (*(char *)(a1 + 295) < 0)
    operator delete(*(void **)(a1 + 272));
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void XofGalileoAlmCodec::XofGalileoAlmCodec(XofGalileoAlmCodec *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  std::string __p;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  std::string v33;
  uint64_t v34;
  void *v35[2];
  uint64_t v36;
  std::string v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  std::string v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  std::string v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  std::string v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  std::string v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  std::string v57;
  int v58;
  __int128 v59;
  uint64_t v60;
  std::string v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  std::string v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  std::string v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  std::string v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  std::string v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  std::string v81;
  int v82;
  __int128 v83;
  uint64_t v84;
  std::string v85;
  int v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v85, "svId");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v86, &v85, 1, 36, 0);
  std::string::basic_string[abi:ne180100]<0>(&v81, "iod");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v82, &v81, 0, 15, 0);
  std::string::basic_string[abi:ne180100]<0>(&v77, "reserved");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v78, &v77, 0, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v73, "absToa");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v74, &v73, 0, 0x7FFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v69, "e");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v70, &v69, 0, 2047, 0);
  std::string::basic_string[abi:ne180100]<0>(&v65, "deltaI");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v66, &v65, -1024, 1023, 0);
  std::string::basic_string[abi:ne180100]<0>(&v61, "omegaDot");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v62, &v61, -1024, 1023, 0);
  std::string::basic_string[abi:ne180100]<0>(&v57, "healthINAV");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v58, &v57, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v53, "healthFNAV");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v54, &v53, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v49, "deltaSqrtA");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v50, &v49, -4096, 4095, 0);
  std::string::basic_string[abi:ne180100]<0>(&v45, "omega0");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v46, &v45, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v41, "w");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v42, &v41, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v37, "m");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v38, &v37, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v33, "af0");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v34, &v33, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "af1");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v30, &__p, -4096, 4095, 0);
  *(_DWORD *)this = v86;
  *(_OWORD *)((char *)this + 8) = v87;
  *((_QWORD *)this + 3) = v88;
  v87 = 0uLL;
  v88 = 0;
  *((_DWORD *)this + 8) = v82;
  *(_OWORD *)((char *)this + 40) = v83;
  v2 = v84;
  v84 = 0;
  v83 = 0uLL;
  v3 = v78;
  v4 = v80;
  *((_QWORD *)this + 7) = v2;
  *((_QWORD *)this + 8) = v3;
  v5 = v79;
  *((_QWORD *)this + 11) = v4;
  *(_OWORD *)((char *)this + 72) = v5;
  v79 = 0uLL;
  v80 = 0;
  v6 = v75;
  v7 = v76;
  *((_OWORD *)this + 6) = v74;
  *((_OWORD *)this + 7) = v6;
  v75 = 0uLL;
  v76 = 0;
  v8 = v70;
  v9 = v72;
  *((_QWORD *)this + 16) = v7;
  *((_QWORD *)this + 17) = v8;
  *((_OWORD *)this + 9) = v71;
  v71 = 0uLL;
  v72 = 0;
  v10 = v66;
  v11 = v68;
  *((_QWORD *)this + 20) = v9;
  *((_QWORD *)this + 21) = v10;
  *((_OWORD *)this + 11) = v67;
  v67 = 0uLL;
  v68 = 0;
  v12 = v62;
  v13 = v64;
  *((_QWORD *)this + 24) = v11;
  *((_QWORD *)this + 25) = v12;
  v14 = v63;
  *((_QWORD *)this + 28) = v13;
  *((_OWORD *)this + 13) = v14;
  v63 = 0uLL;
  v64 = 0;
  *((_DWORD *)this + 58) = v58;
  v15 = v59;
  *((_QWORD *)this + 32) = v60;
  *((_OWORD *)this + 15) = v15;
  v59 = 0uLL;
  v60 = 0;
  *((_DWORD *)this + 66) = v54;
  v16 = v56;
  *((_OWORD *)this + 17) = v55;
  v55 = 0uLL;
  v56 = 0;
  v17 = v50;
  v18 = v52;
  *((_QWORD *)this + 36) = v16;
  *((_QWORD *)this + 37) = v17;
  *((_OWORD *)this + 19) = v51;
  v51 = 0uLL;
  v52 = 0;
  v19 = v46;
  v20 = v48;
  *((_QWORD *)this + 40) = v18;
  *((_QWORD *)this + 41) = v19;
  *((_OWORD *)this + 21) = v47;
  v47 = 0uLL;
  v48 = 0;
  v21 = v42;
  v22 = v44;
  *((_QWORD *)this + 44) = v20;
  *((_QWORD *)this + 45) = v21;
  *((_OWORD *)this + 23) = v43;
  v43 = 0uLL;
  v44 = 0;
  v23 = v38;
  v24 = v40;
  *((_QWORD *)this + 48) = v22;
  *((_QWORD *)this + 49) = v23;
  *((_OWORD *)this + 25) = v39;
  v39 = 0uLL;
  v40 = 0;
  v25 = v34;
  *((_QWORD *)this + 52) = v24;
  *((_QWORD *)this + 53) = v25;
  v26 = v36;
  *((_OWORD *)this + 27) = *(_OWORD *)v35;
  v35[0] = 0;
  v35[1] = 0;
  v36 = 0;
  v27 = v30;
  *((_QWORD *)this + 56) = v26;
  *((_QWORD *)this + 57) = v27;
  v28 = v31;
  *((_QWORD *)this + 60) = v32;
  *((_OWORD *)this + 29) = v28;
  v31 = 0uLL;
  v32 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36) < 0)
      operator delete(v35[0]);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52) < 0)
    operator delete((void *)v51);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56) < 0)
    operator delete((void *)v55);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60) < 0)
    operator delete((void *)v59);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64) < 0)
    operator delete((void *)v63);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68) < 0)
    operator delete((void *)v67);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v72) < 0)
    operator delete((void *)v71);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (SHIBYTE(v76) < 0)
    operator delete((void *)v75);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v80) < 0)
    operator delete((void *)v79);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v84) < 0)
    operator delete((void *)v83);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88) < 0)
    operator delete((void *)v87);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
}

void sub_24BB1E598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a66;
  char a71;
  void *a72;
  char a73;
  void *a74;
  char a75;
  void *a76;
  char a77;
  void *a78;
  char a79;
  void *a80;
  char a81;
  void *a82;
  char a83;
  void *a84;
  char a85;
  void *a86;
  char a87;
  uint64_t v87;

  if (a15 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a25 < 0)
    operator delete(a20);
  if (a45 < 0)
    operator delete(a40);
  if (a38 < 0)
    operator delete(a33);
  if (a58 < 0)
    operator delete(a53);
  if (a51 < 0)
    operator delete(a46);
  if (a71 < 0)
    operator delete(a66);
  if (a64 < 0)
    operator delete(a59);
  if (a75 < 0)
    operator delete(a74);
  if (a73 < 0)
    operator delete(a72);
  if (a79 < 0)
    operator delete(a78);
  if (a77 < 0)
    operator delete(a76);
  if (a83 < 0)
    operator delete(a82);
  if (a81 < 0)
    operator delete(a80);
  if (a87 < 0)
    operator delete(a86);
  if (a85 < 0)
    operator delete(a84);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  if (SLOBYTE(STACK[0x24F]) < 0)
    operator delete((void *)STACK[0x238]);
  if (*(char *)(v87 - 193) < 0)
    operator delete(*(void **)(v87 - 216));
  if (*(char *)(v87 - 233) < 0)
    operator delete(*(void **)(v87 - 256));
  if (*(char *)(v87 - 137) < 0)
    operator delete(*(void **)(v87 - 160));
  if (*(char *)(v87 - 169) < 0)
    operator delete(*(void **)(v87 - 192));
  if (*(char *)(v87 - 81) < 0)
    operator delete(*(void **)(v87 - 104));
  if (*(char *)(v87 - 113) < 0)
    operator delete(*(void **)(v87 - 136));
  if (*(char *)(v87 - 25) < 0)
    operator delete(*(void **)(v87 - 48));
  if (*(char *)(v87 - 57) < 0)
    operator delete(*(void **)(v87 - 80));
  _Unwind_Resume(a1);
}

void sub_24BB1E7B4()
{
  JUMPOUT(0x24BB1E66CLL);
}

void sub_24BB1E7BC()
{
  JUMPOUT(0x24BB1E67CLL);
}

void sub_24BB1E7C4()
{
  JUMPOUT(0x24BB1E68CLL);
}

void sub_24BB1E7CC()
{
  JUMPOUT(0x24BB1E69CLL);
}

void sub_24BB1E7D4()
{
  JUMPOUT(0x24BB1E6ACLL);
}

void sub_24BB1E7DC()
{
  JUMPOUT(0x24BB1E6BCLL);
}

void sub_24BB1E7E4()
{
  JUMPOUT(0x24BB1E6CCLL);
}

void sub_24BB1E7EC()
{
  JUMPOUT(0x24BB1E6DCLL);
}

void sub_24BB1E7F4()
{
  JUMPOUT(0x24BB1E6ECLL);
}

void sub_24BB1E7FC()
{
  JUMPOUT(0x24BB1E6FCLL);
}

void sub_24BB1E804()
{
  JUMPOUT(0x24BB1E70CLL);
}

void sub_24BB1E80C()
{
  JUMPOUT(0x24BB1E71CLL);
}

void sub_24BB1E814()
{
  JUMPOUT(0x24BB1E72CLL);
}

void sub_24BB1E81C()
{
  JUMPOUT(0x24BB1E73CLL);
}

void sub_24BB1E824()
{
  JUMPOUT(0x24BB1E74CLL);
}

void sub_24BB1E82C()
{
  JUMPOUT(0x24BB1E75CLL);
}

void sub_24BB1E834()
{
  JUMPOUT(0x24BB1E76CLL);
}

void sub_24BB1E83C()
{
  JUMPOUT(0x24BB1E77CLL);
}

void sub_24BB1E844()
{
  JUMPOUT(0x24BB1E78CLL);
}

void sub_24BB1E84C()
{
  JUMPOUT(0x24BB1E79CLL);
}

void sub_24BB1E854()
{
  JUMPOUT(0x24BB1E7ACLL);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl(uint64_t a1)
{
  if (*(char *)(a1 + 487) < 0)
    operator delete(*(void **)(a1 + 464));
  if (*(char *)(a1 + 455) < 0)
    operator delete(*(void **)(a1 + 432));
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  if (*(char *)(a1 + 359) < 0)
    operator delete(*(void **)(a1 + 336));
  if (*(char *)(a1 + 327) < 0)
    operator delete(*(void **)(a1 + 304));
  if (*(char *)(a1 + 295) < 0)
    operator delete(*(void **)(a1 + 272));
  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void XofGlonassAlmCodec::XofGlonassAlmCodec(XofGlonassAlmCodec *this)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  std::string __p;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  std::string v31;
  int v32;
  void *v33[2];
  uint64_t v34;
  std::string v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  std::string v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  std::string v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  std::string v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  std::string v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  std::string v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  std::string v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  std::string v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  std::string v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  std::string v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  std::string v75;
  int v76;
  __int128 v77;
  uint64_t v78;
  std::string v79;
  int v80;
  __int128 v81;
  uint64_t v82;
  std::string v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  std::string v87;
  int v88;
  __int128 v89;
  uint64_t v90;
  std::string v91;
  int v92;
  __int128 v93;
  uint64_t v94;
  std::string v95;
  int v96;
  __int128 v97;
  uint64_t v98;
  std::string v99;
  int v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v99, "svId");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v100, &v99, 1, 24, 0);
  std::string::basic_string[abi:ne180100]<0>(&v95, "weekNo");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v96, &v95, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v91, "toa");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v92, &v91, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v87, "iod");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v88, &v87, 0, 3, 0);
  std::string::basic_string[abi:ne180100]<0>(&v83, "n");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v84, &v83, 1, 1461, 0);
  std::string::basic_string[abi:ne180100]<0>(&v79, "h");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v80, &v79, 0, 31, 0);
  std::string::basic_string[abi:ne180100]<0>(&v75, "reserved1");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v76, &v75, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v71, "lambda");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v72, &v71, -1048576, 0xFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v67, "t");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v68, &v67, 0, 0x1FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v63, "deltaI");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v64, &v63, -131072, 0x1FFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v59, "deltaT");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v60, &v59, -2097152, 0x1FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v55, "deltaTDot");
  XofIntegralType<signed char>::XofIntegralType((uint64_t)&v56, &v55, -64, 63, 0);
  std::string::basic_string[abi:ne180100]<0>(&v51, "reserved2");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v52, &v51, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v47, "e");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v48, &v47, 0, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v43, "w");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v44, &v43, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v39, "time");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v40, &v39, -512, 511, 0);
  std::string::basic_string[abi:ne180100]<0>(&v35, "can");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v36, &v35, 0, 1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v31, "m");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v32, &v31, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "reserved3");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v28, &__p, 0, 0xFFFF, 0);
  *(_DWORD *)this = v100;
  *(_OWORD *)((char *)this + 8) = v101;
  *((_QWORD *)this + 3) = v102;
  v101 = 0uLL;
  v102 = 0;
  *((_DWORD *)this + 8) = v96;
  *(_OWORD *)((char *)this + 40) = v97;
  *((_QWORD *)this + 7) = v98;
  v98 = 0;
  v97 = 0uLL;
  *((_DWORD *)this + 16) = v92;
  v2 = v93;
  *((_QWORD *)this + 11) = v94;
  *(_OWORD *)((char *)this + 72) = v2;
  v93 = 0uLL;
  v94 = 0;
  *((_DWORD *)this + 24) = v88;
  v3 = v90;
  *(_OWORD *)((char *)this + 104) = v89;
  v89 = 0uLL;
  v90 = 0;
  v4 = v84;
  v5 = v86;
  *((_QWORD *)this + 15) = v3;
  *((_QWORD *)this + 16) = v4;
  v6 = v85;
  *((_QWORD *)this + 19) = v5;
  *(_OWORD *)((char *)this + 136) = v6;
  v85 = 0uLL;
  v86 = 0;
  *((_DWORD *)this + 40) = v80;
  v7 = v81;
  *((_QWORD *)this + 23) = v82;
  *(_OWORD *)((char *)this + 168) = v7;
  v81 = 0uLL;
  v82 = 0;
  *((_DWORD *)this + 48) = v76;
  v8 = v77;
  *((_QWORD *)this + 27) = v78;
  *(_OWORD *)((char *)this + 200) = v8;
  v77 = 0uLL;
  v78 = 0;
  v9 = v72;
  v10 = v73;
  *((_QWORD *)this + 32) = v74;
  *((_OWORD *)this + 14) = v9;
  *((_OWORD *)this + 15) = v10;
  v73 = 0uLL;
  v74 = 0;
  *(_OWORD *)((char *)this + 264) = v68;
  v11 = v69;
  *((_QWORD *)this + 37) = v70;
  *(_OWORD *)((char *)this + 280) = v11;
  v69 = 0uLL;
  v70 = 0;
  v12 = v64;
  v13 = v65;
  *((_QWORD *)this + 42) = v66;
  *((_OWORD *)this + 19) = v12;
  *((_OWORD *)this + 20) = v13;
  v65 = 0uLL;
  v66 = 0;
  *(_OWORD *)((char *)this + 344) = v60;
  v14 = v61;
  *((_QWORD *)this + 47) = v62;
  *(_OWORD *)((char *)this + 360) = v14;
  v61 = 0uLL;
  v62 = 0;
  *((_DWORD *)this + 96) = v56;
  v15 = v57;
  *((_QWORD *)this + 51) = v58;
  *(_OWORD *)((char *)this + 392) = v15;
  v57 = 0uLL;
  v58 = 0;
  *((_DWORD *)this + 104) = v52;
  v16 = v54;
  *(_OWORD *)((char *)this + 424) = v53;
  v53 = 0uLL;
  v54 = 0;
  v17 = v48;
  v18 = v50;
  *((_QWORD *)this + 55) = v16;
  *((_QWORD *)this + 56) = v17;
  *(_OWORD *)((char *)this + 456) = v49;
  v49 = 0uLL;
  v50 = 0;
  v19 = v44;
  v20 = v46;
  *((_QWORD *)this + 59) = v18;
  *((_QWORD *)this + 60) = v19;
  *(_OWORD *)((char *)this + 488) = v45;
  v45 = 0uLL;
  v46 = 0;
  v21 = v40;
  v22 = v42;
  *((_QWORD *)this + 63) = v20;
  *((_QWORD *)this + 64) = v21;
  v23 = v41;
  *((_QWORD *)this + 67) = v22;
  *(_OWORD *)((char *)this + 520) = v23;
  v41 = 0uLL;
  v42 = 0;
  *((_DWORD *)this + 136) = v36;
  v24 = v37;
  *((_QWORD *)this + 71) = v38;
  *(_OWORD *)((char *)this + 552) = v24;
  v37 = 0uLL;
  v38 = 0;
  *((_DWORD *)this + 144) = v32;
  v25 = *(_OWORD *)v33;
  *((_QWORD *)this + 75) = v34;
  *(_OWORD *)((char *)this + 584) = v25;
  v33[0] = 0;
  v33[1] = 0;
  v34 = 0;
  *((_QWORD *)this + 76) = v28;
  v26 = v29;
  *((_QWORD *)this + 79) = v30;
  *(_OWORD *)((char *)this + 616) = v26;
  v29 = 0uLL;
  v30 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34) < 0)
      operator delete(v33[0]);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46) < 0)
    operator delete((void *)v45);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50) < 0)
    operator delete((void *)v49);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54) < 0)
    operator delete((void *)v53);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58) < 0)
    operator delete((void *)v57);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)v61);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v66) < 0)
    operator delete((void *)v65);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v70) < 0)
    operator delete((void *)v69);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v74) < 0)
    operator delete((void *)v73);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78) < 0)
    operator delete((void *)v77);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82) < 0)
    operator delete((void *)v81);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86) < 0)
    operator delete((void *)v85);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  if (SHIBYTE(v94) < 0)
    operator delete((void *)v93);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  if (SHIBYTE(v98) < 0)
    operator delete((void *)v97);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (SHIBYTE(v102) < 0)
    operator delete((void *)v101);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
}

void sub_24BB1F1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a71;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;
  char a86;
  uint64_t v86;

  if (a14 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (a24 < 0)
    operator delete(a19);
  if (a44 < 0)
    operator delete(a39);
  if (a37 < 0)
    operator delete(a32);
  if (a57 < 0)
    operator delete(a52);
  if (a50 < 0)
    operator delete(a45);
  if (a70 < 0)
    operator delete(a65);
  if (a63 < 0)
    operator delete(a58);
  if (a74 < 0)
    operator delete(a73);
  if (a72 < 0)
    operator delete(a71);
  if (a78 < 0)
    operator delete(a77);
  if (a76 < 0)
    operator delete(a75);
  if (a82 < 0)
    operator delete(a81);
  if (a80 < 0)
    operator delete(a79);
  if (a86 < 0)
    operator delete(a85);
  if (a84 < 0)
    operator delete(a83);
  if (SLOBYTE(STACK[0x23F]) < 0)
    operator delete((void *)STACK[0x228]);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (SLOBYTE(STACK[0x27F]) < 0)
    operator delete((void *)STACK[0x268]);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  if (SLOBYTE(STACK[0x32F]) < 0)
    operator delete((void *)STACK[0x318]);
  if (SLOBYTE(STACK[0x30F]) < 0)
    operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  if (*(char *)(v86 - 193) < 0)
    operator delete(*(void **)(v86 - 216));
  if (*(char *)(v86 - 225) < 0)
    operator delete(*(void **)(v86 - 248));
  if (*(char *)(v86 - 137) < 0)
    operator delete(*(void **)(v86 - 160));
  if (*(char *)(v86 - 169) < 0)
    operator delete(*(void **)(v86 - 192));
  if (*(char *)(v86 - 81) < 0)
    operator delete(*(void **)(v86 - 104));
  if (*(char *)(v86 - 113) < 0)
    operator delete(*(void **)(v86 - 136));
  if (*(char *)(v86 - 25) < 0)
    operator delete(*(void **)(v86 - 48));
  if (*(char *)(v86 - 57) < 0)
    operator delete(*(void **)(v86 - 80));
  _Unwind_Resume(a1);
}

void sub_24BB1F478()
{
  JUMPOUT(0x24BB1F2B0);
}

void sub_24BB1F480()
{
  JUMPOUT(0x24BB1F2C0);
}

void sub_24BB1F488()
{
  JUMPOUT(0x24BB1F2D0);
}

void sub_24BB1F490()
{
  JUMPOUT(0x24BB1F2E0);
}

void sub_24BB1F498()
{
  JUMPOUT(0x24BB1F2F0);
}

void sub_24BB1F4A0()
{
  JUMPOUT(0x24BB1F300);
}

void sub_24BB1F4A8()
{
  JUMPOUT(0x24BB1F310);
}

void sub_24BB1F4B0()
{
  JUMPOUT(0x24BB1F320);
}

void sub_24BB1F4B8()
{
  JUMPOUT(0x24BB1F330);
}

void sub_24BB1F4C0()
{
  JUMPOUT(0x24BB1F340);
}

void sub_24BB1F4C8()
{
  JUMPOUT(0x24BB1F350);
}

void sub_24BB1F4D0()
{
  JUMPOUT(0x24BB1F360);
}

void sub_24BB1F4D8()
{
  JUMPOUT(0x24BB1F370);
}

void sub_24BB1F4E0()
{
  JUMPOUT(0x24BB1F380);
}

void sub_24BB1F4E8()
{
  JUMPOUT(0x24BB1F390);
}

void sub_24BB1F4F0()
{
  JUMPOUT(0x24BB1F3A0);
}

void sub_24BB1F4F8()
{
  JUMPOUT(0x24BB1F3B0);
}

void sub_24BB1F500()
{
  JUMPOUT(0x24BB1F3C0);
}

void sub_24BB1F508()
{
  JUMPOUT(0x24BB1F3D0);
}

void sub_24BB1F510()
{
  JUMPOUT(0x24BB1F3E0);
}

void sub_24BB1F518()
{
  JUMPOUT(0x24BB1F3F0);
}

void sub_24BB1F520()
{
  JUMPOUT(0x24BB1F400);
}

void sub_24BB1F528()
{
  JUMPOUT(0x24BB1F410);
}

void sub_24BB1F530()
{
  JUMPOUT(0x24BB1F420);
}

void sub_24BB1F538()
{
  JUMPOUT(0x24BB1F430);
}

void sub_24BB1F540()
{
  JUMPOUT(0x24BB1F440);
}

void sub_24BB1F548()
{
  JUMPOUT(0x24BB1F450);
}

void sub_24BB1F550()
{
  JUMPOUT(0x24BB1F460);
}

void sub_24BB1F558()
{
  JUMPOUT(0x24BB1F470);
}

uint64_t XofIntegralType<signed char>::XofIntegralType(uint64_t a1, const std::string *a2, char a3, char a4, char a5)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::string::operator=((std::string *)(a1 + 8), a2);
  *(_BYTE *)a1 = a4;
  *(_BYTE *)(a1 + 1) = a3;
  *(_BYTE *)(a1 + 2) = a5;
  *(_BYTE *)(a1 + 3) = a5;
  return a1;
}

void sub_24BB1F5F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>>::~__tuple_impl(uint64_t a1)
{
  if (*(char *)(a1 + 639) < 0)
    operator delete(*(void **)(a1 + 616));
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  if (*(char *)(a1 + 575) < 0)
    operator delete(*(void **)(a1 + 552));
  if (*(char *)(a1 + 543) < 0)
    operator delete(*(void **)(a1 + 520));
  if (*(char *)(a1 + 511) < 0)
    operator delete(*(void **)(a1 + 488));
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  if (*(char *)(a1 + 343) < 0)
    operator delete(*(void **)(a1 + 320));
  if (*(char *)(a1 + 303) < 0)
    operator delete(*(void **)(a1 + 280));
  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void XofBeidouAlmCodec::XofBeidouAlmCodec(XofBeidouAlmCodec *this)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  std::string __p;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::string v23;
  uint64_t v24;
  void *v25[2];
  uint64_t v26;
  std::string v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  std::string v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  std::string v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  std::string v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  std::string v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  std::string v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  std::string v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  std::string v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  std::string v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  std::string v63;
  int v64;
  __int128 v65;
  uint64_t v66;
  std::string v67;
  int v68;
  __int128 v69;
  uint64_t v70;
  std::string v71;
  int v72;
  __int128 v73;
  uint64_t v74;
  std::string v75;
  int v76;
  __int128 v77;
  uint64_t v78;
  std::string v79;
  int v80;
  __int128 v81;
  uint64_t v82;
  std::string v83;
  int v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v83, "svId");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v84, &v83, 1, 63, 0);
  std::string::basic_string[abi:ne180100]<0>(&v79, "weekNum");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v80, &v79, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v75, "toa");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v76, &v75, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v71, "iod");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v72, &v71, 0, 3, 0);
  std::string::basic_string[abi:ne180100]<0>(&v67, "almToa");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v68, &v67, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v63, "reserved1");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v64, &v63, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v59, "reserved2");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v60, &v59, 0, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v55, "sqrtA");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v56, &v55, 0, 0xFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v51, "e");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v52, &v51, 0, 0x1FFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v47, "w");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v48, &v47, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v43, "m");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v44, &v43, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v39, "omega0");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v40, &v39, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v35, "omegaDot");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v36, &v35, -65536, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v31, "deltaI");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v32, &v31, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v27, "a0");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v28, &v27, -1024, 1023, 0);
  std::string::basic_string[abi:ne180100]<0>(&v23, "a1");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v24, &v23, -1024, 1023, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "svHealth");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v20, &__p, 0, 511, 0);
  *(_OWORD *)((char *)this + 8) = v85;
  *(_OWORD *)((char *)this + 40) = v81;
  *(_OWORD *)((char *)this + 72) = v77;
  *(_OWORD *)((char *)this + 104) = v73;
  *(_OWORD *)((char *)this + 136) = v69;
  *(_OWORD *)((char *)this + 168) = v65;
  *(_OWORD *)((char *)this + 200) = v61;
  v2 = v57;
  *((_OWORD *)this + 14) = v56;
  *((_OWORD *)this + 15) = v2;
  v3 = v53;
  *(_OWORD *)((char *)this + 264) = v52;
  *(_OWORD *)((char *)this + 280) = v3;
  v4 = v49;
  *((_OWORD *)this + 19) = v48;
  *((_OWORD *)this + 20) = v4;
  v5 = v45;
  *(_OWORD *)((char *)this + 344) = v44;
  *(_OWORD *)((char *)this + 360) = v5;
  v6 = v41;
  *((_OWORD *)this + 24) = v40;
  *((_OWORD *)this + 25) = v6;
  v7 = v37;
  *(_OWORD *)((char *)this + 424) = v36;
  *(_DWORD *)this = v84;
  *((_QWORD *)this + 3) = v86;
  v85 = 0uLL;
  v86 = 0;
  *((_DWORD *)this + 8) = v80;
  *((_QWORD *)this + 7) = v82;
  v82 = 0;
  v81 = 0uLL;
  *((_DWORD *)this + 16) = v76;
  *((_QWORD *)this + 11) = v78;
  v77 = 0uLL;
  v78 = 0;
  *((_DWORD *)this + 24) = v72;
  *((_QWORD *)this + 15) = v74;
  v73 = 0uLL;
  v74 = 0;
  *((_DWORD *)this + 32) = v68;
  *((_QWORD *)this + 19) = v70;
  v69 = 0uLL;
  v70 = 0;
  *((_DWORD *)this + 40) = v64;
  v8 = v66;
  v65 = 0uLL;
  v66 = 0;
  v9 = v60;
  v10 = v62;
  *((_QWORD *)this + 23) = v8;
  *((_QWORD *)this + 24) = v9;
  *((_QWORD *)this + 27) = v10;
  v61 = 0uLL;
  v62 = 0;
  *((_QWORD *)this + 32) = v58;
  v57 = 0uLL;
  v58 = 0;
  *((_QWORD *)this + 37) = v54;
  v53 = 0uLL;
  v54 = 0;
  *((_QWORD *)this + 42) = v50;
  v49 = 0uLL;
  v50 = 0;
  *((_QWORD *)this + 47) = v46;
  v45 = 0uLL;
  v46 = 0;
  *((_QWORD *)this + 52) = v42;
  v41 = 0uLL;
  v42 = 0;
  v11 = v38;
  *(_OWORD *)((char *)this + 440) = v7;
  v37 = 0uLL;
  v38 = 0;
  v12 = v32;
  v13 = v34;
  *((_QWORD *)this + 57) = v11;
  *((_QWORD *)this + 58) = v12;
  *(_OWORD *)((char *)this + 472) = v33;
  v33 = 0uLL;
  v34 = 0;
  v14 = v28;
  v15 = v30;
  *((_QWORD *)this + 61) = v13;
  *((_QWORD *)this + 62) = v14;
  v16 = v29;
  *((_QWORD *)this + 65) = v15;
  *(_OWORD *)((char *)this + 504) = v16;
  v29 = 0uLL;
  v30 = 0;
  *((_QWORD *)this + 66) = v24;
  v17 = *(_OWORD *)v25;
  *((_QWORD *)this + 69) = v26;
  *(_OWORD *)((char *)this + 536) = v17;
  v25[0] = 0;
  v25[1] = 0;
  v26 = 0;
  *((_QWORD *)this + 70) = v20;
  v18 = v21;
  *((_QWORD *)this + 73) = v22;
  *(_OWORD *)((char *)this + 568) = v18;
  v21 = 0uLL;
  v22 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26) < 0)
      operator delete(v25[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46) < 0)
    operator delete((void *)v45);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50) < 0)
    operator delete((void *)v49);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54) < 0)
    operator delete((void *)v53);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58) < 0)
    operator delete((void *)v57);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)v61);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v66) < 0)
    operator delete((void *)v65);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v70) < 0)
    operator delete((void *)v69);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v74) < 0)
    operator delete((void *)v73);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78) < 0)
    operator delete((void *)v77);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82) < 0)
    operator delete((void *)v81);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86) < 0)
    operator delete((void *)v85);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
}

void sub_24BB1FED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a66;
  char a71;
  void *a72;
  char a73;
  void *a74;
  char a75;
  void *a76;
  char a77;
  void *a78;
  char a79;
  void *a80;
  char a81;
  void *a82;
  char a83;
  void *a84;
  char a85;
  uint64_t v85;

  if (a14 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (a24 < 0)
    operator delete(a19);
  if (a44 < 0)
    operator delete(a39);
  if (a37 < 0)
    operator delete(a32);
  if (a57 < 0)
    operator delete(a52);
  if (a50 < 0)
    operator delete(a45);
  if (a71 < 0)
    operator delete(a66);
  if (a63 < 0)
    operator delete(a58);
  if (a75 < 0)
    operator delete(a74);
  if (a73 < 0)
    operator delete(a72);
  if (a79 < 0)
    operator delete(a78);
  if (a77 < 0)
    operator delete(a76);
  if (a83 < 0)
    operator delete(a82);
  if (a81 < 0)
    operator delete(a80);
  if (SLOBYTE(STACK[0x21F]) < 0)
    operator delete((void *)STACK[0x208]);
  if (a85 < 0)
    operator delete(a84);
  if (SLOBYTE(STACK[0x25F]) < 0)
    operator delete((void *)STACK[0x248]);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (SLOBYTE(STACK[0x2CF]) < 0)
    operator delete((void *)STACK[0x2B8]);
  if (SLOBYTE(STACK[0x2AF]) < 0)
    operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x307]) < 0)
    operator delete((void *)STACK[0x2F0]);
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  if (*(char *)(v85 - 193) < 0)
    operator delete(*(void **)(v85 - 216));
  if (*(char *)(v85 - 225) < 0)
    operator delete(*(void **)(v85 - 248));
  if (*(char *)(v85 - 137) < 0)
    operator delete(*(void **)(v85 - 160));
  if (*(char *)(v85 - 169) < 0)
    operator delete(*(void **)(v85 - 192));
  if (*(char *)(v85 - 81) < 0)
    operator delete(*(void **)(v85 - 104));
  if (*(char *)(v85 - 113) < 0)
    operator delete(*(void **)(v85 - 136));
  if (*(char *)(v85 - 25) < 0)
    operator delete(*(void **)(v85 - 48));
  if (*(char *)(v85 - 57) < 0)
    operator delete(*(void **)(v85 - 80));
  _Unwind_Resume(a1);
}

void sub_24BB20134()
{
  JUMPOUT(0x24BB1FFACLL);
}

void sub_24BB2013C()
{
  JUMPOUT(0x24BB1FFBCLL);
}

void sub_24BB20144()
{
  JUMPOUT(0x24BB1FFCCLL);
}

void sub_24BB2014C()
{
  JUMPOUT(0x24BB1FFDCLL);
}

void sub_24BB20154()
{
  JUMPOUT(0x24BB1FFECLL);
}

void sub_24BB2015C()
{
  JUMPOUT(0x24BB1FFFCLL);
}

void sub_24BB20164()
{
  JUMPOUT(0x24BB2000CLL);
}

void sub_24BB2016C()
{
  JUMPOUT(0x24BB2001CLL);
}

void sub_24BB20174()
{
  JUMPOUT(0x24BB2002CLL);
}

void sub_24BB2017C()
{
  JUMPOUT(0x24BB2003CLL);
}

void sub_24BB20184()
{
  JUMPOUT(0x24BB2004CLL);
}

void sub_24BB2018C()
{
  JUMPOUT(0x24BB2005CLL);
}

void sub_24BB20194()
{
  JUMPOUT(0x24BB2006CLL);
}

void sub_24BB2019C()
{
  JUMPOUT(0x24BB2007CLL);
}

void sub_24BB201A4()
{
  JUMPOUT(0x24BB2008CLL);
}

void sub_24BB201AC()
{
  JUMPOUT(0x24BB2009CLL);
}

void sub_24BB201B4()
{
  JUMPOUT(0x24BB200ACLL);
}

void sub_24BB201BC()
{
  JUMPOUT(0x24BB200BCLL);
}

void sub_24BB201C4()
{
  JUMPOUT(0x24BB200CCLL);
}

void sub_24BB201CC()
{
  JUMPOUT(0x24BB200DCLL);
}

void sub_24BB201D4()
{
  JUMPOUT(0x24BB200ECLL);
}

void sub_24BB201DC()
{
  JUMPOUT(0x24BB200FCLL);
}

void sub_24BB201E4()
{
  JUMPOUT(0x24BB2010CLL);
}

void sub_24BB201EC()
{
  JUMPOUT(0x24BB2011CLL);
}

void sub_24BB201F4()
{
  JUMPOUT(0x24BB2012CLL);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl(uint64_t a1)
{
  if (*(char *)(a1 + 591) < 0)
    operator delete(*(void **)(a1 + 568));
  if (*(char *)(a1 + 559) < 0)
    operator delete(*(void **)(a1 + 536));
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  if (*(char *)(a1 + 495) < 0)
    operator delete(*(void **)(a1 + 472));
  if (*(char *)(a1 + 463) < 0)
    operator delete(*(void **)(a1 + 440));
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  if (*(char *)(a1 + 343) < 0)
    operator delete(*(void **)(a1 + 320));
  if (*(char *)(a1 + 303) < 0)
    operator delete(*(void **)(a1 + 280));
  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void XofNavicAlmCodec::XofNavicAlmCodec(XofNavicAlmCodec *this)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string __p;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  std::string v24;
  uint64_t v25;
  void *v26[2];
  uint64_t v27;
  std::string v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  std::string v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  std::string v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  std::string v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  std::string v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  std::string v48;
  int v49;
  __int128 v50;
  uint64_t v51;
  std::string v52;
  int v53;
  __int128 v54;
  uint64_t v55;
  std::string v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  std::string v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  std::string v64;
  int v65;
  __int128 v66;
  uint64_t v67;
  std::string v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  std::string v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  std::string v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  std::string v80;
  int v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v80, "svId");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v81, &v80, 1, 14, 0);
  std::string::basic_string[abi:ne180100]<0>(&v76, "weekNo");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v77, &v76, 0, 1023, 0);
  std::string::basic_string[abi:ne180100]<0>(&v72, "toa");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v73, &v72, 0, 37799, 0);
  std::string::basic_string[abi:ne180100]<0>(&v68, "e");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v69, &v68, 0, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v64, "intSigCor");
  XofIntegralType<signed char>::XofIntegralType((uint64_t)&v65, &v64, -128, 127, 0);
  std::string::basic_string[abi:ne180100]<0>(&v60, "i0");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v61, &v60, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v56, "omegaDot");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v57, &v56, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v52, "L5Health");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v53, &v52, 0, 1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v48, "SHealth");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v49, &v48, 0, 1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v44, "sqrtA");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v45, &v44, 0, 0xFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v40, "omega0");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v41, &v40, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v36, "w");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v37, &v36, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v32, "m");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v33, &v32, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v28, "af0");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v29, &v28, -1024, 1023, 0);
  std::string::basic_string[abi:ne180100]<0>(&v24, "af1");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v25, &v24, -1024, 1023, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "reserved2");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v21, &__p, 0, -1, 0);
  *(_OWORD *)((char *)this + 8) = v82;
  *(_OWORD *)((char *)this + 40) = v78;
  *(_OWORD *)((char *)this + 72) = v74;
  *(_OWORD *)((char *)this + 104) = v70;
  *(_OWORD *)((char *)this + 136) = v66;
  v2 = v62;
  *((_OWORD *)this + 10) = v61;
  *((_OWORD *)this + 11) = v2;
  *((_OWORD *)this + 13) = v58;
  *((_OWORD *)this + 15) = v54;
  *((_OWORD *)this + 17) = v50;
  *(_OWORD *)((char *)this + 296) = v45;
  *(_OWORD *)((char *)this + 312) = v46;
  v3 = v42;
  *((_OWORD *)this + 21) = v41;
  *((_OWORD *)this + 22) = v3;
  *(_OWORD *)((char *)this + 376) = v37;
  *(_OWORD *)((char *)this + 392) = v38;
  v4 = v34;
  *((_OWORD *)this + 26) = v33;
  *((_OWORD *)this + 27) = v4;
  *((_OWORD *)this + 29) = v30;
  *((_OWORD *)this + 31) = *(_OWORD *)v26;
  v5 = v22;
  *(_OWORD *)((char *)this + 520) = v21;
  *(_DWORD *)this = v81;
  v6 = v83;
  v82 = 0uLL;
  v83 = 0;
  v7 = v77;
  v8 = v79;
  *((_QWORD *)this + 3) = v6;
  *((_QWORD *)this + 4) = v7;
  v79 = 0;
  v78 = 0uLL;
  v9 = v73;
  v10 = v75;
  *((_QWORD *)this + 7) = v8;
  *((_QWORD *)this + 8) = v9;
  v74 = 0uLL;
  v75 = 0;
  v11 = v69;
  v12 = v71;
  *((_QWORD *)this + 11) = v10;
  *((_QWORD *)this + 12) = v11;
  *((_QWORD *)this + 15) = v12;
  v70 = 0uLL;
  v71 = 0;
  *((_DWORD *)this + 32) = v65;
  *((_QWORD *)this + 19) = v67;
  v66 = 0uLL;
  v67 = 0;
  v13 = v63;
  v62 = 0uLL;
  v63 = 0;
  v14 = v57;
  v15 = v59;
  *((_QWORD *)this + 24) = v13;
  *((_QWORD *)this + 25) = v14;
  *((_QWORD *)this + 28) = v15;
  v58 = 0uLL;
  v59 = 0;
  *((_DWORD *)this + 58) = v53;
  *((_QWORD *)this + 32) = v55;
  v54 = 0uLL;
  v55 = 0;
  *((_DWORD *)this + 66) = v49;
  *((_QWORD *)this + 36) = v51;
  v50 = 0uLL;
  v51 = 0;
  *((_QWORD *)this + 41) = v47;
  v46 = 0uLL;
  v47 = 0;
  *((_QWORD *)this + 46) = v43;
  v42 = 0uLL;
  v43 = 0;
  *((_QWORD *)this + 51) = v39;
  v38 = 0uLL;
  v39 = 0;
  v16 = v35;
  v34 = 0uLL;
  v35 = 0;
  v17 = v29;
  v18 = v31;
  *((_QWORD *)this + 56) = v16;
  *((_QWORD *)this + 57) = v17;
  v30 = 0uLL;
  v31 = 0;
  v19 = v25;
  *((_QWORD *)this + 60) = v18;
  *((_QWORD *)this + 61) = v19;
  *((_QWORD *)this + 64) = v27;
  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  *((_QWORD *)this + 69) = v23;
  *(_OWORD *)((char *)this + 536) = v5;
  v22 = 0uLL;
  v23 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27) < 0)
      operator delete(v26[0]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43) < 0)
    operator delete((void *)v42);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47) < 0)
    operator delete((void *)v46);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51) < 0)
    operator delete((void *)v50);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55) < 0)
    operator delete((void *)v54);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59) < 0)
    operator delete((void *)v58);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63) < 0)
    operator delete((void *)v62);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67) < 0)
    operator delete((void *)v66);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(v71) < 0)
    operator delete((void *)v70);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v75) < 0)
    operator delete((void *)v74);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79) < 0)
    operator delete((void *)v78);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(v83) < 0)
    operator delete((void *)v82);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
}

void sub_24BB20A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a69;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;
  uint64_t v85;

  if (a15 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a46 < 0)
    operator delete(a41);
  if (a39 < 0)
    operator delete(a34);
  if (a60 < 0)
    operator delete(a55);
  if (a52 < 0)
    operator delete(a47);
  if (a72 < 0)
    operator delete(a69);
  if (a66 < 0)
    operator delete(a61);
  if (a76 < 0)
    operator delete(a75);
  if (a74 < 0)
    operator delete(a73);
  if (a80 < 0)
    operator delete(a79);
  if (a78 < 0)
    operator delete(a77);
  if (a84 < 0)
    operator delete(a83);
  if (a82 < 0)
    operator delete(a81);
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a85);
  if (SLOBYTE(STACK[0x25F]) < 0)
    operator delete((void *)STACK[0x248]);
  if (SLOBYTE(STACK[0x23F]) < 0)
    operator delete((void *)STACK[0x228]);
  if (SLOBYTE(STACK[0x29F]) < 0)
    operator delete((void *)STACK[0x288]);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  if (*(char *)(v85 - 193) < 0)
    operator delete(*(void **)(v85 - 216));
  if (*(char *)(v85 - 225) < 0)
    operator delete(*(void **)(v85 - 248));
  if (*(char *)(v85 - 137) < 0)
    operator delete(*(void **)(v85 - 160));
  if (*(char *)(v85 - 169) < 0)
    operator delete(*(void **)(v85 - 192));
  if (*(char *)(v85 - 81) < 0)
    operator delete(*(void **)(v85 - 104));
  if (*(char *)(v85 - 113) < 0)
    operator delete(*(void **)(v85 - 136));
  if (*(char *)(v85 - 25) < 0)
    operator delete(*(void **)(v85 - 48));
  if (*(char *)(v85 - 57) < 0)
    operator delete(*(void **)(v85 - 80));
  _Unwind_Resume(a1);
}

void sub_24BB20C74()
{
  JUMPOUT(0x24BB20B0CLL);
}

void sub_24BB20C7C()
{
  JUMPOUT(0x24BB20B1CLL);
}

void sub_24BB20C84()
{
  JUMPOUT(0x24BB20B2CLL);
}

void sub_24BB20C8C()
{
  JUMPOUT(0x24BB20B3CLL);
}

void sub_24BB20C94()
{
  JUMPOUT(0x24BB20B4CLL);
}

void sub_24BB20C9C()
{
  JUMPOUT(0x24BB20B5CLL);
}

void sub_24BB20CA4()
{
  JUMPOUT(0x24BB20B6CLL);
}

void sub_24BB20CAC()
{
  JUMPOUT(0x24BB20B7CLL);
}

void sub_24BB20CB4()
{
  JUMPOUT(0x24BB20B8CLL);
}

void sub_24BB20CBC()
{
  JUMPOUT(0x24BB20B9CLL);
}

void sub_24BB20CC4()
{
  JUMPOUT(0x24BB20BACLL);
}

void sub_24BB20CCC()
{
  JUMPOUT(0x24BB20BBCLL);
}

void sub_24BB20CD4()
{
  JUMPOUT(0x24BB20BCCLL);
}

void sub_24BB20CDC()
{
  JUMPOUT(0x24BB20BDCLL);
}

void sub_24BB20CE4()
{
  JUMPOUT(0x24BB20BECLL);
}

void sub_24BB20CEC()
{
  JUMPOUT(0x24BB20BFCLL);
}

void sub_24BB20CF4()
{
  JUMPOUT(0x24BB20C0CLL);
}

void sub_24BB20CFC()
{
  JUMPOUT(0x24BB20C1CLL);
}

void sub_24BB20D04()
{
  JUMPOUT(0x24BB20C2CLL);
}

void sub_24BB20D0C()
{
  JUMPOUT(0x24BB20C3CLL);
}

void sub_24BB20D14()
{
  JUMPOUT(0x24BB20C4CLL);
}

void sub_24BB20D1C()
{
  JUMPOUT(0x24BB20C5CLL);
}

void sub_24BB20D24()
{
  JUMPOUT(0x24BB20C6CLL);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>>::~__tuple_impl(uint64_t a1)
{
  if (*(char *)(a1 + 559) < 0)
    operator delete(*(void **)(a1 + 536));
  if (*(char *)(a1 + 519) < 0)
    operator delete(*(void **)(a1 + 496));
  if (*(char *)(a1 + 487) < 0)
    operator delete(*(void **)(a1 + 464));
  if (*(char *)(a1 + 455) < 0)
    operator delete(*(void **)(a1 + 432));
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  if (*(char *)(a1 + 295) < 0)
    operator delete(*(void **)(a1 + 272));
  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t XofIntegralType<short>::DecodeFromHexData(__int16 *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  double v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  std::string v14;
  char __str[8];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  if ((unint64_t)(a2[1] - (*a2 + v5)) <= 1)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      v7 = (const char *)(a1 + 4);
      if (*((char *)a1 + 31) < 0)
        v7 = *(const char **)v7;
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Insufficient data to decode, in the buffer! Field decoding is %s\n", (unint64_t)v6, "GNC", 87, "DecodeFromHexData", v7);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 5;
  }
  *(_QWORD *)__str = 0;
  if (!XofBaseType::CopyDataFromBuffer((int)a1, a2, v5, 2uLL, (unint64_t *)__str))
    return 5;
  v8 = *(_WORD *)__str;
  a1[3] = *(_WORD *)__str;
  v9 = *a1;
  v10 = a1[1];
  v11 = a1[2];
  if (*((char *)a1 + 31) < 0)
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)a1 + 1), *((_QWORD *)a1 + 2));
  else
    v14 = *(std::string *)(a1 + 4);
  v13 = XofBaseType::ValidateSignedRange((uint64_t)a1, v8, v9, v10, v11, (const char *)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  *a3 += 2;
  if (v13)
    return 1;
  else
    return 5;
}

void sub_24BB21038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t XofIntegralType<int>::DecodeFromHexData(int *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  double v6;
  const char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  std::string v14;
  char __str[8];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  if ((unint64_t)(a2[1] - (*a2 + v5)) <= 3)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      v7 = (const char *)(a1 + 4);
      if (*((char *)a1 + 39) < 0)
        v7 = *(const char **)v7;
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Insufficient data to decode, in the buffer! Field decoding is %s\n", (unint64_t)v6, "GNC", 87, "DecodeFromHexData", v7);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 5;
  }
  *(_QWORD *)__str = 0;
  if (!XofBaseType::CopyDataFromBuffer((int)a1, a2, v5, 4uLL, (unint64_t *)__str))
    return 5;
  v8 = *(_DWORD *)__str;
  a1[3] = *(_DWORD *)__str;
  v9 = *a1;
  v10 = a1[1];
  v11 = a1[2];
  if (*((char *)a1 + 39) < 0)
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)a1 + 2), *((_QWORD *)a1 + 3));
  else
    v14 = *(std::string *)(a1 + 4);
  v13 = XofBaseType::ValidateSignedRange((uint64_t)a1, v8, v9, v10, v11, (const char *)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  *a3 += 4;
  if (v13)
    return 1;
  else
    return 5;
}

void sub_24BB21210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t XofIntegralType<signed char>::DecodeFromHexData(char *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  double v6;
  const char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  std::string v14;
  char __str[8];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  if (a2[1] - *a2 == v5)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      v7 = a1 + 8;
      if (a1[31] < 0)
        v7 = *(const char **)v7;
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Insufficient data to decode, in the buffer! Field decoding is %s\n", (unint64_t)v6, "GNC", 87, "DecodeFromHexData", v7);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 5;
  }
  *(_QWORD *)__str = 0;
  if (!XofBaseType::CopyDataFromBuffer((int)a1, a2, v5, 1uLL, (unint64_t *)__str))
    return 5;
  v8 = __str[0];
  a1[3] = __str[0];
  v9 = *a1;
  v10 = a1[1];
  v11 = a1[2];
  if (a1[31] < 0)
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)a1 + 1), *((_QWORD *)a1 + 2));
  else
    v14 = *(std::string *)(a1 + 8);
  v13 = XofBaseType::ValidateSignedRange((uint64_t)a1, v8, v9, v10, v11, (const char *)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  ++*a3;
  if (v13)
    return 1;
  else
    return 5;
}

void sub_24BB213E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL XofGenericCodec::Decode<12ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>>(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  return XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 416), a2, a3) == 1
      && XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 448), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 480), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 512), a2, a3) == 1
      && XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 544), a2, a3) == 1
      && XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 576), a2, a3) == 1
      && XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 608), a2, a3) == 1;
}

BOOL XofGenericCodec::Decode<10ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  return XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 344), a2, a3) == 1
      && XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 384), a2, a3) == 1
      && XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 424), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 464), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 496), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 528), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 560), a2, a3) == 1;
}

BOOL XofGenericCodec::Decode<9ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>>(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  return XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 296), a2, a3) == 1
      && XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 336), a2, a3) == 1
      && XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 376), a2, a3) == 1
      && XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 416), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 456), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 488), a2, a3) == 1
      && XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 520), a2, a3) == 1;
}

uint64_t *std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t Get_Constell_Prn(unsigned int a1)
{
  if (a1 < 0x20)
    return 1;
  if (a1 < 0x38)
    return 2;
  if (a1 < 0x5C)
    return 3;
  if (a1 < 0x9B)
    return 4;
  if (a1 < 0xA5)
    return 5;
  if (a1 < 0xB3)
    return 6;
  if (a1 < 0xDA)
    return 7;
  gn_report_assertion_failure("Get_Constell_Prn:");
  return 0;
}

uint64_t Get_Constell_Pos(unsigned int a1)
{
  if (a1 < 0x20)
    return 1;
  if (a1 < 0x38)
    return 2;
  if (a1 < 0x5C)
    return 3;
  if (a1 < 0x9B)
    return 4;
  if (a1 < 0xA5)
    return 5;
  if (a1 < 0xB3)
    return 6;
  if (a1 < 0xC5)
    return 7;
  gn_report_assertion_failure("Get_Constell_Pos:");
  return 0;
}

uint64_t LongPrnIdx_To_Prn(unsigned int a1, int *a2)
{
  BOOL v3;
  uint64_t result;
  int v5;

  v3 = __OFSUB__(a1, 31);
  result = a1 - 31;
  if (((int)result < 0) ^ v3 | ((_DWORD)result == 0))
  {
    if (a2)
      *a2 = 1;
    return a1 + 1;
  }
  else
  {
    if (a1 <= 0x37)
    {
      if (!a2)
        return result;
      v5 = 2;
      goto LABEL_9;
    }
    result = a1 - 91;
    if (a1 <= 0x5B)
    {
      if (a2)
        *a2 = 3;
      return a1 - 55;
    }
    if (a1 <= 0x9A)
    {
      if (!a2)
        return result;
      v5 = 4;
      goto LABEL_9;
    }
    result = a1 - 164;
    if (a1 > 0xA4)
    {
      if (a1 <= 0xB2)
      {
        if (!a2)
          return result;
        v5 = 6;
LABEL_9:
        *a2 = v5;
        return result;
      }
      if (a1 > 0xD9)
      {
        if (a2)
          *a2 = 0;
        gn_report_assertion_failure("LPrn_2_Prn:");
        return 0;
      }
      else
      {
        if (a2)
          *a2 = 7;
        return a1 - 59;
      }
    }
    else
    {
      if (a2)
        *a2 = 5;
      return a1 + 38;
    }
  }
}

uint64_t LongPrnIdx_To_ShortPrnIdx(uint64_t result, _DWORD *a2)
{
  if ((result & 0x80000000) != 0)
  {
    if (a2)
    {
      result = 0;
      *a2 = 0;
      return result;
    }
    return 0;
  }
  if (result <= 0x1F)
  {
    if (a2)
      *a2 = 1;
    return result;
  }
  if (result <= 0x37)
  {
    if (a2)
      *a2 = 2;
    return (result - 32);
  }
  if (result <= 0x5B)
  {
    if (a2)
      *a2 = 3;
    return (result - 56);
  }
  if (result <= 0x9A)
  {
    if (a2)
      *a2 = 4;
    return (result - 92);
  }
  if (result <= 0xA4)
  {
    if (a2)
      *a2 = 5;
    return (result - 155);
  }
  if (result <= 0xB2)
  {
    if (a2)
      *a2 = 6;
    return (result - 165);
  }
  if (result > 0xD9)
  {
    if (a2)
      *a2 = 0;
    gn_report_assertion_failure("LPrn_2_SPrn:");
    return 0;
  }
  if (a2)
    *a2 = 7;
  return (result - 179);
}

uint64_t GNSS_Id_To_Num_Prn_Idx(int a1)
{
  unsigned __int8 v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  const char *v7;

  v1 = a1;
  v2 = a1;
  v3 = BYTE2(a1);
  if (!BYTE2(a1))
    gn_report_assertion_failure("Id_2_NPrn: 0");
  if ((v2 - 1) > 6)
  {
    v6 = 0;
    v7 = "Id_2_NPrn: 1";
    goto LABEL_9;
  }
  v4 = v3 - Prn_Offset[v1];
  v5 = Num_Prn[v2 - 1];
  v6 = (v4 + v5);
  if (v4 + v5 < 0)
  {
    v6 = 0;
    v7 = "Id_2_NPrn: 2";
    goto LABEL_9;
  }
  if (v6 >= 0xDA)
  {
    v6 = 217;
    v7 = "Id_2_NPrn: 3";
LABEL_9:
    gn_report_assertion_failure(v7);
  }
  return v6;
}

uint64_t Num_Prn_Idx_To_GNSS_Id(int a1)
{
  int Constell_Prn;
  int v3;
  int v4;
  uint64_t v5;
  const char *v6;

  Constell_Prn = Get_Constell_Prn(a1);
  if (!Constell_Prn)
  {
    v5 = 0;
    v6 = "NPrn_2_Id: 1";
    goto LABEL_7;
  }
  v3 = Prn_Offset[Constell_Prn] + a1;
  v4 = Num_Prn[Constell_Prn - 1];
  v5 = (v3 - v4);
  if (v3 - v4 < 0)
  {
    v5 = 0;
    v6 = "NPrn_2_Id: 2";
    goto LABEL_7;
  }
  if (v5 >= 0x100)
  {
    v5 = 255;
    v6 = "NPrn_2_Id: 3";
LABEL_7:
    gn_report_assertion_failure(v6);
  }
  return v5;
}

uint64_t GNSS_Id_To_Num_Pos_Idx(int a1)
{
  unsigned __int8 v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  const char *v7;

  v1 = a1;
  v2 = a1;
  v3 = BYTE2(a1);
  if (!BYTE2(a1))
    gn_report_assertion_failure("Id_2_NPos: 0");
  if ((v2 - 1) > 6)
  {
    v6 = 0;
    v7 = "Id_2_NPos: 1";
    goto LABEL_9;
  }
  v4 = v3 - Prn_Offset[v1];
  v5 = Num_Pos[v2 - 1];
  v6 = (v4 + v5);
  if (v4 + v5 < 0)
  {
    v6 = 0;
    v7 = "Id_2_NPos: 2";
    goto LABEL_9;
  }
  if (v6 >= 0xC5)
  {
    v6 = 196;
    v7 = "Id_2_NPos: 3";
LABEL_9:
    gn_report_assertion_failure(v7);
  }
  return v6;
}

uint64_t Num_Pos_Idx_To_GNSS_Id(int a1)
{
  int Constell_Pos;
  int v3;
  int v4;
  uint64_t v5;
  const char *v6;

  Constell_Pos = Get_Constell_Pos(a1);
  if (!Constell_Pos)
  {
    v5 = 0;
    v6 = "NPos_2_Id: 1";
    goto LABEL_7;
  }
  v3 = Prn_Offset[Constell_Pos] + a1;
  v4 = Num_Pos[Constell_Pos - 1];
  v5 = (v3 - v4);
  if (v3 - v4 < 0)
  {
    v5 = 0;
    v6 = "NPos_2_Id: 2";
    goto LABEL_7;
  }
  if (v5 >= 0x100)
  {
    v5 = 255;
    v6 = "NPos_2_Id: 3";
LABEL_7:
    gn_report_assertion_failure(v6);
  }
  return v5;
}

uint64_t GNSS_SVId_Constell_To_Num_Pos_Idx(int a1, int a2)
{
  int v2;
  int v3;
  uint64_t v4;
  const char *v5;

  if (a2 < 1)
  {
    v4 = 0;
    v5 = "Id&C_2_NPos: 1";
    goto LABEL_7;
  }
  v2 = a1 - Prn_Offset[a2];
  v3 = Num_Pos[a2 - 1];
  v4 = (v2 + v3);
  if (v2 + v3 < 0)
  {
    v4 = 0;
    v5 = "Id&C_2_NPos: 2";
    goto LABEL_7;
  }
  if (v4 >= 0xC5)
  {
    v4 = 196;
    v5 = "Id&C_2_NPos: 3";
LABEL_7:
    gn_report_assertion_failure(v5);
  }
  return v4;
}

uint64_t Num_Pos_Idx_To_Num_Prn_Idx(int a1)
{
  int Constell_Pos;
  int v3;
  int v4;
  uint64_t v5;
  const char *v6;

  Constell_Pos = Get_Constell_Pos(a1);
  if (!Constell_Pos)
  {
    v5 = 0;
    v6 = "NPos_2_NPrn: 1";
    goto LABEL_7;
  }
  v3 = a1 - Num_Pos[Constell_Pos - 1];
  v4 = Num_Prn[Constell_Pos - 1];
  v5 = (v3 + v4);
  if (v3 + v4 < 0)
  {
    v5 = 0;
    v6 = "NPos_2_NPrn: 2";
    goto LABEL_7;
  }
  if (v5 >= 0xDA)
  {
    v5 = 217;
    v6 = "NPos_2_NPrn: 3";
LABEL_7:
    gn_report_assertion_failure(v6);
  }
  return v5;
}

uint64_t Num_Prn_Idx_To_Num_Pos_Idx(int a1)
{
  int Constell_Prn;
  int v3;
  int v4;
  uint64_t v5;
  const char *v6;

  Constell_Prn = Get_Constell_Prn(a1);
  if (!Constell_Prn)
  {
    v5 = 0;
    v6 = "NPrn_2_NPos: 1";
    goto LABEL_7;
  }
  v3 = a1 - Num_Prn[Constell_Prn - 1];
  v4 = Num_Pos[Constell_Prn - 1];
  v5 = (v3 + v4);
  if (v3 + v4 < 0)
  {
    v5 = 0;
    v6 = "NPrn_2_NPos: 2";
    goto LABEL_7;
  }
  if (v5 >= 0xC5)
  {
    v5 = 196;
    v6 = "NPrn_2_NPos: 3";
LABEL_7:
    gn_report_assertion_failure(v6);
  }
  return v5;
}

char **STEU_Encode(char **a1, char a2, unsigned __int8 *a3, unint64_t *a4)
{
  _BYTE *v5;
  int v6;
  char *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  unsigned __int8 v13;
  uint64_t v14;
  _BYTE v16[5];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v5 = (_BYTE *)*a4;
  v6 = (*(_DWORD *)a4 - (int)a3) % 3;
  if (v6)
  {
    if (v6 == 1)
    {
      *v5 = 0;
      v5 = (_BYTE *)(*a4 + 1);
      *a4 = (unint64_t)v5;
    }
    *v5 = 0;
    ++*a4;
  }
  v7 = (*a1)++;
  *v7 = 123;
  v8 = *a1;
  if (*a1 >= a1[3])
    v8 = a1[2];
  *a1 = v8 + 1;
  *v8 = a2;
  v9 = *a1;
  if (*a1 >= a1[3])
  {
    v9 = a1[2];
    *a1 = v9;
  }
  v16[4] = 0;
  v10 = *a4;
  do
  {
    v11 = *a3;
    v12 = (v11 >> 2) + 48;
    v13 = a3[1];
    v16[1] = ((v13 >> 4) & 0xCF | (16 * (v11 & 3))) + 48;
    LOBYTE(v11) = a3[2];
    v16[2] = ((v11 >> 6) & 0xC3 | (4 * (v13 & 0xF))) + 48;
    v16[3] = (v11 & 0x3F) + 48;
    v14 = 1;
    do
    {
      *a1 = v9 + 1;
      *v9 = v12;
      v9 = *a1;
      if (*a1 >= a1[3])
      {
        v9 = a1[2];
        *a1 = v9;
      }
      v12 = v16[v14++];
    }
    while (v12);
    a3 += 3;
  }
  while ((unint64_t)a3 < v10);
  *a4 = (unint64_t)a3;
  return STEU_Add_Checksum_LF((uint64_t)a1, v8);
}

char **STEU_Add_Checksum_LF(uint64_t a1, char *a2)
{
  char *v3;
  unsigned __int8 v4;
  char v5;
  char v6;
  unint64_t v7;
  char **result;
  _BYTE *v9;

  v3 = *(char **)a1;
  if (*(char **)a1 == a2)
  {
    v7 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v6 = *a2++;
      v5 = v6;
      if ((unint64_t)a2 >= *(_QWORD *)(a1 + 24))
        a2 = *(char **)(a1 + 16);
      v4 += v5;
    }
    while (a2 != v3);
    v7 = v4;
  }
  *(_QWORD *)a1 = v3 + 1;
  *v3 = 125;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 24))
    *(_QWORD *)a1 = *(_QWORD *)(a1 + 16);
  result = sprintf_02x((char **)a1, v7);
  v9 = (_BYTE *)(*(_QWORD *)a1)++;
  *v9 = 10;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 24))
    *(_QWORD *)a1 = *(_QWORD *)(a1 + 16);
  return result;
}

char **STEU_Encode_c(char **a1, char a2, int a3, unsigned __int8 *a4)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  int v11;
  unsigned __int8 v12;
  uint64_t v13;
  _BYTE v15[5];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = (*a1)++;
  *v5 = 123;
  v6 = *a1;
  if (*a1 >= a1[3])
    v6 = a1[2];
  *a1 = v6 + 1;
  *v6 = 99;
  v7 = *a1;
  if (*a1 >= a1[3])
    v7 = a1[2];
  *a1 = v7 + 1;
  *v7 = a2;
  v8 = *a1;
  if (*a1 >= a1[3])
  {
    v8 = a1[2];
    *a1 = v8;
  }
  v15[4] = 0;
  v9 = &a4[a3];
  do
  {
    v10 = *a4;
    v11 = (v10 >> 2) + 48;
    v12 = a4[1];
    v15[1] = ((v12 >> 4) & 0xCF | (16 * (v10 & 3))) + 48;
    LOBYTE(v10) = a4[2];
    v15[2] = ((v10 >> 6) & 0xC3 | (4 * (v12 & 0xF))) + 48;
    v15[3] = (v10 & 0x3F) + 48;
    v13 = 1;
    do
    {
      *a1 = v8 + 1;
      *v8 = v11;
      v8 = *a1;
      if (*a1 >= a1[3])
      {
        v8 = a1[2];
        *a1 = v8;
      }
      v11 = v15[v13++];
    }
    while (v11);
    a4 += 3;
  }
  while (a4 < v9);
  return STEU_Add_Checksum_LF((uint64_t)a1, v6);
}

_QWORD *GNSS_Write_NMEA(_QWORD *result)
{
  _QWORD *v1;
  char *v2;
  char *v3;
  unsigned __int16 v4;
  unsigned int v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;

  if (result)
  {
    v1 = result;
    v3 = (char *)*result;
    v2 = (char *)result[1];
    if (v2 != (char *)*result)
    {
      if ((unint64_t)v2 > *result)
        v3 = (char *)result[3];
      v4 = (_WORD)v3 - (_WORD)v2;
      result = (_QWORD *)GN_GPS_Write_NMEA((unsigned __int16)((_WORD)v3 - (_WORD)v2), v2);
      v5 = result;
      if (g_Logging_Cfg >= 7)
        result = (_QWORD *)GN_GPS_Write_Nav_Debug((uint64_t)result, (char *)v1[1]);
      v6 = (char *)(v1[1] + v5);
      v1[1] = v6;
      if ((unint64_t)v6 >= v1[3])
      {
        v6 = (char *)v1[2];
        v1[1] = v6;
        if (v5 == v4)
        {
          result = (_QWORD *)GN_GPS_Write_NMEA((unsigned __int16)(*(_WORD *)v1 - (_WORD)v6), v6);
          v7 = result;
          if (g_Logging_Cfg >= 8)
            result = (_QWORD *)GN_GPS_Write_Nav_Debug((uint64_t)result, (char *)v1[1]);
          v6 = (char *)(v1[1] + v7);
          v1[1] = v6;
        }
      }
      if (v6 == (char *)*v1)
      {
        v8 = v1[2];
        *v1 = v8;
        v1[1] = v8;
      }
    }
  }
  return result;
}

char **NMEA_Encode(char **result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  double v16;
  double v17;
  double v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  char v22;
  char *v23;
  char v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  unsigned int v29;
  char *v30;
  char v31;
  uint64_t v32;
  _BYTE *v33;
  char *v34;
  char v35;
  uint64_t v36;
  char *v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  char v41;
  const char *v42;
  char v43;
  char *v44;
  unsigned __int8 *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  int v62;
  unsigned int v63;
  char v64;
  char v65;
  char v66;
  const char *v67;
  unsigned int i;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  _BYTE *v75;
  char *v76;
  char *v77;
  const char *v78;
  char v79;
  int v80;
  uint64_t v81;
  char v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  _BYTE *v90;
  int v91;
  unsigned int j;
  _BYTE *v94;
  _BYTE *v95;
  char *v96;
  _BYTE *v97;
  _BYTE *v98;
  char *v99;
  uint64_t v100;
  char v101;
  char *v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  double v106;
  _BYTE *v107;
  _BYTE *v108;
  _BYTE *v109;
  int v110;
  unsigned int v111;
  _BYTE *v112;
  _BYTE *v113;
  _BYTE *v114;
  uint64_t v115;
  uint64_t v116;
  int *v117;
  int v118;
  int v119;
  const char *v120;
  uint64_t v121;
  signed int v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  _BYTE *v127;
  char *v128;
  char *v129;
  const char *v130;
  char v131;
  int v132;
  uint64_t v133;
  char v134;
  _BYTE *v135;
  _BYTE *v136;
  uint64_t v137;
  int v138;
  int v139;
  int k;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  unsigned int v144;
  _BYTE *v145;
  char *v146;
  double v147;
  char *v148;
  char **v149;
  double v150;
  double v151;
  double v152;
  unsigned int v153;
  _BYTE *v154;
  double v155;
  double v156;
  double v157;
  unsigned int v158;
  double v159;
  double v160;
  double v161;
  double v162;
  unsigned int v163;
  _BYTE *v164;
  char *v165;
  char v166;
  _BYTE *v167;
  char *v168;
  char v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  int v173;
  char v174;
  char *v175;
  char *v176;
  double v177;
  double v178;
  double v179;
  unsigned int v180;
  uint64_t v181;
  char *v182;
  char v183;
  _BYTE *v184;
  double v185;
  double v186;
  double v187;
  unsigned int v188;
  _BYTE *v189;
  char *v190;
  char *v191;
  char *v192;
  unint64_t v193;
  char *v194;
  uint64_t v195;
  char v196;
  _BYTE *v197;
  char *v198;
  char v199;
  uint64_t v200;
  char *v201;
  int v202;
  BOOL v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  double v207;
  double v208;
  double v209;
  unsigned int v210;
  char *v211;
  char v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  double v216;
  double v217;
  double v218;
  unsigned int v219;
  char *v220;
  char v221;
  uint64_t v222;
  double v223;
  double v224;
  double v225;
  unsigned int v226;
  char *v227;
  char v228;
  uint64_t v229;
  int v230;
  char v231;
  _BYTE *v232;
  char *v233;
  uint64_t v234;
  char v235;
  char *v236;
  uint64_t v237;
  char v238;
  unsigned int v239;
  unsigned int v240;
  _BYTE *v241;
  uint64_t v242;
  char *v243;
  char v244;
  _BYTE *v245;
  char *v246;
  uint64_t v247;
  char v248;
  char *v249;
  uint64_t v250;
  char v251;
  _BYTE *v252;
  _BYTE *v253;
  char *v254;
  uint64_t v255;
  char v256;
  uint64_t v257;
  char v258;
  _BYTE *v259;
  char *v260;
  char v261;
  uint64_t v262;
  char *v263;
  int v264;
  unsigned int v265;
  _BYTE *v266;
  char *v267;
  int v268;
  unsigned int v269;
  _BYTE *v270;
  _BYTE *v271;
  _BYTE *v272;
  _BYTE *v273;
  _BYTE *v274;
  int v275;
  unsigned int v276;
  _BYTE *v277;
  _BYTE *v278;
  _BYTE *v279;
  _BYTE *v280;
  _BYTE *v281;
  _BYTE *v282;
  _BYTE *v283;
  _BYTE *v284;
  double v285;
  double v286;
  double v287;
  unsigned int v288;
  char v289;
  uint64_t v290;
  _BYTE *v291;
  int v292;
  unsigned int v293;
  _BYTE *v294;
  int v295;
  unsigned int v296;
  _BYTE *v297;
  char *v298;
  uint64_t v299;
  char v300;
  unint64_t v301;
  _BYTE *v302;
  char *v303;
  uint64_t v304;
  char v305;
  _BYTE *v306;
  int v307;
  unsigned int v308;
  _BYTE *v309;
  char *v310;
  char v311;
  uint64_t v312;
  char *v313;
  char *v314;
  char *v315;
  _BYTE *v316;
  _BYTE *v317;
  _BYTE *v318;
  _BYTE *v319;
  _BYTE *v320;
  char v321;
  uint64_t v322;
  char *v323;
  _BYTE *v324;
  _BYTE *v325;
  _BYTE *v326;
  _BYTE *v327;
  _BYTE *v328;
  char v329;
  uint64_t v330;
  char *v331;
  _BYTE *v332;
  _BYTE *v333;
  _BYTE *v334;
  _BYTE *v335;
  char v336;
  uint64_t v337;
  _BYTE *v338;
  char *v339;
  char v340;
  uint64_t v341;
  char *v342;
  char *v343;
  char *v344;
  _BYTE *v345;
  _BYTE *v346;
  _BYTE *v347;
  double v348;
  double v349;
  double v350;
  unsigned int v351;
  char v352;
  uint64_t v353;
  _BYTE *v354;
  double v355;
  double v356;
  double v357;
  unsigned int v358;
  _BYTE *v359;
  _BYTE *v360;
  char *v361;
  char v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  char *v366;
  char v367;
  _BYTE *v368;
  _BYTE *v369;
  char *v370;
  _BYTE *v371;
  _BYTE *v372;
  _BYTE *v373;
  _BYTE *v374;
  _BYTE *v375;
  _BYTE *v376;
  _BYTE *v377;
  int v378;
  unsigned int v379;
  _BYTE *v380;
  _BYTE *v381;
  _BYTE *v382;
  _BYTE *v383;
  _BYTE *v384;
  _BYTE *v385;
  char *v386;
  uint64_t v387;
  char v388;
  _BYTE *v389;
  _BYTE *v390;
  _BYTE *v391;
  _BYTE *v392;
  _BYTE *v393;
  _BYTE *v394;
  _BYTE *v395;
  _BYTE *v396;
  double v397;
  double v398;
  double v399;
  unsigned int v400;
  _BYTE *v401;
  double v402;
  double v403;
  double v404;
  unsigned int v405;
  _BYTE *v406;
  double v407;
  double v408;
  double v409;
  unsigned int v410;
  _BYTE *v411;
  double v412;
  double v413;
  double v414;
  unsigned int v415;
  _BYTE *v416;
  _BYTE *v417;
  _BYTE *v418;
  _BYTE *v419;
  _BYTE *v420;
  _BYTE *v421;
  _BYTE *v422;
  _BYTE *v423;
  _BYTE *v424;
  char *v425;
  char v426;
  uint64_t v427;
  char *v428;
  uint64_t v429;
  char *v430;
  char v431;
  int v432;
  unsigned int v433;
  _BYTE *v434;
  _BYTE *v435;
  _BYTE *v436;
  _BYTE *v437;
  uint64_t m;
  _BYTE *v439;
  _BYTE *v440;
  double v441;
  double v442;
  double v443;
  unsigned int v444;
  _BYTE *v445;
  _BYTE *v446;
  _BYTE *v447;
  _BYTE *v448;
  _BYTE *v449;
  _BYTE *v450;
  char *v451;
  char v452;
  uint64_t v453;
  char *v454;
  char *v455;
  char *v456;
  _BYTE *v457;
  _BYTE *v458;
  _BYTE *v459;
  _BYTE *v460;
  double v461;
  double v462;
  double v463;
  unsigned int v464;
  char v465;
  uint64_t v466;
  _BYTE *v467;
  double v468;
  double v469;
  double v470;
  unsigned int v471;
  _BYTE *v472;
  double v473;
  double v474;
  double v475;
  unsigned int v476;
  _BYTE *v477;
  _BYTE *v478;
  _BYTE *v479;
  _BYTE *v480;
  _BYTE *v481;
  _BYTE *v482;
  _BYTE *v483;
  _BYTE *v484;
  _BYTE *v485;
  char *v486;
  char v487;
  uint64_t v488;
  char *v489;
  char *v490;
  char *v491;
  _BYTE *v492;
  _BYTE *v493;
  _BYTE *v494;
  _BYTE *v495;
  _BYTE *v496;
  _BYTE *v497;
  double v498;
  double v499;
  double v500;
  unsigned int v501;
  char v502;
  uint64_t v503;
  _BYTE *v504;
  double v505;
  double v506;
  double v507;
  unsigned int v508;
  _BYTE *v509;
  double v510;
  double v511;
  double v512;
  unsigned int v513;
  _BYTE *v514;
  int v515;
  unsigned int v516;
  _BYTE *v517;
  int v518;
  unsigned int v519;
  _BYTE *v520;
  _BYTE *v521;
  _BYTE *v522;
  _BYTE *v523;
  char *v524;
  char v525;
  uint64_t v526;
  char *v527;
  char *v528;
  char *v529;
  _BYTE *v530;
  _BYTE *v531;
  uint64_t v532;
  char v533;
  _BYTE *v534;
  char *v535;
  char v536;
  uint64_t v537;
  char *v538;
  char *v539;
  char *v540;
  _BYTE *v541;
  _BYTE *v542;
  int v543;
  unsigned int v544;
  _BYTE *v545;
  double v546;
  double v547;
  double v548;
  unsigned int v549;
  char v550;
  uint64_t v551;
  _BYTE *v552;
  double v553;
  double v554;
  double v555;
  unsigned int v556;
  _BYTE *v557;
  char *v558;
  char v559;
  uint64_t v560;
  char *v561;
  _BYTE *v562;
  _BYTE *v563;
  char *v564;
  int v565;
  unsigned int v566;
  _BYTE *v567;
  double v568;
  double v569;
  double v570;
  unsigned int v571;
  uint64_t v572;
  char v573;
  _BYTE *v574;
  double v575;
  double v576;
  double v577;
  unsigned int v578;
  _BYTE *v579;
  _BYTE *v580;
  int v581;
  unsigned int v582;
  _BYTE *v583;
  _BYTE *v584;
  uint64_t v585;
  char v586;
  _BYTE *v587;
  _BYTE *v588;
  double v589;
  double v590;
  double v591;
  unsigned int v592;
  _BYTE *v593;
  int v594;
  unsigned int v595;
  _BYTE *v596;
  _BYTE *v597;
  double v598;
  double v599;
  double v600;
  unsigned int v601;
  _BYTE *v602;
  int v603;
  unsigned int v604;
  _BYTE *v605;
  int v606;
  unsigned int v607;
  _BYTE *v608;
  char *v609;
  int v610;
  unsigned int v611;
  _BYTE *v612;
  int v613;
  unsigned int v614;
  _BYTE *v615;
  int v616;
  unsigned int v617;
  _BYTE *v618;
  int v619;
  unsigned int v620;
  _BYTE *v621;
  int v622;
  unsigned int v623;
  _BYTE *v624;
  int v625;
  unsigned int v626;
  _BYTE *v627;
  char v628;
  uint64_t v629;
  int v630;
  unsigned int v631;
  char *v632;
  int v633;
  unsigned int v634;
  char *v635;
  int v636;
  unsigned int v637;
  char *v638;
  int v639;
  unsigned int v640;
  char *v641;
  int v642;
  unsigned int v643;
  char *v644;
  int v645;
  unsigned int v646;
  char *v647;
  unint64_t v648;
  _BYTE *v649;
  char *v650;
  char v651;
  uint64_t v652;
  char *v653;
  char *v654;
  char *v655;
  _BYTE *v656;
  _BYTE *v657;
  double v658;
  double v659;
  double v660;
  unsigned int v661;
  char v662;
  uint64_t v663;
  _BYTE *v664;
  double v665;
  double v666;
  double v667;
  unsigned int v668;
  _BYTE *v669;
  char *v670;
  _BYTE *v671;
  _BYTE *v672;
  double v673;
  double v674;
  double v675;
  unsigned int v676;
  char v677;
  uint64_t v678;
  _BYTE *v679;
  double v680;
  double v681;
  double v682;
  unsigned int v683;
  _BYTE *v684;
  char *v685;
  _BYTE *v686;
  _BYTE *v687;
  double v688;
  double v689;
  double v690;
  unsigned int v691;
  char v692;
  uint64_t v693;
  _BYTE *v694;
  double v695;
  double v696;
  double v697;
  unsigned int v698;
  _BYTE *v699;
  _BYTE *v700;
  char *v701;
  char v702;
  uint64_t v703;
  char *v704;
  double v705;
  double v706;
  double v707;
  unsigned int v708;
  _BYTE *v709;
  double v710;
  double v711;
  double v712;
  unsigned int v713;
  _BYTE *v714;
  double v715;
  double v716;
  double v717;
  unsigned int v718;
  _BYTE *v719;
  double v720;
  double v721;
  double v722;
  unsigned int v723;
  _BYTE *v724;
  double v725;
  double v726;
  double v727;
  unsigned int v728;
  _BYTE *v729;
  double v730;
  double v731;
  double v732;
  unsigned int v733;
  _BYTE *v734;
  double v735;
  double v736;
  double v737;
  unsigned int v738;
  _BYTE *v739;
  double v740;
  double v741;
  double v742;
  unsigned int v743;
  _BYTE *v744;
  double v745;
  double v746;
  double v747;
  unsigned int v748;
  _BYTE *v749;
  double v750;
  double v751;
  double v752;
  unsigned int v753;
  _BYTE *v754;
  double v755;
  double v756;
  double v757;
  unsigned int v758;
  _BYTE *v759;
  double v760;
  double v761;
  double v762;
  unsigned int v763;
  _BYTE *v764;
  double v765;
  double v766;
  double v767;
  unsigned int v768;
  _BYTE *v769;
  double v770;
  double v771;
  double v772;
  unsigned int v773;
  _BYTE *v774;
  double v775;
  double v776;
  double v777;
  unsigned int v778;
  _BYTE *v779;
  double v780;
  double v781;
  double v782;
  unsigned int v783;
  _BYTE *v784;
  _BYTE *v785;
  double v786;
  double v787;
  double v788;
  unsigned int v789;
  _BYTE *v790;
  double v791;
  double v792;
  double v793;
  unsigned int v794;
  _BYTE *v795;
  double v796;
  double v797;
  double v798;
  unsigned int v799;
  _BYTE *v800;
  double v801;
  double v802;
  double v803;
  unsigned int v804;
  _BYTE *v805;
  double v806;
  double v807;
  double v808;
  unsigned int v809;
  _BYTE *v810;
  _BYTE *v811;
  double v812;
  double v813;
  double v814;
  unsigned int v815;
  _BYTE *v816;
  _BYTE *v817;
  char *v818;
  char v819;
  uint64_t v820;
  char *v821;
  char v822;
  char *v823;
  unsigned __int8 *v824;
  int v825;
  _BYTE *v826;
  unint64_t v827;
  _BYTE *v828;
  _BYTE *v829;
  _BYTE *v830;
  _BYTE *v831;
  _BYTE *v832;
  _BYTE *v833;
  _BYTE *v834;
  char *v835;
  char v836;
  char *v837;
  char *v838;
  char v839;
  unsigned __int8 *v840;
  int v841;
  int v842;
  unsigned int v843;
  _BYTE *v844;
  int v845;
  unsigned int v846;
  _BYTE *v847;
  _BYTE *v848;
  _BYTE *v849;
  char *v850;
  uint64_t v851;
  char v852;
  _BYTE *v853;
  char *v854;
  uint64_t v855;
  char v856;
  _BYTE *v857;
  _BYTE *v858;
  _BYTE *v859;
  int v860;
  unsigned int v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  _BYTE *v865;
  int v866;
  unsigned int v867;
  uint64_t v868;
  int v869;
  int v870;
  int v871;
  int v872;
  int v873;
  const char *v874;
  char v875;
  int v876;
  uint64_t v877;
  char v878;
  uint64_t v879;
  int v880;
  const char *v881;
  char v882;
  unsigned int v883;
  _BOOL4 v884;
  signed int v885;
  int v886;
  int v887;
  char v888;
  char *v889;
  char **v890;
  uint64_t v892;
  int v893;
  uint64_t v894;
  int v895;
  uint64_t v896;
  int v897;
  uint64_t v898;
  int v899;
  uint64_t v900;
  int v901;
  uint64_t v902;
  int v903;
  _WORD v904[7];
  uint64_t v905;

  v905 = *MEMORY[0x24BDAC8D0];
  if (!result || !a2)
    return result;
  v4 = (uint64_t)result;
  v5 = (*result)++;
  *v5 = 36;
  v6 = *result;
  if (*result >= result[3])
    v6 = result[2];
  v890 = result + 2;
  v7 = 71;
  v8 = 1u;
  v9 = v6;
  do
  {
    *result = v9 + 1;
    *v9 = v7;
    v9 = *result;
    if (*result >= result[3])
    {
      v9 = result[2];
      *result = v9;
    }
    v7 = aGpgga[v8++];
  }
  while (v8 != 7);
  sprintf_HHMMSS(result, a2);
  if (*(_BYTE *)(a2 + 326) && (v10 = *(_DWORD *)(a2 + 304)) != 0)
  {
    sprintf_LatLon((char **)v4, *(double *)(a2 + 104), *(double *)(a2 + 112));
    v11 = 0x323132313630uLL >> (8 * v10);
    if (v10 >= 6)
      LOBYTE(v11) = 48;
    v12 = (_BYTE *)(*(_QWORD *)v4)++;
    *v12 = v11;
    v13 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v13 = *v890;
    *(_QWORD *)v4 = v13 + 1;
    *v13 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(a2 + 328), v904, 0, 0);
    v14 = (_BYTE *)(*(_QWORD *)v4)++;
    *v14 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_DOP(v4, *(double *)(a2 + 272));
    v15 = (_BYTE *)(*(_QWORD *)v4)++;
    *v15 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v16 = *(double *)(a2 + 128) * 1000.0;
    v17 = -0.5;
    if (v16 > 0.0)
      v17 = 0.5;
    v18 = v16 + v17;
    if (v18 <= 2147483650.0)
    {
      if (v18 >= -2147483650.0)
        v19 = (int)v18;
      else
        v19 = 0x80000000;
    }
    else
    {
      v19 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v19, 4);
    v23 = *(char **)v4;
    v24 = 44;
    v25 = 1u;
    do
    {
      *(_QWORD *)v4 = v23 + 1;
      *v23 = v24;
      v23 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v23 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v23;
      }
      v24 = aM_0[v25++];
    }
    while (v25 != 4);
    v26 = (*(double *)(a2 + 120) - *(double *)(a2 + 128)) * 1000.0;
    v27 = -0.5;
    if (v26 > 0.0)
      v27 = 0.5;
    v28 = v26 + v27;
    if (v28 <= 2147483650.0)
    {
      if (v28 >= -2147483650.0)
        v29 = (int)v28;
      else
        v29 = 0x80000000;
    }
    else
    {
      v29 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v29, 4);
    v30 = *(char **)v4;
    v31 = 44;
    v32 = 1u;
    do
    {
      *(_QWORD *)v4 = v30 + 1;
      *v30 = v31;
      v30 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v30 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v30;
      }
      v31 = aM_0[v32++];
    }
    while (v32 != 4);
    *(_QWORD *)v4 = v30 + 1;
    *v30 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
  }
  else
  {
    v20 = 0;
    v21 = *(char **)v4;
    v22 = 44;
    do
    {
      *(_QWORD *)v4 = v21 + 1;
      *v21 = v22;
      v21 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v21 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v21;
      }
      v22 = a00MM[++v20];
    }
    while (v20 != 16);
  }
  NMEA_Add_checksum(v4, v6);
  v33 = (_BYTE *)(*(_QWORD *)v4)++;
  *v33 = 36;
  v34 = *(char **)v4;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    v34 = *v890;
  v35 = 71;
  v36 = 1u;
  v37 = v34;
  do
  {
    *(_QWORD *)v4 = v37 + 1;
    *v37 = v35;
    v37 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v37 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v37;
    }
    v35 = aGpgll[v36++];
  }
  while (v36 != 7);
  v38 = *(_DWORD *)(a2 + 304);
  if (*(_BYTE *)(a2 + 326))
    v39 = v38 == 0;
  else
    v39 = 1;
  if (v39)
  {
    v40 = 0;
    v41 = 44;
    do
    {
      *(_QWORD *)v4 = v37 + 1;
      *v37 = v41;
      v37 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v37 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v37;
      }
      v41 = asc_24BBF3856[++v40];
    }
    while (v40 != 4);
    sprintf_HHMMSS((_QWORD *)v4, a2);
    goto LABEL_68;
  }
  sprintf_LatLon((char **)v4, *(double *)(a2 + 104), *(double *)(a2 + 112));
  sprintf_HHMMSS((_QWORD *)v4, a2);
  if ((v38 - 1) > 4)
  {
LABEL_68:
    v42 = "V,N";
    goto LABEL_69;
  }
  v42 = off_251CDBA80[v38 - 1];
LABEL_69:
  v43 = *v42;
  if (*v42)
  {
    v44 = *(char **)v4;
    v45 = (unsigned __int8 *)(v42 + 1);
    do
    {
      *(_QWORD *)v4 = v44 + 1;
      *v44 = v43;
      v44 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v44 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v44;
      }
      v46 = *v45++;
      v43 = v46;
    }
    while (v46);
  }
  NMEA_Add_checksum(v4, v34);
  v903 = 0;
  v902 = 0;
  v901 = 0;
  v900 = 0;
  v899 = 0;
  v898 = 0;
  v897 = 0;
  v896 = 0;
  v895 = 0;
  v894 = 0;
  v893 = 0;
  v892 = 0;
  v47 = *(unsigned __int8 *)(a2 + 327);
  if (*(_BYTE *)(a2 + 327))
  {
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    do
    {
      if (*(_BYTE *)(a2 + 6096 + v48)
        && (v57 = *(unsigned __int8 *)(a2 + v48 + 1740), *(_BYTE *)(a2 + v48 + 1740))
        && ((v58 = *(_DWORD *)(a2 + 4 * v48 + 332), (_DWORD)v57 == (_DWORD)v50) ? (v59 = v58 == v49) : (v59 = 0), !v59))
      {
        switch(v58)
        {
          case 1:
            if (v56 <= 11)
              *((_BYTE *)&v902 + v56++) = v57;
            v49 = 1;
            break;
          case 2:
            if (v55 <= 11)
              *((_BYTE *)&v900 + v55++) = v57;
            v49 = 2;
            break;
          case 3:
            if (v54 <= 11)
              *((_BYTE *)&v898 + v54++) = v57;
            v49 = 3;
            break;
          case 4:
            if (v53 <= 11)
              *((_BYTE *)&v896 + v53++) = v57;
            v49 = 4;
            break;
          case 5:
            if (v52 <= 11)
              *((_BYTE *)&v894 + v52++) = v57;
            v49 = 5;
            break;
          case 6:
            if (v51 <= 11)
              *((_BYTE *)&v892 + v51++) = v57;
            v49 = 6;
            break;
          default:
            v49 = *(_DWORD *)(a2 + 4 * v48 + 332);
            break;
        }
      }
      else
      {
        v57 = v50;
      }
      ++v48;
      v50 = v57;
    }
    while (v47 != v48);
  }
  else
  {
    v56 = 0;
    v55 = 0;
    v54 = 0;
    v53 = 0;
    v52 = 0;
    v51 = 0;
  }
  v869 = v51;
  v870 = v52;
  v871 = v53;
  v872 = v54;
  v868 = a3;
  v882 = 0;
  v60 = a2;
  if (*(_BYTE *)(a2 + 324) == 1)
    v61 = 77;
  else
    v61 = 65;
  v878 = v61;
  v62 = *(_DWORD *)(a2 + 304);
  if (!*(_BYTE *)(a2 + 326))
    v62 = 0;
  v876 = v62;
  v63 = v62 & 0xFFFFFFFE;
  if (v63 == 2)
    v64 = 50;
  else
    v64 = 49;
  if (v63 == 4)
    v65 = 51;
  else
    v65 = v64;
  v875 = v65;
  v884 = v56 > 0;
  v66 = 1;
  v873 = v56;
  v880 = v55;
  do
  {
    v888 = v66;
    v39 = (v66 & 1) == 0;
    v67 = "GN";
    if (!v39)
      v67 = "GP";
    v886 = *(unsigned __int8 *)v67;
    v874 = v67 + 1;
    for (i = 1; i != 7; ++i)
    {
      if ((v888 & (i != 1)) == 0)
      {
        v69 = (unsigned __int8 *)&v900;
        v70 = (unsigned __int8 *)&v902;
        v71 = i;
        v72 = v55;
        v73 = v884;
        v74 = v56;
        switch(v55)
        {
          case 0:
            goto LABEL_130;
          case 1:
            goto LABEL_128;
          case 2:
            v69 = (unsigned __int8 *)&v894;
            v71 = 5;
            v72 = v870;
            goto LABEL_128;
          case 3:
            v69 = (unsigned __int8 *)&v896;
            v71 = i;
            v72 = v871;
            goto LABEL_128;
          case 4:
            v69 = (unsigned __int8 *)&v898;
            v71 = 3;
            v72 = v872;
            goto LABEL_128;
          case 5:
            v69 = (unsigned __int8 *)&v892;
            v71 = i;
            v72 = v869;
LABEL_128:
            if (v72 >= 1)
            {
              v73 = 1;
              v70 = v69;
              v74 = v72;
LABEL_130:
              v75 = (_BYTE *)(*(_QWORD *)v4)++;
              *v75 = 36;
              v76 = *(char **)v4;
              if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
                v76 = *v890;
              v77 = v76;
              if (v886)
              {
                v78 = v874;
                v77 = v76;
                v79 = v886;
                do
                {
                  *(_QWORD *)v4 = v77 + 1;
                  *v77 = v79;
                  v77 = *(char **)v4;
                  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
                  {
                    v77 = *(char **)(v4 + 16);
                    *(_QWORD *)v4 = v77;
                  }
                  v80 = *(unsigned __int8 *)v78++;
                  v79 = v80;
                }
                while (v80);
              }
              v81 = 0;
              v82 = 71;
              do
              {
                *(_QWORD *)v4 = v77 + 1;
                *v77 = v82;
                v77 = *(char **)v4;
                if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
                {
                  v77 = *(char **)(v4 + 16);
                  *(_QWORD *)v4 = v77;
                }
                v82 = aGsa[++v81];
              }
              while (v81 != 4);
              *(_QWORD *)v4 = v77 + 1;
              *v77 = v878;
              v83 = *(char **)v4;
              if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
                v83 = *v890;
              *(_QWORD *)v4 = v83 + 1;
              *v83 = 44;
              v84 = *(char **)v4;
              if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
                v84 = *v890;
              *(_QWORD *)v4 = v84 + 1;
              *v84 = v875;
              v85 = *(char **)v4;
              if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
                v85 = *v890;
              *(_QWORD *)v4 = v85 + 1;
              *v85 = 44;
              v86 = *(char **)v4;
              if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
              {
                v86 = *(char **)(v4 + 16);
                *(_QWORD *)v4 = v86;
              }
              if (v876)
              {
                if (v74 <= 0)
                  goto LABEL_161;
                v87 = v74;
                do
                {
                  v89 = *v70++;
                  v88 = v89;
                  if (v89)
                  {
                    switch(v71)
                    {
                      case 1:
                      case 4:
                      case 5:
                      case 6:
                        break;
                      case 2:
                        v88 += 64;
                        break;
                      case 3:
                        v88 -= 192;
                        break;
                      default:
                        v88 = 0;
                        break;
                    }
                    sprintf_02d((_QWORD *)v4, v88);
                    v90 = (_BYTE *)(*(_QWORD *)v4)++;
                    *v90 = 44;
                    v86 = *(char **)v4;
                    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
                    {
                      v86 = *(char **)(v4 + 16);
                      *(_QWORD *)v4 = v86;
                    }
                  }
                  --v87;
                }
                while (v87);
                v60 = a2;
                v56 = v873;
                if (v74 < 12)
                {
LABEL_161:
                  v91 = v74 - 12;
                  do
                  {
                    *(_QWORD *)v4 = v86 + 1;
                    *v86 = 44;
                    v86 = *(char **)v4;
                    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
                    {
                      v86 = *(char **)(v4 + 16);
                      *(_QWORD *)v4 = v86;
                    }
                  }
                  while (!__CFADD__(v91++, 1));
                }
              }
              else
              {
                for (j = 15; j > 1; --j)
                {
                  *(_QWORD *)v4 = v86 + 1;
                  *v86 = 44;
                  v86 = *(char **)v4;
                  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
                  {
                    v86 = *(char **)(v4 + 16);
                    *(_QWORD *)v4 = v86;
                  }
                }
              }
              if (v73 && *(double *)(v60 + 272) < 99.99)
              {
                sprintf_DOP(v4, *(double *)(v60 + 288));
                v94 = (_BYTE *)(*(_QWORD *)v4)++;
                *v94 = 44;
                if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
                  *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
                sprintf_DOP(v4, *(double *)(a2 + 272));
                v95 = (_BYTE *)(*(_QWORD *)v4)++;
                *v95 = 44;
                if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
                  *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
                sprintf_DOP(v4, *(double *)(a2 + 280));
              }
              else
              {
                *(_QWORD *)v4 = v86 + 1;
                *v86 = 44;
                v96 = *(char **)v4;
                if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
                  v96 = *v890;
                *(_QWORD *)v4 = v96 + 1;
                *v96 = 44;
                if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
                  *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
              }
              if ((v882 & 1) != 0)
              {
                v97 = (_BYTE *)(*(_QWORD *)v4)++;
                *v97 = 44;
                if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
                  *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
                sprintf1da((_QWORD *)v4, i, v904, 0, 0);
              }
              NMEA_Add_checksum(v4, v76);
              v60 = a2;
              v55 = v880;
            }
            break;
          default:
            EvCrt_Illegal_switch_default("NMEA_Encode_GSA", 0x279u);
            v60 = a2;
            break;
        }
      }
    }
    v66 = 0;
    v882 = 1;
  }
  while ((v888 & 1) != 0);
  v98 = (_BYTE *)(*(_QWORD *)v4)++;
  *v98 = 36;
  v99 = *(char **)v4;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    v99 = *v890;
  v100 = 0;
  v101 = 71;
  v102 = v99;
  do
  {
    *(_QWORD *)v4 = v102 + 1;
    *v102 = v101;
    v102 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v102 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v102;
    }
    v101 = aGn[++v100];
  }
  while (v100 != 2);
  v103 = 0;
  v104 = 71;
  do
  {
    *(_QWORD *)v4 = v102 + 1;
    *v102 = v104;
    v102 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v102 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v102;
    }
    v104 = aGst[++v103];
  }
  while (v103 != 4);
  sprintf_HHMMSS((_QWORD *)v4, a2);
  v105 = a2;
  if (*(_BYTE *)(a2 + 328))
  {
    v106 = *(double *)(a2 + 256);
    if (v106 > 0.0)
    {
      sprintf_AccEst((_QWORD *)v4, v106);
      v105 = a2;
    }
  }
  v107 = (_BYTE *)(*(_QWORD *)v4)++;
  *v107 = 44;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
  sprintf_AccEst((_QWORD *)v4, *(double *)(v105 + 208));
  v108 = (_BYTE *)(*(_QWORD *)v4)++;
  *v108 = 44;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
  sprintf_AccEst((_QWORD *)v4, *(double *)(a2 + 216));
  v109 = (_BYTE *)(*(_QWORD *)v4)++;
  *v109 = 44;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
  v110 = (int)*(double *)(a2 + 224);
  if (v110 >= 0)
    v111 = (int)*(double *)(a2 + 224);
  else
    v111 = -v110;
  sprintf1da((_QWORD *)v4, v111, v904, 0, v110 >> 31);
  v112 = (_BYTE *)(*(_QWORD *)v4)++;
  *v112 = 44;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
  sprintf_AccEst((_QWORD *)v4, *(double *)(a2 + 184));
  v113 = (_BYTE *)(*(_QWORD *)v4)++;
  *v113 = 44;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
  sprintf_AccEst((_QWORD *)v4, *(double *)(a2 + 192));
  v114 = (_BYTE *)(*(_QWORD *)v4)++;
  *v114 = 44;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
  sprintf_AccEst((_QWORD *)v4, *(double *)(a2 + 200));
  NMEA_Add_checksum(v4, v99);
  v115 = a2;
  v116 = 0;
  v877 = a2 + 1740;
  do
  {
    v117 = &NMEA_Encode_GSV(Cyc_buffer *,GN_GPS_Nav_Data const*)::GSV_Types[2 * v116];
    v118 = *v117;
    v119 = v117[1];
    v879 = v116;
    switch(*v117)
    {
      case 0:
        EvCrt_Illegal_switch_case("NMEA_Encode_GSV", 0x328u);
        v115 = a2;
        goto LABEL_329;
      case 1:
        v120 = "GP";
        goto LABEL_227;
      case 2:
        v120 = "GL";
        goto LABEL_227;
      case 3:
        v120 = "GQ";
        goto LABEL_227;
      case 4:
        v120 = "GB";
        goto LABEL_227;
      case 5:
        v120 = "GA";
        goto LABEL_227;
      case 6:
        v120 = "GI";
        goto LABEL_227;
      default:
        v120 = (const char *)&unk_24BBF04D5;
LABEL_227:
        if (!*(_BYTE *)(v115 + 327))
          goto LABEL_329;
        v121 = 0;
        v122 = 0;
        do
        {
          if (*(_BYTE *)(v877 + v121))
          {
            v123 = v877 + 4 * v121;
            if (*(_DWORD *)(v123 - 1408) == v118 && *(_DWORD *)(v123 - 896) == v119)
              ++v122;
          }
          ++v121;
        }
        while (*(unsigned __int8 *)(v115 + 327) != v121);
        if (v122 <= 0)
          goto LABEL_329;
        v124 = 0;
        v125 = ((v122 - 1) >> 2) + 1;
        v885 = v122;
        v887 = *(unsigned __int8 *)v120;
        v881 = v120 + 1;
        v126 = 1;
        v883 = v125;
        break;
    }
    do
    {
      v127 = (_BYTE *)(*(_QWORD *)v4)++;
      *v127 = 36;
      v128 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        v128 = *v890;
      v129 = v128;
      if (v887)
      {
        v130 = v881;
        v129 = v128;
        v131 = v887;
        do
        {
          *(_QWORD *)v4 = v129 + 1;
          *v129 = v131;
          v129 = *(char **)v4;
          if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
          {
            v129 = *(char **)(v4 + 16);
            *(_QWORD *)v4 = v129;
          }
          v132 = *(unsigned __int8 *)v130++;
          v131 = v132;
        }
        while (v132);
      }
      v133 = 0;
      v134 = 71;
      do
      {
        *(_QWORD *)v4 = v129 + 1;
        *v129 = v134;
        v129 = *(char **)v4;
        if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        {
          v129 = *(char **)(v4 + 16);
          *(_QWORD *)v4 = v129;
        }
        v134 = aGsv[++v133];
      }
      while (v133 != 4);
      v889 = v128;
      sprintf1da((_QWORD *)v4, v125, v904, 0, 0);
      v135 = (_BYTE *)(*(_QWORD *)v4)++;
      *v135 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, v126, v904, 0, 0);
      v136 = (_BYTE *)(*(_QWORD *)v4)++;
      *v136 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf_02d((_QWORD *)v4, v122);
      v137 = a2;
      v138 = *(unsigned __int8 *)(a2 + 327);
      if (v124 < v138)
      {
        v139 = 0;
        for (k = v124; k < v138; ++k)
        {
          v141 = v137 + v124;
          if (!*(_BYTE *)(v141 + 1740)
            || (v142 = v137 + 4 * v124, *(_DWORD *)(v142 + 332) != v118)
            || *(_DWORD *)(v142 + 844) != v119)
          {
            ++v124;
            continue;
          }
          v143 = (_BYTE *)(*(_QWORD *)v4)++;
          *v143 = 44;
          if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
            *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
          v144 = *(unsigned __int8 *)(v141 + 1740);
          switch(*(_DWORD *)(v142 + 332))
          {
            case 1:
            case 4:
            case 5:
            case 6:
              break;
            case 2:
              v144 += 64;
              break;
            case 3:
              v144 -= 192;
              break;
            default:
              v144 = 0;
              break;
          }
          sprintf_02d((_QWORD *)v4, v144);
          v145 = (_BYTE *)(*(_QWORD *)v4)++;
          *v145 = 44;
          v146 = *(char **)v4;
          if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
          {
            v146 = *(char **)(v4 + 16);
            *(_QWORD *)v4 = v146;
          }
          v137 = a2;
          v147 = *(double *)(a2 + 8 * v124 + 5072);
          if (v147 >= -5.0)
          {
            v150 = v147 * 10.0;
            if (v150 <= 0.0)
              v151 = -0.5;
            else
              v151 = 0.5;
            v152 = v150 + v151;
            if (v152 <= 2147483650.0)
            {
              if (v152 >= -2147483650.0)
                v153 = (int)v152;
              else
                v153 = 0x80000000;
            }
            else
            {
              v153 = 0x7FFFFFFF;
            }
            sprintf_2f(v4, v153);
            v154 = (_BYTE *)(*(_QWORD *)v4)++;
            *v154 = 44;
            if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
              *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
            v155 = *(double *)(a2 + 8 * v124 + 4048) * 10.0;
            if (v155 <= 0.0)
              v156 = -0.5;
            else
              v156 = 0.5;
            v157 = v155 + v156;
            if (v157 <= 2147483650.0)
            {
              if (v157 >= -2147483650.0)
                v158 = (int)v157;
              else
                v158 = 0x80000000;
            }
            else
            {
              v158 = 0x7FFFFFFF;
            }
            sprintf_2f(v4, v158);
            v149 = (char **)v4;
            v137 = a2;
          }
          else
          {
            *(_QWORD *)v4 = v146 + 1;
            *v146 = 44;
            v148 = *(char **)v4;
            v149 = v890;
            if (*(_QWORD *)v4 < *(_QWORD *)(v4 + 24))
              goto LABEL_290;
          }
          v148 = *v149;
LABEL_290:
          *(_QWORD *)v4 = v148 + 1;
          *v148 = 44;
          if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
            *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
          v159 = *(double *)(v137 + 8 * v124 + 2000);
          if (v159 > 0.0)
          {
            v160 = v159 * 10.0;
            if (v160 <= 0.0)
              v161 = -0.5;
            else
              v161 = 0.5;
            v162 = v160 + v161;
            if (v162 <= 2147483650.0)
            {
              if (v162 >= -2147483650.0)
                v163 = (int)v162;
              else
                v163 = 0x80000000;
            }
            else
            {
              v163 = 0x7FFFFFFF;
            }
            sprintf_2f(v4, v163);
            v137 = a2;
          }
          ++v124;
          if (v139 > 2)
            break;
          ++v139;
          v138 = *(unsigned __int8 *)(v137 + 327);
        }
      }
      v164 = (_BYTE *)(*(_QWORD *)v4)++;
      *v164 = 44;
      v165 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        v165 = *v890;
      v166 = 48;
      if (v119 <= 48)
      {
        v122 = v885;
        switch(v119)
        {
          case 17:
          case 33:
          case 34:
            goto LABEL_319;
          case 18:
          case 35:
LABEL_311:
            v166 = 51;
            break;
          case 19:
          case 36:
LABEL_317:
            v166 = 53;
            break;
          case 20:
LABEL_320:
            v166 = 56;
            break;
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
          case 32:
            break;
          default:
            v122 = v885;
            break;
        }
      }
      else if (v119 > 80)
      {
        v122 = v885;
        if (v119 <= 82)
        {
          if (v119 != 81)
          {
LABEL_319:
            v166 = 49;
            goto LABEL_323;
          }
          v166 = 55;
        }
        else if (v119 == 83 || v119 == 97)
        {
          v166 = 50;
        }
        else if (v119 == 98)
        {
          goto LABEL_319;
        }
      }
      else
      {
        v122 = v885;
        switch(v119)
        {
          case '1':
          case 'A':
            goto LABEL_319;
          case '2':
          case 'B':
            goto LABEL_311;
          case '3':
          case 'C':
            goto LABEL_317;
          case '4':
            goto LABEL_320;
          case 'D':
            v166 = 54;
            break;
          default:
            break;
        }
      }
LABEL_323:
      *(_QWORD *)v4 = v165 + 1;
      *v165 = v166;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      NMEA_Add_checksum(v4, v889);
      v125 = v883;
      v39 = v126++ == v883;
      v115 = a2;
    }
    while (!v39);
LABEL_329:
    v116 = v879 + 1;
  }
  while (v879 != 10);
  v167 = (_BYTE *)(*(_QWORD *)v4)++;
  *v167 = 36;
  v168 = *(char **)v4;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    v168 = *v890;
  v169 = 71;
  v170 = 1u;
  v171 = v168;
  do
  {
    *(_QWORD *)v4 = v171 + 1;
    *v171 = v169;
    v171 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v171 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v171;
    }
    v169 = aGprmc[v170++];
  }
  while (v170 != 7);
  sprintf_HHMMSS((_QWORD *)v4, a2);
  v172 = a2;
  if (*(_BYTE *)(a2 + 326))
    v173 = *(_DWORD *)(a2 + 304);
  else
    v173 = 0;
  if (v173)
  {
    if (v173 <= 0)
      v174 = 86;
    else
      v174 = 65;
    v175 = (char *)(*(_QWORD *)v4)++;
    *v175 = v174;
    v176 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v176 = *v890;
    *(_QWORD *)v4 = v176 + 1;
    *v176 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_LatLon((char **)v4, *(double *)(a2 + 104), *(double *)(a2 + 112));
    v177 = *(double *)(a2 + 136) * 1.94279547 * 1000.0;
    v178 = -0.5;
    if (v177 > 0.0)
      v178 = 0.5;
    v179 = v177 + v178;
    if (v179 <= 2147483650.0)
    {
      if (v179 >= -2147483650.0)
        v180 = (int)v179;
      else
        v180 = 0x80000000;
    }
    else
    {
      v180 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v180, 4);
    v184 = (_BYTE *)(*(_QWORD *)v4)++;
    *v184 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v185 = *(double *)(a2 + 144) * 10.0;
    v186 = -0.5;
    if (v185 > 0.0)
      v186 = 0.5;
    v187 = v185 + v186;
    if (v187 <= 2147483650.0)
    {
      if (v187 >= -2147483650.0)
        v188 = (int)v187;
      else
        v188 = 0x80000000;
    }
    else
    {
      v188 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v188);
    v189 = (_BYTE *)(*(_QWORD *)v4)++;
    *v189 = 44;
    v182 = *(char **)v4;
    v172 = a2;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v182 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v182;
    }
  }
  else
  {
    v181 = 0;
    v182 = *(char **)v4;
    v183 = 86;
    do
    {
      *(_QWORD *)v4 = v182 + 1;
      *v182 = v183;
      v182 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v182 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v182;
      }
      v183 = aV[++v181];
    }
    while (v181 != 8);
  }
  if (*(_BYTE *)(v172 + 17))
  {
    sprintf_02d((_QWORD *)v4, *(unsigned __int16 *)(a2 + 22));
    sprintf_02d((_QWORD *)v4, *(unsigned __int16 *)(a2 + 20));
    sprintf_02d((_QWORD *)v4, *(unsigned __int16 *)(a2 + 18) - 2000);
    v182 = *(char **)v4;
  }
  *(_QWORD *)v4 = v182 + 1;
  *v182 = 44;
  v190 = *(char **)v4;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    v190 = *v890;
  *(_QWORD *)v4 = v190 + 1;
  *v190 = 44;
  v191 = *(char **)v4;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    v191 = *v890;
  *(_QWORD *)v4 = v191 + 1;
  *v191 = 44;
  v192 = *(char **)v4;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    v192 = *v890;
  v193 = 0x44414441454EuLL >> (8 * v173);
  if (v173 >= 6)
    LOBYTE(v193) = 78;
  *(_QWORD *)v4 = v192 + 1;
  *v192 = v193;
  v194 = *(char **)v4;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    v194 = *v890;
  v195 = 0;
  v196 = 44;
  do
  {
    *(_QWORD *)v4 = v194 + 1;
    *v194 = v196;
    v194 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v194 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v194;
    }
    v196 = aV_0[++v195];
  }
  while (v195 != 2);
  NMEA_Add_checksum(v4, v168);
  v197 = (_BYTE *)(*(_QWORD *)v4)++;
  *v197 = 36;
  v198 = *(char **)v4;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    v198 = *v890;
  v199 = 71;
  v200 = 1u;
  v201 = v198;
  do
  {
    *(_QWORD *)v4 = v201 + 1;
    *v201 = v199;
    v201 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v201 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v201;
    }
    v199 = aGpvtg[v200++];
  }
  while (v200 != 7);
  v202 = *(_DWORD *)(a2 + 304);
  if (*(_BYTE *)(a2 + 326))
    v203 = v202 == 0;
  else
    v203 = 1;
  if (v203)
  {
    v204 = 44;
    v205 = 1u;
    v206 = v868;
    do
    {
      *(_QWORD *)v4 = v201 + 1;
      *v201 = v204;
      v201 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v201 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v201;
      }
      v204 = aTMNKN[v205++];
    }
    while (v205 != 14);
  }
  else
  {
    v207 = *(double *)(a2 + 144) * 10.0;
    v208 = -0.5;
    if (v207 > 0.0)
      v208 = 0.5;
    v209 = v207 + v208;
    if (v209 <= 2147483650.0)
    {
      if (v209 >= -2147483650.0)
        v210 = (int)v209;
      else
        v210 = 0x80000000;
    }
    else
    {
      v210 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v210);
    v211 = *(char **)v4;
    v212 = 44;
    v213 = 1u;
    do
    {
      *(_QWORD *)v4 = v211 + 1;
      *v211 = v212;
      v211 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v211 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v211;
      }
      v212 = aT_2[v213++];
    }
    while (v213 != 4);
    v214 = 44;
    v215 = 1u;
    do
    {
      *(_QWORD *)v4 = v211 + 1;
      *v211 = v214;
      v211 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v211 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v211;
      }
      v214 = aM_0[v215++];
    }
    while (v215 != 4);
    v216 = *(double *)(a2 + 136) * 1.94279547 * 1000.0;
    v217 = -0.5;
    if (v216 > 0.0)
      v217 = 0.5;
    v218 = v216 + v217;
    if (v218 <= 2147483650.0)
    {
      if (v218 >= -2147483650.0)
        v219 = (int)v218;
      else
        v219 = 0x80000000;
    }
    else
    {
      v219 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v219, 4);
    v220 = *(char **)v4;
    v221 = 44;
    v222 = 1u;
    do
    {
      *(_QWORD *)v4 = v220 + 1;
      *v220 = v221;
      v220 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v220 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v220;
      }
      v221 = aN_2[v222++];
    }
    while (v222 != 4);
    v223 = *(double *)(a2 + 136) * 3.6 * 1000.0;
    v224 = -0.5;
    if (v223 > 0.0)
      v224 = 0.5;
    v225 = v223 + v224;
    if (v225 <= 2147483650.0)
    {
      if (v225 >= -2147483650.0)
        v226 = (int)v225;
      else
        v226 = 0x80000000;
    }
    else
    {
      v226 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v226, 4);
    v227 = *(char **)v4;
    v228 = 44;
    v229 = 1u;
    do
    {
      *(_QWORD *)v4 = v227 + 1;
      *v227 = v228;
      v227 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v227 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v227;
      }
      v228 = aK[v229++];
    }
    while (v229 != 4);
    v230 = v202 - 1;
    v206 = v868;
    switch(v230)
    {
      case 0:
        *(_QWORD *)v4 = v227 + 1;
        v231 = 69;
        goto LABEL_445;
      case 1:
      case 3:
        *(_QWORD *)v4 = v227 + 1;
        v231 = 65;
        goto LABEL_445;
      case 2:
      case 4:
        *(_QWORD *)v4 = v227 + 1;
        v231 = 68;
LABEL_445:
        *v227 = v231;
        if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
          goto LABEL_446;
        break;
      default:
        *(_QWORD *)v4 = v227 + 1;
        *v227 = 78;
        v206 = v868;
        if (*(_QWORD *)v4 < *(_QWORD *)(v4 + 24))
          break;
LABEL_446:
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
        break;
    }
  }
  NMEA_Add_checksum(v4, v198);
  v232 = (_BYTE *)(*(_QWORD *)v4)++;
  *v232 = 36;
  v233 = *(char **)v4;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    v233 = *v890;
  v234 = 0;
  v235 = 71;
  v236 = v233;
  do
  {
    *(_QWORD *)v4 = v236 + 1;
    *v236 = v235;
    v236 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v236 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v236;
    }
    v235 = aGn[++v234];
  }
  while (v234 != 2);
  v237 = 0;
  v238 = 90;
  do
  {
    *(_QWORD *)v4 = v236 + 1;
    *v236 = v238;
    v236 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v236 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v236;
    }
    v238 = aZcd[++v237];
  }
  while (v237 != 4);
  v239 = *(_DWORD *)(a2 + 4);
  v240 = v239 % 0x3E8;
  sprintf1da((_QWORD *)v4, v239 / 0x3E8, v904, 0, 0);
  v241 = (_BYTE *)(*(_QWORD *)v4)++;
  *v241 = 46;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
  sprintf_03d(v4, v240);
  v242 = 0;
  v243 = *(char **)v4;
  v244 = 44;
  do
  {
    *(_QWORD *)v4 = v243 + 1;
    *v243 = v244;
    v243 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v243 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v243;
    }
    v244 = asc_24BBF3904[++v242];
  }
  while (v242 != 2);
  NMEA_Add_checksum(v4, v233);
  v245 = (_BYTE *)(*(_QWORD *)v4)++;
  *v245 = 36;
  v246 = *(char **)v4;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    v246 = *v890;
  v247 = 0;
  v248 = 71;
  v249 = v246;
  do
  {
    *(_QWORD *)v4 = v249 + 1;
    *v249 = v248;
    v249 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v249 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v249;
    }
    v248 = aGn[++v247];
  }
  while (v247 != 2);
  v250 = 0;
  v251 = 90;
  do
  {
    *(_QWORD *)v4 = v249 + 1;
    *v249 = v251;
    v249 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v249 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v249;
    }
    v251 = aZda[++v250];
  }
  while (v250 != 4);
  sprintf_HHMMSS((_QWORD *)v4, a2);
  if (*(_BYTE *)(a2 + 17))
  {
    sprintf_02d((_QWORD *)v4, *(unsigned __int16 *)(a2 + 22));
    v252 = (_BYTE *)(*(_QWORD *)v4)++;
    *v252 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_02d((_QWORD *)v4, *(unsigned __int16 *)(a2 + 20));
    v253 = (_BYTE *)(*(_QWORD *)v4)++;
    *v253 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_02d((_QWORD *)v4, *(unsigned __int16 *)(a2 + 18));
    v254 = *(char **)v4;
  }
  else
  {
    v255 = 0;
    v254 = *(char **)v4;
    v256 = 44;
    do
    {
      *(_QWORD *)v4 = v254 + 1;
      *v254 = v256;
      v254 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v254 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v254;
      }
      v256 = asc_24BBF390C[++v255];
    }
    while (v255 != 2);
  }
  v257 = 0;
  v258 = 44;
  do
  {
    *(_QWORD *)v4 = v254 + 1;
    *v254 = v258;
    v254 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v254 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v254;
    }
    v258 = asc_24BBF390C[++v257];
  }
  while (v257 != 2);
  NMEA_Add_checksum(v4, v246);
  v259 = (_BYTE *)(*(_QWORD *)v4)++;
  *v259 = 36;
  v260 = *(char **)v4;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    v260 = *v890;
  v261 = 80;
  v262 = 1u;
  v263 = v260;
  do
  {
    *(_QWORD *)v4 = v263 + 1;
    *v263 = v261;
    v263 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v263 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v263;
    }
    v261 = aPdbga[v262++];
  }
  while (v262 != 7);
  sprintf_HHMMSS((_QWORD *)v4, a2);
  v264 = *(_DWORD *)(a2 + 300);
  if (v264 >= 0)
    v265 = *(_DWORD *)(a2 + 300);
  else
    v265 = -v264;
  sprintf1da((_QWORD *)v4, v265, v904, 0, v264 >> 31);
  v266 = (_BYTE *)(*(_QWORD *)v4)++;
  *v266 = 44;
  v267 = *(char **)v4;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
  {
    v267 = *(char **)(v4 + 16);
    *(_QWORD *)v4 = v267;
  }
  v268 = *(_DWORD *)(a2 + 304);
  if (v268)
  {
    if (v268 >= 0)
      v269 = *(_DWORD *)(a2 + 304);
    else
      v269 = -v268;
    sprintf1da((_QWORD *)v4, v269, v904, 0, v268 >> 31);
    v270 = (_BYTE *)(*(_QWORD *)v4)++;
    *v270 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(a2 + 325), v904, 0, 0);
    v271 = (_BYTE *)(*(_QWORD *)v4)++;
    *v271 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(a2 + 326), v904, 0, 0);
    v272 = (_BYTE *)(*(_QWORD *)v4)++;
    *v272 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_AccEst((_QWORD *)v4, *(double *)(a2 + 208));
    v273 = (_BYTE *)(*(_QWORD *)v4)++;
    *v273 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_AccEst((_QWORD *)v4, *(double *)(a2 + 216));
    v274 = (_BYTE *)(*(_QWORD *)v4)++;
    *v274 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v275 = (int)*(double *)(a2 + 224);
    if (v275 >= 0)
      v276 = (int)*(double *)(a2 + 224);
    else
      v276 = -v275;
    sprintf1da((_QWORD *)v4, v276, v904, 0, v275 >> 31);
    v277 = (_BYTE *)(*(_QWORD *)v4)++;
    *v277 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_AccEst((_QWORD *)v4, *(double *)(a2 + 200));
    v278 = (_BYTE *)(*(_QWORD *)v4)++;
    *v278 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_AccEst((_QWORD *)v4, *(double *)(a2 + 232));
    v279 = (_BYTE *)(*(_QWORD *)v4)++;
    *v279 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_AccEst((_QWORD *)v4, *(double *)(a2 + 240));
    v280 = (_BYTE *)(*(_QWORD *)v4)++;
    *v280 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_AccEst((_QWORD *)v4, *(double *)(a2 + 248));
    v281 = (_BYTE *)(*(_QWORD *)v4)++;
    *v281 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_AccEst((_QWORD *)v4, *(double *)(a2 + 160) * 1000.0);
    v282 = (_BYTE *)(*(_QWORD *)v4)++;
    *v282 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_AccEst((_QWORD *)v4, *(double *)(a2 + 168) * 1000000000.0);
    v283 = (_BYTE *)(*(_QWORD *)v4)++;
    *v283 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_AccEst((_QWORD *)v4, *(double *)(a2 + 176) * 1000000000.0);
    v284 = (_BYTE *)(*(_QWORD *)v4)++;
    *v284 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v285 = *(double *)(a2 + 152) * 1000.0;
    v286 = -0.5;
    if (v285 > 0.0)
      v286 = 0.5;
    v287 = v285 + v286;
    if (v287 <= 2147483650.0)
    {
      if (v287 >= -2147483650.0)
        v288 = (int)v287;
      else
        v288 = 0x80000000;
    }
    else
    {
      v288 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v288, 4);
    v291 = (_BYTE *)(*(_QWORD *)v4)++;
    *v291 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v292 = *(_DWORD *)(a2 + 308);
    if (v292 >= 0)
      v293 = *(_DWORD *)(a2 + 308);
    else
      v293 = -v292;
    sprintf1da((_QWORD *)v4, v293, v904, 0, v292 >> 31);
    v294 = (_BYTE *)(*(_QWORD *)v4)++;
    *v294 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v295 = *(_DWORD *)(a2 + 312);
    if (v295 >= 0)
      v296 = *(_DWORD *)(a2 + 312);
    else
      v296 = -v295;
    sprintf1da((_QWORD *)v4, v296, v904, 0, v295 >> 31);
    v297 = (_BYTE *)(*(_QWORD *)v4)++;
    *v297 = 44;
    v298 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v298 = *v890;
    v299 = 0;
    v300 = 48;
    do
    {
      *(_QWORD *)v4 = v298 + 1;
      *v298 = v300;
      v298 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v298 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v298;
      }
      v300 = a0x_0[++v299];
    }
    while (v299 != 2);
    v301 = *(unsigned int *)(a2 + 320);
    LOBYTE(v904[0]) = hexTABLE[v301 >> 28];
    HIBYTE(v904[0]) = hexTABLE[(v301 >> 24) & 0xF];
    hex6(v4, v301, v904, 2);
    v302 = (_BYTE *)(*(_QWORD *)v4)++;
    *v302 = 44;
    v303 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v303 = *v890;
    v304 = 0;
    v305 = 48;
    do
    {
      *(_QWORD *)v4 = v303 + 1;
      *v303 = v305;
      v303 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v303 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v303;
      }
      v305 = a0x_0[++v304];
    }
    while (v304 != 2);
    sprintf_03x((char **)v4, *(unsigned int *)(a2 + 296));
    v306 = (_BYTE *)(*(_QWORD *)v4)++;
    *v306 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v307 = *(_DWORD *)(a2 + 316);
    if (v307 >= 0)
      v308 = *(_DWORD *)(a2 + 316);
    else
      v308 = -v307;
    sprintf1da((_QWORD *)v4, v308, v904, 0, v307 >> 31);
  }
  else
  {
    v289 = 48;
    v290 = 1u;
    do
    {
      *(_QWORD *)v4 = v267 + 1;
      *v267 = v289;
      v267 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v267 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v267;
      }
      v289 = a0_1[v290++];
    }
    while (v290 != 20);
  }
  result = NMEA_Add_checksum(v4, v260);
  if (v206 && *(_DWORD *)v206 == *(_DWORD *)a2 && *(_DWORD *)(v206 + 4) == *(_DWORD *)(a2 + 4))
  {
    v309 = (_BYTE *)(*(_QWORD *)v4)++;
    *v309 = 36;
    v310 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v310 = *v890;
    v311 = 80;
    v312 = 1u;
    v313 = v310;
    do
    {
      *(_QWORD *)v4 = v313 + 1;
      *v313 = v311;
      v313 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v313 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v313;
      }
      v311 = aPdbgc[v312++];
    }
    while (v312 != 7);
    sprintf_HHMMSS((_QWORD *)v4, a2);
    v314 = *(char **)v4;
    if (*(_BYTE *)(v206 + 16))
    {
      *(_QWORD *)v4 = v314 + 1;
      *v314 = 65;
      v315 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        v315 = *v890;
      *(_QWORD *)v4 = v315 + 1;
      *v315 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 17), v904, 0, 0);
      v316 = (_BYTE *)(*(_QWORD *)v4)++;
      *v316 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 18), v904, 0, 0);
      v317 = (_BYTE *)(*(_QWORD *)v4)++;
      *v317 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf_3f(v4, *(_DWORD *)(v206 + 20) / 10, 3);
      v318 = (_BYTE *)(*(_QWORD *)v4)++;
      *v318 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 24), v904, 0, 0);
      v319 = (_BYTE *)(*(_QWORD *)v4)++;
      *v319 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 25), v904, 0, 0);
      v320 = (_BYTE *)(*(_QWORD *)v4)++;
      *v320 = 44;
      v314 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        v314 = *v890;
    }
    else
    {
      v321 = 78;
      v322 = 1u;
      do
      {
        *(_QWORD *)v4 = v314 + 1;
        *v314 = v321;
        v314 = *(char **)v4;
        if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        {
          v314 = *(char **)(v4 + 16);
          *(_QWORD *)v4 = v314;
        }
        v321 = aN_4[v322++];
      }
      while (v322 != 8);
    }
    if (*(_BYTE *)(v206 + 26))
    {
      *(_QWORD *)v4 = v314 + 1;
      *v314 = 65;
      v323 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        v323 = *v890;
      *(_QWORD *)v4 = v323 + 1;
      *v323 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 27), v904, 0, 0);
      v324 = (_BYTE *)(*(_QWORD *)v4)++;
      *v324 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 28), v904, 0, 0);
      v325 = (_BYTE *)(*(_QWORD *)v4)++;
      *v325 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf_3f(v4, *(_DWORD *)(v206 + 32) / 10, 3);
      v326 = (_BYTE *)(*(_QWORD *)v4)++;
      *v326 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 36), v904, 0, 0);
      v327 = (_BYTE *)(*(_QWORD *)v4)++;
      *v327 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 37), v904, 0, 0);
      v328 = (_BYTE *)(*(_QWORD *)v4)++;
      *v328 = 44;
      v314 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        v314 = *v890;
    }
    else
    {
      v329 = 78;
      v330 = 1u;
      do
      {
        *(_QWORD *)v4 = v314 + 1;
        *v314 = v329;
        v314 = *(char **)v4;
        if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        {
          v314 = *(char **)(v4 + 16);
          *(_QWORD *)v4 = v314;
        }
        v329 = aN_4[v330++];
      }
      while (v330 != 8);
    }
    if (*(_BYTE *)(v206 + 38))
    {
      *(_QWORD *)v4 = v314 + 1;
      *v314 = 65;
      v331 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        v331 = *v890;
      *(_QWORD *)v4 = v331 + 1;
      *v331 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 39), v904, 0, 0);
      v332 = (_BYTE *)(*(_QWORD *)v4)++;
      *v332 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 40), v904, 0, 0);
      v333 = (_BYTE *)(*(_QWORD *)v4)++;
      *v333 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf_3f(v4, *(_DWORD *)(v206 + 44) / 10, 3);
      v334 = (_BYTE *)(*(_QWORD *)v4)++;
      *v334 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 48), v904, 0, 0);
      v335 = (_BYTE *)(*(_QWORD *)v4)++;
      *v335 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 49), v904, 0, 0);
    }
    else
    {
      v336 = 78;
      v337 = 1u;
      do
      {
        *(_QWORD *)v4 = v314 + 1;
        *v314 = v336;
        v314 = *(char **)v4;
        if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        {
          v314 = *(char **)(v4 + 16);
          *(_QWORD *)v4 = v314;
        }
        v336 = aN_5[v337++];
      }
      while (v337 != 7);
    }
    NMEA_Add_checksum(v4, v310);
    v338 = (_BYTE *)(*(_QWORD *)v4)++;
    *v338 = 36;
    v339 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v339 = *v890;
    v340 = 80;
    v341 = 1u;
    v342 = v339;
    do
    {
      *(_QWORD *)v4 = v342 + 1;
      *v342 = v340;
      v342 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v342 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v342;
      }
      v340 = aPdbgd[v341++];
    }
    while (v341 != 7);
    sprintf_HHMMSS((_QWORD *)v4, a2);
    v343 = *(char **)v4;
    if (*(_BYTE *)(v206 + 50))
    {
      *(_QWORD *)v4 = v343 + 1;
      *v343 = 65;
      v344 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        v344 = *v890;
      *(_QWORD *)v4 = v344 + 1;
      *v344 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 51), v904, 0, 0);
      v345 = (_BYTE *)(*(_QWORD *)v4)++;
      *v345 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 52), v904, 0, 0);
      v346 = (_BYTE *)(*(_QWORD *)v4)++;
      *v346 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf_3f(v4, *(_DWORD *)(v206 + 56) / 10, 3);
      v347 = (_BYTE *)(*(_QWORD *)v4)++;
      *v347 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v348 = *(double *)(v206 + 64) * 100.0;
      v349 = -0.5;
      if (v348 > 0.0)
        v349 = 0.5;
      v350 = v348 + v349;
      if (v350 <= 2147483650.0)
      {
        if (v350 >= -2147483650.0)
          v351 = (int)v350;
        else
          v351 = 0x80000000;
      }
      else
      {
        v351 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v351, 3);
      v354 = (_BYTE *)(*(_QWORD *)v4)++;
      *v354 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v355 = *(double *)(v206 + 72) * 100.0;
      v356 = -0.5;
      if (v355 > 0.0)
        v356 = 0.5;
      v357 = v355 + v356;
      if (v357 <= 2147483650.0)
      {
        if (v357 >= -2147483650.0)
          v358 = (int)v357;
        else
          v358 = 0x80000000;
      }
      else
      {
        v358 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v358, 3);
      v359 = (_BYTE *)(*(_QWORD *)v4)++;
      *v359 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 80), v904, 0, 0);
    }
    else
    {
      v352 = 78;
      v353 = 1u;
      do
      {
        *(_QWORD *)v4 = v343 + 1;
        *v343 = v352;
        v343 = *(char **)v4;
        if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        {
          v343 = *(char **)(v4 + 16);
          *(_QWORD *)v4 = v343;
        }
        v352 = aN_4[v353++];
      }
      while (v353 != 8);
    }
    NMEA_Add_checksum(v4, v339);
    v360 = (_BYTE *)(*(_QWORD *)v4)++;
    *v360 = 36;
    v361 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v361 = *v890;
    v362 = 80;
    v363 = 1u;
    v364 = v361;
    do
    {
      *(_QWORD *)v4 = v364 + 1;
      *v364 = v362;
      v364 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v364 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v364;
      }
      v362 = aPdbge[v363++];
    }
    while (v363 != 7);
    sprintf_HHMMSS((_QWORD *)v4, a2);
    v365 = 0;
    v366 = *(char **)v4;
    v367 = 65;
    do
    {
      *(_QWORD *)v4 = v366 + 1;
      *v366 = v367;
      v366 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v366 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v366;
      }
      v367 = aA[++v365];
    }
    while (v365 != 2);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 81), v904, 0, 0);
    v368 = (_BYTE *)(*(_QWORD *)v4)++;
    *v368 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 82), v904, 0, 0);
    v369 = (_BYTE *)(*(_QWORD *)v4)++;
    *v369 = 44;
    v370 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v370 = *v890;
    *(_QWORD *)v4 = v370 + 1;
    *v370 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int16 *)(v206 + 84), v904, 0, 0);
    v371 = (_BYTE *)(*(_QWORD *)v4)++;
    *v371 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int16 *)(v206 + 86), v904, 0, 0);
    v372 = (_BYTE *)(*(_QWORD *)v4)++;
    *v372 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int16 *)(v206 + 90), v904, 0, 0);
    v373 = (_BYTE *)(*(_QWORD *)v4)++;
    *v373 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 92), v904, 0, 0);
    v374 = (_BYTE *)(*(_QWORD *)v4)++;
    *v374 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 93), v904, 0, 0);
    v375 = (_BYTE *)(*(_QWORD *)v4)++;
    *v375 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 95), v904, 0, 0);
    v376 = (_BYTE *)(*(_QWORD *)v4)++;
    *v376 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 96), v904, 0, 0);
    v377 = (_BYTE *)(*(_QWORD *)v4)++;
    *v377 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v378 = *(char *)(v206 + 97);
    if (v378 >= 0)
      v379 = *(char *)(v206 + 97);
    else
      v379 = -v378;
    sprintf1da((_QWORD *)v4, v379, v904, 0, (v378 >> 7) & 1);
    v380 = (_BYTE *)(*(_QWORD *)v4)++;
    *v380 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 98), v904, 0, 0);
    v381 = (_BYTE *)(*(_QWORD *)v4)++;
    *v381 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 99), v904, 0, 0);
    v382 = (_BYTE *)(*(_QWORD *)v4)++;
    *v382 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 100), v904, 0, 0);
    v383 = (_BYTE *)(*(_QWORD *)v4)++;
    *v383 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int16 *)(v206 + 102), v904, 0, 0);
    v384 = (_BYTE *)(*(_QWORD *)v4)++;
    *v384 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 104), v904, 0, 0);
    v385 = (_BYTE *)(*(_QWORD *)v4)++;
    *v385 = 44;
    v386 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v386 = *v890;
    v387 = 0;
    v388 = 82;
    do
    {
      *(_QWORD *)v4 = v386 + 1;
      *v386 = v388;
      v386 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v386 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v386;
      }
      v388 = aR_0[++v387];
    }
    while (v387 != 2);
    sprintf1da((_QWORD *)v4, *(unsigned __int16 *)(v206 + 106), v904, 0, 0);
    v389 = (_BYTE *)(*(_QWORD *)v4)++;
    *v389 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int16 *)(v206 + 108), v904, 0, 0);
    v390 = (_BYTE *)(*(_QWORD *)v4)++;
    *v390 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int16 *)(v206 + 110), v904, 0, 0);
    v391 = (_BYTE *)(*(_QWORD *)v4)++;
    *v391 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 112), v904, 0, 0);
    v392 = (_BYTE *)(*(_QWORD *)v4)++;
    *v392 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 113), v904, 0, 0);
    v393 = (_BYTE *)(*(_QWORD *)v4)++;
    *v393 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 114), v904, 0, 0);
    v394 = (_BYTE *)(*(_QWORD *)v4)++;
    *v394 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 115), v904, 0, 0);
    v395 = (_BYTE *)(*(_QWORD *)v4)++;
    *v395 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 116), v904, 0, 0);
    v396 = (_BYTE *)(*(_QWORD *)v4)++;
    *v396 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v397 = *(double *)(v206 + 120) * 10.0;
    v398 = -0.5;
    if (v397 > 0.0)
      v398 = 0.5;
    v399 = v397 + v398;
    if (v399 <= 2147483650.0)
    {
      if (v399 >= -2147483650.0)
        v400 = (int)v399;
      else
        v400 = 0x80000000;
    }
    else
    {
      v400 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v400);
    v401 = (_BYTE *)(*(_QWORD *)v4)++;
    *v401 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v402 = *(double *)(v206 + 128) * 10.0;
    v403 = -0.5;
    if (v402 > 0.0)
      v403 = 0.5;
    v404 = v402 + v403;
    if (v404 <= 2147483650.0)
    {
      if (v404 >= -2147483650.0)
        v405 = (int)v404;
      else
        v405 = 0x80000000;
    }
    else
    {
      v405 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v405);
    v406 = (_BYTE *)(*(_QWORD *)v4)++;
    *v406 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v407 = *(double *)(v206 + 136) * 10.0;
    v408 = -0.5;
    if (v407 > 0.0)
      v408 = 0.5;
    v409 = v407 + v408;
    if (v409 <= 2147483650.0)
    {
      if (v409 >= -2147483650.0)
        v410 = (int)v409;
      else
        v410 = 0x80000000;
    }
    else
    {
      v410 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v410);
    v411 = (_BYTE *)(*(_QWORD *)v4)++;
    *v411 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v412 = *(double *)(v206 + 144) * 10.0;
    v413 = -0.5;
    if (v412 > 0.0)
      v413 = 0.5;
    v414 = v412 + v413;
    if (v414 <= 2147483650.0)
    {
      if (v414 >= -2147483650.0)
        v415 = (int)v414;
      else
        v415 = 0x80000000;
    }
    else
    {
      v415 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v415);
    v416 = (_BYTE *)(*(_QWORD *)v4)++;
    *v416 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 152), v904, 0, 0);
    v417 = (_BYTE *)(*(_QWORD *)v4)++;
    *v417 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 153), v904, 0, 0);
    v418 = (_BYTE *)(*(_QWORD *)v4)++;
    *v418 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 154), v904, 0, 0);
    v419 = (_BYTE *)(*(_QWORD *)v4)++;
    *v419 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 155), v904, 0, 0);
    v420 = (_BYTE *)(*(_QWORD *)v4)++;
    *v420 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 156), v904, 0, 0);
    v421 = (_BYTE *)(*(_QWORD *)v4)++;
    *v421 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 157), v904, 0, 0);
    v422 = (_BYTE *)(*(_QWORD *)v4)++;
    *v422 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 158), v904, 0, 0);
    v423 = (_BYTE *)(*(_QWORD *)v4)++;
    *v423 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 159), v904, 0, 0);
    NMEA_Add_checksum(v4, v361);
    if (*(_BYTE *)(v206 + 160))
      NMEA_Encode_PDBGE_Constell((char **)v4, 1, a2, v206);
    if (*(_BYTE *)(v206 + 200))
      NMEA_Encode_PDBGE_Constell((char **)v4, 5, a2, v206);
    if (*(_BYTE *)(v206 + 240))
      NMEA_Encode_PDBGE_Constell((char **)v4, 2, a2, v206);
    if (*(_BYTE *)(v206 + 280))
      NMEA_Encode_PDBGE_Constell((char **)v4, 3, a2, v206);
    if (*(_BYTE *)(v206 + 320))
      NMEA_Encode_PDBGE_Constell((char **)v4, 4, a2, v206);
    if (*(_BYTE *)(v206 + 360))
      NMEA_Encode_PDBGE_Constell((char **)v4, 6, a2, v206);
    if (*(_BYTE *)(v206 + 400))
      NMEA_Encode_PDBGE_Constell((char **)v4, 7, a2, v206);
    v424 = (_BYTE *)(*(_QWORD *)v4)++;
    *v424 = 36;
    v425 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v425 = *v890;
    v426 = 80;
    v427 = 1u;
    v428 = v425;
    do
    {
      *(_QWORD *)v4 = v428 + 1;
      *v428 = v426;
      v428 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v428 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v428;
      }
      v426 = aPdbgi[v427++];
    }
    while (v427 != 7);
    sprintf_HHMMSS((_QWORD *)v4, a2);
    v429 = 0;
    v430 = *(char **)v4;
    v431 = 65;
    do
    {
      *(_QWORD *)v4 = v430 + 1;
      *v430 = v431;
      v430 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v430 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v430;
      }
      v431 = aA[++v429];
    }
    while (v429 != 2);
    v432 = *(_DWORD *)(v206 + 440);
    if (v432 >= 0)
      v433 = *(_DWORD *)(v206 + 440);
    else
      v433 = -v432;
    sprintf1da((_QWORD *)v4, v433, v904, 0, v432 >> 31);
    v434 = (_BYTE *)(*(_QWORD *)v4)++;
    *v434 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int16 *)(v206 + 444), v904, 0, 0);
    v435 = (_BYTE *)(*(_QWORD *)v4)++;
    *v435 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 446), v904, 0, 0);
    v436 = (_BYTE *)(*(_QWORD *)v4)++;
    *v436 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_2d((_QWORD *)v4, *(_DWORD *)(v206 + 448));
    v437 = (_BYTE *)(*(_QWORD *)v4)++;
    *v437 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    for (m = 452; m != 458; ++m)
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + m), v904, 0, 0);
    v439 = (_BYTE *)(*(_QWORD *)v4)++;
    *v439 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 458), v904, 0, 0);
    v440 = (_BYTE *)(*(_QWORD *)v4)++;
    *v440 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v441 = *(double *)(v206 + 464) * 10.0;
    v442 = -0.5;
    if (v441 > 0.0)
      v442 = 0.5;
    v443 = v441 + v442;
    if (v443 <= 2147483650.0)
    {
      if (v443 >= -2147483650.0)
        v444 = (int)v443;
      else
        v444 = 0x80000000;
    }
    else
    {
      v444 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v444);
    v445 = (_BYTE *)(*(_QWORD *)v4)++;
    *v445 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_AccEst((_QWORD *)v4, *(double *)(v206 + 472));
    v446 = (_BYTE *)(*(_QWORD *)v4)++;
    *v446 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_AccEst((_QWORD *)v4, *(double *)(v206 + 480));
    v447 = (_BYTE *)(*(_QWORD *)v4)++;
    *v447 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_AccEst((_QWORD *)v4, *(double *)(v206 + 488));
    v448 = (_BYTE *)(*(_QWORD *)v4)++;
    *v448 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 496), v904, 0, 0);
    v449 = (_BYTE *)(*(_QWORD *)v4)++;
    *v449 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 497), v904, 0, 0);
    NMEA_Add_checksum(v4, v425);
    if (*(_BYTE *)(v206 + 504))
      NMEA_Encode_PDBGI_Constell((char **)v4, 1, a2, v206);
    if (*(_BYTE *)(v206 + 600))
      NMEA_Encode_PDBGI_Constell((char **)v4, 5, a2, v206);
    if (*(_BYTE *)(v206 + 696))
      NMEA_Encode_PDBGI_Constell((char **)v4, 2, a2, v206);
    if (*(_BYTE *)(v206 + 792))
      NMEA_Encode_PDBGI_Constell((char **)v4, 3, a2, v206);
    if (*(_BYTE *)(v206 + 888))
      NMEA_Encode_PDBGI_Constell((char **)v4, 4, a2, v206);
    if (*(_BYTE *)(v206 + 984))
      NMEA_Encode_PDBGI_Constell((char **)v4, 6, a2, v206);
    if (*(_BYTE *)(v206 + 1080))
      NMEA_Encode_PDBGI_Constell((char **)v4, 7, a2, v206);
    v450 = (_BYTE *)(*(_QWORD *)v4)++;
    *v450 = 36;
    v451 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v451 = *v890;
    v452 = 80;
    v453 = 1u;
    v454 = v451;
    do
    {
      *(_QWORD *)v4 = v454 + 1;
      *v454 = v452;
      v454 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v454 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v454;
      }
      v452 = aPdbgm[v453++];
    }
    while (v453 != 7);
    sprintf_HHMMSS((_QWORD *)v4, a2);
    v455 = *(char **)v4;
    if (*(_BYTE *)(v206 + 1176))
    {
      *(_QWORD *)v4 = v455 + 1;
      *v455 = 65;
      v456 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        v456 = *v890;
      *(_QWORD *)v4 = v456 + 1;
      *v456 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1177), v904, 0, 0);
      v457 = (_BYTE *)(*(_QWORD *)v4)++;
      *v457 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1178), v904, 0, 0);
      v458 = (_BYTE *)(*(_QWORD *)v4)++;
      *v458 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf_3f(v4, *(_DWORD *)(v206 + 1180) / 10, 3);
      v459 = (_BYTE *)(*(_QWORD *)v4)++;
      *v459 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1184), v904, 0, 0);
      v460 = (_BYTE *)(*(_QWORD *)v4)++;
      *v460 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v461 = *(double *)(v206 + 1192) * 10.0;
      v462 = -0.5;
      if (v461 > 0.0)
        v462 = 0.5;
      v463 = v461 + v462;
      if (v463 <= 2147483650.0)
      {
        if (v463 >= -2147483650.0)
          v464 = (int)v463;
        else
          v464 = 0x80000000;
      }
      else
      {
        v464 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v464);
      v467 = (_BYTE *)(*(_QWORD *)v4)++;
      *v467 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v468 = *(double *)(v206 + 1200) * 10.0;
      v469 = -0.5;
      if (v468 > 0.0)
        v469 = 0.5;
      v470 = v468 + v469;
      if (v470 <= 2147483650.0)
      {
        if (v470 >= -2147483650.0)
          v471 = (int)v470;
        else
          v471 = 0x80000000;
      }
      else
      {
        v471 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v471);
      v472 = (_BYTE *)(*(_QWORD *)v4)++;
      *v472 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v473 = *(double *)(v206 + 1208) * 10.0;
      v474 = -0.5;
      if (v473 > 0.0)
        v474 = 0.5;
      v475 = v473 + v474;
      if (v475 <= 2147483650.0)
      {
        if (v475 >= -2147483650.0)
          v476 = (int)v475;
        else
          v476 = 0x80000000;
      }
      else
      {
        v476 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v476);
      v477 = (_BYTE *)(*(_QWORD *)v4)++;
      *v477 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int16 *)(v206 + 1216), v904, 0, 0);
      v478 = (_BYTE *)(*(_QWORD *)v4)++;
      *v478 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int16 *)(v206 + 1218), v904, 0, 0);
      v479 = (_BYTE *)(*(_QWORD *)v4)++;
      *v479 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1220), v904, 0, 0);
      v480 = (_BYTE *)(*(_QWORD *)v4)++;
      *v480 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1221), v904, 0, 0);
      v481 = (_BYTE *)(*(_QWORD *)v4)++;
      *v481 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1222), v904, 0, 0);
      v482 = (_BYTE *)(*(_QWORD *)v4)++;
      *v482 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1223), v904, 0, 0);
      v483 = (_BYTE *)(*(_QWORD *)v4)++;
      *v483 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1224), v904, 0, 0);
      v484 = (_BYTE *)(*(_QWORD *)v4)++;
      *v484 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1225), v904, 0, 0);
    }
    else
    {
      v465 = 78;
      v466 = 1u;
      do
      {
        *(_QWORD *)v4 = v455 + 1;
        *v455 = v465;
        v455 = *(char **)v4;
        if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        {
          v455 = *(char **)(v4 + 16);
          *(_QWORD *)v4 = v455;
        }
        v465 = aN_6[v466++];
      }
      while (v466 != 15);
    }
    NMEA_Add_checksum(v4, v451);
    if (*(_BYTE *)(v206 + 1232))
      NMEA_Encode_PDBGO((char **)v4, 1, a2, (unint64_t *)v206);
    if (*(_BYTE *)(v206 + 1288))
      NMEA_Encode_PDBGO((char **)v4, 5, a2, (unint64_t *)v206);
    if (*(_BYTE *)(v206 + 1344))
      NMEA_Encode_PDBGO((char **)v4, 2, a2, (unint64_t *)v206);
    if (*(_BYTE *)(v206 + 1400))
      NMEA_Encode_PDBGO((char **)v4, 3, a2, (unint64_t *)v206);
    if (*(_BYTE *)(v206 + 1456))
      NMEA_Encode_PDBGO((char **)v4, 4, a2, (unint64_t *)v206);
    if (*(_BYTE *)(v206 + 1512))
      NMEA_Encode_PDBGO((char **)v4, 6, a2, (unint64_t *)v206);
    if (*(_BYTE *)(v206 + 1568))
      NMEA_Encode_PDBGO((char **)v4, 7, a2, (unint64_t *)v206);
    v485 = (_BYTE *)(*(_QWORD *)v4)++;
    *v485 = 36;
    v486 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v486 = *v890;
    v487 = 80;
    v488 = 1u;
    v489 = v486;
    do
    {
      *(_QWORD *)v4 = v489 + 1;
      *v489 = v487;
      v489 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v489 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v489;
      }
      v487 = aPdbgp[v488++];
    }
    while (v488 != 7);
    sprintf_HHMMSS((_QWORD *)v4, a2);
    v490 = *(char **)v4;
    if (*(_BYTE *)(v206 + 1624))
    {
      *(_QWORD *)v4 = v490 + 1;
      *v490 = 65;
      v491 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        v491 = *v890;
      *(_QWORD *)v4 = v491 + 1;
      *v491 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1625), v904, 0, 0);
      v492 = (_BYTE *)(*(_QWORD *)v4)++;
      *v492 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1627), v904, 0, 0);
      v493 = (_BYTE *)(*(_QWORD *)v4)++;
      *v493 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf_3f(v4, *(_DWORD *)(v206 + 1628) / 10, 3);
      v494 = (_BYTE *)(*(_QWORD *)v4)++;
      *v494 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1632), v904, 0, 0);
      v495 = (_BYTE *)(*(_QWORD *)v4)++;
      *v495 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1633), v904, 0, 0);
      v496 = (_BYTE *)(*(_QWORD *)v4)++;
      *v496 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1634), v904, 0, 0);
      v497 = (_BYTE *)(*(_QWORD *)v4)++;
      *v497 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v498 = *(double *)(v206 + 1640) * 10.0;
      v499 = -0.5;
      if (v498 > 0.0)
        v499 = 0.5;
      v500 = v498 + v499;
      if (v500 <= 2147483650.0)
      {
        if (v500 >= -2147483650.0)
          v501 = (int)v500;
        else
          v501 = 0x80000000;
      }
      else
      {
        v501 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v501);
      v504 = (_BYTE *)(*(_QWORD *)v4)++;
      *v504 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v505 = *(double *)(v206 + 1648) * 10.0;
      v506 = -0.5;
      if (v505 > 0.0)
        v506 = 0.5;
      v507 = v505 + v506;
      if (v507 <= 2147483650.0)
      {
        if (v507 >= -2147483650.0)
          v508 = (int)v507;
        else
          v508 = 0x80000000;
      }
      else
      {
        v508 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v508);
      v509 = (_BYTE *)(*(_QWORD *)v4)++;
      *v509 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v510 = *(double *)(v206 + 1656) * 10.0;
      v511 = -0.5;
      if (v510 > 0.0)
        v511 = 0.5;
      v512 = v510 + v511;
      if (v512 <= 2147483650.0)
      {
        if (v512 >= -2147483650.0)
          v513 = (int)v512;
        else
          v513 = 0x80000000;
      }
      else
      {
        v513 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v513);
      v514 = (_BYTE *)(*(_QWORD *)v4)++;
      *v514 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v515 = *(_DWORD *)(v206 + 1664);
      if (v515 >= 0)
        v516 = *(_DWORD *)(v206 + 1664);
      else
        v516 = -v515;
      sprintf1da((_QWORD *)v4, v516, v904, 0, v515 >> 31);
      v517 = (_BYTE *)(*(_QWORD *)v4)++;
      *v517 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v518 = *(_DWORD *)(v206 + 1668);
      if (v518 >= 0)
        v519 = *(_DWORD *)(v206 + 1668);
      else
        v519 = -v518;
      sprintf1da((_QWORD *)v4, v519, v904, 0, v518 >> 31);
      v520 = (_BYTE *)(*(_QWORD *)v4)++;
      *v520 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1672), v904, 0, 0);
      v521 = (_BYTE *)(*(_QWORD *)v4)++;
      *v521 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int16 *)(v206 + 1674), v904, 0, 0);
      v522 = (_BYTE *)(*(_QWORD *)v4)++;
      *v522 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1626), v904, 0, 0);
    }
    else
    {
      v502 = 78;
      v503 = 1u;
      do
      {
        *(_QWORD *)v4 = v490 + 1;
        *v490 = v502;
        v490 = *(char **)v4;
        if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        {
          v490 = *(char **)(v4 + 16);
          *(_QWORD *)v4 = v490;
        }
        v502 = aN_6[v503++];
      }
      while (v503 != 15);
    }
    NMEA_Add_checksum(v4, v486);
    v523 = (_BYTE *)(*(_QWORD *)v4)++;
    *v523 = 36;
    v524 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v524 = *v890;
    v525 = 80;
    v526 = 1u;
    v527 = v524;
    do
    {
      *(_QWORD *)v4 = v527 + 1;
      *v527 = v525;
      v527 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v527 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v527;
      }
      v525 = aPdbgs[v526++];
    }
    while (v526 != 7);
    sprintf_HHMMSS((_QWORD *)v4, a2);
    v528 = *(char **)v4;
    if (*(_BYTE *)(v206 + 1676))
    {
      *(_QWORD *)v4 = v528 + 1;
      *v528 = 65;
      v529 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        v529 = *v890;
      *(_QWORD *)v4 = v529 + 1;
      *v529 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1677), v904, 0, 0);
      v530 = (_BYTE *)(*(_QWORD *)v4)++;
      *v530 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1678), v904, 0, 0);
      v531 = (_BYTE *)(*(_QWORD *)v4)++;
      *v531 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1679), v904, 0, 0);
    }
    else
    {
      v532 = 0;
      v533 = 78;
      do
      {
        *(_QWORD *)v4 = v528 + 1;
        *v528 = v533;
        v528 = *(char **)v4;
        if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        {
          v528 = *(char **)(v4 + 16);
          *(_QWORD *)v4 = v528;
        }
        v533 = aN_7[++v532];
      }
      while (v532 != 4);
    }
    NMEA_Add_checksum(v4, v524);
    v534 = (_BYTE *)(*(_QWORD *)v4)++;
    *v534 = 36;
    v535 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v535 = *v890;
    v536 = 80;
    v537 = 1u;
    v538 = v535;
    do
    {
      *(_QWORD *)v4 = v538 + 1;
      *v538 = v536;
      v538 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v538 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v538;
      }
      v536 = aPdbgf[v537++];
    }
    while (v537 != 7);
    sprintf_HHMMSS((_QWORD *)v4, a2);
    v539 = *(char **)v4;
    if (*(_BYTE *)(v206 + 1680))
    {
      *(_QWORD *)v4 = v539 + 1;
      *v539 = 65;
      v540 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        v540 = *v890;
      *(_QWORD *)v4 = v540 + 1;
      *v540 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1681), v904, 0, 0);
      v541 = (_BYTE *)(*(_QWORD *)v4)++;
      *v541 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1682), v904, 0, 0);
      v542 = (_BYTE *)(*(_QWORD *)v4)++;
      *v542 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v543 = *(_DWORD *)(v206 + 1684);
      if (v543 >= 0)
        v544 = *(_DWORD *)(v206 + 1684);
      else
        v544 = -v543;
      sprintf1da((_QWORD *)v4, v544, v904, 0, v543 >> 31);
      v545 = (_BYTE *)(*(_QWORD *)v4)++;
      *v545 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v546 = *(double *)(v206 + 1688) * 100.0;
      v547 = -0.5;
      if (v546 > 0.0)
        v547 = 0.5;
      v548 = v546 + v547;
      if (v548 <= 2147483650.0)
      {
        if (v548 >= -2147483650.0)
          v549 = (int)v548;
        else
          v549 = 0x80000000;
      }
      else
      {
        v549 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v549, 3);
      v552 = (_BYTE *)(*(_QWORD *)v4)++;
      *v552 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v553 = *(double *)(v206 + 1696) * 100.0;
      v554 = -0.5;
      if (v553 > 0.0)
        v554 = 0.5;
      v555 = v553 + v554;
      if (v555 <= 2147483650.0)
      {
        if (v555 >= -2147483650.0)
          v556 = (int)v555;
        else
          v556 = 0x80000000;
      }
      else
      {
        v556 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v556, 3);
    }
    else
    {
      v550 = 78;
      v551 = 1u;
      do
      {
        *(_QWORD *)v4 = v539 + 1;
        *v539 = v550;
        v539 = *(char **)v4;
        if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        {
          v539 = *(char **)(v4 + 16);
          *(_QWORD *)v4 = v539;
        }
        v550 = aN_5[v551++];
      }
      while (v551 != 7);
    }
    NMEA_Add_checksum(v4, v535);
    v557 = (_BYTE *)(*(_QWORD *)v4)++;
    *v557 = 36;
    v558 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v558 = *v890;
    v559 = 80;
    v560 = 1u;
    v561 = v558;
    do
    {
      *(_QWORD *)v4 = v561 + 1;
      *v561 = v559;
      v561 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v561 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v561;
      }
      v559 = aPdbgt[v560++];
    }
    while (v560 != 7);
    sprintf_HHMMSS((_QWORD *)v4, a2);
    sprintf_1u((_QWORD *)v4, *(_DWORD *)(v206 + 1776));
    v562 = (_BYTE *)(*(_QWORD *)v4)++;
    *v562 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_1u((_QWORD *)v4, *(_DWORD *)(v206 + 1780));
    v563 = (_BYTE *)(*(_QWORD *)v4)++;
    *v563 = 44;
    v564 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v564 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v564;
    }
    if (*(_BYTE *)(v206 + 1792))
    {
      v565 = *(__int16 *)(v206 + 1794);
      if (v565 >= 0)
        v566 = *(__int16 *)(v206 + 1794);
      else
        v566 = -v565;
      sprintf1da((_QWORD *)v4, v566, v904, 0, (v565 >> 15) & 1);
      v567 = (_BYTE *)(*(_QWORD *)v4)++;
      *v567 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v568 = *(double *)(v206 + 1800) * 1000.0;
      v569 = -0.5;
      if (v568 > 0.0)
        v569 = 0.5;
      v570 = v568 + v569;
      if (v570 <= 2147483650.0)
      {
        if (v570 >= -2147483650.0)
          v571 = (int)v570;
        else
          v571 = 0x80000000;
      }
      else
      {
        v571 = 0x7FFFFFFF;
      }
      sprintf_4f(v4, v571, 4);
      v574 = (_BYTE *)(*(_QWORD *)v4)++;
      *v574 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v575 = *(double *)(v206 + 1808) * 1000.0;
      v576 = -0.5;
      if (v575 > 0.0)
        v576 = 0.5;
      v577 = v575 + v576;
      if (v577 <= 2147483650.0)
      {
        if (v577 >= -2147483650.0)
          v578 = (int)v577;
        else
          v578 = 0x80000000;
      }
      else
      {
        v578 = 0x7FFFFFFF;
      }
      sprintf_4f(v4, v578, 4);
      v579 = (_BYTE *)(*(_QWORD *)v4)++;
      *v579 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf_1u((_QWORD *)v4, *(_DWORD *)(v206 + 1816));
      v580 = (_BYTE *)(*(_QWORD *)v4)++;
      *v580 = 44;
      v564 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v564 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v564;
      }
    }
    else
    {
      v572 = 0;
      v573 = 44;
      do
      {
        *(_QWORD *)v4 = v564 + 1;
        *v564 = v573;
        v564 = *(char **)v4;
        if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        {
          v564 = *(char **)(v4 + 16);
          *(_QWORD *)v4 = v564;
        }
        v573 = asc_24BBF3856[++v572];
      }
      while (v572 != 4);
    }
    if (*(_BYTE *)(v206 + 1820))
    {
      v581 = *(_DWORD *)(v206 + 1824);
      if (v581 >= 0)
        v582 = *(_DWORD *)(v206 + 1824);
      else
        v582 = -v581;
      sprintf1da((_QWORD *)v4, v582, v904, 0, v581 >> 31);
      v583 = (_BYTE *)(*(_QWORD *)v4)++;
      *v583 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf_1u((_QWORD *)v4, *(_DWORD *)(v206 + 1828));
      v584 = (_BYTE *)(*(_QWORD *)v4)++;
      *v584 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    }
    else
    {
      v585 = 0;
      v586 = 44;
      do
      {
        *(_QWORD *)v4 = v564 + 1;
        *v564 = v586;
        v564 = *(char **)v4;
        if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        {
          v564 = *(char **)(v4 + 16);
          *(_QWORD *)v4 = v564;
        }
        v586 = asc_24BBF390C[++v585];
      }
      while (v585 != 2);
    }
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1832), v904, 0, 0);
    v587 = (_BYTE *)(*(_QWORD *)v4)++;
    *v587 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1833), v904, 0, 0);
    v588 = (_BYTE *)(*(_QWORD *)v4)++;
    *v588 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v589 = *(double *)(v206 + 1840) * 1000.0;
    v590 = -0.5;
    if (v589 > 0.0)
      v590 = 0.5;
    v591 = v589 + v590;
    if (v591 <= 2147483650.0)
    {
      if (v591 >= -2147483650.0)
        v592 = (int)v591;
      else
        v592 = 0x80000000;
    }
    else
    {
      v592 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v592, 4);
    v593 = (_BYTE *)(*(_QWORD *)v4)++;
    *v593 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v594 = *(__int16 *)(v206 + 1848);
    if (v594 >= 0)
      v595 = *(__int16 *)(v206 + 1848);
    else
      v595 = -v594;
    sprintf1da((_QWORD *)v4, v595, v904, 0, (v594 >> 15) & 1);
    v596 = (_BYTE *)(*(_QWORD *)v4)++;
    *v596 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1850), v904, 0, 0);
    v597 = (_BYTE *)(*(_QWORD *)v4)++;
    *v597 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v598 = *(double *)(v206 + 1856) * 1000.0;
    v599 = -0.5;
    if (v598 > 0.0)
      v599 = 0.5;
    v600 = v598 + v599;
    if (v600 <= 2147483650.0)
    {
      if (v600 >= -2147483650.0)
        v601 = (int)v600;
      else
        v601 = 0x80000000;
    }
    else
    {
      v601 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v601, 4);
    v602 = (_BYTE *)(*(_QWORD *)v4)++;
    *v602 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v603 = *(__int16 *)(v206 + 1864);
    if (v603 >= 0)
      v604 = *(__int16 *)(v206 + 1864);
    else
      v604 = -v603;
    sprintf1da((_QWORD *)v4, v604, v904, 0, (v603 >> 15) & 1);
    v605 = (_BYTE *)(*(_QWORD *)v4)++;
    *v605 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v606 = *(__int16 *)(v206 + 1866);
    if (v606 >= 0)
      v607 = *(__int16 *)(v206 + 1866);
    else
      v607 = -v606;
    sprintf1da((_QWORD *)v4, v607, v904, 0, (v606 >> 15) & 1);
    v608 = (_BYTE *)(*(_QWORD *)v4)++;
    *v608 = 44;
    v609 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v609 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v609;
    }
    if (*(_BYTE *)(v206 + 1868))
    {
      v610 = *(char *)(v206 + 1869);
      if (v610 >= 0)
        v611 = *(char *)(v206 + 1869);
      else
        v611 = -v610;
      sprintf1da((_QWORD *)v4, v611, v904, 0, (v610 >> 7) & 1);
      v612 = (_BYTE *)(*(_QWORD *)v4)++;
      *v612 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v613 = *(char *)(v206 + 1870);
      if (v613 >= 0)
        v614 = *(char *)(v206 + 1870);
      else
        v614 = -v613;
      sprintf1da((_QWORD *)v4, v614, v904, 0, (v613 >> 7) & 1);
      v615 = (_BYTE *)(*(_QWORD *)v4)++;
      *v615 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v616 = *(__int16 *)(v206 + 1872);
      if (v616 >= 0)
        v617 = *(__int16 *)(v206 + 1872);
      else
        v617 = -v616;
      sprintf1da((_QWORD *)v4, v617, v904, 0, (v616 >> 15) & 1);
      v618 = (_BYTE *)(*(_QWORD *)v4)++;
      *v618 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v619 = *(char *)(v206 + 1874);
      if (v619 >= 0)
        v620 = *(char *)(v206 + 1874);
      else
        v620 = -v619;
      sprintf1da((_QWORD *)v4, v620, v904, 0, (v619 >> 7) & 1);
      v621 = (_BYTE *)(*(_QWORD *)v4)++;
      *v621 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v622 = *(char *)(v206 + 1875);
      if (v622 >= 0)
        v623 = *(char *)(v206 + 1875);
      else
        v623 = -v622;
      sprintf1da((_QWORD *)v4, v623, v904, 0, (v622 >> 7) & 1);
      v624 = (_BYTE *)(*(_QWORD *)v4)++;
      *v624 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v625 = *(__int16 *)(v206 + 1876);
      if (v625 >= 0)
        v626 = *(__int16 *)(v206 + 1876);
      else
        v626 = -v625;
      sprintf1da((_QWORD *)v4, v626, v904, 0, (v625 >> 15) & 1);
      v627 = (_BYTE *)(*(_QWORD *)v4)++;
      *v627 = 44;
      v609 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v609 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v609;
      }
    }
    else
    {
      v628 = 44;
      v629 = 1u;
      do
      {
        *(_QWORD *)v4 = v609 + 1;
        *v609 = v628;
        v609 = *(char **)v4;
        if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        {
          v609 = *(char **)(v4 + 16);
          *(_QWORD *)v4 = v609;
        }
        v628 = asc_24BBF3964[v629++];
      }
      while (v629 != 7);
    }
    v630 = *(_DWORD *)(v206 + 1880);
    if (v630)
    {
      if (v630 >= 0)
        v631 = *(_DWORD *)(v206 + 1880);
      else
        v631 = -v630;
      sprintf1da((_QWORD *)v4, v631, v904, 0, v630 >> 31);
      v609 = *(char **)v4;
    }
    *(_QWORD *)v4 = v609 + 1;
    *v609 = 44;
    v632 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v632 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v632;
    }
    v633 = *(_DWORD *)(v206 + 1884);
    if (v633)
    {
      if (v633 >= 0)
        v634 = *(_DWORD *)(v206 + 1884);
      else
        v634 = -v633;
      sprintf1da((_QWORD *)v4, v634, v904, 0, v633 >> 31);
      v632 = *(char **)v4;
    }
    *(_QWORD *)v4 = v632 + 1;
    *v632 = 44;
    v635 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v635 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v635;
    }
    v636 = *(_DWORD *)(v206 + 1888);
    if (v636)
    {
      if (v636 >= 0)
        v637 = *(_DWORD *)(v206 + 1888);
      else
        v637 = -v636;
      sprintf1da((_QWORD *)v4, v637, v904, 0, v636 >> 31);
      v635 = *(char **)v4;
    }
    *(_QWORD *)v4 = v635 + 1;
    *v635 = 44;
    v638 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v638 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v638;
    }
    v639 = *(_DWORD *)(v206 + 1892);
    if (v639)
    {
      if (v639 >= 0)
        v640 = *(_DWORD *)(v206 + 1892);
      else
        v640 = -v639;
      sprintf1da((_QWORD *)v4, v640, v904, 0, v639 >> 31);
      v638 = *(char **)v4;
    }
    *(_QWORD *)v4 = v638 + 1;
    *v638 = 44;
    v641 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v641 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v641;
    }
    v642 = *(_DWORD *)(v206 + 1896);
    if (v642)
    {
      if (v642 >= 0)
        v643 = *(_DWORD *)(v206 + 1896);
      else
        v643 = -v642;
      sprintf1da((_QWORD *)v4, v643, v904, 0, v642 >> 31);
      v641 = *(char **)v4;
    }
    *(_QWORD *)v4 = v641 + 1;
    *v641 = 44;
    v644 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v644 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v644;
    }
    v645 = *(_DWORD *)(v206 + 1900);
    if (v645)
    {
      if (v645 >= 0)
        v646 = *(_DWORD *)(v206 + 1900);
      else
        v646 = -v645;
      sprintf1da((_QWORD *)v4, v646, v904, 0, v645 >> 31);
      v644 = *(char **)v4;
    }
    *(_QWORD *)v4 = v644 + 1;
    *v644 = 44;
    v647 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v647 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v647;
    }
    v648 = *(_QWORD *)(v206 + 1784);
    if (v648)
    {
      sprintf_1U((_QWORD *)v4, v648);
      v647 = *(char **)v4;
    }
    *(_QWORD *)v4 = v647 + 1;
    *v647 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int16 *)(v206 + 1904), v904, 0, 0);
    NMEA_Add_checksum(v4, v558);
    v649 = (_BYTE *)(*(_QWORD *)v4)++;
    *v649 = 36;
    v650 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v650 = *v890;
    v651 = 80;
    v652 = 1u;
    v653 = v650;
    do
    {
      *(_QWORD *)v4 = v653 + 1;
      *v653 = v651;
      v653 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v653 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v653;
      }
      v651 = aPdbgv[v652++];
    }
    while (v652 != 7);
    sprintf_HHMMSS((_QWORD *)v4, a2);
    v654 = *(char **)v4;
    if (*(_BYTE *)(v206 + 1704))
    {
      *(_QWORD *)v4 = v654 + 1;
      *v654 = 65;
      v655 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        v655 = *v890;
      *(_QWORD *)v4 = v655 + 1;
      *v655 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1705), v904, 0, 0);
      v656 = (_BYTE *)(*(_QWORD *)v4)++;
      *v656 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1706), v904, 0, 0);
      v657 = (_BYTE *)(*(_QWORD *)v4)++;
      *v657 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v658 = *(double *)(v206 + 1712) * 100.0;
      v659 = -0.5;
      if (v658 > 0.0)
        v659 = 0.5;
      v660 = v658 + v659;
      if (v660 <= 2147483650.0)
      {
        if (v660 >= -2147483650.0)
          v661 = (int)v660;
        else
          v661 = 0x80000000;
      }
      else
      {
        v661 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v661, 3);
      v664 = (_BYTE *)(*(_QWORD *)v4)++;
      *v664 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v665 = *(double *)(v206 + 1720) * 100.0;
      v666 = -0.5;
      if (v665 > 0.0)
        v666 = 0.5;
      v667 = v665 + v666;
      if (v667 <= 2147483650.0)
      {
        if (v667 >= -2147483650.0)
          v668 = (int)v667;
        else
          v668 = 0x80000000;
      }
      else
      {
        v668 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v668, 3);
      v669 = (_BYTE *)(*(_QWORD *)v4)++;
      *v669 = 44;
      v654 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        v654 = *v890;
    }
    else
    {
      v662 = 78;
      v663 = 1u;
      do
      {
        *(_QWORD *)v4 = v654 + 1;
        *v654 = v662;
        v654 = *(char **)v4;
        if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        {
          v654 = *(char **)(v4 + 16);
          *(_QWORD *)v4 = v654;
        }
        v662 = aN_5[v663++];
      }
      while (v663 != 7);
    }
    if (*(_BYTE *)(v206 + 1728))
    {
      *(_QWORD *)v4 = v654 + 1;
      *v654 = 65;
      v670 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        v670 = *v890;
      *(_QWORD *)v4 = v670 + 1;
      *v670 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1729), v904, 0, 0);
      v671 = (_BYTE *)(*(_QWORD *)v4)++;
      *v671 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1730), v904, 0, 0);
      v672 = (_BYTE *)(*(_QWORD *)v4)++;
      *v672 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v673 = *(double *)(v206 + 1736) * 100.0;
      v674 = -0.5;
      if (v673 > 0.0)
        v674 = 0.5;
      v675 = v673 + v674;
      if (v675 <= 2147483650.0)
      {
        if (v675 >= -2147483650.0)
          v676 = (int)v675;
        else
          v676 = 0x80000000;
      }
      else
      {
        v676 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v676, 3);
      v679 = (_BYTE *)(*(_QWORD *)v4)++;
      *v679 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v680 = *(double *)(v206 + 1744) * 100.0;
      v681 = -0.5;
      if (v680 > 0.0)
        v681 = 0.5;
      v682 = v680 + v681;
      if (v682 <= 2147483650.0)
      {
        if (v682 >= -2147483650.0)
          v683 = (int)v682;
        else
          v683 = 0x80000000;
      }
      else
      {
        v683 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v683, 3);
      v684 = (_BYTE *)(*(_QWORD *)v4)++;
      *v684 = 44;
      v654 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        v654 = *v890;
    }
    else
    {
      v677 = 78;
      v678 = 1u;
      do
      {
        *(_QWORD *)v4 = v654 + 1;
        *v654 = v677;
        v654 = *(char **)v4;
        if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        {
          v654 = *(char **)(v4 + 16);
          *(_QWORD *)v4 = v654;
        }
        v677 = aN_5[v678++];
      }
      while (v678 != 7);
    }
    if (*(_BYTE *)(v206 + 1752))
    {
      *(_QWORD *)v4 = v654 + 1;
      *v654 = 65;
      v685 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        v685 = *v890;
      *(_QWORD *)v4 = v685 + 1;
      *v685 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1753), v904, 0, 0);
      v686 = (_BYTE *)(*(_QWORD *)v4)++;
      *v686 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 1754), v904, 0, 0);
      v687 = (_BYTE *)(*(_QWORD *)v4)++;
      *v687 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v688 = *(double *)(v206 + 1760) * 100.0;
      v689 = -0.5;
      if (v688 > 0.0)
        v689 = 0.5;
      v690 = v688 + v689;
      if (v690 <= 2147483650.0)
      {
        if (v690 >= -2147483650.0)
          v691 = (int)v690;
        else
          v691 = 0x80000000;
      }
      else
      {
        v691 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v691, 3);
      v694 = (_BYTE *)(*(_QWORD *)v4)++;
      *v694 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v695 = *(double *)(v206 + 1768) * 100.0;
      v696 = -0.5;
      if (v695 > 0.0)
        v696 = 0.5;
      v697 = v695 + v696;
      if (v697 <= 2147483650.0)
      {
        if (v697 >= -2147483650.0)
          v698 = (int)v697;
        else
          v698 = 0x80000000;
      }
      else
      {
        v698 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v698, 3);
      v699 = (_BYTE *)(*(_QWORD *)v4)++;
      *v699 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    }
    else
    {
      v692 = 78;
      v693 = 1u;
      do
      {
        *(_QWORD *)v4 = v654 + 1;
        *v654 = v692;
        v654 = *(char **)v4;
        if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        {
          v654 = *(char **)(v4 + 16);
          *(_QWORD *)v4 = v654;
        }
        v692 = aN_8[v693++];
      }
      while (v693 != 6);
    }
    NMEA_Add_checksum(v4, v650);
    v700 = (_BYTE *)(*(_QWORD *)v4)++;
    *v700 = 36;
    v701 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v701 = *v890;
    v702 = 80;
    v703 = 1u;
    v704 = v701;
    do
    {
      *(_QWORD *)v4 = v704 + 1;
      *v704 = v702;
      v704 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v704 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v704;
      }
      v702 = aPdbgx[v703++];
    }
    while (v703 != 7);
    sprintf_HHMMSS((_QWORD *)v4, a2);
    v705 = *(double *)(v206 + 1912) * 100.0;
    v706 = -0.5;
    if (v705 > 0.0)
      v706 = 0.5;
    v707 = v705 + v706;
    if (v707 <= 2147483650.0)
    {
      if (v707 >= -2147483650.0)
        v708 = (int)v707;
      else
        v708 = 0x80000000;
    }
    else
    {
      v708 = 0x7FFFFFFF;
    }
    sprintf_3f(v4, v708, 3);
    v709 = (_BYTE *)(*(_QWORD *)v4)++;
    *v709 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v710 = *(double *)(v206 + 1920) * 100.0;
    v711 = -0.5;
    if (v710 > 0.0)
      v711 = 0.5;
    v712 = v710 + v711;
    if (v712 <= 2147483650.0)
    {
      if (v712 >= -2147483650.0)
        v713 = (int)v712;
      else
        v713 = 0x80000000;
    }
    else
    {
      v713 = 0x7FFFFFFF;
    }
    sprintf_3f(v4, v713, 3);
    v714 = (_BYTE *)(*(_QWORD *)v4)++;
    *v714 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v715 = *(double *)(v206 + 1928) * 100.0;
    v716 = -0.5;
    if (v715 > 0.0)
      v716 = 0.5;
    v717 = v715 + v716;
    if (v717 <= 2147483650.0)
    {
      if (v717 >= -2147483650.0)
        v718 = (int)v717;
      else
        v718 = 0x80000000;
    }
    else
    {
      v718 = 0x7FFFFFFF;
    }
    sprintf_3f(v4, v718, 3);
    v719 = (_BYTE *)(*(_QWORD *)v4)++;
    *v719 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v720 = *(double *)(v206 + 1936) * 100.0;
    v721 = -0.5;
    if (v720 > 0.0)
      v721 = 0.5;
    v722 = v720 + v721;
    if (v722 <= 2147483650.0)
    {
      if (v722 >= -2147483650.0)
        v723 = (int)v722;
      else
        v723 = 0x80000000;
    }
    else
    {
      v723 = 0x7FFFFFFF;
    }
    sprintf_3f(v4, v723, 3);
    v724 = (_BYTE *)(*(_QWORD *)v4)++;
    *v724 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v725 = *(double *)(v206 + 1944) * 1000.0;
    v726 = -0.5;
    if (v725 > 0.0)
      v726 = 0.5;
    v727 = v725 + v726;
    if (v727 <= 2147483650.0)
    {
      if (v727 >= -2147483650.0)
        v728 = (int)v727;
      else
        v728 = 0x80000000;
    }
    else
    {
      v728 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v728, 4);
    v729 = (_BYTE *)(*(_QWORD *)v4)++;
    *v729 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v730 = *(double *)(v206 + 1952) * 1000.0;
    v731 = -0.5;
    if (v730 > 0.0)
      v731 = 0.5;
    v732 = v730 + v731;
    if (v732 <= 2147483650.0)
    {
      if (v732 >= -2147483650.0)
        v733 = (int)v732;
      else
        v733 = 0x80000000;
    }
    else
    {
      v733 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v733, 4);
    v734 = (_BYTE *)(*(_QWORD *)v4)++;
    *v734 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v735 = *(double *)(v206 + 1960) * 1000.0;
    v736 = -0.5;
    if (v735 > 0.0)
      v736 = 0.5;
    v737 = v735 + v736;
    if (v737 <= 2147483650.0)
    {
      if (v737 >= -2147483650.0)
        v738 = (int)v737;
      else
        v738 = 0x80000000;
    }
    else
    {
      v738 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v738, 4);
    v739 = (_BYTE *)(*(_QWORD *)v4)++;
    *v739 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v740 = *(double *)(v206 + 1968) * 1000.0;
    v741 = -0.5;
    if (v740 > 0.0)
      v741 = 0.5;
    v742 = v740 + v741;
    if (v742 <= 2147483650.0)
    {
      if (v742 >= -2147483650.0)
        v743 = (int)v742;
      else
        v743 = 0x80000000;
    }
    else
    {
      v743 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v743, 4);
    v744 = (_BYTE *)(*(_QWORD *)v4)++;
    *v744 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v745 = *(double *)(v206 + 1976) * 1000.0;
    v746 = -0.5;
    if (v745 > 0.0)
      v746 = 0.5;
    v747 = v745 + v746;
    if (v747 <= 2147483650.0)
    {
      if (v747 >= -2147483650.0)
        v748 = (int)v747;
      else
        v748 = 0x80000000;
    }
    else
    {
      v748 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v748, 4);
    v749 = (_BYTE *)(*(_QWORD *)v4)++;
    *v749 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v750 = *(double *)(v206 + 1984) * 10.0;
    v751 = -0.5;
    if (v750 > 0.0)
      v751 = 0.5;
    v752 = v750 + v751;
    if (v752 <= 2147483650.0)
    {
      if (v752 >= -2147483650.0)
        v753 = (int)v752;
      else
        v753 = 0x80000000;
    }
    else
    {
      v753 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v753);
    v754 = (_BYTE *)(*(_QWORD *)v4)++;
    *v754 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v755 = *(double *)(v206 + 1992) * 10.0;
    v756 = -0.5;
    if (v755 > 0.0)
      v756 = 0.5;
    v757 = v755 + v756;
    if (v757 <= 2147483650.0)
    {
      if (v757 >= -2147483650.0)
        v758 = (int)v757;
      else
        v758 = 0x80000000;
    }
    else
    {
      v758 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v758);
    v759 = (_BYTE *)(*(_QWORD *)v4)++;
    *v759 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v760 = *(double *)(v206 + 2000) * 10.0;
    v761 = -0.5;
    if (v760 > 0.0)
      v761 = 0.5;
    v762 = v760 + v761;
    if (v762 <= 2147483650.0)
    {
      if (v762 >= -2147483650.0)
        v763 = (int)v762;
      else
        v763 = 0x80000000;
    }
    else
    {
      v763 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v763);
    v764 = (_BYTE *)(*(_QWORD *)v4)++;
    *v764 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v765 = *(double *)(v206 + 2008) * 10.0;
    v766 = -0.5;
    if (v765 > 0.0)
      v766 = 0.5;
    v767 = v765 + v766;
    if (v767 <= 2147483650.0)
    {
      if (v767 >= -2147483650.0)
        v768 = (int)v767;
      else
        v768 = 0x80000000;
    }
    else
    {
      v768 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v768);
    v769 = (_BYTE *)(*(_QWORD *)v4)++;
    *v769 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v770 = *(double *)(v206 + 2016) * 10.0;
    v771 = -0.5;
    if (v770 > 0.0)
      v771 = 0.5;
    v772 = v770 + v771;
    if (v772 <= 2147483650.0)
    {
      if (v772 >= -2147483650.0)
        v773 = (int)v772;
      else
        v773 = 0x80000000;
    }
    else
    {
      v773 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v773);
    v774 = (_BYTE *)(*(_QWORD *)v4)++;
    *v774 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v775 = *(double *)(v206 + 2024) * 10.0;
    v776 = -0.5;
    if (v775 > 0.0)
      v776 = 0.5;
    v777 = v775 + v776;
    if (v777 <= 2147483650.0)
    {
      if (v777 >= -2147483650.0)
        v778 = (int)v777;
      else
        v778 = 0x80000000;
    }
    else
    {
      v778 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v778);
    v779 = (_BYTE *)(*(_QWORD *)v4)++;
    *v779 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v780 = *(double *)(v206 + 2032) * 10.0;
    v781 = -0.5;
    if (v780 > 0.0)
      v781 = 0.5;
    v782 = v780 + v781;
    if (v782 <= 2147483650.0)
    {
      if (v782 >= -2147483650.0)
        v783 = (int)v782;
      else
        v783 = 0x80000000;
    }
    else
    {
      v783 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v783);
    v784 = (_BYTE *)(*(_QWORD *)v4)++;
    *v784 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int16 *)(v206 + 2040), v904, 0, 0);
    v785 = (_BYTE *)(*(_QWORD *)v4)++;
    *v785 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v786 = *(double *)(v206 + 2048) * 10.0;
    v787 = -0.5;
    if (v786 > 0.0)
      v787 = 0.5;
    v788 = v786 + v787;
    if (v788 <= 2147483650.0)
    {
      if (v788 >= -2147483650.0)
        v789 = (int)v788;
      else
        v789 = 0x80000000;
    }
    else
    {
      v789 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v789);
    v790 = (_BYTE *)(*(_QWORD *)v4)++;
    *v790 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v791 = *(double *)(v206 + 2056) * 10.0;
    v792 = -0.5;
    if (v791 > 0.0)
      v792 = 0.5;
    v793 = v791 + v792;
    if (v793 <= 2147483650.0)
    {
      if (v793 >= -2147483650.0)
        v794 = (int)v793;
      else
        v794 = 0x80000000;
    }
    else
    {
      v794 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v794);
    v795 = (_BYTE *)(*(_QWORD *)v4)++;
    *v795 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v796 = *(double *)(v206 + 2064) * 10.0;
    v797 = -0.5;
    if (v796 > 0.0)
      v797 = 0.5;
    v798 = v796 + v797;
    if (v798 <= 2147483650.0)
    {
      if (v798 >= -2147483650.0)
        v799 = (int)v798;
      else
        v799 = 0x80000000;
    }
    else
    {
      v799 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v799);
    v800 = (_BYTE *)(*(_QWORD *)v4)++;
    *v800 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v801 = *(double *)(v206 + 2072) * 10.0;
    v802 = -0.5;
    if (v801 > 0.0)
      v802 = 0.5;
    v803 = v801 + v802;
    if (v803 <= 2147483650.0)
    {
      if (v803 >= -2147483650.0)
        v804 = (int)v803;
      else
        v804 = 0x80000000;
    }
    else
    {
      v804 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v804);
    v805 = (_BYTE *)(*(_QWORD *)v4)++;
    *v805 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v806 = *(double *)(a2 + 56) * 1000000000.0 * 10.0;
    v807 = -0.5;
    if (v806 > 0.0)
      v807 = 0.5;
    v808 = v806 + v807;
    if (v808 <= 2147483650.0)
    {
      if (v808 >= -2147483650.0)
        v809 = (int)v808;
      else
        v809 = 0x80000000;
    }
    else
    {
      v809 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v809);
    v810 = (_BYTE *)(*(_QWORD *)v4)++;
    *v810 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_AccEst((_QWORD *)v4, *(double *)(a2 + 168) * 1000000000.0);
    v811 = (_BYTE *)(*(_QWORD *)v4)++;
    *v811 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v812 = *(double *)(a2 + 64) * 1000000000.0 * 10.0;
    v813 = -0.5;
    if (v812 > 0.0)
      v813 = 0.5;
    v814 = v812 + v813;
    if (v814 <= 2147483650.0)
    {
      if (v814 >= -2147483650.0)
        v815 = (int)v814;
      else
        v815 = 0x80000000;
    }
    else
    {
      v815 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v815);
    v816 = (_BYTE *)(*(_QWORD *)v4)++;
    *v816 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_AccEst((_QWORD *)v4, *(double *)(a2 + 176) * 1000000000.0);
    NMEA_Add_checksum(v4, v701);
    v817 = (_BYTE *)(*(_QWORD *)v4)++;
    *v817 = 36;
    v818 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v818 = *v890;
    v819 = 80;
    v820 = 1u;
    v821 = v818;
    do
    {
      *(_QWORD *)v4 = v821 + 1;
      *v821 = v819;
      v821 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v821 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v821;
      }
      v819 = aPdbgy[v820++];
    }
    while (v820 != 7);
    sprintf_HHMMSS((_QWORD *)v4, a2);
    v822 = *(_BYTE *)(v206 + 2082);
    v823 = *(char **)v4;
    if (v822)
    {
      v824 = (unsigned __int8 *)(v206 + 2083);
      do
      {
        *(_QWORD *)v4 = v823 + 1;
        *v823 = v822;
        v823 = *(char **)v4;
        if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        {
          v823 = *(char **)(v4 + 16);
          *(_QWORD *)v4 = v823;
        }
        v825 = *v824++;
        v822 = v825;
      }
      while (v825);
    }
    *(_QWORD *)v4 = v823 + 1;
    *v823 = 58;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_04x((char **)v4, *(unsigned __int16 *)(v206 + 2086));
    v826 = (_BYTE *)(*(_QWORD *)v4)++;
    *v826 = 45;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v827 = *(unsigned __int8 *)(v206 + 2088);
    v904[0] = 12336;
    hex6(v4, v827, v904, 2);
    v828 = (_BYTE *)(*(_QWORD *)v4)++;
    *v828 = 45;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 2089), v904, 0, 0);
    v829 = (_BYTE *)(*(_QWORD *)v4)++;
    *v829 = 46;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_02d((_QWORD *)v4, *(unsigned __int8 *)(v206 + 2090));
    v830 = (_BYTE *)(*(_QWORD *)v4)++;
    *v830 = 46;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 2091), v904, 0, 0);
    v831 = (_BYTE *)(*(_QWORD *)v4)++;
    *v831 = 46;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 2092), v904, 0, 0);
    v832 = (_BYTE *)(*(_QWORD *)v4)++;
    *v832 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int16 *)(v206 + 2094), v904, 0, 0);
    v833 = (_BYTE *)(*(_QWORD *)v4)++;
    *v833 = 46;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf_2d((_QWORD *)v4, *(unsigned __int8 *)(v206 + 2096));
    v834 = (_BYTE *)(*(_QWORD *)v4)++;
    *v834 = 46;
    v835 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v835 = *v890;
    v836 = *(_BYTE *)(v206 + 2097);
    *(_QWORD *)v4 = v835 + 1;
    *v835 = v836;
    v837 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v837 = *v890;
    *(_QWORD *)v4 = v837 + 1;
    *v837 = 46;
    v838 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
    {
      v838 = *(char **)(v4 + 16);
      *(_QWORD *)v4 = v838;
    }
    v839 = *(_BYTE *)(v206 + 2098);
    if (v839)
    {
      v840 = (unsigned __int8 *)(v206 + 2099);
      do
      {
        *(_QWORD *)v4 = v838 + 1;
        *v838 = v839;
        v838 = *(char **)v4;
        if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        {
          v838 = *(char **)(v4 + 16);
          *(_QWORD *)v4 = v838;
        }
        v841 = *v840++;
        v839 = v841;
      }
      while (v841);
    }
    *(_QWORD *)v4 = v838 + 1;
    *v838 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v842 = *(_DWORD *)(v206 + 2108);
    if (v842 >= 0)
      v843 = *(_DWORD *)(v206 + 2108);
    else
      v843 = -v842;
    sprintf1da((_QWORD *)v4, v843, v904, 0, v842 >> 31);
    v844 = (_BYTE *)(*(_QWORD *)v4)++;
    *v844 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v845 = *(_DWORD *)(v206 + 2112);
    if (v845 >= 0)
      v846 = *(_DWORD *)(v206 + 2112);
    else
      v846 = -v845;
    sprintf1da((_QWORD *)v4, v846, v904, 0, v845 >> 31);
    v847 = (_BYTE *)(*(_QWORD *)v4)++;
    *v847 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 2116), v904, 0, 0);
    v848 = (_BYTE *)(*(_QWORD *)v4)++;
    *v848 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 2117), v904, 0, 0);
    v849 = (_BYTE *)(*(_QWORD *)v4)++;
    *v849 = 44;
    v850 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v850 = *v890;
    v851 = 0;
    v852 = 48;
    do
    {
      *(_QWORD *)v4 = v850 + 1;
      *v850 = v852;
      v850 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v850 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v850;
      }
      v852 = a0x_0[++v851];
    }
    while (v851 != 2);
    sprintf_1X((char **)v4, *(unsigned __int8 *)(v206 + 2118));
    v853 = (_BYTE *)(*(_QWORD *)v4)++;
    *v853 = 44;
    v854 = *(char **)v4;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      v854 = *v890;
    v855 = 0;
    v856 = 48;
    do
    {
      *(_QWORD *)v4 = v854 + 1;
      *v854 = v856;
      v854 = *(char **)v4;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      {
        v854 = *(char **)(v4 + 16);
        *(_QWORD *)v4 = v854;
      }
      v856 = a0x_0[++v855];
    }
    while (v855 != 2);
    sprintf_1X((char **)v4, *(unsigned __int8 *)(v206 + 2119));
    v857 = (_BYTE *)(*(_QWORD *)v4)++;
    *v857 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    sprintf1da((_QWORD *)v4, *(unsigned __int8 *)(v206 + 2120), v904, 0, 0);
    v858 = (_BYTE *)(*(_QWORD *)v4)++;
    *v858 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    nzet(v4, 0xAu, v904, 0, 0, 0);
    v859 = (_BYTE *)(*(_QWORD *)v4)++;
    *v859 = 44;
    if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
    v860 = *(_DWORD *)(v206 + 2128) - *(_DWORD *)(v206 + 2124);
    if (v860 >= 0)
      v861 = *(_DWORD *)(v206 + 2128) - *(_DWORD *)(v206 + 2124);
    else
      v861 = *(_DWORD *)(v206 + 2124) - *(_DWORD *)(v206 + 2128);
    sprintf1da((_QWORD *)v4, v861, v904, 0, v860 >> 31);
    v862 = v206;
    v863 = 0;
    v864 = v862 + 2132;
    do
    {
      v865 = (_BYTE *)(*(_QWORD *)v4)++;
      *v865 = 44;
      if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 24))
        *(_QWORD *)v4 = *(_QWORD *)(v4 + 16);
      v866 = *(_DWORD *)(v864 + v863) - *(_DWORD *)(v868 + 2124);
      if (v866 >= 0)
        v867 = *(_DWORD *)(v864 + v863) - *(_DWORD *)(v868 + 2124);
      else
        v867 = *(_DWORD *)(v868 + 2124) - *(_DWORD *)(v864 + v863);
      sprintf1da((_QWORD *)v4, v867, v904, 0, v866 >> 31);
      v863 += 4;
    }
    while (v863 != 36);
    return NMEA_Add_checksum(v4, v818);
  }
  return result;
}

char **NMEA_Encode_PDBGE_Constell(char **a1, int a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;
  char v9;
  uint64_t v10;
  char *v11;
  unsigned __int16 *v12;
  unsigned __int8 *v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  double *v21;
  double *v22;
  const char *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  double v33;
  double v34;
  double v35;
  double v36;
  char v37;
  char *v38;
  unsigned __int8 *v39;
  int v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  double v50;
  double v51;
  unsigned int v52;
  char *v53;
  double v54;
  double v55;
  unsigned int v56;
  char *v58;
  _BYTE v59[15];
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v7 = (*a1)++;
  *v7 = 36;
  v8 = *a1;
  if (*a1 >= a1[3])
    v8 = a1[2];
  v9 = 80;
  v10 = 1u;
  v11 = v8;
  do
  {
    *a1 = v11 + 1;
    *v11 = v9;
    v11 = *a1;
    if (*a1 >= a1[3])
    {
      v11 = a1[2];
      *a1 = v11;
    }
    v9 = aPdbge[v10++];
  }
  while (v10 != 7);
  v58 = v8;
  sprintf_HHMMSS(a1, a3);
  switch(a2)
  {
    case 1:
      v12 = (unsigned __int16 *)(a4 + 162);
      v13 = (unsigned __int8 *)(a4 + 164);
      v14 = (unsigned __int16 *)(a4 + 166);
      v15 = (unsigned __int16 *)(a4 + 168);
      v16 = (unsigned __int16 *)(a4 + 170);
      v17 = (unsigned __int16 *)(a4 + 172);
      v18 = (unsigned __int16 *)(a4 + 174);
      v19 = (unsigned __int8 *)(a4 + 176);
      v20 = (unsigned __int8 *)(a4 + 177);
      v21 = (double *)(a4 + 184);
      v22 = (double *)(a4 + 192);
      v23 = "G,";
      goto LABEL_16;
    case 2:
      v12 = (unsigned __int16 *)(a4 + 242);
      v13 = (unsigned __int8 *)(a4 + 244);
      v14 = (unsigned __int16 *)(a4 + 246);
      v15 = (unsigned __int16 *)(a4 + 248);
      v16 = (unsigned __int16 *)(a4 + 250);
      v17 = (unsigned __int16 *)(a4 + 252);
      v18 = (unsigned __int16 *)(a4 + 254);
      v19 = (unsigned __int8 *)(a4 + 256);
      v20 = (unsigned __int8 *)(a4 + 257);
      v21 = (double *)(a4 + 264);
      v22 = (double *)(a4 + 272);
      v23 = "R,";
      goto LABEL_16;
    case 3:
      v12 = (unsigned __int16 *)(a4 + 282);
      v13 = (unsigned __int8 *)(a4 + 284);
      v14 = (unsigned __int16 *)(a4 + 286);
      v15 = (unsigned __int16 *)(a4 + 288);
      v16 = (unsigned __int16 *)(a4 + 290);
      v17 = (unsigned __int16 *)(a4 + 292);
      v18 = (unsigned __int16 *)(a4 + 294);
      v19 = (unsigned __int8 *)(a4 + 296);
      v20 = (unsigned __int8 *)(a4 + 297);
      v21 = (double *)(a4 + 304);
      v22 = (double *)(a4 + 312);
      v23 = "E,";
      goto LABEL_16;
    case 4:
      v12 = (unsigned __int16 *)(a4 + 322);
      v13 = (unsigned __int8 *)(a4 + 324);
      v14 = (unsigned __int16 *)(a4 + 326);
      v15 = (unsigned __int16 *)(a4 + 328);
      v16 = (unsigned __int16 *)(a4 + 330);
      v17 = (unsigned __int16 *)(a4 + 332);
      v18 = (unsigned __int16 *)(a4 + 334);
      v19 = (unsigned __int8 *)(a4 + 336);
      v20 = (unsigned __int8 *)(a4 + 337);
      v21 = (double *)(a4 + 344);
      v22 = (double *)(a4 + 352);
      v23 = "C,";
      goto LABEL_16;
    case 5:
      v12 = (unsigned __int16 *)(a4 + 202);
      v13 = (unsigned __int8 *)(a4 + 204);
      v14 = (unsigned __int16 *)(a4 + 206);
      v15 = (unsigned __int16 *)(a4 + 208);
      v16 = (unsigned __int16 *)(a4 + 210);
      v17 = (unsigned __int16 *)(a4 + 212);
      v18 = (unsigned __int16 *)(a4 + 214);
      v19 = (unsigned __int8 *)(a4 + 216);
      v20 = (unsigned __int8 *)(a4 + 217);
      v21 = (double *)(a4 + 224);
      v22 = (double *)(a4 + 232);
      v23 = "Q,";
      goto LABEL_16;
    case 6:
      v12 = (unsigned __int16 *)(a4 + 362);
      v13 = (unsigned __int8 *)(a4 + 364);
      v14 = (unsigned __int16 *)(a4 + 366);
      v15 = (unsigned __int16 *)(a4 + 368);
      v16 = (unsigned __int16 *)(a4 + 370);
      v17 = (unsigned __int16 *)(a4 + 372);
      v18 = (unsigned __int16 *)(a4 + 374);
      v19 = (unsigned __int8 *)(a4 + 376);
      v20 = (unsigned __int8 *)(a4 + 377);
      v21 = (double *)(a4 + 384);
      v22 = (double *)(a4 + 392);
      v23 = "N,";
      goto LABEL_16;
    case 7:
      v12 = (unsigned __int16 *)(a4 + 402);
      v13 = (unsigned __int8 *)(a4 + 404);
      v14 = (unsigned __int16 *)(a4 + 406);
      v15 = (unsigned __int16 *)(a4 + 408);
      v16 = (unsigned __int16 *)(a4 + 410);
      v17 = (unsigned __int16 *)(a4 + 412);
      v18 = (unsigned __int16 *)(a4 + 414);
      v19 = (unsigned __int8 *)(a4 + 416);
      v20 = (unsigned __int8 *)(a4 + 417);
      v21 = (double *)(a4 + 424);
      v22 = (double *)(a4 + 432);
      v23 = "S,";
LABEL_16:
      v35 = *v21;
      v32 = *v20;
      v31 = *v19;
      v30 = *v18;
      v29 = *v17;
      v28 = *v16;
      v27 = *v15;
      v26 = *v14;
      v25 = *v13;
      v24 = *v12;
      v36 = *v22;
      v37 = *v23;
      if (*v23)
      {
        v38 = *a1;
        v39 = (unsigned __int8 *)(v23 + 1);
        do
        {
          *a1 = v38 + 1;
          *v38 = v37;
          v38 = *a1;
          if (*a1 >= a1[3])
          {
            v38 = a1[2];
            *a1 = v38;
          }
          v40 = *v39++;
          v37 = v40;
        }
        while (v40);
      }
      v33 = v35 * 100.0;
      v34 = v36 * 100.0;
      break;
    default:
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0.0;
      v34 = 0.0;
      break;
  }
  sprintf1da(a1, v24, v59, 0, 0);
  v41 = (*a1)++;
  *v41 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  sprintf1da(a1, v25, v59, 0, 0);
  v42 = (*a1)++;
  *v42 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  sprintf1da(a1, v26, v59, 0, 0);
  v43 = (*a1)++;
  *v43 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  sprintf1da(a1, v27, v59, 0, 0);
  v44 = (*a1)++;
  *v44 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  sprintf1da(a1, v28, v59, 0, 0);
  v45 = (*a1)++;
  *v45 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  sprintf1da(a1, v29, v59, 0, 0);
  v46 = (*a1)++;
  *v46 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  sprintf1da(a1, v30, v59, 0, 0);
  v47 = (*a1)++;
  *v47 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  sprintf1da(a1, v31, v59, 0, 0);
  v48 = (*a1)++;
  *v48 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  sprintf1da(a1, v32, v59, 0, 0);
  v49 = (*a1)++;
  *v49 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  v50 = -0.5;
  if (v33 > 0.0)
    v50 = 0.5;
  v51 = v33 + v50;
  if (v51 <= 2147483650.0)
  {
    if (v51 >= -2147483650.0)
      v52 = (int)v51;
    else
      v52 = 0x80000000;
  }
  else
  {
    v52 = 0x7FFFFFFF;
  }
  sprintf_3f((uint64_t)a1, v52, 3);
  v53 = (*a1)++;
  *v53 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  v54 = -0.5;
  if (v34 > 0.0)
    v54 = 0.5;
  v55 = v34 + v54;
  if (v55 <= 2147483650.0)
  {
    if (v55 >= -2147483650.0)
      v56 = (int)v55;
    else
      v56 = 0x80000000;
  }
  else
  {
    v56 = 0x7FFFFFFF;
  }
  sprintf_3f((uint64_t)a1, v56, 3);
  return NMEA_Add_checksum((uint64_t)a1, v58);
}

char **NMEA_Encode_PDBGI_Constell(char **a1, int a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;
  char v9;
  uint64_t v10;
  char *v11;
  __int128 *v12;
  const char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t i;
  char v30;
  char *v31;
  uint64_t j;
  char v33;
  char *v34;
  uint64_t k;
  char v36;
  double v37;
  double v38;
  unsigned int v39;
  char *v40;
  double v41;
  double v42;
  unsigned int v43;
  char *v44;
  double v45;
  double v46;
  unsigned int v47;
  char *v48;
  double v49;
  double v50;
  unsigned int v51;
  char *v52;
  double v53;
  double v54;
  unsigned int v55;
  char *v56;
  double v57;
  double v58;
  unsigned int v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[15];
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v7 = (*a1)++;
  *v7 = 36;
  v8 = *a1;
  if (*a1 >= a1[3])
    v8 = a1[2];
  v9 = 80;
  v10 = 1u;
  v11 = v8;
  do
  {
    *a1 = v11 + 1;
    *v11 = v9;
    v11 = *a1;
    if (*a1 >= a1[3])
    {
      v11 = a1[2];
      *a1 = v11;
    }
    v9 = aPdbgi[v10++];
  }
  while (v10 != 7);
  sprintf_HHMMSS(a1, a3);
  switch(a2)
  {
    case 1:
      v12 = (__int128 *)(a4 + 504);
      v13 = "G,";
      goto LABEL_15;
    case 2:
      v12 = (__int128 *)(a4 + 696);
      v13 = "R,";
      goto LABEL_15;
    case 3:
      v12 = (__int128 *)(a4 + 792);
      v13 = "E,";
      goto LABEL_15;
    case 4:
      v12 = (__int128 *)(a4 + 888);
      v13 = "C,";
      goto LABEL_15;
    case 5:
      v12 = (__int128 *)(a4 + 600);
      v13 = "Q,";
      goto LABEL_15;
    case 6:
      v12 = (__int128 *)(a4 + 984);
      v13 = "N,";
      goto LABEL_15;
    case 7:
      v12 = (__int128 *)(a4 + 1080);
      v13 = "S,";
LABEL_15:
      v14 = v12[3];
      v67 = v12[2];
      v68 = v14;
      v15 = v12[5];
      v69 = v12[4];
      v70 = v15;
      v16 = v12[1];
      v65 = *v12;
      v66 = v16;
      v17 = *v13;
      if (*v13)
      {
        v18 = *a1;
        v19 = (unsigned __int8 *)(v13 + 1);
        do
        {
          *a1 = v18 + 1;
          *v18 = v17;
          v18 = *a1;
          if (*a1 >= a1[3])
          {
            v18 = a1[2];
            *a1 = v18;
          }
          v20 = *v19++;
          v17 = v20;
        }
        while (v20);
      }
      break;
    default:
      break;
  }
  sprintf1da(a1, BYTE1(v65), v71, 0, 0);
  v21 = (*a1)++;
  *v21 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  sprintf1da(a1, BYTE2(v65), v71, 0, 0);
  v22 = (*a1)++;
  *v22 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  sprintf1da(a1, BYTE3(v65), v71, 0, 0);
  v23 = (*a1)++;
  *v23 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  sprintf1da(a1, BYTE4(v65), v71, 0, 0);
  v24 = (*a1)++;
  *v24 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  sprintf1da(a1, BYTE6(v65), v71, 0, 0);
  v25 = (*a1)++;
  *v25 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  sprintf1da(a1, BYTE7(v65), v71, 0, 0);
  v26 = (*a1)++;
  *v26 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  sprintf1da(a1, BYTE8(v65), v71, 0, 0);
  v27 = (*a1)++;
  *v27 = 44;
  v28 = *a1;
  if (*a1 >= a1[3])
    v28 = a1[2];
  for (i = 9; i != 17; ++i)
  {
    v30 = *((_BYTE *)&v65 + i);
    if (v30)
    {
      *a1 = v28 + 1;
      *v28 = v30;
      v28 = *a1;
      if (*a1 >= a1[3])
      {
        v28 = a1[2];
        *a1 = v28;
      }
    }
  }
  *a1 = v28 + 1;
  *v28 = 44;
  v31 = *a1;
  if (*a1 >= a1[3])
    v31 = a1[2];
  for (j = 17; j != 25; ++j)
  {
    v33 = *((_BYTE *)&v65 + j);
    if (v33)
    {
      *a1 = v31 + 1;
      *v31 = v33;
      v31 = *a1;
      if (*a1 >= a1[3])
      {
        v31 = a1[2];
        *a1 = v31;
      }
    }
  }
  *a1 = v31 + 1;
  *v31 = 44;
  v34 = *a1;
  if (*a1 >= a1[3])
    v34 = a1[2];
  for (k = 25; k != 33; ++k)
  {
    v36 = *((_BYTE *)&v65 + k);
    if (v36)
    {
      *a1 = v34 + 1;
      *v34 = v36;
      v34 = *a1;
      if (*a1 >= a1[3])
      {
        v34 = a1[2];
        *a1 = v34;
      }
    }
  }
  *a1 = v34 + 1;
  *v34 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  v37 = -0.5;
  if (*((double *)&v67 + 1) * 10.0 > 0.0)
    v37 = 0.5;
  v38 = *((double *)&v67 + 1) * 10.0 + v37;
  if (v38 <= 2147483650.0)
  {
    if (v38 >= -2147483650.0)
      v39 = (int)v38;
    else
      v39 = 0x80000000;
  }
  else
  {
    v39 = 0x7FFFFFFF;
  }
  sprintf_2f((uint64_t)a1, v39);
  v40 = (*a1)++;
  *v40 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  v41 = -0.5;
  if (*(double *)&v68 * 10.0 > 0.0)
    v41 = 0.5;
  v42 = *(double *)&v68 * 10.0 + v41;
  if (v42 <= 2147483650.0)
  {
    if (v42 >= -2147483650.0)
      v43 = (int)v42;
    else
      v43 = 0x80000000;
  }
  else
  {
    v43 = 0x7FFFFFFF;
  }
  sprintf_2f((uint64_t)a1, v43);
  v44 = (*a1)++;
  *v44 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  v45 = -0.5;
  if (*((double *)&v68 + 1) * 10.0 > 0.0)
    v45 = 0.5;
  v46 = *((double *)&v68 + 1) * 10.0 + v45;
  if (v46 <= 2147483650.0)
  {
    if (v46 >= -2147483650.0)
      v47 = (int)v46;
    else
      v47 = 0x80000000;
  }
  else
  {
    v47 = 0x7FFFFFFF;
  }
  sprintf_2f((uint64_t)a1, v47);
  v48 = (*a1)++;
  *v48 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  v49 = -0.5;
  if (*(double *)&v69 * 10.0 > 0.0)
    v49 = 0.5;
  v50 = *(double *)&v69 * 10.0 + v49;
  if (v50 <= 2147483650.0)
  {
    if (v50 >= -2147483650.0)
      v51 = (int)v50;
    else
      v51 = 0x80000000;
  }
  else
  {
    v51 = 0x7FFFFFFF;
  }
  sprintf_2f((uint64_t)a1, v51);
  v52 = (*a1)++;
  *v52 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  v53 = -0.5;
  if (*((double *)&v69 + 1) * 10.0 > 0.0)
    v53 = 0.5;
  v54 = *((double *)&v69 + 1) * 10.0 + v53;
  if (v54 <= 2147483650.0)
  {
    if (v54 >= -2147483650.0)
      v55 = (int)v54;
    else
      v55 = 0x80000000;
  }
  else
  {
    v55 = 0x7FFFFFFF;
  }
  sprintf_2f((uint64_t)a1, v55);
  v56 = (*a1)++;
  *v56 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  v57 = -0.5;
  if (*(double *)&v70 * 10.0 > 0.0)
    v57 = 0.5;
  v58 = *(double *)&v70 * 10.0 + v57;
  if (v58 <= 2147483650.0)
  {
    if (v58 >= -2147483650.0)
      v59 = (int)v58;
    else
      v59 = 0x80000000;
  }
  else
  {
    v59 = 0x7FFFFFFF;
  }
  sprintf_2f((uint64_t)a1, v59);
  v60 = (*a1)++;
  *v60 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  sprintf1da(a1, BYTE8(v70), v71, 0, 0);
  v61 = (*a1)++;
  *v61 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  sprintf1da(a1, BYTE9(v70), v71, 0, 0);
  v62 = (*a1)++;
  *v62 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  sprintf1da(a1, BYTE10(v70), v71, 0, 0);
  v63 = (*a1)++;
  *v63 = 44;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  return NMEA_Add_checksum((uint64_t)a1, v8);
}

char **NMEA_Encode_PDBGO(char **a1, int a2, uint64_t a3, unint64_t *a4)
{
  char *v7;
  char *v8;
  char **v9;
  char v10;
  uint64_t v11;
  char *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  const char *v19;
  uint64_t v20;
  char *v21;
  char v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char **v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  char *v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  char *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  char v57;

  v7 = (*a1)++;
  *v7 = 36;
  v8 = *a1;
  if (*a1 >= a1[3])
    v8 = a1[2];
  v9 = a1 + 2;
  v10 = 80;
  v11 = 1u;
  v12 = v8;
  do
  {
    *a1 = v12 + 1;
    *v12 = v10;
    v12 = *a1;
    if (*a1 >= a1[3])
    {
      v12 = a1[2];
      *a1 = v12;
    }
    v10 = aPdbgo[v11++];
  }
  while (v11 != 7);
  sprintf_HHMMSS(a1, a3);
  switch(a2)
  {
    case 1:
      v13 = a4 + 155;
      v14 = a4 + 156;
      v15 = a4 + 157;
      v16 = a4 + 158;
      v17 = a4 + 159;
      v18 = a4 + 160;
      v19 = "G,";
      goto LABEL_23;
    case 2:
      v13 = a4 + 169;
      v14 = a4 + 170;
      v15 = a4 + 171;
      v16 = a4 + 172;
      v17 = a4 + 173;
      v18 = a4 + 174;
      v19 = "R,";
      goto LABEL_23;
    case 3:
      v13 = a4 + 176;
      v14 = a4 + 177;
      v15 = a4 + 178;
      v16 = a4 + 179;
      v17 = a4 + 180;
      v18 = a4 + 181;
      v19 = "E,";
      goto LABEL_23;
    case 4:
      v13 = a4 + 183;
      v14 = a4 + 184;
      v15 = a4 + 185;
      v16 = a4 + 186;
      v17 = a4 + 187;
      v18 = a4 + 188;
      v19 = "C,";
      goto LABEL_23;
    case 5:
      v13 = a4 + 162;
      v14 = a4 + 163;
      v15 = a4 + 164;
      v16 = a4 + 165;
      v17 = a4 + 166;
      v18 = a4 + 167;
      v19 = "Q,";
      goto LABEL_23;
    case 6:
      v13 = a4 + 190;
      v14 = a4 + 191;
      v15 = a4 + 192;
      v16 = a4 + 193;
      v17 = a4 + 194;
      v18 = a4 + 195;
      v19 = "N,";
      goto LABEL_23;
    case 7:
      v13 = a4 + 197;
      v14 = a4 + 198;
      v15 = a4 + 199;
      v16 = a4 + 200;
      v17 = a4 + 201;
      v18 = a4 + 202;
      v19 = "S,";
LABEL_23:
      v25 = *v17;
      v29 = *v16;
      v30 = *v15;
      v26 = *v14;
      v31 = *v13;
      v24 = *v18;
      v32 = *v19;
      v33 = *a1;
      if (*v19)
      {
        v34 = (unsigned __int8 *)(v19 + 1);
        do
        {
          *a1 = v33 + 1;
          *v33 = v32;
          v33 = *a1;
          if (*a1 >= a1[3])
          {
            v33 = a1[2];
            *a1 = v33;
          }
          v35 = *v34++;
          v32 = v35;
        }
        while (v35);
      }
      v36 = 0;
      v37 = 66;
      do
      {
        *a1 = v33 + 1;
        *v33 = v37;
        v33 = *a1;
        if (*a1 >= a1[3])
        {
          v33 = a1[2];
          *a1 = v33;
        }
        v37 = aB_0[++v36];
      }
      while (v36 != 2);
      if (v31)
      {
        v38 = 0;
        v39 = 48;
        do
        {
          *a1 = v33 + 1;
          *v33 = v39;
          v33 = *a1;
          if (*a1 >= a1[3])
          {
            v33 = a1[2];
            *a1 = v33;
          }
          v39 = a0x_0[++v38];
        }
        while (v38 != 2);
        sprintf_1X(a1, v31);
        v33 = *a1;
      }
      *a1 = v33 + 1;
      *v33 = 44;
      v40 = *a1;
      if (*a1 >= a1[3])
        v40 = *v9;
      if (v30)
      {
        v41 = 0;
        v42 = 48;
        do
        {
          *a1 = v40 + 1;
          *v40 = v42;
          v40 = *a1;
          if (*a1 >= a1[3])
          {
            v40 = a1[2];
            *a1 = v40;
          }
          v42 = a0x_0[++v41];
        }
        while (v41 != 2);
        sprintf_1X(a1, v30);
        v40 = *a1;
      }
      *a1 = v40 + 1;
      *v40 = 44;
      v27 = *a1;
      if (*a1 >= a1[3])
        v27 = *v9;
      if (!v29)
        goto LABEL_55;
      v43 = 0;
      v44 = 48;
      do
      {
        *a1 = v27 + 1;
        *v27 = v44;
        v27 = *a1;
        if (*a1 >= a1[3])
        {
          v27 = a1[2];
          *a1 = v27;
        }
        v44 = a0x_0[++v43];
      }
      while (v43 != 2);
      sprintf_1X(a1, v29);
      v28 = a1;
LABEL_54:
      v27 = *v28;
LABEL_55:
      *a1 = v27 + 1;
      *v27 = 44;
      v45 = *a1;
      if (*a1 >= a1[3])
        v45 = *v9;
      v46 = 0;
      v47 = 69;
      do
      {
        *a1 = v45 + 1;
        *v45 = v47;
        v45 = *a1;
        if (*a1 >= a1[3])
        {
          v45 = a1[2];
          *a1 = v45;
        }
        v47 = aE_2[++v46];
      }
      while (v46 != 2);
      if (v26)
      {
        v48 = 0;
        v49 = 48;
        do
        {
          *a1 = v45 + 1;
          *v45 = v49;
          v45 = *a1;
          if (*a1 >= a1[3])
          {
            v45 = a1[2];
            *a1 = v45;
          }
          v49 = a0x_0[++v48];
        }
        while (v48 != 2);
        sprintf_1X(a1, v26);
        v45 = *a1;
      }
      *a1 = v45 + 1;
      *v45 = 44;
      v50 = *a1;
      if (*a1 >= a1[3])
        v50 = *v9;
      v51 = 0;
      v52 = 82;
      do
      {
        *a1 = v50 + 1;
        *v50 = v52;
        v50 = *a1;
        if (*a1 >= a1[3])
        {
          v50 = a1[2];
          *a1 = v50;
        }
        v52 = aR_0[++v51];
      }
      while (v51 != 2);
      if (v25)
      {
        v53 = 0;
        v54 = 48;
        do
        {
          *a1 = v50 + 1;
          *v50 = v54;
          v50 = *a1;
          if (*a1 >= a1[3])
          {
            v50 = a1[2];
            *a1 = v50;
          }
          v54 = a0x_0[++v53];
        }
        while (v53 != 2);
        sprintf_1X(a1, v25);
        v50 = *a1;
      }
      *a1 = v50 + 1;
      *v50 = 44;
      v55 = *a1;
      if (*a1 >= a1[3])
      {
        v55 = a1[2];
        *a1 = v55;
      }
      if (v24)
      {
        v56 = 0;
        v57 = 48;
        do
        {
          *a1 = v55 + 1;
          *v55 = v57;
          v55 = *a1;
          if (*a1 >= a1[3])
          {
            v55 = a1[2];
            *a1 = v55;
          }
          v57 = a0x_0[++v56];
        }
        while (v56 != 2);
        sprintf_1X(a1, v24);
      }
      return NMEA_Add_checksum((uint64_t)a1, v8);
    default:
      v20 = 0;
      v21 = *a1;
      v22 = 66;
      do
      {
        *a1 = v21 + 1;
        *v21 = v22;
        v21 = *a1;
        if (*a1 >= a1[3])
        {
          v21 = a1[2];
          *a1 = v21;
        }
        v22 = aB_0[++v20];
      }
      while (v20 != 2);
      *a1 = v21 + 1;
      *v21 = 44;
      v23 = *a1;
      if (*a1 >= a1[3])
        v23 = *v9;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      *a1 = v23 + 1;
      *v23 = 44;
      v27 = *a1;
      v28 = a1 + 2;
      if (*a1 < a1[3])
        goto LABEL_55;
      goto LABEL_54;
  }
}

uint64_t sprintf_LatLon(char **a1, double a2, double a3)
{
  int v6;
  double v7;
  unsigned int v8;
  double v9;
  double v10;
  double v11;
  signed int v12;
  char *v13;
  const char *v14;
  char v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  double v19;
  unsigned int v20;
  double v21;
  double v22;
  double v23;
  signed int v24;
  char *v25;
  uint64_t result;
  const char *v27;
  char v28;
  char *v29;
  unsigned __int8 *v30;
  int v31;

  v6 = (int)a2;
  v7 = fabs((a2 - (double)(int)a2) * 60.0);
  if (v6 >= 0)
    v8 = v6;
  else
    v8 = -v6;
  v9 = v7 * 1000000.0;
  v10 = -0.5;
  if (v9 > 0.0)
    v10 = 0.5;
  v11 = v9 + v10;
  if (v11 > 2147483650.0)
  {
    sprintf_02d(a1, v8);
    v12 = 0x7FFFFFFF;
    goto LABEL_13;
  }
  if (v11 >= -2147483650.0)
  {
    v12 = (int)v11;
    sprintf_02d(a1, v8);
    if (v12 >= 10000000)
      goto LABEL_13;
  }
  else
  {
    sprintf_02d(a1, v8);
    v12 = 0x80000000;
  }
  v13 = (*a1)++;
  *v13 = 48;
  if (*a1 >= a1[3])
    *a1 = a1[2];
LABEL_13:
  sprintf_7f((uint64_t)a1, v12, 7);
  v14 = ",N,";
  if (a2 < 0.0)
    v14 = ",S,";
  v15 = *v14;
  if (*v14)
  {
    v16 = *a1;
    v17 = (unsigned __int8 *)(v14 + 1);
    do
    {
      *a1 = v16 + 1;
      *v16 = v15;
      v16 = *a1;
      if (*a1 >= a1[3])
      {
        v16 = a1[2];
        *a1 = v16;
      }
      v18 = *v17++;
      v15 = v18;
    }
    while (v18);
  }
  v19 = fabs((a3 - (double)(int)a3) * 60.0);
  if ((int)a3 >= 0)
    v20 = (int)a3;
  else
    v20 = -(int)a3;
  v21 = v19 * 1000000.0;
  v22 = -0.5;
  if (v21 > 0.0)
    v22 = 0.5;
  v23 = v21 + v22;
  if (v23 > 2147483650.0)
  {
    sprintf_03d((uint64_t)a1, v20);
    v24 = 0x7FFFFFFF;
    goto LABEL_32;
  }
  if (v23 >= -2147483650.0)
  {
    v24 = (int)v23;
    sprintf_03d((uint64_t)a1, v20);
    if (v24 >= 10000000)
      goto LABEL_32;
  }
  else
  {
    sprintf_03d((uint64_t)a1, v20);
    v24 = 0x80000000;
  }
  v25 = (*a1)++;
  *v25 = 48;
  if (*a1 >= a1[3])
    *a1 = a1[2];
LABEL_32:
  result = sprintf_7f((uint64_t)a1, v24, 7);
  v27 = ",E,";
  if (a3 < 0.0)
    v27 = ",W,";
  v28 = *v27;
  if (*v27)
  {
    v29 = *a1;
    v30 = (unsigned __int8 *)(v27 + 1);
    do
    {
      *a1 = v29 + 1;
      *v29 = v28;
      v29 = *a1;
      if (*a1 >= a1[3])
      {
        v29 = a1[2];
        *a1 = v29;
      }
      v31 = *v30++;
      v28 = v31;
    }
    while (v31);
  }
  return result;
}

_QWORD *sprintf_HHMMSS(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _BYTE *v4;
  _BYTE *v5;

  v2 = result;
  if (*(_BYTE *)(a2 + 16))
  {
    sprintf_02d(result, *(unsigned __int16 *)(a2 + 24));
    sprintf_02d(v2, *(unsigned __int16 *)(a2 + 26));
    sprintf_02d(v2, *(unsigned __int16 *)(a2 + 28));
    v4 = (_BYTE *)(*v2)++;
    *v4 = 46;
    if (*v2 >= v2[3])
      *v2 = v2[2];
    result = (_QWORD *)sprintf_03d((uint64_t)v2, *(unsigned __int16 *)(a2 + 30));
  }
  v5 = (_BYTE *)(*v2)++;
  *v5 = 44;
  if (*v2 >= v2[3])
    *v2 = v2[2];
  return result;
}

char **NMEA_Add_checksum(uint64_t a1, _BYTE *a2)
{
  char v3;
  int v4;
  unint64_t v5;
  char **result;
  _BYTE *v7;

  if (*(_BYTE **)a1 == a2)
  {
    v5 = 0;
  }
  else
  {
    v3 = 0;
    do
    {
      v4 = *a2;
      if (v4 == 32)
      {
        LOBYTE(v4) = 48;
        *a2 = 48;
      }
      if ((unint64_t)++a2 >= *(_QWORD *)(a1 + 24))
        a2 = *(_BYTE **)(a1 + 16);
      v3 ^= v4;
    }
    while (a2 != *(_BYTE **)a1);
    v5 = v3;
  }
  *(_QWORD *)a1 = a2 + 1;
  *a2 = 42;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 24))
    *(_QWORD *)a1 = *(_QWORD *)(a1 + 16);
  result = sprintf_02x((char **)a1, v5);
  v7 = (_BYTE *)(*(_QWORD *)a1)++;
  *v7 = 10;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 24))
    *(_QWORD *)a1 = *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t sprintf_DOP(uint64_t result, double a2)
{
  double v2;
  double v3;
  double v4;
  unsigned int v5;

  if (a2 < 99.0)
  {
    v2 = a2 * 100.0;
    v3 = -0.5;
    if (v2 > 0.0)
      v3 = 0.5;
    v4 = v2 + v3;
    if (v4 <= 2147483650.0)
    {
      if (v4 >= -2147483650.0)
        v5 = (int)v4;
      else
        v5 = 0x80000000;
    }
    else
    {
      v5 = 0x7FFFFFFF;
    }
    return sprintf_3f(result, v5, 3);
  }
  return result;
}

_QWORD *sprintf_AccEst(_QWORD *result, double a2)
{
  double v2;
  double v3;
  int v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;
  double v9;
  double v10;
  double v11;
  unsigned int v12;
  unsigned int v13;
  double v14;
  double v15;
  double v16;
  unsigned int v17;
  _BYTE v18[15];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a2 < 99999.0)
  {
    if (a2 <= 9.9)
    {
      if (a2 <= 0.99)
      {
        if (a2 <= 0.099)
        {
          v14 = a2 * 1000.0;
          v15 = -0.5;
          if (v14 > 0.0)
            v15 = 0.5;
          v16 = v14 + v15;
          if (v16 <= 2147483650.0)
          {
            if (v16 >= -2147483650.0)
              v17 = (int)v16;
            else
              v17 = 0x80000000;
          }
          else
          {
            v17 = 0x7FFFFFFF;
          }
          return (_QWORD *)sprintf_4f((uint64_t)result, v17, 4);
        }
        else
        {
          v9 = a2 * 100.0;
          v10 = -0.5;
          if (v9 > 0.0)
            v10 = 0.5;
          v11 = v9 + v10;
          if (v11 <= 2147483650.0)
          {
            if (v11 >= -2147483650.0)
              v12 = (int)v11;
            else
              v12 = 0x80000000;
          }
          else
          {
            v12 = 0x7FFFFFFF;
          }
          return (_QWORD *)sprintf_3f((uint64_t)result, v12, 3);
        }
      }
      else
      {
        v5 = a2 * 10.0;
        v6 = -0.5;
        if (v5 > 0.0)
          v6 = 0.5;
        v7 = v5 + v6;
        if (v7 <= 2147483650.0)
        {
          if (v7 >= -2147483650.0)
            v8 = (int)v7;
          else
            v8 = 0x80000000;
        }
        else
        {
          v8 = 0x7FFFFFFF;
        }
        return (_QWORD *)sprintf_2f((uint64_t)result, v8);
      }
    }
    else
    {
      v2 = -0.5;
      if (a2 > 0.0)
        v2 = 0.5;
      v3 = v2 + a2;
      if (v3 <= 2147483650.0)
      {
        if (v3 >= -2147483650.0)
          v4 = (int)v3;
        else
          v4 = 0x80000000;
      }
      else
      {
        v4 = 0x7FFFFFFF;
      }
      if (v4 >= 0)
        v13 = v4;
      else
        v13 = -v4;
      return sprintf1da(result, v13, v18, 0, v4 >> 31);
    }
  }
  return result;
}

void ECEF2Geo(double *a1, uint64_t a2, uint64_t a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int v22;
  double v23;
  double v24;
  double v25[4];

  v25[3] = *(double *)MEMORY[0x24BDAC8D0];
  v5 = *a1;
  if (*(_WORD *)a2)
  {
    v6 = v5 + *(double *)(a2 + 48);
    v7 = a1[1];
    v8 = a1[2];
    v9 = v7 + *(double *)(a2 + 56);
    v10 = v8 + *(double *)(a2 + 64);
    if (*(_BYTE *)(a2 + 2))
    {
      v11 = 0;
      v12 = (double *)(a2 + 88);
      do
      {
        v13 = v7 * *(v12 - 1) + *(v12 - 2) * v5;
        v14 = *v12;
        v12 += 3;
        v25[v11++] = v13 + v14 * v8;
      }
      while (v11 != 3);
      v5 = v6 + v25[0];
      v9 = v9 + v25[1];
      v10 = v10 + v25[2];
    }
    else
    {
      v5 = v5 + *(double *)(a2 + 48);
    }
  }
  else
  {
    v9 = a1[1];
    v10 = a1[2];
  }
  v15 = v9 * v9 + v5 * v5;
  v16 = *(double *)(a2 + 24);
  v17 = 1.0 / *(double *)(a2 + 16);
  v18 = v15 * v17;
  v19 = v10 * v10 * v17;
  v22 = 3;
  do
  {
    v20 = *(double *)(a2 + 32);
    v21 = *(double *)(a2 + 40) * v19;
    v16 = v16
        - ((v21 + v21) * (v16 * (v16 * v16))
         + v21 * (v16 * v16) * (v16 * v16)
         + (v18 + v21 - v20) * (v16 * v16)
         + v20 * -2.0 * v16
         - v20)
        / (v20 * -2.0
         + (v21 + v21) * 3.0 * (v16 * v16)
         + v21 * 4.0 * (v16 * (v16 * v16))
         + (v18 + v21 - v20 + v18 + v21 - v20) * v16);
    --v22;
  }
  while (v22);
  v23 = v16 + 1.0;
  if (fabs(v5) >= 0.001 || fabs(v9) >= 0.001)
  {
    *(long double *)(a3 + 8) = atan2(v9, v5);
  }
  else
  {
    *(_QWORD *)(a3 + 8) = 0;
    v24 = 0.0;
    if (fabs(v10) < 0.001)
      goto LABEL_16;
  }
  v24 = atan2(v10 * v23, sqrt(v15));
LABEL_16:
  *(double *)a3 = v24;
  *(double *)(a3 + 16) = *(double *)(a2 + 8)
                       * (sqrt(v19 + v18 / (v23 * v23))
                        * (1.0 - v16 * *(double *)(a2 + 40) / *(double *)(a2 + 24)));
}

BOOL NK_Body_Frame_Meas(unsigned int a1, double *a2, const double *a3, const double (*a4)[3], double a5, unsigned int a6, double *a7)
{
  double *v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 result;
  double v24;
  _OWORD v25[16];
  uint64_t v26;
  double v27[12];
  double v28[32];
  double v29[36];

  v29[33] = *(double *)MEMORY[0x24BDAC8D0];
  v10 = &v27[2];
  ECEF2FSD_RotM(a4, a5, (double (*)[3])v27);
  v11 = 0;
  v12 = *a2;
  v13 = a2[1];
  v14 = a2[2];
  do
  {
    v15 = *(v10 - 1) * v13 + *(v10 - 2) * v12;
    v16 = *v10;
    v10 += 3;
    v27[v11 + 9] = v15 + v16 * v14;
    ++v11;
  }
  while (v11 != 3);
  v17 = 0;
  v24 = 0.0;
  v18 = &v27[2];
  do
  {
    v26 = 0;
    memset(v25, 0, sizeof(v25));
    v19 = *((_QWORD *)v18 - 1);
    *((double *)v25 + a1) = *(v18 - 2);
    *((_QWORD *)v25 + a1 + 1) = v19;
    v20 = *(_QWORD *)v18;
    v18 += 3;
    *((_QWORD *)&v25[1] + a1) = v20;
    *((double *)v25 + a6) = v27[v17 + 9];
    result = umeas((_BOOL8)a7, a6, a3[v17++], (double *)v25, v29, v28, &v24, 1.0e20);
  }
  while (v17 != 3);
  return result;
}

uint64_t NK_Static_Filter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _BOOL4 v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  BOOL v25;
  double v27;
  double v29;
  double v30;
  double v31;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t result;
  unsigned int v47;
  double v48;
  double *v49;
  double v50;
  uint64_t v51;
  double v52;
  double v53;
  double v56;
  int v57;
  int v58;
  unsigned __int16 v59;
  uint64_t v60;
  _WORD *v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  double v65;
  double v66;
  double v67;
  int v68;
  double v69;
  int v70;
  __int16 v71;
  signed int v72;
  double v73;
  double v74;
  int v75;
  int v76;
  _BOOL4 v77;
  double v78;
  double v79;
  double v80;
  int v81;
  int v82;
  double v83;
  int v84;
  char v85;
  int v86;
  int v87;
  char v88;
  char v89;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v100;
  double *v101;
  char v102;
  uint64_t v103;
  double v104;
  float64x2_t v105;
  double v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  double *v114;
  __int128 v115;
  uint64_t v116;
  float64x2_t v117;
  double v118;
  double v119;
  uint64_t v120;
  _BYTE v121[36];
  __int128 v122;
  int v123;
  _OWORD v124[10];
  _BYTE __dst[728];
  _QWORD v126[6];

  v126[3] = *MEMORY[0x24BDAC8D0];
  v5 = a2 + 59928;
  v6 = a1 + 27116;
  v7 = *(_DWORD *)(a1 + 27120);
  if (v7 <= *(unsigned __int16 *)(a1 + 16) && *(_DWORD *)(a2 + 1872) == 1)
  {
    v8 = *(_DWORD *)(a1 + 148);
    if (v8 >= *(_DWORD *)(a1 + 152))
      v8 = *(_DWORD *)(a1 + 152);
    if (v8 >= *(_DWORD *)(a1 + 156))
      v8 = *(_DWORD *)(a1 + 156);
    v9 = v8 > 0xA;
  }
  else
  {
    v9 = 0;
  }
  memcpy(__dst, (const void *)(a1 + 976), sizeof(__dst));
  v10 = 0;
  v11 = *(double *)(a2 + 1584) - *(double *)&__dst[696];
  v12 = *(double *)(a2 + 1592) - *(double *)&__dst[704];
  v13 = *(double *)(a2 + 1600) - *(double *)&__dst[712];
  v14 = (double *)(a2 + 1752);
  do
  {
    v15 = v12 * *(v14 - 1) + *(v14 - 2) * v11;
    v16 = *v14;
    v14 += 3;
    *(double *)&v126[v10++] = v15 + v16 * v13;
  }
  while (v10 != 3);
  v18 = *(double *)v126;
  v17 = *(double *)&v126[1];
  v19 = sqrt(v17 * v17 + v18 * v18);
  v20 = *(double *)(v5 + 1488);
  v21 = *(double *)(v5 + 1496);
  *(double *)(a1 + 27216) = v19;
  *(double *)(a1 + 27240) = *(double *)(a1 + 27240) * 0.6 + v19 * 0.4;
  v22 = 4.0;
  if (v19 < 8.0)
  {
    v22 = 2.0;
    if (v19 >= 6.0)
      v22 = 3.0;
  }
  v23 = v20 + v21;
  v24 = *(double *)(a1 + 27232);
  if (*(_DWORD *)v6 >= 3u
    && (v19 > v24 ? (v25 = v22 * v22 <= v23) : (v25 = 1), !v25 ? (_ZF = *(_BYTE *)(a1 + 241) == 0) : (_ZF = 0), _ZF))
  {
    v27 = 10.0;
    if (v19 <= 10.0)
    {
      v31 = v24 + 0.5;
      if (v19 > v31 && v19 < 8.0)
        v27 = v31;
      else
        v27 = v19;
    }
  }
  else
  {
    v27 = 6.0;
    if (v19 <= 6.0 || v24 >= 6.0)
    {
      if (*(_DWORD *)(v6 + 88) == 3)
      {
        v29 = v24 + -0.003;
        v27 = v19;
        if (v19 > v24 + -0.003)
          goto LABEL_40;
        v30 = 0.003;
      }
      else
      {
        v29 = v24 + -0.01;
        v27 = v19;
        if (v19 > v24 + -0.01)
          goto LABEL_40;
        v30 = 0.01;
      }
      v25 = v24 <= v30;
      v27 = *(double *)(a1 + 27232);
      if (!v25)
        v27 = v29;
    }
  }
LABEL_40:
  *(double *)(a1 + 27232) = v27;
  v33 = *(_DWORD *)(v5 + 16);
  if (v33 == 1 && *(_DWORD *)(v5 + 12) != 1)
  {
    v34 = *(unsigned __int8 *)(v6 + 134);
  }
  else
  {
    *(_BYTE *)(v6 + 133) = v27 <= 4.0;
    v34 = v27 > 4.0;
    *(_BYTE *)(v6 + 134) = v34;
    if (v33 != 1)
    {
      if (v27 > 4.0)
        v35 = 8;
      else
        v35 = 4;
      *(_DWORD *)(v5 + 12) = v35;
      *(_DWORD *)(v5 + 16) = 0;
    }
  }
  v114 = (double *)(a2 + 1736);
  LOBYTE(v36) = *(_DWORD *)(v5 + 4) == 1 && *(_BYTE *)(v5 + 36) != 0;
  v37 = *(_DWORD *)(v6 + 240);
  if (v37 == 20)
  {
    v37 = 19;
    *(_DWORD *)(v6 + 240) = 19;
  }
  else if (!v37)
  {
    *(_OWORD *)(a1 + 27504) = 0u;
    *(_OWORD *)(a1 + 27488) = 0u;
    *(_OWORD *)(a1 + 27472) = 0u;
    *(_OWORD *)(a1 + 27456) = 0u;
    *(_OWORD *)(a1 + 27440) = 0u;
    *(_OWORD *)(a1 + 27424) = 0u;
    *(_OWORD *)(a1 + 27408) = 0u;
    *(_OWORD *)(a1 + 27392) = 0u;
    *(_OWORD *)(a1 + 27376) = 0u;
    *(_OWORD *)(a1 + 27360) = 0u;
    goto LABEL_57;
  }
  v38 = v37;
  do
  {
    *(_QWORD *)(a1 + 27360 + 8 * v38) = *(_QWORD *)(a1 + 8 * (v38 - 1) + 27360);
    --v38;
  }
  while ((_DWORD)v38);
LABEL_57:
  v39 = dbl_24BC0A450[v34 == 0];
  *(_QWORD *)(a1 + 27360) = *(_QWORD *)(a2 + 1848);
  v40 = v37 + 1;
  *(_DWORD *)(v6 + 240) = v40;
  v41 = *(_OWORD *)(a1 + 27472);
  v124[6] = *(_OWORD *)(a1 + 27456);
  v124[7] = v41;
  v42 = *(_OWORD *)(a1 + 27504);
  v124[8] = *(_OWORD *)(a1 + 27488);
  v124[9] = v42;
  v43 = *(_OWORD *)(a1 + 27408);
  v124[2] = *(_OWORD *)(a1 + 27392);
  v124[3] = v43;
  v44 = *(_OWORD *)(a1 + 27440);
  v124[4] = *(_OWORD *)(a1 + 27424);
  v124[5] = v44;
  v45 = *(_OWORD *)(a1 + 27376);
  v124[0] = *(_OWORD *)(a1 + 27360);
  v124[1] = v45;
  result = (uint64_t)VecSortAscR8((double *)v124, 0, v37);
  v47 = v40 >> 1;
  if ((v40 & 1) != 0)
  {
    v48 = *((double *)v124 + v47);
  }
  else
  {
    if (!(_DWORD)v40)
    {
      v50 = 0.0;
      goto LABEL_71;
    }
    v48 = (*((double *)v124 + v47 - 1) + *((double *)v124 + v47)) * 0.5;
  }
  v49 = (double *)(a1 + 27360);
  v50 = 0.0;
  v51 = v40;
  do
  {
    v52 = *v49++;
    v53 = v52;
    if (v52 > v48 * 4.3512 && v48 > 1.0 && (_DWORD)v40 == 20)
      v53 = v48;
    v50 = v50 + v53;
    --v51;
  }
  while (v51);
LABEL_71:
  v56 = v39 * 1.5;
  *(double *)(a1 + 27520) = v50 / (double)v40;
  if (v19 >= 3.0 || v23 >= v56 * 3.0 * (v56 * 3.0))
  {
    *(_WORD *)(v6 + 136) = 0;
    goto LABEL_134;
  }
  v57 = *(unsigned __int16 *)(v6 + 136);
  if (v57 == 5)
  {
    v59 = 4;
    *(_WORD *)(v6 + 136) = 4;
    goto LABEL_80;
  }
  if (!*(_WORD *)(v6 + 136))
  {
    v58 = 0;
    *(_WORD *)(a1 + 27272) = 0;
    *(_QWORD *)(a1 + 27264) = 0;
    *(_QWORD *)(a1 + 27256) = 0;
    goto LABEL_82;
  }
  v59 = *(_WORD *)(v6 + 136);
  if ((__int16)v57 >= 1)
  {
LABEL_80:
    v58 = 0;
    v57 = 0;
    v60 = v59 - 1;
    v61 = (_WORD *)(a1 + 2 * v59 + 27264);
    do
    {
      v62 = a1 + 2 * v60;
      v63 = *(__int16 *)(v62 + 27254);
      *(v61 - 5) = *(_WORD *)(v62 + 27254);
      LODWORD(v62) = *(__int16 *)(v62 + 27264);
      *v61-- = v62;
      v57 += v63;
      v58 += v62;
      v64 = v60-- + 1;
    }
    while (v64 > 1);
    goto LABEL_82;
  }
  v57 = 0;
  v58 = 0;
LABEL_82:
  v65 = -0.5;
  if (v18 * 1000.0 <= 0.0)
    v66 = -0.5;
  else
    v66 = 0.5;
  v67 = v18 * 1000.0 + v66;
  if (v67 <= 2147483650.0)
  {
    if (v67 >= -2147483650.0)
      v68 = (int)v67;
    else
      LOWORD(v68) = 0;
  }
  else
  {
    LOWORD(v68) = -1;
  }
  *(_WORD *)(v6 + 138) = v68;
  if (v17 * 1000.0 > 0.0)
    v65 = 0.5;
  v69 = v17 * 1000.0 + v65;
  if (v69 <= 2147483650.0)
  {
    if (v69 >= -2147483650.0)
      v70 = (int)v69;
    else
      LOWORD(v70) = 0;
  }
  else
  {
    LOWORD(v70) = -1;
  }
  *(_WORD *)(v6 + 148) = v70;
  v71 = *(_WORD *)(v6 + 136) + 1;
  *(_WORD *)(v6 + 136) = v71;
  if ((v36 & 1) == 0)
  {
    v72 = ((v57 + (__int16)v68) * (v57 + (__int16)v68) + (v58 + (__int16)v70) * (v58 + (__int16)v70))
        / (v71 * v71);
    if (v71 < 5)
    {
      if (v71 < 3)
      {
        v77 = 0;
        goto LABEL_124;
      }
    }
    else
    {
      v73 = -0.5;
      if (v56 * 1000.0 > 0.0)
        v73 = 0.5;
      v74 = v56 * 1000.0 + v73;
      if (v74 <= 2147483650.0)
      {
        v78 = -2147483650.0;
        if (v74 > -2147483650.0)
          v78 = v74;
        v75 = (int)v78;
        if (v74 < -2147483650.0)
          v76 = 0x80000000;
        else
          v76 = (int)v74;
      }
      else
      {
        v75 = 0x7FFFFFFF;
        v76 = 0x7FFFFFFF;
      }
      if (v72 < v76 * v75)
      {
        v77 = 1;
LABEL_124:
        v36 = v23 * 9.0 + v19 * v19 < dbl_24BC0A460[v34 == 0] || v77;
        if (v19 * v19 > v23 * 9.0)
          v36 = 0;
        goto LABEL_129;
      }
    }
    v79 = -0.5;
    if (v39 * 1000.0 > 0.0)
      v79 = 0.5;
    v80 = v39 * 1000.0 + v79;
    if (v80 <= 2147483650.0)
    {
      v83 = -2147483650.0;
      if (v80 > -2147483650.0)
        v83 = v39 * 1000.0 + v79;
      v81 = (int)v83;
      if (v80 < -2147483650.0)
        v82 = 0x80000000;
      else
        v82 = (int)v80;
    }
    else
    {
      v81 = 0x7FFFFFFF;
      v82 = 0x7FFFFFFF;
    }
    v77 = v72 < v82 * v81;
    goto LABEL_124;
  }
  v36 = 1;
LABEL_129:
  if (*(_DWORD *)(v5 + 4) != 1)
  {
    if (v36)
      v84 = 2;
    else
      v84 = 3;
    *(_DWORD *)v5 = v84;
    *(_DWORD *)(v5 + 4) = 0;
  }
LABEL_134:
  switch(*(_DWORD *)(v6 + 88))
  {
    case 0:
      v85 = !v9;
      if (v19 > 2.0)
        v85 = 1;
      if ((v85 & 1) == 0)
      {
        v86 = 1;
        goto LABEL_159;
      }
      break;
    case 1:
      v87 = *(_DWORD *)(v6 + 92);
      *(_DWORD *)(v6 + 92) = v87 + 1;
      if (v7 || v19 > 3.0)
        goto LABEL_157;
      if (v87 >= 1)
      {
        *(_DWORD *)(v6 + 88) = 2;
        goto LABEL_144;
      }
      break;
    case 2:
LABEL_144:
      if (v7 || v19 > 3.0)
        goto LABEL_157;
      v88 = v36 ^ 1;
      if (v19 <= v39)
        v88 = 0;
      if ((v88 & 1) == 0)
      {
        *(_DWORD *)(v6 + 88) = 3;
        goto LABEL_156;
      }
      break;
    case 3:
      if (v7 || v19 > 3.0)
      {
LABEL_157:
        *(_QWORD *)(v6 + 88) = 0;
      }
      else
      {
        if (v19 > v56)
          goto LABEL_158;
        v89 = v36 ^ 1;
        if (v19 <= v39)
          v89 = 0;
        if ((v89 & 1) != 0)
        {
LABEL_158:
          v86 = 2;
LABEL_159:
          *(_DWORD *)(v6 + 88) = v86;
        }
        else
        {
LABEL_156:
          *(_DWORD *)(v6 + 108) = *(_DWORD *)a2;
        }
      }
      break;
    default:
      result = gn_report_assertion_failure("switch/case error NK_Static_Filter.c");
      break;
  }
  if (*(_BYTE *)(v6 + 133))
    v90 = 1;
  else
    v90 = v36;
  if ((v90 & 1) != 0 || *(_BYTE *)(v6 + 134) && v19 < 3.0 && v23 < 4.0 && *(_DWORD *)v6 >= 3u)
  {
    LOBYTE(v117.f64[0]) = 0;
    LODWORD(v119) = 0;
    LOBYTE(v115) = 0;
    if (Core_Get_Static_Status((unsigned __int8 *)&v115))
    {
      v92 = v115 < 0xAu ? 1 : v36;
      if ((v92 & 1) == 0)
      {
        EvLog_nd("NKSF:  Static override", 2, v91, v115, *(unsigned int *)(v6 + 88));
        *(_DWORD *)(v6 + 88) = 3;
        *(_DWORD *)(v6 + 108) = *(_DWORD *)a2;
      }
    }
    result = Core_Get_Ped_Status(&v119, &v117);
    if ((_DWORD)result)
    {
      v94 = v115;
      if (LODWORD(v119) == 2 && v115 > 2u)
      {
LABEL_180:
        if (*(_BYTE *)(v6 + 134))
        {
          *(_WORD *)(v6 + 133) = 1;
          *(double *)(a1 + 27232) = v19;
          *(_DWORD *)(a1 + 20) = 2;
          result = (uint64_t)EvLog_nd("NK_Static_Filter:  PED_STOPPED:  Car -> Ped override", 2, v93, v94, LOBYTE(v117.f64[0]));
        }
        *(_DWORD *)(v6 + 88) = 3;
        *(_DWORD *)(v6 + 108) = *(_DWORD *)a2;
        goto LABEL_183;
      }
      switch(LODWORD(v119))
      {
        case 3:
          if (*(_BYTE *)(v6 + 133))
            result = (uint64_t)EvLog_nd("NK_Static_Filter:  PED_NOT_PED:  Ped -> Car indication", 2, v93, v115, LOBYTE(v117.f64[0]));
          break;
        case 2:
          if (*(_BYTE *)(v6 + 134))
          {
            *(_WORD *)(v6 + 133) = 1;
            *(double *)(a1 + 27232) = v19;
            *(_DWORD *)(a1 + 20) = 2;
            result = (uint64_t)EvLog_nd("NK_Static_Filter:  PED_WALKING:  Car -> Ped override", 2, v93, v94, LOBYTE(v117.f64[0]));
          }
          *(_DWORD *)(v6 + 88) = 2;
          break;
        case 1:
          goto LABEL_180;
        default:
          break;
      }
    }
  }
LABEL_183:
  if (!v9 || (v95 = *(_DWORD *)(v6 + 88), v95 != 3) && (v95 != 2 || !*(_BYTE *)(v6 + 134)))
  {
    *(_BYTE *)(v6 + 132) = 0;
    return result;
  }
  LOWORD(v117.f64[0]) = 0;
  v121[0] = 0;
  v120 = 0;
  memset(&v121[4], 0, 32);
  v122 = 0u;
  v123 = 0;
  *(_QWORD *)&v121[8] = *(_QWORD *)(a2 + 1720);
  *(_QWORD *)&v121[16] = 0x4010000000000000;
  HIDWORD(v119) = 2;
  LOBYTE(v119) = 1;
  *(_QWORD *)((char *)&v122 + 4) = 0x412E848000000000;
  result = Vert_Meas_Update(6u, v114, 0xCu, (unsigned __int8 *)&v119, (double *)__dst, &v117, *(double *)&v121[8]);
  v96 = *(_DWORD *)(v6 + 220);
  if (v96 && *(_BYTE *)(v6 + 134) && *(_DWORD *)v6)
  {
    v96 += *(_DWORD *)(a2 + 16);
    *(_DWORD *)(v6 + 220) = v96;
  }
  if (!*(_BYTE *)(v5 + 36))
  {
    v119 = 0.0;
    v120 = 0;
    *(_QWORD *)v121 = 0;
    __asm { FMOV            V0.2D, #4.0 }
    v115 = _Q0;
    v116 = 0x4010000000000000;
    if (v96 && *(_DWORD *)a2 - v96 <= 30000)
    {
      v100 = 27328;
    }
    else
    {
      if (*(int *)(v6 + 160) < 2 || *(_DWORD *)a2 - *(_DWORD *)(v6 + 180) > 30000)
      {
        v102 = 0;
        v101 = (double *)(a2 + 1856);
LABEL_201:
        v103 = 0;
        v104 = *v101;
        *(_BYTE *)(v6 + 132) = v102;
        v105 = *(float64x2_t *)(a2 + 1584);
        v117 = vsubq_f64(v105, *(float64x2_t *)&__dst[696]);
        v106 = *(double *)(a2 + 1600);
        v118 = v106 - *(double *)&__dst[712];
        do
        {
          *(double *)&v121[8 * v103] = *((double *)&v117 + v103 + 2) - *(double *)(a3 + 120 + 8 * v103);
          v107 = v103 + 3;
          --v103;
        }
        while (v107 > 1);
        v108 = 0;
        v117 = v105;
        v118 = v106;
        do
        {
          *(double *)&v121[8 * v108] = *((double *)&v117 + v108 + 2) - *(double *)(a3 + 120 + 8 * v108);
          v109 = v108 + 3;
          --v108;
        }
        while (v109 > 1);
        result = NK_Body_Frame_Meas(9u, &v119, (const double *)&v115, (const double (*)[3])v114, v104 * 0.0174532925, 0xCu, (double *)__dst);
        goto LABEL_206;
      }
      v100 = 27280;
    }
    v101 = (double *)(a1 + v100);
    v102 = 1;
    goto LABEL_201;
  }
LABEL_206:
  v110 = *(_OWORD *)&__dst[672];
  *(_OWORD *)(a1 + 1632) = *(_OWORD *)&__dst[656];
  *(_OWORD *)(a1 + 1648) = v110;
  v111 = *(_OWORD *)&__dst[704];
  *(_OWORD *)(a1 + 1664) = *(_OWORD *)&__dst[688];
  *(_OWORD *)(a1 + 1680) = v111;
  v112 = *(_OWORD *)&__dst[640];
  *(_OWORD *)(a1 + 1600) = *(_OWORD *)&__dst[624];
  *(_OWORD *)(a1 + 1616) = v112;
  return result;
}

BOOL Is_Eph_Kep_Real(const double *a1)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14[2];

  v14[1] = *(double *)MEMORY[0x24BDAC8D0];
  v14[0] = 0.0;
  if (!R8_EQ(a1 + 24, v14))
    return 1;
  v13 = 0.0;
  if (!R8_EQ(a1 + 29, &v13))
    return 1;
  v12 = 0.0;
  if (!R8_EQ(a1 + 21, &v12))
    return 1;
  v11 = 0.0;
  if (!R8_EQ(a1 + 14, &v11))
    return 1;
  v10 = 0.0;
  if (!R8_EQ(a1 + 13, &v10))
    return 1;
  v9 = 0.0;
  if (!R8_EQ(a1 + 17, &v9))
    return 1;
  v8 = 0.0;
  if (!R8_EQ(a1 + 18, &v8))
    return 1;
  v7 = 0.0;
  if (!R8_EQ(a1 + 19, &v7))
    return 1;
  v6 = 0.0;
  if (!R8_EQ(a1 + 20, &v6))
    return 1;
  v5 = 0.0;
  if (!R8_EQ(a1 + 15, &v5))
    return 1;
  v4 = 0.0;
  if (!R8_EQ(a1 + 16, &v4))
    return 1;
  v3 = 0.0;
  return !R8_EQ(a1 + 7, &v3);
}

double *Comp_GSpeed_Partial(double a1, double a2, double *result, double *a4)
{
  double v9;
  double v10;

  if (fabs(a1) > 0.0001 || fabs(a2) > 0.0001)
  {
    v10 = 1.0 / sqrt(a1 * a1 + a2 * a2);
    *a4 = v10 * (*result * a1 + result[3] * a2);
    a4[1] = v10 * (result[1] * a1 + result[4] * a2);
    v9 = v10 * (result[2] * a1);
  }
  else
  {
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)a4 = _Q0;
    v9 = 1.0;
  }
  a4[2] = v9;
  return result;
}

void AzEl_RadDeg(uint64_t a1, uint64_t a2)
{
  long double v4;
  long double v5;
  long double v6;
  int v7;
  double v8;
  double v9;

  v4 = asin(*(long double *)(a2 + 8));
  *(long double *)(a2 + 24) = v4;
  *(long double *)(a2 + 32) = v4 * 57.2957795;
  *(_DWORD *)a2 = (int)(v4 * 57.2957795 + 0.5) - (v4 * 57.2957795 < -0.5);
  v5 = *(double *)(a1 + 8);
  v6 = *(double *)(a1 + 16);
  if (fabs(v5) > 0.00001 || fabs(v6) > 0.00001)
  {
    v8 = atan2(v5, v6);
    v9 = v8 * 57.2957795;
    if (v8 * 57.2957795 < 0.0)
      v9 = v8 * 57.2957795 + 360.0;
    *(double *)(a1 + 24) = v8;
    *(double *)(a1 + 32) = v9;
    v7 = (int)(v9 + 0.5);
    if (v7 == 360)
      v7 = 0;
  }
  else
  {
    v7 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_DWORD *)a1 = v7;
}

void Hal02_RouteZxPkt(unsigned __int8 *a1, size_t a2)
{
  double v4;
  const char *v5;
  unsigned int v6;
  void (*v7)(size_t, unsigned __int8 *);
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  char __str[966];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config)
      return;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx data\n");
    goto LABEL_16;
  }
  if (!(_DWORD)a2)
  {
    if (!g_LbsOsaTrace_Config)
      return;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx len\n");
LABEL_16:
    gnssOsa_PrintLog(__str, 1, 1, 0);
    return;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    if (g_IsSPIEnabled)
      v5 = "SPI";
    else
      v5 = "PCIe";
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s:Rcvd,size %u,zx%c%c%c 0x%x 0x%x\n", (unint64_t)v4, "HAL", 73, "Hal02_RouteZxPkt", v5, a2, a1[2], a1[3], a1[4], a1[5], a1[6]);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  v6 = a1[2];
  if (v6 <= 0x4C)
  {
    switch(v6)
    {
      case 'B':
        v9 = a1[3];
        if (v9 == 83)
          goto LABEL_28;
        if (v9 != 89)
        {
          Hal02_HandleResp(a1, a2);
          return;
        }
        break;
      case 'D':
        v10 = a1[3];
        if (v10 == 67)
        {
          Hal_GetMEAnalyticsDataResponse(a1, a2);
          return;
        }
        if (word_2579E3EF8 != 3599)
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            v11 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GnssHw\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "HAL", 87, "Hal02_CheckDebugConfigMsg", 515);
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          goto LABEL_39;
        }
        if (v10 != 77 && v10 != 70)
        {
LABEL_39:
          GnssDbgMgr_WriteLog(a2, a1);
          return;
        }
        break;
      case 'I':
        Hal29_HandleProxyResponse(a1, a2);
        return;
      default:
LABEL_28:
        v7 = (void (*)(size_t, unsigned __int8 *))qword_2579E3E68;
        if (!qword_2579E3E68)
          return;
        goto LABEL_29;
    }
LABEL_10:
    v7 = (void (*)(size_t, unsigned __int8 *))g_CbList;
    if (!g_CbList)
      return;
LABEL_29:
    v7(a2, a1);
    return;
  }
  switch(a1[2])
  {
    case 'O':
      v8 = a1[3];
      if (v8 == 66 || v8 == 84)
        goto LABEL_28;
      if (v8 == 80)
        Hal32_HandlePowerReportData(a1, a2);
      break;
    case 'T':
    case 'V':
    case 'X':
      goto LABEL_10;
    default:
      goto LABEL_28;
  }
}

void Hal02_HandleResp(unsigned __int8 *a1, unsigned int a2)
{
  int v4;
  uint64_t v5;
  char __str[966];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config)
      return;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx data\n");
LABEL_10:
    v4 = 1;
LABEL_11:
    gnssOsa_PrintLog(__str, v4, 1, 0);
    return;
  }
  if (!a2)
  {
    if (!g_LbsOsaTrace_Config)
      return;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx len\n");
    goto LABEL_10;
  }
  if ((Hal11_HandleEvent(a1[3], a1, a2) & 1) == 0)
  {
    switch(g_HalState)
    {
      case 0:
      case 1:
        return;
      case 2:
      case 3:
        Hal15_HandleRevResp(a1);
        break;
      case 4:
        Hal29_HandleProxyResponse(a1, a2);
        break;
      case 5:
        Hal32_HandlePowerReportRsp(a1);
        break;
      case 6:
      case 7:
        Hal_CoexConfigRespone(a1);
        break;
      default:
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          v5 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx State,%u,MC,%c,MID,%c,MIDE,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 87, "Hal02_HandleResp", 262, g_HalState, a1[2], a1[3], a1[4]);
          v4 = 2;
          goto LABEL_11;
        }
        break;
    }
  }
}

void Hal02_07ChipRead(void)
{
  uint64_t v0;
  unsigned int Data;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char __str[966];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: transPrep success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "HAL", 68, "Hal02_07ChipRead");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)gp_Comm + 48))(gp_Comm))
  {
    do
    {
      Data = Hal_CommsItfReadData(g_ReadBuffer, 0x3000u);
      if (Data)
      {
        v2 = Data;
        if ((Data & 0x80000000) != 0)
          goto LABEL_14;
        if (Data > 0x3000)
        {
          if (g_LbsOsaTrace_Config)
          {
            bzero(__str, 0x3C6uLL);
            v3 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NumOfBytesRead,%u,Maxbufsize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "HAL", 69, "Hal02_07ChipRead", 772, v2, 12288);
            gnssOsa_PrintLog(__str, 1, 1, 0);
          }
          memset_s(g_ReadBuffer, 0x3000uLL, 0, 0x3000uLL);
        }
        else
        {
          Hal02_06ParsezxPacket(g_ReadBuffer, (unsigned __int16)Data);
        }
      }
    }
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)gp_Comm + 48))(gp_Comm) & 1) != 0);
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 69, "Hal02_07ChipRead", 1281);
    gnssOsa_PrintLog(__str, 1, 1, 0);
LABEL_14:
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: RdrThrd exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 73, "Hal02_07ChipRead");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
}

void Hal02_06ParsezxPacket(unsigned __int8 *a1, size_t a2)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v6;
  double *v7;
  const char *v8;
  _DWORD *v9;
  size_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  const char *v14;
  unsigned int v15;
  double v16;
  int v17;
  unint64_t v18;
  uint64_t v20;
  int v21;
  double v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  int v30;
  char __str[966];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config)
      return;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx data\n");
    goto LABEL_9;
  }
  if (!(_DWORD)a2)
  {
    if (!g_LbsOsaTrace_Config)
      return;
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx len\n");
LABEL_9:
    gnssOsa_PrintLog(__str, 1, 1, 0);
    return;
  }
  v3 = a1;
  if (g_PrevLen)
  {
    memcpy_s("Hal02_06ParsezxPacket", 280, &g_ProccessBuff, 0x4000u, &g_PrevBuff, (unsigned __int16)g_PrevLen);
    memcpy_s("Hal02_06ParsezxPacket", 281, (char *)&g_ProccessBuff + (unsigned __int16)g_PrevLen, 0x4000 - (unsigned __int16)g_PrevLen, v3, a2);
    v4 = (unsigned __int16)g_PrevLen;
    v3 = (unsigned __int8 *)&g_ProccessBuff;
  }
  else
  {
    v4 = 0;
  }
  v5 = v4 + a2;
  g_PrevLen = 0;
  if (!((_WORD)v4 + (_WORD)a2))
    return;
  v6 = 0;
  v7 = (double *)&unk_2579E2000;
  v8 = "HAL";
  v9 = &unk_257A4E000;
  while (1)
  {
    v10 = (unsigned __int16)v5;
    v11 = &v3[(unsigned __int16)v6];
    if ((unsigned __int16)v5 <= 7u)
    {
      v30 = 300;
      goto LABEL_49;
    }
    if (*v11 != 122 || v11[1] != 120)
    {
      ++v6;
      --v5;
      v17 = v9[938] + 1;
      v9[938] = v17;
      HIDWORD(v18) = 652835029 * v17;
      LODWORD(v18) = 652835029 * v17;
      if ((v18 >> 3) <= 0x418937 && g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v20 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Err,%u\n", (unint64_t)(v7[455] * (double)v20), v8, 87, "Hal02_06ParsezxPacket", 770, v9[938]);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      goto LABEL_46;
    }
    v12 = v11[5];
    v13 = v11[6];
    if (v11[7] != (v11[3] + v11[2] + v11[4] + v12 + v13))
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        v21 = (v11[3] + v11[2] + v11[4] + v12 + v13);
        bzero(__str, 0x3C6uLL);
        v22 = v7[455] * (double)mach_continuous_time();
        v23 = v11[7];
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx rcvd,0x%02x,computed,0x%02x,Pktloss,%u\n", (unint64_t)v22, v8, 87, "Hal02_06ParsezxPacket", 781, v23, v21, ++_MergedGlobals_4);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      ++v6;
      --v5;
      goto LABEL_46;
    }
    v14 = v8;
    v15 = v12 | (v13 << 8);
    if (v15 >= 0xFF8)
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v16 = v7[455] * (double)mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx len,%u,Pktloss,%u\n", (unint64_t)v16, v14, 87, "Hal02_06ParsezxPacket", 783, v15, ++_MergedGlobals_4);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      ++v6;
      --v5;
      v8 = v14;
      goto LABEL_42;
    }
    v24 = v15 + 9;
    v10 = (unsigned __int16)v5;
    if ((unsigned __int16)v5 < (unsigned __int16)(v15 + 9))
      break;
    if (v3[(unsigned __int16)v6 + 8 + (unint64_t)v15] == 10)
    {
      v7 = (double *)&unk_2579E2000;
      v8 = v14;
      v9 = &unk_257A4E000;
      if (dword_257A4EEA8)
      {
        if (dword_257A4EEA8 >= 0x41 && g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          v25 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: zx pkt recd ,prev invalid data,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), v8, 68, "Hal02_06ParsezxPacket", dword_257A4EEA8);
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        dword_257A4EEA8 = 0;
      }
      if (g_RouteZxData)
      {
        g_RouteZxData(&v3[(unsigned __int16)v6], v24);
      }
      else if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        v29 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: RouteZxData is NULL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), v8, 87, "Hal02_06ParsezxPacket");
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      v5 -= v24;
      v6 += v24;
      goto LABEL_46;
    }
    v8 = v14;
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v26 = mach_continuous_time();
      v27 = &v3[(unsigned __int16)v6];
      v28 = v27[2];
      LODWORD(v27) = v27[3];
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u,Pktloss,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), v14, 87, "Hal02_06ParsezxPacket", 782, v28, (_DWORD)v27, ++_MergedGlobals_4);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    ++v6;
    --v5;
    v7 = (double *)&unk_2579E2000;
LABEL_42:
    v9 = (_DWORD *)&unk_257A4E000;
LABEL_46:
    if (!(_WORD)v5)
      return;
  }
  v30 = 350;
LABEL_49:
  memcpy_s("Hal02_06ParsezxPacket", v30, &g_PrevBuff, 0x1000u, &v3[(unsigned __int16)v6], v10);
  g_PrevLen = v5;
}

void Hal02_AsyncReadCb(unsigned __int8 *a1, size_t a2)
{
  int v2;
  unsigned __int8 *v3;
  uint64_t v4;
  char __str[966];
  uint64_t v6;

  v2 = a2;
  v3 = a1;
  v6 = *MEMORY[0x24BDAC8D0];
  if (a2 > 0x3000)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx v_RxBufferSize %u,processing %u bytes\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 87, "Hal02_AsyncReadCb", 772, v2, 12288);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    a1 = v3;
    a2 = 12288;
  }
  else
  {
    a2 = (unsigned __int16)a2;
  }
  Hal02_06ParsezxPacket(a1, a2);
  if (v3)
    free(v3);
}

void Hal02_SPI_ReadCb(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v3;
  char __str[966];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (a2 > 0x3000)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: v_RxBufferSize %u - out of range error\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "HAL", 69, "Hal02_SPI_ReadCb", a2);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else
  {
    Hal02_06ParsezxPacket(a1, (unsigned __int16)a2);
  }
}

uint64_t GN_AGLON_Set_Eph_El(char *a1)
{
  uint64_t result;
  int v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char v18;
  char v19;
  char v20;
  char v21;
  int v22;
  __int16 v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char v29;
  char v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  char v34;
  BOOL v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  char v48;
  char v49;
  char v50;
  char v51;
  int v52;
  __int16 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[20];
  _OWORD v58[4];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  result = Is_GN_API_Set_Allowed("GN_AGLON_Set_Eph_El");
  if ((_DWORD)result)
  {
    v3 = *a1;
    if (g_Logging_Cfg < 5)
      EvLog_d("GN_AGLON_Set_Eph_El: ", v3);
    else
      EvLog_v("GN_AGLON_Set_Eph_El: %2d %2d %2d %4d %d %2d  %2d %d %d %d  %9d %9d %9d  %8d %8d %8d  %3d %3d %3d  %3d %8d %5d  %d", v3, a1[1], a1[2], *((unsigned __int16 *)a1 + 2), a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], *((_DWORD *)a1 + 3), *((_DWORD *)a1 + 4), *((_DWORD *)a1 + 5), *((_DWORD *)a1 + 6), *((_DWORD *)a1 + 7), *((_DWORD *)a1 + 8), a1[36], a1[37],
        a1[38],
        a1[39],
        *((_DWORD *)a1 + 10),
        *((__int16 *)a1 + 22),
        a1[46]);
    v4 = *a1;
    if ((*a1 - 25) <= 0xE7u)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloN = %d <%d or >%d, Out of range!");
      return 0;
    }
    v5 = a1[2];
    if (v5 - 96 <= 0xFFFFFFA0)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloTb = %d <1 or >95, Out of range!");
      return 0;
    }
    v6 = *((unsigned __int16 *)a1 + 2);
    if (v6 >= 0x5B6)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloNT = %d >%d, Out of range!");
      return 0;
    }
    v7 = a1[6];
    if (v7 >= 2)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloLn = %d >1, Out of range!");
      return 0;
    }
    v8 = a1[7];
    if (v8 >= 0x10)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloFT = %d >15, Out of range!");
      return 0;
    }
    v9 = a1[8];
    if (v9 >= 0x20)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloEn = %d >31, Out of range!");
      return 0;
    }
    v10 = a1[9];
    if (v10 >= 4)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloP1 = %d <0 or >3, Out of range!");
      return 0;
    }
    v11 = a1[11];
    if (v11 >= 4)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloM = %d <0 or >3, Out of range!");
      return 0;
    }
    v12 = *((_DWORD *)a1 + 3);
    if ((v12 - 0x4000000) >> 27 != 31)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloX = %d <-2^26 or >=2^26, Out of range!");
      return 0;
    }
    v13 = *((_DWORD *)a1 + 4);
    if ((v13 - 0x4000000) >> 27 != 31)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloY = %d <-2^26 or >=2^26, Out of range!");
      return 0;
    }
    v14 = *((_DWORD *)a1 + 5);
    if ((v14 - 0x4000000) >> 27 != 31)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloZ = %d <-2^26 or >=2^26, Out of range!");
      return 0;
    }
    v15 = *((_DWORD *)a1 + 6);
    if ((v15 - 0x800000) >> 24 != 255)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloXdot = %d <-2^23 or >=2^23, Out of range!");
      return 0;
    }
    v16 = *((_DWORD *)a1 + 7);
    if ((v16 - 0x800000) >> 24 != 255)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloYdot = %d <-2^23 or >=2^23, Out of range!");
      return 0;
    }
    v17 = *((_DWORD *)a1 + 8);
    if ((v17 - 0x800000) >> 24 != 255)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloZdot = %d <-2^23 or >=2^23, Out of range!");
      return 0;
    }
    v18 = a1[36];
    if ((v18 - 16) <= 0xDFu)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloXdotdot = %d <-2^4 or >=2^4, Out of range!");
      return 0;
    }
    v19 = a1[37];
    if ((v19 - 16) <= 0xDFu)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloYdotdot = %d <-2^4 or >=2^4, Out of range!");
      return 0;
    }
    v20 = a1[38];
    if ((v20 - 16) <= 0xDFu)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloZdotdot = %d <-2^4 or >=2^4, Out of range!");
      return 0;
    }
    v21 = a1[39];
    if ((v21 - 16) <= 0xDFu)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloDeltaTau = %d <-2^4 or >=2^4, Out of range!");
      return 0;
    }
    v22 = *((_DWORD *)a1 + 10);
    if ((v22 - 0x200000) >> 22 != 1023)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloDeltaTau = %d <-2^21 or >=2^21, Out of range!");
      return 0;
    }
    v23 = *((_WORD *)a1 + 22);
    if ((unsigned __int16)((unsigned __int16)(v23 - 1024) >> 11) <= 0x1Eu)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloGamma = %d <-2^10 or >=2^10, Out of range!");
      return 0;
    }
    v24 = a1[1];
    if ((a1[1] - 7) < 0xF2u)
      v24 = 2139062143;
    v28 = v24;
    if (a1[46])
      v25 = 5;
    else
      v25 = 3;
    v26 = 0;
    v27 = v25;
    v29 = v4;
    v30 = v5;
    v32 = v6;
    v35 = v7 != 0;
    v37 = v8;
    v38 = v9;
    v39 = v10;
    v40 = a1[10];
    v41 = v11;
    v42 = v12;
    v43 = v13;
    v44 = v14;
    v45 = v15;
    v46 = v16;
    v47 = v17;
    v48 = v18;
    v49 = v19;
    v50 = v20;
    v51 = v21;
    v52 = v22;
    v53 = v23;
    v34 = 0;
    v36 = 0;
    v33 = v7 != 0;
    v31 = 1500 * (v5 & 3) + 10000 * (v5 >> 2);
    memset(v58, 0, 62);
    GLON_EphInt2Bin((uint64_t)&v26, (uint64_t)v58);
    v54 = 0;
    *(_OWORD *)&v57[4] = 0u;
    BYTE4(v54) = BYTE8(v58[0]);
    v55 = *(_OWORD *)((char *)v58 + 12);
    v56 = *(_OWORD *)((char *)&v58[1] + 12);
    *(_OWORD *)v57 = *(_OWORD *)((char *)&v58[2] + 12);
    v57[16] = v27 == 5;
    return GN_AGLON_Set_Eph(*a1, (uint64_t)&v54);
  }
  return result;
}

