uint64_t destroy for Extension(uint64_t a1)
{
  return outlined consume of Extension(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t destroy for Extension.ServerName.Names(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t type metadata completion function for HandshakeState()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  result = type metadata accessor for HandshakeState.IdleState(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for HandshakeState.ClientHelloState(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for HandshakeState.ServerHelloState(319);
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for HandshakeState.EncryptedExtensionsState(319);
        if (v4 <= 0x3F)
        {
          result = type metadata accessor for HandshakeState.ServerCertificateState(319);
          if (v5 <= 0x3F)
          {
            result = type metadata accessor for HandshakeState.ServerCertificateVerifyState(319);
            if (v6 <= 0x3F)
            {
              result = type metadata accessor for HandshakeState.ReadyState(319);
              if (v7 <= 0x3F)
              {
                swift_initEnumMetadataMultiPayload();
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for HandshakeState.EncryptedExtensionsState.SessionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    v5 = (int *)type metadata accessor for SessionTicket();
    *(_DWORD *)(a1 + v5[5]) = *(_DWORD *)(a2 + v5[5]);
    *(_DWORD *)(a1 + v5[6]) = *(_DWORD *)(a2 + v5[6]);
    v6 = v5[7];
    v7 = (uint64_t *)(a1 + v6);
    v8 = a2 + v6;
    v9 = *(_QWORD *)(a2 + v6);
    v10 = *(_QWORD *)(a2 + v6 + 8);
    outlined copy of Data._Representation(v9, v10);
    *v7 = v9;
    v7[1] = v10;
    v7[2] = *(_QWORD *)(v8 + 16);
    v11 = v5[8];
    v12 = (uint64_t *)(a1 + v11);
    v13 = a2 + v11;
    v14 = *(_QWORD *)(a2 + v11);
    v15 = *(_QWORD *)(a2 + v11 + 8);
    outlined copy of Data._Representation(v14, v15);
    *v12 = v14;
    v12[1] = v15;
    v12[2] = *(_QWORD *)(v13 + 16);
    v16 = v5[9];
    v17 = a1 + v16;
    v18 = a2 + v16;
    v19 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    *(_DWORD *)(a1 + v5[10]) = *(_DWORD *)(a2 + v5[10]);
    *(_WORD *)(a1 + v5[11]) = *(_WORD *)(a2 + v5[11]);
    *(_WORD *)(a1 + v5[12]) = *(_WORD *)(a2 + v5[12]);
    v20 = v5[13];
    v21 = a1 + v20;
    v22 = (uint64_t *)(a2 + v20);
    v23 = *(_QWORD *)(a2 + v20 + 8);
    if (v23 >> 60 == 15)
    {
      *(_OWORD *)v21 = *(_OWORD *)v22;
    }
    else
    {
      v25 = *v22;
      outlined copy of Data._Representation(*v22, v23);
      *(_QWORD *)v21 = v25;
      *(_QWORD *)(v21 + 8) = v23;
    }
    *(_QWORD *)(v21 + 16) = v22[2];
    v26 = v5[14];
    v27 = (void *)(a1 + v26);
    v28 = (const void *)(a2 + v26);
    v29 = type metadata accessor for P256.Signing.PublicKey();
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
    v24 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v24;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void HandshakeStateMachine.negotiatedCiphersuite.getter()
{
  uint64_t ready;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _QWORD v17[3];
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  ready = type metadata accessor for HandshakeState.ReadyState(0);
  MEMORY[0x1E0C80A78](ready);
  v17[2] = (char *)v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  MEMORY[0x1E0C80A78](v2);
  v17[1] = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for HandshakeState.ServerCertificateState(0);
  MEMORY[0x1E0C80A78](v4);
  v21 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for SessionTicket();
  v20 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v17[0] = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  MEMORY[0x1E0C80A78](v18);
  v7 = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  MEMORY[0x1E0C80A78](v7);
  v19 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for HandshakeState.ServerHelloState(0);
  MEMORY[0x1E0C80A78](v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  MEMORY[0x1E0C80A78](v10);
  v11 = type metadata accessor for HandshakeState.ClientHelloState(0);
  MEMORY[0x1E0C80A78](v11);
  v12 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for HandshakeStateMachine();
  outlined init with copy of PartialHandshakeResult(v23 + *(int *)(v15 + 24), (uint64_t)v14, type metadata accessor for HandshakeState);
  v16 = (char *)sub_1B0D51D2C + 4 * byte_1B0DE87AD[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0D51D2C()
{
  uint64_t v0;

  outlined destroy of PartialHandshakeResult(v0, type metadata accessor for HandshakeState);
  return 0x10000;
}

uint64_t initializeWithCopy for SessionTicket(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  *(_DWORD *)(a1 + v7) = *(_DWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = (uint64_t *)(a1 + v8);
  v10 = a2 + v8;
  v11 = *(_QWORD *)(a2 + v8);
  v12 = *(_QWORD *)(a2 + v8 + 8);
  outlined copy of Data._Representation(v11, v12);
  *v9 = v11;
  v9[1] = v12;
  v9[2] = *(_QWORD *)(v10 + 16);
  v13 = a3[8];
  v14 = (uint64_t *)(a1 + v13);
  v15 = a2 + v13;
  v16 = *(_QWORD *)(a2 + v13);
  v17 = *(_QWORD *)(a2 + v13 + 8);
  outlined copy of Data._Representation(v16, v17);
  *v14 = v16;
  v14[1] = v17;
  v14[2] = *(_QWORD *)(v15 + 16);
  v18 = a3[9];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  v22 = a3[11];
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  *(_WORD *)(a1 + v22) = *(_WORD *)(a2 + v22);
  v23 = a3[13];
  *(_WORD *)(a1 + a3[12]) = *(_WORD *)(a2 + a3[12]);
  v24 = a1 + v23;
  v25 = (uint64_t *)(a2 + v23);
  v26 = *(_QWORD *)(a2 + v23 + 8);
  if (v26 >> 60 == 15)
  {
    *(_OWORD *)v24 = *(_OWORD *)v25;
  }
  else
  {
    v27 = *v25;
    outlined copy of Data._Representation(*v25, *(_QWORD *)(a2 + v23 + 8));
    *(_QWORD *)v24 = v27;
    *(_QWORD *)(v24 + 8) = v26;
  }
  *(_QWORD *)(v24 + 16) = v25[2];
  v28 = a3[14];
  v29 = (void *)(a1 + v28);
  v30 = (const void *)(a2 + v28);
  v31 = type metadata accessor for P256.Signing.PublicKey();
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    v33 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(v29, v30, v31);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  return a1;
}

uint64_t outlined init with copy of PartialHandshakeResult(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void initializeWithCopy for HandshakeState()
{
  char *v0;

  v0 = (char *)sub_1B0D52170 + 4 * byte_1B0DE9A20[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0D52170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  int *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  int *v67;
  uint64_t v69;

  v2 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)v0 = *(_QWORD *)v1;
  *(_QWORD *)(v0 + 8) = v2;
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v3 >> 60 == 15)
  {
    *(_OWORD *)(v0 + 24) = *(_OWORD *)(v1 + 24);
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 24);
    outlined copy of Data._Representation(v4, v3);
    *(_QWORD *)(v0 + 24) = v4;
    *(_QWORD *)(v0 + 32) = v3;
  }
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 56);
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v1 + 48);
  }
  else
  {
    v6 = *(_QWORD *)(v1 + 48);
    outlined copy of Data._Representation(v6, *(_QWORD *)(v1 + 56));
    *(_QWORD *)(v0 + 48) = v6;
    *(_QWORD *)(v0 + 56) = v5;
  }
  *(_QWORD *)(v0 + 64) = *(_QWORD *)(v1 + 64);
  *(_DWORD *)(v0 + 72) = *(_DWORD *)(v1 + 72);
  v7 = type metadata accessor for HandshakeState.IdleState(0);
  v8 = *(int *)(v7 + 20);
  v9 = (char *)(v0 + v8);
  v10 = (char *)(v1 + v8);
  v11 = (int *)type metadata accessor for SessionTicket();
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v69 = v12;
    v14 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v9, v10, v14);
    *(_DWORD *)&v9[v11[5]] = *(_DWORD *)&v10[v11[5]];
    *(_DWORD *)&v9[v11[6]] = *(_DWORD *)&v10[v11[6]];
    v15 = v11[7];
    v16 = (uint64_t *)&v9[v15];
    v17 = &v10[v15];
    v18 = *(_QWORD *)&v10[v15];
    v19 = *(_QWORD *)&v10[v15 + 8];
    outlined copy of Data._Representation(v18, v19);
    *v16 = v18;
    v16[1] = v19;
    v16[2] = *((_QWORD *)v17 + 2);
    v20 = v11[8];
    v21 = (uint64_t *)&v9[v20];
    v22 = &v10[v20];
    v23 = *(_QWORD *)&v10[v20];
    v24 = *(_QWORD *)&v10[v20 + 8];
    outlined copy of Data._Representation(v23, v24);
    *v21 = v23;
    v21[1] = v24;
    v21[2] = *((_QWORD *)v22 + 2);
    v25 = v11[9];
    v26 = &v9[v25];
    v27 = &v10[v25];
    v28 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
    *(_DWORD *)&v9[v11[10]] = *(_DWORD *)&v10[v11[10]];
    *(_WORD *)&v9[v11[11]] = *(_WORD *)&v10[v11[11]];
    *(_WORD *)&v9[v11[12]] = *(_WORD *)&v10[v11[12]];
    v29 = v11[13];
    v30 = &v9[v29];
    v31 = (uint64_t *)&v10[v29];
    v32 = *(_QWORD *)&v10[v29 + 8];
    if (v32 >> 60 == 15)
    {
      *(_OWORD *)v30 = *(_OWORD *)v31;
    }
    else
    {
      v33 = *v31;
      outlined copy of Data._Representation(*v31, v32);
      *(_QWORD *)v30 = v33;
      *((_QWORD *)v30 + 1) = v32;
    }
    *((_QWORD *)v30 + 2) = v31[2];
    v34 = v11[14];
    v35 = &v9[v34];
    v36 = &v10[v34];
    v37 = type metadata accessor for P256.Signing.PublicKey();
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      v39 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v69 + 56))(v9, 0, 1, v11);
  }
  v40 = *(int *)(v7 + 24);
  v41 = (char *)(v0 + v40);
  v42 = (char *)(v1 + v40);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v44 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v41, v42, v44);
      v45 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v46 = v45[9];
      v47 = &v41[v46];
      v48 = &v42[v46];
      v49 = type metadata accessor for SymmetricKey();
      v50 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
      v50(v47, v48, v49);
      v50(&v41[v45[10]], &v42[v45[10]], v49);
      v50(&v41[v45[11]], &v42[v45[11]], v49);
      v50(&v41[v45[12]], &v42[v45[12]], v49);
      swift_storeEnumTagMultiPayload();
      break;
    case 1u:
      v51 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v41, v42, v51);
      v52 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v53 = v52[9];
      v54 = &v41[v53];
      v55 = &v42[v53];
      v56 = type metadata accessor for SymmetricKey();
      v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16);
      v57(v54, v55, v56);
      v57(&v41[v52[10]], &v42[v52[10]], v56);
      v57(&v41[v52[11]], &v42[v52[11]], v56);
      swift_storeEnumTagMultiPayload();
      break;
    case 2u:
      v58 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v41, v42, v58);
      v59 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v60 = v59[9];
      v61 = &v41[v60];
      v62 = &v42[v60];
      v63 = type metadata accessor for SymmetricKey();
      v64 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16);
      v64(v61, v62, v63);
      v64(&v41[v59[10]], &v42[v59[10]], v63);
      v64(&v41[v59[11]], &v42[v59[11]], v63);
      v64(&v41[v59[12]], &v42[v59[12]], v63);
      v64(&v41[v59[13]], &v42[v59[13]], v63);
      v64(&v41[v59[14]], &v42[v59[14]], v63);
      swift_storeEnumTagMultiPayload();
      break;
    case 3u:
      v65 = type metadata accessor for SymmetricKey();
      v66 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16);
      v66(v41, v42, v65);
      v67 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v66(&v41[v67[9]], &v42[v67[9]], v65);
      v66(&v41[v67[10]], &v42[v67[10]], v65);
      v66(&v41[v67[11]], &v42[v67[11]], v65);
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      break;
  }
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1B5E111C0]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for HandshakeState(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for HandshakeState);
}

uint64_t type metadata accessor for SessionTicket()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SessionTicket;
  if (!type metadata singleton initialization cache for SessionTicket)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for HandshakeState.ReadyState(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for HandshakeState.ReadyState);
}

uint64_t getEnumTagSinglePayload for SessionTicket()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t outlined destroy of PartialHandshakeResult(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for PeerCertificateBundle.Bundle(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t storeEnumTagSinglePayload for SessionTicket()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for HandshakeState.ServerHelloState.SessionData(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for HandshakeState.ServerHelloState.SessionData);
}

uint64_t type metadata accessor for HandshakeState.ClientHelloState(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for HandshakeState.ClientHelloState);
}

uint64_t type metadata accessor for PeerCertificateBundle(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for PeerCertificateBundle);
}

uint64_t type metadata accessor for HandshakeState.IdleState(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for HandshakeState.IdleState);
}

void *initializeWithCopy for PeerCertificateBundle(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for P256.Signing.PublicKey();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

uint64_t destroy for HandshakeState.ServerHelloState(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  int *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  char *v25;
  uint64_t v26;
  int *v27;
  char *v28;
  uint64_t v29;
  int *v30;
  void (*v31)(char *, uint64_t);
  void (*v32)(char *, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1[4];
  if (v4 >> 60 != 15)
    outlined consume of Data._Representation(a1[3], v4);
  v5 = a1[7];
  if (v5 >> 60 != 15)
    outlined consume of Data._Representation(a1[6], v5);
  v6 = (char *)a1 + *(int *)(a2 + 20);
  type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    v8 = (int *)type metadata accessor for SessionTicket();
    outlined consume of Data._Representation(*(_QWORD *)&v6[v8[7]], *(_QWORD *)&v6[v8[7] + 8]);
    outlined consume of Data._Representation(*(_QWORD *)&v6[v8[8]], *(_QWORD *)&v6[v8[8] + 8]);
    v9 = &v6[v8[9]];
    v10 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    v11 = (uint64_t *)&v6[v8[13]];
    v12 = v11[1];
    if (v12 >> 60 != 15)
      outlined consume of Data._Representation(*v11, v12);
    v13 = &v6[v8[14]];
    v14 = type metadata accessor for P256.Signing.PublicKey();
    v15 = *(_QWORD *)(v14 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v16 = (char *)a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      v18 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
      v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v20 = &v16[v19[9]];
      v21 = type metadata accessor for SymmetricKey();
      v31 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8);
      v31(v20, v21);
      v31(&v16[v19[10]], v21);
      v31(&v16[v19[11]], v21);
      v22 = v19[12];
      goto LABEL_15;
    case 1:
      v23 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v16, v23);
      v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v25 = &v16[v24[9]];
      v21 = type metadata accessor for SymmetricKey();
      v31 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8);
      v31(v25, v21);
      v31(&v16[v24[10]], v21);
      v22 = v24[11];
      goto LABEL_15;
    case 2:
      v26 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v16, v26);
      v27 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v28 = &v16[v27[9]];
      v21 = type metadata accessor for SymmetricKey();
      v31 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8);
      v31(v28, v21);
      v31(&v16[v27[10]], v21);
      v31(&v16[v27[11]], v21);
      v31(&v16[v27[12]], v21);
      v31(&v16[v27[13]], v21);
      v22 = v27[14];
LABEL_15:
      result = ((uint64_t (*)(char *, uint64_t))v31)(&v16[v22], v21);
      break;
    case 3:
      v29 = type metadata accessor for SymmetricKey();
      v32 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v29 - 8) + 8);
      v32(v16, v29);
      v30 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v32(&v16[v30[9]], v29);
      v32(&v16[v30[10]], v29);
      result = ((uint64_t (*)(char *, uint64_t))v32)(&v16[v30[11]], v29);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for HandshakeState.IdleState(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  int *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  char *v25;
  uint64_t v26;
  int *v27;
  char *v28;
  uint64_t v29;
  int *v30;
  void (*v31)(char *, uint64_t);
  void (*v32)(char *, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1[4];
  if (v4 >> 60 != 15)
    outlined consume of Data._Representation(a1[3], v4);
  v5 = a1[7];
  if (v5 >> 60 != 15)
    outlined consume of Data._Representation(a1[6], v5);
  v6 = (char *)a1 + *(int *)(a2 + 20);
  v7 = (int *)type metadata accessor for SessionTicket();
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v6, 1, v7))
  {
    v8 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
    outlined consume of Data._Representation(*(_QWORD *)&v6[v7[7]], *(_QWORD *)&v6[v7[7] + 8]);
    outlined consume of Data._Representation(*(_QWORD *)&v6[v7[8]], *(_QWORD *)&v6[v7[8] + 8]);
    v9 = &v6[v7[9]];
    v10 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    v11 = (uint64_t *)&v6[v7[13]];
    v12 = v11[1];
    if (v12 >> 60 != 15)
      outlined consume of Data._Representation(*v11, v12);
    v13 = &v6[v7[14]];
    v14 = type metadata accessor for P256.Signing.PublicKey();
    v15 = *(_QWORD *)(v14 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
  }
  v16 = (char *)a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      v18 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
      v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v20 = &v16[v19[9]];
      v21 = type metadata accessor for SymmetricKey();
      v31 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8);
      v31(v20, v21);
      v31(&v16[v19[10]], v21);
      v31(&v16[v19[11]], v21);
      v22 = v19[12];
      goto LABEL_14;
    case 1:
      v23 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v16, v23);
      v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v25 = &v16[v24[9]];
      v21 = type metadata accessor for SymmetricKey();
      v31 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8);
      v31(v25, v21);
      v31(&v16[v24[10]], v21);
      v22 = v24[11];
      goto LABEL_14;
    case 2:
      v26 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v16, v26);
      v27 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v28 = &v16[v27[9]];
      v21 = type metadata accessor for SymmetricKey();
      v31 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8);
      v31(v28, v21);
      v31(&v16[v27[10]], v21);
      v31(&v16[v27[11]], v21);
      v31(&v16[v27[12]], v21);
      v31(&v16[v27[13]], v21);
      v22 = v27[14];
LABEL_14:
      result = ((uint64_t (*)(char *, uint64_t))v31)(&v16[v22], v21);
      break;
    case 3:
      v29 = type metadata accessor for SymmetricKey();
      v32 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v29 - 8) + 8);
      v32(v16, v29);
      v30 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v32(&v16[v30[9]], v29);
      v32(&v16[v30[10]], v29);
      result = ((uint64_t (*)(char *, uint64_t))v32)(&v16[v30[11]], v29);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for HandshakeState.EncryptedExtensionsState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  int *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  int *v79;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v8, v7);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v7;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 56);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v10, *(_QWORD *)(a2 + 56));
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v9;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v11 = a3[5];
  v12 = a1 + v11;
  v13 = a2 + v11;
  type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = (int *)type metadata accessor for SessionTicket();
    *(_DWORD *)(v12 + v15[5]) = *(_DWORD *)(v13 + v15[5]);
    *(_DWORD *)(v12 + v15[6]) = *(_DWORD *)(v13 + v15[6]);
    v16 = v15[7];
    v17 = (uint64_t *)(v12 + v16);
    v18 = v13 + v16;
    v19 = *(_QWORD *)(v13 + v16);
    v20 = *(_QWORD *)(v13 + v16 + 8);
    outlined copy of Data._Representation(v19, v20);
    *v17 = v19;
    v17[1] = v20;
    v17[2] = *(_QWORD *)(v18 + 16);
    v21 = v15[8];
    v22 = (uint64_t *)(v12 + v21);
    v23 = v13 + v21;
    v24 = *(_QWORD *)(v13 + v21);
    v25 = *(_QWORD *)(v13 + v21 + 8);
    outlined copy of Data._Representation(v24, v25);
    *v22 = v24;
    v22[1] = v25;
    v22[2] = *(_QWORD *)(v23 + 16);
    v26 = v15[9];
    v27 = v12 + v26;
    v28 = v13 + v26;
    v29 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
    *(_DWORD *)(v12 + v15[10]) = *(_DWORD *)(v13 + v15[10]);
    *(_WORD *)(v12 + v15[11]) = *(_WORD *)(v13 + v15[11]);
    *(_WORD *)(v12 + v15[12]) = *(_WORD *)(v13 + v15[12]);
    v30 = v15[13];
    v31 = v12 + v30;
    v32 = (uint64_t *)(v13 + v30);
    v33 = *(_QWORD *)(v13 + v30 + 8);
    if (v33 >> 60 == 15)
    {
      *(_OWORD *)v31 = *(_OWORD *)v32;
    }
    else
    {
      v35 = *v32;
      outlined copy of Data._Representation(*v32, v33);
      *(_QWORD *)v31 = v35;
      *(_QWORD *)(v31 + 8) = v33;
    }
    *(_QWORD *)(v31 + 16) = v32[2];
    v36 = v15[14];
    v37 = (void *)(v12 + v36);
    v38 = (const void *)(v13 + v36);
    v39 = type metadata accessor for P256.Signing.PublicKey();
    v40 = *(_QWORD *)(v39 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      v41 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v40 + 16))(v37, v38, v39);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
    }
  }
  else
  {
    *(_DWORD *)v12 = *(_DWORD *)v13;
    *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
    v34 = *(_QWORD *)(v13 + 16);
    *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
    *(_QWORD *)(v12 + 16) = v34;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  v42 = a3[6];
  v43 = a1 + v42;
  v44 = (uint64_t *)(a2 + v42);
  v45 = *(_QWORD *)(a2 + v42 + 8);
  if (v45 >> 60 == 15)
  {
    *(_OWORD *)v43 = *(_OWORD *)v44;
  }
  else
  {
    v46 = *v44;
    outlined copy of Data._Representation(*v44, v45);
    *(_QWORD *)v43 = v46;
    *(_QWORD *)(v43 + 8) = v45;
  }
  *(_QWORD *)(v43 + 16) = v44[2];
  v47 = a3[7];
  v48 = a1 + v47;
  v49 = (uint64_t *)(a2 + v47);
  v50 = *(_QWORD *)(a2 + v47 + 8);
  if (v50 >> 60 == 15)
  {
    *(_OWORD *)v48 = *(_OWORD *)v49;
  }
  else
  {
    v51 = *v49;
    outlined copy of Data._Representation(*v49, v50);
    *(_QWORD *)v48 = v51;
    *(_QWORD *)(v48 + 8) = v50;
  }
  *(_QWORD *)(v48 + 16) = v49[2];
  v52 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v53 = (char *)(a1 + v52);
  v54 = (char *)(a2 + v52);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v56 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v53, v54, v56);
      v57 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v58 = v57[9];
      v59 = &v53[v58];
      v60 = &v54[v58];
      v61 = type metadata accessor for SymmetricKey();
      v62 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16);
      v62(v59, v60, v61);
      v62(&v53[v57[10]], &v54[v57[10]], v61);
      v62(&v53[v57[11]], &v54[v57[11]], v61);
      v62(&v53[v57[12]], &v54[v57[12]], v61);
      goto LABEL_27;
    case 1u:
      v63 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v53, v54, v63);
      v64 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v65 = v64[9];
      v66 = &v53[v65];
      v67 = &v54[v65];
      v68 = type metadata accessor for SymmetricKey();
      v69 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16);
      v69(v66, v67, v68);
      v69(&v53[v64[10]], &v54[v64[10]], v68);
      v69(&v53[v64[11]], &v54[v64[11]], v68);
      goto LABEL_27;
    case 2u:
      v70 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v53, v54, v70);
      v71 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v72 = v71[9];
      v73 = &v53[v72];
      v74 = &v54[v72];
      v75 = type metadata accessor for SymmetricKey();
      v76 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16);
      v76(v73, v74, v75);
      v76(&v53[v71[10]], &v54[v71[10]], v75);
      v76(&v53[v71[11]], &v54[v71[11]], v75);
      v76(&v53[v71[12]], &v54[v71[12]], v75);
      v76(&v53[v71[13]], &v54[v71[13]], v75);
      v76(&v53[v71[14]], &v54[v71[14]], v75);
      goto LABEL_27;
    case 3u:
      v77 = type metadata accessor for SymmetricKey();
      v78 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 16);
      v78(v53, v54, v77);
      v79 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v78(&v53[v79[9]], &v54[v79[9]], v77);
      v78(&v53[v79[10]], &v54[v79[10]], v77);
      v78(&v53[v79[11]], &v54[v79[11]], v77);
LABEL_27:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t destroy for HandshakeState.EncryptedExtensionsState.SessionData(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_bridgeObjectRelease();
  v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = (int *)type metadata accessor for SessionTicket();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v3[7]), *(_QWORD *)(a1 + v3[7] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v3[8]), *(_QWORD *)(a1 + v3[8] + 8));
  v4 = a1 + v3[9];
  v5 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (uint64_t *)(a1 + v3[13]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    outlined consume of Data._Representation(*v6, v7);
  v8 = a1 + v3[14];
  v9 = type metadata accessor for P256.Signing.PublicKey();
  v10 = *(_QWORD *)(v9 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  return result;
}

uint64_t initializeWithCopy for HandshakeState.ServerHelloState.SessionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    v5 = (int *)type metadata accessor for SessionTicket();
    *(_DWORD *)(a1 + v5[5]) = *(_DWORD *)(a2 + v5[5]);
    *(_DWORD *)(a1 + v5[6]) = *(_DWORD *)(a2 + v5[6]);
    v6 = v5[7];
    v7 = (uint64_t *)(a1 + v6);
    v8 = a2 + v6;
    v9 = *(_QWORD *)(a2 + v6);
    v10 = *(_QWORD *)(a2 + v6 + 8);
    outlined copy of Data._Representation(v9, v10);
    *v7 = v9;
    v7[1] = v10;
    v7[2] = *(_QWORD *)(v8 + 16);
    v11 = v5[8];
    v12 = (uint64_t *)(a1 + v11);
    v13 = a2 + v11;
    v14 = *(_QWORD *)(a2 + v11);
    v15 = *(_QWORD *)(a2 + v11 + 8);
    outlined copy of Data._Representation(v14, v15);
    *v12 = v14;
    v12[1] = v15;
    v12[2] = *(_QWORD *)(v13 + 16);
    v16 = v5[9];
    v17 = a1 + v16;
    v18 = a2 + v16;
    v19 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    *(_DWORD *)(a1 + v5[10]) = *(_DWORD *)(a2 + v5[10]);
    *(_WORD *)(a1 + v5[11]) = *(_WORD *)(a2 + v5[11]);
    *(_WORD *)(a1 + v5[12]) = *(_WORD *)(a2 + v5[12]);
    v20 = v5[13];
    v21 = a1 + v20;
    v22 = (uint64_t *)(a2 + v20);
    v23 = *(_QWORD *)(a2 + v20 + 8);
    if (v23 >> 60 == 15)
    {
      *(_OWORD *)v21 = *(_OWORD *)v22;
    }
    else
    {
      v24 = *v22;
      outlined copy of Data._Representation(*v22, v23);
      *(_QWORD *)v21 = v24;
      *(_QWORD *)(v21 + 8) = v23;
    }
    *(_QWORD *)(v21 + 16) = v22[2];
    v25 = v5[14];
    v26 = (void *)(a1 + v25);
    v27 = (const void *)(a2 + v25);
    v28 = type metadata accessor for P256.Signing.PublicKey();
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t initializeWithCopy for HandshakeState.ClientHelloState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  int *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v8, v7);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v7;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 56);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v10, *(_QWORD *)(a2 + 56));
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v9;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v11;
  v12 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v13 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 160) = v13;
  v14 = v13;
  v15 = **(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(a1 + 136, a2 + 136, v14);
  v16 = *(int *)(a3 + 36);
  v17 = (char *)(a1 + v16);
  v18 = (char *)(a2 + v16);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v20 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
      v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v22 = v21[9];
      v23 = &v17[v22];
      v24 = a3;
      v25 = &v18[v22];
      v26 = type metadata accessor for SymmetricKey();
      v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
      v28 = v25;
      a3 = v24;
      v27(v23, v28, v26);
      v27(&v17[v21[10]], &v18[v21[10]], v26);
      v27(&v17[v21[11]], &v18[v21[11]], v26);
      v27(&v17[v21[12]], &v18[v21[12]], v26);
      goto LABEL_13;
    case 1u:
      v29 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v17, v18, v29);
      v30 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v31 = v30[9];
      v32 = &v17[v31];
      v33 = a3;
      v34 = &v18[v31];
      v35 = type metadata accessor for SymmetricKey();
      v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
      v37 = v34;
      a3 = v33;
      v36(v32, v37, v35);
      v36(&v17[v30[10]], &v18[v30[10]], v35);
      v36(&v17[v30[11]], &v18[v30[11]], v35);
      goto LABEL_13;
    case 2u:
      v38 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v17, v18, v38);
      v39 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v40 = v39[9];
      v41 = &v17[v40];
      v42 = a3;
      v43 = &v18[v40];
      v44 = type metadata accessor for SymmetricKey();
      v45 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16);
      v46 = v43;
      a3 = v42;
      v45(v41, v46, v44);
      v45(&v17[v39[10]], &v18[v39[10]], v44);
      v45(&v17[v39[11]], &v18[v39[11]], v44);
      v45(&v17[v39[12]], &v18[v39[12]], v44);
      v45(&v17[v39[13]], &v18[v39[13]], v44);
      v45(&v17[v39[14]], &v18[v39[14]], v44);
      goto LABEL_13;
    case 3u:
      v47 = type metadata accessor for SymmetricKey();
      v48 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16);
      v48(v17, v18, v47);
      v49 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v48(&v17[v49[9]], &v18[v49[9]], v47);
      v48(&v17[v49[10]], &v18[v49[10]], v47);
      v48(&v17[v49[11]], &v18[v49[11]], v47);
LABEL_13:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      break;
  }
  v50 = *(int *)(a3 + 40);
  v51 = (char *)(a1 + v50);
  v52 = (char *)(a2 + v50);
  v53 = (int *)type metadata accessor for SessionTicket();
  v54 = *((_QWORD *)v53 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v54 + 48))(v52, 1, v53))
  {
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    v56 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v51, v52, v56);
    *(_DWORD *)&v51[v53[5]] = *(_DWORD *)&v52[v53[5]];
    *(_DWORD *)&v51[v53[6]] = *(_DWORD *)&v52[v53[6]];
    v57 = v53[7];
    v58 = (uint64_t *)&v51[v57];
    v59 = &v52[v57];
    v60 = *(_QWORD *)&v52[v57];
    v61 = *(_QWORD *)&v52[v57 + 8];
    outlined copy of Data._Representation(v60, v61);
    *v58 = v60;
    v58[1] = v61;
    v58[2] = *((_QWORD *)v59 + 2);
    v62 = v53[8];
    v63 = (uint64_t *)&v51[v62];
    v64 = &v52[v62];
    v65 = *(_QWORD *)&v52[v62];
    v66 = *(_QWORD *)&v52[v62 + 8];
    outlined copy of Data._Representation(v65, v66);
    *v63 = v65;
    v63[1] = v66;
    v63[2] = *((_QWORD *)v64 + 2);
    v67 = v53[9];
    v68 = &v51[v67];
    v69 = &v52[v67];
    v70 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v68, v69, v70);
    *(_DWORD *)&v51[v53[10]] = *(_DWORD *)&v52[v53[10]];
    *(_WORD *)&v51[v53[11]] = *(_WORD *)&v52[v53[11]];
    *(_WORD *)&v51[v53[12]] = *(_WORD *)&v52[v53[12]];
    v71 = v53[13];
    v72 = &v51[v71];
    v73 = (uint64_t *)&v52[v71];
    v74 = *(_QWORD *)&v52[v71 + 8];
    if (v74 >> 60 == 15)
    {
      *(_OWORD *)v72 = *(_OWORD *)v73;
    }
    else
    {
      v75 = *v73;
      outlined copy of Data._Representation(*v73, v74);
      *(_QWORD *)v72 = v75;
      *((_QWORD *)v72 + 1) = v74;
    }
    *((_QWORD *)v72 + 2) = v73[2];
    v76 = v53[14];
    v77 = &v51[v76];
    v78 = &v52[v76];
    v79 = type metadata accessor for P256.Signing.PublicKey();
    v80 = *(_QWORD *)(v79 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
    {
      v81 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v77, v78, v79);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v54 + 56))(v51, 0, 1, v53);
  }
  return a1;
}

uint64_t initializeWithCopy for HandshakeState.ServerHelloState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  int *v71;
  uint64_t v72;
  int *v74;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v8, v7);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v7;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 56);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v10, *(_QWORD *)(a2 + 56));
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v9;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v11 = a3[5];
  v12 = a1 + v11;
  v13 = a2 + v11;
  type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
  v74 = a3;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = (int *)type metadata accessor for SessionTicket();
    *(_DWORD *)(v12 + v15[5]) = *(_DWORD *)(v13 + v15[5]);
    *(_DWORD *)(v12 + v15[6]) = *(_DWORD *)(v13 + v15[6]);
    v16 = v15[7];
    v17 = (uint64_t *)(v12 + v16);
    v18 = v13 + v16;
    v19 = *(_QWORD *)(v13 + v16);
    v20 = *(_QWORD *)(v13 + v16 + 8);
    outlined copy of Data._Representation(v19, v20);
    *v17 = v19;
    v17[1] = v20;
    v17[2] = *(_QWORD *)(v18 + 16);
    v21 = v15[8];
    v22 = (uint64_t *)(v12 + v21);
    v23 = v13 + v21;
    v24 = *(_QWORD *)(v13 + v21);
    v25 = *(_QWORD *)(v13 + v21 + 8);
    outlined copy of Data._Representation(v24, v25);
    *v22 = v24;
    v22[1] = v25;
    v22[2] = *(_QWORD *)(v23 + 16);
    v26 = v15[9];
    v27 = v12 + v26;
    v28 = v13 + v26;
    v29 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
    *(_DWORD *)(v12 + v15[10]) = *(_DWORD *)(v13 + v15[10]);
    *(_WORD *)(v12 + v15[11]) = *(_WORD *)(v13 + v15[11]);
    *(_WORD *)(v12 + v15[12]) = *(_WORD *)(v13 + v15[12]);
    v30 = v15[13];
    v31 = v12 + v30;
    v32 = (uint64_t *)(v13 + v30);
    v33 = *(_QWORD *)(v13 + v30 + 8);
    if (v33 >> 60 == 15)
    {
      *(_OWORD *)v31 = *(_OWORD *)v32;
    }
    else
    {
      v34 = *v32;
      outlined copy of Data._Representation(*v32, v33);
      *(_QWORD *)v31 = v34;
      *(_QWORD *)(v31 + 8) = v33;
    }
    *(_QWORD *)(v31 + 16) = v32[2];
    a3 = v74;
    v35 = v15[14];
    v36 = (void *)(v12 + v35);
    v37 = (const void *)(v13 + v35);
    v38 = type metadata accessor for P256.Signing.PublicKey();
    v39 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      v40 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v39 + 16))(v36, v37, v38);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
  }
  else
  {
    *(_DWORD *)v12 = *(_DWORD *)v13;
    *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  v41 = a3[6];
  v42 = (char *)(a1 + v41);
  v43 = (char *)(a2 + v41);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v45 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v42, v43, v45);
      v46 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v47 = v46[9];
      v48 = &v42[v47];
      v49 = &v43[v47];
      v50 = type metadata accessor for SymmetricKey();
      v51 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
      v51(v48, v49, v50);
      v51(&v42[v46[10]], &v43[v46[10]], v50);
      v51(&v42[v46[11]], &v43[v46[11]], v50);
      v52 = v50;
      a3 = v74;
      v51(&v42[v46[12]], &v43[v46[12]], v52);
      goto LABEL_21;
    case 1u:
      v53 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v42, v43, v53);
      v54 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v55 = v54[9];
      v56 = &v42[v55];
      v57 = &v43[v55];
      v58 = type metadata accessor for SymmetricKey();
      v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
      v59(v56, v57, v58);
      v59(&v42[v54[10]], &v43[v54[10]], v58);
      v60 = v58;
      a3 = v74;
      v59(&v42[v54[11]], &v43[v54[11]], v60);
      goto LABEL_21;
    case 2u:
      v61 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v42, v43, v61);
      v62 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v63 = v62[9];
      v64 = &v42[v63];
      v65 = &v43[v63];
      v66 = type metadata accessor for SymmetricKey();
      v67 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16);
      v67(v64, v65, v66);
      v67(&v42[v62[10]], &v43[v62[10]], v66);
      v67(&v42[v62[11]], &v43[v62[11]], v66);
      v67(&v42[v62[12]], &v43[v62[12]], v66);
      v67(&v42[v62[13]], &v43[v62[13]], v66);
      v68 = v66;
      a3 = v74;
      v67(&v42[v62[14]], &v43[v62[14]], v68);
      goto LABEL_21;
    case 3u:
      v69 = type metadata accessor for SymmetricKey();
      v70 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16);
      v70(v42, v43, v69);
      v71 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v70(&v42[v71[9]], &v43[v71[9]], v69);
      v70(&v42[v71[10]], &v43[v71[10]], v69);
      v70(&v42[v71[11]], &v43[v71[11]], v69);
LABEL_21:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      break;
  }
  v72 = a3[8];
  *(_WORD *)(a1 + a3[7]) = *(_WORD *)(a2 + a3[7]);
  *(_WORD *)(a1 + v72) = *(_WORD *)(a2 + v72);
  return a1;
}

uint64_t nwswifttls_copy_info(uint64_t a1, int a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;

  if (!a1)
    return 0;
  v4 = *(id *)(a1 + 40);
  if (v4
    && (v5 = *(_QWORD *)(a1 + 32)) != 0
    && (v6 = *(_QWORD *)(v5 + 24)) != 0
    && (v7 = *(uint64_t (**)(void))(v6 + 224)) != 0)
  {
    if (a2 == 255)
    {
      v8 = v7();
      if (!v8)
        v8 = nw_array_create();
      nw_array_append();
    }
    else
    {
      v8 = v7();
    }
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t nwswifttls_supports_external_data()
{
  return 1;
}

uint64_t type metadata instantiation function for HandshakeStateMachine.ProcessStep()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata instantiation function for SessionKeyManager()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata instantiation function for SessionKeyManager.State.AllSecrets()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata instantiation function for SessionKeyManager.State.MasterSecret()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata instantiation function for SessionKeyManager.State.EarlySecret()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t ObjC metadata update function for STLSHandshaker()
{
  return type metadata accessor for STLSHandshaker();
}

uint64_t __nwswifttls_update_session_state_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t specialized NewSessionTicket.init(bytes:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  specialized ByteBuffer.readInteger<A>(as:)();
  if ((v5 & 0x100000000) != 0)
    goto LABEL_8;
  v6 = v5;
  specialized ByteBuffer.readInteger<A>(as:)();
  if ((v7 & 0x100000000) != 0)
    goto LABEL_8;
  v8 = v7;
  v10 = *a1;
  v9 = a1[1];
  v11 = a1[2];
  outlined copy of Data._Representation(*a1, v9);
  specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)((uint64_t)a1);
  if (v2)
  {
    v12 = outlined consume of Data._Representation(*a1, a1[1]);
    *a1 = v10;
    a1[1] = v9;
    a1[2] = v11;
    return swift_willThrow(v12);
  }
  if (v20 >> 60 == 15)
  {
    outlined consume of Data._Representation(*a1, a1[1]);
LABEL_7:
    *a1 = v10;
    a1[1] = v9;
    a1[2] = v11;
LABEL_8:
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v12 = swift_allocError();
    *(_DWORD *)v13 = 0;
    *(_BYTE *)(v13 + 4) = 1;
    return swift_willThrow(v12);
  }
  outlined consume of Data._Representation(v10, v9);
  v16 = *a1;
  v15 = a1[1];
  outlined copy of Data._Representation(*a1, v15);
  specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)((uint64_t)a1);
  outlined consume of Data._Representation(v16, v15);
  v10 = *a1;
  v9 = a1[1];
  v11 = a1[2];
  outlined copy of Data._Representation(*a1, v9);
  specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)((uint64_t)a1);
  if (!v17)
  {
    outlined consume of Data._Representation(*a1, a1[1]);
    outlined consume of ByteBuffer?(v19, v20);
    outlined consume of ByteBuffer?(v19, v20);
    goto LABEL_7;
  }
  v18 = v17;
  result = outlined consume of Data._Representation(v10, v9);
  *(_DWORD *)a2 = v6;
  *(_DWORD *)(a2 + 4) = v8;
  *(_QWORD *)(a2 + 8) = v19;
  *(_QWORD *)(a2 + 16) = v20;
  *(_QWORD *)(a2 + 24) = v21;
  *(_QWORD *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 40) = v20;
  *(_QWORD *)(a2 + 48) = v21;
  *(_QWORD *)(a2 + 56) = v18;
  return result;
}

uint64_t outlined release of HandshakeMessage(uint64_t a1)
{
  outlined consume of HandshakeMessage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_BYTE *)(a1 + 104));
  return a1;
}

uint64_t outlined consume of HandshakeMessage(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  switch(a14)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 1:
    case 2:
      goto LABEL_7;
    case 3:
    case 4:
      outlined consume of Data._Representation(result, a2);
      goto LABEL_7;
    case 5:
      result = a2;
      a2 = a3;
      goto LABEL_5;
    case 6:
LABEL_5:
      result = outlined consume of Data._Representation(result, a2);
      break;
    case 7:
      outlined consume of Data._Representation(a2, a3);
      outlined consume of Data._Representation(a5, a6);
LABEL_7:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for HandshakeState.ClientHelloState(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  int *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  int *v14;
  char *v15;
  uint64_t v16;
  int *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  int *v21;
  char *v22;
  int *v23;
  uint64_t result;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1[4];
  if (v4 >> 60 != 15)
    outlined consume of Data._Representation(a1[3], v4);
  v5 = a1[7];
  if (v5 >> 60 != 15)
    outlined consume of Data._Representation(a1[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 17));
  v6 = (char *)a1 + *(int *)(a2 + 36);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v7 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
      v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v9 = &v6[v8[9]];
      v10 = type metadata accessor for SymmetricKey();
      v11 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
      v11(v9, v10);
      v11(&v6[v8[10]], v10);
      v11(&v6[v8[11]], v10);
      v12 = v8[12];
      goto LABEL_9;
    case 1u:
      v13 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v6, v13);
      v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v15 = &v6[v14[9]];
      v10 = type metadata accessor for SymmetricKey();
      v11 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
      v11(v15, v10);
      v11(&v6[v14[10]], v10);
      v12 = v14[11];
      goto LABEL_9;
    case 2u:
      v16 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v6, v16);
      v17 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v18 = &v6[v17[9]];
      v10 = type metadata accessor for SymmetricKey();
      v11 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
      v11(v18, v10);
      v11(&v6[v17[10]], v10);
      v11(&v6[v17[11]], v10);
      v11(&v6[v17[12]], v10);
      v11(&v6[v17[13]], v10);
      v12 = v17[14];
LABEL_9:
      v11(&v6[v12], v10);
      break;
    case 3u:
      v19 = type metadata accessor for SymmetricKey();
      v20 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
      v20(v6, v19);
      v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v20(&v6[v21[9]], v19);
      v20(&v6[v21[10]], v19);
      v20(&v6[v21[11]], v19);
      break;
    default:
      break;
  }
  v22 = (char *)a1 + *(int *)(a2 + 40);
  v23 = (int *)type metadata accessor for SessionTicket();
  result = (*(uint64_t (**)(char *, uint64_t, int *))(*((_QWORD *)v23 - 1) + 48))(v22, 1, v23);
  if (!(_DWORD)result)
  {
    v25 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v22, v25);
    outlined consume of Data._Representation(*(_QWORD *)&v22[v23[7]], *(_QWORD *)&v22[v23[7] + 8]);
    outlined consume of Data._Representation(*(_QWORD *)&v22[v23[8]], *(_QWORD *)&v22[v23[8] + 8]);
    v26 = &v22[v23[9]];
    v27 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
    v28 = (uint64_t *)&v22[v23[13]];
    v29 = v28[1];
    if (v29 >> 60 != 15)
      outlined consume of Data._Representation(*v28, v29);
    v30 = &v22[v23[14]];
    v31 = type metadata accessor for P256.Signing.PublicKey();
    v32 = *(_QWORD *)(v31 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v30, v31);
  }
  return result;
}

uint64_t destroy for HandshakeState.EncryptedExtensionsState(uint64_t *a1, int *a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  int *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  char *v29;
  uint64_t v30;
  int *v31;
  char *v32;
  uint64_t v33;
  int *v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1[4];
  if (v4 >> 60 != 15)
    outlined consume of Data._Representation(a1[3], v4);
  v5 = a1[7];
  if (v5 >> 60 != 15)
    outlined consume of Data._Representation(a1[6], v5);
  v6 = (char *)a1 + a2[5];
  type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    v8 = (int *)type metadata accessor for SessionTicket();
    outlined consume of Data._Representation(*(_QWORD *)&v6[v8[7]], *(_QWORD *)&v6[v8[7] + 8]);
    outlined consume of Data._Representation(*(_QWORD *)&v6[v8[8]], *(_QWORD *)&v6[v8[8] + 8]);
    v9 = &v6[v8[9]];
    v10 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    v11 = (uint64_t *)&v6[v8[13]];
    v12 = v11[1];
    if (v12 >> 60 != 15)
      outlined consume of Data._Representation(*v11, v12);
    v13 = &v6[v8[14]];
    v14 = type metadata accessor for P256.Signing.PublicKey();
    v15 = *(_QWORD *)(v14 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v16 = (uint64_t *)((char *)a1 + a2[6]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    outlined consume of Data._Representation(*v16, v17);
  v18 = (uint64_t *)((char *)a1 + a2[7]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    outlined consume of Data._Representation(*v18, v19);
  v20 = (char *)a1 + a2[9];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      v22 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v20, v22);
      v23 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v24 = &v20[v23[9]];
      v25 = type metadata accessor for SymmetricKey();
      v35 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8);
      v35(v24, v25);
      v35(&v20[v23[10]], v25);
      v35(&v20[v23[11]], v25);
      v26 = v23[12];
      goto LABEL_19;
    case 1:
      v27 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v20, v27);
      v28 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v29 = &v20[v28[9]];
      v25 = type metadata accessor for SymmetricKey();
      v35 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8);
      v35(v29, v25);
      v35(&v20[v28[10]], v25);
      v26 = v28[11];
      goto LABEL_19;
    case 2:
      v30 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v20, v30);
      v31 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v32 = &v20[v31[9]];
      v25 = type metadata accessor for SymmetricKey();
      v35 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8);
      v35(v32, v25);
      v35(&v20[v31[10]], v25);
      v35(&v20[v31[11]], v25);
      v35(&v20[v31[12]], v25);
      v35(&v20[v31[13]], v25);
      v26 = v31[14];
LABEL_19:
      result = ((uint64_t (*)(char *, uint64_t))v35)(&v20[v26], v25);
      break;
    case 3:
      v33 = type metadata accessor for SymmetricKey();
      v36 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8);
      v36(v20, v33);
      v34 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v36(&v20[v34[9]], v33);
      v36(&v20[v34[10]], v33);
      result = ((uint64_t (*)(char *, uint64_t))v36)(&v20[v34[11]], v33);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for HandshakeState.ServerCertificateVerifyState(uint64_t *a1, int *a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  int *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  char *v22;
  uint64_t v23;
  int *v24;
  char *v25;
  uint64_t v26;
  int *v27;
  void (*v28)(char *, uint64_t);
  void (*v29)(char *, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1[4];
  if (v4 >> 60 != 15)
    outlined consume of Data._Representation(a1[3], v4);
  v5 = a1[7];
  if (v5 >> 60 != 15)
    outlined consume of Data._Representation(a1[6], v5);
  v6 = (char *)a1 + a2[7];
  v7 = type metadata accessor for P256.Signing.PublicKey();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  v9 = (uint64_t *)((char *)a1 + a2[8]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    outlined consume of Data._Representation(*v9, v10);
  v11 = (uint64_t *)((char *)a1 + a2[9]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    outlined consume of Data._Representation(*v11, v12);
  v13 = (char *)a1 + a2[11];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      v15 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
      v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v17 = &v13[v16[9]];
      v18 = type metadata accessor for SymmetricKey();
      v28 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
      v28(v17, v18);
      v28(&v13[v16[10]], v18);
      v28(&v13[v16[11]], v18);
      v19 = v16[12];
      goto LABEL_15;
    case 1:
      v20 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v13, v20);
      v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v22 = &v13[v21[9]];
      v18 = type metadata accessor for SymmetricKey();
      v28 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
      v28(v22, v18);
      v28(&v13[v21[10]], v18);
      v19 = v21[11];
      goto LABEL_15;
    case 2:
      v23 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v13, v23);
      v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v25 = &v13[v24[9]];
      v18 = type metadata accessor for SymmetricKey();
      v28 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
      v28(v25, v18);
      v28(&v13[v24[10]], v18);
      v28(&v13[v24[11]], v18);
      v28(&v13[v24[12]], v18);
      v28(&v13[v24[13]], v18);
      v19 = v24[14];
LABEL_15:
      result = ((uint64_t (*)(char *, uint64_t))v28)(&v13[v19], v18);
      break;
    case 3:
      v26 = type metadata accessor for SymmetricKey();
      v29 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8);
      v29(v13, v26);
      v27 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v29(&v13[v27[9]], v26);
      v29(&v13[v27[10]], v26);
      result = ((uint64_t (*)(char *, uint64_t))v29)(&v13[v27[11]], v26);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for SessionTicket(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[7]), *(_QWORD *)(a1 + a2[7] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8));
  v5 = a1 + a2[9];
  v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (uint64_t *)(a1 + a2[13]);
  v8 = v7[1];
  if (v8 >> 60 != 15)
    outlined consume of Data._Representation(*v7, v8);
  v9 = a1 + a2[14];
  v10 = type metadata accessor for P256.Signing.PublicKey();
  v11 = *(_QWORD *)(v10 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  return result;
}

uint64_t destroy for HandshakeState(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int *v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int *v42;
  char *v43;
  uint64_t v44;
  int *v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int *ready;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  uint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  int *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  char *v92;
  uint64_t v93;
  int *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  int *v99;
  uint64_t (*v100)(char *, uint64_t);
  uint64_t v101;
  int *v102;
  char *v103;
  uint64_t v104;
  int *v105;
  char *v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t);
  int *v109;
  char *v110;
  int *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t *v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = a1[4];
      if (v3 >> 60 != 15)
        outlined consume of Data._Representation(a1[3], v3);
      v4 = a1[7];
      if (v4 >> 60 != 15)
        outlined consume of Data._Representation(a1[6], v4);
      v5 = type metadata accessor for HandshakeState.IdleState(0);
      v6 = (char *)a1 + *(int *)(v5 + 20);
      v7 = (int *)type metadata accessor for SessionTicket();
      if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v6, 1, v7))
      {
        v8 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
        outlined consume of Data._Representation(*(_QWORD *)&v6[v7[7]], *(_QWORD *)&v6[v7[7] + 8]);
        outlined consume of Data._Representation(*(_QWORD *)&v6[v7[8]], *(_QWORD *)&v6[v7[8] + 8]);
        v9 = &v6[v7[9]];
        v10 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
        v11 = (uint64_t *)&v6[v7[13]];
        v12 = v11[1];
        if (v12 >> 60 != 15)
          outlined consume of Data._Representation(*v11, v12);
        v13 = &v6[v7[14]];
        v14 = type metadata accessor for P256.Signing.PublicKey();
        v15 = *(_QWORD *)(v14 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
          (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
      }
      v16 = (char *)a1 + *(int *)(v5 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 0:
          goto LABEL_77;
        case 1:
          goto LABEL_78;
        case 2:
          goto LABEL_79;
        case 3:
          goto LABEL_81;
        default:
          return result;
      }
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 = a1[4];
      if (v17 >> 60 != 15)
        outlined consume of Data._Representation(a1[3], v17);
      v18 = a1[7];
      if (v18 >> 60 != 15)
        outlined consume of Data._Representation(a1[6], v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 17));
      v19 = type metadata accessor for HandshakeState.ClientHelloState(0);
      v20 = (char *)a1 + *(int *)(v19 + 36);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v21 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
          v22 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          v23 = &v20[v22[9]];
          v24 = type metadata accessor for SymmetricKey();
          v25 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8);
          v25(v23, v24);
          v25(&v20[v22[10]], v24);
          v25(&v20[v22[11]], v24);
          v26 = v22[12];
          goto LABEL_86;
        case 1u:
          v101 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v101 - 8) + 8))(v20, v101);
          v102 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          v103 = &v20[v102[9]];
          v24 = type metadata accessor for SymmetricKey();
          v25 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8);
          v25(v103, v24);
          v25(&v20[v102[10]], v24);
          v26 = v102[11];
          goto LABEL_86;
        case 2u:
          v104 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v104 - 8) + 8))(v20, v104);
          v105 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          v106 = &v20[v105[9]];
          v24 = type metadata accessor for SymmetricKey();
          v25 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8);
          v25(v106, v24);
          v25(&v20[v105[10]], v24);
          v25(&v20[v105[11]], v24);
          v25(&v20[v105[12]], v24);
          v25(&v20[v105[13]], v24);
          v26 = v105[14];
LABEL_86:
          v25(&v20[v26], v24);
          break;
        case 3u:
          v107 = type metadata accessor for SymmetricKey();
          v108 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v107 - 8) + 8);
          v108(v20, v107);
          v109 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v108(&v20[v109[9]], v107);
          v108(&v20[v109[10]], v107);
          v108(&v20[v109[11]], v107);
          break;
        default:
          break;
      }
      v110 = (char *)a1 + *(int *)(v19 + 40);
      v111 = (int *)type metadata accessor for SessionTicket();
      result = (*(uint64_t (**)(char *, uint64_t, int *))(*((_QWORD *)v111 - 1) + 48))(v110, 1, v111);
      if (!(_DWORD)result)
      {
        v112 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v112 - 8) + 8))(v110, v112);
        outlined consume of Data._Representation(*(_QWORD *)&v110[v111[7]], *(_QWORD *)&v110[v111[7] + 8]);
        outlined consume of Data._Representation(*(_QWORD *)&v110[v111[8]], *(_QWORD *)&v110[v111[8] + 8]);
        v113 = &v110[v111[9]];
        v114 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v114 - 8) + 8))(v113, v114);
        v115 = (uint64_t *)&v110[v111[13]];
        v116 = v115[1];
        if (v116 >> 60 != 15)
          outlined consume of Data._Representation(*v115, v116);
        v117 = &v110[v111[14]];
        v118 = type metadata accessor for P256.Signing.PublicKey();
        v119 = *(_QWORD *)(v118 - 8);
        result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118);
        if (!(_DWORD)result)
        {
          v100 = *(uint64_t (**)(char *, uint64_t))(v119 + 8);
          v96 = v117;
          v97 = v118;
LABEL_83:
          result = v100(v96, v97);
        }
      }
      break;
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27 = a1[4];
      if (v27 >> 60 != 15)
        outlined consume of Data._Representation(a1[3], v27);
      v28 = a1[7];
      if (v28 >> 60 != 15)
        outlined consume of Data._Representation(a1[6], v28);
      v29 = type metadata accessor for HandshakeState.ServerHelloState(0);
      v30 = (char *)a1 + *(int *)(v29 + 20);
      type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v31 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v30, v31);
        v32 = (int *)type metadata accessor for SessionTicket();
        outlined consume of Data._Representation(*(_QWORD *)&v30[v32[7]], *(_QWORD *)&v30[v32[7] + 8]);
        outlined consume of Data._Representation(*(_QWORD *)&v30[v32[8]], *(_QWORD *)&v30[v32[8] + 8]);
        v33 = &v30[v32[9]];
        v34 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
        v35 = (uint64_t *)&v30[v32[13]];
        v36 = v35[1];
        if (v36 >> 60 != 15)
          outlined consume of Data._Representation(*v35, v36);
        v37 = &v30[v32[14]];
        v38 = type metadata accessor for P256.Signing.PublicKey();
        v39 = *(_QWORD *)(v38 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
          (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v38);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v16 = (char *)a1 + *(int *)(v29 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 0:
          goto LABEL_77;
        case 1:
          goto LABEL_78;
        case 2:
          goto LABEL_79;
        case 3:
          goto LABEL_81;
        default:
          return result;
      }
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v40 = a1[4];
      if (v40 >> 60 != 15)
        outlined consume of Data._Representation(a1[3], v40);
      v41 = a1[7];
      if (v41 >> 60 != 15)
        outlined consume of Data._Representation(a1[6], v41);
      v42 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
      v43 = (char *)a1 + v42[5];
      type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v44 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v43, v44);
        v45 = (int *)type metadata accessor for SessionTicket();
        outlined consume of Data._Representation(*(_QWORD *)&v43[v45[7]], *(_QWORD *)&v43[v45[7] + 8]);
        outlined consume of Data._Representation(*(_QWORD *)&v43[v45[8]], *(_QWORD *)&v43[v45[8] + 8]);
        v46 = &v43[v45[9]];
        v47 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v46, v47);
        v48 = (uint64_t *)&v43[v45[13]];
        v49 = v48[1];
        if (v49 >> 60 != 15)
          outlined consume of Data._Representation(*v48, v49);
        v50 = &v43[v45[14]];
        v51 = type metadata accessor for P256.Signing.PublicKey();
        v52 = *(_QWORD *)(v51 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
          (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v51);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v81 = (uint64_t *)((char *)a1 + v42[6]);
      v82 = v81[1];
      if (v82 >> 60 != 15)
        outlined consume of Data._Representation(*v81, v82);
      v83 = (uint64_t *)((char *)a1 + v42[7]);
      v84 = v83[1];
      if (v84 >> 60 != 15)
        outlined consume of Data._Representation(*v83, v84);
      v16 = (char *)a1 + v42[9];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 0:
          goto LABEL_77;
        case 1:
          goto LABEL_78;
        case 2:
          goto LABEL_79;
        case 3:
          goto LABEL_81;
        default:
          return result;
      }
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v53 = a1[4];
      if (v53 >> 60 != 15)
        outlined consume of Data._Representation(a1[3], v53);
      v54 = a1[7];
      if (v54 >> 60 != 15)
        outlined consume of Data._Representation(a1[6], v54);
      v55 = a1[11];
      if (v55 >> 60 != 15)
        outlined consume of Data._Representation(a1[10], v55);
      v56 = a1[14];
      if (v56 >> 60 != 15)
        outlined consume of Data._Representation(a1[13], v56);
      v57 = type metadata accessor for HandshakeState.ServerCertificateState(0);
      v58 = (char *)a1 + *(int *)(v57 + 40);
      v59 = type metadata accessor for P256.Signing.PublicKey();
      v60 = *(_QWORD *)(v59 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
        (*(void (**)(char *, uint64_t))(v60 + 8))(v58, v59);
      v16 = (char *)a1 + *(int *)(v57 + 44);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 0:
          goto LABEL_77;
        case 1:
          goto LABEL_78;
        case 2:
          goto LABEL_79;
        case 3:
          goto LABEL_81;
        default:
          return result;
      }
    case 5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v61 = a1[4];
      if (v61 >> 60 != 15)
        outlined consume of Data._Representation(a1[3], v61);
      v62 = a1[7];
      if (v62 >> 60 != 15)
        outlined consume of Data._Representation(a1[6], v62);
      v63 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
      v64 = (char *)a1 + v63[7];
      v65 = type metadata accessor for P256.Signing.PublicKey();
      v66 = *(_QWORD *)(v65 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
        (*(void (**)(char *, uint64_t))(v66 + 8))(v64, v65);
      v67 = (uint64_t *)((char *)a1 + v63[8]);
      v68 = v67[1];
      if (v68 >> 60 != 15)
        outlined consume of Data._Representation(*v67, v68);
      v69 = (uint64_t *)((char *)a1 + v63[9]);
      v70 = v69[1];
      if (v70 >> 60 != 15)
        outlined consume of Data._Representation(*v69, v70);
      v16 = (char *)a1 + v63[11];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 0:
          goto LABEL_77;
        case 1:
          goto LABEL_78;
        case 2:
          goto LABEL_79;
        case 3:
          goto LABEL_81;
        default:
          return result;
      }
    case 6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v71 = a1[4];
      if (v71 >> 60 != 15)
        outlined consume of Data._Representation(a1[3], v71);
      v72 = a1[7];
      if (v72 >> 60 != 15)
        outlined consume of Data._Representation(a1[6], v72);
      ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
      v74 = (char *)a1 + ready[7];
      v75 = type metadata accessor for P256.Signing.PublicKey();
      v76 = *(_QWORD *)(v75 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
        (*(void (**)(char *, uint64_t))(v76 + 8))(v74, v75);
      v77 = (uint64_t *)((char *)a1 + ready[8]);
      v78 = v77[1];
      if (v78 >> 60 != 15)
        outlined consume of Data._Representation(*v77, v78);
      v79 = (uint64_t *)((char *)a1 + ready[9]);
      v80 = v79[1];
      if (v80 >> 60 != 15)
        outlined consume of Data._Representation(*v79, v80);
      v16 = (char *)a1 + ready[11];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 0:
LABEL_77:
          v85 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v85 - 8) + 8))(v16, v85);
          v86 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          v87 = &v16[v86[9]];
          v88 = type metadata accessor for SymmetricKey();
          v120 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v88 - 8) + 8);
          v120(v87, v88);
          v120(&v16[v86[10]], v88);
          v120(&v16[v86[11]], v88);
          v89 = v86[12];
          goto LABEL_80;
        case 1:
LABEL_78:
          v90 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v90 - 8) + 8))(v16, v90);
          v91 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          v92 = &v16[v91[9]];
          v88 = type metadata accessor for SymmetricKey();
          v120 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v88 - 8) + 8);
          v120(v92, v88);
          v120(&v16[v91[10]], v88);
          v89 = v91[11];
          goto LABEL_80;
        case 2:
LABEL_79:
          v93 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v93 - 8) + 8))(v16, v93);
          v94 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          v95 = &v16[v94[9]];
          v88 = type metadata accessor for SymmetricKey();
          v120 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v88 - 8) + 8);
          v120(v95, v88);
          v120(&v16[v94[10]], v88);
          v120(&v16[v94[11]], v88);
          v120(&v16[v94[12]], v88);
          v120(&v16[v94[13]], v88);
          v89 = v94[14];
LABEL_80:
          v96 = &v16[v89];
          v97 = v88;
          goto LABEL_82;
        case 3:
LABEL_81:
          v98 = type metadata accessor for SymmetricKey();
          v120 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v98 - 8) + 8);
          v120(v16, v98);
          v99 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v120(&v16[v99[9]], v98);
          v120(&v16[v99[10]], v98);
          v96 = &v16[v99[11]];
          v97 = v98;
LABEL_82:
          v100 = (uint64_t (*)(char *, uint64_t))v120;
          goto LABEL_83;
        default:
          return result;
      }
    default:
      return result;
  }
  return result;
}

uint64_t destroy for HandshakeStateMachine(uint64_t *a1, int *a2)
{
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  int *v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int *v45;
  char *v46;
  uint64_t v47;
  int *v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int *ready;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  int *v89;
  char *v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  int *v95;
  char *v96;
  uint64_t v97;
  int *v98;
  char *v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t);
  int *v102;
  uint64_t v103;
  int *v104;
  char *v105;
  uint64_t v106;
  int *v107;
  char *v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t);
  int *v111;
  char *v112;
  int *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t *v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t result;
  unint64_t v124;
  unint64_t v125;

  v4 = a1[1];
  if (v4 >> 60 != 15)
    outlined consume of Data._Representation(*a1, v4);
  v5 = (uint64_t *)((char *)a1 + a2[6]);
  type metadata accessor for HandshakeState(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = v5[4];
      if (v6 >> 60 != 15)
        outlined consume of Data._Representation(v5[3], v6);
      v7 = v5[7];
      if (v7 >> 60 != 15)
        outlined consume of Data._Representation(v5[6], v7);
      v8 = type metadata accessor for HandshakeState.IdleState(0);
      v9 = (char *)v5 + *(int *)(v8 + 20);
      v10 = (int *)type metadata accessor for SessionTicket();
      if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48))(v9, 1, v10))
      {
        v11 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
        outlined consume of Data._Representation(*(_QWORD *)&v9[v10[7]], *(_QWORD *)&v9[v10[7] + 8]);
        outlined consume of Data._Representation(*(_QWORD *)&v9[v10[8]], *(_QWORD *)&v9[v10[8] + 8]);
        v12 = &v9[v10[9]];
        v13 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
        v14 = (uint64_t *)&v9[v10[13]];
        v15 = v14[1];
        if (v15 >> 60 != 15)
          outlined consume of Data._Representation(*v14, v15);
        v16 = &v9[v10[14]];
        v17 = type metadata accessor for P256.Signing.PublicKey();
        v18 = *(_QWORD *)(v17 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
          (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
      }
      v19 = (char *)v5 + *(int *)(v8 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_79;
        case 1u:
          goto LABEL_80;
        case 2u:
          goto LABEL_81;
        case 3u:
          goto LABEL_83;
        default:
          goto LABEL_93;
      }
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v20 = v5[4];
      if (v20 >> 60 != 15)
        outlined consume of Data._Representation(v5[3], v20);
      v21 = v5[7];
      if (v21 >> 60 != 15)
        outlined consume of Data._Representation(v5[6], v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v5 + 17));
      v22 = type metadata accessor for HandshakeState.ClientHelloState(0);
      v23 = (char *)v5 + *(int *)(v22 + 36);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v24 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
          v25 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          v26 = &v23[v25[9]];
          v27 = type metadata accessor for SymmetricKey();
          v28 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8);
          v28(v26, v27);
          v28(&v23[v25[10]], v27);
          v28(&v23[v25[11]], v27);
          v29 = v25[12];
          goto LABEL_86;
        case 1u:
          v103 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v103 - 8) + 8))(v23, v103);
          v104 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          v105 = &v23[v104[9]];
          v27 = type metadata accessor for SymmetricKey();
          v28 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8);
          v28(v105, v27);
          v28(&v23[v104[10]], v27);
          v29 = v104[11];
          goto LABEL_86;
        case 2u:
          v106 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v106 - 8) + 8))(v23, v106);
          v107 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          v108 = &v23[v107[9]];
          v27 = type metadata accessor for SymmetricKey();
          v28 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8);
          v28(v108, v27);
          v28(&v23[v107[10]], v27);
          v28(&v23[v107[11]], v27);
          v28(&v23[v107[12]], v27);
          v28(&v23[v107[13]], v27);
          v29 = v107[14];
LABEL_86:
          v28(&v23[v29], v27);
          break;
        case 3u:
          v109 = type metadata accessor for SymmetricKey();
          v110 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v109 - 8) + 8);
          v110(v23, v109);
          v111 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v110(&v23[v111[9]], v109);
          v110(&v23[v111[10]], v109);
          v110(&v23[v111[11]], v109);
          break;
        default:
          break;
      }
      v112 = (char *)v5 + *(int *)(v22 + 40);
      v113 = (int *)type metadata accessor for SessionTicket();
      if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v113 - 1) + 48))(v112, 1, v113))
      {
        v114 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v114 - 8) + 8))(v112, v114);
        outlined consume of Data._Representation(*(_QWORD *)&v112[v113[7]], *(_QWORD *)&v112[v113[7] + 8]);
        outlined consume of Data._Representation(*(_QWORD *)&v112[v113[8]], *(_QWORD *)&v112[v113[8] + 8]);
        v115 = &v112[v113[9]];
        v116 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v116 - 8) + 8))(v115, v116);
        v117 = (uint64_t *)&v112[v113[13]];
        v118 = v117[1];
        if (v118 >> 60 != 15)
          outlined consume of Data._Representation(*v117, v118);
        v119 = &v112[v113[14]];
        v120 = type metadata accessor for P256.Signing.PublicKey();
        v121 = *(_QWORD *)(v120 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
          (*(void (**)(char *, uint64_t))(v121 + 8))(v119, v120);
      }
      break;
    case 2u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v30 = v5[4];
      if (v30 >> 60 != 15)
        outlined consume of Data._Representation(v5[3], v30);
      v31 = v5[7];
      if (v31 >> 60 != 15)
        outlined consume of Data._Representation(v5[6], v31);
      v32 = type metadata accessor for HandshakeState.ServerHelloState(0);
      v33 = (char *)v5 + *(int *)(v32 + 20);
      type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v34 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
        v35 = (int *)type metadata accessor for SessionTicket();
        outlined consume of Data._Representation(*(_QWORD *)&v33[v35[7]], *(_QWORD *)&v33[v35[7] + 8]);
        outlined consume of Data._Representation(*(_QWORD *)&v33[v35[8]], *(_QWORD *)&v33[v35[8] + 8]);
        v36 = &v33[v35[9]];
        v37 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
        v38 = (uint64_t *)&v33[v35[13]];
        v39 = v38[1];
        if (v39 >> 60 != 15)
          outlined consume of Data._Representation(*v38, v39);
        v40 = &v33[v35[14]];
        v41 = type metadata accessor for P256.Signing.PublicKey();
        v42 = *(_QWORD *)(v41 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
          (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v41);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v19 = (char *)v5 + *(int *)(v32 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_79;
        case 1u:
          goto LABEL_80;
        case 2u:
          goto LABEL_81;
        case 3u:
          goto LABEL_83;
        default:
          goto LABEL_93;
      }
    case 3u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v43 = v5[4];
      if (v43 >> 60 != 15)
        outlined consume of Data._Representation(v5[3], v43);
      v44 = v5[7];
      if (v44 >> 60 != 15)
        outlined consume of Data._Representation(v5[6], v44);
      v45 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
      v46 = (char *)v5 + v45[5];
      type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v47 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v46, v47);
        v48 = (int *)type metadata accessor for SessionTicket();
        outlined consume of Data._Representation(*(_QWORD *)&v46[v48[7]], *(_QWORD *)&v46[v48[7] + 8]);
        outlined consume of Data._Representation(*(_QWORD *)&v46[v48[8]], *(_QWORD *)&v46[v48[8] + 8]);
        v49 = &v46[v48[9]];
        v50 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v49, v50);
        v51 = (uint64_t *)&v46[v48[13]];
        v52 = v51[1];
        if (v52 >> 60 != 15)
          outlined consume of Data._Representation(*v51, v52);
        v53 = &v46[v48[14]];
        v54 = type metadata accessor for P256.Signing.PublicKey();
        v55 = *(_QWORD *)(v54 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
          (*(void (**)(char *, uint64_t))(v55 + 8))(v53, v54);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v84 = (uint64_t *)((char *)v5 + v45[6]);
      v85 = v84[1];
      if (v85 >> 60 != 15)
        outlined consume of Data._Representation(*v84, v85);
      v86 = (uint64_t *)((char *)v5 + v45[7]);
      v87 = v86[1];
      if (v87 >> 60 != 15)
        outlined consume of Data._Representation(*v86, v87);
      v19 = (char *)v5 + v45[9];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_79;
        case 1u:
          goto LABEL_80;
        case 2u:
          goto LABEL_81;
        case 3u:
          goto LABEL_83;
        default:
          goto LABEL_93;
      }
    case 4u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v56 = v5[4];
      if (v56 >> 60 != 15)
        outlined consume of Data._Representation(v5[3], v56);
      v57 = v5[7];
      if (v57 >> 60 != 15)
        outlined consume of Data._Representation(v5[6], v57);
      v58 = v5[11];
      if (v58 >> 60 != 15)
        outlined consume of Data._Representation(v5[10], v58);
      v59 = v5[14];
      if (v59 >> 60 != 15)
        outlined consume of Data._Representation(v5[13], v59);
      v60 = type metadata accessor for HandshakeState.ServerCertificateState(0);
      v61 = (char *)v5 + *(int *)(v60 + 40);
      v62 = type metadata accessor for P256.Signing.PublicKey();
      v63 = *(_QWORD *)(v62 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
        (*(void (**)(char *, uint64_t))(v63 + 8))(v61, v62);
      v19 = (char *)v5 + *(int *)(v60 + 44);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_79;
        case 1u:
          goto LABEL_80;
        case 2u:
          goto LABEL_81;
        case 3u:
          goto LABEL_83;
        default:
          goto LABEL_93;
      }
    case 5u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v64 = v5[4];
      if (v64 >> 60 != 15)
        outlined consume of Data._Representation(v5[3], v64);
      v65 = v5[7];
      if (v65 >> 60 != 15)
        outlined consume of Data._Representation(v5[6], v65);
      v66 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
      v67 = (char *)v5 + v66[7];
      v68 = type metadata accessor for P256.Signing.PublicKey();
      v69 = *(_QWORD *)(v68 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
        (*(void (**)(char *, uint64_t))(v69 + 8))(v67, v68);
      v70 = (uint64_t *)((char *)v5 + v66[8]);
      v71 = v70[1];
      if (v71 >> 60 != 15)
        outlined consume of Data._Representation(*v70, v71);
      v72 = (uint64_t *)((char *)v5 + v66[9]);
      v73 = v72[1];
      if (v73 >> 60 != 15)
        outlined consume of Data._Representation(*v72, v73);
      v19 = (char *)v5 + v66[11];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_79;
        case 1u:
          goto LABEL_80;
        case 2u:
          goto LABEL_81;
        case 3u:
          goto LABEL_83;
        default:
          goto LABEL_93;
      }
    case 6u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v74 = v5[4];
      if (v74 >> 60 != 15)
        outlined consume of Data._Representation(v5[3], v74);
      v75 = v5[7];
      if (v75 >> 60 != 15)
        outlined consume of Data._Representation(v5[6], v75);
      ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
      v77 = (char *)v5 + ready[7];
      v78 = type metadata accessor for P256.Signing.PublicKey();
      v79 = *(_QWORD *)(v78 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
        (*(void (**)(char *, uint64_t))(v79 + 8))(v77, v78);
      v80 = (uint64_t *)((char *)v5 + ready[8]);
      v81 = v80[1];
      if (v81 >> 60 != 15)
        outlined consume of Data._Representation(*v80, v81);
      v82 = (uint64_t *)((char *)v5 + ready[9]);
      v83 = v82[1];
      if (v83 >> 60 != 15)
        outlined consume of Data._Representation(*v82, v83);
      v19 = (char *)v5 + ready[11];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
LABEL_79:
          v88 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v88 - 8) + 8))(v19, v88);
          v89 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          v90 = &v19[v89[9]];
          v91 = type metadata accessor for SymmetricKey();
          v92 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v91 - 8) + 8);
          v92(v90, v91);
          v92(&v19[v89[10]], v91);
          v92(&v19[v89[11]], v91);
          v93 = v89[12];
          goto LABEL_82;
        case 1u:
LABEL_80:
          v94 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v94 - 8) + 8))(v19, v94);
          v95 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          v96 = &v19[v95[9]];
          v91 = type metadata accessor for SymmetricKey();
          v92 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v91 - 8) + 8);
          v92(v96, v91);
          v92(&v19[v95[10]], v91);
          v93 = v95[11];
          goto LABEL_82;
        case 2u:
LABEL_81:
          v97 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v97 - 8) + 8))(v19, v97);
          v98 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          v99 = &v19[v98[9]];
          v91 = type metadata accessor for SymmetricKey();
          v92 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v91 - 8) + 8);
          v92(v99, v91);
          v92(&v19[v98[10]], v91);
          v92(&v19[v98[11]], v91);
          v92(&v19[v98[12]], v91);
          v92(&v19[v98[13]], v91);
          v93 = v98[14];
LABEL_82:
          v92(&v19[v93], v91);
          break;
        case 3u:
LABEL_83:
          v100 = type metadata accessor for SymmetricKey();
          v101 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v100 - 8) + 8);
          v101(v19, v100);
          v102 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v101(&v19[v102[9]], v100);
          v101(&v19[v102[10]], v100);
          v101(&v19[v102[11]], v100);
          break;
        default:
          goto LABEL_93;
      }
      break;
    default:
      break;
  }
LABEL_93:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1 + a2[7]);
  v122 = (uint64_t *)((char *)a1 + a2[9]);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v124 = v122[4];
  if (v124 >> 60 != 15)
    result = outlined consume of Data._Representation(v122[3], v124);
  v125 = v122[7];
  if (v125 >> 60 != 15)
    return outlined consume of Data._Representation(v122[6], v125);
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t destroy for CertificateVerify(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t type metadata completion function for HandshakeState.EncryptedExtensionsState.SessionData()
{
  return type metadata completion function for HandshakeState.ServerHelloState.SessionData();
}

uint64_t type metadata completion function for HandshakeState.ServerHelloState.SessionData()
{
  return type metadata completion function for HandshakeState.ServerHelloState.SessionData();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SessionTicket();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t partial apply for closure #1 in SessionTicket.serialize()(unint64_t *a1, char *a2)
{
  return specialized ByteBuffer.writeLengthPrefixedBytes<A>(_:)(a1, a2);
}

uint64_t specialized ByteBuffer.writeLengthPrefixedBytes<A>(_:)(unint64_t *a1, char *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a2 - (char *)a1;
  if (!a1)
    v4 = 0;
  v8 = bswap64(v4);
  v5 = MEMORY[0x1E0DEAC20];
  v6 = MEMORY[0x1E0CB1AA8];
  v11 = MEMORY[0x1E0DEAC20];
  v12 = MEMORY[0x1E0CB1AA8];
  v9 = &v8;
  v10 = &v9;
  __swift_project_boxed_opaque_existential_1(&v9, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  v11 = v5;
  v12 = v6;
  v9 = a1;
  v10 = (unint64_t **)a2;
  __swift_project_boxed_opaque_existential_1(&v9, v5);
  Data._Representation.append(contentsOf:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

_BYTE *specialized Data._Representation.init(_:)(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

_BYTE *closure #1 in Data.init<A>(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t closure #1 in STLSHandshaker.getEncryptionSecret(write:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[3] = MEMORY[0x1E0DEAC20];
  v14[4] = MEMORY[0x1E0CB1AA8];
  v14[0] = a1;
  v14[1] = a2;
  v4 = __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x1E0DEAC20]);
  v5 = (_BYTE *)*v4;
  if (*v4 && (v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      v8 = specialized Data.InlineData.init(_:)(v5, v6);
      v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      v8 = specialized Data.LargeSlice.init(_:)((uint64_t)v5, (uint64_t)v6);
      v9 = v13 | 0x8000000000000000;
    }
    else
    {
      v8 = specialized Data.InlineSlice.init(_:)((uint64_t)v5, (uint64_t)v6);
      v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0xC000000000000000;
  }
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

void ByteBuffer.writeOfferedPSKs(_:)()
{
  __asm { BR              X12 }
}

uint64_t sub_1B0D5948C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,__int16 *a23,char *a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v31 = BYTE6(v27);
  a21 = 0;
  a26 = MEMORY[0x1E0DEAC20];
  a27 = MEMORY[0x1E0CB1AA8];
  a23 = &a21;
  a24 = &a22;
  __swift_project_boxed_opaque_existential_1(&a23, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&a23);
  if (*(_QWORD *)(v30 + 16))
  {
    v32 = swift_bridgeObjectRetain();
    return ((uint64_t (*)(uint64_t))((char *)&loc_1B0D5953C + dword_1B0DE4A94[*(_QWORD *)(v29 + 8) >> 62]))(v32);
  }
  else
  {
    specialized ByteBuffer.setInteger<A>(_:at:as:)(0, v31);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_1B0D59820 + dword_1B0DE4AD4[*(_QWORD *)(v29 + 8) >> 62]))(v34, v35, v36, v37, v38, v39, v40, v41, a9, a10, a11, a12, a13, a14, v28, a16, a17);
  }
}

uint64_t sub_1B0D59830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v7;
  __int16 v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v5 = BYTE6(v0);
  v7 = 0;
  v10 = v4;
  v11 = MEMORY[0x1E0CB1AA8];
  v9[0] = &v7;
  v9[1] = &v8;
  __swift_project_boxed_opaque_existential_1(v9, v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  if (*(_QWORD *)(v1 + 16))
  {
    swift_bridgeObjectRetain();
    __asm { BR              X11 }
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(0, v5);
  return v3 + 4;
}

void specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(uint64_t a1)
{
  __asm { BR              X12 }
}

{
  __asm { BR              X12 }
}

{
  __asm { BR              X12 }
}

{
  __asm { BR              X12 }
}

{
  specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(a1);
}

{
  __asm { BR              X12 }
}

{
  __asm { BR              X12 }
}

uint64_t sub_1B0D59CB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  char v7;
  _QWORD v8[12];

  v3 = BYTE6(v0);
  v7 = 0;
  v8[3] = MEMORY[0x1E0DEAC20];
  v8[4] = MEMORY[0x1E0CB1AA8];
  v8[0] = &v7;
  v8[1] = v8;
  __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  v4 = closure #2 in ClientHello.write(into:)(v2, v1);
  if ((v4 & 0x8000000000000000) != 0 || (v5 = v4, v4 >= 0x100))
  {
    outlined release of ClientHello(v1);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    specialized ByteBuffer.setInteger<A>(_:at:as:)(v4, v3);
    return v5 + 1;
  }
  return result;
}

void specialized ByteBuffer.setInteger<A>(_:at:as:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (__OFADD__(a2, 1))
  {
    __break(1u);
  }
  else if (*(_QWORD *)(v2 + 16) <= a2)
  {
    __asm { BR              X13 }
  }
  __break(1u);
  JUMPOUT(0x1B0D59F0CLL);
}

{
  uint64_t v2;

  if (__OFADD__(a2, 2))
  {
    __break(1u);
  }
  else if (*(_QWORD *)(v2 + 16) <= a2)
  {
    __asm { BR              X13 }
  }
  __break(1u);
  JUMPOUT(0x1B0D5B32CLL);
}

uint64_t closure #2 in ClientHello.write(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v10;
  uint64_t v11;
  _QWORD v12[6];

  v12[5] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a2 + 88);
  v11 = v2;
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = (char *)(v2 + 32);
    swift_bridgeObjectRetain();
    v5 = MEMORY[0x1E0DEAC20];
    v6 = MEMORY[0x1E0CB1AA8];
    v7 = v3;
    do
    {
      v8 = *v4++;
      v10 = v8;
      v12[3] = v5;
      v12[4] = v6;
      v12[0] = &v10;
      v12[1] = &v11;
      __swift_project_boxed_opaque_existential_1(v12, v5);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      --v7;
    }
    while (v7);
    outlined release of [Extension]((uint64_t)&v11);
  }
  return v3;
}

void ClientHello.write(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v14 = *MEMORY[0x1E0C80C00];
  LOWORD(v9[0]) = *(_WORD *)v2;
  v4 = MEMORY[0x1E0DEAC20];
  v5 = MEMORY[0x1E0CB1AA8];
  *((_QWORD *)&v12 + 1) = MEMORY[0x1E0DEAC20];
  v13 = MEMORY[0x1E0CB1AA8];
  *(_QWORD *)&v11 = v9;
  *((_QWORD *)&v11 + 1) = (char *)v9 + 2;
  __swift_project_boxed_opaque_existential_1(&v11, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  v6 = *(_OWORD *)(v2 + 24);
  v9[0] = *(_OWORD *)(v2 + 8);
  v9[1] = v6;
  *((_QWORD *)&v12 + 1) = v4;
  v13 = v5;
  *(_QWORD *)&v11 = v9;
  *((_QWORD *)&v11 + 1) = &v10;
  __swift_project_boxed_opaque_existential_1(&v11, v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  v7 = *(_OWORD *)(v2 + 56);
  v11 = *(_OWORD *)(v2 + 40);
  v12 = v7;
  v13 = *(_QWORD *)(v2 + 72);
  ByteBuffer.writeLegacySessionID(_:)();
  if (!__OFADD__(v8, 34))
    __asm { BR              X12 }
  __break(1u);
  JUMPOUT(0x1B0D5A680);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t outlined release of Extension(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  return a1;
}

uint64_t outlined consume of Extension(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
      result = outlined consume of ByteBuffer?(result, a2);
      break;
    case 1:
    case 6:
    case 10:
      result = swift_bridgeObjectRelease();
      break;
    case 2:
    case 7:
      result = outlined consume of Extension.SupportedVersions(result, a2 & 1);
      break;
    case 3:
    case 8:
    case 9:
      result = outlined consume of Data._Representation(result, a2);
      break;
    case 4:
      result = outlined consume of Extension.KeyShare(result, a2, a3);
      break;
    case 11:
      result = outlined consume of Extension.PreSharedKey(result, a2, a3 & 1);
      break;
    case 13:
      result = outlined consume of Data._Representation(a2, a3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined copy of Extension(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
      result = outlined copy of ByteBuffer?(result, a2);
      break;
    case 1:
    case 6:
    case 10:
      result = swift_bridgeObjectRetain();
      break;
    case 2:
    case 7:
      result = outlined copy of Extension.ServerCertificateType(result, a2 & 1);
      break;
    case 3:
    case 8:
    case 9:
      result = outlined copy of Data._Representation(result, a2);
      break;
    case 4:
      result = outlined copy of Extension.KeyShare(result, a2, a3);
      break;
    case 11:
      result = outlined copy of Extension.PreSharedKey(result, a2, a3 & 1);
      break;
    case 13:
      result = outlined copy of Data._Representation(a2, a3);
      break;
    default:
      return result;
  }
  return result;
}

void closure #1 in ByteBuffer.writeExtension(_:)(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  _BYTE v4[72];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  outlined init with take of Extension(a2, (uint64_t)&v3);
  outlined init with take of Extension(a2, (uint64_t)v4);
  __asm { BR              X10 }
}

uint64_t sub_1B0D5A81C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  outlined copy of ByteBuffer?(v2, v1);
  v3 = ByteBuffer.writeServerName(_:)(v5, v6);
  outlined release of Extension(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Extension);
  return v3;
}

uint64_t outlined init with take of Extension(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined consume of Extension.SupportedVersions(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined copy of Extension.ServerCertificateType(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of Extension.PreSharedKey(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of Extension.KeyShare(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = (a3 >> 60) & 3;
  if ((_DWORD)v3 == 1)
    return outlined consume of Data._Representation(a2, a3 & 0xCFFFFFFFFFFFFFFFLL);
  if (!(_DWORD)v3)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined release of [Extension](uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *outlined init with take of Extension.KeyShare(uint64_t a1, _OWORD *a2)
{
  __swift_memcpy32_8(a2, a1);
  return a2;
}

uint64_t outlined init with take of Extension.ServerCertificateType(uint64_t *a1, uint64_t a2)
{
  __swift_memcpy9_8(a2, a1);
  return a2;
}

uint64_t outlined init with take of Extension.SupportedVersions(uint64_t *a1, uint64_t a2)
{
  __swift_memcpy9_8(a2, a1);
  return a2;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

__n128 *outlined init with take of Extension.PreSharedKey(__n128 *a1, __n128 *a2)
{
  __swift_memcpy17_8(a2, a1);
  return a2;
}

uint64_t outlined copy of Extension.KeyShare(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = (a3 >> 60) & 3;
  if ((_DWORD)v3 == 1)
    return outlined copy of Data._Representation(a2, a3 & 0xCFFFFFFFFFFFFFFFLL);
  if (!(_DWORD)v3)
    return swift_bridgeObjectRetain();
  return result;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t outlined init with take of UInt32?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of Extension.PreSharedKey(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of ByteBuffer?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined copy of ByteBuffer?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

__n128 *outlined init with take of Extension.ServerName(__n128 *a1, __n128 *a2)
{
  __swift_memcpy24_8(a2, a1);
  return a2;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t outlined release of ClientHello(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of ClientHello(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B0D5B6E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t i;
  uint64_t result;
  char v8;
  char *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;

  v2 = BYTE6(v0);
  v8 = 0;
  v3 = MEMORY[0x1E0DEAC20];
  v4 = MEMORY[0x1E0CB1AA8];
  v11 = MEMORY[0x1E0DEAC20];
  v12 = MEMORY[0x1E0CB1AA8];
  v9 = &v8;
  v10 = &v9;
  __swift_project_boxed_opaque_existential_1(&v9, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
    goto LABEL_5;
  swift_bridgeObjectRetain();
  for (i = 0; i != v5; ++i)
  {
    v8 = *(_BYTE *)(v1 + i + 32);
    v11 = v3;
    v12 = v4;
    v9 = &v8;
    v10 = &v9;
    __swift_project_boxed_opaque_existential_1(&v9, v3);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  }
  swift_bridgeObjectRelease();
  if (v5 > 0xFF)
  {
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_5:
    specialized ByteBuffer.setInteger<A>(_:at:as:)(v5, v2);
    return v5 + 1;
  }
  return result;
}

uint64_t sub_1B0D5B89C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t i;
  uint64_t result;
  char v8;
  char *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;

  v2 = BYTE6(v0);
  v8 = 0;
  v3 = MEMORY[0x1E0DEAC20];
  v4 = MEMORY[0x1E0CB1AA8];
  v11 = MEMORY[0x1E0DEAC20];
  v12 = MEMORY[0x1E0CB1AA8];
  v9 = &v8;
  v10 = &v9;
  __swift_project_boxed_opaque_existential_1(&v9, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
    goto LABEL_5;
  swift_bridgeObjectRetain();
  for (i = 0; i != v5; ++i)
  {
    v8 = *(_BYTE *)(v1 + i + 32);
    v11 = v3;
    v12 = v4;
    v9 = &v8;
    v10 = &v9;
    __swift_project_boxed_opaque_existential_1(&v9, v3);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  }
  swift_bridgeObjectRelease();
  if (v5 > 0xFF)
  {
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_5:
    specialized ByteBuffer.setInteger<A>(_:at:as:)(v5, v2);
    return v5 + 1;
  }
  return result;
}

uint64_t sub_1B0D5BA50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  __int16 v8;
  __int16 *v9;
  __int16 **v10;
  uint64_t v11;
  uint64_t v12;

  v2 = BYTE6(v0);
  LOBYTE(v8) = 0;
  v3 = MEMORY[0x1E0DEAC20];
  v4 = MEMORY[0x1E0CB1AA8];
  v11 = MEMORY[0x1E0DEAC20];
  v12 = MEMORY[0x1E0CB1AA8];
  v9 = &v8;
  v10 = (__int16 **)((char *)&v8 + 1);
  __swift_project_boxed_opaque_existential_1(&v9, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
    v6 = 0;
LABEL_9:
    specialized ByteBuffer.setInteger<A>(_:at:as:)(v6, v2);
    return v6 + 1;
  }
  swift_bridgeObjectRetain();
  v6 = 0;
  do
  {
    v8 = *(_WORD *)(v1 + v6 + 32);
    v11 = v3;
    v12 = v4;
    v9 = &v8;
    v10 = &v9;
    __swift_project_boxed_opaque_existential_1(&v9, v3);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
    if (v6 == 0x7FFFFFFFFFFFFFFELL)
      __break(1u);
    v6 += 2;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  if ((v6 & 0x8000000000000000) == 0 && v6 < 0x100)
    goto LABEL_9;
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void ByteBuffer.writeSignatureAlgorithms(_:)()
{
  __asm { BR              X12 }
}

unint64_t sub_1B0D5BC60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int16 v8;
  __int16 *v9;
  __int16 **v10;
  uint64_t v11;
  uint64_t v12;

  v2 = BYTE6(v0);
  v8 = 0;
  v3 = MEMORY[0x1E0DEAC20];
  v4 = MEMORY[0x1E0CB1AA8];
  v11 = MEMORY[0x1E0DEAC20];
  v12 = MEMORY[0x1E0CB1AA8];
  v9 = &v8;
  v10 = &v9;
  __swift_project_boxed_opaque_existential_1(&v9, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
LABEL_8:
    v6 = 0;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  v6 = 0;
  do
  {
    v8 = bswap32(*(unsigned __int16 *)(v1 + v6 + 32)) >> 16;
    v11 = v3;
    v12 = v4;
    v9 = &v8;
    v10 = &v9;
    __swift_project_boxed_opaque_existential_1(&v9, v3);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
    if (v6 == 0x7FFFFFFFFFFFFFFELL)
    {
      __break(1u);
LABEL_11:
      __break(1u);
    }
    v6 += 2;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  if ((v6 & 0x8000000000000000) != 0)
    goto LABEL_11;
  if (v6 >> 16)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_9:
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v6, v2);
  return v6 + 2;
}

void ByteBuffer.writeSupportedGroups(_:)()
{
  __asm { BR              X12 }
}

unint64_t sub_1B0D5BDE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int16 v8;
  __int16 *v9;
  __int16 **v10;
  uint64_t v11;
  uint64_t v12;

  v2 = BYTE6(v0);
  v8 = 0;
  v3 = MEMORY[0x1E0DEAC20];
  v4 = MEMORY[0x1E0CB1AA8];
  v11 = MEMORY[0x1E0DEAC20];
  v12 = MEMORY[0x1E0CB1AA8];
  v9 = &v8;
  v10 = &v9;
  __swift_project_boxed_opaque_existential_1(&v9, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
LABEL_8:
    v6 = 0;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  v6 = 0;
  do
  {
    v8 = bswap32(*(unsigned __int16 *)(v1 + v6 + 32)) >> 16;
    v11 = v3;
    v12 = v4;
    v9 = &v8;
    v10 = &v9;
    __swift_project_boxed_opaque_existential_1(&v9, v3);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
    if (v6 == 0x7FFFFFFFFFFFFFFELL)
    {
      __break(1u);
LABEL_11:
      __break(1u);
    }
    v6 += 2;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  if ((v6 & 0x8000000000000000) != 0)
    goto LABEL_11;
  if (v6 >> 16)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_9:
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v6, v2);
  return v6 + 2;
}

void ByteBuffer.writeLegacySessionID(_:)()
{
  __asm { BR              X12 }
}

unint64_t sub_1B0D5BF6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _OWORD *v14;
  __int128 v15;

  v3 = BYTE6(v0);
  *(_BYTE *)(v2 - 160) = 0;
  v4 = MEMORY[0x1E0DEAC20];
  v5 = MEMORY[0x1E0CB1AA8];
  *(_QWORD *)(v2 - 72) = MEMORY[0x1E0DEAC20];
  *(_QWORD *)(v2 - 64) = v5;
  *(_QWORD *)(v2 - 96) = v2 - 160;
  *(_QWORD *)(v2 - 88) = v2 - 159;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 - 96), v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1(v2 - 96);
  v6 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v2 - 160) = *(_OWORD *)v1;
  *(_OWORD *)(v2 - 144) = v6;
  v7 = *(_QWORD *)(v1 + 32);
  if (v7 < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
  }
  v8 = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(0, v7, 32, v2 - 160, v2 - 128);
  if ((v9 & 1) != 0)
    v10 = 32;
  else
    v10 = v8;
  if ((v10 & 0x8000000000000000) != 0)
    goto LABEL_9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>);
  *(_QWORD *)(v2 - 72) = v11;
  *(_QWORD *)(v2 - 64) = lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>();
  v12 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v2 - 96) = v12;
  v12[2] = 0;
  v12[3] = v10;
  v12[4] = v2 - 160;
  v12[5] = v2 - 128;
  v13 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 - 96), v11);
  v14 = (_OWORD *)((uint64_t (*)(_QWORD *))MEMORY[0x1E0C80A78])(v13);
  v15 = v14[1];
  *(_OWORD *)(v2 - 128) = *v14;
  *(_OWORD *)(v2 - 112) = v15;
  Slice<>.withUnsafeBytes<A>(_:)();
  __swift_destroy_boxed_opaque_existential_1(v2 - 96);
  if (v10 > 0x20)
    goto LABEL_10;
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v10, v3);
  return v10 + 1;
}

unint64_t lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>);
    v2 = MEMORY[0x1E0CB1AA8];
    result = MEMORY[0x1B5E111D8](MEMORY[0x1E0CB26B0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>);
  }
  return result;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v5 = a5 - a4;
  if (!a4)
    v5 = 0;
  if (result < 0 || v5 < result)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a3 < 0 || v5 < a3)
    goto LABEL_19;
  v6 = a3 - result;
  if (a2 > 0)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2)
      goto LABEL_14;
    return 0;
  }
  if (v6 <= 0 && v6 > a2)
    return 0;
LABEL_14:
  v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  if (result < 0 || v5 < result)
    goto LABEL_21;
  return result;
}

uint64_t ByteBuffer.writeServerName(_:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    __asm { BR              X12 }
  return 0;
}

ValueMetadata *type metadata accessor for Extension()
{
  return &type metadata for Extension;
}

ValueMetadata *type metadata accessor for Extension.KeyShare.KeyShareEntry()
{
  return &type metadata for Extension.KeyShare.KeyShareEntry;
}

ValueMetadata *type metadata accessor for Extension.PreSharedKeyKexModes.Mode()
{
  return &type metadata for Extension.PreSharedKeyKexModes.Mode;
}

ValueMetadata *type metadata accessor for Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry()
{
  return &type metadata for Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry;
}

ValueMetadata *type metadata accessor for Extension.PreSharedKey.OfferedPSKs.PSKIdentity()
{
  return &type metadata for Extension.PreSharedKey.OfferedPSKs.PSKIdentity;
}

ValueMetadata *type metadata accessor for Random()
{
  return &type metadata for Random;
}

ValueMetadata *type metadata accessor for HandshakeMessageParser.ParseResult()
{
  return &type metadata for HandshakeMessageParser.ParseResult;
}

ValueMetadata *type metadata accessor for SignatureScheme()
{
  return &type metadata for SignatureScheme;
}

ValueMetadata *type metadata accessor for ProtocolVersion()
{
  return &type metadata for ProtocolVersion;
}

ValueMetadata *type metadata accessor for LegacySessionID()
{
  return &type metadata for LegacySessionID;
}

ValueMetadata *type metadata accessor for CertificateType()
{
  return &type metadata for CertificateType;
}

ValueMetadata *type metadata accessor for ExtensionType()
{
  return &type metadata for ExtensionType;
}

ValueMetadata *type metadata accessor for CipherSuite()
{
  return &type metadata for CipherSuite;
}

ValueMetadata *type metadata accessor for NamedGroup()
{
  return &type metadata for NamedGroup;
}

uint64_t nwswifttls_copy_serialized_session(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  if (!a1)
    return 0;
  objc_msgSend(*(id *)(a1 + 280), "getSessionState");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
    v3 = objc_msgSend(v1, "_createDispatchData");
  else
    v3 = 0;

  return v3;
}

BOOL __nwswifttls_input_available_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v3 = a2;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", nw_frame_unclaimed_bytes(), 0);
  if (v4)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 280), "continueHandshake:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = *(id **)(a1 + 32);
    if (v5)
    {
      v8 = objc_retainAutorelease(v5);
      nwswifttls_add_message(v7, 2u, objc_msgSend(v8, "bytes"), objc_msgSend(v8, "length"));
      nwswifttls_send_messages(*(void **)(a1 + 32), 2u);
    }
    else
    {
      v9 = objc_msgSend(v7[35], "getErrorCode");
      if ((_DWORD)v9)
        nwswifttls_send_error(*(void **)(a1 + 32), v9);
    }
    v10 = *(_QWORD *)(a1 + 32);
    objc_msgSend(*(id *)(v10 + 280), "getPeerQUICTransportParameters");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    nwswifttls_update_quic_transport_parameters(v10, v11);

    nwswifttls_update_encryption_secrets(*(void **)(a1 + 32));
    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 280), "hasSessionState"))
      nwswifttls_update_session_state(*(void **)(a1 + 32));
    v12 = *(_QWORD *)(a1 + 32);
    objc_msgSend(*(id *)(v12 + 280), "getEarlyDataAccepted");
    nwswifttls_update_early_data_accepted(v12);
    nw_frame_array_remove();
    nw_frame_finalize();

  }
  else
  {
    nw_frame_array_remove();
    nw_frame_finalize();
    v6 = v3;
  }

  return v4 != 0;
}

void nwswifttls_update_encryption_secrets(void *a1)
{
  id *v1;
  unsigned __int16 v2;
  void *v3;
  const char *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  void *v9;
  unsigned int v10;

  v1 = a1;
  v10 = 0;
  if (nwswifttls_get_encryption_level((uint64_t)v1, (int *)&v10))
  {
    v2 = objc_msgSend(v1[35], "getNegotiatedCiphersuite");
    objc_msgSend(v1[35], "getEncryptionSecretWithWrite:", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = nwswifttls_dispatch_data_from_nsdata(v3, v4);

    v6 = v2;
    nwswifttls_update_encryption_secret(v1, v10, v6, 0, v5);
    objc_msgSend(v1[35], "getEncryptionSecretWithWrite:", 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = nwswifttls_dispatch_data_from_nsdata(v7, v8);

    nwswifttls_update_encryption_secret(v1, v10, v6, 1, v9);
    if (v10 == 3)
      nwswifttls_complete_handshake(v1, 1);

  }
}

void nwswifttls_update_encryption_secret(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id *v8;
  id v9;
  void *v10;
  const char *v11;
  void *v12;
  uint64_t v13;
  const char *v14;

  v8 = a1;
  v9 = a5;
  v10 = v9;
  if (v8 && v9)
  {
    v14 = 0;
    if (*((_BYTE *)v8 + 274) && nwswifttls_get_encryption_key_label((uint64_t)v8, a4, &v14))
    {
      v11 = v14;
      objc_msgSend(v8[35], "getClientRandom");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      ssl_log_secret(v11, v12, v10);

    }
    if (v8[10] && v8[23])
    {
      nw_protocol_metadata_access_handle();
      (*((void (**)(id, uint64_t, uint64_t, void *, uint64_t))v8[23] + 2))(v8[23], a2, a4, v10, v13);
    }
  }

}

void *nwswifttls_dispatch_data_from_nsdata(void *a1, const char *a2)
{
  if (a1)
    return (void *)objc_msgSend(a1, "_createDispatchData");
  return a1;
}

BOOL nwswifttls_get_encryption_level(uint64_t a1, int *a2)
{
  _BOOL8 result;
  uint64_t v5;
  int v6;

  result = 0;
  if (a1 && a2)
  {
    v5 = objc_msgSend(*(id *)(a1 + 280), "getEncryptionLevel") + 1;
    result = 0;
    switch(v5)
    {
      case 0:
        return result;
      case 1:
        *a2 = 0;
        goto LABEL_11;
      case 2:
        result = 1;
        *a2 = 1;
        return result;
      case 3:
        v6 = 2;
        goto LABEL_10;
      case 4:
        v6 = 3;
LABEL_10:
        *a2 = v6;
LABEL_11:
        result = 1;
        break;
      default:
        result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
        if (result)
        {
          nwswifttls_get_encryption_level_cold_1();
          result = 0;
        }
        break;
    }
  }
  return result;
}

BOOL __nwswifttls_update_encryption_secret_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
    *(_WORD *)(a2 + 34) = *(_WORD *)(a1 + 32);
  return a2 != 0;
}

void nwswifttls_update_quic_transport_parameters(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a2;
  if (a1 && *(_QWORD *)(a1 + 80))
  {
    v4 = v3;
    v5 = v3;
    nw_protocol_metadata_access_handle();

    v3 = v4;
  }

}

uint64_t nwswifttls_update_early_data_accepted(uint64_t result)
{
  if (result)
  {
    result = *(_QWORD *)(result + 80);
    if (result)
      return nw_protocol_metadata_access_handle();
  }
  return result;
}

BOOL __nwswifttls_update_quic_transport_parameters_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  if (a2 && !*(_QWORD *)(a2 + 152))
  {
    v3 = *(void **)(a1 + 32);
    if (v3)
    {
      v3 = (void *)objc_msgSend(v3, "_createDispatchData");
      v4 = *(void **)(a2 + 152);
    }
    else
    {
      v4 = 0;
    }
    *(_QWORD *)(a2 + 152) = v3;

  }
  return a2 != 0;
}

BOOL __nwswifttls_update_early_data_accepted_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
    *(_WORD *)(a2 + 328) = *(_WORD *)(a2 + 328) & 0xFFF7 | (8 * (*(_BYTE *)(a1 + 32) & 0x1F));
  return a2 != 0;
}

void HandshakeStateMachine.earlyDataAccepted.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t ready;

  ready = type metadata accessor for HandshakeState.ReadyState(0);
  MEMORY[0x1E0C80A78](ready);
  v1 = type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for HandshakeState.ServerCertificateState(0);
  MEMORY[0x1E0C80A78](v2);
  v3 = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  MEMORY[0x1E0C80A78](v3);
  v4 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for HandshakeStateMachine();
  outlined init with copy of PartialHandshakeResult(v0 + *(int *)(v7 + 24), (uint64_t)v6, type metadata accessor for HandshakeState);
  v8 = (char *)sub_1B0D5CE54 + 4 * byte_1B0DE87BB[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0D5CE54()
{
  uint64_t v0;

  outlined destroy of PartialHandshakeResult(v0, type metadata accessor for HandshakeState);
  return 2;
}

NSData_optional __swiftcall STLSHandshaker.continueHandshake(_:)(NSData a1)
{
  uint64_t v1;
  NSData_optional result;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult?);
  MEMORY[0x1E0C80A78](v1);
  static Data._unconditionallyBridgeFromObjectiveC(_:)();
  __asm { BR              X10 }
  return result;
}

uint64_t sub_1B0D5D008(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  _QWORD **v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  _QWORD *v36;
  id v37;
  uint64_t v38;

  *(_QWORD *)(v5 - 104) = a1;
  *(_QWORD *)(v5 - 96) = a2;
  *(_QWORD *)(v5 - 88) = (int)a1;
  v6 = OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_stateMachine;
  *(_QWORD *)(v5 - 176) = v2;
  v7 = v2 + v6;
  swift_beginAccess();
  v8 = type metadata accessor for HandshakeStateMachine();
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  result = v9(v7, 1, v8);
  if ((_DWORD)result == 1)
    goto LABEL_27;
  HandshakeStateMachine.receivedNetworkData(_:)(v5 - 104);
  swift_endAccess();
  v11 = OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_partialHandshakeResult;
  v12 = OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_receivedSessionTickets;
  swift_beginAccess();
  result = v9(v7, 1, v8);
  if ((_DWORD)result == 1)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    return result;
  }
  v13 = *(_QWORD *)(v5 - 176);
  v14 = v13 + v11;
  *(_QWORD *)(v5 - 152) = v4;
  *(_QWORD *)(v5 - 144) = v13 + v12;
  *(_QWORD *)(v5 - 168) = v9;
  *(_QWORD *)(v5 - 160) = v8;
  while (1)
  {
    HandshakeStateMachine.processHandshake()(v4);
    if (v3)
      break;
    swift_endAccess();
    swift_beginAccess();
    outlined assign with take of HandshakeStateMachine?(v4, v14, &demangling cache variable for type metadata for PartialHandshakeResult?);
    swift_endAccess();
    v15 = type metadata accessor for PartialHandshakeResult(0);
    v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48);
    if (v16(v14, 1, v15))
    {
      v17 = 0;
      v18 = 0xF000000000000000;
    }
    else
    {
      v19 = (uint64_t *)(v14 + *(int *)(v15 + 24));
      v17 = *v19;
      v18 = v19[1];
      if (v18 >> 60 != 15)
      {
        v20 = *(_QWORD ***)(v5 - 144);
        swift_beginAccess();
        v21 = *v20;
        outlined copy of ByteBuffer?(v17, v18);
        outlined copy of ByteBuffer?(v17, v18);
        outlined copy of Data._Representation(v17, v18);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v20 = v21;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
          **(_QWORD **)(v5 - 144) = v21;
        }
        v24 = v21[2];
        v23 = v21[3];
        if (v24 >= v23 >> 1)
        {
          v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v21);
          **(_QWORD **)(v5 - 144) = v21;
        }
        v21[2] = v24 + 1;
        v25 = &v21[2 * v24];
        v25[4] = v17;
        v25[5] = v18;
        swift_endAccess();
        outlined consume of ByteBuffer?(v17, v18);
        v8 = *(_QWORD *)(v5 - 160);
        v4 = *(_QWORD *)(v5 - 152);
        v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 - 168);
      }
    }
    if (!v16(v14, 1, v15))
    {
      v26 = *(_QWORD *)(v14 + 8);
      if (v26 >> 60 != 15)
        __asm { BR              X10 }
    }
    if (v18 >> 60 == 15)
      goto LABEL_24;
    outlined consume of ByteBuffer?(v17, v18);
    swift_beginAccess();
    result = v9(v7, 1, v8);
    if ((_DWORD)result == 1)
      goto LABEL_26;
  }
  swift_endAccess();
  v27 = *(_QWORD *)(v5 - 176);
  v28 = *(void **)(v27 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_latestError);
  *(_QWORD *)(v27 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_latestError) = v3;
  v29 = v3;

  if (one-time initialization token for logger != -1)
    swift_once();
  v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)logger);
  v31 = v3;
  v32 = v3;
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    v36 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v35 = 138412290;
    v37 = v3;
    v38 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v5 - 128) = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v36 = v38;

    _os_log_impl(&dword_1B0D50000, v33, v34, "Internal error when processing the handshake: %@", v35, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E11244](v36, -1, -1);
    MEMORY[0x1B5E11244](v35, -1, -1);

  }
  else
  {

  }
LABEL_24:
  outlined consume of Data._Representation(*(_QWORD *)(v5 - 104), *(_QWORD *)(v5 - 96));
  return 0;
}

uint64_t getEnumTagSinglePayload for PartialHandshakeResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for HandshakeStateMachine()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t outlined assign with take of HandshakeStateMachine?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

void HandshakeStateMachine.processHandshake()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  char *v43;
  _QWORD v44[13];
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;

  v44[5] = a1;
  v2 = type metadata accessor for HandshakeState.ServerCertificateState(0);
  v3 = MEMORY[0x1E0C80A78](v2);
  v52 = (char *)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v44 - v5;
  v47 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  MEMORY[0x1E0C80A78](v47);
  v46 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  v8 = MEMORY[0x1E0C80A78](v45);
  v49 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v48 = (char *)v44 - v11;
  MEMORY[0x1E0C80A78](v10);
  v44[12] = (char *)v44 - v12;
  v13 = type metadata accessor for HandshakeState.ServerHelloState(0);
  v14 = MEMORY[0x1E0C80A78](v13);
  v51 = (char *)v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v50 = (char *)v44 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandshakeStateMachine.ProcessStep<PartialHandshakeResult>);
  v18 = MEMORY[0x1E0C80A78](v17);
  v44[4] = (char *)v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v44[3] = (char *)v44 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v44[1] = (char *)v44 - v23;
  MEMORY[0x1E0C80A78](v22);
  v44[2] = (char *)v44 - v24;
  v57 = type metadata accessor for HandshakeState(0);
  v25 = MEMORY[0x1E0C80A78](v57);
  v44[9] = (char *)v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v44[11] = (char *)v44 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v44[6] = (char *)v44 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v44[7] = (char *)v44 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v44[8] = (char *)v44 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v44[10] = (char *)v44 - v36;
  MEMORY[0x1E0C80A78](v35);
  v38 = (char *)v44 - v37;
  v56 = v1 + *(int *)(type metadata accessor for HandshakeStateMachine() + 24);
  v54 = v1;
  v55 = v38;
  v53 = v6;
  if (one-time initialization token for logger != -1)
    swift_once();
  v39 = type metadata accessor for Logger();
  __swift_project_value_buffer(v39, (uint64_t)logger);
  v40 = Logger.logObject.getter();
  v41 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v42 = 0;
    _os_log_impl(&dword_1B0D50000, v40, v41, "attempting process step", v42, 2u);
    MEMORY[0x1B5E11244](v42, -1, -1);
  }

  outlined init with copy of PartialHandshakeResult(v56, (uint64_t)v38, type metadata accessor for HandshakeState);
  v43 = (char *)&loc_1B0D5D990 + *((int *)qword_1B0DA01B0 + swift_getEnumCaseMultiPayload());
  __asm { BR              X9 }
}

void sub_1B0D5E5A0()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B0D50000, v1, v2, "processHandshake called in idle state", v3, 2u);
    MEMORY[0x1B5E11244](v3, -1, -1);
  }

  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  v4 = swift_allocError();
  *(_DWORD *)v5 = 3;
  *(_BYTE *)(v5 + 4) = 1;
  *(_QWORD *)(v0 - 72) = v4;
  JUMPOUT(0x1B0D5E644);
}

void sub_1B0D5E654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v1 - 72);
  HandshakeStateMachine.handleReadServerHello()(v2);
  *(_QWORD *)(v1 - 72) = v3;
  if (!v3)
  {
    v4 = type metadata accessor for PartialHandshakeResult(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v2, 1, v4) != 1)
      outlined init with take of HandshakeStateMachine(v2, *(_QWORD *)(v0 + 40), type metadata accessor for PartialHandshakeResult);
    JUMPOUT(0x1B0D5EBA8);
  }
  JUMPOUT(0x1B0D5E648);
}

uint64_t type metadata accessor for HandshakeState.ServerHelloState(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for HandshakeState.ServerHelloState);
}

uint64_t type metadata accessor for HandshakeState.EncryptedExtensionsState(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for HandshakeState.EncryptedExtensionsState);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for HandshakeState.EncryptedExtensionsState.SessionData);
}

uint64_t type metadata accessor for HandshakeState.ServerCertificateVerifyState(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for HandshakeState.ServerCertificateVerifyState);
}

uint64_t type metadata accessor for HandshakeState.ServerCertificateState(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for HandshakeState.ServerCertificateState);
}

uint64_t outlined init with take of HandshakeStateMachine(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for PartialHandshakeResult(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for PartialHandshakeResult);
}

uint64_t storeEnumTagSinglePayload for PartialHandshakeResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t HandshakeStateMachine.handleReadNewSessionTicket()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t result;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[136];
  _OWORD v36[8];
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int128 v47[7];
  _OWORD v48[4];
  _OWORD v49[6];
  unsigned __int8 v50;
  uint64_t v51;

  v3 = v1;
  v51 = a1;
  v34 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)logger);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_1B0D50000, v8, v9, "expecting newSessionTicket", v10, 2u);
    MEMORY[0x1B5E11244](v10, -1, -1);
  }

  result = HandshakeMessageParser.parseHandshakeMessage()((uint64_t)v35);
  if (!v2)
  {
    outlined init with take of HandshakeMessageParser.ParseResult?((uint64_t)v35, (uint64_t)v36);
    if (_s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOg((uint64_t)v36) == 1)
    {
      v12 = Logger.logObject.getter();
      v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v14 = 0;
        _os_log_impl(&dword_1B0D50000, v12, v13, "incomplete message, waiting for more data", v14, 2u);
        MEMORY[0x1B5E11244](v14, -1, -1);
      }

      v15 = type metadata accessor for PartialHandshakeResult(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v51, 1, 1, v15);
    }
    else
    {
      v44 = v36[6];
      v45 = v36[7];
      v46 = v37;
      v40 = v36[2];
      v41 = v36[3];
      v42 = v36[4];
      v43 = v36[5];
      v38 = v36[0];
      v39 = v36[1];
      outlined init with take of HandshakeMessage((__int128 *)((char *)&v39 + 8), (uint64_t)v47);
      v16 = v40;
      v17 = *((_QWORD *)&v41 + 1);
      v18 = v42;
      v33 = v43;
      outlined init with take of HandshakeMessage(v47, (uint64_t)v49);
      if (v50 > 6u)
      {
        v48[0] = v49[0];
        v48[1] = v49[1];
        v48[2] = v49[2];
        v48[3] = v49[3];
        v21 = type metadata accessor for HandshakeStateMachine();
        v30 = v18;
        v32 = v21;
        v22 = (_QWORD *)(v3 + *(int *)(v21 + 28));
        v28 = *((_QWORD *)&v16 + 1);
        v24 = v22[3];
        v23 = v22[4];
        v29 = __swift_project_boxed_opaque_existential_1(v22, v24);
        v31 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
        outlined copy of Data._Representation(v16, v28);
        outlined copy of Data._Representation(v17, v30);
        swift_bridgeObjectRetain();
        v31(v24, v23);
        v25 = v51;
        HandshakeState.receivedNewSessionTicket(newSessionTicket:currentTime:)(v48, (uint64_t)v6, v51);
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v34);
        outlined release of HandshakeMessage((uint64_t)v47);
        outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v35);
        v26 = type metadata accessor for PartialHandshakeResult(0);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 0, 1, v26);
      }
      else
      {
        HandshakeStateMachine.logUnexpectedMessage(message:)();
        lazy protocol witness table accessor for type TLSError and conformance TLSError();
        v19 = swift_allocError();
        *(_DWORD *)v20 = 4;
        *(_BYTE *)(v20 + 4) = 1;
        swift_willThrow(v19);
        return outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v35);
      }
    }
  }
  return result;
}

uint64_t outlined init with take of HandshakeMessage(__int128 *a1, uint64_t a2)
{
  __swift_memcpy105_8(a2, a1);
  return a2;
}

__n128 __swift_memcpy105_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t outlined init with take of HandshakeMessageParser.ParseResult?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t HandshakeMessageParser.parseHandshakeMessage()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[136];
  _BYTE v11[136];
  _BYTE v12[136];
  _BYTE v13[136];

  v4 = v1[1];
  if (v4 >> 60 == 15)
  {
    _s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOi0_((uint64_t)v12);
    v5 = v12;
  }
  else
  {
    v6 = *v1;
    v7 = v1[2];
    outlined copy of Data._Representation(*v1, v1[1]);
    closure #1 in HandshakeMessageParser.parseHandshakeMessage()(v1, (uint64_t)v12);
    if (v2)
    {
      v8 = outlined consume of Data._Representation(*v1, v1[1]);
      *v1 = v6;
      v1[1] = v4;
      v1[2] = v7;
      return swift_willThrow(v8);
    }
    outlined init with take of HandshakeMessageParser.ParseResult?((uint64_t)v12, (uint64_t)v10);
    outlined init with take of HandshakeMessageParser.ParseResult?((uint64_t)v10, (uint64_t)v11);
    if (_s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOg((uint64_t)v11) == 1)
    {
      outlined consume of Data._Representation(*v1, v1[1]);
      *v1 = v6;
      v1[1] = v4;
      v1[2] = v7;
    }
    else
    {
      outlined consume of Data._Representation(v6, v4);
    }
    v5 = v10;
  }
  outlined init with take of HandshakeMessageParser.ParseResult?((uint64_t)v5, (uint64_t)v13);
  return outlined init with take of HandshakeMessageParser.ParseResult?((uint64_t)v13, a1);
}

void HandshakeStateMachine.receivedNetworkData(_:)(uint64_t a1)
{
  __asm { BR              X14 }
}

void sub_1B0D5F404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (__OFSUB__(BYTE6(v1), v0))
  {
    __break(1u);
  }
  else if (one-time initialization token for logger == -1)
  {
    goto LABEL_3;
  }
  swift_once();
LABEL_3:
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v6 = 134349056;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B0D50000, v4, v5, "received network data (%{public}ld bytes)", v6, 0xCu);
    MEMORY[0x1B5E11244](v6, -1, -1);
  }

  HandshakeMessageParser.appendBytes(_:)(v2);
}

void HandshakeMessageParser.appendBytes(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = a1[1];
  if (*(_QWORD *)(v1 + 8) >> 60 == 15)
    __asm { BR              X11 }
  ByteBuffer.writeImmutableBuffer(_:)(*a1, v2);
  __asm { BR              X11 }
}

void sub_1B0D5F5A4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = BYTE6(v1);
}

void sub_1B0D5F5AC(uint64_t a1@<X2>, int a2@<W8>)
{
  uint64_t v2;

  if (!__OFSUB__(v2 >> 32, a1))
  {
    if (!__OFADD__(a1, (v2 >> 32) - a1))
      __asm { BR              X10 }
    JUMPOUT(0x1B0D5F698);
  }
  JUMPOUT(0x1B0D5F694);
}

void sub_1B0D5F5E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  if (BYTE6(v5) < v6)
  {
    *v4 = 0;
    v4[1] = 0xF000000000000000;
    v4[2] = 0;
    JUMPOUT(0x1B0D5F678);
  }
  if (v6 < a3)
  {
    __break(1u);
  }
  else
  {
    v7 = Data._Representation.subscript.getter();
    *(_QWORD *)(v3 + 16) = v6;
    ((void (*)(uint64_t))((char *)&loc_1B0D5F644 + dword_1B0DE1D4C[v8 >> 62]))(v7);
  }
}

void sub_1B0D5F5EC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = v1 >> 32;
  JUMPOUT(0x1B0D5F678);
}

uint64_t sub_1B0D5F600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  if (v4 >> 32 < v6)
    JUMPOUT(0x1B0D5F664);
  if (v6 < a3)
    JUMPOUT(0x1B0D5F69CLL);
  v7 = Data._Representation.subscript.getter(a3, v6, v4, v5);
  *(_QWORD *)(v3 + 16) = v6;
  return ((uint64_t (*)(uint64_t))((char *)&loc_1B0D5F644 + dword_1B0DE1D4C[v8 >> 62]))(v7);
}

void sub_1B0D5F654()
{
  JUMPOUT(0x1B0D5F670);
}

void sub_1B0D5F68C()
{
  JUMPOUT(0x1B0D5F670);
}

Swift::Int32 __swiftcall STLSHandshaker.getErrorCode()()
{
  uint64_t v0;
  void *v1;
  id v2;
  char v5;
  id v6;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_latestError);
  if (v1)
  {
    v6 = *(id *)(v0 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_latestError);
    v2 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast() && v5 == 1)
      __asm { BR              X10 }

    LODWORD(v1) = -9858;
  }
  return (int)v1;
}

void sub_1B0D5F8A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  JUMPOUT(0x1B0D5F89CLL);
}

void sub_1B0D5F8B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  JUMPOUT(0x1B0D5F89CLL);
}

void sub_1B0D5F8C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  JUMPOUT(0x1B0D5F89CLL);
}

void nwswifttls_update_session_state(void *a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  NSObject *v6;
  id v7;
  _QWORD block[4];
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL (*v13)(uint64_t, uint64_t);
  void *v14;
  _QWORD *v15;

  v1 = a1;
  v2 = v1;
  if (v1 && v1[10] && v1[26] && v1[27])
  {
    v3 = MEMORY[0x1E0C809B0];
    v11 = MEMORY[0x1E0C809B0];
    v12 = 3221225472;
    v13 = __nwswifttls_update_session_state_block_invoke;
    v14 = &unk_1E6247E10;
    v15 = v1;
    nw_protocol_metadata_access_handle();
    v4 = _Block_copy((const void *)v15[26]);
    v5 = (id)v15[10];
    v6 = v15[27];
    block[0] = v3;
    block[1] = 3221225472;
    block[2] = __nwswifttls_update_session_state_block_invoke_2;
    block[3] = &unk_1E6247E38;
    v9 = v5;
    v10 = v4;
    v7 = v5;
    dispatch_async(v6, block);

  }
}

BOOL __nwswifttls_update_session_state_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2 && !*(_QWORD *)(a2 + 16))
  {
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 24) = nwswifttls_copy_serialized_session;
  }
  return a2 != 0;
}

uint64_t outlined copy of HandshakeMessage(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  switch(a14)
  {
    case 0:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 1:
    case 2:
      goto LABEL_7;
    case 3:
    case 4:
      outlined copy of Data._Representation(result, a2);
      goto LABEL_7;
    case 5:
      result = a2;
      a2 = a3;
      goto LABEL_5;
    case 6:
LABEL_5:
      result = outlined copy of Data._Representation(result, a2);
      break;
    case 7:
      outlined copy of Data._Representation(a2, a3);
      outlined copy of Data._Representation(a5, a6);
LABEL_7:
      result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void nwswifttls_complete_handshake(void *a1, int a2)
{
  _BYTE *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  _QWORD *v8;

  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v8 = v3;
    if (!a2)
    {
      nwswifttls_send_error(v3, 4294957438);
      goto LABEL_8;
    }
    v3[277] = 1;
    nwswifttls_allow_exported_authenticators(v3);
    v4 = v8;
    v5 = v8[7];
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        v7 = *(void (**)(void))(v6 + 40);
        if (v7)
        {
          v7();
LABEL_8:
          v4 = v8;
        }
      }
    }
  }

}

void nwswifttls_allow_exported_authenticators(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = a1;
  if (v1 && v1[10])
  {
    v2 = v1;
    v3 = v1;
    nw_protocol_metadata_access_handle();

    v1 = v2;
  }

}

BOOL __nwswifttls_allow_exported_authenticators_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2 && !*(_QWORD *)(a2 + 352))
  {
    v2 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 344) = nwswifttls_copy_copy_authenticator_trust;
    *(_QWORD *)(a2 + 352) = v2;
  }
  return a2 != 0;
}

uint64_t HandshakeStateMachine.handleReadServerFinished()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t result;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[136];
  _OWORD v32[8];
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  __int128 v43[7];
  _QWORD v44[13];
  char v45;
  uint64_t v46;

  v46 = a1;
  v30 = type metadata accessor for PartialHandshakeResult(0);
  v2 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v4 = (uint64_t *)((char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for logger != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)logger);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1B0D50000, v6, v7, "expecting finished", v8, 2u);
    MEMORY[0x1B5E11244](v8, -1, -1);
  }

  result = HandshakeMessageParser.parseHandshakeMessage()((uint64_t)v31);
  if (!v1)
  {
    outlined init with take of HandshakeMessageParser.ParseResult?((uint64_t)v31, (uint64_t)v32);
    if (_s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOg((uint64_t)v32) == 1)
    {
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_1B0D50000, v10, v11, "incomplete message, waiting for more data", v12, 2u);
        MEMORY[0x1B5E11244](v12, -1, -1);
      }

      v13 = 1;
      v14 = v46;
      v15 = v30;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v14, v13, 1, v15);
    }
    v40 = v32[6];
    v41 = v32[7];
    v42 = v33;
    v36 = v32[2];
    v37 = v32[3];
    v38 = v32[4];
    v39 = v32[5];
    v34 = v32[0];
    v35 = v32[1];
    outlined init with take of HandshakeMessage((__int128 *)((char *)&v35 + 8), (uint64_t)v43);
    v16 = *((_QWORD *)&v35 + 1);
    v17 = v36;
    outlined init with take of HandshakeMessage(v43, (uint64_t)v44);
    if (v45 == 6)
    {
      v28 = v44[1];
      v29 = v44[0];
      v26 = v34;
      v27 = v44[2];
      v24 = v35;
      v25 = *((_QWORD *)&v34 + 1);
      type metadata accessor for HandshakeStateMachine();
      outlined copy of Data._Representation(v16, v17);
      HandshakeState.receievedServerFinished(serverFinished:serverFinishedBytes:serializer:)(v29, v28, v27, v26, v25, v24, v4);
      v20 = Logger.logObject.getter();
      v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v22 = 0;
        _os_log_impl(&dword_1B0D50000, v20, v21, "completed TLS handshake", v22, 2u);
        MEMORY[0x1B5E11244](v22, -1, -1);
        outlined release of HandshakeMessage((uint64_t)v43);

        outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v31);
      }
      else
      {
        outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v31);
        outlined release of HandshakeMessage((uint64_t)v43);

      }
      v15 = v30;
      v14 = v46;
      outlined init with take of HandshakeStateMachine((uint64_t)v4, v46, type metadata accessor for PartialHandshakeResult);
      v13 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v14, v13, 1, v15);
    }
    HandshakeStateMachine.logUnexpectedMessage(message:)();
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v18 = swift_allocError();
    *(_DWORD *)v19 = 4;
    *(_BYTE *)(v19 + 4) = 1;
    swift_willThrow(v18);
    return outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v31);
  }
  return result;
}

Swift::Int __swiftcall STLSHandshaker.getNegotiatedCiphersuite()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  int v7;
  int v8;
  uint64_t v9;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandshakeStateMachine?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = v0 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_stateMachine;
  swift_beginAccess();
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v4, (uint64_t)v3, &demangling cache variable for type metadata for HandshakeStateMachine?);
  v5 = type metadata accessor for HandshakeStateMachine();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    HandshakeStateMachine.negotiatedCiphersuite.getter();
    v8 = v7;
    outlined destroy of PartialHandshakeResult((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for HandshakeStateMachine);
    if ((v8 & 0x10000) != 0)
      return 0;
    else
      return (unsigned __int16)v8;
  }
  return result;
}

NSData_optional __swiftcall STLSHandshaker.getPeerQUICTransportParameters()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  Swift::Bool v6;
  unint64_t v7;
  unint64_t v8;
  objc_class *v9;
  uint64_t v10;
  NSData_optional result;

  v1 = type metadata accessor for HandshakeStateMachine();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_stateMachine;
  swift_beginAccess();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v5, 1, v1))
  {
    outlined init with copy of PartialHandshakeResult(v5, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for HandshakeStateMachine);
    HandshakeStateMachine.peerQUICTransportParameters.getter();
    v8 = v7;
    outlined destroy of PartialHandshakeResult((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for HandshakeStateMachine);
    if (v8 >> 60 != 15)
      __asm { BR              X10 }
  }
  v9 = 0;
  result.value.super.isa = v9;
  result.is_nil = v6;
  return result;
}

Swift::Int __swiftcall STLSHandshaker.getEncryptionLevel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v22 - v9;
  v11 = v0 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_partialHandshakeResult;
  swift_beginAccess();
  v12 = type metadata accessor for PartialHandshakeResult(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
LABEL_4:
    outlined destroy of HandshakeStateMachine?((uint64_t)v3, &demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
    return -1;
  }
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v11 + *(int *)(v12 + 20), (uint64_t)v3, &demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    goto LABEL_4;
  outlined init with take of HandshakeStateMachine((uint64_t)v3, (uint64_t)v10, type metadata accessor for PartialHandshakeResult.NewEncryptionLevel);
  outlined init with take of HandshakeStateMachine((uint64_t)v10, (uint64_t)v8, type metadata accessor for PartialHandshakeResult.NewEncryptionLevel);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v15 = &v8[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey))
                       + 48)];
      v16 = type metadata accessor for SymmetricKey();
      v17 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
      v17(v15, v16);
      v17(v8, v16);
      return 2;
    }
    else
    {
      v19 = &v8[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey))
                       + 48)];
      v20 = type metadata accessor for SymmetricKey();
      v21 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
      v21(v19, v20);
      v21(v8, v20);
      return 3;
    }
  }
  else
  {
    v18 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v8, v18);
    return 1;
  }
}

NSData_optional __swiftcall STLSHandshaker.getEncryptionSecret(write:)(Swift::Bool write)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Bool v27;
  Class isa;
  objc_class *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  NSData_optional result;

  v48 = write;
  v2 = type metadata accessor for SymmetricKey();
  v49 = *(_QWORD *)(v2 - 8);
  v50 = v2;
  v3 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v47 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v43 - v6;
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v43 - v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v43 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v43 - v21;
  v23 = v1 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_partialHandshakeResult;
  swift_beginAccess();
  v24 = type metadata accessor for PartialHandshakeResult(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v23, 1, v24))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
  }
  else
  {
    v43 = v10;
    v44 = v7;
    v45 = v12;
    v46 = v22;
    v25 = v49;
    v26 = v50;
    outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v23 + *(int *)(v24 + 20), (uint64_t)v15, &demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
    {
      v30 = (uint64_t)v46;
      outlined init with take of HandshakeStateMachine((uint64_t)v15, (uint64_t)v46, type metadata accessor for PartialHandshakeResult.NewEncryptionLevel);
      outlined init with copy of PartialHandshakeResult(v30, (uint64_t)v20, type metadata accessor for PartialHandshakeResult.NewEncryptionLevel);
      if (swift_getEnumCaseMultiPayload())
      {
        v31 = &v20[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey))
                          + 48)];
        v32 = v25;
        v33 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
        v34 = v43;
        v33(v43, v20, v26);
        v35 = v44;
        v33(v44, v31, v26);
        v36 = *(void (**)(char *, uint64_t))(v32 + 8);
        v37 = v45;
        if (v48)
        {
          v36(v35, v26);
          v38 = v37;
          v39 = v34;
        }
        else
        {
          v36(v34, v26);
          v38 = v37;
          v39 = v35;
        }
      }
      else
      {
        v32 = v25;
        v33 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
        v40 = v47;
        v33(v47, v20, v26);
        if (!v48)
        {
          (*(void (**)(char *, uint64_t))(v25 + 8))(v40, v26);
          outlined destroy of PartialHandshakeResult(v30, type metadata accessor for PartialHandshakeResult.NewEncryptionLevel);
          goto LABEL_5;
        }
        v37 = v45;
        v38 = v45;
        v39 = v40;
      }
      v33(v38, v39, v26);
      SymmetricKey.withUnsafeBytes<A>(_:)();
      v41 = v51;
      v42 = v52;
      isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v41, v42);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v37, v26);
      outlined destroy of PartialHandshakeResult(v30, type metadata accessor for PartialHandshakeResult.NewEncryptionLevel);
      goto LABEL_6;
    }
  }
  outlined destroy of HandshakeStateMachine?((uint64_t)v15, &demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
LABEL_5:
  isa = 0;
LABEL_6:
  v29 = isa;
  result.value.super.isa = v29;
  result.is_nil = v27;
  return result;
}

uint64_t type metadata accessor for HandshakeStateMachine()
{
  uint64_t result;

  result = type metadata singleton initialization cache for HandshakeStateMachine;
  if (!type metadata singleton initialization cache for HandshakeStateMachine)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t initializeWithCopy for PartialHandshakeResult.NewEncryptionLevel(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    v5 = type metadata accessor for SymmetricKey();
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
    v6(a1, a2, v5);
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey));
    v6(a1 + *(int *)(v7 + 48), a2 + *(int *)(v7 + 48), v5);
  }
  else
  {
    v8 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void initializeWithCopy for HandshakeStateMachine(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;

  v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v5 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 16) = a2[2];
  type metadata accessor for HandshakeState(0);
  v6 = (char *)sub_1B0D60A74 + 4 * byte_1B0DE8842[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0D60A74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  int *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  _OWORD *v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;

  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)v0 = *(_QWORD *)v1;
  *(_QWORD *)(v0 + 8) = v4;
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(v0 + 24) = *(_OWORD *)(v1 + 24);
  }
  else
  {
    v6 = *(_QWORD *)(v1 + 24);
    outlined copy of Data._Representation(v6, v5);
    *(_QWORD *)(v0 + 24) = v6;
    *(_QWORD *)(v0 + 32) = v5;
  }
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 56);
  v91 = v2;
  v92 = v3;
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v1 + 48);
  }
  else
  {
    v8 = *(_QWORD *)(v1 + 48);
    outlined copy of Data._Representation(v8, v7);
    *(_QWORD *)(v0 + 48) = v8;
    *(_QWORD *)(v0 + 56) = v7;
  }
  *(_QWORD *)(v0 + 64) = *(_QWORD *)(v1 + 64);
  *(_DWORD *)(v0 + 72) = *(_DWORD *)(v1 + 72);
  v9 = type metadata accessor for HandshakeState.IdleState(0);
  v10 = *(int *)(v9 + 20);
  v11 = (char *)(v0 + v10);
  v12 = (char *)(v1 + v10);
  v13 = (int *)type metadata accessor for SessionTicket();
  v14 = *((_QWORD *)v13 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v89 = v14;
    v90 = v9;
    v16 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v11, v12, v16);
    *(_DWORD *)&v11[v13[5]] = *(_DWORD *)&v12[v13[5]];
    *(_DWORD *)&v11[v13[6]] = *(_DWORD *)&v12[v13[6]];
    v17 = v13[7];
    v18 = (uint64_t *)&v11[v17];
    v19 = &v12[v17];
    v20 = *(_QWORD *)&v12[v17];
    v21 = *(_QWORD *)&v12[v17 + 8];
    outlined copy of Data._Representation(v20, v21);
    *v18 = v20;
    v18[1] = v21;
    v18[2] = *((_QWORD *)v19 + 2);
    v22 = v13[8];
    v23 = (uint64_t *)&v11[v22];
    v24 = &v12[v22];
    v25 = *(_QWORD *)&v12[v22];
    v26 = *(_QWORD *)&v12[v22 + 8];
    outlined copy of Data._Representation(v25, v26);
    *v23 = v25;
    v23[1] = v26;
    v23[2] = *((_QWORD *)v24 + 2);
    v27 = v13[9];
    v28 = &v11[v27];
    v29 = &v12[v27];
    v30 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
    *(_DWORD *)&v11[v13[10]] = *(_DWORD *)&v12[v13[10]];
    *(_WORD *)&v11[v13[11]] = *(_WORD *)&v12[v13[11]];
    *(_WORD *)&v11[v13[12]] = *(_WORD *)&v12[v13[12]];
    v31 = v13[13];
    v32 = &v11[v31];
    v33 = (uint64_t *)&v12[v31];
    v34 = *(_QWORD *)&v12[v31 + 8];
    if (v34 >> 60 == 15)
    {
      *(_OWORD *)v32 = *(_OWORD *)v33;
    }
    else
    {
      v35 = *v33;
      outlined copy of Data._Representation(*v33, v34);
      *(_QWORD *)v32 = v35;
      *((_QWORD *)v32 + 1) = v34;
    }
    *((_QWORD *)v32 + 2) = v33[2];
    v9 = v90;
    v36 = v13[14];
    v37 = &v11[v36];
    v38 = &v12[v36];
    v39 = type metadata accessor for P256.Signing.PublicKey();
    v40 = *(_QWORD *)(v39 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      v41 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v89 + 56))(v11, 0, 1, v13);
  }
  v42 = v92;
  v43 = *(int *)(v9 + 24);
  v44 = (char *)(v0 + v43);
  v45 = (char *)(v1 + v43);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v47 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v44, v45, v47);
      v48 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v49 = v48[9];
      v50 = &v44[v49];
      v51 = &v45[v49];
      v52 = type metadata accessor for SymmetricKey();
      v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
      v53(v50, v51, v52);
      v53(&v44[v48[10]], &v45[v48[10]], v52);
      v53(&v44[v48[11]], &v45[v48[11]], v52);
      v54 = v52;
      v42 = v92;
      v53(&v44[v48[12]], &v45[v48[12]], v54);
      goto LABEL_22;
    case 1u:
      v55 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v44, v45, v55);
      v56 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v57 = v56[9];
      v58 = &v44[v57];
      v59 = &v45[v57];
      v60 = type metadata accessor for SymmetricKey();
      v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
      v61(v58, v59, v60);
      v61(&v44[v56[10]], &v45[v56[10]], v60);
      v62 = v60;
      v42 = v92;
      v61(&v44[v56[11]], &v45[v56[11]], v62);
      goto LABEL_22;
    case 2u:
      v63 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v44, v45, v63);
      v64 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v65 = v64[9];
      v66 = &v44[v65];
      v67 = &v45[v65];
      v68 = type metadata accessor for SymmetricKey();
      v69 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16);
      v69(v66, v67, v68);
      v69(&v44[v64[10]], &v45[v64[10]], v68);
      v69(&v44[v64[11]], &v45[v64[11]], v68);
      v69(&v44[v64[12]], &v45[v64[12]], v68);
      v69(&v44[v64[13]], &v45[v64[13]], v68);
      v70 = v68;
      v42 = v92;
      v69(&v44[v64[14]], &v45[v64[14]], v70);
      goto LABEL_22;
    case 3u:
      v71 = type metadata accessor for SymmetricKey();
      v72 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16);
      v72(v44, v45, v71);
      v73 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v72(&v44[v73[9]], &v45[v73[9]], v71);
      v72(&v44[v73[10]], &v45[v73[10]], v71);
      v72(&v44[v73[11]], &v45[v73[11]], v71);
LABEL_22:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      break;
  }
  swift_storeEnumTagMultiPayload();
  v74 = v93[7];
  v75 = *(_OWORD *)(v42 + v74 + 24);
  *(_OWORD *)(v91 + v74 + 24) = v75;
  (**(void (***)(void))(v75 - 8))();
  v76 = v93[8];
  v77 = v93[9];
  v78 = (_OWORD *)(v91 + v76);
  v79 = (_OWORD *)(v42 + v76);
  v80 = v79[1];
  *v78 = *v79;
  v78[1] = v80;
  v81 = v91 + v77;
  v82 = v42 + v77;
  v83 = *(_QWORD *)(v42 + v77 + 8);
  *(_QWORD *)v81 = *(_QWORD *)(v42 + v77);
  *(_QWORD *)(v81 + 8) = v83;
  *(_QWORD *)(v81 + 16) = *(_QWORD *)(v42 + v77 + 16);
  v84 = *(_QWORD *)(v42 + v77 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v84 >> 60 == 15)
  {
    *(_OWORD *)(v81 + 24) = *(_OWORD *)(v82 + 24);
  }
  else
  {
    v85 = *(_QWORD *)(v82 + 24);
    outlined copy of Data._Representation(v85, v84);
    *(_QWORD *)(v81 + 24) = v85;
    *(_QWORD *)(v81 + 32) = v84;
  }
  *(_QWORD *)(v81 + 40) = *(_QWORD *)(v82 + 40);
  v86 = *(_QWORD *)(v82 + 56);
  if (v86 >> 60 == 15)
  {
    *(_OWORD *)(v81 + 48) = *(_OWORD *)(v82 + 48);
  }
  else
  {
    v87 = *(_QWORD *)(v82 + 48);
    outlined copy of Data._Representation(v87, *(_QWORD *)(v82 + 56));
    *(_QWORD *)(v81 + 48) = v87;
    *(_QWORD *)(v81 + 56) = v86;
  }
  *(_QWORD *)(v81 + 64) = *(_QWORD *)(v82 + 64);
  *(_DWORD *)(v81 + 72) = *(_DWORD *)(v82 + 72);
  return v91;
}

uint64_t type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for PartialHandshakeResult.NewEncryptionLevel);
}

uint64_t outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t destroy for PartialHandshakeResult.NewEncryptionLevel(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2 || (_DWORD)result == 1)
  {
    v4 = type metadata accessor for SymmetricKey();
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
    v6(a1, v4);
    v5 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey))
                + 48);
    return ((uint64_t (*)(uint64_t, uint64_t))v6)(v5, v4);
  }
  else if (!(_DWORD)result)
  {
    v3 = type metadata accessor for SymmetricKey();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

void HandshakeStateMachine.peerQUICTransportParameters.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t ready;

  ready = type metadata accessor for HandshakeState.ReadyState(0);
  MEMORY[0x1E0C80A78](ready);
  v1 = type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for HandshakeState.ServerCertificateState(0);
  MEMORY[0x1E0C80A78](v2);
  v3 = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  MEMORY[0x1E0C80A78](v3);
  v4 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for HandshakeStateMachine();
  outlined init with copy of PartialHandshakeResult(v0 + *(int *)(v7 + 24), (uint64_t)v6, type metadata accessor for HandshakeState);
  v8 = (char *)sub_1B0D62E78 + 4 * byte_1B0DE879F[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0D62E78()
{
  uint64_t v0;

  outlined destroy of PartialHandshakeResult(v0, type metadata accessor for HandshakeState);
  return 0;
}

uint64_t destroy for PartialHandshakeResult(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;

  v4 = a1[1];
  if (v4 >> 60 != 15)
    outlined consume of Data._Representation(*a1, v4);
  v5 = (char *)a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
  {
    result = swift_getEnumCaseMultiPayload();
    if ((_DWORD)result == 2 || (_DWORD)result == 1)
    {
      v9 = type metadata accessor for SymmetricKey();
      v10 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
      v10(v5, v9);
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey));
      result = ((uint64_t (*)(char *, uint64_t))v10)(&v5[*(int *)(v11 + 48)], v9);
    }
    else if (!(_DWORD)result)
    {
      v8 = type metadata accessor for SymmetricKey();
      result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v5, v8);
    }
  }
  v12 = (uint64_t *)((char *)a1 + *(int *)(a2 + 24));
  v13 = v12[1];
  if (v13 >> 60 != 15)
    return outlined consume of Data._Representation(*v12, v13);
  return result;
}

uint64_t outlined destroy of HandshakeStateMachine?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithCopy for PartialHandshakeResult(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;

  v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v7 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v6;
  }
  *(_QWORD *)(a1 + 16) = a2[2];
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      v15 = type metadata accessor for SymmetricKey();
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
      v16(v9, v10, v15);
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey));
      v16(&v9[*(int *)(v17 + 48)], &v10[*(int *)(v17 + 48)], v15);
    }
    else
    {
      v18 = type metadata accessor for SymmetricKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v9, v10, v18);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v19 = *(int *)(a3 + 24);
  v20 = a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *((_QWORD *)v21 + 1);
  if (v22 >> 60 == 15)
  {
    *(_OWORD *)v20 = *(_OWORD *)v21;
  }
  else
  {
    v23 = *(_QWORD *)v21;
    outlined copy of Data._Representation(*(_QWORD *)v21, *((_QWORD *)v21 + 1));
    *(_QWORD *)v20 = v23;
    *(_QWORD *)(v20 + 8) = v22;
  }
  return a1;
}

uint64_t type metadata accessor for HandshakeStateMachine.ProcessStep(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HandshakeStateMachine.ProcessStep);
}

uint64_t type metadata accessor for SessionKeyManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SessionKeyManager);
}

void *nwswifttls_allocate_options()
{
  return malloc_type_calloc(1uLL, 0x170uLL, 0x10F00400E22A4EFuLL);
}

void *nwswifttls_allocate_metadata()
{
  return malloc_type_calloc(1uLL, 0x168uLL, 0x10D00404C253F0CuLL);
}

uint64_t partial apply for specialized closure #1 in static HKDF.extract(inputKeyMaterial:salt:)()
{
  return specialized closure #1 in static HKDF.extract(inputKeyMaterial:salt:)();
}

uint64_t specialized closure #1 in static HKDF.extract(inputKeyMaterial:salt:)()
{
  type metadata accessor for SHA384();
  lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9958], MEMORY[0x1E0CA9950]);
  lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
  return static HKDF.extract<A>(inputKeyMaterial:salt:)();
}

uint64_t partial apply for specialized closure #1 in static HMAC.authenticationCode<A>(bytes:using:)()
{
  return specialized closure #1 in static HMAC.authenticationCode<A>(bytes:using:)();
}

uint64_t specialized closure #1 in static HMAC.authenticationCode<A>(bytes:using:)()
{
  type metadata accessor for SHA384();
  lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9958], MEMORY[0x1E0CA9950]);
  lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
  return static HMAC.authenticationCode<A>(for:using:)();
}

{
  return specialized closure #1 in static HMAC.authenticationCode<A>(bytes:using:)();
}

unint64_t lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer;
  if (!lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer)
  {
    result = MEMORY[0x1B5E111D8](MEMORY[0x1E0CB1AA0], MEMORY[0x1E0DEAC20]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer);
  }
  return result;
}

_BYTE *initializeWithCopy for SessionKeyManager(_BYTE *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(unint64_t, unint64_t, uint64_t);
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(unint64_t, unint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  void (*v29)(unint64_t, unint64_t, uint64_t);
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_BYTE *, unsigned __int8 *, uint64_t);
  unint64_t v35;
  unint64_t v36;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for SymmetricKey();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v7 + v10;
  v12 = *(_QWORD *)(v9 + 64);
  v13 = v12 + v10;
  v14 = ((v12 + v10 + ((v12 + v10 + ((v7 + v10) & ~v10)) & ~v10)) & ~v10) + v12;
  v15 = ((v14 + v10) & ~v10) + v12;
  if (v14 <= v15)
    v14 = ((v14 + v10) & ~v10) + v12;
  v16 = ((v13 + ((v15 + v10) & ~v10)) & ~v10) + v12;
  if (v16 > v14)
    v14 = v16;
  v17 = ((v13 + ((v13 + (v13 & ~v10)) & ~v10)) & ~v10) + v12;
  if (v17 <= v14)
    v18 = v14;
  else
    v18 = v17;
  if (a2[v18] >= 4u)
  {
    if (v18 <= 3)
      v19 = v18;
    else
      v19 = 4;
    __asm { BR              X13 }
  }
  v20 = ~v10;
  switch(a2[v18])
  {
    case 0u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      v21 = (unint64_t)&a2[v11] & v20;
      v22 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
      v22((unint64_t)&a1[v11] & v20, v21, v8);
      v23 = (v13 + v21) & v20;
      v22((v13 + ((unint64_t)&a1[v11] & v20)) & v20, v23, v8);
      v24 = (v13 + v23) & v20;
      v22((v13 + ((v13 + ((unint64_t)&a1[v11] & v20)) & v20)) & v20, v24, v8);
      v22((v13 + ((v13 + ((v13 + ((unint64_t)&a1[v11] & v20)) & v20)) & v20)) & v20, (v13 + v24) & v20, v8);
      a1[v18] = 0;
      break;
    case 1u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      v25 = (unint64_t)&a2[v11] & v20;
      v26 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
      v26((unint64_t)&a1[v11] & v20, v25, v8);
      v27 = (v13 + v25) & v20;
      v26((v13 + ((unint64_t)&a1[v11] & v20)) & v20, v27, v8);
      v26((v13 + ((v13 + ((unint64_t)&a1[v11] & v20)) & v20)) & v20, (v13 + v27) & v20, v8);
      a1[v18] = 1;
      break;
    case 2u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      v28 = (unint64_t)&a2[v11] & v20;
      v29 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
      v29((unint64_t)&a1[v11] & v20, v28, v8);
      v30 = (v13 + v28) & v20;
      v29((v13 + ((unint64_t)&a1[v11] & v20)) & v20, v30, v8);
      v31 = (v13 + v30) & v20;
      v29((v13 + ((v13 + ((unint64_t)&a1[v11] & v20)) & v20)) & v20, v31, v8);
      v32 = (v13 + v31) & v20;
      v29((v13 + ((v13 + ((v13 + ((unint64_t)&a1[v11] & v20)) & v20)) & v20)) & v20, v32, v8);
      v33 = (v13 + v32) & v20;
      v29((v13 + ((v13 + ((v13 + ((v13 + ((unint64_t)&a1[v11] & v20)) & v20)) & v20)) & v20)) & v20, v33, v8);
      v29((v13 + ((v13 + ((v13 + ((v13 + ((v13 + ((unint64_t)&a1[v11] & v20)) & v20)) & v20)) & v20)) & v20)) & v20, (v13 + v33) & v20, v8);
      a1[v18] = 2;
      break;
    case 3u:
      v34 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v9 + 16);
      v34(a1, a2, v8);
      v35 = (unint64_t)&a2[v13] & v20;
      v34((_BYTE *)((unint64_t)&a1[v13] & v20), (unsigned __int8 *)v35, v8);
      v36 = (v13 + v35) & v20;
      v34((_BYTE *)((v13 + ((unint64_t)&a1[v13] & v20)) & v20), (unsigned __int8 *)v36, v8);
      v34((_BYTE *)((v13 + ((v13 + ((unint64_t)&a1[v13] & v20)) & v20)) & v20), (unsigned __int8 *)((v13 + v36) & v20), v8);
      a1[v18] = 3;
      break;
    default:
      memcpy(a1, a2, v18 + 1);
      break;
  }
  return a1;
}

uint64_t HandshakeState.receivedNewSessionTicket(newSessionTicket:currentTime:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ready;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t (*v25)(_QWORD);
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  BOOL v43;
  uint64_t v44;
  uint8_t *v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v66 = a2;
  v61 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
  MEMORY[0x1E0C80A78](v5);
  v60 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date();
  v63 = *(_QWORD *)(v7 - 8);
  v64 = v7;
  MEMORY[0x1E0C80A78](v7);
  v65 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PeerCertificateBundle(0);
  MEMORY[0x1E0C80A78](v9);
  v62 = (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for SymmetricKey();
  v11 = *(_QWORD *)(v68 - 8);
  v12 = MEMORY[0x1E0C80A78](v68);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v56 - v15;
  v17 = type metadata accessor for SessionTicket();
  MEMORY[0x1E0C80A78](v17);
  v67 = (uint64_t)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  ready = type metadata accessor for HandshakeState.ReadyState(0);
  MEMORY[0x1E0C80A78](ready);
  v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PartialHandshakeResult(v3, (uint64_t)v24, v25);
  if (swift_getEnumCaseMultiPayload() < 6)
  {
    result = outlined destroy of PartialHandshakeResult((uint64_t)v24, type metadata accessor for HandshakeState);
    __break(1u);
  }
  else
  {
    outlined init with take of HandshakeStateMachine((uint64_t)v24, (uint64_t)v21, type metadata accessor for HandshakeState.ReadyState);
    v26 = v69;
    specialized SessionKeyManager.generateSessionTicketPSK(ticketNonce:)(a1[1], a1[2], a1[3]);
    if (v26)
      return outlined destroy of PartialHandshakeResult((uint64_t)v21, type metadata accessor for HandshakeState.ReadyState);
    v69 = v11;
    v27 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v59 = 0;
    v28 = (uint64_t)v14;
    v27(v14, v16, v68);
    v29 = *(int *)(ready + 28);
    v30 = (uint64_t *)&v21[*(int *)(ready + 32)];
    v31 = *v30;
    v32 = v30[1];
    v33 = v30[2];
    v34 = (uint64_t)&v21[v29];
    LODWORD(v29) = *((unsigned __int16 *)v21 + 39);
    v57 = *((unsigned __int16 *)v21 + 38);
    v58 = v29;
    v35 = v62;
    outlined init with copy of PartialHandshakeResult(v34, v62, type metadata accessor for PeerCertificateBundle);
    v36 = (uint64_t)v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v65, v66, v64);
    outlined retain of NewSessionTicket(a1);
    outlined copy of ByteBuffer?(v31, v32);
    v37 = v59;
    SessionTicket.init(message:psk:cipherSuite:group:alpn:certificateBundle:currentTime:)((uint64_t)a1, v28, v57, v58, v31, v32, v33, v35, v67, v36);
    if (v37)
    {
      (*(void (**)(char *, uint64_t))(v69 + 8))(v16, v68);
      return outlined destroy of PartialHandshakeResult((uint64_t)v21, type metadata accessor for HandshakeState.ReadyState);
    }
    (*(void (**)(char *, uint64_t))(v69 + 8))(v16, v68);
    v39 = v61;
    if (one-time initialization token for logger != -1)
      swift_once();
    v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)logger);
    v41 = Logger.logObject.getter();
    v42 = static os_log_type_t.default.getter();
    v43 = os_log_type_enabled(v41, v42);
    v44 = v67;
    if (v43)
    {
      v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v45 = 0;
      _os_log_impl(&dword_1B0D50000, v41, v42, "generated new session ticket", v45, 2u);
      v46 = v45;
      v39 = v61;
      MEMORY[0x1B5E11244](v46, -1, -1);
    }

    v47 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
    v48 = (uint64_t)v60;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v60, 1, 1, v47);
    SessionTicket.serialize()();
    v50 = v49;
    v52 = v51;
    outlined destroy of PartialHandshakeResult(v44, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
    outlined destroy of PartialHandshakeResult((uint64_t)v21, type metadata accessor for HandshakeState.ReadyState);
    *(_OWORD *)v39 = xmmword_1B0DE7E90;
    *(_QWORD *)(v39 + 16) = 0;
    v53 = v39;
    v54 = type metadata accessor for PartialHandshakeResult(0);
    result = outlined init with take of P256.Signing.PublicKey?(v48, v53 + *(int *)(v54 + 20), &demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
    v55 = (_QWORD *)(v53 + *(int *)(v54 + 24));
    *v55 = v50;
    v55[1] = v52;
  }
  return result;
}

uint64_t outlined init with take of P256.Signing.PublicKey?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void specialized SessionKeyManager.generateSessionTicketPSK(ticketNonce:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unsigned int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[2];
  uint64_t v20;

  v4 = v3;
  v19[0] = a3;
  v19[1] = a1;
  v20 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v19 - v12;
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v4, (uint64_t)v19 - v12, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload >= 3)
  {
    v15 = (uint64_t)v7;
    v16 = v20;
    if (EnumCaseMultiPayload == 3)
    {
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v13, v15, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      __asm { BR              X10 }
    }
  }
  else
  {
    outlined destroy of HandshakeStateMachine?((uint64_t)v13, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  }
  if (one-time initialization token for logger != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)logger);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v4, (uint64_t)v11, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v18 = (char *)&loc_1B0D63FB8 + dword_1B0DC0154[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(Swift::Int a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X4>, unint64_t a4@<X5>, unint64_t a5@<X8>)
{
  char *v5;
  int64_t v6;
  int64_t v7;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;

  v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 514, 0, MEMORY[0x1E0DEE9D8]);
  if ((a4 & 0x8000000000000000) != 0 || a4 >= 0x10000)
    goto LABEL_17;
  v5 = v13;
  v15 = *((_QWORD *)v13 + 2);
  v14 = *((_QWORD *)v13 + 3);
  v16 = v14 >> 1;
  v6 = v15 + 1;
  if (v14 >> 1 <= v15)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, v13);
    v14 = *((_QWORD *)v5 + 3);
    v16 = v14 >> 1;
  }
  *((_QWORD *)v5 + 2) = v6;
  v5[v15 + 32] = BYTE1(a4);
  v7 = v15 + 2;
  if (v16 < v7)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v7, 1, v5);
  *((_QWORD *)v5 + 2) = v7;
  v5[v6 + 32] = a4;
  if ((a2 & 0x1000000000000000) != 0)
  {
    v17 = String.UTF8View._foreignCount()();
    if ((v17 & 0x8000000000000000) != 0)
    {
LABEL_17:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_18;
    }
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v17 = HIBYTE(a2) & 0xF;
      goto LABEL_13;
    }
    v17 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 >= 0x100)
    goto LABEL_17;
LABEL_13:
  v18 = v17;
  LOBYTE(v7) = v17 + 6;
  if (((v17 + 6) & 0x100) == 0)
  {
    a5 = *((_QWORD *)v5 + 2);
    v18 = *((_QWORD *)v5 + 3);
    v6 = a5 + 1;
    if (a5 < v18 >> 1)
      goto LABEL_15;
    goto LABEL_19;
  }
LABEL_18:
  __break(1u);
LABEL_19:
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v6, 1, v5);
LABEL_15:
  *((_QWORD *)v5 + 2) = v6;
  v5[a5 + 32] = v7;
  specialized Array.append<A>(contentsOf:)(0x203331736C74, 0xE600000000000000);
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(a1, a2);
  __asm { BR              X10 }
}

_QWORD *outlined retain of NewSessionTicket(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[4];
  v3 = a1[5];
  outlined copy of Data._Representation(a1[1], a1[2]);
  outlined copy of Data._Representation(v2, v3);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  result = __DataStorage._bytes.getter();
  v8 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v8 += a1 - result;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_13;
  }
  v11 = __DataStorage._length.getter();
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  v13 = (char *)(v8 + v12);
  if (v8)
    v14 = v13;
  else
    v14 = 0;
  return closure #1 in static HKDF.expandLabel<A, B>(secret:label:context:length:)(v8, v14, a4);
}

uint64_t initializeWithCopy for SessionKeyManager.State.HandshakeSecret(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for SymmetricKey();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64) + v9;
  v15 = (v14 + v11) & ~v9;
  v16 = (v14 + v12) & ~v9;
  v13(v15, v16, v7);
  v13((v14 + v15) & ~v9, (v14 + v16) & ~v9, v7);
  return a1;
}

uint64_t initializeWithCopy for SessionKeyManager.State.MasterSecret(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for SymmetricKey();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64) + v9;
  v15 = (v14 + v11) & ~v9;
  v16 = (v14 + v12) & ~v9;
  v13(v15, v16, v7);
  v17 = (v14 + v15) & ~v9;
  v18 = (v14 + v16) & ~v9;
  v13(v17, v18, v7);
  v19 = (v14 + v17) & ~v9;
  v20 = (v14 + v18) & ~v9;
  v13(v19, v20, v7);
  v21 = (v14 + v19) & ~v9;
  v22 = (v14 + v20) & ~v9;
  v13(v21, v22, v7);
  v13((v14 + v21) & ~v9, (v14 + v22) & ~v9, v7);
  return a1;
}

void specialized SessionKeyManager.State.MasterSecret.init(handshakeSecret:serverFinishedBytes:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  _QWORD v19[24];

  v19[13] = a4;
  v19[14] = a2;
  v19[22] = *MEMORY[0x1E0C80C00];
  v8 = type metadata accessor for SHA384Digest();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9328];
  v19[12] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v19[7] = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  MEMORY[0x1E0C80A78](v11);
  v12 = type metadata accessor for SymmetricKey();
  v19[10] = *(_QWORD *)(v12 - 8);
  v19[11] = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v19[9] = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v19 - v15;
  v19[6] = lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, v9, MEMORY[0x1E0CA9320]);
  v17 = dispatch thunk of static Digest.byteCount.getter();
  v19[15] = specialized Array.init(repeating:count:)(0, v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x1E0CB1B08]);
  SymmetricKey.init<A>(data:)();
  v19[5] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
  v19[8] = v16;
  v19[20] = v16;
  SymmetricKey.withUnsafeBytes<A>(_:)();
  v19[1] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
  lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>((unint64_t *)&lazy protocol witness table cache variable for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>, &demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>, MEMORY[0x1E0CA9470]);
  SymmetricKey.init<A>(data:)();
  v18 = type metadata accessor for SHA384();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(a5, a1, v18);
  __asm { BR              X10 }
}

void sub_1B0D64C40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;

  if (BYTE6(v0) >= *(uint64_t *)(v3 - 168))
  {
    *(_QWORD *)(v3 - 256) = v2;
    Data._Representation.subscript.getter();
    v5 = (char *)&loc_1B0D64C94 + *((int *)qword_1B0DC01E8 + (v4 >> 62));
    *(_QWORD *)(v3 - 248) = v1;
    *(_QWORD *)(v3 - 240) = v0;
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1B0D65038);
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = __DataStorage._bytes.getter();
  if (!result || (result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA384();
      lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9958], MEMORY[0x1E0CA9950]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t result;

  result = __DataStorage._bytes.getter();
  if (!result || (result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      return Data._Representation.append(contentsOf:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t result;

  result = __DataStorage._bytes.getter();
  if (!result || (result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      return Data._Representation.replaceSubrange(_:with:count:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(uint64_t a1, Swift::Int a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t (*v24)(uint64_t);
  uint64_t result;

  v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 514, 0, MEMORY[0x1E0DEE9D8]);
  if ((a5 & 0x8000000000000000) != 0 || a5 >= 0x10000)
    goto LABEL_25;
  v11 = v10;
  v13 = *((_QWORD *)v10 + 2);
  v12 = *((_QWORD *)v10 + 3);
  v14 = v12 >> 1;
  v15 = v13 + 1;
  if (v12 >> 1 <= v13)
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v10);
    v12 = *((_QWORD *)v11 + 3);
    v14 = v12 >> 1;
  }
  *((_QWORD *)v11 + 2) = v15;
  v11[v13 + 32] = BYTE1(a5);
  v16 = v13 + 2;
  if (v14 < v16)
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v16, 1, v11);
  *((_QWORD *)v11 + 2) = v16;
  v11[v15 + 32] = a5;
  if ((a3 & 0x1000000000000000) != 0)
  {
    v17 = String.UTF8View._foreignCount()();
    if ((v17 & 0x8000000000000000) != 0)
      goto LABEL_25;
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      v17 = HIBYTE(a3) & 0xF;
      goto LABEL_13;
    }
    v17 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 >= 0x100)
    goto LABEL_25;
LABEL_13:
  v18 = v17;
  v19 = v17 + 6;
  if (((v17 + 6) & 0x100) != 0)
  {
    __break(1u);
  }
  else
  {
    v5 = *((_QWORD *)v11 + 2);
    v18 = *((_QWORD *)v11 + 3);
    v15 = v5 + 1;
    if (v5 < v18 >> 1)
      goto LABEL_15;
  }
  v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v15, 1, v11);
LABEL_15:
  *((_QWORD *)v11 + 2) = v15;
  v11[v5 + 32] = v19;
  specialized Array.append<A>(contentsOf:)(0x203331736C74, 0xE600000000000000);
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(a2, a3);
  v20 = *(_QWORD *)(a4 + 16);
  if (v20 >= 0x100)
  {
LABEL_25:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
  v22 = *((_QWORD *)v11 + 2);
  v21 = *((_QWORD *)v11 + 3);
  if (v22 >= v21 >> 1)
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v11);
  *((_QWORD *)v11 + 2) = v22 + 1;
  v11[v22 + 32] = v20;
  specialized Array.append<A>(contentsOf:)(a4 + 32, (char *)(a4 + 32 + v20));
  type metadata accessor for SHA384();
  v23 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9958];
  type metadata accessor for SymmetricKey();
  v24 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CA93C8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, v23, MEMORY[0x1E0CA9950]);
  lazy protocol witness table accessor for type SHA384 and conformance SHA384((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, v24, MEMORY[0x1E0CA9398]);
  lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x1E0CB1B00]);
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
  return swift_bridgeObjectRelease();
}

{
  char *v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  uint64_t (*v19)(uint64_t);
  uint64_t (*v20)(uint64_t);

  v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 514, 0, MEMORY[0x1E0DEE9D8]);
  if ((a5 & 0x8000000000000000) != 0 || a5 >= 0x10000)
    goto LABEL_17;
  v5 = v12;
  v14 = *((_QWORD *)v12 + 2);
  v13 = *((_QWORD *)v12 + 3);
  v15 = v13 >> 1;
  v6 = v14 + 1;
  if (v13 >> 1 <= v14)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v12);
    v13 = *((_QWORD *)v5 + 3);
    v15 = v13 >> 1;
  }
  *((_QWORD *)v5 + 2) = v6;
  v5[v14 + 32] = BYTE1(a5);
  v7 = v14 + 2;
  if (v15 < v7)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v7, 1, v5);
  *((_QWORD *)v5 + 2) = v7;
  v5[v6 + 32] = a5;
  if ((a3 & 0x1000000000000000) != 0)
  {
    v16 = String.UTF8View._foreignCount()();
    if ((v16 & 0x8000000000000000) != 0)
    {
LABEL_17:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_18;
    }
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      v16 = HIBYTE(a3) & 0xF;
      goto LABEL_13;
    }
    v16 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v16 >= 0x100)
    goto LABEL_17;
LABEL_13:
  LODWORD(v7) = v16 + 6;
  v17 = v7 >> 8;
  if ((v7 & 0x100) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v8 = *((_QWORD *)v5 + 2);
  v17 = *((_QWORD *)v5 + 3);
  v6 = v8 + 1;
  if (v8 >= v17 >> 1)
LABEL_19:
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v6, 1, v5);
  *((_QWORD *)v5 + 2) = v6;
  v5[v8 + 32] = v7;
  specialized Array.append<A>(contentsOf:)(0x203331736C74, 0xE600000000000000);
  swift_bridgeObjectRetain();
  v18 = specialized Array.append<A>(contentsOf:)(a2, a3);
  MEMORY[0x1E0C80A78](v18);
  type metadata accessor for SHA384Digest();
  lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9328], MEMORY[0x1E0CA9310]);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  type metadata accessor for SHA384();
  v19 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9958];
  type metadata accessor for SymmetricKey();
  v20 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CA93C8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, v19, MEMORY[0x1E0CA9950]);
  lazy protocol witness table accessor for type SHA384 and conformance SHA384((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, v20, MEMORY[0x1E0CA9398]);
  lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x1E0CB1B00]);
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
  return swift_bridgeObjectRelease();
}

{
  char *v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  uint64_t (*v19)(uint64_t);

  v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 514, 0, MEMORY[0x1E0DEE9D8]);
  if ((a5 & 0x8000000000000000) != 0 || a5 >= 0x10000)
    goto LABEL_17;
  v5 = v12;
  v14 = *((_QWORD *)v12 + 2);
  v13 = *((_QWORD *)v12 + 3);
  v15 = v13 >> 1;
  v6 = v14 + 1;
  if (v13 >> 1 <= v14)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v12);
    v13 = *((_QWORD *)v5 + 3);
    v15 = v13 >> 1;
  }
  *((_QWORD *)v5 + 2) = v6;
  v5[v14 + 32] = BYTE1(a5);
  v7 = v14 + 2;
  if (v15 < v7)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v7, 1, v5);
  *((_QWORD *)v5 + 2) = v7;
  v5[v6 + 32] = a5;
  if ((a3 & 0x1000000000000000) != 0)
  {
    v16 = String.UTF8View._foreignCount()();
    if ((v16 & 0x8000000000000000) != 0)
    {
LABEL_17:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_18;
    }
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      v16 = HIBYTE(a3) & 0xF;
      goto LABEL_13;
    }
    v16 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v16 >= 0x100)
    goto LABEL_17;
LABEL_13:
  LODWORD(v7) = v16 + 6;
  v17 = v7 >> 8;
  if ((v7 & 0x100) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v8 = *((_QWORD *)v5 + 2);
  v17 = *((_QWORD *)v5 + 3);
  v6 = v8 + 1;
  if (v8 >= v17 >> 1)
LABEL_19:
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v6, 1, v5);
  *((_QWORD *)v5 + 2) = v6;
  v5[v8 + 32] = v7;
  specialized Array.append<A>(contentsOf:)(0x203331736C74, 0xE600000000000000);
  swift_bridgeObjectRetain();
  v18 = specialized Array.append<A>(contentsOf:)(a2, a3);
  MEMORY[0x1E0C80A78](v18);
  type metadata accessor for SHA384Digest();
  lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9328], MEMORY[0x1E0CA9310]);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  type metadata accessor for SHA384();
  v19 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9958];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, v19, MEMORY[0x1E0CA9950]);
  lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>((unint64_t *)&lazy protocol witness table cache variable for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>, &demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>, MEMORY[0x1E0CA9470]);
  lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x1E0CB1B00]);
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
  return swift_bridgeObjectRelease();
}

uint64_t lazy protocol witness table accessor for type SHA384 and conformance SHA384(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1B5E111D8](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

Swift::Int specialized Array.append<A>(contentsOf:)(Swift::Int result, unint64_t a2)
{
  char **v2;
  uint64_t v3;
  char *v4;
  int64_t v5;
  int64_t v6;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if ((a2 & 0x1000000000000000) != 0)
  {
    result = String.UTF8View._foreignCount()();
    v3 = result;
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v3 = HIBYTE(a2) & 0xF;
  }
  else
  {
    v3 = result & 0xFFFFFFFFFFFFLL;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
  }
  else
  {
    isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    *v2 = v4;
    if (!(_DWORD)isUniquelyReferenced_nonNull_native || *((_QWORD *)v4 + 3) >> 1 < v6)
    {
      if (v5 <= v6)
        v8 = v5 + v3;
      else
        v8 = v5;
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v8, 1, v4);
      *v2 = v4;
    }
    swift_bridgeObjectRetain();
    result = _StringGuts.copyUTF8(into:)();
    if ((v9 & 1) != 0)
      goto LABEL_22;
    v10 = result;
    result = swift_bridgeObjectRelease_n();
    if (v10 >= v3)
    {
      if (v10 < 1)
      {
LABEL_17:
        *v2 = v4;
        return result;
      }
      v11 = *((_QWORD *)v4 + 2);
      v12 = __OFADD__(v11, v10);
      v13 = v11 + v10;
      if (!v12)
      {
        *((_QWORD *)v4 + 2) = v13;
        goto LABEL_17;
      }
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1B5E111D8](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1B5E111CC](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t initializeWithCopy for SessionKeyManager.State.EarlySecret(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for SymmetricKey();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64) + v9;
  v15 = (v14 + v11) & ~v9;
  v16 = (v14 + v12) & ~v9;
  v13(v15, v16, v7);
  v17 = (v14 + v15) & ~v9;
  v18 = (v14 + v16) & ~v9;
  v13(v17, v18, v7);
  v13((v14 + v17) & ~v9, (v14 + v18) & ~v9, v7);
  return a1;
}

void *specialized ClientHello.serverCertificateTypes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  void *v4;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (_BYTE *)(v1 + 32);
    v4 = &outlined read-only object #0 of ClientHello.serverCertificateTypes.getter;
    while (1)
    {
      if (v3[32] == 7)
      {
        if ((v3[8] & 1) == 0)
          return *(void **)v3;
        outlined copy of Extension.ServerCertificateType(*(_QWORD *)v3, 1);
      }
      v3 += 40;
      if (!--v2)
        return v4;
    }
  }
  return &outlined read-only object #0 of ClientHello.serverCertificateTypes.getter;
}

uint64_t __nwswifttls_copy_definition_block_invoke()
{
  uint64_t v0;
  void *v1;

  if (nwswifttls_identifier_onceToken != -1)
    dispatch_once(&nwswifttls_identifier_onceToken, &__block_literal_global_92);
  v0 = nw_protocol_definition_create_with_identifier();
  v1 = (void *)nwswifttls_copy_definition_definition;
  nwswifttls_copy_definition_definition = v0;

  nw_protocol_definition_set_options_allocator();
  nw_protocol_definition_set_options_equality_check();
  nw_protocol_definition_set_options_comparator();
  return nw_protocol_definition_set_metadata_allocator();
}

uint64_t assignWithTake for PartialHandshakeResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6 >> 60 == 15)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  outlined consume of Data._Representation(v8, v6);
LABEL_6:
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        v18 = type metadata accessor for SymmetricKey();
        v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
        v19(v10, v11, v18);
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey));
        v19(&v10[*(int *)(v20 + 48)], &v11[*(int *)(v20 + 48)], v18);
      }
      else
      {
        v26 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v10, v11, v26);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_21;
    }
LABEL_13:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_21;
  }
  if (v16)
  {
    outlined destroy of PartialHandshakeResult.NewEncryptionLevel((uint64_t)v10);
    goto LABEL_13;
  }
  if (a1 != a2)
  {
    outlined destroy of PartialHandshakeResult.NewEncryptionLevel((uint64_t)v10);
    v22 = swift_getEnumCaseMultiPayload();
    if (v22 == 2)
    {
      v34 = type metadata accessor for SymmetricKey();
      v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32);
      v35(v10, v11, v34);
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey));
      v35(&v10[*(int *)(v36 + 48)], &v11[*(int *)(v36 + 48)], v34);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (v22 == 1)
      {
        v23 = type metadata accessor for SymmetricKey();
        v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32);
        v24(v10, v11, v23);
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey));
        v24(&v10[*(int *)(v25 + 48)], &v11[*(int *)(v25 + 48)], v23);
      }
      else
      {
        v37 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v10, v11, v37);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_21:
  v27 = *(int *)(a3 + 24);
  v28 = (uint64_t *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v30 = *(_QWORD *)(a1 + v27 + 8);
  if (v30 >> 60 != 15)
  {
    v31 = v29[1];
    if (v31 >> 60 != 15)
    {
      v32 = *v28;
      *v28 = *v29;
      v28[1] = v31;
      outlined consume of Data._Representation(v32, v30);
      return a1;
    }
    outlined destroy of Data((uint64_t)v28);
  }
  *(_OWORD *)v28 = *(_OWORD *)v29;
  return a1;
}

uint64_t outlined destroy of PartialHandshakeResult.NewEncryptionLevel(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of ByteBuffer(uint64_t a1)
{
  destroy for Extension.ServerName.Names(a1);
  return a1;
}

void nwswifttls_connected(uint64_t a1, uint64_t a2)
{
  id *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  NSObject *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  _TtC10nwswifttls14STLSHandshaker *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  id *v27;

  if (a1)
  {
    v4 = (id *)*(id *)(a1 + 40);
    if (!v4)
      goto LABEL_12;
    v5 = *(_QWORD *)(a1 + 48);
    if (!v5)
      goto LABEL_12;
    v6 = *(_QWORD *)(v5 + 24);
    if (!v6)
      goto LABEL_12;
    v7 = *(void (**)(uint64_t, uint64_t))(v6 + 40);
    if (!v7)
      goto LABEL_12;
    v27 = v4;
    v7(v5, a2);
    v4 = v27;
    if (*(_QWORD *)(a1 + 32) != a2)
      goto LABEL_12;
    if (*((_BYTE *)v27 + 277))
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 24) + 40))(v5, a1);
    }
    else
    {
      if (*((_BYTE *)v27 + 276))
        goto LABEL_12;
      *((_BYTE *)v27 + 276) = 1;
      (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + 112))();
      v8 = objc_claimAutoreleasedReturnValue();
      if ((nw_parameters_get_server_mode() & 1) == 0)
      {
        *((_DWORD *)v27 + 62) = nwswifttls_get_transport_protocol(v8);
        if (os_variant_allows_internal_security_policies()
          && nw_parameters_get_enable_tls_keylog())
        {
          *((_BYTE *)v27 + 274) = 1;
        }
        if (nwswifttls_configure_with_sec_protocol_options(a1))
        {
          v9 = v27[28];
          v10 = v27[30];
          v11 = nwswifttls_serialize_xpc_array(v27[32]);
          if (*((_BYTE *)v27 + 272) || *((_BYTE *)v27 + 273))
          {
            v12 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *((unsigned __int8 *)v27 + 272));
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "addObject:", v13);

            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *((unsigned __int8 *)v27 + 273));
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "addObject:", v14);

          }
          else
          {
            v12 = 0;
          }
          v15 = [_TtC10nwswifttls14STLSHandshaker alloc];
          LOBYTE(v26) = *((_BYTE *)v27 + 275);
          v16 = -[STLSHandshaker init:serverName:quicTransportParameters:alpn:sessionState:ticketRequest:useX25519KeyExchange:](v15, "init:serverName:quicTransportParameters:alpn:sessionState:ticketRequest:useX25519KeyExchange:", v27[29], v27[33], v10, v11, v9, v12, v26);
          v17 = v27[35];
          v27[35] = (id)v16;

          v18 = v27[29];
          v27[29] = 0;

          v19 = v27[30];
          v27[30] = 0;

          v20 = v27[32];
          v27[32] = 0;

          v21 = v27[33];
          v27[33] = 0;

          v22 = v27[35];
          if (v22)
          {
            objc_msgSend(v22, "startHandshake");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            v24 = v23;
            if (v23)
            {
              v25 = objc_retainAutorelease(v23);
              nwswifttls_add_message(v27, 0, objc_msgSend(v25, "bytes"), objc_msgSend(v25, "length"));
              nwswifttls_send_messages(v27, 0);
              nwswifttls_update_encryption_secrets(v27);
            }
            else
            {
              nwswifttls_disconnect(a1);
            }

          }
          else
          {
            nwswifttls_disconnect(a1);
          }

        }
      }

    }
    v4 = v27;
LABEL_12:

  }
}

uint64_t nwswifttls_send_messages(void *a1, unsigned int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a1;
  v4 = v3;
  v5 = 0;
  if (v3)
  {
    if (a2 <= 3)
    {
      v5 = *((_QWORD *)v3 + a2 + 11);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 24);
        if (v6 && *(_QWORD *)(v6 + 96))
        {
          v7 = (uint64_t)v3 + 16 * a2 + 120;
          if ((nw_frame_array_is_empty() & 1) == 0)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 24) + 96))(v5, v7);
          v5 = 1;
        }
        else
        {
          v5 = 0;
        }
      }
    }
  }

  return v5;
}

uint64_t nwswifttls_add_message(void *a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];

  v7 = a1;
  v8 = v7;
  v9 = 0;
  if (v7)
  {
    if (a3)
    {
      if (a2 <= 3)
      {
        v9 = *((_QWORD *)v7 + a2 + 11);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 24);
          if (v10
            && *(_QWORD *)(v10 + 88)
            && (v13[0] = 0, v13[1] = 0, nw_frame_array_init(), !HIDWORD(a4))
            && (*(unsigned int (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, _QWORD *))(*(_QWORD *)(v9 + 24) + 88))(v9, (uint64_t)v8 + 8, a4, a4, 1, v13) == 1)
          {
            nw_frame_array_first();
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            if (v11)
            {
              nw_frame_unclaimed_bytes();
              v9 = a4 == 0;
              if (!a4)
              {
                nw_frame_claim();
                nw_frame_collapse();
                nw_frame_unclaim();
                nw_frame_array_remove();
                nw_frame_array_append();
              }
            }
            else
            {
              v9 = 0;
            }

          }
          else
          {
            v9 = 0;
          }
        }
      }
    }
  }

  return v9;
}

id nwswifttls_serialize_xpc_array(void *a1)
{
  id v1;
  void *v2;
  id v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *string;
  const char *v9;
  size_t v10;
  size_t v11;
  id v12;
  char v14;

  v1 = a1;
  v2 = v1;
  if (v1 && MEMORY[0x1B5E11310](v1) == MEMORY[0x1E0C812C8])
  {
    v3 = objc_alloc_init(MEMORY[0x1E0C99DF0]);
    if (v3)
    {
      v14 = 0;
      if (xpc_array_get_count(v2))
      {
        v4 = 0;
        v5 = MEMORY[0x1E0C81390];
        do
        {
          xpc_array_get_value(v2, v4);
          v6 = objc_claimAutoreleasedReturnValue();
          v7 = (void *)v6;
          if (v6)
          {
            if (MEMORY[0x1B5E11310](v6) == v5)
            {
              string = xpc_array_get_string(v2, v4);
              if (string)
              {
                v9 = string;
                v10 = strlen(string);
                if (v10 <= 0xFF)
                {
                  v11 = v10;
                  v14 = v10;
                  objc_msgSend(v3, "appendBytes:length:", &v14, 1);
                  objc_msgSend(v3, "appendBytes:length:", v9, v11);
                }
              }
            }
          }

          ++v4;
        }
        while (v4 < xpc_array_get_count(v2));
      }
      v12 = v3;
    }

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t nwswifttls_get_transport_protocol(NSObject *a1)
{
  NSObject *v1;
  NSObject *v2;
  nw_protocol_definition_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char v7;
  nw_protocol_definition_t v8;

  v1 = nw_parameters_copy_default_protocol_stack(a1);
  v2 = nw_protocol_stack_copy_original_proxied_transport_protocol();
  if (v2 || (v2 = nw_protocol_stack_copy_transport_protocol(v1)) != 0)
  {
    v3 = nw_protocol_options_copy_definition(v2);
    if (v3)
    {
      v4 = (void *)nw_protocol_copy_quic_connection_definition();
      if (MEMORY[0x1B5E10DB8](v3, v4))
      {

      }
      else
      {
        v6 = (void *)nw_protocol_copy_quic_stream_definition();
        v7 = MEMORY[0x1B5E10DB8](v3, v6);

        if ((v7 & 1) == 0)
        {
          v8 = nw_protocol_copy_tcp_definition();
          v5 = MEMORY[0x1B5E10DB8](v3, v8);

          goto LABEL_11;
        }
      }
      v5 = 2;
    }
    else
    {
      v5 = 0;
    }
LABEL_11:

    goto LABEL_12;
  }
  v5 = 0;
LABEL_12:

  return v5;
}

uint64_t nwswifttls_configure_with_sec_protocol_options(uint64_t a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  id v5;

  v1 = a1;
  if (a1)
  {
    v2 = *(id *)(a1 + 40);
    v3 = v2;
    if (v2)
    {
      v5 = v2;
      v1 = nw_protocol_options_access_handle();

    }
    else
    {
      v1 = 0;
    }

  }
  return v1;
}

uint64_t storeEnumTagSinglePayload for HandshakeStateMachine()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<P256.Signing.PublicKey>);
  v10 = *(_QWORD *)(type metadata accessor for P256.Signing.PublicKey() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for P256.Signing.PublicKey() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(type metadata accessor for P256.Signing.PublicKey() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t HandshakeStateMachine.init(sessionTicket:configuration:clock:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v45 = a4;
  v40 = type metadata accessor for HandshakeState.IdleState(0);
  MEMORY[0x1E0C80A78](v40);
  v11 = (_OWORD *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  MEMORY[0x1E0C80A78](v12);
  v39 = (uint64_t)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1E0C80A78](v42);
  v41 = (uint64_t)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SessionTicket();
  v38 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)a5 = xmmword_1B0DE7E90;
  v18 = a5;
  *(_QWORD *)(a5 + 16) = 0;
  outlined copy of Data._Representation(a1, a2);
  v43 = a1;
  v44 = a2;
  SessionTicket.init(serialized:)(a2, (uint64_t)v17);
  if (v5)
  {
    outlined release of HandshakeStateMachine.Configuration((_QWORD *)a3);
    outlined consume of Data._Representation(v43, v44);
    __swift_destroy_boxed_opaque_existential_1(v45);
    return outlined consume of ByteBuffer?(0, 0xF000000000000000);
  }
  else
  {
    v20 = (int *)type metadata accessor for HandshakeStateMachine();
    outlined init with copy of SwiftTLSClock(v45, v18 + v20[7]);
    v46 = 0;
    MEMORY[0x1B5E11250](&v46, 8);
    v35 = v46;
    v46 = 0;
    MEMORY[0x1B5E11250](&v46, 8);
    v21 = v46;
    v46 = 0;
    MEMORY[0x1B5E11250](&v46, 8);
    v22 = v46;
    v46 = 0;
    MEMORY[0x1B5E11250](&v46, 8);
    v23 = v46;
    v36 = v18;
    v37 = v20;
    v24 = (_QWORD *)(v18 + v20[8]);
    *v24 = v35;
    v24[1] = v21;
    v24[2] = v22;
    v24[3] = v23;
    v25 = (_OWORD *)(v18 + v20[9]);
    v26 = *(_OWORD *)(a3 + 48);
    v25[2] = *(_OWORD *)(a3 + 32);
    v25[3] = v26;
    *(_OWORD *)((char *)v25 + 60) = *(_OWORD *)(a3 + 60);
    v27 = *(_OWORD *)(a3 + 16);
    *v25 = *(_OWORD *)a3;
    v25[1] = v27;
    v28 = v39;
    outlined init with copy of PartialHandshakeResult((uint64_t)v17, v39, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56);
    v29(v28, 0, 1, v15);
    v30 = (uint64_t)v11 + *(int *)(v40 + 20);
    v29(v30, 1, 1, v15);
    v31 = *(_OWORD *)(a3 + 48);
    v11[2] = *(_OWORD *)(a3 + 32);
    v11[3] = v31;
    *(_OWORD *)((char *)v11 + 60) = *(_OWORD *)(a3 + 60);
    v32 = *(_OWORD *)(a3 + 16);
    *v11 = *(_OWORD *)a3;
    v11[1] = v32;
    outlined retain of HandshakeStateMachine.Configuration((_QWORD *)a3);
    outlined assign with take of SessionTicket?(v28, v30);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    swift_storeEnumTagMultiPayload();
    v33 = v41;
    outlined init with take of HandshakeStateMachine((uint64_t)v11, v41, type metadata accessor for HandshakeState.IdleState);
    outlined consume of Data._Representation(v43, v44);
    __swift_destroy_boxed_opaque_existential_1(v45);
    outlined destroy of PartialHandshakeResult((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
    swift_storeEnumTagMultiPayload();
    return outlined init with take of HandshakeStateMachine(v33, v36 + v37[6], type metadata accessor for HandshakeState);
  }
}

uint64_t outlined assign with take of SessionTicket?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x1B5E111D8](MEMORY[0x1E0CB0380], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x1B5E111D8](MEMORY[0x1E0CB0310], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t nwswifttls_add_input_handler(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t singleton;
  void *v13;

  if (a1)
  {
    v4 = (char *)*(id *)(a1 + 40);
    if (v4)
    {
      v5 = 0;
      if (!a2 || *(_QWORD *)(a1 + 48))
        goto LABEL_12;
      v6 = *(_QWORD *)(a2 + 24);
      if (v6)
      {
        v7 = *(void (**)(uint64_t))(v6 + 112);
        if (v7)
        {
          v7(a2);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8
            && (v9 = nw_parameters_copy_protocol_options_legacy(),
                v10 = (void *)*((_QWORD *)v4 + 9),
                *((_QWORD *)v4 + 9) = v9,
                v10,
                *((_QWORD *)v4 + 9)))
          {
            v11 = (void *)nw_protocol_copy_swift_tls_definition();
            singleton = nw_protocol_metadata_create_singleton();
            v13 = (void *)*((_QWORD *)v4 + 10);
            *((_QWORD *)v4 + 10) = singleton;

            uuid_copy((unsigned __int8 *)v4 + 8, (const unsigned __int8 *)a2);
            *(_QWORD *)(a2 + 32) = v4 + 8;
            *(_QWORD *)(a1 + 48) = a2;
            v5 = 1;
          }
          else
          {
            v5 = 0;
          }

          goto LABEL_12;
        }
      }
    }
    v5 = 0;
LABEL_12:

    return v5;
  }
  return 0;
}

id nwswifttls_copy_definition()
{
  if (nwswifttls_copy_definition_onceToken != -1)
    dispatch_once(&nwswifttls_copy_definition_onceToken, &__block_literal_global_94);
  return (id)nwswifttls_copy_definition_definition;
}

uint64_t __nwswifttls_configure_with_sec_protocol_options_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  _QWORD applier[4];
  id v22;

  if (!a2)
    return 0;
  result = *(_QWORD *)(a2 + 328);
  if (result)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) = (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96) = (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 328) + 16))();
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 104) = (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 328) + 16))();
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) = (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 328) + 16))();
    v5 = _Block_copy(*(const void **)(a2 + 144));
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 184);
    *(_QWORD *)(v6 + 184) = v5;

    v8 = _Block_copy(*(const void **)(a2 + 160));
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(void **)(v9 + 192);
    *(_QWORD *)(v9 + 192) = v8;

    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 200), *(id *)(a2 + 168));
    v11 = _Block_copy(*(const void **)(a2 + 176));
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(void **)(v12 + 208);
    *(_QWORD *)(v12 + 208) = v11;

    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 216), *(id *)(a2 + 184));
    if ((nwswifttls_configure_server_raw_public_key_certificate(*(void **)(a1 + 32), a2) & 1) == 0)
    {
      v14 = *(_QWORD *)(a1 + 32);
      v15 = *(void **)(v14 + 232);
      *(_QWORD *)(v14 + 232) = 0;

    }
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 240), *(id *)(a2 + 136));
    if ((*(_DWORD *)(a2 + 361) & 0x800000) != 0)
      objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 224), *(id *)(a2 + 192));
    if (!nwswifttls_configure_application_protocols(*(void **)(a1 + 32), a2))
    {
      v16 = *(_QWORD *)(a1 + 32);
      v17 = *(void **)(v16 + 256);
      *(_QWORD *)(v16 + 256) = 0;

    }
    if (!nwswifttls_configure_server_name(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40)))
    {
      v18 = *(_QWORD *)(a1 + 32);
      v19 = *(void **)(v18 + 264);
      *(_QWORD *)(v18 + 264) = 0;

    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 272) = *(_BYTE *)(a2 + 296);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 273) = *(_BYTE *)(a2 + 297);
    v20 = *(void **)(a2 + 232);
    if (v20)
    {
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = __nwswifttls_configure_with_sec_protocol_options_block_invoke_2;
      applier[3] = &unk_1E6247FA8;
      v22 = *(id *)(a1 + 32);
      xpc_array_apply(v20, applier);

    }
    return 1;
  }
  return result;
}

const __CFArray *nwswifttls_configure_server_raw_public_key_certificate(void *a1, uint64_t a2)
{
  id *v3;
  const __CFArray *v4;
  id v5;
  id v6;
  unint64_t v7;
  const void *ValueAtIndex;

  v3 = a1;
  v4 = 0;
  if (v3)
  {
    if (a2)
    {
      v4 = *(const __CFArray **)(a2 + 280);
      if (v4)
      {
        v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v6 = v3[29];
        v3[29] = v5;

        if (v3[29])
        {
          if (CFArrayGetCount(v4))
          {
            v7 = 0;
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v4, v7);
              if (ValueAtIndex)
                objc_msgSend(v3[29], "addObject:", ValueAtIndex);
              ++v7;
            }
            while (v7 < CFArrayGetCount(v4));
          }
          v4 = (const __CFArray *)(objc_msgSend(v3[29], "count") != 0);
        }
        else
        {
          v4 = 0;
        }
      }
    }
  }

  return v4;
}

BOOL nwswifttls_configure_server_name(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _BOOL8 v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *endpoint_name;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char v24;

  v5 = a1;
  v6 = v5;
  if (v5)
  {
    if (a2 && *(_QWORD *)(a2 + 8))
    {
      v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", *(_QWORD *)(a2 + 8), 4);
      v8 = (_QWORD *)v6[33];
      v6[33] = v7;
      v9 = 1;
    }
    else
    {
      v8 = v5;
      if (a3
        && ((*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 24) + 136))(),
            (v10 = objc_claimAutoreleasedReturnValue()) != 0))
      {
        v11 = (void *)v10;
        v12 = (void *)nw_endpoint_copy_proxy_original_endpoint();
        v13 = v12;
        if (v12)
        {
          v14 = v12;

          v11 = v14;
        }
        v24 = 0;
        endpoint_name = (void *)nwswifttls_get_endpoint_name(v11, &v24);
        v16 = v11;
        v17 = nw_endpoint_copy_parent_endpoint();
        v18 = v16;
        if (v17)
        {
          v19 = (void *)v17;
          v20 = v16;
          do
          {
            v18 = v19;

            v19 = (void *)nw_endpoint_copy_parent_endpoint();
            v20 = v18;
          }
          while (v19);
        }
        if (nw_endpoint_get_type(v18) == (nw_endpoint_type_url|nw_endpoint_type_address))
        {
          if (v24)
            free(endpoint_name);
          endpoint_name = (void *)nwswifttls_get_endpoint_name(v18, &v24);
        }
        v9 = endpoint_name != 0;
        if (endpoint_name)
        {
          v21 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", endpoint_name, 4);
          v22 = (void *)v8[33];
          v8[33] = v21;

          if (v24)
            free(endpoint_name);
        }

      }
      else
      {
        v9 = 0;
      }
    }

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

uint64_t nwswifttls_get_endpoint_name(void *a1, _BYTE *a2)
{
  NSObject *v3;
  uint64_t parent_endpoint_domain;
  uint64_t hostname;

  v3 = a1;
  *a2 = 0;
  parent_endpoint_domain = 0;
  switch(nw_endpoint_get_type(v3))
  {
    case nw_endpoint_type_address:
      parent_endpoint_domain = nw_endpoint_get_parent_endpoint_domain();
      if (!parent_endpoint_domain)
      {
        parent_endpoint_domain = (uint64_t)nw_endpoint_copy_address_string(v3);
        *a2 = 1;
      }
      break;
    case nw_endpoint_type_host:
      hostname = (uint64_t)nw_endpoint_get_hostname(v3);
      goto LABEL_7;
    case nw_endpoint_type_bonjour_service:
      hostname = nw_endpoint_get_bonjour_fullname();
      goto LABEL_7;
    case nw_endpoint_type_url|nw_endpoint_type_address:
      hostname = nw_endpoint_get_srv_name();
LABEL_7:
      parent_endpoint_domain = hostname;
      break;
    default:
      break;
  }

  return parent_endpoint_domain;
}

BOOL nwswifttls_configure_application_protocols(void *a1, uint64_t a2)
{
  id v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  xpc_object_t v7;
  void *v8;
  size_t v9;
  void *v10;
  void *v11;
  size_t v12;
  int uint64;
  int v14;
  BOOL v15;
  const char *string;

  v3 = a1;
  v4 = 0;
  if (v3 && a2)
  {
    if (!*(_QWORD *)(a2 + 48) || (v5 = MEMORY[0x1B5E11310](), v6 = MEMORY[0x1E0C812C8], v5 != MEMORY[0x1E0C812C8]))
    {
      v4 = 0;
      goto LABEL_23;
    }
    v7 = xpc_array_create(0, 0);
    v8 = (void *)*((_QWORD *)v3 + 32);
    *((_QWORD *)v3 + 32) = v7;

    if (!xpc_array_get_count(*(xpc_object_t *)(a2 + 48)))
    {
LABEL_22:
      v4 = xpc_array_get_count(*((xpc_object_t *)v3 + 32)) != 0;
      goto LABEL_23;
    }
    v9 = 0;
    while (1)
    {
      xpc_array_get_value(*(xpc_object_t *)(a2 + 48), v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (MEMORY[0x1B5E11310]() == v6)
      {
        uint64 = xpc_array_get_uint64(v10, 1uLL);
        v14 = *((_DWORD *)v3 + 62);
        if (v14)
          v15 = uint64 == 0;
        else
          v15 = 1;
        if (!v15 && v14 != uint64)
          goto LABEL_21;
        v11 = v10;
        v12 = 0;
      }
      else
      {
        v11 = *(void **)(a2 + 48);
        v12 = v9;
      }
      string = xpc_array_get_string(v11, v12);
      if (string)
        xpc_array_set_string(*((xpc_object_t *)v3 + 32), 0xFFFFFFFFFFFFFFFFLL, string);
LABEL_21:

      if (++v9 >= xpc_array_get_count(*(xpc_object_t *)(a2 + 48)))
        goto LABEL_22;
    }
  }
LABEL_23:

  return v4;
}

void nwswifttls_deallocate_options(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  const void *v28;
  id v29;

  v29 = a1;
  if (a2)
  {
    free(*(void **)(a2 + 8));
    free(*(void **)(a2 + 16));
    v3 = *(void **)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;

    v4 = *(void **)(a2 + 232);
    *(_QWORD *)(a2 + 232) = 0;

    v5 = *(void **)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;

    v6 = *(void **)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;

    v7 = *(void **)(a2 + 88);
    *(_QWORD *)(a2 + 88) = 0;

    v8 = *(void **)(a2 + 96);
    *(_QWORD *)(a2 + 96) = 0;

    v9 = *(void **)(a2 + 104);
    *(_QWORD *)(a2 + 104) = 0;

    v10 = *(void **)(a2 + 112);
    *(_QWORD *)(a2 + 112) = 0;

    v11 = *(void **)(a2 + 120);
    *(_QWORD *)(a2 + 120) = 0;

    v12 = *(void **)(a2 + 128);
    *(_QWORD *)(a2 + 128) = 0;

    v13 = *(void **)(a2 + 176);
    *(_QWORD *)(a2 + 176) = 0;

    v14 = *(void **)(a2 + 184);
    *(_QWORD *)(a2 + 184) = 0;

    v15 = *(void **)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;

    v16 = *(void **)(a2 + 192);
    *(_QWORD *)(a2 + 192) = 0;

    v17 = *(void **)(a2 + 136);
    *(_QWORD *)(a2 + 136) = 0;

    v18 = *(void **)(a2 + 144);
    *(_QWORD *)(a2 + 144) = 0;

    v19 = *(void **)(a2 + 152);
    *(_QWORD *)(a2 + 152) = 0;

    v20 = *(void **)(a2 + 160);
    *(_QWORD *)(a2 + 160) = 0;

    v21 = *(void **)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;

    v22 = *(void **)(a2 + 176);
    *(_QWORD *)(a2 + 176) = 0;

    v23 = *(void **)(a2 + 184);
    *(_QWORD *)(a2 + 184) = 0;

    v24 = *(void **)(a2 + 328);
    *(_QWORD *)(a2 + 328) = 0;

    v25 = *(void **)(a2 + 264);
    *(_QWORD *)(a2 + 264) = 0;

    v26 = *(void **)(a2 + 256);
    *(_QWORD *)(a2 + 256) = 0;

    v27 = *(void **)(a2 + 80);
    *(_QWORD *)(a2 + 80) = 0;

    free(*(void **)(a2 + 336));
    *(_QWORD *)(a2 + 352) = 0;
    v28 = *(const void **)(a2 + 280);
    if (v28)
    {
      CFRelease(v28);
      *(_QWORD *)(a2 + 280) = 0;
    }
  }
  cc_clear();
  free((void *)a2);

}

char *nwswifttls_copy_options(void *a1, uint64_t a2)
{
  id v3;
  char *v4;
  const void *v5;
  void *v6;
  void *v7;
  void *v8;
  const void *v9;
  void *v10;
  void *v11;
  void *v12;
  const void *v13;
  void *v14;
  void *v15;
  void *v16;
  const void *v17;
  void *v18;
  void *v19;
  const __CFArray *v20;
  void *v21;
  xpc_object_t v22;
  void *v23;
  void *v24;
  xpc_object_t v25;
  void *v26;
  void *v27;
  xpc_object_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  const char *v34;

  v3 = a1;
  if (a2)
  {
    v4 = (char *)malloc_type_calloc(1uLL, 0x170uLL, 0x10F00400E22A4EFuLL);
    if (v4)
    {
      v5 = *(const void **)(a2 + 144);
      if (v5)
      {
        v6 = _Block_copy(v5);
        v7 = (void *)*((_QWORD *)v4 + 18);
        *((_QWORD *)v4 + 18) = v6;

      }
      v8 = *(void **)(a2 + 152);
      if (v8)
        objc_storeStrong((id *)v4 + 19, v8);
      v9 = *(const void **)(a2 + 160);
      if (v9)
      {
        v10 = _Block_copy(v9);
        v11 = (void *)*((_QWORD *)v4 + 20);
        *((_QWORD *)v4 + 20) = v10;

      }
      v12 = *(void **)(a2 + 168);
      if (v12)
        objc_storeStrong((id *)v4 + 21, v12);
      v13 = *(const void **)(a2 + 176);
      if (v13)
      {
        v14 = _Block_copy(v13);
        v15 = (void *)*((_QWORD *)v4 + 22);
        *((_QWORD *)v4 + 22) = v14;

      }
      v16 = *(void **)(a2 + 184);
      if (v16)
        objc_storeStrong((id *)v4 + 23, v16);
      v17 = *(const void **)(a2 + 328);
      if (v17)
      {
        v18 = _Block_copy(v17);
        v19 = (void *)*((_QWORD *)v4 + 41);
        *((_QWORD *)v4 + 41) = v18;

      }
      v20 = *(const __CFArray **)(a2 + 280);
      if (v20)
        *((_QWORD *)v4 + 35) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v20);
      v21 = *(void **)(a2 + 48);
      if (v21)
      {
        v22 = xpc_copy(v21);
        v23 = (void *)*((_QWORD *)v4 + 6);
        *((_QWORD *)v4 + 6) = v22;

      }
      v24 = *(void **)(a2 + 40);
      if (v24)
      {
        v25 = xpc_copy(v24);
        v26 = (void *)*((_QWORD *)v4 + 5);
        *((_QWORD *)v4 + 5) = v25;

      }
      v27 = *(void **)(a2 + 232);
      if (v27)
      {
        v28 = xpc_copy(v27);
        v29 = (void *)*((_QWORD *)v4 + 29);
        *((_QWORD *)v4 + 29) = v28;

      }
      v30 = *(void **)(a2 + 136);
      if (v30)
        objc_storeStrong((id *)v4 + 17, v30);
      v31 = *(unsigned int *)(v4 + 361);
      v32 = v31 & 0xFFFFFFFFFF7FFFFFLL | ((unint64_t)v4[365] << 32);
      *(_DWORD *)(v4 + 361) = v31 & 0xFF7FFFFF | *(_DWORD *)(a2 + 361) & 0x800000;
      v4[365] = BYTE4(v32);
      v33 = *(void **)(a2 + 192);
      if (v33)
        objc_storeStrong((id *)v4 + 24, v33);
      v34 = *(const char **)(a2 + 8);
      if (v34)
        *((_QWORD *)v4 + 1) = strdup(v34);
      if (*(_BYTE *)(a2 + 296))
        v4[296] = *(_BYTE *)(a2 + 296);
      if (*(_BYTE *)(a2 + 297))
        v4[297] = *(_BYTE *)(a2 + 297);
    }
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Extension>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Extension.KeyShare.KeyShareEntry>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CertificateMessage.CertificateEntry>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Extension.PreSharedKey.OfferedPSKs.PSKIdentity>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in static HKDF.expandLabel<A, B>(secret:label:context:length:)(uint64_t a1, char *a2)
{
  uint64_t v2;

  return closure #1 in static HKDF.expandLabel<A, B>(secret:label:context:length:)(a1, a2, *(char ***)(v2 + 16));
}

uint64_t closure #1 in static HKDF.expandLabel<A, B>(secret:label:context:length:)(uint64_t a1, char *a2, char **a3)
{
  char v6;
  char *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;

  if (a1)
  {
    v6 = (_BYTE)a2 - a1;
    if ((uint64_t)&a2[-a1] < 256)
      goto LABEL_5;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  v6 = 0;
LABEL_5:
  v7 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
    *a3 = v7;
  }
  v10 = *((_QWORD *)v7 + 2);
  v9 = *((_QWORD *)v7 + 3);
  if (v10 >= v9 >> 1)
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v7);
  *((_QWORD *)v7 + 2) = v10 + 1;
  v7[v10 + 32] = v6;
  *a3 = v7;
  return specialized Array.append<A>(contentsOf:)(a1, a2);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result, char *a2)
{
  uint64_t *v2;
  char *v3;
  char *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  BOOL v16;
  int64_t v17;
  char *v18;
  char v19;
  char v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int64_t v27;

  v5 = (int64_t)&a2[-result];
  if (result)
    v6 = (int64_t)&a2[-result];
  else
    v6 = 0;
  v7 = *v2;
  v8 = *(_QWORD *)(*v2 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v3 = a2;
  v4 = (char *)result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || (v10 = *(_QWORD *)(v7 + 24) >> 1, v10 < v9))
  {
    if (v8 <= v9)
      v11 = v8 + v6;
    else
      v11 = v8;
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v7);
    v7 = result;
    v10 = *(_QWORD *)(result + 24) >> 1;
  }
  v12 = *(_QWORD *)(v7 + 16);
  v13 = v10 - v12;
  v14 = 0;
  if (v4 && v3 && v4 < v3 && v10 != v12)
  {
    if (v5 >= v13)
      v14 = v10 - v12;
    else
      v14 = v5;
    if (v14 < 0)
    {
      __break(1u);
      return result;
    }
    result = (uint64_t)memmove((void *)(v7 + v12 + 32), v4, v14);
    v4 += v14;
  }
  if (v14 < v6)
    goto LABEL_27;
  if (v14)
  {
    v15 = *(_QWORD *)(v7 + 16);
    v16 = __OFADD__(v15, v14);
    v17 = v15 + v14;
    if (v16)
    {
      __break(1u);
      goto LABEL_33;
    }
    *(_QWORD *)(v7 + 16) = v17;
  }
  if (v14 != v13)
    goto LABEL_25;
LABEL_28:
  v17 = *(_QWORD *)(v7 + 16);
  if (!v4)
  {
LABEL_33:
    if (!v3)
      goto LABEL_25;
    v4 = 0;
    goto LABEL_35;
  }
  if (!v3 || v4 != v3)
  {
LABEL_35:
    v20 = *v4;
    v18 = v4 + 1;
    v19 = v20;
    while (1)
    {
      while (1)
      {
        v21 = *(_QWORD *)(v7 + 24);
        v22 = v21 >> 1;
        v23 = v17 + 1;
        if ((uint64_t)(v21 >> 1) >= v17 + 1)
          break;
        v26 = (char *)v7;
        v27 = v17;
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v17 + 1, 1, v26);
        v17 = v27;
        v7 = result;
        v22 = *(_QWORD *)(result + 24) >> 1;
        if (v17 < v22)
          goto LABEL_39;
LABEL_36:
        *(_QWORD *)(v7 + 16) = v17;
      }
      if (v17 >= v22)
        goto LABEL_36;
LABEL_39:
      *(_BYTE *)(v7 + v17 + 32) = v19;
      if (v3 && v3 == v18)
      {
LABEL_49:
        *(_QWORD *)(v7 + 16) = v23;
        break;
      }
      v24 = 0;
      while (1)
      {
        v25 = (uint64_t)&v18[v24 + 1];
        v19 = v18[v24];
        if (~v17 + v22 == v24)
          break;
        *(_BYTE *)(v7 + v17 + 33 + v24++) = v19;
        if (v3 && (char *)v25 == v3)
        {
          v23 = v17 + v24 + 1;
          goto LABEL_49;
        }
      }
      v18 += v24 + 1;
      v17 = v22;
      *(_QWORD *)(v7 + 16) = v22;
    }
  }
LABEL_25:
  *v2 = v7;
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v12 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ProtocolVersion>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 31;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 32])
          memmove(v13, a4 + 32, 2 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 2 * a1 + 32);
    v6 = 2 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t ByteBuffer.readKeyShare(messageType:helloRetryRequest:)(unsigned __int8 a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1 == 1)
  {
    v5 = *v2;
    v4 = v2[1];
    v6 = v2[2];
    outlined copy of Data._Representation(*v2, v4);
    specialized ByteBuffer.readInteger<A>(as:)();
    if ((v7 & 0x10000) == 0)
    {
      ByteBuffer.readSlice(length:)((unsigned __int16)v7);
      if (v9 >> 60 != 15)
      {
        v16 = v8;
        v17 = v9;
        v18 = v10;
        closure #1 in ByteBuffer.readKeyShare(messageType:helloRetryRequest:)((uint64_t)&v16);
        if (!v3)
          __asm { BR              X12 }
        outlined consume of Data._Representation(v16, v17);
        outlined consume of Data._Representation(*v2, v2[1]);
        *v2 = v5;
        v2[1] = v4;
        v2[2] = v6;
        return swift_willThrow();
      }
    }
    outlined consume of Data._Representation(*v2, v2[1]);
    *v2 = v5;
    v2[1] = v4;
    v2[2] = v6;
    goto LABEL_14;
  }
  if (a1 == 2)
  {
    if ((a2 & 1) != 0)
    {
      if (!__OFADD__(v2[2], 2))
        __asm { BR              X13 }
      __break(1u);
      JUMPOUT(0x1B0D688A0);
    }
    ByteBuffer.readKeyShareEntry()();
    if (v14 >> 60 != 15)
      return (unsigned __int16)result;
LABEL_14:
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    swift_allocError();
    *(_DWORD *)v15 = 0;
    *(_BYTE *)(v15 + 4) = 1;
    return swift_willThrow();
  }
  v11 = a1 | 0x330000;
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  swift_allocError();
  *(_DWORD *)v12 = v11;
  *(_BYTE *)(v12 + 4) = 0;
  return swift_willThrow();
}

uint64_t *ByteBuffer.readPreSharedKey(messageType:helloRetryRequest:)(unsigned __int8 a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 == 2)
  {
    if ((a2 & 1) == 0)
    {
      if (!__OFADD__(*(_QWORD *)(v2 + 16), 2))
        __asm { BR              X13 }
      __break(1u);
      JUMPOUT(0x1B0D68A98);
    }
    goto LABEL_7;
  }
  if (a1 != 1)
  {
LABEL_7:
    v5 = a1 | 0x290000;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v6 = swift_allocError();
    *(_DWORD *)v7 = v5;
    *(_BYTE *)(v7 + 4) = 0;
    return (uint64_t *)swift_willThrow(v6);
  }
  result = ByteBuffer.readOfferedPSKs()();
  if (!v3 && !result)
  {
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v6 = swift_allocError();
    *(_DWORD *)v8 = 0;
    *(_BYTE *)(v8 + 4) = 1;
    return (uint64_t *)swift_willThrow(v6);
  }
  return result;
}

void ByteBuffer.readKeyShareEntry()()
{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 16), 2))
    __asm { BR              X11 }
  __break(1u);
  JUMPOUT(0x1B0D68D18);
}

void specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(uint64_t a1)
{
  specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(a1);
}

{
  specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(a1);
}

{
  if (!__OFADD__(*(_QWORD *)(a1 + 16), 2))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0D69064);
}

{
  if (!__OFADD__(*(_QWORD *)(a1 + 16), 1))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0D7448CLL);
}

{
  if (!__OFADD__(*(_QWORD *)(a1 + 16), 2))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0D746D8);
}

{
  if (!__OFADD__(*(_QWORD *)(a1 + 16), 1))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0DAB7CCLL);
}

{
  specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(a1);
}

{
  specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(a1);
}

{
  specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(a1);
}

{
  specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(a1);
}

{
  specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(a1);
}

{
  if (!__OFADD__(*(_QWORD *)(a1 + 16), 1))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0DABBF8);
}

{
  if (!__OFADD__(*(_QWORD *)(a1 + 16), 1))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0DABE64);
}

{
  if (!__OFADD__(*(_QWORD *)(a1 + 16), 2))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0DAC22CLL);
}

void readExtensions #1 (_:) in EncryptedExtensions.init(bytes:)(uint64_t a1)
{
  if (!__OFADD__(*(_QWORD *)(a1 + 16), 2))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1B0D6951CLL);
}

void SessionTicket.init(serialized:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[112];
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PeerCertificateBundle?);
  MEMORY[0x1E0C80A78](v4);
  v17 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for PeerCertificateBundle(0);
  MEMORY[0x1E0C80A78](v6);
  v15 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  v9 = MEMORY[0x1E0C80A78](v8);
  MEMORY[0x1E0C80A78](v9);
  v19 = type metadata accessor for SymmetricKey();
  MEMORY[0x1E0C80A78](v19);
  v18 = &v13[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for SessionTicket();
  v11 = *(int *)(v14 + 52);
  v16 = a2;
  v12 = a2 + v11;
  *(_OWORD *)v12 = xmmword_1B0DE7E90;
  *(_QWORD *)(v12 + 16) = 0;
  __asm { BR              X10 }
}

uint64_t sub_1B0D696B8()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;

  outlined copy of Data._Representation(v1, v0);
  *(_QWORD *)(v5 - 112) = v1;
  *(_QWORD *)(v5 - 104) = v0;
  *(_QWORD *)(v5 - 96) = (int)v1;
  specialized ByteBuffer.readInteger<A>(as:)();
  *(_QWORD *)(v5 - 184) = v6;
  if ((v7 & 1) == 0)
  {
    specialized ByteBuffer.readInteger<A>(as:)();
    *(_QWORD *)(v5 - 192) = v8;
    if ((v8 & 0x100000000) == 0)
    {
      specialized ByteBuffer.readInteger<A>(as:)();
      *(_QWORD *)(v5 - 200) = v9;
      if ((v9 & 0x100000000) == 0)
      {
        specialized ByteBuffer.readInteger<A>(as:)();
        if ((v11 & 1) == 0)
        {
          if (v10 < 0)
          {
            __break(1u);
            JUMPOUT(0x1B0D69AF0);
          }
          ByteBuffer.readSlice(length:)(v10);
          if (v13 >> 60 != 15)
          {
            *(_QWORD *)(v5 - 224) = v12;
            *(_QWORD *)(v5 - 216) = v13;
            *(_QWORD *)(v5 - 208) = v14;
            specialized ByteBuffer.readInteger<A>(as:)();
            if ((v16 & 1) != 0)
              goto LABEL_10;
            if (v15 < 0)
            {
              __break(1u);
              JUMPOUT(0x1B0D69B74);
            }
            ByteBuffer.readSlice(length:)(v15);
            if (v18 >> 60 == 15)
            {
LABEL_10:
              outlined consume of ByteBuffer?(*(_QWORD *)(v5 - 224), *(_QWORD *)(v5 - 216));
            }
            else
            {
              *(_QWORD *)(v5 - 248) = v17;
              *(_QWORD *)(v5 - 240) = v18;
              *(_QWORD *)(v5 - 232) = v19;
              specialized ByteBuffer.readInteger<A>(as:)();
              if ((v21 & 1) == 0)
              {
                if (v20 < 0)
                {
                  __break(1u);
                  JUMPOUT(0x1B0D69CDCLL);
                }
                ByteBuffer.readSlice(length:)(v20);
                if (v22 >> 60 != 15)
                  __asm { BR              X10 }
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v4 + 56))(v2, 1, 1, *(_QWORD *)(v5 - 72));
              outlined consume of ByteBuffer?(*(_QWORD *)(v5 - 224), *(_QWORD *)(v5 - 216));
              outlined consume of ByteBuffer?(*(_QWORD *)(v5 - 248), *(_QWORD *)(v5 - 240));
              outlined destroy of HandshakeStateMachine?(v2, &demangling cache variable for type metadata for SymmetricKey?);
            }
          }
        }
      }
    }
  }
  if (one-time initialization token for logger != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)logger);
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_1B0D50000, v24, v25, "Unable to parse decrypted session ticket", v26, 2u);
    MEMORY[0x1B5E11244](v26, -1, -1);
  }

  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  v27 = swift_allocError();
  *(_DWORD *)v28 = 7;
  *(_BYTE *)(v28 + 4) = 1;
  swift_willThrow(v27);
  outlined consume of Data._Representation(v1, v0);
  outlined consume of Data._Representation(*(_QWORD *)(v5 - 112), *(_QWORD *)(v5 - 104));
  return outlined consume of ByteBuffer?(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
}

void specialized ByteBuffer.readInteger<A>(as:)()
{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 16), 8))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0D69E10);
}

{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 16), 4))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0D69F50);
}

{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 16), 2))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0D6AF64);
}

{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 16), 1))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0D6B098);
}

uint64_t closure #1 in HandshakeMessageParser.parseHandshakeMessage()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  unsigned __int8 v8;
  __int16 v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  NSObject *log;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  __int16 v76;
  _QWORD v77[11];

  v5 = *a1;
  v4 = a1[1];
  v6 = a1[2];
  v73 = v5;
  v74 = v4;
  v75 = v6;
  outlined copy of Data._Representation(v5, v4);
  specialized ByteBuffer.readInteger<A>(as:)();
  if ((v7 & 0x100) != 0)
    goto LABEL_7;
  v8 = v7;
  specialized ByteBuffer.readInteger<A>(as:)();
  if ((v9 & 0x100) != 0)
    goto LABEL_7;
  v10 = v9;
  specialized ByteBuffer.readInteger<A>(as:)();
  if ((v11 & 0x10000) != 0)
    goto LABEL_7;
  if (v10)
  {
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v12 = swift_allocError();
    *(_DWORD *)v13 = 5;
    *(_BYTE *)(v13 + 4) = 1;
    swift_willThrow(v12);
    return outlined consume of Data._Representation(v73, v74);
  }
  ByteBuffer.readSlice(length:)((unsigned __int16)v11 | ((unint64_t)v10 << 16));
  if (v16 >> 60 == 15)
  {
LABEL_7:
    outlined consume of Data._Representation(v5, v4);
    _s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOi0_((uint64_t)&v72);
    return outlined init with take of HandshakeMessageParser.ParseResult?((uint64_t)&v72, a2);
  }
  else
  {
    v18 = v16;
    v69 = v15;
    v70 = v16;
    v71 = v17;
    switch(v8)
    {
      case 1u:
        if (one-time initialization token for logger != -1)
          swift_once();
        v19 = type metadata accessor for Logger();
        __swift_project_value_buffer(v19, (uint64_t)logger);
        v20 = Logger.logObject.getter();
        v21 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v20, v21))
        {
          v22 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v22 = 0;
          _os_log_impl(&dword_1B0D50000, v20, v21, "clientHello", v22, 2u);
          MEMORY[0x1B5E11244](v22, -1, -1);
        }

        specialized ClientHello.init(bytes:)(&v69, (uint64_t)&v76);
        if (!v2)
          goto LABEL_65;
        goto LABEL_62;
      case 2u:
        if (one-time initialization token for logger != -1)
          swift_once();
        v23 = type metadata accessor for Logger();
        __swift_project_value_buffer(v23, (uint64_t)logger);
        v24 = Logger.logObject.getter();
        v25 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v24, v25))
        {
          v26 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v26 = 0;
          _os_log_impl(&dword_1B0D50000, v24, v25, "serverHello", v26, 2u);
          MEMORY[0x1B5E11244](v26, -1, -1);
        }

        specialized ServerHello.init(bytes:)(&v69);
        if (!v2)
          goto LABEL_65;
        goto LABEL_62;
      case 4u:
        if (one-time initialization token for logger != -1)
          swift_once();
        v36 = type metadata accessor for Logger();
        __swift_project_value_buffer(v36, (uint64_t)logger);
        v37 = Logger.logObject.getter();
        v38 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v37, v38))
        {
          v39 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v39 = 0;
          _os_log_impl(&dword_1B0D50000, v37, v38, "newSessionTicket", v39, 2u);
          MEMORY[0x1B5E11244](v39, -1, -1);
        }

        specialized NewSessionTicket.init(bytes:)(&v69, (uint64_t)v77);
        if (!v2)
          goto LABEL_65;
        goto LABEL_62;
      case 8u:
        v68 = v15;
        if (one-time initialization token for logger != -1)
          swift_once();
        v40 = type metadata accessor for Logger();
        __swift_project_value_buffer(v40, (uint64_t)logger);
        v41 = Logger.logObject.getter();
        v42 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v41, v42))
        {
          log = v41;
          v43 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v43 = 0;
          _os_log_impl(&dword_1B0D50000, log, v42, "encryptedExtensions", v43, 2u);
          v44 = v43;
          v41 = log;
          MEMORY[0x1B5E11244](v44, -1, -1);
        }

        outlined copy of Data._Representation(v68, v18);
        specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)((uint64_t)&v69);
        if (v2)
        {
          v46 = outlined consume of Data._Representation(v69, v70);
          v47 = v68;
        }
        else
        {
          if (v45)
          {
            outlined consume of Data._Representation(v68, v18);
LABEL_65:
            __asm { BR              X12 }
          }
          outlined consume of Data._Representation(v69, v70);
          v69 = v68;
          v70 = v18;
          lazy protocol witness table accessor for type TLSError and conformance TLSError();
          v46 = swift_allocError();
          *(_DWORD *)v66 = 0;
          *(_BYTE *)(v66 + 4) = 1;
          v5 = v73;
          v4 = v74;
          v47 = v69;
          v18 = v70;
        }
        swift_willThrow(v46);
        outlined consume of Data._Representation(v5, v4);
        result = outlined consume of Data._Representation(v47, v18);
        break;
      case 0xBu:
        if (one-time initialization token for logger != -1)
          swift_once();
        v48 = type metadata accessor for Logger();
        __swift_project_value_buffer(v48, (uint64_t)logger);
        v49 = Logger.logObject.getter();
        v50 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v49, v50))
        {
          v51 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v51 = 0;
          _os_log_impl(&dword_1B0D50000, v49, v50, "certificate", v51, 2u);
          MEMORY[0x1B5E11244](v51, -1, -1);
        }

        specialized CertificateMessage.init(bytes:)(&v69);
        if (!v2)
          goto LABEL_65;
        goto LABEL_62;
      case 0xDu:
        if (one-time initialization token for logger != -1)
          swift_once();
        v52 = type metadata accessor for Logger();
        __swift_project_value_buffer(v52, (uint64_t)logger);
        v53 = Logger.logObject.getter();
        v54 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v53, v54))
        {
          v55 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v55 = 0;
          _os_log_impl(&dword_1B0D50000, v53, v54, "certificateRequest", v55, 2u);
          MEMORY[0x1B5E11244](v55, -1, -1);
        }

        specialized CertificateRequest.init(bytes:)(&v69);
        if (!v2)
          goto LABEL_65;
        goto LABEL_62;
      case 0xFu:
        if (one-time initialization token for logger != -1)
          swift_once();
        v56 = type metadata accessor for Logger();
        __swift_project_value_buffer(v56, (uint64_t)logger);
        v57 = Logger.logObject.getter();
        v58 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v57, v58))
        {
          v59 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v59 = 0;
          _os_log_impl(&dword_1B0D50000, v57, v58, "certificateVerify", v59, 2u);
          MEMORY[0x1B5E11244](v59, -1, -1);
        }

        specialized CertificateVerify.init(bytes:)(&v69);
        if (!v2)
          goto LABEL_65;
        goto LABEL_62;
      case 0x14u:
        if (one-time initialization token for logger != -1)
          swift_once();
        v60 = type metadata accessor for Logger();
        __swift_project_value_buffer(v60, (uint64_t)logger);
        v61 = Logger.logObject.getter();
        v62 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v61, v62))
        {
          v63 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v63 = 0;
          _os_log_impl(&dword_1B0D50000, v61, v62, "finished", v63, 2u);
          MEMORY[0x1B5E11244](v63, -1, -1);
        }

        specialized FinishedMessage.init(bytes:)((uint64_t)&v69);
        if (!v2)
          goto LABEL_65;
LABEL_62:
        v64 = v5;
        v65 = v4;
LABEL_66:
        outlined consume of Data._Representation(v64, v65);
        result = outlined consume of Data._Representation(v69, v70);
        break;
      default:
        if (one-time initialization token for logger != -1)
          swift_once();
        v27 = type metadata accessor for Logger();
        __swift_project_value_buffer(v27, (uint64_t)logger);
        v28 = Logger.logObject.getter();
        v29 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v28, v29))
        {
          v30 = (uint8_t *)swift_slowAlloc();
          v31 = swift_slowAlloc();
          v72 = v31;
          *(_DWORD *)v30 = 136315138;
          v32 = HandshakeType.description.getter(v8);
          v77[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B0D50000, v28, v29, "Unsupported handshake message: %s", v30, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B5E11244](v31, -1, -1);
          MEMORY[0x1B5E11244](v30, -1, -1);
        }

        lazy protocol witness table accessor for type TLSError and conformance TLSError();
        v34 = swift_allocError();
        *(_DWORD *)v35 = 5;
        *(_BYTE *)(v35 + 4) = 1;
        swift_willThrow(v34);
        v64 = v73;
        v65 = v74;
        goto LABEL_66;
    }
  }
  return result;
}

void ByteBuffer.readSlice(length:)(uint64_t a1)
{
  uint64_t v1;

  if (!__OFADD__(*(_QWORD *)(v1 + 16), a1))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1B0D6AE2CLL);
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance Range<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    result = MEMORY[0x1B5E111D8](MEMORY[0x1E0DEB8A8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>);
  }
  return result;
}

uint64_t outlined init with take of PeerCertificateBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PeerCertificateBundle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for PeerCertificateBundle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PeerCertificateBundle.Bundle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void specialized FinishedMessage.init(bytes:)(uint64_t a1)
{
  __asm { BR              X11 }
}

void sub_1B0D6B1CC(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (__OFSUB__(BYTE6(a2), a1))
  {
    __break(1u);
  }
  else if (!__OFADD__(a1, BYTE6(a2) - a1))
  {
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1B0D6B290);
}

void ByteBuffer.readPeerCertificateBundle()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for P256.Signing.PublicKey();
  MEMORY[0x1E0C80A78](v1);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.Signing.PublicKey?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v4 = MEMORY[0x1E0C80A78](v3);
  MEMORY[0x1E0C80A78](v4);
  if (!__OFADD__(*(_QWORD *)(v0 + 16), 1))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0D6B798);
}

uint64_t storeEnumTagSinglePayload for PeerCertificateBundle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t partial apply for closure #1 in Data.append<A>(contentsOf:)()
{
  return closure #1 in Data.append<A>(contentsOf:)();
}

uint64_t closure #1 in Data.append<A>(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

void nwswifttls_input_available(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  void *v5;
  uint64_t v7;
  id v8;
  _QWORD v9[2];

  if (a1)
  {
    v4 = *(id *)(a1 + 40);
    v5 = v4;
    if (v4 && *(_QWORD *)(a1 + 48))
    {
      if (v4[11] != a2 && v4[12] != a2 && v4[13] != a2)
      {
        if (v4[14] != a2 || a2 == 0)
          goto LABEL_19;
        goto LABEL_14;
      }
      if (a2)
      {
LABEL_14:
        v7 = *(_QWORD *)(a2 + 24);
        if (v7 && *(_QWORD *)(v7 + 88) && *(_QWORD *)(v7 + 96))
        {
          v9[0] = 0;
          v9[1] = 0;
          nw_frame_array_init();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(a2 + 24) + 80))(a2, (uint64_t)v5 + 8, 1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v9))
          {
            v8 = v5;
            nw_frame_array_foreach();

          }
        }
      }
    }
LABEL_19:

  }
}

void one-time initialization function for serverCertificateTypes()
{
  static PeerCertificateBundle.serverCertificateTypes = (uint64_t)&outlined read-only object #0 of one-time initialization function for serverCertificateTypes;
  byte_1ED2CDA58 = 0;
}

double one-time initialization function for helloRetryRequest()
{
  double result;

  result = 5.94525996e-225;
  static Random.helloRetryRequest = xmmword_1E62480B0;
  *(_OWORD *)&qword_1ED2CDA40 = unk_1E62480C0;
  return result;
}

uint64_t type metadata accessor for STLSHandshaker()
{
  uint64_t result;

  result = type metadata singleton initialization cache for STLSHandshaker;
  if (!type metadata singleton initialization cache for STLSHandshaker)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t one-time initialization function for logger()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

unint64_t lazy protocol witness table accessor for type ExtensionType and conformance ExtensionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExtensionType and conformance ExtensionType;
  if (!lazy protocol witness table cache variable for type ExtensionType and conformance ExtensionType)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for ExtensionType, &type metadata for ExtensionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExtensionType and conformance ExtensionType);
  }
  return result;
}

void type metadata completion function for HandshakeState.EncryptedExtensionsState()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SessionKeyManager<SHA384>.State(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t type metadata completion function for SessionTicket()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for SymmetricKey();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for PeerCertificateBundle.Bundle(319);
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata completion function for PeerCertificateBundle()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PeerCertificateBundle.Bundle(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata completion function for HandshakeState.IdleState()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for SessionTicket?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for SessionKeyManager<SHA384>.State(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata completion function for HandshakeState.ClientHelloState()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for SessionKeyManager<SHA384>.State(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SessionTicket?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for SessionTicket?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SessionTicket?)
  {
    type metadata accessor for SessionTicket();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SessionTicket?);
  }
}

void type metadata completion function for HandshakeState.ServerCertificateState()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for PeerCertificateBundle.Bundle(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SessionKeyManager<SHA384>.State(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t type metadata completion function for SessionKeyManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for SessionKeyManager.State(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata completion function for HandshakeState.ServerHelloState()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for HandshakeState.ServerHelloState.SessionData(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SessionKeyManager<SHA384>.State(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata completion function for HandshakeState.ServerCertificateVerifyState()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for PeerCertificateBundle.Bundle(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SessionKeyManager<SHA384>.State(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for SessionKeyManager<SHA384>.State(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for SessionKeyManager<SHA384>.State)
  {
    v2 = type metadata accessor for SHA384();
    v3 = lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9958], MEMORY[0x1E0CA9950]);
    v5 = type metadata accessor for SessionKeyManager.State(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for SessionKeyManager<SHA384>.State);
  }
}

uint64_t type metadata accessor for SessionKeyManager.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SessionKeyManager.State);
}

uint64_t type metadata completion function for SessionKeyManager.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  result = type metadata accessor for SessionKeyManager.State.EarlySecret(319, v4, v5, a4);
  if (v8 <= 0x3F)
  {
    result = type metadata accessor for SessionKeyManager.State.HandshakeSecret(319, v4, v5, v7);
    if (v10 <= 0x3F)
    {
      result = type metadata accessor for SessionKeyManager.State.MasterSecret(319, v4, v5, v9);
      if (v12 <= 0x3F)
      {
        result = type metadata accessor for SessionKeyManager.State.AllSecrets(319, v4, v5, v11);
        if (v13 <= 0x3F)
        {
          swift_initEnumMetadataMultiPayload();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1B5E11190](a1, v6, a5);
}

uint64_t type metadata accessor for SessionKeyManager.State.HandshakeSecret(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SessionKeyManager.State.HandshakeSecret);
}

uint64_t type metadata accessor for SessionKeyManager.State.MasterSecret(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SessionKeyManager.State.MasterSecret);
}

uint64_t type metadata accessor for SessionKeyManager.State.EarlySecret(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SessionKeyManager.State.EarlySecret);
}

uint64_t type metadata accessor for SessionKeyManager.State.AllSecrets(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SessionKeyManager.State.AllSecrets);
}

uint64_t SessionTicket.isCompatibleWith(_:configuration:currentTime:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char *v39;
  uint64_t v40;
  char v41;
  void (*v42)(char *, uint64_t);
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v53 = a2;
  v6 = type metadata accessor for SessionTicket();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v44 - v14;
  v16 = type metadata accessor for P256.Signing.PublicKey();
  v54 = *(_QWORD *)(v16 - 8);
  v55 = v16;
  MEMORY[0x1E0C80A78](v16);
  v52 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(v21 + 16) && *(unsigned __int16 *)(v3 + *(int *)(v6 + 44)) == *(unsigned __int16 *)(v21 + 32))
  {
    v47 = v10;
    v48 = v20;
    v57 = v6;
    v46 = v13;
    v49 = a3;
    v50 = v15;
    v51 = v8;
    v59 = *(_QWORD *)(a1 + 96);
    v22 = *(_QWORD *)(v59 + 16);
    v56 = v3;
    if (v22)
    {
      v45 = v9;
      v23 = swift_bridgeObjectRetain();
      v58 = 0;
      v24 = (_BYTE *)(v23 + 64);
      do
      {
        if (*v24 == 3)
          __asm { BR              X9 }
        v24 += 40;
        --v22;
      }
      while (v22);
      outlined release of [Extension]((uint64_t)&v59);
      v9 = v45;
    }
    else
    {
      v58 = 0;
    }
    v25 = *(_QWORD *)(v53 + 16);
    v26 = (uint64_t)v48;
    outlined init with copy of PartialHandshakeResult(v3 + *(int *)(v57 + 56), (uint64_t)v48, type metadata accessor for PeerCertificateBundle.Bundle);
    v27 = v54;
    v28 = v55;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v26, 1, v55);
    v31 = v50;
    v30 = (uint64_t)v51;
    v32 = v49;
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }
    v33 = v52;
    v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 32))(v52, v26, v28);
    MEMORY[0x1E0C80A78](v34);
    *(&v44 - 2) = (uint64_t)v33;
    v35 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for closure #1 in PeerCertificateBundle.wouldBeTrusted(forKeys:), (_BOOL8)(&v44 - 4), v25);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v33, v28);
    if (v35)
    {
      v36 = v30;
      v37 = v56;
      Date.addingTimeInterval(_:)();
      v38 = static Date.< infix(_:_:)();
      outlined init with copy of PartialHandshakeResult(v37, v36, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
      v39 = v46;
      v40 = v47;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, v32, v9);
      if ((v38 & 1) != 0)
      {
        lazy protocol witness table accessor for type Date and conformance Date();
        v41 = dispatch thunk of static Comparable.< infix(_:_:)();
        v42 = *(void (**)(char *, uint64_t))(v40 + 8);
        v42(v39, v9);
        outlined destroy of PartialHandshakeResult(v36, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
        v42(v31, v9);
        if ((v41 & 1) == 0)
          return 1;
      }
      else
      {
        v43 = *(void (**)(char *, uint64_t))(v40 + 8);
        v43(v39, v9);
        outlined destroy of PartialHandshakeResult(v36, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
        v43(v31, v9);
      }
    }
  }
  return 0;
}

void SessionTicket.serialize()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[8];
  unint64_t v11;
  unint64_t *v12;
  unint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = type metadata accessor for P256.Signing.PublicKey();
  MEMORY[0x1E0C80A78](v1);
  v10[1] = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  MEMORY[0x1E0C80A78](v3);
  v10[4] = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SymmetricKey();
  v10[5] = *(_QWORD *)(v5 - 8);
  v10[6] = v5;
  MEMORY[0x1E0C80A78](v5);
  v16 = xmmword_1B0DE7EA0;
  v17 = 0;
  Date.timeIntervalSinceReferenceDate.getter();
  v11 = bswap64(v6);
  v7 = MEMORY[0x1E0DEAC20];
  v8 = MEMORY[0x1E0CB1AA8];
  v14 = MEMORY[0x1E0DEAC20];
  v15 = MEMORY[0x1E0CB1AA8];
  v12 = &v11;
  v13 = &v12;
  __swift_project_boxed_opaque_existential_1(&v12, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  v9 = type metadata accessor for SessionTicket();
  LODWORD(v11) = bswap32(*(_DWORD *)(v0 + *(int *)(v9 + 20)));
  v14 = v7;
  v15 = v8;
  v12 = &v11;
  v13 = (unint64_t **)((char *)&v11 + 4);
  __swift_project_boxed_opaque_existential_1(&v12, v7);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  LODWORD(v11) = bswap32(*(_DWORD *)(v0 + *(int *)(v9 + 24)));
  v14 = v7;
  v15 = v8;
  v12 = &v11;
  v13 = (unint64_t **)((char *)&v11 + 4);
  __swift_project_boxed_opaque_existential_1(&v12, v7);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  __asm { BR              X11 }
}

void sub_1B0D6CB7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;

  v7 = BYTE6(v0) - v2;
  if (__OFSUB__(BYTE6(v0), v2))
  {
    __break(1u);
  }
  else
  {
    if ((v7 & 0x8000000000000000) == 0)
    {
      *(_QWORD *)(v6 - 160) = bswap64(v7);
      *(_QWORD *)(v6 - 128) = v4;
      *(_QWORD *)(v6 - 120) = MEMORY[0x1E0CB1AA8];
      *(_QWORD *)(v6 - 152) = v6 - 160;
      *(_QWORD *)(v6 - 144) = v6 - 152;
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v6 - 152), v4);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1(v6 - 152);
      ByteBuffer.writeImmutableBuffer(_:)(v1, v0);
      __asm { BR              X11 }
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  JUMPOUT(0x1B0D6D0E8);
}

void ByteBuffer.writeImmutableBuffer(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1B0D6D184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  if (BYTE6(a4) >= a3)
  {
    Data._Representation.subscript.getter();
    v5 = v4;
    Data.append(_:)();
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1B0D6D258);
}

uint64_t type metadata accessor for PeerCertificateBundle.Bundle(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for PeerCertificateBundle.Bundle);
}

void *initializeWithCopy for PeerCertificateBundle.Bundle(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for P256.Signing.PublicKey();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void specialized ByteBuffer.writeLengthPrefixedBytes<A>(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1B0D6D360()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[12];

  v2 = bswap64(BYTE6(v0));
  v3[3] = MEMORY[0x1E0DEAC20];
  v3[4] = MEMORY[0x1E0CB1AA8];
  v3[0] = &v2;
  v3[1] = v3;
  __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  specialized Data.append<A>(contentsOf:)(v1, v0);
}

void specialized Data.append<A>(contentsOf:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v3[3] = MEMORY[0x1E0CB0338];
  v3[4] = MEMORY[0x1E0CB0318];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1B0D6D4C0
     + *((int *)qword_1B0D92198 + (__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0CB0338])[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_1B0D6D4D0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v3;

  outlined copy of Data._Representation(v1, v0);
  Data._Representation.append(contentsOf:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v3);
}

void specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a1 & 0x8000000000000000) == 0)
  {
    *(_QWORD *)(swift_allocObject() + 16) = MEMORY[0x1E0DEE9D8];
    __asm { BR              X9 }
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x1B0D6DCDCLL);
}

BOOL partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(unsigned __int8 *a1)
{
  uint64_t v1;

  return *a1 == **(unsigned __int8 **)(v1 + 16);
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain();
    __asm { BR              X8 }
  }
  return 0;
}

BOOL specialized Sequence.contains(where:)(uint64_t (*a1)(char *), _BOOL8 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  int v16;
  BOOL v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v25[2];
  int v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t);
  _BOOL8 v30;
  uint64_t (*v31)(char *);
  uint64_t v32;

  v4 = v3;
  v30 = a2;
  v31 = a1;
  v32 = type metadata accessor for P256.Signing.PublicKey();
  v6 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.Signing.PublicKey?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a3 + 16);
  if (v12)
  {
    v13 = a3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v27 = *(_QWORD *)(v6 + 72);
    v28 = v8;
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v25[1] = a3;
    swift_bridgeObjectRetain();
    while (1)
    {
      v14 = v32;
      v29(v11, v13, v32);
      v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v15(v11, 0, 1, v14);
      v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v14);
      v17 = v16 != 1;
      if (v16 == 1)
        break;
      v26 = 1;
      v18 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v19 = v6;
      v20 = v28;
      v18(v28, v11, v14);
      v17 = v30;
      v21 = v31(v20);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v14);
        swift_bridgeObjectRelease();
        return v17;
      }
      v22 = v21;
      v23 = v15;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v14);
      if ((v22 & 1) != 0)
      {
        v17 = v26;
        break;
      }
      v13 += v27;
      --v12;
      v4 = 0;
      v6 = v19;
      if (!v12)
        goto LABEL_9;
    }
  }
  else
  {
    v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    swift_bridgeObjectRetain();
LABEL_9:
    v23(v11, 1, 1, v32);
    v17 = 0;
  }
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t partial apply for closure #1 in PeerCertificateBundle.wouldBeTrusted(forKeys:)()
{
  return closure #1 in PeerCertificateBundle.wouldBeTrusted(forKeys:)() & 1;
}

uint64_t closure #1 in PeerCertificateBundle.wouldBeTrusted(forKeys:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v0 = MEMORY[0x1B5E107B8]();
  v2 = v1;
  v3 = MEMORY[0x1B5E107B8]();
  v5 = v4;
  specialized static Data.== infix(_:_:)(v0, v2);
  v7 = v6;
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v2);
  return v7 & 1;
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    v1 = type metadata accessor for Date();
    result = MEMORY[0x1B5E111D8](MEMORY[0x1E0CB08B0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

void specialized static Data.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1B0D6EBF0()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1B0D6EC24 + *((int *)qword_1B0D934F8 + (v0 >> 62))))();
}

uint64_t sub_1B0D6EC34@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  closure #1 in static Data.== infix(_:_:)(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void closure #1 in static Data.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1B0D6EF00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x1B0D6F0E4);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t type metadata completion function for PeerCertificateBundle.Bundle()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for P256.Signing.PublicKey();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

void type metadata completion function for STLSHandshaker()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for HandshakeStateMachine?(319, &lazy cache variable for type metadata for HandshakeStateMachine?, (void (*)(uint64_t))type metadata accessor for HandshakeStateMachine);
  if (v0 <= 0x3F)
  {
    type metadata accessor for HandshakeStateMachine?(319, &lazy cache variable for type metadata for PartialHandshakeResult?, (void (*)(uint64_t))type metadata accessor for PartialHandshakeResult);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

void type metadata accessor for HandshakeStateMachine?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata completion function for PartialHandshakeResult()
{
  unint64_t v0;

  type metadata accessor for PartialHandshakeResult.NewEncryptionLevel?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for PartialHandshakeResult.NewEncryptionLevel?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?)
  {
    type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
  }
}

uint64_t type metadata completion function for HandshakeStateMachine.ProcessStep()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

nw_protocol *nwswifttls_create()
{
  NWConcrete_nwswifttls *v0;
  NWConcrete_nwswifttls *v1;
  nw_protocol *p_protocol;
  NWConcrete_nwswifttls *v3;

  v0 = objc_alloc_init(NWConcrete_nwswifttls);
  v1 = v0;
  if (v0)
  {
    p_protocol = &v0->protocol;
    v0->protocol.identifier = (nw_protocol_identifier *)&g_nwswifttls_identifier;
    v0->protocol.callbacks = (nw_protocol_callbacks *)&g_nwswifttls_callbacks;
    v3 = v0;
    v3->protocol.handle = v3;
    nw_frame_array_init();
    nw_frame_array_init();
    nw_frame_array_init();
    nw_frame_array_init();
  }
  else
  {
    p_protocol = 0;
  }

  return p_protocol;
}

uint64_t HandshakeState.EncryptedExtensionsState.init(originalState:encryptedExtensions:extensionBytes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int EnumCaseMultiPayload;
  uint64_t v29;
  int *v30;
  __int16 v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __int16 v45;
  char v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  uint64_t v59;
  uint8_t *v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(_QWORD);
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint8_t *v77;
  uint64_t result;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int v85;
  uint64_t v86;
  int *v87;
  int v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99[4];

  v80 = a5;
  v84 = a4;
  v97 = a1;
  v91 = type metadata accessor for SessionTicket();
  v9 = MEMORY[0x1E0C80A78](v91);
  v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v90 = (char *)&v79 - v12;
  v94 = type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
  v13 = MEMORY[0x1E0C80A78](v94);
  v92 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v79 - v15;
  v17 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  v18 = a6 + v17[6];
  *(_OWORD *)v18 = xmmword_1B0DE7E90;
  *(_QWORD *)(v18 + 16) = 0;
  v19 = a6 + v17[7];
  *(_OWORD *)v19 = xmmword_1B0DE7E90;
  v95 = v18;
  v96 = v19;
  *(_QWORD *)(v19 + 16) = 0;
  v89 = v17[8];
  *(_BYTE *)(a6 + v89) = 0;
  if (one-time initialization token for logger != -1)
    swift_once();
  v82 = v11;
  v86 = a3;
  v20 = type metadata accessor for Logger();
  v83 = __swift_project_value_buffer(v20, (uint64_t)logger);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_1B0D50000, v21, v22, "validating encrypted extensions", v23, 2u);
    MEMORY[0x1B5E11244](v23, -1, -1);
  }

  v99[3] = MEMORY[0x1E0DEE9E8];
  v24 = a2;
  v25 = *(_QWORD *)(a2 + 16);
  v87 = v17;
  if (v25)
  {
    v93 = a6;
    v85 = 0;
    v79 = v24;
    v88 = 1;
    __asm { BR              X8 }
  }
  swift_bridgeObjectRelease();
  v85 = 0;
  v88 = 1;
  swift_bridgeObjectRelease();
  v26 = type metadata accessor for HandshakeState.ServerHelloState(0);
  v27 = v97;
  outlined init with copy of PartialHandshakeResult(v97 + *(int *)(v26 + 20), (uint64_t)v16, type metadata accessor for HandshakeState.ServerHelloState.SessionData);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v29 = (uint64_t)v82;
  if (EnumCaseMultiPayload == 1)
  {
    outlined init with take of HandshakeStateMachine((uint64_t)v16, (uint64_t)v82, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
    if ((v88 & 1) != 0)
    {
      outlined init with take of HandshakeStateMachine(v29, a6 + v17[5], (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
      type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
      swift_storeEnumTagMultiPayload();
      goto LABEL_15;
    }
    v56 = Logger.logObject.getter();
    v57 = static os_log_type_t.error.getter();
    v58 = os_log_type_enabled(v56, v57);
    v59 = v86;
    if (v58)
    {
      v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v60 = 0;
      _os_log_impl(&dword_1B0D50000, v56, v57, "server provided server_certificate_type extension while resuming", v60, 2u);
      v61 = v60;
      v27 = v97;
      MEMORY[0x1B5E11244](v61, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v62 = swift_allocError();
    *(_DWORD *)v63 = 6;
    *(_BYTE *)(v63 + 4) = 1;
    swift_willThrow(v62);
    outlined consume of Data._Representation(v59, v84);
    outlined destroy of PartialHandshakeResult(v27, type metadata accessor for HandshakeState.ServerHelloState);
    v64 = (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket;
    v65 = (uint64_t)v82;
LABEL_26:
    outlined destroy of PartialHandshakeResult(v65, v64);
    v55 = 0;
LABEL_27:
    outlined consume of ByteBuffer?(*(_QWORD *)v95, *(_QWORD *)(v95 + 8));
    result = outlined consume of ByteBuffer?(*(_QWORD *)v96, *(_QWORD *)(v96 + 8));
    if (v55)
      return outlined destroy of HandshakeStateMachine?(a6 + v17[9], &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
    return result;
  }
  v30 = v17;
  v31 = *(_WORD *)v16;
  v32 = *((_WORD *)v16 + 1);
  if ((v88 & 1) != 0)
    v33 = 0;
  else
    v33 = v85;
  if (!specialized Sequence<>.contains(_:)(v33, *((_QWORD *)v16 + 1)))
  {
    swift_bridgeObjectRelease();
    v66 = Logger.logObject.getter();
    v67 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v66, v67))
    {
      v68 = (uint8_t *)swift_slowAlloc();
      v69 = swift_slowAlloc();
      v99[0] = v69;
      *(_DWORD *)v68 = 136446210;
      v70 = CertificateType.description.getter(v33);
      v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0D50000, v66, v67, "server chose non-offered certificate type %{public}s", v68, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E11244](v69, -1, -1);
      MEMORY[0x1B5E11244](v68, -1, -1);
    }

    v17 = v30;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v72 = swift_allocError();
    *(_DWORD *)v73 = 6;
    *(_BYTE *)(v73 + 4) = 1;
    swift_willThrow(v72);
    outlined consume of Data._Representation(v86, v84);
    v64 = type metadata accessor for HandshakeState.ServerHelloState;
    v65 = v97;
    goto LABEL_26;
  }
  v34 = v30[5];
  swift_bridgeObjectRelease();
  v35 = a6 + v34;
  *(_WORD *)v35 = v31;
  *(_WORD *)(v35 + 2) = v32;
  *(_BYTE *)(v35 + 4) = v33;
  type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  *(_QWORD *)(v35 + 8) = 0;
  *(_QWORD *)(v35 + 16) = 0;
  swift_storeEnumTagMultiPayload();
  v27 = v97;
LABEL_15:
  v36 = *(_QWORD *)v27;
  v37 = *(_QWORD *)(v27 + 8);
  v39 = *(_QWORD *)(v27 + 16);
  v38 = *(_QWORD *)(v27 + 24);
  v40 = *(_QWORD *)(v27 + 32);
  v41 = *(_QWORD *)(v27 + 40);
  v42 = *(_QWORD *)(v27 + 48);
  v93 = *(_QWORD *)(v27 + 56);
  v43 = v93;
  v94 = v42;
  v44 = *(_QWORD *)(v27 + 64);
  v45 = *(_WORD *)(v27 + 72);
  v46 = *(_BYTE *)(v27 + 74);
  v47 = *(_BYTE *)(v27 + 75);
  *(_QWORD *)a6 = v36;
  *(_QWORD *)(a6 + 8) = v37;
  *(_QWORD *)(a6 + 16) = v39;
  *(_QWORD *)(a6 + 24) = v38;
  *(_QWORD *)(a6 + 32) = v40;
  *(_QWORD *)(a6 + 40) = v41;
  *(_QWORD *)(a6 + 48) = v42;
  *(_QWORD *)(a6 + 56) = v43;
  *(_QWORD *)(a6 + 64) = v44;
  *(_WORD *)(a6 + 72) = v45;
  *(_BYTE *)(a6 + 74) = v46;
  *(_BYTE *)(a6 + 75) = v47;
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v27 + *(int *)(v26 + 24), a6 + v87[9], &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ByteBuffer?(v38, v40);
  outlined copy of ByteBuffer?(v94, v93);
  v48 = v86;
  v49 = v84;
  v50 = v81;
  specialized SessionKeyManager.addPreFinishedMessageToTransportHash(_:)(v86, v84, v80);
  if (v50)
  {
    outlined consume of Data._Representation(v48, v49);
    outlined destroy of PartialHandshakeResult(v27, type metadata accessor for HandshakeState.ServerHelloState);
    v51 = *(_QWORD *)(a6 + 24);
    v52 = *(_QWORD *)(a6 + 32);
    v53 = *(_QWORD *)(a6 + 48);
    v54 = *(_QWORD *)(a6 + 56);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ByteBuffer?(v51, v52);
    outlined consume of ByteBuffer?(v53, v54);
    v17 = v87;
    outlined destroy of PartialHandshakeResult(a6 + v87[5], type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
    v55 = 1;
    goto LABEL_27;
  }
  v74 = Logger.logObject.getter();
  v75 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v74, v75))
  {
    v76 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v76 = 0;
    _os_log_impl(&dword_1B0D50000, v74, v75, "encrypted extensions valid", v76, 2u);
    v77 = v76;
    v48 = v86;
    MEMORY[0x1B5E11244](v77, -1, -1);
  }
  outlined consume of Data._Representation(v48, v49);

  return outlined destroy of PartialHandshakeResult(v97, type metadata accessor for HandshakeState.ServerHelloState);
}

uint64_t specialized Set._Variant.insert(_:)(_WORD *a1, Swift::Int a2)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v13;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(unsigned __int16 *)(v9 + 2 * v8) != (unsigned __int16)a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int16 *)(v9 + 2 * v8) != (unsigned __int16)a2);
  }
  result = 0;
  LOWORD(a2) = *(_WORD *)(*(_QWORD *)(*v2 + 48) + 2 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::UInt16 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  result = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(unsigned __int16 *)(v10 + 2 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int16 *)(v10 + 2 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_WORD *)(*(_QWORD *)(v12 + 48) + 2 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt16 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ExtensionType>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v26;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_WORD *)(*(_QWORD *)(v2 + 48) + 2 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_WORD *)(*(_QWORD *)(v4 + 48) + 2 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt16 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ExtensionType>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_WORD *)(*(_QWORD *)(v2 + 48) + 2 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_WORD *)(*(_QWORD *)(v4 + 48) + 2 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t outlined retain of Extension.QUICTransportParameters(uint64_t a1)
{
  outlined copy of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t outlined retain of [Extension](uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for PeerCertificateBundle(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for P256.Signing.PublicKey();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

_QWORD *outlined release of NewSessionTicket(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[4];
  v3 = a1[5];
  outlined consume of Data._Representation(a1[1], a1[2]);
  outlined consume of Data._Representation(v2, v3);
  swift_bridgeObjectRelease();
  return a1;
}

void specialized SessionKeyManager.addPreFinishedMessageToTransportHash(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v9[2];

  v9[1] = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
  MEMORY[0x1E0C80A78](v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v6 = MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v6);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v3, (uint64_t)v9 - v7, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v8 = (char *)sub_1B0D70D88 + 4 * byte_1B0DE9971[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_1B0D70D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  outlined destroy of HandshakeStateMachine?(v2, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  if (one-time initialization token for logger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v0, v1, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v4 = (char *)&loc_1B0D70E28 + 4 * byte_1B0DE9976[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void specialized SessionKeyManager.State.HandshakeSecret.addMessageToTranscriptHash(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1B0D70FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= a3)
  {
    Data._Representation.subscript.getter();
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1B0D71244);
}

uint64_t type metadata completion function for SessionKeyManager.State.AllSecrets()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SymmetricKey();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t HandshakeState.ServerHelloState.init(originalState:serverHello:serverHelloBytes:clock:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  int64x2_t v32;
  int64x2_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  int v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t, uint64_t);
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64x2_t v75;
  __int128 v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v94 = a6;
  v81 = a5;
  v95 = a3;
  v96 = a4;
  v97 = a1;
  v89 = a7;
  v83 = type metadata accessor for SymmetricKey();
  v82 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83);
  v85 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for HandshakeState.ClientHelloState(0);
  MEMORY[0x1E0C80A78](v90);
  v84 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SharedSecret();
  v86 = *(_QWORD *)(v10 - 8);
  v87 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v80 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v88 = (char *)&v65 - v13;
  v93 = type metadata accessor for SessionTicket();
  v14 = *(_QWORD *)(v93 - 8);
  v15 = MEMORY[0x1E0C80A78](v93);
  v77 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v65 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v78 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v79 = (char *)&v65 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v26 = MEMORY[0x1E0C80A78](v25);
  MEMORY[0x1E0C80A78](v26);
  v91 = (char *)&v65 - v27;
  if (one-time initialization token for logger != -1)
    swift_once();
  v92 = v19;
  v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)logger);
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v31 = 0;
    _os_log_impl(&dword_1B0D50000, v29, v30, "validating server hello", v31, 2u);
    MEMORY[0x1B5E11244](v31, -1, -1);
  }

  v32 = *(int64x2_t *)(a2 + 24);
  v33 = *(int64x2_t *)(a2 + 8);
  if (one-time initialization token for helloRetryRequest != -1)
  {
    v76 = *(_OWORD *)(a2 + 8);
    v75 = v32;
    swift_once();
    v32 = v75;
    v33 = (int64x2_t)v76;
  }
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v33, static Random.helloRetryRequest), (int32x4_t)vceqq_s64(v32, *(int64x2_t *)((char *)&xmmword_1ED2CDA38 + 8)))), 0xFuLL))) & 1) == 0&& *(_QWORD *)(a2 + 40) == *(_QWORD *)(v97 + 80)&& (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)(a2 + 48), *(int64x2_t *)(v97 + 88)), (int32x4_t)vceqq_s64(*(int64x2_t *)(a2 + 64), *(int64x2_t *)(v97 + 104)))), 0xFuLL))) & 1) != 0&& *(_BYTE *)a2 == 3&& *(_BYTE *)(a2 + 1) == 3&& !*(_BYTE *)(a2 + 82))
  {
    v41 = *(_QWORD *)(a2 + 88);
    if (*(_QWORD *)(v41 + 16))
    {
      v42 = (_BYTE *)(v41 + 64);
      v43 = *(_QWORD *)(v41 + 16);
      while (1)
      {
        v44 = *((_QWORD *)v42 - 3);
        if (*v42 == 2 && (*((_QWORD *)v42 - 3) & 1) != 0)
          break;
        v42 += 40;
        if (!--v43)
          goto LABEL_10;
      }
      v46 = *((_QWORD *)v42 - 2);
      v47 = *((_QWORD *)v42 - 1);
      if ((unsigned __int16)*((_QWORD *)v42 - 4) == 1027)
      {
        v74 = *((_QWORD *)v42 - 4);
        v75.i64[0] = v46;
        *(_QWORD *)&v76 = v47;
        v48 = *(_QWORD *)(v97 + 120);
        v49 = *(unsigned __int16 *)(a2 + 80);
        v67 = *(unsigned __int16 *)(a2 + 80);
        if (specialized Sequence<>.contains(_:)(v49, v48))
        {
          v65 = type metadata accessor for HandshakeState.ServerHelloState(0);
          *(_WORD *)(v89 + *(int *)(v65 + 28)) = v67;
          v66 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
          v66(v91, 1, 1, v93);
          v101 = MEMORY[0x1E0DEE9E8];
          outlined copy of Extension(v74, v44, v75.u64[0], v76, 2);
          v71 = 0;
          v69 = 0;
          v68 = 0;
          v50 = (unsigned __int8 *)(v41 + 64);
          v70 = 0xF000000000000000;
          v51 = *((_QWORD *)v50 - 4);
          *(_QWORD *)&v76 = *((_QWORD *)v50 - 2);
          v73 = *((_QWORD *)v50 - 1);
          v52 = *v50;
          v72 = v52;
          v53 = (char *)&loc_1B0D718BC + dword_1B0DBDA54[v52];
          v75.i64[0] = v51;
          __asm { BR              X8 }
        }
        v54 = v67;
        outlined copy of Extension(v74, v44, v75.u64[0], v76, 2);
        outlined retain of ServerHello(a2);
        v55 = Logger.logObject.getter();
        v56 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v55, v56))
        {
          v57 = (uint8_t *)swift_slowAlloc();
          v58 = swift_slowAlloc();
          v101 = v58;
          *(_DWORD *)v57 = 136446210;
          if (v54 == 4866)
          {
            v59 = 0xD000000000000016;
            v60 = 0x80000001B0DEC0E0;
          }
          else
          {
            v98 = 30768;
            v99 = 0xE200000000000000;
            LOWORD(v100) = v54;
            lazy protocol witness table accessor for type UInt16 and conformance UInt16();
            v61._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
            String.append(_:)(v61);
            swift_bridgeObjectRelease();
            v59 = v98;
            v60 = v99;
          }
          v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, &v101);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined release of ServerHello(a2);
          outlined release of ServerHello(a2);
          _os_log_impl(&dword_1B0D50000, v55, v56, "server hello chose a cipher suite we didn't offer (%{public}s)", v57, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B5E11244](v58, -1, -1);
          MEMORY[0x1B5E11244](v57, -1, -1);
        }
        else
        {
          outlined release of ServerHello(a2);
          outlined release of ServerHello(a2);
        }

        v62 = v94;
        lazy protocol witness table accessor for type TLSError and conformance TLSError();
        v63 = swift_allocError();
        *(_DWORD *)v64 = 6;
        *(_BYTE *)(v64 + 4) = 1;
        swift_willThrow(v63);
        outlined consume of Data._Representation(v95, v96);
        v39 = v62;
        goto LABEL_13;
      }
      outlined copy of Extension(*((_QWORD *)v42 - 4), v44, v46, v47, 2);
    }
  }
LABEL_10:
  outlined release of ServerHello(a2);
  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v36 = 0;
    _os_log_impl(&dword_1B0D50000, v34, v35, "server hello invalid for QUIC", v36, 2u);
    MEMORY[0x1B5E11244](v36, -1, -1);
  }

  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  v37 = swift_allocError();
  *(_DWORD *)v38 = 5;
  *(_BYTE *)(v38 + 4) = 1;
  swift_willThrow(v37);
  outlined consume of Data._Representation(v95, v96);
  v39 = v94;
LABEL_13:
  __swift_destroy_boxed_opaque_existential_1(v39);
  return outlined destroy of PartialHandshakeResult(v97, type metadata accessor for HandshakeState.ClientHelloState);
}

void sub_1B0D726B8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t, uint64_t, _QWORD);
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;

  if (BYTE6(v1) < *(uint64_t *)(v4 - 408))
  {
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(v4 - 400);
    v6 = Data._Representation.subscript.getter();
    v7 = v1;
    v8 = v6;
    v10 = v9;
    v11 = *(_QWORD *)(v4 - 384);
    *(_QWORD *)(v4 - 392) = v7;
    outlined consume of Extension.KeyShare.KeyShareEntry?(v11, v5, v7);
    v12 = *(_QWORD *)(v4 - 224);
    (*(void (**)(uint64_t, unint64_t, _QWORD, uint64_t))(v0 + 24))(v8, v10, *(_QWORD *)(v4 - 184), v0);
    if (!v12)
    {
      outlined consume of Data._Representation(v8, v10);
      v13 = *(int *)(*(_QWORD *)(v4 - 432) + 32);
      *(_WORD *)(*(_QWORD *)(v4 - 208) + v13) = v11;
      outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(*(_QWORD *)(v4 - 192), v3, &demangling cache variable for type metadata for SessionTicket?);
      v14 = *(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v2 + 48);
      if (v14(v3, 1, *(_QWORD *)(v4 - 176)) == 1)
      {
        outlined destroy of HandshakeStateMachine?(v3, &demangling cache variable for type metadata for SessionTicket?);
        v15 = *(_QWORD *)(v4 - 208);
        v16 = v15 + *(int *)(*(_QWORD *)(v4 - 432) + 20);
        v17 = *(_WORD *)(v15 + v13);
        v18 = *(_QWORD *)(*(_QWORD *)(v4 - 144) + 128);
        *(_WORD *)v16 = *(_DWORD *)(v4 - 412);
        *(_WORD *)(v16 + 2) = v17;
        *(_QWORD *)(v16 + 8) = v18;
        type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
        swift_storeEnumTagMultiPayload();
        swift_bridgeObjectRetain();
      }
      else
      {
        v19 = *(_QWORD *)(v4 - 312);
        outlined init with take of HandshakeStateMachine(v3, v19, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
        outlined init with take of HandshakeStateMachine(v19, *(_QWORD *)(v4 - 208) + *(int *)(*(_QWORD *)(v4 - 432) + 20), (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
        type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
        swift_storeEnumTagMultiPayload();
      }
      v20 = *(_QWORD *)(v4 - 296);
      outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(*(_QWORD *)(v4 - 192), v20, &demangling cache variable for type metadata for SessionTicket?);
      v21 = v14(v20, 1, *(_QWORD *)(v4 - 176));
      outlined destroy of HandshakeStateMachine?(v20, &demangling cache variable for type metadata for SessionTicket?);
      outlined init with copy of PartialHandshakeResult(*(_QWORD *)(v4 - 144), *(_QWORD *)(v4 - 256), type metadata accessor for HandshakeState.ClientHelloState);
      if (v21 == 1)
      {
        v22 = *(_QWORD *)(v4 - 256);
        v23 = *(_QWORD *)(v4 - 304);
        outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v22 + *(int *)(*(_QWORD *)(v4 - 200) + 40), v23, &demangling cache variable for type metadata for SessionTicket?);
        outlined destroy of PartialHandshakeResult(v22, type metadata accessor for HandshakeState.ClientHelloState);
        *(_DWORD *)(v4 - 176) = ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v14)(v23, 1, *(_QWORD *)(v4 - 176)) != 1;
        outlined destroy of HandshakeStateMachine?(v23, &demangling cache variable for type metadata for SessionTicket?);
      }
      else
      {
        outlined destroy of PartialHandshakeResult(*(_QWORD *)(v4 - 256), type metadata accessor for HandshakeState.ClientHelloState);
        *(_DWORD *)(v4 - 176) = 0;
      }
      v24 = *(uint64_t **)(v4 - 144);
      v25 = *v24;
      v26 = v24[1];
      v28 = v24[2];
      v27 = v24[3];
      *(_QWORD *)(v4 - 296) = v27;
      v29 = v24[4];
      v30 = v24[5];
      v31 = v24[6];
      v32 = v24[7];
      *(_QWORD *)(v4 - 184) = v31;
      *(_QWORD *)(v4 - 224) = v32;
      v33 = v24[8];
      *(_QWORD *)(v4 - 256) = v33;
      v34 = *((_WORD *)v24 + 36);
      v35 = *((_BYTE *)v24 + 74);
      v36 = *((_BYTE *)v24 + 75);
      v37 = *(_QWORD *)(v4 - 208);
      *(_QWORD *)v37 = v25;
      *(_QWORD *)(v37 + 8) = v26;
      *(_QWORD *)(v37 + 16) = v28;
      *(_QWORD *)(v37 + 24) = v27;
      *(_QWORD *)(v37 + 32) = v29;
      *(_QWORD *)(v37 + 40) = v30;
      *(_QWORD *)(v37 + 48) = v31;
      *(_QWORD *)(v37 + 56) = v32;
      *(_QWORD *)(v37 + 64) = v33;
      *(_WORD *)(v37 + 72) = v34;
      *(_BYTE *)(v37 + 74) = v35;
      *(_BYTE *)(v37 + 75) = v36;
      v38 = v37 + *(int *)(*(_QWORD *)(v4 - 432) + 24);
      outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?((uint64_t)v24 + *(int *)(*(_QWORD *)(v4 - 200) + 36), v38, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v4 - 240) + 16))(*(_QWORD *)(v4 - 288), *(_QWORD *)(v4 - 216), *(_QWORD *)(v4 - 232));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of ByteBuffer?(*(_QWORD *)(v4 - 296), v29);
      outlined copy of ByteBuffer?(*(_QWORD *)(v4 - 184), *(_QWORD *)(v4 - 224));
      lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SharedSecret and conformance SharedSecret, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9388], MEMORY[0x1E0CA9370]);
      v39 = *(_QWORD *)(v4 - 248);
      SymmetricKey.init<A>(data:)();
      v40 = *(_QWORD *)(v4 - 160);
      v41 = *(_QWORD *)(v4 - 152);
      v42 = *(_QWORD *)(v4 - 280);
      v43 = *(_DWORD *)(v4 - 176);
      *(_QWORD *)(v4 - 176) = v38;
      specialized SessionKeyManager.postServerHello(ecdheSecret:serverHelloBytes:resumptionFailed:)(v39, v40, v41, v42, v43);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 - 272) + 8))(*(_QWORD *)(v4 - 248), *(_QWORD *)(v4 - 264));
      v44 = Logger.logObject.getter();
      v45 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v44, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v46 = 0;
        _os_log_impl(&dword_1B0D50000, v44, v45, "server hello valid", v46, 2u);
        MEMORY[0x1B5E11244](v46, -1, -1);
      }
      outlined consume of Data._Representation(*(_QWORD *)(v4 - 160), *(_QWORD *)(v4 - 152));

      v47 = *(_QWORD *)(v4 - 384);
      v48 = *(_QWORD *)(v4 - 400);
      v49 = *(_QWORD *)(v4 - 392);
      outlined consume of Extension.KeyShare.KeyShareEntry?(v47, v48, v49);
      outlined consume of Extension.KeyShare.KeyShareEntry?(v47, v48, v49);
      __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v4 - 168));
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 - 240) + 8))(*(_QWORD *)(v4 - 216), *(_QWORD *)(v4 - 232));
      JUMPOUT(0x1B0D72AF4);
    }
    outlined consume of Data._Representation(v8, v10);
    outlined consume of Data._Representation(*(_QWORD *)(v4 - 160), *(_QWORD *)(v4 - 152));
    outlined consume of Extension.KeyShare.KeyShareEntry?(v11, *(_QWORD *)(v4 - 400), *(_QWORD *)(v4 - 392));
  }
  JUMPOUT(0x1B0D72AE4);
}

void sub_1B0D7277C()
{
  unint64_t v0;
  uint64_t v1;

  outlined copy of Data._Representation(*(_QWORD *)(v1 - 400), v0);
  JUMPOUT(0x1B0D727A0);
}

void sub_1B0D72924()
{
  NSObject *v0;
  uint8_t *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = ExtensionType.description.getter(10);
  v8 = v7;
  *(_QWORD *)(v5 - 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 96, v5 - 88, v1 + 4, v1 + 12);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(v5 - 352);
  v10 = *(_QWORD *)(v5 - 360);
  v11 = *(_QWORD *)(v5 - 336);
  v12 = *(_QWORD *)(v5 - 376);
  outlined consume of Extension(v9, v10, v11, v4, v12);
  outlined consume of Extension(v9, v10, v11, v4, v12);
  _os_log_impl(&dword_1B0D50000, v0, v2, "server offered duplicate extension of type %{public}s on server hello", v1, 0xCu);
  swift_arrayDestroy(v3, 1, MEMORY[0x1E0DEE9B8] + 8);
  MEMORY[0x1B5E11244](v3, -1, -1);
  MEMORY[0x1B5E11244](v1, -1, -1);

  v13 = *(_QWORD *)(v5 - 408);
  v14 = *(_QWORD *)(v5 - 400);
  v15 = lazy protocol witness table accessor for type TLSError and conformance TLSError();
  swift_allocError(&type metadata for TLSError, v15, 0, 0);
  *(_DWORD *)v16 = 5;
  *(_BYTE *)(v16 + 4) = 1;
  swift_willThrow();
  outlined consume of Data._Representation(*(_QWORD *)(v5 - 160), *(_QWORD *)(v5 - 152));
  outlined consume of Extension(v9, v10, v11, v4, v12);
  outlined consume of Extension.KeyShare.KeyShareEntry?(*(_QWORD *)(v5 - 384), v14, *(_QWORD *)(v5 - 392), v13);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v5 - 168));
  outlined destroy of HandshakeStateMachine?(*(_QWORD *)(v5 - 192), &demangling cache variable for type metadata for SessionTicket?);
  JUMPOUT(0x1B0D716FCLL);
}

void sub_1B0D7292C()
{
  NSObject *v0;
  uint8_t *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = ExtensionType.description.getter(43);
  v8 = v7;
  *(_QWORD *)(v5 - 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 96, v5 - 88, v1 + 4, v1 + 12);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(v5 - 352);
  v10 = *(_QWORD *)(v5 - 360);
  v11 = *(_QWORD *)(v5 - 336);
  v12 = *(_QWORD *)(v5 - 376);
  outlined consume of Extension(v9, v10, v11, v4, v12);
  outlined consume of Extension(v9, v10, v11, v4, v12);
  _os_log_impl(&dword_1B0D50000, v0, v2, "server offered duplicate extension of type %{public}s on server hello", v1, 0xCu);
  swift_arrayDestroy(v3, 1, MEMORY[0x1E0DEE9B8] + 8);
  MEMORY[0x1B5E11244](v3, -1, -1);
  MEMORY[0x1B5E11244](v1, -1, -1);

  v13 = *(_QWORD *)(v5 - 408);
  v14 = *(_QWORD *)(v5 - 400);
  v15 = lazy protocol witness table accessor for type TLSError and conformance TLSError();
  swift_allocError(&type metadata for TLSError, v15, 0, 0);
  *(_DWORD *)v16 = 5;
  *(_BYTE *)(v16 + 4) = 1;
  swift_willThrow();
  outlined consume of Data._Representation(*(_QWORD *)(v5 - 160), *(_QWORD *)(v5 - 152));
  outlined consume of Extension(v9, v10, v11, v4, v12);
  outlined consume of Extension.KeyShare.KeyShareEntry?(*(_QWORD *)(v5 - 384), v14, *(_QWORD *)(v5 - 392), v13);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v5 - 168));
  outlined destroy of HandshakeStateMachine?(*(_QWORD *)(v5 - 192), &demangling cache variable for type metadata for SessionTicket?);
  JUMPOUT(0x1B0D716FCLL);
}

void sub_1B0D72934()
{
  NSObject *v0;
  uint8_t *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = ExtensionType.description.getter(51);
  v8 = v7;
  *(_QWORD *)(v5 - 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 96, v5 - 88, v1 + 4, v1 + 12);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(v5 - 352);
  v10 = *(_QWORD *)(v5 - 360);
  v11 = *(_QWORD *)(v5 - 336);
  v12 = *(_QWORD *)(v5 - 376);
  outlined consume of Extension(v9, v10, v11, v4, v12);
  outlined consume of Extension(v9, v10, v11, v4, v12);
  _os_log_impl(&dword_1B0D50000, v0, v2, "server offered duplicate extension of type %{public}s on server hello", v1, 0xCu);
  swift_arrayDestroy(v3, 1, MEMORY[0x1E0DEE9B8] + 8);
  MEMORY[0x1B5E11244](v3, -1, -1);
  MEMORY[0x1B5E11244](v1, -1, -1);

  v13 = *(_QWORD *)(v5 - 408);
  v14 = *(_QWORD *)(v5 - 400);
  v15 = lazy protocol witness table accessor for type TLSError and conformance TLSError();
  swift_allocError(&type metadata for TLSError, v15, 0, 0);
  *(_DWORD *)v16 = 5;
  *(_BYTE *)(v16 + 4) = 1;
  swift_willThrow();
  outlined consume of Data._Representation(*(_QWORD *)(v5 - 160), *(_QWORD *)(v5 - 152));
  outlined consume of Extension(v9, v10, v11, v4, v12);
  outlined consume of Extension.KeyShare.KeyShareEntry?(*(_QWORD *)(v5 - 384), v14, *(_QWORD *)(v5 - 392), v13);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v5 - 168));
  outlined destroy of HandshakeStateMachine?(*(_QWORD *)(v5 - 192), &demangling cache variable for type metadata for SessionTicket?);
  JUMPOUT(0x1B0D716FCLL);
}

void sub_1B0D7293C()
{
  NSObject *v0;
  uint8_t *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = ExtensionType.description.getter(42);
  v8 = v7;
  *(_QWORD *)(v5 - 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 96, v5 - 88, v1 + 4, v1 + 12);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(v5 - 352);
  v10 = *(_QWORD *)(v5 - 360);
  v11 = *(_QWORD *)(v5 - 336);
  v12 = *(_QWORD *)(v5 - 376);
  outlined consume of Extension(v9, v10, v11, v4, v12);
  outlined consume of Extension(v9, v10, v11, v4, v12);
  _os_log_impl(&dword_1B0D50000, v0, v2, "server offered duplicate extension of type %{public}s on server hello", v1, 0xCu);
  swift_arrayDestroy(v3, 1, MEMORY[0x1E0DEE9B8] + 8);
  MEMORY[0x1B5E11244](v3, -1, -1);
  MEMORY[0x1B5E11244](v1, -1, -1);

  v13 = *(_QWORD *)(v5 - 408);
  v14 = *(_QWORD *)(v5 - 400);
  v15 = lazy protocol witness table accessor for type TLSError and conformance TLSError();
  swift_allocError(&type metadata for TLSError, v15, 0, 0);
  *(_DWORD *)v16 = 5;
  *(_BYTE *)(v16 + 4) = 1;
  swift_willThrow();
  outlined consume of Data._Representation(*(_QWORD *)(v5 - 160), *(_QWORD *)(v5 - 152));
  outlined consume of Extension(v9, v10, v11, v4, v12);
  outlined consume of Extension.KeyShare.KeyShareEntry?(*(_QWORD *)(v5 - 384), v14, *(_QWORD *)(v5 - 392), v13);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v5 - 168));
  outlined destroy of HandshakeStateMachine?(*(_QWORD *)(v5 - 192), &demangling cache variable for type metadata for SessionTicket?);
  JUMPOUT(0x1B0D716FCLL);
}

void sub_1B0D72944()
{
  NSObject *v0;
  uint8_t *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = ExtensionType.description.getter(13);
  v8 = v7;
  *(_QWORD *)(v5 - 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 96, v5 - 88, v1 + 4, v1 + 12);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(v5 - 352);
  v10 = *(_QWORD *)(v5 - 360);
  v11 = *(_QWORD *)(v5 - 336);
  v12 = *(_QWORD *)(v5 - 376);
  outlined consume of Extension(v9, v10, v11, v4, v12);
  outlined consume of Extension(v9, v10, v11, v4, v12);
  _os_log_impl(&dword_1B0D50000, v0, v2, "server offered duplicate extension of type %{public}s on server hello", v1, 0xCu);
  swift_arrayDestroy(v3, 1, MEMORY[0x1E0DEE9B8] + 8);
  MEMORY[0x1B5E11244](v3, -1, -1);
  MEMORY[0x1B5E11244](v1, -1, -1);

  v13 = *(_QWORD *)(v5 - 408);
  v14 = *(_QWORD *)(v5 - 400);
  v15 = lazy protocol witness table accessor for type TLSError and conformance TLSError();
  swift_allocError(&type metadata for TLSError, v15, 0, 0);
  *(_DWORD *)v16 = 5;
  *(_BYTE *)(v16 + 4) = 1;
  swift_willThrow();
  outlined consume of Data._Representation(*(_QWORD *)(v5 - 160), *(_QWORD *)(v5 - 152));
  outlined consume of Extension(v9, v10, v11, v4, v12);
  outlined consume of Extension.KeyShare.KeyShareEntry?(*(_QWORD *)(v5 - 384), v14, *(_QWORD *)(v5 - 392), v13);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v5 - 168));
  outlined destroy of HandshakeStateMachine?(*(_QWORD *)(v5 - 192), &demangling cache variable for type metadata for SessionTicket?);
  JUMPOUT(0x1B0D716FCLL);
}

void sub_1B0D7294C()
{
  NSObject *v0;
  uint8_t *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = ExtensionType.description.getter(20);
  v8 = v7;
  *(_QWORD *)(v5 - 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 96, v5 - 88, v1 + 4, v1 + 12);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(v5 - 352);
  v10 = *(_QWORD *)(v5 - 360);
  v11 = *(_QWORD *)(v5 - 336);
  v12 = *(_QWORD *)(v5 - 376);
  outlined consume of Extension(v9, v10, v11, v4, v12);
  outlined consume of Extension(v9, v10, v11, v4, v12);
  _os_log_impl(&dword_1B0D50000, v0, v2, "server offered duplicate extension of type %{public}s on server hello", v1, 0xCu);
  swift_arrayDestroy(v3, 1, MEMORY[0x1E0DEE9B8] + 8);
  MEMORY[0x1B5E11244](v3, -1, -1);
  MEMORY[0x1B5E11244](v1, -1, -1);

  v13 = *(_QWORD *)(v5 - 408);
  v14 = *(_QWORD *)(v5 - 400);
  v15 = lazy protocol witness table accessor for type TLSError and conformance TLSError();
  swift_allocError(&type metadata for TLSError, v15, 0, 0);
  *(_DWORD *)v16 = 5;
  *(_BYTE *)(v16 + 4) = 1;
  swift_willThrow();
  outlined consume of Data._Representation(*(_QWORD *)(v5 - 160), *(_QWORD *)(v5 - 152));
  outlined consume of Extension(v9, v10, v11, v4, v12);
  outlined consume of Extension.KeyShare.KeyShareEntry?(*(_QWORD *)(v5 - 384), v14, *(_QWORD *)(v5 - 392), v13);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v5 - 168));
  outlined destroy of HandshakeStateMachine?(*(_QWORD *)(v5 - 192), &demangling cache variable for type metadata for SessionTicket?);
  JUMPOUT(0x1B0D716FCLL);
}

void sub_1B0D72954()
{
  NSObject *v0;
  uint8_t *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = ExtensionType.description.getter(57);
  v8 = v7;
  *(_QWORD *)(v5 - 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 96, v5 - 88, v1 + 4, v1 + 12);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(v5 - 352);
  v10 = *(_QWORD *)(v5 - 360);
  v11 = *(_QWORD *)(v5 - 336);
  v12 = *(_QWORD *)(v5 - 376);
  outlined consume of Extension(v9, v10, v11, v4, v12);
  outlined consume of Extension(v9, v10, v11, v4, v12);
  _os_log_impl(&dword_1B0D50000, v0, v2, "server offered duplicate extension of type %{public}s on server hello", v1, 0xCu);
  swift_arrayDestroy(v3, 1, MEMORY[0x1E0DEE9B8] + 8);
  MEMORY[0x1B5E11244](v3, -1, -1);
  MEMORY[0x1B5E11244](v1, -1, -1);

  v13 = *(_QWORD *)(v5 - 408);
  v14 = *(_QWORD *)(v5 - 400);
  v15 = lazy protocol witness table accessor for type TLSError and conformance TLSError();
  swift_allocError(&type metadata for TLSError, v15, 0, 0);
  *(_DWORD *)v16 = 5;
  *(_BYTE *)(v16 + 4) = 1;
  swift_willThrow();
  outlined consume of Data._Representation(*(_QWORD *)(v5 - 160), *(_QWORD *)(v5 - 152));
  outlined consume of Extension(v9, v10, v11, v4, v12);
  outlined consume of Extension.KeyShare.KeyShareEntry?(*(_QWORD *)(v5 - 384), v14, *(_QWORD *)(v5 - 392), v13);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v5 - 168));
  outlined destroy of HandshakeStateMachine?(*(_QWORD *)(v5 - 192), &demangling cache variable for type metadata for SessionTicket?);
  JUMPOUT(0x1B0D716FCLL);
}

void sub_1B0D7295C()
{
  NSObject *v0;
  uint8_t *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = ExtensionType.description.getter(45);
  v8 = v7;
  *(_QWORD *)(v5 - 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 96, v5 - 88, v1 + 4, v1 + 12);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(v5 - 352);
  v10 = *(_QWORD *)(v5 - 360);
  v11 = *(_QWORD *)(v5 - 336);
  v12 = *(_QWORD *)(v5 - 376);
  outlined consume of Extension(v9, v10, v11, v4, v12);
  outlined consume of Extension(v9, v10, v11, v4, v12);
  _os_log_impl(&dword_1B0D50000, v0, v2, "server offered duplicate extension of type %{public}s on server hello", v1, 0xCu);
  swift_arrayDestroy(v3, 1, MEMORY[0x1E0DEE9B8] + 8);
  MEMORY[0x1B5E11244](v3, -1, -1);
  MEMORY[0x1B5E11244](v1, -1, -1);

  v13 = *(_QWORD *)(v5 - 408);
  v14 = *(_QWORD *)(v5 - 400);
  v15 = lazy protocol witness table accessor for type TLSError and conformance TLSError();
  swift_allocError(&type metadata for TLSError, v15, 0, 0);
  *(_DWORD *)v16 = 5;
  *(_BYTE *)(v16 + 4) = 1;
  swift_willThrow();
  outlined consume of Data._Representation(*(_QWORD *)(v5 - 160), *(_QWORD *)(v5 - 152));
  outlined consume of Extension(v9, v10, v11, v4, v12);
  outlined consume of Extension.KeyShare.KeyShareEntry?(*(_QWORD *)(v5 - 384), v14, *(_QWORD *)(v5 - 392), v13);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v5 - 168));
  outlined destroy of HandshakeStateMachine?(*(_QWORD *)(v5 - 192), &demangling cache variable for type metadata for SessionTicket?);
  JUMPOUT(0x1B0D716FCLL);
}

void sub_1B0D72964()
{
  NSObject *v0;
  uint8_t *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = ExtensionType.description.getter(41);
  v8 = v7;
  *(_QWORD *)(v5 - 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 96, v5 - 88, v1 + 4, v1 + 12);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(v5 - 352);
  v10 = *(_QWORD *)(v5 - 360);
  v11 = *(_QWORD *)(v5 - 336);
  v12 = *(_QWORD *)(v5 - 376);
  outlined consume of Extension(v9, v10, v11, v4, v12);
  outlined consume of Extension(v9, v10, v11, v4, v12);
  _os_log_impl(&dword_1B0D50000, v0, v2, "server offered duplicate extension of type %{public}s on server hello", v1, 0xCu);
  swift_arrayDestroy(v3, 1, MEMORY[0x1E0DEE9B8] + 8);
  MEMORY[0x1B5E11244](v3, -1, -1);
  MEMORY[0x1B5E11244](v1, -1, -1);

  v13 = *(_QWORD *)(v5 - 408);
  v14 = *(_QWORD *)(v5 - 400);
  v15 = lazy protocol witness table accessor for type TLSError and conformance TLSError();
  swift_allocError(&type metadata for TLSError, v15, 0, 0);
  *(_DWORD *)v16 = 5;
  *(_BYTE *)(v16 + 4) = 1;
  swift_willThrow();
  outlined consume of Data._Representation(*(_QWORD *)(v5 - 160), *(_QWORD *)(v5 - 152));
  outlined consume of Extension(v9, v10, v11, v4, v12);
  outlined consume of Extension.KeyShare.KeyShareEntry?(*(_QWORD *)(v5 - 384), v14, *(_QWORD *)(v5 - 392), v13);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v5 - 168));
  outlined destroy of HandshakeStateMachine?(*(_QWORD *)(v5 - 192), &demangling cache variable for type metadata for SessionTicket?);
  JUMPOUT(0x1B0D716FCLL);
}

void sub_1B0D7296C()
{
  NSObject *v0;
  uint8_t *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = ExtensionType.description.getter(58);
  v8 = v7;
  *(_QWORD *)(v5 - 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 96, v5 - 88, v1 + 4, v1 + 12);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(v5 - 352);
  v10 = *(_QWORD *)(v5 - 360);
  v11 = *(_QWORD *)(v5 - 336);
  v12 = *(_QWORD *)(v5 - 376);
  outlined consume of Extension(v9, v10, v11, v4, v12);
  outlined consume of Extension(v9, v10, v11, v4, v12);
  _os_log_impl(&dword_1B0D50000, v0, v2, "server offered duplicate extension of type %{public}s on server hello", v1, 0xCu);
  swift_arrayDestroy(v3, 1, MEMORY[0x1E0DEE9B8] + 8);
  MEMORY[0x1B5E11244](v3, -1, -1);
  MEMORY[0x1B5E11244](v1, -1, -1);

  v13 = *(_QWORD *)(v5 - 408);
  v14 = *(_QWORD *)(v5 - 400);
  v15 = lazy protocol witness table accessor for type TLSError and conformance TLSError();
  swift_allocError(&type metadata for TLSError, v15, 0, 0);
  *(_DWORD *)v16 = 5;
  *(_BYTE *)(v16 + 4) = 1;
  swift_willThrow();
  outlined consume of Data._Representation(*(_QWORD *)(v5 - 160), *(_QWORD *)(v5 - 152));
  outlined consume of Extension(v9, v10, v11, v4, v12);
  outlined consume of Extension.KeyShare.KeyShareEntry?(*(_QWORD *)(v5 - 384), v14, *(_QWORD *)(v5 - 392), v13);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v5 - 168));
  outlined destroy of HandshakeStateMachine?(*(_QWORD *)(v5 - 192), &demangling cache variable for type metadata for SessionTicket?);
  JUMPOUT(0x1B0D716FCLL);
}

void sub_1B0D72974()
{
  JUMPOUT(0x1B0D72980);
}

uint64_t destroy for SessionKeyManager(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  result = type metadata accessor for SymmetricKey();
  v7 = result;
  v8 = *(_QWORD *)(result - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v5 + v9;
  v11 = (v5 + v9) & ~v9;
  v12 = *(_QWORD *)(v8 + 64);
  v13 = v12 + v9;
  v14 = ((v12 + v9 + ((v12 + v9 + v11) & ~v9)) & ~v9) + v12;
  v15 = ((v14 + v9) & ~v9) + v12;
  if (v14 <= v15)
    v14 = ((v14 + v9) & ~v9) + v12;
  v16 = ((v13 + ((v15 + v9) & ~v9)) & ~v9) + v12;
  if (v16 > v14)
    v14 = v16;
  v17 = ((v13 + ((v13 + (v13 & ~v9)) & ~v9)) & ~v9) + v12;
  if (v17 > v14)
    v14 = v17;
  if (*(unsigned __int8 *)(a1 + v14) >= 4u)
  {
    if (v14 <= 3)
      v18 = v14;
    else
      v18 = 4;
    __asm { BR              X14 }
  }
  v19 = ~v9;
  switch(*(_BYTE *)(a1 + v14))
  {
    case 0:
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
      a1 = (v10 + a1) & v19;
      goto LABEL_14;
    case 1:
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
      v20 = (v10 + a1) & v19;
      v24 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
      v24(v20, v7);
      goto LABEL_18;
    case 2:
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
      v21 = (v10 + a1) & v19;
      v24 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
      v24(v21, v7);
      v22 = (v13 + v21) & v19;
      v24(v22, v7);
      a1 = (v13 + v22) & v19;
      v24(a1, v7);
      goto LABEL_17;
    case 3:
LABEL_14:
      v24 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
      v24(a1, v7);
LABEL_17:
      v20 = (v13 + a1) & v19;
      v24(v20, v7);
LABEL_18:
      v23 = (v13 + v20) & v19;
      v24(v23, v7);
      result = ((uint64_t (*)(uint64_t, uint64_t))v24)((v13 + v23) & v19, v7);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for SessionKeyManager.State.HandshakeSecret(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v12)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = type metadata accessor for SymmetricKey();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + a1 + v7) & ~v7;
  v12 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v12(v8, v5);
  v9 = *(_QWORD *)(v6 + 64) + v7;
  v10 = (v9 + v8) & ~v7;
  v12(v10, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v12)((v9 + v10) & ~v7, v5);
}

uint64_t destroy for SessionKeyManager.State.AllSecrets(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = type metadata accessor for SymmetricKey();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);
  v6(a1 + a2[9], v4);
  v6(a1 + a2[10], v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + a2[11], v4);
}

uint64_t outlined consume of Extension.KeyShare.KeyShareEntry?(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 60 != 15)
    return outlined consume of Data._Representation(a2, a3);
  return result;
}

uint64_t destroy for SessionKeyManager.State.MasterSecret(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v15)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = type metadata accessor for SymmetricKey();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + a1 + v7) & ~v7;
  v15 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v15(v8, v5);
  v9 = *(_QWORD *)(v6 + 64) + v7;
  v10 = (v9 + v8) & ~v7;
  v15(v10, v5);
  v11 = (v9 + v10) & ~v7;
  v15(v11, v5);
  v12 = (v9 + v11) & ~v7;
  v15(v12, v5);
  v13 = (v9 + v12) & ~v7;
  v15(v13, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v15)((v9 + v13) & ~v7, v5);
}

uint64_t destroy for SessionKeyManager.State.EarlySecret(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v13)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = type metadata accessor for SymmetricKey();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + a1 + v7) & ~v7;
  v13 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v13(v8, v5);
  v9 = *(_QWORD *)(v6 + 64) + v7;
  v10 = (v9 + v8) & ~v7;
  v13(v10, v5);
  v11 = (v9 + v10) & ~v7;
  v13(v11, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v13)((v9 + v11) & ~v7, v5);
}

BOOL specialized Sequence<>.contains(_:)(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = result;
  if (*(_WORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 17; ; ++i)
  {
    v5 = i - 15;
    if (__OFADD__(i - 16, 1))
      break;
    v6 = *(unsigned __int16 *)(a2 + 2 * i);
    result = v6 == v3;
    if (v6 == v3 || v5 == v2)
      return result;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = result;
  if (*(_BYTE *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 33; ; ++i)
  {
    v5 = i - 31;
    if (__OFADD__(i - 32, 1))
      break;
    v6 = *(unsigned __int8 *)(a2 + i);
    result = v6 == v3;
    if (v6 == v3 || v5 == v2)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t outlined copy of Extension.KeyShare.KeyShareEntry?(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 60 != 15)
    return outlined copy of Data._Representation(a2, a3);
  return result;
}

uint64_t specialized SessionKeyManager.postServerHello(ecdheSecret:serverHelloBytes:resumptionFailed:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  int EnumCaseMultiPayload;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v33 = a3;
  v6 = v5;
  v34 = a5;
  v35 = a4;
  v32 = a2;
  v30 = a1;
  v31 = type metadata accessor for SymmetricKey();
  v36 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v30 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v30 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v30 - v22;
  v37 = v6;
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v6, (uint64_t)&v30 - v22, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) < 3)
  {
    outlined destroy of HandshakeStateMachine?((uint64_t)v23, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    goto LABEL_5;
  }
  v25 = v36;
  if (EnumCaseMultiPayload)
  {
LABEL_5:
    if (one-time initialization token for logger != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)logger);
    outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v37, (uint64_t)v18, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    v29 = (char *)&loc_1B0D73864 + 4 * byte_1B0DE996C[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  outlined init with take of P256.Signing.PublicKey?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v8, v30, v31);
  v26 = v33;
  outlined copy of Data._Representation(v32, v33);
  specialized SessionKeyManager.State.HandshakeSecret.init(earlySecret:ecdheSecret:serverHelloBytes:resumptionFailed:)((uint64_t)v12, (uint64_t)v8, v26, v35, v34 & 1, (uint64_t)v21);
  outlined destroy of HandshakeStateMachine?((uint64_t)v14, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
  swift_storeEnumTagMultiPayload();
  return outlined assign with take of HandshakeStateMachine?((uint64_t)v21, v37, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
}

void specialized SessionKeyManager.State.HandshakeSecret.init(earlySecret:ecdheSecret:serverHelloBytes:resumptionFailed:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, int a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  LODWORD(v53) = a5;
  v67 = a3;
  v68 = a4;
  v69 = a6;
  v71 = *MEMORY[0x1E0C80C00];
  v8 = type metadata accessor for SHA384();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v57 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for SHA384Digest();
  v63 = *(_QWORD *)(v59 - 8);
  v11 = MEMORY[0x1E0C80A78](v59);
  v52 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v62 = (char *)&v50 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  v60 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v65 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v50 - v17;
  v19 = type metadata accessor for SymmetricKey();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19);
  v51 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v55 = (char *)&v50 - v24;
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v50 - v25;
  v27 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret)
               + 36);
  v66 = a1;
  v28 = a1 + v27;
  v56 = v20;
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v30 = v8;
  v58 = v19;
  v31 = v19;
  v32 = v9;
  v33 = v29(v26, v28, v31);
  v64 = a2;
  v61 = v14;
  v54 = v26;
  if ((v53 & 1) != 0)
  {
    v53 = lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9328], MEMORY[0x1E0CA9320]);
    v34 = v59;
    v35 = dispatch thunk of static Digest.byteCount.getter();
    v36 = specialized Array.init(repeating:count:)(0, v35);
    v70 = v36;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x1E0CB1B08]);
    v37 = v55;
    SymmetricKey.init<A>(data:)();
    v70 = v36;
    lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9958], MEMORY[0x1E0CA9950]);
    lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x1E0CB1B00]);
    static HKDF.extract<A>(inputKeyMaterial:salt:)();
    swift_bridgeObjectRelease();
    v38 = v57;
    dispatch thunk of HashFunction.init()();
    v39 = (uint64_t)v62;
    dispatch thunk of HashFunction.finalize()();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v38, v30);
    v40 = dispatch thunk of static Digest.byteCount.getter();
    v41 = v51;
    specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)((uint64_t)v18, 0x64657669726564, 0xE700000000000000, v39, v40);
    v42 = v39;
    v43 = v61;
    v44 = v34;
    a2 = v64;
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v42, v44);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v18, v43);
    v45 = v56;
    v46 = *(void (**)(char *, uint64_t))(v56 + 8);
    v47 = v37;
    v48 = v54;
    v49 = v58;
    v46(v47, v58);
    v46(v48, v49);
    v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v45 + 32))(v48, v41, v49);
  }
  MEMORY[0x1E0C80A78](v33);
  *(&v50 - 2) = a2;
  SymmetricKey.withUnsafeBytes<A>(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v69, v66, v30);
  __asm { BR              X10 }
}

void sub_1B0D73DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;

  if (BYTE6(a4) >= *(uint64_t *)(v6 - 136))
  {
    *(_QWORD *)(v6 - 136) = v4;
    Data._Representation.subscript.getter();
    v8 = (char *)&loc_1B0D73E40 + *((int *)qword_1B0DC01A8 + (v7 >> 62));
    *(_QWORD *)(v6 - 272) = v5;
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1B0D74224);
}

uint64_t outlined release of ServerHello(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

void readEntireBuffer #1 (_:) in NewSessionTicket.init(bytes:)(uint64_t a1)
{
  __asm { BR              X11 }
}

void sub_1B0D7471C(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (__OFSUB__(BYTE6(a2), a1))
  {
    __break(1u);
  }
  else if (!__OFADD__(a1, BYTE6(a2) - a1))
  {
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1B0D747D8);
}

void specialized ServerHello.init(bytes:)(uint64_t *a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int16 v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16[40];
  char v17[48];
  _BYTE v18[48];
  _BYTE v19[40];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  specialized ByteBuffer.readInteger<A>(as:)();
  if ((v3 & 0x10000) != 0
    || (ByteBuffer.readRandom()(),
        outlined init with take of P256.Signing.PublicKey?((uint64_t)v16, (uint64_t)v19, &demangling cache variable for type metadata for Random?), (v19[32] & 1) != 0))
  {
LABEL_3:
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v4 = swift_allocError();
    *(_DWORD *)v5 = 0;
    *(_BYTE *)(v5 + 4) = 1;
    swift_willThrow(v4);
    return;
  }
  ByteBuffer.readLegacySessionID()();
  if (!v1)
  {
    outlined init with take of P256.Signing.PublicKey?((uint64_t)v17, (uint64_t)v18, &demangling cache variable for type metadata for LegacySessionID?);
    if ((v18[40] & 1) == 0)
    {
      specialized ByteBuffer.readInteger<A>(as:)();
      if ((v6 & 0x10000) == 0)
      {
        specialized ByteBuffer.readInteger<A>(as:)();
        if ((v7 & 0x100) == 0)
        {
          if (one-time initialization token for helloRetryRequest != -1)
            swift_once();
          v12 = a1[2];
          v13 = *a1;
          v14 = a1[1];
          outlined copy of Data._Representation(*a1, v14);
          specialized ByteBuffer.readInteger<A>(as:)();
          if ((v8 & 0x10000) == 0)
          {
            ByteBuffer.readSlice(length:)((unsigned __int16)v8);
            v15 = v10;
            if (v10 >> 60 != 15)
            {
              v11 = v9;
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0, MEMORY[0x1E0DEE9D8]);
              if (!__OFADD__(v11, 2))
                __asm { BR              X9 }
              __break(1u);
              JUMPOUT(0x1B0D74F6CLL);
            }
          }
          outlined consume of Data._Representation(*a1, a1[1]);
          *a1 = v13;
          a1[1] = v14;
          a1[2] = v12;
        }
      }
    }
    goto LABEL_3;
  }
}

void readExtensions #1 (_:) in NewSessionTicket.init(bytes:)(uint64_t a1)
{
  if (!__OFADD__(*(_QWORD *)(a1 + 16), 2))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1B0D75450);
}

void closure #1 in ByteBuffer.readExtension(messageType:helloRetryRequest:)(uint64_t a1@<X0>, __int16 a2@<W1>, unsigned __int8 a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  switch(a2)
  {
    case 0:
      v7 = ByteBuffer.readServerName(messageType:)(a3);
      if (!v5)
      {
        *(_QWORD *)a5 = v7;
        *(_QWORD *)(a5 + 8) = v8;
        *(_QWORD *)(a5 + 16) = v9;
        *(_QWORD *)(a5 + 24) = 0;
        *(_BYTE *)(a5 + 32) = 0;
      }
      return;
    case 10:
      v10 = ByteBuffer.readSupportedGroups(messageType:)(a3);
      if (v5)
        return;
      *(_QWORD *)a5 = v10;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)(a5 + 24) = 0;
      v11 = 1;
      goto LABEL_32;
    case 13:
      v12 = ByteBuffer.readSignatureAlgorithms(messageType:)(a3);
      if (v5)
        return;
      *(_QWORD *)a5 = v12;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)(a5 + 24) = 0;
      v11 = 6;
      goto LABEL_32;
    case 16:
      v13 = ByteBuffer.readALPN(messageType:)(a3);
      if (v5)
        return;
      *(_QWORD *)a5 = v13;
      *(_QWORD *)(a5 + 8) = v14;
      *(_QWORD *)(a5 + 16) = v15;
      *(_QWORD *)(a5 + 24) = 0;
      v11 = 3;
      goto LABEL_32;
    case 20:
      v16 = ByteBuffer.readServerCertificateType(messageType:)(a3);
      if (v5)
        return;
      *(_QWORD *)a5 = v16;
      *(_QWORD *)(a5 + 8) = v17 & 1;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)(a5 + 24) = 0;
      v11 = 7;
      goto LABEL_32;
    case 41:
      v18 = ByteBuffer.readPreSharedKey(messageType:helloRetryRequest:)(a3, a4 & 1);
      if (v5)
        return;
      *(_QWORD *)a5 = v18;
      *(_QWORD *)(a5 + 8) = v19;
      *(_QWORD *)(a5 + 16) = v20 & 1;
      *(_QWORD *)(a5 + 24) = 0;
      v11 = 11;
      goto LABEL_32;
    case 42:
      LODWORD(v21) = 0;
      v22 = 0x100000000;
      switch(a3)
      {
        case 8u:
          break;
        case 4u:
          specialized ByteBuffer.readInteger<A>(as:)();
          if ((v21 & 0x100000000) != 0)
          {
            lazy protocol witness table accessor for type TLSError and conformance TLSError();
            v24 = swift_allocError();
            *(_DWORD *)v25 = 0;
            v26 = 1;
            goto LABEL_35;
          }
          v22 = 0;
          break;
        case 1u:
          break;
        default:
          v23 = a3 | 0x330000;
          lazy protocol witness table accessor for type TLSError and conformance TLSError();
          v24 = swift_allocError();
          v26 = 0;
          *(_DWORD *)v25 = v23;
LABEL_35:
          *(_BYTE *)(v25 + 4) = v26;
          swift_willThrow(v24);
          return;
      }
      *(_QWORD *)a5 = v22 | v21;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)(a5 + 24) = 0;
      v11 = 5;
LABEL_32:
      *(_BYTE *)(a5 + 32) = v11;
      return;
    case 43:
      v27 = ByteBuffer.readSupportedVersions(messageType:)(a3);
      if (v5)
        return;
      *(_QWORD *)a5 = v27;
      *(_QWORD *)(a5 + 8) = v28 & 1;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)(a5 + 24) = 0;
      v11 = 2;
      goto LABEL_32;
    case 45:
      v29 = ByteBuffer.readPreSharedKeyKexModes(messageType:)(a3);
      if (v5)
        return;
      *(_QWORD *)a5 = v29;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)(a5 + 24) = 0;
      v11 = 10;
      goto LABEL_32;
    case 51:
      v30 = ByteBuffer.readKeyShare(messageType:helloRetryRequest:)(a3, a4 & 1);
      if (v5)
        return;
      *(_QWORD *)a5 = v30;
      *(_QWORD *)(a5 + 8) = v31;
      *(_QWORD *)(a5 + 16) = v32;
      *(_QWORD *)(a5 + 24) = v33;
      v11 = 4;
      goto LABEL_32;
    case 57:
      v34 = ByteBuffer.readQUICTransportParameters(messageType:)(a3);
      if (v5)
        return;
      *(_QWORD *)a5 = v34;
      *(_QWORD *)(a5 + 8) = v35;
      *(_QWORD *)(a5 + 16) = v36;
      *(_QWORD *)(a5 + 24) = 0;
      v11 = 8;
      goto LABEL_32;
    case 58:
      v37 = ByteBuffer.readTicketRequestExtension(messageType:)(a3);
      if (v5)
        return;
      *(_QWORD *)a5 = v37 & 0x1FFFF;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)(a5 + 24) = 0;
      v11 = 12;
      goto LABEL_32;
    default:
      __asm { BR              X14 }
      return;
  }
}

uint64_t ByteBuffer.readEarlyDataExtension(messageType:)(unsigned __int8 a1)
{
  uint64_t v1;
  int v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 == 1 || a1 == 8)
    return 0x100000000;
  if (a1 == 4)
  {
    if (!__OFADD__(*(_QWORD *)(v1 + 16), 4))
      __asm { BR              X13 }
    __break(1u);
    JUMPOUT(0x1B0D7596CLL);
  }
  v4 = a1 | 0x330000;
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  v5 = swift_allocError();
  *(_DWORD *)v6 = v4;
  *(_BYTE *)(v6 + 4) = 0;
  return swift_willThrow(v5);
}

uint64_t static HandshakeState.ReadyState.receivingServerFinished(originalState:serverFinished:serverFinishedBytes:serializer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v33[64];
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v39 = a7;
  v40 = a8;
  v38 = a6;
  v43 = a5;
  v44 = a3;
  v45 = a4;
  v35 = a1;
  v10 = type metadata accessor for PeerCertificateBundle(0);
  MEMORY[0x1E0C80A78](v10);
  v36 = &v33[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  v41 = *(_QWORD *)(v12 - 8);
  v42 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v37 = &v33[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v13);
  v16 = &v33[-v15];
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
  MEMORY[0x1E0C80A78](v17);
  v19 = &v33[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  MEMORY[0x1E0C80A78](v20);
  v22 = &v33[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v34 = type metadata accessor for SessionTicket();
  MEMORY[0x1E0C80A78](v34);
  v24 = &v33[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  outlined init with copy of PartialHandshakeResult(a2 + *(int *)(v25 + 20), (uint64_t)v22, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of HandshakeStateMachine((uint64_t)v22, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
    outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(a2 + *(int *)(v25 + 36), (uint64_t)v19, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
    specialized SessionKeyManager.serverFinishedPayload()((uint64_t)v16);
    if (!v8)
      __asm { BR              X10 }
    outlined destroy of HandshakeStateMachine?((uint64_t)v19, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
    outlined destroy of PartialHandshakeResult((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
  }
  else
  {
    outlined destroy of PartialHandshakeResult((uint64_t)v22, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
    if (one-time initialization token for logger != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)logger);
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_1B0D50000, v27, v28, "received server finished message while not resuming session", v29, 2u);
      MEMORY[0x1B5E11244](v29, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v30 = swift_allocError();
    *(_DWORD *)v31 = 4;
    *(_BYTE *)(v31 + 4) = 1;
    swift_willThrow(v30);
  }
  return v25;
}

{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD v21[22];
  uint64_t v22;

  v21[17] = a7;
  v21[18] = a8;
  v21[16] = a6;
  v21[20] = a1;
  v21[21] = a5;
  v22 = a4;
  v21[19] = a3;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v21 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(a2 + *(int *)(v19 + 44), (uint64_t)v18, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
  specialized SessionKeyManager.serverFinishedPayload()((uint64_t)v15);
  if (!v8)
  {
    v21[13] = a2;
    v21[14] = v13;
    v21[12] = v19;
    v21[15] = v18;
    __asm { BR              X10 }
  }
  outlined destroy of HandshakeStateMachine?((uint64_t)v18, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
  return v19;
}

void specialized SessionKeyManager.serverFinishedPayload()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v10[6];

  v10[4] = a1;
  v2 = type metadata accessor for SHA384Digest();
  v10[5] = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v10[3] = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SymmetricKey();
  v10[1] = *(_QWORD *)(v4 - 8);
  v10[2] = v4;
  MEMORY[0x1E0C80A78](v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
  MEMORY[0x1E0C80A78](v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v7 = MEMORY[0x1E0C80A78](v6);
  MEMORY[0x1E0C80A78](v7);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v1, (uint64_t)v10 - v8, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v9 = (char *)sub_1B0D763F8 + 4 * byte_1B0DE997B[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_1B0D763F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  outlined destroy of HandshakeStateMachine?(v1, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  if (one-time initialization token for logger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v0, v2, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v4 = (char *)&loc_1B0D76498 + 4 * byte_1B0DE9980[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void specialized SessionKeyManager.clientFinishedPayload()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v10[6];

  v10[4] = a1;
  v2 = type metadata accessor for SHA384Digest();
  v10[5] = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v10[3] = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SymmetricKey();
  v10[1] = *(_QWORD *)(v4 - 8);
  v10[2] = v4;
  MEMORY[0x1E0C80A78](v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
  MEMORY[0x1E0C80A78](v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v7 = MEMORY[0x1E0C80A78](v6);
  MEMORY[0x1E0C80A78](v7);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v1, (uint64_t)v10 - v8, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v9 = (char *)sub_1B0D76888 + 4 * byte_1B0DE998F[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_1B0D76888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  outlined destroy of HandshakeStateMachine?(v1, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  if (one-time initialization token for logger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v0, v2, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v4 = (char *)&loc_1B0D76928 + 4 * byte_1B0DE9994[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void specialized SessionKeyManager.postServerFinished(serverFinishedBytes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v11[4];

  v11[3] = a3;
  v11[0] = a1;
  v11[1] = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
  v5 = MEMORY[0x1E0C80A78](v4);
  MEMORY[0x1E0C80A78](v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v7 = MEMORY[0x1E0C80A78](v6);
  v8 = MEMORY[0x1E0C80A78](v7);
  MEMORY[0x1E0C80A78](v8);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v3, (uint64_t)v11 - v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v10 = (char *)sub_1B0D76CD8 + 4 * byte_1B0DE9985[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_1B0D76CD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  outlined destroy of HandshakeStateMachine?(v2, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  if (one-time initialization token for logger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v0, v1, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v4 = (char *)&loc_1B0D76D78 + 4 * byte_1B0DE998A[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void specialized SessionKeyManager.postClientFinished(clientFinishedBytes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v11[4];

  v11[3] = a3;
  v11[0] = a1;
  v11[1] = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
  v5 = MEMORY[0x1E0C80A78](v4);
  MEMORY[0x1E0C80A78](v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v7 = MEMORY[0x1E0C80A78](v6);
  v8 = MEMORY[0x1E0C80A78](v7);
  MEMORY[0x1E0C80A78](v8);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v3, (uint64_t)v11 - v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v10 = (char *)sub_1B0D77040 + 4 * byte_1B0DE9999[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_1B0D77040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  outlined destroy of HandshakeStateMachine?(v2, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  if (one-time initialization token for logger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v0, v1, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v4 = (char *)&loc_1B0D770E0 + 4 * byte_1B0DE999E[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void specialized SessionKeyManager.State.AllSecrets.init(masterSecret:clientFinishedBytes:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[13];
  uint64_t v25;
  uint64_t v26;

  v24[11] = a4;
  v24[12] = a2;
  v25 = a3;
  v26 = *MEMORY[0x1E0C80C00];
  v7 = type metadata accessor for SymmetricKey();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v24[8] = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SHA384Digest();
  v24[5] = *(_QWORD *)(v10 - 8);
  v24[6] = v10;
  MEMORY[0x1E0C80A78](v10);
  v24[4] = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SHA384();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
  v17 = a1 + v16[12];
  v24[9] = v8;
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v18(a5, v17, v7);
  v19 = a1 + v16[13];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
  v18(a5 + *(int *)(v20 + 36), v19, v7);
  v24[1] = v16;
  v24[2] = v20;
  v21 = a1 + v16[14];
  v22 = *(int *)(v20 + 40);
  v24[10] = a5;
  v24[7] = v7;
  v18(a5 + v22, v21, v7);
  v23 = v25;
  v24[3] = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  __asm { BR              X10 }
}

void sub_1B0D7742C()
{
  uint64_t v0;
  uint64_t v1;

  if (BYTE6(v0) >= *(uint64_t *)(v1 - 136))
  {
    Data._Representation.subscript.getter();
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1B0D7776CLL);
}

uint64_t *ByteBuffer.readALPN(messageType:)(unsigned __int8 a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 == 8 || a1 == 1)
  {
    v4 = *v1;
    v3 = v1[1];
    v5 = v1[2];
    outlined copy of Data._Representation(*v1, v3);
    specialized ByteBuffer.readInteger<A>(as:)();
    if ((v6 & 0x10000) == 0)
    {
      ByteBuffer.readSlice(length:)((unsigned __int16)v6);
      if (v7 >> 60 != 15)
        __asm { BR              X10 }
    }
    outlined consume of Data._Representation(*v1, v1[1]);
    *v1 = v4;
    v1[1] = v3;
    v1[2] = v5;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v9 = swift_allocError();
    *(_DWORD *)v8 = 0;
    *(_BYTE *)(v8 + 4) = 1;
  }
  else
  {
    v1 = (uint64_t *)(a1 | 0x100000u);
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v9 = swift_allocError();
    *(_DWORD *)v10 = (_DWORD)v1;
    *(_BYTE *)(v10 + 4) = 0;
  }
  swift_willThrow(v9);
  return v1;
}

uint64_t sub_1B0D778B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;

  if (__OFSUB__(BYTE6(v4), a3) || (ByteBuffer.readSlice(length:)(BYTE6(v4) - a3), v5 >> 60 == 15))
  {
    __break(1u);
    JUMPOUT(0x1B0D779C4);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_1B0D77910 + *((int *)qword_1B0DB2FE0 + v3)))(a1);
}

uint64_t ByteBuffer.readQUICTransportParameters(messageType:)(unsigned __int8 a1)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  if (a1 == 8 || a1 == 1)
    __asm { BR              X11 }
  v3 = a1 | 0x390000;
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  v4 = swift_allocError();
  *(_DWORD *)v5 = v3;
  *(_BYTE *)(v5 + 4) = 0;
  return swift_willThrow(v4);
}

void sub_1B0D77B44()
{
  JUMPOUT(0x1B0D77B30);
}

void specialized ByteBuffer.writeHandshakeMessage<A>(_:)()
{
  char v1;
  char v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v1 = 20;
  v3[3] = MEMORY[0x1E0DEAC20];
  v3[4] = MEMORY[0x1E0CB1AA8];
  v3[0] = &v1;
  v3[1] = &v2;
  __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  __asm { BR              X12 }
}

{
  char v1;
  char v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v1 = 1;
  v3[3] = MEMORY[0x1E0DEAC20];
  v3[4] = MEMORY[0x1E0CB1AA8];
  v3[0] = &v1;
  v3[1] = &v2;
  __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  __asm { BR              X12 }
}

{
  char v1;
  char v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v1 = 2;
  v3[3] = MEMORY[0x1E0DEAC20];
  v3[4] = MEMORY[0x1E0CB1AA8];
  v3[0] = &v1;
  v3[1] = &v2;
  __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  __asm { BR              X12 }
}

{
  char v1;
  char v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v1 = 8;
  v3[3] = MEMORY[0x1E0DEAC20];
  v3[4] = MEMORY[0x1E0CB1AA8];
  v3[0] = &v1;
  v3[1] = &v2;
  __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  __asm { BR              X12 }
}

{
  char v1;
  char v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v1 = 13;
  v3[3] = MEMORY[0x1E0DEAC20];
  v3[4] = MEMORY[0x1E0CB1AA8];
  v3[0] = &v1;
  v3[1] = &v2;
  __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  __asm { BR              X12 }
}

{
  char v1;
  char v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v1 = 11;
  v3[3] = MEMORY[0x1E0DEAC20];
  v3[4] = MEMORY[0x1E0CB1AA8];
  v3[0] = &v1;
  v3[1] = &v2;
  __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  __asm { BR              X12 }
}

{
  char v1;
  char v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v1 = 15;
  v3[3] = MEMORY[0x1E0DEAC20];
  v3[4] = MEMORY[0x1E0CB1AA8];
  v3[0] = &v1;
  v3[1] = &v2;
  __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  __asm { BR              X12 }
}

{
  char v1;
  char v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v1 = 4;
  v3[3] = MEMORY[0x1E0DEAC20];
  v3[4] = MEMORY[0x1E0CB1AA8];
  v3[0] = &v1;
  v3[1] = &v2;
  __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  __asm { BR              X12 }
}

uint64_t sub_1B0D77BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v10;
  __int16 *v11;
  __int16 **v12;
  uint64_t v13;
  uint64_t v14;

  v5 = BYTE6(v0);
  LOBYTE(v10) = 0;
  v13 = v3;
  v14 = v4;
  v11 = &v10;
  v12 = (__int16 **)((char *)&v10 + 1);
  __swift_project_boxed_opaque_existential_1(&v11, v3);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  v10 = 0;
  v13 = v3;
  v14 = v4;
  v11 = &v10;
  v12 = &v11;
  __swift_project_boxed_opaque_existential_1(&v11, v3);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  ByteBuffer.writeImmutableBuffer(_:)(v2, v1);
  if (v6 > 0xFFFFFF)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v7 = v6;
  specialized ByteBuffer.setInteger<A>(_:at:as:)((unint64_t)v6 >> 16, v5);
  if (__OFADD__(v5, v8))
    goto LABEL_5;
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v7, v5 + v8);
  return v7 + 4;
}

uint64_t ByteBuffer.readSupportedVersions(messageType:)(unsigned __int8 a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if (a1 == 1)
  {
    v5 = *v1;
    v4 = v1[1];
    v6 = v1[2];
    outlined copy of Data._Representation(*v1, v4);
    specialized ByteBuffer.readInteger<A>(as:)();
    if ((v7 & 0x100) == 0)
    {
      ByteBuffer.readSlice(length:)(v7);
      if (v8 >> 60 != 15)
        __asm { BR              X10 }
    }
    outlined consume of Data._Representation(*v1, v1[1]);
    *v1 = v5;
    v1[1] = v4;
    v1[2] = v6;
    goto LABEL_8;
  }
  if (a1 != 2)
  {
    v11 = a1 | 0x2B0000;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v9 = swift_allocError();
    *(_DWORD *)v12 = v11;
    *(_BYTE *)(v12 + 4) = 0;
    goto LABEL_10;
  }
  specialized ByteBuffer.readInteger<A>(as:)();
  if ((v3 & 0x10000) != 0)
  {
LABEL_8:
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v9 = swift_allocError();
    *(_DWORD *)v10 = 0;
    *(_BYTE *)(v10 + 4) = 1;
LABEL_10:
    swift_willThrow(v9);
    return v2;
  }
  return bswap32(v3) >> 16;
}

uint64_t type metadata completion function for HandshakeStateMachine()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for HandshakeState(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for PartialHandshakeResult.NewEncryptionLevel()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  char *v5;
  char *v6;

  result = type metadata accessor for SymmetricKey();
  if (v1 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    v5 = &v3;
    swift_getTupleTypeLayout2();
    v6 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

NSData_optional __swiftcall STLSHandshaker.getSessionState()()
{
  uint64_t v0;
  uint64_t *v1;
  Swift::Bool v2;
  objc_class *isa;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  NSData v7;
  NSData_optional result;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_receivedSessionTickets);
  swift_beginAccess();
  if (*(_QWORD *)(*v1 + 16))
  {
    isa = (objc_class *)swift_beginAccess();
    v4 = *v1;
    if (!*(_QWORD *)(*v1 + 16))
    {
      __break(1u);
      goto LABEL_7;
    }
    v6 = *(_QWORD *)(v4 + 32);
    v5 = *(_QWORD *)(v4 + 40);
    outlined copy of Data._Representation(v6, v5);
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    swift_endAccess();
    v7.super.isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v6, v5);
  }
  else
  {
    v7.super.isa = 0;
  }
  isa = v7.super.isa;
LABEL_7:
  result.value.super.isa = isa;
  result.is_nil = v2;
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (_QWORD *)&v16[16 * v15])
      result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata completion function for SessionKeyManager.State.HandshakeSecret()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for SymmetricKey();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for SessionKeyManager.State.EarlySecret()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for SymmetricKey();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for SessionKeyManager.State.MasterSecret()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for SymmetricKey();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t HandshakeStateMachine.handleReadServerHello()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t result;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[136];
  _OWORD v27[8];
  char v28;
  __int128 v29;
  _OWORD v30[7];
  char v31;
  __int128 v32[7];
  _OWORD v33[6];
  _OWORD v34[6];
  char v35;
  uint64_t v36;

  v3 = v1;
  v36 = a1;
  v25 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
  v4 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)logger);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_1B0D50000, v8, v9, "expecting serverHello", v10, 2u);
    MEMORY[0x1B5E11244](v10, -1, -1);
  }

  result = HandshakeMessageParser.parseHandshakeMessage()((uint64_t)v26);
  if (!v2)
  {
    outlined init with take of HandshakeMessageParser.ParseResult?((uint64_t)v26, (uint64_t)v27);
    if (_s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOg((uint64_t)v27) == 1)
    {
      v12 = Logger.logObject.getter();
      v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v14 = 0;
        _os_log_impl(&dword_1B0D50000, v12, v13, "incomplete message, waiting for more data", v14, 2u);
        MEMORY[0x1B5E11244](v14, -1, -1);
      }

      v15 = type metadata accessor for PartialHandshakeResult(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v36, 1, 1, v15);
    }
    else
    {
      v30[5] = v27[6];
      v30[6] = v27[7];
      v31 = v28;
      v30[1] = v27[2];
      v30[2] = v27[3];
      v30[3] = v27[4];
      v30[4] = v27[5];
      v29 = v27[0];
      v30[0] = v27[1];
      outlined init with take of HandshakeMessage((_OWORD *)((char *)v30 + 8), (uint64_t)v32);
      outlined init with take of HandshakeMessage(v32, (uint64_t)v34);
      if (v35 == 1)
      {
        v33[2] = v34[2];
        v33[3] = v34[3];
        v33[4] = v34[4];
        v33[5] = v34[5];
        v33[0] = v34[0];
        v33[1] = v34[1];
        v16 = *((_QWORD *)&v29 + 1);
        v24 = v29;
        v17 = *(_QWORD *)&v30[0];
        v18 = v3 + *(int *)(type metadata accessor for HandshakeStateMachine() + 28);
        swift_bridgeObjectRetain();
        HandshakeState.receivedServerHello(_:bytes:clock:)((uint64_t)v33, v24, v16, v17, v18, v6);
        outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v26);
        outlined release of HandshakeMessage((uint64_t)v32);
        v19 = type metadata accessor for PartialHandshakeResult(0);
        v20 = v36;
        v21 = v36 + *(int *)(v19 + 20);
        outlined init with take of HandshakeStateMachine((uint64_t)v6, v21, type metadata accessor for PartialHandshakeResult.NewEncryptionLevel);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v21, 0, 1, v25);
        *(_OWORD *)v20 = xmmword_1B0DE7E90;
        *(_QWORD *)(v20 + 16) = 0;
        *(_OWORD *)(v20 + *(int *)(v19 + 24)) = xmmword_1B0DE7E90;
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v20, 0, 1, v19);
      }
      else
      {
        HandshakeStateMachine.logUnexpectedMessage(message:)();
        lazy protocol witness table accessor for type TLSError and conformance TLSError();
        v22 = swift_allocError();
        *(_DWORD *)v23 = 4;
        *(_BYTE *)(v23 + 4) = 1;
        swift_willThrow(v22);
        return outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v26);
      }
    }
  }
  return result;
}

uint64_t outlined release of HandshakeMessageParser.ParseResult?(uint64_t a1)
{
  outlined consume of HandshakeMessageParser.ParseResult?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_BYTE *)(a1 + 128));
  return a1;
}

uint64_t outlined consume of HandshakeMessageParser.ParseResult?(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17)
{
  if (a17 != 255)
  {
    outlined consume of Data._Representation(result, a2);
    return outlined consume of HandshakeMessage(a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  }
  return result;
}

uint64_t HandshakeState.receivedServerHello(_:bytes:clock:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t (*v31)(_QWORD);
  unint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _BYTE v55[40];
  uint64_t v56;

  v7 = v6;
  v52 = a5;
  v53 = a3;
  v54 = a4;
  v46 = a6;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v50 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v47 = (char *)&v44 - v13;
  v14 = type metadata accessor for SymmetricKey();
  v15 = *(_QWORD *)(v14 - 8);
  v48 = v14;
  v49 = v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v44 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v51 = (char *)&v44 - v18;
  v19 = type metadata accessor for HandshakeState.ServerHelloState(0);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for HandshakeState.ClientHelloState(0);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v44 - v26;
  v28 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1E0C80A78](v28);
  v30 = (char *)&v44 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v7;
  outlined init with copy of PartialHandshakeResult(v7, (uint64_t)v30, v31);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of PartialHandshakeResult((uint64_t)v30, type metadata accessor for HandshakeState);
    __break(1u);
LABEL_9:
    v50 = v25;
LABEL_11:
    result = outlined destroy of HandshakeStateMachine?((uint64_t)v50, &demangling cache variable for type metadata for SymmetricKey?);
    __break(1u);
    return result;
  }
  outlined init with take of HandshakeStateMachine((uint64_t)v30, (uint64_t)v27, type metadata accessor for HandshakeState.ClientHelloState);
  outlined init with copy of PartialHandshakeResult((uint64_t)v27, (uint64_t)v25, type metadata accessor for HandshakeState.ClientHelloState);
  outlined init with copy of SwiftTLSClock(v52, (uint64_t)v55);
  outlined retain of ServerHello(a1);
  v32 = v53;
  outlined copy of Data._Representation(a2, v53);
  v33 = v56;
  HandshakeState.ServerHelloState.init(originalState:serverHello:serverHelloBytes:clock:)((uint64_t)v25, a1, a2, v32, v54, (uint64_t)v55, (uint64_t)v21);
  if (v33)
    return outlined destroy of PartialHandshakeResult((uint64_t)v27, type metadata accessor for HandshakeState.ClientHelloState);
  v25 = v47;
  specialized SessionKeyManager.clientHandshakeTrafficSecret.getter();
  v36 = v48;
  v35 = v49;
  v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
  if (v37(v25, 1, v48) == 1)
    goto LABEL_9;
  v38 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
  v38(v51, v25, v36);
  v39 = (uint64_t)v50;
  specialized SessionKeyManager.serverHandshakeTrafficSecret.getter();
  if (v37((char *)v39, 1, v36) == 1)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v36);
    goto LABEL_11;
  }
  v40 = v45;
  outlined destroy of PartialHandshakeResult(v45, type metadata accessor for HandshakeState);
  outlined destroy of PartialHandshakeResult((uint64_t)v27, type metadata accessor for HandshakeState.ClientHelloState);
  v41 = v44;
  v38(v44, (char *)v39, v36);
  outlined init with take of HandshakeStateMachine((uint64_t)v21, v40, type metadata accessor for HandshakeState.ServerHelloState);
  swift_storeEnumTagMultiPayload();
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey));
  v43 = &v46[*(int *)(v42 + 48)];
  v38(v46, v51, v36);
  v38(v43, v41, v36);
  type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t outlined init with copy of SwiftTLSClock(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void specialized SessionKeyManager.serverHandshakeTrafficSecret.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
  MEMORY[0x1E0C80A78](v1);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
  MEMORY[0x1E0C80A78](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  MEMORY[0x1E0C80A78](v3);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v0, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v5 = (char *)sub_1B0D78FF8 + 4 * byte_1B0DE992C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0D78FF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  outlined destroy of HandshakeStateMachine?(v1, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v2 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v0, 1, 1, v2);
}

void specialized SessionKeyManager.clientHandshakeTrafficSecret.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
  MEMORY[0x1E0C80A78](v1);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
  MEMORY[0x1E0C80A78](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  MEMORY[0x1E0C80A78](v3);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v0, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v5 = (char *)sub_1B0D79218 + 4 * byte_1B0DE9927[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0D79218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  outlined destroy of HandshakeStateMachine?(v1, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v2 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v0, 1, 1, v2);
}

uint64_t outlined retain of ServerHello(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t __nwswifttls_identifier_block_invoke()
{
  qword_1ED2CDA08 = 0;
  g_nwswifttls_identifier = 0u;
  unk_1ED2CD9F8 = 0u;
  g_nwswifttls_callbacks = 0u;
  unk_1ED2CD8E8 = 0u;
  xmmword_1ED2CD8F8 = 0u;
  unk_1ED2CD908 = 0u;
  xmmword_1ED2CD918 = 0u;
  *(_OWORD *)&qword_1ED2CD928 = 0u;
  xmmword_1ED2CD938 = 0u;
  unk_1ED2CD948 = 0u;
  xmmword_1ED2CD958 = 0u;
  unk_1ED2CD968 = 0u;
  xmmword_1ED2CD978 = 0u;
  *(_OWORD *)&qword_1ED2CD988 = 0u;
  xmmword_1ED2CD998 = 0u;
  unk_1ED2CD9A8 = 0u;
  xmmword_1ED2CD9B8 = 0u;
  unk_1ED2CD9C8 = 0u;
  xmmword_1ED2CD9D8 = 0u;
  __strlcpy_chk();
  qword_1ED2CDA08 = 0x100000004;
  nw_protocol_set_default_one_to_one_callbacks();
  *(_QWORD *)&g_nwswifttls_callbacks = nwswifttls_add_input_handler;
  *((_QWORD *)&g_nwswifttls_callbacks + 1) = nwswifttls_remove_input_handler;
  *(_QWORD *)&xmmword_1ED2CD918 = nwswifttls_input_available;
  qword_1ED2CD928 = (uint64_t)nwswifttls_get_input_frames;
  *(_QWORD *)&xmmword_1ED2CD8F8 = nwswifttls_disconnect;
  *((_QWORD *)&xmmword_1ED2CD8F8 + 1) = nwswifttls_connected;
  *(_QWORD *)&xmmword_1ED2CD9B8 = nwswifttls_copy_info;
  qword_1ED2CD988 = (uint64_t)nwswifttls_supports_external_data;
  return nw_protocol_register();
}

void ByteBuffer.readRandom()()
{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 16), 32))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1B0D79590);
}

void ByteBuffer.readLegacySessionID()()
{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 16), 1))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1B0D7994CLL);
}

void specialized LegacySessionID.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_1B0D799B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (BYTE6(v2) > 0x20uLL)
  {
    __break(1u);
    JUMPOUT(0x1B0D79AA4);
  }
  v10 = 0u;
  v11 = 0u;
  result = specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)(v1, v2, (uint64_t)&v10);
  if (!v3)
  {
    v5 = BYTE6(v2);
    goto LABEL_8;
  }
  if (v3 != 1)
  {
    v7 = *(_QWORD *)(v1 + 16);
    v6 = *(_QWORD *)(v1 + 24);
    v8 = __OFSUB__(v6, v7);
    v5 = v6 - v7;
    if (!v8)
      goto LABEL_8;
LABEL_11:
    __break(1u);
  }
  LODWORD(v5) = HIDWORD(v1) - v1;
  if (__OFSUB__(HIDWORD(v1), (_DWORD)v1))
  {
    __break(1u);
    goto LABEL_11;
  }
  v5 = (int)v5;
LABEL_8:
  v9 = v11;
  *(_OWORD *)v0 = v10;
  *(_OWORD *)(v0 + 16) = v9;
  *(_QWORD *)(v0 + 32) = v5;
  return result;
}

void specialized Random.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1B0D79AF0(uint64_t result, uint64_t a2)
{
  _QWORD v2[8];

  if (BYTE6(a2) == 32)
  {
    memset(v2, 0, 32);
    specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)(result, a2, (uint64_t)v2);
    return v2[0];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  __int128 v14[2];
  uint64_t v15;
  __int128 v16;
  _QWORD v17[7];

  v17[5] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (!swift_dynamicCast())
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    outlined destroy of HandshakeStateMachine?((uint64_t)v14, &demangling cache variable for type metadata for ContiguousBytes?);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v4 = (char *)v17 + (HIBYTE(a2) & 0xF);
      v5 = v17;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v2 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v3 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v2 = _StringObject.sharedUTF8.getter();
      }
      if (v2)
        v4 = (_BYTE *)(v2 + v3);
      else
        v4 = 0;
      v5 = (_BYTE *)v2;
    }
    v6 = specialized Data._Representation.init(_:)(v5, v4);
    v8 = v7;
    if (v7 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v14[0] = v6;
      *((_QWORD *)&v14[0] + 1) = v8;
      return *(_QWORD *)&v14[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v9 = String.UTF8View._foreignCount()();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v9 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v9 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v14[0] = specialized Data._Representation.init(count:)(v9);
    *((_QWORD *)&v14[0] + 1) = v10;
    MEMORY[0x1E0C80A78](*(_QWORD *)&v14[0]);
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)();
    __asm { BR              X12 }
  }
  outlined init with take of ContiguousBytes(v14, (uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  swift_bridgeObjectRelease();
  v14[0] = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return *(_QWORD *)&v14[0];
}

NSData_optional __swiftcall STLSHandshaker.startHandshake()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  Swift::Bool v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSData_optional result;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PartialHandshakeResult(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v0 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_stateMachine;
  swift_beginAccess();
  v10 = type metadata accessor for HandshakeStateMachine();
  v11 = (objc_class *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
  if ((_DWORD)v11 == 1)
  {
    __break(1u);
  }
  else
  {
    HandshakeStateMachine.startHandshake()((uint64_t)v8);
    swift_endAccess();
    outlined init with copy of PartialHandshakeResult((uint64_t)v8, (uint64_t)v4, type metadata accessor for PartialHandshakeResult);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    v13 = v1 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_partialHandshakeResult;
    swift_beginAccess();
    outlined assign with take of HandshakeStateMachine?((uint64_t)v4, v13, &demangling cache variable for type metadata for PartialHandshakeResult?);
    swift_endAccess();
    v14 = *((_QWORD *)v8 + 1);
    if (v14 >> 60 != 15)
      __asm { BR              X10 }
    outlined destroy of PartialHandshakeResult((uint64_t)v8, type metadata accessor for PartialHandshakeResult);
    v11 = 0;
  }
  result.value.super.isa = v11;
  result.is_nil = v12;
  return result;
}

void HandshakeStateMachine.startHandshake()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _QWORD v19[12];
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;

  v19[7] = a1;
  v2 = type metadata accessor for PartialHandshakeResult(0);
  MEMORY[0x1E0C80A78](v2);
  v24 = type metadata accessor for SessionTicket();
  v23 = *(_QWORD *)(v24 - 8);
  v3 = MEMORY[0x1E0C80A78](v24);
  v19[8] = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v19[10] = (char *)v19 - v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v19[11] = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v21 = (char *)v19 - v10;
  MEMORY[0x1E0C80A78](v9);
  v11 = type metadata accessor for Date();
  v22 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v27 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for HandshakeState.IdleState(0);
  MEMORY[0x1E0C80A78](v20);
  v13 = type metadata accessor for HandshakeState(0);
  v14 = MEMORY[0x1E0C80A78](v13);
  v29 = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v19 - v16;
  v25 = type metadata accessor for HandshakeStateMachine();
  v26 = v1;
  v30 = v1 + *(int *)(v25 + 24);
  outlined init with copy of PartialHandshakeResult(v30, (uint64_t)v17, type metadata accessor for HandshakeState);
  v28 = v13;
  v18 = (char *)sub_1B0D7A5CC + 4 * byte_1B0DE8790[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0D7A5CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v0[19] = v5;
  outlined destroy of PartialHandshakeResult(v3, type metadata accessor for HandshakeState);
  if (one-time initialization token for logger != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  v8 = __swift_project_value_buffer(v7, (uint64_t)logger);
  swift_bridgeObjectRetain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  v11 = os_log_type_enabled(v9, v10);
  v0[13] = v1;
  v0[18] = v2;
  v0[9] = 0x6548746E65696C63;
  if (v11)
  {
    v0[24] = v4;
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v0[28] = v13;
    *(_DWORD *)v12 = 136446210;
    swift_bridgeObjectRetain();
    v0[42] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6548746E65696C63, 0xEB000000006F6C6CLL, v0 + 28);
    v4 = v0[24];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0D50000, v9, v10, "startHandshake in state %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E11244](v13, -1, -1);
    MEMORY[0x1B5E11244](v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v14 = v0[26];
  outlined init with copy of PartialHandshakeResult(*(_QWORD *)(v6 - 72), v14, type metadata accessor for HandshakeState);
  if (!swift_getEnumCaseMultiPayload())
  {
    swift_bridgeObjectRelease();
    outlined init with take of HandshakeStateMachine(v14, v4, type metadata accessor for HandshakeState.IdleState);
    v19 = *(unsigned __int8 *)(v0[22] + *(int *)(v0[21] + 36) + 75);
    v0[6] = v8;
    if (v19 == 1)
    {
      v0[45] = type metadata accessor for Curve25519EphemeralKey(0);
      v0[46] = &protocol witness table for Curve25519EphemeralKey;
      __swift_allocate_boxed_opaque_existential_1(v0 + 42);
      Curve25519.KeyAgreement.PrivateKey.init()();
    }
    else
    {
      v0[45] = type metadata accessor for P384EphemeralKey(0);
      v0[46] = &protocol witness table for P384EphemeralKey;
      __swift_allocate_boxed_opaque_existential_1(v0 + 42);
      P384.KeyAgreement.PrivateKey.init()();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Extension>);
    v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_1B0DE8760;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NamedGroup>);
    v24 = swift_allocObject();
    *((_OWORD *)v0 + 13) = xmmword_1B0DE8770;
    *(_OWORD *)(v24 + 16) = xmmword_1B0DE8770;
    v25 = v0[45];
    v26 = v0[46];
    __swift_project_boxed_opaque_existential_1(v0 + 42, v25);
    *(_WORD *)(v24 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v25, v26);
    *(_QWORD *)(v23 + 32) = v24;
    *(_QWORD *)(v23 + 40) = 0;
    *(_QWORD *)(v23 + 48) = 0;
    *(_QWORD *)(v23 + 56) = 0;
    *(_BYTE *)(v23 + 64) = 1;
    *(_QWORD *)(v23 + 72) = &outlined read-only object #0 of HandshakeStateMachine.startHandshake();
    *(_QWORD *)(v23 + 80) = 0;
    *(_QWORD *)(v23 + 88) = 0;
    *(_QWORD *)(v23 + 96) = 0;
    *(_BYTE *)(v23 + 104) = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Extension.KeyShare.KeyShareEntry>);
    *(_OWORD *)(swift_allocObject() + 16) = *((_OWORD *)v0 + 13);
    v27 = v0[45];
    v28 = v0[46];
    __swift_project_boxed_opaque_existential_1(v0 + 42, v27);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v28);
    v29 = v0[45];
    v30 = v0[46];
    __swift_project_boxed_opaque_existential_1(v0 + 42, v29);
    (*(void (**)(uint64_t, uint64_t))(v30 + 16))(v29, v30);
    __asm { BR              X11 }
  }
  outlined destroy of PartialHandshakeResult(v14, type metadata accessor for HandshakeState);
  swift_bridgeObjectRetain();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v0[28] = v18;
    *(_DWORD *)v17 = 136446210;
    swift_bridgeObjectRetain();
    v0[42] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0[9], 0xEB000000006F6C6CLL, v0 + 28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0D50000, v15, v16, "invalid state for startHandshake: %{public}s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E11244](v18, -1, -1);
    MEMORY[0x1B5E11244](v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  v20 = swift_allocError();
  *(_DWORD *)v21 = 2;
  *(_BYTE *)(v21 + 4) = 1;
  return swift_willThrow(v20);
}

uint64_t outlined init with copy of SessionTicket?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized SessionKeyManager.clientEarlyTrafficSecret.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int EnumCaseMultiPayload;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v2, (uint64_t)v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) >= 3)
  {
    if (!EnumCaseMultiPayload)
    {
      outlined init with take of P256.Signing.PublicKey?((uint64_t)v9, (uint64_t)v6, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v11 = &v6[*(int *)(v4 + 44)];
      v12 = type metadata accessor for SymmetricKey();
      v13 = *(_QWORD *)(v12 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(a1, v11, v12);
      outlined destroy of HandshakeStateMachine?((uint64_t)v6, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
    }
  }
  else
  {
    outlined destroy of HandshakeStateMachine?((uint64_t)v9, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  }
  v15 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 1, 1, v15);
}

void specialized static SessionKeyManager.State.EarlySecret.create(clientHello:sessionToResume:currentTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char v85;
  char v86;
  _QWORD v87[5];
  __int128 v88;
  uint64_t v89;
  _OWORD v90[6];
  uint64_t v91;
  uint64_t v92;

  v62 = a4;
  v74 = a2;
  v71 = a1;
  v92 = *MEMORY[0x1E0C80C00];
  v5 = type metadata accessor for SessionTicket();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v61 = (uint64_t)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SHA384();
  v84 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v83 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v81 = (char *)&v60 - v11;
  v12 = type metadata accessor for SHA384Digest();
  v72 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v70 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v82 = (char *)&v60 - v15;
  v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  v68 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69);
  v80 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v60 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for SymmetricKey();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = MEMORY[0x1E0C80A78](v26);
  v64 = (char *)&v60 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28);
  v66 = (char *)&v60 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v75 = (char *)&v60 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v79 = (char *)&v60 - v35;
  MEMORY[0x1E0C80A78](v34);
  v78 = (char *)&v60 - v36;
  v37 = lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9328], MEMORY[0x1E0CA9320]);
  v76 = v12;
  v77 = v37;
  v38 = dispatch thunk of static Digest.byteCount.getter();
  v39 = specialized Array.init(repeating:count:)(0, v38);
  v73 = a3;
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(a3, (uint64_t)v22, &demangling cache variable for type metadata for SessionTicket?);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  v41 = v40(v22, 1, v5);
  v67 = v26;
  v65 = v27;
  if (v41 == 1)
  {
    outlined destroy of HandshakeStateMachine?((uint64_t)v22, &demangling cache variable for type metadata for SessionTicket?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v25, 1, 1, v26);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v25, &v22[*(int *)(v5 + 36)], v26);
    outlined destroy of PartialHandshakeResult((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v25, 0, 1, v26);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v78, v25, v26);
LABEL_6:
      *(_QWORD *)&v90[0] = v39;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9958], MEMORY[0x1E0CA9950]);
      lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x1E0CB1B00]);
      v42 = (uint64_t)v80;
      static HKDF.extract<A>(inputKeyMaterial:salt:)();
      swift_bridgeObjectRelease();
      v43 = v81;
      dispatch thunk of HashFunction.init()();
      v44 = (uint64_t)v82;
      dispatch thunk of HashFunction.finalize()();
      v63 = *(void (**)(char *, uint64_t))(v84 + 8);
      v63(v43, v8);
      v45 = v76;
      v46 = dispatch thunk of static Digest.byteCount.getter();
      v47 = (uint64_t)v79;
      specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(v42, 0x646E696220736572, 0xEA00000000007265, v44, v46);
      v72 = *(_QWORD *)(v72 + 8);
      ((void (*)(uint64_t, uint64_t))v72)(v44, v45);
      outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v73, (uint64_t)v20, &demangling cache variable for type metadata for SessionTicket?);
      if (v40(v20, 1, v5) == 1)
      {
        outlined destroy of HandshakeStateMachine?((uint64_t)v20, &demangling cache variable for type metadata for SessionTicket?);
        v88 = xmmword_1B0DE7EA0;
        v48 = *(_OWORD *)(v74 + 64);
        v49 = *(_OWORD *)(v74 + 80);
        v50 = *(_OWORD *)(v74 + 32);
        v90[3] = *(_OWORD *)(v74 + 48);
        v90[4] = v48;
        v90[5] = v49;
        v51 = *(_OWORD *)(v74 + 16);
        v90[0] = *(_OWORD *)v74;
        v90[1] = v51;
        v89 = 0;
        v91 = *(_QWORD *)(v74 + 96);
        v90[2] = v50;
        v85 = 1;
        v87[3] = MEMORY[0x1E0DEAC20];
        v87[4] = MEMORY[0x1E0CB1AA8];
        v87[0] = &v85;
        v87[1] = &v86;
        __swift_project_boxed_opaque_existential_1(v87, MEMORY[0x1E0DEAC20]);
        outlined retain of ClientHello((uint64_t)v90);
        Data._Representation.append(contentsOf:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
        __asm { BR              X12 }
      }
      v52 = (uint64_t)v20;
      v53 = v61;
      outlined init with take of HandshakeStateMachine(v52, v61, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
      specialized static SessionKeyManager.State.EarlySecret.tryToResume(session:binderSecret:clientHello:currentTime:)(v53, v47);
      v55 = v54;
      v57 = v56;
      v59 = v58;
      outlined destroy of PartialHandshakeResult(v53, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
      *(_QWORD *)&v88 = v55;
      *((_QWORD *)&v88 + 1) = v57;
      v89 = v59;
      dispatch thunk of HashFunction.init()();
      __asm { BR              X10 }
    }
  }
  *(_QWORD *)&v90[0] = v39;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x1E0CB1B08]);
  SymmetricKey.init<A>(data:)();
  outlined destroy of HandshakeStateMachine?((uint64_t)v25, &demangling cache variable for type metadata for SymmetricKey?);
  goto LABEL_6;
}

void sub_1B0D7BE24()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (BYTE6(v1) >= v2)
  {
    Data._Representation.subscript.getter();
    v4 = v3;
    outlined consume of Data._Representation(v0, v1);
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1B0D7C294);
}

uint64_t specialized Array.init(repeating:count:)(int a1, size_t a2)
{
  uint64_t v4;
  uint64_t result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (!a2)
      return MEMORY[0x1E0DEE9D8];
    v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1, a2);
    return v4;
  }
  return result;
}

void specialized static SessionKeyManager.State.EarlySecret.tryToResume(session:binderSecret:clientHello:currentTime:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[15];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for SymmetricKey();
  v21[14] = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v27 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SHA384();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v25 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SHA384Digest();
  v21[13] = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v26 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.timeIntervalSince(_:)();
  v15 = v14 * 1000.0;
  if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) != 0)
  {
    if (v15 > -1.0)
    {
      if (v15 < 4294967300.0)
      {
        v21[9] = v10;
        v23 = v9;
        v21[10] = v7;
        v16 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SessionTicket() + 32));
        v18 = *v16;
        v17 = v16[1];
        v29 = v16[2];
        v32 = v17;
        outlined copy of Data._Representation(v18, v17);
        v28 = lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9328], MEMORY[0x1E0CA9320]);
        v19 = dispatch thunk of static Digest.byteCount.getter();
        v33 = specialized Data._Representation.init(count:)(v19);
        *(_QWORD *)&v34 = v20;
        specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t)&v33);
        v31 = v33;
        v30 = v34;
        v21[8] = 0;
        v24 = a2;
        v21[11] = v5;
        v21[12] = v4;
        __asm { BR              X10 }
      }
LABEL_7:
      __break(1u);
      JUMPOUT(0x1B0D7D1F8);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  goto LABEL_7;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t specialized BidirectionalCollection.dropLast(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((result & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_1B0D7D424 + *((int *)qword_1B0DDFFD8 + (a4 >> 62))))();
}

uint64_t sub_1B0D7D438@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, unsigned int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x1B0D7D4C4);
  }
  return ((uint64_t (*)(void))((char *)&loc_1B0D7D474 + *((int *)qword_1B0DDFFE8 + a3)))();
}

uint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4;
  uint64_t v5;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x1B0D7D52CLL);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_1B0D7D4E4 + *((int *)qword_1B0DDFFC8 + (a4 >> 62))))(v5);
}

void ByteBuffer.setImmutableBuffer(_:at:)()
{
  __asm { BR              X10 }
}

uint64_t specialized Data._Representation.init(count:)(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

void specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(uint64_t a1)
{
  __asm { BR              X13 }
}

void *sub_1B0D7D88C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __b, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  void *result;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;

  v30 = v25;
  LOWORD(v31) = v24;
  BYTE2(v31) = BYTE2(v24);
  HIBYTE(v31) = BYTE3(v24);
  v32 = BYTE4(v24);
  v33 = BYTE5(v24);
  v34 = BYTE6(v24);
  result = memset(&v30, v27, BYTE6(v24));
  v29 = v31 | ((unint64_t)v32 << 32) | ((unint64_t)v33 << 40) | ((unint64_t)v34 << 48);
  *v26 = v30;
  v26[1] = v29;
  return result;
}

void specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(int *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  size_t v12;

  Data.InlineSlice.ensureUniqueReference()();
  v4 = *a1;
  v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v7 = v6;
  v8 = __DataStorage._offset.getter();
  v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v10 = v5 - v4;
  v11 = __DataStorage._length.getter();
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  memset((void *)(v7 + v9), a2, v12);
}

uint64_t HandshakeState.receievedServerFinished(serverFinished:serverFinishedBytes:serializer:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  char *v38;
  int EnumCaseMultiPayload;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t result;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(uint64_t (*)(uint64_t), uint64_t, uint64_t);
  uint64_t v72;
  uint64_t (*v73)(uint64_t);
  void (*v74)(char *, uint64_t (*)(uint64_t), uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t);
  uint64_t v78;
  _QWORD *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t);
  char *v86;
  char *v87;
  uint64_t (*v88)(uint64_t);
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t ready;
  uint64_t v93;
  uint64_t (*v94)(uint64_t);
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v105 = a5;
  v106 = a6;
  v103 = a3;
  v104 = a4;
  v101 = a1;
  v102 = a2;
  v91 = a7;
  v97 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  MEMORY[0x1E0C80A78](v97);
  v9 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  MEMORY[0x1E0C80A78](v96);
  v11 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v88 = (uint64_t (*)(uint64_t))((char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = MEMORY[0x1E0C80A78](v13);
  v94 = (uint64_t (*)(uint64_t))((char *)&v84 - v16);
  v17 = MEMORY[0x1E0C80A78](v15);
  v98 = (uint64_t)&v84 - v18;
  MEMORY[0x1E0C80A78](v17);
  v95 = (char *)&v84 - v19;
  v93 = type metadata accessor for SymmetricKey();
  v100 = *(_QWORD *)(v93 - 8);
  v20 = MEMORY[0x1E0C80A78](v93);
  v85 = (uint64_t (*)(uint64_t))((char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = MEMORY[0x1E0C80A78](v20);
  v99 = (char *)&v84 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v86 = (char *)&v84 - v25;
  MEMORY[0x1E0C80A78](v24);
  v87 = (char *)&v84 - v26;
  ready = type metadata accessor for HandshakeState.ReadyState(0);
  v27 = MEMORY[0x1E0C80A78](ready);
  v29 = (char *)&v84 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v84 - v30;
  v32 = type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  MEMORY[0x1E0C80A78](v32);
  v34 = (char *)&v84 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for HandshakeState(0);
  v36 = type metadata accessor for HandshakeState;
  MEMORY[0x1E0C80A78](v35);
  v38 = (char *)&v84 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = v7;
  outlined init with copy of PartialHandshakeResult(v7, (uint64_t)v38, type metadata accessor for HandshakeState);
  v89 = v35;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 3)
  {
    if (EnumCaseMultiPayload == 5)
    {
      outlined init with take of HandshakeStateMachine((uint64_t)v38, (uint64_t)v34, type metadata accessor for HandshakeState.ServerCertificateVerifyState);
      v40 = v107;
      v41 = static HandshakeState.ReadyState.receivingServerFinished(originalState:serverFinished:serverFinishedBytes:serializer:)((uint64_t)v31, (uint64_t)v34, v101, v102, v103, v104, v105, v106);
      v44 = v100;
      v45 = v98;
      v46 = v95;
      if (v40)
        return outlined destroy of PartialHandshakeResult((uint64_t)v34, type metadata accessor for HandshakeState.ServerCertificateVerifyState);
      v104 = v43;
      v105 = v42;
      v106 = v41;
      v107 = 0;
      specialized SessionKeyManager.clientApplicationTrafficSecret.getter();
      v36 = *(uint64_t (**)(uint64_t))(v44 + 48);
      v54 = v93;
      v55 = ((uint64_t (*)(char *, uint64_t, uint64_t))v36)(v46, 1, v93);
      v56 = (uint64_t)v46;
      if (v55 != 1)
      {
        v57 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 32);
        v58 = v87;
        v57(v87, v56, v54);
        specialized SessionKeyManager.serverApplicationTrafficSecret.getter();
        v59 = v54;
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v36)(v45, 1, v54) != 1)
        {
          v60 = v45;
          v61 = v90;
          outlined destroy of PartialHandshakeResult(v90, type metadata accessor for HandshakeState);
          outlined destroy of PartialHandshakeResult((uint64_t)v34, type metadata accessor for HandshakeState.ServerCertificateVerifyState);
          v62 = v86;
          v57(v86, v60, v59);
          outlined init with take of HandshakeStateMachine((uint64_t)v31, v61, type metadata accessor for HandshakeState.ReadyState);
          swift_storeEnumTagMultiPayload();
          v63 = type metadata accessor for PartialHandshakeResult(0);
          v64 = v91;
          v65 = v59;
          v66 = (char *)v91 + *(int *)(v63 + 20);
          v67 = &v66[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey))
                            + 48)];
          v57(v66, (uint64_t)v58, v65);
          v57(v67, (uint64_t)v62, v65);
          v68 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
          swift_storeEnumTagMultiPayload();
          result = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v66, 0, 1, v68);
          v69 = v105;
          *v64 = v106;
          v64[1] = v69;
          v64[2] = v104;
          *(_OWORD *)((char *)v64 + *(int *)(v63 + 24)) = xmmword_1B0DE7E90;
          return result;
        }
        (*(void (**)(char *, uint64_t))(v44 + 8))(v58, v54);
        goto LABEL_18;
      }
LABEL_16:
      v98 = v56;
LABEL_18:
      outlined destroy of HandshakeStateMachine?(v98, &demangling cache variable for type metadata for SymmetricKey?);
      __break(1u);
LABEL_19:
      v88 = v36;
      goto LABEL_21;
    }
LABEL_15:
    outlined destroy of PartialHandshakeResult((uint64_t)v38, v36);
    __break(1u);
    goto LABEL_16;
  }
  outlined init with copy of PartialHandshakeResult((uint64_t)v38, (uint64_t)v11, type metadata accessor for HandshakeState.EncryptedExtensionsState);
  outlined init with copy of PartialHandshakeResult((uint64_t)&v11[*(int *)(v96 + 20)], (uint64_t)v9, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
  v48 = swift_getEnumCaseMultiPayload();
  outlined destroy of PartialHandshakeResult((uint64_t)v9, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
  if (v48 != 1)
  {
    v36 = type metadata accessor for HandshakeState.EncryptedExtensionsState;
    outlined destroy of PartialHandshakeResult((uint64_t)v11, type metadata accessor for HandshakeState.EncryptedExtensionsState);
    goto LABEL_15;
  }
  v49 = v107;
  v50 = static HandshakeState.ReadyState.receivingServerFinished(originalState:serverFinished:serverFinishedBytes:serializer:)((uint64_t)v29, (uint64_t)v11, v101, v102, v103, v104, v105, v106);
  v53 = v99;
  v36 = v94;
  if (v49)
  {
    outlined destroy of PartialHandshakeResult((uint64_t)v11, type metadata accessor for HandshakeState.EncryptedExtensionsState);
    return outlined destroy of PartialHandshakeResult((uint64_t)v38, type metadata accessor for HandshakeState.EncryptedExtensionsState);
  }
  v104 = v52;
  v105 = v51;
  v106 = v50;
  v107 = 0;
  specialized SessionKeyManager.clientApplicationTrafficSecret.getter();
  v70 = v100;
  v71 = *(unsigned int (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t))(v100 + 48);
  v72 = v93;
  if (v71(v36, 1, v93) == 1)
    goto LABEL_19;
  v73 = v36;
  v74 = *(void (**)(char *, uint64_t (*)(uint64_t), uint64_t))(v70 + 32);
  v74(v53, v73, v72);
  v75 = (uint64_t)v88;
  specialized SessionKeyManager.serverApplicationTrafficSecret.getter();
  if (v71((uint64_t (*)(uint64_t))v75, 1, v72) != 1)
  {
    v76 = v90;
    outlined destroy of PartialHandshakeResult(v90, type metadata accessor for HandshakeState);
    outlined destroy of PartialHandshakeResult((uint64_t)v11, type metadata accessor for HandshakeState.EncryptedExtensionsState);
    v77 = v85;
    v74((char *)v85, (uint64_t (*)(uint64_t))v75, v72);
    outlined init with take of HandshakeStateMachine((uint64_t)v29, v76, type metadata accessor for HandshakeState.ReadyState);
    swift_storeEnumTagMultiPayload();
    v78 = type metadata accessor for PartialHandshakeResult(0);
    v79 = v91;
    v80 = (char *)v91 + *(int *)(v78 + 20);
    v81 = &v80[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey))
                      + 48)];
    v74(v80, (uint64_t (*)(uint64_t))v99, v72);
    v74(v81, v77, v72);
    v82 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v80, 0, 1, v82);
    v83 = v105;
    *v79 = v106;
    v79[1] = v83;
    v79[2] = v104;
    *(_OWORD *)((char *)v79 + *(int *)(v78 + 24)) = xmmword_1B0DE7E90;
    return outlined destroy of PartialHandshakeResult((uint64_t)v38, type metadata accessor for HandshakeState.EncryptedExtensionsState);
  }
  (*(void (**)(char *, uint64_t))(v70 + 8))(v99, v72);
LABEL_21:
  result = outlined destroy of HandshakeStateMachine?((uint64_t)v88, &demangling cache variable for type metadata for SymmetricKey?);
  __break(1u);
  return result;
}

void specialized SessionKeyManager.serverApplicationTrafficSecret.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
  MEMORY[0x1E0C80A78](v1);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
  MEMORY[0x1E0C80A78](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  MEMORY[0x1E0C80A78](v3);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v0, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v5 = (char *)sub_1B0D7E3F8 + 4 * byte_1B0DE9967[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0D7E3F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  outlined destroy of HandshakeStateMachine?(v1, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v2 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v0, 1, 1, v2);
}

void specialized SessionKeyManager.clientApplicationTrafficSecret.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
  MEMORY[0x1E0C80A78](v1);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
  MEMORY[0x1E0C80A78](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  MEMORY[0x1E0C80A78](v3);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v0, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v5 = (char *)sub_1B0D7E610 + 4 * byte_1B0DE9962[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0D7E610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  outlined destroy of HandshakeStateMachine?(v1, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v2 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v0, 1, 1, v2);
}

void nwswifttls_update_encryption_level(void *a1, int a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  const void *v7;
  void *v8;
  NSObject *v9;
  _QWORD v10[5];
  int v11;
  char v12;

  v5 = a1;
  v6 = v5;
  if (v5)
  {
    v7 = (const void *)v5[24];
    if (v7)
    {
      if (v6[25])
      {
        v8 = _Block_copy(v7);
        v9 = v6[25];
        v10[0] = MEMORY[0x1E0C809B0];
        v10[1] = 3221225472;
        v10[2] = __nwswifttls_update_encryption_level_block_invoke;
        v10[3] = &unk_1E6247DC8;
        v10[4] = v8;
        v11 = a2;
        v12 = a3;
        dispatch_async(v9, v10);

      }
    }
  }

}

uint64_t __nwswifttls_update_encryption_level_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned __int8 *)(a1 + 44));
}

BOOL nwswifttls_get_encryption_key_label(uint64_t a1, int a2, const char **a3)
{
  _BOOL8 result;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  int v12;

  result = 0;
  if (a1)
  {
    if (a3)
    {
      v12 = 0;
      result = nwswifttls_get_encryption_level(a1, &v12);
      if (result)
      {
        v7 = "SERVER_TRAFFIC_SECRET_0";
        if (a2)
          v7 = "CLIENT_TRAFFIC_SECRET_0";
        v8 = "SERVER_HANDSHAKE_TRAFFIC_SECRET";
        if (a2)
          v8 = "CLIENT_HANDSHAKE_TRAFFIC_SECRET";
        v9 = "SERVER_UNDEFINED_SECRET";
        if (a2)
          v9 = "CLIENT_UNDEFINED_SECRET";
        v10 = "SERVER_EARLY_TRAFFIC_SECRET";
        if (a2)
          v10 = "CLIENT_EARLY_TRAFFIC_SECRET";
        if (v12 == 1)
          v9 = v10;
        if (v12 != 2)
          v8 = v9;
        if (v12 == 3)
          v11 = v7;
        else
          v11 = v8;
        *a3 = v11;
      }
    }
  }
  return result;
}

void ssl_log_secret(const char *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t i;
  id *v16;
  id v17;
  char *v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t j;
  uint8_t buf[4];
  id v23;
  _QWORD v24[17];

  v24[15] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5 && a1 && v6)
  {
    v8 = objc_msgSend(v5, "length");
    v9 = objc_msgSend(objc_retainAutorelease(v5), "bytes");
    v10 = v7;
    v11 = objc_msgSend(v10, "length");
    v12 = objc_retainAutorelease(v10);
    v13 = objc_msgSend(v12, "bytes");
    v24[0] = CFSTR("%c");
    v24[1] = a1;
    v24[2] = strlen(a1);
    v24[3] = CFSTR("%c");
    v24[4] = " ";
    v24[5] = 1;
    v24[6] = CFSTR("%02x");
    v24[7] = v9;
    v24[8] = v8;
    v24[9] = CFSTR("%c");
    v24[10] = " ";
    v24[11] = 1;
    v24[12] = CFSTR("%02x");
    v24[13] = v13;
    v24[14] = v11;
    v14 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
    for (i = 0; i != 5; ++i)
    {
      v16 = (id *)&v24[3 * i];
      v17 = *v16;
      v18 = (char *)v16[2];
      if (v18)
      {
        v19 = (unsigned __int8 *)v16[1];
        do
        {
          v20 = *v19++;
          objc_msgSend(v14, "appendFormat:", v17, v20);
          --v18;
        }
        while (v18);
      }

    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v23 = v14;
      _os_log_impl(&dword_1B0D50000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }

    for (j = 12; j != -3; j -= 3)
  }

}

void sub_1B0D7EAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t i;

  for (i = 96; i != -24; i -= 24)

  _Unwind_Resume(a1);
}

sec_trust_t nwswifttls_copy_copy_authenticator_trust(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sec_trust_t v5;
  id *v10;
  void *v11;
  void *v12;
  void *v13;
  const __CFAllocator *v14;
  __CFArray *Mutable;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  SecCertificateRef v21;
  SecCertificateRef v22;
  const void *SSLWithKeyUsage;
  const void *v24;
  id *v26;
  SecTrustRef trust;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v5 = 0;
  v33 = *MEMORY[0x1E0C80C00];
  if (a1 && a2 && a3)
  {
    v10 = a1;
    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a2, a3);
    v12 = 0;
    if (a4 && a5)
      v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a4, a5);
    objc_msgSend(v10[35], "validateAuthenticatorWithAuthenticator:context:keyParser:", v11, v12, &__block_literal_global);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v13, "count"))
    {
      v5 = 0;
LABEL_24:

      return v5;
    }
    v26 = v10;
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v16 = v13;
    v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)v29;
      do
      {
        for (i = 0; i != v18; ++i)
        {
          if (*(_QWORD *)v29 != v19)
            objc_enumerationMutation(v16);
          v21 = SecCertificateCreateWithData(v14, *(CFDataRef *)(*((_QWORD *)&v28 + 1) + 8 * i));
          if (v21)
          {
            v22 = v21;
            CFArrayAppendValue(Mutable, v21);
            CFRelease(v22);
          }
        }
        v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
      }
      while (v18);
    }

    SSLWithKeyUsage = (const void *)SecPolicyCreateSSLWithKeyUsage();
    if (SSLWithKeyUsage)
    {
      v24 = SSLWithKeyUsage;
      trust = 0;
      SecTrustCreateWithCertificates(Mutable, SSLWithKeyUsage, &trust);
      CFRelease(v24);
      CFRelease(Mutable);
      if (trust)
      {
        v5 = sec_trust_create(trust);
        CFRelease(trust);
LABEL_23:
        v10 = v26;
        goto LABEL_24;
      }
    }
    else
    {
      CFRelease(Mutable);
    }
    v5 = 0;
    goto LABEL_23;
  }
  return v5;
}

SecKeyRef __nwswifttls_copy_copy_authenticator_trust_block_invoke(uint64_t a1, void *a2)
{
  const __CFData *v2;
  __SecCertificate *v3;
  __SecCertificate *v4;
  SecKeyRef v5;

  v2 = a2;
  if (v2 && (v3 = SecCertificateCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2)) != 0)
  {
    v4 = v3;
    v5 = SecCertificateCopyKey(v3);
    CFRelease(v4);
    if (v5)
    {
      SecKeyCopyPublicBytes();
      CFRelease(v5);
      v5 = 0;
    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void nwswifttls_disconnect(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(void);
  id v6;

  if (a1)
  {
    v2 = *(id *)(a1 + 40);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 32);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 24);
        if (v4)
        {
          v5 = *(void (**)(void))(v4 + 32);
          if (v5)
          {
            v6 = v2;
            v5();
            v2 = v6;
          }
        }
      }
    }

  }
}

__int128 *nwswifttls_identifier()
{
  if (nwswifttls_identifier_onceToken != -1)
    dispatch_once(&nwswifttls_identifier_onceToken, &__block_literal_global_92);
  return &g_nwswifttls_identifier;
}

uint64_t nwswifttls_remove_input_handler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v17;

  v3 = a1;
  if (a1)
  {
    v6 = *(id *)(a1 + 40);
    if (v6 && (*(_QWORD *)(a2 + 32) = 0, *(_QWORD *)(v3 + 48) == a2))
    {
      v7 = 0;
      *(_QWORD *)(v3 + 48) = 0;
      v8 = MEMORY[0x1E0C809B0];
      do
      {
        nw_frame_array_foreach();
        v7 += 8;
      }
      while (v7 != 32);
      v14 = *(_QWORD *)(v3 + 32);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 24);
        if (v15)
        {
          v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8);
          if (v16)
            v16(v14, v3, a3, v9, v10, v11, v12, v13, v8, 3221225472);
        }
      }
      if ((_DWORD)a3)
      {
        v17 = *(void **)(v3 + 40);
        *(_QWORD *)(v3 + 40) = 0;

      }
      v3 = 1;
    }
    else
    {
      v3 = 0;
    }

  }
  return v3;
}

uint64_t nwswifttls_get_input_frames()
{
  return 0;
}

uint64_t nwswifttls_options_are_equal()
{
  return sec_protocol_options_contents_compare();
}

uint64_t nwswifttls_options_compare()
{
  return sec_protocol_options_contents_compare();
}

void nwswifttls_deallocate_metadata(int a1, void **a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  if (a2)
  {
    free(a2[5]);
    free(a2[22]);
    free(a2[6]);
    free(a2[7]);
    v3 = a2[11];
    a2[11] = 0;

    v4 = a2[13];
    a2[13] = 0;

    v5 = a2[14];
    a2[14] = 0;

    v6 = a2[17];
    a2[17] = 0;

    v7 = a2[18];
    a2[18] = 0;

    v8 = a2[19];
    a2[19] = 0;

    v9 = a2[20];
    a2[20] = 0;

    v10 = a2[21];
    a2[21] = 0;

    v11 = a2[10];
    a2[10] = 0;

  }
  free(a2);
}

void nwswifttls_send_error(void *a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, char *, uint64_t);
  char *v7;
  char *v8;

  v3 = a1;
  if (v3)
  {
    if (v3[276])
    {
      if (!v3[278])
      {
        v4 = *((_QWORD *)v3 + 7);
        if (v4)
        {
          v5 = *(_QWORD *)(v4 + 24);
          if (v5)
          {
            v6 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 56);
            if (v6)
            {
              v7 = v3 + 8;
              v3[278] = 1;
              v8 = v3;
              v6(v4, v3 + 8, a2);
              (*(void (**)(uint64_t, char *))(*(_QWORD *)(v4 + 24) + 48))(v4, v7);
              v3 = v8;
            }
          }
        }
      }
    }
  }

}

void nwswifttls_send_alert(void *a1, unsigned int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  void *v8;

  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2 <= 3)
    {
      v5 = *((_QWORD *)v3 + a2 + 11);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 24);
        if (v6)
        {
          v7 = *(void (**)(void))(v6 + 56);
          if (v7)
          {
            v8 = v4;
            v7();
            v4 = v8;
          }
        }
      }
    }
  }

}

uint64_t __nwswifttls_finalize_output_frame_arrays_block_invoke(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  nw_frame_array_remove();
  nw_frame_finalize();

  return 1;
}

BOOL __nwswifttls_configure_with_sec_protocol_options_block_invoke_2(uint64_t a1, int a2, xpc_object_t xuint)
{
  uint64_t value;

  value = (unsigned __int16)xpc_uint64_get_value(xuint);
  if (value == 29)
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 275) = 1;
  return value != 29;
}

uint64_t variable initialization expression of STLSHandshaker.stateMachine@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of STLSHandshaker.stateMachine((uint64_t (*)(_QWORD))type metadata accessor for HandshakeStateMachine, a1);
}

uint64_t variable initialization expression of STLSHandshaker.partialHandshakeResult@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of STLSHandshaker.stateMachine(type metadata accessor for PartialHandshakeResult, a1);
}

uint64_t variable initialization expression of STLSHandshaker.stateMachine@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

uint64_t variable initialization expression of STLSHandshaker.receivedSessionTickets()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t variable initialization expression of STLSHandshaker.latestError()
{
  return 0;
}

Swift::Int __swiftcall STLSHandshaker.isImplemented()()
{
  return 1;
}

uint64_t STLSHandshaker.__allocating_init(_:serverName:quicTransportParameters:alpn:sessionState:ticketRequest:useX25519KeyExchange:)(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, int a7)
{
  objc_class *v7;
  id v15;

  v15 = objc_allocWithZone(v7);
  return STLSHandshaker.init(_:serverName:quicTransportParameters:alpn:sessionState:ticketRequest:useX25519KeyExchange:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t STLSHandshaker.init(_:serverName:quicTransportParameters:alpn:sessionState:ticketRequest:useX25519KeyExchange:)(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, int a7)
{
  char *v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(void);
  char *v28;
  uint64_t v29;
  void (*v30)(_QWORD, _QWORD, _QWORD);
  uint64_t v31;
  id v32;
  id v33;
  __int128 v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  id v48;
  void *v49;
  void *v50;
  unint64_t v51;
  id v52;
  id v53;
  id v54;
  id v55;
  char *v56;
  char *v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  int v65;
  void (*v66)(void);
  void (*v67)(_QWORD, _QWORD, _QWORD);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  id v72;
  char *v73;
  uint64_t ObjectType;
  id v75;
  id v76;
  id v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;

  v8 = v7;
  v65 = a7;
  v71 = a6;
  v72 = a5;
  v75 = a4;
  v76 = a3;
  v77 = a2;
  ObjectType = swift_getObjectType();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult?);
  MEMORY[0x1E0C80A78](v10);
  v70 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for HandshakeStateMachine();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v63 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v62 = (char *)&v51 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandshakeStateMachine?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v59 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v64 = (char *)&v51 - v20;
  v61 = type metadata accessor for P256.Signing.PublicKey();
  v60 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61);
  v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for NSFastEnumerationIterator();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v51 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(void (**)(void))(v13 + 56);
  v73 = &v8[OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_stateMachine];
  v69 = v12;
  v66 = v27;
  v27();
  v28 = &v8[OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_partialHandshakeResult];
  v29 = type metadata accessor for PartialHandshakeResult(0);
  v30 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v29 - 8) + 56);
  v68 = v29;
  v67 = v30;
  v30(v28, 1, 1);
  *(_QWORD *)&v8[OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_receivedSessionTickets] = MEMORY[0x1E0DEE9D8];
  v31 = OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_latestError;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_latestError] = 0;
  if (a1 && v77 && v76 && v75)
  {
    v57 = v28;
    v56 = v8;
    v32 = a1;
    v53 = v77;
    v55 = v76;
    v33 = v75;
    v54 = v32;
    NSArray.makeIterator()();
    NSFastEnumerationIterator.next()();
    if (v81)
    {
      v58 = MEMORY[0x1E0DEE9D8];
      do
      {
        while (1)
        {
          outlined init with take of Any(&v80, &v79);
          if ((swift_dynamicCast() & 1) != 0)
            break;
          NSFastEnumerationIterator.next()();
          if (!v81)
            goto LABEL_21;
        }
        v34 = v78;
        v79 = v78;
        outlined copy of Data._Representation(v78, *((unint64_t *)&v78 + 1));
        lazy protocol witness table accessor for type Data and conformance Data();
        P256.Signing.PublicKey.init<A>(derRepresentation:)();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v52 = v33;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v58 + 16) + 1, 1, v58);
        v37 = *(_QWORD *)(v58 + 16);
        v36 = *(_QWORD *)(v58 + 24);
        v38 = v37 + 1;
        if (v37 >= v36 >> 1)
        {
          v51 = v37 + 1;
          v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, v58);
          v38 = v51;
          v58 = v40;
        }
        v39 = v58;
        *(_QWORD *)(v58 + 16) = v38;
        (*(void (**)(unint64_t, char *, uint64_t))(v60 + 32))(v39+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(_QWORD *)(v60 + 72) * v37, v22, v61);
        outlined consume of Data._Representation(v34, *((unint64_t *)&v34 + 1));
        NSFastEnumerationIterator.next()();
        v33 = v52;
      }
      while (v81);
    }
    else
    {
      v58 = MEMORY[0x1E0DEE9D8];
    }
LABEL_21:
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    if (v71)
    {
      if (*(_QWORD *)(v71 + 16) == 2)
      {
        LODWORD(v61) = *(unsigned __int16 *)(v71 + 32);
        swift_bridgeObjectRelease();
        LODWORD(v71) = 0;
      }
      else
      {
        swift_bridgeObjectRelease();
        LODWORD(v61) = 0;
        LODWORD(v71) = 1;
      }
    }
    else
    {
      LODWORD(v61) = 0;
      LODWORD(v71) = 1;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v48 = v55;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v50 = v49;

    v77 = v50;
    v76 = v48;
    __asm { BR              X10 }
  }
  v41 = (uint64_t)v28;
  v42 = v8;
  swift_bridgeObjectRelease();
  if (one-time initialization token for logger != -1)
    swift_once();
  v43 = type metadata accessor for Logger();
  __swift_project_value_buffer(v43, (uint64_t)logger);
  v44 = Logger.logObject.getter();
  v45 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v46 = 0;
    _os_log_impl(&dword_1B0D50000, v44, v45, "Cannot start the handshake with NULL parameters", v46, 2u);
    MEMORY[0x1B5E11244](v46, -1, -1);
  }

  outlined destroy of HandshakeStateMachine?((uint64_t)v73, &demangling cache variable for type metadata for HandshakeStateMachine?);
  outlined destroy of HandshakeStateMachine?(v41, &demangling cache variable for type metadata for PartialHandshakeResult?);
  swift_bridgeObjectRelease();

  swift_deallocPartialClassInstance();
  return 0;
}

NSData_optional __swiftcall STLSHandshaker.getClientRandom()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandshakeStateMachine?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = v0 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_stateMachine;
  swift_beginAccess();
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v4, (uint64_t)v3, &demangling cache variable for type metadata for HandshakeStateMachine?);
  v5 = type metadata accessor for HandshakeStateMachine();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1)
  {
    v7 = xmmword_1B0DE7EA0;
    v8 = 0;
    ByteBuffer.writeRandom(_:)(*(_QWORD *)&v3[*(int *)(v5 + 32)], *(_QWORD *)&v3[*(int *)(v5 + 32) + 8], *(_QWORD *)&v3[*(int *)(v5 + 32) + 16], *(_QWORD *)&v3[*(int *)(v5 + 32) + 24]);
    v6 = v7;
    outlined destroy of PartialHandshakeResult((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for HandshakeStateMachine);
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1B0D805A0);
}

Swift::Bool __swiftcall STLSHandshaker.hasSessionState()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_receivedSessionTickets;
  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)v1 + 16) != 0;
}

Swift::Bool __swiftcall STLSHandshaker.getEarlyDataAccepted()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char v7;
  char v8;
  uint64_t v9;

  v1 = type metadata accessor for HandshakeStateMachine();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_stateMachine;
  swift_beginAccess();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v5, 1, v1))
    return 0;
  outlined init with copy of PartialHandshakeResult(v5, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for HandshakeStateMachine);
  HandshakeStateMachine.earlyDataAccepted.getter();
  v8 = v7;
  outlined destroy of PartialHandshakeResult((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for HandshakeStateMachine);
  return v8 & 1;
}

uint64_t STLSHandshaker.validateAuthenticator(authenticator:context:keyParser:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized STLSHandshaker.validateAuthenticator(authenticator:context:keyParser:)(a1, a2, a5, a6);
}

uint64_t thunk for @callee_unowned @convention(block) (@unowned NSData) -> (@autoreleased NSData?)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Class isa;
  id v5;
  uint64_t v6;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v5 = (id)(*(uint64_t (**)(uint64_t, Class))(a3 + 16))(a3, isa);

  if (!v5)
    return 0;
  v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

id STLSHandshaker.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void STLSHandshaker.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id STLSHandshaker.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized Data.InlineData.init(_:count:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (a3 > 0xFF)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v3 = *(_QWORD *)(a1 + 16);
  if (__DataStorage._bytes.getter() && __OFSUB__(v3, __DataStorage._offset.getter()))
LABEL_8:
    __break(1u);
  __DataStorage._length.getter();
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  return 0;
}

{
  uint64_t v3;

  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (a3 > 0xFF)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v3 = (int)a1;
  if ((int)a1 > a1 >> 32)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (__DataStorage._bytes.getter() && __OFSUB__(v3, __DataStorage._offset.getter()))
LABEL_10:
    __break(1u);
  __DataStorage._length.getter();
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  return 0;
}

unint64_t specialized Data.InlineSlice.init(_:range:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)();
  if (a3 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a3 < (uint64_t)0xFFFFFFFF80000000 || a4 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  if (a4 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
  }
  if ((int)a4 < (int)a3)
    goto LABEL_10;
  return a3 | ((unint64_t)a4 << 32);
}

uint64_t specialized Data.InlineData.init(_:)(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t specialized STLSHandshaker.validateAuthenticator(authenticator:context:keyParser:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[4];

  v16[1] = a3;
  v16[2] = a4;
  v6 = type metadata accessor for ExportedAuthenticator();
  MEMORY[0x1E0C80A78](v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandshakeStateMachine?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for HandshakeStateMachine();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v4 + OBJC_IVAR____TtC10nwswifttls14STLSHandshaker_stateMachine;
  swift_beginAccess();
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v14, (uint64_t)v9, &demangling cache variable for type metadata for HandshakeStateMachine?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
  {
    outlined init with take of HandshakeStateMachine((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for HandshakeStateMachine);
    __asm { BR              X10 }
  }
  outlined destroy of HandshakeStateMachine?((uint64_t)v9, &demangling cache variable for type metadata for HandshakeStateMachine?);
  return MEMORY[0x1E0DEE9D8];
}

uint64_t partial apply for thunk for @callee_unowned @convention(block) (@unowned NSData) -> (@autoreleased NSData?)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return thunk for @callee_unowned @convention(block) (@unowned NSData) -> (@autoreleased NSData?)(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t CertificateVerify.algorithm.setter(uint64_t result)
{
  _WORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*CertificateVerify.algorithm.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t CertificateVerify.signature.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  outlined copy of Data._Representation(a2, a3);
  return a2;
}

uint64_t CertificateVerify.signature.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  result = outlined consume of Data._Representation(v3[1], v3[2]);
  v3[1] = a1;
  v3[2] = a2;
  v3[3] = a3;
  return result;
}

uint64_t (*CertificateVerify.signature.modify())()
{
  return CertificateVerify.algorithm.getter;
}

void CertificateVerify.hash(into:)(int a1, Swift::UInt16 a2, uint64_t a3, uint64_t a4)
{
  Hasher._combine(_:)(a2);
  __asm { BR              X10 }
}

uint64_t sub_1B0D81178()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v0) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0D811F8);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  return outlined consume of Data._Representation(v1, v0);
}

void static CertificateVerify.__derived_struct_equals(_:_:)(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  if (a1 == a5)
    specialized static ByteBuffer.== infix(_:_:)(a2, a3);
}

void CertificateVerify.hashValue.getter(Swift::UInt16 a1, uint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  __asm { BR              X10 }
}

Swift::Int sub_1B0D81298()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v0) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0D81328);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v1, v0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hashValue.getter in conformance CertificateVerify()
{
  uint64_t v0;

  CertificateVerify.hashValue.getter(*(_WORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance CertificateVerify()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  Hasher._combine(_:)(*(_WORD *)v0);
  __asm { BR              X10 }
}

uint64_t sub_1B0D81394()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v1) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0D81414);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  return outlined consume of Data._Representation(v0, v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance CertificateVerify()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt16 v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_WORD *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_1B0D8147C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v1) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0D8150CLL);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v1);
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance CertificateVerify(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (*a1 == *a2)
    specialized static ByteBuffer.== infix(_:_:)(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2));
}

uint64_t static CertificateVerify.handshakeType.getter()
{
  return 15;
}

void CertificateVerify.write(into:)(uint64_t a1, unsigned int a2)
{
  __int16 v3;
  _QWORD v4[6];

  v4[5] = *MEMORY[0x1E0C80C00];
  v3 = bswap32(a2) >> 16;
  v4[3] = MEMORY[0x1E0DEAC20];
  v4[4] = MEMORY[0x1E0CB1AA8];
  v4[0] = &v3;
  v4[1] = v4;
  __swift_project_boxed_opaque_existential_1(v4, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  __asm { BR              X12 }
}

uint64_t sub_1B0D815FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, __int16 a12, __int16 *a13, __int16 **a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  a12 = 0;
  a16 = v18;
  a17 = v19;
  a13 = &a12;
  a14 = &a13;
  __swift_project_boxed_opaque_existential_1(&a13, v18);
  Data._Representation.append(contentsOf:)();
  v20 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, _QWORD))((char *)&loc_1B0D81654 + *((int *)qword_1B0D817A0 + (v17 >> 62))))(v20, 0);
}

void sub_1B0D81668()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (BYTE6(v0) >= v1)
  {
    Data._Representation.subscript.getter();
    v3 = v2;
    Data.append(_:)();
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1B0D81780);
}

uint64_t CertificateVerify.init(bytes:)(uint64_t *a1)
{
  return specialized CertificateVerify.init(bytes:)(a1);
}

void protocol witness for HandshakeMessageProtocol.write(into:) in conformance CertificateVerify(uint64_t a1)
{
  unsigned __int16 *v1;

  CertificateVerify.write(into:)(a1, *v1);
}

uint64_t protocol witness for HandshakeMessageProtocol.init(bytes:) in conformance CertificateVerify@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = specialized CertificateVerify.init(bytes:)(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t variable initialization expression of ExportedAuthenticator.parser()
{
  return 0;
}

uint64_t variable initialization expression of Extension.EarlyData.maxEarlyDataSize()
{
  return 0x100000000;
}

uint64_t variable initialization expression of HandshakeState.IdleState.sessionToResume@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of STLSHandshaker.stateMachine((uint64_t (*)(_QWORD))type metadata accessor for SessionTicket, a1);
}

uint64_t variable initialization expression of HandshakeState.EncryptedExtensionsState.earlyDataAccepted()
{
  return 0;
}

uint64_t variable initialization expression of HandshakeState.EncryptedExtensionsState.SessionData.NewSession.serverName()
{
  return 0;
}

uint64_t variable initialization expression of HandshakeStateMachine.Configuration.ticketRequest()
{
  return 0x10000;
}

uint64_t variable initialization expression of PartialHandshakeResult.newEncryptionLevel@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of STLSHandshaker.stateMachine(type metadata accessor for PartialHandshakeResult.NewEncryptionLevel, a1);
}

uint64_t variable initialization expression of PartialHandshakeResult.sessionTicket()
{
  return 0;
}

uint64_t specialized CertificateVerify.init(bytes:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  specialized ByteBuffer.readInteger<A>(as:)();
  if ((v3 & 0x10000) == 0)
  {
    v1 = v3;
    v5 = *a1;
    v4 = a1[1];
    v6 = a1[2];
    outlined copy of Data._Representation(*a1, v4);
    specialized ByteBuffer.readInteger<A>(as:)();
    if ((v7 & 0x10000) == 0)
    {
      ByteBuffer.readSlice(length:)((unsigned __int16)v7);
      if (v8 >> 60 != 15)
        __asm { BR              X11 }
    }
    outlined consume of Data._Representation(*a1, a1[1]);
    *a1 = v5;
    a1[1] = v4;
    a1[2] = v6;
  }
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  v9 = swift_allocError();
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  swift_willThrow(v9);
  return v1;
}

uint64_t sub_1B0D819BC@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (__OFSUB__(BYTE6(a2), a1))
  {
    __break(1u);
    goto LABEL_5;
  }
  if (__OFADD__(a1, BYTE6(a2) - a1))
  {
LABEL_5:
    __break(1u);
    JUMPOUT(0x1B0D81B50);
  }
  return ((uint64_t (*)(void))((char *)&loc_1B0D819F0 + dword_1B0D81B6C[a3]))();
}

unint64_t lazy protocol witness table accessor for type CertificateVerify and conformance CertificateVerify()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CertificateVerify and conformance CertificateVerify;
  if (!lazy protocol witness table cache variable for type CertificateVerify and conformance CertificateVerify)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for CertificateVerify, &type metadata for CertificateVerify);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CertificateVerify and conformance CertificateVerify);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CertificateVerify(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t initializeWithCopy for CertificateVerify(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for CertificateVerify(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for CertificateVerify(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v4, v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CertificateVerify(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CertificateVerify(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CertificateVerify()
{
  return &type metadata for CertificateVerify;
}

unint64_t lazy protocol witness table accessor for type TLSError and conformance TLSError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TLSError and conformance TLSError;
  if (!lazy protocol witness table cache variable for type TLSError and conformance TLSError)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for TLSError, &type metadata for TLSError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TLSError and conformance TLSError);
  }
  return result;
}

uint64_t PeerCertificateBundle.init(expectedCertificateType:peerCertificateMessage:)(char a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52[4];

  v9 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  MEMORY[0x1E0C80A78](v9);
  if (!a1)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)logger);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_1B0D50000, v22, v23, "invalid attempt to negotiate x.509 auth", v24, 2u);
      MEMORY[0x1B5E11244](v24, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v25 = swift_allocError();
    v27 = 6;
    goto LABEL_25;
  }
  if (a1 != 2)
  {
    v51 = a3;
    if (one-time initialization token for logger != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)logger);
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = swift_slowAlloc();
      v52[0] = v32;
      *(_DWORD *)v31 = 136446210;
      v33 = CertificateType.description.getter(a1);
      v52[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0D50000, v29, v30, "unsupported certificate type from peer: %{public}s", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E11244](v32, -1, -1);
      MEMORY[0x1B5E11244](v31, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v35 = swift_allocError();
    *(_DWORD *)v36 = 4;
    *(_BYTE *)(v36 + 4) = 1;
    swift_willThrow(v35);
    v37 = a2;
    v38 = v51;
    goto LABEL_26;
  }
  v10 = a5[2];
  if (v10 != 1)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)logger);
    outlined copy of Data._Representation(a2, a3);
    swift_bridgeObjectRetain();
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v42 = 134349056;
      v52[0] = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      outlined consume of Data._Representation(a2, a3);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0D50000, v40, v41, "invalid number of public key entries: %{public}ld", v42, 0xCu);
      MEMORY[0x1B5E11244](v42, -1, -1);

    }
    else
    {
      outlined consume of Data._Representation(a2, a3);

      swift_bridgeObjectRelease();
    }
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v25 = swift_allocError();
    v27 = 5;
LABEL_25:
    *(_DWORD *)v26 = v27;
    *(_BYTE *)(v26 + 4) = 1;
    swift_willThrow(v25);
    v37 = a2;
    v38 = a3;
LABEL_26:
    outlined consume of Data._Representation(v37, v38);
    return swift_bridgeObjectRelease();
  }
  v11 = a5;
  v12 = a5[4];
  v13 = a5[5];
  v14 = *(_QWORD *)(v11[7] + 16);
  if (!v14)
  {
    outlined copy of Data._Representation(v12, v13);
    v44 = one-time initialization token for logger;
    swift_bridgeObjectRetain();
    if (v44 != -1)
      swift_once();
    v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)logger);
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v48 = 0;
      _os_log_impl(&dword_1B0D50000, v46, v47, "constructing public key from peer bytes", v48, 2u);
      MEMORY[0x1B5E11244](v48, -1, -1);
    }

    __asm { BR              X10 }
  }
  outlined copy of Data._Representation(v12, v13);
  v15 = one-time initialization token for logger;
  swift_bridgeObjectRetain();
  v16 = v12;
  if (v15 != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)logger);
  outlined copy of Data._Representation(v12, v13);
  swift_bridgeObjectRetain();
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v52[0] = v14;
    v20 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v20 = 134349056;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined consume of Data._Representation(v16, v13);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0D50000, v18, v19, "invalid number of extensions: %{public}ld", v20, 0xCu);
    MEMORY[0x1B5E11244](v20, -1, -1);

  }
  else
  {
    outlined consume of Data._Representation(v16, v13);

    swift_bridgeObjectRelease();
  }
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  v49 = swift_allocError();
  *(_DWORD *)v50 = 5;
  *(_BYTE *)(v50 + 4) = 1;
  swift_willThrow(v49);
  outlined consume of Data._Representation(a2, a3);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v16, v13);
  return swift_bridgeObjectRelease();
}

uint64_t PeerCertificateBundle.verifyServerCertificateVerifySignature(message:validKeys:keyScheduler:)(__int16 a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint8_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v46[2];
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57[4];

  v53 = a4;
  v7 = v6;
  v51 = a5;
  v55 = a2;
  v56 = a3;
  v10 = type metadata accessor for P256.Signing.ECDSASignature();
  v52 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for P256.Signing.PublicKey();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v50 = (char *)v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v46 - v17;
  v19 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  v20 = MEMORY[0x1E0C80A78](v19);
  v48 = (char *)v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)v46 - v22;
  v49 = v7;
  outlined init with copy of PeerCertificateBundle.Bundle(v7, (uint64_t)v46 - v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v23, 1, v13) == 1)
  {
    __break(1u);
    JUMPOUT(0x1B0D82E18);
  }
  v47 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v47(v18, v23, v13);
  if (a1 == 1027)
  {
    v46[1] = v12;
    if (one-time initialization token for logger != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    v46[0] = __swift_project_value_buffer(v24, (uint64_t)logger);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled((os_log_t)v25, v26))
    {
      v27 = v18;
      v28 = v14;
      v29 = v13;
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_1B0D50000, (os_log_t)v25, v26, "validating signature from peer server", v30, 2u);
      v31 = v30;
      v13 = v29;
      v14 = v28;
      v18 = v27;
      MEMORY[0x1B5E11244](v31, -1, -1);
    }

    LOBYTE(v25) = a6;
    v32 = v54;
    specialized SessionKeyManager.dataToSignInServerCertificateVerify()();
    if (!v32)
    {
      v54 = v33;
      __asm { BR              X10 }
    }
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)logger);
    v36 = v55;
    v35 = v56;
    outlined copy of Data._Representation(v55, v56);
    outlined copy of Data._Representation(v36, v35);
    v25 = Logger.logObject.getter();
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled((os_log_t)v25, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      v53 = swift_slowAlloc();
      v57[0] = v53;
      v54 = v18;
      *(_DWORD *)v38 = 136446210;
      v39 = SignatureScheme.description.getter(a1);
      v57[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, v57);
      v18 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v41 = v56;
      outlined consume of Data._Representation(v36, v56);
      outlined consume of Data._Representation(v36, v41);
      _os_log_impl(&dword_1B0D50000, (os_log_t)v25, v37, "unsupported algorithm from peer: %{public}s", v38, 0xCu);
      v42 = v53;
      swift_arrayDestroy();
      MEMORY[0x1B5E11244](v42, -1, -1);
      MEMORY[0x1B5E11244](v38, -1, -1);
    }
    else
    {
      outlined consume of Data._Representation(v36, v35);
      outlined consume of Data._Representation(v36, v35);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v43 = swift_allocError();
    *(_DWORD *)v44 = 6;
    *(_BYTE *)(v44 + 4) = 1;
    swift_willThrow(v43);
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
  return v25 & 1;
}

void specialized SessionKeyManager.dataToSignInServerCertificateVerify()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
  MEMORY[0x1E0C80A78](v1);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v3 = MEMORY[0x1E0C80A78](v2);
  MEMORY[0x1E0C80A78](v3);
  outlined init with copy of SessionKeyManager<SHA384>.State(v0, (uint64_t)&v6 - v4);
  v5 = (char *)sub_1B0D82F1C + 4 * byte_1B0DE7FC0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_1B0D82F1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  outlined destroy of HandshakeStateMachine?(v2, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  if (one-time initialization token for logger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  outlined init with copy of SessionKeyManager<SHA384>.State(v1, v0);
  v4 = (char *)&loc_1B0D82FB4 + 4 * byte_1B0DE7FC5[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

Swift::Bool __swiftcall PeerCertificateBundle.wouldBeTrusted(forKeys:)(Swift::OpaquePointer forKeys)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  _BYTE v15[16];

  v2 = v1;
  v4 = type metadata accessor for P256.Signing.PublicKey();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of PeerCertificateBundle.Bundle(v2, (uint64_t)v10);
  v11 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
  if (v11 == 1)
  {
    __break(1u);
  }
  else
  {
    v12 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v7, v10, v4);
    MEMORY[0x1E0C80A78](v12);
    *(_QWORD *)&v15[-16] = v7;
    v13 = specialized Sequence.contains(where:)((uint64_t (*)(char *))closure #1 in PeerCertificateBundle.wouldBeTrusted(forKeys:)partial apply, (_BOOL8)&v15[-32], (uint64_t)forKeys._rawValue);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    LOBYTE(v11) = v13;
  }
  return v11;
}

uint64_t *PeerCertificateBundle.serverCertificateTypes.unsafeMutableAddressor()
{
  if (one-time initialization token for serverCertificateTypes != -1)
    swift_once();
  return &static PeerCertificateBundle.serverCertificateTypes;
}

uint64_t static PeerCertificateBundle.serverCertificateTypes.getter()
{
  uint64_t v0;

  if (one-time initialization token for serverCertificateTypes != -1)
    swift_once();
  v0 = static PeerCertificateBundle.serverCertificateTypes;
  outlined copy of Extension.ServerCertificateType(static PeerCertificateBundle.serverCertificateTypes, byte_1ED2CDA58);
  return v0;
}

uint64_t ByteBuffer.writePeerCertificateBundle(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE v14[15];
  char v15;
  char *v16;
  char **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = type metadata accessor for P256.Signing.PublicKey();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of PeerCertificateBundle.Bundle(a1, (uint64_t)v8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    v15 = 1;
    v18 = MEMORY[0x1E0DEAC20];
    v19 = MEMORY[0x1E0CB1AA8];
    v16 = &v15;
    v17 = &v16;
    __swift_project_boxed_opaque_existential_1(&v16, MEMORY[0x1E0DEAC20]);
    Data._Representation.append(contentsOf:)();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 32))(v5, v8, v2);
    v15 = 0;
    v18 = MEMORY[0x1E0DEAC20];
    v19 = MEMORY[0x1E0CB1AA8];
    v16 = &v15;
    v17 = &v16;
    __swift_project_boxed_opaque_existential_1(&v16, MEMORY[0x1E0DEAC20]);
    Data._Representation.append(contentsOf:)();
    v10 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
    v11 = MEMORY[0x1B5E107B8](v10);
    v13 = v12;
    specialized ByteBuffer.writeLengthPrefixedBytes<A>(_:)(v11, v12);
    outlined consume of Data._Representation(v11, v13);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  }
}

Swift::Int specialized ByteBuffer.writeLengthPrefixedBytes<A>(_:)(uint64_t a1, unint64_t a2)
{
  Swift::Int v4;
  Swift::Int result;
  unint64_t v6;
  _QWORD v7[6];

  v7[5] = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x1000000000000000) != 0)
  {
    v4 = String.UTF8View._foreignCount()();
    if (v4 < 0)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v4 = HIBYTE(a2) & 0xF;
  }
  else
  {
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v6 = bswap64(v4);
  v7[3] = MEMORY[0x1E0DEAC20];
  v7[4] = MEMORY[0x1E0CB1AA8];
  v7[0] = &v6;
  v7[1] = v7;
  __swift_project_boxed_opaque_existential_1(v7, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  result = specialized Data.append<A>(contentsOf:)(a1, a2);
  if ((a2 & 0x1000000000000000) != 0)
    return String.UTF8View._foreignCount()();
  return result;
}

uint64_t specialized SessionKeyManager.State.HandshakeSecret.dataToSignInServerCertificateVerify.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE v6[23];
  char v7;
  _QWORD v8[5];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v0 = type metadata accessor for SHA384Digest();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = xmmword_1B0DE7EA0;
  v10 = 0;
  specialized Data.append<A>(contentsOf:)();
  specialized Data.append<A>(contentsOf:)(0xD000000000000021, 0x80000001B0DEBB50);
  if ((0x80000001B0DEBB50 & 0x1000000000000000) != 0)
    String.UTF8View._foreignCount()();
  v7 = 0;
  v8[3] = MEMORY[0x1E0DEAC20];
  v8[4] = MEMORY[0x1E0CB1AA8];
  v8[0] = &v7;
  v8[1] = v8;
  __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  type metadata accessor for SHA384();
  lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9958], MEMORY[0x1E0CA9950]);
  v4 = dispatch thunk of HashFunction.finalize()();
  MEMORY[0x1E0C80A78](v4);
  *(_QWORD *)&v6[-16] = &v9;
  lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9328], MEMORY[0x1E0CA9310]);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
  return v9;
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

void *closure #1 in serialize<A>(_:at:)(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with take of PeerCertificateBundle.Bundle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of PeerCertificateBundle.Bundle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized static PeerCertificateBundle.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  uint64_t result;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;

  v4 = type metadata accessor for P256.Signing.PublicKey();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v29 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PeerCertificateBundle.Bundle, PeerCertificateBundle.Bundle));
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of PeerCertificateBundle.Bundle(a1, (uint64_t)v14);
  outlined init with copy of PeerCertificateBundle.Bundle(a2, v15);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  LODWORD(a2) = v16(v14, 1, v4);
  result = v16((char *)v15, 1, v4);
  if ((_DWORD)a2 == 1)
  {
    if ((_DWORD)result == 1)
      return result;
    outlined destroy of PeerCertificateBundle.Bundle(v15);
  }
  else if ((_DWORD)result == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  }
  else
  {
    v18 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v18(v10, v14, v4);
    v19 = ((uint64_t (*)(char *, uint64_t, uint64_t))v18)(v8, v15, v4);
    v20 = MEMORY[0x1B5E107B8](v19);
    v22 = v21;
    v23 = MEMORY[0x1B5E107B8]();
    v25 = v24;
    specialized static Data.== infix(_:_:)(v20, v22);
    v27 = v26;
    outlined consume of Data._Representation(v23, v25);
    outlined consume of Data._Representation(v20, v22);
    v28 = *(void (**)(char *, uint64_t))(v5 + 8);
    v28(v8, v4);
    v28(v10, v4);
    if ((v27 & 1) != 0)
      return 1;
  }
  return 0;
}

uint64_t *initializeBufferWithCopyOfBuffer for PeerCertificateBundle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(type metadata accessor for PeerCertificateBundle.Bundle(0) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for P256.Signing.PublicKey();
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(v4 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
  }
  return a1;
}

void *assignWithCopy for PeerCertificateBundle(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = type metadata accessor for P256.Signing.PublicKey();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v9 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *initializeWithTake for PeerCertificateBundle(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for P256.Signing.PublicKey();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithTake for PeerCertificateBundle(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = type metadata accessor for P256.Signing.PublicKey();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v9 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t sub_1B0D845C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1B0D845FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t *initializeBufferWithCopyOfBuffer for PeerCertificateBundle.Bundle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for P256.Signing.PublicKey();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

void *assignWithCopy for PeerCertificateBundle.Bundle(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for P256.Signing.PublicKey();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *initializeWithTake for PeerCertificateBundle.Bundle(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for P256.Signing.PublicKey();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithTake for PeerCertificateBundle.Bundle(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for P256.Signing.PublicKey();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_1B0D84988(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = type metadata accessor for P256.Signing.PublicKey();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PeerCertificateBundle.Bundle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0D849E0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = type metadata accessor for P256.Signing.PublicKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t getEnumTag for PeerCertificateBundle.Bundle(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for P256.Signing.PublicKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
}

uint64_t destructiveInjectEnumTag for PeerCertificateBundle.Bundle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for P256.Signing.PublicKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 1, v4);
}

uint64_t specialized static PeerCertificateBundle.Bundle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  char v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v30;

  v4 = type metadata accessor for P256.Signing.PublicKey();
  v5 = *(_QWORD **)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v30 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PeerCertificateBundle.Bundle, PeerCertificateBundle.Bundle));
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of PeerCertificateBundle.Bundle(a1, (uint64_t)v14);
  outlined init with copy of PeerCertificateBundle.Bundle(a2, v15);
  v16 = (uint64_t (*)(char *, uint64_t, uint64_t))v5[6];
  LODWORD(a2) = v16(v14, 1, v4);
  v17 = v16((char *)v15, 1, v4);
  if ((_DWORD)a2 != 1)
  {
    if (v17 != 1)
    {
      v19 = (void (*)(char *, char *, uint64_t))v5[4];
      v19(v10, v14, v4);
      v20 = ((uint64_t (*)(char *, uint64_t, uint64_t))v19)(v8, v15, v4);
      v21 = MEMORY[0x1B5E107B8](v20);
      v23 = v22;
      v24 = MEMORY[0x1B5E107B8]();
      v26 = v25;
      specialized static Data.== infix(_:_:)(v21, v23);
      v18 = v27;
      outlined consume of Data._Representation(v24, v26);
      outlined consume of Data._Representation(v21, v23);
      v28 = (void (*)(char *, uint64_t))v5[1];
      v28(v8, v4);
      v28(v10, v4);
      return v18 & 1;
    }
    ((void (*)(char *, uint64_t))v5[1])(v14, v4);
    goto LABEL_7;
  }
  if (v17 != 1)
  {
    outlined destroy of PeerCertificateBundle.Bundle(v15);
LABEL_7:
    v18 = 0;
    return v18 & 1;
  }
  v18 = 1;
  return v18 & 1;
}

uint64_t outlined destroy of PeerCertificateBundle.Bundle(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PeerCertificateBundle.Bundle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of SessionKeyManager<SHA384>.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in SessionKeyManager.State.HandshakeSecret.dataToSignInServerCertificateVerify.getter(uint64_t a1, uint64_t a2)
{
  return closure #1 in SessionKeyManager.generateHashForAuthenticator(transcript:)(a1, a2);
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t closure #1 in PeerCertificateBundle.wouldBeTrusted(forKeys:)partial apply()
{
  return partial apply for closure #1 in PeerCertificateBundle.wouldBeTrusted(forKeys:)() & 1;
}

double LegacySessionID.init<A>(_:)@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  double result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, a1, a2);
  v9 = dispatch thunk of Collection.count.getter();
  v10 = *(void (**)(char *, uint64_t))(v6 + 8);
  v10(v8, a2);
  if (v9 > 32)
    __break(1u);
  v14 = 0u;
  v15 = 0u;
  UnsafeMutableRawBufferPointer.copyBytes<A>(from:)();
  v11 = dispatch thunk of Collection.count.getter();
  v10(a1, a2);
  result = *(double *)&v14;
  v13 = v15;
  *(_OWORD *)a3 = v14;
  *(_OWORD *)(a3 + 16) = v13;
  *(_QWORD *)(a3 + 32) = v11;
  return result;
}

uint64_t static LegacySessionID.random()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v7 = 0;
  MEMORY[0x1B5E11250](&v7, 8);
  v2 = v7;
  v7 = 0;
  MEMORY[0x1B5E11250](&v7, 8);
  v3 = v7;
  v7 = 0;
  MEMORY[0x1B5E11250](&v7, 8);
  v4 = v7;
  v7 = 0;
  result = MEMORY[0x1B5E11250](&v7, 8);
  v6 = v7;
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v6;
  a1[4] = 32;
  return result;
}

double static LegacySessionID.zero.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

BOOL static LegacySessionID.== infix(_:_:)(int64x2_t *a1, int64x2_t *a2)
{
  return (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*a1, *a2), (int32x4_t)vceqq_s64(a1[1], a2[1]))), 0xFuLL))) & 1) != 0&& a1[2].i64[0] == a2[2].i64[0];
}

void LegacySessionID.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;

  Hasher._combine(_:)(v0[4]);
  v1 = v0[1];
  v3 = v0[2];
  v2 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v2);
}

Swift::Int LegacySessionID.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(v0[4]);
  v1 = v0[1];
  v3 = v0[2];
  v2 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LegacySessionID()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt v5;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance LegacySessionID()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher._combine(_:)(v0[4]);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LegacySessionID()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt v5;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LegacySessionID(int64x2_t *a1, int64x2_t *a2)
{
  return (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*a1, *a2), (int32x4_t)vceqq_s64(a1[1], a2[1]))), 0xFuLL))) & 1) != 0&& a1[2].i64[0] == a2[2].i64[0];
}

uint64_t sub_1B0D85298()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type LegacySessionID and conformance LegacySessionID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LegacySessionID and conformance LegacySessionID;
  if (!lazy protocol witness table cache variable for type LegacySessionID and conformance LegacySessionID)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for LegacySessionID, &type metadata for LegacySessionID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LegacySessionID and conformance LegacySessionID);
  }
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for LegacySessionID(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LegacySessionID(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

void Extension.type.getter()
{
  __int128 *v0;
  _BYTE v1[72];

  outlined init with take of Extension(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1B0D853A4()
{
  return 16;
}

uint64_t outlined init with take of Extension.TicketRequest(__int16 *a1, uint64_t a2)
{
  __swift_memcpy3_1(a2, a1);
  return a2;
}

void Extension.hash(into:)()
{
  __int128 *v0;
  uint64_t v1;
  _BYTE v2[88];

  outlined init with take of Extension(v0, (uint64_t)&v1);
  outlined init with take of Extension(v0, (uint64_t)v2);
  __asm { BR              X10 }
}

uint64_t sub_1B0D854F4()
{
  uint64_t v0;
  unint64_t v2;

  Hasher._combine(_:)(0);
  if (v2 >> 60 != 15)
  {
    Hasher._combine(_:)(0);
    __asm { BR              X10 }
  }
  Hasher._combine(_:)(1uLL);
  return outlined release of Extension(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Extension);
}

void sub_1B0D85AFC()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  outlined copy of ByteBuffer?(v1, v0);
  outlined copy of Data._Representation(v2, v3);
  outlined copy of Data._Representation(v2, v3);
  JUMPOUT(0x1B0D85B30);
}

void sub_1B0D85BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  outlined copy of Extension.KeyShare(v11, v10, v12);
  outlined copy of Data._Representation(v13, a10);
  outlined copy of Data._Representation(v13, a10);
  JUMPOUT(0x1B0D85BE0);
}

Swift::Int Extension.hashValue.getter()
{
  Hasher.init(_seed:)();
  Extension.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Extension()
{
  __int128 *v0;
  _BYTE v2[40];

  outlined init with take of Extension(v0, (uint64_t)v2);
  Hasher.init(_seed:)();
  Extension.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Extension()
{
  __int128 *v0;
  _BYTE v1[40];

  outlined init with take of Extension(v0, (uint64_t)v1);
  Extension.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Extension()
{
  __int128 *v0;
  _BYTE v2[40];

  outlined init with take of Extension(v0, (uint64_t)v2);
  Hasher.init(_seed:)();
  Extension.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Extension(__int128 *a1, __int128 *a2)
{
  char v3;
  __int128 v5[2];
  __int128 v6[2];

  outlined init with take of Extension(a1, (uint64_t)v5);
  outlined init with take of Extension(a2, (uint64_t)v6);
  specialized static Extension.__derived_enum_equals(_:_:)(v5, v6);
  return v3 & 1;
}

void ByteBuffer.writeExtension(_:)(__int128 *a1)
{
  _BYTE v1[72];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  outlined init with take of Extension(a1, (uint64_t)v1);
  __asm { BR              X11 }
}

uint64_t sub_1B0D85EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, __int16 a11, __int16 *a12, __int16 **a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;

  a11 = __rev16(0x10u);
  a15 = MEMORY[0x1E0DEAC20];
  a16 = MEMORY[0x1E0CB1AA8];
  a12 = &a11;
  a13 = &a12;
  __swift_project_boxed_opaque_existential_1(&a12, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  v17 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&a12);
  return ((uint64_t (*)(uint64_t))((char *)&loc_1B0D85FB4 + dword_1B0D860AC[*(_QWORD *)(v16 + 8) >> 62]))(v17);
}

unint64_t sub_1B0D85FC4()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int16 v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v5 = BYTE6(v0);
  v9 = 0;
  v11 = v3;
  v12 = v4;
  v10[0] = &v9;
  v10[1] = v10;
  __swift_project_boxed_opaque_existential_1(v10, v3);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  closure #1 in ByteBuffer.writeExtension(_:)(v2, v1);
  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v7 = v6;
  if (v6 >> 16)
    goto LABEL_5;
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v6, v5);
  return v7 + 4;
}

void ByteBuffer.readExtension(messageType:helloRetryRequest:)()
{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 16), 2))
    __asm { BR              X11 }
  __break(1u);
  JUMPOUT(0x1B0D86408);
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
    __asm { BR              X9 }
}

{
  Swift::UInt v3;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
    __asm { BR              X9 }
}

{
  Swift::UInt v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 48);
    Hasher._combine(_:)(*(_WORD *)(a2 + 32));
    __asm { BR              X9 }
  }
}

{
  Swift::UInt v3;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
    __asm { BR              X9 }
}

void specialized static Extension.__derived_enum_equals(_:_:)(__int128 *a1, __int128 *a2)
{
  uint64_t v3;
  _BYTE v4[104];

  outlined init with take of Extension(a2, (uint64_t)&v3);
  outlined init with take of Extension(a1, (uint64_t)v4);
  __asm { BR              X10 }
}

uint64_t sub_1B0D86AC0()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  __n128 v11[2];
  __n128 v12[2];
  __n128 v13[2];
  char v14;
  __n128 v15;

  outlined init with take of Extension.ServerName(&v15, (__n128 *)(v4 - 144));
  outlined init with take of Extension(v1, (uint64_t)v13);
  if (v14)
    goto LABEL_9;
  outlined init with take of Extension.ServerName(v13, v11);
  outlined init with take of Extension.ServerName((__n128 *)(v4 - 144), (__n128 *)(v4 - 112));
  v5 = *(_QWORD *)(v4 - 104);
  if (v5 >> 60 != 15)
  {
    v7 = *(_QWORD *)(v4 - 112);
    outlined init with take of Extension.ServerName(v11, v12);
    if (v12[0].n128_u64[1] >> 60 != 15)
    {
      outlined release of Extension((uint64_t)v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Extension);
      outlined release of Extension(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Extension);
      specialized static ByteBuffer.== infix(_:_:)(v7, v5);
      v9 = v8;
      outlined release of Extension((uint64_t)v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Extension);
      outlined release of Extension(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Extension);
      if ((v9 & 1) != 0)
      {
        v6 = 1;
        return v6 & 1;
      }
    }
LABEL_9:
    v6 = 0;
    return v6 & 1;
  }
  outlined init with take of Extension.ServerName(v11, v12);
  if (v12[0].n128_u64[1] >> 60 != 15)
  {
    outlined release of Extension(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Extension);
    goto LABEL_9;
  }
  outlined copy of ByteBuffer?(v2, v3);
  v6 = 1;
  return v6 & 1;
}

unint64_t lazy protocol witness table accessor for type Extension and conformance Extension()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Extension and conformance Extension;
  if (!lazy protocol witness table cache variable for type Extension and conformance Extension)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Extension, &type metadata for Extension);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension and conformance Extension);
  }
  return result;
}

uint64_t initializeWithCopy for Extension(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of Extension(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for Extension(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of Extension(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of Extension(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Extension(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of Extension(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Extension(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF3 && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 243);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 0xD)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Extension(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 243;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF3)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xF3)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for Extension(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t destructiveInjectEnumTag for Extension(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

uint64_t ProtocolVersion.major.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t ProtocolVersion.minor.getter(__int16 a1)
{
  return HIBYTE(a1);
}

uint64_t ProtocolVersion.minor.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*ProtocolVersion.minor.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t ProtocolVersion.init(major:minor:)(unsigned __int8 a1, int a2)
{
  return a1 | (a2 << 8);
}

void *ProtocolVersion.sslv3.unsafeMutableAddressor()
{
  return &static ProtocolVersion.sslv3;
}

uint64_t static ProtocolVersion.sslv3.getter()
{
  return 3;
}

void *ProtocolVersion.tlsv10.unsafeMutableAddressor()
{
  return &static ProtocolVersion.tlsv10;
}

uint64_t static ProtocolVersion.tlsv10.getter()
{
  return 259;
}

void *ProtocolVersion.tlsv11.unsafeMutableAddressor()
{
  return &static ProtocolVersion.tlsv11;
}

uint64_t static ProtocolVersion.tlsv11.getter()
{
  return 515;
}

void *ProtocolVersion.tlsv12.unsafeMutableAddressor()
{
  return &static ProtocolVersion.tlsv12;
}

uint64_t static ProtocolVersion.tlsv12.getter()
{
  return 771;
}

void *ProtocolVersion.tlsv13.unsafeMutableAddressor()
{
  return &static ProtocolVersion.tlsv13;
}

uint64_t static ProtocolVersion.tlsv13.getter()
{
  return 1027;
}

void ProtocolVersion.hash(into:)(int a1, __int16 a2)
{
  Swift::UInt8 v2;

  v2 = HIBYTE(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
}

BOOL static ProtocolVersion.__derived_struct_equals(_:_:)(__int16 a1, __int16 a2)
{
  return a1 == a2;
}

Swift::Int ProtocolVersion.hashValue.getter(__int16 a1)
{
  Swift::UInt8 v1;
  Swift::UInt8 v2;

  v1 = a1;
  v2 = HIBYTE(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ProtocolVersion()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ProtocolVersion()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ProtocolVersion()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ProtocolVersion(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

unint64_t ProtocolVersion.description.getter(__int16 a1)
{
  char v1;
  unint64_t result;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  v1 = HIBYTE(a1);
  if (a1 == 3)
  {
    result = 0x33766C73732ELL;
    switch(v1)
    {
      case 0:
        return result;
      case 1:
        result = 0x303176736C742ELL;
        break;
      case 2:
        result = 0x313176736C742ELL;
        break;
      case 3:
        result = 0x323176736C742ELL;
        break;
      case 4:
        result = 0x333176736C742ELL;
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 0x3A726F6E696D202CLL;
    v4._object = (void *)0xE900000000000020;
    String.append(_:)(v4);
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 41;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    return 0xD000000000000017;
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ProtocolVersion()
{
  __int16 *v0;

  return ProtocolVersion.description.getter(*v0);
}

uint64_t ByteBuffer.writeProtocolVersion(_:)(__int16 a1)
{
  __int16 v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v2 = a1;
  v3[3] = MEMORY[0x1E0DEAC20];
  v3[4] = MEMORY[0x1E0CB1AA8];
  v3[0] = &v2;
  v3[1] = v3;
  __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  return 2;
}

void ByteBuffer.setProtocolVersion(_:at:)(unsigned int a1, uint64_t a2)
{
  specialized ByteBuffer.setInteger<A>(_:at:as:)(bswap32(a1) >> 16, a2);
}

void ByteBuffer.readProtocolVersion()()
{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 16), 2))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0D87A1CLL);
}

unint64_t lazy protocol witness table accessor for type ProtocolVersion and conformance ProtocolVersion()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProtocolVersion and conformance ProtocolVersion;
  if (!lazy protocol witness table cache variable for type ProtocolVersion and conformance ProtocolVersion)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for ProtocolVersion, &type metadata for ProtocolVersion);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProtocolVersion and conformance ProtocolVersion);
  }
  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ProtocolVersion(unsigned __int16 *a1, int a2)
{
  int v2;
  int v3;
  int v4;

  if (!a2)
    return 0;
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if ((a2 + 0xFFFF) < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 0xFFFF;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        return 0;
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 0xFFFF;
  }
  return 0;
}

uint64_t storeEnumTagSinglePayload for ProtocolVersion(_WORD *a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 0xFFFF) <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if ((a3 + 0xFFFF) < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (!a2)
    return ((uint64_t (*)(void))((char *)sub_1B0D87B70 + 4 * byte_1B0DE81A2[v4]))();
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_1B0D87B50 + 4 * byte_1B0DE819D[v4]))();
}

uint64_t sub_1B0D87B50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1B0D87B70(uint64_t result)
{
  *(_BYTE *)(result + 2) = 0;
  return result;
}

uint64_t sub_1B0D87B78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1B0D87B80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1B0D87B88(uint64_t result)
{
  *(_WORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_1B0D87B90(uint64_t result)
{
  *(_DWORD *)(result + 2) = 0;
  return result;
}

uint64_t static HashFunction.zeroHash.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of HashFunction.init()();
  dispatch thunk of HashFunction.finalize()();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, a1);
}

uint64_t static HMAC.authenticationCode<A>(bytes:using:)()
{
  type metadata accessor for HashedAuthenticationCode();
  return dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
}

uint64_t partial apply for closure #1 in static HMAC.authenticationCode<A>(bytes:using:)()
{
  lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
  return static HMAC.authenticationCode<A>(for:using:)();
}

BOOL static Extension.SupportedGroups.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static Array<A>.== infix(_:_:)(a1, a2);
}

uint64_t ByteBuffer.readSupportedGroups(messageType:)(unsigned __int8 a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 == 8 || a1 == 1)
  {
    v5 = *v1;
    v4 = v1[1];
    v6 = v1[2];
    outlined copy of Data._Representation(*v1, v4);
    specialized ByteBuffer.readInteger<A>(as:)();
    if ((v7 & 0x10000) == 0)
    {
      ByteBuffer.readSlice(length:)((unsigned __int16)v7);
      if (v8 >> 60 != 15)
        __asm { BR              X10 }
    }
    outlined consume of Data._Representation(*v1, v1[1]);
    *v1 = v5;
    v1[1] = v4;
    v1[2] = v6;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v11 = swift_allocError();
    *(_DWORD *)v9 = 0;
    *(_BYTE *)(v9 + 4) = 1;
  }
  else
  {
    v10 = a1 | 0xA0000;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v11 = swift_allocError();
    *(_DWORD *)v12 = v10;
    *(_BYTE *)(v12 + 4) = 0;
  }
  swift_willThrow(v11);
  return v2;
}

uint64_t Extension.SupportedGroups.groups.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

void Extension.SupportedGroups.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  Swift::UInt16 *v4;
  Swift::UInt16 v5;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (Swift::UInt16 *)(a2 + 32);
    do
    {
      v5 = *v4++;
      Hasher._combine(_:)(v5);
      --v3;
    }
    while (v3);
  }
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)
    || *(unsigned __int8 *)(a1 + 33) != *(unsigned __int8 *)(a2 + 33))
  {
    return 0;
  }
  v5 = (unsigned __int8 *)(a2 + 35);
  v6 = (unsigned __int8 *)(a1 + 35);
  do
  {
    result = --v2 == 0;
    if (!v2)
      break;
    v7 = *(v5 - 1);
    v9 = *v5;
    v5 += 2;
    v8 = v9;
    v10 = *v6;
    v11 = *(v6 - 1);
    v6 += 2;
  }
  while (v11 == v7 && v10 == v8);
  return result;
}

{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  _BOOL8 result;
  int v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
    return 0;
  v3 = (unsigned __int8 *)(a1 + 33);
  v4 = (unsigned __int8 *)(a2 + 33);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  _BOOL8 result;
  int v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(unsigned __int16 *)(a1 + 32) != *(unsigned __int16 *)(a2 + 32))
    return 0;
  v3 = (unsigned __int16 *)(a1 + 34);
  v4 = (unsigned __int16 *)(a2 + 34);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    if (*(unsigned __int16 *)(a1 + 32) == *(unsigned __int16 *)(a2 + 32))
      __asm { BR              X9 }
  }
  return 0;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X9 }
  }
  return 1;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X9 }
  }
  return 1;
}

{
  uint64_t v2;
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  char v6;
  char v7;
  BOOL v9;
  __int128 v11[2];
  __int128 v12[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v7 = 1;
    }
    else
    {
      v3 = (__int128 *)(a1 + 32);
      v4 = (__int128 *)(a2 + 32);
      v5 = v2 - 1;
      do
      {
        outlined init with take of Extension(v3, (uint64_t)v11);
        outlined init with take of Extension(v4, (uint64_t)v12);
        outlined release of Extension((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Extension);
        outlined release of Extension((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Extension);
        specialized static Extension.__derived_enum_equals(_:_:)(v11, v12);
        v7 = v6;
        outlined release of Extension((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Extension);
        outlined release of Extension((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Extension);
        v9 = v5-- != 0;
        if ((v7 & 1) == 0)
          break;
        v4 = (__int128 *)((char *)v4 + 40);
        v3 = (__int128 *)((char *)v3 + 40);
      }
      while (v9);
    }
  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X9 }
  }
  return 1;
}

Swift::Int Extension.SupportedGroups.hashValue.getter(uint64_t a1)
{
  Swift::UInt v2;
  Swift::UInt16 *v3;
  Swift::UInt16 v4;

  Hasher.init(_seed:)();
  v2 = *(_QWORD *)(a1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    v3 = (Swift::UInt16 *)(a1 + 32);
    do
    {
      v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Extension.SupportedGroups()
{
  uint64_t *v0;

  return Extension.SupportedGroups.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Extension.SupportedGroups()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt v2;
  Swift::UInt16 *v3;
  Swift::UInt16 v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    v3 = (Swift::UInt16 *)(v1 + 32);
    do
    {
      v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.SupportedGroups()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt v2;
  Swift::UInt16 *v3;
  Swift::UInt16 v4;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(_QWORD *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    v3 = (Swift::UInt16 *)(v1 + 32);
    do
    {
      v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Extension.SupportedGroups(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3, char *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SignatureScheme>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CertificateType>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Extension.PreSharedKeyKexModes.Mode>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CipherSuite>);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  int64_t v13;
  char *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a4 + 3);
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = *((_QWORD *)a4 + 2);
    if (v8 <= v9)
      v10 = *((_QWORD *)a4 + 2);
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (char *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 31;
      *((_QWORD *)v11 + 2) = v9;
      *((_QWORD *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
      v14 = v11 + 32;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)MEMORY[0x1E0DEE9D8];
      v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 32])
          memmove(v14, a4 + 32, 2 * v9);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a4 + 3);
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = *((_QWORD *)a4 + 2);
    if (v8 <= v9)
      v10 = *((_QWORD *)a4 + 2);
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (char *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      *((_QWORD *)v11 + 2) = v9;
      *((_QWORD *)v11 + 3) = 2 * v12 - 64;
      v13 = v11 + 32;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[v9 + 32])
          memmove(v13, a4 + 32, v9);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type Extension.SupportedGroups and conformance Extension.SupportedGroups()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Extension.SupportedGroups and conformance Extension.SupportedGroups;
  if (!lazy protocol witness table cache variable for type Extension.SupportedGroups and conformance Extension.SupportedGroups)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Extension.SupportedGroups, &type metadata for Extension.SupportedGroups);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.SupportedGroups and conformance Extension.SupportedGroups);
  }
  return result;
}

ValueMetadata *type metadata accessor for Extension.SupportedGroups()
{
  return &type metadata for Extension.SupportedGroups;
}

uint64_t specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    MEMORY[0x1E0C80A78](result);
    __asm { BR              X10 }
  }
  return result;
}

uint64_t Random.init()()
{
  uint64_t v0;
  uint64_t v2;

  v2 = 0;
  MEMORY[0x1B5E11250](&v2, 8);
  v0 = v2;
  v2 = 0;
  MEMORY[0x1B5E11250](&v2, 8);
  v2 = 0;
  MEMORY[0x1B5E11250](&v2, 8);
  v2 = 0;
  MEMORY[0x1B5E11250](&v2, 8);
  return v0;
}

uint64_t Random.init<A>(_:)(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  _OWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, a1, a2);
  v7 = dispatch thunk of Collection.count.getter();
  v8 = *(void (**)(char *, uint64_t))(v4 + 8);
  v8(v6, a2);
  if (v7 != 32)
    __break(1u);
  memset(v10, 0, sizeof(v10));
  UnsafeMutableRawBufferPointer.copyBytes<A>(from:)();
  v8(a1, a2);
  return *(_QWORD *)&v10[0];
}

void *Random.helloRetryRequest.unsafeMutableAddressor()
{
  if (one-time initialization token for helloRetryRequest != -1)
    swift_once();
  return &static Random.helloRetryRequest;
}

uint64_t static Random.helloRetryRequest.getter()
{
  if (one-time initialization token for helloRetryRequest != -1)
    swift_once();
  return static Random.helloRetryRequest;
}

BOOL static Random.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1 == a5 && a2 == a6 && a3 == a7 && a4 == a8;
}

void Random.hash(into:)(int a1, Swift::UInt64 a2, Swift::UInt64 a3, Swift::UInt64 a4, Swift::UInt64 a5)
{
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(a4);
  Hasher._combine(_:)(a5);
}

Swift::Int Random.hashValue.getter(Swift::UInt64 a1, Swift::UInt64 a2, Swift::UInt64 a3, Swift::UInt64 a4)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(a4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Random()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Random()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Random()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Random(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

uint64_t ByteBuffer.writeRandom(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[4];
  _QWORD v6[6];

  v6[5] = *MEMORY[0x1E0C80C00];
  v5[0] = a1;
  v5[1] = a2;
  v5[2] = a3;
  v5[3] = a4;
  v6[3] = MEMORY[0x1E0DEAC20];
  v6[4] = MEMORY[0x1E0CB1AA8];
  v6[0] = v5;
  v6[1] = v6;
  __swift_project_boxed_opaque_existential_1(v6, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return 32;
}

unint64_t lazy protocol witness table accessor for type Random and conformance Random()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Random and conformance Random;
  if (!lazy protocol witness table cache variable for type Random and conformance Random)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Random, &type metadata for Random);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Random and conformance Random);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Random(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Random(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void *partial apply for specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)(void *__src, size_t __len)
{
  uint64_t v2;

  if (__src)
  {
    if ((__len & 0x8000000000000000) != 0)
    {
      __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      return memmove(*(void **)(v2 + 40), __src, __len);
    }
  }
  return __src;
}

BOOL static Extension.ServerName.__derived_enum_equals(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  char v10;
  char v11;

  if (a2 >> 60 == 15)
    return a5 >> 60 == 15;
  if (a5 >> 60 == 15)
    return 0;
  outlined copy of ByteBuffer?(a1, a2);
  outlined copy of ByteBuffer?(a4, a5);
  specialized static ByteBuffer.== infix(_:_:)(a1, a2);
  v11 = v10;
  outlined consume of ByteBuffer?(a4, a5);
  outlined consume of ByteBuffer?(a1, a2);
  return v11 & 1;
}

uint64_t ByteBuffer.readServerName(messageType:)(unsigned __int8 a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  if (a1 == 8)
    __asm { BR              X14 }
  if (a1 == 1)
  {
    v4 = *v1;
    v3 = v1[1];
    v5 = v1[2];
    outlined copy of Data._Representation(*v1, v3);
    specialized ByteBuffer.readInteger<A>(as:)();
    if ((v6 & 0x10000) != 0 || (ByteBuffer.readSlice(length:)((unsigned __int16)v6), v8 >> 60 == 15))
    {
      outlined consume of Data._Representation(*v1, v1[1]);
      *v1 = v4;
      v1[1] = v3;
      v1[2] = v5;
      lazy protocol witness table accessor for type TLSError and conformance TLSError();
      v10 = swift_allocError();
      *(_DWORD *)v11 = 0;
      *(_BYTE *)(v11 + 4) = 1;
    }
    else
    {
      v15 = v7;
      v16 = v8;
      v17 = v9;
      closure #1 in ByteBuffer.readServerName(messageType:)((uint64_t)&v15);
      if (!v2)
        __asm { BR              X12 }
      outlined consume of Data._Representation(v15, v16);
      v10 = outlined consume of Data._Representation(*v1, v1[1]);
      *v1 = v4;
      v1[1] = v3;
      v1[2] = v5;
    }
  }
  else
  {
    v12 = a1;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v10 = swift_allocError();
    *(_DWORD *)v13 = v12;
    *(_BYTE *)(v13 + 4) = 0;
  }
  return swift_willThrow(v10);
}

uint64_t Extension.ServerName.Names.hostName.getter(uint64_t a1, unint64_t a2)
{
  outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t Extension.ServerName.Names.hostName.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t result;

  result = outlined consume of Data._Representation(*v3, v3[1]);
  *v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

void Extension.ServerName.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15)
  {
    Hasher._combine(_:)(0);
    __asm { BR              X10 }
  }
  Hasher._combine(_:)(1uLL);
}

uint64_t sub_1B0D8CC5C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v1) < v0)
  {
    __break(1u);
    JUMPOUT(0x1B0D8CCFCLL);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  outlined consume of ByteBuffer?(v2, v1);
  return outlined consume of ByteBuffer?(v2, v1);
}

Swift::Int Extension.ServerName.hashValue.getter(uint64_t a1, unint64_t a2)
{
  Hasher.init(_seed:)();
  if (a2 >> 60 != 15)
  {
    Hasher._combine(_:)(0);
    __asm { BR              X10 }
  }
  Hasher._combine(_:)(1uLL);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Extension.ServerName()
{
  uint64_t v0;

  return Extension.ServerName.hashValue.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

void protocol witness for Hashable.hash(into:) in conformance Extension.ServerName(uint64_t a1)
{
  uint64_t v1;

  Extension.ServerName.hash(into:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.ServerName()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1 >> 60 != 15)
  {
    Hasher._combine(_:)(0);
    __asm { BR              X10 }
  }
  Hasher._combine(_:)(1uLL);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Extension.ServerName(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  _BOOL8 v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  v2 = a1[1];
  v3 = a2[1];
  v4 = v3 >> 60 == 15 && v2 >> 60 == 15;
  if (v2 >> 60 == 15 || v3 >> 60 == 15)
    return v4;
  v6 = *a2;
  v7 = *a1;
  outlined copy of ByteBuffer?(*a1, v2);
  outlined copy of ByteBuffer?(v6, v3);
  specialized static ByteBuffer.== infix(_:_:)(v7, v2);
  v9 = v8;
  outlined consume of ByteBuffer?(v6, v3);
  outlined consume of ByteBuffer?(v7, v2);
  return v9 & 1;
}

void Extension.ServerName.Names.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1B0D8D0A4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v0) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0D8D124);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  return outlined consume of Data._Representation(v1, v0);
}

void Extension.ServerName.Names.hashValue.getter(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1B0D8D180()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v0) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0D8D20CLL);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v1, v0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hashValue.getter in conformance Extension.ServerName.Names()
{
  uint64_t *v0;

  Extension.ServerName.Names.hashValue.getter(*v0, v0[1]);
}

void protocol witness for Hashable.hash(into:) in conformance Extension.ServerName.Names()
{
  __asm { BR              X10 }
}

uint64_t sub_1B0D8D268()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v2) < v1)
  {
    __break(1u);
    JUMPOUT(0x1B0D8D2E8);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  return outlined consume of Data._Representation(v0, v2);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.ServerName.Names()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1B0D8D340()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v2) < v1)
  {
    __break(1u);
    JUMPOUT(0x1B0D8D3D0);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v2);
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Extension.ServerName.Names(uint64_t *a1)
{
  specialized static ByteBuffer.== infix(_:_:)(*a1, a1[1]);
}

void closure #1 in ByteBuffer.readServerName(messageType:)(uint64_t a1)
{
  __asm { BR              X11 }
}

void sub_1B0D8D4A0(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  if (__OFSUB__(BYTE6(v2), a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (BYTE6(v2) - a1 >= 1)
  {
    if (!__OFADD__(a1, 1))
      __asm { BR              X9 }
LABEL_9:
    __break(1u);
    JUMPOUT(0x1B0D8DB6CLL);
  }
  if (v8 >> 60 == 15)
  {
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v3 = swift_allocError();
    *(_DWORD *)v4 = 5;
    *(_BYTE *)(v4 + 4) = 1;
    swift_willThrow(v3);
  }
  else
  {
    *v5 = v6;
    v5[1] = v8;
    v5[2] = v7;
  }
}

unint64_t lazy protocol witness table accessor for type Extension.ServerName and conformance Extension.ServerName()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Extension.ServerName and conformance Extension.ServerName;
  if (!lazy protocol witness table cache variable for type Extension.ServerName and conformance Extension.ServerName)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Extension.ServerName, &type metadata for Extension.ServerName);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.ServerName and conformance Extension.ServerName);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Extension.ServerName.Names and conformance Extension.ServerName.Names()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Extension.ServerName.Names and conformance Extension.ServerName.Names;
  if (!lazy protocol witness table cache variable for type Extension.ServerName.Names and conformance Extension.ServerName.Names)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Extension.ServerName.Names, &type metadata for Extension.ServerName.Names);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.ServerName.Names and conformance Extension.ServerName.Names);
  }
  return result;
}

uint64_t *destroy for Extension.ServerName(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if ((v1 & 0x3000000000000000) == 0)
    return (uint64_t *)outlined consume of Data._Representation(*result, v1);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Extension.ServerName(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  if ((v4 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v5 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 16) = a2[2];
  return a1;
}

uint64_t *assignWithCopy for Extension.ServerName(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = a1[1];
  v5 = a2[1];
  v6 = v5 & 0x3000000000000000;
  if ((v4 & 0x3000000000000000) != 0)
  {
    if (!v6)
    {
      v7 = *a2;
      outlined copy of Data._Representation(*a2, a2[1]);
      *a1 = v7;
      a1[1] = v5;
LABEL_8:
      a1[2] = a2[2];
      return a1;
    }
  }
  else
  {
    if (!v6)
    {
      v9 = *a2;
      outlined copy of Data._Representation(*a2, a2[1]);
      v10 = *a1;
      v11 = a1[1];
      *a1 = v9;
      a1[1] = v5;
      outlined consume of Data._Representation(v10, v11);
      goto LABEL_8;
    }
    outlined consume of Data._Representation(*a1, v4);
  }
  v8 = *(_OWORD *)a2;
  a1[2] = a2[2];
  *(_OWORD *)a1 = v8;
  return a1;
}

uint64_t *assignWithTake for Extension.ServerName(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = a1[1];
  if ((v4 & 0x3000000000000000) == 0)
  {
    v5 = a2[1];
    if ((v5 & 0x3000000000000000) == 0)
    {
      v7 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      outlined consume of Data._Representation(v7, v4);
      goto LABEL_5;
    }
    outlined consume of Data._Representation(*a1, v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_5:
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for Extension.ServerName(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xC && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 12);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  if (v3 + 1 >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Extension.ServerName(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 12;
    if (a3 >= 0xC)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xC)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t getEnumTag for Extension.ServerName(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v1) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v1) & 0xC | (v1 >> 2));
  else
    return 0;
}

_QWORD *destructiveInjectEnumTag for Extension.ServerName(_QWORD *result, unsigned int a2)
{
  if (a2 > 0xC)
  {
    result[1] = 0;
    result[2] = 0;
    *result = a2 - 13;
  }
  else if (a2)
  {
    *result = 0;
    result[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

ValueMetadata *type metadata accessor for Extension.ServerName()
{
  return &type metadata for Extension.ServerName;
}

uint64_t *initializeBufferWithCopyOfBuffer for Extension.ServerName.Names(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a2;
  v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithCopy for Extension.ServerName.Names(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithTake for Extension.ServerName.Names(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Extension.ServerName.Names(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Extension.ServerName.Names(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Extension.ServerName.Names()
{
  return &type metadata for Extension.ServerName.Names;
}

uint64_t ExportedAuthenticator.init(authenticator:handshakeStateMachine:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  *(_OWORD *)a3 = xmmword_1B0DE7E90;
  *(_QWORD *)(a3 + 16) = 0;
  HandshakeMessageParser.appendBytes(_:)(a1);
  v5 = type metadata accessor for ExportedAuthenticator();
  return outlined init with take of HandshakeStateMachine(a2, a3 + *(int *)(v5 + 24), (uint64_t (*)(_QWORD))type metadata accessor for HandshakeStateMachine);
}

uint64_t type metadata accessor for ExportedAuthenticator()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ExportedAuthenticator;
  if (!type metadata singleton initialization cache for ExportedAuthenticator)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ExportedAuthenticator.validate(keyParser:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  _DWORD *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  _DWORD *v59;
  uint64_t v60;
  _BYTE *v61;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int EnumCaseMultiPayload;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  _DWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int (*v99)(uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(uint64_t);
  void (*v113)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  NSObject *v118;
  os_log_type_t v119;
  uint8_t *v120;
  uint8_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t ready;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  _QWORD v182[18];
  __int128 v183;
  uint64_t v184;
  _BYTE v185[136];
  _BYTE v186[136];
  _BYTE v187[136];
  _BYTE v188[136];
  _BYTE v189[136];
  _BYTE v190[136];
  _QWORD v191[16];
  unsigned __int8 v192;
  _QWORD v193[4];
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unsigned __int8 v206;
  _OWORD v207[8];
  char v208;
  __int128 v209;
  _OWORD v210[7];
  char v211;
  __int128 v212[7];
  _BYTE v213[112];
  char v214[24];
  uint64_t v215;
  char v216;
  uint64_t v217;

  v174 = a1;
  v175 = a2;
  v3 = type metadata accessor for P256.Signing.ECDSASignature();
  v168 = *(_QWORD *)(v3 - 8);
  v169 = v3;
  MEMORY[0x1E0C80A78](v3);
  v170 = (char *)&v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.Signing.PublicKey?);
  MEMORY[0x1E0C80A78](v5);
  v176 = (char *)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for P256.Signing.PublicKey();
  v172 = *(_QWORD *)(v7 - 8);
  v173 = v7;
  MEMORY[0x1E0C80A78](v7);
  v171 = (char *)&v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ready = type metadata accessor for HandshakeState.ReadyState(0);
  MEMORY[0x1E0C80A78](ready);
  v179 = (uint64_t)&v127 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = type metadata accessor for HandshakeState(0);
  v10 = MEMORY[0x1E0C80A78](v181);
  v166 = (char *)&v127 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v167 = (char *)&v127 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v177 = (char *)&v127 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v180 = (char *)&v127 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v127 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v127 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v127 - v24;
  v26 = type metadata accessor for SymmetricKey();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v127 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v127 - v31;
  v33 = v217;
  HandshakeMessageParser.parseHandshakeMessage()((uint64_t)v188);
  if (v33)
    return v2;
  v161 = v19;
  v162 = v25;
  v159 = v23;
  v217 = 0;
  v163 = v32;
  v164 = v27;
  v160 = v30;
  v165 = v26;
  outlined init with take of P256.Signing.PublicKey?((uint64_t)v188, (uint64_t)v187, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
  outlined init with take of P256.Signing.PublicKey?((uint64_t)v188, (uint64_t)v207, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
  if (_s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOg((uint64_t)v207) == 1)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)logger);
    v35 = Logger.logObject.getter();
    v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v37 = 0;
      _os_log_impl(&dword_1B0D50000, v35, v36, "incomplete message, invalid", v37, 2u);
      MEMORY[0x1B5E11244](v37, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v2 = swift_allocError();
    *(_DWORD *)v38 = 9;
    *(_BYTE *)(v38 + 4) = 1;
    swift_willThrow(v2);
    return v2;
  }
  v210[4] = v207[5];
  v210[5] = v207[6];
  v210[6] = v207[7];
  v210[0] = v207[1];
  v210[1] = v207[2];
  v210[2] = v207[3];
  v210[3] = v207[4];
  v211 = v208;
  v209 = v207[0];
  outlined init with take of HandshakeMessage((_OWORD *)((char *)v210 + 8), (uint64_t)v212);
  outlined init with take of HandshakeMessage(v212, (uint64_t)v214);
  if (v216 != 4)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)logger);
    outlined init with take of P256.Signing.PublicKey?((uint64_t)v187, (uint64_t)v185, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
    outlined init with take of P256.Signing.PublicKey?((uint64_t)v187, (uint64_t)v186, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
    outlined retain of HandshakeMessageParser.ParseResult((uint64_t)v186);
    outlined retain of HandshakeMessageParser.ParseResult((uint64_t)v185);
    v42 = Logger.logObject.getter();
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (_DWORD *)swift_slowAlloc();
      *(_QWORD *)&v183 = swift_slowAlloc();
      *v44 = 136446210;
      outlined init with take of HandshakeMessage(v212, (uint64_t)v213);
      __asm { BR              X10 }
    }
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v188);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v188);

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v2 = swift_allocError();
    *(_DWORD *)v60 = 9;
    *(_BYTE *)(v60 + 4) = 1;
    swift_willThrow(v2);
    goto LABEL_28;
  }
  v39 = v215;
  outlined retain of HandshakeMessage((uint64_t)v212, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of HandshakeMessage);
  outlined retain of HandshakeMessage((uint64_t)v212, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of HandshakeMessage);
  swift_bridgeObjectRetain();
  v40 = v217;
  HandshakeMessageParser.parseHandshakeMessage()((uint64_t)v189);
  if (v40)
  {
    v2 = (uint64_t)outlined consume of HandshakeMessage;
    outlined retain of HandshakeMessage((uint64_t)v212, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of HandshakeMessage);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v188);
    swift_bridgeObjectRelease();
    outlined retain of HandshakeMessage((uint64_t)v212, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of HandshakeMessage);
    return v2;
  }
  outlined init with take of P256.Signing.PublicKey?((uint64_t)v189, (uint64_t)v186, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
  outlined init with take of P256.Signing.PublicKey?((uint64_t)v189, (uint64_t)v193, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
  if (_s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOg((uint64_t)v193) == 1)
  {
    swift_bridgeObjectRelease();
    outlined retain of HandshakeMessage((uint64_t)v212, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of HandshakeMessage);
    if (one-time initialization token for logger != -1)
      swift_once();
    v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)logger);
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v48 = 0;
      _os_log_impl(&dword_1B0D50000, v46, v47, "incomplete message, invalid", v48, 2u);
      MEMORY[0x1B5E11244](v48, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v2 = swift_allocError();
    *(_DWORD *)v49 = 9;
    *(_BYTE *)(v49 + 4) = 1;
    swift_willThrow(v2);
    outlined retain of HandshakeMessage((uint64_t)v212, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of HandshakeMessage);
LABEL_28:
    v61 = v188;
LABEL_29:
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v61);
    return v2;
  }
  v50 = v206;
  if (v206 != 5)
  {
    swift_bridgeObjectRelease();
    outlined retain of HandshakeMessage((uint64_t)v212, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of HandshakeMessage);
    if (one-time initialization token for logger != -1)
      swift_once();
    v56 = type metadata accessor for Logger();
    __swift_project_value_buffer(v56, (uint64_t)logger);
    outlined init with take of P256.Signing.PublicKey?((uint64_t)v186, (uint64_t)&v183, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
    outlined init with take of P256.Signing.PublicKey?((uint64_t)v186, (uint64_t)v185, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
    outlined retain of HandshakeMessageParser.ParseResult((uint64_t)v185);
    outlined retain of HandshakeMessageParser.ParseResult((uint64_t)&v183);
    v57 = Logger.logObject.getter();
    v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (_DWORD *)swift_slowAlloc();
      v182[0] = swift_slowAlloc();
      *v59 = 136446210;
      __asm { BR              X9 }
    }
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v189);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v189);

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v2 = swift_allocError();
    *(_DWORD *)v92 = 9;
    *(_BYTE *)(v92 + 4) = 1;
    swift_willThrow(v2);
    outlined retain of HandshakeMessage((uint64_t)v212, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of HandshakeMessage);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v188);
    v61 = v189;
    goto LABEL_29;
  }
  v146 = v193[1];
  v144 = v193[0];
  v145 = v193[2];
  v51 = v194;
  v52 = v195;
  v149 = v196;
  v150 = v197;
  v151 = v198;
  v152 = v193[3];
  v53 = v199;
  v153 = v201;
  v154 = v200;
  v157 = v203;
  v158 = v202;
  v54 = v204;
  v55 = v205;
  outlined copy of Data._Representation(v194, v195);
  outlined copy of Data._Representation(v51, v52);
  HandshakeMessageParser.parseHandshakeMessage()((uint64_t)v190);
  v217 = 0;
  v147 = v53;
  v148 = v51;
  v155 = v55;
  v156 = v54;
  v63 = v151;
  v143 = v52;
  outlined init with take of P256.Signing.PublicKey?((uint64_t)v190, (uint64_t)v185, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
  outlined init with take of P256.Signing.PublicKey?((uint64_t)v190, (uint64_t)v191, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
  v64 = _s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOg((uint64_t)v191);
  if (v64 == 1)
  {
    v65 = v153;
    v66 = v53;
    v67 = v152;
    v68 = v143;
    v70 = v149;
    v69 = v150;
    outlined consume of HandshakeMessage(v152, v51, v143, v149, v150, v63, v66, v154, v153, v158, v157, v156, v155, 5);
    swift_bridgeObjectRelease();
    outlined retain of HandshakeMessage((uint64_t)v212, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of HandshakeMessage);
    if (one-time initialization token for logger != -1)
      swift_once();
    v71 = type metadata accessor for Logger();
    __swift_project_value_buffer(v71, (uint64_t)logger);
    v72 = Logger.logObject.getter();
    v73 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v72, v73))
    {
      v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v74 = 0;
      _os_log_impl(&dword_1B0D50000, v72, v73, "incomplete message, invalid", v74, 2u);
      v75 = v74;
      v67 = v152;
      MEMORY[0x1B5E11244](v75, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v2 = swift_allocError();
    *(_DWORD *)v76 = 9;
    *(_BYTE *)(v76 + 4) = 1;
    swift_willThrow(v2);
    outlined consume of HandshakeMessage(v67, v148, v68, v70, v69, v63, v147, v154, v65, v158, v157, v156, v155, 5);
    outlined retain of HandshakeMessage((uint64_t)v212, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of HandshakeMessage);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v189);
    goto LABEL_28;
  }
  v77 = v192;
  if (v192 == 6)
  {
    v78 = v191[3];
    v79 = v191[4];
    v136 = v191[5];
    v130 = v191[6];
    v131 = v191[7];
    v132 = v191[8];
    v133 = v191[9];
    v134 = v191[10];
    v141 = v191[12];
    v142 = v191[11];
    v139 = v191[14];
    v140 = v191[13];
    v138 = v191[15];
    v80 = v2 + *(int *)(type metadata accessor for ExportedAuthenticator() + 24);
    v128 = v80 + *(int *)(type metadata accessor for HandshakeStateMachine() + 24);
    v81 = (uint64_t)v161;
    outlined init with copy of HandshakeState(v128, (uint64_t)v161);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v137 = v79;
    v135 = v78;
    v129 = v39;
    if (EnumCaseMultiPayload == 6)
    {
      v83 = v179;
      outlined init with take of HandshakeStateMachine(v81, v179, type metadata accessor for HandshakeState.ReadyState);
      outlined copy of Data._Representation(v78, v79);
      outlined copy of Data._Representation(v78, v79);
      v84 = (uint64_t)v162;
      specialized SessionKeyManager.generateTLSExporterKey(label:)(0xD00000000000002FLL, 0x80000001B0DEBEF0, (uint64_t)v162);
      outlined destroy of PartialHandshakeResult(v83, type metadata accessor for HandshakeState.ReadyState);
      v86 = (_QWORD *)v164;
      v85 = v165;
    }
    else
    {
      v93 = (_QWORD *)v164;
      v84 = (uint64_t)v162;
      v94 = v81;
      v85 = v165;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v164 + 56))(v162, 1, 1, v165);
      outlined copy of Data._Representation(v78, v79);
      v95 = v78;
      v86 = v93;
      outlined copy of Data._Representation(v95, v79);
      outlined destroy of PartialHandshakeResult(v94, type metadata accessor for HandshakeState);
    }
    v96 = v163;
    v97 = v150;
    v98 = (uint64_t)v180;
    v99 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v86[6];
    if (v99(v84, 1, v85) == 1)
    {
      v100 = v149;
      v101 = v152;
      v102 = v154;
    }
    else
    {
      v108 = (void (*)(char *, uint64_t, uint64_t))v86[4];
      v108(v96, v84, v85);
      outlined init with copy of HandshakeState(v128, v98);
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        v109 = v179;
        outlined init with take of HandshakeStateMachine(v98, v179, type metadata accessor for HandshakeState.ReadyState);
        v110 = (uint64_t)v159;
        specialized SessionKeyManager.generateTLSExporterKey(label:)(0xD00000000000002ALL, 0x80000001B0DEBF20, (uint64_t)v159);
        v85 = v165;
        v111 = v109;
        v112 = type metadata accessor for HandshakeState.ReadyState;
      }
      else
      {
        v113 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v86[7];
        v114 = v98;
        v110 = (uint64_t)v159;
        v113(v159, 1, 1, v85);
        v112 = type metadata accessor for HandshakeState;
        v111 = v114;
      }
      outlined destroy of PartialHandshakeResult(v111, v112);
      v101 = v152;
      v102 = v154;
      if (v99(v110, 1, v85) != 1)
      {
        v124 = ((uint64_t (*)(char *, uint64_t, uint64_t))v108)(v160, v110, v85);
        v183 = xmmword_1B0DE7EA0;
        v184 = 0;
        MEMORY[0x1E0C80A78](v124);
        SymmetricKey.withUnsafeBytes<A>(_:)();
        __asm { BR              X10 }
      }
      (*(void (**)(char *, uint64_t))(v164 + 8))(v96, v85);
      v100 = v149;
      v97 = v150;
      v84 = v110;
    }
    outlined consume of HandshakeMessage(v135, v137, v136, v130, v131, v132, v133, v134, v142, v141, v140, v139, v138, 6);
    v115 = v143;
    v116 = v151;
    outlined consume of HandshakeMessage(v101, v148, v143, v100, v97, v151, v147, v102, v153, v158, v157, v156, v155, 5);
    swift_bridgeObjectRelease();
    outlined retain of HandshakeMessage((uint64_t)v212, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of HandshakeMessage);
    outlined destroy of HandshakeStateMachine?(v84, &demangling cache variable for type metadata for SymmetricKey?);
    if (one-time initialization token for logger != -1)
      swift_once();
    v117 = type metadata accessor for Logger();
    __swift_project_value_buffer(v117, (uint64_t)logger);
    v118 = Logger.logObject.getter();
    v119 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v118, v119))
    {
      v120 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v120 = 0;
      _os_log_impl(&dword_1B0D50000, v118, v119, "failed to export keys", v120, 2u);
      v121 = v120;
      v101 = v152;
      MEMORY[0x1B5E11244](v121, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v122 = swift_allocError();
    *(_DWORD *)v123 = 10;
    *(_BYTE *)(v123 + 4) = 1;
    swift_willThrow(v122);
    outlined consume of HandshakeMessage(v135, v137, v136, v130, v131, v132, v133, v134, v142, v141, v140, v139, v138, 6);
    v2 = (uint64_t)outlined consume of HandshakeMessage;
    outlined consume of HandshakeMessage(v101, v148, v115, v100, v97, v116, v147, v102, v153, v158, v157, v156, v155, 5);
    outlined retain of HandshakeMessage((uint64_t)v212, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of HandshakeMessage);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v190);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v189);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v188);
  }
  else
  {
    v87 = v143;
    outlined consume of HandshakeMessage(v152, v51, v143, v149, v150, v63, v53, v154, v153, v158, v157, v156, v155, 5);
    swift_bridgeObjectRelease();
    outlined retain of HandshakeMessage((uint64_t)v212, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of HandshakeMessage);
    if (one-time initialization token for logger != -1)
      swift_once();
    v88 = type metadata accessor for Logger();
    __swift_project_value_buffer(v88, (uint64_t)logger);
    outlined init with take of P256.Signing.PublicKey?((uint64_t)v185, (uint64_t)v182, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
    outlined init with take of P256.Signing.PublicKey?((uint64_t)v185, (uint64_t)&v183, &demangling cache variable for type metadata for HandshakeMessageParser.ParseResult?);
    outlined retain of HandshakeMessageParser.ParseResult((uint64_t)&v183);
    outlined retain of HandshakeMessageParser.ParseResult((uint64_t)v182);
    v89 = Logger.logObject.getter();
    v90 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v89, v90))
    {
      v91 = (_DWORD *)swift_slowAlloc();
      v182[17] = swift_slowAlloc();
      *v91 = 136446210;
      __asm { BR              X9 }
    }
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v190);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v190);

    v103 = v149;
    v2 = v150;
    v105 = v156;
    v104 = v157;
    v106 = v155;
    v107 = v153;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v125 = swift_allocError();
    *(_DWORD *)v126 = 9;
    *(_BYTE *)(v126 + 4) = 1;
    swift_willThrow(v125);
    outlined consume of HandshakeMessage(v152, v148, v87, v103, v2, v151, v147, v154, v107, v158, v104, v105, v106, 5);
    outlined retain of HandshakeMessage((uint64_t)v212, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of HandshakeMessage);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v189);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v188);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)v190);
  }
  return v2;
}

void sub_1B0D90D9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(uint64_t *)(v0 + 432) >> 32;
  if (v2 >= v1)
  {
    Data._Representation.subscript.getter(v1, v2, *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 416));
    __asm { BR              X10 }
  }
  JUMPOUT(0x1B0D9144CLL);
}

void sub_1B0D90DA8()
{
  JUMPOUT(0x1B0D90DB0);
}

uint64_t sub_1B0D90DF4()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, uint64_t);

  if (BYTE6(v0[10]) < (uint64_t)v0[9])
  {
    __break(1u);
LABEL_12:
    swift_once();
LABEL_6:
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)logger);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1B0D50000, v14, v15, "invalid finished payload", v16, 2u);
      MEMORY[0x1B5E11244](v16, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v17 = swift_allocError();
    *(_DWORD *)v18 = 9;
    *(_BYTE *)(v18 + 4) = 1;
    swift_willThrow(v17);
    outlined retain of HandshakeMessage((uint64_t)(v0 + 262), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of HandshakeMessage);
    outlined consume of HandshakeMessage(v0[25], v0[21], v0[16], v0[22], v0[23], v0[24], v0[20], v0[27], v0[26], v0[31], v0[30], v0[29], v0[28], 5);
    outlined consume of HandshakeMessage(v0[8], v0[10], v0[9], v0[3], v0[4], v0[5], v0[6], v0[7], v0[15], v0[14], v0[13], v0[12], v0[11], 6);
    outlined consume of Data._Representation(v0[54], v0[52]);
    JUMPOUT(0x1B0D9116CLL);
  }
  v4 = v0[8];
  v3 = v0[9];
  v5 = v0[10];
  v6 = Data._Representation.subscript.getter();
  v8 = v7;
  outlined consume of HandshakeMessage(v4, v5, v3, v0[3], v0[4], v0[5], v0[6], v0[7], v0[15], v0[14], v0[13], v0[12], v0[11], 6);
  specialized static Data.== infix(_:_:)(v1, v2);
  LOBYTE(v5) = v9;
  outlined consume of Data._Representation(v6, v8);
  outlined consume of Data._Representation(v1, v2);
  if ((v5 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger == -1)
      goto LABEL_6;
    goto LABEL_12;
  }
  v10 = *(_QWORD *)(v0[2] + 16);
  if (!v10)
  {
    outlined retain of HandshakeMessage((uint64_t)(v0 + 262), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of HandshakeMessage);
    outlined consume of HandshakeMessage(v0[25], v0[21], v0[16], v0[22], v0[23], v0[24], v0[20], v0[27], v0[26], v0[31], v0[30], v0[29], v0[28], 5);
    outlined consume of HandshakeMessage(v0[8], v0[10], v0[9], v0[3], v0[4], v0[5], v0[6], v0[7], v0[15], v0[14], v0[13], v0[12], v0[11], 6);
    outlined consume of Data._Representation(v0[54], v0[52]);
    outlined consume of Data._Representation(v0[49], v0[53]);
    outlined consume of Data._Representation(v0[35], v0[50]);
    outlined consume of Data._Representation(v0[32], v0[34]);
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)(v0 + 176));
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)(v0 + 159));
    outlined release of HandshakeMessageParser.ParseResult?((uint64_t)(v0 + 142));
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, _QWORD))(v0[41] + 8))(v0[43], v0[42]);
    (*(void (**)(_QWORD, _QWORD))(v0[45] + 8))(v0[44], v0[46]);
    v19 = v0[38];
    v20 = *(void (**)(_QWORD, uint64_t))(v0[37] + 8);
    v20(v0[33], v19);
    v20(v0[36], v19);
    outlined consume of Data._Representation(v0[74], v0[75]);
    JUMPOUT(0x1B0D8EAC0);
  }
  v0[56] = MEMORY[0x1E0DEE9D8];
  v11 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
  return ((uint64_t (*)(uint64_t))((char *)&loc_1B0D90F18
                                          + *((int *)qword_1B0D91530 + (*(_QWORD *)(v0[2] + 40) >> 62))))(v11);
}

uint64_t closure #1 in ExportedAuthenticator.validate(keyParser:)(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[3] = MEMORY[0x1E0DEAC20];
  v3[4] = MEMORY[0x1E0CB1AA8];
  v3[0] = a1;
  v3[1] = a2;
  __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void ExportedAuthenticator.generateDataToSignInAuthenticatorCertificateVerify(authenticatorTranscriptHash:)(uint64_t a1, uint64_t a2)
{
  char v3;
  _QWORD v4[5];
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5 = xmmword_1B0DE7EA0;
  v6 = 0;
  specialized Data.append<A>(contentsOf:)();
  specialized Data.append<A>(contentsOf:)(0xD000000000000016, 0x80000001B0DEBF50);
  if ((0x80000001B0DEBF50 & 0x1000000000000000) != 0)
    String.UTF8View._foreignCount()();
  v3 = 0;
  v4[3] = MEMORY[0x1E0DEAC20];
  v4[4] = MEMORY[0x1E0CB1AA8];
  v4[0] = &v3;
  v4[1] = v4;
  __swift_project_boxed_opaque_existential_1(v4, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  __asm { BR              X10 }
}

uint64_t ExportedAuthenticator.extractKey(certificateMessage:keyParser:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v3;

  if (*(_QWORD *)(a1 + 16))
    __asm { BR              X10 }
  v3 = type metadata accessor for P256.Signing.PublicKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

unint64_t specialized Data.append<A>(contentsOf:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t result;
  __int128 v7[2];
  uint64_t v8;
  _QWORD v9[7];

  v9[5] = *MEMORY[0x1E0C80C00];
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of ContiguousBytes(v7, (uint64_t)v9);
    v3 = __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    MEMORY[0x1E0C80A78](v3);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  else
  {
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    outlined destroy of HandshakeStateMachine?((uint64_t)v7, &demangling cache variable for type metadata for ContiguousBytes?);
    result = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
    if ((result & 1) != 0)
    {
      if ((a2 & 0x1000000000000000) != 0)
        String.UTF8View._foreignCount()();
      __asm { BR              X12 }
    }
  }
  return result;
}

uint64_t specialized Data.append<A>(contentsOf:)()
{
  _QWORD *v1;
  __int128 v3[2];
  uint64_t v4;
  _QWORD v5[6];

  v5[5] = *MEMORY[0x1E0C80C00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Repeated<UInt8>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (!swift_dynamicCast())
  {
    v4 = 0;
    memset(v3, 0, sizeof(v3));
    outlined destroy of HandshakeStateMachine?((uint64_t)v3, &demangling cache variable for type metadata for ContiguousBytes?);
    __asm { BR              X12 }
  }
  outlined init with take of ContiguousBytes(v3, (uint64_t)v5);
  v1 = __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  MEMORY[0x1E0C80A78](v1);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t specialized static HKDF.tlsExporter<A>(secret:label:context:)@<X0>(uint64_t a1@<X0>, Swift::Int a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a5;
  v25 = a4;
  v22 = a2;
  v23 = a3;
  v21 = a1;
  v5 = type metadata accessor for SHA384();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9958];
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SHA384Digest();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for SymmetricKey();
  v14 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, v6, MEMORY[0x1E0CA9950]);
  dispatch thunk of HashFunction.init()();
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v5);
  lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9328], MEMORY[0x1E0CA9320]);
  v17 = dispatch thunk of static Digest.byteCount.getter();
  specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)(v21, v22, v23, (uint64_t)v13, v17);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v18 = dispatch thunk of static Digest.byteCount.getter();
  specialized static HKDF.expandLabel<A, B>(secret:label:context:length:)((uint64_t)v16, 0x726574726F707865, 0xE800000000000000, v25, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v20);
}

void specialized SessionKeyManager.generateTLSExporterKey(label:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD v15[10];

  v15[8] = a3;
  v15[6] = a1;
  v15[7] = a2;
  v3 = type metadata accessor for SHA384();
  v15[4] = *(_QWORD *)(v3 - 8);
  v15[5] = v3;
  MEMORY[0x1E0C80A78](v3);
  v15[1] = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SHA384Digest();
  v15[2] = *(_QWORD *)(v5 - 8);
  v15[3] = v5;
  MEMORY[0x1E0C80A78](v5);
  v15[0] = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
  MEMORY[0x1E0C80A78](v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
  MEMORY[0x1E0C80A78](v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x1E0C80A78](v12);
  v13 = type metadata accessor for SymmetricKey();
  MEMORY[0x1E0C80A78](v13);
  outlined init with copy of SessionKeyManager<SHA384>.State(v15[9], (uint64_t)v11);
  v14 = (char *)sub_1B0D92588 + 4 * byte_1B0DE8460[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0D92588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  outlined destroy of HandshakeStateMachine?(v2, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56);
  v5(v0, 1, 1, v3);
  v6 = *(_QWORD *)(v4 - 96);
  outlined destroy of HandshakeStateMachine?(v0, &demangling cache variable for type metadata for SymmetricKey?);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v6, 1, 1, v3);
}

void specialized SessionKeyManager.generateHashForAuthenticator(transcript:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  v3 = type metadata accessor for SHA384Digest();
  MEMORY[0x1E0C80A78](v3);
  v4 = type metadata accessor for SHA384();
  MEMORY[0x1E0C80A78](v4);
  lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, v5, MEMORY[0x1E0CA9950]);
  dispatch thunk of HashFunction.init()();
  __asm { BR              X10 }
}

void sub_1B0D92884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;

  if (BYTE6(v1) >= v2)
  {
    Data._Representation.subscript.getter();
    v5 = (char *)&loc_1B0D928C4 + dword_1B0D92B1C[v4 >> 62];
    *(_QWORD *)(v3 - 160) = v0;
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1B0D92B04);
}

void specialized SessionKeyManager.generateHMACForAuthenticator(transcript:key:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  MEMORY[0x1E0C80A78](v3);
  __asm { BR              X10 }
}

void sub_1B0D92BCC()
{
  uint64_t v0;
  uint64_t v1;

  if (BYTE6(v0) >= v1)
  {
    Data._Representation.subscript.getter();
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1B0D92EFCLL);
}

uint64_t _s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOg(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 128);
  if (v1 > 7)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t outlined retain of HandshakeMessageParser.ParseResult(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v12 = *(_OWORD *)(a1 + 104);
  v13 = *(_OWORD *)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 120);
  v10 = *(_BYTE *)(a1 + 128);
  outlined copy of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined copy of HandshakeMessage(v14, v2, v3, v4, v5, v6, v7, v8, v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9, v10);
  return a1;
}

uint64_t outlined retain of HandshakeMessage(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 104);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), v4);
  return a1;
}

uint64_t outlined init with copy of HandshakeState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HandshakeState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in ExportedAuthenticator.validate(keyParser:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in ExportedAuthenticator.validate(keyParser:)(a1, a2);
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  int8x16_t v14;
  int8x16_t *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;

  if (!a2)
  {
    v5 = 0;
    a3 = 0;
    goto LABEL_30;
  }
  if (!a3)
  {
    v5 = 0;
    goto LABEL_30;
  }
  if (a3 < 0)
    goto LABEL_33;
  if (!a4)
  {
    a3 = 0;
    v5 = 0;
    goto LABEL_30;
  }
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 == 1)
    {
      v5 = 1;
LABEL_30:
      *(_QWORD *)result = a4;
      *(_BYTE *)(result + 8) = a5;
      *(_QWORD *)(result + 16) = v5;
      return a3;
    }
    v6 = a4 - 1;
    if (a4 == 1)
    {
      a3 = 1;
      v5 = 1;
      goto LABEL_30;
    }
    v7 = a4 - 2;
    if (a4 - 2 >= (unint64_t)(a3 - 2))
      v7 = a3 - 2;
    if (v7 < v6)
      v6 = v7;
    v8 = v6 + 1;
    if (v8 >= 0x11)
    {
      v12 = v8 & 0xF;
      if ((v8 & 0xF) == 0)
        v12 = 16;
      v13 = v8 - v12;
      v10 = v8 - v12 + 1;
      v11 = &a2[v13];
      v9 = v13 + 2;
      v14 = vdupq_n_s8(a5);
      v15 = (int8x16_t *)(a2 + 1);
      do
      {
        *v15++ = v14;
        v13 -= 16;
      }
      while (v13);
    }
    else
    {
      v9 = 2;
      v10 = 1;
      v11 = a2;
    }
    v16 = 0;
    v17 = v10 - a4;
    v18 = v11 + 1;
    while (v17 + v16)
    {
      v18[v16] = a5;
      if (!(v9 - a3 + v16))
      {
        v5 = v10 + v16 + 1;
        goto LABEL_30;
      }
      if (v10 - a3 + v16 == -1)
        goto LABEL_32;
      ++v16;
      if (!(v17 + v16))
      {
        a3 = v9 + v16 - 1;
        v5 = a4;
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = a2 & 0x1000000000000000;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
      _StringObject.sharedUTF8.getter();
    Data._Representation.append(contentsOf:)();
  }
  return v2 >> 60;
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

unint64_t initializeBufferWithCopyOfBuffer for ExportedAuthenticator(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = a2[1];
    if (v7 >> 60 == 15)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      v10 = *a2;
      outlined copy of Data._Representation(*a2, a2[1]);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v7;
    }
    *(_QWORD *)(a1 + 16) = a2[2];
    v11 = *(int *)(a3 + 24);
    v12 = a1 + v11;
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = *(uint64_t *)((char *)a2 + v11 + 8);
    if (v14 >> 60 == 15)
    {
      *(_OWORD *)v12 = *(_OWORD *)v13;
    }
    else
    {
      v15 = *v13;
      outlined copy of Data._Representation(*v13, v14);
      *(_QWORD *)v12 = v15;
      *(_QWORD *)(v12 + 8) = v14;
    }
    *(_QWORD *)(v12 + 16) = v13[2];
    type metadata accessor for HandshakeStateMachine();
    type metadata accessor for HandshakeState(0);
    v16 = (char *)&loc_1B0D93644 + 4 * byte_1B0DE8475[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v8 = *a2;
  *(_QWORD *)a1 = *a2;
  v9 = v8 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return v9;
}

uint64_t destroy for ExportedAuthenticator(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  int *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  int *v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int *v48;
  char *v49;
  uint64_t v50;
  int *v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int *ready;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  unint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  int *v92;
  char *v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  int *v98;
  char *v99;
  uint64_t v100;
  int *v101;
  char *v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t);
  int *v105;
  uint64_t v106;
  int *v107;
  char *v108;
  uint64_t v109;
  int *v110;
  char *v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t);
  int *v114;
  char *v115;
  int *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t *v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t result;
  unint64_t v127;
  unint64_t v128;

  v4 = a1[1];
  if (v4 >> 60 != 15)
    outlined consume of Data._Representation(*a1, v4);
  v5 = (uint64_t *)((char *)a1 + *(int *)(a2 + 24));
  v6 = v5[1];
  if (v6 >> 60 != 15)
    outlined consume of Data._Representation(*v5, v6);
  v7 = (int *)type metadata accessor for HandshakeStateMachine();
  v8 = (uint64_t *)((char *)v5 + v7[6]);
  type metadata accessor for HandshakeState(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = v8[4];
      if (v9 >> 60 != 15)
        outlined consume of Data._Representation(v8[3], v9);
      v10 = v8[7];
      if (v10 >> 60 != 15)
        outlined consume of Data._Representation(v8[6], v10);
      v11 = type metadata accessor for HandshakeState.IdleState(0);
      v12 = (char *)v8 + *(int *)(v11 + 20);
      v13 = (int *)type metadata accessor for SessionTicket();
      if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v13 - 1) + 48))(v12, 1, v13))
      {
        v14 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
        outlined consume of Data._Representation(*(_QWORD *)&v12[v13[7]], *(_QWORD *)&v12[v13[7] + 8]);
        outlined consume of Data._Representation(*(_QWORD *)&v12[v13[8]], *(_QWORD *)&v12[v13[8] + 8]);
        v15 = &v12[v13[9]];
        v16 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
        v17 = (uint64_t *)&v12[v13[13]];
        v18 = v17[1];
        if (v18 >> 60 != 15)
          outlined consume of Data._Representation(*v17, v18);
        v19 = &v12[v13[14]];
        v20 = type metadata accessor for P256.Signing.PublicKey();
        v21 = *(_QWORD *)(v20 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
          (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v20);
      }
      v22 = (char *)v8 + *(int *)(v11 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_81;
        case 1u:
          goto LABEL_82;
        case 2u:
          goto LABEL_83;
        case 3u:
          goto LABEL_85;
        default:
          goto LABEL_95;
      }
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 = v8[4];
      if (v23 >> 60 != 15)
        outlined consume of Data._Representation(v8[3], v23);
      v24 = v8[7];
      if (v24 >> 60 != 15)
        outlined consume of Data._Representation(v8[6], v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v8 + 17));
      v25 = type metadata accessor for HandshakeState.ClientHelloState(0);
      v26 = (char *)v8 + *(int *)(v25 + 36);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v27 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
          v28 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          v29 = &v26[v28[9]];
          v30 = type metadata accessor for SymmetricKey();
          v31 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v30 - 8) + 8);
          v31(v29, v30);
          v31(&v26[v28[10]], v30);
          v31(&v26[v28[11]], v30);
          v32 = v28[12];
          goto LABEL_88;
        case 1u:
          v106 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v106 - 8) + 8))(v26, v106);
          v107 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          v108 = &v26[v107[9]];
          v30 = type metadata accessor for SymmetricKey();
          v31 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v30 - 8) + 8);
          v31(v108, v30);
          v31(&v26[v107[10]], v30);
          v32 = v107[11];
          goto LABEL_88;
        case 2u:
          v109 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v109 - 8) + 8))(v26, v109);
          v110 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          v111 = &v26[v110[9]];
          v30 = type metadata accessor for SymmetricKey();
          v31 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v30 - 8) + 8);
          v31(v111, v30);
          v31(&v26[v110[10]], v30);
          v31(&v26[v110[11]], v30);
          v31(&v26[v110[12]], v30);
          v31(&v26[v110[13]], v30);
          v32 = v110[14];
LABEL_88:
          v31(&v26[v32], v30);
          break;
        case 3u:
          v112 = type metadata accessor for SymmetricKey();
          v113 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v112 - 8) + 8);
          v113(v26, v112);
          v114 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v113(&v26[v114[9]], v112);
          v113(&v26[v114[10]], v112);
          v113(&v26[v114[11]], v112);
          break;
        default:
          break;
      }
      v115 = (char *)v8 + *(int *)(v25 + 40);
      v116 = (int *)type metadata accessor for SessionTicket();
      if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v116 - 1) + 48))(v115, 1, v116))
      {
        v117 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v117 - 8) + 8))(v115, v117);
        outlined consume of Data._Representation(*(_QWORD *)&v115[v116[7]], *(_QWORD *)&v115[v116[7] + 8]);
        outlined consume of Data._Representation(*(_QWORD *)&v115[v116[8]], *(_QWORD *)&v115[v116[8] + 8]);
        v118 = &v115[v116[9]];
        v119 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v119 - 8) + 8))(v118, v119);
        v120 = (uint64_t *)&v115[v116[13]];
        v121 = v120[1];
        if (v121 >> 60 != 15)
          outlined consume of Data._Representation(*v120, v121);
        v122 = &v115[v116[14]];
        v123 = type metadata accessor for P256.Signing.PublicKey();
        v124 = *(_QWORD *)(v123 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v122, 1, v123))
          (*(void (**)(char *, uint64_t))(v124 + 8))(v122, v123);
      }
      break;
    case 2u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v33 = v8[4];
      if (v33 >> 60 != 15)
        outlined consume of Data._Representation(v8[3], v33);
      v34 = v8[7];
      if (v34 >> 60 != 15)
        outlined consume of Data._Representation(v8[6], v34);
      v35 = type metadata accessor for HandshakeState.ServerHelloState(0);
      v36 = (char *)v8 + *(int *)(v35 + 20);
      type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v37 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
        v38 = (int *)type metadata accessor for SessionTicket();
        outlined consume of Data._Representation(*(_QWORD *)&v36[v38[7]], *(_QWORD *)&v36[v38[7] + 8]);
        outlined consume of Data._Representation(*(_QWORD *)&v36[v38[8]], *(_QWORD *)&v36[v38[8] + 8]);
        v39 = &v36[v38[9]];
        v40 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
        v41 = (uint64_t *)&v36[v38[13]];
        v42 = v41[1];
        if (v42 >> 60 != 15)
          outlined consume of Data._Representation(*v41, v42);
        v43 = &v36[v38[14]];
        v44 = type metadata accessor for P256.Signing.PublicKey();
        v45 = *(_QWORD *)(v44 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
          (*(void (**)(char *, uint64_t))(v45 + 8))(v43, v44);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v22 = (char *)v8 + *(int *)(v35 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_81;
        case 1u:
          goto LABEL_82;
        case 2u:
          goto LABEL_83;
        case 3u:
          goto LABEL_85;
        default:
          goto LABEL_95;
      }
    case 3u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v46 = v8[4];
      if (v46 >> 60 != 15)
        outlined consume of Data._Representation(v8[3], v46);
      v47 = v8[7];
      if (v47 >> 60 != 15)
        outlined consume of Data._Representation(v8[6], v47);
      v48 = (int *)type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
      v49 = (char *)v8 + v48[5];
      type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v50 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v49, v50);
        v51 = (int *)type metadata accessor for SessionTicket();
        outlined consume of Data._Representation(*(_QWORD *)&v49[v51[7]], *(_QWORD *)&v49[v51[7] + 8]);
        outlined consume of Data._Representation(*(_QWORD *)&v49[v51[8]], *(_QWORD *)&v49[v51[8] + 8]);
        v52 = &v49[v51[9]];
        v53 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v52, v53);
        v54 = (uint64_t *)&v49[v51[13]];
        v55 = v54[1];
        if (v55 >> 60 != 15)
          outlined consume of Data._Representation(*v54, v55);
        v56 = &v49[v51[14]];
        v57 = type metadata accessor for P256.Signing.PublicKey();
        v58 = *(_QWORD *)(v57 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
          (*(void (**)(char *, uint64_t))(v58 + 8))(v56, v57);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v87 = (uint64_t *)((char *)v8 + v48[6]);
      v88 = v87[1];
      if (v88 >> 60 != 15)
        outlined consume of Data._Representation(*v87, v88);
      v89 = (uint64_t *)((char *)v8 + v48[7]);
      v90 = v89[1];
      if (v90 >> 60 != 15)
        outlined consume of Data._Representation(*v89, v90);
      v22 = (char *)v8 + v48[9];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_81;
        case 1u:
          goto LABEL_82;
        case 2u:
          goto LABEL_83;
        case 3u:
          goto LABEL_85;
        default:
          goto LABEL_95;
      }
    case 4u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v59 = v8[4];
      if (v59 >> 60 != 15)
        outlined consume of Data._Representation(v8[3], v59);
      v60 = v8[7];
      if (v60 >> 60 != 15)
        outlined consume of Data._Representation(v8[6], v60);
      v61 = v8[11];
      if (v61 >> 60 != 15)
        outlined consume of Data._Representation(v8[10], v61);
      v62 = v8[14];
      if (v62 >> 60 != 15)
        outlined consume of Data._Representation(v8[13], v62);
      v63 = type metadata accessor for HandshakeState.ServerCertificateState(0);
      v64 = (char *)v8 + *(int *)(v63 + 40);
      v65 = type metadata accessor for P256.Signing.PublicKey();
      v66 = *(_QWORD *)(v65 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
        (*(void (**)(char *, uint64_t))(v66 + 8))(v64, v65);
      v22 = (char *)v8 + *(int *)(v63 + 44);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_81;
        case 1u:
          goto LABEL_82;
        case 2u:
          goto LABEL_83;
        case 3u:
          goto LABEL_85;
        default:
          goto LABEL_95;
      }
    case 5u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v67 = v8[4];
      if (v67 >> 60 != 15)
        outlined consume of Data._Representation(v8[3], v67);
      v68 = v8[7];
      if (v68 >> 60 != 15)
        outlined consume of Data._Representation(v8[6], v68);
      v69 = (int *)type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
      v70 = (char *)v8 + v69[7];
      v71 = type metadata accessor for P256.Signing.PublicKey();
      v72 = *(_QWORD *)(v71 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
        (*(void (**)(char *, uint64_t))(v72 + 8))(v70, v71);
      v73 = (uint64_t *)((char *)v8 + v69[8]);
      v74 = v73[1];
      if (v74 >> 60 != 15)
        outlined consume of Data._Representation(*v73, v74);
      v75 = (uint64_t *)((char *)v8 + v69[9]);
      v76 = v75[1];
      if (v76 >> 60 != 15)
        outlined consume of Data._Representation(*v75, v76);
      v22 = (char *)v8 + v69[11];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_81;
        case 1u:
          goto LABEL_82;
        case 2u:
          goto LABEL_83;
        case 3u:
          goto LABEL_85;
        default:
          goto LABEL_95;
      }
    case 6u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v77 = v8[4];
      if (v77 >> 60 != 15)
        outlined consume of Data._Representation(v8[3], v77);
      v78 = v8[7];
      if (v78 >> 60 != 15)
        outlined consume of Data._Representation(v8[6], v78);
      ready = (int *)type metadata accessor for HandshakeState.ReadyState(0);
      v80 = (char *)v8 + ready[7];
      v81 = type metadata accessor for P256.Signing.PublicKey();
      v82 = *(_QWORD *)(v81 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
        (*(void (**)(char *, uint64_t))(v82 + 8))(v80, v81);
      v83 = (uint64_t *)((char *)v8 + ready[8]);
      v84 = v83[1];
      if (v84 >> 60 != 15)
        outlined consume of Data._Representation(*v83, v84);
      v85 = (uint64_t *)((char *)v8 + ready[9]);
      v86 = v85[1];
      if (v86 >> 60 != 15)
        outlined consume of Data._Representation(*v85, v86);
      v22 = (char *)v8 + ready[11];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
LABEL_81:
          v91 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v91 - 8) + 8))(v22, v91);
          v92 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
          v93 = &v22[v92[9]];
          v94 = type metadata accessor for SymmetricKey();
          v95 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v94 - 8) + 8);
          v95(v93, v94);
          v95(&v22[v92[10]], v94);
          v95(&v22[v92[11]], v94);
          v96 = v92[12];
          goto LABEL_84;
        case 1u:
LABEL_82:
          v97 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v97 - 8) + 8))(v22, v97);
          v98 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
          v99 = &v22[v98[9]];
          v94 = type metadata accessor for SymmetricKey();
          v95 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v94 - 8) + 8);
          v95(v99, v94);
          v95(&v22[v98[10]], v94);
          v96 = v98[11];
          goto LABEL_84;
        case 2u:
LABEL_83:
          v100 = type metadata accessor for SHA384();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v100 - 8) + 8))(v22, v100);
          v101 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
          v102 = &v22[v101[9]];
          v94 = type metadata accessor for SymmetricKey();
          v95 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v94 - 8) + 8);
          v95(v102, v94);
          v95(&v22[v101[10]], v94);
          v95(&v22[v101[11]], v94);
          v95(&v22[v101[12]], v94);
          v95(&v22[v101[13]], v94);
          v96 = v101[14];
LABEL_84:
          v95(&v22[v96], v94);
          break;
        case 3u:
LABEL_85:
          v103 = type metadata accessor for SymmetricKey();
          v104 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v103 - 8) + 8);
          v104(v22, v103);
          v105 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
          v104(&v22[v105[9]], v103);
          v104(&v22[v105[10]], v103);
          v104(&v22[v105[11]], v103);
          break;
        default:
          goto LABEL_95;
      }
      break;
    default:
      break;
  }
LABEL_95:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5 + v7[7]);
  v125 = (uint64_t *)((char *)v5 + v7[9]);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v127 = v125[4];
  if (v127 >> 60 != 15)
    result = outlined consume of Data._Representation(v125[3], v127);
  v128 = v125[7];
  if (v128 >> 60 != 15)
    return outlined consume of Data._Representation(v125[6], v128);
  return result;
}

void initializeWithCopy for ExportedAuthenticator(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v7 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v6;
  }
  *(_QWORD *)(a1 + 16) = a2[2];
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = (uint64_t *)((char *)a2 + v8);
  v11 = *(uint64_t *)((char *)a2 + v8 + 8);
  if (v11 >> 60 == 15)
  {
    *(_OWORD *)v9 = *(_OWORD *)v10;
  }
  else
  {
    v12 = *v10;
    outlined copy of Data._Representation(*v10, v11);
    *(_QWORD *)v9 = v12;
    *(_QWORD *)(v9 + 8) = v11;
  }
  *(_QWORD *)(v9 + 16) = v10[2];
  type metadata accessor for HandshakeStateMachine();
  type metadata accessor for HandshakeState(0);
  v13 = (char *)sub_1B0D966F4 + 4 * byte_1B0DE84D6[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0D966F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  int *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  _OWORD *v81;
  _OWORD *v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;

  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)v0 = *(_QWORD *)v1;
  *(_QWORD *)(v0 + 8) = v4;
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(v0 + 24) = *(_OWORD *)(v1 + 24);
  }
  else
  {
    v6 = *(_QWORD *)(v1 + 24);
    outlined copy of Data._Representation(v6, v5);
    *(_QWORD *)(v0 + 24) = v6;
    *(_QWORD *)(v0 + 32) = v5;
  }
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 56);
  v95 = v3;
  v96 = v2;
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v1 + 48);
  }
  else
  {
    v8 = *(_QWORD *)(v1 + 48);
    outlined copy of Data._Representation(v8, v7);
    *(_QWORD *)(v0 + 48) = v8;
    *(_QWORD *)(v0 + 56) = v7;
  }
  *(_QWORD *)(v0 + 64) = *(_QWORD *)(v1 + 64);
  *(_DWORD *)(v0 + 72) = *(_DWORD *)(v1 + 72);
  v9 = type metadata accessor for HandshakeState.IdleState(0);
  v10 = *(int *)(v9 + 20);
  v11 = (char *)(v0 + v10);
  v12 = (char *)(v1 + v10);
  v13 = (int *)type metadata accessor for SessionTicket();
  v14 = *((_QWORD *)v13 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v93 = v14;
    v94 = v9;
    v16 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v11, v12, v16);
    *(_DWORD *)&v11[v13[5]] = *(_DWORD *)&v12[v13[5]];
    *(_DWORD *)&v11[v13[6]] = *(_DWORD *)&v12[v13[6]];
    v17 = v13[7];
    v18 = (uint64_t *)&v11[v17];
    v19 = &v12[v17];
    v20 = *(_QWORD *)&v12[v17];
    v21 = *(_QWORD *)&v12[v17 + 8];
    outlined copy of Data._Representation(v20, v21);
    *v18 = v20;
    v18[1] = v21;
    v18[2] = *((_QWORD *)v19 + 2);
    v22 = v13[8];
    v23 = (uint64_t *)&v11[v22];
    v24 = &v12[v22];
    v25 = *(_QWORD *)&v12[v22];
    v26 = *(_QWORD *)&v12[v22 + 8];
    outlined copy of Data._Representation(v25, v26);
    *v23 = v25;
    v23[1] = v26;
    v23[2] = *((_QWORD *)v24 + 2);
    v27 = v13[9];
    v28 = &v11[v27];
    v29 = &v12[v27];
    v30 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
    *(_DWORD *)&v11[v13[10]] = *(_DWORD *)&v12[v13[10]];
    *(_WORD *)&v11[v13[11]] = *(_WORD *)&v12[v13[11]];
    *(_WORD *)&v11[v13[12]] = *(_WORD *)&v12[v13[12]];
    v31 = v13[13];
    v32 = &v11[v31];
    v33 = (uint64_t *)&v12[v31];
    v34 = *(_QWORD *)&v12[v31 + 8];
    if (v34 >> 60 == 15)
    {
      *(_OWORD *)v32 = *(_OWORD *)v33;
    }
    else
    {
      v35 = *v33;
      outlined copy of Data._Representation(*v33, v34);
      *(_QWORD *)v32 = v35;
      *((_QWORD *)v32 + 1) = v34;
    }
    *((_QWORD *)v32 + 2) = v33[2];
    v9 = v94;
    v36 = v13[14];
    v37 = &v11[v36];
    v38 = &v12[v36];
    v39 = type metadata accessor for P256.Signing.PublicKey();
    v40 = *(_QWORD *)(v39 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      v41 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v93 + 56))(v11, 0, 1, v13);
  }
  v42 = v95;
  v43 = *(int *)(v9 + 24);
  v44 = (char *)(v0 + v43);
  v45 = (char *)(v1 + v43);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v47 = v96;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v48 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v44, v45, v48);
      v49 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v50 = v49[9];
      v51 = &v44[v50];
      v52 = &v45[v50];
      v53 = type metadata accessor for SymmetricKey();
      v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
      v55 = v52;
      v47 = v96;
      v54(v51, v55, v53);
      v54(&v44[v49[10]], &v45[v49[10]], v53);
      v54(&v44[v49[11]], &v45[v49[11]], v53);
      v56 = v53;
      v42 = v95;
      v54(&v44[v49[12]], &v45[v49[12]], v56);
      swift_storeEnumTagMultiPayload();
      break;
    case 1u:
      v57 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v44, v45, v57);
      v58 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v59 = v58[9];
      v60 = &v44[v59];
      v61 = &v45[v59];
      v62 = type metadata accessor for SymmetricKey();
      v63 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16);
      v64 = v61;
      v47 = v96;
      v63(v60, v64, v62);
      v63(&v44[v58[10]], &v45[v58[10]], v62);
      v65 = v62;
      v42 = v95;
      v63(&v44[v58[11]], &v45[v58[11]], v65);
      swift_storeEnumTagMultiPayload();
      break;
    case 2u:
      v66 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v44, v45, v66);
      v67 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v68 = v67[9];
      v69 = &v44[v68];
      v70 = &v45[v68];
      v71 = type metadata accessor for SymmetricKey();
      v72 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16);
      v73 = v70;
      v47 = v96;
      v72(v69, v73, v71);
      v72(&v44[v67[10]], &v45[v67[10]], v71);
      v72(&v44[v67[11]], &v45[v67[11]], v71);
      v72(&v44[v67[12]], &v45[v67[12]], v71);
      v72(&v44[v67[13]], &v45[v67[13]], v71);
      v74 = v71;
      v42 = v95;
      v72(&v44[v67[14]], &v45[v67[14]], v74);
      swift_storeEnumTagMultiPayload();
      break;
    case 3u:
      v75 = type metadata accessor for SymmetricKey();
      v76 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16);
      v76(v44, v45, v75);
      v77 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v76(&v44[v77[9]], &v45[v77[9]], v75);
      v76(&v44[v77[10]], &v45[v77[10]], v75);
      v76(&v44[v77[11]], &v45[v77[11]], v75);
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      break;
  }
  swift_storeEnumTagMultiPayload();
  v78 = v97[7];
  v79 = *(_OWORD *)(v98 + v78 + 24);
  *(_OWORD *)(v47 + v78 + 24) = v79;
  (**(void (***)(void))(v79 - 8))();
  v80 = v97[8];
  v81 = (_OWORD *)(v47 + v80);
  v82 = (_OWORD *)(v98 + v80);
  v83 = v82[1];
  *v81 = *v82;
  v81[1] = v83;
  v84 = v97[9];
  v85 = v47 + v84;
  v86 = v98 + v84;
  v87 = *(_QWORD *)(v98 + v84 + 8);
  *(_QWORD *)v85 = *(_QWORD *)(v98 + v84);
  *(_QWORD *)(v85 + 8) = v87;
  *(_QWORD *)(v85 + 16) = *(_QWORD *)(v98 + v84 + 16);
  v88 = *(_QWORD *)(v98 + v84 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v88 >> 60 == 15)
  {
    *(_OWORD *)(v85 + 24) = *(_OWORD *)(v86 + 24);
  }
  else
  {
    v89 = *(_QWORD *)(v86 + 24);
    outlined copy of Data._Representation(v89, v88);
    *(_QWORD *)(v85 + 24) = v89;
    *(_QWORD *)(v85 + 32) = v88;
  }
  *(_QWORD *)(v85 + 40) = *(_QWORD *)(v86 + 40);
  v90 = *(_QWORD *)(v86 + 56);
  if (v90 >> 60 == 15)
  {
    *(_OWORD *)(v85 + 48) = *(_OWORD *)(v86 + 48);
  }
  else
  {
    v91 = *(_QWORD *)(v86 + 48);
    outlined copy of Data._Representation(v91, *(_QWORD *)(v86 + 56));
    *(_QWORD *)(v85 + 48) = v91;
    *(_QWORD *)(v85 + 56) = v90;
  }
  *(_QWORD *)(v85 + 64) = *(_QWORD *)(v86 + 64);
  *(_DWORD *)(v85 + 72) = *(_DWORD *)(v86 + 72);
  return v42;
}

uint64_t assignWithCopy for ExportedAuthenticator(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 *v32;
  __int128 *v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _OWORD *v41;
  _OWORD *v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __int16 v50;

  v6 = a2[1];
  if (*(_QWORD *)(a1 + 8) >> 60 == 15)
  {
    if (v6 >> 60 == 15)
    {
      v7 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_OWORD *)a1 = v7;
      goto LABEL_10;
    }
    v9 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v6;
    goto LABEL_8;
  }
  if (v6 >> 60 != 15)
  {
    v10 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    v11 = *(_QWORD *)a1;
    v12 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v6;
    outlined consume of Data._Representation(v11, v12);
LABEL_8:
    v8 = a2[2];
    goto LABEL_9;
  }
  outlined destroy of ByteBuffer(a1);
  v8 = a2[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_9:
  *(_QWORD *)(a1 + 16) = v8;
LABEL_10:
  v13 = *(int *)(a3 + 24);
  v14 = a1 + v13;
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = *(uint64_t *)((char *)a2 + v13 + 8);
  if (*(_QWORD *)(a1 + v13 + 8) >> 60 == 15)
  {
    if (v16 >> 60 == 15)
    {
      v17 = *(_OWORD *)v15;
      *(_QWORD *)(v14 + 16) = v15[2];
      *(_OWORD *)v14 = v17;
      goto LABEL_19;
    }
    v19 = *v15;
    outlined copy of Data._Representation(*v15, v16);
    *(_QWORD *)v14 = v19;
    *(_QWORD *)(v14 + 8) = v16;
    goto LABEL_17;
  }
  if (v16 >> 60 != 15)
  {
    v20 = *v15;
    outlined copy of Data._Representation(*v15, v16);
    v21 = *(_QWORD *)v14;
    v22 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)v14 = v20;
    *(_QWORD *)(v14 + 8) = v16;
    outlined consume of Data._Representation(v21, v22);
LABEL_17:
    v18 = v15[2];
    goto LABEL_18;
  }
  outlined destroy of ByteBuffer(v14);
  v18 = v15[2];
  *(_OWORD *)v14 = *(_OWORD *)v15;
LABEL_18:
  *(_QWORD *)(v14 + 16) = v18;
LABEL_19:
  v23 = type metadata accessor for HandshakeStateMachine();
  v24 = v23;
  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of PartialHandshakeResult(v14 + *(int *)(v23 + 24), type metadata accessor for HandshakeState);
    type metadata accessor for HandshakeState(0);
    v25 = (char *)&loc_1B0D989D0 + 4 * byte_1B0DE850A[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v14 + *(int *)(v23 + 28)), (uint64_t *)((char *)v15 + *(int *)(v23 + 28)));
  v26 = *(int *)(v24 + 32);
  v27 = (_QWORD *)(v14 + v26);
  v28 = (uint64_t *)((char *)v15 + v26);
  *v27 = *v28;
  v27[1] = v28[1];
  v27[2] = v28[2];
  v27[3] = v28[3];
  v29 = *(int *)(v24 + 36);
  v30 = v14 + v29;
  v31 = (char *)v15 + v29;
  *(_QWORD *)v30 = *(uint64_t *)((char *)v15 + v29);
  *(_QWORD *)(v30 + 8) = *(uint64_t *)((char *)v15 + v29 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v30 + 16) = *((_QWORD *)v31 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = (__int128 *)(v30 + 24);
  v33 = (__int128 *)(v31 + 24);
  v34 = *((_QWORD *)v31 + 4);
  if (*(_QWORD *)(v30 + 32) >> 60 == 15)
  {
    if (v34 >> 60 == 15)
    {
      v35 = *v33;
      *(_QWORD *)(v30 + 40) = *((_QWORD *)v31 + 5);
      *v32 = v35;
      goto LABEL_29;
    }
    v37 = *((_QWORD *)v31 + 3);
    outlined copy of Data._Representation(v37, *((_QWORD *)v31 + 4));
    *(_QWORD *)(v30 + 24) = v37;
    *(_QWORD *)(v30 + 32) = v34;
  }
  else
  {
    if (v34 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(v30 + 24);
      v36 = *((_QWORD *)v31 + 5);
      *v32 = *v33;
      *(_QWORD *)(v30 + 40) = v36;
      goto LABEL_29;
    }
    v38 = *((_QWORD *)v31 + 3);
    outlined copy of Data._Representation(v38, *((_QWORD *)v31 + 4));
    v39 = *(_QWORD *)(v30 + 24);
    v40 = *(_QWORD *)(v30 + 32);
    *(_QWORD *)(v30 + 24) = v38;
    *(_QWORD *)(v30 + 32) = v34;
    outlined consume of Data._Representation(v39, v40);
  }
  *(_QWORD *)(v30 + 40) = *((_QWORD *)v31 + 5);
LABEL_29:
  v41 = (_OWORD *)(v30 + 48);
  v42 = v31 + 48;
  v43 = *((_QWORD *)v31 + 7);
  if (*(_QWORD *)(v30 + 56) >> 60 != 15)
  {
    if (v43 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(v30 + 48);
      v45 = *((_QWORD *)v31 + 8);
      *v41 = *v42;
      *(_QWORD *)(v30 + 64) = v45;
      goto LABEL_37;
    }
    v47 = *((_QWORD *)v31 + 6);
    outlined copy of Data._Representation(v47, *((_QWORD *)v31 + 7));
    v48 = *(_QWORD *)(v30 + 48);
    v49 = *(_QWORD *)(v30 + 56);
    *(_QWORD *)(v30 + 48) = v47;
    *(_QWORD *)(v30 + 56) = v43;
    outlined consume of Data._Representation(v48, v49);
LABEL_36:
    *(_QWORD *)(v30 + 64) = *((_QWORD *)v31 + 8);
    goto LABEL_37;
  }
  if (v43 >> 60 != 15)
  {
    v46 = *((_QWORD *)v31 + 6);
    outlined copy of Data._Representation(v46, *((_QWORD *)v31 + 7));
    *(_QWORD *)(v30 + 48) = v46;
    *(_QWORD *)(v30 + 56) = v43;
    goto LABEL_36;
  }
  v44 = *v42;
  *(_QWORD *)(v30 + 64) = *((_QWORD *)v31 + 8);
  *v41 = v44;
LABEL_37:
  v50 = *((_WORD *)v31 + 36);
  *(_BYTE *)(v30 + 74) = v31[74];
  *(_WORD *)(v30 + 72) = v50;
  *(_BYTE *)(v30 + 75) = v31[75];
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

void initializeWithTake for ExportedAuthenticator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(int *)(a3 + 24);
  v4 = a1 + v3;
  *(_OWORD *)v4 = *(_OWORD *)(a2 + v3);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + v3 + 16);
  type metadata accessor for HandshakeStateMachine();
  type metadata accessor for HandshakeState(0);
  v5 = (char *)sub_1B0D9ADE8 + 4 * word_1B0DE8532[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0D9ADE8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__dst, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  _OWORD *v79;
  _OWORD *v80;
  __int128 v81;
  uint64_t v82;
  _OWORD *v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  void (*v102)(char *, char *, uint64_t);
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, char *, uint64_t);
  int *v106;
  char *v107;
  uint64_t v108;
  int *v109;
  uint64_t v110;

  v108 = v32;
  v33 = v31[3];
  v30[2] = v31[2];
  v30[3] = v33;
  *(_OWORD *)((char *)v30 + 60) = *(_OWORD *)((char *)v31 + 60);
  v34 = v31[1];
  *v30 = *v31;
  v30[1] = v34;
  v35 = type metadata accessor for HandshakeState.IdleState(0);
  v36 = *(int *)(v35 + 20);
  v37 = (char *)v30 + v36;
  v38 = (char *)v31 + v36;
  v39 = (int *)type metadata accessor for SessionTicket();
  v40 = *((_QWORD *)v39 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v40 + 48))(v38, 1, v39))
  {
    v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v42 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v37, v38, v42);
    *(_DWORD *)&v37[v39[5]] = *(_DWORD *)&v38[v39[5]];
    *(_DWORD *)&v37[v39[6]] = *(_DWORD *)&v38[v39[6]];
    v43 = v39[7];
    v44 = &v37[v43];
    v45 = &v38[v43];
    *(_OWORD *)v44 = *(_OWORD *)v45;
    *((_QWORD *)v44 + 2) = *((_QWORD *)v45 + 2);
    v46 = v39[8];
    v47 = &v37[v46];
    v48 = &v38[v46];
    *(_OWORD *)v47 = *(_OWORD *)v48;
    *((_QWORD *)v47 + 2) = *((_QWORD *)v48 + 2);
    v49 = v39[9];
    v50 = &v37[v49];
    v51 = &v38[v49];
    v52 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
    *(_DWORD *)&v37[v39[10]] = *(_DWORD *)&v38[v39[10]];
    *(_WORD *)&v37[v39[11]] = *(_WORD *)&v38[v39[11]];
    *(_WORD *)&v37[v39[12]] = *(_WORD *)&v38[v39[12]];
    v53 = v39[13];
    v54 = &v37[v53];
    v55 = &v38[v53];
    *((_QWORD *)v54 + 2) = *((_QWORD *)v55 + 2);
    *(_OWORD *)v54 = *(_OWORD *)v55;
    v56 = v39[14];
    v107 = &v37[v56];
    v57 = &v38[v56];
    v58 = type metadata accessor for P256.Signing.PublicKey();
    v59 = *(_QWORD *)(v58 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
    {
      v60 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v107, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v107, v57, v58);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v107, 0, 1, v58);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v40 + 56))(v37, 0, 1, v39);
  }
  v61 = v108;
  v62 = *(int *)(v35 + 24);
  v63 = (char *)v30 + v62;
  v64 = (char *)v31 + v62;
  v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v66 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v63, v64, v66);
      v67 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v68 = v67[9];
      v69 = &v63[v68];
      v70 = &v64[v68];
      v71 = type metadata accessor for SymmetricKey();
      v72 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 32);
      v72(v69, v70, v71);
      v72(&v63[v67[10]], &v64[v67[10]], v71);
      v72(&v63[v67[11]], &v64[v67[11]], v71);
      v73 = v71;
      v61 = v108;
      v72(&v63[v67[12]], &v64[v67[12]], v73);
      swift_storeEnumTagMultiPayload();
      break;
    case 1u:
      v88 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32))(v63, v64, v88);
      v89 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v90 = v89[9];
      v91 = &v63[v90];
      v92 = &v64[v90];
      v93 = type metadata accessor for SymmetricKey();
      v94 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 32);
      v94(v91, v92, v93);
      v94(&v63[v89[10]], &v64[v89[10]], v93);
      v95 = v93;
      v61 = v108;
      v94(&v63[v89[11]], &v64[v89[11]], v95);
      swift_storeEnumTagMultiPayload();
      break;
    case 2u:
      v96 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 32))(v63, v64, v96);
      v97 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v98 = v97[9];
      v99 = &v63[v98];
      v100 = &v64[v98];
      v101 = type metadata accessor for SymmetricKey();
      v102 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 32);
      v102(v99, v100, v101);
      v102(&v63[v97[10]], &v64[v97[10]], v101);
      v102(&v63[v97[11]], &v64[v97[11]], v101);
      v102(&v63[v97[12]], &v64[v97[12]], v101);
      v102(&v63[v97[13]], &v64[v97[13]], v101);
      v103 = v101;
      v61 = v108;
      v102(&v63[v97[14]], &v64[v97[14]], v103);
      swift_storeEnumTagMultiPayload();
      break;
    case 3u:
      v104 = type metadata accessor for SymmetricKey();
      v105 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 32);
      v105(v63, v64, v104);
      v106 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v105(&v63[v106[9]], &v64[v106[9]], v104);
      v105(&v63[v106[10]], &v64[v106[10]], v104);
      v105(&v63[v106[11]], &v64[v106[11]], v104);
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      break;
  }
  swift_storeEnumTagMultiPayload();
  v74 = v109[7];
  v75 = v29 + v74;
  v76 = v110 + v74;
  v77 = *(_OWORD *)(v76 + 16);
  *(_OWORD *)v75 = *(_OWORD *)v76;
  *(_OWORD *)(v75 + 16) = v77;
  *(_QWORD *)(v75 + 32) = *(_QWORD *)(v76 + 32);
  v78 = v109[8];
  v79 = (_OWORD *)(v29 + v78);
  v80 = (_OWORD *)(v110 + v78);
  v81 = v80[1];
  *v79 = *v80;
  v79[1] = v81;
  v82 = v109[9];
  v83 = (_OWORD *)(v29 + v82);
  v84 = (_OWORD *)(v110 + v82);
  *(_OWORD *)((char *)v83 + 60) = *(_OWORD *)((char *)v84 + 60);
  v85 = v84[3];
  v83[2] = v84[2];
  v83[3] = v85;
  v86 = v84[1];
  *v83 = *v84;
  v83[1] = v86;
  return v61;
}

uint64_t assignWithTake for ExportedAuthenticator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6 >> 60 == 15)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  outlined consume of Data._Representation(v8, v6);
LABEL_6:
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = *(_QWORD *)(a1 + v9 + 8);
  if (v12 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)v10 = *(_OWORD *)v11;
    goto LABEL_11;
  }
  v13 = *(_QWORD *)(v11 + 8);
  if (v13 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(v10);
    goto LABEL_9;
  }
  v14 = *(_QWORD *)v10;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_QWORD *)(v10 + 8) = v13;
  outlined consume of Data._Representation(v14, v12);
LABEL_11:
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
  v15 = type metadata accessor for HandshakeStateMachine();
  v16 = v15;
  if (a1 != a2)
  {
    outlined destroy of PartialHandshakeResult(v10 + *(int *)(v15 + 24), type metadata accessor for HandshakeState);
    type metadata accessor for HandshakeState(0);
    v17 = (char *)&loc_1B0D9C8B0 + 4 * word_1B0DE856C[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v18 = *(int *)(v15 + 28);
  v19 = v10 + v18;
  v20 = v11 + v18;
  __swift_destroy_boxed_opaque_existential_1(v10 + v18);
  v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16) = v21;
  *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
  v22 = *(int *)(v16 + 32);
  v23 = (_OWORD *)(v10 + v22);
  v24 = (_OWORD *)(v11 + v22);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = *(int *)(v16 + 36);
  v27 = v10 + v26;
  v28 = v11 + v26;
  v29 = *(_QWORD *)(v11 + v26 + 8);
  *(_QWORD *)v27 = *(_QWORD *)(v11 + v26);
  *(_QWORD *)(v27 + 8) = v29;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v27 + 16) = *(_QWORD *)(v28 + 16);
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(v27 + 32);
  if (v30 >> 60 == 15)
    goto LABEL_16;
  v31 = *(_QWORD *)(v28 + 32);
  if (v31 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(v27 + 24);
LABEL_16:
    *(_OWORD *)(v27 + 24) = *(_OWORD *)(v28 + 24);
    *(_QWORD *)(v27 + 40) = *(_QWORD *)(v28 + 40);
    goto LABEL_18;
  }
  v32 = *(_QWORD *)(v27 + 24);
  *(_QWORD *)(v27 + 24) = *(_QWORD *)(v28 + 24);
  *(_QWORD *)(v27 + 32) = v31;
  outlined consume of Data._Representation(v32, v30);
  *(_QWORD *)(v27 + 40) = *(_QWORD *)(v28 + 40);
LABEL_18:
  v33 = *(_QWORD *)(v27 + 56);
  if (v33 >> 60 != 15)
  {
    v34 = *(_QWORD *)(v28 + 56);
    if (v34 >> 60 != 15)
    {
      v35 = *(_QWORD *)(v27 + 48);
      *(_QWORD *)(v27 + 48) = *(_QWORD *)(v28 + 48);
      *(_QWORD *)(v27 + 56) = v34;
      outlined consume of Data._Representation(v35, v33);
      *(_QWORD *)(v27 + 64) = *(_QWORD *)(v28 + 64);
      goto LABEL_23;
    }
    outlined destroy of ByteBuffer(v27 + 48);
  }
  *(_OWORD *)(v27 + 48) = *(_OWORD *)(v28 + 48);
  *(_QWORD *)(v27 + 64) = *(_QWORD *)(v28 + 64);
LABEL_23:
  *(_WORD *)(v27 + 72) = *(_WORD *)(v28 + 72);
  *(_BYTE *)(v27 + 74) = *(_BYTE *)(v28 + 74);
  *(_BYTE *)(v27 + 75) = *(_BYTE *)(v28 + 75);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExportedAuthenticator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0D9E238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 11)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    v5 = ((4 * (_DWORD)v4) & 0xC) == 0;
    v6 = ((4 * v4) & 0xC | (v4 >> 2)) ^ 0xF;
    if (v5)
      return 0;
    else
      return v6;
  }
  else
  {
    v10 = type metadata accessor for HandshakeStateMachine();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ExportedAuthenticator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1B0D9E2C4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 11)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  }
  else
  {
    v7 = type metadata accessor for HandshakeStateMachine();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for ExportedAuthenticator()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for HandshakeStateMachine();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t partial apply for specialized closure #3 in Data.append<A>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = specialized closure #3 in Data.append<A>(contentsOf:)(a1, a2, *(_QWORD *)(v3 + 16), **(_QWORD **)(v3 + 32), *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8));
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
    a3[2] = v8;
    a3[3] = v9;
  }
  return result;
}

uint64_t outlined init with take of ContiguousBytes(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t specialized closure #3 in Data.append<A>(contentsOf:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  char v8;

  if (result)
  {
    if (__OFSUB__(a2 - result, a3))
    {
      __break(1u);
      goto LABEL_9;
    }
    v7 = result + a3;
  }
  else
  {
    v7 = 0;
  }
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = a5;
  if (!v7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain_n();
  result = _StringGuts.copyUTF8(into:)();
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1B0D9E4E4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #3 in Data.append<A>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;

  result = specialized closure #3 in Data.append<A>(contentsOf:)(a1, a2, *(_QWORD *)(v3 + 16), **(_QWORD **)(v3 + 32), *(_BYTE *)(*(_QWORD *)(v3 + 32) + 8));
  if (!v4)
  {
    *(_QWORD *)a3 = result;
    *(_BYTE *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_QWORD *)(a3 + 24) = v9;
  }
  return result;
}

uint64_t specialized closure #3 in Data.append<A>(contentsOf:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  if (!result)
    return a4;
  if (!__OFSUB__(a2 - result, a3))
  {
    specialized Sequence._copyContents(initializing:)((uint64_t)&v5, (_BYTE *)(result + a3), a2 - result - a3, a4, a5);
    return v5;
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>;
  if (!lazy protocol witness table cache variable for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
    result = MEMORY[0x1B5E111D8](MEMORY[0x1E0CA9470], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>);
  }
  return result;
}

uint64_t closure #1 in Data.append<A>(contentsOf:)partial apply()
{
  return partial apply for closure #1 in Data.append<A>(contentsOf:)();
}

void *ExtensionType.serverName.unsafeMutableAddressor()
{
  return &static ExtensionType.serverName;
}

void *ExtensionType.supportedGroups.unsafeMutableAddressor()
{
  return &static ExtensionType.supportedGroups;
}

void *ExtensionType.supportedVersions.unsafeMutableAddressor()
{
  return &static ExtensionType.supportedVersions;
}

void *ExtensionType.applicationLayerProtocolNegotiation.unsafeMutableAddressor()
{
  return &static ExtensionType.applicationLayerProtocolNegotiation;
}

void *ExtensionType.keyShare.unsafeMutableAddressor()
{
  return &static ExtensionType.keyShare;
}

void *ExtensionType.earlyData.unsafeMutableAddressor()
{
  return &static ExtensionType.earlyData;
}

void *ExtensionType.signatureAlgorithms.unsafeMutableAddressor()
{
  return &static ExtensionType.signatureAlgorithms;
}

void *ExtensionType.serverCertificateType.unsafeMutableAddressor()
{
  return &static ExtensionType.serverCertificateType;
}

void *ExtensionType.quicTransportParameters.unsafeMutableAddressor()
{
  return &static ExtensionType.quicTransportParameters;
}

void *ExtensionType.preSharedKeyKexModes.unsafeMutableAddressor()
{
  return &static ExtensionType.preSharedKeyKexModes;
}

void *ExtensionType.preSharedKey.unsafeMutableAddressor()
{
  return &static ExtensionType.preSharedKey;
}

void *ExtensionType.ticketRequest.unsafeMutableAddressor()
{
  return &static ExtensionType.ticketRequest;
}

uint64_t ByteBuffer.writeExtensionType(_:)(unsigned int a1)
{
  __int16 v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v2 = bswap32(a1) >> 16;
  v3[3] = MEMORY[0x1E0DEAC20];
  v3[4] = MEMORY[0x1E0CB1AA8];
  v3[0] = &v2;
  v3[1] = v3;
  __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  return 2;
}

void ByteBuffer.readExtensionType()()
{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 16), 2))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0D9E880);
}

_WORD *protocol witness for RawRepresentable.init(rawValue:) in conformance ExtensionType@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *result;
  *(_BYTE *)(a2 + 2) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ExtensionType(_WORD *a1@<X8>)
{
  _WORD *v1;

  *a1 = *v1;
}

uint64_t static ExtensionType.supportedGroups.getter()
{
  return 10;
}

uint64_t static ExtensionType.signatureAlgorithms.getter()
{
  return 13;
}

uint64_t static ExtensionType.applicationLayerProtocolNegotiation.getter()
{
  return 16;
}

uint64_t static ExtensionType.serverCertificateType.getter()
{
  return 20;
}

uint64_t static ExtensionType.earlyData.getter()
{
  return 42;
}

uint64_t static ExtensionType.supportedVersions.getter()
{
  return 43;
}

uint64_t static ExtensionType.keyShare.getter()
{
  return 51;
}

uint64_t static ExtensionType.quicTransportParameters.getter()
{
  return 57;
}

uint64_t static ExtensionType.preSharedKeyKexModes.getter()
{
  return 45;
}

uint64_t static ExtensionType.preSharedKey.getter()
{
  return 41;
}

uint64_t static ExtensionType.ticketRequest.getter()
{
  return 58;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExtensionType()
{
  Swift::UInt16 *v0;
  Swift::UInt16 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ExtensionType()
{
  Swift::UInt16 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExtensionType()
{
  Swift::UInt16 *v0;
  Swift::UInt16 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ExtensionType(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

uint64_t ExtensionType.description.getter(unsigned __int16 a1)
{
  int v1;
  uint64_t result;
  Swift::String v3;
  Swift::String v4;
  unsigned int v5;

  v1 = a1;
  result = 0x4E7265767265732ELL;
  switch(v1)
  {
    case 0:
      return result;
    case 10:
      result = 0xD000000000000010;
      break;
    case 13:
      result = 0xD000000000000014;
      break;
    case 16:
      result = 0xD000000000000024;
      break;
    case 20:
      result = 0xD000000000000016;
      break;
    case 41:
      v5 = 1701998638;
      goto LABEL_13;
    case 42:
      result = 0x6144796C7261652ELL;
      break;
    case 43:
      result = 0xD000000000000012;
      break;
    case 45:
      result = 0xD000000000000015;
      break;
    case 51:
      v5 = 2036689710;
LABEL_13:
      result = v5 | 0x7261685300000000;
      break;
    case 57:
      result = 0xD000000000000018;
      break;
    case 58:
      result = 0x5274656B6369742ELL;
      break;
    default:
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v4._countAndFlagsBits = 41;
      v4._object = (void *)0xE100000000000000;
      String.append(_:)(v4);
      result = 0xD000000000000018;
      break;
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ExtensionType()
{
  unsigned __int16 *v0;

  return ExtensionType.description.getter(*v0);
}

void TLSMessageSerializer.writeHandshakeMessage(_:into:)(__int128 *a1)
{
  uint64_t v2;
  _BYTE v3[224];

  outlined init with take of HandshakeMessage(a1, (uint64_t)&v2);
  outlined init with take of HandshakeMessage(a1, (uint64_t)v3);
  __asm { BR              X10 }
}

void sub_1B0D9EC4C()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  *(_OWORD *)(v0 - 128) = v5;
  *(_OWORD *)(v0 - 112) = v6;
  *(_QWORD *)(v0 - 96) = v7;
  *(_OWORD *)(v0 - 192) = v1;
  *(_OWORD *)(v0 - 176) = v2;
  *(_OWORD *)(v0 - 160) = v3;
  *(_OWORD *)(v0 - 144) = v4;
  specialized ByteBuffer.writeHandshakeMessage<A>(_:)();
}

uint64_t sub_1B0D9EE7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v9;
  __int16 *v10;
  __int16 **v11;
  uint64_t v12;
  uint64_t v13;

  v4 = BYTE6(v0);
  LOBYTE(v9) = 0;
  v12 = v2;
  v13 = v3;
  v10 = &v9;
  v11 = (__int16 **)((char *)&v9 + 1);
  __swift_project_boxed_opaque_existential_1(&v10, v2);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  v9 = 0;
  v12 = v2;
  v13 = v3;
  v10 = &v9;
  v11 = &v10;
  __swift_project_boxed_opaque_existential_1(&v10, v2);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  ClientHello.write(into:)(v1);
  if (v5 > 0xFFFFFF)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v6 = v5;
  specialized ByteBuffer.setInteger<A>(_:at:as:)((unint64_t)v5 >> 16, v4);
  if (__OFADD__(v4, v7))
    goto LABEL_5;
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v6, v4 + v7);
  return v6 + 4;
}

uint64_t sub_1B0D9F02C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v9;
  __int16 *v10;
  __int16 **v11;
  uint64_t v12;
  uint64_t v13;

  v4 = BYTE6(v0);
  LOBYTE(v9) = 0;
  v12 = v2;
  v13 = v3;
  v10 = &v9;
  v11 = (__int16 **)((char *)&v9 + 1);
  __swift_project_boxed_opaque_existential_1(&v10, v2);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  v9 = 0;
  v12 = v2;
  v13 = v3;
  v10 = &v9;
  v11 = &v10;
  __swift_project_boxed_opaque_existential_1(&v10, v2);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  ServerHello.write(into:)(v1);
  if (v5 > 0xFFFFFF)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v6 = v5;
  specialized ByteBuffer.setInteger<A>(_:at:as:)((unint64_t)v5 >> 16, v4);
  if (__OFADD__(v4, v7))
    goto LABEL_5;
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v6, v4 + v7);
  return v6 + 4;
}

uint64_t sub_1B0D9F1D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v9;
  __int16 *v10;
  __int16 **v11;
  uint64_t v12;
  uint64_t v13;

  v4 = BYTE6(v0);
  LOBYTE(v9) = 0;
  v12 = v2;
  v13 = v3;
  v10 = &v9;
  v11 = (__int16 **)((char *)&v9 + 1);
  __swift_project_boxed_opaque_existential_1(&v10, v2);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  v9 = 0;
  v12 = v2;
  v13 = v3;
  v10 = &v9;
  v11 = &v10;
  __swift_project_boxed_opaque_existential_1(&v10, v2);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  EncryptedExtensions.write(into:)(v1);
  if (v5 > 0xFFFFFF)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v6 = v5;
  specialized ByteBuffer.setInteger<A>(_:at:as:)((unint64_t)v5 >> 16, v4);
  if (__OFADD__(v4, v7))
    goto LABEL_5;
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v6, v4 + v7);
  return v6 + 4;
}

uint64_t sub_1B0D9F380()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v11;
  __int16 *v12;
  __int16 **v13;
  uint64_t v14;
  uint64_t v15;

  v6 = BYTE6(v0);
  LOBYTE(v11) = 0;
  v14 = v4;
  v15 = v5;
  v12 = &v11;
  v13 = (__int16 **)((char *)&v11 + 1);
  __swift_project_boxed_opaque_existential_1(&v12, v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  v11 = 0;
  v14 = v4;
  v15 = v5;
  v12 = &v11;
  v13 = &v12;
  __swift_project_boxed_opaque_existential_1(&v12, v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  CertificateRequest.write(into:)(v1, v3, v2);
  if (v7 > 0xFFFFFF)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v8 = v7;
  specialized ByteBuffer.setInteger<A>(_:at:as:)((unint64_t)v7 >> 16, v6);
  if (__OFADD__(v6, v9))
    goto LABEL_5;
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v8, v6 + v9);
  return v8 + 4;
}

uint64_t sub_1B0D9F540()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v14;
  __int16 *v15;
  __int16 **v16;
  uint64_t v17;
  uint64_t v18;

  v6 = BYTE6(v0);
  LOBYTE(v14) = 0;
  v17 = v4;
  v18 = v5;
  v15 = &v14;
  v16 = (__int16 **)((char *)&v14 + 1);
  __swift_project_boxed_opaque_existential_1(&v15, v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  v14 = 0;
  v17 = v4;
  v18 = v5;
  v15 = &v14;
  v16 = &v15;
  __swift_project_boxed_opaque_existential_1(&v15, v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  outlined copy of Data._Representation(v3, v2);
  swift_bridgeObjectRetain();
  specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(v1);
  v8 = v7;
  outlined consume of Data._Representation(v3, v2);
  swift_bridgeObjectRelease();
  outlined copy of Data._Representation(v3, v2);
  swift_bridgeObjectRetain();
  specialized ByteBuffer.writeVariableLengthVectorUInt24(_:)(v1);
  v10 = v9;
  outlined consume of Data._Representation(v3, v2);
  swift_bridgeObjectRelease();
  v11 = v8 + v10;
  if (__OFADD__(v8, v10))
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v11 > 0xFFFFFF)
  {
LABEL_6:
    __break(1u);
LABEL_7:
    __break(1u);
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)((unint64_t)v11 >> 16, v6);
  if (__OFADD__(v6, v12))
    goto LABEL_7;
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v8 + v10, v6 + v12);
  return v11 + 4;
}

uint64_t sub_1B0D9F778()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v10;
  __int16 *v11;
  __int16 **v12;
  uint64_t v13;
  uint64_t v14;

  v5 = BYTE6(v0);
  LOBYTE(v10) = 0;
  v13 = v3;
  v14 = v4;
  v11 = &v10;
  v12 = (__int16 **)((char *)&v10 + 1);
  __swift_project_boxed_opaque_existential_1(&v11, v3);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  v10 = 0;
  v13 = v3;
  v14 = v4;
  v11 = &v10;
  v12 = &v11;
  __swift_project_boxed_opaque_existential_1(&v11, v3);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  CertificateVerify.write(into:)(v1, v2);
  if (v6 > 0xFFFFFF)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v7 = v6;
  specialized ByteBuffer.setInteger<A>(_:at:as:)((unint64_t)v6 >> 16, v5);
  if (__OFADD__(v5, v8))
    goto LABEL_5;
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v7, v5 + v8);
  return v7 + 4;
}

uint64_t sub_1B0D9F93C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v9;
  __int16 *v10;
  __int16 **v11;
  uint64_t v12;
  uint64_t v13;

  v4 = BYTE6(v0);
  LOBYTE(v9) = 0;
  v12 = v2;
  v13 = v3;
  v10 = &v9;
  v11 = (__int16 **)((char *)&v9 + 1);
  __swift_project_boxed_opaque_existential_1(&v10, v2);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  v9 = 0;
  v12 = v2;
  v13 = v3;
  v10 = &v9;
  v11 = &v10;
  __swift_project_boxed_opaque_existential_1(&v10, v2);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  NewSessionTicket.write(into:)(v1);
  if (v5 > 0xFFFFFF)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v6 = v5;
  specialized ByteBuffer.setInteger<A>(_:at:as:)((unint64_t)v5 >> 16, v4);
  if (__OFADD__(v4, v7))
    goto LABEL_5;
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v6, v4 + v7);
  return v6 + 4;
}

ValueMetadata *type metadata accessor for TLSMessageSerializer()
{
  return &type metadata for TLSMessageSerializer;
}

uint64_t HandshakeStateMachine.generateTLSExporterKey(label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t ready;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v18;

  ready = type metadata accessor for HandshakeState.ReadyState(0);
  MEMORY[0x1E0C80A78](ready);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for HandshakeStateMachine();
  outlined init with copy of PartialHandshakeResult(v3 + *(int *)(v13 + 24), (uint64_t)v12, type metadata accessor for HandshakeState);
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    outlined init with take of HandshakeStateMachine((uint64_t)v12, (uint64_t)v9, type metadata accessor for HandshakeState.ReadyState);
    specialized SessionKeyManager.generateTLSExporterKey(label:)(a1, a2, a3);
    v14 = (uint64_t)v9;
    v15 = type metadata accessor for HandshakeState.ReadyState;
  }
  else
  {
    v16 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
    v15 = type metadata accessor for HandshakeState;
    v14 = (uint64_t)v12;
  }
  return outlined destroy of PartialHandshakeResult(v14, v15);
}

uint64_t HandshakeStateMachine.generateHashForAuthenticator(transcript:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ready;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  ready = type metadata accessor for HandshakeState.ReadyState(0);
  MEMORY[0x1E0C80A78](ready);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for HandshakeStateMachine();
  outlined init with copy of PartialHandshakeResult(v2 + *(int *)(v11 + 24), (uint64_t)v10, type metadata accessor for HandshakeState);
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    outlined init with take of HandshakeStateMachine((uint64_t)v10, (uint64_t)v7, type metadata accessor for HandshakeState.ReadyState);
    specialized SessionKeyManager.generateHashForAuthenticator(transcript:)(a1, a2);
    v13 = v12;
    outlined destroy of PartialHandshakeResult((uint64_t)v7, type metadata accessor for HandshakeState.ReadyState);
  }
  else
  {
    outlined destroy of PartialHandshakeResult((uint64_t)v10, type metadata accessor for HandshakeState);
    return 0;
  }
  return v13;
}

uint64_t HandshakeStateMachine.generateHMACForAuthenticator(transcript:key:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ready;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  ready = type metadata accessor for HandshakeState.ReadyState(0);
  MEMORY[0x1E0C80A78](ready);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for HandshakeStateMachine();
  outlined init with copy of PartialHandshakeResult(v2 + *(int *)(v11 + 24), (uint64_t)v10, type metadata accessor for HandshakeState);
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    outlined init with take of HandshakeStateMachine((uint64_t)v10, (uint64_t)v7, type metadata accessor for HandshakeState.ReadyState);
    specialized SessionKeyManager.generateHMACForAuthenticator(transcript:key:)(a1, a2);
    v13 = v12;
    outlined destroy of PartialHandshakeResult((uint64_t)v7, type metadata accessor for HandshakeState.ReadyState);
  }
  else
  {
    outlined destroy of PartialHandshakeResult((uint64_t)v10, type metadata accessor for HandshakeState);
    return 0;
  }
  return v13;
}

uint64_t HandshakeStateMachine.init(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for HandshakeState.IdleState(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (_OWORD *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)a2 = xmmword_1B0DE7E90;
  *(_QWORD *)(a2 + 16) = 0;
  v10 = (int *)type metadata accessor for HandshakeStateMachine();
  v11 = a2 + v10[7];
  *(_QWORD *)(v11 + 24) = &type metadata for SwiftTLSDefaultClock;
  *(_QWORD *)(v11 + 32) = &protocol witness table for SwiftTLSDefaultClock;
  v28 = 0;
  MEMORY[0x1B5E11250](&v28, 8);
  v12 = v28;
  v28 = 0;
  MEMORY[0x1B5E11250](&v28, 8);
  v13 = v28;
  v28 = 0;
  MEMORY[0x1B5E11250](&v28, 8);
  v14 = v28;
  v28 = 0;
  MEMORY[0x1B5E11250](&v28, 8);
  v15 = v28;
  v16 = (_QWORD *)(a2 + v10[8]);
  *v16 = v12;
  v16[1] = v13;
  v16[2] = v14;
  v16[3] = v15;
  v17 = (_OWORD *)(a2 + v10[9]);
  v18 = *(_OWORD *)(a1 + 48);
  v17[2] = *(_OWORD *)(a1 + 32);
  v17[3] = v18;
  *(_OWORD *)((char *)v17 + 60) = *(_OWORD *)(a1 + 60);
  v19 = *(_OWORD *)(a1 + 16);
  *v17 = *(_OWORD *)a1;
  v17[1] = v19;
  v20 = a2 + v10[6];
  v21 = type metadata accessor for SessionTicket();
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v22(v9, 1, 1, v21);
  v23 = (uint64_t)v6 + *(int *)(v4 + 20);
  v22((char *)v23, 1, 1, v21);
  v24 = *(_OWORD *)(a1 + 48);
  v6[2] = *(_OWORD *)(a1 + 32);
  v6[3] = v24;
  *(_OWORD *)((char *)v6 + 60) = *(_OWORD *)(a1 + 60);
  v25 = *(_OWORD *)(a1 + 16);
  *v6 = *(_OWORD *)a1;
  v6[1] = v25;
  outlined retain of HandshakeStateMachine.Configuration((_QWORD *)a1);
  outlined assign with take of SessionTicket?((uint64_t)v9, v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  swift_storeEnumTagMultiPayload();
  outlined init with take of HandshakeStateMachine((uint64_t)v6, v20, type metadata accessor for HandshakeState.IdleState);
  type metadata accessor for HandshakeState(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t HandshakeStateMachine.init(sessionTicket:configuration:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  _BYTE v14[24];
  ValueMetadata *v15;
  char **v16;

  v9 = type metadata accessor for HandshakeStateMachine();
  MEMORY[0x1E0C80A78](v9);
  v11 = &v14[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  *(_OWORD *)a4 = xmmword_1B0DE7E90;
  *(_QWORD *)(a4 + 16) = 0;
  v15 = &type metadata for SwiftTLSDefaultClock;
  v16 = &protocol witness table for SwiftTLSDefaultClock;
  result = HandshakeStateMachine.init(sessionTicket:configuration:clock:)(a1, a2, a3, (uint64_t)v14, (uint64_t)v11);
  if (!v4)
    return outlined init with take of HandshakeStateMachine((uint64_t)v11, a4, (uint64_t (*)(_QWORD))type metadata accessor for HandshakeStateMachine);
  return result;
}

void HandshakeStateMachine.peerALPN.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t ready;

  ready = type metadata accessor for HandshakeState.ReadyState(0);
  MEMORY[0x1E0C80A78](ready);
  v1 = type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for HandshakeState.ServerCertificateState(0);
  MEMORY[0x1E0C80A78](v2);
  v3 = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  MEMORY[0x1E0C80A78](v3);
  v4 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for HandshakeStateMachine();
  outlined init with copy of PartialHandshakeResult(v0 + *(int *)(v7 + 24), (uint64_t)v6, type metadata accessor for HandshakeState);
  v8 = (char *)sub_1B0DA034C + 4 * byte_1B0DE87A6[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0DA034C()
{
  uint64_t v0;

  outlined destroy of PartialHandshakeResult(v0, type metadata accessor for HandshakeState);
  return 0;
}

void HandshakeStateMachine.negotiatedGroup.getter()
{
  uint64_t ready;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _QWORD v17[3];
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  ready = type metadata accessor for HandshakeState.ReadyState(0);
  MEMORY[0x1E0C80A78](ready);
  v17[2] = (char *)v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  MEMORY[0x1E0C80A78](v2);
  v17[1] = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for HandshakeState.ServerCertificateState(0);
  MEMORY[0x1E0C80A78](v4);
  v21 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for SessionTicket();
  v20 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v17[0] = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  MEMORY[0x1E0C80A78](v18);
  v7 = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  MEMORY[0x1E0C80A78](v7);
  v19 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for HandshakeState.ServerHelloState(0);
  MEMORY[0x1E0C80A78](v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  MEMORY[0x1E0C80A78](v10);
  v11 = type metadata accessor for HandshakeState.ClientHelloState(0);
  MEMORY[0x1E0C80A78](v11);
  v12 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for HandshakeStateMachine();
  outlined init with copy of PartialHandshakeResult(v23 + *(int *)(v15 + 24), (uint64_t)v14, type metadata accessor for HandshakeState);
  v16 = (char *)sub_1B0DA074C + 4 * byte_1B0DE87B4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0DA074C()
{
  uint64_t v0;

  outlined destroy of PartialHandshakeResult(v0, type metadata accessor for HandshakeState);
  return 0x10000;
}

uint64_t HandshakeStateMachine.clientRandom.getter()
{
  uint64_t v0;
  _OWORD *v1;
  __int128 v2;
  _OWORD v4[2];
  uint64_t v5;
  _QWORD v6[5];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = xmmword_1B0DE7EA0;
  v8 = 0;
  v1 = (_OWORD *)(v0 + *(int *)(type metadata accessor for HandshakeStateMachine() + 32));
  v2 = v1[1];
  v4[0] = *v1;
  v4[1] = v2;
  v6[3] = MEMORY[0x1E0DEAC20];
  v6[4] = MEMORY[0x1E0CB1AA8];
  v6[0] = v4;
  v6[1] = &v5;
  __swift_project_boxed_opaque_existential_1(v6, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return v7;
}

void HandshakeStateMachine.logUnexpectedMessage(message:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for HandshakeStateMachine();
  outlined init with copy of PartialHandshakeResult(v0 + *(int *)(v4 + 24), (uint64_t)v3, type metadata accessor for HandshakeState);
  v5 = (char *)sub_1B0DA0AB0 + 4 * byte_1B0DE87C2[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0DA0AB0()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;

  outlined destroy of PartialHandshakeResult(v0, type metadata accessor for HandshakeState);
  v3 = outlined init with take of HandshakeMessage(v1, v2 - 192);
  return ((uint64_t (*)(uint64_t))((char *)sub_1B0DA0B88 + 4 * byte_1B0DE87C9[*(unsigned __int8 *)(v2 - 88)]))(v3);
}

void sub_1B0DA0B88()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;

  if (one-time initialization token for logger != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    *(_QWORD *)(v3 - 200) = v8;
    *(_DWORD *)v7 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v3 - 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6548726576726573, v0, (uint64_t *)(v3 - 200));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v3 - 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v1, (uint64_t *)(v3 - 200));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0D50000, v5, v6, "unexpected message %{public}s in state %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E11244](v8, -1, -1);
    MEMORY[0x1B5E11244](v7, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t Collection<>.confirmNegotiated(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;

  v4 = Sequence<>.contains(_:)();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((v4 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, a1, AssociatedTypeWitness);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v7, 1, AssociatedTypeWitness);
}

_QWORD *outlined retain of HandshakeStateMachine.Configuration(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[6];
  v5 = a1[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ByteBuffer?(v2, v3);
  outlined copy of ByteBuffer?(v4, v5);
  return a1;
}

_QWORD *outlined release of HandshakeStateMachine.Configuration(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[6];
  v5 = a1[7];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ByteBuffer?(v2, v3);
  outlined consume of ByteBuffer?(v4, v5);
  return a1;
}

void specialized Data._Representation.withUnsafeMutableBytes<A>(_:)()
{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

_QWORD *sub_1B0DA1008@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

_QWORD *sub_1B0DA12F8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  _QWORD *v12;

  v7 = v4;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  v9 = BYTE4(a1);
  v10 = BYTE5(a1);
  v11 = BYTE6(a1);
  result = v3(&v12, &v7, (char *)&v7 + BYTE6(a1));
  if (!v2)
    result = v12;
  v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *v1 = v7;
  v1[1] = v6;
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for HandshakeStateMachine(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v6 = a2[1];
    if (v6 >> 60 == 15)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      v9 = *a2;
      outlined copy of Data._Representation(*a2, a2[1]);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v6;
    }
    *(_QWORD *)(a1 + 16) = a2[2];
    type metadata accessor for HandshakeState(0);
    v10 = (char *)&loc_1B0DA1668 + 4 * byte_1B0DE87E1[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v7 = *a2;
  *(_QWORD *)a1 = *a2;
  v8 = v7 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return v8;
}

uint64_t assignWithCopy for HandshakeStateMachine(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 *v20;
  __int128 *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int16 v38;

  v6 = a2[1];
  if (*(_QWORD *)(a1 + 8) >> 60 != 15)
  {
    if (v6 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1);
      v8 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      goto LABEL_10;
    }
    v10 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    v11 = *(_QWORD *)a1;
    v12 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v6;
    outlined consume of Data._Representation(v11, v12);
LABEL_9:
    v8 = a2[2];
LABEL_10:
    *(_QWORD *)(a1 + 16) = v8;
    if ((uint64_t *)a1 == a2)
      goto LABEL_12;
LABEL_11:
    outlined destroy of PartialHandshakeResult(a1 + a3[6], type metadata accessor for HandshakeState);
    type metadata accessor for HandshakeState(0);
    v13 = (char *)&loc_1B0DA38C4 + 4 * byte_1B0DE8876[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  if (v6 >> 60 != 15)
  {
    v9 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v6;
    goto LABEL_9;
  }
  v7 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_OWORD *)a1 = v7;
  if ((uint64_t *)a1 != a2)
    goto LABEL_11;
LABEL_12:
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + a3[7]), (uint64_t *)((char *)a2 + a3[7]));
  v14 = a3[8];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)((char *)a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  v15[2] = v16[2];
  v15[3] = v16[3];
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)v18 = *(uint64_t *)((char *)a2 + v17);
  *(_QWORD *)(v18 + 8) = *(uint64_t *)((char *)a2 + v17 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v18 + 16) = *((_QWORD *)v19 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = (__int128 *)(v18 + 24);
  v21 = (__int128 *)(v19 + 24);
  v22 = *((_QWORD *)v19 + 4);
  if (*(_QWORD *)(v18 + 32) >> 60 == 15)
  {
    if (v22 >> 60 == 15)
    {
      v23 = *v21;
      *(_QWORD *)(v18 + 40) = *((_QWORD *)v19 + 5);
      *v20 = v23;
      goto LABEL_20;
    }
    v25 = *((_QWORD *)v19 + 3);
    outlined copy of Data._Representation(v25, *((_QWORD *)v19 + 4));
    *(_QWORD *)(v18 + 24) = v25;
    *(_QWORD *)(v18 + 32) = v22;
  }
  else
  {
    if (v22 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(v18 + 24);
      v24 = *((_QWORD *)v19 + 5);
      *v20 = *v21;
      *(_QWORD *)(v18 + 40) = v24;
      goto LABEL_20;
    }
    v26 = *((_QWORD *)v19 + 3);
    outlined copy of Data._Representation(v26, *((_QWORD *)v19 + 4));
    v27 = *(_QWORD *)(v18 + 24);
    v28 = *(_QWORD *)(v18 + 32);
    *(_QWORD *)(v18 + 24) = v26;
    *(_QWORD *)(v18 + 32) = v22;
    outlined consume of Data._Representation(v27, v28);
  }
  *(_QWORD *)(v18 + 40) = *((_QWORD *)v19 + 5);
LABEL_20:
  v29 = (_OWORD *)(v18 + 48);
  v30 = v19 + 48;
  v31 = *((_QWORD *)v19 + 7);
  if (*(_QWORD *)(v18 + 56) >> 60 != 15)
  {
    if (v31 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(v18 + 48);
      v33 = *((_QWORD *)v19 + 8);
      *v29 = *v30;
      *(_QWORD *)(v18 + 64) = v33;
      goto LABEL_28;
    }
    v35 = *((_QWORD *)v19 + 6);
    outlined copy of Data._Representation(v35, *((_QWORD *)v19 + 7));
    v36 = *(_QWORD *)(v18 + 48);
    v37 = *(_QWORD *)(v18 + 56);
    *(_QWORD *)(v18 + 48) = v35;
    *(_QWORD *)(v18 + 56) = v31;
    outlined consume of Data._Representation(v36, v37);
LABEL_27:
    *(_QWORD *)(v18 + 64) = *((_QWORD *)v19 + 8);
    goto LABEL_28;
  }
  if (v31 >> 60 != 15)
  {
    v34 = *((_QWORD *)v19 + 6);
    outlined copy of Data._Representation(v34, *((_QWORD *)v19 + 7));
    *(_QWORD *)(v18 + 48) = v34;
    *(_QWORD *)(v18 + 56) = v31;
    goto LABEL_27;
  }
  v32 = *v30;
  *(_QWORD *)(v18 + 64) = *((_QWORD *)v19 + 8);
  *v29 = v32;
LABEL_28:
  v38 = *((_WORD *)v19 + 36);
  *(_BYTE *)(v18 + 74) = v19[74];
  *(_WORD *)(v18 + 72) = v38;
  *(_BYTE *)(v18 + 75) = v19[75];
  return a1;
}

void initializeWithTake for HandshakeStateMachine(uint64_t a1, uint64_t a2)
{
  char *v2;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  type metadata accessor for HandshakeState(0);
  v2 = (char *)sub_1B0DA5C5C + 4 * word_1B0DE88AA[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0DA5C5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__dst, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  int *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);
  int *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 *v91;
  __int128 v92;
  __int128 v93;
  _OWORD *v94;
  _OWORD *v95;
  __int128 v96;
  uint64_t v97;
  _OWORD *v98;
  _OWORD *v99;
  __int128 v100;
  __int128 v101;
  char *v103;
  uint64_t v104;
  int *v105;

  v104 = v30;
  v31 = v29[3];
  v28[2] = v29[2];
  v28[3] = v31;
  *(_OWORD *)((char *)v28 + 60) = *(_OWORD *)((char *)v29 + 60);
  v32 = v29[1];
  *v28 = *v29;
  v28[1] = v32;
  v33 = type metadata accessor for HandshakeState.IdleState(0);
  v34 = *(int *)(v33 + 20);
  v35 = (char *)v28 + v34;
  v36 = (char *)v29 + v34;
  v37 = (int *)type metadata accessor for SessionTicket();
  v38 = *((_QWORD *)v37 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v38 + 48))(v36, 1, v37))
  {
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    v40 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v35, v36, v40);
    *(_DWORD *)&v35[v37[5]] = *(_DWORD *)&v36[v37[5]];
    *(_DWORD *)&v35[v37[6]] = *(_DWORD *)&v36[v37[6]];
    v41 = v37[7];
    v42 = &v35[v41];
    v43 = &v36[v41];
    *(_OWORD *)v42 = *(_OWORD *)v43;
    *((_QWORD *)v42 + 2) = *((_QWORD *)v43 + 2);
    v44 = v37[8];
    v45 = &v35[v44];
    v46 = &v36[v44];
    *(_OWORD *)v45 = *(_OWORD *)v46;
    *((_QWORD *)v45 + 2) = *((_QWORD *)v46 + 2);
    v47 = v37[9];
    v48 = &v35[v47];
    v49 = &v36[v47];
    v50 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
    *(_DWORD *)&v35[v37[10]] = *(_DWORD *)&v36[v37[10]];
    *(_WORD *)&v35[v37[11]] = *(_WORD *)&v36[v37[11]];
    *(_WORD *)&v35[v37[12]] = *(_WORD *)&v36[v37[12]];
    v51 = v37[13];
    v52 = &v35[v51];
    v53 = &v36[v51];
    *((_QWORD *)v52 + 2) = *((_QWORD *)v53 + 2);
    *(_OWORD *)v52 = *(_OWORD *)v53;
    v54 = v37[14];
    v103 = &v35[v54];
    v55 = &v36[v54];
    v56 = type metadata accessor for P256.Signing.PublicKey();
    v57 = *(_QWORD *)(v56 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
    {
      v58 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v103, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v103, v55, v56);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v103, 0, 1, v56);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v38 + 56))(v35, 0, 1, v37);
  }
  v59 = *(int *)(v33 + 24);
  v60 = (char *)v28 + v59;
  v61 = (char *)v29 + v59;
  v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v63 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v60, v61, v63);
      v64 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v65 = v64[9];
      v66 = &v60[v65];
      v67 = &v61[v65];
      v68 = type metadata accessor for SymmetricKey();
      v69 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 32);
      v69(v66, v67, v68);
      v69(&v60[v64[10]], &v61[v64[10]], v68);
      v69(&v60[v64[11]], &v61[v64[11]], v68);
      v69(&v60[v64[12]], &v61[v64[12]], v68);
      goto LABEL_13;
    case 1u:
      v71 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 32))(v60, v61, v71);
      v72 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v73 = v72[9];
      v74 = &v60[v73];
      v75 = &v61[v73];
      v76 = type metadata accessor for SymmetricKey();
      v77 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 32);
      v77(v74, v75, v76);
      v77(&v60[v72[10]], &v61[v72[10]], v76);
      v77(&v60[v72[11]], &v61[v72[11]], v76);
      goto LABEL_13;
    case 2u:
      v78 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 32))(v60, v61, v78);
      v79 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v80 = v79[9];
      v81 = &v60[v80];
      v82 = &v61[v80];
      v83 = type metadata accessor for SymmetricKey();
      v84 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 32);
      v84(v81, v82, v83);
      v84(&v60[v79[10]], &v61[v79[10]], v83);
      v84(&v60[v79[11]], &v61[v79[11]], v83);
      v84(&v60[v79[12]], &v61[v79[12]], v83);
      v84(&v60[v79[13]], &v61[v79[13]], v83);
      v84(&v60[v79[14]], &v61[v79[14]], v83);
      goto LABEL_13;
    case 3u:
      v85 = type metadata accessor for SymmetricKey();
      v86 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 32);
      v86(v60, v61, v85);
      v87 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v86(&v60[v87[9]], &v61[v87[9]], v85);
      v86(&v60[v87[10]], &v61[v87[10]], v85);
      v86(&v60[v87[11]], &v61[v87[11]], v85);
LABEL_13:
      swift_storeEnumTagMultiPayload();
      v70 = v104;
      break;
    default:
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      v70 = v104;
      break;
  }
  swift_storeEnumTagMultiPayload();
  v88 = v105[7];
  v89 = v105[8];
  v90 = v27 + v88;
  v91 = (__int128 *)(v70 + v88);
  v92 = *v91;
  v93 = v91[1];
  *(_QWORD *)(v90 + 32) = *((_QWORD *)v91 + 4);
  *(_OWORD *)v90 = v92;
  *(_OWORD *)(v90 + 16) = v93;
  v94 = (_OWORD *)(v27 + v89);
  v95 = (_OWORD *)(v70 + v89);
  v96 = v95[1];
  *v94 = *v95;
  v94[1] = v96;
  v97 = v105[9];
  v98 = (_OWORD *)(v27 + v97);
  v99 = (_OWORD *)(v70 + v97);
  v100 = v99[3];
  v98[2] = v99[2];
  v98[3] = v100;
  *(_OWORD *)((char *)v98 + 60) = *(_OWORD *)((char *)v99 + 60);
  v101 = v99[1];
  *v98 = *v99;
  v98[1] = v101;
  return v27;
}

uint64_t assignWithTake for HandshakeStateMachine(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6 >> 60 == 15)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  outlined consume of Data._Representation(v8, v6);
LABEL_6:
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  if (a1 != a2)
  {
    outlined destroy of PartialHandshakeResult(a1 + a3[6], type metadata accessor for HandshakeState);
    type metadata accessor for HandshakeState(0);
    v9 = (char *)&loc_1B0DA76E8 + 4 * word_1B0DE88E4[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  __swift_destroy_boxed_opaque_existential_1(a1 + v10);
  v13 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v13;
  *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
  v14 = a3[8];
  v15 = a3[9];
  v16 = (_OWORD *)(a1 + v14);
  v17 = (_OWORD *)(a2 + v14);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = a1 + v15;
  v20 = a2 + v15;
  v21 = *(_QWORD *)(a2 + v15);
  v22 = *(_QWORD *)(a2 + v15 + 8);
  *(_QWORD *)v19 = v21;
  *(_QWORD *)(v19 + 8) = v22;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(v19 + 32);
  if (v23 >> 60 == 15)
    goto LABEL_11;
  v24 = *(_QWORD *)(v20 + 32);
  if (v24 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(v19 + 24);
LABEL_11:
    *(_OWORD *)(v19 + 24) = *(_OWORD *)(v20 + 24);
    *(_QWORD *)(v19 + 40) = *(_QWORD *)(v20 + 40);
    goto LABEL_13;
  }
  v25 = *(_QWORD *)(v19 + 24);
  *(_QWORD *)(v19 + 24) = *(_QWORD *)(v20 + 24);
  *(_QWORD *)(v19 + 32) = v24;
  outlined consume of Data._Representation(v25, v23);
  *(_QWORD *)(v19 + 40) = *(_QWORD *)(v20 + 40);
LABEL_13:
  v26 = *(_QWORD *)(v19 + 56);
  if (v26 >> 60 != 15)
  {
    v27 = *(_QWORD *)(v20 + 56);
    if (v27 >> 60 != 15)
    {
      v28 = *(_QWORD *)(v19 + 48);
      *(_QWORD *)(v19 + 48) = *(_QWORD *)(v20 + 48);
      *(_QWORD *)(v19 + 56) = v27;
      outlined consume of Data._Representation(v28, v26);
      *(_QWORD *)(v19 + 64) = *(_QWORD *)(v20 + 64);
      goto LABEL_18;
    }
    outlined destroy of ByteBuffer(v19 + 48);
  }
  *(_OWORD *)(v19 + 48) = *(_OWORD *)(v20 + 48);
  *(_QWORD *)(v19 + 64) = *(_QWORD *)(v20 + 64);
LABEL_18:
  *(_WORD *)(v19 + 72) = *(_WORD *)(v20 + 72);
  *(_BYTE *)(v19 + 74) = *(_BYTE *)(v20 + 74);
  *(_BYTE *)(v19 + 75) = *(_BYTE *)(v20 + 75);
  return a1;
}

uint64_t sub_1B0DA9058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for HandshakeState(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1B0DA90DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for HandshakeState(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 24) = (a2 - 1);
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for HandshakeStateMachine.ProcessStep(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t destroy for HandshakeStateMachine.ProcessStep(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *initializeWithCopy for HandshakeStateMachine.ProcessStep(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithCopy for HandshakeStateMachine.ProcessStep(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

void *initializeWithTake for HandshakeStateMachine.ProcessStep(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for HandshakeStateMachine.ProcessStep(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandshakeStateMachine.ProcessStep(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for HandshakeStateMachine.ProcessStep(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_1B0DA9868()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1B0DA9870()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t getEnumTag for HandshakeStateMachine.ProcessStep(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t destructiveInjectEnumTag for HandshakeStateMachine.ProcessStep(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

_QWORD *_sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

char *specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)__DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)__DataStorage._offset.getter();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)__DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)__DataStorage._offset.getter();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t v4;

  if (result)
  {
    swift_bridgeObjectRetain();
    result = _StringGuts.copyUTF8(into:)();
    if ((v3 & 1) == 0)
    {
      v4 = result;
      result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *partial apply for specialized closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = _sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:), (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized closure #1 in closure #3 in Data.init<A>(_:)(a1, a2);
}

void *CipherSuite.TLS_AES_256_GCM_SHA384.unsafeMutableAddressor()
{
  return &static CipherSuite.TLS_AES_256_GCM_SHA384;
}

uint64_t static CipherSuite.TLS_AES_256_GCM_SHA384.getter()
{
  return 4866;
}

uint64_t CipherSuite.description.getter(__int16 a1)
{
  Swift::String v2;

  if (a1 == 4866)
    return 0xD000000000000016;
  lazy protocol witness table accessor for type UInt16 and conformance UInt16();
  v2._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 30768;
}

unint64_t lazy protocol witness table accessor for type UInt16 and conformance UInt16()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt16 and conformance UInt16;
  if (!lazy protocol witness table cache variable for type UInt16 and conformance UInt16)
  {
    result = MEMORY[0x1B5E111D8](MEMORY[0x1E0DEE0A0], MEMORY[0x1E0DEE068]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt16 and conformance UInt16);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CipherSuite()
{
  __int16 *v0;

  return CipherSuite.description.getter(*v0);
}

void ByteBuffer.readCipherSuite()()
{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 16), 2))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0DA9DB0);
}

unint64_t lazy protocol witness table accessor for type CipherSuite and conformance CipherSuite()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CipherSuite and conformance CipherSuite;
  if (!lazy protocol witness table cache variable for type CipherSuite and conformance CipherSuite)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for CipherSuite, &type metadata for CipherSuite);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CipherSuite and conformance CipherSuite);
  }
  return result;
}

void FinishedMessage.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1B0DA9E54()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v0) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0DA9ED4);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  return outlined consume of Data._Representation(v1, v0);
}

void FinishedMessage.hashValue.getter(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1B0DA9F30()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v0) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0DA9FBCLL);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v1, v0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hashValue.getter in conformance FinishedMessage()
{
  uint64_t *v0;

  FinishedMessage.hashValue.getter(*v0, v0[1]);
}

void protocol witness for Hashable.hash(into:) in conformance FinishedMessage()
{
  __asm { BR              X10 }
}

uint64_t sub_1B0DAA018()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v2) < v1)
  {
    __break(1u);
    JUMPOUT(0x1B0DAA098);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  return outlined consume of Data._Representation(v0, v2);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance FinishedMessage()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1B0DAA0F0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v2) < v1)
  {
    __break(1u);
    JUMPOUT(0x1B0DAA180);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v2);
  return Hasher._finalize()();
}

void FinishedMessage.write(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ByteBuffer.writeImmutableBuffer(_:)(a2, a3);
}

void FinishedMessage.init(bytes:)(uint64_t a1)
{
  specialized FinishedMessage.init(bytes:)(a1);
}

void protocol witness for HandshakeMessageProtocol.write(into:) in conformance FinishedMessage()
{
  uint64_t *v0;

  ByteBuffer.writeImmutableBuffer(_:)(*v0, v0[1]);
}

void protocol witness for HandshakeMessageProtocol.init(bytes:) in conformance FinishedMessage(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  specialized FinishedMessage.init(bytes:)(a1);
  if (!v2)
  {
    *a2 = v4;
    a2[1] = v5;
    a2[2] = v6;
  }
}

unint64_t lazy protocol witness table accessor for type FinishedMessage and conformance FinishedMessage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishedMessage and conformance FinishedMessage;
  if (!lazy protocol witness table cache variable for type FinishedMessage and conformance FinishedMessage)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for FinishedMessage, &type metadata for FinishedMessage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishedMessage and conformance FinishedMessage);
  }
  return result;
}

ValueMetadata *type metadata accessor for FinishedMessage()
{
  return &type metadata for FinishedMessage;
}

void ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)()
{
  MEMORY[0x1E0C80A78]();
  __asm { BR              X12 }
}

uint64_t sub_1B0DAA360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;
  uint64_t result;

  v7 = BYTE6(v0);
  v8 = *(_QWORD *)(v3 + 8);
  MEMORY[0x1B5E109E0](v1, *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8));
  v10 = ByteBuffer.writeInteger<A>(_:as:)(v4, v9, v1, v3);
  v11 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v11(v4, v1);
  v12 = (*(uint64_t (**)(uint64_t))(v6 - 96))(v2);
  *(_QWORD *)(v6 - 88) = v12;
  v13 = lazy protocol witness table accessor for type Int and conformance Int();
  MEMORY[0x1B5E10968](v6 - 88, MEMORY[0x1E0DEB418], v13, v1, v8);
  ((void (*)(uint64_t, uint64_t))CertificateVerify.algorithm.getter)(v1, v3);
  ByteBuffer.setInteger<A>(_:at:as:)(v4, v7);
  v11(v4, v1);
  result = v10 + v12;
  if (__OFADD__(v10, v12))
  {
    __break(1u);
    JUMPOUT(0x1B0DAA450);
  }
  return result;
}

uint64_t ByteBuffer.readableBytes.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_1B0DAA470 + dword_1B0DAA4A4[a2 >> 62]))();
}

uint64_t sub_1B0DAA480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = BYTE6(a2) - a3;
  if (__OFSUB__(BYTE6(a2), a3))
  {
    __break(1u);
    JUMPOUT(0x1B0DAA4A4);
  }
  return result;
}

uint64_t ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  return ByteBuffer.rewindOnNilOrError<A>(_:)((void (*)(uint64_t *))partial apply for closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:), a1, a2);
}

uint64_t ByteBuffer.readableBytesView.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, unint64_t))((char *)&loc_1B0DAA524
                                                                             + *((int *)qword_1B0DAA560 + (a2 >> 62))))(a1, 0, a3, a2);
}

uint64_t sub_1B0DAA534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) < a3)
  {
    __break(1u);
    JUMPOUT(0x1B0DAA560);
  }
  return Data._Representation.subscript.getter();
}

uint64_t ByteBuffer.writeInteger<A>(_:as:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  v11 = v10 + 7;
  if (__OFADD__(v10, 7))
    __break(1u);
  if (v11 < 0)
    v11 = v10 + 14;
  v12 = v11 >> 3;
  v13 = MEMORY[0x1B5E109BC](a3, a4);
  MEMORY[0x1E0C80A78](v13);
  v16[-2] = v12;
  v16[-1] = v4;
  _ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFTm((uint64_t)v9, (uint64_t)partial apply for closure #1 in ByteBuffer.writeInteger<A>(_:as:), (uint64_t)&v16[-4], a3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
  return v12;
}

void ByteBuffer.readInteger<A>(as:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  v9 = *MEMORY[0x1E0C80C00];
  v5 = MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1B5E109E0](a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 24) + 8));
  v7 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  v8 = v7 + 7;
  if (__OFADD__(v7, 7))
  {
    __break(1u);
  }
  else
  {
    if (v8 < 0)
      v8 = v7 + 14;
    if (!__OFADD__(*(_QWORD *)(v3 + 16), v8 >> 3))
      __asm { BR              X12 }
  }
  __break(1u);
  JUMPOUT(0x1B0DAA8F4);
}

uint64_t ByteBuffer.writeBytes<A>(_:)()
{
  Data.append<A>(contentsOf:)();
  return dispatch thunk of Collection.count.getter();
}

void ByteBuffer.setInteger<A>(_:at:as:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x1E0C80A78](a1);
  v4 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  v5 = v4 + 7;
  if (__OFADD__(v4, 7))
  {
    __break(1u);
  }
  else
  {
    if (v5 < 0)
      v5 = v4 + 14;
    if (!__OFADD__(a2, v5 >> 3))
    {
      if (*(_QWORD *)(v2 + 16) <= a2)
        __asm { BR              X13 }
LABEL_9:
      __break(1u);
      JUMPOUT(0x1B0DAAB04);
    }
  }
  __break(1u);
  goto LABEL_9;
}

uint64_t ByteBuffer.writerIndex.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_1B0DAAB40 + 4 * byte_1B0DE8B48[a2 >> 62]))(0);
}

uint64_t sub_1B0DAAB40(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2);
}

uint64_t sub_1B0DAAB48@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_1B0DAAB50@<X0>(uint64_t a1@<X8>)
{
  return a1 >> 32;
}

Swift::Void __swiftcall ByteBuffer.moveReaderIndex(to:)(Swift::Int to)
{
  uint64_t v1;

  ((void (*)(Swift::Int))((char *)&loc_1B0DAAB68 + dword_1B0DAABD4[*(_QWORD *)(v1 + 8) >> 62]))(to);
}

uint64_t sub_1B0DAAB78(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result < 0)
  {
LABEL_5:
    __break(1u);
    JUMPOUT(0x1B0DAABC8);
  }
  if (BYTE6(v1) < result)
  {
    __break(1u);
    goto LABEL_5;
  }
  *(_QWORD *)(v2 + 16) = result;
  return result;
}

uint64_t ByteBuffer.init(data:)(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)())((char *)nullsub_1 + 4 * byte_1B0DE8B4C[a2 >> 62]))();
}

void ByteBuffer.init<A>(bytes:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  Data.init<A>(_:)();
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
  __asm { BR              X10 }
}

uint64_t sub_1B0DAACC0()
{
  uint64_t v0;

  return v0;
}

uint64_t ByteBuffer.readerIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t static FixedWidthInteger.byteWidth.getter()
{
  uint64_t result;
  uint64_t v1;

  result = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  v1 = result + 7;
  if (__OFADD__(result, 7))
  {
    __break(1u);
  }
  else
  {
    if (v1 < 0)
      v1 = result + 14;
    return v1 >> 3;
  }
  return result;
}

uint64_t closure #1 in ByteBuffer.writeInteger<A>(_:as:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[9];

  v5 = a2 - result;
  if (!result)
    v5 = 0;
  if (v5 == a3)
  {
    v6[7] = v3;
    v6[8] = v4;
    v6[3] = MEMORY[0x1E0DEAC20];
    v6[4] = MEMORY[0x1E0CB1AA8];
    v6[0] = result;
    v6[1] = a2;
    __swift_project_boxed_opaque_existential_1(v6, MEMORY[0x1E0DEAC20]);
    Data._Representation.append(contentsOf:)();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, char *);
  uint64_t result;
  uint64_t v18;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78]();
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v16(v12, v12 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64), v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

uint64_t closure #1 in ByteBuffer.setInteger<A>(_:at:as:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v7[5];

  v6 = a2 - result;
  if (!result)
    v6 = 0;
  if (v6 == a3)
  {
    if (a6 >= a5)
    {
      v7[3] = MEMORY[0x1E0DEAC20];
      v7[4] = MEMORY[0x1E0CB1AA8];
      v7[0] = result;
      v7[1] = a2;
      __swift_project_boxed_opaque_existential_1(v7, MEMORY[0x1E0DEAC20]);
      Data._Representation.replaceSubrange(_:with:count:)();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in ByteBuffer.readInteger<A>(as:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 16) > a2)
  {
    __break(1u);
    JUMPOUT(0x1B0DAAFA4);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Data and conformance Data();
  lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
  result = DataProtocol.copyBytes<A>(to:from:)();
  *a3 = result;
  return result;
}

void ByteBuffer.writeBuffer(_:)(uint64_t *a1)
{
  uint64_t v1;

  v1 = a1[1];
  ByteBuffer.writeImmutableBuffer(_:)(*a1, v1);
  __asm { BR              X11 }
}

void sub_1B0DAB03C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = BYTE6(v1);
}

Swift::OpaquePointer_optional __swiftcall ByteBuffer.readBytes(length:)(Swift::Int length)
{
  uint64_t v1;

  if (!__OFADD__(*(_QWORD *)(v1 + 16), length))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1B0DAB130);
}

Swift::Int __swiftcall ByteBuffer.writeBytes(_:)(Swift::OpaquePointer a1)
{
  if (!*((_QWORD *)a1._rawValue + 2))
    return 0;
  Data._Representation.append(contentsOf:)();
  return *((_QWORD *)a1._rawValue + 2);
}

Swift::Void __swiftcall ByteBuffer.moveWriterIndex(forwardBy:)(Swift::Int forwardBy)
{
  if (forwardBy < 0)
    __break(1u);
  else
    specialized Data.append<A>(contentsOf:)();
}

void ByteBuffer.writeVariableLengthVectorUInt24(_:)()
{
  __asm { BR              X12 }
}

uint64_t sub_1B0DAB1EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v10;
  __int16 *v11;
  __int16 **v12;
  uint64_t v13;
  uint64_t v14;

  v3 = BYTE6(v0);
  LOBYTE(v10) = 0;
  v4 = MEMORY[0x1E0DEAC20];
  v5 = MEMORY[0x1E0CB1AA8];
  v13 = MEMORY[0x1E0DEAC20];
  v14 = MEMORY[0x1E0CB1AA8];
  v11 = &v10;
  v12 = (__int16 **)((char *)&v10 + 1);
  __swift_project_boxed_opaque_existential_1(&v11, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  v10 = 0;
  v13 = v4;
  v14 = v5;
  v11 = &v10;
  v12 = &v11;
  __swift_project_boxed_opaque_existential_1(&v11, v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  v6 = v2(v1);
  if (v6 > 0xFFFFFF)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v7 = v6;
  specialized ByteBuffer.setInteger<A>(_:at:as:)((unint64_t)v6 >> 16, v3);
  if (__OFADD__(v3, v8))
    goto LABEL_5;
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v7, v3 + v8);
  return v7 + 3;
}

Swift::Int __swiftcall ByteBuffer.writeUInt24(_:)(Swift::Int a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v5;
  __int16 *v6;
  __int16 **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a1 > 0xFFFFFF)
    __break(1u);
  v1 = a1;
  LOBYTE(v5) = BYTE2(a1);
  v2 = MEMORY[0x1E0DEAC20];
  v3 = MEMORY[0x1E0CB1AA8];
  v8 = MEMORY[0x1E0DEAC20];
  v9 = MEMORY[0x1E0CB1AA8];
  v6 = &v5;
  v7 = (__int16 **)((char *)&v5 + 1);
  __swift_project_boxed_opaque_existential_1(&v6, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v6);
  v5 = bswap32(v1) >> 16;
  v8 = v2;
  v9 = v3;
  v6 = &v5;
  v7 = &v6;
  __swift_project_boxed_opaque_existential_1(&v6, v2);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v6);
  return 3;
}

Swift::Int __swiftcall ByteBuffer.setUInt24(_:at:)(Swift::Int _, Swift::Int at)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  Swift::Int result;

  if (_ > 0xFFFFFF)
  {
    __break(1u);
    goto LABEL_6;
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)((unint64_t)_ >> 16, at);
  if (__OFADD__(at, v4))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v5 = v4;
  specialized ByteBuffer.setInteger<A>(_:at:as:)(_, at + v4);
  v7 = __OFADD__(v5, v6);
  result = v5 + v6;
  if (v7)
  {
LABEL_7:
    __break(1u);
    JUMPOUT(0x1B0DAB464);
  }
  return result;
}

uint64_t closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  char v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char v67;
  uint64_t v68;
  char *v69;
  int64_t v70;
  uint64_t v71;
  uint64_t AssociatedConformanceWitness;
  char *v73;
  char *v74;
  int64_t v75;
  uint64_t v76;
  BOOL v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  void (*v87)(uint64_t *);
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int64_t v101;

  v96 = a6;
  v86 = a3;
  v87 = a2;
  v92 = a7;
  v93 = *(_QWORD *)(a5 - 8);
  v94 = a5;
  MEMORY[0x1E0C80A78](a1);
  v88 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = *(_QWORD *)(v10 + 8);
  v82 = *(_QWORD *)(*(_QWORD *)(v90 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v81 = (char *)&v78 - v11;
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v78 - v15;
  v17 = *(_QWORD *)(a4 - 8);
  v18 = MEMORY[0x1E0C80A78](v14);
  v80 = (char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v83 = (char *)&v78 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v91 = (char *)&v78 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v89 = (char *)&v78 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v85 = (char *)&v78 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v84 = (char *)&v78 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v78 - v31;
  v33 = MEMORY[0x1E0C80A78](v30);
  v35 = (char *)&v78 - v34;
  v36 = MEMORY[0x1E0C80A78](v33);
  v38 = (char *)&v78 - v37;
  v96 = a1;
  ByteBuffer.readInteger<A>(as:)(v36, a4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v93 + 56))(v92, 1, 1, v94);
  }
  v78 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v78(v38, v16, a4);
  v39 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v39(v35, v38, a4);
  v40 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v39(v32, v35, a4);
  if ((v40 & 1) == 0)
  {
    v42 = *(void (**)(char *, uint64_t))(v17 + 8);
    v44 = v32;
LABEL_9:
    v42(v44, a4);
    goto LABEL_10;
  }
  v41 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v42 = *(void (**)(char *, uint64_t))(v17 + 8);
  v42(v32, a4);
  if (v41 <= 64)
  {
LABEL_10:
    v45 = v89;
    goto LABEL_11;
  }
  v43 = v84;
  v39(v84, v35, a4);
  v101 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    v63 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v64 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v63 & 1) != 0)
    {
      if (v64 <= 64)
      {
        v71 = AssociatedTypeWitness;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        MEMORY[0x1B5E10A34](&unk_1B0DE8BF0, 256, v71, AssociatedConformanceWitness);
        v73 = v85;
        MEMORY[0x1B5E10A1C](v81, a4, v82);
        LODWORD(v82) = dispatch thunk of static Comparable.< infix(_:_:)();
        v42(v73, a4);
        v74 = v80;
        v78(v80, v43, a4);
        if ((v82 & 1) == 0)
        {
          v75 = v101;
          v76 = dispatch thunk of BinaryInteger._lowWord.getter();
          v42(v74, a4);
          v77 = v76 < v75;
          v45 = v89;
          if (v77)
            goto LABEL_44;
          goto LABEL_11;
        }
        v42(v74, a4);
LABEL_44:
        __break(1u);
        JUMPOUT(0x1B0DACAF8);
      }
LABEL_30:
      lazy protocol witness table accessor for type Int and conformance Int();
      v65 = v85;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v66 = v43;
      v67 = dispatch thunk of static Comparable.< infix(_:_:)();
      v42(v65, a4);
      v42(v66, a4);
      v45 = v89;
      if ((v67 & 1) == 0)
        goto LABEL_11;
      goto LABEL_44;
    }
    if (v64 < 64)
      goto LABEL_34;
    v44 = v43;
    goto LABEL_9;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    goto LABEL_30;
LABEL_34:
  v68 = dispatch thunk of BinaryInteger._lowWord.getter();
  v69 = v43;
  v70 = v68;
  v42(v69, a4);
  v45 = v89;
  if (v70 < v101)
    goto LABEL_44;
LABEL_11:
  v46 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v39(v45, v35, a4);
  if (v46 < 65)
  {
    v53 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v42(v45, a4);
    if (v53 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      goto LABEL_23;
  }
  else
  {
    v42(v45, a4);
  }
  v39(v91, v35, a4);
  v101 = 0x7FFFFFFFFFFFFFFFLL;
  v47 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v48 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v47 & 1) != 0)
  {
    if (v48 > 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      v49 = v85;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v50 = v91;
      v51 = dispatch thunk of static Comparable.< infix(_:_:)();
      v42(v49, a4);
      v52 = v50;
      goto LABEL_22;
    }
LABEL_20:
    v54 = v91;
    dispatch thunk of BinaryInteger._lowWord.getter();
    v42(v54, a4);
    goto LABEL_23;
  }
  if (v48 <= 63)
    goto LABEL_20;
  v97 = 0x7FFFFFFFFFFFFFFFLL;
  v55 = v85;
  v78(v85, v91, a4);
  lazy protocol witness table accessor for type Int and conformance Int();
  v56 = v83;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v51 = dispatch thunk of static Comparable.< infix(_:_:)();
  v42(v56, a4);
  v52 = v55;
LABEL_22:
  v42(v52, a4);
  if ((v51 & 1) != 0)
  {
    __break(1u);
    JUMPOUT(0x1B0DACAE4);
  }
LABEL_23:
  v57 = dispatch thunk of BinaryInteger._lowWord.getter();
  v42(v35, a4);
  ByteBuffer.readSlice(length:)(v57);
  if (v59 >> 60 == 15)
  {
    v42(v38, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v93 + 56))(v92, 1, 1, v94);
  }
  v98 = v58;
  v99 = v59;
  v100 = v60;
  v62 = v95;
  v87(&v98);
  if (!v62)
    __asm { BR              X12 }
  outlined consume of Data._Representation(v98, v99);
  return ((uint64_t (*)(char *, uint64_t))v42)(v38, a4);
}

uint64_t ByteBuffer.rewindOnNilOrError<A>(_:)@<X0>(void (*a1)(uint64_t *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *);
  uint64_t v21;

  v19 = a3;
  v20 = a1;
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v19 - v7;
  v10 = *v3;
  v9 = v3[1];
  v11 = v3[2];
  outlined copy of Data._Representation(*v3, v9);
  v12 = v21;
  v20(v3);
  if (v12)
  {
    v13 = outlined consume of Data._Representation(*v3, v3[1]);
    *v3 = v10;
    v3[1] = v9;
    v3[2] = v11;
    return swift_willThrow(v13);
  }
  else
  {
    v20 = (void (*)(uint64_t *))v5;
    v21 = v11;
    v15 = *(_QWORD *)(a2 - 8);
    v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v8, 1, a2);
    v17 = v19;
    if (v16 == 1)
    {
      outlined consume of Data._Representation(*v3, v3[1]);
      (*(void (**)(char *, void (*)(uint64_t *)))(v6 + 8))(v8, v20);
      *v3 = v10;
      v3[1] = v9;
      v18 = 1;
      v3[2] = v21;
    }
    else
    {
      outlined consume of Data._Representation(v10, v9);
      (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v17, v8, a2);
      v18 = 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v17, v18, 1, a2);
  }
}

uint64_t ByteBuffer.readVariableLengthVectorUInt24<A>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return ByteBuffer.rewindOnNilOrError<A>(_:)((void (*)(uint64_t *))partial apply for closure #1 in ByteBuffer.readVariableLengthVectorUInt24<A>(_:), a1, a2);
}

void specialized closure #1 in ByteBuffer.readVariableLengthVectorUInt24<A>(_:)(uint64_t a1)
{
  if (!__OFADD__(*(_QWORD *)(a1 + 16), 1))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0DACECCLL);
}

void closure #1 in ByteBuffer.readVariableLengthVectorUInt24<A>(_:)(uint64_t a1)
{
  if (!__OFADD__(*(_QWORD *)(MEMORY[0x1E0C80A78](a1) + 16), 1))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0DAD1BCLL);
}

Swift::Int_optional __swiftcall ByteBuffer.readUInt24()()
{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 16), 1))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0DAD32CLL);
}

void ByteBuffer.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X11 }
}

uint64_t sub_1B0DAD380@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (BYTE6(a2) < a1)
  {
    __break(1u);
    JUMPOUT(0x1B0DAD3DCLL);
  }
  v2 = Data._Representation.subscript.getter();
  v4 = v3;
  Data.hash(into:)();
  return outlined consume of Data._Representation(v2, v4);
}

void ByteBuffer.hashValue.getter(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1B0DAD438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (BYTE6(v0) < v1)
  {
    __break(1u);
    JUMPOUT(0x1B0DAD4A8);
  }
  v2 = Data._Representation.subscript.getter();
  v4 = v3;
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hashValue.getter in conformance ByteBuffer()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1B0DAD500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (BYTE6(v1) < v0)
  {
    __break(1u);
    JUMPOUT(0x1B0DAD570);
  }
  v2 = Data._Representation.subscript.getter();
  v4 = v3;
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ByteBuffer()
{
  __asm { BR              X10 }
}

uint64_t sub_1B0DAD5BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (BYTE6(a4) < a1)
  {
    __break(1u);
    JUMPOUT(0x1B0DAD610);
  }
  v4 = Data._Representation.subscript.getter();
  v6 = v5;
  Data.hash(into:)();
  return outlined consume of Data._Representation(v4, v6);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ByteBuffer()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1B0DAD664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (BYTE6(v1) < v0)
  {
    __break(1u);
    JUMPOUT(0x1B0DAD6D4);
  }
  v2 = Data._Representation.subscript.getter();
  v4 = v3;
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v4);
  return Hasher._finalize()();
}

void specialized Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1B0DAD74C()
{
  return Data._Representation.replaceSubrange(_:with:count:)();
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Data.Iterator();
  MEMORY[0x1E0C80A78](v3);
  __asm { BR              X10 }
}

_QWORD *sub_1B0DAD95C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (BYTE6(v0))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v4 = (_QWORD *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v6 - 64;
    outlined copy of Data._Representation(v2, v0);
    v7 = Data._copyContents(initializing:)();
    outlined consume of Data._Representation(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v7 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x1B0DADA30);
    }
  }
  return v4;
}

void specialized static ByteBuffer.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1B0DADA90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= a3)
  {
    Data._Representation.subscript.getter();
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1B0DADB60);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x1B5E111D8](MEMORY[0x1E0DEB460], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t partial apply for closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)(a1, *(void (**)(uint64_t *))(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t partial apply for closure #1 in ByteBuffer.writeInteger<A>(_:as:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in ByteBuffer.writeInteger<A>(_:as:)(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t partial apply for closure #1 in ByteBuffer.readInteger<A>(as:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in ByteBuffer.readInteger<A>(as:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in ByteBuffer.setInteger<A>(_:at:as:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return closure #1 in ByteBuffer.setInteger<A>(_:at:as:)(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

void partial apply for closure #1 in ByteBuffer.readVariableLengthVectorUInt24<A>(_:)(uint64_t a1)
{
  closure #1 in ByteBuffer.readVariableLengthVectorUInt24<A>(_:)(a1);
}

unint64_t lazy protocol witness table accessor for type ByteBuffer and conformance ByteBuffer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteBuffer and conformance ByteBuffer;
  if (!lazy protocol witness table cache variable for type ByteBuffer and conformance ByteBuffer)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for ByteBuffer, &type metadata for ByteBuffer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteBuffer and conformance ByteBuffer);
  }
  return result;
}

ValueMetadata *type metadata accessor for ByteBuffer()
{
  return &type metadata for ByteBuffer;
}

uint64_t sub_1B0DADD68()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  char v7;
  _QWORD v8[14];

  v3 = BYTE6(v0);
  v7 = 0;
  v8[3] = MEMORY[0x1E0DEAC20];
  v8[4] = MEMORY[0x1E0CB1AA8];
  v8[0] = &v7;
  v8[1] = v8;
  __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  ByteBuffer.writeImmutableBuffer(_:)(v2, v1);
  if ((v4 & 0x8000000000000000) != 0 || (v5 = v4, v4 >= 0x100))
  {
    outlined consume of Data._Representation(v2, v1);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    specialized ByteBuffer.setInteger<A>(_:at:as:)(v4, v3);
    return v5 + 1;
  }
  return result;
}

uint64_t sub_1B0DADF1C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  char v6;
  _QWORD v7[12];

  v2 = BYTE6(v0);
  v6 = 0;
  v7[3] = MEMORY[0x1E0DEAC20];
  v7[4] = MEMORY[0x1E0CB1AA8];
  v7[0] = &v6;
  v7[1] = v7;
  __swift_project_boxed_opaque_existential_1(v7, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  ByteBuffer.writeImmutableBuffer(_:)(v1[1], v1[2]);
  if ((v3 & 0x8000000000000000) != 0 || (v4 = v3, v3 >= 0x100))
  {
    outlined release of NewSessionTicket(v1);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    specialized ByteBuffer.setInteger<A>(_:at:as:)(v3, v2);
    return v4 + 1;
  }
  return result;
}

void specialized ByteBuffer.writeVariableLengthVectorUInt24(_:)(uint64_t a1)
{
  __asm { BR              X12 }
}

{
  __asm { BR              X12 }
}

uint64_t sub_1B0DAE0C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v13;
  __int16 *v14;
  __int16 **v15;
  uint64_t v16;
  uint64_t v17;

  v6 = BYTE6(v0);
  LOBYTE(v13) = 0;
  v7 = MEMORY[0x1E0DEAC20];
  v8 = MEMORY[0x1E0CB1AA8];
  v16 = MEMORY[0x1E0DEAC20];
  v17 = MEMORY[0x1E0CB1AA8];
  v14 = &v13;
  v15 = (__int16 **)((char *)&v13 + 1);
  __swift_project_boxed_opaque_existential_1(&v14, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  v13 = 0;
  v16 = v7;
  v17 = v8;
  v14 = &v13;
  v15 = &v14;
  __swift_project_boxed_opaque_existential_1(&v14, v7);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  v9 = closure #2 in CertificateMessage.write(into:)(v1, v5, v4, v3, v2);
  if (v9 > 0xFFFFFF)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v10 = v9;
  specialized ByteBuffer.setInteger<A>(_:at:as:)((unint64_t)v9 >> 16, v6);
  if (__OFADD__(v6, v11))
    goto LABEL_5;
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v10, v6 + v11);
  return v10 + 3;
}

uint64_t sub_1B0DAE24C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v10;
  __int16 *v11;
  __int16 **v12;
  uint64_t v13;
  uint64_t v14;

  v3 = BYTE6(v0);
  LOBYTE(v10) = 0;
  v4 = MEMORY[0x1E0DEAC20];
  v5 = MEMORY[0x1E0CB1AA8];
  v13 = MEMORY[0x1E0DEAC20];
  v14 = MEMORY[0x1E0CB1AA8];
  v11 = &v10;
  v12 = (__int16 **)((char *)&v10 + 1);
  __swift_project_boxed_opaque_existential_1(&v11, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  v10 = 0;
  v13 = v4;
  v14 = v5;
  v11 = &v10;
  v12 = &v11;
  __swift_project_boxed_opaque_existential_1(&v11, v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  ByteBuffer.writeImmutableBuffer(_:)(v2, v1);
  if (v6 > 0xFFFFFF)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v7 = v6;
  specialized ByteBuffer.setInteger<A>(_:at:as:)((unint64_t)v6 >> 16, v3);
  if (__OFADD__(v3, v8))
    goto LABEL_5;
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v7, v3 + v8);
  return v7 + 3;
}

uint64_t static HKDF.expandLabel<A, B>(secret:label:context:length:)(int64_t a1, Swift::Int a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, char a8)
{
  char *v8;
  unsigned int v9;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  Swift::Int v22;

  LOBYTE(v9) = a8;
  v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 514, 0, MEMORY[0x1E0DEE9D8]);
  if ((a5 & 0x8000000000000000) != 0 || a5 >= 0x10000)
    goto LABEL_17;
  v8 = v14;
  v16 = *((_QWORD *)v14 + 2);
  v15 = *((_QWORD *)v14 + 3);
  v17 = v15 >> 1;
  v18 = v16 + 1;
  if (v15 >> 1 <= v16)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v14);
    v15 = *((_QWORD *)v8 + 3);
    v17 = v15 >> 1;
  }
  *((_QWORD *)v8 + 2) = v18;
  v8[v16 + 32] = BYTE1(a5);
  v19 = v16 + 2;
  if (v17 < v19)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v19, 1, v8);
  *((_QWORD *)v8 + 2) = v19;
  v8[v18 + 32] = a5;
  if ((a3 & 0x1000000000000000) != 0)
  {
    v20 = String.UTF8View._foreignCount()();
    if ((v20 & 0x8000000000000000) != 0)
    {
LABEL_17:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_18;
    }
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      v20 = HIBYTE(a3) & 0xF;
      goto LABEL_13;
    }
    v20 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v20 >= 0x100)
    goto LABEL_17;
LABEL_13:
  v9 = v20 + 6;
  v21 = v9 >> 8;
  if ((v9 & 0x100) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  a7 = *((_QWORD *)v8 + 2);
  v21 = *((_QWORD *)v8 + 3);
  a1 = a7 + 1;
  if (a7 >= v21 >> 1)
LABEL_19:
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), a1, 1, v8);
  *((_QWORD *)v8 + 2) = a1;
  v8[a7 + 32] = v9;
  specialized Array.append<A>(contentsOf:)(0x203331736C74, 0xE600000000000000);
  swift_bridgeObjectRetain();
  v22 = specialized Array.append<A>(contentsOf:)(a2, a3);
  MEMORY[0x1E0C80A78](v22);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
  return swift_bridgeObjectRelease();
}

uint64_t static HKDF.deriveSecret<A>(secret:label:transcriptHash:)(int64_t a1, Swift::Int a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  char AssociatedTypeWitness;
  unint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v12 = dispatch thunk of static Digest.byteCount.getter();
  return static HKDF.expandLabel<A, B>(secret:label:context:length:)(a1, a2, a3, a4, v12, a5, a6, AssociatedTypeWitness);
}

uint64_t static HKDF.tlsExporter<A>(secret:label:context:)@<X0>(int64_t a1@<X0>, Swift::Int a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  Swift::Int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v22 = a6;
  v23 = a7;
  v24 = a8;
  v25 = a4;
  v20 = a2;
  v21 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v20 - v12;
  v14 = type metadata accessor for SymmetricKey();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static HashFunction.zeroHash.getter(a5);
  static HKDF.deriveSecret<A>(secret:label:transcriptHash:)(a1, v20, v21, (uint64_t)v13, a5, v22);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  v18 = dispatch thunk of static Digest.byteCount.getter();
  lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey();
  static HKDF.expandLabel<A, B>(secret:label:context:length:)((int64_t)v17, 0x726574726F707865, 0xE800000000000000, v25, v18, a5, v14, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, unint64_t))(v15 + 8))(v17, v14);
}

uint64_t static HKDF.extract(inputKeyMaterial:salt:)()
{
  type metadata accessor for HashedAuthenticationCode();
  return SymmetricKey.withUnsafeBytes<A>(_:)();
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    result = MEMORY[0x1B5E111D8](MEMORY[0x1E0CB1B00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey;
  if (!lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey)
  {
    v1 = type metadata accessor for SymmetricKey();
    result = MEMORY[0x1B5E111D8](MEMORY[0x1E0CA9398], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey);
  }
  return result;
}

uint64_t partial apply for closure #1 in static HKDF.extract(inputKeyMaterial:salt:)()
{
  lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
  return static HKDF.extract<A>(inputKeyMaterial:salt:)();
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = String.UTF16View.index(_:offsetBy:)();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x1B5E1086C](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

void Extension.QUICTransportParameters.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1B0DAEB6C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v0) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0DAEBECLL);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  return outlined consume of Data._Representation(v1, v0);
}

void Extension.QUICTransportParameters.hashValue.getter(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1B0DAEC48()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v0) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0DAECD4);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v1, v0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hashValue.getter in conformance Extension.QUICTransportParameters()
{
  uint64_t *v0;

  Extension.QUICTransportParameters.hashValue.getter(*v0, v0[1]);
}

void protocol witness for Hashable.hash(into:) in conformance Extension.QUICTransportParameters()
{
  __asm { BR              X10 }
}

uint64_t sub_1B0DAED30()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v2) < v1)
  {
    __break(1u);
    JUMPOUT(0x1B0DAEDB0);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  return outlined consume of Data._Representation(v0, v2);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.QUICTransportParameters()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1B0DAEE08()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v2) < v1)
  {
    __break(1u);
    JUMPOUT(0x1B0DAEE98);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v2);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type Extension.QUICTransportParameters and conformance Extension.QUICTransportParameters()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Extension.QUICTransportParameters and conformance Extension.QUICTransportParameters;
  if (!lazy protocol witness table cache variable for type Extension.QUICTransportParameters and conformance Extension.QUICTransportParameters)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Extension.QUICTransportParameters, &type metadata for Extension.QUICTransportParameters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.QUICTransportParameters and conformance Extension.QUICTransportParameters);
  }
  return result;
}

ValueMetadata *type metadata accessor for Extension.QUICTransportParameters()
{
  return &type metadata for Extension.QUICTransportParameters;
}

uint64_t static TLSError.__derived_enum_equals(_:_:)(unint64_t a1, unint64_t a2)
{
  return specialized static TLSError.__derived_enum_equals(_:_:)(a1 | ((HIDWORD(a1) & 1) << 32), a2 | ((HIDWORD(a2) & 1) << 32));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TLSError(unsigned int *a1, unsigned int *a2)
{
  return specialized static TLSError.__derived_enum_equals(_:_:)(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32));
}

uint64_t specialized static TLSError.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x100000000) != 0)
    return ((uint64_t (*)(void))((char *)&loc_1B0DAEF94 + 4 * byte_1B0DE8C88[a1]))();
  if ((a2 & 0x100000000) != 0)
    return 0;
  if (a1 == a2)
    return WORD1(a1) == WORD1(a2);
  return 0;
}

uint64_t __swift_memcpy5_2(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for TLSError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TLSError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t getEnumTag for TLSError(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for TLSError(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    *(_BYTE *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TLSError()
{
  return &type metadata for TLSError;
}

uint64_t ServerHello.legacyVersion.getter()
{
  unsigned __int16 *v0;

  return *v0;
}

uint64_t ServerHello.random.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t ServerHello.random.setter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[1] = result;
  v4[2] = a2;
  v4[3] = a3;
  v4[4] = a4;
  return result;
}

__n128 ServerHello.legacySessionIDEcho.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v2 = *(_QWORD *)(v1 + 72);
  result = *(__n128 *)(v1 + 40);
  v4 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v2;
  return result;
}

__n128 ServerHello.legacySessionIDEcho.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 40) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 56) = v3;
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(a1 + 32);
  return result;
}

uint64_t (*ServerHello.legacySessionIDEcho.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t ServerHello.cipherSuite.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 80);
}

uint64_t ServerHello.cipherSuite.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 80) = result;
  return result;
}

uint64_t (*ServerHello.cipherSuite.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t ServerHello.legacyCompressionMethod.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 82);
}

uint64_t ServerHello.legacyCompressionMethod.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 82) = result;
  return result;
}

uint64_t (*ServerHello.legacyCompressionMethod.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t ServerHello.extensions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ServerHello.extensions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 88) = a1;
  return result;
}

uint64_t (*ServerHello.extensions.modify())()
{
  return CertificateVerify.algorithm.getter;
}

__n128 ServerHello.init(legacyVersion:random:legacySessionIDEcho:cipherSuite:legacyCompressionMethod:extensions:)@<Q0>(__int16 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10)
{
  __n128 result;
  __int128 v11;
  uint64_t v12;

  result = *(__n128 *)a6;
  v11 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a9 + 40) = *(_OWORD *)a6;
  v12 = *(_QWORD *)(a6 + 32);
  *(_WORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_OWORD *)(a9 + 56) = v11;
  *(_QWORD *)(a9 + 72) = v12;
  *(_WORD *)(a9 + 80) = a7;
  *(_BYTE *)(a9 + 82) = a8;
  *(_QWORD *)(a9 + 88) = a10;
  return result;
}

BOOL ServerHello.isHelloRetryRequest.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[1];
  v2 = v0[2];
  v4 = v0[3];
  v3 = v0[4];
  if (one-time initialization token for helloRetryRequest != -1)
    swift_once();
  return v1 == static Random.helloRetryRequest
      && v2 == (_QWORD)xmmword_1ED2CDA38
      && v4 == *((_QWORD *)&xmmword_1ED2CDA38 + 1)
      && v3 == qword_1ED2CDA48;
}

uint64_t ServerHello.supportedVersion.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  int v6;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 32;
    while (*(_BYTE *)(v3 + 32) != 2 || (*(_QWORD *)(v3 + 8) & 1) == 0)
    {
      v3 += 40;
      if (!--v2)
        goto LABEL_9;
    }
    v5 = (unsigned __int16)*(_QWORD *)v3;
    outlined copy of Extension.ServerCertificateType(*(_QWORD *)v3, 1);
    v6 = 0;
  }
  else
  {
LABEL_9:
    v5 = 0;
    v6 = 1;
  }
  return v5 | (v6 << 16);
}

void ServerHello.hash(into:)()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  uint64_t v9;
  Swift::UInt v10;
  __int128 *v11;
  _BYTE v12[40];

  v1 = *(_BYTE *)(v0 + 1);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v1);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  Hasher._combine(_:)(*(_QWORD *)(v0 + 8));
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 64);
  Hasher._combine(_:)(*(_QWORD *)(v0 + 72));
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(*(_WORD *)(v0 + 80));
  Hasher._combine(_:)(*(_BYTE *)(v0 + 82));
  v9 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD *)(v9 + 16);
  Hasher._combine(_:)(v10);
  if (v10)
  {
    v11 = (__int128 *)(v9 + 32);
    outlined retain of ServerHello(v0);
    do
    {
      outlined init with take of Extension(v11, (uint64_t)v12);
      outlined release of Extension((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Extension);
      Extension.hash(into:)();
      outlined release of Extension((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Extension);
      v11 = (__int128 *)((char *)v11 + 40);
      --v10;
    }
    while (v10);
    outlined release of ServerHello(v0);
  }
}

Swift::Int ServerHello.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  uint64_t v9;
  Swift::UInt v10;
  __int128 *v11;
  _BYTE v13[40];

  Hasher.init(_seed:)();
  v1 = *(_BYTE *)(v0 + 1);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v1);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  Hasher._combine(_:)(*(_QWORD *)(v0 + 8));
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 64);
  Hasher._combine(_:)(*(_QWORD *)(v0 + 72));
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(*(_WORD *)(v0 + 80));
  Hasher._combine(_:)(*(_BYTE *)(v0 + 82));
  v9 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD *)(v9 + 16);
  Hasher._combine(_:)(v10);
  if (v10)
  {
    v11 = (__int128 *)(v9 + 32);
    outlined retain of ServerHello(v0);
    do
    {
      outlined init with take of Extension(v11, (uint64_t)v13);
      outlined release of Extension((uint64_t)v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Extension);
      Extension.hash(into:)();
      outlined release of Extension((uint64_t)v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Extension);
      v11 = (__int128 *)((char *)v11 + 40);
      --v10;
    }
    while (v10);
    outlined release of ServerHello(v0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ServerHello()
{
  return ServerHello.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance ServerHello()
{
  ServerHello.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ServerHello()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt v6;
  uint64_t v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt v10;
  __int128 *v11;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  Swift::UInt16 v15;
  Swift::UInt64 v16;
  Swift::UInt8 v17;
  _BYTE v18[48];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v13 = *(_QWORD *)(v0 + 48);
  v14 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 72);
  v16 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 88);
  v8 = *(_BYTE *)v0;
  v9 = *(_BYTE *)(v0 + 1);
  v15 = *(_WORD *)(v0 + 80);
  v17 = *(_BYTE *)(v0 + 82);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v17);
  v10 = *(_QWORD *)(v7 + 16);
  Hasher._combine(_:)(v10);
  if (v10)
  {
    v11 = (__int128 *)(v7 + 32);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with take of Extension(v11, (uint64_t)v18);
      outlined release of Extension((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Extension);
      Extension.hash(into:)();
      outlined release of Extension((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Extension);
      v11 = (__int128 *)((char *)v11 + 40);
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ServerHello(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[6];
  _OWORD v10[6];

  v2 = a1[3];
  v9[2] = a1[2];
  v9[3] = v2;
  v3 = a1[5];
  v9[4] = a1[4];
  v9[5] = v3;
  v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  v5 = a2[3];
  v10[2] = a2[2];
  v10[3] = v5;
  v6 = a2[5];
  v10[4] = a2[4];
  v10[5] = v6;
  v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return specialized static ServerHello.__derived_struct_equals(_:_:)((unsigned __int8 *)v9, (unsigned __int8 *)v10) & 1;
}

uint64_t static ServerHello.handshakeType.getter()
{
  return 2;
}

void ServerHello.write(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int16 v18;
  _BYTE v19[166];

  v2 = v1;
  *(_QWORD *)&v19[150] = *MEMORY[0x1E0C80C00];
  LOWORD(v12) = *(_WORD *)v2;
  v4 = MEMORY[0x1E0DEAC20];
  v5 = MEMORY[0x1E0CB1AA8];
  *((_QWORD *)&v16 + 1) = MEMORY[0x1E0DEAC20];
  v17 = MEMORY[0x1E0CB1AA8];
  *(_QWORD *)&v15 = &v12;
  *((_QWORD *)&v15 + 1) = (char *)&v12 + 2;
  __swift_project_boxed_opaque_existential_1(&v15, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  v6 = *(_OWORD *)(v2 + 24);
  v12 = *(_OWORD *)(v2 + 8);
  v13 = v6;
  *((_QWORD *)&v16 + 1) = v4;
  v17 = v5;
  *(_QWORD *)&v15 = &v12;
  *((_QWORD *)&v15 + 1) = &v14;
  __swift_project_boxed_opaque_existential_1(&v15, v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  v7 = *(_OWORD *)(v2 + 56);
  v15 = *(_OWORD *)(v2 + 40);
  v16 = v7;
  v17 = *(_QWORD *)(v2 + 72);
  ByteBuffer.writeLegacySessionID(_:)();
  v9 = v8 + 34;
  if (__OFADD__(v8, 34))
  {
    __break(1u);
  }
  else
  {
    v18 = bswap32(*(unsigned __int16 *)(v2 + 80)) >> 16;
    *((_QWORD *)&v13 + 1) = v4;
    v14 = v5;
    *(_QWORD *)&v12 = &v18;
    *((_QWORD *)&v12 + 1) = v19;
    __swift_project_boxed_opaque_existential_1(&v12, v4);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
    v10 = __OFADD__(v9, 2);
    v11 = v9 + 2;
    if (!v10)
    {
      LOBYTE(v18) = *(_BYTE *)(v2 + 82);
      *((_QWORD *)&v13 + 1) = v4;
      v14 = v5;
      *(_QWORD *)&v12 = &v18;
      *((_QWORD *)&v12 + 1) = (char *)&v18 + 1;
      __swift_project_boxed_opaque_existential_1(&v12, v4);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
      if (!__OFADD__(v11, 1))
        __asm { BR              X12 }
LABEL_7:
      __break(1u);
      JUMPOUT(0x1B0DAFE2CLL);
    }
  }
  __break(1u);
  goto LABEL_7;
}

double ServerHello.init(bytes:)@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  specialized ServerHello.init(bytes:)(a1);
  if (!v2)
  {
    a2[2] = v7;
    a2[3] = v8;
    a2[4] = v9;
    a2[5] = v10;
    result = *(double *)&v5;
    *a2 = v5;
    a2[1] = v6;
  }
  return result;
}

void protocol witness for HandshakeMessageProtocol.write(into:) in conformance ServerHello(uint64_t a1)
{
  ServerHello.write(into:)(a1);
}

uint64_t specialized static ServerHello.__derived_struct_equals(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2
    && a1[1] == a2[1]
    && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 8), *(int64x2_t *)(a2 + 8)), (int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 24), *(int64x2_t *)(a2 + 24)))), 0xFuLL))) & 1) != 0&& (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 40), *(int64x2_t *)(a2 + 40)), (int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 56), *(int64x2_t *)(a2 + 56)))), 0xFuLL))) & 1) != 0&& *((_QWORD *)a1 + 9) == *((_QWORD *)a2 + 9)&& *((unsigned __int16 *)a1 + 40) == *((unsigned __int16 *)a2 + 40)&& a1[82] == a2[82])
  {
    return specialized static Array<A>.== infix(_:_:)(*((_QWORD *)a1 + 11), *((_QWORD *)a2 + 11));
  }
  else
  {
    return 0;
  }
}

unint64_t lazy protocol witness table accessor for type ServerHello and conformance ServerHello()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ServerHello and conformance ServerHello;
  if (!lazy protocol witness table cache variable for type ServerHello and conformance ServerHello)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for ServerHello, &type metadata for ServerHello);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ServerHello and conformance ServerHello);
  }
  return result;
}

uint64_t destroy for ServerHello()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ServerHello(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ServerHello(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for ServerHello(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerHello(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 88);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerHello(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 88) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerHello()
{
  return &type metadata for ServerHello;
}

void *CertificateType.rawPublicKey.unsafeMutableAddressor()
{
  return &static CertificateType.rawPublicKey;
}

void *CertificateType.x509.unsafeMutableAddressor()
{
  return &static CertificateType.x509;
}

unsigned __int8 *protocol witness for RawRepresentable.init(rawValue:) in conformance CertificateType@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CertificateType(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CertificateType()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CertificateType()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CertificateType()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CertificateType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t CertificateType.description.getter(char a1)
{
  Swift::String v2;
  Swift::String v3;

  if (!a1)
    return 0x393035782ELL;
  if (a1 == 2)
    return 0x6C6275507761722ELL;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CertificateType()
{
  char *v0;

  return CertificateType.description.getter(*v0);
}

uint64_t ByteBuffer.writeCertificateType(_:)(char a1)
{
  char v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v2 = a1;
  v3[3] = MEMORY[0x1E0DEAC20];
  v3[4] = MEMORY[0x1E0CB1AA8];
  v3[0] = &v2;
  v3[1] = v3;
  __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  return 1;
}

void ByteBuffer.readCertificateType()()
{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 16), 1))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0DB0694);
}

unint64_t lazy protocol witness table accessor for type CertificateType and conformance CertificateType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CertificateType and conformance CertificateType;
  if (!lazy protocol witness table cache variable for type CertificateType and conformance CertificateType)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for CertificateType, &type metadata for CertificateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CertificateType and conformance CertificateType);
  }
  return result;
}

void *HandshakeType.certificateVerify.unsafeMutableAddressor()
{
  return &static HandshakeType.certificateVerify;
}

void *HandshakeType.clientHello.unsafeMutableAddressor()
{
  return &static HandshakeType.clientHello;
}

void *HandshakeType.encryptedExtensions.unsafeMutableAddressor()
{
  return &static HandshakeType.encryptedExtensions;
}

void *HandshakeType.finished.unsafeMutableAddressor()
{
  return &static HandshakeType.finished;
}

void *HandshakeType.serverHello.unsafeMutableAddressor()
{
  return &static HandshakeType.serverHello;
}

void *HandshakeType.newSessionTicket.unsafeMutableAddressor()
{
  return &static HandshakeType.newSessionTicket;
}

uint64_t static HandshakeType.newSessionTicket.getter()
{
  return 4;
}

void *HandshakeType.endOfEarlyData.unsafeMutableAddressor()
{
  return &static HandshakeType.endOfEarlyData;
}

uint64_t static HandshakeType.endOfEarlyData.getter()
{
  return 5;
}

uint64_t static HandshakeType.encryptedExtensions.getter()
{
  return 8;
}

void *HandshakeType.certificate.unsafeMutableAddressor()
{
  return &static HandshakeType.certificate;
}

uint64_t static HandshakeType.certificate.getter()
{
  return 11;
}

void *HandshakeType.certificateRequest.unsafeMutableAddressor()
{
  return &static HandshakeType.certificateRequest;
}

void *HandshakeType.keyUpdate.unsafeMutableAddressor()
{
  return &static HandshakeType.keyUpdate;
}

uint64_t static HandshakeType.keyUpdate.getter()
{
  return 24;
}

void *HandshakeType.messageHash.unsafeMutableAddressor()
{
  return &static HandshakeType.messageHash;
}

uint64_t static HandshakeType.messageHash.getter()
{
  return 254;
}

unint64_t HandshakeType.description.getter(unsigned __int8 a1)
{
  int v1;
  unint64_t result;
  Swift::String v3;
  Swift::String v4;

  v1 = a1;
  result = 0x48746E65696C632ELL;
  switch(v1)
  {
    case 1:
      return result;
    case 2:
      result = 0x487265767265732ELL;
      break;
    case 3:
    case 6:
    case 7:
    case 9:
    case 10:
    case 12:
    case 14:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
      goto LABEL_5;
    case 4:
      result = 0xD000000000000011;
      break;
    case 5:
      result = 0x6145664F646E652ELL;
      break;
    case 8:
      result = 0xD000000000000014;
      break;
    case 11:
      result = 0x696669747265632ELL;
      break;
    case 13:
      result = 0xD000000000000013;
      break;
    case 15:
      result = 0xD000000000000012;
      break;
    case 20:
      result = 0x656873696E69662ELL;
      break;
    case 24:
      result = 0x6164705579656B2ELL;
      break;
    default:
      if (v1 == 254)
      {
        result = 0x6567617373656D2ELL;
      }
      else
      {
LABEL_5:
        _StringGuts.grow(_:)(27);
        swift_bridgeObjectRelease();
        v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v3);
        swift_bridgeObjectRelease();
        v4._countAndFlagsBits = 41;
        v4._object = (void *)0xE100000000000000;
        String.append(_:)(v4);
        result = 0xD000000000000018;
      }
      break;
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance HandshakeType()
{
  unsigned __int8 *v0;

  return HandshakeType.description.getter(*v0);
}

void ByteBuffer.readHandshakeType()()
{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 16), 1))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0DB0AF8);
}

unint64_t lazy protocol witness table accessor for type HandshakeType and conformance HandshakeType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandshakeType and conformance HandshakeType;
  if (!lazy protocol witness table cache variable for type HandshakeType and conformance HandshakeType)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for HandshakeType, &type metadata for HandshakeType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandshakeType and conformance HandshakeType);
  }
  return result;
}

ValueMetadata *type metadata accessor for HandshakeType()
{
  return &type metadata for HandshakeType;
}

uint64_t Curve25519EphemeralKey.privateKey.getter@<X0>(uint64_t a1@<X8>)
{
  return Curve25519EphemeralKey.privateKey.getter(MEMORY[0x1E0CA9248], a1);
}

uint64_t Curve25519EphemeralKey.privateKey.setter(uint64_t a1)
{
  return Curve25519EphemeralKey.privateKey.setter(a1, MEMORY[0x1E0CA9248]);
}

uint64_t Curve25519EphemeralKey.namedGroup.getter()
{
  return 29;
}

uint64_t Curve25519EphemeralKey.publicKeyData.getter()
{
  return Curve25519EphemeralKey.publicKeyData.getter(MEMORY[0x1E0CA9210], MEMORY[0x1E0CA9228], MEMORY[0x1E0CA91F8]);
}

uint64_t Curve25519EphemeralKey.sharedSecretFromKeyAgreement(publicKeyData:)(uint64_t a1, unint64_t a2)
{
  return Curve25519EphemeralKey.sharedSecretFromKeyAgreement(publicKeyData:)(a1, a2, MEMORY[0x1E0CA9210], MEMORY[0x1E0CA9200], MEMORY[0x1E0CA9220]);
}

uint64_t protocol witness for EphemeralPrivateKey.publicKeyData.getter in conformance Curve25519EphemeralKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for EphemeralPrivateKey.publicKeyData.getter in conformance Curve25519EphemeralKey(a1, a2, MEMORY[0x1E0CA9210], MEMORY[0x1E0CA9228], MEMORY[0x1E0CA91F8]);
}

uint64_t protocol witness for EphemeralPrivateKey.sharedSecretFromKeyAgreement(publicKeyData:) in conformance Curve25519EphemeralKey(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for EphemeralPrivateKey.sharedSecretFromKeyAgreement(publicKeyData:) in conformance Curve25519EphemeralKey(a1, a2, a3, a4, MEMORY[0x1E0CA9210], MEMORY[0x1E0CA9200], MEMORY[0x1E0CA9220]);
}

uint64_t P384EphemeralKey.privateKey.getter@<X0>(uint64_t a1@<X8>)
{
  return Curve25519EphemeralKey.privateKey.getter(MEMORY[0x1E0CA97C8], a1);
}

uint64_t Curve25519EphemeralKey.privateKey.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v2, v4);
}

uint64_t P384EphemeralKey.privateKey.setter(uint64_t a1)
{
  return Curve25519EphemeralKey.privateKey.setter(a1, MEMORY[0x1E0CA97C8]);
}

uint64_t Curve25519EphemeralKey.privateKey.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;

  v4 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v2, a1, v4);
}

uint64_t P384EphemeralKey.publicKeyData.getter()
{
  return Curve25519EphemeralKey.publicKeyData.getter(MEMORY[0x1E0CA9790], MEMORY[0x1E0CA97A8], MEMORY[0x1E0CA9778]);
}

uint64_t Curve25519EphemeralKey.publicKeyData.getter(uint64_t (*a1)(_QWORD), uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = a1(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78]();
  v9 = (char *)&v13 - v8;
  v10 = a2(v7);
  v11 = a3(v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v11;
}

uint64_t P384EphemeralKey.sharedSecretFromKeyAgreement(publicKeyData:)(uint64_t a1, unint64_t a2)
{
  return Curve25519EphemeralKey.sharedSecretFromKeyAgreement(publicKeyData:)(a1, a2, MEMORY[0x1E0CA9790], MEMORY[0x1E0CA9780], MEMORY[0x1E0CA97A0]);
}

uint64_t Curve25519EphemeralKey.sharedSecretFromKeyAgreement(publicKeyData:)(uint64_t a1, unint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(_QWORD *, _QWORD, _QWORD), void (*a5)(char *))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  void (*v15)(char *);
  _QWORD v16[2];

  v15 = a5;
  v9 = a3(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v14 - v11;
  v16[0] = a1;
  v16[1] = a2;
  outlined copy of Data._Representation(a1, a2);
  result = a4(v16, MEMORY[0x1E0CB0338], MEMORY[0x1E0CB0318]);
  if (!v5)
  {
    v15(v12);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return result;
}

uint64_t protocol witness for EphemeralPrivateKey.publicKeyData.getter in conformance P384EphemeralKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for EphemeralPrivateKey.publicKeyData.getter in conformance Curve25519EphemeralKey(a1, a2, MEMORY[0x1E0CA9790], MEMORY[0x1E0CA97A8], MEMORY[0x1E0CA9778]);
}

uint64_t protocol witness for EphemeralPrivateKey.publicKeyData.getter in conformance Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v7 = a3(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78]();
  v11 = (char *)&v15 - v10;
  v12 = a4(v9);
  v13 = a5(v12);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return v13;
}

uint64_t protocol witness for EphemeralPrivateKey.sharedSecretFromKeyAgreement(publicKeyData:) in conformance P384EphemeralKey(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for EphemeralPrivateKey.sharedSecretFromKeyAgreement(publicKeyData:) in conformance Curve25519EphemeralKey(a1, a2, a3, a4, MEMORY[0x1E0CA9790], MEMORY[0x1E0CA9780], MEMORY[0x1E0CA97A0]);
}

uint64_t protocol witness for EphemeralPrivateKey.sharedSecretFromKeyAgreement(publicKeyData:) in conformance Curve25519EphemeralKey(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD *, _QWORD, _QWORD), void (*a7)(char *))
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  void (*v17)(char *);
  _QWORD v18[2];

  v17 = a7;
  v11 = a5(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v16 - v13;
  v18[0] = a1;
  v18[1] = a2;
  outlined copy of Data._Representation(a1, a2);
  result = a6(v18, MEMORY[0x1E0CB0338], MEMORY[0x1E0CB0318]);
  if (!v7)
  {
    v17(v14);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E0CA9248]);
}

uint64_t destroy for Curve25519EphemeralKey(uint64_t a1, uint64_t a2)
{
  return destroy for Curve25519EphemeralKey(a1, a2, MEMORY[0x1E0CA9248]);
}

uint64_t initializeWithCopy for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E0CA9248]);
}

uint64_t assignWithCopy for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E0CA9248]);
}

uint64_t initializeWithTake for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E0CA9248]);
}

uint64_t assignWithTake for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E0CA9248]);
}

uint64_t getEnumTagSinglePayload for Curve25519EphemeralKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0DB1094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x1E0CA9248]);
}

uint64_t storeEnumTagSinglePayload for Curve25519EphemeralKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0DB10AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x1E0CA9248]);
}

uint64_t type metadata accessor for Curve25519EphemeralKey(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for Curve25519EphemeralKey);
}

uint64_t type metadata completion function for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E0CA9248]);
}

uint64_t initializeBufferWithCopyOfBuffer for P384EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E0CA97C8]);
}

uint64_t initializeBufferWithCopyOfBuffer for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v6 - 8))(a1, a2, v6);
}

uint64_t destroy for P384EphemeralKey(uint64_t a1, uint64_t a2)
{
  return destroy for Curve25519EphemeralKey(a1, a2, MEMORY[0x1E0CA97C8]);
}

uint64_t destroy for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;

  v4 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t initializeWithCopy for P384EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E0CA97C8]);
}

uint64_t initializeWithCopy for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  return a1;
}

uint64_t assignWithCopy for P384EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E0CA97C8]);
}

uint64_t assignWithCopy for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  return a1;
}

uint64_t initializeWithTake for P384EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E0CA97C8]);
}

uint64_t initializeWithTake for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  return a1;
}

uint64_t assignWithTake for P384EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E0CA97C8]);
}

uint64_t assignWithTake for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for P384EphemeralKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0DB12AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x1E0CA97C8]);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for P384EphemeralKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0DB1300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x1E0CA97C8]);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;

  v7 = a5(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

uint64_t type metadata accessor for P384EphemeralKey(uint64_t a1)
{
  return type metadata accessor for PeerCertificateBundle.Bundle(a1, (uint64_t *)&type metadata singleton initialization cache for P384EphemeralKey);
}

uint64_t type metadata completion function for P384EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for Curve25519EphemeralKey(a1, a2, a3, MEMORY[0x1E0CA97C8]);
}

uint64_t type metadata completion function for Curve25519EphemeralKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ByteBuffer.writeKeyShare(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v11;
  _QWORD v12[6];

  v12[5] = *MEMORY[0x1E0C80C00];
  v7 = (a3 >> 60) & 3;
  if (!(_DWORD)v7)
    __asm { BR              X12 }
  if ((_DWORD)v7 == 1)
  {
    outlined copy of Data._Representation(a2, a3 & 0xCFFFFFFFFFFFFFFFLL);
    ByteBuffer.writeKeyShareEntry(_:)(a1, a2, a3 & 0xCFFFFFFFFFFFFFFFLL);
    v9 = v8;
    outlined consume of Extension.KeyShare(a1, a2, a3);
    return v9;
  }
  else
  {
    v11 = bswap32(a1) >> 16;
    v12[3] = MEMORY[0x1E0DEAC20];
    v12[4] = MEMORY[0x1E0CB1AA8];
    v12[0] = &v11;
    v12[1] = v12;
    __swift_project_boxed_opaque_existential_1(v12, MEMORY[0x1E0DEAC20]);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    return 2;
  }
}

void Extension.KeyShare.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;

  v6 = (a4 >> 60) & 3;
  if ((_DWORD)v6)
  {
    if ((_DWORD)v6 == 1)
    {
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(a2);
      __asm { BR              X10 }
    }
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(a2);
  }
  else
  {
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)(a1, a2);
  }
}

void sub_1B0DB19E0()
{
  uint64_t v0;
  unint64_t v1;

  outlined copy of Data._Representation(v0, v1);
  outlined copy of Data._Representation(v0, v1);
  JUMPOUT(0x1B0DB1A04);
}

Swift::Int Extension.KeyShare.hashValue.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _BYTE v7[72];

  Hasher.init(_seed:)();
  v5 = (a3 >> 60) & 3;
  if ((_DWORD)v5)
  {
    if ((_DWORD)v5 == 1)
    {
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(a1);
      __asm { BR              X10 }
    }
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)((uint64_t)v7, a1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Extension.KeyShare()
{
  uint64_t v0;

  return Extension.KeyShare.hashValue.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance Extension.KeyShare(uint64_t a1)
{
  uint64_t v1;

  Extension.KeyShare.hash(into:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.KeyShare()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE v5[72];

  v1 = *v0;
  v2 = v0[2];
  Hasher.init(_seed:)();
  v3 = (v2 >> 60) & 3;
  if ((_DWORD)v3)
  {
    if ((_DWORD)v3 == 1)
    {
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v1);
      __asm { BR              X10 }
    }
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)((uint64_t)v5, v1);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Extension.KeyShare(uint64_t a1, uint64_t a2)
{
  return specialized static Extension.KeyShare.__derived_enum_equals(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
}

void Extension.KeyShare.KeyShareEntry.hash(into:)(int a1, Swift::UInt16 a2, uint64_t a3, uint64_t a4)
{
  Hasher._combine(_:)(a2);
  __asm { BR              X10 }
}

uint64_t sub_1B0DB1E08()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v0) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0DB1E88);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  return outlined consume of Data._Representation(v1, v0);
}

void Extension.KeyShare.KeyShareEntry.hashValue.getter(Swift::UInt16 a1, uint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  __asm { BR              X10 }
}

Swift::Int sub_1B0DB1EF8()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v0) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0DB1F88);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v1, v0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hashValue.getter in conformance Extension.KeyShare.KeyShareEntry()
{
  uint64_t v0;

  Extension.KeyShare.KeyShareEntry.hashValue.getter(*(_WORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance Extension.KeyShare.KeyShareEntry()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  Hasher._combine(_:)(*(_WORD *)v0);
  __asm { BR              X10 }
}

uint64_t sub_1B0DB1FF4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v1) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0DB2074);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  return outlined consume of Data._Representation(v0, v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.KeyShare.KeyShareEntry()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt16 v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_WORD *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_1B0DB20DC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v1) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0DB216CLL);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v1);
  return Hasher._finalize()();
}

void Extension.KeyShare.KeyShareEntry.description.getter(__int16 a1, uint64_t a2, uint64_t a3)
{
  Swift::String v5;
  Swift::String v6;

  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = NamedGroup.description.getter(a1);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x63784579656B202CLL;
  v6._object = (void *)0xEF203A65676E6168;
  String.append(_:)(v6);
  __asm { BR              X11 }
}

uint64_t sub_1B0DB2240()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v5;

  if (__OFSUB__(BYTE6(v1), v0))
  {
    __break(1u);
    JUMPOUT(0x1B0DB22C8);
  }
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x29736574796220;
  v3._object = (void *)0xE700000000000000;
  String.append(_:)(v3);
  return v5;
}

void protocol witness for CustomStringConvertible.description.getter in conformance Extension.KeyShare.KeyShareEntry()
{
  uint64_t v0;

  Extension.KeyShare.KeyShareEntry.description.getter(*(_WORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

void ByteBuffer.writeKeyShareEntry(_:)(unsigned int a1, uint64_t a2, uint64_t a3)
{
  __int16 v4;
  _QWORD v5[6];

  v5[5] = *MEMORY[0x1E0C80C00];
  v4 = bswap32(a1) >> 16;
  v5[3] = MEMORY[0x1E0DEAC20];
  v5[4] = MEMORY[0x1E0CB1AA8];
  v5[0] = &v4;
  v5[1] = v5;
  __swift_project_boxed_opaque_existential_1(v5, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  __asm { BR              X11 }
}

uint64_t sub_1B0DB2388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t result;
  __int16 v9;
  _QWORD v10[14];

  v5 = BYTE6(v1) - v0;
  if (__OFSUB__(BYTE6(v1), v0))
  {
    __break(1u);
    goto LABEL_7;
  }
  if ((v5 & 0x8000000000000000) != 0 || v5 >= 0x10000)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1B0DB24C4);
  }
  v9 = bswap32(v5) >> 16;
  v10[3] = v3;
  v10[4] = v4;
  v10[0] = &v9;
  v10[1] = v10;
  __swift_project_boxed_opaque_existential_1(v10, v3);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  ByteBuffer.writeImmutableBuffer(_:)(v2, v1);
  v7 = __OFADD__(v6, 4);
  result = v6 + 4;
  if (v7)
LABEL_7:
    __break(1u);
  return result;
}

void closure #1 in ByteBuffer.readKeyShare(messageType:helloRetryRequest:)(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_1B0DB2570()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v5 - v1;
  if (!__OFSUB__(v5, v1))
  {
    if (v3 >= 0)
      v4 = v5 - v1;
    else
      v4 = v3 + 31;
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v4 >> 5) & ~(v4 >> 63), 0, MEMORY[0x1E0DEE9D8]);
    *(_WORD *)(v2 - 106) = 0;
    if (!__OFADD__(v1, 2))
      __asm { BR              X9 }
    __break(1u);
    JUMPOUT(0x1B0DB29C0);
  }
  __break(1u);
  JUMPOUT(0x1B0DB29F0);
}

uint64_t specialized static Extension.KeyShare.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v10;
  unint64_t v14;
  char v15;

  v10 = (a3 >> 60) & 3;
  if ((_DWORD)v10)
  {
    if ((_DWORD)v10 == 1)
    {
      if ((a7 & 0x3000000000000000) == 0x1000000000000000 && (unsigned __int16)a1 == (unsigned __int16)a5)
      {
        v14 = a3 & 0xCFFFFFFFFFFFFFFFLL;
        outlined copy of Extension.KeyShare(a1, a2, a3);
        outlined copy of Extension.KeyShare(a5, a6, a7);
        specialized static ByteBuffer.== infix(_:_:)(a2, v14);
        LOBYTE(v14) = v15;
        outlined consume of Extension.KeyShare(a5, a6, a7);
        outlined consume of Extension.KeyShare(a1, a2, a3);
        if ((v14 & 1) != 0)
          return 1;
      }
      return 0;
    }
    return (a7 & 0x3000000000000000) == 0x2000000000000000 && (unsigned __int16)a1 == (unsigned __int16)a5;
  }
  else
  {
    if ((a7 & 0x3000000000000000) != 0)
      return 0;
    return specialized static Array<A>.== infix(_:_:)(a1, a5);
  }
}

unint64_t lazy protocol witness table accessor for type Extension.KeyShare and conformance Extension.KeyShare()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Extension.KeyShare and conformance Extension.KeyShare;
  if (!lazy protocol witness table cache variable for type Extension.KeyShare and conformance Extension.KeyShare)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Extension.KeyShare, &type metadata for Extension.KeyShare);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.KeyShare and conformance Extension.KeyShare);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Extension.KeyShare.KeyShareEntry and conformance Extension.KeyShare.KeyShareEntry()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Extension.KeyShare.KeyShareEntry and conformance Extension.KeyShare.KeyShareEntry;
  if (!lazy protocol witness table cache variable for type Extension.KeyShare.KeyShareEntry and conformance Extension.KeyShare.KeyShareEntry)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Extension.KeyShare.KeyShareEntry, &type metadata for Extension.KeyShare.KeyShareEntry);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.KeyShare.KeyShareEntry and conformance Extension.KeyShare.KeyShareEntry);
  }
  return result;
}

uint64_t destroy for Extension.KeyShare(uint64_t a1)
{
  return outlined consume of Extension.KeyShare(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t *initializeWithCopy for Extension.KeyShare(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  outlined copy of Extension.KeyShare(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for Extension.KeyShare(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  outlined copy of Extension.KeyShare(*a2, v4, v5);
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  outlined consume of Extension.KeyShare(v7, v8, v9);
  return a1;
}

uint64_t *assignWithTake for Extension.KeyShare(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v6;
  outlined consume of Extension.KeyShare(v3, v5, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Extension.KeyShare(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 2);
  if ((~*(_QWORD *)(a1 + 16) & 0x3000000000000000) != 0)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for Extension.KeyShare(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_OWORD *)(result + 16) = xmmword_1B0DE9050;
    }
  }
  return result;
}

uint64_t getEnumTag for Extension.KeyShare(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 16) >> 60) & 3;
}

uint64_t destructiveProjectEnumData for Extension.KeyShare(uint64_t result)
{
  *(_QWORD *)(result + 16) &= 0xCFFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t destructiveInjectEnumTag for Extension.KeyShare(uint64_t result, char a2)
{
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 3) << 60);
  return result;
}

ValueMetadata *type metadata accessor for Extension.KeyShare()
{
  return &type metadata for Extension.KeyShare;
}

void ByteBuffer.writeALPN(_:)()
{
  __asm { BR              X12 }
}

unint64_t sub_1B0DB2F00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int16 v7;
  _QWORD v8[14];

  v3 = BYTE6(v0);
  v7 = 0;
  v8[3] = MEMORY[0x1E0DEAC20];
  v8[4] = MEMORY[0x1E0CB1AA8];
  v8[0] = &v7;
  v8[1] = v8;
  __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  ByteBuffer.writeImmutableBuffer(_:)(v2, v1);
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v5 = v4;
  if (v4 >> 16)
    goto LABEL_5;
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v4, v3);
  return v5 + 2;
}

void Extension.ApplicationLayerProtocolNegotiation.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1B0DB3034()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v0) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0DB30B4);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  return outlined consume of Data._Representation(v1, v0);
}

void Extension.ApplicationLayerProtocolNegotiation.hashValue.getter(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1B0DB3110()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v0) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0DB319CLL);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v1, v0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hashValue.getter in conformance Extension.ApplicationLayerProtocolNegotiation()
{
  uint64_t *v0;

  Extension.ApplicationLayerProtocolNegotiation.hashValue.getter(*v0, v0[1]);
}

void protocol witness for Hashable.hash(into:) in conformance Extension.ApplicationLayerProtocolNegotiation()
{
  __asm { BR              X10 }
}

uint64_t sub_1B0DB31F8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v2) < v1)
  {
    __break(1u);
    JUMPOUT(0x1B0DB3278);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  return outlined consume of Data._Representation(v0, v2);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.ApplicationLayerProtocolNegotiation()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1B0DB32D0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v2) < v1)
  {
    __break(1u);
    JUMPOUT(0x1B0DB3360);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v2);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type Extension.ApplicationLayerProtocolNegotiation and conformance Extension.ApplicationLayerProtocolNegotiation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Extension.ApplicationLayerProtocolNegotiation and conformance Extension.ApplicationLayerProtocolNegotiation;
  if (!lazy protocol witness table cache variable for type Extension.ApplicationLayerProtocolNegotiation and conformance Extension.ApplicationLayerProtocolNegotiation)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Extension.ApplicationLayerProtocolNegotiation, &type metadata for Extension.ApplicationLayerProtocolNegotiation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.ApplicationLayerProtocolNegotiation and conformance Extension.ApplicationLayerProtocolNegotiation);
  }
  return result;
}

ValueMetadata *type metadata accessor for Extension.ApplicationLayerProtocolNegotiation()
{
  return &type metadata for Extension.ApplicationLayerProtocolNegotiation;
}

uint64_t NewSessionTicket.ticketLifetime.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t NewSessionTicket.ticketLifetime.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t NewSessionTicket.ticketAgeAdd.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4);
}

uint64_t NewSessionTicket.ticketAgeAdd.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*NewSessionTicket.ticketAgeAdd.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t NewSessionTicket.ticketNonce.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t NewSessionTicket.ticket.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t NewSessionTicket.ticket.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  result = outlined consume of Data._Representation(v3[4], v3[5]);
  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
  return result;
}

uint64_t (*NewSessionTicket.ticket.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t NewSessionTicket.extensions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NewSessionTicket.extensions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t (*NewSessionTicket.extensions.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t NewSessionTicket.init(ticketLifetime:ticketAgeAdd:ticketNonce:ticket:extensions:)@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  *(_DWORD *)a9 = result;
  *(_DWORD *)(a9 + 4) = a2;
  *(_QWORD *)(a9 + 8) = a3;
  *(_QWORD *)(a9 + 16) = a4;
  *(_QWORD *)(a9 + 24) = a5;
  *(_QWORD *)(a9 + 32) = a6;
  *(_QWORD *)(a9 + 40) = a7;
  *(_QWORD *)(a9 + 48) = a8;
  *(_QWORD *)(a9 + 56) = a10;
  return result;
}

void NewSessionTicket.hash(into:)()
{
  Swift::UInt32 *v0;

  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v0[1]);
  __asm { BR              X10 }
}

void sub_1B0DB3588()
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[16];

  if (BYTE6(v1) >= v5[2])
  {
    v2 = Data._Representation.subscript.getter();
    v4 = v3;
    Data.hash(into:)();
    outlined consume of Data._Representation(v2, v4);
    outlined release of ByteBuffer((uint64_t)v5);
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1B0DB371CLL);
}

uint64_t static NewSessionTicket.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && (specialized static ByteBuffer.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16)), (v4 & 1) != 0)
    && (specialized static ByteBuffer.== infix(_:_:)(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)), (v5 & 1) != 0))
  {
    return specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
  }
  else
  {
    return 0;
  }
}

Swift::Int NewSessionTicket.hashValue.getter()
{
  Hasher.init(_seed:)();
  NewSessionTicket.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NewSessionTicket()
{
  Hasher.init(_seed:)();
  NewSessionTicket.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NewSessionTicket(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && (v2 = *(_QWORD *)(a1 + 40),
        v3 = *(_QWORD *)(a1 + 56),
        v4 = *(_QWORD *)(a2 + 56),
        v5 = *(_QWORD *)(a1 + 32),
        specialized static ByteBuffer.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16)),
        (v6 & 1) != 0)
    && (specialized static ByteBuffer.== infix(_:_:)(v5, v2), (v7 & 1) != 0))
  {
    return specialized static Array<A>.== infix(_:_:)(v3, v4);
  }
  else
  {
    return 0;
  }
}

void NewSessionTicket.write(into:)(uint64_t a1)
{
  unsigned int *v1;
  unsigned int *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _BYTE v13[164];

  v2 = v1;
  *(_QWORD *)&v13[148] = *MEMORY[0x1E0C80C00];
  v12 = bswap32(*v2);
  v4 = MEMORY[0x1E0DEAC20];
  v5 = MEMORY[0x1E0CB1AA8];
  v10 = MEMORY[0x1E0DEAC20];
  v11 = MEMORY[0x1E0CB1AA8];
  v8 = &v12;
  v9 = v13;
  __swift_project_boxed_opaque_existential_1(&v8, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v8);
  v12 = bswap32(v2[1]);
  v10 = v4;
  v11 = v5;
  v8 = &v12;
  v9 = v13;
  __swift_project_boxed_opaque_existential_1(&v8, v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v8);
  outlined retain of NewSessionTicket(v2);
  specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(a1);
  v7 = v6;
  outlined release of NewSessionTicket(v2);
  if (!__OFADD__(v7, 8))
    __asm { BR              X12 }
  __break(1u);
  JUMPOUT(0x1B0DB3EBCLL);
}

double NewSessionTicket.init(bytes:)@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  specialized NewSessionTicket.init(bytes:)(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

void protocol witness for HandshakeMessageProtocol.write(into:) in conformance NewSessionTicket(uint64_t a1)
{
  NewSessionTicket.write(into:)(a1);
}

uint64_t outlined release of ByteBuffer(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

unint64_t lazy protocol witness table accessor for type NewSessionTicket and conformance NewSessionTicket()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NewSessionTicket and conformance NewSessionTicket;
  if (!lazy protocol witness table cache variable for type NewSessionTicket and conformance NewSessionTicket)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for NewSessionTicket, &type metadata for NewSessionTicket);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NewSessionTicket and conformance NewSessionTicket);
  }
  return result;
}

uint64_t destroy for NewSessionTicket(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for NewSessionTicket(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  outlined copy of Data._Representation(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  v6 = a2[4];
  a1[3] = a2[3];
  v7 = a2[5];
  outlined copy of Data._Representation(v6, v7);
  a1[4] = v6;
  a1[5] = v7;
  v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NewSessionTicket(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  outlined copy of Data._Representation(v8, v9);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  outlined consume of Data._Representation(v10, v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for NewSessionTicket(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v4, v5);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  outlined consume of Data._Representation(v6, v7);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NewSessionTicket(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NewSessionTicket(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NewSessionTicket()
{
  return &type metadata for NewSessionTicket;
}

uint64_t CertificateMessage.certificateList.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t (*CertificateMessage.certificateList.modify())()
{
  return CertificateVerify.algorithm.getter;
}

void CertificateMessage.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1B0DB437C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if (BYTE6(v2) < v4)
  {
    __break(1u);
    JUMPOUT(0x1B0DB4418);
  }
  v5 = Data._Representation.subscript.getter();
  v7 = v6;
  Data.hash(into:)();
  outlined consume of Data._Representation(v5, v7);
  outlined consume of Data._Representation(v3, v2);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(v1, v0);
  return swift_bridgeObjectRelease();
}

uint64_t static CertificateMessage.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static CertificateMessage.__derived_struct_equals(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, specialized static Array<A>.== infix(_:_:)) & 1;
}

void CertificateMessage.hashValue.getter(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1B0DB44A8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;

  if (BYTE6(v1) < v3)
  {
    __break(1u);
    JUMPOUT(0x1B0DB4554);
  }
  v4 = Data._Representation.subscript.getter();
  v6 = v5;
  Data.hash(into:)();
  outlined consume of Data._Representation(v4, v6);
  outlined consume of Data._Representation(v2, v1);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)&v8, v0);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hashValue.getter in conformance CertificateMessage()
{
  uint64_t *v0;

  CertificateMessage.hashValue.getter(*v0, v0[1]);
}

void protocol witness for Hashable.hash(into:) in conformance CertificateMessage(uint64_t a1)
{
  uint64_t *v1;

  CertificateMessage.hash(into:)(a1, *v1, v1[1]);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance CertificateMessage()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1B0DB45C4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;

  if (BYTE6(v1) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0DB4670);
  }
  v4 = Data._Representation.subscript.getter();
  v6 = v5;
  Data.hash(into:)();
  outlined consume of Data._Representation(v4, v6);
  outlined consume of Data._Representation(v3, v1);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)&v8, v0);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CertificateMessage(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance CertificateMessage(a1, a2, a3, a4, specialized static Array<A>.== infix(_:_:));
}

uint64_t CertificateMessage.CertificateEntry.extensions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

void CertificateMessage.CertificateEntry.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

void sub_1B0DB4704()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::UInt v7;
  __int128 *v8;
  _BYTE v9[120];

  if (BYTE6(v1) < v3)
  {
    __break(1u);
    JUMPOUT(0x1B0DB4804);
  }
  v4 = Data._Representation.subscript.getter();
  v6 = v5;
  Data.hash(into:)();
  outlined consume of Data._Representation(v4, v6);
  outlined consume of Data._Representation(v2, v1);
  v7 = *(_QWORD *)(v0 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    v8 = (__int128 *)(v0 + 32);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with take of Extension(v8, (uint64_t)v9);
      outlined release of Extension((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Extension);
      Extension.hash(into:)();
      outlined release of Extension((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Extension);
      v8 = (__int128 *)((char *)v8 + 40);
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
}

uint64_t static CertificateMessage.CertificateEntry.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static CertificateMessage.__derived_struct_equals(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, specialized static Array<A>.== infix(_:_:)) & 1;
}

uint64_t static CertificateMessage.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t))
{
  char v11;

  specialized static ByteBuffer.== infix(_:_:)(a1, a2);
  if ((v11 & 1) != 0)
    return a9(a4, a8);
  else
    return 0;
}

Swift::Int CertificateMessage.CertificateEntry.hashValue.getter(uint64_t a1, uint64_t a2)
{
  _BYTE v5[72];

  Hasher.init(_seed:)();
  CertificateMessage.CertificateEntry.hash(into:)((uint64_t)v5, a1, a2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CertificateMessage.CertificateEntry()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  CertificateMessage.CertificateEntry.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CertificateMessage.CertificateEntry(uint64_t a1)
{
  uint64_t *v1;

  CertificateMessage.CertificateEntry.hash(into:)(a1, *v1, v1[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CertificateMessage.CertificateEntry()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  CertificateMessage.CertificateEntry.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CertificateMessage.CertificateEntry(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance CertificateMessage(a1, a2, a3, a4, specialized static Array<A>.== infix(_:_:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CertificateMessage(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  char v7;

  v5 = a1[3];
  v6 = *(_QWORD *)(a2 + 24);
  specialized static ByteBuffer.== infix(_:_:)(*a1, a1[1]);
  if ((v7 & 1) != 0)
    return a5(v5, v6);
  else
    return 0;
}

uint64_t CertificateMessage.write(into:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  outlined copy of Data._Representation(a2, a3);
  swift_bridgeObjectRetain();
  specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(a1);
  v7 = v6;
  outlined consume of Data._Representation(a2, a3);
  swift_bridgeObjectRelease();
  outlined copy of Data._Representation(a2, a3);
  swift_bridgeObjectRetain();
  specialized ByteBuffer.writeVariableLengthVectorUInt24(_:)(a1);
  v9 = v8;
  outlined consume of Data._Representation(a2, a3);
  swift_bridgeObjectRelease();
  result = v7 + v9;
  if (__OFADD__(v7, v9))
    __break(1u);
  return result;
}

uint64_t closure #2 in CertificateMessage.write(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_QWORD *)(a5 + 16))
  {
    swift_bridgeObjectRetain();
    __asm { BR              X11 }
  }
  return 0;
}

void ByteBuffer.writeCertificateEntry(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  outlined copy of Data._Representation(a1, a2);
  swift_bridgeObjectRetain();
  specialized ByteBuffer.writeVariableLengthVectorUInt24(_:)(v2);
  outlined consume of Data._Representation(a1, a2);
  swift_bridgeObjectRelease();
  __asm { BR              X12 }
}

uint64_t sub_1B0DB5254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[5];
  __int128 v6[2];
  __int16 v7;
  _BYTE v8[262];

  v3 = BYTE6(v0);
  v7 = 0;
  v5[3] = MEMORY[0x1E0DEAC20];
  v5[4] = MEMORY[0x1E0CB1AA8];
  v5[0] = &v7;
  v5[1] = v8;
  __swift_project_boxed_opaque_existential_1(v5, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  if (*(_QWORD *)(v2 + 16))
  {
    swift_bridgeObjectRetain();
    outlined init with take of Extension((__int128 *)(v2 + 32), (uint64_t)v6);
    outlined init with take of Extension(v6, (uint64_t)&v7);
    __asm { BR              X9 }
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(0, v3);
  result = v1 + 2;
  if (__OFADD__(v1, 2))
    __break(1u);
  return result;
}

uint64_t *CertificateMessage.init(bytes:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *result;
  uint64_t v3;

  result = specialized CertificateMessage.init(bytes:)(a1);
  if (v1)
    return (uint64_t *)v3;
  return result;
}

_QWORD *readCertificateEntries #1 (_:) in CertificateMessage.init(bytes:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = ByteBuffer.readCertificateEntry()();
  if (v0)
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = v1;
    v8 = v2;
    v9 = v3;
    v10 = v4;
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (v10)
    {
      outlined copy of Data._Representation(v7, v8);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v12 = v5[2];
      v11 = v5[3];
      if (v12 >= v11 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v5);
      v5[2] = v12 + 1;
      v13 = &v5[4 * v12];
      v13[4] = v7;
      v13[5] = v8;
      v13[6] = v9;
      v13[7] = v10;
      outlined consume of CertificateMessage.CertificateEntry?(v7, v8, v9, v10);
      v7 = ByteBuffer.readCertificateEntry()();
      v8 = v14;
      v9 = v15;
      v10 = v16;
    }
  }
  return v5;
}

uint64_t ByteBuffer.readCertificateEntry()()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  outlined copy of Data._Representation(*v0, v1);
  specialized ByteBuffer.readInteger<A>(as:)();
  if ((v4 & 0x100) == 0)
  {
    v5 = v4;
    specialized ByteBuffer.readInteger<A>(as:)();
    if ((v6 & 0x10000) == 0)
    {
      ByteBuffer.readSlice(length:)((unsigned __int16)v6 | ((unint64_t)v5 << 16));
      if (v7 >> 60 != 15)
        __asm { BR              X10 }
    }
  }
  outlined consume of Data._Representation(*v0, v0[1]);
  *v0 = v2;
  v0[1] = v1;
  v0[2] = v3;
  return 0;
}

uint64_t sub_1B0DB5938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;

  if (__OFSUB__(BYTE6(v4), a3))
  {
    __break(1u);
    JUMPOUT(0x1B0DB5AD8);
  }
  ByteBuffer.readSlice(length:)(BYTE6(v4) - a3);
  if (v5 >> 60 == 15)
  {
    __break(1u);
    JUMPOUT(0x1B0DB5AE0);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_1B0DB5990 + *((int *)qword_1B0DB5AF0 + v3)))(a1);
}

uint64_t protocol witness for HandshakeMessageProtocol.write(into:) in conformance CertificateMessage(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *v1;
  v4 = v1[1];
  outlined copy of Data._Representation(*v1, v4);
  swift_bridgeObjectRetain();
  specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(a1);
  v6 = v5;
  outlined consume of Data._Representation(v3, v4);
  swift_bridgeObjectRelease();
  outlined copy of Data._Representation(v3, v4);
  swift_bridgeObjectRetain();
  specialized ByteBuffer.writeVariableLengthVectorUInt24(_:)(a1);
  v8 = v7;
  outlined consume of Data._Representation(v3, v4);
  swift_bridgeObjectRelease();
  result = v6 + v8;
  if (__OFADD__(v6, v8))
    __break(1u);
  return result;
}

uint64_t *protocol witness for HandshakeMessageProtocol.init(bytes:) in conformance CertificateMessage@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v2;
  uint64_t *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  result = specialized CertificateMessage.init(bytes:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

void readExtensions #1 (_:) in ByteBuffer.readCertificateEntry()(uint64_t a1)
{
  if (!__OFADD__(*(_QWORD *)(a1 + 16), 2))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1B0DB60A0);
}

uint64_t *specialized CertificateMessage.init(bytes:)(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  __int16 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  outlined copy of Data._Representation(*a1, v2);
  v5 = a1;
  specialized ByteBuffer.readInteger<A>(as:)();
  if ((v6 & 0x100) == 0)
  {
    v5 = a1;
    ByteBuffer.readSlice(length:)(v6);
    if (v7 >> 60 != 15)
      __asm { BR              X10 }
  }
  outlined consume of Data._Representation(*a1, a1[1]);
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  v8 = swift_allocError();
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  swift_willThrow(v8);
  return v5;
}

uint64_t sub_1B0DB6218()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if (__OFSUB__(BYTE6(v2), v1))
  {
    __break(1u);
    JUMPOUT(0x1B0DB63B0);
  }
  ByteBuffer.readSlice(length:)(BYTE6(v2) - v1);
  if (v4 >> 60 == 15)
  {
    __break(1u);
    JUMPOUT(0x1B0DB63B8);
  }
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)&loc_1B0DB6268 + *((int *)qword_1B0DB63C8 + v0)))(v3, v4);
}

unint64_t lazy protocol witness table accessor for type CertificateMessage and conformance CertificateMessage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CertificateMessage and conformance CertificateMessage;
  if (!lazy protocol witness table cache variable for type CertificateMessage and conformance CertificateMessage)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for CertificateMessage, &type metadata for CertificateMessage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CertificateMessage and conformance CertificateMessage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CertificateMessage.CertificateEntry and conformance CertificateMessage.CertificateEntry()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CertificateMessage.CertificateEntry and conformance CertificateMessage.CertificateEntry;
  if (!lazy protocol witness table cache variable for type CertificateMessage.CertificateEntry and conformance CertificateMessage.CertificateEntry)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for CertificateMessage.CertificateEntry, &type metadata for CertificateMessage.CertificateEntry);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CertificateMessage.CertificateEntry and conformance CertificateMessage.CertificateEntry);
  }
  return result;
}

ValueMetadata *type metadata accessor for CertificateMessage()
{
  return &type metadata for CertificateMessage;
}

uint64_t destroy for CertificateMessage(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for CertificateMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for CertificateMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *assignWithTake for CertificateMessage(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  v6 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CertificateMessage(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CertificateMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CertificateMessage.CertificateEntry()
{
  return &type metadata for CertificateMessage.CertificateEntry;
}

uint64_t outlined consume of CertificateMessage.CertificateEntry?(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    outlined consume of Data._Representation(result, a2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ByteBuffer.writeLengthPrefixedBytes<A>(_:)()
{
  unint64_t v0;
  uint64_t result;
  unint64_t v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v0 = dispatch thunk of Collection.count.getter();
  if ((v0 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v2 = bswap64(v0);
    v3[3] = MEMORY[0x1E0DEAC20];
    v3[4] = MEMORY[0x1E0CB1AA8];
    v3[0] = &v2;
    v3[1] = v3;
    __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0DEAC20]);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
    return ByteBuffer.writeBytes<A>(_:)();
  }
  return result;
}

void ByteBuffer.readLengthPrefixed<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v1);
  if (!__OFADD__(*(_QWORD *)(v0 + 16), 8))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0DB6A10);
}

uint64_t SessionTicket.issued.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t SessionTicket.issued.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t SessionTicket.lifetime.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for SessionTicket() + 20));
}

uint64_t SessionTicket.lifetime.setter(int a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SessionTicket();
  *(_DWORD *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*SessionTicket.lifetime.modify())()
{
  type metadata accessor for SessionTicket();
  return CertificateVerify.algorithm.getter;
}

uint64_t SessionTicket.ticketAgeAdd.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for SessionTicket() + 24));
}

uint64_t SessionTicket.ticketAgeAdd.setter(int a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SessionTicket();
  *(_DWORD *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*SessionTicket.ticketAgeAdd.modify())()
{
  type metadata accessor for SessionTicket();
  return CertificateVerify.algorithm.getter;
}

uint64_t SessionTicket.nonce.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for SessionTicket() + 28);
  v2 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t SessionTicket.nonce.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t result;

  v7 = (uint64_t *)(v3 + *(int *)(type metadata accessor for SessionTicket() + 28));
  result = outlined consume of Data._Representation(*v7, v7[1]);
  *v7 = a1;
  v7[1] = a2;
  v7[2] = a3;
  return result;
}

uint64_t (*SessionTicket.nonce.modify())()
{
  type metadata accessor for SessionTicket();
  return CertificateVerify.algorithm.getter;
}

uint64_t SessionTicket.ticket.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for SessionTicket() + 32);
  v2 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t SessionTicket.ticket.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t result;

  v7 = (uint64_t *)(v3 + *(int *)(type metadata accessor for SessionTicket() + 32));
  result = outlined consume of Data._Representation(*v7, v7[1]);
  *v7 = a1;
  v7[1] = a2;
  v7[2] = a3;
  return result;
}

uint64_t (*SessionTicket.ticket.modify())()
{
  type metadata accessor for SessionTicket();
  return CertificateVerify.algorithm.getter;
}

uint64_t SessionTicket.psk.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SessionTicket() + 36);
  v4 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SessionTicket.psk.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SessionTicket() + 36);
  v4 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SessionTicket.psk.modify())()
{
  type metadata accessor for SessionTicket();
  return CertificateVerify.algorithm.getter;
}

uint64_t SessionTicket.maxEarlyDataSize.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for SessionTicket() + 40));
}

uint64_t SessionTicket.maxEarlyDataSize.setter(int a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SessionTicket();
  *(_DWORD *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*SessionTicket.maxEarlyDataSize.modify())()
{
  type metadata accessor for SessionTicket();
  return CertificateVerify.algorithm.getter;
}

uint64_t SessionTicket.cipherSuite.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for SessionTicket() + 44));
}

uint64_t SessionTicket.cipherSuite.setter(__int16 a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SessionTicket();
  *(_WORD *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*SessionTicket.cipherSuite.modify())()
{
  type metadata accessor for SessionTicket();
  return CertificateVerify.algorithm.getter;
}

uint64_t SessionTicket.group.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for SessionTicket() + 48));
}

uint64_t SessionTicket.group.setter(__int16 a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SessionTicket();
  *(_WORD *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*SessionTicket.group.modify())()
{
  type metadata accessor for SessionTicket();
  return CertificateVerify.algorithm.getter;
}

uint64_t SessionTicket.alpn.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for SessionTicket() + 52);
  v2 = *(_QWORD *)v1;
  outlined copy of ByteBuffer?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t SessionTicket.alpn.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t result;

  v7 = (uint64_t *)(v3 + *(int *)(type metadata accessor for SessionTicket() + 52));
  result = outlined consume of ByteBuffer?(*v7, v7[1]);
  *v7 = a1;
  v7[1] = a2;
  v7[2] = a3;
  return result;
}

uint64_t (*SessionTicket.alpn.modify())()
{
  type metadata accessor for SessionTicket();
  return CertificateVerify.algorithm.getter;
}

uint64_t SessionTicket.certificateBundle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SessionTicket();
  return outlined init with copy of PartialHandshakeResult(v1 + *(int *)(v3 + 56), a1, type metadata accessor for PeerCertificateBundle);
}

uint64_t SessionTicket.certificateBundle.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SessionTicket() + 56);
  return outlined assign with take of PeerCertificateBundle(a1, v3);
}

uint64_t (*SessionTicket.certificateBundle.modify())()
{
  type metadata accessor for SessionTicket();
  return CertificateVerify.algorithm.getter;
}

uint64_t SessionTicket.init(message:psk:cipherSuite:group:alpn:certificateBundle:currentTime:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, __int16 a4@<W3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v13 = type metadata accessor for Date();
  v26 = *(_QWORD *)(v13 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(a9, a10, v13);
  if (*(_DWORD *)a1 >= 0x93A80u)
    v14 = 604800;
  else
    v14 = *(_DWORD *)a1;
  v15 = (int *)type metadata accessor for SessionTicket();
  v16 = (uint64_t *)(a9 + v15[13]);
  *(_DWORD *)(a9 + v15[5]) = v14;
  *(_DWORD *)(a9 + v15[6]) = *(_DWORD *)(a1 + 4);
  v37 = *(_QWORD *)(a1 + 48);
  v17 = v37;
  v36 = *(_OWORD *)(a1 + 32);
  v18 = a9 + v15[8];
  *(_OWORD *)v18 = v36;
  *(_QWORD *)(v18 + 16) = v17;
  v19 = *(_OWORD *)(a1 + 8);
  v35 = *(_QWORD *)(a1 + 24);
  v34 = v19;
  v20 = a9 + v15[7];
  *(_OWORD *)v20 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 + 24);
  v21 = a9 + v15[9];
  v22 = type metadata accessor for SymmetricKey();
  v23 = *(_QWORD *)(v22 - 8);
  v27 = a2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v21, a2, v22);
  *(_WORD *)(a9 + v15[11]) = a3;
  *(_WORD *)(a9 + v15[12]) = a4;
  *v16 = a5;
  v16[1] = a6;
  v16[2] = a7;
  outlined init with copy of PartialHandshakeResult(a8, a9 + v15[14], type metadata accessor for PeerCertificateBundle);
  v24 = *(_QWORD *)(a1 + 56);
  v38 = v24;
  if (*(_QWORD *)(v24 + 16))
  {
    outlined retain of Extension.QUICTransportParameters((uint64_t)&v36);
    outlined retain of Extension.QUICTransportParameters((uint64_t)&v34);
    outlined copy of ByteBuffer?(a5, a6);
    outlined retain of [Extension]((uint64_t)&v38);
    __asm { BR              X8 }
  }
  outlined retain of Extension.QUICTransportParameters((uint64_t)&v36);
  outlined retain of Extension.QUICTransportParameters((uint64_t)&v34);
  outlined retain of [Extension]((uint64_t)&v38);
  outlined release of NewSessionTicket((_QWORD *)a1);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(a10, v13);
  outlined destroy of PartialHandshakeResult(a8, type metadata accessor for PeerCertificateBundle);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v27, v22);
  outlined release of [Extension]((uint64_t)&v38);
  result = swift_bridgeObjectRelease();
  *(_DWORD *)(a9 + v15[10]) = 0;
  return result;
}

void ByteBuffer.writeLengthPrefixedImmutableBuffer(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1B0DB7C5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[12];

  v3 = BYTE6(v1) - v0;
  if (__OFSUB__(BYTE6(v1), v0))
    __break(1u);
  if ((v3 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1B0DB7D4CLL);
  }
  v4 = bswap64(v3);
  v5[3] = MEMORY[0x1E0DEAC20];
  v5[4] = MEMORY[0x1E0CB1AA8];
  v5[0] = &v4;
  v5[1] = v5;
  __swift_project_boxed_opaque_existential_1(v5, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  ByteBuffer.writeImmutableBuffer(_:)(v2, v1);
}

uint64_t ByteBuffer.writeOptional<A>(_:_:)(uint64_t a1, void (*a2)(uint64_t, _BYTE *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE v17[15];
  char v18;
  char *v19;
  char **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = &v17[-v11];
  v13 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v10);
  v15 = &v17[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a4) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v12, v8);
    v18 = 0;
    v21 = MEMORY[0x1E0DEAC20];
    v22 = MEMORY[0x1E0CB1AA8];
    v19 = &v18;
    v20 = &v19;
    __swift_project_boxed_opaque_existential_1(&v19, MEMORY[0x1E0DEAC20]);
    Data._Representation.append(contentsOf:)();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 32))(v15, v12, a4);
    v18 = -1;
    v21 = MEMORY[0x1E0DEAC20];
    v22 = MEMORY[0x1E0CB1AA8];
    v19 = &v18;
    v20 = &v19;
    __swift_project_boxed_opaque_existential_1(&v19, MEMORY[0x1E0DEAC20]);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
    a2(v4, v15);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v15, a4);
  }
}

void ByteBuffer.readOptional<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for Optional();
  v2 = MEMORY[0x1E0C80A78](v1);
  MEMORY[0x1E0C80A78](v2);
  if (!__OFADD__(*(_QWORD *)(v0 + 16), 1))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0DB8218);
}

uint64_t SessionTicket.obfuscatedTicketAge(currentTime:)()
{
  uint64_t v0;
  uint64_t result;
  double v2;
  double v3;

  result = Date.timeIntervalSince(_:)();
  v3 = v2 * 1000.0;
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v3 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v3 < 4294967300.0)
    return *(_DWORD *)(v0 + *(int *)(type metadata accessor for SessionTicket() + 24)) + v3;
LABEL_7:
  __break(1u);
  return result;
}

Swift::Void __swiftcall ByteBuffer.writeLengthPrefixedString(_:)(Swift::String a1)
{
  void *object;
  uint64_t countAndFlagsBits;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  swift_bridgeObjectRetain();
  specialized ByteBuffer.writeLengthPrefixedBytes<A>(_:)(countAndFlagsBits, (unint64_t)object);
  swift_bridgeObjectRelease();
}

Swift::String_optional __swiftcall ByteBuffer.readLengthPrefixedString()()
{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 16), 8))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0DB8724);
}

uint64_t specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t result;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = (v5 == a1) & a3;
  if (v6 == 1)
    return v6 ^ 1u;
  if (v5 <= a1)
  {
    v8 = Data._Representation.subscript.getter();
    v10 = v9;
    v11 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a4 + 16) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      *(_QWORD *)(a4 + 16) = v11;
    }
    v14 = v11[2];
    v13 = v11[3];
    if (v14 >= v13 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v11);
    v11[2] = v14 + 1;
    v15 = &v11[2 * v14];
    v15[4] = v8;
    v15[5] = v10;
    *(_QWORD *)(a4 + 16) = v11;
    return v6 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of ByteBuffer??(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 11)
    return outlined consume of ByteBuffer?(a1, a2);
  return a1;
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ExtensionType>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_WORD *)(*(_QWORD *)(v4 + 48) + 2 * v15) = *(_WORD *)(*(_QWORD *)(v2 + 48) + 2 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  outlined consume of Data._Representation(a1, a2);
  v4 = static String._fromUTF8Repairing(_:)();
  swift_release();
  return v4;
}

uint64_t closure #2 in String.init<A, B>(decoding:as:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFSSSg_Tg5015_s10Foundation4b17V32withContiguousC50IfAvailableyxSgxSRys5UInt8VGKXEKlFAESWKXEfU_SS_TG5SRys0Q0VGxs5Error_pRi_zRi0_zlySSIsgyrzo_Tf1ncn_n(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = __DataStorage._bytes.getter();
  v9 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = v9 + v13;
  if (v9)
    v15 = v14;
  else
    v15 = 0;
  result = (uint64_t)_sSW17withMemoryRebound2to_q0_xm_q0_SRyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_sAD_pSSTgm507_sSRys5f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSS_TG5SRyAFGSSsAD_pIgyrzo_Tf1cn_n(v9, v15, a4);
  if (v4)
    return v16;
  return result;
}

_QWORD *_sSW17withMemoryRebound2to_q0_xm_q0_SRyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_sAD_pSSTgm507_sSRys5f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSS_TG5SRyAFGSSsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a1)
    v4 = a2 - a1;
  else
    v4 = 0;
  result = a3(&v6, a1, v4);
  if (!v3)
    return (_QWORD *)v6;
  return result;
}

uint64_t outlined assign with take of PeerCertificateBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PeerCertificateBundle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t specialized closure #1 in String.init<A, B>(decoding:as:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t specialized static SessionTicket.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  int *v4;
  int *v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;

  if ((static Date.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for SessionTicket();
  if (*(_DWORD *)(a1 + v4[5]) != *(_DWORD *)(a2 + v4[5]))
    return 0;
  v5 = v4;
  if (*(_DWORD *)(a1 + v4[6]) != *(_DWORD *)(a2 + v4[6]))
    return 0;
  specialized static ByteBuffer.== infix(_:_:)(*(_QWORD *)(a1 + v4[7]), *(_QWORD *)(a1 + v4[7] + 8));
  if ((v6 & 1) == 0)
    return 0;
  specialized static ByteBuffer.== infix(_:_:)(*(_QWORD *)(a1 + v5[8]), *(_QWORD *)(a1 + v5[8] + 8));
  if ((v7 & 1) == 0
    || (static SymmetricKey.== infix(_:_:)() & 1) == 0
    || *(_DWORD *)(a1 + v5[10]) != *(_DWORD *)(a2 + v5[10])
    || *(unsigned __int16 *)(a1 + v5[11]) != *(unsigned __int16 *)(a2 + v5[11])
    || *(unsigned __int16 *)(a1 + v5[12]) != *(unsigned __int16 *)(a2 + v5[12]))
  {
    return 0;
  }
  v8 = v5[13];
  v9 = *(_QWORD *)(a1 + v8);
  v10 = *(_QWORD *)(a1 + v8 + 8);
  v11 = (uint64_t *)(a2 + v8);
  v12 = *v11;
  v13 = v11[1];
  if (v10 >> 60 == 15)
  {
    if (v13 >> 60 == 15)
      return specialized static PeerCertificateBundle.__derived_struct_equals(_:_:)(a1 + v5[14], a2 + v5[14]);
    goto LABEL_14;
  }
  if (v13 >> 60 == 15)
  {
LABEL_14:
    outlined copy of ByteBuffer?(v9, v10);
    outlined copy of ByteBuffer?(v12, v13);
    outlined consume of ByteBuffer?(v9, v10);
    outlined consume of ByteBuffer?(v12, v13);
    return 0;
  }
  outlined copy of ByteBuffer?(v9, v10);
  outlined copy of ByteBuffer?(v12, v13);
  specialized static ByteBuffer.== infix(_:_:)(v9, v10);
  v15 = v14;
  outlined consume of ByteBuffer?(v12, v13);
  outlined consume of ByteBuffer?(v9, v10);
  if ((v15 & 1) != 0)
    return specialized static PeerCertificateBundle.__derived_struct_equals(_:_:)(a1 + v5[14], a2 + v5[14]);
  return 0;
}

uint64_t *initializeBufferWithCopyOfBuffer for SessionTicket(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(_DWORD *)((char *)a1 + a3[5]) = *(_DWORD *)((char *)a2 + a3[5]);
    *(_DWORD *)((char *)a1 + v8) = *(_DWORD *)((char *)a2 + v8);
    v9 = a3[7];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (char *)a2 + v9;
    v12 = *(uint64_t *)((char *)a2 + v9);
    v13 = *(uint64_t *)((char *)a2 + v9 + 8);
    outlined copy of Data._Representation(v12, v13);
    *v10 = v12;
    v10[1] = v13;
    v10[2] = *((_QWORD *)v11 + 2);
    v14 = a3[8];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (char *)a2 + v14;
    v17 = *(uint64_t *)((char *)a2 + v14);
    v18 = *(uint64_t *)((char *)a2 + v14 + 8);
    outlined copy of Data._Representation(v17, v18);
    *v15 = v17;
    v15[1] = v18;
    v15[2] = *((_QWORD *)v16 + 2);
    v19 = a3[9];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    v23 = a3[11];
    *(_DWORD *)((char *)a1 + a3[10]) = *(_DWORD *)((char *)a2 + a3[10]);
    *(_WORD *)((char *)a1 + v23) = *(_WORD *)((char *)a2 + v23);
    v24 = a3[13];
    *(_WORD *)((char *)a1 + a3[12]) = *(_WORD *)((char *)a2 + a3[12]);
    v25 = (char *)a1 + v24;
    v26 = (uint64_t *)((char *)a2 + v24);
    v27 = *(uint64_t *)((char *)a2 + v24 + 8);
    if (v27 >> 60 == 15)
    {
      *(_OWORD *)v25 = *(_OWORD *)v26;
    }
    else
    {
      v29 = *v26;
      outlined copy of Data._Representation(*v26, *(uint64_t *)((char *)a2 + v24 + 8));
      *(_QWORD *)v25 = v29;
      *((_QWORD *)v25 + 1) = v27;
    }
    *((_QWORD *)v25 + 2) = v26[2];
    v30 = a3[14];
    v31 = (char *)a1 + v30;
    v32 = (char *)a2 + v30;
    v33 = type metadata accessor for P256.Signing.PublicKey();
    v34 = *(_QWORD *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      v35 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
  }
  return a1;
}

uint64_t assignWithCopy for SessionTicket(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void *, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  *(_DWORD *)(a1 + a3[6]) = *(_DWORD *)(a2 + a3[6]);
  v7 = a3[7];
  v8 = (uint64_t *)(a1 + v7);
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7);
  v11 = *(_QWORD *)(a2 + v7 + 8);
  outlined copy of Data._Representation(v10, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  outlined consume of Data._Representation(v12, v13);
  v8[2] = *(_QWORD *)(v9 + 16);
  v14 = a3[8];
  v15 = (uint64_t *)(a1 + v14);
  v16 = a2 + v14;
  v17 = *(_QWORD *)(a2 + v14);
  v18 = *(_QWORD *)(a2 + v14 + 8);
  outlined copy of Data._Representation(v17, v18);
  v19 = *v15;
  v20 = v15[1];
  *v15 = v17;
  v15[1] = v18;
  outlined consume of Data._Representation(v19, v20);
  v15[2] = *(_QWORD *)(v16 + 16);
  v21 = a3[9];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  *(_WORD *)(a1 + a3[11]) = *(_WORD *)(a2 + a3[11]);
  *(_WORD *)(a1 + a3[12]) = *(_WORD *)(a2 + a3[12]);
  v25 = a3[13];
  v26 = a1 + v25;
  v27 = (uint64_t *)(a2 + v25);
  v28 = *(_QWORD *)(a2 + v25 + 8);
  if (*(_QWORD *)(a1 + v25 + 8) >> 60 == 15)
  {
    if (v28 >> 60 == 15)
    {
      v29 = *(_OWORD *)v27;
      *(_QWORD *)(v26 + 16) = v27[2];
      *(_OWORD *)v26 = v29;
      goto LABEL_10;
    }
    v31 = *v27;
    outlined copy of Data._Representation(*v27, v28);
    *(_QWORD *)v26 = v31;
    *(_QWORD *)(v26 + 8) = v28;
    goto LABEL_8;
  }
  if (v28 >> 60 != 15)
  {
    v32 = *v27;
    outlined copy of Data._Representation(*v27, v28);
    v33 = *(_QWORD *)v26;
    v34 = *(_QWORD *)(v26 + 8);
    *(_QWORD *)v26 = v32;
    *(_QWORD *)(v26 + 8) = v28;
    outlined consume of Data._Representation(v33, v34);
LABEL_8:
    v30 = v27[2];
    goto LABEL_9;
  }
  outlined destroy of ByteBuffer(v26);
  v30 = v27[2];
  *(_OWORD *)v26 = *(_OWORD *)v27;
LABEL_9:
  *(_QWORD *)(v26 + 16) = v30;
LABEL_10:
  v35 = a3[14];
  v36 = (void *)(a1 + v35);
  v37 = (void *)(a2 + v35);
  v38 = type metadata accessor for P256.Signing.PublicKey();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v39 + 48);
  v41 = v40(v36, 1, v38);
  v42 = v40(v37, 1, v38);
  if (!v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, void *, uint64_t))(v39 + 24))(v36, v37, v38);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v39 + 8))(v36, v38);
    goto LABEL_15;
  }
  if (v42)
  {
LABEL_15:
    v43 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v39 + 16))(v36, v37, v38);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  return a1;
}

uint64_t initializeWithTake for SessionTicket(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  *(_DWORD *)(a1 + v7) = *(_DWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a3[8];
  v10 = a1 + v8;
  v11 = (__int128 *)(a2 + v8);
  v12 = *v11;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)v11 + 2);
  *(_OWORD *)v10 = v12;
  v13 = a1 + v9;
  v14 = a2 + v9;
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  v15 = a3[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[11];
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  *(_WORD *)(a1 + v19) = *(_WORD *)(a2 + v19);
  v20 = a3[13];
  *(_WORD *)(a1 + a3[12]) = *(_WORD *)(a2 + a3[12]);
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_QWORD *)(v21 + 16) = *(_QWORD *)(v22 + 16);
  v23 = a3[14];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  v26 = type metadata accessor for P256.Signing.PublicKey();
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

uint64_t assignWithTake for SessionTicket(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void *, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  *(_DWORD *)(a1 + v7) = *(_DWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_QWORD *)(a1 + v8);
  v12 = *(_QWORD *)(a1 + v8 + 8);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  outlined consume of Data._Representation(v11, v12);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  v13 = a3[8];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = *(_QWORD *)(a1 + v13);
  v17 = *(_QWORD *)(a1 + v13 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  outlined consume of Data._Representation(v16, v17);
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
  v18 = a3[9];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  v22 = a3[11];
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  *(_WORD *)(a1 + v22) = *(_WORD *)(a2 + v22);
  v23 = a3[13];
  *(_WORD *)(a1 + a3[12]) = *(_WORD *)(a2 + a3[12]);
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(_QWORD *)(a1 + v23 + 8);
  if (v26 >> 60 == 15)
    goto LABEL_4;
  v27 = *(_QWORD *)(v25 + 8);
  if (v27 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(v24);
LABEL_4:
    *(_OWORD *)v24 = *(_OWORD *)v25;
    goto LABEL_6;
  }
  v28 = *(_QWORD *)v24;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_QWORD *)(v24 + 8) = v27;
  outlined consume of Data._Representation(v28, v26);
LABEL_6:
  *(_QWORD *)(v24 + 16) = *(_QWORD *)(v25 + 16);
  v29 = a3[14];
  v30 = (void *)(a1 + v29);
  v31 = (void *)(a2 + v29);
  v32 = type metadata accessor for P256.Signing.PublicKey();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v33 + 48);
  v35 = v34(v30, 1, v32);
  v36 = v34(v31, 1, v32);
  if (!v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v33 + 40))(v30, v31, v32);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v33 + 8))(v30, v32);
    goto LABEL_11;
  }
  if (v36)
  {
LABEL_11:
    v37 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v33 + 32))(v30, v31, v32);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  return a1;
}

uint64_t sub_1B0DB96F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 12)
  {
    v9 = *(_QWORD *)(a1 + a3[7] + 8) >> 60;
    if (((4 * (_DWORD)v9) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for SymmetricKey();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = a3[9];
    }
    else
    {
      v12 = type metadata accessor for PeerCertificateBundle(0);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = a3[14];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t sub_1B0DB97CC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = type metadata accessor for Date();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 12)
    {
      v13 = (_QWORD *)(a1 + a4[7]);
      *v13 = 0;
      v13[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
      return result;
    }
    v14 = type metadata accessor for SymmetricKey();
    v15 = *(_QWORD *)(v14 - 8);
    if (*(_DWORD *)(v15 + 84) == a3)
    {
      v10 = v14;
      v16 = a4[9];
    }
    else
    {
      v10 = type metadata accessor for PeerCertificateBundle(0);
      v15 = *(_QWORD *)(v10 - 8);
      v16 = a4[14];
    }
    v12 = a1 + v16;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1B0DB98A0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B0DB98C4()
{
  return swift_deallocObject();
}

void CertificateRequest.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

void sub_1B0DB9924()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::UInt v7;
  __int128 *v8;
  _BYTE v9[120];

  if (BYTE6(v1) < v3)
  {
    __break(1u);
    JUMPOUT(0x1B0DB9A24);
  }
  v4 = Data._Representation.subscript.getter();
  v6 = v5;
  Data.hash(into:)();
  outlined consume of Data._Representation(v4, v6);
  outlined consume of Data._Representation(v2, v1);
  v7 = *(_QWORD *)(v0 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    v8 = (__int128 *)(v0 + 32);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with take of Extension(v8, (uint64_t)v9);
      outlined release of Extension((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Extension);
      Extension.hash(into:)();
      outlined release of Extension((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Extension);
      v8 = (__int128 *)((char *)v8 + 40);
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
}

uint64_t static CertificateRequest.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;

  specialized static ByteBuffer.== infix(_:_:)(a1, a2);
  if ((v10 & 1) != 0)
    return specialized static Array<A>.== infix(_:_:)(a4, a8);
  else
    return 0;
}

Swift::Int CertificateRequest.hashValue.getter(uint64_t a1, uint64_t a2)
{
  _BYTE v5[72];

  Hasher.init(_seed:)();
  CertificateRequest.hash(into:)((uint64_t)v5, a1, a2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CertificateRequest()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  CertificateRequest.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CertificateRequest(uint64_t a1)
{
  uint64_t *v1;

  CertificateRequest.hash(into:)(a1, *v1, v1[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CertificateRequest()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  CertificateRequest.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CertificateRequest(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = a1[3];
  v3 = *(_QWORD *)(a2 + 24);
  specialized static ByteBuffer.== infix(_:_:)(*a1, a1[1]);
  if ((v4 & 1) != 0)
    return specialized static Array<A>.== infix(_:_:)(v2, v3);
  else
    return 0;
}

void CertificateRequest.write(into:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  outlined copy of Data._Representation(a2, a3);
  swift_bridgeObjectRetain();
  specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(a1);
  outlined consume of Data._Representation(a2, a3);
  swift_bridgeObjectRelease();
  __asm { BR              X12 }
}

uint64_t sub_1B0DB9CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[5];
  __int128 v6[2];
  __int16 v7;
  _BYTE v8[262];

  v3 = BYTE6(v0);
  v7 = 0;
  v5[3] = MEMORY[0x1E0DEAC20];
  v5[4] = MEMORY[0x1E0CB1AA8];
  v5[0] = &v7;
  v5[1] = v8;
  __swift_project_boxed_opaque_existential_1(v5, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  if (*(_QWORD *)(v2 + 16))
  {
    swift_bridgeObjectRetain();
    outlined init with take of Extension((__int128 *)(v2 + 32), (uint64_t)v6);
    outlined init with take of Extension(v6, (uint64_t)&v7);
    __asm { BR              X9 }
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(0, v3);
  result = v1 + 2;
  if (__OFADD__(v1, 2))
    __break(1u);
  return result;
}

uint64_t CertificateRequest.init(bytes:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = specialized CertificateRequest.init(bytes:)(a1);
  if (v1)
    return v3;
  return result;
}

void readExtensions #1 (_:) in CertificateRequest.init(bytes:)(uint64_t a1)
{
  if (!__OFADD__(*(_QWORD *)(a1 + 16), 2))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1B0DBA604);
}

void protocol witness for HandshakeMessageProtocol.write(into:) in conformance CertificateRequest(uint64_t a1)
{
  uint64_t v1;

  CertificateRequest.write(into:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

uint64_t protocol witness for HandshakeMessageProtocol.init(bytes:) in conformance CertificateRequest@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = specialized CertificateRequest.init(bytes:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t specialized CertificateRequest.init(bytes:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v5 = *a1;
  v4 = a1[1];
  v6 = a1[2];
  outlined copy of Data._Representation(*a1, v4);
  specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)((uint64_t)a1);
  if (v1)
  {
    v7 = outlined consume of Data._Representation(*a1, a1[1]);
    *a1 = v5;
    a1[1] = v4;
    a1[2] = v6;
  }
  else
  {
    if (v12 >> 60 == 15)
    {
      outlined consume of Data._Representation(*a1, a1[1]);
    }
    else
    {
      v2 = v11;
      outlined consume of Data._Representation(v5, v4);
      v5 = *a1;
      v4 = a1[1];
      v6 = a1[2];
      outlined copy of Data._Representation(*a1, v4);
      specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)((uint64_t)a1);
      if (v10)
      {
        outlined consume of Data._Representation(v5, v4);
        return v2;
      }
      outlined consume of Data._Representation(*a1, a1[1]);
      outlined consume of ByteBuffer?(v11, v12);
    }
    *a1 = v5;
    a1[1] = v4;
    a1[2] = v6;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v7 = swift_allocError();
    *(_DWORD *)v8 = 0;
    *(_BYTE *)(v8 + 4) = 1;
  }
  swift_willThrow(v7);
  return v2;
}

unint64_t lazy protocol witness table accessor for type CertificateRequest and conformance CertificateRequest()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CertificateRequest and conformance CertificateRequest;
  if (!lazy protocol witness table cache variable for type CertificateRequest and conformance CertificateRequest)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for CertificateRequest, &type metadata for CertificateRequest);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CertificateRequest and conformance CertificateRequest);
  }
  return result;
}

ValueMetadata *type metadata accessor for CertificateRequest()
{
  return &type metadata for CertificateRequest;
}

void ByteBuffer.readSignatureScheme()()
{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 16), 2))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0DBA9D4);
}

void *SignatureScheme.ecdsa_secp256r1_sha256.unsafeMutableAddressor()
{
  return &static SignatureScheme.ecdsa_secp256r1_sha256;
}

void *SignatureScheme.ecdsa_secp384r1_sha384.unsafeMutableAddressor()
{
  return &static SignatureScheme.ecdsa_secp384r1_sha384;
}

uint64_t static SignatureScheme.ecdsa_secp384r1_sha384.getter()
{
  return 1283;
}

void *SignatureScheme.rsa_pss_rsae_sha256.unsafeMutableAddressor()
{
  return &static SignatureScheme.rsa_pss_rsae_sha256;
}

uint64_t static SignatureScheme.rsa_pss_rsae_sha256.getter()
{
  return 2052;
}

unint64_t SignatureScheme.description.getter(__int16 a1)
{
  unint64_t v1;
  Swift::String v2;
  Swift::String v3;

  v1 = 0xD000000000000017;
  if (a1 != 1027)
  {
    if (a1 == 2052)
    {
      return 0xD000000000000014;
    }
    else if (a1 != 1283)
    {
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v2);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits = 41;
      v3._object = (void *)0xE100000000000000;
      String.append(_:)(v3);
      return 0xD00000000000001ALL;
    }
  }
  return v1;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance SignatureScheme()
{
  __int16 *v0;

  return SignatureScheme.description.getter(*v0);
}

unint64_t lazy protocol witness table accessor for type SignatureScheme and conformance SignatureScheme()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SignatureScheme and conformance SignatureScheme;
  if (!lazy protocol witness table cache variable for type SignatureScheme and conformance SignatureScheme)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for SignatureScheme, &type metadata for SignatureScheme);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SignatureScheme and conformance SignatureScheme);
  }
  return result;
}

uint64_t static Extension.EarlyData.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x100000000) != 0)
  {
    if ((a2 & 0x100000000) != 0)
      return 1;
  }
  else if ((a2 & 0x100000000) == 0 && (_DWORD)a1 == (_DWORD)a2)
  {
    return 1;
  }
  return 0;
}

uint64_t ByteBuffer.writeEarlyDataExtension(_:)(uint64_t a1)
{
  unsigned int v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  if ((a1 & 0x100000000) != 0)
    return 0;
  v2 = bswap32(a1);
  v3[3] = MEMORY[0x1E0DEAC20];
  v3[4] = MEMORY[0x1E0CB1AA8];
  v3[0] = &v2;
  v3[1] = v3;
  __swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  return 4;
}

uint64_t Extension.EarlyData.maxEarlyDataSize.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)v1 = result;
  *(_BYTE *)(v1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t Extension.EarlyData.init(maxEarlyDataSize:)(unint64_t a1)
{
  return a1 | ((HIDWORD(a1) & 1) << 32);
}

void Extension.EarlyData.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt32 v2;

  if ((a2 & 0x100000000) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = a2;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
}

Swift::Int Extension.EarlyData.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  if ((a1 & 0x100000000) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Extension.EarlyData()
{
  uint64_t v0;
  Swift::UInt32 v1;
  int v2;

  v1 = *(_DWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 4);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Extension.EarlyData()
{
  uint64_t v0;
  Swift::UInt32 v1;

  if (*(_BYTE *)(v0 + 4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v1 = *(_DWORD *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.EarlyData()
{
  uint64_t v0;
  Swift::UInt32 v1;
  int v2;

  v1 = *(_DWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 4);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Extension.EarlyData(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = *(_BYTE *)(a2 + 4);
  if ((*(_BYTE *)(a1 + 4) & 1) != 0)
  {
    if (*(_BYTE *)(a2 + 4))
      return 1;
  }
  else
  {
    if (*(_DWORD *)a1 != *(_DWORD *)a2)
      v2 = 1;
    if ((v2 & 1) == 0)
      return 1;
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type Extension.EarlyData and conformance Extension.EarlyData()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Extension.EarlyData and conformance Extension.EarlyData;
  if (!lazy protocol witness table cache variable for type Extension.EarlyData and conformance Extension.EarlyData)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Extension.EarlyData, &type metadata for Extension.EarlyData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.EarlyData and conformance Extension.EarlyData);
  }
  return result;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for Extension.EarlyData()
{
  return &type metadata for Extension.EarlyData;
}

void ByteBuffer.writeHandshakeMessage<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;
  char v5;
  _QWORD v6[6];

  v6[5] = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  v6[3] = MEMORY[0x1E0DEAC20];
  v6[4] = MEMORY[0x1E0CB1AA8];
  v6[0] = &v4;
  v6[1] = &v5;
  __swift_project_boxed_opaque_existential_1(v6, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  __asm { BR              X12 }
}

uint64_t sub_1B0DBAFCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v11;
  __int16 *v12;
  __int16 **v13;
  uint64_t v14;
  uint64_t v15;

  v6 = BYTE6(v0);
  LOBYTE(v11) = 0;
  v14 = v4;
  v15 = v5;
  v12 = &v11;
  v13 = (__int16 **)((char *)&v11 + 1);
  __swift_project_boxed_opaque_existential_1(&v12, v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  v11 = 0;
  v14 = v4;
  v15 = v5;
  v12 = &v11;
  v13 = &v12;
  __swift_project_boxed_opaque_existential_1(&v12, v4);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v3, v2);
  if (v7 > 0xFFFFFF)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v8 = v7;
  specialized ByteBuffer.setInteger<A>(_:at:as:)((unint64_t)v7 >> 16, v6);
  if (__OFADD__(v6, v9))
    goto LABEL_5;
  specialized ByteBuffer.setInteger<A>(_:at:as:)(v8, v6 + v9);
  return v8 + 4;
}

void ByteBuffer.readNamedGroup()()
{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 16), 2))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x1B0DBB230);
}

void *NamedGroup.x25519.unsafeMutableAddressor()
{
  return &static NamedGroup.x25519;
}

void *NamedGroup.secp384.unsafeMutableAddressor()
{
  return &static NamedGroup.secp384;
}

void *NamedGroup.secp256.unsafeMutableAddressor()
{
  return &static NamedGroup.secp256;
}

uint64_t static NamedGroup.secp256.getter()
{
  return 23;
}

uint64_t NamedGroup.description.getter(__int16 a1)
{
  Swift::String v2;
  Swift::String v3;

  switch(a1)
  {
    case 23:
      return 0x363532706365732ELL;
    case 29:
      return 0x3931353532782ELL;
    case 24:
      return 0x343833706365732ELL;
  }
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD000000000000015;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NamedGroup()
{
  __int16 *v0;

  return NamedGroup.description.getter(*v0);
}

unint64_t lazy protocol witness table accessor for type NamedGroup and conformance NamedGroup()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NamedGroup and conformance NamedGroup;
  if (!lazy protocol witness table cache variable for type NamedGroup and conformance NamedGroup)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for NamedGroup, &type metadata for NamedGroup);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NamedGroup and conformance NamedGroup);
  }
  return result;
}

void HandshakeMessage.logDescription.getter()
{
  __int128 *v0;
  _BYTE v1[112];

  outlined init with take of HandshakeMessage(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1B0DBB41C()
{
  return 0x6548726576726573;
}

void HandshakeMessage.hash(into:)()
{
  __int128 *v0;
  uint64_t v1;
  _BYTE v2[272];

  outlined init with take of HandshakeMessage(v0, (uint64_t)&v1);
  outlined init with take of HandshakeMessage(v0, (uint64_t)v2);
  __asm { BR              X10 }
}

void sub_1B0DBB550(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27,__int128 a28,uint64_t a29,uint64_t a30,__int128 a31,__int128 a32,__int128 a33,__int128 a34,Swift::UInt a35,uint64_t a36,Swift::UInt16 a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  Hasher._combine(_:)(0);
  ClientHello.hash(into:)();
}

Swift::Int HandshakeMessage.hashValue.getter()
{
  Hasher.init(_seed:)();
  HandshakeMessage.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance HandshakeMessage()
{
  __int128 *v0;
  _BYTE v2[112];

  outlined init with take of HandshakeMessage(v0, (uint64_t)v2);
  Hasher.init(_seed:)();
  HandshakeMessage.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance HandshakeMessage()
{
  __int128 *v0;
  uint64_t v1;

  outlined init with take of HandshakeMessage(v0, (uint64_t)&v1);
  HandshakeMessage.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HandshakeMessage()
{
  __int128 *v0;
  _BYTE v2[112];

  outlined init with take of HandshakeMessage(v0, (uint64_t)v2);
  Hasher.init(_seed:)();
  HandshakeMessage.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HandshakeMessage(__int128 *a1, __int128 *a2)
{
  char v3;
  __int128 v5[7];
  _BYTE v6[112];

  outlined init with take of HandshakeMessage(a1, (uint64_t)v5);
  outlined init with take of HandshakeMessage(a2, (uint64_t)v6);
  specialized static HandshakeMessage.__derived_enum_equals(_:_:)(v5);
  return v3 & 1;
}

uint64_t outlined retain of CertificateVerify(uint64_t a1)
{
  outlined copy of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  return a1;
}

void specialized static HandshakeMessage.__derived_enum_equals(_:_:)(__int128 *a1)
{
  _BYTE v1[120];

  outlined init with take of HandshakeMessage(a1, (uint64_t)v1);
  __asm { BR              X10 }
}

BOOL sub_1B0DBBC48()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  _BYTE v17[8];
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v3 = *(unsigned __int8 *)(v2 - 200);
  v4 = *(unsigned __int8 *)(v2 - 199);
  v15 = *(int64x2_t *)(v2 - 192);
  v16 = *(int64x2_t *)(v1 + 24);
  v13 = *(int64x2_t *)(v1 + 40);
  v14 = *(int64x2_t *)(v1 + 56);
  v6 = *(_QWORD *)(v2 - 128);
  v5 = *(_QWORD *)(v2 - 120);
  v8 = *(_QWORD *)(v2 - 112);
  v7 = *(_QWORD *)(v2 - 104);
  outlined init with take of HandshakeMessage(v0, (uint64_t)v17);
  v11 = 0;
  if (!v26
    && v3 == v17[0]
    && v4 == v17[1]
    && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v15, v18), (int32x4_t)vceqq_s64(v16, v19))), 0xFuLL))) & 1) != 0&& (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v13, v20), (int32x4_t)vceqq_s64(v14, v21))), 0xFuLL))) & 1) != 0&& v6 == v22)
  {
    v9 = v24;
    v10 = v25;
    if ((specialized static Array<A>.== infix(_:_:)(v5, v23) & 1) != 0
      && specialized static Array<A>.== infix(_:_:)(v8, v9)
      && (specialized static Array<A>.== infix(_:_:)(v7, v10) & 1) != 0)
    {
      return 1;
    }
  }
  return v11;
}

unint64_t lazy protocol witness table accessor for type HandshakeMessage and conformance HandshakeMessage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandshakeMessage and conformance HandshakeMessage;
  if (!lazy protocol witness table cache variable for type HandshakeMessage and conformance HandshakeMessage)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for HandshakeMessage, &type metadata for HandshakeMessage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandshakeMessage and conformance HandshakeMessage);
  }
  return result;
}

uint64_t destroy for HandshakeMessage(uint64_t a1)
{
  return outlined consume of HandshakeMessage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_BYTE *)(a1 + 104));
}

uint64_t initializeWithCopy for HandshakeMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_BYTE *)(a2 + 104);
  outlined copy of HandshakeMessage(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_BYTE *)(a1 + 104) = v17;
  return a1;
}

uint64_t assignWithCopy for HandshakeMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v25 = *(_QWORD *)(a2 + 72);
  v26 = *(_QWORD *)(a2 + 80);
  v27 = *(_QWORD *)(a2 + 88);
  v28 = *(_QWORD *)(a2 + 96);
  v29 = *(_BYTE *)(a2 + 104);
  outlined copy of HandshakeMessage(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v25, v26, v27, v28, v29);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 96);
  v23 = *(_BYTE *)(a1 + 104);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v25;
  *(_QWORD *)(a1 + 80) = v26;
  *(_QWORD *)(a1 + 88) = v27;
  *(_QWORD *)(a1 + 96) = v28;
  *(_BYTE *)(a1 + 104) = v29;
  outlined consume of HandshakeMessage(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, v23);
  return a1;
}

uint64_t assignWithTake for HandshakeMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = *(_QWORD *)(a2 + 96);
  v4 = *(_BYTE *)(a2 + 104);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 96);
  v16 = *(_BYTE *)(a1 + 104);
  v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v17;
  v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v18;
  v19 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v19;
  *(_QWORD *)(a1 + 96) = v3;
  *(_BYTE *)(a1 + 104) = v4;
  outlined consume of HandshakeMessage(v5, v7, v6, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandshakeMessage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 105))
    return (*(_DWORD *)a1 + 249);
  v3 = *(unsigned __int8 *)(a1 + 104);
  if (v3 <= 7)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HandshakeMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 - 249;
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 105) = 0;
    if (a2)
      *(_BYTE *)(result + 104) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for HandshakeMessage(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 104);
}

uint64_t destructiveInjectEnumTag for HandshakeMessage(uint64_t result, char a2)
{
  *(_BYTE *)(result + 104) = a2;
  return result;
}

ValueMetadata *type metadata accessor for HandshakeMessage()
{
  return &type metadata for HandshakeMessage;
}

uint64_t HandshakeState.IdleState.init(configuration:sessionToResume:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v6 = (uint64_t)a3 + *(int *)(type metadata accessor for HandshakeState.IdleState(0) + 20);
  v7 = type metadata accessor for SessionTicket();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a1[3];
  a3[2] = a1[2];
  a3[3] = v8;
  *(_OWORD *)((char *)a3 + 60) = *(_OWORD *)((char *)a1 + 60);
  v9 = a1[1];
  *a3 = *a1;
  a3[1] = v9;
  outlined assign with take of HandshakeStateMachine?(a2, v6, &demangling cache variable for type metadata for SessionTicket?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  return swift_storeEnumTagMultiPayload();
}

void HandshakeState.logDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1E0C80A78](v1);
  outlined init with copy of PartialHandshakeResult(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v4 = (char *)sub_1B0DBC6D4 + 4 * asc_1B0DE9920[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0DBC6D4()
{
  uint64_t v0;

  outlined destroy of PartialHandshakeResult(v0, type metadata accessor for HandshakeState);
  return 0x6548746E65696C63;
}

uint64_t HandshakeState.sendingClientHello(_:sessionToResume:diffieHellmanKey:currentTime:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(_QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v47 = a3;
  v48 = a4;
  v46 = a2;
  v43 = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SymmetricKey();
  v44 = *(_QWORD *)(v10 - 8);
  v45 = v10;
  MEMORY[0x1E0C80A78](v10);
  v41 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for HandshakeState.ClientHelloState(0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v41 - v16;
  v18 = type metadata accessor for HandshakeState.IdleState(0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (uint64_t *)((char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = type metadata accessor for HandshakeState(0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v5;
  outlined init with copy of PartialHandshakeResult(v5, (uint64_t)v23, v24);
  if (swift_getEnumCaseMultiPayload())
  {
    result = outlined destroy of PartialHandshakeResult((uint64_t)v23, type metadata accessor for HandshakeState);
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  outlined init with take of HandshakeStateMachine((uint64_t)v23, (uint64_t)v20, type metadata accessor for HandshakeState.IdleState);
  v25 = v49;
  v26 = static HandshakeState.ClientHelloState.sendingClientHello(originalState:clientHello:sessionToResume:diffieHellmanKey:currentTime:)((uint64_t)v15, v20, a1, v46, v47, v48);
  if (v25)
    return outlined destroy of PartialHandshakeResult((uint64_t)v20, type metadata accessor for HandshakeState.IdleState);
  v47 = v28;
  v48 = v27;
  v49 = v26;
  outlined init with take of HandshakeStateMachine((uint64_t)v15, (uint64_t)v17, type metadata accessor for HandshakeState.ClientHelloState);
  specialized SessionKeyManager.clientEarlyTrafficSecret.getter((uint64_t)v9);
  v31 = v44;
  v30 = v45;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48))(v9, 1, v45);
  if ((_DWORD)result == 1)
    goto LABEL_8;
  v32 = v42;
  outlined destroy of PartialHandshakeResult(v42, type metadata accessor for HandshakeState);
  outlined destroy of PartialHandshakeResult((uint64_t)v20, type metadata accessor for HandshakeState.IdleState);
  v33 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
  v34 = v41;
  v33(v41, v9, v30);
  outlined init with take of HandshakeStateMachine((uint64_t)v17, v32, type metadata accessor for HandshakeState.ClientHelloState);
  swift_storeEnumTagMultiPayload();
  v35 = type metadata accessor for PartialHandshakeResult(0);
  v36 = v43;
  v37 = v30;
  v38 = (char *)v43 + *(int *)(v35 + 20);
  v33(v38, v34, v37);
  v39 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
  swift_storeEnumTagMultiPayload();
  result = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 0, 1, v39);
  v40 = v48;
  *v36 = v49;
  v36[1] = v40;
  v36[2] = v47;
  *(_OWORD *)((char *)v36 + *(int *)(v35 + 24)) = xmmword_1B0DE7E90;
  return result;
}

BOOL HandshakeState.EncryptedExtensionsState.isResumption.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v7;

  v1 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  outlined init with copy of PartialHandshakeResult(v0 + *(int *)(v4 + 20), (uint64_t)v3, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
  v5 = swift_getEnumCaseMultiPayload() == 1;
  outlined destroy of PartialHandshakeResult((uint64_t)v3, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
  return v5;
}

void HandshakeState.ReadyState.generateTLSExporterKey(label:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for HandshakeState.ReadyState(0);
  specialized SessionKeyManager.generateTLSExporterKey(label:)(a1, a2, a3);
}

void HandshakeState.ReadyState.generateHashForAuthenticator(transcript:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for HandshakeState.ReadyState(0);
  specialized SessionKeyManager.generateHashForAuthenticator(transcript:)(a1, a2);
}

void HandshakeState.ReadyState.generateHMACForAuthenticator(transcript:key:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for HandshakeState.ReadyState(0);
  specialized SessionKeyManager.generateHMACForAuthenticator(transcript:key:)(a1, a2);
}

uint64_t HandshakeState.EncryptedExtensionsState.SessionData.negotiatedCipherSuite.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v11;

  v1 = v0;
  v2 = type metadata accessor for SessionTicket();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (unsigned __int16 *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of PartialHandshakeResult(v1, (uint64_t)v7, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of HandshakeStateMachine((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
    v9 = *(unsigned __int16 *)&v4[*(int *)(v2 + 44)];
    outlined destroy of PartialHandshakeResult((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
  }
  else
  {
    v9 = *v7;
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t HandshakeState.EncryptedExtensionsState.SessionData.negotiatedGroup.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v11;

  v1 = v0;
  v2 = type metadata accessor for SessionTicket();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PartialHandshakeResult(v1, (uint64_t)v7, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of HandshakeStateMachine((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
    v9 = *(unsigned __int16 *)&v4[*(int *)(v2 + 48)];
    outlined destroy of PartialHandshakeResult((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
  }
  else
  {
    v9 = *((unsigned __int16 *)v7 + 1);
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t HandshakeState.receivedServerEncryptedExtensions(_:extensionBytes:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(_QWORD);
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a4;
  v8 = type metadata accessor for HandshakeState.ServerHelloState(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v24 - v12;
  v14 = type metadata accessor for HandshakeState(0);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v24 - v18;
  v24 = v4;
  outlined init with copy of PartialHandshakeResult(v4, (uint64_t)&v24 - v18, v20);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of HandshakeStateMachine((uint64_t)v19, (uint64_t)v13, type metadata accessor for HandshakeState.ServerHelloState);
    outlined init with copy of PartialHandshakeResult((uint64_t)v13, (uint64_t)v11, type metadata accessor for HandshakeState.ServerHelloState);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(a2, a3);
    v21 = v26;
    HandshakeState.EncryptedExtensionsState.init(originalState:encryptedExtensions:extensionBytes:)((uint64_t)v11, a1, a2, a3, v25, (unint64_t)v17);
    if (v21)
    {
      return outlined destroy of PartialHandshakeResult((uint64_t)v13, type metadata accessor for HandshakeState.ServerHelloState);
    }
    else
    {
      v23 = v24;
      outlined destroy of PartialHandshakeResult(v24, type metadata accessor for HandshakeState);
      outlined destroy of PartialHandshakeResult((uint64_t)v13, type metadata accessor for HandshakeState.ServerHelloState);
      swift_storeEnumTagMultiPayload();
      return outlined init with take of HandshakeStateMachine((uint64_t)v17, v23, type metadata accessor for HandshakeState);
    }
  }
  else
  {
    result = outlined destroy of PartialHandshakeResult((uint64_t)v19, type metadata accessor for HandshakeState);
    __break(1u);
  }
  return result;
}

uint64_t HandshakeState.receivedServerCertificate(_:certificateBytes:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(_QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v8 = v7;
  v33 = a6;
  v34 = a7;
  v31 = a3;
  v32 = a5;
  v11 = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v29 - v15;
  v17 = type metadata accessor for HandshakeState(0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v29 - v21;
  v30 = v8;
  outlined init with copy of PartialHandshakeResult(v8, (uint64_t)&v29 - v21, v23);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    outlined init with take of HandshakeStateMachine((uint64_t)v22, (uint64_t)v16, type metadata accessor for HandshakeState.EncryptedExtensionsState);
    outlined init with copy of PartialHandshakeResult((uint64_t)v16, (uint64_t)v14, type metadata accessor for HandshakeState.EncryptedExtensionsState);
    outlined copy of Data._Representation(a1, a2);
    swift_bridgeObjectRetain();
    v25 = v32;
    v24 = v33;
    outlined copy of Data._Representation(v32, v33);
    v26 = v35;
    HandshakeState.ServerCertificateState.init(originalState:serverCertificate:certificateBytes:)(a1, a2, v31, v25, v24, v34, (uint64_t)v20);
    if (v26)
    {
      return outlined destroy of PartialHandshakeResult((uint64_t)v16, type metadata accessor for HandshakeState.EncryptedExtensionsState);
    }
    else
    {
      v28 = v30;
      outlined destroy of PartialHandshakeResult(v30, type metadata accessor for HandshakeState);
      outlined destroy of PartialHandshakeResult((uint64_t)v16, type metadata accessor for HandshakeState.EncryptedExtensionsState);
      swift_storeEnumTagMultiPayload();
      return outlined init with take of HandshakeStateMachine((uint64_t)v20, v28, type metadata accessor for HandshakeState);
    }
  }
  else
  {
    result = outlined destroy of PartialHandshakeResult((uint64_t)v22, type metadata accessor for HandshakeState);
    __break(1u);
  }
  return result;
}

uint64_t HandshakeState.receivedServerCertificateVerify(certificateVerify:certificateVerifyBytes:)(int a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(_QWORD);
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v8 = v7;
  v33 = a6;
  v34 = a7;
  v32 = a4;
  v31 = a1;
  v12 = type metadata accessor for HandshakeState.ServerCertificateState(0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v29 - v16;
  v18 = type metadata accessor for HandshakeState(0);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v29 - v22;
  v30 = v8;
  outlined init with copy of PartialHandshakeResult(v8, (uint64_t)&v29 - v22, v24);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    outlined destroy of PartialHandshakeResult((uint64_t)v23, type metadata accessor for HandshakeState);
    __break(1u);
    JUMPOUT(0x1B0DBD4C8);
  }
  outlined init with take of HandshakeStateMachine((uint64_t)v23, (uint64_t)v17, type metadata accessor for HandshakeState.ServerCertificateState);
  outlined init with copy of PartialHandshakeResult((uint64_t)v17, (uint64_t)v15, type metadata accessor for HandshakeState.ServerCertificateState);
  outlined copy of Data._Representation(a2, a3);
  v25 = v33;
  outlined copy of Data._Representation(a5, v33);
  v26 = v35;
  HandshakeState.ServerCertificateVerifyState.init(originalState:certificateVerify:certificateVerifyBytes:)((uint64_t)v15, v31, a2, a3, v32, a5, v25, v34, (uint64_t)v21);
  if (v26)
    return outlined destroy of PartialHandshakeResult((uint64_t)v17, type metadata accessor for HandshakeState.ServerCertificateState);
  v28 = v30;
  outlined destroy of PartialHandshakeResult(v30, type metadata accessor for HandshakeState);
  outlined destroy of PartialHandshakeResult((uint64_t)v17, type metadata accessor for HandshakeState.ServerCertificateState);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of HandshakeStateMachine((uint64_t)v21, v28, type metadata accessor for HandshakeState);
}

uint64_t static HandshakeState.ClientHelloState.sendingClientHello(originalState:clientHello:sessionToResume:diffieHellmanKey:currentTime:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  void *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  __int128 v67[2];
  __int16 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;

  v61 = a6;
  v62 = a5;
  v65 = (char *)a4;
  v63 = a1;
  v66 = type metadata accessor for HandshakeState.ClientHelloState(0);
  MEMORY[0x1E0C80A78](v66);
  v9 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  MEMORY[0x1E0C80A78](v10);
  v78 = (uint64_t)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
  v19 = MEMORY[0x1E0C80A78](v18);
  v64 = (uint64_t)v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)v44 - v21;
  v23 = type metadata accessor for HandshakeState.IdleState(0);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?((uint64_t)a2 + *(int *)(v23 + 24), (uint64_t)v22, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
  outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?((uint64_t)v22, (uint64_t)v17, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  if (swift_getEnumCaseMultiPayload() >= 4)
  {
    specialized static SessionKeyManager.State.EarlySecret.create(clientHello:sessionToResume:currentTime:)((uint64_t)v14, a3, (uint64_t)v65, v61);
    v61 = v27;
    v60 = v28;
    v59 = v29;
    outlined destroy of HandshakeStateMachine?((uint64_t)v22, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    outlined init with take of P256.Signing.PublicKey?((uint64_t)v14, (uint64_t)v22, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
    swift_storeEnumTagMultiPayload();
    v30 = a2[1];
    v58 = *a2;
    v44[1] = v30;
    v31 = a2[3];
    v52 = a2[2];
    v33 = a2[4];
    v45 = a2[5];
    v32 = v45;
    v54 = a2[6];
    v34 = a2[8];
    v53 = a2[7];
    v57 = *((unsigned __int16 *)a2 + 36);
    v56 = *((unsigned __int8 *)a2 + 74);
    v55 = *((unsigned __int8 *)a2 + 75);
    v35 = *(_QWORD *)(a3 + 40);
    v51 = *(_QWORD *)(a3 + 48);
    v36 = *(_QWORD *)(a3 + 64);
    v50 = *(_QWORD *)(a3 + 56);
    v49 = v36;
    v48 = *(_QWORD *)(a3 + 72);
    v37 = *(_QWORD *)(a3 + 96);
    v68 = *(_WORD *)a3;
    v69 = *(_OWORD *)(a3 + 8);
    v70 = *(_OWORD *)(a3 + 24);
    v71 = v35;
    v72 = v51;
    v73 = v50;
    v74 = v36;
    v75 = v48;
    v47 = *(_OWORD *)(a3 + 80);
    v76 = v47;
    v77 = v37;
    v46 = specialized ClientHello.serverCertificateTypes.getter();
    outlined init with copy of SwiftTLSClock(v62, (uint64_t)v67);
    outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?((uint64_t)v22, v64, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
    outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?((uint64_t)v65, v78, &demangling cache variable for type metadata for SessionTicket?);
    v65 = &v9[*(int *)(v66 + 40)];
    v38 = (uint64_t)v65;
    v39 = type metadata accessor for SessionTicket();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 1, 1, v39);
    *(_QWORD *)v9 = v58;
    *((_QWORD *)v9 + 1) = v30;
    *((_QWORD *)v9 + 2) = v52;
    *((_QWORD *)v9 + 3) = v31;
    *((_QWORD *)v9 + 4) = v33;
    *((_QWORD *)v9 + 5) = v32;
    v40 = v54;
    v41 = v53;
    *((_QWORD *)v9 + 6) = v54;
    *((_QWORD *)v9 + 7) = v41;
    *((_QWORD *)v9 + 8) = v34;
    *((_WORD *)v9 + 36) = v57;
    v9[74] = v56;
    v9[75] = v55;
    v42 = v51;
    *((_QWORD *)v9 + 10) = v35;
    *((_QWORD *)v9 + 11) = v42;
    v43 = v49;
    *((_QWORD *)v9 + 12) = v50;
    *((_QWORD *)v9 + 13) = v43;
    *((_QWORD *)v9 + 14) = v48;
    v62 = v47;
    *((_QWORD *)v9 + 15) = v47;
    *((_QWORD *)v9 + 16) = v46;
    outlined init with take of ContiguousBytes(v67, (uint64_t)(v9 + 136));
    outlined init with take of P256.Signing.PublicKey?(v64, (uint64_t)&v9[*(int *)(v66 + 36)], &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of ByteBuffer?(v31, v33);
    outlined copy of ByteBuffer?(v40, v41);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined assign with take of HandshakeStateMachine?(v78, (uint64_t)v65, &demangling cache variable for type metadata for SessionTicket?);
    outlined init with take of HandshakeStateMachine((uint64_t)v9, v63, type metadata accessor for HandshakeState.ClientHelloState);
    outlined destroy of HandshakeStateMachine?((uint64_t)v22, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
    return v61;
  }
  else
  {
    outlined destroy of HandshakeStateMachine?((uint64_t)v17, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v24 = swift_allocError();
    *(_DWORD *)v25 = 2;
    *(_BYTE *)(v25 + 4) = 1;
    swift_willThrow(v24);
    return outlined destroy of HandshakeStateMachine?((uint64_t)v22, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
  }
}

void HandshakeState.ServerCertificateState.init(originalState:serverCertificate:certificateBytes:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint8_t *v17;
  _QWORD v18[18];

  v18[10] = a6;
  v18[14] = a5;
  v18[15] = a4;
  v18[16] = a3;
  v18[17] = a1;
  v9 = type metadata accessor for PeerCertificateBundle(0);
  MEMORY[0x1E0C80A78](v9);
  v18[12] = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  MEMORY[0x1E0C80A78](v11);
  *(_OWORD *)(a7 + 80) = xmmword_1B0DE7E90;
  *(_QWORD *)(a7 + 96) = 0;
  *(_QWORD *)(a7 + 104) = 0;
  *(_OWORD *)(a7 + 112) = xmmword_1B0DE9D30;
  if (one-time initialization token for logger != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  v18[13] = __swift_project_value_buffer(v12, (uint64_t)logger);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = a2;
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1B0D50000, v13, v14, "validating certificate", v16, 2u);
    v17 = v16;
    a2 = v15;
    MEMORY[0x1B5E11244](v17, -1, -1);
  }

  __asm { BR              X10 }
}

uint64_t HandshakeState.ServerCertificateVerifyState.init(originalState:certificateVerify:certificateVerifyBytes:)@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  __int16 v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;

  v18 = type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  v19 = (uint64_t *)(a9 + *(int *)(v18 + 32));
  *(_OWORD *)v19 = xmmword_1B0DE7E90;
  v57 = a9;
  v58 = v19;
  v19[2] = 0;
  v56 = (int *)v18;
  v20 = (uint64_t *)(a9 + *(int *)(v18 + 36));
  *(_OWORD *)v20 = xmmword_1B0DE7E90;
  v59 = v20;
  v20[2] = 0;
  v21 = type metadata accessor for HandshakeState.ServerCertificateState(0);
  v22 = a1 + *(int *)(v21 + 40);
  v23 = a1 + *(int *)(v21 + 44);
  LOWORD(v21) = a2;
  v24 = a4;
  v25 = v23;
  v26 = a5;
  v27 = *(_QWORD *)(a1 + 16);
  v28 = PeerCertificateBundle.verifyServerCertificateVerifySignature(message:validKeys:keyScheduler:)(v21, a3, v24, v26, v27, v23);
  if (v9)
  {
    outlined consume of Data._Representation(a6, a7);
    outlined consume of Data._Representation(a3, v24);
    outlined destroy of PartialHandshakeResult(a1, type metadata accessor for HandshakeState.ServerCertificateState);
    v29 = v58;
  }
  else
  {
    v53 = a7;
    v54 = a3;
    if ((v28 & 1) != 0)
    {
      v49 = *(_QWORD *)(a1 + 32);
      v50 = *(_QWORD *)(a1 + 24);
      v47 = *(_QWORD *)(a1 + 8);
      v48 = *(_QWORD *)(a1 + 40);
      v52 = *(_QWORD *)(a1 + 48);
      v30 = *(_QWORD *)(a1 + 64);
      v51 = *(_QWORD *)(a1 + 56);
      v31 = *(_WORD *)(a1 + 72);
      v32 = *(_BYTE *)(a1 + 74);
      v33 = *(_BYTE *)(a1 + 75);
      *(_QWORD *)v57 = *(_QWORD *)a1;
      *(_QWORD *)(v57 + 8) = v47;
      *(_QWORD *)(v57 + 16) = v27;
      *(_QWORD *)(v57 + 24) = v50;
      *(_QWORD *)(v57 + 32) = v49;
      *(_QWORD *)(v57 + 40) = v48;
      *(_QWORD *)(v57 + 48) = v52;
      *(_QWORD *)(v57 + 56) = v51;
      *(_QWORD *)(v57 + 64) = v30;
      *(_WORD *)(v57 + 72) = v31;
      *(_BYTE *)(v57 + 74) = v32;
      *(_BYTE *)(v57 + 75) = v33;
      *(_DWORD *)(v57 + 76) = *(_DWORD *)(a1 + 76);
      outlined init with copy of PartialHandshakeResult(v22, v57 + v56[7], type metadata accessor for PeerCertificateBundle);
      v34 = *(_QWORD *)(a1 + 80);
      v45 = *(_QWORD *)(a1 + 88);
      *v58 = v34;
      v58[1] = v45;
      v35 = *(_QWORD *)(a1 + 104);
      v58[2] = *(_QWORD *)(a1 + 96);
      v46 = *(_QWORD *)(a1 + 112);
      v43 = *(_QWORD *)(a1 + 120);
      v44 = v35;
      *v59 = v35;
      v59[1] = v46;
      v59[2] = v43;
      *(_BYTE *)(v57 + v56[10]) = *(_BYTE *)(a1 + 128);
      outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v25, v57 + v56[11], &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of ByteBuffer?(v50, v49);
      outlined copy of ByteBuffer?(v52, v51);
      outlined copy of ByteBuffer?(v34, v45);
      outlined copy of ByteBuffer?(v44, v46);
      specialized SessionKeyManager.addPreFinishedMessageToTransportHash(_:)(a6, v53, a8);
      outlined consume of Data._Representation(a6, v53);
      outlined consume of Data._Representation(a3, v24);
      return outlined destroy of PartialHandshakeResult(a1, type metadata accessor for HandshakeState.ServerCertificateState);
    }
    v29 = v58;
    if (one-time initialization token for logger != -1)
      swift_once();
    v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)logger);
    v37 = Logger.logObject.getter();
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v39 = 0;
      _os_log_impl(&dword_1B0D50000, v37, v38, "verification failed", v39, 2u);
      MEMORY[0x1B5E11244](v39, -1, -1);
    }

    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v40 = swift_allocError();
    *(_DWORD *)v41 = 11;
    *(_BYTE *)(v41 + 4) = 1;
    swift_willThrow(v40);
    outlined consume of Data._Representation(a6, v53);
    outlined consume of Data._Representation(v54, v24);
    outlined destroy of PartialHandshakeResult(a1, type metadata accessor for HandshakeState.ServerCertificateState);
  }
  outlined consume of ByteBuffer?(*v29, v29[1]);
  return outlined consume of ByteBuffer?(*v59, v59[1]);
}

void HandshakeState.ReadyState.prepareSessionTicket(message:currentTime:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t ready;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a2;
  v33 = a3;
  v6 = type metadata accessor for Date();
  v29 = *(_QWORD *)(v6 - 8);
  v30 = v6;
  MEMORY[0x1E0C80A78](v6);
  v31 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PeerCertificateBundle(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for SymmetricKey();
  v11 = *(_QWORD *)(v34 - 8);
  v12 = MEMORY[0x1E0C80A78](v34);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v25 - v15;
  ready = type metadata accessor for HandshakeState.ReadyState(0);
  specialized SessionKeyManager.generateSessionTicketPSK(ticketNonce:)(a1[1], a1[2], a1[3]);
  if (!v4)
  {
    v28 = v11;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v34);
    v18 = *(int *)(ready + 28);
    v19 = (uint64_t *)(v3 + *(int *)(ready + 32));
    v21 = *v19;
    v20 = v19[1];
    v22 = v19[2];
    v23 = v3 + v18;
    LODWORD(v18) = *(unsigned __int16 *)(v3 + 78);
    v26 = *(unsigned __int16 *)(v3 + 76);
    v27 = v18;
    outlined init with copy of PartialHandshakeResult(v23, (uint64_t)v10, type metadata accessor for PeerCertificateBundle);
    v24 = (uint64_t)v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v31, v32, v30);
    outlined retain of NewSessionTicket(a1);
    outlined copy of ByteBuffer?(v21, v20);
    SessionTicket.init(message:psk:cipherSuite:group:alpn:certificateBundle:currentTime:)((uint64_t)a1, (uint64_t)v14, v26, v27, v21, v20, v22, (uint64_t)v10, v33, v24);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v34);
  }
}

uint64_t HandshakeState.IdleState.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of HandshakeStateMachine.Configuration(v1, a1);
}

uint64_t HandshakeState.IdleState.configuration.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of HandshakeStateMachine.Configuration(a1, v1);
}

uint64_t HandshakeState.IdleState.sessionToResume.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.IdleState.sessionToResume.getter(type metadata accessor for HandshakeState.IdleState, (uint64_t)&demangling cache variable for type metadata for SessionTicket?, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?, a1);
}

uint64_t HandshakeState.IdleState.sessionToResume.setter(uint64_t a1)
{
  return HandshakeState.IdleState.sessionToResume.setter(a1, type metadata accessor for HandshakeState.IdleState, (uint64_t)&demangling cache variable for type metadata for SessionTicket?, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined assign with take of HandshakeStateMachine?);
}

uint64_t (*HandshakeState.IdleState.sessionToResume.modify())()
{
  type metadata accessor for HandshakeState.IdleState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.IdleState.keyScheduler.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.IdleState.keyScheduler.getter(type metadata accessor for HandshakeState.IdleState, a1);
}

uint64_t HandshakeState.IdleState.keyScheduler.setter(uint64_t a1)
{
  return HandshakeState.IdleState.keyScheduler.setter(a1, type metadata accessor for HandshakeState.IdleState);
}

uint64_t (*HandshakeState.IdleState.keyScheduler.modify())()
{
  type metadata accessor for HandshakeState.IdleState(0);
  return CertificateVerify.algorithm.getter;
}

__n128 HandshakeState.ClientHelloState.expectedLegacySessionID.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v2 = *(_QWORD *)(v1 + 112);
  result = *(__n128 *)(v1 + 80);
  v4 = *(_OWORD *)(v1 + 96);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v2;
  return result;
}

__n128 HandshakeState.ClientHelloState.expectedLegacySessionID.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 80) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 96) = v3;
  *(_QWORD *)(v1 + 112) = *(_QWORD *)(a1 + 32);
  return result;
}

uint64_t HandshakeState.ClientHelloState.allowedCipherSuites.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HandshakeState.ClientHelloState.allowedCipherSuites.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 120) = a1;
  return result;
}

uint64_t (*HandshakeState.ClientHelloState.allowedCipherSuites.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ClientHelloState.serverCertificateTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HandshakeState.ClientHelloState.serverCertificateTypes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 128) = a1;
  return result;
}

uint64_t (*HandshakeState.ClientHelloState.serverCertificateTypes.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ClientHelloState.diffieHellmanKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of SwiftTLSClock(v1 + 136, a1);
}

uint64_t HandshakeState.ClientHelloState.diffieHellmanKey.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 136;
  __swift_destroy_boxed_opaque_existential_1(v3);
  return outlined init with take of ContiguousBytes(a1, v3);
}

uint64_t (*HandshakeState.ClientHelloState.diffieHellmanKey.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ClientHelloState.keyScheduler.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.ClientHelloState.keyScheduler.getter(type metadata accessor for HandshakeState.ClientHelloState, a1);
}

uint64_t HandshakeState.ClientHelloState.keyScheduler.setter(uint64_t a1)
{
  return HandshakeState.ClientHelloState.keyScheduler.setter(a1, type metadata accessor for HandshakeState.ClientHelloState);
}

uint64_t (*HandshakeState.ClientHelloState.keyScheduler.modify())()
{
  type metadata accessor for HandshakeState.ClientHelloState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ClientHelloState.sessionToResume.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.ClientHelloState.sessionToResume.getter(type metadata accessor for HandshakeState.ClientHelloState, (uint64_t)&demangling cache variable for type metadata for SessionTicket?, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?, a1);
}

uint64_t HandshakeState.ClientHelloState.sessionToResume.setter(uint64_t a1)
{
  return HandshakeState.ClientHelloState.sessionToResume.setter(a1, type metadata accessor for HandshakeState.ClientHelloState, (uint64_t)&demangling cache variable for type metadata for SessionTicket?, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined assign with take of HandshakeStateMachine?);
}

uint64_t (*HandshakeState.ClientHelloState.sessionToResume.modify())()
{
  type metadata accessor for HandshakeState.ClientHelloState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerHelloState.sessionData.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.IdleState.sessionToResume.getter(type metadata accessor for HandshakeState.ServerHelloState, (uint64_t)type metadata accessor for HandshakeState.ServerHelloState.SessionData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined init with copy of PartialHandshakeResult, a1);
}

uint64_t HandshakeState.IdleState.sessionToResume.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;

  v8 = a1(0);
  return a3(v4 + *(int *)(v8 + 20), a4, a2);
}

uint64_t HandshakeState.ServerHelloState.sessionData.setter(uint64_t a1)
{
  return HandshakeState.IdleState.sessionToResume.setter(a1, type metadata accessor for HandshakeState.ServerHelloState, (uint64_t)type metadata accessor for HandshakeState.ServerHelloState.SessionData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined assign with take of HandshakeState.ServerHelloState.SessionData);
}

uint64_t HandshakeState.IdleState.sessionToResume.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;

  v8 = a2(0);
  return a4(a1, v4 + *(int *)(v8 + 20), a3);
}

uint64_t (*HandshakeState.ServerHelloState.sessionData.modify())()
{
  type metadata accessor for HandshakeState.ServerHelloState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerHelloState.keyScheduler.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.IdleState.keyScheduler.getter(type metadata accessor for HandshakeState.ServerHelloState, a1);
}

uint64_t HandshakeState.IdleState.keyScheduler.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a1(0);
  return outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v2 + *(int *)(v4 + 24), a2, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
}

uint64_t HandshakeState.ServerHelloState.keyScheduler.setter(uint64_t a1)
{
  return HandshakeState.IdleState.keyScheduler.setter(a1, type metadata accessor for HandshakeState.ServerHelloState);
}

uint64_t HandshakeState.IdleState.keyScheduler.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;

  v4 = a2(0);
  return outlined assign with take of HandshakeStateMachine?(a1, v2 + *(int *)(v4 + 24), &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
}

uint64_t (*HandshakeState.ServerHelloState.keyScheduler.modify())()
{
  type metadata accessor for HandshakeState.ServerHelloState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerHelloState.negotiatedCipherSuite.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for HandshakeState.ServerHelloState(0) + 28));
}

uint64_t HandshakeState.ServerHelloState.negotiatedCipherSuite.setter(__int16 a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for HandshakeState.ServerHelloState(0);
  *(_WORD *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*HandshakeState.ServerHelloState.negotiatedCipherSuite.modify())()
{
  type metadata accessor for HandshakeState.ServerHelloState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerHelloState.negotiatedGroup.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for HandshakeState.ServerHelloState(0) + 32));
}

uint64_t HandshakeState.ServerHelloState.negotiatedGroup.setter(__int16 a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for HandshakeState.ServerHelloState(0);
  *(_WORD *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*HandshakeState.ServerHelloState.negotiatedGroup.modify())()
{
  type metadata accessor for HandshakeState.ServerHelloState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerHelloState.SessionData.NewSession.init(negotiatedCipherSuite:negotiatedGroup:serverCertificateTypes:)(unsigned __int16 a1, unsigned __int16 a2)
{
  return a1 | (a2 << 16);
}

uint64_t HandshakeState.ServerHelloState.SessionData.NewSession.negotiatedGroup.getter(unsigned int a1)
{
  return HIWORD(a1);
}

uint64_t HandshakeState.ServerHelloState.SessionData.NewSession.negotiatedGroup.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 2) = result;
  return result;
}

uint64_t (*HandshakeState.ServerHelloState.SessionData.NewSession.negotiatedGroup.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerHelloState.SessionData.NewSession.serverCertificateTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HandshakeState.ServerHelloState.SessionData.NewSession.serverCertificateTypes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t HandshakeState.EncryptedExtensionsState.sessionData.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.IdleState.sessionToResume.getter(type metadata accessor for HandshakeState.EncryptedExtensionsState, (uint64_t)type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined init with copy of PartialHandshakeResult, a1);
}

uint64_t HandshakeState.EncryptedExtensionsState.sessionData.setter(uint64_t a1)
{
  return HandshakeState.IdleState.sessionToResume.setter(a1, type metadata accessor for HandshakeState.EncryptedExtensionsState, (uint64_t)type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined assign with take of HandshakeState.ServerHelloState.SessionData);
}

uint64_t (*HandshakeState.EncryptedExtensionsState.sessionData.modify())()
{
  type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.EncryptedExtensionsState.serverALPN.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for HandshakeState.EncryptedExtensionsState(0) + 24);
  v2 = *(_QWORD *)v1;
  outlined copy of ByteBuffer?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t HandshakeState.EncryptedExtensionsState.serverALPN.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t result;

  v7 = (uint64_t *)(v3 + *(int *)(type metadata accessor for HandshakeState.EncryptedExtensionsState(0) + 24));
  result = outlined consume of ByteBuffer?(*v7, v7[1]);
  *v7 = a1;
  v7[1] = a2;
  v7[2] = a3;
  return result;
}

uint64_t (*HandshakeState.EncryptedExtensionsState.serverALPN.modify())()
{
  type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.EncryptedExtensionsState.serverQUICTransportParameters.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for HandshakeState.EncryptedExtensionsState(0) + 28);
  v2 = *(_QWORD *)v1;
  outlined copy of ByteBuffer?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t HandshakeState.EncryptedExtensionsState.serverQUICTransportParameters.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t result;

  v7 = (uint64_t *)(v3 + *(int *)(type metadata accessor for HandshakeState.EncryptedExtensionsState(0) + 28));
  result = outlined consume of ByteBuffer?(*v7, v7[1]);
  *v7 = a1;
  v7[1] = a2;
  v7[2] = a3;
  return result;
}

uint64_t (*HandshakeState.EncryptedExtensionsState.serverQUICTransportParameters.modify())()
{
  type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.EncryptedExtensionsState.earlyDataAccepted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for HandshakeState.EncryptedExtensionsState(0) + 32));
}

uint64_t HandshakeState.EncryptedExtensionsState.earlyDataAccepted.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*HandshakeState.EncryptedExtensionsState.earlyDataAccepted.modify())()
{
  type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.EncryptedExtensionsState.keyScheduler.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.ClientHelloState.keyScheduler.getter(type metadata accessor for HandshakeState.EncryptedExtensionsState, a1);
}

uint64_t HandshakeState.ClientHelloState.keyScheduler.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a1(0);
  return outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v2 + *(int *)(v4 + 36), a2, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
}

uint64_t HandshakeState.EncryptedExtensionsState.keyScheduler.setter(uint64_t a1)
{
  return HandshakeState.ClientHelloState.keyScheduler.setter(a1, type metadata accessor for HandshakeState.EncryptedExtensionsState);
}

uint64_t HandshakeState.ClientHelloState.keyScheduler.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;

  v4 = a2(0);
  return outlined assign with take of HandshakeStateMachine?(a1, v2 + *(int *)(v4 + 36), &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
}

uint64_t (*HandshakeState.EncryptedExtensionsState.keyScheduler.modify())()
{
  type metadata accessor for HandshakeState.EncryptedExtensionsState(0);
  return CertificateVerify.algorithm.getter;
}

unint64_t HandshakeState.EncryptedExtensionsState.SessionData.NewSession.init(negotiatedCipherSuite:negotiatedGroup:serverCertificateType:serverName:)(unsigned __int16 a1, unsigned __int16 a2, unsigned __int8 a3)
{
  return a1 | ((unint64_t)a2 << 16) | ((unint64_t)a3 << 32);
}

unint64_t HandshakeState.EncryptedExtensionsState.SessionData.NewSession.negotiatedGroup.getter(unint64_t a1)
{
  return a1 >> 16;
}

unint64_t HandshakeState.EncryptedExtensionsState.SessionData.NewSession.serverCertificateType.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t HandshakeState.EncryptedExtensionsState.SessionData.NewSession.serverCertificateType.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 4) = result;
  return result;
}

uint64_t HandshakeState.EncryptedExtensionsState.SessionData.NewSession.serverName.getter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t HandshakeState.EncryptedExtensionsState.SessionData.NewSession.serverName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t HandshakeState.ServerCertificateState.negotiatedCipherSuite.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 76);
}

uint64_t HandshakeState.ServerCertificateState.negotiatedCipherSuite.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 76) = result;
  return result;
}

uint64_t (*HandshakeState.ServerCertificateState.negotiatedCipherSuite.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerCertificateState.negotiatedGroup.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 78);
}

uint64_t HandshakeState.ServerCertificateState.negotiatedGroup.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 78) = result;
  return result;
}

uint64_t (*HandshakeState.ServerCertificateState.negotiatedGroup.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerCertificateState.serverALPN.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  outlined copy of ByteBuffer?(v1, *(_QWORD *)(v0 + 88));
  return v1;
}

uint64_t HandshakeState.ServerCertificateState.serverALPN.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  result = outlined consume of ByteBuffer?(v3[10], v3[11]);
  v3[10] = a1;
  v3[11] = a2;
  v3[12] = a3;
  return result;
}

uint64_t HandshakeState.ServerCertificateState.serverQUICTransportParameters.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  outlined copy of ByteBuffer?(v1, *(_QWORD *)(v0 + 112));
  return v1;
}

uint64_t HandshakeState.ServerCertificateState.serverQUICTransportParameters.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  result = outlined consume of ByteBuffer?(v3[13], v3[14]);
  v3[13] = a1;
  v3[14] = a2;
  v3[15] = a3;
  return result;
}

uint64_t (*HandshakeState.ServerCertificateState.serverQUICTransportParameters.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerCertificateState.earlyDataAccepted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 128);
}

uint64_t HandshakeState.ServerCertificateState.earlyDataAccepted.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 128) = result;
  return result;
}

uint64_t HandshakeState.ServerCertificateState.certificates.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.ClientHelloState.sessionToResume.getter(type metadata accessor for HandshakeState.ServerCertificateState, (uint64_t)type metadata accessor for PeerCertificateBundle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined init with copy of PartialHandshakeResult, a1);
}

uint64_t HandshakeState.ClientHelloState.sessionToResume.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;

  v8 = a1(0);
  return a3(v4 + *(int *)(v8 + 40), a4, a2);
}

uint64_t HandshakeState.ServerCertificateState.certificates.setter(uint64_t a1)
{
  return HandshakeState.ClientHelloState.sessionToResume.setter(a1, type metadata accessor for HandshakeState.ServerCertificateState, (uint64_t)type metadata accessor for PeerCertificateBundle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined assign with take of HandshakeState.ServerHelloState.SessionData);
}

uint64_t HandshakeState.ClientHelloState.sessionToResume.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;

  v8 = a2(0);
  return a4(a1, v4 + *(int *)(v8 + 40), a3);
}

uint64_t (*HandshakeState.ServerCertificateState.certificates.modify())()
{
  type metadata accessor for HandshakeState.ServerCertificateState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerCertificateState.keyScheduler.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.ServerCertificateState.keyScheduler.getter(type metadata accessor for HandshakeState.ServerCertificateState, a1);
}

uint64_t HandshakeState.ServerCertificateState.keyScheduler.setter(uint64_t a1)
{
  return HandshakeState.ServerCertificateState.keyScheduler.setter(a1, type metadata accessor for HandshakeState.ServerCertificateState);
}

uint64_t (*HandshakeState.ServerCertificateState.keyScheduler.modify())()
{
  type metadata accessor for HandshakeState.ServerCertificateState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerCertificateVerifyState.certificates.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.ServerCertificateVerifyState.certificates.getter(type metadata accessor for HandshakeState.ServerCertificateVerifyState, a1);
}

uint64_t HandshakeState.ServerCertificateVerifyState.certificates.setter(uint64_t a1)
{
  return HandshakeState.ServerCertificateVerifyState.certificates.setter(a1, type metadata accessor for HandshakeState.ServerCertificateVerifyState);
}

uint64_t (*HandshakeState.ServerCertificateVerifyState.certificates.modify())()
{
  type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerCertificateVerifyState.serverALPN.getter()
{
  return HandshakeState.ServerCertificateVerifyState.serverALPN.getter(type metadata accessor for HandshakeState.ServerCertificateVerifyState);
}

uint64_t HandshakeState.ServerCertificateVerifyState.serverALPN.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandshakeState.ServerCertificateVerifyState.serverALPN.setter(a1, a2, a3, type metadata accessor for HandshakeState.ServerCertificateVerifyState);
}

uint64_t (*HandshakeState.ServerCertificateVerifyState.serverALPN.modify())()
{
  type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerCertificateVerifyState.serverQUICTransportParameters.getter()
{
  return HandshakeState.ServerCertificateVerifyState.serverQUICTransportParameters.getter(type metadata accessor for HandshakeState.ServerCertificateVerifyState);
}

uint64_t HandshakeState.ServerCertificateVerifyState.serverQUICTransportParameters.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandshakeState.ServerCertificateVerifyState.serverQUICTransportParameters.setter(a1, a2, a3, type metadata accessor for HandshakeState.ServerCertificateVerifyState);
}

uint64_t (*HandshakeState.ServerCertificateVerifyState.serverQUICTransportParameters.modify())()
{
  type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerCertificateVerifyState.earlyDataAccepted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for HandshakeState.ServerCertificateVerifyState(0) + 40));
}

uint64_t HandshakeState.ServerCertificateVerifyState.earlyDataAccepted.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*HandshakeState.ServerCertificateVerifyState.earlyDataAccepted.modify())()
{
  type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ServerCertificateVerifyState.keyScheduler.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.ServerCertificateState.keyScheduler.getter(type metadata accessor for HandshakeState.ServerCertificateVerifyState, a1);
}

uint64_t HandshakeState.ServerCertificateState.keyScheduler.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a1(0);
  return outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v2 + *(int *)(v4 + 44), a2, &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
}

uint64_t HandshakeState.ServerCertificateVerifyState.keyScheduler.setter(uint64_t a1)
{
  return HandshakeState.ServerCertificateState.keyScheduler.setter(a1, type metadata accessor for HandshakeState.ServerCertificateVerifyState);
}

uint64_t HandshakeState.ServerCertificateState.keyScheduler.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;

  v4 = a2(0);
  return outlined assign with take of HandshakeStateMachine?(a1, v2 + *(int *)(v4 + 44), &demangling cache variable for type metadata for SessionKeyManager<SHA384>);
}

uint64_t (*HandshakeState.ServerCertificateVerifyState.keyScheduler.modify())()
{
  type metadata accessor for HandshakeState.ServerCertificateVerifyState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ReadyState.certificates.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.ServerCertificateVerifyState.certificates.getter(type metadata accessor for HandshakeState.ReadyState, a1);
}

uint64_t HandshakeState.ServerCertificateVerifyState.certificates.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a1(0);
  return outlined init with copy of PartialHandshakeResult(v2 + *(int *)(v4 + 28), a2, type metadata accessor for PeerCertificateBundle);
}

uint64_t HandshakeState.ReadyState.certificates.setter(uint64_t a1)
{
  return HandshakeState.ServerCertificateVerifyState.certificates.setter(a1, type metadata accessor for HandshakeState.ReadyState);
}

uint64_t HandshakeState.ServerCertificateVerifyState.certificates.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;

  v4 = a2(0);
  return outlined assign with take of HandshakeState.ServerHelloState.SessionData(a1, v2 + *(int *)(v4 + 28), type metadata accessor for PeerCertificateBundle);
}

uint64_t (*HandshakeState.ReadyState.certificates.modify())()
{
  type metadata accessor for HandshakeState.ReadyState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ReadyState.serverALPN.getter()
{
  return HandshakeState.ServerCertificateVerifyState.serverALPN.getter(type metadata accessor for HandshakeState.ReadyState);
}

uint64_t HandshakeState.ServerCertificateVerifyState.serverALPN.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *(int *)(a1(0) + 32);
  v3 = *(_QWORD *)v2;
  outlined copy of ByteBuffer?(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  return v3;
}

uint64_t HandshakeState.ReadyState.serverALPN.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandshakeState.ServerCertificateVerifyState.serverALPN.setter(a1, a2, a3, type metadata accessor for HandshakeState.ReadyState);
}

uint64_t HandshakeState.ServerCertificateVerifyState.serverALPN.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t *v8;
  uint64_t result;

  v8 = (uint64_t *)(v4 + *(int *)(a4(0) + 32));
  result = outlined consume of ByteBuffer?(*v8, v8[1]);
  *v8 = a1;
  v8[1] = a2;
  v8[2] = a3;
  return result;
}

uint64_t (*HandshakeState.ReadyState.serverALPN.modify())()
{
  type metadata accessor for HandshakeState.ReadyState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ReadyState.serverQUICTransportParameters.getter()
{
  return HandshakeState.ServerCertificateVerifyState.serverQUICTransportParameters.getter(type metadata accessor for HandshakeState.ReadyState);
}

uint64_t HandshakeState.ServerCertificateVerifyState.serverQUICTransportParameters.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *(int *)(a1(0) + 36);
  v3 = *(_QWORD *)v2;
  outlined copy of ByteBuffer?(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  return v3;
}

uint64_t HandshakeState.ReadyState.serverQUICTransportParameters.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandshakeState.ServerCertificateVerifyState.serverQUICTransportParameters.setter(a1, a2, a3, type metadata accessor for HandshakeState.ReadyState);
}

uint64_t HandshakeState.ServerCertificateVerifyState.serverQUICTransportParameters.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t *v8;
  uint64_t result;

  v8 = (uint64_t *)(v4 + *(int *)(a4(0) + 36));
  result = outlined consume of ByteBuffer?(*v8, v8[1]);
  *v8 = a1;
  v8[1] = a2;
  v8[2] = a3;
  return result;
}

uint64_t (*HandshakeState.ReadyState.serverQUICTransportParameters.modify())()
{
  type metadata accessor for HandshakeState.ReadyState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ReadyState.earlyDataAccepted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for HandshakeState.ReadyState(0) + 40));
}

uint64_t HandshakeState.ReadyState.earlyDataAccepted.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for HandshakeState.ReadyState(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*HandshakeState.ReadyState.earlyDataAccepted.modify())()
{
  type metadata accessor for HandshakeState.ReadyState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeState.ReadyState.keyScheduler.getter@<X0>(uint64_t a1@<X8>)
{
  return HandshakeState.ServerCertificateState.keyScheduler.getter(type metadata accessor for HandshakeState.ReadyState, a1);
}

uint64_t HandshakeState.ReadyState.keyScheduler.setter(uint64_t a1)
{
  return HandshakeState.ServerCertificateState.keyScheduler.setter(a1, type metadata accessor for HandshakeState.ReadyState);
}

uint64_t (*HandshakeState.ReadyState.keyScheduler.modify())()
{
  type metadata accessor for HandshakeState.ReadyState(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t outlined init with copy of HandshakeStateMachine.Configuration(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for HandshakeStateMachine.Configuration(a2, a1);
  return a2;
}

uint64_t outlined assign with take of HandshakeStateMachine.Configuration(uint64_t a1, uint64_t a2)
{
  assignWithTake for HandshakeStateMachine.Configuration(a2, a1);
  return a2;
}

uint64_t outlined assign with take of HandshakeState.ServerHelloState.SessionData(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for HandshakeState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1B0DC03A4 + 4 * byte_1B0DE99BF[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t assignWithCopy for HandshakeState(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of PartialHandshakeResult(result, type metadata accessor for HandshakeState);
    v2 = (char *)&loc_1B0DC2BDC + 4 * byte_1B0DE9A54[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

void initializeWithTake for HandshakeState()
{
  char *v0;

  v0 = (char *)sub_1B0DC4DD0 + 4 * word_1B0DE9A88[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_OWORD *sub_1B0DC4DD0()
{
  _OWORD *v0;
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  int *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  int *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  int *v58;

  v2 = v1[3];
  v0[2] = v1[2];
  v0[3] = v2;
  *(_OWORD *)((char *)v0 + 60) = *(_OWORD *)((char *)v1 + 60);
  v3 = v1[1];
  *v0 = *v1;
  v0[1] = v3;
  v4 = type metadata accessor for HandshakeState.IdleState(0);
  v5 = *(int *)(v4 + 20);
  v6 = (char *)v0 + v5;
  v7 = (char *)v1 + v5;
  v8 = (int *)type metadata accessor for SessionTicket();
  v9 = *((_QWORD *)v8 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v9 + 48))(v7, 1, v8))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v6, v7, v11);
    *(_DWORD *)&v6[v8[5]] = *(_DWORD *)&v7[v8[5]];
    *(_DWORD *)&v6[v8[6]] = *(_DWORD *)&v7[v8[6]];
    v12 = v8[7];
    v13 = &v6[v12];
    v14 = &v7[v12];
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
    v15 = v8[8];
    v16 = &v6[v15];
    v17 = &v7[v15];
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
    v18 = v8[9];
    v19 = &v6[v18];
    v20 = &v7[v18];
    v21 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
    *(_DWORD *)&v6[v8[10]] = *(_DWORD *)&v7[v8[10]];
    *(_WORD *)&v6[v8[11]] = *(_WORD *)&v7[v8[11]];
    *(_WORD *)&v6[v8[12]] = *(_WORD *)&v7[v8[12]];
    v22 = v8[13];
    v23 = &v6[v22];
    v24 = &v7[v22];
    *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    v25 = v8[14];
    v26 = &v6[v25];
    v27 = &v7[v25];
    v28 = type metadata accessor for P256.Signing.PublicKey();
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
  }
  v31 = *(int *)(v4 + 24);
  v32 = (char *)v0 + v31;
  v33 = (char *)v1 + v31;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v35 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v32, v33, v35);
      v36 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v37 = v36[9];
      v38 = &v32[v37];
      v39 = &v33[v37];
      v40 = type metadata accessor for SymmetricKey();
      v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32);
      v41(v38, v39, v40);
      v41(&v32[v36[10]], &v33[v36[10]], v40);
      v41(&v32[v36[11]], &v33[v36[11]], v40);
      v41(&v32[v36[12]], &v33[v36[12]], v40);
      swift_storeEnumTagMultiPayload();
      break;
    case 1u:
      v42 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v32, v33, v42);
      v43 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v44 = v43[9];
      v45 = &v32[v44];
      v46 = &v33[v44];
      v47 = type metadata accessor for SymmetricKey();
      v48 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32);
      v48(v45, v46, v47);
      v48(&v32[v43[10]], &v33[v43[10]], v47);
      v48(&v32[v43[11]], &v33[v43[11]], v47);
      swift_storeEnumTagMultiPayload();
      break;
    case 2u:
      v49 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v32, v33, v49);
      v50 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v51 = v50[9];
      v52 = &v32[v51];
      v53 = &v33[v51];
      v54 = type metadata accessor for SymmetricKey();
      v55 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 32);
      v55(v52, v53, v54);
      v55(&v32[v50[10]], &v33[v50[10]], v54);
      v55(&v32[v50[11]], &v33[v50[11]], v54);
      v55(&v32[v50[12]], &v33[v50[12]], v54);
      v55(&v32[v50[13]], &v33[v50[13]], v54);
      v55(&v32[v50[14]], &v33[v50[14]], v54);
      swift_storeEnumTagMultiPayload();
      break;
    case 3u:
      v56 = type metadata accessor for SymmetricKey();
      v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32);
      v57(v32, v33, v56);
      v58 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v57(&v32[v58[9]], &v33[v58[9]], v56);
      v57(&v32[v58[10]], &v33[v58[10]], v56);
      v57(&v32[v58[11]], &v33[v58[11]], v56);
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      break;
  }
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithTake for HandshakeState(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of PartialHandshakeResult(result, type metadata accessor for HandshakeState);
    v2 = (char *)&loc_1B0DC67CC + 4 * word_1B0DE9AC2[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for HandshakeState()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t initializeBufferWithCopyOfBuffer for HandshakeState.IdleState(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  int *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  int *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  int *v73;
  uint64_t v74;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = a2[2];
    v8 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    }
    else
    {
      v11 = a2[3];
      outlined copy of Data._Representation(v11, v8);
      *(_QWORD *)(a1 + 24) = v11;
      *(_QWORD *)(a1 + 32) = v8;
    }
    *(_QWORD *)(a1 + 40) = a2[5];
    v12 = a2[7];
    if (v12 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    }
    else
    {
      v13 = a2[6];
      outlined copy of Data._Representation(v13, a2[7]);
      *(_QWORD *)(a1 + 48) = v13;
      *(_QWORD *)(a1 + 56) = v12;
    }
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    v14 = *(int *)(a3 + 20);
    v15 = (char *)(a1 + v14);
    v16 = (char *)a2 + v14;
    v17 = (int *)type metadata accessor for SessionTicket();
    v18 = *((_QWORD *)v17 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v74 = v18;
      v20 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v15, v16, v20);
      *(_DWORD *)&v15[v17[5]] = *(_DWORD *)&v16[v17[5]];
      *(_DWORD *)&v15[v17[6]] = *(_DWORD *)&v16[v17[6]];
      v21 = v17[7];
      v22 = (uint64_t *)&v15[v21];
      v23 = &v16[v21];
      v24 = *(_QWORD *)&v16[v21];
      v25 = *(_QWORD *)&v16[v21 + 8];
      outlined copy of Data._Representation(v24, v25);
      *v22 = v24;
      v22[1] = v25;
      v22[2] = *((_QWORD *)v23 + 2);
      v26 = v17[8];
      v27 = (uint64_t *)&v15[v26];
      v28 = &v16[v26];
      v29 = *(_QWORD *)&v16[v26];
      v30 = *(_QWORD *)&v16[v26 + 8];
      outlined copy of Data._Representation(v29, v30);
      *v27 = v29;
      v27[1] = v30;
      v27[2] = *((_QWORD *)v28 + 2);
      v31 = v17[9];
      v32 = &v15[v31];
      v33 = &v16[v31];
      v34 = type metadata accessor for SymmetricKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
      *(_DWORD *)&v15[v17[10]] = *(_DWORD *)&v16[v17[10]];
      *(_WORD *)&v15[v17[11]] = *(_WORD *)&v16[v17[11]];
      *(_WORD *)&v15[v17[12]] = *(_WORD *)&v16[v17[12]];
      v35 = v17[13];
      v36 = &v15[v35];
      v37 = (uint64_t *)&v16[v35];
      v38 = *(_QWORD *)&v16[v35 + 8];
      if (v38 >> 60 == 15)
      {
        *(_OWORD *)v36 = *(_OWORD *)v37;
      }
      else
      {
        v39 = *v37;
        outlined copy of Data._Representation(*v37, v38);
        *(_QWORD *)v36 = v39;
        *((_QWORD *)v36 + 1) = v38;
      }
      *((_QWORD *)v36 + 2) = v37[2];
      v40 = v17[14];
      v41 = &v15[v40];
      v42 = &v16[v40];
      v43 = type metadata accessor for P256.Signing.PublicKey();
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        v45 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v41, v42, v43);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v74 + 56))(v15, 0, 1, v17);
    }
    v46 = *(int *)(a3 + 24);
    v47 = (char *)(a1 + v46);
    v48 = (char *)a2 + v46;
    v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v50 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v47, v48, v50);
        v51 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        v52 = v51[9];
        v53 = &v47[v52];
        v54 = &v48[v52];
        v55 = type metadata accessor for SymmetricKey();
        v56 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16);
        v56(v53, v54, v55);
        v56(&v47[v51[10]], &v48[v51[10]], v55);
        v56(&v47[v51[11]], &v48[v51[11]], v55);
        v56(&v47[v51[12]], &v48[v51[12]], v55);
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        v57 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v47, v48, v57);
        v58 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        v59 = v58[9];
        v60 = &v47[v59];
        v61 = &v48[v59];
        v62 = type metadata accessor for SymmetricKey();
        v63 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16);
        v63(v60, v61, v62);
        v63(&v47[v58[10]], &v48[v58[10]], v62);
        v63(&v47[v58[11]], &v48[v58[11]], v62);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        v64 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v47, v48, v64);
        v65 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        v66 = v65[9];
        v67 = &v47[v66];
        v68 = &v48[v66];
        v69 = type metadata accessor for SymmetricKey();
        v70 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16);
        v70(v67, v68, v69);
        v70(&v47[v65[10]], &v48[v65[10]], v69);
        v70(&v47[v65[11]], &v48[v65[11]], v69);
        v70(&v47[v65[12]], &v48[v65[12]], v69);
        v70(&v47[v65[13]], &v48[v65[13]], v69);
        v70(&v47[v65[14]], &v48[v65[14]], v69);
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        v71 = type metadata accessor for SymmetricKey();
        v72 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16);
        v72(v47, v48, v71);
        v73 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v72(&v47[v73[9]], &v48[v73[9]], v71);
        v72(&v47[v73[10]], &v48[v73[10]], v71);
        v72(&v47[v73[11]], &v48[v73[11]], v71);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t initializeWithCopy for HandshakeState.IdleState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  int *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  int *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  int *v70;
  uint64_t v72;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v8, v7);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v7;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 56);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v10, *(_QWORD *)(a2 + 56));
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v9;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v11 = *(int *)(a3 + 20);
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for SessionTicket();
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v72 = a3;
    v17 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v12, v13, v17);
    *(_DWORD *)&v12[v14[5]] = *(_DWORD *)&v13[v14[5]];
    *(_DWORD *)&v12[v14[6]] = *(_DWORD *)&v13[v14[6]];
    v18 = v14[7];
    v19 = (uint64_t *)&v12[v18];
    v20 = &v13[v18];
    v21 = *(_QWORD *)&v13[v18];
    v22 = *(_QWORD *)&v13[v18 + 8];
    outlined copy of Data._Representation(v21, v22);
    *v19 = v21;
    v19[1] = v22;
    v19[2] = *((_QWORD *)v20 + 2);
    v23 = v14[8];
    v24 = (uint64_t *)&v12[v23];
    v25 = &v13[v23];
    v26 = *(_QWORD *)&v13[v23];
    v27 = *(_QWORD *)&v13[v23 + 8];
    outlined copy of Data._Representation(v26, v27);
    *v24 = v26;
    v24[1] = v27;
    v24[2] = *((_QWORD *)v25 + 2);
    v28 = v14[9];
    v29 = &v12[v28];
    v30 = &v13[v28];
    v31 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    *(_DWORD *)&v12[v14[10]] = *(_DWORD *)&v13[v14[10]];
    *(_WORD *)&v12[v14[11]] = *(_WORD *)&v13[v14[11]];
    *(_WORD *)&v12[v14[12]] = *(_WORD *)&v13[v14[12]];
    v32 = v14[13];
    v33 = &v12[v32];
    v34 = (uint64_t *)&v13[v32];
    v35 = *(_QWORD *)&v13[v32 + 8];
    if (v35 >> 60 == 15)
    {
      *(_OWORD *)v33 = *(_OWORD *)v34;
    }
    else
    {
      v36 = *v34;
      outlined copy of Data._Representation(*v34, v35);
      *(_QWORD *)v33 = v36;
      *((_QWORD *)v33 + 1) = v35;
    }
    *((_QWORD *)v33 + 2) = v34[2];
    a3 = v72;
    v37 = v14[14];
    v38 = &v12[v37];
    v39 = &v13[v37];
    v40 = type metadata accessor for P256.Signing.PublicKey();
    v41 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      v42 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v43 = *(int *)(a3 + 24);
  v44 = (char *)(a1 + v43);
  v45 = (char *)(a2 + v43);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v47 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v44, v45, v47);
      v48 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v49 = v48[9];
      v50 = &v44[v49];
      v51 = &v45[v49];
      v52 = type metadata accessor for SymmetricKey();
      v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
      v53(v50, v51, v52);
      v53(&v44[v48[10]], &v45[v48[10]], v52);
      v53(&v44[v48[11]], &v45[v48[11]], v52);
      v53(&v44[v48[12]], &v45[v48[12]], v52);
      goto LABEL_22;
    case 1u:
      v54 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v44, v45, v54);
      v55 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v56 = v55[9];
      v57 = &v44[v56];
      v58 = &v45[v56];
      v59 = type metadata accessor for SymmetricKey();
      v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16);
      v60(v57, v58, v59);
      v60(&v44[v55[10]], &v45[v55[10]], v59);
      v60(&v44[v55[11]], &v45[v55[11]], v59);
      goto LABEL_22;
    case 2u:
      v61 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v44, v45, v61);
      v62 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v63 = v62[9];
      v64 = &v44[v63];
      v65 = &v45[v63];
      v66 = type metadata accessor for SymmetricKey();
      v67 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16);
      v67(v64, v65, v66);
      v67(&v44[v62[10]], &v45[v62[10]], v66);
      v67(&v44[v62[11]], &v45[v62[11]], v66);
      v67(&v44[v62[12]], &v45[v62[12]], v66);
      v67(&v44[v62[13]], &v45[v62[13]], v66);
      v67(&v44[v62[14]], &v45[v62[14]], v66);
      goto LABEL_22;
    case 3u:
      v68 = type metadata accessor for SymmetricKey();
      v69 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16);
      v69(v44, v45, v68);
      v70 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v69(&v44[v70[9]], &v45[v70[9]], v68);
      v69(&v44[v70[10]], &v45[v70[10]], v68);
      v69(&v44[v70[11]], &v45[v70[11]], v68);
LABEL_22:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t assignWithCopy for HandshakeState.IdleState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, int *);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(char *, uint64_t, uint64_t);
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  void (*v109)(char *, char *, uint64_t);
  uint64_t v110;
  int *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  void (*v116)(char *, char *, uint64_t);
  uint64_t v117;
  int *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  void (*v123)(char *, char *, uint64_t);
  uint64_t v124;
  void (*v125)(char *, char *, uint64_t);
  int *v126;
  uint64_t v128;
  uint64_t v129;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (__int128 *)(a1 + 24);
  v7 = (__int128 *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) >> 60 == 15)
  {
    if (v8 >> 60 == 15)
    {
      v9 = *v7;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *v6 = v9;
      goto LABEL_9;
    }
    v11 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v11, *(_QWORD *)(a2 + 32));
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v8;
  }
  else
  {
    if (v8 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 24);
      v10 = *(_QWORD *)(a2 + 40);
      *v6 = *v7;
      *(_QWORD *)(a1 + 40) = v10;
      goto LABEL_9;
    }
    v12 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v12, *(_QWORD *)(a2 + 32));
    v13 = *(_QWORD *)(a1 + 24);
    v14 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v8;
    outlined consume of Data._Representation(v13, v14);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
LABEL_9:
  v15 = (__int128 *)(a1 + 48);
  v16 = (__int128 *)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56) >> 60 == 15)
  {
    if (v17 >> 60 == 15)
    {
      v18 = *v16;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *v15 = v18;
      goto LABEL_17;
    }
    v20 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v20, *(_QWORD *)(a2 + 56));
    *(_QWORD *)(a1 + 48) = v20;
    *(_QWORD *)(a1 + 56) = v17;
  }
  else
  {
    if (v17 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 48);
      v19 = *(_QWORD *)(a2 + 64);
      *v15 = *v16;
      *(_QWORD *)(a1 + 64) = v19;
      goto LABEL_17;
    }
    v21 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v21, *(_QWORD *)(a2 + 56));
    v22 = *(_QWORD *)(a1 + 48);
    v23 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = v21;
    *(_QWORD *)(a1 + 56) = v17;
    outlined consume of Data._Representation(v22, v23);
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
LABEL_17:
  v24 = *(_WORD *)(a2 + 72);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_WORD *)(a1 + 72) = v24;
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  v25 = *(int *)(a3 + 20);
  v26 = (char *)(a1 + v25);
  v27 = (char *)(a2 + v25);
  v28 = (int *)type metadata accessor for SessionTicket();
  v29 = *((_QWORD *)v28 - 1);
  v30 = *(uint64_t (**)(char *, uint64_t, int *))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      v128 = a3;
      v33 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v26, v27, v33);
      *(_DWORD *)&v26[v28[5]] = *(_DWORD *)&v27[v28[5]];
      *(_DWORD *)&v26[v28[6]] = *(_DWORD *)&v27[v28[6]];
      v34 = v28[7];
      v35 = (uint64_t *)&v26[v34];
      v36 = &v27[v34];
      v37 = *(_QWORD *)&v27[v34];
      v38 = *(_QWORD *)&v27[v34 + 8];
      outlined copy of Data._Representation(v37, v38);
      *v35 = v37;
      v35[1] = v38;
      v35[2] = *((_QWORD *)v36 + 2);
      v39 = v28[8];
      v40 = (uint64_t *)&v26[v39];
      v41 = &v27[v39];
      v42 = *(_QWORD *)&v27[v39];
      v43 = *(_QWORD *)&v27[v39 + 8];
      outlined copy of Data._Representation(v42, v43);
      *v40 = v42;
      v40[1] = v43;
      v40[2] = *((_QWORD *)v41 + 2);
      v44 = v28[9];
      v45 = &v26[v44];
      v46 = &v27[v44];
      v47 = type metadata accessor for SymmetricKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
      *(_DWORD *)&v26[v28[10]] = *(_DWORD *)&v27[v28[10]];
      *(_WORD *)&v26[v28[11]] = *(_WORD *)&v27[v28[11]];
      *(_WORD *)&v26[v28[12]] = *(_WORD *)&v27[v28[12]];
      v48 = v28[13];
      v49 = &v26[v48];
      v50 = (uint64_t *)&v27[v48];
      v51 = *(_QWORD *)&v27[v48 + 8];
      if (v51 >> 60 == 15)
      {
        v52 = *(_OWORD *)v50;
        *((_QWORD *)v49 + 2) = v50[2];
        *(_OWORD *)v49 = v52;
      }
      else
      {
        v78 = *v50;
        outlined copy of Data._Representation(*v50, v51);
        *(_QWORD *)v49 = v78;
        *((_QWORD *)v49 + 1) = v51;
        *((_QWORD *)v49 + 2) = v50[2];
      }
      v79 = v28[14];
      v80 = &v26[v79];
      v81 = &v27[v79];
      v82 = type metadata accessor for P256.Signing.PublicKey();
      v83 = *(_QWORD *)(v82 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
      {
        v84 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v80, v81, v82);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
      }
      a3 = v128;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v29 + 56))(v26, 0, 1, v28);
      if (a1 == a2)
        return a1;
      goto LABEL_47;
    }
    goto LABEL_23;
  }
  if (!v32)
  {
    v129 = a3;
    v54 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 24))(v26, v27, v54);
    *(_DWORD *)&v26[v28[5]] = *(_DWORD *)&v27[v28[5]];
    *(_DWORD *)&v26[v28[6]] = *(_DWORD *)&v27[v28[6]];
    v55 = v28[7];
    v56 = (uint64_t *)&v26[v55];
    v57 = &v27[v55];
    v58 = *(_QWORD *)&v27[v55];
    v59 = *(_QWORD *)&v27[v55 + 8];
    outlined copy of Data._Representation(v58, v59);
    v60 = *v56;
    v61 = v56[1];
    *v56 = v58;
    v56[1] = v59;
    outlined consume of Data._Representation(v60, v61);
    v56[2] = *((_QWORD *)v57 + 2);
    v62 = v28[8];
    v63 = (uint64_t *)&v26[v62];
    v64 = &v27[v62];
    v65 = *(_QWORD *)&v27[v62];
    v66 = *(_QWORD *)&v27[v62 + 8];
    outlined copy of Data._Representation(v65, v66);
    v67 = *v63;
    v68 = v63[1];
    *v63 = v65;
    v63[1] = v66;
    outlined consume of Data._Representation(v67, v68);
    v63[2] = *((_QWORD *)v64 + 2);
    v69 = v28[9];
    v70 = &v26[v69];
    v71 = &v27[v69];
    v72 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 24))(v70, v71, v72);
    *(_DWORD *)&v26[v28[10]] = *(_DWORD *)&v27[v28[10]];
    *(_WORD *)&v26[v28[11]] = *(_WORD *)&v27[v28[11]];
    *(_WORD *)&v26[v28[12]] = *(_WORD *)&v27[v28[12]];
    v73 = v28[13];
    v74 = (uint64_t)&v26[v73];
    v75 = (uint64_t *)&v27[v73];
    v76 = *(_QWORD *)&v27[v73 + 8];
    if (*(_QWORD *)&v26[v73 + 8] >> 60 == 15)
    {
      if (v76 >> 60 == 15)
      {
        v77 = *(_OWORD *)v75;
        *(_QWORD *)(v74 + 16) = v75[2];
        *(_OWORD *)v74 = v77;
        goto LABEL_40;
      }
      v86 = *v75;
      outlined copy of Data._Representation(*v75, v76);
      *(_QWORD *)v74 = v86;
      *(_QWORD *)(v74 + 8) = v76;
    }
    else
    {
      if (v76 >> 60 == 15)
      {
        outlined destroy of ByteBuffer(v74);
        v85 = v75[2];
        *(_OWORD *)v74 = *(_OWORD *)v75;
LABEL_39:
        *(_QWORD *)(v74 + 16) = v85;
LABEL_40:
        v90 = v28[14];
        v91 = &v26[v90];
        v92 = &v27[v90];
        v93 = type metadata accessor for P256.Signing.PublicKey();
        v94 = *(_QWORD *)(v93 - 8);
        v95 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v94 + 48);
        v96 = v95(v91, 1, v93);
        v97 = v95(v92, 1, v93);
        if (v96)
        {
          if (!v97)
          {
            (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v91, v92, v93);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v91, 0, 1, v93);
            goto LABEL_46;
          }
        }
        else
        {
          if (!v97)
          {
            (*(void (**)(char *, char *, uint64_t))(v94 + 24))(v91, v92, v93);
LABEL_46:
            a3 = v129;
            if (a1 == a2)
              return a1;
            goto LABEL_47;
          }
          (*(void (**)(char *, uint64_t))(v94 + 8))(v91, v93);
        }
        v98 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
        goto LABEL_46;
      }
      v87 = *v75;
      outlined copy of Data._Representation(*v75, v76);
      v88 = *(_QWORD *)v74;
      v89 = *(_QWORD *)(v74 + 8);
      *(_QWORD *)v74 = v87;
      *(_QWORD *)(v74 + 8) = v76;
      outlined consume of Data._Representation(v88, v89);
    }
    v85 = v75[2];
    goto LABEL_39;
  }
  outlined destroy of PartialHandshakeResult((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
LABEL_23:
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  if (a1 == a2)
    return a1;
LABEL_47:
  v99 = *(int *)(a3 + 24);
  v100 = (char *)(a1 + v99);
  v101 = (char *)(a2 + v99);
  outlined destroy of HandshakeStateMachine?(a1 + v99, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v103 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 16))(v100, v101, v103);
      v104 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v105 = v104[9];
      v106 = &v100[v105];
      v107 = &v101[v105];
      v108 = type metadata accessor for SymmetricKey();
      v109 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 16);
      v109(v106, v107, v108);
      v109(&v100[v104[10]], &v101[v104[10]], v108);
      v109(&v100[v104[11]], &v101[v104[11]], v108);
      v109(&v100[v104[12]], &v101[v104[12]], v108);
      goto LABEL_53;
    case 1u:
      v110 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v110 - 8) + 16))(v100, v101, v110);
      v111 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v112 = v111[9];
      v113 = &v100[v112];
      v114 = &v101[v112];
      v115 = type metadata accessor for SymmetricKey();
      v116 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v115 - 8) + 16);
      v116(v113, v114, v115);
      v116(&v100[v111[10]], &v101[v111[10]], v115);
      v116(&v100[v111[11]], &v101[v111[11]], v115);
      goto LABEL_53;
    case 2u:
      v117 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v117 - 8) + 16))(v100, v101, v117);
      v118 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v119 = v118[9];
      v120 = &v100[v119];
      v121 = &v101[v119];
      v122 = type metadata accessor for SymmetricKey();
      v123 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 16);
      v123(v120, v121, v122);
      v123(&v100[v118[10]], &v101[v118[10]], v122);
      v123(&v100[v118[11]], &v101[v118[11]], v122);
      v123(&v100[v118[12]], &v101[v118[12]], v122);
      v123(&v100[v118[13]], &v101[v118[13]], v122);
      v123(&v100[v118[14]], &v101[v118[14]], v122);
      goto LABEL_53;
    case 3u:
      v124 = type metadata accessor for SymmetricKey();
      v125 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 16);
      v125(v100, v101, v124);
      v126 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v125(&v100[v126[9]], &v101[v126[9]], v124);
      v125(&v100[v126[10]], &v101[v126[10]], v124);
      v125(&v100[v126[11]], &v101[v126[11]], v124);
LABEL_53:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
      break;
  }
  return a1;
}

_OWORD *initializeWithTake for HandshakeState.IdleState(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  int *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  int *v61;

  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)((char *)a2 + 60);
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = (int *)type metadata accessor for SessionTicket();
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v9, v10, v14);
    *(_DWORD *)&v9[v11[5]] = *(_DWORD *)&v10[v11[5]];
    *(_DWORD *)&v9[v11[6]] = *(_DWORD *)&v10[v11[6]];
    v15 = v11[7];
    v16 = &v9[v15];
    v17 = &v10[v15];
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
    v18 = v11[8];
    v19 = &v9[v18];
    v20 = &v10[v18];
    *(_OWORD *)v19 = *(_OWORD *)v20;
    *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
    v21 = v11[9];
    v22 = &v9[v21];
    v23 = &v10[v21];
    v24 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
    *(_DWORD *)&v9[v11[10]] = *(_DWORD *)&v10[v11[10]];
    *(_WORD *)&v9[v11[11]] = *(_WORD *)&v10[v11[11]];
    *(_WORD *)&v9[v11[12]] = *(_WORD *)&v10[v11[12]];
    v25 = v11[13];
    v26 = &v9[v25];
    v27 = &v10[v25];
    *((_QWORD *)v26 + 2) = *((_QWORD *)v27 + 2);
    *(_OWORD *)v26 = *(_OWORD *)v27;
    v28 = v11[14];
    v29 = &v9[v28];
    v30 = &v10[v28];
    v31 = type metadata accessor for P256.Signing.PublicKey();
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      v33 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v29, v30, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v34 = *(int *)(a3 + 24);
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v38 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v35, v36, v38);
      v39 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v40 = v39[9];
      v41 = &v35[v40];
      v42 = &v36[v40];
      v43 = type metadata accessor for SymmetricKey();
      v44 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32);
      v44(v41, v42, v43);
      v44(&v35[v39[10]], &v36[v39[10]], v43);
      v44(&v35[v39[11]], &v36[v39[11]], v43);
      v44(&v35[v39[12]], &v36[v39[12]], v43);
      goto LABEL_13;
    case 1u:
      v45 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v35, v36, v45);
      v46 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v47 = v46[9];
      v48 = &v35[v47];
      v49 = &v36[v47];
      v50 = type metadata accessor for SymmetricKey();
      v51 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32);
      v51(v48, v49, v50);
      v51(&v35[v46[10]], &v36[v46[10]], v50);
      v51(&v35[v46[11]], &v36[v46[11]], v50);
      goto LABEL_13;
    case 2u:
      v52 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v35, v36, v52);
      v53 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v54 = v53[9];
      v55 = &v35[v54];
      v56 = &v36[v54];
      v57 = type metadata accessor for SymmetricKey();
      v58 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32);
      v58(v55, v56, v57);
      v58(&v35[v53[10]], &v36[v53[10]], v57);
      v58(&v35[v53[11]], &v36[v53[11]], v57);
      v58(&v35[v53[12]], &v36[v53[12]], v57);
      v58(&v35[v53[13]], &v36[v53[13]], v57);
      v58(&v35[v53[14]], &v36[v53[14]], v57);
      goto LABEL_13;
    case 3u:
      v59 = type metadata accessor for SymmetricKey();
      v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 32);
      v60(v35, v36, v59);
      v61 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v60(&v35[v61[9]], &v36[v61[9]], v59);
      v60(&v35[v61[10]], &v36[v61[10]], v59);
      v60(&v35[v61[11]], &v36[v61[11]], v59);
LABEL_13:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t assignWithTake for HandshakeState.IdleState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, int *);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  int *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  int *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  void (*v90)(char *, char *, uint64_t);
  int *v91;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(void *, uint64_t, uint64_t);
  int v100;
  int v101;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 >> 60 == 15)
    goto LABEL_4;
  v8 = *(_QWORD *)(a2 + 32);
  if (v8 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  outlined consume of Data._Representation(v9, v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
LABEL_6:
  v10 = *(_QWORD *)(a1 + 56);
  if (v10 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(a2 + 56);
  if (v11 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 48);
    goto LABEL_9;
  }
  v12 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v11;
  outlined consume of Data._Representation(v12, v10);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
LABEL_11:
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  v13 = *(int *)(a3 + 20);
  v14 = a1 + v13;
  v15 = (char *)(a2 + v13);
  v16 = (int *)type metadata accessor for SessionTicket();
  v17 = *((_QWORD *)v16 - 1);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18((uint64_t)v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      v21 = type metadata accessor for Date();
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v14, v15, v21);
      *(_DWORD *)(v14 + v16[5]) = *(_DWORD *)&v15[v16[5]];
      *(_DWORD *)(v14 + v16[6]) = *(_DWORD *)&v15[v16[6]];
      v22 = v16[7];
      v23 = v14 + v22;
      v24 = &v15[v22];
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *(_QWORD *)(v23 + 16) = *((_QWORD *)v24 + 2);
      v25 = v16[8];
      v26 = v14 + v25;
      v27 = &v15[v25];
      *(_OWORD *)v26 = *(_OWORD *)v27;
      *(_QWORD *)(v26 + 16) = *((_QWORD *)v27 + 2);
      v28 = v16[9];
      v29 = v14 + v28;
      v30 = &v15[v28];
      v31 = type metadata accessor for SymmetricKey();
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
      *(_DWORD *)(v14 + v16[10]) = *(_DWORD *)&v15[v16[10]];
      *(_WORD *)(v14 + v16[11]) = *(_WORD *)&v15[v16[11]];
      *(_WORD *)(v14 + v16[12]) = *(_WORD *)&v15[v16[12]];
      v32 = v16[13];
      v33 = v14 + v32;
      v34 = &v15[v32];
      *(_QWORD *)(v33 + 16) = *((_QWORD *)v34 + 2);
      *(_OWORD *)v33 = *(_OWORD *)v34;
      v35 = v16[14];
      v36 = (void *)(v14 + v35);
      v37 = &v15[v35];
      v38 = type metadata accessor for P256.Signing.PublicKey();
      v39 = *(_QWORD *)(v38 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
      {
        v40 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
LABEL_26:
      if (a1 == a2)
        return a1;
      goto LABEL_27;
    }
    goto LABEL_17;
  }
  if (v20)
  {
    outlined destroy of PartialHandshakeResult(v14, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
LABEL_17:
    v41 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?)
                                - 8)
                    + 64);
    v42 = (void *)v14;
    v43 = v15;
    goto LABEL_18;
  }
  v44 = type metadata accessor for Date();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 40))(v14, v15, v44);
  *(_DWORD *)(v14 + v16[5]) = *(_DWORD *)&v15[v16[5]];
  *(_DWORD *)(v14 + v16[6]) = *(_DWORD *)&v15[v16[6]];
  v45 = v16[7];
  v46 = v14 + v45;
  v47 = &v15[v45];
  v48 = *(_QWORD *)(v14 + v45);
  v49 = *(_QWORD *)(v14 + v45 + 8);
  *(_OWORD *)(v14 + v45) = *(_OWORD *)&v15[v45];
  outlined consume of Data._Representation(v48, v49);
  *(_QWORD *)(v46 + 16) = *((_QWORD *)v47 + 2);
  v50 = v16[8];
  v51 = v14 + v50;
  v52 = &v15[v50];
  v53 = *(_QWORD *)(v14 + v50);
  v54 = *(_QWORD *)(v14 + v50 + 8);
  *(_OWORD *)(v14 + v50) = *(_OWORD *)&v15[v50];
  outlined consume of Data._Representation(v53, v54);
  *(_QWORD *)(v51 + 16) = *((_QWORD *)v52 + 2);
  v55 = v16[9];
  v56 = v14 + v55;
  v57 = &v15[v55];
  v58 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 40))(v56, v57, v58);
  *(_DWORD *)(v14 + v16[10]) = *(_DWORD *)&v15[v16[10]];
  *(_WORD *)(v14 + v16[11]) = *(_WORD *)&v15[v16[11]];
  *(_WORD *)(v14 + v16[12]) = *(_WORD *)&v15[v16[12]];
  v59 = v16[13];
  v60 = v14 + v59;
  v61 = &v15[v59];
  v62 = *(_QWORD *)(v14 + v59 + 8);
  if (v62 >> 60 == 15)
    goto LABEL_23;
  v63 = *((_QWORD *)v61 + 1);
  if (v63 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(v60);
LABEL_23:
    *(_OWORD *)v60 = *(_OWORD *)v61;
    goto LABEL_36;
  }
  v93 = *(_QWORD *)v60;
  *(_QWORD *)v60 = *(_QWORD *)v61;
  *(_QWORD *)(v60 + 8) = v63;
  outlined consume of Data._Representation(v93, v62);
LABEL_36:
  *(_QWORD *)(v60 + 16) = *((_QWORD *)v61 + 2);
  v94 = v16[14];
  v95 = (void *)(v14 + v94);
  v96 = &v15[v94];
  v97 = type metadata accessor for P256.Signing.PublicKey();
  v98 = *(_QWORD *)(v97 - 8);
  v99 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v98 + 48);
  v100 = v99(v95, 1, v97);
  v101 = v99(v96, 1, v97);
  if (v100)
  {
    if (!v101)
    {
      (*(void (**)(void *, char *, uint64_t))(v98 + 32))(v95, v96, v97);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
      goto LABEL_26;
    }
    goto LABEL_41;
  }
  if (v101)
  {
    (*(void (**)(void *, uint64_t))(v98 + 8))(v95, v97);
LABEL_41:
    v41 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for PeerCertificateBundle.Bundle(0) - 8) + 64);
    v42 = v95;
    v43 = v96;
LABEL_18:
    memcpy(v42, v43, v41);
    if (a1 == a2)
      return a1;
    goto LABEL_27;
  }
  (*(void (**)(void *, char *, uint64_t))(v98 + 40))(v95, v96, v97);
  if (a1 == a2)
    return a1;
LABEL_27:
  v64 = *(int *)(a3 + 24);
  v65 = (char *)(a1 + v64);
  v66 = (char *)(a2 + v64);
  outlined destroy of HandshakeStateMachine?(a1 + v64, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v68 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 32))(v65, v66, v68);
      v69 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v70 = v69[9];
      v71 = &v65[v70];
      v72 = &v66[v70];
      v73 = type metadata accessor for SymmetricKey();
      v74 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32);
      v74(v71, v72, v73);
      v74(&v65[v69[10]], &v66[v69[10]], v73);
      v74(&v65[v69[11]], &v66[v69[11]], v73);
      v74(&v65[v69[12]], &v66[v69[12]], v73);
      goto LABEL_33;
    case 1u:
      v75 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v65, v66, v75);
      v76 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v77 = v76[9];
      v78 = &v65[v77];
      v79 = &v66[v77];
      v80 = type metadata accessor for SymmetricKey();
      v81 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 32);
      v81(v78, v79, v80);
      v81(&v65[v76[10]], &v66[v76[10]], v80);
      v81(&v65[v76[11]], &v66[v76[11]], v80);
      goto LABEL_33;
    case 2u:
      v82 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(v65, v66, v82);
      v83 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v84 = v83[9];
      v85 = &v65[v84];
      v86 = &v66[v84];
      v87 = type metadata accessor for SymmetricKey();
      v88 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 32);
      v88(v85, v86, v87);
      v88(&v65[v83[10]], &v66[v83[10]], v87);
      v88(&v65[v83[11]], &v66[v83[11]], v87);
      v88(&v65[v83[12]], &v66[v83[12]], v87);
      v88(&v65[v83[13]], &v66[v83[13]], v87);
      v88(&v65[v83[14]], &v66[v83[14]], v87);
      goto LABEL_33;
    case 3u:
      v89 = type metadata accessor for SymmetricKey();
      v90 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 32);
      v90(v65, v66, v89);
      v91 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v90(&v65[v91[9]], &v66[v91[9]], v89);
      v90(&v65[v91[10]], &v66[v91[10]], v89);
      v90(&v65[v91[11]], &v66[v91[11]], v89);
LABEL_33:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for HandshakeState.IdleState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0DCA4DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for HandshakeState.IdleState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0DCA590(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for HandshakeState.ClientHelloState(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  int *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  int *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = a2[2];
    v8 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    }
    else
    {
      v10 = a2[3];
      outlined copy of Data._Representation(v10, v8);
      *(_QWORD *)(a1 + 24) = v10;
      *(_QWORD *)(a1 + 32) = v8;
    }
    *(_QWORD *)(a1 + 40) = a2[5];
    v11 = a2[7];
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    }
    else
    {
      v12 = a2[6];
      outlined copy of Data._Representation(v12, a2[7]);
      *(_QWORD *)(a1 + 48) = v12;
      *(_QWORD *)(a1 + 56) = v11;
    }
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    v13 = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 96) = v13;
    v14 = a2[15];
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = v14;
    *(_QWORD *)(a1 + 128) = a2[16];
    v15 = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 160) = v15;
    v16 = v15;
    v17 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v15 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17(a1 + 136, a2 + 17, v16);
    v18 = *(int *)(a3 + 36);
    v19 = (char *)(a1 + v18);
    v20 = (char *)a2 + v18;
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v22 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
        v23 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        v24 = v23[9];
        v25 = &v19[v24];
        v26 = &v20[v24];
        v27 = type metadata accessor for SymmetricKey();
        v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
        v28(v25, v26, v27);
        v28(&v19[v23[10]], &v20[v23[10]], v27);
        v28(&v19[v23[11]], &v20[v23[11]], v27);
        v28(&v19[v23[12]], &v20[v23[12]], v27);
        goto LABEL_15;
      case 1u:
        v29 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v19, v20, v29);
        v30 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        v31 = v30[9];
        v32 = &v19[v31];
        v33 = &v20[v31];
        v34 = type metadata accessor for SymmetricKey();
        v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
        v35(v32, v33, v34);
        v35(&v19[v30[10]], &v20[v30[10]], v34);
        v35(&v19[v30[11]], &v20[v30[11]], v34);
        goto LABEL_15;
      case 2u:
        v36 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v19, v20, v36);
        v37 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        v38 = v37[9];
        v39 = &v19[v38];
        v40 = &v20[v38];
        v41 = type metadata accessor for SymmetricKey();
        v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16);
        v42(v39, v40, v41);
        v42(&v19[v37[10]], &v20[v37[10]], v41);
        v42(&v19[v37[11]], &v20[v37[11]], v41);
        v42(&v19[v37[12]], &v20[v37[12]], v41);
        v42(&v19[v37[13]], &v20[v37[13]], v41);
        v42(&v19[v37[14]], &v20[v37[14]], v41);
        goto LABEL_15;
      case 3u:
        v43 = type metadata accessor for SymmetricKey();
        v44 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16);
        v44(v19, v20, v43);
        v45 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v44(&v19[v45[9]], &v20[v45[9]], v43);
        v44(&v19[v45[10]], &v20[v45[10]], v43);
        v44(&v19[v45[11]], &v20[v45[11]], v43);
LABEL_15:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
        break;
    }
    v46 = *(int *)(a3 + 40);
    v47 = (char *)(a1 + v46);
    v48 = (char *)a2 + v46;
    v49 = (int *)type metadata accessor for SessionTicket();
    v50 = *((_QWORD *)v49 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v50 + 48))(v48, 1, v49))
    {
      v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      v52 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v47, v48, v52);
      *(_DWORD *)&v47[v49[5]] = *(_DWORD *)&v48[v49[5]];
      *(_DWORD *)&v47[v49[6]] = *(_DWORD *)&v48[v49[6]];
      v53 = v49[7];
      v54 = (uint64_t *)&v47[v53];
      v55 = &v48[v53];
      v56 = *(_QWORD *)&v48[v53];
      v57 = *(_QWORD *)&v48[v53 + 8];
      outlined copy of Data._Representation(v56, v57);
      *v54 = v56;
      v54[1] = v57;
      v54[2] = *((_QWORD *)v55 + 2);
      v58 = v49[8];
      v59 = (uint64_t *)&v47[v58];
      v60 = &v48[v58];
      v61 = *(_QWORD *)&v48[v58];
      v62 = *(_QWORD *)&v48[v58 + 8];
      outlined copy of Data._Representation(v61, v62);
      *v59 = v61;
      v59[1] = v62;
      v59[2] = *((_QWORD *)v60 + 2);
      v63 = v49[9];
      v64 = &v47[v63];
      v65 = &v48[v63];
      v66 = type metadata accessor for SymmetricKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
      *(_DWORD *)&v47[v49[10]] = *(_DWORD *)&v48[v49[10]];
      *(_WORD *)&v47[v49[11]] = *(_WORD *)&v48[v49[11]];
      *(_WORD *)&v47[v49[12]] = *(_WORD *)&v48[v49[12]];
      v67 = v49[13];
      v68 = &v47[v67];
      v69 = (uint64_t *)&v48[v67];
      v70 = *(_QWORD *)&v48[v67 + 8];
      if (v70 >> 60 == 15)
      {
        *(_OWORD *)v68 = *(_OWORD *)v69;
      }
      else
      {
        v71 = *v69;
        outlined copy of Data._Representation(*v69, v70);
        *(_QWORD *)v68 = v71;
        *((_QWORD *)v68 + 1) = v70;
      }
      *((_QWORD *)v68 + 2) = v69[2];
      v72 = v49[14];
      v73 = &v47[v72];
      v74 = &v48[v72];
      v75 = type metadata accessor for P256.Signing.PublicKey();
      v76 = *(_QWORD *)(v75 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
      {
        v77 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v73, v74, v75);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v50 + 56))(v47, 0, 1, v49);
    }
  }
  return a1;
}

uint64_t assignWithCopy for HandshakeState.ClientHelloState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  int *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  int *v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, int *);
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  __int128 v86;
  size_t v87;
  void *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  unint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  void *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(void *, uint64_t, uint64_t);
  int v133;
  int v134;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (__int128 *)(a1 + 24);
  v7 = (__int128 *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) >> 60 == 15)
  {
    if (v8 >> 60 == 15)
    {
      v9 = *v7;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *v6 = v9;
      goto LABEL_9;
    }
    v11 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v11, *(_QWORD *)(a2 + 32));
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v8;
  }
  else
  {
    if (v8 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 24);
      v10 = *(_QWORD *)(a2 + 40);
      *v6 = *v7;
      *(_QWORD *)(a1 + 40) = v10;
      goto LABEL_9;
    }
    v12 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v12, *(_QWORD *)(a2 + 32));
    v13 = *(_QWORD *)(a1 + 24);
    v14 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v8;
    outlined consume of Data._Representation(v13, v14);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
LABEL_9:
  v15 = (__int128 *)(a1 + 48);
  v16 = (__int128 *)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56) >> 60 == 15)
  {
    if (v17 >> 60 == 15)
    {
      v18 = *v16;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *v15 = v18;
      goto LABEL_17;
    }
    v20 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v20, *(_QWORD *)(a2 + 56));
    *(_QWORD *)(a1 + 48) = v20;
    *(_QWORD *)(a1 + 56) = v17;
  }
  else
  {
    if (v17 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 48);
      v19 = *(_QWORD *)(a2 + 64);
      *v15 = *v16;
      *(_QWORD *)(a1 + 64) = v19;
      goto LABEL_17;
    }
    v21 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v21, *(_QWORD *)(a2 + 56));
    v22 = *(_QWORD *)(a1 + 48);
    v23 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = v21;
    *(_QWORD *)(a1 + 56) = v17;
    outlined consume of Data._Representation(v22, v23);
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
LABEL_17:
  v24 = *(_WORD *)(a2 + 72);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_WORD *)(a1 + 72) = v24;
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 136), (uint64_t *)(a2 + 136));
  if (a1 != a2)
  {
    v25 = *(int *)(a3 + 36);
    v26 = (char *)(a1 + v25);
    v27 = (char *)(a2 + v25);
    outlined destroy of HandshakeStateMachine?(a1 + v25, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v29 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
        v30 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        v31 = v30[9];
        v32 = &v26[v31];
        v33 = a3;
        v34 = &v27[v31];
        v35 = type metadata accessor for SymmetricKey();
        v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
        v37 = v34;
        a3 = v33;
        v36(v32, v37, v35);
        v36(&v26[v30[10]], &v27[v30[10]], v35);
        v36(&v26[v30[11]], &v27[v30[11]], v35);
        v36(&v26[v30[12]], &v27[v30[12]], v35);
        goto LABEL_24;
      case 1u:
        v38 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v26, v27, v38);
        v39 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        v40 = v39[9];
        v41 = &v26[v40];
        v42 = a3;
        v43 = &v27[v40];
        v44 = type metadata accessor for SymmetricKey();
        v45 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16);
        v46 = v43;
        a3 = v42;
        v45(v41, v46, v44);
        v45(&v26[v39[10]], &v27[v39[10]], v44);
        v45(&v26[v39[11]], &v27[v39[11]], v44);
        goto LABEL_24;
      case 2u:
        v47 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v26, v27, v47);
        v48 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        v49 = v48[9];
        v50 = &v26[v49];
        v51 = a3;
        v52 = &v27[v49];
        v53 = type metadata accessor for SymmetricKey();
        v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
        v55 = v52;
        a3 = v51;
        v54(v50, v55, v53);
        v54(&v26[v48[10]], &v27[v48[10]], v53);
        v54(&v26[v48[11]], &v27[v48[11]], v53);
        v54(&v26[v48[12]], &v27[v48[12]], v53);
        v54(&v26[v48[13]], &v27[v48[13]], v53);
        v54(&v26[v48[14]], &v27[v48[14]], v53);
        goto LABEL_24;
      case 3u:
        v56 = type metadata accessor for SymmetricKey();
        v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16);
        v57(v26, v27, v56);
        v58 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v57(&v26[v58[9]], &v27[v58[9]], v56);
        v57(&v26[v58[10]], &v27[v58[10]], v56);
        v57(&v26[v58[11]], &v27[v58[11]], v56);
LABEL_24:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        break;
    }
  }
  v59 = *(int *)(a3 + 40);
  v60 = a1 + v59;
  v61 = (char *)(a2 + v59);
  v62 = (int *)type metadata accessor for SessionTicket();
  v63 = *((_QWORD *)v62 - 1);
  v64 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v63 + 48);
  v65 = v64(v60, 1, v62);
  v66 = v64((uint64_t)v61, 1, v62);
  if (!v65)
  {
    if (v66)
    {
      outlined destroy of PartialHandshakeResult(v60, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
      goto LABEL_31;
    }
    v90 = type metadata accessor for Date();
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 24))(v60, v61, v90);
    *(_DWORD *)(v60 + v62[5]) = *(_DWORD *)&v61[v62[5]];
    *(_DWORD *)(v60 + v62[6]) = *(_DWORD *)&v61[v62[6]];
    v91 = v62[7];
    v92 = (uint64_t *)(v60 + v91);
    v93 = &v61[v91];
    v94 = *(_QWORD *)&v61[v91];
    v95 = *(_QWORD *)&v61[v91 + 8];
    outlined copy of Data._Representation(v94, v95);
    v96 = *v92;
    v97 = v92[1];
    *v92 = v94;
    v92[1] = v95;
    outlined consume of Data._Representation(v96, v97);
    v92[2] = *((_QWORD *)v93 + 2);
    v98 = v62[8];
    v99 = (uint64_t *)(v60 + v98);
    v100 = &v61[v98];
    v101 = *(_QWORD *)&v61[v98];
    v102 = *(_QWORD *)&v61[v98 + 8];
    outlined copy of Data._Representation(v101, v102);
    v103 = *v99;
    v104 = v99[1];
    *v99 = v101;
    v99[1] = v102;
    outlined consume of Data._Representation(v103, v104);
    v99[2] = *((_QWORD *)v100 + 2);
    v105 = v62[9];
    v106 = v60 + v105;
    v107 = &v61[v105];
    v108 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 24))(v106, v107, v108);
    *(_DWORD *)(v60 + v62[10]) = *(_DWORD *)&v61[v62[10]];
    *(_WORD *)(v60 + v62[11]) = *(_WORD *)&v61[v62[11]];
    *(_WORD *)(v60 + v62[12]) = *(_WORD *)&v61[v62[12]];
    v109 = v62[13];
    v110 = v60 + v109;
    v111 = (uint64_t *)&v61[v109];
    v112 = *(_QWORD *)&v61[v109 + 8];
    if (*(_QWORD *)(v60 + v109 + 8) >> 60 == 15)
    {
      if (v112 >> 60 == 15)
      {
        v113 = *(_OWORD *)v111;
        *(_QWORD *)(v110 + 16) = v111[2];
        *(_OWORD *)v110 = v113;
LABEL_48:
        v127 = v62[14];
        v128 = (void *)(v60 + v127);
        v129 = &v61[v127];
        v130 = type metadata accessor for P256.Signing.PublicKey();
        v131 = *(_QWORD *)(v130 - 8);
        v132 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v131 + 48);
        v133 = v132(v128, 1, v130);
        v134 = v132(v129, 1, v130);
        if (v133)
        {
          if (!v134)
          {
            (*(void (**)(void *, char *, uint64_t))(v131 + 16))(v128, v129, v130);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v131 + 56))(v128, 0, 1, v130);
            return a1;
          }
        }
        else
        {
          if (!v134)
          {
            (*(void (**)(void *, char *, uint64_t))(v131 + 24))(v128, v129, v130);
            return a1;
          }
          (*(void (**)(void *, uint64_t))(v131 + 8))(v128, v130);
        }
        v87 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for PeerCertificateBundle.Bundle(0) - 8) + 64);
        v88 = v128;
        v89 = v129;
        goto LABEL_32;
      }
      v123 = *v111;
      outlined copy of Data._Representation(*v111, v112);
      *(_QWORD *)v110 = v123;
      *(_QWORD *)(v110 + 8) = v112;
    }
    else
    {
      if (v112 >> 60 == 15)
      {
        outlined destroy of ByteBuffer(v110);
        v122 = v111[2];
        *(_OWORD *)v110 = *(_OWORD *)v111;
LABEL_47:
        *(_QWORD *)(v110 + 16) = v122;
        goto LABEL_48;
      }
      v124 = *v111;
      outlined copy of Data._Representation(*v111, v112);
      v125 = *(_QWORD *)v110;
      v126 = *(_QWORD *)(v110 + 8);
      *(_QWORD *)v110 = v124;
      *(_QWORD *)(v110 + 8) = v112;
      outlined consume of Data._Representation(v125, v126);
    }
    v122 = v111[2];
    goto LABEL_47;
  }
  if (v66)
  {
LABEL_31:
    v87 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?)
                                - 8)
                    + 64);
    v88 = (void *)v60;
    v89 = v61;
LABEL_32:
    memcpy(v88, v89, v87);
    return a1;
  }
  v67 = type metadata accessor for Date();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v60, v61, v67);
  *(_DWORD *)(v60 + v62[5]) = *(_DWORD *)&v61[v62[5]];
  *(_DWORD *)(v60 + v62[6]) = *(_DWORD *)&v61[v62[6]];
  v68 = v62[7];
  v69 = (uint64_t *)(v60 + v68);
  v70 = &v61[v68];
  v71 = *(_QWORD *)&v61[v68];
  v72 = *(_QWORD *)&v61[v68 + 8];
  outlined copy of Data._Representation(v71, v72);
  *v69 = v71;
  v69[1] = v72;
  v69[2] = *((_QWORD *)v70 + 2);
  v73 = v62[8];
  v74 = (uint64_t *)(v60 + v73);
  v75 = &v61[v73];
  v76 = *(_QWORD *)&v61[v73];
  v77 = *(_QWORD *)&v61[v73 + 8];
  outlined copy of Data._Representation(v76, v77);
  *v74 = v76;
  v74[1] = v77;
  v74[2] = *((_QWORD *)v75 + 2);
  v78 = v62[9];
  v79 = v60 + v78;
  v80 = &v61[v78];
  v81 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v79, v80, v81);
  *(_DWORD *)(v60 + v62[10]) = *(_DWORD *)&v61[v62[10]];
  *(_WORD *)(v60 + v62[11]) = *(_WORD *)&v61[v62[11]];
  *(_WORD *)(v60 + v62[12]) = *(_WORD *)&v61[v62[12]];
  v82 = v62[13];
  v83 = v60 + v82;
  v84 = (uint64_t *)&v61[v82];
  v85 = *(_QWORD *)&v61[v82 + 8];
  if (v85 >> 60 == 15)
  {
    v86 = *(_OWORD *)v84;
    *(_QWORD *)(v83 + 16) = v84[2];
    *(_OWORD *)v83 = v86;
  }
  else
  {
    v114 = *v84;
    outlined copy of Data._Representation(*v84, v85);
    *(_QWORD *)v83 = v114;
    *(_QWORD *)(v83 + 8) = v85;
    *(_QWORD *)(v83 + 16) = v84[2];
  }
  v115 = v62[14];
  v116 = (void *)(v60 + v115);
  v117 = &v61[v115];
  v118 = type metadata accessor for P256.Signing.PublicKey();
  v119 = *(_QWORD *)(v118 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118))
  {
    v120 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v119 + 16))(v116, v117, v118);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v116, 0, 1, v118);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v63 + 56))(v60, 0, 1, v62);
  return a1;
}

uint64_t initializeWithTake for HandshakeState.ClientHelloState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  int *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v3 = a3;
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  v9 = *(int *)(a3 + 36);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v13 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
      v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v15 = v14[9];
      v16 = &v10[v15];
      v17 = v3;
      v18 = &v11[v15];
      v19 = type metadata accessor for SymmetricKey();
      v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
      v21 = v18;
      v3 = v17;
      v20(v16, v21, v19);
      v20(&v10[v14[10]], &v11[v14[10]], v19);
      v20(&v10[v14[11]], &v11[v14[11]], v19);
      v20(&v10[v14[12]], &v11[v14[12]], v19);
      goto LABEL_7;
    case 1u:
      v22 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v10, v11, v22);
      v23 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v24 = v23[9];
      v25 = &v10[v24];
      v26 = v3;
      v27 = &v11[v24];
      v28 = type metadata accessor for SymmetricKey();
      v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32);
      v30 = v27;
      v3 = v26;
      v29(v25, v30, v28);
      v29(&v10[v23[10]], &v11[v23[10]], v28);
      v29(&v10[v23[11]], &v11[v23[11]], v28);
      goto LABEL_7;
    case 2u:
      v31 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v10, v11, v31);
      v32 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v33 = v32[9];
      v34 = &v10[v33];
      v35 = v3;
      v36 = &v11[v33];
      v37 = type metadata accessor for SymmetricKey();
      v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32);
      v39 = v36;
      v3 = v35;
      v38(v34, v39, v37);
      v38(&v10[v32[10]], &v11[v32[10]], v37);
      v38(&v10[v32[11]], &v11[v32[11]], v37);
      v38(&v10[v32[12]], &v11[v32[12]], v37);
      v38(&v10[v32[13]], &v11[v32[13]], v37);
      v38(&v10[v32[14]], &v11[v32[14]], v37);
      goto LABEL_7;
    case 3u:
      v40 = type metadata accessor for SymmetricKey();
      v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32);
      v41(v10, v11, v40);
      v42 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v41(&v10[v42[9]], &v11[v42[9]], v40);
      v41(&v10[v42[10]], &v11[v42[10]], v40);
      v41(&v10[v42[11]], &v11[v42[11]], v40);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      break;
  }
  v43 = *(int *)(v3 + 40);
  v44 = (char *)(a1 + v43);
  v45 = (char *)(a2 + v43);
  v46 = (int *)type metadata accessor for SessionTicket();
  v47 = *((_QWORD *)v46 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v47 + 48))(v45, 1, v46))
  {
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    v49 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v44, v45, v49);
    *(_DWORD *)&v44[v46[5]] = *(_DWORD *)&v45[v46[5]];
    *(_DWORD *)&v44[v46[6]] = *(_DWORD *)&v45[v46[6]];
    v50 = v46[7];
    v51 = &v44[v50];
    v52 = &v45[v50];
    *(_OWORD *)v51 = *(_OWORD *)v52;
    *((_QWORD *)v51 + 2) = *((_QWORD *)v52 + 2);
    v53 = v46[8];
    v54 = &v44[v53];
    v55 = &v45[v53];
    *(_OWORD *)v54 = *(_OWORD *)v55;
    *((_QWORD *)v54 + 2) = *((_QWORD *)v55 + 2);
    v56 = v46[9];
    v57 = &v44[v56];
    v58 = &v45[v56];
    v59 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 32))(v57, v58, v59);
    *(_DWORD *)&v44[v46[10]] = *(_DWORD *)&v45[v46[10]];
    *(_WORD *)&v44[v46[11]] = *(_WORD *)&v45[v46[11]];
    *(_WORD *)&v44[v46[12]] = *(_WORD *)&v45[v46[12]];
    v60 = v46[13];
    v61 = &v44[v60];
    v62 = &v45[v60];
    *((_QWORD *)v61 + 2) = *((_QWORD *)v62 + 2);
    *(_OWORD *)v61 = *(_OWORD *)v62;
    v63 = v46[14];
    v64 = &v44[v63];
    v65 = &v45[v63];
    v66 = type metadata accessor for P256.Signing.PublicKey();
    v67 = *(_QWORD *)(v66 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
    {
      v68 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v64, v65, v66);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v47 + 56))(v44, 0, 1, v46);
  }
  return a1;
}

uint64_t assignWithTake for HandshakeState.ClientHelloState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  int *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int *v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, int *);
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  size_t v77;
  void *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(void *, uint64_t, uint64_t);
  int v108;
  int v109;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 >> 60 == 15)
    goto LABEL_4;
  v8 = *(_QWORD *)(a2 + 32);
  if (v8 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  outlined consume of Data._Representation(v9, v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
LABEL_6:
  v10 = *(_QWORD *)(a1 + 56);
  if (v10 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(a2 + 56);
  if (v11 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 48);
    goto LABEL_9;
  }
  v12 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v11;
  outlined consume of Data._Representation(v12, v10);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
LABEL_11:
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  v13 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v13;
  v14 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v14;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 136);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  if (a1 != a2)
  {
    v15 = *(int *)(a3 + 36);
    v16 = (char *)(a1 + v15);
    v17 = (char *)(a2 + v15);
    outlined destroy of HandshakeStateMachine?(a1 + v15, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v19 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
        v20 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        v21 = v20[9];
        v22 = &v16[v21];
        v23 = a3;
        v24 = &v17[v21];
        v25 = type metadata accessor for SymmetricKey();
        v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32);
        v27 = v24;
        a3 = v23;
        v26(v22, v27, v25);
        v26(&v16[v20[10]], &v17[v20[10]], v25);
        v26(&v16[v20[11]], &v17[v20[11]], v25);
        v26(&v16[v20[12]], &v17[v20[12]], v25);
        goto LABEL_18;
      case 1u:
        v28 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v16, v17, v28);
        v29 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        v30 = v29[9];
        v31 = &v16[v30];
        v32 = a3;
        v33 = &v17[v30];
        v34 = type metadata accessor for SymmetricKey();
        v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32);
        v36 = v33;
        a3 = v32;
        v35(v31, v36, v34);
        v35(&v16[v29[10]], &v17[v29[10]], v34);
        v35(&v16[v29[11]], &v17[v29[11]], v34);
        goto LABEL_18;
      case 2u:
        v37 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v16, v17, v37);
        v38 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        v39 = v38[9];
        v40 = &v16[v39];
        v41 = a3;
        v42 = &v17[v39];
        v43 = type metadata accessor for SymmetricKey();
        v44 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32);
        v45 = v42;
        a3 = v41;
        v44(v40, v45, v43);
        v44(&v16[v38[10]], &v17[v38[10]], v43);
        v44(&v16[v38[11]], &v17[v38[11]], v43);
        v44(&v16[v38[12]], &v17[v38[12]], v43);
        v44(&v16[v38[13]], &v17[v38[13]], v43);
        v44(&v16[v38[14]], &v17[v38[14]], v43);
        goto LABEL_18;
      case 3u:
        v46 = type metadata accessor for SymmetricKey();
        v47 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32);
        v47(v16, v17, v46);
        v48 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v47(&v16[v48[9]], &v17[v48[9]], v46);
        v47(&v16[v48[10]], &v17[v48[10]], v46);
        v47(&v16[v48[11]], &v17[v48[11]], v46);
LABEL_18:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        break;
    }
  }
  v49 = *(int *)(a3 + 40);
  v50 = a1 + v49;
  v51 = (char *)(a2 + v49);
  v52 = (int *)type metadata accessor for SessionTicket();
  v53 = *((_QWORD *)v52 - 1);
  v54 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v53 + 48);
  v55 = v54(v50, 1, v52);
  v56 = v54((uint64_t)v51, 1, v52);
  if (!v55)
  {
    if (v56)
    {
      outlined destroy of PartialHandshakeResult(v50, (uint64_t (*)(_QWORD))type metadata accessor for SessionTicket);
      goto LABEL_25;
    }
    v80 = type metadata accessor for Date();
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 40))(v50, v51, v80);
    *(_DWORD *)(v50 + v52[5]) = *(_DWORD *)&v51[v52[5]];
    *(_DWORD *)(v50 + v52[6]) = *(_DWORD *)&v51[v52[6]];
    v81 = v52[7];
    v82 = v50 + v81;
    v83 = &v51[v81];
    v84 = *(_QWORD *)(v50 + v81);
    v85 = *(_QWORD *)(v50 + v81 + 8);
    *(_OWORD *)(v50 + v81) = *(_OWORD *)&v51[v81];
    outlined consume of Data._Representation(v84, v85);
    *(_QWORD *)(v82 + 16) = *((_QWORD *)v83 + 2);
    v86 = v52[8];
    v87 = v50 + v86;
    v88 = &v51[v86];
    v89 = *(_QWORD *)(v50 + v86);
    v90 = *(_QWORD *)(v50 + v86 + 8);
    *(_OWORD *)(v50 + v86) = *(_OWORD *)&v51[v86];
    outlined consume of Data._Representation(v89, v90);
    *(_QWORD *)(v87 + 16) = *((_QWORD *)v88 + 2);
    v91 = v52[9];
    v92 = v50 + v91;
    v93 = &v51[v91];
    v94 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 40))(v92, v93, v94);
    *(_DWORD *)(v50 + v52[10]) = *(_DWORD *)&v51[v52[10]];
    *(_WORD *)(v50 + v52[11]) = *(_WORD *)&v51[v52[11]];
    *(_WORD *)(v50 + v52[12]) = *(_WORD *)&v51[v52[12]];
    v95 = v52[13];
    v96 = (uint64_t *)(v50 + v95);
    v97 = (uint64_t *)&v51[v95];
    v98 = *(_QWORD *)(v50 + v95 + 8);
    if (v98 >> 60 != 15)
    {
      v99 = v97[1];
      if (v99 >> 60 != 15)
      {
        v101 = *v96;
        *v96 = *v97;
        v96[1] = v99;
        outlined consume of Data._Representation(v101, v98);
        goto LABEL_35;
      }
      outlined destroy of ByteBuffer((uint64_t)v96);
    }
    *(_OWORD *)v96 = *(_OWORD *)v97;
LABEL_35:
    v96[2] = v97[2];
    v102 = v52[14];
    v103 = (void *)(v50 + v102);
    v104 = &v51[v102];
    v105 = type metadata accessor for P256.Signing.PublicKey();
    v106 = *(_QWORD *)(v105 - 8);
    v107 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v106 + 48);
    v108 = v107(v103, 1, v105);
    v109 = v107(v104, 1, v105);
    if (v108)
    {
      if (!v109)
      {
        (*(void (**)(void *, char *, uint64_t))(v106 + 32))(v103, v104, v105);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v103, 0, 1, v105);
        return a1;
      }
    }
    else
    {
      if (!v109)
      {
        (*(void (**)(void *, char *, uint64_t))(v106 + 40))(v103, v104, v105);
        return a1;
      }
      (*(void (**)(void *, uint64_t))(v106 + 8))(v103, v105);
    }
    v77 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for PeerCertificateBundle.Bundle(0) - 8) + 64);
    v78 = v103;
    v79 = v104;
    goto LABEL_26;
  }
  if (v56)
  {
LABEL_25:
    v77 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?)
                                - 8)
                    + 64);
    v78 = (void *)v50;
    v79 = v51;
LABEL_26:
    memcpy(v78, v79, v77);
    return a1;
  }
  v57 = type metadata accessor for Date();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v50, v51, v57);
  *(_DWORD *)(v50 + v52[5]) = *(_DWORD *)&v51[v52[5]];
  *(_DWORD *)(v50 + v52[6]) = *(_DWORD *)&v51[v52[6]];
  v58 = v52[7];
  v59 = v50 + v58;
  v60 = &v51[v58];
  *(_OWORD *)v59 = *(_OWORD *)v60;
  *(_QWORD *)(v59 + 16) = *((_QWORD *)v60 + 2);
  v61 = v52[8];
  v62 = v50 + v61;
  v63 = &v51[v61];
  *(_OWORD *)v62 = *(_OWORD *)v63;
  *(_QWORD *)(v62 + 16) = *((_QWORD *)v63 + 2);
  v64 = v52[9];
  v65 = v50 + v64;
  v66 = &v51[v64];
  v67 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(v65, v66, v67);
  *(_DWORD *)(v50 + v52[10]) = *(_DWORD *)&v51[v52[10]];
  *(_WORD *)(v50 + v52[11]) = *(_WORD *)&v51[v52[11]];
  *(_WORD *)(v50 + v52[12]) = *(_WORD *)&v51[v52[12]];
  v68 = v52[13];
  v69 = v50 + v68;
  v70 = &v51[v68];
  *(_QWORD *)(v69 + 16) = *((_QWORD *)v70 + 2);
  *(_OWORD *)v69 = *(_OWORD *)v70;
  v71 = v52[14];
  v72 = (void *)(v50 + v71);
  v73 = &v51[v71];
  v74 = type metadata accessor for P256.Signing.PublicKey();
  v75 = *(_QWORD *)(v74 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
  {
    v76 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v75 + 32))(v72, v73, v74);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v53 + 56))(v50, 0, 1, v52);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandshakeState.ClientHelloState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0DCC4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 36);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for HandshakeState.ClientHelloState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0DCC5A8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 36);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for HandshakeState.ServerHelloState(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  int *v73;
  uint64_t v74;
  int *v76;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = a2[2];
    v8 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    }
    else
    {
      v10 = a2[3];
      outlined copy of Data._Representation(v10, v8);
      *(_QWORD *)(a1 + 24) = v10;
      *(_QWORD *)(a1 + 32) = v8;
    }
    *(_QWORD *)(a1 + 40) = a2[5];
    v11 = a2[7];
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    }
    else
    {
      v12 = a2[6];
      outlined copy of Data._Representation(v12, a2[7]);
      *(_QWORD *)(a1 + 48) = v12;
      *(_QWORD *)(a1 + 56) = v11;
    }
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    v13 = v6[5];
    v14 = a1 + v13;
    v15 = (uint64_t)a2 + v13;
    type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
    v76 = v6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v16 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
      v17 = (int *)type metadata accessor for SessionTicket();
      *(_DWORD *)(v14 + v17[5]) = *(_DWORD *)(v15 + v17[5]);
      *(_DWORD *)(v14 + v17[6]) = *(_DWORD *)(v15 + v17[6]);
      v18 = v17[7];
      v19 = (uint64_t *)(v14 + v18);
      v20 = v15 + v18;
      v21 = *(_QWORD *)(v15 + v18);
      v22 = *(_QWORD *)(v15 + v18 + 8);
      outlined copy of Data._Representation(v21, v22);
      *v19 = v21;
      v19[1] = v22;
      v19[2] = *(_QWORD *)(v20 + 16);
      v23 = v17[8];
      v24 = (uint64_t *)(v14 + v23);
      v25 = v15 + v23;
      v26 = *(_QWORD *)(v15 + v23);
      v27 = *(_QWORD *)(v15 + v23 + 8);
      outlined copy of Data._Representation(v26, v27);
      *v24 = v26;
      v24[1] = v27;
      v24[2] = *(_QWORD *)(v25 + 16);
      v28 = v17[9];
      v29 = v14 + v28;
      v30 = v15 + v28;
      v31 = type metadata accessor for SymmetricKey();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
      *(_DWORD *)(v14 + v17[10]) = *(_DWORD *)(v15 + v17[10]);
      *(_WORD *)(v14 + v17[11]) = *(_WORD *)(v15 + v17[11]);
      *(_WORD *)(v14 + v17[12]) = *(_WORD *)(v15 + v17[12]);
      v32 = v17[13];
      v33 = v14 + v32;
      v34 = (uint64_t *)(v15 + v32);
      v35 = *(_QWORD *)(v15 + v32 + 8);
      if (v35 >> 60 == 15)
      {
        *(_OWORD *)v33 = *(_OWORD *)v34;
      }
      else
      {
        v36 = *v34;
        outlined copy of Data._Representation(*v34, v35);
        *(_QWORD *)v33 = v36;
        *(_QWORD *)(v33 + 8) = v35;
      }
      *(_QWORD *)(v33 + 16) = v34[2];
      v6 = v76;
      v37 = v17[14];
      v38 = (void *)(v14 + v37);
      v39 = (const void *)(v15 + v37);
      v40 = type metadata accessor for P256.Signing.PublicKey();
      v41 = *(_QWORD *)(v40 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
      {
        v42 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v41 + 16))(v38, v39, v40);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      }
    }
    else
    {
      *(_DWORD *)v14 = *(_DWORD *)v15;
      *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    v43 = v6[6];
    v44 = (char *)(a1 + v43);
    v45 = (char *)a2 + v43;
    v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v47 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v44, v45, v47);
        v48 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        v49 = v48[9];
        v50 = &v44[v49];
        v51 = &v45[v49];
        v52 = type metadata accessor for SymmetricKey();
        v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
        v53(v50, v51, v52);
        v53(&v44[v48[10]], &v45[v48[10]], v52);
        v53(&v44[v48[11]], &v45[v48[11]], v52);
        v54 = v52;
        v6 = v76;
        v53(&v44[v48[12]], &v45[v48[12]], v54);
        goto LABEL_23;
      case 1u:
        v55 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v44, v45, v55);
        v56 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        v57 = v56[9];
        v58 = &v44[v57];
        v59 = &v45[v57];
        v60 = type metadata accessor for SymmetricKey();
        v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
        v61(v58, v59, v60);
        v61(&v44[v56[10]], &v45[v56[10]], v60);
        v62 = v60;
        v6 = v76;
        v61(&v44[v56[11]], &v45[v56[11]], v62);
        goto LABEL_23;
      case 2u:
        v63 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v44, v45, v63);
        v64 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        v65 = v64[9];
        v66 = &v44[v65];
        v67 = &v45[v65];
        v68 = type metadata accessor for SymmetricKey();
        v69 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16);
        v69(v66, v67, v68);
        v69(&v44[v64[10]], &v45[v64[10]], v68);
        v69(&v44[v64[11]], &v45[v64[11]], v68);
        v69(&v44[v64[12]], &v45[v64[12]], v68);
        v69(&v44[v64[13]], &v45[v64[13]], v68);
        v70 = v68;
        v6 = v76;
        v69(&v44[v64[14]], &v45[v64[14]], v70);
        goto LABEL_23;
      case 3u:
        v71 = type metadata accessor for SymmetricKey();
        v72 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16);
        v72(v44, v45, v71);
        v73 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v72(&v44[v73[9]], &v45[v73[9]], v71);
        v72(&v44[v73[10]], &v45[v73[10]], v71);
        v72(&v44[v73[11]], &v45[v73[11]], v71);
LABEL_23:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
        break;
    }
    v74 = v6[8];
    *(_WORD *)(a1 + v6[7]) = *(_WORD *)((char *)a2 + v6[7]);
    *(_WORD *)(a1 + v74) = *(_WORD *)((char *)a2 + v74);
  }
  return a1;
}

uint64_t assignWithCopy for HandshakeState.ServerHelloState(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t);
  int *v86;
  int *v88;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (__int128 *)(a1 + 24);
  v7 = (__int128 *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) >> 60 == 15)
  {
    if (v8 >> 60 == 15)
    {
      v9 = *v7;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *v6 = v9;
      goto LABEL_9;
    }
    v11 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v11, *(_QWORD *)(a2 + 32));
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v8;
  }
  else
  {
    if (v8 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 24);
      v10 = *(_QWORD *)(a2 + 40);
      *v6 = *v7;
      *(_QWORD *)(a1 + 40) = v10;
      goto LABEL_9;
    }
    v12 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v12, *(_QWORD *)(a2 + 32));
    v13 = *(_QWORD *)(a1 + 24);
    v14 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v8;
    outlined consume of Data._Representation(v13, v14);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
LABEL_9:
  v15 = (__int128 *)(a1 + 48);
  v16 = (__int128 *)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56) >> 60 == 15)
  {
    if (v17 >> 60 == 15)
    {
      v18 = *v16;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *v15 = v18;
      goto LABEL_17;
    }
    v20 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v20, *(_QWORD *)(a2 + 56));
    *(_QWORD *)(a1 + 48) = v20;
    *(_QWORD *)(a1 + 56) = v17;
  }
  else
  {
    if (v17 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 48);
      v19 = *(_QWORD *)(a2 + 64);
      *v15 = *v16;
      *(_QWORD *)(a1 + 64) = v19;
      goto LABEL_17;
    }
    v21 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v21, *(_QWORD *)(a2 + 56));
    v22 = *(_QWORD *)(a1 + 48);
    v23 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = v21;
    *(_QWORD *)(a1 + 56) = v17;
    outlined consume of Data._Representation(v22, v23);
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
LABEL_17:
  v24 = *(_WORD *)(a2 + 72);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_WORD *)(a1 + 72) = v24;
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  if (a1 != a2)
  {
    v25 = a3[5];
    v26 = a1 + v25;
    v27 = a2 + v25;
    outlined destroy of PartialHandshakeResult(a1 + v25, type metadata accessor for HandshakeState.ServerHelloState.SessionData);
    type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
    v88 = a3;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v28 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
      v29 = (int *)type metadata accessor for SessionTicket();
      *(_DWORD *)(v26 + v29[5]) = *(_DWORD *)(v27 + v29[5]);
      *(_DWORD *)(v26 + v29[6]) = *(_DWORD *)(v27 + v29[6]);
      v30 = v29[7];
      v31 = (uint64_t *)(v26 + v30);
      v32 = v27 + v30;
      v33 = *(_QWORD *)(v27 + v30);
      v34 = *(_QWORD *)(v27 + v30 + 8);
      outlined copy of Data._Representation(v33, v34);
      *v31 = v33;
      v31[1] = v34;
      v31[2] = *(_QWORD *)(v32 + 16);
      v35 = v29[8];
      v36 = (uint64_t *)(v26 + v35);
      v37 = v27 + v35;
      v38 = *(_QWORD *)(v27 + v35);
      v39 = *(_QWORD *)(v27 + v35 + 8);
      outlined copy of Data._Representation(v38, v39);
      *v36 = v38;
      v36[1] = v39;
      v36[2] = *(_QWORD *)(v37 + 16);
      v40 = v29[9];
      v41 = v26 + v40;
      v42 = v27 + v40;
      v43 = type metadata accessor for SymmetricKey();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
      *(_DWORD *)(v26 + v29[10]) = *(_DWORD *)(v27 + v29[10]);
      *(_WORD *)(v26 + v29[11]) = *(_WORD *)(v27 + v29[11]);
      *(_WORD *)(v26 + v29[12]) = *(_WORD *)(v27 + v29[12]);
      v44 = v29[13];
      v45 = v26 + v44;
      v46 = (uint64_t *)(v27 + v44);
      v47 = *(_QWORD *)(v27 + v44 + 8);
      if (v47 >> 60 == 15)
      {
        v48 = *(_OWORD *)v46;
        *(_QWORD *)(v45 + 16) = v46[2];
        *(_OWORD *)v45 = v48;
      }
      else
      {
        v49 = *v46;
        outlined copy of Data._Representation(*v46, v47);
        *(_QWORD *)v45 = v49;
        *(_QWORD *)(v45 + 8) = v47;
        *(_QWORD *)(v45 + 16) = v46[2];
      }
      a3 = v88;
      v50 = v29[14];
      v51 = (void *)(v26 + v50);
      v52 = (const void *)(v27 + v50);
      v53 = type metadata accessor for P256.Signing.PublicKey();
      v54 = *(_QWORD *)(v53 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
      {
        v55 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v54 + 16))(v51, v52, v53);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      }
    }
    else
    {
      *(_WORD *)v26 = *(_WORD *)v27;
      *(_WORD *)(v26 + 2) = *(_WORD *)(v27 + 2);
      *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 8);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    v56 = a3[6];
    v57 = (char *)(a1 + v56);
    v58 = (char *)(a2 + v56);
    outlined destroy of HandshakeStateMachine?(a1 + v56, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v60 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v57, v58, v60);
        v61 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        v62 = v61[9];
        v63 = &v57[v62];
        v64 = &v58[v62];
        v65 = type metadata accessor for SymmetricKey();
        v66 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16);
        v66(v63, v64, v65);
        v66(&v57[v61[10]], &v58[v61[10]], v65);
        v66(&v57[v61[11]], &v58[v61[11]], v65);
        v67 = v65;
        a3 = v88;
        v66(&v57[v61[12]], &v58[v61[12]], v67);
        goto LABEL_32;
      case 1u:
        v68 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v57, v58, v68);
        v69 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        v70 = v69[9];
        v71 = &v57[v70];
        v72 = &v58[v70];
        v73 = type metadata accessor for SymmetricKey();
        v74 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16);
        v74(v71, v72, v73);
        v74(&v57[v69[10]], &v58[v69[10]], v73);
        v75 = v73;
        a3 = v88;
        v74(&v57[v69[11]], &v58[v69[11]], v75);
        goto LABEL_32;
      case 2u:
        v76 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v57, v58, v76);
        v77 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        v78 = v77[9];
        v79 = &v57[v78];
        v80 = &v58[v78];
        v81 = type metadata accessor for SymmetricKey();
        v82 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 16);
        v82(v79, v80, v81);
        v82(&v57[v77[10]], &v58[v77[10]], v81);
        v82(&v57[v77[11]], &v58[v77[11]], v81);
        v82(&v57[v77[12]], &v58[v77[12]], v81);
        v82(&v57[v77[13]], &v58[v77[13]], v81);
        v83 = v81;
        a3 = v88;
        v82(&v57[v77[14]], &v58[v77[14]], v83);
        goto LABEL_32;
      case 3u:
        v84 = type metadata accessor for SymmetricKey();
        v85 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 16);
        v85(v57, v58, v84);
        v86 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v85(&v57[v86[9]], &v58[v86[9]], v84);
        v85(&v57[v86[10]], &v58[v86[10]], v84);
        v85(&v57[v86[11]], &v58[v86[11]], v84);
LABEL_32:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
        break;
    }
  }
  *(_WORD *)(a1 + a3[7]) = *(_WORD *)(a2 + a3[7]);
  *(_WORD *)(a1 + a3[8]) = *(_WORD *)(a2 + a3[8]);
  return a1;
}

_OWORD *initializeWithTake for HandshakeState.ServerHelloState(_OWORD *a1, _OWORD *a2, int *a3)
{
  int *v3;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  int *v63;
  uint64_t v64;
  int *v66;
  int *v67;
  int *v68;

  v3 = a3;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)((char *)a2 + 60);
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v12 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    v13 = (int *)type metadata accessor for SessionTicket();
    *(_DWORD *)&v9[v13[5]] = *(_DWORD *)&v10[v13[5]];
    *(_DWORD *)&v9[v13[6]] = *(_DWORD *)&v10[v13[6]];
    v14 = v13[7];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
    v17 = v13[8];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_OWORD *)v18 = *(_OWORD *)v19;
    *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
    v20 = v13[9];
    v21 = &v9[v20];
    v22 = &v10[v20];
    v23 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
    *(_DWORD *)&v9[v13[10]] = *(_DWORD *)&v10[v13[10]];
    *(_WORD *)&v9[v13[11]] = *(_WORD *)&v10[v13[11]];
    *(_WORD *)&v9[v13[12]] = *(_WORD *)&v10[v13[12]];
    v24 = v13[13];
    v25 = &v9[v24];
    v26 = &v10[v24];
    *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
    *(_OWORD *)v25 = *(_OWORD *)v26;
    v27 = v13[14];
    v28 = &v9[v27];
    v29 = &v10[v27];
    v30 = type metadata accessor for P256.Signing.PublicKey();
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      v32 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v33 = v3[6];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v37 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v34, v35, v37);
      v38 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v39 = v38[9];
      v40 = &v34[v39];
      v41 = &v35[v39];
      v66 = v3;
      v42 = type metadata accessor for SymmetricKey();
      v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32);
      v43(v40, v41, v42);
      v43(&v34[v38[10]], &v35[v38[10]], v42);
      v43(&v34[v38[11]], &v35[v38[11]], v42);
      v44 = v42;
      v3 = v66;
      v43(&v34[v38[12]], &v35[v38[12]], v44);
      goto LABEL_13;
    case 1u:
      v45 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v34, v35, v45);
      v46 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v47 = v46[9];
      v48 = &v34[v47];
      v49 = &v35[v47];
      v67 = v3;
      v50 = type metadata accessor for SymmetricKey();
      v51 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32);
      v51(v48, v49, v50);
      v51(&v34[v46[10]], &v35[v46[10]], v50);
      v52 = v50;
      v3 = v67;
      v51(&v34[v46[11]], &v35[v46[11]], v52);
      goto LABEL_13;
    case 2u:
      v53 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v34, v35, v53);
      v54 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v55 = v54[9];
      v56 = &v34[v55];
      v57 = &v35[v55];
      v68 = v3;
      v58 = type metadata accessor for SymmetricKey();
      v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 32);
      v59(v56, v57, v58);
      v59(&v34[v54[10]], &v35[v54[10]], v58);
      v59(&v34[v54[11]], &v35[v54[11]], v58);
      v59(&v34[v54[12]], &v35[v54[12]], v58);
      v59(&v34[v54[13]], &v35[v54[13]], v58);
      v60 = v58;
      v3 = v68;
      v59(&v34[v54[14]], &v35[v54[14]], v60);
      goto LABEL_13;
    case 3u:
      v61 = type metadata accessor for SymmetricKey();
      v62 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32);
      v62(v34, v35, v61);
      v63 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v62(&v34[v63[9]], &v35[v63[9]], v61);
      v62(&v34[v63[10]], &v35[v63[10]], v61);
      v62(&v34[v63[11]], &v35[v63[11]], v61);
LABEL_13:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      break;
  }
  v64 = v3[8];
  *(_WORD *)((char *)a1 + v3[7]) = *(_WORD *)((char *)a2 + v3[7]);
  *(_WORD *)((char *)a1 + v64) = *(_WORD *)((char *)a2 + v64);
  return a1;
}

uint64_t assignWithTake for HandshakeState.ServerHelloState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  int *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  int *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  int *v65;
  uint64_t v66;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 >> 60 == 15)
    goto LABEL_4;
  v8 = *(_QWORD *)(a2 + 32);
  if (v8 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  outlined consume of Data._Representation(v9, v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
LABEL_6:
  v10 = *(_QWORD *)(a1 + 56);
  if (v10 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(a2 + 56);
  if (v11 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 48);
    goto LABEL_9;
  }
  v12 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v11;
  outlined consume of Data._Representation(v12, v10);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
LABEL_11:
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  if (a1 != a2)
  {
    v13 = a3[5];
    v14 = (char *)(a1 + v13);
    v15 = (char *)(a2 + v13);
    outlined destroy of PartialHandshakeResult(a1 + v13, type metadata accessor for HandshakeState.ServerHelloState.SessionData);
    v16 = type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v17 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
      v18 = (int *)type metadata accessor for SessionTicket();
      *(_DWORD *)&v14[v18[5]] = *(_DWORD *)&v15[v18[5]];
      *(_DWORD *)&v14[v18[6]] = *(_DWORD *)&v15[v18[6]];
      v19 = v18[7];
      v20 = &v14[v19];
      v21 = &v15[v19];
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
      v22 = v18[8];
      v23 = &v14[v22];
      v24 = &v15[v22];
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
      v25 = v18[9];
      v26 = &v14[v25];
      v27 = &v15[v25];
      v28 = type metadata accessor for SymmetricKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
      *(_DWORD *)&v14[v18[10]] = *(_DWORD *)&v15[v18[10]];
      *(_WORD *)&v14[v18[11]] = *(_WORD *)&v15[v18[11]];
      *(_WORD *)&v14[v18[12]] = *(_WORD *)&v15[v18[12]];
      v29 = v18[13];
      v30 = &v14[v29];
      v31 = &v15[v29];
      *((_QWORD *)v30 + 2) = *((_QWORD *)v31 + 2);
      *(_OWORD *)v30 = *(_OWORD *)v31;
      v32 = v18[14];
      v33 = &v14[v32];
      v34 = &v15[v32];
      v35 = type metadata accessor for P256.Signing.PublicKey();
      v36 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        v37 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    v38 = a3[6];
    v39 = (char *)(a1 + v38);
    v40 = (char *)(a2 + v38);
    outlined destroy of HandshakeStateMachine?(a1 + v38, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v42 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v39, v40, v42);
        v43 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        v44 = v43[9];
        v45 = &v39[v44];
        v46 = &v40[v44];
        v47 = type metadata accessor for SymmetricKey();
        v48 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32);
        v48(v45, v46, v47);
        v48(&v39[v43[10]], &v40[v43[10]], v47);
        v48(&v39[v43[11]], &v40[v43[11]], v47);
        v48(&v39[v43[12]], &v40[v43[12]], v47);
        goto LABEL_24;
      case 1u:
        v49 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v39, v40, v49);
        v50 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        v51 = v50[9];
        v52 = &v39[v51];
        v53 = &v40[v51];
        v54 = type metadata accessor for SymmetricKey();
        v55 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 32);
        v55(v52, v53, v54);
        v55(&v39[v50[10]], &v40[v50[10]], v54);
        v55(&v39[v50[11]], &v40[v50[11]], v54);
        goto LABEL_24;
      case 2u:
        v56 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v39, v40, v56);
        v57 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        v58 = v57[9];
        v59 = &v39[v58];
        v60 = &v40[v58];
        v61 = type metadata accessor for SymmetricKey();
        v62 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32);
        v62(v59, v60, v61);
        v62(&v39[v57[10]], &v40[v57[10]], v61);
        v62(&v39[v57[11]], &v40[v57[11]], v61);
        v62(&v39[v57[12]], &v40[v57[12]], v61);
        v62(&v39[v57[13]], &v40[v57[13]], v61);
        v62(&v39[v57[14]], &v40[v57[14]], v61);
        goto LABEL_24;
      case 3u:
        v63 = type metadata accessor for SymmetricKey();
        v64 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 32);
        v64(v39, v40, v63);
        v65 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v64(&v39[v65[9]], &v40[v65[9]], v63);
        v64(&v39[v65[10]], &v40[v65[10]], v63);
        v64(&v39[v65[11]], &v40[v65[11]], v63);
LABEL_24:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
        break;
    }
  }
  v66 = a3[8];
  *(_WORD *)(a1 + a3[7]) = *(_WORD *)(a2 + a3[7]);
  *(_WORD *)(a1 + v66) = *(_WORD *)(a2 + v66);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandshakeState.ServerHelloState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0DCDF88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for HandshakeState.ServerHelloState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0DCE038(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for HandshakeState.ServerHelloState.SessionData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for HandshakeState.ServerHelloState.SessionData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Date();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = (int *)type metadata accessor for SessionTicket();
      *(_DWORD *)((char *)a1 + v7[5]) = *(_DWORD *)((char *)a2 + v7[5]);
      *(_DWORD *)((char *)a1 + v7[6]) = *(_DWORD *)((char *)a2 + v7[6]);
      v8 = v7[7];
      v9 = (uint64_t *)((char *)a1 + v8);
      v10 = (char *)a2 + v8;
      v11 = *(uint64_t *)((char *)a2 + v8);
      v12 = *(uint64_t *)((char *)a2 + v8 + 8);
      outlined copy of Data._Representation(v11, v12);
      *v9 = v11;
      v9[1] = v12;
      v9[2] = *((_QWORD *)v10 + 2);
      v13 = v7[8];
      v14 = (uint64_t *)((char *)a1 + v13);
      v15 = (char *)a2 + v13;
      v16 = *(uint64_t *)((char *)a2 + v13);
      v17 = *(uint64_t *)((char *)a2 + v13 + 8);
      outlined copy of Data._Representation(v16, v17);
      *v14 = v16;
      v14[1] = v17;
      v14[2] = *((_QWORD *)v15 + 2);
      v18 = v7[9];
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = type metadata accessor for SymmetricKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
      *(_DWORD *)((char *)a1 + v7[10]) = *(_DWORD *)((char *)a2 + v7[10]);
      *(_WORD *)((char *)a1 + v7[11]) = *(_WORD *)((char *)a2 + v7[11]);
      *(_WORD *)((char *)a1 + v7[12]) = *(_WORD *)((char *)a2 + v7[12]);
      v22 = v7[13];
      v23 = (char *)a1 + v22;
      v24 = (uint64_t *)((char *)a2 + v22);
      v25 = *(uint64_t *)((char *)a2 + v22 + 8);
      if (v25 >> 60 == 15)
      {
        *(_OWORD *)v23 = *(_OWORD *)v24;
      }
      else
      {
        v27 = *v24;
        outlined copy of Data._Representation(*v24, v25);
        *(_QWORD *)v23 = v27;
        *((_QWORD *)v23 + 1) = v25;
      }
      *((_QWORD *)v23 + 2) = v24[2];
      v28 = v7[14];
      v29 = (char *)a1 + v28;
      v30 = (char *)a2 + v28;
      v31 = type metadata accessor for P256.Signing.PublicKey();
      v32 = *(_QWORD *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        v33 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
    }
    else
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for HandshakeState.ServerHelloState.SessionData(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_bridgeObjectRelease();
  v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = (int *)type metadata accessor for SessionTicket();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v3[7]), *(_QWORD *)(a1 + v3[7] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v3[8]), *(_QWORD *)(a1 + v3[8] + 8));
  v4 = a1 + v3[9];
  v5 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (uint64_t *)(a1 + v3[13]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    outlined consume of Data._Representation(*v6, v7);
  v8 = a1 + v3[14];
  v9 = type metadata accessor for P256.Signing.PublicKey();
  v10 = *(_QWORD *)(v9 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  return result;
}

uint64_t assignWithCopy for HandshakeState.ServerHelloState.SessionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a1 != a2)
  {
    outlined destroy of PartialHandshakeResult(a1, type metadata accessor for HandshakeState.ServerHelloState.SessionData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
      v5 = (int *)type metadata accessor for SessionTicket();
      *(_DWORD *)(a1 + v5[5]) = *(_DWORD *)(a2 + v5[5]);
      *(_DWORD *)(a1 + v5[6]) = *(_DWORD *)(a2 + v5[6]);
      v6 = v5[7];
      v7 = (uint64_t *)(a1 + v6);
      v8 = a2 + v6;
      v9 = *(_QWORD *)(a2 + v6);
      v10 = *(_QWORD *)(a2 + v6 + 8);
      outlined copy of Data._Representation(v9, v10);
      *v7 = v9;
      v7[1] = v10;
      v7[2] = *(_QWORD *)(v8 + 16);
      v11 = v5[8];
      v12 = (uint64_t *)(a1 + v11);
      v13 = a2 + v11;
      v14 = *(_QWORD *)(a2 + v11);
      v15 = *(_QWORD *)(a2 + v11 + 8);
      outlined copy of Data._Representation(v14, v15);
      *v12 = v14;
      v12[1] = v15;
      v12[2] = *(_QWORD *)(v13 + 16);
      v16 = v5[9];
      v17 = a1 + v16;
      v18 = a2 + v16;
      v19 = type metadata accessor for SymmetricKey();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
      *(_DWORD *)(a1 + v5[10]) = *(_DWORD *)(a2 + v5[10]);
      *(_WORD *)(a1 + v5[11]) = *(_WORD *)(a2 + v5[11]);
      *(_WORD *)(a1 + v5[12]) = *(_WORD *)(a2 + v5[12]);
      v20 = v5[13];
      v21 = a1 + v20;
      v22 = (uint64_t *)(a2 + v20);
      v23 = *(_QWORD *)(a2 + v20 + 8);
      if (v23 >> 60 == 15)
      {
        v24 = *(_OWORD *)v22;
        *(_QWORD *)(v21 + 16) = v22[2];
        *(_OWORD *)v21 = v24;
      }
      else
      {
        v25 = *v22;
        outlined copy of Data._Representation(*v22, v23);
        *(_QWORD *)v21 = v25;
        *(_QWORD *)(v21 + 8) = v23;
        *(_QWORD *)(v21 + 16) = v22[2];
      }
      v26 = v5[14];
      v27 = (void *)(a1 + v26);
      v28 = (const void *)(a2 + v26);
      v29 = type metadata accessor for P256.Signing.PublicKey();
      v30 = *(_QWORD *)(v29 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        v31 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v27, v28, v29);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
    }
    else
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for HandshakeState.ServerHelloState.SessionData(char *a1, char *a2, uint64_t a3)
{
  return assignWithTake for HandshakeState.ServerHelloState.SessionData(a1, a2, a3, type metadata accessor for HandshakeState.ServerHelloState.SessionData);
}

uint64_t getEnumTagSinglePayload for HandshakeState.ServerHelloState.SessionData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for HandshakeState.ServerHelloState.SessionData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t destroy for HandshakeState.ServerHelloState.SessionData.NewSession()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for HandshakeState.ServerHelloState.SessionData.NewSession(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HandshakeState.ServerHelloState.SessionData.NewSession(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for HandshakeState.ServerHelloState.SessionData.NewSession(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HandshakeState.ServerHelloState.SessionData.NewSession(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HandshakeState.ServerHelloState.SessionData.NewSession(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HandshakeState.ServerHelloState.SessionData.NewSession()
{
  return &type metadata for HandshakeState.ServerHelloState.SessionData.NewSession;
}

uint64_t initializeBufferWithCopyOfBuffer for HandshakeState.EncryptedExtensionsState(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  uint64_t v66;
  int *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  int *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  int *v82;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = a2[2];
    v8 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    }
    else
    {
      v11 = a2[3];
      outlined copy of Data._Representation(v11, v8);
      *(_QWORD *)(a1 + 24) = v11;
      *(_QWORD *)(a1 + 32) = v8;
    }
    *(_QWORD *)(a1 + 40) = a2[5];
    v12 = a2[7];
    if (v12 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    }
    else
    {
      v13 = a2[6];
      outlined copy of Data._Representation(v13, a2[7]);
      *(_QWORD *)(a1 + 48) = v13;
      *(_QWORD *)(a1 + 56) = v12;
    }
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    v14 = a3[5];
    v15 = a1 + v14;
    v16 = (uint64_t)a2 + v14;
    type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v17 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      v18 = (int *)type metadata accessor for SessionTicket();
      *(_DWORD *)(v15 + v18[5]) = *(_DWORD *)(v16 + v18[5]);
      *(_DWORD *)(v15 + v18[6]) = *(_DWORD *)(v16 + v18[6]);
      v19 = v18[7];
      v20 = (uint64_t *)(v15 + v19);
      v21 = v16 + v19;
      v22 = *(_QWORD *)(v16 + v19);
      v23 = *(_QWORD *)(v16 + v19 + 8);
      outlined copy of Data._Representation(v22, v23);
      *v20 = v22;
      v20[1] = v23;
      v20[2] = *(_QWORD *)(v21 + 16);
      v24 = v18[8];
      v25 = (uint64_t *)(v15 + v24);
      v26 = v16 + v24;
      v27 = *(_QWORD *)(v16 + v24);
      v28 = *(_QWORD *)(v16 + v24 + 8);
      outlined copy of Data._Representation(v27, v28);
      *v25 = v27;
      v25[1] = v28;
      v25[2] = *(_QWORD *)(v26 + 16);
      v29 = v18[9];
      v30 = v15 + v29;
      v31 = v16 + v29;
      v32 = type metadata accessor for SymmetricKey();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
      *(_DWORD *)(v15 + v18[10]) = *(_DWORD *)(v16 + v18[10]);
      *(_WORD *)(v15 + v18[11]) = *(_WORD *)(v16 + v18[11]);
      *(_WORD *)(v15 + v18[12]) = *(_WORD *)(v16 + v18[12]);
      v33 = v18[13];
      v34 = v15 + v33;
      v35 = (uint64_t *)(v16 + v33);
      v36 = *(_QWORD *)(v16 + v33 + 8);
      if (v36 >> 60 == 15)
      {
        *(_OWORD *)v34 = *(_OWORD *)v35;
      }
      else
      {
        v38 = *v35;
        outlined copy of Data._Representation(*v35, v36);
        *(_QWORD *)v34 = v38;
        *(_QWORD *)(v34 + 8) = v36;
      }
      *(_QWORD *)(v34 + 16) = v35[2];
      v39 = v18[14];
      v40 = (void *)(v15 + v39);
      v41 = (const void *)(v16 + v39);
      v42 = type metadata accessor for P256.Signing.PublicKey();
      v43 = *(_QWORD *)(v42 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        v44 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v43 + 16))(v40, v41, v42);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
    }
    else
    {
      *(_DWORD *)v15 = *(_DWORD *)v16;
      *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
      v37 = *(_QWORD *)(v16 + 16);
      *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
      *(_QWORD *)(v15 + 16) = v37;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    v45 = a3[6];
    v46 = a1 + v45;
    v47 = (uint64_t *)((char *)a2 + v45);
    v48 = *(uint64_t *)((char *)a2 + v45 + 8);
    if (v48 >> 60 == 15)
    {
      *(_OWORD *)v46 = *(_OWORD *)v47;
    }
    else
    {
      v49 = *v47;
      outlined copy of Data._Representation(*v47, v48);
      *(_QWORD *)v46 = v49;
      *(_QWORD *)(v46 + 8) = v48;
    }
    *(_QWORD *)(v46 + 16) = v47[2];
    v50 = a3[7];
    v51 = a1 + v50;
    v52 = (uint64_t *)((char *)a2 + v50);
    v53 = *(uint64_t *)((char *)a2 + v50 + 8);
    if (v53 >> 60 == 15)
    {
      *(_OWORD *)v51 = *(_OWORD *)v52;
    }
    else
    {
      v54 = *v52;
      outlined copy of Data._Representation(*v52, v53);
      *(_QWORD *)v51 = v54;
      *(_QWORD *)(v51 + 8) = v53;
    }
    *(_QWORD *)(v51 + 16) = v52[2];
    v55 = a3[9];
    *(_BYTE *)(a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v56 = (char *)(a1 + v55);
    v57 = (char *)a2 + v55;
    v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v59 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v56, v57, v59);
        v60 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        v61 = v60[9];
        v62 = &v56[v61];
        v63 = &v57[v61];
        v64 = type metadata accessor for SymmetricKey();
        v65 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16);
        v65(v62, v63, v64);
        v65(&v56[v60[10]], &v57[v60[10]], v64);
        v65(&v56[v60[11]], &v57[v60[11]], v64);
        v65(&v56[v60[12]], &v57[v60[12]], v64);
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        v66 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v56, v57, v66);
        v67 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        v68 = v67[9];
        v69 = &v56[v68];
        v70 = &v57[v68];
        v71 = type metadata accessor for SymmetricKey();
        v72 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16);
        v72(v69, v70, v71);
        v72(&v56[v67[10]], &v57[v67[10]], v71);
        v72(&v56[v67[11]], &v57[v67[11]], v71);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        v73 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v56, v57, v73);
        v74 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        v75 = v74[9];
        v76 = &v56[v75];
        v77 = &v57[v75];
        v78 = type metadata accessor for SymmetricKey();
        v79 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 16);
        v79(v76, v77, v78);
        v79(&v56[v74[10]], &v57[v74[10]], v78);
        v79(&v56[v74[11]], &v57[v74[11]], v78);
        v79(&v56[v74[12]], &v57[v74[12]], v78);
        v79(&v56[v74[13]], &v57[v74[13]], v78);
        v79(&v56[v74[14]], &v57[v74[14]], v78);
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        v80 = type metadata accessor for SymmetricKey();
        v81 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 16);
        v81(v56, v57, v80);
        v82 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v81(&v56[v82[9]], &v57[v82[9]], v80);
        v81(&v56[v82[10]], &v57[v82[10]], v80);
        v81(&v56[v82[11]], &v57[v82[11]], v80);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t assignWithCopy for HandshakeState.EncryptedExtensionsState(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);
  uint64_t v87;
  int *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  int *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  void (*v100)(char *, char *, uint64_t);
  uint64_t v101;
  void (*v102)(char *, char *, uint64_t);
  int *v103;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (__int128 *)(a1 + 24);
  v7 = (__int128 *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) >> 60 == 15)
  {
    if (v8 >> 60 == 15)
    {
      v9 = *v7;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *v6 = v9;
      goto LABEL_9;
    }
    v11 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v11, *(_QWORD *)(a2 + 32));
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v8;
  }
  else
  {
    if (v8 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 24);
      v10 = *(_QWORD *)(a2 + 40);
      *v6 = *v7;
      *(_QWORD *)(a1 + 40) = v10;
      goto LABEL_9;
    }
    v12 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v12, *(_QWORD *)(a2 + 32));
    v13 = *(_QWORD *)(a1 + 24);
    v14 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v8;
    outlined consume of Data._Representation(v13, v14);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
LABEL_9:
  v15 = (__int128 *)(a1 + 48);
  v16 = (__int128 *)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56) >> 60 == 15)
  {
    if (v17 >> 60 == 15)
    {
      v18 = *v16;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *v15 = v18;
      goto LABEL_17;
    }
    v20 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v20, *(_QWORD *)(a2 + 56));
    *(_QWORD *)(a1 + 48) = v20;
    *(_QWORD *)(a1 + 56) = v17;
  }
  else
  {
    if (v17 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 48);
      v19 = *(_QWORD *)(a2 + 64);
      *v15 = *v16;
      *(_QWORD *)(a1 + 64) = v19;
      goto LABEL_17;
    }
    v21 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v21, *(_QWORD *)(a2 + 56));
    v22 = *(_QWORD *)(a1 + 48);
    v23 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = v21;
    *(_QWORD *)(a1 + 56) = v17;
    outlined consume of Data._Representation(v22, v23);
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
LABEL_17:
  v24 = *(_WORD *)(a2 + 72);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_WORD *)(a1 + 72) = v24;
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  if (a1 != a2)
  {
    v25 = a3[5];
    v26 = a1 + v25;
    v27 = a2 + v25;
    outlined destroy of PartialHandshakeResult(a1 + v25, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
    type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v28 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
      v29 = (int *)type metadata accessor for SessionTicket();
      *(_DWORD *)(v26 + v29[5]) = *(_DWORD *)(v27 + v29[5]);
      *(_DWORD *)(v26 + v29[6]) = *(_DWORD *)(v27 + v29[6]);
      v30 = v29[7];
      v31 = (uint64_t *)(v26 + v30);
      v32 = v27 + v30;
      v33 = *(_QWORD *)(v27 + v30);
      v34 = *(_QWORD *)(v27 + v30 + 8);
      outlined copy of Data._Representation(v33, v34);
      *v31 = v33;
      v31[1] = v34;
      v31[2] = *(_QWORD *)(v32 + 16);
      v35 = v29[8];
      v36 = (uint64_t *)(v26 + v35);
      v37 = v27 + v35;
      v38 = *(_QWORD *)(v27 + v35);
      v39 = *(_QWORD *)(v27 + v35 + 8);
      outlined copy of Data._Representation(v38, v39);
      *v36 = v38;
      v36[1] = v39;
      v36[2] = *(_QWORD *)(v37 + 16);
      v40 = v29[9];
      v41 = v26 + v40;
      v42 = v27 + v40;
      v43 = type metadata accessor for SymmetricKey();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
      *(_DWORD *)(v26 + v29[10]) = *(_DWORD *)(v27 + v29[10]);
      *(_WORD *)(v26 + v29[11]) = *(_WORD *)(v27 + v29[11]);
      *(_WORD *)(v26 + v29[12]) = *(_WORD *)(v27 + v29[12]);
      v44 = v29[13];
      v45 = v26 + v44;
      v46 = (uint64_t *)(v27 + v44);
      v47 = *(_QWORD *)(v27 + v44 + 8);
      if (v47 >> 60 == 15)
      {
        v48 = *(_OWORD *)v46;
        *(_QWORD *)(v45 + 16) = v46[2];
        *(_OWORD *)v45 = v48;
      }
      else
      {
        v49 = *v46;
        outlined copy of Data._Representation(*v46, v47);
        *(_QWORD *)v45 = v49;
        *(_QWORD *)(v45 + 8) = v47;
        *(_QWORD *)(v45 + 16) = v46[2];
      }
      v50 = v29[14];
      v51 = (void *)(v26 + v50);
      v52 = (const void *)(v27 + v50);
      v53 = type metadata accessor for P256.Signing.PublicKey();
      v54 = *(_QWORD *)(v53 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
      {
        v55 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v54 + 16))(v51, v52, v53);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      }
    }
    else
    {
      *(_WORD *)v26 = *(_WORD *)v27;
      *(_WORD *)(v26 + 2) = *(_WORD *)(v27 + 2);
      *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
      *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 8);
      *(_QWORD *)(v26 + 16) = *(_QWORD *)(v27 + 16);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v56 = a3[6];
  v57 = a1 + v56;
  v58 = (uint64_t *)(a2 + v56);
  v59 = *(_QWORD *)(a2 + v56 + 8);
  if (*(_QWORD *)(a1 + v56 + 8) >> 60 == 15)
  {
    if (v59 >> 60 == 15)
    {
      v60 = *(_OWORD *)v58;
      *(_QWORD *)(v57 + 16) = v58[2];
      *(_OWORD *)v57 = v60;
      goto LABEL_36;
    }
    v62 = *v58;
    outlined copy of Data._Representation(*v58, v59);
    *(_QWORD *)v57 = v62;
    *(_QWORD *)(v57 + 8) = v59;
    goto LABEL_34;
  }
  if (v59 >> 60 != 15)
  {
    v63 = *v58;
    outlined copy of Data._Representation(*v58, v59);
    v64 = *(_QWORD *)v57;
    v65 = *(_QWORD *)(v57 + 8);
    *(_QWORD *)v57 = v63;
    *(_QWORD *)(v57 + 8) = v59;
    outlined consume of Data._Representation(v64, v65);
LABEL_34:
    v61 = v58[2];
    goto LABEL_35;
  }
  outlined destroy of ByteBuffer(v57);
  v61 = v58[2];
  *(_OWORD *)v57 = *(_OWORD *)v58;
LABEL_35:
  *(_QWORD *)(v57 + 16) = v61;
LABEL_36:
  v66 = a3[7];
  v67 = a1 + v66;
  v68 = (uint64_t *)(a2 + v66);
  v69 = *(_QWORD *)(a2 + v66 + 8);
  if (*(_QWORD *)(a1 + v66 + 8) >> 60 == 15)
  {
    if (v69 >> 60 == 15)
    {
      v70 = *(_OWORD *)v68;
      *(_QWORD *)(v67 + 16) = v68[2];
      *(_OWORD *)v67 = v70;
      goto LABEL_45;
    }
    v72 = *v68;
    outlined copy of Data._Representation(*v68, v69);
    *(_QWORD *)v67 = v72;
    *(_QWORD *)(v67 + 8) = v69;
    goto LABEL_43;
  }
  if (v69 >> 60 != 15)
  {
    v73 = *v68;
    outlined copy of Data._Representation(*v68, v69);
    v74 = *(_QWORD *)v67;
    v75 = *(_QWORD *)(v67 + 8);
    *(_QWORD *)v67 = v73;
    *(_QWORD *)(v67 + 8) = v69;
    outlined consume of Data._Representation(v74, v75);
LABEL_43:
    v71 = v68[2];
    goto LABEL_44;
  }
  outlined destroy of ByteBuffer(v67);
  v71 = v68[2];
  *(_OWORD *)v67 = *(_OWORD *)v68;
LABEL_44:
  *(_QWORD *)(v67 + 16) = v71;
LABEL_45:
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  if (a1 != a2)
  {
    v76 = a3[9];
    v77 = (char *)(a1 + v76);
    v78 = (char *)(a2 + v76);
    outlined destroy of HandshakeStateMachine?(a1 + v76, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v80 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(v77, v78, v80);
        v81 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        v82 = v81[9];
        v83 = &v77[v82];
        v84 = &v78[v82];
        v85 = type metadata accessor for SymmetricKey();
        v86 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 16);
        v86(v83, v84, v85);
        v86(&v77[v81[10]], &v78[v81[10]], v85);
        v86(&v77[v81[11]], &v78[v81[11]], v85);
        v86(&v77[v81[12]], &v78[v81[12]], v85);
        goto LABEL_52;
      case 1u:
        v87 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(v77, v78, v87);
        v88 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        v89 = v88[9];
        v90 = &v77[v89];
        v91 = &v78[v89];
        v92 = type metadata accessor for SymmetricKey();
        v93 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16);
        v93(v90, v91, v92);
        v93(&v77[v88[10]], &v78[v88[10]], v92);
        v93(&v77[v88[11]], &v78[v88[11]], v92);
        goto LABEL_52;
      case 2u:
        v94 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 16))(v77, v78, v94);
        v95 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        v96 = v95[9];
        v97 = &v77[v96];
        v98 = &v78[v96];
        v99 = type metadata accessor for SymmetricKey();
        v100 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 16);
        v100(v97, v98, v99);
        v100(&v77[v95[10]], &v78[v95[10]], v99);
        v100(&v77[v95[11]], &v78[v95[11]], v99);
        v100(&v77[v95[12]], &v78[v95[12]], v99);
        v100(&v77[v95[13]], &v78[v95[13]], v99);
        v100(&v77[v95[14]], &v78[v95[14]], v99);
        goto LABEL_52;
      case 3u:
        v101 = type metadata accessor for SymmetricKey();
        v102 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 16);
        v102(v77, v78, v101);
        v103 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v102(&v77[v103[9]], &v78[v103[9]], v101);
        v102(&v77[v103[10]], &v78[v103[10]], v101);
        v102(&v77[v103[11]], &v78[v103[11]], v101);
LABEL_52:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
        break;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for HandshakeState.EncryptedExtensionsState(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  int *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  int *v67;

  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)((char *)a2 + 60);
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v12 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    v13 = (int *)type metadata accessor for SessionTicket();
    *(_DWORD *)&v9[v13[5]] = *(_DWORD *)&v10[v13[5]];
    *(_DWORD *)&v9[v13[6]] = *(_DWORD *)&v10[v13[6]];
    v14 = v13[7];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
    v17 = v13[8];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_OWORD *)v18 = *(_OWORD *)v19;
    *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
    v20 = v13[9];
    v21 = &v9[v20];
    v22 = &v10[v20];
    v23 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
    *(_DWORD *)&v9[v13[10]] = *(_DWORD *)&v10[v13[10]];
    *(_WORD *)&v9[v13[11]] = *(_WORD *)&v10[v13[11]];
    *(_WORD *)&v9[v13[12]] = *(_WORD *)&v10[v13[12]];
    v24 = v13[13];
    v25 = &v9[v24];
    v26 = &v10[v24];
    *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
    *(_OWORD *)v25 = *(_OWORD *)v26;
    v27 = v13[14];
    v28 = &v9[v27];
    v29 = &v10[v27];
    v30 = type metadata accessor for P256.Signing.PublicKey();
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      v32 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v33 = a3[6];
  v34 = a3[7];
  v35 = (char *)a1 + v33;
  v36 = (char *)a2 + v33;
  v37 = *(_OWORD *)v36;
  *((_QWORD *)v35 + 2) = *((_QWORD *)v36 + 2);
  *(_OWORD *)v35 = v37;
  v38 = (char *)a1 + v34;
  v39 = (char *)a2 + v34;
  *(_OWORD *)v38 = *(_OWORD *)v39;
  *((_QWORD *)v38 + 2) = *((_QWORD *)v39 + 2);
  v40 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v41 = (char *)a1 + v40;
  v42 = (char *)a2 + v40;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v44 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v41, v42, v44);
      v45 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v46 = v45[9];
      v47 = &v41[v46];
      v48 = &v42[v46];
      v49 = type metadata accessor for SymmetricKey();
      v50 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32);
      v50(v47, v48, v49);
      v50(&v41[v45[10]], &v42[v45[10]], v49);
      v50(&v41[v45[11]], &v42[v45[11]], v49);
      v50(&v41[v45[12]], &v42[v45[12]], v49);
      goto LABEL_13;
    case 1u:
      v51 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v41, v42, v51);
      v52 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v53 = v52[9];
      v54 = &v41[v53];
      v55 = &v42[v53];
      v56 = type metadata accessor for SymmetricKey();
      v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32);
      v57(v54, v55, v56);
      v57(&v41[v52[10]], &v42[v52[10]], v56);
      v57(&v41[v52[11]], &v42[v52[11]], v56);
      goto LABEL_13;
    case 2u:
      v58 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 32))(v41, v42, v58);
      v59 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v60 = v59[9];
      v61 = &v41[v60];
      v62 = &v42[v60];
      v63 = type metadata accessor for SymmetricKey();
      v64 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 32);
      v64(v61, v62, v63);
      v64(&v41[v59[10]], &v42[v59[10]], v63);
      v64(&v41[v59[11]], &v42[v59[11]], v63);
      v64(&v41[v59[12]], &v42[v59[12]], v63);
      v64(&v41[v59[13]], &v42[v59[13]], v63);
      v64(&v41[v59[14]], &v42[v59[14]], v63);
      goto LABEL_13;
    case 3u:
      v65 = type metadata accessor for SymmetricKey();
      v66 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32);
      v66(v41, v42, v65);
      v67 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v66(&v41[v67[9]], &v42[v67[9]], v65);
      v66(&v41[v67[10]], &v42[v67[10]], v65);
      v66(&v41[v67[11]], &v42[v67[11]], v65);
LABEL_13:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t assignWithTake for HandshakeState.EncryptedExtensionsState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  int *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  int *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  int *v77;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 >> 60 == 15)
    goto LABEL_4;
  v8 = *(_QWORD *)(a2 + 32);
  if (v8 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  outlined consume of Data._Representation(v9, v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
LABEL_6:
  v10 = *(_QWORD *)(a1 + 56);
  if (v10 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(a2 + 56);
  if (v11 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 48);
    goto LABEL_9;
  }
  v12 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v11;
  outlined consume of Data._Representation(v12, v10);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
LABEL_11:
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  if (a1 != a2)
  {
    v13 = a3[5];
    v14 = (char *)(a1 + v13);
    v15 = (char *)(a2 + v13);
    outlined destroy of PartialHandshakeResult(a1 + v13, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
    v16 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v17 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
      v18 = (int *)type metadata accessor for SessionTicket();
      *(_DWORD *)&v14[v18[5]] = *(_DWORD *)&v15[v18[5]];
      *(_DWORD *)&v14[v18[6]] = *(_DWORD *)&v15[v18[6]];
      v19 = v18[7];
      v20 = &v14[v19];
      v21 = &v15[v19];
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
      v22 = v18[8];
      v23 = &v14[v22];
      v24 = &v15[v22];
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
      v25 = v18[9];
      v26 = &v14[v25];
      v27 = &v15[v25];
      v28 = type metadata accessor for SymmetricKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
      *(_DWORD *)&v14[v18[10]] = *(_DWORD *)&v15[v18[10]];
      *(_WORD *)&v14[v18[11]] = *(_WORD *)&v15[v18[11]];
      *(_WORD *)&v14[v18[12]] = *(_WORD *)&v15[v18[12]];
      v29 = v18[13];
      v30 = &v14[v29];
      v31 = &v15[v29];
      *((_QWORD *)v30 + 2) = *((_QWORD *)v31 + 2);
      *(_OWORD *)v30 = *(_OWORD *)v31;
      v32 = v18[14];
      v33 = &v14[v32];
      v34 = &v15[v32];
      v35 = type metadata accessor for P256.Signing.PublicKey();
      v36 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        v37 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
  }
  v38 = a3[6];
  v39 = a1 + v38;
  v40 = a2 + v38;
  v41 = *(_QWORD *)(a1 + v38 + 8);
  if (v41 >> 60 == 15)
    goto LABEL_21;
  v42 = *(_QWORD *)(v40 + 8);
  if (v42 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(v39);
LABEL_21:
    *(_OWORD *)v39 = *(_OWORD *)v40;
    goto LABEL_23;
  }
  v43 = *(_QWORD *)v39;
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *(_QWORD *)(v39 + 8) = v42;
  outlined consume of Data._Representation(v43, v41);
LABEL_23:
  *(_QWORD *)(v39 + 16) = *(_QWORD *)(v40 + 16);
  v44 = a3[7];
  v45 = a1 + v44;
  v46 = a2 + v44;
  v47 = *(_QWORD *)(a1 + v44 + 8);
  if (v47 >> 60 == 15)
  {
LABEL_26:
    *(_OWORD *)v45 = *(_OWORD *)v46;
    goto LABEL_28;
  }
  v48 = *(_QWORD *)(v46 + 8);
  if (v48 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(v45);
    goto LABEL_26;
  }
  v49 = *(_QWORD *)v45;
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *(_QWORD *)(v45 + 8) = v48;
  outlined consume of Data._Representation(v49, v47);
LABEL_28:
  *(_QWORD *)(v45 + 16) = *(_QWORD *)(v46 + 16);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  if (a1 != a2)
  {
    v50 = a3[9];
    v51 = (char *)(a1 + v50);
    v52 = (char *)(a2 + v50);
    outlined destroy of HandshakeStateMachine?(a1 + v50, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v54 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v51, v52, v54);
        v55 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        v56 = v55[9];
        v57 = &v51[v56];
        v58 = &v52[v56];
        v59 = type metadata accessor for SymmetricKey();
        v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 32);
        v60(v57, v58, v59);
        v60(&v51[v55[10]], &v52[v55[10]], v59);
        v60(&v51[v55[11]], &v52[v55[11]], v59);
        v60(&v51[v55[12]], &v52[v55[12]], v59);
        goto LABEL_35;
      case 1u:
        v61 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v51, v52, v61);
        v62 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        v63 = v62[9];
        v64 = &v51[v63];
        v65 = &v52[v63];
        v66 = type metadata accessor for SymmetricKey();
        v67 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32);
        v67(v64, v65, v66);
        v67(&v51[v62[10]], &v52[v62[10]], v66);
        v67(&v51[v62[11]], &v52[v62[11]], v66);
        goto LABEL_35;
      case 2u:
        v68 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 32))(v51, v52, v68);
        v69 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        v70 = v69[9];
        v71 = &v51[v70];
        v72 = &v52[v70];
        v73 = type metadata accessor for SymmetricKey();
        v74 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32);
        v74(v71, v72, v73);
        v74(&v51[v69[10]], &v52[v69[10]], v73);
        v74(&v51[v69[11]], &v52[v69[11]], v73);
        v74(&v51[v69[12]], &v52[v69[12]], v73);
        v74(&v51[v69[13]], &v52[v69[13]], v73);
        v74(&v51[v69[14]], &v52[v69[14]], v73);
        goto LABEL_35;
      case 3u:
        v75 = type metadata accessor for SymmetricKey();
        v76 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32);
        v76(v51, v52, v75);
        v77 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v76(&v51[v77[9]], &v52[v77[9]], v75);
        v76(&v51[v77[10]], &v52[v77[10]], v75);
        v76(&v51[v77[11]], &v52[v77[11]], v75);
LABEL_35:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for HandshakeState.EncryptedExtensionsState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0DD03CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for HandshakeState.EncryptedExtensionsState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0DD047C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for HandshakeState.EncryptedExtensionsState.SessionData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v26 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = (int *)type metadata accessor for SessionTicket();
      *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)((char *)a2 + v7[5]);
      *(_DWORD *)(a1 + v7[6]) = *(_DWORD *)((char *)a2 + v7[6]);
      v8 = v7[7];
      v9 = (uint64_t *)(a1 + v8);
      v10 = (uint64_t)a2 + v8;
      v11 = *(uint64_t *)((char *)a2 + v8);
      v12 = *(uint64_t *)((char *)a2 + v8 + 8);
      outlined copy of Data._Representation(v11, v12);
      *v9 = v11;
      v9[1] = v12;
      v9[2] = *(_QWORD *)(v10 + 16);
      v13 = v7[8];
      v14 = (uint64_t *)(a1 + v13);
      v15 = (uint64_t)a2 + v13;
      v16 = *(uint64_t *)((char *)a2 + v13);
      v17 = *(uint64_t *)((char *)a2 + v13 + 8);
      outlined copy of Data._Representation(v16, v17);
      *v14 = v16;
      v14[1] = v17;
      v14[2] = *(_QWORD *)(v15 + 16);
      v18 = v7[9];
      v19 = a1 + v18;
      v20 = (uint64_t)a2 + v18;
      v21 = type metadata accessor for SymmetricKey();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
      *(_DWORD *)(a1 + v7[10]) = *(_DWORD *)((char *)a2 + v7[10]);
      *(_WORD *)(a1 + v7[11]) = *(_WORD *)((char *)a2 + v7[11]);
      *(_WORD *)(a1 + v7[12]) = *(_WORD *)((char *)a2 + v7[12]);
      v22 = v7[13];
      v23 = a1 + v22;
      v24 = (uint64_t *)((char *)a2 + v22);
      v25 = *(uint64_t *)((char *)a2 + v22 + 8);
      if (v25 >> 60 == 15)
      {
        *(_OWORD *)v23 = *(_OWORD *)v24;
      }
      else
      {
        v28 = *v24;
        outlined copy of Data._Representation(*v24, v25);
        *(_QWORD *)v23 = v28;
        *(_QWORD *)(v23 + 8) = v25;
      }
      *(_QWORD *)(v23 + 16) = v24[2];
      v29 = v7[14];
      v30 = (void *)(a1 + v29);
      v31 = (char *)a2 + v29;
      v32 = type metadata accessor for P256.Signing.PublicKey();
      v33 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        v34 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
    }
    else
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
      v27 = a2[2];
      *(_QWORD *)(a1 + 8) = a2[1];
      *(_QWORD *)(a1 + 16) = v27;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t assignWithCopy for HandshakeState.EncryptedExtensionsState.SessionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a1 != a2)
  {
    outlined destroy of PartialHandshakeResult(a1, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
      v5 = (int *)type metadata accessor for SessionTicket();
      *(_DWORD *)(a1 + v5[5]) = *(_DWORD *)(a2 + v5[5]);
      *(_DWORD *)(a1 + v5[6]) = *(_DWORD *)(a2 + v5[6]);
      v6 = v5[7];
      v7 = (uint64_t *)(a1 + v6);
      v8 = a2 + v6;
      v9 = *(_QWORD *)(a2 + v6);
      v10 = *(_QWORD *)(a2 + v6 + 8);
      outlined copy of Data._Representation(v9, v10);
      *v7 = v9;
      v7[1] = v10;
      v7[2] = *(_QWORD *)(v8 + 16);
      v11 = v5[8];
      v12 = (uint64_t *)(a1 + v11);
      v13 = a2 + v11;
      v14 = *(_QWORD *)(a2 + v11);
      v15 = *(_QWORD *)(a2 + v11 + 8);
      outlined copy of Data._Representation(v14, v15);
      *v12 = v14;
      v12[1] = v15;
      v12[2] = *(_QWORD *)(v13 + 16);
      v16 = v5[9];
      v17 = a1 + v16;
      v18 = a2 + v16;
      v19 = type metadata accessor for SymmetricKey();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
      *(_DWORD *)(a1 + v5[10]) = *(_DWORD *)(a2 + v5[10]);
      *(_WORD *)(a1 + v5[11]) = *(_WORD *)(a2 + v5[11]);
      *(_WORD *)(a1 + v5[12]) = *(_WORD *)(a2 + v5[12]);
      v20 = v5[13];
      v21 = a1 + v20;
      v22 = (uint64_t *)(a2 + v20);
      v23 = *(_QWORD *)(a2 + v20 + 8);
      if (v23 >> 60 == 15)
      {
        v24 = *(_OWORD *)v22;
        *(_QWORD *)(v21 + 16) = v22[2];
        *(_OWORD *)v21 = v24;
      }
      else
      {
        v25 = *v22;
        outlined copy of Data._Representation(*v22, v23);
        *(_QWORD *)v21 = v25;
        *(_QWORD *)(v21 + 8) = v23;
        *(_QWORD *)(v21 + 16) = v22[2];
      }
      v26 = v5[14];
      v27 = (void *)(a1 + v26);
      v28 = (const void *)(a2 + v26);
      v29 = type metadata accessor for P256.Signing.PublicKey();
      v30 = *(_QWORD *)(v29 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        v31 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v27, v28, v29);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
    }
    else
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
      *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for HandshakeState.ServerHelloState.SessionData(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = (int *)type metadata accessor for SessionTicket();
    *(_DWORD *)&a1[v7[5]] = *(_DWORD *)&a2[v7[5]];
    *(_DWORD *)&a1[v7[6]] = *(_DWORD *)&a2[v7[6]];
    v8 = v7[7];
    v9 = &a1[v8];
    v10 = &a2[v8];
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
    v11 = v7[8];
    v12 = &a1[v11];
    v13 = &a2[v11];
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
    v14 = v7[9];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
    *(_DWORD *)&a1[v7[10]] = *(_DWORD *)&a2[v7[10]];
    *(_WORD *)&a1[v7[11]] = *(_WORD *)&a2[v7[11]];
    *(_WORD *)&a1[v7[12]] = *(_WORD *)&a2[v7[12]];
    v18 = v7[13];
    v19 = &a1[v18];
    v20 = &a2[v18];
    *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
    *(_OWORD *)v19 = *(_OWORD *)v20;
    v21 = v7[14];
    v22 = &a1[v21];
    v23 = &a2[v21];
    v24 = type metadata accessor for P256.Signing.PublicKey();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for HandshakeState.EncryptedExtensionsState.SessionData(char *a1, char *a2, uint64_t a3)
{
  return assignWithTake for HandshakeState.ServerHelloState.SessionData(a1, a2, a3, type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData);
}

char *assignWithTake for HandshakeState.ServerHelloState.SessionData(char *a1, char *a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 != a2)
  {
    outlined destroy of PartialHandshakeResult((uint64_t)a1, a4);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = (int *)type metadata accessor for SessionTicket();
      *(_DWORD *)&a1[v8[5]] = *(_DWORD *)&a2[v8[5]];
      *(_DWORD *)&a1[v8[6]] = *(_DWORD *)&a2[v8[6]];
      v9 = v8[7];
      v10 = &a1[v9];
      v11 = &a2[v9];
      *(_OWORD *)v10 = *(_OWORD *)v11;
      *((_QWORD *)v10 + 2) = *((_QWORD *)v11 + 2);
      v12 = v8[8];
      v13 = &a1[v12];
      v14 = &a2[v12];
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
      v15 = v8[9];
      v16 = &a1[v15];
      v17 = &a2[v15];
      v18 = type metadata accessor for SymmetricKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      *(_DWORD *)&a1[v8[10]] = *(_DWORD *)&a2[v8[10]];
      *(_WORD *)&a1[v8[11]] = *(_WORD *)&a2[v8[11]];
      *(_WORD *)&a1[v8[12]] = *(_WORD *)&a2[v8[12]];
      v19 = v8[13];
      v20 = &a1[v19];
      v21 = &a2[v19];
      *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
      *(_OWORD *)v20 = *(_OWORD *)v21;
      v22 = v8[14];
      v23 = &a1[v22];
      v24 = &a2[v22];
      v25 = type metadata accessor for P256.Signing.PublicKey();
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        v27 = type metadata accessor for PeerCertificateBundle.Bundle(0);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t destroy for HandshakeState.EncryptedExtensionsState.SessionData.NewSession()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for HandshakeState.EncryptedExtensionsState.SessionData.NewSession(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HandshakeState.EncryptedExtensionsState.SessionData.NewSession(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for HandshakeState.EncryptedExtensionsState.SessionData.NewSession(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HandshakeState.EncryptedExtensionsState.SessionData.NewSession(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HandshakeState.EncryptedExtensionsState.SessionData.NewSession(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for HandshakeState.EncryptedExtensionsState.SessionData.NewSession()
{
  return &type metadata for HandshakeState.EncryptedExtensionsState.SessionData.NewSession;
}

uint64_t initializeBufferWithCopyOfBuffer for HandshakeState.ServerCertificateState(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  int *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  int *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  int *v52;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = a2[2];
    v8 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    }
    else
    {
      v11 = a2[3];
      outlined copy of Data._Representation(v11, v8);
      *(_QWORD *)(a1 + 24) = v11;
      *(_QWORD *)(a1 + 32) = v8;
    }
    *(_QWORD *)(a1 + 40) = a2[5];
    v12 = a2[7];
    if (v12 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    }
    else
    {
      v13 = a2[6];
      outlined copy of Data._Representation(v13, a2[7]);
      *(_QWORD *)(a1 + 48) = v13;
      *(_QWORD *)(a1 + 56) = v12;
    }
    *(_QWORD *)(a1 + 64) = a2[8];
    v14 = *((_DWORD *)a2 + 19);
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    *(_DWORD *)(a1 + 76) = v14;
    v15 = a2[11];
    if (v15 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
    }
    else
    {
      v16 = a2[10];
      outlined copy of Data._Representation(v16, a2[11]);
      *(_QWORD *)(a1 + 80) = v16;
      *(_QWORD *)(a1 + 88) = v15;
    }
    *(_QWORD *)(a1 + 96) = a2[12];
    v17 = a2[14];
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    }
    else
    {
      v18 = a2[13];
      outlined copy of Data._Representation(v18, a2[14]);
      *(_QWORD *)(a1 + 104) = v18;
      *(_QWORD *)(a1 + 112) = v17;
    }
    *(_QWORD *)(a1 + 120) = a2[15];
    *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
    v19 = *(int *)(a3 + 40);
    v20 = (void *)(a1 + v19);
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for P256.Signing.PublicKey();
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    v25 = *(int *)(a3 + 44);
    v26 = (char *)(a1 + v25);
    v27 = (char *)a2 + v25;
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v29 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
        v30 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        v31 = v30[9];
        v32 = &v26[v31];
        v33 = &v27[v31];
        v34 = type metadata accessor for SymmetricKey();
        v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
        v35(v32, v33, v34);
        v35(&v26[v30[10]], &v27[v30[10]], v34);
        v35(&v26[v30[11]], &v27[v30[11]], v34);
        v35(&v26[v30[12]], &v27[v30[12]], v34);
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        v36 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v26, v27, v36);
        v37 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        v38 = v37[9];
        v39 = &v26[v38];
        v40 = &v27[v38];
        v41 = type metadata accessor for SymmetricKey();
        v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16);
        v42(v39, v40, v41);
        v42(&v26[v37[10]], &v27[v37[10]], v41);
        v42(&v26[v37[11]], &v27[v37[11]], v41);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        v43 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v26, v27, v43);
        v44 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        v45 = v44[9];
        v46 = &v26[v45];
        v47 = &v27[v45];
        v48 = type metadata accessor for SymmetricKey();
        v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16);
        v49(v46, v47, v48);
        v49(&v26[v44[10]], &v27[v44[10]], v48);
        v49(&v26[v44[11]], &v27[v44[11]], v48);
        v49(&v26[v44[12]], &v27[v44[12]], v48);
        v49(&v26[v44[13]], &v27[v44[13]], v48);
        v49(&v26[v44[14]], &v27[v44[14]], v48);
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        v50 = type metadata accessor for SymmetricKey();
        v51 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
        v51(v26, v27, v50);
        v52 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v51(&v26[v52[9]], &v27[v52[9]], v50);
        v51(&v26[v52[10]], &v27[v52[10]], v50);
        v51(&v26[v52[11]], &v27[v52[11]], v50);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for HandshakeState.ServerCertificateState(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  int *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  char *v20;
  uint64_t v21;
  int *v22;
  char *v23;
  uint64_t v24;
  int *v25;
  void (*v26)(char *, uint64_t);
  void (*v27)(char *, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1[4];
  if (v4 >> 60 != 15)
    outlined consume of Data._Representation(a1[3], v4);
  v5 = a1[7];
  if (v5 >> 60 != 15)
    outlined consume of Data._Representation(a1[6], v5);
  v6 = a1[11];
  if (v6 >> 60 != 15)
    outlined consume of Data._Representation(a1[10], v6);
  v7 = a1[14];
  if (v7 >> 60 != 15)
    outlined consume of Data._Representation(a1[13], v7);
  v8 = (char *)a1 + *(int *)(a2 + 40);
  v9 = type metadata accessor for P256.Signing.PublicKey();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  v11 = (char *)a1 + *(int *)(a2 + 44);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      v13 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
      v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v15 = &v11[v14[9]];
      v16 = type metadata accessor for SymmetricKey();
      v26 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
      v26(v15, v16);
      v26(&v11[v14[10]], v16);
      v26(&v11[v14[11]], v16);
      v17 = v14[12];
      goto LABEL_15;
    case 1:
      v18 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v11, v18);
      v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v20 = &v11[v19[9]];
      v16 = type metadata accessor for SymmetricKey();
      v26 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
      v26(v20, v16);
      v26(&v11[v19[10]], v16);
      v17 = v19[11];
      goto LABEL_15;
    case 2:
      v21 = type metadata accessor for SHA384();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v11, v21);
      v22 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v23 = &v11[v22[9]];
      v16 = type metadata accessor for SymmetricKey();
      v26 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
      v26(v23, v16);
      v26(&v11[v22[10]], v16);
      v26(&v11[v22[11]], v16);
      v26(&v11[v22[12]], v16);
      v26(&v11[v22[13]], v16);
      v17 = v22[14];
LABEL_15:
      result = ((uint64_t (*)(char *, uint64_t))v26)(&v11[v17], v16);
      break;
    case 3:
      v24 = type metadata accessor for SymmetricKey();
      v27 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8);
      v27(v11, v24);
      v25 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v27(&v11[v25[9]], v24);
      v27(&v11[v25[10]], v24);
      result = ((uint64_t (*)(char *, uint64_t))v27)(&v11[v25[11]], v24);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for HandshakeState.ServerCertificateState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  int *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  int *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  int *v49;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v8, v7);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v7;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 56);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v10, *(_QWORD *)(a2 + 56));
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v9;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v11 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = v11;
  v12 = *(_QWORD *)(a2 + 88);
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 80);
    outlined copy of Data._Representation(v13, *(_QWORD *)(a2 + 88));
    *(_QWORD *)(a1 + 80) = v13;
    *(_QWORD *)(a1 + 88) = v12;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 112);
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 104);
    outlined copy of Data._Representation(v15, *(_QWORD *)(a2 + 112));
    *(_QWORD *)(a1 + 104) = v15;
    *(_QWORD *)(a1 + 112) = v14;
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v16 = *(int *)(a3 + 40);
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = type metadata accessor for P256.Signing.PublicKey();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  v22 = *(int *)(a3 + 44);
  v23 = (char *)(a1 + v22);
  v24 = (char *)(a2 + v22);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v26 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
      v27 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v28 = v27[9];
      v29 = &v23[v28];
      v30 = &v24[v28];
      v31 = type metadata accessor for SymmetricKey();
      v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16);
      v32(v29, v30, v31);
      v32(&v23[v27[10]], &v24[v27[10]], v31);
      v32(&v23[v27[11]], &v24[v27[11]], v31);
      v32(&v23[v27[12]], &v24[v27[12]], v31);
      goto LABEL_22;
    case 1u:
      v33 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v23, v24, v33);
      v34 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v35 = v34[9];
      v36 = &v23[v35];
      v37 = &v24[v35];
      v38 = type metadata accessor for SymmetricKey();
      v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16);
      v39(v36, v37, v38);
      v39(&v23[v34[10]], &v24[v34[10]], v38);
      v39(&v23[v34[11]], &v24[v34[11]], v38);
      goto LABEL_22;
    case 2u:
      v40 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v23, v24, v40);
      v41 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v42 = v41[9];
      v43 = &v23[v42];
      v44 = &v24[v42];
      v45 = type metadata accessor for SymmetricKey();
      v46 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16);
      v46(v43, v44, v45);
      v46(&v23[v41[10]], &v24[v41[10]], v45);
      v46(&v23[v41[11]], &v24[v41[11]], v45);
      v46(&v23[v41[12]], &v24[v41[12]], v45);
      v46(&v23[v41[13]], &v24[v41[13]], v45);
      v46(&v23[v41[14]], &v24[v41[14]], v45);
      goto LABEL_22;
    case 3u:
      v47 = type metadata accessor for SymmetricKey();
      v48 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16);
      v48(v23, v24, v47);
      v49 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v48(&v23[v49[9]], &v24[v49[9]], v47);
      v48(&v23[v49[10]], &v24[v49[10]], v47);
      v48(&v23[v49[11]], &v24[v49[11]], v47);
LABEL_22:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t assignWithCopy for HandshakeState.ServerCertificateState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int16 v24;
  __int128 *v25;
  __int128 *v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 *v34;
  __int128 *v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(void *, uint64_t, uint64_t);
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  int *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  int *v79;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (__int128 *)(a1 + 24);
  v7 = (__int128 *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) >> 60 == 15)
  {
    if (v8 >> 60 == 15)
    {
      v9 = *v7;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *v6 = v9;
      goto LABEL_9;
    }
    v11 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v11, *(_QWORD *)(a2 + 32));
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v8;
  }
  else
  {
    if (v8 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 24);
      v10 = *(_QWORD *)(a2 + 40);
      *v6 = *v7;
      *(_QWORD *)(a1 + 40) = v10;
      goto LABEL_9;
    }
    v12 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v12, *(_QWORD *)(a2 + 32));
    v13 = *(_QWORD *)(a1 + 24);
    v14 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v8;
    outlined consume of Data._Representation(v13, v14);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
LABEL_9:
  v15 = (__int128 *)(a1 + 48);
  v16 = (__int128 *)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56) >> 60 == 15)
  {
    if (v17 >> 60 == 15)
    {
      v18 = *v16;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *v15 = v18;
      goto LABEL_17;
    }
    v20 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v20, *(_QWORD *)(a2 + 56));
    *(_QWORD *)(a1 + 48) = v20;
    *(_QWORD *)(a1 + 56) = v17;
  }
  else
  {
    if (v17 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 48);
      v19 = *(_QWORD *)(a2 + 64);
      *v15 = *v16;
      *(_QWORD *)(a1 + 64) = v19;
      goto LABEL_17;
    }
    v21 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v21, *(_QWORD *)(a2 + 56));
    v22 = *(_QWORD *)(a1 + 48);
    v23 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = v21;
    *(_QWORD *)(a1 + 56) = v17;
    outlined consume of Data._Representation(v22, v23);
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
LABEL_17:
  v24 = *(_WORD *)(a2 + 72);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_WORD *)(a1 + 72) = v24;
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 76);
  *(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 78);
  v25 = (__int128 *)(a1 + 80);
  v26 = (__int128 *)(a2 + 80);
  v27 = *(_QWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 88) >> 60 == 15)
  {
    if (v27 >> 60 == 15)
    {
      v28 = *v26;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *v25 = v28;
      goto LABEL_25;
    }
    v30 = *(_QWORD *)(a2 + 80);
    outlined copy of Data._Representation(v30, *(_QWORD *)(a2 + 88));
    *(_QWORD *)(a1 + 80) = v30;
    *(_QWORD *)(a1 + 88) = v27;
  }
  else
  {
    if (v27 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 80);
      v29 = *(_QWORD *)(a2 + 96);
      *v25 = *v26;
      *(_QWORD *)(a1 + 96) = v29;
      goto LABEL_25;
    }
    v31 = *(_QWORD *)(a2 + 80);
    outlined copy of Data._Representation(v31, *(_QWORD *)(a2 + 88));
    v32 = *(_QWORD *)(a1 + 80);
    v33 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = v31;
    *(_QWORD *)(a1 + 88) = v27;
    outlined consume of Data._Representation(v32, v33);
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
LABEL_25:
  v34 = (__int128 *)(a1 + 104);
  v35 = (__int128 *)(a2 + 104);
  v36 = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 112) >> 60 == 15)
  {
    if (v36 >> 60 == 15)
    {
      v37 = *v35;
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *v34 = v37;
      goto LABEL_33;
    }
    v39 = *(_QWORD *)(a2 + 104);
    outlined copy of Data._Representation(v39, *(_QWORD *)(a2 + 112));
    *(_QWORD *)(a1 + 104) = v39;
    *(_QWORD *)(a1 + 112) = v36;
  }
  else
  {
    if (v36 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 104);
      v38 = *(_QWORD *)(a2 + 120);
      *v34 = *v35;
      *(_QWORD *)(a1 + 120) = v38;
      goto LABEL_33;
    }
    v40 = *(_QWORD *)(a2 + 104);
    outlined copy of Data._Representation(v40, *(_QWORD *)(a2 + 112));
    v41 = *(_QWORD *)(a1 + 104);
    v42 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 104) = v40;
    *(_QWORD *)(a1 + 112) = v36;
    outlined consume of Data._Representation(v41, v42);
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
LABEL_33:
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v43 = *(int *)(a3 + 40);
  v44 = (void *)(a1 + v43);
  v45 = (void *)(a2 + v43);
  v46 = type metadata accessor for P256.Signing.PublicKey();
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v47 + 48);
  v49 = v48(v44, 1, v46);
  v50 = v48(v45, 1, v46);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(void *, void *, uint64_t))(v47 + 16))(v44, v45, v46);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      if (a1 == a2)
        return a1;
      goto LABEL_40;
    }
LABEL_39:
    v51 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    if (a1 == a2)
      return a1;
    goto LABEL_40;
  }
  if (v50)
  {
    (*(void (**)(void *, uint64_t))(v47 + 8))(v44, v46);
    goto LABEL_39;
  }
  (*(void (**)(void *, void *, uint64_t))(v47 + 24))(v44, v45, v46);
  if (a1 == a2)
    return a1;
LABEL_40:
  v52 = *(int *)(a3 + 44);
  v53 = (char *)(a1 + v52);
  v54 = (char *)(a2 + v52);
  outlined destroy of HandshakeStateMachine?(a1 + v52, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v56 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v53, v54, v56);
      v57 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v58 = v57[9];
      v59 = &v53[v58];
      v60 = &v54[v58];
      v61 = type metadata accessor for SymmetricKey();
      v62 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16);
      v62(v59, v60, v61);
      v62(&v53[v57[10]], &v54[v57[10]], v61);
      v62(&v53[v57[11]], &v54[v57[11]], v61);
      v62(&v53[v57[12]], &v54[v57[12]], v61);
      goto LABEL_48;
    case 1u:
      v63 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v53, v54, v63);
      v64 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v65 = v64[9];
      v66 = &v53[v65];
      v67 = &v54[v65];
      v68 = type metadata accessor for SymmetricKey();
      v69 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16);
      v69(v66, v67, v68);
      v69(&v53[v64[10]], &v54[v64[10]], v68);
      v69(&v53[v64[11]], &v54[v64[11]], v68);
      goto LABEL_48;
    case 2u:
      v70 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v53, v54, v70);
      v71 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v72 = v71[9];
      v73 = &v53[v72];
      v74 = &v54[v72];
      v75 = type metadata accessor for SymmetricKey();
      v76 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16);
      v76(v73, v74, v75);
      v76(&v53[v71[10]], &v54[v71[10]], v75);
      v76(&v53[v71[11]], &v54[v71[11]], v75);
      v76(&v53[v71[12]], &v54[v71[12]], v75);
      v76(&v53[v71[13]], &v54[v71[13]], v75);
      v76(&v53[v71[14]], &v54[v71[14]], v75);
      goto LABEL_48;
    case 3u:
      v77 = type metadata accessor for SymmetricKey();
      v78 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 16);
      v78(v53, v54, v77);
      v79 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v78(&v53[v79[9]], &v54[v79[9]], v77);
      v78(&v53[v79[10]], &v54[v79[10]], v77);
      v78(&v53[v79[11]], &v54[v79[11]], v77);
LABEL_48:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t initializeWithTake for HandshakeState.ServerCertificateState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  int *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  int *v42;

  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v9 = *(int *)(a3 + 40);
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  *(_OWORD *)(a1 + 104) = v8;
  v12 = type metadata accessor for P256.Signing.PublicKey();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v15 = *(int *)(a3 + 44);
  v16 = (char *)(a1 + v15);
  v17 = (char *)(a2 + v15);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v19 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
      v20 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v21 = v20[9];
      v22 = &v16[v21];
      v23 = &v17[v21];
      v24 = type metadata accessor for SymmetricKey();
      v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
      v25(v22, v23, v24);
      v25(&v16[v20[10]], &v17[v20[10]], v24);
      v25(&v16[v20[11]], &v17[v20[11]], v24);
      v25(&v16[v20[12]], &v17[v20[12]], v24);
      goto LABEL_10;
    case 1u:
      v26 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v16, v17, v26);
      v27 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v28 = v27[9];
      v29 = &v16[v28];
      v30 = &v17[v28];
      v31 = type metadata accessor for SymmetricKey();
      v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32);
      v32(v29, v30, v31);
      v32(&v16[v27[10]], &v17[v27[10]], v31);
      v32(&v16[v27[11]], &v17[v27[11]], v31);
      goto LABEL_10;
    case 2u:
      v33 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v16, v17, v33);
      v34 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v35 = v34[9];
      v36 = &v16[v35];
      v37 = &v17[v35];
      v38 = type metadata accessor for SymmetricKey();
      v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32);
      v39(v36, v37, v38);
      v39(&v16[v34[10]], &v17[v34[10]], v38);
      v39(&v16[v34[11]], &v17[v34[11]], v38);
      v39(&v16[v34[12]], &v17[v34[12]], v38);
      v39(&v16[v34[13]], &v17[v34[13]], v38);
      v39(&v16[v34[14]], &v17[v34[14]], v38);
      goto LABEL_10;
    case 3u:
      v40 = type metadata accessor for SymmetricKey();
      v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32);
      v41(v16, v17, v40);
      v42 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v41(&v16[v42[9]], &v17[v42[9]], v40);
      v41(&v16[v42[10]], &v17[v42[10]], v40);
      v41(&v16[v42[11]], &v17[v42[11]], v40);
LABEL_10:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t assignWithTake for HandshakeState.ServerCertificateState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  int *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  int *v55;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 >> 60 == 15)
    goto LABEL_4;
  v8 = *(_QWORD *)(a2 + 32);
  if (v8 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  outlined consume of Data._Representation(v9, v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
LABEL_6:
  v10 = *(_QWORD *)(a1 + 56);
  if (v10 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(a2 + 56);
  if (v11 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 48);
    goto LABEL_9;
  }
  v12 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v11;
  outlined consume of Data._Representation(v12, v10);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
LABEL_11:
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  v13 = *(_QWORD *)(a1 + 88);
  if (v13 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    goto LABEL_16;
  }
  v14 = *(_QWORD *)(a2 + 88);
  if (v14 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 80);
    goto LABEL_14;
  }
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v14;
  outlined consume of Data._Representation(v15, v13);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
LABEL_16:
  v16 = *(_QWORD *)(a1 + 112);
  if (v16 >> 60 == 15)
  {
LABEL_19:
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    goto LABEL_21;
  }
  v17 = *(_QWORD *)(a2 + 112);
  if (v17 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 104);
    goto LABEL_19;
  }
  v18 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v17;
  outlined consume of Data._Representation(v18, v16);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
LABEL_21:
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v19 = *(int *)(a3 + 40);
  v20 = (void *)(a1 + v19);
  v21 = (void *)(a2 + v19);
  v22 = type metadata accessor for P256.Signing.PublicKey();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      if (a1 == a2)
        return a1;
      goto LABEL_28;
    }
LABEL_27:
    v27 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    if (a1 == a2)
      return a1;
    goto LABEL_28;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_27;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 40))(v20, v21, v22);
  if (a1 == a2)
    return a1;
LABEL_28:
  v28 = *(int *)(a3 + 44);
  v29 = (char *)(a1 + v28);
  v30 = (char *)(a2 + v28);
  outlined destroy of HandshakeStateMachine?(a1 + v28, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v32 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v29, v30, v32);
      v33 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v34 = v33[9];
      v35 = &v29[v34];
      v36 = &v30[v34];
      v37 = type metadata accessor for SymmetricKey();
      v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32);
      v38(v35, v36, v37);
      v38(&v29[v33[10]], &v30[v33[10]], v37);
      v38(&v29[v33[11]], &v30[v33[11]], v37);
      v38(&v29[v33[12]], &v30[v33[12]], v37);
      goto LABEL_36;
    case 1u:
      v39 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v29, v30, v39);
      v40 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v41 = v40[9];
      v42 = &v29[v41];
      v43 = &v30[v41];
      v44 = type metadata accessor for SymmetricKey();
      v45 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32);
      v45(v42, v43, v44);
      v45(&v29[v40[10]], &v30[v40[10]], v44);
      v45(&v29[v40[11]], &v30[v40[11]], v44);
      goto LABEL_36;
    case 2u:
      v46 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v29, v30, v46);
      v47 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v48 = v47[9];
      v49 = &v29[v48];
      v50 = &v30[v48];
      v51 = type metadata accessor for SymmetricKey();
      v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32);
      v52(v49, v50, v51);
      v52(&v29[v47[10]], &v30[v47[10]], v51);
      v52(&v29[v47[11]], &v30[v47[11]], v51);
      v52(&v29[v47[12]], &v30[v47[12]], v51);
      v52(&v29[v47[13]], &v30[v47[13]], v51);
      v52(&v29[v47[14]], &v30[v47[14]], v51);
      goto LABEL_36;
    case 3u:
      v53 = type metadata accessor for SymmetricKey();
      v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32);
      v54(v29, v30, v53);
      v55 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v54(&v29[v55[9]], &v30[v55[9]], v53);
      v54(&v29[v55[10]], &v30[v55[10]], v53);
      v54(&v29[v55[11]], &v30[v55[11]], v53);
LABEL_36:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for HandshakeState.ServerCertificateState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0DD2E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for PeerCertificateBundle(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 40);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for HandshakeState.ServerCertificateState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0DD2EEC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for PeerCertificateBundle(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 40);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for HandshakeState.ServerCertificateVerifyState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for HandshakeState.ServerCertificateVerifyState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t initializeBufferWithCopyOfBuffer for HandshakeState.ServerCertificateVerifyState(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  int *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  int *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  int *v58;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = a2[2];
    v8 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    }
    else
    {
      v11 = a2[3];
      outlined copy of Data._Representation(v11, v8);
      *(_QWORD *)(a1 + 24) = v11;
      *(_QWORD *)(a1 + 32) = v8;
    }
    *(_QWORD *)(a1 + 40) = a2[5];
    v12 = a2[7];
    if (v12 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    }
    else
    {
      v13 = a2[6];
      outlined copy of Data._Representation(v13, a2[7]);
      *(_QWORD *)(a1 + 48) = v13;
      *(_QWORD *)(a1 + 56) = v12;
    }
    *(_QWORD *)(a1 + 64) = a2[8];
    v14 = *((_DWORD *)a2 + 19);
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    *(_DWORD *)(a1 + 76) = v14;
    v15 = a3[7];
    v16 = (void *)(a1 + v15);
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for P256.Signing.PublicKey();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = type metadata accessor for PeerCertificateBundle.Bundle(0);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v21 = a3[8];
    v22 = a1 + v21;
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = *(uint64_t *)((char *)a2 + v21 + 8);
    if (v24 >> 60 == 15)
    {
      *(_OWORD *)v22 = *(_OWORD *)v23;
    }
    else
    {
      v25 = *v23;
      outlined copy of Data._Representation(*v23, v24);
      *(_QWORD *)v22 = v25;
      *(_QWORD *)(v22 + 8) = v24;
    }
    *(_QWORD *)(v22 + 16) = v23[2];
    v26 = a3[9];
    v27 = a1 + v26;
    v28 = (uint64_t *)((char *)a2 + v26);
    v29 = *(uint64_t *)((char *)a2 + v26 + 8);
    if (v29 >> 60 == 15)
    {
      *(_OWORD *)v27 = *(_OWORD *)v28;
    }
    else
    {
      v30 = *v28;
      outlined copy of Data._Representation(*v28, v29);
      *(_QWORD *)v27 = v30;
      *(_QWORD *)(v27 + 8) = v29;
    }
    *(_QWORD *)(v27 + 16) = v28[2];
    v31 = a3[11];
    *(_BYTE *)(a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    v32 = (char *)(a1 + v31);
    v33 = (char *)a2 + v31;
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v35 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v32, v33, v35);
        v36 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        v37 = v36[9];
        v38 = &v32[v37];
        v39 = &v33[v37];
        v40 = type metadata accessor for SymmetricKey();
        v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
        v41(v38, v39, v40);
        v41(&v32[v36[10]], &v33[v36[10]], v40);
        v41(&v32[v36[11]], &v33[v36[11]], v40);
        v41(&v32[v36[12]], &v33[v36[12]], v40);
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        v42 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v32, v33, v42);
        v43 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        v44 = v43[9];
        v45 = &v32[v44];
        v46 = &v33[v44];
        v47 = type metadata accessor for SymmetricKey();
        v48 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16);
        v48(v45, v46, v47);
        v48(&v32[v43[10]], &v33[v43[10]], v47);
        v48(&v32[v43[11]], &v33[v43[11]], v47);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        v49 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v32, v33, v49);
        v50 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        v51 = v50[9];
        v52 = &v32[v51];
        v53 = &v33[v51];
        v54 = type metadata accessor for SymmetricKey();
        v55 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16);
        v55(v52, v53, v54);
        v55(&v32[v50[10]], &v33[v50[10]], v54);
        v55(&v32[v50[11]], &v33[v50[11]], v54);
        v55(&v32[v50[12]], &v33[v50[12]], v54);
        v55(&v32[v50[13]], &v33[v50[13]], v54);
        v55(&v32[v50[14]], &v33[v50[14]], v54);
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        v56 = type metadata accessor for SymmetricKey();
        v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16);
        v57(v32, v33, v56);
        v58 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v57(&v32[v58[9]], &v33[v58[9]], v56);
        v57(&v32[v58[10]], &v33[v58[10]], v56);
        v57(&v32[v58[11]], &v33[v58[11]], v56);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t initializeWithCopy for HandshakeState.ServerCertificateVerifyState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  int *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  int *v55;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v8, v7);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v7;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 56);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v10, *(_QWORD *)(a2 + 56));
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v9;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v11 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = v11;
  v12 = a3[7];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = type metadata accessor for P256.Signing.PublicKey();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[8];
  v19 = a1 + v18;
  v20 = (uint64_t *)(a2 + v18);
  v21 = *(_QWORD *)(a2 + v18 + 8);
  if (v21 >> 60 == 15)
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
  }
  else
  {
    v22 = *v20;
    outlined copy of Data._Representation(*v20, v21);
    *(_QWORD *)v19 = v22;
    *(_QWORD *)(v19 + 8) = v21;
  }
  *(_QWORD *)(v19 + 16) = v20[2];
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = (uint64_t *)(a2 + v23);
  v26 = *(_QWORD *)(a2 + v23 + 8);
  if (v26 >> 60 == 15)
  {
    *(_OWORD *)v24 = *(_OWORD *)v25;
  }
  else
  {
    v27 = *v25;
    outlined copy of Data._Representation(*v25, v26);
    *(_QWORD *)v24 = v27;
    *(_QWORD *)(v24 + 8) = v26;
  }
  *(_QWORD *)(v24 + 16) = v25[2];
  v28 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v29 = (char *)(a1 + v28);
  v30 = (char *)(a2 + v28);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v32 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
      v33 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v34 = v33[9];
      v35 = &v29[v34];
      v36 = &v30[v34];
      v37 = type metadata accessor for SymmetricKey();
      v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
      v38(v35, v36, v37);
      v38(&v29[v33[10]], &v30[v33[10]], v37);
      v38(&v29[v33[11]], &v30[v33[11]], v37);
      v38(&v29[v33[12]], &v30[v33[12]], v37);
      goto LABEL_22;
    case 1u:
      v39 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v29, v30, v39);
      v40 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v41 = v40[9];
      v42 = &v29[v41];
      v43 = &v30[v41];
      v44 = type metadata accessor for SymmetricKey();
      v45 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16);
      v45(v42, v43, v44);
      v45(&v29[v40[10]], &v30[v40[10]], v44);
      v45(&v29[v40[11]], &v30[v40[11]], v44);
      goto LABEL_22;
    case 2u:
      v46 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v29, v30, v46);
      v47 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v48 = v47[9];
      v49 = &v29[v48];
      v50 = &v30[v48];
      v51 = type metadata accessor for SymmetricKey();
      v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16);
      v52(v49, v50, v51);
      v52(&v29[v47[10]], &v30[v47[10]], v51);
      v52(&v29[v47[11]], &v30[v47[11]], v51);
      v52(&v29[v47[12]], &v30[v47[12]], v51);
      v52(&v29[v47[13]], &v30[v47[13]], v51);
      v52(&v29[v47[14]], &v30[v47[14]], v51);
      goto LABEL_22;
    case 3u:
      v53 = type metadata accessor for SymmetricKey();
      v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
      v54(v29, v30, v53);
      v55 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v54(&v29[v55[9]], &v30[v55[9]], v53);
      v54(&v29[v55[10]], &v30[v55[10]], v53);
      v54(&v29[v55[11]], &v30[v55[11]], v53);
LABEL_22:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t assignWithCopy for HandshakeState.ServerCertificateVerifyState(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  int *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  int *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  int *v81;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (__int128 *)(a1 + 24);
  v7 = (__int128 *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) >> 60 == 15)
  {
    if (v8 >> 60 == 15)
    {
      v9 = *v7;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *v6 = v9;
      goto LABEL_9;
    }
    v11 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v11, *(_QWORD *)(a2 + 32));
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v8;
  }
  else
  {
    if (v8 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 24);
      v10 = *(_QWORD *)(a2 + 40);
      *v6 = *v7;
      *(_QWORD *)(a1 + 40) = v10;
      goto LABEL_9;
    }
    v12 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v12, *(_QWORD *)(a2 + 32));
    v13 = *(_QWORD *)(a1 + 24);
    v14 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v8;
    outlined consume of Data._Representation(v13, v14);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
LABEL_9:
  v15 = (__int128 *)(a1 + 48);
  v16 = (__int128 *)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56) >> 60 == 15)
  {
    if (v17 >> 60 == 15)
    {
      v18 = *v16;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *v15 = v18;
      goto LABEL_17;
    }
    v20 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v20, *(_QWORD *)(a2 + 56));
    *(_QWORD *)(a1 + 48) = v20;
    *(_QWORD *)(a1 + 56) = v17;
  }
  else
  {
    if (v17 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 48);
      v19 = *(_QWORD *)(a2 + 64);
      *v15 = *v16;
      *(_QWORD *)(a1 + 64) = v19;
      goto LABEL_17;
    }
    v21 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v21, *(_QWORD *)(a2 + 56));
    v22 = *(_QWORD *)(a1 + 48);
    v23 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = v21;
    *(_QWORD *)(a1 + 56) = v17;
    outlined consume of Data._Representation(v22, v23);
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
LABEL_17:
  v24 = *(_WORD *)(a2 + 72);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_WORD *)(a1 + 72) = v24;
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 76);
  *(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 78);
  v25 = a3[7];
  v26 = (void *)(a1 + v25);
  v27 = (void *)(a2 + v25);
  v28 = type metadata accessor for P256.Signing.PublicKey();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v32)
  {
    (*(void (**)(void *, uint64_t))(v29 + 8))(v26, v28);
LABEL_22:
    v33 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(void *, void *, uint64_t))(v29 + 24))(v26, v27, v28);
LABEL_23:
  v34 = a3[8];
  v35 = a1 + v34;
  v36 = (uint64_t *)(a2 + v34);
  v37 = *(_QWORD *)(a2 + v34 + 8);
  if (*(_QWORD *)(a1 + v34 + 8) >> 60 == 15)
  {
    if (v37 >> 60 == 15)
    {
      v38 = *(_OWORD *)v36;
      *(_QWORD *)(v35 + 16) = v36[2];
      *(_OWORD *)v35 = v38;
      goto LABEL_32;
    }
    v40 = *v36;
    outlined copy of Data._Representation(*v36, v37);
    *(_QWORD *)v35 = v40;
    *(_QWORD *)(v35 + 8) = v37;
    goto LABEL_30;
  }
  if (v37 >> 60 != 15)
  {
    v41 = *v36;
    outlined copy of Data._Representation(*v36, v37);
    v42 = *(_QWORD *)v35;
    v43 = *(_QWORD *)(v35 + 8);
    *(_QWORD *)v35 = v41;
    *(_QWORD *)(v35 + 8) = v37;
    outlined consume of Data._Representation(v42, v43);
LABEL_30:
    v39 = v36[2];
    goto LABEL_31;
  }
  outlined destroy of ByteBuffer(v35);
  v39 = v36[2];
  *(_OWORD *)v35 = *(_OWORD *)v36;
LABEL_31:
  *(_QWORD *)(v35 + 16) = v39;
LABEL_32:
  v44 = a3[9];
  v45 = a1 + v44;
  v46 = (uint64_t *)(a2 + v44);
  v47 = *(_QWORD *)(a2 + v44 + 8);
  if (*(_QWORD *)(a1 + v44 + 8) >> 60 == 15)
  {
    if (v47 >> 60 == 15)
    {
      v48 = *(_OWORD *)v46;
      *(_QWORD *)(v45 + 16) = v46[2];
      *(_OWORD *)v45 = v48;
      goto LABEL_41;
    }
    v50 = *v46;
    outlined copy of Data._Representation(*v46, v47);
    *(_QWORD *)v45 = v50;
    *(_QWORD *)(v45 + 8) = v47;
    goto LABEL_39;
  }
  if (v47 >> 60 != 15)
  {
    v51 = *v46;
    outlined copy of Data._Representation(*v46, v47);
    v52 = *(_QWORD *)v45;
    v53 = *(_QWORD *)(v45 + 8);
    *(_QWORD *)v45 = v51;
    *(_QWORD *)(v45 + 8) = v47;
    outlined consume of Data._Representation(v52, v53);
LABEL_39:
    v49 = v46[2];
    goto LABEL_40;
  }
  outlined destroy of ByteBuffer(v45);
  v49 = v46[2];
  *(_OWORD *)v45 = *(_OWORD *)v46;
LABEL_40:
  *(_QWORD *)(v45 + 16) = v49;
LABEL_41:
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  if (a1 != a2)
  {
    v54 = a3[11];
    v55 = (char *)(a1 + v54);
    v56 = (char *)(a2 + v54);
    outlined destroy of HandshakeStateMachine?(a1 + v54, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v58 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v55, v56, v58);
        v59 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        v60 = v59[9];
        v61 = &v55[v60];
        v62 = &v56[v60];
        v63 = type metadata accessor for SymmetricKey();
        v64 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16);
        v64(v61, v62, v63);
        v64(&v55[v59[10]], &v56[v59[10]], v63);
        v64(&v55[v59[11]], &v56[v59[11]], v63);
        v64(&v55[v59[12]], &v56[v59[12]], v63);
        goto LABEL_49;
      case 1u:
        v65 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v55, v56, v65);
        v66 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        v67 = v66[9];
        v68 = &v55[v67];
        v69 = &v56[v67];
        v70 = type metadata accessor for SymmetricKey();
        v71 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16);
        v71(v68, v69, v70);
        v71(&v55[v66[10]], &v56[v66[10]], v70);
        v71(&v55[v66[11]], &v56[v66[11]], v70);
        goto LABEL_49;
      case 2u:
        v72 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v55, v56, v72);
        v73 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        v74 = v73[9];
        v75 = &v55[v74];
        v76 = &v56[v74];
        v77 = type metadata accessor for SymmetricKey();
        v78 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 16);
        v78(v75, v76, v77);
        v78(&v55[v73[10]], &v56[v73[10]], v77);
        v78(&v55[v73[11]], &v56[v73[11]], v77);
        v78(&v55[v73[12]], &v56[v73[12]], v77);
        v78(&v55[v73[13]], &v56[v73[13]], v77);
        v78(&v55[v73[14]], &v56[v73[14]], v77);
        goto LABEL_49;
      case 3u:
        v79 = type metadata accessor for SymmetricKey();
        v80 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16);
        v80(v55, v56, v79);
        v81 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v80(&v55[v81[9]], &v56[v81[9]], v79);
        v80(&v55[v81[10]], &v56[v81[10]], v79);
        v80(&v55[v81[11]], &v56[v81[11]], v79);
LABEL_49:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t initializeWithTake for HandshakeState.ServerCertificateVerifyState(uint64_t a1, __int128 *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  int *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  int *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  int *v49;

  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 60) = *(__int128 *)((char *)a2 + 60);
  v8 = *a2;
  v7 = a2[1];
  *(_DWORD *)(a1 + 76) = *((_DWORD *)a2 + 19);
  v9 = a3[7];
  v10 = (void *)(a1 + v9);
  v11 = (char *)a2 + v9;
  *(_OWORD *)a1 = v8;
  *(_OWORD *)(a1 + 16) = v7;
  v12 = type metadata accessor for P256.Signing.PublicKey();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v15 = a3[8];
  v16 = a3[9];
  v17 = a1 + v15;
  v18 = (__int128 *)((char *)a2 + v15);
  v19 = *v18;
  *(_QWORD *)(v17 + 16) = *((_QWORD *)v18 + 2);
  *(_OWORD *)v17 = v19;
  v20 = a1 + v16;
  v21 = (uint64_t)a2 + v16;
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
  v22 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v23 = (char *)(a1 + v22);
  v24 = (char *)a2 + v22;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v26 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v23, v24, v26);
      v27 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
      v28 = v27[9];
      v29 = &v23[v28];
      v30 = &v24[v28];
      v31 = type metadata accessor for SymmetricKey();
      v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32);
      v32(v29, v30, v31);
      v32(&v23[v27[10]], &v24[v27[10]], v31);
      v32(&v23[v27[11]], &v24[v27[11]], v31);
      v32(&v23[v27[12]], &v24[v27[12]], v31);
      goto LABEL_10;
    case 1u:
      v33 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v23, v24, v33);
      v34 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
      v35 = v34[9];
      v36 = &v23[v35];
      v37 = &v24[v35];
      v38 = type metadata accessor for SymmetricKey();
      v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32);
      v39(v36, v37, v38);
      v39(&v23[v34[10]], &v24[v34[10]], v38);
      v39(&v23[v34[11]], &v24[v34[11]], v38);
      goto LABEL_10;
    case 2u:
      v40 = type metadata accessor for SHA384();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v23, v24, v40);
      v41 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
      v42 = v41[9];
      v43 = &v23[v42];
      v44 = &v24[v42];
      v45 = type metadata accessor for SymmetricKey();
      v46 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32);
      v46(v43, v44, v45);
      v46(&v23[v41[10]], &v24[v41[10]], v45);
      v46(&v23[v41[11]], &v24[v41[11]], v45);
      v46(&v23[v41[12]], &v24[v41[12]], v45);
      v46(&v23[v41[13]], &v24[v41[13]], v45);
      v46(&v23[v41[14]], &v24[v41[14]], v45);
      goto LABEL_10;
    case 3u:
      v47 = type metadata accessor for SymmetricKey();
      v48 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32);
      v48(v23, v24, v47);
      v49 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
      v48(&v23[v49[9]], &v24[v49[9]], v47);
      v48(&v23[v49[10]], &v24[v49[10]], v47);
      v48(&v23[v49[11]], &v24[v49[11]], v47);
LABEL_10:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t assignWithTake for HandshakeState.ServerCertificateVerifyState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  int *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  int *v61;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 >> 60 == 15)
    goto LABEL_4;
  v8 = *(_QWORD *)(a2 + 32);
  if (v8 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  outlined consume of Data._Representation(v9, v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
LABEL_6:
  v10 = *(_QWORD *)(a1 + 56);
  if (v10 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(a2 + 56);
  if (v11 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 48);
    goto LABEL_9;
  }
  v12 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v11;
  outlined consume of Data._Representation(v12, v10);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
LABEL_11:
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  v13 = a3[7];
  v14 = (void *)(a1 + v13);
  v15 = (void *)(a2 + v13);
  v16 = type metadata accessor for P256.Signing.PublicKey();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
LABEL_16:
    v21 = type metadata accessor for PeerCertificateBundle.Bundle(0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v14, v15, v16);
LABEL_17:
  v22 = a3[8];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = *(_QWORD *)(a1 + v22 + 8);
  if (v25 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)v23 = *(_OWORD *)v24;
    goto LABEL_22;
  }
  v26 = *(_QWORD *)(v24 + 8);
  if (v26 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(v23);
    goto LABEL_20;
  }
  v27 = *(_QWORD *)v23;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_QWORD *)(v23 + 8) = v26;
  outlined consume of Data._Representation(v27, v25);
LABEL_22:
  *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
  v28 = a3[9];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = *(_QWORD *)(a1 + v28 + 8);
  if (v31 >> 60 == 15)
  {
LABEL_25:
    *(_OWORD *)v29 = *(_OWORD *)v30;
    goto LABEL_27;
  }
  v32 = *(_QWORD *)(v30 + 8);
  if (v32 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(v29);
    goto LABEL_25;
  }
  v33 = *(_QWORD *)v29;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_QWORD *)(v29 + 8) = v32;
  outlined consume of Data._Representation(v33, v31);
LABEL_27:
  *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  if (a1 != a2)
  {
    v34 = a3[11];
    v35 = (char *)(a1 + v34);
    v36 = (char *)(a2 + v34);
    outlined destroy of HandshakeStateMachine?(a1 + v34, &demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v38 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v35, v36, v38);
        v39 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.EarlySecret);
        v40 = v39[9];
        v41 = &v35[v40];
        v42 = &v36[v40];
        v43 = type metadata accessor for SymmetricKey();
        v44 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32);
        v44(v41, v42, v43);
        v44(&v35[v39[10]], &v36[v39[10]], v43);
        v44(&v35[v39[11]], &v36[v39[11]], v43);
        v44(&v35[v39[12]], &v36[v39[12]], v43);
        goto LABEL_35;
      case 1u:
        v45 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v35, v36, v45);
        v46 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.HandshakeSecret);
        v47 = v46[9];
        v48 = &v35[v47];
        v49 = &v36[v47];
        v50 = type metadata accessor for SymmetricKey();
        v51 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32);
        v51(v48, v49, v50);
        v51(&v35[v46[10]], &v36[v46[10]], v50);
        v51(&v35[v46[11]], &v36[v46[11]], v50);
        goto LABEL_35;
      case 2u:
        v52 = type metadata accessor for SHA384();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v35, v36, v52);
        v53 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.MasterSecret);
        v54 = v53[9];
        v55 = &v35[v54];
        v56 = &v36[v54];
        v57 = type metadata accessor for SymmetricKey();
        v58 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32);
        v58(v55, v56, v57);
        v58(&v35[v53[10]], &v36[v53[10]], v57);
        v58(&v35[v53[11]], &v36[v53[11]], v57);
        v58(&v35[v53[12]], &v36[v53[12]], v57);
        v58(&v35[v53[13]], &v36[v53[13]], v57);
        v58(&v35[v53[14]], &v36[v53[14]], v57);
        goto LABEL_35;
      case 3u:
        v59 = type metadata accessor for SymmetricKey();
        v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 32);
        v60(v35, v36, v59);
        v61 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>.State.AllSecrets);
        v60(&v35[v61[9]], &v36[v61[9]], v59);
        v60(&v35[v61[10]], &v36[v61[10]], v59);
        v60(&v35[v61[11]], &v36[v61[11]], v59);
LABEL_35:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for HandshakeState.ReadyState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_9Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for PeerCertificateBundle(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for HandshakeState.ReadyState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_10Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for PeerCertificateBundle(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionKeyManager<SHA384>);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t closure #1 in static HMAC.authenticationCode<A>(bytes:using:)specialized partial apply()
{
  return partial apply for specialized closure #1 in static HMAC.authenticationCode<A>(bytes:using:)();
}

uint64_t closure #1 in static HKDF.extract(inputKeyMaterial:salt:)specialized partial apply()
{
  return partial apply for specialized closure #1 in static HKDF.extract(inputKeyMaterial:salt:)();
}

uint64_t closure #1 in static HKDF.expandLabel<A, B>(secret:label:context:length:)partial apply(uint64_t a1, char *a2)
{
  return partial apply for closure #1 in static HKDF.expandLabel<A, B>(secret:label:context:length:)(a1, a2);
}

uint64_t HandshakeStateMachine.Configuration.serverName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HandshakeStateMachine.Configuration.serverName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t HandshakeStateMachine.Configuration.validPublicKeys.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HandshakeStateMachine.Configuration.validPublicKeys.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*HandshakeStateMachine.Configuration.validPublicKeys.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeStateMachine.Configuration.quicTransportParameters.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  outlined copy of ByteBuffer?(v1, *(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t HandshakeStateMachine.Configuration.quicTransportParameters.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  result = outlined consume of ByteBuffer?(v3[3], v3[4]);
  v3[3] = a1;
  v3[4] = a2;
  v3[5] = a3;
  return result;
}

uint64_t HandshakeStateMachine.Configuration.alpn.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  outlined copy of ByteBuffer?(v1, *(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t HandshakeStateMachine.Configuration.alpn.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  result = outlined consume of ByteBuffer?(v3[6], v3[7]);
  v3[6] = a1;
  v3[7] = a2;
  v3[8] = a3;
  return result;
}

uint64_t (*HandshakeStateMachine.Configuration.alpn.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeStateMachine.Configuration.ticketRequest.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 72) | (*(unsigned __int8 *)(v0 + 74) << 16);
}

uint64_t HandshakeStateMachine.Configuration.ticketRequest.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 72) = result;
  *(_BYTE *)(v1 + 74) = BYTE2(result) & 1;
  return result;
}

uint64_t (*HandshakeStateMachine.Configuration.ticketRequest.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeStateMachine.Configuration.useX25519KeyExchange.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 75);
}

uint64_t HandshakeStateMachine.Configuration.useX25519KeyExchange.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 75) = result;
  return result;
}

uint64_t (*HandshakeStateMachine.Configuration.useX25519KeyExchange.modify())()
{
  return CertificateVerify.algorithm.getter;
}

uint64_t HandshakeStateMachine.Configuration.init(serverName:validPublicKeys:quicTransportParameters:alpn:ticketRequest:useX25519KeyExchange:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int16 a11, char a12, char a13, char a14)
{
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = a10;
  *(_WORD *)(a9 + 72) = a11;
  *(_BYTE *)(a9 + 74) = a12 & 1;
  *(_BYTE *)(a9 + 75) = a14;
  return result;
}

void HandshakeStateMachine.Configuration.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v4 = type metadata accessor for P256.Signing.PublicKey();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.Signing.PublicKey?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v2 + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v23 = v2;
  v11 = *(_QWORD *)(v2 + 16);
  v25 = a1;
  v26 = v11;
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = v11 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v24 = *(_QWORD *)(v5 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    while (1)
    {
      v14(v10, v13, v4);
      v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v15(v10, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
        break;
      v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
      v17 = MEMORY[0x1B5E107B8](v16);
      v19 = v18;
      Data.hash(into:)();
      outlined consume of Data._Representation(v17, v19);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v13 += v24;
      if (!--v12)
        goto LABEL_10;
    }
  }
  else
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    swift_bridgeObjectRetain();
LABEL_10:
    v15(v10, 1, 1, v4);
  }
  outlined release of [Extension]((uint64_t)&v26);
  v20 = v23;
  v21 = *(_QWORD *)(v23 + 32);
  if (v21 >> 60 != 15)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X10 }
  }
  Hasher._combine(_:)(0);
  v22 = *(_QWORD *)(v20 + 56);
  if (v22 >> 60 != 15)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X10 }
  }
  Hasher._combine(_:)(0);
}

Swift::Int HandshakeStateMachine.Configuration.hashValue.getter()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  HandshakeStateMachine.Configuration.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HandshakeStateMachine.Configuration()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  HandshakeStateMachine.Configuration.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HandshakeStateMachine.Configuration(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[2];
  _OWORD v9[3];
  _OWORD v10[2];

  v2 = a1[3];
  v7[2] = a1[2];
  v8[0] = v2;
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)((char *)a1 + 60);
  v3 = a1[1];
  v7[0] = *a1;
  v7[1] = v3;
  v4 = a2[3];
  v9[2] = a2[2];
  v10[0] = v4;
  *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)((char *)a2 + 60);
  v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  return specialized static HandshakeStateMachine.Configuration.== infix(_:_:)(v7, v9) & 1;
}

uint64_t specialized static HandshakeStateMachine.Configuration.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t result;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t);
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void (*v59)(void);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[7];
  uint64_t v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  void (*v74)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v75;
  void (*v76)(void);
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[3];

  v88[1] = *MEMORY[0x1E0C80C00];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (P256.Signing.PublicKey, P256.Signing.PublicKey));
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)v69 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v69 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.Signing.PublicKey?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)v69 - v18;
  v20 = type metadata accessor for P256.Signing.PublicKey();
  v86 = *(_QWORD *)(v20 - 8);
  v21 = MEMORY[0x1E0C80A78](v20);
  v83 = (char *)v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v85 = (char *)v69 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (P256.Signing.PublicKey, P256.Signing.PublicKey)?);
  MEMORY[0x1E0C80A78](v24);
  v84 = (char *)v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = a1[1];
  v27 = a2[1];
  if (!v26)
  {
    if (v27)
      return 0;
    goto LABEL_8;
  }
  if (!v27)
    return 0;
  if (*a1 == *a2 && v26 == v27 || (v28 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v28 & 1) != 0))
  {
LABEL_8:
    v77 = v17;
    v78 = v4;
    v80 = v19;
    v81 = v13;
    v75 = v11;
    v82 = v8;
    v79 = v5;
    v30 = a1[3];
    v31 = a1[4];
    v33 = a2[3];
    v32 = a2[4];
    if (v31 >> 60 == 15)
    {
      if (v32 >> 60 == 15)
      {
LABEL_14:
        v36 = a1[6];
        v37 = a1[7];
        v38 = a2[6];
        v39 = a2[7];
        if (v37 >> 60 == 15)
        {
          if (v39 >> 60 == 15)
          {
LABEL_20:
            v42 = a1[2];
            v43 = a2[2];
            v87 = v43;
            v88[0] = v42;
            v70 = v42;
            v44 = *(_QWORD *)(v42 + 16);
            outlined retain of [Extension]((uint64_t)v88);
            outlined retain of [Extension]((uint64_t)&v87);
            outlined retain of [Extension]((uint64_t)v88);
            outlined retain of [Extension]((uint64_t)&v87);
            v69[6] = v44;
            if (v44)
            {
              v69[4] = 0;
              v45 = v86;
              v46 = (*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
              v69[5] = *(_QWORD *)(v86 + 72);
              v76 = *(void (**)(void))(v86 + 16);
              v47 = v79;
              v48 = (uint64_t)v80;
              ((void (*)(char *, unint64_t, uint64_t))v76)(v80, v70 + v46, v20);
              v49 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56);
              v49(v48, 0, 1, v20);
              v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
              if (v50(v48, 1, v20) != 1)
              {
                v51 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
                v51(v85, v48, v20);
                if (*(_QWORD *)(v43 + 16))
                {
                  v48 = (uint64_t)v77;
                  ((void (*)(char *, unint64_t, uint64_t))v76)(v77, v43 + v46, v20);
                  v49(v48, 0, 1, v20);
                  if (v50(v48, 1, v20) != 1)
                  {
                    v72 = v46;
                    v74 = v49;
                    v52 = v83;
                    v51(v83, v48, v20);
                    v53 = v78;
                    v54 = (uint64_t)v84;
                    v55 = &v84[*(int *)(v78 + 48)];
                    v51(v84, (uint64_t)v85, v20);
                    v51(v55, (uint64_t)v52, v20);
                    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56))(v54, 0, 1, v53);
                    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v54, 1, v53) != 1)
                    {
                      v56 = (uint64_t)v81;
                      outlined init with take of (P256.Signing.PublicKey, P256.Signing.PublicKey)(v54, (uint64_t)v81);
                      v57 = *(int *)(v53 + 48);
                      v58 = v75;
                      v59 = v76;
                      v60 = &v75[v57];
                      v61 = v56 + v57;
                      ((void (*)(char *, uint64_t, uint64_t))v76)(v75, v56, v20);
                      v71 = v60;
                      v62 = ((uint64_t (*)(char *, uint64_t, uint64_t))v59)(v60, v61, v20);
                      v73 = MEMORY[0x1B5E107B8](v62);
                      v64 = v63;
                      v65 = *(void (**)(char *, uint64_t))(v86 + 8);
                      v65(v58, v20);
                      v66 = &v82[*(int *)(v53 + 48)];
                      v59();
                      v67 = ((uint64_t (*)(char *, uint64_t, uint64_t))v59)(v66, v61, v20);
                      MEMORY[0x1B5E107B8](v67);
                      v65(v66, v20);
                      __asm { BR              X10 }
                    }
                    goto LABEL_30;
                  }
                }
                else
                {
                  v48 = (uint64_t)v77;
                  v49((uint64_t)v77, 1, 1, v20);
                }
                (*(void (**)(char *, uint64_t))(v86 + 8))(v85, v20);
              }
            }
            else
            {
              v47 = v79;
              v48 = (uint64_t)v80;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56))(v80, 1, 1, v20);
            }
            v68 = v78;
            outlined destroy of HandshakeStateMachine?(v48, &demangling cache variable for type metadata for P256.Signing.PublicKey?);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v84, 1, 1, v68);
LABEL_30:
            outlined release of [Extension]((uint64_t)v88);
            outlined release of [Extension]((uint64_t)&v87);
            outlined release of [Extension]((uint64_t)v88);
            outlined release of [Extension]((uint64_t)&v87);
            return 1;
          }
          goto LABEL_18;
        }
        if (v39 >> 60 == 15)
        {
LABEL_18:
          outlined copy of ByteBuffer?(a1[6], a1[7]);
          outlined copy of ByteBuffer?(v38, v39);
          outlined consume of ByteBuffer?(v36, v37);
          outlined consume of ByteBuffer?(v38, v39);
          return 0;
        }
        outlined copy of ByteBuffer?(a1[6], a1[7]);
        outlined copy of ByteBuffer?(v38, v39);
        specialized static ByteBuffer.== infix(_:_:)(v36, v37);
        v41 = v40;
        outlined consume of ByteBuffer?(v38, v39);
        outlined consume of ByteBuffer?(v36, v37);
        if ((v41 & 1) != 0)
          goto LABEL_20;
        return 0;
      }
    }
    else if (v32 >> 60 != 15)
    {
      outlined copy of ByteBuffer?(a1[3], a1[4]);
      outlined copy of ByteBuffer?(v33, v32);
      specialized static ByteBuffer.== infix(_:_:)(v30, v31);
      v35 = v34;
      outlined consume of ByteBuffer?(v33, v32);
      outlined consume of ByteBuffer?(v30, v31);
      if ((v35 & 1) == 0)
        return 0;
      goto LABEL_14;
    }
    outlined copy of ByteBuffer?(a1[3], a1[4]);
    outlined copy of ByteBuffer?(v33, v32);
    outlined consume of ByteBuffer?(v30, v31);
    outlined consume of ByteBuffer?(v33, v32);
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HandshakeStateMachine.Configuration and conformance HandshakeStateMachine.Configuration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandshakeStateMachine.Configuration and conformance HandshakeStateMachine.Configuration;
  if (!lazy protocol witness table cache variable for type HandshakeStateMachine.Configuration and conformance HandshakeStateMachine.Configuration)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for HandshakeStateMachine.Configuration, &type metadata for HandshakeStateMachine.Configuration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandshakeStateMachine.Configuration and conformance HandshakeStateMachine.Configuration);
  }
  return result;
}

uint64_t destroy for HandshakeStateMachine.Configuration(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v3 = a1[4];
  if (v3 >> 60 != 15)
    result = outlined consume of Data._Representation(a1[3], v3);
  v4 = a1[7];
  if (v4 >> 60 != 15)
    return outlined consume of Data._Representation(a1[6], v4);
  return result;
}

uint64_t initializeWithCopy for HandshakeStateMachine.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v6, v5);
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v5;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 56);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v8, *(_QWORD *)(a2 + 56));
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = v7;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

uint64_t assignWithCopy for HandshakeStateMachine.Configuration(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int16 v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (__int128 *)(a1 + 24);
  v5 = (__int128 *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) >> 60 == 15)
  {
    if (v6 >> 60 == 15)
    {
      v7 = *v5;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *v4 = v7;
      goto LABEL_9;
    }
    v9 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v9, *(_QWORD *)(a2 + 32));
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v6;
  }
  else
  {
    if (v6 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 24);
      v8 = *(_QWORD *)(a2 + 40);
      *v4 = *v5;
      *(_QWORD *)(a1 + 40) = v8;
      goto LABEL_9;
    }
    v10 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v10, *(_QWORD *)(a2 + 32));
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v6;
    outlined consume of Data._Representation(v11, v12);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
LABEL_9:
  v13 = (_OWORD *)(a1 + 48);
  v14 = (_OWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56) >> 60 != 15)
  {
    if (v15 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1 + 48);
      v17 = *(_QWORD *)(a2 + 64);
      *v13 = *v14;
      *(_QWORD *)(a1 + 64) = v17;
      goto LABEL_17;
    }
    v19 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v19, *(_QWORD *)(a2 + 56));
    v20 = *(_QWORD *)(a1 + 48);
    v21 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = v19;
    *(_QWORD *)(a1 + 56) = v15;
    outlined consume of Data._Representation(v20, v21);
LABEL_16:
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    goto LABEL_17;
  }
  if (v15 >> 60 != 15)
  {
    v18 = *(_QWORD *)(a2 + 48);
    outlined copy of Data._Representation(v18, *(_QWORD *)(a2 + 56));
    *(_QWORD *)(a1 + 48) = v18;
    *(_QWORD *)(a1 + 56) = v15;
    goto LABEL_16;
  }
  v16 = *v14;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *v13 = v16;
LABEL_17:
  v22 = *(_WORD *)(a2 + 72);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_WORD *)(a1 + 72) = v22;
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  return a1;
}

__n128 __swift_memcpy76_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for HandshakeStateMachine.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a1 + 32);
  if (v5 >> 60 == 15)
    goto LABEL_4;
  v6 = *(_QWORD *)(a2 + 32);
  if (v6 >> 60 == 15)
  {
    outlined destroy of ByteBuffer(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  outlined consume of Data._Representation(v7, v5);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
LABEL_6:
  v8 = *(_QWORD *)(a1 + 56);
  if (v8 >> 60 != 15)
  {
    v9 = *(_QWORD *)(a2 + 56);
    if (v9 >> 60 != 15)
    {
      v10 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v9;
      outlined consume of Data._Representation(v10, v8);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      goto LABEL_11;
    }
    outlined destroy of ByteBuffer(a1 + 48);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
LABEL_11:
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandshakeStateMachine.Configuration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 76))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HandshakeStateMachine.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 76) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 76) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HandshakeStateMachine.Configuration()
{
  return &type metadata for HandshakeStateMachine.Configuration;
}

uint64_t outlined init with take of (P256.Signing.PublicKey, P256.Signing.PublicKey)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (P256.Signing.PublicKey, P256.Signing.PublicKey));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ByteBuffer.writePreSharedKeyKexModes(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRetain();
  specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(v0);
  v2 = v1;
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t ByteBuffer.readPreSharedKeyKexModes(messageType:)(unsigned __int8 a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;

  if (a1 == 1)
  {
    v5 = *v1;
    v4 = v1[1];
    v6 = v1[2];
    outlined copy of Data._Representation(*v1, v4);
    specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)((uint64_t)v1);
    if (v2)
    {
      v8 = outlined consume of Data._Representation(*v1, v1[1]);
      *v1 = v5;
      v1[1] = v4;
      v1[2] = v6;
    }
    else
    {
      v3 = v7;
      if (v7)
      {
        outlined consume of Data._Representation(v5, v4);
        return v3;
      }
      outlined consume of Data._Representation(*v1, v1[1]);
      *v1 = v5;
      v1[1] = v4;
      v1[2] = v6;
      lazy protocol witness table accessor for type TLSError and conformance TLSError();
      v8 = swift_allocError();
      *(_DWORD *)v12 = 0;
      *(_BYTE *)(v12 + 4) = 1;
    }
  }
  else
  {
    v9 = a1 | 0x2D0000;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v8 = swift_allocError();
    *(_DWORD *)v10 = v9;
    *(_BYTE *)(v10 + 4) = 0;
  }
  swift_willThrow(v8);
  return v3;
}

void *Extension.PreSharedKeyKexModes.Mode.pskAndDHE.unsafeMutableAddressor()
{
  return &static Extension.PreSharedKeyKexModes.Mode.pskAndDHE;
}

void *Extension.PreSharedKeyKexModes.Mode.pskOnly.unsafeMutableAddressor()
{
  return &static Extension.PreSharedKeyKexModes.Mode.pskOnly;
}

void Extension.PreSharedKeyKexModes.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  Swift::UInt8 *v4;
  Swift::UInt8 v5;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (Swift::UInt8 *)(a2 + 32);
    do
    {
      v5 = *v4++;
      Hasher._combine(_:)(v5);
      --v3;
    }
    while (v3);
  }
}

Swift::Int Extension.PreSharedKeyKexModes.hashValue.getter(uint64_t a1)
{
  Swift::UInt v2;
  Swift::UInt8 *v3;
  Swift::UInt8 v4;

  Hasher.init(_seed:)();
  v2 = *(_QWORD *)(a1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    v3 = (Swift::UInt8 *)(a1 + 32);
    do
    {
      v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Extension.PreSharedKeyKexModes()
{
  uint64_t *v0;

  return Extension.PreSharedKeyKexModes.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Extension.PreSharedKeyKexModes()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt v2;
  Swift::UInt8 *v3;
  Swift::UInt8 v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    v3 = (Swift::UInt8 *)(v1 + 32);
    do
    {
      v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.PreSharedKeyKexModes()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt v2;
  Swift::UInt8 *v3;
  Swift::UInt8 v4;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(_QWORD *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    v3 = (Swift::UInt8 *)(v1 + 32);
    do
    {
      v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Extension.PreSharedKeyKexModes(_QWORD *a1, _QWORD *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type Extension.PreSharedKeyKexModes.Mode and conformance Extension.PreSharedKeyKexModes.Mode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Extension.PreSharedKeyKexModes.Mode and conformance Extension.PreSharedKeyKexModes.Mode;
  if (!lazy protocol witness table cache variable for type Extension.PreSharedKeyKexModes.Mode and conformance Extension.PreSharedKeyKexModes.Mode)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Extension.PreSharedKeyKexModes.Mode, &type metadata for Extension.PreSharedKeyKexModes.Mode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.PreSharedKeyKexModes.Mode and conformance Extension.PreSharedKeyKexModes.Mode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Extension.PreSharedKeyKexModes and conformance Extension.PreSharedKeyKexModes()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Extension.PreSharedKeyKexModes and conformance Extension.PreSharedKeyKexModes;
  if (!lazy protocol witness table cache variable for type Extension.PreSharedKeyKexModes and conformance Extension.PreSharedKeyKexModes)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Extension.PreSharedKeyKexModes, &type metadata for Extension.PreSharedKeyKexModes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.PreSharedKeyKexModes and conformance Extension.PreSharedKeyKexModes);
  }
  return result;
}

ValueMetadata *type metadata accessor for Extension.PreSharedKeyKexModes()
{
  return &type metadata for Extension.PreSharedKeyKexModes;
}

void SessionKeyManager.dataToSignInServerCertificateVerify()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = type metadata accessor for SessionKeyManager.State.HandshakeSecret(0, v5, v6, a4);
  MEMORY[0x1E0C80A78](v7);
  v9 = type metadata accessor for SessionKeyManager.State(0, v5, v6, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v13 - v11, v4, v9);
  v12 = (char *)sub_1B0DD6920 + 4 * byte_1B0DE9F00[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0DD6920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
  if (one-time initialization token for logger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  v4 = __swift_project_value_buffer(v3, (uint64_t)logger);
  SessionKeyManager.State.logDescription.getter(v0);
  v5 = v4;
  Logger.logInvalidStateTransition(stateName:event:)(v6, v7, 0xD00000000000001DLL, 0x80000001B0DEBB30);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  v8 = swift_allocError();
  *(_DWORD *)v9 = 2;
  *(_BYTE *)(v9 + 4) = 1;
  swift_willThrow(v8);
  return v5;
}

uint64_t SessionKeyManager.clientEarlyTrafficSecret.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int EnumCaseMultiPayload;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v4 = v3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for SessionKeyManager.State.EarlySecret(0, v6, v7, a2);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v23 - v10;
  v13 = type metadata accessor for SessionKeyManager.State(0, v6, v7, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v23 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v23 - v15, v4, v13);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) >= 3)
  {
    if (!EnumCaseMultiPayload)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v16, v8);
      v18 = &v11[*(int *)(v8 + 44)];
      v19 = type metadata accessor for SymmetricKey();
      v20 = *(_QWORD *)(v19 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v20 + 16))(a3, v18, v19);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(a3, 0, 1, v19);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  v22 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a3, 1, 1, v22);
}

void SessionKeyManager.clientHandshakeTrafficSecret.getter(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD v14[2];

  v14[1] = a3;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = type metadata accessor for SessionKeyManager.State.MasterSecret(0, v4, v5, a2);
  MEMORY[0x1E0C80A78](v6);
  v8 = type metadata accessor for SessionKeyManager.State.HandshakeSecret(0, v4, v5, v7);
  MEMORY[0x1E0C80A78](v8);
  v10 = type metadata accessor for SessionKeyManager.State(0, v4, v5, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v14 - v12, v3, v10);
  v13 = (char *)sub_1B0DD6CEC + 4 * byte_1B0DE9F05[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0DD6CEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
  v4 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(*(_QWORD *)(v3 - 88), 1, 1, v4);
}

void SessionKeyManager.serverHandshakeTrafficSecret.getter(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD v14[2];

  v14[1] = a3;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = type metadata accessor for SessionKeyManager.State.MasterSecret(0, v4, v5, a2);
  MEMORY[0x1E0C80A78](v6);
  v8 = type metadata accessor for SessionKeyManager.State.HandshakeSecret(0, v4, v5, v7);
  MEMORY[0x1E0C80A78](v8);
  v10 = type metadata accessor for SessionKeyManager.State(0, v4, v5, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v14 - v12, v3, v10);
  v13 = (char *)sub_1B0DD6F34 + 4 * byte_1B0DE9F0A[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0DD6F34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
  v4 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(*(_QWORD *)(v3 - 88), 1, 1, v4);
}

void SessionKeyManager.clientApplicationTrafficSecret.getter(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD v14[2];

  v14[1] = a3;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = type metadata accessor for SessionKeyManager.State.AllSecrets(0, v4, v5, a2);
  MEMORY[0x1E0C80A78](v6);
  v8 = type metadata accessor for SessionKeyManager.State.MasterSecret(0, v4, v5, v7);
  MEMORY[0x1E0C80A78](v8);
  v10 = type metadata accessor for SessionKeyManager.State(0, v4, v5, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v14 - v12, v3, v10);
  v13 = (char *)sub_1B0DD717C + 4 * byte_1B0DE9F0F[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0DD717C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
  v4 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(*(_QWORD *)(v3 - 88), 1, 1, v4);
}

void SessionKeyManager.serverApplicationTrafficSecret.getter(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD v14[2];

  v14[1] = a3;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = type metadata accessor for SessionKeyManager.State.AllSecrets(0, v4, v5, a2);
  MEMORY[0x1E0C80A78](v6);
  v8 = type metadata accessor for SessionKeyManager.State.MasterSecret(0, v4, v5, v7);
  MEMORY[0x1E0C80A78](v8);
  v10 = type metadata accessor for SessionKeyManager.State(0, v4, v5, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v14 - v12, v3, v10);
  v13 = (char *)sub_1B0DD73BC + 4 * byte_1B0DE9F14[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0DD73BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
  v4 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(*(_QWORD *)(v3 - 88), 1, 1, v4);
}

uint64_t SessionKeyManager.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SessionKeyManager.State(0, a1, a2, a4);
  return swift_storeEnumTagMultiPayload();
}

char *SessionKeyManager.sendingClientHello(clientHello:sessionToResume:currentTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = a3;
  v20 = a1;
  v21 = a2;
  v5 = *(_QWORD *)(a4 + 16);
  v6 = *(_QWORD *)(a4 + 24);
  v7 = type metadata accessor for SessionKeyManager.State.EarlySecret(0, v5, v6, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v20 - v9;
  v12 = type metadata accessor for SessionKeyManager.State(0, v5, v6, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v20 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v20 - v14, v4, v12);
  if (swift_getEnumCaseMultiPayload() >= 4)
  {
    static SessionKeyManager.State.EarlySecret.create(clientHello:sessionToResume:currentTime:)((uint64_t)v10, v20, v21, v22, v5, v6);
    v15 = v18;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v4, v12);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v4, v10, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v16 = swift_allocError();
    *(_DWORD *)v17 = 2;
    *(_BYTE *)(v17 + 4) = 1;
    swift_willThrow(v16);
  }
  return v15;
}

uint64_t SessionKeyManager.postServerHello(ecdheSecret:serverHelloBytes:resumptionFailed:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  int EnumCaseMultiPayload;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v52 = a4;
  v50 = a5;
  v51 = a3;
  v49 = a2;
  v54 = a1;
  v7 = type metadata accessor for SymmetricKey();
  v8 = *(_QWORD *)(v7 - 8);
  v47 = v7;
  v48 = v8;
  MEMORY[0x1E0C80A78](v7);
  v53 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a6 + 16);
  v11 = *(_QWORD *)(a6 + 24);
  v55 = type metadata accessor for SessionKeyManager.State.EarlySecret(0, v10, v11, v12);
  v13 = *(_QWORD *)(v55 - 8);
  v14 = MEMORY[0x1E0C80A78](v55);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v43 - v17;
  v20 = type metadata accessor for SessionKeyManager.State(0, v10, v11, v19);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v43 - v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))((char *)&v43 - v25, v56, v20);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) >= 3)
  {
    v44 = v24;
    v45 = v11;
    v28 = v18;
    v46 = v10;
    v30 = v53;
    v29 = v54;
    v31 = v55;
    if (!EnumCaseMultiPayload)
    {
      v32 = v28;
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v28, v26, v55);
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v32, v31);
      v33 = (uint64_t)v30;
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v30, v29, v47);
      v34 = v49;
      v35 = v51;
      outlined copy of Data._Representation(v49, v51);
      v36 = (uint64_t)v44;
      SessionKeyManager.State.HandshakeSecret.init(earlySecret:ecdheSecret:serverHelloBytes:resumptionFailed:)((uint64_t)v16, v33, v34, v35, v52, v50 & 1, v46, v45, (uint64_t)v44);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v55);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 40))(v56, v36, v20);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v26, v20);
  }
  if (one-time initialization token for logger != -1)
    swift_once();
  v38 = type metadata accessor for Logger();
  __swift_project_value_buffer(v38, (uint64_t)logger);
  SessionKeyManager.State.logDescription.getter(v20);
  Logger.logInvalidStateTransition(stateName:event:)(v39, v40, 0x7672655374736F70, 0xEF6F6C6C65487265);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  v41 = swift_allocError();
  *(_DWORD *)v42 = 2;
  *(_BYTE *)(v42 + 4) = 1;
  return swift_willThrow(v41);
}

void SessionKeyManager.addPreFinishedMessageToTransportHash(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD v13[4];

  v13[3] = a3;
  v13[1] = a2;
  v5 = *(_QWORD *)(a4 + 16);
  v6 = *(_QWORD *)(a4 + 24);
  v7 = type metadata accessor for SessionKeyManager.State.HandshakeSecret(0, v5, v6, a4);
  MEMORY[0x1E0C80A78](v7);
  v9 = type metadata accessor for SessionKeyManager.State(0, v5, v6, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v13 - v11, v4, v9);
  v12 = (char *)sub_1B0DD7AD0 + 4 * byte_1B0DE9F19[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0DD7AD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
  if (one-time initialization token for logger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  SessionKeyManager.State.logDescription.getter(v0);
  Logger.logInvalidStateTransition(stateName:event:)(v4, v5, 0xD000000000000012, 0x80000001B0DEC3C0);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  v6 = swift_allocError();
  *(_DWORD *)v7 = 2;
  *(_BYTE *)(v7 + 4) = 1;
  return swift_willThrow(v6);
}

uint64_t SessionKeyManager.generateSessionTicketPSK(ticketNonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned int EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[2];
  uint64_t v25;

  v24[0] = a2;
  v24[1] = a3;
  v25 = a1;
  v5 = *(_QWORD *)(a4 + 16);
  v6 = *(_QWORD *)(a4 + 24);
  v7 = type metadata accessor for SessionKeyManager.State.AllSecrets(0, v5, v6, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v24 - v9;
  v12 = type metadata accessor for SessionKeyManager.State(0, v5, v6, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v24 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v24 - v14, v4, v12);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload >= 3)
  {
    v17 = v25;
    if (EnumCaseMultiPayload == 3)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v15, v7);
      SessionKeyManager.State.AllSecrets.generateSessionTicketPSK(ticketNonce:)(v17, v24[0]);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  if (one-time initialization token for logger != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)logger);
  SessionKeyManager.State.logDescription.getter(v12);
  Logger.logInvalidStateTransition(stateName:event:)(v20, v21, 0xD000000000000018, 0x80000001B0DEC3E0);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  v22 = swift_allocError();
  *(_DWORD *)v23 = 2;
  *(_BYTE *)(v23 + 4) = 1;
  return swift_willThrow(v22);
}

void SessionKeyManager.serverFinishedPayload()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = type metadata accessor for SessionKeyManager.State.HandshakeSecret(0, v5, v6, a4);
  MEMORY[0x1E0C80A78](v7);
  v9 = type metadata accessor for SessionKeyManager.State(0, v5, v6, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v13 - v11, v4, v9);
  v12 = (char *)sub_1B0DD7EF4 + 4 * byte_1B0DE9F1E[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0DD7EF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
  if (one-time initialization token for logger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  SessionKeyManager.State.logDescription.getter(v0);
  Logger.logInvalidStateTransition(stateName:event:)(v4, v5, 0xD000000000000015, 0x80000001B0DEC3A0);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  v6 = swift_allocError();
  *(_DWORD *)v7 = 2;
  *(_BYTE *)(v7 + 4) = 1;
  return swift_willThrow(v6);
}

void SessionKeyManager.postServerFinished(serverFinishedBytes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  char *v16;
  _QWORD v17[8];

  v17[2] = a3;
  v5 = v4;
  v17[0] = a1;
  v17[1] = a2;
  v6 = *(_QWORD *)(a4 + 16);
  v7 = *(_QWORD *)(a4 + 24);
  v8 = type metadata accessor for SessionKeyManager.State.HandshakeSecret(0, v6, v7, a4);
  v17[4] = *(_QWORD *)(v8 - 8);
  v17[5] = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  MEMORY[0x1E0C80A78](v9);
  v11 = type metadata accessor for SessionKeyManager.State(0, v6, v7, v10);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  MEMORY[0x1E0C80A78](v13);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v17[7] = v5;
  v14((char *)v17 - v15, v5, v11);
  v16 = (char *)sub_1B0DD8134 + 4 * byte_1B0DE9F23[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0DD8134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
  if (one-time initialization token for logger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  SessionKeyManager.State.logDescription.getter(v2);
  Logger.logInvalidStateTransition(stateName:event:)(v4, v5, 0xD000000000000012, 0x80000001B0DEC380);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  v6 = swift_allocError();
  *(_DWORD *)v7 = 2;
  *(_BYTE *)(v7 + 4) = 1;
  return swift_willThrow(v6);
}

void SessionKeyManager.clientFinishedPayload()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = type metadata accessor for SessionKeyManager.State.MasterSecret(0, v5, v6, a4);
  MEMORY[0x1E0C80A78](v7);
  v9 = type metadata accessor for SessionKeyManager.State(0, v5, v6, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v13 - v11, v4, v9);
  v12 = (char *)sub_1B0DD8390 + 4 * byte_1B0DE9F28[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0DD8390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
  if (one-time initialization token for logger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  SessionKeyManager.State.logDescription.getter(v0);
  Logger.logInvalidStateTransition(stateName:event:)(v4, v5, 0xD000000000000015, 0x80000001B0DEC360);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  v6 = swift_allocError();
  *(_DWORD *)v7 = 2;
  *(_BYTE *)(v7 + 4) = 1;
  return swift_willThrow(v6);
}

void SessionKeyManager.postClientFinished(clientFinishedBytes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  char *v16;
  _QWORD v17[8];

  v17[2] = a3;
  v5 = v4;
  v17[0] = a1;
  v17[1] = a2;
  v6 = *(_QWORD *)(a4 + 16);
  v7 = *(_QWORD *)(a4 + 24);
  v8 = type metadata accessor for SessionKeyManager.State.MasterSecret(0, v6, v7, a4);
  v17[4] = *(_QWORD *)(v8 - 8);
  v17[5] = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  MEMORY[0x1E0C80A78](v9);
  v11 = type metadata accessor for SessionKeyManager.State(0, v6, v7, v10);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  MEMORY[0x1E0C80A78](v13);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v17[7] = v5;
  v14((char *)v17 - v15, v5, v11);
  v16 = (char *)sub_1B0DD85D0 + 4 * byte_1B0DE9F2D[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0DD85D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
  if (one-time initialization token for logger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  SessionKeyManager.State.logDescription.getter(v2);
  Logger.logInvalidStateTransition(stateName:event:)(v4, v5, 0xD000000000000013, 0x80000001B0DEC340);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  v6 = swift_allocError();
  *(_DWORD *)v7 = 2;
  *(_BYTE *)(v7 + 4) = 1;
  return swift_willThrow(v6);
}

uint64_t SessionKeyManager.generateTLSExporterKey(label:)@<X0>(Swift::Int a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;

  v23 = a1;
  v24 = a2;
  v25 = a4;
  v5 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&AssociatedTypeWitness - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&AssociatedTypeWitness - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SymmetricKey();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&AssociatedTypeWitness - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  SessionKeyManager.exporterMasterSecret.getter(a3, v16, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of HandshakeStateMachine?((uint64_t)v11, &demangling cache variable for type metadata for SymmetricKey?);
    v17 = 1;
    v18 = v25;
  }
  else
  {
    (*(void (**)(char *, char *, unint64_t))(v13 + 32))(v15, v11, v12);
    static HashFunction.zeroHash.getter(v5);
    v19 = lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey();
    v20 = v25;
    static HKDF.tlsExporter<A>(secret:label:context:)((int64_t)v15, v23, v24, (uint64_t)v8, v5, v12, v19, v25);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
    (*(void (**)(char *, unint64_t))(v13 + 8))(v15, v12);
    v17 = 0;
    v18 = v20;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v13 + 56))(v18, v17, 1, v12);
}

void SessionKeyManager.generateHashForAuthenticator(transcript:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  MEMORY[0x1E0C80A78](v4);
  dispatch thunk of HashFunction.init()();
  __asm { BR              X10 }
}

uint64_t sub_1B0DD8A1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (BYTE6(v4) < v5)
  {
    __break(1u);
    JUMPOUT(0x1B0DD8B5CLL);
  }
  v8 = Data._Representation.subscript.getter();
  v10 = v9;
  *(_QWORD *)(v7 - 128) = v8;
  *(_QWORD *)(v7 - 120) = v9;
  lazy protocol witness table accessor for type Data and conformance Data();
  HashFunction.update<A>(data:)();
  outlined consume of Data._Representation(v8, v10);
  v11 = dispatch thunk of HashFunction.finalize()();
  MEMORY[0x1E0C80A78](v11);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 144) + 8))(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v0);
  return *(_QWORD *)(v7 - 112);
}

void SessionKeyManager.generateHMACForAuthenticator(transcript:key:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for HashedAuthenticationCode();
  MEMORY[0x1E0C80A78](v3);
  __asm { BR              X10 }
}

void sub_1B0DD8BF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if (BYTE6(v2) < v3)
  {
    __break(1u);
    JUMPOUT(0x1B0DD8CA4);
  }
  v5 = Data._Representation.subscript.getter();
  v7 = v6;
  *(_QWORD *)(v4 - 80) = v5;
  *(_QWORD *)(v4 - 72) = v6;
  static HMAC.authenticationCode<A>(bytes:using:)();
  outlined consume of Data._Representation(v5, v7);
  MEMORY[0x1B5E111D8](MEMORY[0x1E0CA9480], v0);
  ByteBuffer.init<A>(bytes:)(v1, v0);
}

uint64_t SessionKeyManager.binderKey.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int EnumCaseMultiPayload;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v4 = v3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for SessionKeyManager.State.EarlySecret(0, v6, v7, a2);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v23 - v10;
  v13 = type metadata accessor for SessionKeyManager.State(0, v6, v7, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v23 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v23 - v15, v4, v13);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) >= 3)
  {
    if (!EnumCaseMultiPayload)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v16, v8);
      v18 = &v11[*(int *)(v8 + 40)];
      v19 = type metadata accessor for SymmetricKey();
      v20 = *(_QWORD *)(v19 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v20 + 16))(a3, v18, v19);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(a3, 0, 1, v19);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  v22 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a3, 1, 1, v22);
}

uint64_t SessionKeyManager.earlyExporterMasterSecret.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int EnumCaseMultiPayload;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v4 = v3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for SessionKeyManager.State.EarlySecret(0, v6, v7, a2);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v23 - v10;
  v13 = type metadata accessor for SessionKeyManager.State(0, v6, v7, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v23 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v23 - v15, v4, v13);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) >= 3)
  {
    if (!EnumCaseMultiPayload)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v16, v8);
      v18 = &v11[*(int *)(v8 + 48)];
      v19 = type metadata accessor for SymmetricKey();
      v20 = *(_QWORD *)(v19 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v20 + 16))(a3, v18, v19);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(a3, 0, 1, v19);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  v22 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a3, 1, 1, v22);
}

void SessionKeyManager.exporterMasterSecret.getter(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD v14[2];

  v14[1] = a3;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = type metadata accessor for SessionKeyManager.State.AllSecrets(0, v4, v5, a2);
  MEMORY[0x1E0C80A78](v6);
  v8 = type metadata accessor for SessionKeyManager.State.MasterSecret(0, v4, v5, v7);
  MEMORY[0x1E0C80A78](v8);
  v10 = type metadata accessor for SessionKeyManager.State(0, v4, v5, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v14 - v12, v3, v10);
  v13 = (char *)sub_1B0DD9164 + 4 * byte_1B0DE9F32[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0DD9164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
  v4 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(*(_QWORD *)(v3 - 88), 1, 1, v4);
}

uint64_t SessionKeyManager.resumptionMasterSecret.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned int EnumCaseMultiPayload;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v4 = v3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for SessionKeyManager.State.AllSecrets(0, v6, v7, a2);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v23 - v10;
  v13 = type metadata accessor for SessionKeyManager.State(0, v6, v7, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v23 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v23 - v15, v4, v13);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload >= 3)
  {
    if (EnumCaseMultiPayload == 3)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v16, v8);
      v18 = &v11[*(int *)(v8 + 44)];
      v19 = type metadata accessor for SymmetricKey();
      v20 = *(_QWORD *)(v19 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v20 + 16))(a3, v18, v19);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(a3, 0, 1, v19);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  v22 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a3, 1, 1, v22);
}

void static SessionKeyManager.State.EarlySecret.create(clientHello:sessionToResume:currentTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  _QWORD v81[5];
  __int128 v82;
  uint64_t v83;
  _OWORD v84[6];
  uint64_t v85;
  uint64_t v86;

  v58 = a4;
  v78 = a3;
  v65 = a2;
  v63 = a1;
  v86 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1);
  v71 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SessionTicket();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v57 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v64 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v62 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v74 = (char *)&v57 - v15;
  v76 = type metadata accessor for HashedAuthenticationCode();
  v61 = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76);
  v75 = (char *)&v57 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionTicket?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v57 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for SymmetricKey();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = MEMORY[0x1E0C80A78](v26);
  v60 = (char *)&v57 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28);
  v70 = (char *)&v57 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v69 = (char *)&v57 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v73 = (char *)&v57 - v35;
  MEMORY[0x1E0C80A78](v34);
  v72 = (char *)&v57 - v36;
  v68 = a6;
  v67 = a5;
  swift_getAssociatedConformanceWitness();
  v77 = AssociatedTypeWitness;
  v37 = dispatch thunk of static Digest.byteCount.getter();
  v38 = specialized Array.init(repeating:count:)(0, v37);
  outlined init with copy of SessionTicket?(v78, (uint64_t)v22);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v40 = v39(v22, 1, v9);
  v66 = v27;
  if (v40 == 1)
  {
    outlined destroy of HandshakeStateMachine?((uint64_t)v22, &demangling cache variable for type metadata for SessionTicket?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v25, 1, 1, v26);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v25, &v22[*(int *)(v9 + 36)], v26);
    outlined destroy of SessionTicket((uint64_t)v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v25, 0, 1, v26);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v72, v25, v26);
LABEL_6:
      v41 = (uint64_t)v73;
      *(_QWORD *)&v84[0] = v38;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], MEMORY[0x1E0CB1B00]);
      v42 = (int64_t)v75;
      v43 = v67;
      v44 = v68;
      static HKDF.extract<A>(inputKeyMaterial:salt:)();
      swift_bridgeObjectRelease();
      v45 = (uint64_t)v74;
      static HashFunction.zeroHash.getter(v43);
      v46 = v76;
      v59 = MEMORY[0x1B5E111D8](MEMORY[0x1E0CA9470], v76);
      static HKDF.deriveSecret<A>(secret:label:transcriptHash:)(v42, 0x646E696220736572, 0xEA00000000007265, v45, v43, v46);
      v64 = *(_QWORD *)(v64 + 8);
      ((void (*)(uint64_t, uint64_t))v64)(v45, v77);
      outlined init with copy of SessionTicket?(v78, (uint64_t)v20);
      if (v39(v20, 1, v9) == 1)
      {
        outlined destroy of HandshakeStateMachine?((uint64_t)v20, &demangling cache variable for type metadata for SessionTicket?);
        v82 = xmmword_1B0DE7EA0;
        v83 = 0;
        v47 = *(_OWORD *)(v65 + 80);
        v84[4] = *(_OWORD *)(v65 + 64);
        v84[5] = v47;
        v85 = *(_QWORD *)(v65 + 96);
        v48 = *(_OWORD *)(v65 + 16);
        v84[0] = *(_OWORD *)v65;
        v84[1] = v48;
        v49 = *(_OWORD *)(v65 + 48);
        v84[2] = *(_OWORD *)(v65 + 32);
        v84[3] = v49;
        v79 = 1;
        v81[3] = MEMORY[0x1E0DEAC20];
        v81[4] = MEMORY[0x1E0CB1AA8];
        v81[0] = &v79;
        v81[1] = &v80;
        __swift_project_boxed_opaque_existential_1(v81, MEMORY[0x1E0DEAC20]);
        outlined retain of ClientHello((uint64_t)v84);
        Data._Representation.append(contentsOf:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
        __asm { BR              X12 }
      }
      v50 = v57;
      outlined init with take of SessionTicket((uint64_t)v20, v57);
      static SessionKeyManager.State.EarlySecret.tryToResume(session:binderSecret:clientHello:currentTime:)(v50, v41, v65, v58, v43, v44);
      v52 = v51;
      v54 = v53;
      v56 = v55;
      outlined destroy of SessionTicket(v50);
      *(_QWORD *)&v82 = v52;
      *((_QWORD *)&v82 + 1) = v54;
      v83 = v56;
      dispatch thunk of HashFunction.init()();
      __asm { BR              X10 }
    }
  }
  *(_QWORD *)&v84[0] = v38;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], MEMORY[0x1E0CB1B08]);
  SymmetricKey.init<A>(data:)();
  outlined destroy of HandshakeStateMachine?((uint64_t)v25, &demangling cache variable for type metadata for SymmetricKey?);
  goto LABEL_6;
}

uint64_t sub_1B0DD9C44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);

  if (BYTE6(v3) < v4)
  {
    __break(1u);
    JUMPOUT(0x1B0DD9EC4);
  }
  v7 = Data._Representation.subscript.getter();
  *(_QWORD *)(v6 - 296) = v5;
  v9 = v8;
  outlined consume of Data._Representation(v2, v3);
  *(_QWORD *)(v6 - 280) = v7;
  *(_QWORD *)(v6 - 272) = v9;
  lazy protocol witness table accessor for type Data and conformance Data();
  v10 = *(_QWORD *)(v6 - 352);
  HashFunction.update<A>(data:)();
  outlined consume of Data._Representation(v7, v9);
  v11 = *(_QWORD *)(v6 - 328);
  dispatch thunk of HashFunction.finalize()();
  v12 = *(_QWORD *)(v6 - 320);
  v13 = *(_QWORD *)(v6 - 312);
  static HKDF.deriveSecret<A>(secret:label:transcriptHash:)(v12, 0x6661727420652063, 0xEB00000000636966, v11, v1, v13);
  static HKDF.deriveSecret<A>(secret:label:transcriptHash:)(v12, 0x616D207078652065, 0xEC00000072657473, v11, v1, v13);
  v14 = *(_QWORD *)(v6 - 424);
  static HashFunction.zeroHash.getter(v1);
  v15 = *(_QWORD *)(v6 - 440);
  static HKDF.deriveSecret<A>(secret:label:transcriptHash:)(v12, 0x64657669726564, 0xE700000000000000, v14, v1, v13);
  v16 = v14;
  v17 = *(_QWORD *)(v6 - 304);
  v18 = *(void (**)(uint64_t, uint64_t))(v6 - 408);
  v18(v16, v17);
  v18(v11, v17);
  (*(void (**)(int64_t, unint64_t))(*(_QWORD *)(v6 - 432) + 8))(v12, v13);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 - 392) + 8))(*(_QWORD *)(v6 - 344), *(_QWORD *)(v6 - 296));
  SessionKeyManager.State.EarlySecret.init(transcriptHasher:derivedSecret:binderKey:clientEarlyTrafficSecret:earlyExporterMasterSecret:)(v10, v15, *(_QWORD *)(v6 - 336), *(_QWORD *)(v6 - 368), *(_QWORD *)(v6 - 360), v1, v0, *(_QWORD *)(v6 - 416));
  return *(_QWORD *)(v6 - 240);
}

void SessionKeyManager.State.HandshakeSecret.init(earlySecret:ecdheSecret:serverHelloBytes:resumptionFailed:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t AssociatedTypeWitness;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v45 = a5;
  v56 = a2;
  v57 = a4;
  v58 = a9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v52 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v44 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v42 - v16;
  v18 = type metadata accessor for HashedAuthenticationCode();
  v50 = *(_QWORD *)(v18 - 8);
  v51 = v18;
  v19 = MEMORY[0x1E0C80A78](v18);
  v54 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v42 - v21;
  v23 = type metadata accessor for SymmetricKey();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v42 = (char *)&v42 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v47 = (char *)&v42 - v28;
  MEMORY[0x1E0C80A78](v27);
  v30 = (char *)&v42 - v29;
  v43 = type metadata accessor for SessionKeyManager.State.EarlySecret(0, a7, a8, v31);
  v32 = *(int *)(v43 + 36);
  v55 = a1;
  v48 = v24;
  v49 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v30, a1 + v32, v23);
  v53 = a3;
  if ((a6 & 1) != 0)
  {
    v33 = AssociatedTypeWitness;
    swift_getAssociatedConformanceWitness();
    v34 = dispatch thunk of static Digest.byteCount.getter();
    v35 = specialized Array.init(repeating:count:)(0, v34);
    v59 = v35;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], MEMORY[0x1E0CB1B08]);
    v36 = v47;
    SymmetricKey.init<A>(data:)();
    v59 = v35;
    lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], MEMORY[0x1E0CB1B00]);
    static HKDF.extract<A>(inputKeyMaterial:salt:)();
    swift_bridgeObjectRelease();
    static HashFunction.zeroHash.getter(a7);
    v37 = v51;
    MEMORY[0x1B5E111D8](MEMORY[0x1E0CA9470], v51);
    v38 = v42;
    static HKDF.deriveSecret<A>(secret:label:transcriptHash:)((int64_t)v22, 0x64657669726564, 0xE700000000000000, (uint64_t)v17, a7, v37);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v17, v33);
    (*(void (**)(char *, unint64_t))(v50 + 8))(v22, v37);
    v40 = v48;
    v39 = v49;
    v41 = *(void (**)(char *, uint64_t))(v48 + 8);
    v41(v36, v49);
    v41(v30, v39);
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v30, v38, v39);
  }
  static HKDF.extract(inputKeyMaterial:salt:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 16))(v58, v55, a7);
  __asm { BR              X10 }
}

uint64_t sub_1B0DDA298(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, uint64_t);
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  if (BYTE6(*(_QWORD *)(v5 - 120)) < a1)
  {
    __break(1u);
    JUMPOUT(0x1B0DDA4E0);
  }
  v6 = *(_QWORD *)(v5 - 120);
  v7 = Data._Representation.subscript.getter();
  v9 = v8;
  *(_QWORD *)(v5 - 104) = v7;
  *(_QWORD *)(v5 - 96) = v8;
  lazy protocol witness table accessor for type Data and conformance Data();
  HashFunction.update<A>(data:)();
  outlined consume of Data._Representation(v7, v9);
  dispatch thunk of HashFunction.finalize()();
  *(_QWORD *)(v5 - 240) = type metadata accessor for SessionKeyManager.State.HandshakeSecret(0, v4, v3, v10);
  v11 = MEMORY[0x1E0CA9470];
  *(_QWORD *)(v5 - 216) = v2;
  v12 = *(_QWORD *)(v5 - 168);
  MEMORY[0x1B5E111D8](v11, v12);
  v13 = *(_QWORD *)(v5 - 144);
  static HKDF.deriveSecret<A>(secret:label:transcriptHash:)(v13, 0x6172742073682063, 0xEC00000063696666, v1, v4, v12);
  static HKDF.deriveSecret<A>(secret:label:transcriptHash:)(v13, 0x6172742073682073, 0xEC00000063696666, v1, v4, v12);
  v14 = *(_QWORD *)(v5 - 224);
  static HashFunction.zeroHash.getter(v4);
  v15 = *(_QWORD *)(v5 - 200);
  static HKDF.deriveSecret<A>(secret:label:transcriptHash:)(v13, 0x64657669726564, 0xE700000000000000, v14, v4, v12);
  outlined consume of Data._Representation(*(_QWORD *)(v5 - 152), v6);
  v17 = *(_QWORD *)(v5 - 192);
  v16 = *(_QWORD *)(v5 - 184);
  v18 = *(void (**)(_QWORD, uint64_t))(v17 + 8);
  v18(*(_QWORD *)(v5 - 128), v16);
  (*(void (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v5 - 232) - 8) + 8))(*(_QWORD *)(v5 - 136));
  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 160) + 8);
  v20 = v14;
  v21 = *(_QWORD *)(v5 - 208);
  v19(v20, v21);
  v19(v1, v21);
  (*(void (**)(int64_t, unint64_t))(*(_QWORD *)(v5 - 176) + 8))(v13, v12);
  v18(*(_QWORD *)(v5 - 216), v16);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v17 + 32))(*(_QWORD *)(v5 - 112) + *(int *)(*(_QWORD *)(v5 - 240) + 36), v15, v16);
}

void SessionKeyManager.State.logDescription.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v1 + 16))((char *)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = (char *)sub_1B0DDA59C + 4 * byte_1B0DE9F37[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0DDA59C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
  return 0x6B616873646E6168;
}

void Logger.logInvalidStateTransition(stateName:event:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *oslog;
  uint64_t v12;

  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  oslog = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v8))
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v12 = v10;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2082;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0D50000, oslog, v8, "invalid state transition for session key manager: state %{public}s event: %{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E11244](v10, -1, -1);
    MEMORY[0x1B5E11244](v9, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

  }
}

void SessionKeyManager.State.MasterSecret.init(handshakeSecret:serverFinishedBytes:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  _QWORD v23[8];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v23[5] = a4;
  v24 = a3;
  v25 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23[3] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v23[1] = (char *)v23 - v12;
  v13 = type metadata accessor for HashedAuthenticationCode();
  MEMORY[0x1E0C80A78](v13);
  v14 = type metadata accessor for SymmetricKey();
  v23[6] = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v23[0] = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v23 - v17;
  swift_getAssociatedConformanceWitness();
  v23[4] = AssociatedTypeWitness;
  v19 = dispatch thunk of static Digest.byteCount.getter();
  v26 = specialized Array.init(repeating:count:)(0, v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], MEMORY[0x1E0CB1B08]);
  SymmetricKey.init<A>(data:)();
  type metadata accessor for SessionKeyManager.State.HandshakeSecret(0, a5, a6, v20);
  v23[2] = v18;
  static HKDF.extract(inputKeyMaterial:salt:)();
  type metadata accessor for SessionKeyManager.State.MasterSecret(0, a5, a6, v21);
  MEMORY[0x1B5E111D8](MEMORY[0x1E0CA9470], v13);
  SymmetricKey.init<A>(data:)();
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16);
  v23[7] = a1;
  v22(a7, a1, a5);
  __asm { BR              X10 }
}

uint64_t sub_1B0DDAA58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, unint64_t);
  uint64_t v16;
  uint64_t v17;

  if (BYTE6(v0) < *(uint64_t *)(v7 - 136))
  {
    __break(1u);
    JUMPOUT(0x1B0DDAC6CLL);
  }
  v8 = Data._Representation.subscript.getter();
  v10 = v9;
  *(_QWORD *)(v7 - 96) = v8;
  *(_QWORD *)(v7 - 88) = v9;
  lazy protocol witness table accessor for type Data and conformance Data();
  v11 = v2;
  HashFunction.update<A>(data:)();
  outlined consume of Data._Representation(v8, v10);
  v12 = v4;
  v13 = *(_QWORD *)(v7 - 168);
  dispatch thunk of HashFunction.finalize()();
  v14 = *(_QWORD *)(v7 - 120);
  v15 = *(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v7 - 128) + 16);
  v15(v1 + v3[10], v14 + *(int *)(v11 + 40), v6);
  v15(v1 + v3[11], v14 + *(int *)(v11 + 44), v6);
  lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey();
  static HKDF.deriveSecret<A>(secret:label:transcriptHash:)(v12, 0x6172742070612063, 0xEC00000063696666, v13, v5, v6);
  static HKDF.deriveSecret<A>(secret:label:transcriptHash:)(v12, 0x6172742070612073, 0xEC00000063696666, v13, v5, v6);
  v16 = *(_QWORD *)(v7 - 176);
  static HKDF.deriveSecret<A>(secret:label:transcriptHash:)(v12, 0x7473616D20707865, 0xEA00000000007265, v13, v5, v6);
  outlined consume of Data._Representation(*(_QWORD *)(v7 - 104), *(_QWORD *)(v7 - 112));
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(*(_QWORD *)(v7 - 120), v11);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 152) + 8))(v13, *(_QWORD *)(v7 - 144));
  v17 = *(_QWORD *)(v7 - 128);
  (*(void (**)(_QWORD, unint64_t))(v17 + 8))(*(_QWORD *)(v7 - 160), v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v17 + 32))(v1 + v3[14], v16, v6);
}

void SessionKeyManager.State.AllSecrets.init(masterSecret:clientFinishedBytes:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t AssociatedTypeWitness;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a3;
  v40 = a4;
  v41 = a2;
  v11 = type metadata accessor for SymmetricKey();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v36 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v35 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v34 = (char *)v30 - v15;
  v16 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (int *)type metadata accessor for SessionKeyManager.State.MasterSecret(0, a5, a6, v19);
  v21 = a1 + v20[12];
  v37 = v12;
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  v22(a7, v21, v11);
  v23 = a1 + v20[13];
  v30[1] = a6;
  v25 = type metadata accessor for SessionKeyManager.State.AllSecrets(0, a5, a6, v24);
  v22(a7 + *(int *)(v25 + 36), v23, v11);
  v26 = a1 + v20[14];
  v30[2] = v25;
  v27 = *(int *)(v25 + 40);
  v38 = a7;
  v28 = a7 + v27;
  v29 = v39;
  v33 = v11;
  v22(v28, v26, v11);
  v32 = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, a5);
  __asm { BR              X10 }
}

uint64_t sub_1B0DDAE38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;

  if (BYTE6(v4) < *(uint64_t *)(v5 - 112))
  {
    __break(1u);
    JUMPOUT(0x1B0DDAF9CLL);
  }
  v6 = *(_QWORD *)(v5 - 104);
  v7 = Data._Representation.subscript.getter();
  v9 = v8;
  *(_QWORD *)(v5 - 96) = v7;
  *(_QWORD *)(v5 - 88) = v8;
  lazy protocol witness table accessor for type Data and conformance Data();
  HashFunction.update<A>(data:)();
  outlined consume of Data._Representation(v7, v9);
  v10 = *(_QWORD *)(v5 - 160);
  dispatch thunk of HashFunction.finalize()();
  v11 = v3 + *(int *)(v2 + 36);
  lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey();
  v12 = *(_QWORD *)(v5 - 144);
  v13 = v11;
  v14 = *(_QWORD *)(v5 - 168);
  static HKDF.deriveSecret<A>(secret:label:transcriptHash:)(v13, 0x7473616D20736572, 0xEA00000000007265, v10, v0, v14);
  outlined consume of Data._Representation(v6, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v3, v2);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 152) + 8))(v10, *(_QWORD *)(v5 - 184));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 176) + 8))(v1, v0);
  return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)(v5 - 136) + 32))(*(_QWORD *)(v5 - 128) + *(int *)(*(_QWORD *)(v5 - 192) + 44), v12, v14);
}

uint64_t SessionKeyManager.State.HandshakeSecret.dataToSignInServerCertificateVerify.getter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE v6[23];
  char v7;
  _QWORD v8[5];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v3 = &v6[-v2];
  v9 = xmmword_1B0DE7EA0;
  v10 = 0;
  specialized Data.append<A>(contentsOf:)();
  specialized Data.append<A>(contentsOf:)(0xD000000000000021, 0x80000001B0DEBB50);
  if ((0x80000001B0DEBB50 & 0x1000000000000000) != 0)
    String.UTF8View._foreignCount()();
  v7 = 0;
  v8[3] = MEMORY[0x1E0DEAC20];
  v8[4] = MEMORY[0x1E0CB1AA8];
  v8[0] = &v7;
  v8[1] = v8;
  __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  v4 = dispatch thunk of HashFunction.finalize()();
  MEMORY[0x1E0C80A78](v4);
  *(_QWORD *)&v6[-16] = &v9;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return v9;
}

uint64_t SessionKeyManager.State.HandshakeSecret.serverFinishedPayload.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v7 = (char *)&v14 - v6;
  v8 = type metadata accessor for SymmetricKey();
  v15 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v2 + *(int *)(a1 + 44);
  v18 = MEMORY[0x1E0DEE9D8];
  swift_getAssociatedConformanceWitness();
  v11 = dispatch thunk of static Digest.byteCount.getter();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey();
  lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], MEMORY[0x1E0CB1B08]);
  static HKDF.expandLabel<A, B>(secret:label:context:length:)(v14, 0x64656873696E6966, 0xE800000000000000, (uint64_t)&v18, v11, v4, v8, v12);
  dispatch thunk of HashFunction.finalize()();
  static HMAC.authenticationCode<A>(bytes:using:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v7, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, unint64_t))(v15 + 8))(v10, v8);
}

void SessionKeyManager.addPreClientFinishedMessageToTransportHash(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD v13[4];

  v13[3] = a3;
  v13[1] = a2;
  v5 = *(_QWORD *)(a4 + 16);
  v6 = *(_QWORD *)(a4 + 24);
  v7 = type metadata accessor for SessionKeyManager.State.MasterSecret(0, v5, v6, a4);
  MEMORY[0x1E0C80A78](v7);
  v9 = type metadata accessor for SessionKeyManager.State(0, v5, v6, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v13 - v11, v4, v9);
  v12 = (char *)sub_1B0DDB48C + 4 * byte_1B0DE9F3C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B0DDB48C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
  if (one-time initialization token for logger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  SessionKeyManager.State.logDescription.getter(v0);
  Logger.logInvalidStateTransition(stateName:event:)(v4, v5, 0xD000000000000012, 0x80000001B0DEC3C0);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type TLSError and conformance TLSError();
  v6 = swift_allocError();
  *(_DWORD *)v7 = 2;
  *(_BYTE *)(v7 + 4) = 1;
  return swift_willThrow(v6);
}

void SessionKeyManager.State.HandshakeSecret.addMessageToTranscriptHash(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1B0DDB618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (BYTE6(a4) < a3)
  {
    __break(1u);
    JUMPOUT(0x1B0DDB698);
  }
  v4 = Data._Representation.subscript.getter();
  v6 = v5;
  lazy protocol witness table accessor for type Data and conformance Data();
  HashFunction.update<A>(data:)();
  return outlined consume of Data._Representation(v4, v6);
}

uint64_t SessionKeyManager.State.MasterSecret.clientFinishedPayload.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v7 = (char *)&v14 - v6;
  v8 = type metadata accessor for SymmetricKey();
  v15 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v2 + *(int *)(a1 + 40);
  v18 = MEMORY[0x1E0DEE9D8];
  swift_getAssociatedConformanceWitness();
  v11 = dispatch thunk of static Digest.byteCount.getter();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey();
  lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], MEMORY[0x1E0CB1B08]);
  static HKDF.expandLabel<A, B>(secret:label:context:length:)(v14, 0x64656873696E6966, 0xE800000000000000, (uint64_t)&v18, v11, v4, v8, v12);
  dispatch thunk of HashFunction.finalize()();
  static HMAC.authenticationCode<A>(bytes:using:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v7, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, unint64_t))(v15 + 8))(v10, v8);
}

void SessionKeyManager.State.AllSecrets.generateSessionTicketPSK(ticketNonce:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1B0DDB8EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v14[12];

  if (BYTE6(a4) < a3)
  {
    __break(1u);
    JUMPOUT(0x1B0DDBA0CLL);
  }
  v6 = v4 + *(int *)(v5 + 44);
  v7 = Data._Representation.subscript.getter();
  v9 = v8;
  v14[0] = v7;
  v14[1] = v8;
  v10 = *(_QWORD *)(v5 + 16);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v11 = dispatch thunk of static Digest.byteCount.getter();
  v12 = type metadata accessor for SymmetricKey();
  lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey();
  static HKDF.expandLabel<A, B>(secret:label:context:length:)(v6, 0x6974706D75736572, 0xEA00000000006E6FLL, (uint64_t)v14, v11, v10, v12, MEMORY[0x1E0CB0338]);
  return outlined consume of Data._Representation(v7, v9);
}

uint64_t closure #1 in SessionKeyManager.generateHashForAuthenticator(transcript:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in ExportedAuthenticator.validate(keyParser:)(a1, a2);
}

uint64_t SessionKeyManager.State.EarlySecret.init(transcriptHasher:derivedSecret:binderKey:clientEarlyTrafficSecret:earlyExporterMasterSecret:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v20)(uint64_t, uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(a8, a1, a6);
  v16 = (int *)type metadata accessor for SessionKeyManager.State.EarlySecret(0, a6, a7, v15);
  v17 = a8 + v16[9];
  v18 = type metadata accessor for SymmetricKey();
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
  v20(v17, a2, v18);
  v20(a8 + v16[10], a3, v18);
  v20(a8 + v16[11], a4, v18);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v20)(a8 + v16[12], a5, v18);
}

void static SessionKeyManager.State.EarlySecret.tryToResume(session:binderSecret:clientHello:currentTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[21];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v10 = type metadata accessor for HashedAuthenticationCode();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v25 - v11;
  v26 = type metadata accessor for SymmetricKey();
  v13 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v25[20] = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a6;
  v29 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v25[19] = (char *)v25 - v16;
  Date.timeIntervalSince(_:)();
  v18 = v17 * 1000.0;
  if ((~*(_QWORD *)&v18 & 0x7FF0000000000000) != 0)
  {
    if (v18 > -1.0)
    {
      if (v18 < 4294967300.0)
      {
        v25[14] = a2;
        v25[15] = v12;
        v25[16] = v10;
        v25[6] = v13;
        v19 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SessionTicket() + 32));
        v20 = *v19;
        v21 = v19[1];
        v27 = v19[2];
        outlined copy of Data._Representation(v20, v21);
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v25[17] = AssociatedTypeWitness;
        v25[13] = AssociatedConformanceWitness;
        v23 = dispatch thunk of static Digest.byteCount.getter();
        v32 = specialized Data._Representation.init(count:)(v23);
        *(_QWORD *)&v33 = v24;
        specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t)&v32);
        v31 = v32;
        v28 = v33;
        __asm { BR              X10 }
      }
LABEL_7:
      __break(1u);
      JUMPOUT(0x1B0DDC704);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  goto LABEL_7;
}

uint64_t *initializeBufferWithCopyOfBuffer for SessionKeyManager.State.AllSecrets(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for SymmetricKey();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[9]), (uint64_t *)((char *)a2 + a3[9]), v7);
    v8((uint64_t *)((char *)a1 + a3[10]), (uint64_t *)((char *)a2 + a3[10]), v7);
    v8((uint64_t *)((char *)a1 + a3[11]), (uint64_t *)((char *)a2 + a3[11]), v7);
  }
  return a1;
}

uint64_t initializeWithCopy for SessionKeyManager.State.AllSecrets(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for SymmetricKey();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  return a1;
}

uint64_t assignWithCopy for SessionKeyManager.State.AllSecrets(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for SymmetricKey();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  return a1;
}

uint64_t initializeWithTake for SessionKeyManager.State.AllSecrets(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for SymmetricKey();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  return a1;
}

uint64_t assignWithTake for SessionKeyManager.State.AllSecrets(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for SymmetricKey();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionKeyManager.State.AllSecrets()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0DDCB58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SessionKeyManager.State.AllSecrets()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0DDCBA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t *initializeBufferWithCopyOfBuffer for SessionKeyManager.State.MasterSecret(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(unint64_t, unint64_t, uint64_t);
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for SymmetricKey();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (v7 + v10) & ~v10;
  v13 = *(_QWORD *)(v9 + 64);
  v14 = v13 + v10;
  v15 = ((v13 + v10 + ((v13 + v10 + ((v13 + v10 + ((v13 + v10 + ((v13 + v10 + v12) & ~v10)) & ~v10)) & ~v10)) & ~v10)) & ~v10)
      + v13;
  v16 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v9 + 80));
  if (v16 > 7 || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0 || v15 > 0x18)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v16 + 16) & ~v16));
    swift_retain();
  }
  else
  {
    v20 = v8;
    v21 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v22 = ((unint64_t)a2 + v11) & v21;
    v23 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
    v23(((unint64_t)a1 + v11) & v21, v22, v20);
    v24 = (v14 + v22) & v21;
    v23((v14 + (((unint64_t)a1 + v11) & v21)) & v21, v24, v20);
    v25 = (v14 + v24) & v21;
    v23((v14 + ((v14 + (((unint64_t)a1 + v11) & v21)) & v21)) & v21, v25, v20);
    v26 = (v14 + v25) & v21;
    v23((v14 + ((v14 + ((v14 + (((unint64_t)a1 + v11) & v21)) & v21)) & v21)) & v21, v26, v20);
    v27 = (v14 + v26) & v21;
    v23((v14 + ((v14 + ((v14 + ((v14 + (((unint64_t)a1 + v11) & v21)) & v21)) & v21)) & v21)) & v21, v27, v20);
    v23((v14 + ((v14 + ((v14 + ((v14 + ((v14 + (((unint64_t)a1 + v11) & v21)) & v21)) & v21)) & v21)) & v21)) & v21, (v14 + v27) & v21, v20);
  }
  return a1;
}

uint64_t assignWithCopy for SessionKeyManager.State.MasterSecret(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for SymmetricKey();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64) + v9;
  v15 = (v14 + v11) & ~v9;
  v16 = (v14 + v12) & ~v9;
  v13(v15, v16, v7);
  v17 = (v14 + v15) & ~v9;
  v18 = (v14 + v16) & ~v9;
  v13(v17, v18, v7);
  v19 = (v14 + v17) & ~v9;
  v20 = (v14 + v18) & ~v9;
  v13(v19, v20, v7);
  v21 = (v14 + v19) & ~v9;
  v22 = (v14 + v20) & ~v9;
  v13(v21, v22, v7);
  v13((v14 + v21) & ~v9, (v14 + v22) & ~v9, v7);
  return a1;
}

uint64_t initializeWithTake for SessionKeyManager.State.MasterSecret(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for SymmetricKey();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64) + v9;
  v15 = (v14 + v11) & ~v9;
  v16 = (v14 + v12) & ~v9;
  v13(v15, v16, v7);
  v17 = (v14 + v15) & ~v9;
  v18 = (v14 + v16) & ~v9;
  v13(v17, v18, v7);
  v19 = (v14 + v17) & ~v9;
  v20 = (v14 + v18) & ~v9;
  v13(v19, v20, v7);
  v21 = (v14 + v19) & ~v9;
  v22 = (v14 + v20) & ~v9;
  v13(v21, v22, v7);
  v13((v14 + v21) & ~v9, (v14 + v22) & ~v9, v7);
  return a1;
}

uint64_t assignWithTake for SessionKeyManager.State.MasterSecret(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for SymmetricKey();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64) + v9;
  v15 = (v14 + v11) & ~v9;
  v16 = (v14 + v12) & ~v9;
  v13(v15, v16, v7);
  v17 = (v14 + v15) & ~v9;
  v18 = (v14 + v16) & ~v9;
  v13(v17, v18, v7);
  v19 = (v14 + v17) & ~v9;
  v20 = (v14 + v18) & ~v9;
  v13(v19, v20, v7);
  v21 = (v14 + v19) & ~v9;
  v22 = (v14 + v20) & ~v9;
  v13(v21, v22, v7);
  v13((v14 + v21) & ~v9, (v14 + v22) & ~v9, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionKeyManager.State.MasterSecret(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = type metadata accessor for SymmetricKey();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = *(_QWORD *)(v6 + 64) + v12;
  if (a2 <= v11)
    goto LABEL_23;
  v14 = *(_QWORD *)(v9 + 64);
  v15 = ((v14
        + v12
        + ((v14 + v12 + ((v14 + v12 + ((v14 + v12 + ((v14 + v12 + (v13 & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)
      + v14;
  v16 = 8 * v15;
  if (v15 <= 3)
  {
    v18 = ((a2 - v11 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v18))
    {
      v17 = *(_DWORD *)(a1 + v15);
      if (!v17)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v18 > 0xFF)
    {
      v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v18 < 2)
    {
LABEL_23:
      if (v11)
      {
        if (v7 >= v10)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v13 + a1) & ~v12, v10, v8);
      }
      return 0;
    }
  }
  v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15))
    goto LABEL_23;
LABEL_14:
  v19 = (v17 - 1) << v16;
  if (v15 > 3)
    v19 = 0;
  if ((_DWORD)v15)
  {
    if (v15 <= 3)
      v20 = v15;
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  return v11 + v19 + 1;
}

void storeEnumTagSinglePayload for SessionKeyManager.State.MasterSecret(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for SymmetricKey() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = *(_QWORD *)(v9 + 64);
  v13 = ((v12
        + v11
        + ((v12
          + v11
          + ((v12 + v11 + ((v12 + v11 + ((v12 + v11 + ((*(_QWORD *)(v7 + 64) + v11) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v11)
      + v12;
  if (a3 <= v10)
  {
    v14 = 0u;
  }
  else if (v13 <= 3)
  {
    v16 = ((a3 - v10 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      v14 = 4u;
    }
    else if (v16 >= 0x100)
    {
      v14 = 2;
    }
    else
    {
      v14 = v16 > 1;
    }
  }
  else
  {
    v14 = 1u;
  }
  if (v10 < a2)
  {
    v15 = ~v10 + a2;
    if (v13 < 4)
    {
      if ((_DWORD)v13)
      {
        v17 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if ((_DWORD)v13 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if ((_DWORD)v13 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t *initializeBufferWithCopyOfBuffer for SessionKeyManager.State.EarlySecret(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(unint64_t, unint64_t, uint64_t);
  unint64_t v24;
  unint64_t v25;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for SymmetricKey();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (v7 + v10) & ~v10;
  v13 = *(_QWORD *)(v9 + 64);
  v14 = v13 + v10;
  v15 = ((v13 + v10 + ((v13 + v10 + ((v13 + v10 + v12) & ~v10)) & ~v10)) & ~v10) + v13;
  v16 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v9 + 80));
  if (v16 > 7 || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0 || v15 > 0x18)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v16 + 16) & ~v16));
    swift_retain();
  }
  else
  {
    v20 = v8;
    v21 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v22 = ((unint64_t)a2 + v11) & v21;
    v23 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
    v23(((unint64_t)a1 + v11) & v21, v22, v20);
    v24 = (v14 + v22) & v21;
    v23((v14 + (((unint64_t)a1 + v11) & v21)) & v21, v24, v20);
    v25 = (v14 + v24) & v21;
    v23((v14 + ((v14 + (((unint64_t)a1 + v11) & v21)) & v21)) & v21, v25, v20);
    v23((v14 + ((v14 + ((v14 + (((unint64_t)a1 + v11) & v21)) & v21)) & v21)) & v21, (v14 + v25) & v21, v20);
  }
  return a1;
}

uint64_t assignWithCopy for SessionKeyManager.State.EarlySecret(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for SymmetricKey();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64) + v9;
  v15 = (v14 + v11) & ~v9;
  v16 = (v14 + v12) & ~v9;
  v13(v15, v16, v7);
  v17 = (v14 + v15) & ~v9;
  v18 = (v14 + v16) & ~v9;
  v13(v17, v18, v7);
  v13((v14 + v17) & ~v9, (v14 + v18) & ~v9, v7);
  return a1;
}

uint64_t initializeWithTake for SessionKeyManager.State.EarlySecret(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for SymmetricKey();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64) + v9;
  v15 = (v14 + v11) & ~v9;
  v16 = (v14 + v12) & ~v9;
  v13(v15, v16, v7);
  v17 = (v14 + v15) & ~v9;
  v18 = (v14 + v16) & ~v9;
  v13(v17, v18, v7);
  v13((v14 + v17) & ~v9, (v14 + v18) & ~v9, v7);
  return a1;
}

uint64_t assignWithTake for SessionKeyManager.State.EarlySecret(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for SymmetricKey();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64) + v9;
  v15 = (v14 + v11) & ~v9;
  v16 = (v14 + v12) & ~v9;
  v13(v15, v16, v7);
  v17 = (v14 + v15) & ~v9;
  v18 = (v14 + v16) & ~v9;
  v13(v17, v18, v7);
  v13((v14 + v17) & ~v9, (v14 + v18) & ~v9, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionKeyManager.State.EarlySecret(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = type metadata accessor for SymmetricKey();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = *(_QWORD *)(v6 + 64) + v12;
  if (a2 <= v11)
    goto LABEL_23;
  v14 = ((*(_QWORD *)(v9 + 64)
        + v12
        + ((*(_QWORD *)(v9 + 64) + v12 + ((*(_QWORD *)(v9 + 64) + v12 + (v13 & ~v12)) & ~v12)) & ~v12)) & ~v12)
      + *(_QWORD *)(v9 + 64);
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_23:
      if (v11)
      {
        if (v7 >= v10)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v13 + a1) & ~v12, v10, v8);
      }
      return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_23;
LABEL_14:
  v18 = (v16 - 1) << v15;
  if (v14 > 3)
    v18 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v19 = v14;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v11 + v18 + 1;
}

void storeEnumTagSinglePayload for SessionKeyManager.State.EarlySecret(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for SymmetricKey() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = ((*(_QWORD *)(v9 + 64)
        + v11
        + ((*(_QWORD *)(v9 + 64) + v11 + ((*(_QWORD *)(v9 + 64) + v11 + ((*(_QWORD *)(v7 + 64) + v11) & ~v11)) & ~v11)) & ~v11)) & ~v11)
      + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v13 = 0u;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v10 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = 4u;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = 1u;
  }
  if (v10 < a2)
  {
    v14 = ~v10 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t *initializeBufferWithCopyOfBuffer for SessionKeyManager(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(unint64_t, unint64_t, uint64_t);
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(unint64_t, unint64_t, uint64_t);
  unint64_t v35;
  unint64_t v36;
  void (*v37)(unint64_t, unint64_t, uint64_t);
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v43;
  unint64_t v44;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for SymmetricKey();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10;
  v12 = v7 + v10;
  v13 = *(_QWORD *)(v9 + 64);
  v14 = v13 + v10;
  v15 = ((v13 + v11 + ((v13 + v11 + ((v7 + v11) & ~v11)) & ~v11)) & ~v11) + v13;
  v16 = ((v15 + v11) & ~v11) + v13;
  if (v15 <= v16)
    v15 = ((v15 + v10) & ~(unint64_t)v10) + v13;
  v17 = ((v14 + ((v16 + v10) & ~(unint64_t)v10)) & ~(unint64_t)v10)
      + v13;
  if (v17 > v15)
    v15 = v17;
  v18 = ((v14 + ((v14 + (v14 & ~(unint64_t)v10)) & ~(unint64_t)v10)) & ~(unint64_t)v10)
      + v13;
  if (v18 <= v15)
    v19 = v15;
  else
    v19 = v18;
  v20 = *(_DWORD *)(v6 + 80) | v10;
  v21 = (*(_BYTE *)(v6 + 80) | v10);
  v22 = v20 & 0x100000;
  v23 = v21 <= 7 && v22 == 0;
  if (v23 && v19 + 1 <= 0x18)
  {
    v24 = v8;
    if (*((unsigned __int8 *)a2 + v19) >= 4u)
    {
      if (v19 <= 3)
        v25 = v19;
      else
        v25 = 4;
      __asm { BR              X13 }
    }
    v28 = ~v11;
    switch(*((_BYTE *)a2 + v19))
    {
      case 0:
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
        v29 = ((unint64_t)a2 + v12) & v28;
        v30 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
        v30(((unint64_t)a1 + v12) & v28, v29, v24);
        v31 = (v14 + v29) & v28;
        v30((v14 + (((unint64_t)a1 + v12) & v28)) & v28, v31, v24);
        v32 = (v14 + v31) & v28;
        v30((v14 + ((v14 + (((unint64_t)a1 + v12) & v28)) & v28)) & v28, v32, v24);
        v30((v14 + ((v14 + ((v14 + (((unint64_t)a1 + v12) & v28)) & v28)) & v28)) & v28, (v14 + v32) & v28, v24);
        *((_BYTE *)a1 + v19) = 0;
        break;
      case 1:
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
        v33 = ((unint64_t)a2 + v12) & v28;
        v34 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
        v34(((unint64_t)a1 + v12) & v28, v33, v24);
        v35 = (v14 + v33) & v28;
        v34((v14 + (((unint64_t)a1 + v12) & v28)) & v28, v35, v24);
        v34((v14 + ((v14 + (((unint64_t)a1 + v12) & v28)) & v28)) & v28, (v14 + v35) & v28, v24);
        *((_BYTE *)a1 + v19) = 1;
        break;
      case 2:
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
        v36 = ((unint64_t)a2 + v12) & v28;
        v37 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
        v37(((unint64_t)a1 + v12) & v28, v36, v24);
        v38 = (v14 + v36) & v28;
        v37((v14 + (((unint64_t)a1 + v12) & v28)) & v28, v38, v24);
        v39 = (v14 + v38) & v28;
        v37((v14 + ((v14 + (((unint64_t)a1 + v12) & v28)) & v28)) & v28, v39, v24);
        v40 = (v14 + v39) & v28;
        v37((v14 + ((v14 + ((v14 + (((unint64_t)a1 + v12) & v28)) & v28)) & v28)) & v28, v40, v24);
        v41 = (v14 + v40) & v28;
        v37((v14 + ((v14 + ((v14 + ((v14 + (((unint64_t)a1 + v12) & v28)) & v28)) & v28)) & v28)) & v28, v41, v24);
        v37((v14 + ((v14 + ((v14 + ((v14 + ((v14 + (((unint64_t)a1 + v12) & v28)) & v28)) & v28)) & v28)) & v28)) & v28, (v14 + v41) & v28, v24);
        *((_BYTE *)a1 + v19) = 2;
        break;
      case 3:
        v42 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16);
        v42(a1, a2, v8);
        v43 = ((unint64_t)a2 + v14) & v28;
        v42((uint64_t *)(((unint64_t)a1 + v14) & v28), (uint64_t *)v43, v24);
        v44 = (v14 + v43) & v28;
        v42((uint64_t *)((v14 + (((unint64_t)a1 + v14) & v28)) & v28), (uint64_t *)v44, v24);
        v42((uint64_t *)((v14 + ((v14 + (((unint64_t)a1 + v14) & v28)) & v28)) & v28), (uint64_t *)((v14 + v44) & v28), v24);
        *((_BYTE *)a1 + v19) = 3;
        break;
      default:
        memcpy(a1, a2, v19 + 1);
        break;
    }
  }
  else
  {
    v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v21 + 16) & ~v21));
    swift_retain();
  }
  return a1;
}

unsigned __int8 *assignWithCopy for SessionKeyManager(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(unsigned __int8 *, uint64_t);
  uint64_t v21;
  unint64_t v22;
  void (*v23)(unint64_t, uint64_t);
  void (*v24)(unsigned __int8 *, uint64_t);
  unint64_t v25;
  void (*v26)(unsigned __int8 *, uint64_t);
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(unint64_t, unint64_t, uint64_t);
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void (*v38)(unint64_t, unint64_t, uint64_t);
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void (*v42)(unint64_t, unint64_t, uint64_t);
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(unsigned __int8 *, unsigned __int8 *, uint64_t);
  unint64_t v52;
  unint64_t v53;
  uint64_t v55;
  uint64_t v56;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = type metadata accessor for SymmetricKey();
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v56 = v7 + v10;
    v11 = *(_QWORD *)(v9 + 64);
    v12 = v11 + v10;
    v13 = ((v11 + v10 + ((v11 + v10 + ((v7 + v10) & ~v10)) & ~v10)) & ~v10) + v11;
    v14 = ((v13 + v10) & ~v10) + v11;
    if (v13 <= v14)
      v13 = ((v13 + v10) & ~v10) + v11;
    v15 = ((v12 + ((v14 + v10) & ~v10)) & ~v10) + v11;
    if (v15 > v13)
      v13 = v15;
    v16 = ((v12 + ((v12 + (v12 & ~v10)) & ~v10)) & ~v10) + v11;
    if (v16 <= v13)
      v17 = v13;
    else
      v17 = v16;
    if (a1[v17] >= 4u)
    {
      if (v17 <= 3)
        v18 = v17;
      else
        v18 = 4;
      __asm { BR              X13 }
    }
    v19 = ~v10;
    v55 = v6;
    switch(a1[v17])
    {
      case 0u:
        v20 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
        v21 = v5;
        v20(a1, v5);
        v22 = (unint64_t)&a1[v56] & v19;
        v23 = *(void (**)(unint64_t, uint64_t))(v9 + 8);
        v23(v22, v8);
        goto LABEL_18;
      case 1u:
        v24 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
        v21 = v5;
        v24(a1, v5);
        v25 = (unint64_t)&a1[v56] & v19;
        v23 = *(void (**)(unint64_t, uint64_t))(v9 + 8);
        v23(v25, v8);
        goto LABEL_21;
      case 2u:
        v26 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
        v21 = v5;
        v26(a1, v5);
        v23 = *(void (**)(unint64_t, uint64_t))(v9 + 8);
        v23((unint64_t)&a1[v56] & v19, v8);
        v27 = (v12 + ((unint64_t)&a1[v56] & v19)) & v19;
        v23(v27, v8);
        v22 = (v12 + v27) & v19;
        v23(v22, v8);
LABEL_18:
        v28 = v12 + v22;
        goto LABEL_20;
      case 3u:
        v21 = v5;
        v23 = *(void (**)(unint64_t, uint64_t))(v9 + 8);
        v23((unint64_t)a1, v8);
        v28 = (unint64_t)&a1[v12];
LABEL_20:
        v25 = v28 & v19;
        v23(v28 & v19, v8);
LABEL_21:
        v29 = (v12 + v25) & v19;
        v23(v29, v8);
        v23((v12 + v29) & v19, v8);
        v5 = v21;
        v6 = v55;
        break;
      default:
        break;
    }
    if (a2[v17] >= 4u)
    {
      if (v17 <= 3)
        v30 = v17;
      else
        v30 = 4;
      __asm { BR              X12 }
    }
    switch(a2[v17])
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        v31 = (unint64_t)&a2[v56] & v19;
        v32 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
        v32((unint64_t)&a1[v56] & v19, v31, v8);
        v33 = (v12 + ((unint64_t)&a1[v56] & v19)) & v19;
        v34 = (v12 + v31) & v19;
        v32(v33, v34, v8);
        v35 = (v12 + v33) & v19;
        v36 = (v12 + v34) & v19;
        v32(v35, v36, v8);
        v32((v12 + v35) & v19, (v12 + v36) & v19, v8);
        a1[v17] = 0;
        break;
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        v37 = (unint64_t)&a2[v56] & v19;
        v38 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
        v38((unint64_t)&a1[v56] & v19, v37, v8);
        v39 = (v12 + ((unint64_t)&a1[v56] & v19)) & v19;
        v40 = (v12 + v37) & v19;
        v38(v39, v40, v8);
        v38((v12 + v39) & v19, (v12 + v40) & v19, v8);
        a1[v17] = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        v41 = (unint64_t)&a2[v56] & v19;
        v42 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
        v42((unint64_t)&a1[v56] & v19, v41, v8);
        v43 = (v12 + ((unint64_t)&a1[v56] & v19)) & v19;
        v44 = (v12 + v41) & v19;
        v42(v43, v44, v8);
        v45 = (v12 + v43) & v19;
        v46 = (v12 + v44) & v19;
        v42(v45, v46, v8);
        v47 = (v12 + v45) & v19;
        v48 = (v12 + v46) & v19;
        v42(v47, v48, v8);
        v49 = (v12 + v47) & v19;
        v50 = (v12 + v48) & v19;
        v42(v49, v50, v8);
        v42((v12 + v49) & v19, (v12 + v50) & v19, v8);
        a1[v17] = 2;
        break;
      case 3u:
        v51 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v9 + 16);
        v51(a1, a2, v8);
        v52 = (unint64_t)&a2[v12] & v19;
        v51((unsigned __int8 *)((unint64_t)&a1[v12] & v19), (unsigned __int8 *)v52, v8);
        v53 = (v12 + v52) & v19;
        v51((unsigned __int8 *)((v12 + ((unint64_t)&a1[v12] & v19)) & v19), (unsigned __int8 *)v53, v8);
        v51((unsigned __int8 *)((v12 + ((v12 + ((unint64_t)&a1[v12] & v19)) & v19)) & v19), (unsigned __int8 *)((v12 + v53) & v19), v8);
        a1[v17] = 3;
        break;
      default:
        memcpy(a1, a2, v17 + 1);
        break;
    }
  }
  return a1;
}

_BYTE *initializeWithTake for SessionKeyManager(_BYTE *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(unint64_t, unint64_t, uint64_t);
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(unint64_t, unint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  void (*v29)(unint64_t, unint64_t, uint64_t);
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_BYTE *, unsigned __int8 *, uint64_t);
  unint64_t v35;
  unint64_t v36;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for SymmetricKey();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v7 + v10;
  v12 = *(_QWORD *)(v9 + 64);
  v13 = v12 + v10;
  v14 = ((v12 + v10 + ((v12 + v10 + ((v7 + v10) & ~v10)) & ~v10)) & ~v10) + v12;
  v15 = ((v14 + v10) & ~v10) + v12;
  if (v14 <= v15)
    v14 = ((v14 + v10) & ~v10) + v12;
  v16 = ((v13 + ((v15 + v10) & ~v10)) & ~v10) + v12;
  if (v16 > v14)
    v14 = v16;
  v17 = ((v13 + ((v13 + (v13 & ~v10)) & ~v10)) & ~v10) + v12;
  if (v17 <= v14)
    v18 = v14;
  else
    v18 = v17;
  if (a2[v18] >= 4u)
  {
    if (v18 <= 3)
      v19 = v18;
    else
      v19 = 4;
    __asm { BR              X13 }
  }
  v20 = ~v10;
  switch(a2[v18])
  {
    case 0u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      v21 = (unint64_t)&a2[v11] & v20;
      v22 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32);
      v22((unint64_t)&a1[v11] & v20, v21, v8);
      v23 = (v13 + v21) & v20;
      v22((v13 + ((unint64_t)&a1[v11] & v20)) & v20, v23, v8);
      v24 = (v13 + v23) & v20;
      v22((v13 + ((v13 + ((unint64_t)&a1[v11] & v20)) & v20)) & v20, v24, v8);
      v22((v13 + ((v13 + ((v13 + ((unint64_t)&a1[v11] & v20)) & v20)) & v20)) & v20, (v13 + v24) & v20, v8);
      a1[v18] = 0;
      break;
    case 1u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      v25 = (unint64_t)&a2[v11] & v20;
      v26 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32);
      v26((unint64_t)&a1[v11] & v20, v25, v8);
      v27 = (v13 + v25) & v20;
      v26((v13 + ((unint64_t)&a1[v11] & v20)) & v20, v27, v8);
      v26((v13 + ((v13 + ((unint64_t)&a1[v11] & v20)) & v20)) & v20, (v13 + v27) & v20, v8);
      a1[v18] = 1;
      break;
    case 2u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      v28 = (unint64_t)&a2[v11] & v20;
      v29 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32);
      v29((unint64_t)&a1[v11] & v20, v28, v8);
      v30 = (v13 + v28) & v20;
      v29((v13 + ((unint64_t)&a1[v11] & v20)) & v20, v30, v8);
      v31 = (v13 + v30) & v20;
      v29((v13 + ((v13 + ((unint64_t)&a1[v11] & v20)) & v20)) & v20, v31, v8);
      v32 = (v13 + v31) & v20;
      v29((v13 + ((v13 + ((v13 + ((unint64_t)&a1[v11] & v20)) & v20)) & v20)) & v20, v32, v8);
      v33 = (v13 + v32) & v20;
      v29((v13 + ((v13 + ((v13 + ((v13 + ((unint64_t)&a1[v11] & v20)) & v20)) & v20)) & v20)) & v20, v33, v8);
      v29((v13 + ((v13 + ((v13 + ((v13 + ((v13 + ((unint64_t)&a1[v11] & v20)) & v20)) & v20)) & v20)) & v20)) & v20, (v13 + v33) & v20, v8);
      a1[v18] = 2;
      break;
    case 3u:
      v34 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v9 + 32);
      v34(a1, a2, v8);
      v35 = (unint64_t)&a2[v13] & v20;
      v34((_BYTE *)((unint64_t)&a1[v13] & v20), (unsigned __int8 *)v35, v8);
      v36 = (v13 + v35) & v20;
      v34((_BYTE *)((v13 + ((unint64_t)&a1[v13] & v20)) & v20), (unsigned __int8 *)v36, v8);
      v34((_BYTE *)((v13 + ((v13 + ((unint64_t)&a1[v13] & v20)) & v20)) & v20), (unsigned __int8 *)((v13 + v36) & v20), v8);
      a1[v18] = 3;
      break;
    default:
      memcpy(a1, a2, v18 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *assignWithTake for SessionKeyManager(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(unsigned __int8 *, uint64_t);
  uint64_t v21;
  unint64_t v22;
  void (*v23)(unint64_t, uint64_t);
  void (*v24)(unsigned __int8 *, uint64_t);
  unint64_t v25;
  void (*v26)(unsigned __int8 *, uint64_t);
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(unint64_t, unint64_t, uint64_t);
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void (*v38)(unint64_t, unint64_t, uint64_t);
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void (*v42)(unint64_t, unint64_t, uint64_t);
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(unsigned __int8 *, unsigned __int8 *, uint64_t);
  unint64_t v52;
  unint64_t v53;
  uint64_t v55;
  uint64_t v56;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = type metadata accessor for SymmetricKey();
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v56 = v7 + v10;
    v11 = *(_QWORD *)(v9 + 64);
    v12 = v11 + v10;
    v13 = ((v11 + v10 + ((v11 + v10 + ((v7 + v10) & ~v10)) & ~v10)) & ~v10) + v11;
    v14 = ((v13 + v10) & ~v10) + v11;
    if (v13 <= v14)
      v13 = ((v13 + v10) & ~v10) + v11;
    v15 = ((v12 + ((v14 + v10) & ~v10)) & ~v10) + v11;
    if (v15 > v13)
      v13 = v15;
    v16 = ((v12 + ((v12 + (v12 & ~v10)) & ~v10)) & ~v10) + v11;
    if (v16 <= v13)
      v17 = v13;
    else
      v17 = v16;
    if (a1[v17] >= 4u)
    {
      if (v17 <= 3)
        v18 = v17;
      else
        v18 = 4;
      __asm { BR              X13 }
    }
    v19 = ~v10;
    v55 = v6;
    switch(a1[v17])
    {
      case 0u:
        v20 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
        v21 = v5;
        v20(a1, v5);
        v22 = (unint64_t)&a1[v56] & v19;
        v23 = *(void (**)(unint64_t, uint64_t))(v9 + 8);
        v23(v22, v8);
        goto LABEL_18;
      case 1u:
        v24 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
        v21 = v5;
        v24(a1, v5);
        v25 = (unint64_t)&a1[v56] & v19;
        v23 = *(void (**)(unint64_t, uint64_t))(v9 + 8);
        v23(v25, v8);
        goto LABEL_21;
      case 2u:
        v26 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
        v21 = v5;
        v26(a1, v5);
        v23 = *(void (**)(unint64_t, uint64_t))(v9 + 8);
        v23((unint64_t)&a1[v56] & v19, v8);
        v27 = (v12 + ((unint64_t)&a1[v56] & v19)) & v19;
        v23(v27, v8);
        v22 = (v12 + v27) & v19;
        v23(v22, v8);
LABEL_18:
        v28 = v12 + v22;
        goto LABEL_20;
      case 3u:
        v21 = v5;
        v23 = *(void (**)(unint64_t, uint64_t))(v9 + 8);
        v23((unint64_t)a1, v8);
        v28 = (unint64_t)&a1[v12];
LABEL_20:
        v25 = v28 & v19;
        v23(v28 & v19, v8);
LABEL_21:
        v29 = (v12 + v25) & v19;
        v23(v29, v8);
        v23((v12 + v29) & v19, v8);
        v5 = v21;
        v6 = v55;
        break;
      default:
        break;
    }
    if (a2[v17] >= 4u)
    {
      if (v17 <= 3)
        v30 = v17;
      else
        v30 = 4;
      __asm { BR              X12 }
    }
    switch(a2[v17])
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        v31 = (unint64_t)&a2[v56] & v19;
        v32 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32);
        v32((unint64_t)&a1[v56] & v19, v31, v8);
        v33 = (v12 + ((unint64_t)&a1[v56] & v19)) & v19;
        v34 = (v12 + v31) & v19;
        v32(v33, v34, v8);
        v35 = (v12 + v33) & v19;
        v36 = (v12 + v34) & v19;
        v32(v35, v36, v8);
        v32((v12 + v35) & v19, (v12 + v36) & v19, v8);
        a1[v17] = 0;
        break;
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        v37 = (unint64_t)&a2[v56] & v19;
        v38 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32);
        v38((unint64_t)&a1[v56] & v19, v37, v8);
        v39 = (v12 + ((unint64_t)&a1[v56] & v19)) & v19;
        v40 = (v12 + v37) & v19;
        v38(v39, v40, v8);
        v38((v12 + v39) & v19, (v12 + v40) & v19, v8);
        a1[v17] = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        v41 = (unint64_t)&a2[v56] & v19;
        v42 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32);
        v42((unint64_t)&a1[v56] & v19, v41, v8);
        v43 = (v12 + ((unint64_t)&a1[v56] & v19)) & v19;
        v44 = (v12 + v41) & v19;
        v42(v43, v44, v8);
        v45 = (v12 + v43) & v19;
        v46 = (v12 + v44) & v19;
        v42(v45, v46, v8);
        v47 = (v12 + v45) & v19;
        v48 = (v12 + v46) & v19;
        v42(v47, v48, v8);
        v49 = (v12 + v47) & v19;
        v50 = (v12 + v48) & v19;
        v42(v49, v50, v8);
        v42((v12 + v49) & v19, (v12 + v50) & v19, v8);
        a1[v17] = 2;
        break;
      case 3u:
        v51 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v9 + 32);
        v51(a1, a2, v8);
        v52 = (unint64_t)&a2[v12] & v19;
        v51((unsigned __int8 *)((unint64_t)&a1[v12] & v19), (unsigned __int8 *)v52, v8);
        v53 = (v12 + v52) & v19;
        v51((unsigned __int8 *)((v12 + ((unint64_t)&a1[v12] & v19)) & v19), (unsigned __int8 *)v53, v8);
        v51((unsigned __int8 *)((v12 + ((v12 + ((unint64_t)&a1[v12] & v19)) & v19)) & v19), (unsigned __int8 *)((v12 + v53) & v19), v8);
        a1[v17] = 3;
        break;
      default:
        memcpy(a1, a2, v17 + 1);
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionKeyManager(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int v17;
  unsigned int v19;
  int v20;
  unsigned int v21;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v6 = *(_QWORD *)(type metadata accessor for SymmetricKey() - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v8 + v7;
  v10 = ((v8 + v7 + ((v8 + v7 + ((v5 + v7) & ~v7)) & ~v7)) & ~v7) + v8;
  v11 = ((v10 + v7) & ~v7) + v8;
  if (v10 <= v11)
    v10 = ((v10 + v7) & ~v7) + v8;
  v12 = ((v9 + ((v11 + v7) & ~v7)) & ~v7) + v8;
  if (v12 > v10)
    v10 = v12;
  v13 = ((v9 + ((v9 + (v9 & ~v7)) & ~v7)) & ~v7) + v8;
  if (v13 <= v10)
    v14 = v10;
  else
    v14 = v13;
  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_26;
  v15 = v14 + 1;
  v16 = 8 * (v14 + 1);
  if ((v14 + 1) <= 3)
  {
    v19 = ((a2 + ~(-1 << v16) - 251) >> v16) + 1;
    if (HIWORD(v19))
    {
      v17 = *(_DWORD *)(a1 + v15);
      if (!v17)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v19 > 0xFF)
    {
      v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15))
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v19 < 2)
    {
LABEL_26:
      v21 = *(unsigned __int8 *)(a1 + v14);
      if (v21 >= 5)
        return (v21 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15))
    goto LABEL_26;
LABEL_19:
  v20 = (v17 - 1) << v16;
  if (v15 > 3)
    v20 = 0;
  if ((_DWORD)v15)
  {
    if (v15 > 3)
      LODWORD(v15) = 4;
    __asm { BR              X11 }
  }
  return (v20 + 252);
}

void storeEnumTagSinglePayload for SessionKeyManager(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v8 = *(_QWORD *)(type metadata accessor for SymmetricKey() - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = v10 + v9;
  v12 = ((v10 + v9 + ((v10 + v9 + ((v7 + v9) & ~v9)) & ~v9)) & ~v9) + v10;
  v13 = ((v12 + v9) & ~v9) + v10;
  if (v12 <= v13)
    v12 = ((v12 + v9) & ~v9) + v10;
  v14 = ((v11 + ((v13 + v9) & ~v9)) & ~v9) + v10;
  if (v14 > v12)
    v12 = v14;
  v15 = ((v11 + ((v11 + (v11 & ~v9)) & ~v9)) & ~v9) + v10;
  if (v15 <= v12)
    v15 = v12;
  v16 = v15 + 1;
  if (a3 < 0xFC)
  {
    v17 = 0u;
  }
  else if (v16 <= 3)
  {
    v19 = ((a3 + ~(-1 << (8 * v16)) - 251) >> (8 * v16)) + 1;
    if (HIWORD(v19))
    {
      v17 = 4u;
    }
    else if (v19 >= 0x100)
    {
      v17 = 2;
    }
    else
    {
      v17 = v19 > 1;
    }
  }
  else
  {
    v17 = 1u;
  }
  if (a2 <= 0xFB)
    __asm { BR              X11 }
  v18 = a2 - 252;
  if (v16 < 4)
  {
    if ((_DWORD)v15 != -1)
    {
      v20 = v18 & ~(-1 << (8 * v16));
      bzero(a1, v16);
      if ((_DWORD)v16 == 3)
      {
        *(_WORD *)a1 = v20;
        a1[2] = BYTE2(v20);
      }
      else if ((_DWORD)v16 == 2)
      {
        *(_WORD *)a1 = v20;
      }
      else
      {
        *a1 = v20;
      }
    }
  }
  else
  {
    bzero(a1, v15 + 1);
    *(_DWORD *)a1 = v18;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for SessionKeyManager.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v4 = *(_QWORD *)(type metadata accessor for SymmetricKey() - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = v6 + v5;
  v8 = ((v6 + v5 + ((v6 + v5 + ((v3 + v5) & ~v5)) & ~v5)) & ~v5) + v6;
  v9 = ((v8 + v5) & ~v5) + v6;
  if (v8 <= v9)
    v8 = ((v8 + v5) & ~v5) + v6;
  v10 = ((v7 + ((v9 + v5) & ~v5)) & ~v5) + v6;
  if (v10 > v8)
    v8 = v10;
  v11 = ((v7 + ((v7 + (v7 & ~v5)) & ~v5)) & ~v5) + v6;
  if (v11 <= v8)
    v11 = v8;
  result = *(unsigned __int8 *)(a1 + v11);
  if (result >= 4)
  {
    if (v11 <= 3)
      v13 = v11;
    else
      v13 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void destructiveInjectEnumTag for SessionKeyManager.State(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v6 = *(_QWORD *)(type metadata accessor for SymmetricKey() - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v8 + v7;
  v10 = ((v8 + v7 + ((v8 + v7 + ((v5 + v7) & ~v7)) & ~v7)) & ~v7) + v8;
  v11 = ((v10 + v7) & ~v7) + v8;
  if (v10 <= v11)
    v10 = ((v10 + v7) & ~v7) + v8;
  v12 = ((v9 + ((v11 + v7) & ~v7)) & ~v7) + v8;
  if (v12 > v10)
    v10 = v12;
  v13 = ((v9 + ((v9 + (v9 & ~v7)) & ~v7)) & ~v7) + v8;
  if (v13 <= v10)
    v14 = v10;
  else
    v14 = v13;
  if (a2 > 3)
  {
    v15 = a2 - 4;
    if (v14 < 4)
    {
      v16 = v15 >> (8 * v14);
      v17 = v15 & ~(-1 << (8 * v14));
      a1[v14] = v16 + 4;
      bzero(a1, v14);
      if ((_DWORD)v14 == 3)
      {
        *(_WORD *)a1 = v17;
        a1[2] = BYTE2(v17);
      }
      else if ((_DWORD)v14 == 2)
      {
        *(_WORD *)a1 = v17;
      }
      else
      {
        *a1 = v17;
      }
    }
    else
    {
      a1[v14] = 4;
      bzero(a1, v14);
      *(_DWORD *)a1 = v15;
    }
  }
  else
  {
    a1[v14] = a2;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for SessionKeyManager.State.HandshakeSecret(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(unint64_t, unint64_t, uint64_t);
  unint64_t v24;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for SymmetricKey();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (v7 + v10) & ~v10;
  v13 = *(_QWORD *)(v9 + 64);
  v14 = v13 + v10;
  v15 = ((v13 + v10 + ((v13 + v10 + v12) & ~v10)) & ~v10) + v13;
  v16 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v9 + 80));
  if (v16 > 7 || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0 || v15 > 0x18)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v16 + 16) & ~v16));
    swift_retain();
  }
  else
  {
    v20 = v8;
    v21 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v22 = ((unint64_t)a2 + v11) & v21;
    v23 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
    v23(((unint64_t)a1 + v11) & v21, v22, v20);
    v24 = (v14 + v22) & v21;
    v23((v14 + (((unint64_t)a1 + v11) & v21)) & v21, v24, v20);
    v23((v14 + ((v14 + (((unint64_t)a1 + v11) & v21)) & v21)) & v21, (v14 + v24) & v21, v20);
  }
  return a1;
}

uint64_t assignWithCopy for SessionKeyManager.State.HandshakeSecret(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for SymmetricKey();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64) + v9;
  v15 = (v14 + v11) & ~v9;
  v16 = (v14 + v12) & ~v9;
  v13(v15, v16, v7);
  v13((v14 + v15) & ~v9, (v14 + v16) & ~v9, v7);
  return a1;
}

uint64_t initializeWithTake for SessionKeyManager.State.HandshakeSecret(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for SymmetricKey();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64) + v9;
  v15 = (v14 + v11) & ~v9;
  v16 = (v14 + v12) & ~v9;
  v13(v15, v16, v7);
  v13((v14 + v15) & ~v9, (v14 + v16) & ~v9, v7);
  return a1;
}

uint64_t assignWithTake for SessionKeyManager.State.HandshakeSecret(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for SymmetricKey();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64) + v9;
  v15 = (v14 + v11) & ~v9;
  v16 = (v14 + v12) & ~v9;
  v13(v15, v16, v7);
  v13((v14 + v15) & ~v9, (v14 + v16) & ~v9, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionKeyManager.State.HandshakeSecret(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = type metadata accessor for SymmetricKey();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = *(_QWORD *)(v6 + 64) + v12;
  if (a2 <= v11)
    goto LABEL_23;
  v14 = ((*(_QWORD *)(v9 + 64) + v12 + ((*(_QWORD *)(v9 + 64) + v12 + (v13 & ~v12)) & ~v12)) & ~v12)
      + *(_QWORD *)(v9 + 64);
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_23:
      if (v11)
      {
        if (v7 >= v10)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v13 + a1) & ~v12, v10, v8);
      }
      return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_23;
LABEL_14:
  v18 = (v16 - 1) << v15;
  if (v14 > 3)
    v18 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v19 = v14;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v11 + v18 + 1;
}

void storeEnumTagSinglePayload for SessionKeyManager.State.HandshakeSecret(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for SymmetricKey() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = ((*(_QWORD *)(v9 + 64) + v11 + ((*(_QWORD *)(v9 + 64) + v11 + ((*(_QWORD *)(v7 + 64) + v11) & ~v11)) & ~v11)) & ~v11)
      + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v13 = 0u;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v10 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = 4u;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = 1u;
  }
  if (v10 < a2)
  {
    v14 = ~v10 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    result = MEMORY[0x1B5E111D8](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of SessionTicket(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SessionTicket();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SessionTicket(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SessionTicket();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t _s8SwiftTLS17SessionKeyManagerV5State33_BECB9E0D58BD55F969B88420A6B610BBLLO15HandshakeSecretV35dataToSignInServerCertificateVerifyAA10ByteBufferVvgySWXEfU_TA_0(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in ExportedAuthenticator.validate(keyParser:)(a1, a2);
}

uint64_t static Extension.ServerCertificateType.__derived_enum_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) != 0)
  {
    return (a4 & 1) != 0 && a1 == a3;
  }
  else if ((a4 & 1) != 0)
  {
    return 0;
  }
  else
  {
    return specialized static Array<A>.== infix(_:_:)(a1, a3);
  }
}

uint64_t ByteBuffer.writeServerCertificateType(_:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v7;
  _QWORD v8[6];

  v8[5] = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) != 0)
  {
    v7 = a1;
    v8[3] = MEMORY[0x1E0DEAC20];
    v8[4] = MEMORY[0x1E0CB1AA8];
    v8[0] = &v7;
    v8[1] = v8;
    __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E0DEAC20]);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    return 1;
  }
  else
  {
    outlined copy of Extension.ServerCertificateType(a1, 0);
    specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(v2);
    v5 = v4;
    outlined consume of Extension.SupportedVersions(a1, 0);
    return v5;
  }
}

uint64_t ByteBuffer.readServerCertificateType(messageType:)(unsigned __int8 a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 == 1)
  {
    v4 = *v1;
    v3 = v1[1];
    v5 = v1[2];
    outlined copy of Data._Representation(*v1, v3);
    specialized ByteBuffer.readInteger<A>(as:)();
    if ((v6 & 0x100) == 0)
    {
      ByteBuffer.readSlice(length:)(v6);
      if (v7 >> 60 != 15)
        __asm { BR              X10 }
    }
    outlined consume of Data._Representation(*v1, v1[1]);
    *v1 = v4;
    v1[1] = v3;
    v1[2] = v5;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v10 = swift_allocError();
    *(_DWORD *)v11 = 0;
    *(_BYTE *)(v11 + 4) = 1;
  }
  else
  {
    if (a1 == 8)
    {
      if (!__OFADD__(v1[2], 1))
        __asm { BR              X13 }
      __break(1u);
      JUMPOUT(0x1B0DE05A4);
    }
    v8 = a1 | 0x140000;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v10 = swift_allocError();
    *(_DWORD *)v9 = v8;
    *(_BYTE *)(v9 + 4) = 0;
  }
  swift_willThrow(v10);
  return v2;
}

void Extension.ServerCertificateType.hash(into:)(uint64_t a1, uint64_t a2, char a3)
{
  Swift::UInt v4;
  Swift::UInt8 *v5;
  Swift::UInt8 v6;

  if ((a3 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a2);
  }
  else
  {
    Hasher._combine(_:)(0);
    v4 = *(_QWORD *)(a2 + 16);
    Hasher._combine(_:)(v4);
    if (v4)
    {
      v5 = (Swift::UInt8 *)(a2 + 32);
      do
      {
        v6 = *v5++;
        Hasher._combine(_:)(v6);
        --v4;
      }
      while (v4);
    }
  }
}

Swift::Int Extension.ServerCertificateType.hashValue.getter(uint64_t a1, char a2)
{
  Swift::UInt v4;
  Swift::UInt8 *v5;
  Swift::UInt8 v6;

  Hasher.init(_seed:)();
  if ((a2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
    v4 = *(_QWORD *)(a1 + 16);
    Hasher._combine(_:)(v4);
    if (v4)
    {
      v5 = (Swift::UInt8 *)(a1 + 32);
      do
      {
        v6 = *v5++;
        Hasher._combine(_:)(v6);
        --v4;
      }
      while (v4);
    }
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Extension.ServerCertificateType()
{
  uint64_t v0;

  return Extension.ServerCertificateType.hashValue.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

void protocol witness for Hashable.hash(into:) in conformance Extension.ServerCertificateType(uint64_t a1)
{
  uint64_t v1;

  Extension.ServerCertificateType.hash(into:)(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.ServerCertificateType()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  Extension.ServerCertificateType.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Extension.ServerCertificateType(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a1;
  v5 = *a2;
  v6 = *((_BYTE *)a2 + 8);
  if ((a1[1] & 1) != 0)
  {
    return (v6 & 1) != 0 && v4 == v5;
  }
  else if ((v6 & 1) != 0)
  {
    return 0;
  }
  else
  {
    return specialized static Array<A>.== infix(_:_:)(v4, v5);
  }
}

unint64_t lazy protocol witness table accessor for type Extension.ServerCertificateType and conformance Extension.ServerCertificateType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Extension.ServerCertificateType and conformance Extension.ServerCertificateType;
  if (!lazy protocol witness table cache variable for type Extension.ServerCertificateType and conformance Extension.ServerCertificateType)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Extension.ServerCertificateType, &type metadata for Extension.ServerCertificateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.ServerCertificateType and conformance Extension.ServerCertificateType);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Extension.ServerCertificateType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of Extension.ServerCertificateType(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for Extension.ServerCertificateType(uint64_t a1)
{
  return outlined consume of Extension.SupportedVersions(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for Extension.ServerCertificateType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of Extension.ServerCertificateType(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of Extension.SupportedVersions(v5, v6);
  return a1;
}

uint64_t assignWithTake for Extension.ServerCertificateType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of Extension.SupportedVersions(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Extension.ServerCertificateType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Extension.ServerCertificateType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for Extension.ServerCertificateType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for Extension.ServerCertificateType(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Extension.ServerCertificateType()
{
  return &type metadata for Extension.ServerCertificateType;
}

void EncryptedExtensions.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  __int128 *v4;
  _BYTE v5[40];

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (__int128 *)(a2 + 32);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with take of Extension(v4, (uint64_t)v5);
      outlined release of Extension((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Extension);
      Extension.hash(into:)();
      outlined release of Extension((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Extension);
      v4 = (__int128 *)((char *)v4 + 40);
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
}

Swift::Int EncryptedExtensions.hashValue.getter(uint64_t a1)
{
  Swift::UInt v2;
  __int128 *v3;
  _BYTE v5[40];

  Hasher.init(_seed:)();
  v2 = *(_QWORD *)(a1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    v3 = (__int128 *)(a1 + 32);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with take of Extension(v3, (uint64_t)v5);
      outlined release of Extension((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Extension);
      Extension.hash(into:)();
      outlined release of Extension((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Extension);
      v3 = (__int128 *)((char *)v3 + 40);
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EncryptedExtensions()
{
  uint64_t *v0;

  return EncryptedExtensions.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance EncryptedExtensions(uint64_t a1)
{
  uint64_t *v1;

  EncryptedExtensions.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EncryptedExtensions()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt v2;
  __int128 *v3;
  _BYTE v5[40];

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(_QWORD *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    v3 = (__int128 *)(v1 + 32);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with take of Extension(v3, (uint64_t)v5);
      outlined release of Extension((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Extension);
      Extension.hash(into:)();
      outlined release of Extension((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Extension);
      v3 = (__int128 *)((char *)v3 + 40);
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EncryptedExtensions(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

void EncryptedExtensions.write(into:)(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1B0DE0C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[5];
  __int128 v5[2];
  __int16 v6;
  _BYTE v7[262];

  v2 = BYTE6(v0);
  v6 = 0;
  v4[3] = MEMORY[0x1E0DEAC20];
  v4[4] = MEMORY[0x1E0CB1AA8];
  v4[0] = &v6;
  v4[1] = v7;
  __swift_project_boxed_opaque_existential_1(v4, MEMORY[0x1E0DEAC20]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  if (*(_QWORD *)(v1 + 16))
  {
    swift_bridgeObjectRetain();
    outlined init with take of Extension((__int128 *)(v1 + 32), (uint64_t)v5);
    outlined init with take of Extension(v5, (uint64_t)&v6);
    __asm { BR              X9 }
  }
  specialized ByteBuffer.setInteger<A>(_:at:as:)(0, v2);
  return 2;
}

uint64_t EncryptedExtensions.init(bytes:)(uint64_t *a1)
{
  return specialized EncryptedExtensions.init(bytes:)(a1);
}

void protocol witness for HandshakeMessageProtocol.write(into:) in conformance EncryptedExtensions(uint64_t a1)
{
  EncryptedExtensions.write(into:)(a1);
}

uint64_t protocol witness for HandshakeMessageProtocol.init(bytes:) in conformance EncryptedExtensions@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = specialized EncryptedExtensions.init(bytes:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t specialized EncryptedExtensions.init(bytes:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *a1;
  v4 = a1[1];
  v6 = a1[2];
  outlined copy of Data._Representation(*a1, v4);
  specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)((uint64_t)a1);
  if (v1)
  {
    v8 = outlined consume of Data._Representation(*a1, a1[1]);
    *a1 = v5;
    a1[1] = v4;
    a1[2] = v6;
  }
  else
  {
    v2 = v7;
    if (v7)
    {
      outlined consume of Data._Representation(v5, v4);
      return v2;
    }
    outlined consume of Data._Representation(*a1, a1[1]);
    *a1 = v5;
    a1[1] = v4;
    a1[2] = v6;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v8 = swift_allocError();
    *(_DWORD *)v10 = 0;
    *(_BYTE *)(v10 + 4) = 1;
  }
  swift_willThrow(v8);
  return v2;
}

unint64_t lazy protocol witness table accessor for type EncryptedExtensions and conformance EncryptedExtensions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncryptedExtensions and conformance EncryptedExtensions;
  if (!lazy protocol witness table cache variable for type EncryptedExtensions and conformance EncryptedExtensions)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for EncryptedExtensions, &type metadata for EncryptedExtensions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncryptedExtensions and conformance EncryptedExtensions);
  }
  return result;
}

ValueMetadata *type metadata accessor for EncryptedExtensions()
{
  return &type metadata for EncryptedExtensions;
}

BOOL static Extension.TicketRequest.__derived_enum_equals(_:_:)(int a1, int a2)
{
  _BOOL4 v2;
  _BOOL4 v3;

  v2 = a1 == a2;
  if ((a2 & 0x10000) == 0)
    v2 = 0;
  v3 = (unsigned __int16)a1 == (unsigned __int16)a2;
  if ((a2 & 0x10000) != 0)
    v3 = 0;
  if ((a1 & 0x10000) != 0)
    return v2;
  else
    return v3;
}

uint64_t ByteBuffer.writeTicketRequestExtension(_:)(unsigned int a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  char *v6;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if ((a1 & 0x10000) != 0)
  {
    v5 = a1;
    v8 = MEMORY[0x1E0DEAC20];
    v9 = MEMORY[0x1E0CB1AA8];
    v6 = &v5;
    v7 = &v6;
    __swift_project_boxed_opaque_existential_1(&v6, MEMORY[0x1E0DEAC20]);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v6);
    return 1;
  }
  else
  {
    v1 = a1 >> 8;
    v5 = a1;
    v2 = MEMORY[0x1E0DEAC20];
    v3 = MEMORY[0x1E0CB1AA8];
    v8 = MEMORY[0x1E0DEAC20];
    v9 = MEMORY[0x1E0CB1AA8];
    v6 = &v5;
    v7 = &v6;
    __swift_project_boxed_opaque_existential_1(&v6, MEMORY[0x1E0DEAC20]);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v6);
    v5 = v1;
    v8 = v2;
    v9 = v3;
    v6 = &v5;
    v7 = &v6;
    __swift_project_boxed_opaque_existential_1(&v6, v2);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v6);
    return 2;
  }
}

uint64_t ByteBuffer.readTicketRequestExtension(messageType:)(unsigned __int8 a1)
{
  uint64_t v1;
  __int16 v2;
  unsigned __int8 v3;
  __int16 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  if (a1 == 8)
  {
    if (!__OFADD__(*(_QWORD *)(v1 + 16), 1))
      __asm { BR              X13 }
    __break(1u);
    JUMPOUT(0x1B0DE1584);
  }
  if (a1 == 1)
  {
    specialized ByteBuffer.readInteger<A>(as:)();
    if ((v2 & 0x100) == 0)
    {
      v3 = v2;
      specialized ByteBuffer.readInteger<A>(as:)();
      if ((v4 & 0x100) == 0)
        return (unsigned __int16)(v3 | (unsigned __int16)(v4 << 8));
    }
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v6 = swift_allocError();
    *(_DWORD *)v7 = 0;
    v8 = 1;
  }
  else
  {
    v5 = a1 | 0x3A0000;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v6 = swift_allocError();
    v8 = 0;
    *(_DWORD *)v7 = v5;
  }
  *(_BYTE *)(v7 + 4) = v8;
  return swift_willThrow(v6);
}

void Extension.TicketRequest.hash(into:)(uint64_t a1, unsigned int a2)
{
  Swift::UInt8 v2;
  unsigned int v3;

  v2 = a2;
  if ((a2 & 0x10000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    LOBYTE(v3) = v2;
  }
  else
  {
    v3 = a2 >> 8;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v2);
  }
  Hasher._combine(_:)(v3);
}

BOOL static Extension.TicketRequest.ServerTicketRequestHint.__derived_struct_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

Swift::Int Extension.TicketRequest.hashValue.getter(unsigned int a1)
{
  unsigned int v2;

  Hasher.init(_seed:)();
  if ((a1 & 0x10000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    LOBYTE(v2) = a1;
  }
  else
  {
    v2 = a1 >> 8;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(a1);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Extension.TicketRequest()
{
  unsigned __int16 *v0;
  unsigned int v1;
  char v2;
  unsigned int v3;

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 2);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    LOBYTE(v3) = v1;
  }
  else
  {
    v3 = v1 >> 8;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Extension.TicketRequest()
{
  unsigned __int16 *v0;
  unsigned int v1;
  unsigned int v2;

  v1 = *v0;
  if ((v0[1] & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    LOBYTE(v2) = v1;
  }
  else
  {
    v2 = v1 >> 8;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.TicketRequest()
{
  unsigned __int16 *v0;
  unsigned int v1;
  char v2;
  unsigned int v3;

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 2);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    LOBYTE(v3) = v1;
  }
  else
  {
    v3 = v1 >> 8;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Extension.TicketRequest(unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v2;
  _BOOL4 v3;

  v2 = *a2;
  v3 = *a1 == v2;
  if (!*((_BYTE *)a2 + 2))
    v3 = 0;
  if ((a1[1] & 1) != 0)
    return v3;
  else
    return (*a1 == v2) & ~*((unsigned __int8 *)a2 + 2);
}

uint64_t ClientTicketRequest.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(55);
  v0._countAndFlagsBits = 0xD00000000000001FLL;
  v0._object = (void *)0x80000001B0DEC450;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x80000001B0DEC470;
  v2._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ClientTicketRequest()
{
  return ClientTicketRequest.description.getter();
}

void Extension.TicketRequest.ServerTicketRequestHint.hash(into:)(int a1, Swift::UInt8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int Extension.TicketRequest.ServerTicketRequestHint.hashValue.getter(Swift::UInt8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

unint64_t Extension.TicketRequest.ServerTicketRequestHint.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0xD00000000000001FLL;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance Extension.TicketRequest.ServerTicketRequestHint()
{
  return Extension.TicketRequest.ServerTicketRequestHint.description.getter();
}

unint64_t lazy protocol witness table accessor for type Extension.TicketRequest and conformance Extension.TicketRequest()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Extension.TicketRequest and conformance Extension.TicketRequest;
  if (!lazy protocol witness table cache variable for type Extension.TicketRequest and conformance Extension.TicketRequest)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Extension.TicketRequest, &type metadata for Extension.TicketRequest);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.TicketRequest and conformance Extension.TicketRequest);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ClientTicketRequest and conformance ClientTicketRequest()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ClientTicketRequest and conformance ClientTicketRequest;
  if (!lazy protocol witness table cache variable for type ClientTicketRequest and conformance ClientTicketRequest)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for ClientTicketRequest, &type metadata for ClientTicketRequest);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClientTicketRequest and conformance ClientTicketRequest);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Extension.TicketRequest.ServerTicketRequestHint and conformance Extension.TicketRequest.ServerTicketRequestHint()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Extension.TicketRequest.ServerTicketRequestHint and conformance Extension.TicketRequest.ServerTicketRequestHint;
  if (!lazy protocol witness table cache variable for type Extension.TicketRequest.ServerTicketRequestHint and conformance Extension.TicketRequest.ServerTicketRequestHint)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Extension.TicketRequest.ServerTicketRequestHint, &type metadata for Extension.TicketRequest.ServerTicketRequestHint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.TicketRequest.ServerTicketRequestHint and conformance Extension.TicketRequest.ServerTicketRequestHint);
  }
  return result;
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Extension.TicketRequest(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
  }
  v4 = *((unsigned __int8 *)a1 + 2);
  if (v4 <= 1)
    v5 = -1;
  else
    v5 = v4 ^ 0xFF;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Extension.TicketRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554177) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFE)
    v3 = 0;
  if (a2 > 0xFE)
  {
    *(_WORD *)result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)(result + 2) = -(char)a2;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

uint64_t getEnumTag for Extension.TicketRequest(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2);
}

uint64_t destructiveInjectEnumTag for Extension.TicketRequest(uint64_t result, char a2)
{
  *(_BYTE *)(result + 2) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Extension.TicketRequest()
{
  return &type metadata for Extension.TicketRequest;
}

uint64_t storeEnumTagSinglePayload for ClientTicketRequest(_WORD *a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 0xFFFF) <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if ((a3 + 0xFFFF) < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (!a2)
    return ((uint64_t (*)(void))((char *)sub_1B0DE1CD0 + 4 * byte_1B0DEA215[v4]))();
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_1B0DE1CB0 + 4 * asc_1B0DEA210[v4]))();
}

uint64_t sub_1B0DE1CB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1B0DE1CD0(uint64_t result)
{
  *(_BYTE *)(result + 2) = 0;
  return result;
}

uint64_t sub_1B0DE1CD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1B0DE1CE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1B0DE1CE8(uint64_t result)
{
  *(_WORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_1B0DE1CF0(uint64_t result)
{
  *(_DWORD *)(result + 2) = 0;
  return result;
}

ValueMetadata *type metadata accessor for ClientTicketRequest()
{
  return &type metadata for ClientTicketRequest;
}

ValueMetadata *type metadata accessor for Extension.TicketRequest.ServerTicketRequestHint()
{
  return &type metadata for Extension.TicketRequest.ServerTicketRequestHint;
}

__n128 HandshakeMessageParser.ParseResult.init(messageBytes:message:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[6];
  uint64_t v18;
  char v19;

  outlined init with take of HandshakeMessage(a4, (uint64_t)v17);
  v9 = v18;
  v10 = v19;
  result = (__n128)v17[0];
  v12 = v17[1];
  v13 = v17[2];
  v14 = v17[3];
  v15 = v17[4];
  v16 = v17[5];
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(__n128 *)(a5 + 24) = result;
  *(_OWORD *)(a5 + 40) = v12;
  *(_OWORD *)(a5 + 56) = v13;
  *(_OWORD *)(a5 + 72) = v14;
  *(_OWORD *)(a5 + 88) = v15;
  *(_OWORD *)(a5 + 104) = v16;
  *(_QWORD *)(a5 + 120) = v9;
  *(_BYTE *)(a5 + 128) = v10;
  return result;
}

uint64_t HandshakeMessageParser.ParseResult.messageBytes.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t HandshakeMessageParser.ParseResult.message.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of HandshakeMessage(v1 + 24, a1);
}

uint64_t HandshakeMessageParser.ParseResult.message.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of HandshakeMessage(a1, v1 + 24);
}

double _s8SwiftTLS22HandshakeMessageParserV11ParseResultVSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 128) = -1;
  return result;
}

uint64_t outlined init with copy of HandshakeMessage(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for HandshakeMessage(a2, a1);
  return a2;
}

uint64_t outlined assign with take of HandshakeMessage(uint64_t a1, uint64_t a2)
{
  assignWithTake for HandshakeMessage(a2, a1);
  return a2;
}

uint64_t *destroy for HandshakeMessageParser(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if (v1 >> 60 != 15)
    return (uint64_t *)outlined consume of Data._Representation(*result, v1);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for HandshakeMessageParser(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v5 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 16) = a2[2];
  return a1;
}

uint64_t assignWithCopy for HandshakeMessageParser(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4 = a2[1];
  if (*(_QWORD *)(a1 + 8) >> 60 != 15)
  {
    if (v4 >> 60 == 15)
    {
      outlined destroy of ByteBuffer(a1);
      v6 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_9:
      *(_QWORD *)(a1 + 16) = v6;
      return a1;
    }
    v8 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    v9 = *(_QWORD *)a1;
    v10 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v4;
    outlined consume of Data._Representation(v9, v10);
LABEL_8:
    v6 = a2[2];
    goto LABEL_9;
  }
  if (v4 >> 60 != 15)
  {
    v7 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v4;
    goto LABEL_8;
  }
  v5 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_OWORD *)a1 = v5;
  return a1;
}

uint64_t *assignWithTake for HandshakeMessageParser(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      outlined consume of Data._Representation(v6, v4);
      goto LABEL_6;
    }
    outlined destroy of ByteBuffer((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for HandshakeMessageParser(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xC && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 12);
  v3 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0)
    v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  else
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HandshakeMessageParser(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 12;
    if (a3 >= 0xC)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xC)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HandshakeMessageParser()
{
  return &type metadata for HandshakeMessageParser;
}

uint64_t destroy for HandshakeMessageParser.ParseResult(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return outlined consume of HandshakeMessage(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_BYTE *)(a1 + 128));
}

uint64_t initializeWithCopy for HandshakeMessageParser.ParseResult(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = a2;
  v4 = *a2;
  v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = v2[3];
  *(_QWORD *)(a1 + 16) = v2[2];
  v7 = v2[4];
  v8 = v2[5];
  v9 = v2[6];
  v10 = v2[7];
  v11 = v2[8];
  v12 = v2[9];
  v13 = v2[10];
  v15 = v2[11];
  v16 = v2[12];
  v17 = v2[13];
  v18 = v2[14];
  v19 = v2[15];
  LOBYTE(v2) = *((_BYTE *)v2 + 128);
  outlined copy of HandshakeMessage(v6, v7, v8, v9, v10, v11, v12, v13, v15, v16, v17, v18, v19, (char)v2);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  *(_BYTE *)(a1 + 128) = (_BYTE)v2;
  return a1;
}

uint64_t assignWithCopy for HandshakeMessageParser.ParseResult(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = a2;
  v4 = *a2;
  v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 16) = v2[2];
  v8 = v2[3];
  v9 = v2[4];
  v10 = v2[5];
  v11 = v2[6];
  v12 = v2[7];
  v13 = v2[8];
  v14 = v2[9];
  v15 = v2[10];
  v29 = v2[11];
  v30 = v2[12];
  v31 = v2[13];
  v32 = v2[14];
  v33 = v2[15];
  LOBYTE(v2) = *((_BYTE *)v2 + 128);
  outlined copy of HandshakeMessage(v8, v9, v10, v11, v12, v13, v14, v15, v29, v30, v31, v32, v33, (char)v2);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 48);
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(a1 + 64);
  v22 = *(_QWORD *)(a1 + 72);
  v23 = *(_QWORD *)(a1 + 80);
  v24 = *(_OWORD *)(a1 + 88);
  v25 = *(_OWORD *)(a1 + 104);
  v26 = *(_QWORD *)(a1 + 120);
  v27 = *(_BYTE *)(a1 + 128);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 88) = v29;
  *(_QWORD *)(a1 + 96) = v30;
  *(_QWORD *)(a1 + 104) = v31;
  *(_QWORD *)(a1 + 112) = v32;
  *(_QWORD *)(a1 + 120) = v33;
  *(_BYTE *)(a1 + 128) = (_BYTE)v2;
  outlined consume of HandshakeMessage(v16, v17, v18, v19, v20, v21, v22, v23, v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26, v27);
  return a1;
}

__n128 __swift_memcpy129_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for HandshakeMessageParser.ParseResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  v6 = *(_BYTE *)(a2 + 128);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 88);
  v16 = *(_OWORD *)(a1 + 104);
  v17 = *(_QWORD *)(a1 + 120);
  v18 = *(_BYTE *)(a1 + 128);
  v19 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v19;
  v20 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v20;
  v21 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v21;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = v6;
  outlined consume of HandshakeMessage(v7, v8, v9, v10, v11, v12, v13, v14, v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandshakeMessageParser.ParseResult(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 129))
    return (*(_DWORD *)a1 + 249);
  v3 = *(unsigned __int8 *)(a1 + 128);
  if (v3 <= 7)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HandshakeMessageParser.ParseResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 128) = 0;
    *(_QWORD *)result = a2 - 249;
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 129) = 1;
  }
  else
  {
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 129) = 0;
    if (a2)
      *(_BYTE *)(result + 128) = -(char)a2;
  }
  return result;
}

uint64_t ByteBuffer.readSignatureAlgorithms(messageType:)(unsigned __int8 a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 == 13 || a1 == 1)
  {
    v5 = *v1;
    v4 = v1[1];
    v6 = v1[2];
    outlined copy of Data._Representation(*v1, v4);
    specialized ByteBuffer.readInteger<A>(as:)();
    if ((v7 & 0x10000) == 0)
    {
      ByteBuffer.readSlice(length:)((unsigned __int16)v7);
      if (v8 >> 60 != 15)
        __asm { BR              X10 }
    }
    outlined consume of Data._Representation(*v1, v1[1]);
    *v1 = v5;
    v1[1] = v4;
    v1[2] = v6;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v11 = swift_allocError();
    *(_DWORD *)v9 = 0;
    *(_BYTE *)(v9 + 4) = 1;
  }
  else
  {
    v10 = a1 | 0xD0000;
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v11 = swift_allocError();
    *(_DWORD *)v12 = v10;
    *(_BYTE *)(v12 + 4) = 0;
  }
  swift_willThrow(v11);
  return v2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Extension.SignatureAlgorithms(_QWORD *a1, _QWORD *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type Extension.SignatureAlgorithms and conformance Extension.SignatureAlgorithms()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Extension.SignatureAlgorithms and conformance Extension.SignatureAlgorithms;
  if (!lazy protocol witness table cache variable for type Extension.SignatureAlgorithms and conformance Extension.SignatureAlgorithms)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Extension.SignatureAlgorithms, &type metadata for Extension.SignatureAlgorithms);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.SignatureAlgorithms and conformance Extension.SignatureAlgorithms);
  }
  return result;
}

ValueMetadata *type metadata accessor for Extension.SignatureAlgorithms()
{
  return &type metadata for Extension.SignatureAlgorithms;
}

__n128 ClientHello.init(legacyVersion:random:legacySessionID:cipherSuites:legacyCompressionMethods:extensions:)@<Q0>(__int16 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  __n128 result;
  __int128 v11;
  uint64_t v12;

  result = *(__n128 *)a6;
  v11 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a9 + 40) = *(_OWORD *)a6;
  v12 = *(_QWORD *)(a6 + 32);
  *(_WORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_OWORD *)(a9 + 56) = v11;
  *(_QWORD *)(a9 + 72) = v12;
  *(_QWORD *)(a9 + 80) = a7;
  *(_QWORD *)(a9 + 88) = a8;
  *(_QWORD *)(a9 + 96) = a10;
  return result;
}

uint64_t ClientHello.serverCertificateTypes.getter()
{
  specialized ClientHello.serverCertificateTypes.getter();
  return swift_bridgeObjectRetain();
}

__n128 ClientHello.init(bytes:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[6];
  uint64_t v8;

  specialized ClientHello.init(bytes:)(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_QWORD *)(a2 + 96) = v8;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t ClientHello.cipherSuites.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ClientHello.cipherSuites.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 80) = a1;
  return result;
}

uint64_t ClientHello.extensions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ClientHello.extensions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 96) = a1;
  return result;
}

uint64_t (*ClientHello.extensions.modify())()
{
  return CertificateVerify.algorithm.getter;
}

void ClientHello.hash(into:)()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  uint64_t v9;
  Swift::UInt v10;
  Swift::UInt16 *v11;
  Swift::UInt16 v12;
  uint64_t v13;
  Swift::UInt v14;
  Swift::UInt8 *v15;
  Swift::UInt8 v16;
  uint64_t v17;
  Swift::UInt v18;
  __int128 *v19;
  uint64_t v20;
  _BYTE v21[40];

  v1 = *(_BYTE *)(v0 + 1);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v1);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  Hasher._combine(_:)(*(_QWORD *)(v0 + 8));
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 64);
  Hasher._combine(_:)(*(_QWORD *)(v0 + 72));
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v9 + 16);
  Hasher._combine(_:)(v10);
  if (v10)
  {
    v11 = (Swift::UInt16 *)(v9 + 32);
    do
    {
      v12 = *v11++;
      Hasher._combine(_:)(v12);
      --v10;
    }
    while (v10);
  }
  v13 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v13 + 16);
  Hasher._combine(_:)(v14);
  if (v14)
  {
    v15 = (Swift::UInt8 *)(v13 + 32);
    do
    {
      v16 = *v15++;
      Hasher._combine(_:)(v16);
      --v14;
    }
    while (v14);
  }
  v17 = *(_QWORD *)(v0 + 96);
  v20 = v17;
  v18 = *(_QWORD *)(v17 + 16);
  Hasher._combine(_:)(v18);
  if (v18)
  {
    v19 = (__int128 *)(v17 + 32);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with take of Extension(v19, (uint64_t)v21);
      outlined release of Extension((uint64_t)v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Extension);
      Extension.hash(into:)();
      outlined release of Extension((uint64_t)v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Extension);
      v19 = (__int128 *)((char *)v19 + 40);
      --v18;
    }
    while (v18);
    outlined release of [Extension]((uint64_t)&v20);
  }
}

Swift::Int ClientHello.hashValue.getter()
{
  Hasher.init(_seed:)();
  ClientHello.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ClientHello()
{
  Hasher.init(_seed:)();
  ClientHello.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ClientHello(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[6];
  uint64_t v12;
  _OWORD v13[6];
  uint64_t v14;

  v2 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v2;
  v12 = *(_QWORD *)(a1 + 96);
  v3 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v5;
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 64);
  v9 = *(_OWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 96);
  v13[4] = v8;
  v13[5] = v9;
  v13[2] = v6;
  v13[3] = v7;
  return specialized static ClientHello.__derived_struct_equals(_:_:)((unsigned __int8 *)v11, (unsigned __int8 *)v13) & 1;
}

void readCompressionMethods #1 (_:) in ClientHello.init(bytes:)(uint64_t a1)
{
  __asm { BR              X11 }
}

void sub_1B0DE2E40(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (__OFSUB__(BYTE6(a2), a1))
  {
    __break(1u);
  }
  else if (!__OFADD__(a1, BYTE6(a2) - a1))
  {
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1B0DE2EF8);
}

void readExtensions #1 (_:) in ClientHello.init(bytes:)(uint64_t a1)
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0, MEMORY[0x1E0DEE9D8]);
  if (!__OFADD__(*(_QWORD *)(a1 + 16), 2))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1B0DE33B4);
}

void protocol witness for HandshakeMessageProtocol.write(into:) in conformance ClientHello(uint64_t a1)
{
  ClientHello.write(into:)(a1);
}

uint64_t specialized static ClientHello.__derived_struct_equals(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2
    && a1[1] == a2[1]
    && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 8), *(int64x2_t *)(a2 + 8)), (int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 24), *(int64x2_t *)(a2 + 24)))), 0xFuLL))) & 1) != 0&& (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 40), *(int64x2_t *)(a2 + 40)), (int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 56), *(int64x2_t *)(a2 + 56)))), 0xFuLL))) & 1) != 0&& *((_QWORD *)a1 + 9) == *((_QWORD *)a2 + 9)&& (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)a1 + 10), *((_QWORD *)a2 + 10)) & 1) != 0&& specialized static Array<A>.== infix(_:_:)(*((_QWORD *)a1 + 11), *((_QWORD *)a2 + 11)))
  {
    return specialized static Array<A>.== infix(_:_:)(*((_QWORD *)a1 + 12), *((_QWORD *)a2 + 12));
  }
  else
  {
    return 0;
  }
}

void specialized ClientHello.init(bytes:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35[40];
  char v36[48];
  _QWORD v37[5];
  char v38;
  _QWORD v39[4];
  char v40;
  uint64_t v41;

  specialized ByteBuffer.readInteger<A>(as:)();
  if ((v5 & 0x10000) != 0
    || (v6 = v5,
        ByteBuffer.readRandom()(),
        outlined init with take of P256.Signing.PublicKey?((uint64_t)v35, (uint64_t)v39, &demangling cache variable for type metadata for Random?), (v40 & 1) != 0))
  {
LABEL_3:
    lazy protocol witness table accessor for type TLSError and conformance TLSError();
    v7 = swift_allocError();
    *(_DWORD *)v8 = 0;
    *(_BYTE *)(v8 + 4) = 1;
    swift_willThrow(v7);
    return;
  }
  v10 = v39[0];
  v9 = v39[1];
  v12 = v39[2];
  v11 = v39[3];
  ByteBuffer.readLegacySessionID()();
  if (!v2)
  {
    outlined init with take of P256.Signing.PublicKey?((uint64_t)v36, (uint64_t)v37, &demangling cache variable for type metadata for LegacySessionID?);
    if ((v38 & 1) == 0)
    {
      v34 = v11;
      v41 = v9;
      v32 = v37[1];
      v33 = v37[0];
      v30 = v37[3];
      v31 = v37[2];
      v29 = v37[4];
      v13 = *a1;
      v14 = a1[1];
      v15 = a1[2];
      outlined copy of Data._Representation(*a1, v14);
      specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)((uint64_t)a1);
      v27 = v15;
      v28 = v14;
      if (v16)
      {
        v26 = v16;
        outlined consume of Data._Representation(v13, v14);
        v13 = *a1;
        v17 = a1[1];
        v18 = a1[2];
        outlined copy of Data._Representation(*a1, v17);
        specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)((uint64_t)a1);
        v27 = v18;
        v28 = v17;
        if (v19)
        {
          v25 = v19;
          outlined consume of Data._Representation(v13, v17);
          v13 = *a1;
          v20 = a1[1];
          v21 = a1[2];
          outlined copy of Data._Representation(*a1, v20);
          specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)((uint64_t)a1);
          v27 = v21;
          v28 = v20;
          if (v22)
          {
            v23 = v22;
            outlined consume of Data._Representation(v13, v28);
            *(_BYTE *)a2 = HIBYTE(v6);
            *(_BYTE *)(a2 + 1) = v6;
            v24 = v41;
            *(_QWORD *)(a2 + 8) = v10;
            *(_QWORD *)(a2 + 16) = v24;
            *(_QWORD *)(a2 + 24) = v12;
            *(_QWORD *)(a2 + 32) = v34;
            *(_QWORD *)(a2 + 40) = v33;
            *(_QWORD *)(a2 + 48) = v32;
            *(_QWORD *)(a2 + 56) = v31;
            *(_QWORD *)(a2 + 64) = v30;
            *(_QWORD *)(a2 + 72) = v29;
            *(_QWORD *)(a2 + 80) = v26;
            *(_QWORD *)(a2 + 88) = v25;
            *(_QWORD *)(a2 + 96) = v23;
            return;
          }
          outlined consume of Data._Representation(*a1, a1[1]);
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined consume of Data._Representation(*a1, a1[1]);
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined consume of Data._Representation(*a1, a1[1]);
      }
      *a1 = v13;
      a1[1] = v28;
      a1[2] = v27;
    }
    goto LABEL_3;
  }
}

unint64_t lazy protocol witness table accessor for type ClientHello and conformance ClientHello()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ClientHello and conformance ClientHello;
  if (!lazy protocol witness table cache variable for type ClientHello and conformance ClientHello)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for ClientHello, &type metadata for ClientHello);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClientHello and conformance ClientHello);
  }
  return result;
}

uint64_t destroy for ClientHello()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ClientHello(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v3 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v3;
  v4 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ClientHello(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ClientHello(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientHello(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClientHello(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClientHello()
{
  return &type metadata for ClientHello;
}

BOOL static Extension.PreSharedKey.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 1) != 0)
    return (a6 & 1) != 0 && (unsigned __int16)a1 == (unsigned __int16)a4;
  else
    return (a6 & 1) == 0
        && (specialized static Array<A>.== infix(_:_:)(a1, a4) & 1) != 0
        && (specialized static Array<A>.== infix(_:_:)(a2, a5) & 1) != 0;
}

void ByteBuffer.writePreSharedKey(_:)(unsigned int a1, uint64_t a2, char a3)
{
  __int16 v3;
  _QWORD v4[6];

  v4[5] = *MEMORY[0x1E0C80C00];
  if ((a3 & 1) != 0)
  {
    v3 = bswap32(a1) >> 16;
    v4[3] = MEMORY[0x1E0DEAC20];
    v4[4] = MEMORY[0x1E0CB1AA8];
    v4[0] = &v3;
    v4[1] = v4;
    __swift_project_boxed_opaque_existential_1(v4, MEMORY[0x1E0DEAC20]);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  }
  else
  {
    ByteBuffer.writeOfferedPSKs(_:)();
  }
}

uint64_t Extension.PreSharedKey.OfferedPSKs.PSKIdentity.obfuscatedTicketAge.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t Extension.PreSharedKey.OfferedPSKs.PSKIdentity.obfuscatedTicketAge.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 24) = result;
  return result;
}

void Extension.PreSharedKey.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a2);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)(a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)(a1, a3);
    swift_bridgeObjectRelease();
  }
}

uint64_t static Extension.PreSharedKey.OfferedPSKs.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((specialized static Array<A>.== infix(_:_:)(a1, a3) & 1) != 0)
    return specialized static Array<A>.== infix(_:_:)(a2, a4);
  else
    return 0;
}

Swift::Int Extension.PreSharedKey.hashValue.getter(uint64_t a1, uint64_t a2, char a3)
{
  _BYTE v7[72];

  Hasher.init(_seed:)();
  if ((a3 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v7, a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v7, a2);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Extension.PreSharedKey()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _BYTE v5[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)();
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v5, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v5, v2);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Extension.PreSharedKey(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)v1;
  if ((*(_BYTE *)(v1 + 16) & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v3);
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 8);
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)(a1, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)(a1, v4);
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.PreSharedKey()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _BYTE v5[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)();
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v5, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v5, v2);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Extension.PreSharedKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)a2;
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
    return (*(_BYTE *)(a2 + 16) & 1) == 0
        && (v7 = *(_QWORD *)(a2 + 8),
            v8 = *(_QWORD *)(a1 + 8),
            (specialized static Array<A>.== infix(_:_:)(v4, v5) & 1) != 0)
        && (specialized static Array<A>.== infix(_:_:)(v8, v7) & 1) != 0;
  return (*(_BYTE *)(a2 + 16) & 1) != 0 && (unsigned __int16)v4 == (unsigned __int16)v5;
}

uint64_t Extension.PreSharedKey.OfferedPSKs.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, a3);
  return swift_bridgeObjectRelease();
}

Swift::Int Extension.PreSharedKey.OfferedPSKs.hashValue.getter(uint64_t a1, uint64_t a2)
{
  _BYTE v5[72];

  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v5, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v5, a2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Extension.PreSharedKey.OfferedPSKs()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Extension.PreSharedKey.OfferedPSKs(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.PreSharedKey.OfferedPSKs()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Extension.PreSharedKey.OfferedPSKs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0)
    return specialized static Array<A>.== infix(_:_:)(v2, v3);
  else
    return 0;
}

void Extension.PreSharedKey.OfferedPSKs.PSKIdentity.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

void sub_1B0DE42F0()
{
  Swift::UInt32 v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (BYTE6(v1) < v3)
  {
    __break(1u);
    JUMPOUT(0x1B0DE437CLL);
  }
  v4 = Data._Representation.subscript.getter();
  v6 = v5;
  Data.hash(into:)();
  outlined consume of Data._Representation(v4, v6);
  outlined consume of Data._Representation(v2, v1);
  Hasher._combine(_:)(v0);
}

uint64_t static Extension.PreSharedKey.OfferedPSKs.PSKIdentity.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  unsigned __int8 v10;

  specialized static ByteBuffer.== infix(_:_:)(a1, a2);
  return v10 & (a4 == a8);
}

void Extension.PreSharedKey.OfferedPSKs.PSKIdentity.hashValue.getter(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1B0DE441C()
{
  Swift::UInt32 v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (BYTE6(v1) < v3)
  {
    __break(1u);
    JUMPOUT(0x1B0DE44B8);
  }
  v4 = Data._Representation.subscript.getter();
  v6 = v5;
  Data.hash(into:)();
  outlined consume of Data._Representation(v4, v6);
  outlined consume of Data._Representation(v2, v1);
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hashValue.getter in conformance Extension.PreSharedKey.OfferedPSKs.PSKIdentity()
{
  uint64_t *v0;

  Extension.PreSharedKey.OfferedPSKs.PSKIdentity.hashValue.getter(*v0, v0[1]);
}

void protocol witness for Hashable.hash(into:) in conformance Extension.PreSharedKey.OfferedPSKs.PSKIdentity()
{
  __asm { BR              X10 }
}

void sub_1B0DE4520()
{
  uint64_t v0;
  unint64_t v1;
  Swift::UInt32 v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (BYTE6(v1) < v3)
  {
    __break(1u);
    JUMPOUT(0x1B0DE45B4);
  }
  v4 = Data._Representation.subscript.getter();
  v6 = v5;
  Data.hash(into:)();
  outlined consume of Data._Representation(v4, v6);
  outlined consume of Data._Representation(v0, v1);
  Hasher._combine(_:)(v2);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.PreSharedKey.OfferedPSKs.PSKIdentity()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1B0DE4610()
{
  Swift::UInt32 v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (BYTE6(v1) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0DE46ACLL);
  }
  v4 = Data._Representation.subscript.getter();
  v6 = v5;
  Data.hash(into:)();
  outlined consume of Data._Representation(v4, v6);
  outlined consume of Data._Representation(v3, v1);
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Extension.PreSharedKey.OfferedPSKs.PSKIdentity(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  unsigned __int8 v4;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_DWORD *)(a2 + 24);
  specialized static ByteBuffer.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return v4 & (v2 == v3);
}

void Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1B0DE4748()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v0) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0DE47C8);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  return outlined consume of Data._Representation(v1, v0);
}

void Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry.hashValue.getter(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1B0DE4824()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v0) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0DE48B0);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v1, v0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hashValue.getter in conformance Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry()
{
  uint64_t *v0;

  Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry.hashValue.getter(*v0, v0[1]);
}

void protocol witness for Hashable.hash(into:) in conformance Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry()
{
  __asm { BR              X10 }
}

uint64_t sub_1B0DE490C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v2) < v1)
  {
    __break(1u);
    JUMPOUT(0x1B0DE498CLL);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  return outlined consume of Data._Representation(v0, v2);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1B0DE49E4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (BYTE6(v2) < v1)
  {
    __break(1u);
    JUMPOUT(0x1B0DE4A74);
  }
  v3 = Data._Representation.subscript.getter();
  v5 = v4;
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v2);
  return Hasher._finalize()();
}

uint64_t *ByteBuffer.readOfferedPSKs()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v0;
  v4 = *v0;
  v3 = v0[1];
  v5 = v0[2];
  outlined copy of Data._Representation(*v0, v3);
  specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)((uint64_t)v0);
  if (!v1)
  {
    v0 = v6;
    if (v6)
    {
      outlined consume of Data._Representation(v4, v3);
      v4 = *v2;
      v3 = v2[1];
      v5 = v2[2];
      outlined copy of Data._Representation(*v2, v3);
      specialized closure #1 in ByteBuffer.readVariableLengthVector<A, B>(lengthFieldType:_:)((uint64_t)v2);
      if (v9)
      {
        outlined consume of Data._Representation(v4, v3);
        return v0;
      }
      outlined consume of Data._Representation(*v2, v2[1]);
      swift_bridgeObjectRelease();
      v0 = 0;
    }
    else
    {
      outlined consume of Data._Representation(*v2, v2[1]);
    }
    *v2 = v4;
    v2[1] = v3;
    v2[2] = v5;
    return v0;
  }
  v7 = outlined consume of Data._Representation(*v0, v0[1]);
  *v0 = v4;
  v0[1] = v3;
  v0[2] = v5;
  swift_willThrow(v7);
  return v0;
}

_QWORD *readIdentities #1 (_:) in ByteBuffer.readOfferedPSKs()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;

  v1 = ByteBuffer.readPSKIdentity()();
  if (v0)
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = v1;
    v8 = v2;
    v9 = v3;
    v10 = v4;
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (v8 >> 60 != 15)
    {
      outlined copy of Data._Representation(v7, v8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v12 = v5[2];
      v11 = v5[3];
      if (v12 >= v11 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v5);
      v5[2] = v12 + 1;
      v13 = &v5[4 * v12];
      v13[4] = v7;
      v13[5] = v8;
      v13[6] = v9;
      *((_DWORD *)v13 + 14) = v10;
      outlined consume of ByteBuffer?(v7, v8);
      v7 = ByteBuffer.readPSKIdentity()();
      v8 = v14;
      v9 = v15;
      v10 = v16;
    }
  }
  return v5;
}

uint64_t ByteBuffer.readPSKIdentity()()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  outlined copy of Data._Representation(*v0, v1);
  specialized ByteBuffer.readInteger<A>(as:)();
  if ((v4 & 0x10000) == 0)
  {
    ByteBuffer.readSlice(length:)((unsigned __int16)v4);
    if (v5 >> 60 != 15)
      __asm { BR              X10 }
  }
  outlined consume of Data._Representation(*v0, v0[1]);
  *v0 = v2;
  v0[1] = v1;
  v0[2] = v3;
  return 0;
}

uint64_t sub_1B0DE4E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v8;

  if (__OFSUB__(BYTE6(v4), a3))
  {
    __break(1u);
    JUMPOUT(0x1B0DE5040);
  }
  v8 = v3;
  ByteBuffer.readSlice(length:)(BYTE6(v4) - a3);
  if (v6 >> 60 == 15)
  {
    __break(1u);
    JUMPOUT(0x1B0DE504CLL);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_1B0DE4EC0 + dword_1B0DE505C[v5]))(v8);
}

void readBinderEntries #1 (_:) in ByteBuffer.readOfferedPSKs()(uint64_t a1)
{
  if (!__OFADD__(*(_QWORD *)(a1 + 16), 1))
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x1B0DE5568);
}

unint64_t lazy protocol witness table accessor for type Extension.PreSharedKey and conformance Extension.PreSharedKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Extension.PreSharedKey and conformance Extension.PreSharedKey;
  if (!lazy protocol witness table cache variable for type Extension.PreSharedKey and conformance Extension.PreSharedKey)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Extension.PreSharedKey, &type metadata for Extension.PreSharedKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.PreSharedKey and conformance Extension.PreSharedKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Extension.PreSharedKey.OfferedPSKs and conformance Extension.PreSharedKey.OfferedPSKs()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Extension.PreSharedKey.OfferedPSKs and conformance Extension.PreSharedKey.OfferedPSKs;
  if (!lazy protocol witness table cache variable for type Extension.PreSharedKey.OfferedPSKs and conformance Extension.PreSharedKey.OfferedPSKs)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Extension.PreSharedKey.OfferedPSKs, &type metadata for Extension.PreSharedKey.OfferedPSKs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.PreSharedKey.OfferedPSKs and conformance Extension.PreSharedKey.OfferedPSKs);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Extension.PreSharedKey.OfferedPSKs.PSKIdentity and conformance Extension.PreSharedKey.OfferedPSKs.PSKIdentity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Extension.PreSharedKey.OfferedPSKs.PSKIdentity and conformance Extension.PreSharedKey.OfferedPSKs.PSKIdentity;
  if (!lazy protocol witness table cache variable for type Extension.PreSharedKey.OfferedPSKs.PSKIdentity and conformance Extension.PreSharedKey.OfferedPSKs.PSKIdentity)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Extension.PreSharedKey.OfferedPSKs.PSKIdentity, &type metadata for Extension.PreSharedKey.OfferedPSKs.PSKIdentity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.PreSharedKey.OfferedPSKs.PSKIdentity and conformance Extension.PreSharedKey.OfferedPSKs.PSKIdentity);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry and conformance Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry and conformance Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry;
  if (!lazy protocol witness table cache variable for type Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry and conformance Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry, &type metadata for Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry and conformance Extension.PreSharedKey.OfferedPSKs.PSKBinderEntry);
  }
  return result;
}

uint64_t destroy for Extension.PreSharedKey(uint64_t a1)
{
  return outlined consume of Extension.PreSharedKey(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for Extension.PreSharedKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Extension.PreSharedKey(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Extension.PreSharedKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Extension.PreSharedKey(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Extension.PreSharedKey(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Extension.PreSharedKey(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of Extension.PreSharedKey(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Extension.PreSharedKey(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Extension.PreSharedKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for Extension.PreSharedKey(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for Extension.PreSharedKey(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Extension.PreSharedKey()
{
  return &type metadata for Extension.PreSharedKey;
}

uint64_t destroy for Extension.PreSharedKey.OfferedPSKs()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for Extension.PreSharedKey.OfferedPSKs(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Extension.PreSharedKey.OfferedPSKs(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for Extension.PreSharedKey.OfferedPSKs(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Extension.PreSharedKey.OfferedPSKs(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Extension.PreSharedKey.OfferedPSKs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Extension.PreSharedKey.OfferedPSKs()
{
  return &type metadata for Extension.PreSharedKey.OfferedPSKs;
}

uint64_t initializeWithCopy for Extension.PreSharedKey.OfferedPSKs.PSKIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for Extension.PreSharedKey.OfferedPSKs.PSKIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy28_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Extension.PreSharedKey.OfferedPSKs.PSKIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for Extension.PreSharedKey.OfferedPSKs.PSKIdentity(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 28))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Extension.PreSharedKey.OfferedPSKs.PSKIdentity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 28) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

uint64_t PartialHandshakeResult.init(handshakeBytesToSend:newEncryptionLevel:sessionTicket:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;

  *a7 = a1;
  a7[1] = a2;
  a7[2] = a3;
  v11 = type metadata accessor for PartialHandshakeResult(0);
  result = outlined init with take of PartialHandshakeResult.NewEncryptionLevel?(a4, (uint64_t)a7 + *(int *)(v11 + 20));
  v13 = (_QWORD *)((char *)a7 + *(int *)(v11 + 24));
  *v13 = a5;
  v13[1] = a6;
  return result;
}

uint64_t outlined init with take of PartialHandshakeResult.NewEncryptionLevel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t PartialHandshakeResult.handshakeBytesToSend.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of ByteBuffer?(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t PartialHandshakeResult.handshakeBytesToSend.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t result;

  result = outlined consume of ByteBuffer?(*v3, v3[1]);
  *v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t PartialHandshakeResult.newEncryptionLevel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for PartialHandshakeResult(0) + 20);
  return outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(v3, a1);
}

uint64_t outlined init with copy of PartialHandshakeResult.NewEncryptionLevel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t PartialHandshakeResult.newEncryptionLevel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for PartialHandshakeResult(0) + 20);
  return outlined assign with take of PartialHandshakeResult.NewEncryptionLevel?(a1, v3);
}

uint64_t outlined assign with take of PartialHandshakeResult.NewEncryptionLevel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*PartialHandshakeResult.newEncryptionLevel.modify())()
{
  type metadata accessor for PartialHandshakeResult(0);
  return CertificateVerify.algorithm.getter;
}

uint64_t PartialHandshakeResult.sessionTicket.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for PartialHandshakeResult(0) + 24);
  v2 = *(_QWORD *)v1;
  outlined copy of ByteBuffer?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t PartialHandshakeResult.sessionTicket.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for PartialHandshakeResult(0) + 24);
  result = outlined consume of ByteBuffer?(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*PartialHandshakeResult.sessionTicket.modify())()
{
  type metadata accessor for PartialHandshakeResult(0);
  return CertificateVerify.algorithm.getter;
}

__n128 PartialHandshakeResult.init()@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  *(_OWORD *)a1 = xmmword_1B0DE7E90;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = type metadata accessor for PartialHandshakeResult(0);
  v3 = a1 + *(int *)(v2 + 20);
  v4 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  result = (__n128)xmmword_1B0DE7E90;
  *(_OWORD *)(a1 + *(int *)(v2 + 24)) = xmmword_1B0DE7E90;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PartialHandshakeResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    if (v7 >> 60 == 15)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      v9 = *a2;
      outlined copy of Data._Representation(*a2, a2[1]);
      *v4 = v9;
      v4[1] = v7;
    }
    v4[2] = a2[2];
    v10 = *(int *)(a3 + 20);
    v11 = (char *)v4 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        v17 = type metadata accessor for SymmetricKey();
        v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
        v18(v11, v12, v17);
        v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey));
        v18(&v11[*(int *)(v19 + 48)], &v12[*(int *)(v19 + 48)], v17);
      }
      else
      {
        v20 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v11, v12, v20);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v21 = *(int *)(a3 + 24);
    v22 = (char *)v4 + v21;
    v23 = (char *)a2 + v21;
    v24 = *((_QWORD *)v23 + 1);
    if (v24 >> 60 == 15)
    {
      *(_OWORD *)v22 = *(_OWORD *)v23;
    }
    else
    {
      v25 = *(_QWORD *)v23;
      outlined copy of Data._Representation(*(_QWORD *)v23, *((_QWORD *)v23 + 1));
      *(_QWORD *)v22 = v25;
      *((_QWORD *)v22 + 1) = v24;
    }
  }
  return v4;
}

uint64_t assignWithCopy for PartialHandshakeResult(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;

  v6 = a2[1];
  if (*(_QWORD *)(a1 + 8) >> 60 == 15)
  {
    if (v6 >> 60 == 15)
    {
      v7 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_OWORD *)a1 = v7;
      goto LABEL_10;
    }
    v9 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v6;
    goto LABEL_8;
  }
  if (v6 >> 60 != 15)
  {
    v10 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    v11 = *(_QWORD *)a1;
    v12 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v6;
    outlined consume of Data._Representation(v11, v12);
LABEL_8:
    v8 = a2[2];
    goto LABEL_9;
  }
  outlined destroy of ByteBuffer(a1);
  v8 = a2[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_9:
  *(_QWORD *)(a1 + 16) = v8;
LABEL_10:
  v13 = *(int *)(a3 + 20);
  v14 = (char *)(a1 + v13);
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        v22 = type metadata accessor for SymmetricKey();
        v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
        v23(v14, v15, v22);
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey));
        v23(&v14[*(int *)(v24 + 48)], &v15[*(int *)(v24 + 48)], v22);
      }
      else
      {
        v30 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v14, v15, v30);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_25;
    }
LABEL_17:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_25;
  }
  if (v20)
  {
    outlined destroy of PartialHandshakeResult.NewEncryptionLevel((uint64_t)v14);
    goto LABEL_17;
  }
  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of PartialHandshakeResult.NewEncryptionLevel((uint64_t)v14);
    v26 = swift_getEnumCaseMultiPayload();
    if (v26 == 2)
    {
      v40 = type metadata accessor for SymmetricKey();
      v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
      v41(v14, v15, v40);
      v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey));
      v41(&v14[*(int *)(v42 + 48)], &v15[*(int *)(v42 + 48)], v40);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (v26 == 1)
      {
        v27 = type metadata accessor for SymmetricKey();
        v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
        v28(v14, v15, v27);
        v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey));
        v28(&v14[*(int *)(v29 + 48)], &v15[*(int *)(v29 + 48)], v27);
      }
      else
      {
        v43 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v14, v15, v43);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_25:
  v31 = *(int *)(a3 + 24);
  v32 = (uint64_t *)(a1 + v31);
  v33 = (uint64_t *)((char *)a2 + v31);
  v34 = *(uint64_t *)((char *)a2 + v31 + 8);
  if (*(_QWORD *)(a1 + v31 + 8) >> 60 != 15)
  {
    if (v34 >> 60 != 15)
    {
      v36 = *v33;
      outlined copy of Data._Representation(v36, v34);
      v37 = *v32;
      v38 = v32[1];
      *v32 = v36;
      v32[1] = v34;
      outlined consume of Data._Representation(v37, v38);
      return a1;
    }
    outlined destroy of Data((uint64_t)v32);
    goto LABEL_30;
  }
  if (v34 >> 60 == 15)
  {
LABEL_30:
    *(_OWORD *)v32 = *(_OWORD *)v33;
    return a1;
  }
  v35 = *v33;
  outlined copy of Data._Representation(v35, v34);
  *v32 = v35;
  v32[1] = v34;
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CB0338] - 8) + 8))();
  return a1;
}

uint64_t initializeWithTake for PartialHandshakeResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 20);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for PartialHandshakeResult.NewEncryptionLevel(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      v13 = type metadata accessor for SymmetricKey();
      v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
      v14(v7, v8, v13);
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey));
      v14(&v7[*(int *)(v15 + 48)], &v8[*(int *)(v15 + 48)], v13);
    }
    else
    {
      v16 = type metadata accessor for SymmetricKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v7, v8, v16);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1B0DE66A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 11)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    v5 = ((4 * (_DWORD)v4) & 0xC) == 0;
    v6 = ((4 * v4) & 0xC | (v4 >> 2)) ^ 0xF;
    if (v5)
      return 0;
    else
      return v6;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v10);
  }
}

char *sub_1B0DE6728(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 11)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandshakeResult.NewEncryptionLevel?);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PartialHandshakeResult.NewEncryptionLevel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for SymmetricKey();
      v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey));
      v8((uint64_t *)((char *)a1 + *(int *)(v9 + 48)), (uint64_t *)((char *)a2 + *(int *)(v9 + 48)), v7);
    }
    else
    {
      v11 = type metadata accessor for SymmetricKey();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t assignWithCopy for PartialHandshakeResult.NewEncryptionLevel(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of PartialHandshakeResult.NewEncryptionLevel(a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      v5 = type metadata accessor for SymmetricKey();
      v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
      v6(a1, a2, v5);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey));
      v6(a1 + *(int *)(v7 + 48), a2 + *(int *)(v7 + 48), v5);
    }
    else
    {
      v8 = type metadata accessor for SymmetricKey();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for PartialHandshakeResult.NewEncryptionLevel(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    v5 = type metadata accessor for SymmetricKey();
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32);
    v6(a1, a2, v5);
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey));
    v6(a1 + *(int *)(v7 + 48), a2 + *(int *)(v7 + 48), v5);
  }
  else
  {
    v8 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for PartialHandshakeResult.NewEncryptionLevel(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of PartialHandshakeResult.NewEncryptionLevel(a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      v5 = type metadata accessor for SymmetricKey();
      v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32);
      v6(a1, a2, v5);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (clientSecret: SymmetricKey, serverSecret: SymmetricKey));
      v6(a1 + *(int *)(v7 + 48), a2 + *(int *)(v7 + 48), v5);
    }
    else
    {
      v8 = type metadata accessor for SymmetricKey();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

BOOL static Extension.SupportedVersions.__derived_enum_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) != 0)
    return (a4 & 1) != 0 && (unsigned __int16)a1 == (unsigned __int16)a3;
  else
    return (a4 & 1) == 0 && specialized static Array<A>.== infix(_:_:)(a1, a3);
}

uint64_t ByteBuffer.writeSupportedVersions(_:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int16 v7;
  _QWORD v8[6];

  v8[5] = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) != 0)
  {
    v7 = a1;
    v8[3] = MEMORY[0x1E0DEAC20];
    v8[4] = MEMORY[0x1E0CB1AA8];
    v8[0] = &v7;
    v8[1] = v8;
    __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E0DEAC20]);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    return 2;
  }
  else
  {
    outlined copy of Extension.ServerCertificateType(a1, 0);
    specialized ByteBuffer.writeVariableLengthVector<A>(lengthFieldType:_:)(v2);
    v5 = v4;
    outlined consume of Extension.SupportedVersions(a1, 0);
    return v5;
  }
}

void Extension.SupportedVersions.hash(into:)(uint64_t a1, uint64_t a2, char a3)
{
  Swift::UInt v4;
  Swift::UInt8 *v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;

  if ((a3 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a2);
    Hasher._combine(_:)(BYTE1(a2));
  }
  else
  {
    Hasher._combine(_:)(0);
    v4 = *(_QWORD *)(a2 + 16);
    Hasher._combine(_:)(v4);
    if (v4)
    {
      v5 = (Swift::UInt8 *)(a2 + 33);
      do
      {
        v6 = *(v5 - 1);
        v7 = *v5;
        v5 += 2;
        Hasher._combine(_:)(v6);
        Hasher._combine(_:)(v7);
        --v4;
      }
      while (v4);
    }
  }
}

Swift::Int Extension.SupportedVersions.hashValue.getter(uint64_t a1, char a2)
{
  char v3;
  _BYTE v5[72];

  v3 = a2 & 1;
  Hasher.init(_seed:)();
  Extension.SupportedVersions.hash(into:)((uint64_t)v5, a1, v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Extension.SupportedVersions()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  Extension.SupportedVersions.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Extension.SupportedVersions(uint64_t a1)
{
  uint64_t v1;

  Extension.SupportedVersions.hash(into:)(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Extension.SupportedVersions()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  Extension.SupportedVersions.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Extension.SupportedVersions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    return (v6 & 1) != 0 && (unsigned __int16)v4 == (unsigned __int16)v5;
  else
    return (v6 & 1) == 0 && specialized static Array<A>.== infix(_:_:)(v4, v5);
}

unint64_t lazy protocol witness table accessor for type Extension.SupportedVersions and conformance Extension.SupportedVersions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Extension.SupportedVersions and conformance Extension.SupportedVersions;
  if (!lazy protocol witness table cache variable for type Extension.SupportedVersions and conformance Extension.SupportedVersions)
  {
    result = MEMORY[0x1B5E111D8](&protocol conformance descriptor for Extension.SupportedVersions, &type metadata for Extension.SupportedVersions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Extension.SupportedVersions and conformance Extension.SupportedVersions);
  }
  return result;
}

ValueMetadata *type metadata accessor for Extension.SupportedVersions()
{
  return &type metadata for Extension.SupportedVersions;
}

ValueMetadata *type metadata accessor for SwiftTLSDefaultClock()
{
  return &type metadata for SwiftTLSDefaultClock;
}

void nwswifttls_get_encryption_level_cold_1()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_1B0D50000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Invalid encryption level", v0, 2u);
}

uint64_t DataProtocol.copyBytes<A>(to:from:)()
{
  return MEMORY[0x1E0CAE518]();
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return MEMORY[0x1E0CAE8A8]();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return MEMORY[0x1E0CAE8B8]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x1E0CAE8D0]();
}

uint64_t __DataStorage.init(length:)()
{
  return MEMORY[0x1E0CAE8D8]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x1E0CAE8F0]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x1E0CAE8F8]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x1E0CAE910]();
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x1E0CAEE50]();
}

uint64_t NSFastEnumerationIterator.next()()
{
  return MEMORY[0x1E0CAFB50]();
}

uint64_t type metadata accessor for NSFastEnumerationIterator()
{
  return MEMORY[0x1E0CAFB58]();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
  MEMORY[0x1E0CB0088]();
}

Swift::Void __swiftcall Data.InlineSlice.ensureUniqueReference()()
{
  MEMORY[0x1E0CB00F0]();
}

uint64_t Data._copyContents(initializing:)()
{
  return MEMORY[0x1E0CB0128]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x1E0CB0140]();
}

uint64_t Data._Representation.resetBytes(in:)()
{
  return MEMORY[0x1E0CB0158]();
}

uint64_t Data._Representation.replaceSubrange(_:with:count:)()
{
  return MEMORY[0x1E0CB0160]();
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return MEMORY[0x1E0CB0188]();
}

uint64_t Data._Representation.subscript.getter()
{
  return MEMORY[0x1E0CB01B0]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x1E0CB01F0]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t Data.hash(into:)()
{
  return MEMORY[0x1E0CB0240]();
}

uint64_t Data.append<A>(contentsOf:)()
{
  return MEMORY[0x1E0CB0288]();
}

uint64_t Data.append(_:)()
{
  return MEMORY[0x1E0CB0298]();
}

uint64_t type metadata accessor for Data.Iterator()
{
  return MEMORY[0x1E0CB02C0]();
}

uint64_t Data.init<A>(_:)()
{
  return MEMORY[0x1E0CB03A0]();
}

uint64_t Date.init(timeIntervalSinceReferenceDate:)()
{
  return MEMORY[0x1E0CB03B8]();
}

uint64_t Date.timeIntervalSinceReferenceDate.getter()
{
  return MEMORY[0x1E0CB03C0]();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return MEMORY[0x1E0CB05D8]();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return MEMORY[0x1E0CB0680]();
}

uint64_t static Date.< infix(_:_:)()
{
  return MEMORY[0x1E0CB06D8]();
}

uint64_t static Date.== infix(_:_:)()
{
  return MEMORY[0x1E0CB07C8]();
}

uint64_t Date.init()()
{
  return MEMORY[0x1E0CB0860]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x1E0CB0870]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x1E0DF2248]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t Curve25519.KeyAgreement.PrivateKey.init()()
{
  return MEMORY[0x1E0CA9240]();
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)()
{
  return MEMORY[0x1E0CA92A8]();
}

uint64_t dispatch thunk of HashFunction.finalize()()
{
  return MEMORY[0x1E0CA92B0]();
}

uint64_t static HashFunction.hash<A>(data:)()
{
  return MEMORY[0x1E0CA92B8]();
}

uint64_t HashFunction.update<A>(data:)()
{
  return MEMORY[0x1E0CA92C0]();
}

uint64_t dispatch thunk of HashFunction.init()()
{
  return MEMORY[0x1E0CA92C8]();
}

uint64_t type metadata accessor for SHA384Digest()
{
  return MEMORY[0x1E0CA9328]();
}

uint64_t type metadata accessor for SharedSecret()
{
  return MEMORY[0x1E0CA9388]();
}

uint64_t SymmetricKey.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x1E0CA93A0]();
}

uint64_t static SymmetricKey.== infix(_:_:)()
{
  return MEMORY[0x1E0CA93A8]();
}

uint64_t SymmetricKey.init<A>(data:)()
{
  return MEMORY[0x1E0CA93B0]();
}

uint64_t type metadata accessor for SymmetricKey()
{
  return MEMORY[0x1E0CA93C8]();
}

uint64_t type metadata accessor for HashedAuthenticationCode()
{
  return MEMORY[0x1E0CA9460]();
}

uint64_t static MessageAuthenticationCode.== infix<A>(_:_:)()
{
  return MEMORY[0x1E0CA9488]();
}

uint64_t static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)()
{
  return MEMORY[0x1E0CA9568]();
}

uint64_t static HKDF.extract<A>(inputKeyMaterial:salt:)()
{
  return MEMORY[0x1E0CA9570]();
}

uint64_t static HMAC.authenticationCode<A>(for:using:)()
{
  return MEMORY[0x1E0CA9588]();
}

uint64_t P256.Signing.ECDSASignature.init<A>(derRepresentation:)()
{
  return MEMORY[0x1E0CA9700]();
}

uint64_t type metadata accessor for P256.Signing.ECDSASignature()
{
  return MEMORY[0x1E0CA9718]();
}

uint64_t P256.Signing.PublicKey.isValidSignature<A>(_:for:)()
{
  return MEMORY[0x1E0CA9720]();
}

uint64_t P256.Signing.PublicKey.init<A>(derRepresentation:)()
{
  return MEMORY[0x1E0CA9730]();
}

uint64_t P256.Signing.PublicKey.rawRepresentation.getter()
{
  return MEMORY[0x1E0CA9738]();
}

uint64_t P256.Signing.PublicKey.init<A>(rawRepresentation:)()
{
  return MEMORY[0x1E0CA9740]();
}

uint64_t P256.Signing.PublicKey.init<A>(x963Representation:)()
{
  return MEMORY[0x1E0CA9750]();
}

uint64_t type metadata accessor for P256.Signing.PublicKey()
{
  return MEMORY[0x1E0CA9758]();
}

uint64_t P384.KeyAgreement.PrivateKey.init()()
{
  return MEMORY[0x1E0CA97C0]();
}

uint64_t dispatch thunk of static Digest.byteCount.getter()
{
  return MEMORY[0x1E0CA9900]();
}

uint64_t type metadata accessor for SHA384()
{
  return MEMORY[0x1E0CA9958]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x1E0DEA3C0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x1E0DEA5F8]();
}

uint64_t static String._fromUTF8Repairing(_:)()
{
  return MEMORY[0x1E0DEA6F0]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x1E0DEA758]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x1E0DEA800](a1._countAndFlagsBits, a1._object);
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x1E0DEA858]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x1E0DEA870]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x1E0DEA880]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x1E0DEA908]();
}

uint64_t String.init<A>(_:radix:uppercase:)()
{
  return MEMORY[0x1E0DEA9C0]();
}

uint64_t Sequence<>.contains(_:)()
{
  return MEMORY[0x1E0DEABA0]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x1E0CB1AC0]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x1E0DEAE28]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x1E0DEB560]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x1E0DF2278]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x1E0DF2290]();
}

uint64_t NSArray.makeIterator()()
{
  return MEMORY[0x1E0CB1FF0]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t UnsafeMutableRawBufferPointer.copyBytes<A>(from:)()
{
  return MEMORY[0x1E0DEBC60]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)()
{
  return MEMORY[0x1E0DEBD70]();
}

uint64_t dispatch thunk of BinaryInteger._lowWord.getter()
{
  return MEMORY[0x1E0DEBDF8]();
}

uint64_t dispatch thunk of BinaryInteger.bitWidth.getter()
{
  return MEMORY[0x1E0DEBE00]();
}

uint64_t dispatch thunk of static BinaryInteger.isSigned.getter()
{
  return MEMORY[0x1E0DEBE10]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(_:)()
{
  return MEMORY[0x1E0DEBE48]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1E0DEC250]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x1E0DEC2A8](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t dispatch thunk of static FixedWidthInteger.bitWidth.getter()
{
  return MEMORY[0x1E0DEC9F0]();
}

uint64_t dispatch thunk of FixedWidthInteger.bigEndian.getter()
{
  return MEMORY[0x1E0DECA48]();
}

uint64_t dispatch thunk of FixedWidthInteger.init(bigEndian:)()
{
  return MEMORY[0x1E0DECA50]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1E0DECBE0]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.zero.getter()
{
  return MEMORY[0x1E0DECC30]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x1E0DECDA0]();
}

uint64_t dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter()
{
  return MEMORY[0x1E0DECDA8]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)()
{
  return MEMORY[0x1E0DED5C0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)()
{
  return MEMORY[0x1E0DED9E8]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t Slice<>.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x1E0CB26A0]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1E0DEDEF8]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x1E0DEDF10](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
  MEMORY[0x1E0DEDF18](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt16 a1)
{
  MEMORY[0x1E0DEDF20](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
  MEMORY[0x1E0DEDF28](*(_QWORD *)&a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
  MEMORY[0x1E0DEDF30](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1E0DEDF40]();
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1E0C97D30](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

SecKeyRef SecCertificateCopyKey(SecCertificateRef certificate)
{
  return (SecKeyRef)MEMORY[0x1E0CD5F98](certificate);
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return (SecCertificateRef)MEMORY[0x1E0CD6010](allocator, data);
}

uint64_t SecKeyCopyPublicBytes()
{
  return MEMORY[0x1E0CD6310]();
}

uint64_t SecPolicyCreateSSLWithKeyUsage()
{
  return MEMORY[0x1E0CD6530]();
}

OSStatus SecTrustCreateWithCertificates(CFTypeRef certificates, CFTypeRef policies, SecTrustRef *trust)
{
  return MEMORY[0x1E0CD6698](certificates, policies, trust);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1E0C80C48]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1E0DEEA28]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

uint64_t cc_clear()
{
  return MEMORY[0x1E0C81868]();
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

uint64_t nw_array_append()
{
  return MEMORY[0x1E0CCEE90]();
}

uint64_t nw_array_create()
{
  return MEMORY[0x1E0CCEEA0]();
}

char *__cdecl nw_endpoint_copy_address_string(nw_endpoint_t endpoint)
{
  return (char *)MEMORY[0x1E0CCF340](endpoint);
}

uint64_t nw_endpoint_copy_parent_endpoint()
{
  return MEMORY[0x1E0CCF370]();
}

uint64_t nw_endpoint_copy_proxy_original_endpoint()
{
  return MEMORY[0x1E0CCF380]();
}

uint64_t nw_endpoint_get_bonjour_fullname()
{
  return MEMORY[0x1E0CCF3E0]();
}

const char *__cdecl nw_endpoint_get_hostname(nw_endpoint_t endpoint)
{
  return (const char *)MEMORY[0x1E0CCF410](endpoint);
}

uint64_t nw_endpoint_get_parent_endpoint_domain()
{
  return MEMORY[0x1E0CCF420]();
}

uint64_t nw_endpoint_get_srv_name()
{
  return MEMORY[0x1E0CCF438]();
}

nw_endpoint_type_t nw_endpoint_get_type(nw_endpoint_t endpoint)
{
  return MEMORY[0x1E0CCF440](endpoint);
}

uint64_t nw_frame_array_append()
{
  return MEMORY[0x1E0CCF4D8]();
}

uint64_t nw_frame_array_first()
{
  return MEMORY[0x1E0CCF4E8]();
}

uint64_t nw_frame_array_foreach()
{
  return MEMORY[0x1E0CCF4F0]();
}

uint64_t nw_frame_array_init()
{
  return MEMORY[0x1E0CCF4F8]();
}

uint64_t nw_frame_array_is_empty()
{
  return MEMORY[0x1E0CCF508]();
}

uint64_t nw_frame_array_remove()
{
  return MEMORY[0x1E0CCF520]();
}

uint64_t nw_frame_claim()
{
  return MEMORY[0x1E0CCF538]();
}

uint64_t nw_frame_collapse()
{
  return MEMORY[0x1E0CCF540]();
}

uint64_t nw_frame_finalize()
{
  return MEMORY[0x1E0CCF558]();
}

uint64_t nw_frame_unclaim()
{
  return MEMORY[0x1E0CCF5B0]();
}

uint64_t nw_frame_unclaimed_bytes()
{
  return MEMORY[0x1E0CCF5B8]();
}

nw_protocol_stack_t nw_parameters_copy_default_protocol_stack(nw_parameters_t parameters)
{
  return (nw_protocol_stack_t)MEMORY[0x1E0CCF8C8](parameters);
}

uint64_t nw_parameters_copy_protocol_options_legacy()
{
  return MEMORY[0x1E0CCF918]();
}

uint64_t nw_parameters_get_enable_tls_keylog()
{
  return MEMORY[0x1E0CCF9B8]();
}

uint64_t nw_parameters_get_server_mode()
{
  return MEMORY[0x1E0CCFA00]();
}

uint64_t nw_protocol_copy_quic_connection_definition()
{
  return MEMORY[0x1E0CCFEB0]();
}

uint64_t nw_protocol_copy_quic_stream_definition()
{
  return MEMORY[0x1E0CCFEC0]();
}

uint64_t nw_protocol_copy_swift_tls_definition()
{
  return MEMORY[0x1E0CCFED0]();
}

nw_protocol_definition_t nw_protocol_copy_tcp_definition(void)
{
  return (nw_protocol_definition_t)MEMORY[0x1E0CCFED8]();
}

uint64_t nw_protocol_definition_create_with_identifier()
{
  return MEMORY[0x1E0CCFEF8]();
}

BOOL nw_protocol_definition_is_equal(nw_protocol_definition_t definition1, nw_protocol_definition_t definition2)
{
  return MEMORY[0x1E0CCFF08](definition1, definition2);
}

uint64_t nw_protocol_definition_set_metadata_allocator()
{
  return MEMORY[0x1E0CCFF18]();
}

uint64_t nw_protocol_definition_set_options_allocator()
{
  return MEMORY[0x1E0CCFF20]();
}

uint64_t nw_protocol_definition_set_options_comparator()
{
  return MEMORY[0x1E0CCFF28]();
}

uint64_t nw_protocol_definition_set_options_equality_check()
{
  return MEMORY[0x1E0CCFF30]();
}

uint64_t nw_protocol_metadata_access_handle()
{
  return MEMORY[0x1E0CCFF58]();
}

uint64_t nw_protocol_metadata_create_singleton()
{
  return MEMORY[0x1E0CCFF60]();
}

uint64_t nw_protocol_options_access_handle()
{
  return MEMORY[0x1E0CCFF78]();
}

nw_protocol_definition_t nw_protocol_options_copy_definition(nw_protocol_options_t options)
{
  return (nw_protocol_definition_t)MEMORY[0x1E0CCFF80](options);
}

uint64_t nw_protocol_register()
{
  return MEMORY[0x1E0CCFF90]();
}

uint64_t nw_protocol_set_default_one_to_one_callbacks()
{
  return MEMORY[0x1E0CCFFB8]();
}

uint64_t nw_protocol_stack_copy_original_proxied_transport_protocol()
{
  return MEMORY[0x1E0CCFFD8]();
}

nw_protocol_options_t nw_protocol_stack_copy_transport_protocol(nw_protocol_stack_t stack)
{
  return (nw_protocol_options_t)MEMORY[0x1E0CCFFE0](stack);
}

sec_protocol_metadata_t nw_tls_copy_sec_protocol_metadata(nw_protocol_metadata_t metadata)
{
  return (sec_protocol_metadata_t)MEMORY[0x1E0CD03C0](metadata);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

uint64_t os_variant_allows_internal_security_policies()
{
  return MEMORY[0x1E0C849D8]();
}

uint64_t sec_protocol_options_contents_compare()
{
  return MEMORY[0x1E0CD7260]();
}

sec_trust_t sec_trust_create(SecTrustRef trust)
{
  return (sec_trust_t)MEMORY[0x1E0CD7370](trust);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1E0DEEC00]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1E0DEED08]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1E0DEED60]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x1E0DEED70]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1E0DEEE90]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_willThrow(void)
{
  return MEMORY[0x1E0DEEFC0]();
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
  MEMORY[0x1E0C85A10](dst, src);
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return MEMORY[0x1E0C85DF8](xarray, applier);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C85E00](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1E0C85E30](xarray);
}

const char *__cdecl xpc_array_get_string(xpc_object_t xarray, size_t index)
{
  return (const char *)MEMORY[0x1E0C85E70](xarray, index);
}

uint64_t xpc_array_get_uint64(xpc_object_t xarray, size_t index)
{
  return MEMORY[0x1E0C85E78](xarray, index);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1E0C85E90](xarray, index);
}

void xpc_array_set_string(xpc_object_t xarray, size_t index, const char *string)
{
  MEMORY[0x1E0C85ED0](xarray, index, string);
}

xpc_object_t xpc_copy(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1E0C860E8](object);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return MEMORY[0x1E0C867B8](xuint);
}

