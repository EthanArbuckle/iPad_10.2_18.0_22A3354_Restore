void Timestamp::Timestamp(Timestamp *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  int *v10;
  char *v11;
  unsigned __int128 v12;
  uint8_t buf[4];
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 1) = 0;
  v2 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = (char *)this + 8;
  v12 = 0uLL;
  if ((gettimeofday((timeval *)&v12, 0) & 0x80000000) == 0
    || !os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v3 = *v2;
    v4 = v2;
    if (*v2)
      goto LABEL_4;
LABEL_10:
    v7 = (char *)operator new(0x38uLL);
    *((_DWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 5) = 0;
    *((_QWORD *)v7 + 6) = 0;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v4;
    *v2 = v7;
    v8 = **(_QWORD **)this;
    v9 = (uint64_t *)v7;
    if (v8)
    {
      *(_QWORD *)this = v8;
      v9 = (uint64_t *)*v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 1), v9);
    ++*((_QWORD *)this + 2);
    goto LABEL_13;
  }
  v10 = __error();
  v11 = strerror(*v10);
  *(_DWORD *)buf = 136315138;
  v14 = v11;
  _os_log_error_impl(&dword_24B855000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to get current time. Error: %s\n", buf, 0xCu);
  v3 = *v2;
  v4 = v2;
  if (!*v2)
    goto LABEL_10;
LABEL_4:
  v5 = v3;
  while (1)
  {
    while (1)
    {
      v4 = (_QWORD *)v5;
      v6 = *(_DWORD *)(v5 + 32);
      if (v6 < 1)
        break;
      v5 = *v4;
      v2 = v4;
      if (!*v4)
        goto LABEL_10;
    }
    if ((v6 & 0x80000000) == 0)
      break;
    v5 = v4[1];
    if (!v5)
    {
      v2 = v4 + 1;
      goto LABEL_10;
    }
  }
  v7 = (char *)v4;
LABEL_13:
  *(_OWORD *)(v7 + 40) = v12;
}

void sub_24B856B1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_24B856B38(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, v2);
  _Unwind_Resume(a1);
}

void Timestamp::Timestamp(Timestamp *this, const Timestamp *a2)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

void sub_24B856B90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_24B856BE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *Timestamp::Timestamp(_QWORD *a1, _OWORD *a2, int a3)
{
  _QWORD *v6;
  char *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

{
  _QWORD *v6;
  char *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

__n128 Timestamp::set(uint64_t **a1, __n128 *a2, int a3)
{
  char *v6;
  uint64_t **v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  __n128 result;

  v7 = a1 + 1;
  v6 = (char *)a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3)
          break;
        v6 = *(char **)v8;
        v7 = (uint64_t **)v8;
        if (!*(_QWORD *)v8)
          goto LABEL_8;
      }
      if (v9 >= a3)
        break;
      v6 = (char *)*((_QWORD *)v8 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (char *)(a1 + 1);
LABEL_8:
    v10 = v8;
    v8 = (char *)operator new(0x38uLL);
    *((_DWORD *)v8 + 8) = a3;
    *((_QWORD *)v8 + 5) = 0;
    *((_QWORD *)v8 + 6) = 0;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v10;
    *v7 = (uint64_t *)v8;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  result = *a2;
  *(__n128 *)(v8 + 40) = *a2;
  return result;
}

_QWORD *Timestamp::Timestamp(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  _DWORD *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  *((_BYTE *)v7 + 24) = 1;
  a1[2] = 1;
  *((_QWORD *)v7 + 5) = a2;
  *((_QWORD *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

{
  _QWORD *v6;
  _DWORD *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  *((_BYTE *)v7 + 24) = 1;
  a1[2] = 1;
  *((_QWORD *)v7 + 5) = a2;
  *((_QWORD *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

uint64_t **Timestamp::Timestamp(uint64_t **a1, char *a2, char a3, int a4)
{
  const char *v5;
  uint64_t **v7;
  int *v8;
  char *v9;
  NSObject *v10;
  const char *v11;
  uint64_t *v12;
  uint64_t **v13;
  int v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  int *v19;
  char *v20;
  int *v21;
  char *v22;
  unsigned __int128 v23;
  tm v24;
  void *__p[4];
  uint8_t buf[4];
  char *v27;
  uint64_t v28;

  v5 = a2;
  v28 = *MEMORY[0x24BDAC8D0];
  a1[1] = 0;
  v7 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  __p[2] = (void *)0x11AAAAAAAAAA0053;
  *(_OWORD *)__p = *(_OWORD *)"%Y-%m-%d-%H-%M-%S";
  if ((a3 & 0x10) != 0)
  {
    HIBYTE(__p[2]) = 19;
    strcpy((char *)__p, "%Y.%m.%d_%H-%M-%S%z");
  }
  *((_QWORD *)&v23 + 1) = 0xAAAAAAAA00000000;
  memset(&v24, 0, sizeof(v24));
  if (a2[23] < 0)
    v5 = *(const char **)a2;
  if (strptime(v5, (const char *)__p, &v24))
  {
    v24.tm_isdst = -1;
    *(_QWORD *)&v23 = mktime(&v24);
    if ((_QWORD)v23 != -1)
      goto LABEL_15;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v19 = __error();
      v20 = strerror(*v19);
      *(_DWORD *)buf = 136315138;
      v27 = v20;
      _os_log_error_impl(&dword_24B855000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to convert to absolute time. Error: %s\n", buf, 0xCu);
      v23 = 0uLL;
      if ((gettimeofday((timeval *)&v23, 0) & 0x80000000) == 0)
        goto LABEL_15;
    }
    else
    {
      v23 = 0uLL;
      if ((gettimeofday((timeval *)&v23, 0) & 0x80000000) == 0)
        goto LABEL_15;
    }
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    v8 = __error();
    v9 = strerror(*v8);
    *(_DWORD *)buf = 136315138;
    v27 = v9;
    v10 = MEMORY[0x24BDACB70];
    v11 = "Failed to get current time after absolute time conversion failed. Error: %s\n";
    goto LABEL_32;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Failed to convert time from string format\n", buf, 2u);
  }
  v23 = 0uLL;
  if (gettimeofday((timeval *)&v23, 0) < 0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v21 = __error();
    v22 = strerror(*v21);
    *(_DWORD *)buf = 136315138;
    v27 = v22;
    v10 = MEMORY[0x24BDACB70];
    v11 = "Failed to get current time after conversion failure. Error: %s\n";
LABEL_32:
    _os_log_error_impl(&dword_24B855000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0xCu);
  }
LABEL_15:
  v12 = *v7;
  v13 = v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v13 = (uint64_t **)v12;
        v14 = *((_DWORD *)v12 + 8);
        if (v14 <= a4)
          break;
        v12 = *v13;
        v7 = v13;
        if (!*v13)
          goto LABEL_22;
      }
      if (v14 >= a4)
        break;
      v12 = v13[1];
      if (!v12)
      {
        v7 = v13 + 1;
        goto LABEL_22;
      }
    }
    *(_OWORD *)(v13 + 5) = v23;
    if (SHIBYTE(__p[2]) < 0)
      goto LABEL_25;
  }
  else
  {
LABEL_22:
    v15 = (char *)operator new(0x38uLL);
    *((_DWORD *)v15 + 8) = a4;
    *((_QWORD *)v15 + 5) = 0;
    *((_QWORD *)v15 + 6) = 0;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = v13;
    *v7 = (uint64_t *)v15;
    v16 = (uint64_t *)**a1;
    v17 = (uint64_t *)v15;
    if (v16)
    {
      *a1 = v16;
      v17 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    *(_OWORD *)(v15 + 40) = v23;
    if (SHIBYTE(__p[2]) < 0)
LABEL_25:
      operator delete(__p[0]);
  }
  return a1;
}

void sub_24B8571E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v24, *(_QWORD **)(v24 + 8));
  _Unwind_Resume(a1);
}

uint64_t Timestamp::get(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;

  *a2 = 0;
  a2[1] = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 < a3;
    if (v7 >= a3)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 || *(_DWORD *)(v6 + 32) > a3)
    return 0;
  *(_OWORD *)a2 = *(_OWORD *)(v6 + 40);
  return 1;
}

uint64_t Timestamp::now(timeval *this, timeval *a2)
{
  return gettimeofday(this, 0);
}

uint64_t Timestamp::asString@<X0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, _BYTE *a4@<X8>)
{
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t *v15;
  time_t v16;
  __int128 v17;
  const char *v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  const std::locale::facet *v22;
  size_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  tm v31;
  time_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *__p[2];
  __int128 v39;
  __int128 v40;
  _OWORD v41[9];
  unint64_t v42;
  std::locale v43;
  char __s[16];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v42 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v41[7] = v8;
  v41[8] = v8;
  v41[5] = v8;
  v41[6] = v8;
  v41[3] = v8;
  v41[4] = v8;
  v41[1] = v8;
  v41[2] = v8;
  v40 = v8;
  v41[0] = v8;
  *(_OWORD *)__p = v8;
  v39 = v8;
  v36 = v8;
  v37 = v8;
  v34 = v8;
  v35 = v8;
  v33 = v8;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v33);
  v11 = *(_QWORD *)(a1 + 8);
  v10 = a1 + 8;
  v9 = v11;
  if (!v11)
    goto LABEL_11;
  v12 = v10;
  do
  {
    v13 = *(_DWORD *)(v9 + 32);
    v14 = v13 < a2;
    if (v13 >= a2)
      v15 = (uint64_t *)v9;
    else
      v15 = (uint64_t *)(v9 + 8);
    if (!v14)
      v12 = v9;
    v9 = *v15;
  }
  while (*v15);
  if (v12 != v10 && *(_DWORD *)(v12 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v12 + 40);
    if ((a3 & 0x11) != 0)
    {
LABEL_12:
      v31.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
      v32 = v16;
      *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v31.tm_mon = v17;
      *(_OWORD *)&v31.tm_isdst = v17;
      *(_OWORD *)&v31.tm_sec = v17;
      localtime_r(&v32, &v31);
      v46 = 0u;
      v47 = 0u;
      *(_OWORD *)__s = 0u;
      v45 = 0u;
      if ((a3 & 0x10) != 0)
        v18 = "%Y.%m.%d_%H-%M-%S%z";
      else
        v18 = "%Y-%m-%d-%H-%M-%S";
      strftime(__s, 0x40uLL, v18, &v31);
      v19 = strlen(__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)__s, v19);
      if ((a3 & 8) != 0)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"-", 1);
        v20 = v34;
        v21 = (char *)&v34 + *(_QWORD *)(v34 - 24);
        if (*((_DWORD *)v21 + 36) == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&v34 + *(_QWORD *)(v34 - 24)));
          v22 = std::locale::use_facet(&v43, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 32);
          std::locale::~locale(&v43);
          v20 = v34;
        }
        *((_DWORD *)v21 + 36) = 48;
        *(_QWORD *)((char *)&v35 + *(_QWORD *)(v20 - 24) + 8) = 3;
        std::ostream::operator<<();
      }
      goto LABEL_23;
    }
  }
  else
  {
LABEL_11:
    v16 = 0;
    if ((a3 & 0x11) != 0)
      goto LABEL_12;
  }
  std::ostream::operator<<();
  if ((a3 & 4) != 0 || (a3 & 8) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)".", 1);
    std::ostream::operator<<();
  }
LABEL_23:
  if ((BYTE8(v40) & 0x10) != 0)
  {
    v24 = v40;
    if ((unint64_t)v40 < *((_QWORD *)&v37 + 1))
    {
      *(_QWORD *)&v40 = *((_QWORD *)&v37 + 1);
      v24 = *((_QWORD *)&v37 + 1);
    }
    v25 = (const void *)v37;
    v23 = v24 - v37;
    if ((unint64_t)(v24 - v37) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_40;
  }
  else
  {
    if ((BYTE8(v40) & 8) == 0)
    {
      v23 = 0;
      a4[23] = 0;
      goto LABEL_36;
    }
    v25 = (const void *)*((_QWORD *)&v35 + 1);
    v23 = *((_QWORD *)&v36 + 1) - *((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v36 + 1) - *((_QWORD *)&v35 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_40:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    v28 = operator new(v26 + 1);
    *((_QWORD *)a4 + 1) = v23;
    *((_QWORD *)a4 + 2) = v27 | 0x8000000000000000;
    *(_QWORD *)a4 = v28;
    a4 = v28;
    goto LABEL_35;
  }
  a4[23] = v23;
  if (v23)
LABEL_35:
    memmove(a4, v25, v23);
LABEL_36:
  a4[v23] = 0;
  *(_QWORD *)&v33 = *MEMORY[0x24BEDB7F0];
  v29 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v33 + *(_QWORD *)(v33 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v34 = v29;
  *((_QWORD *)&v34 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v39) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x24BD29B5C](v41);
}

void sub_24B857630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B857644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::locale::~locale((std::locale *)(v9 - 136));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B857660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B857678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B85768C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_24B8577A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x24BD29B5C](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x24BD29B5C](a1 + 128);
  return a1;
}

uint64_t *Timestamp::convert(uint64_t a1)
{
  uint64_t *v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t **v5;
  int v6;
  uint64_t **v7;
  uint64_t *v8;
  std::string __p;
  uint64_t *v11[3];

  memset(v11, 170, sizeof(v11));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  Timestamp::Timestamp(v11, (char *)&__p, 9, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v1 = v11[1];
    if (!v11[1])
    {
LABEL_18:
      v8 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    v1 = v11[1];
    if (!v11[1])
      goto LABEL_18;
  }
  v2 = &v11[1];
  v3 = v1;
  do
  {
    v4 = (uint64_t **)v3;
    v5 = v2;
    v6 = *((_DWORD *)v3 + 8);
    if (v6 >= 0)
      v2 = (uint64_t **)v3;
    else
      ++v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v2 == &v11[1])
    goto LABEL_18;
  v7 = v6 >= 0 ? v4 : v5;
  if (*((int *)v7 + 8) > 0)
    goto LABEL_18;
  if (v6 < 0)
    v4 = v5;
  v8 = v4[5];
LABEL_19:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v11, v1);
  return v8;
}

void sub_24B85795C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_251CB7CB0, MEMORY[0x24BEDAAF0]);
}

void sub_24B8579C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

uint64_t *std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t **v13;
  uint64_t **v14;
  int v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    do
    {
      v7 = *((_DWORD *)v4 + 8);
      v8 = (uint64_t *)v5[1];
      v9 = v6;
      if ((uint64_t *)*v5 == v6)
        goto LABEL_10;
      v10 = v5[1];
      v11 = v6;
      if (v8)
      {
        do
        {
          v9 = (uint64_t *)v10;
          v10 = *(_QWORD *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      if (*((_DWORD *)v9 + 8) < v7)
      {
LABEL_10:
        if (v8)
          v13 = (uint64_t **)v9;
        else
          v13 = (uint64_t **)v6;
        if (v8)
          v14 = (uint64_t **)(v9 + 1);
        else
          v14 = (uint64_t **)v6;
        if (*v14)
          goto LABEL_29;
      }
      else
      {
        v14 = (uint64_t **)v6;
        v13 = (uint64_t **)v6;
        if (v8)
        {
          while (1)
          {
            while (1)
            {
              v13 = (uint64_t **)v8;
              v15 = *((_DWORD *)v8 + 8);
              if (v15 <= v7)
                break;
              v8 = *v13;
              v14 = v13;
              if (!*v13)
                goto LABEL_25;
            }
            if (v15 >= v7)
              goto LABEL_29;
            v8 = v13[1];
            if (!v8)
            {
              v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_25:
      v16 = operator new(0x38uLL);
      v17 = v4[6];
      v16[2] = *((_OWORD *)v4 + 2);
      *((_QWORD *)v16 + 6) = v17;
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = v13;
      *v14 = (uint64_t *)v16;
      v18 = *(_QWORD *)*v5;
      if (v18)
      {
        *v5 = v18;
        v19 = *v14;
      }
      else
      {
        v19 = (uint64_t *)v16;
      }
      result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v19);
      ++v5[2];
LABEL_29:
      v20 = (_QWORD *)v4[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v4[2];
          v12 = *v21 == (_QWORD)v4;
          v4 = v21;
        }
        while (!v12);
      }
      v4 = v21;
    }
    while (v21 != a3);
  }
  return result;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _QWORD v13[2];
  std::locale v14;

  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x24BD29A0C](v13, a1);
  if (LOBYTE(v13[0]))
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x24BD29A18](v13);
  return a1;
}

void sub_24B857F28(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x24BD29A18](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x24B857F08);
}

void sub_24B857F70(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[3];

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      memset(__b, 170, sizeof(__b));
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        __b[2] = (void *)(v15 | 0x8000000000000000);
        __b[0] = v13;
      }
      else
      {
        HIBYTE(__b[2]) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (SHIBYTE(__b[2]) >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(__b[2]) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_24B858118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void metric::sendCoreAnalyticsEvent(const void **a1, xpc_object_t *a2)
{
  int v2;
  size_t v3;
  unint64_t v4;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;
  unsigned __int8 v12;
  NSObject *v13;
  void **v14;
  xpc_object_t object;
  void *__p[4];
  uint8_t buf[4];
  void **v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = (size_t)a1[1];
  v4 = v3 + 20;
  memset(__p, 170, 24);
  if (v3 + 20 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    v10 = (char *)operator new(v8 + 1);
    __p[1] = (void *)(v3 + 20);
    __p[2] = (void *)(v9 | 0x8000000000000000);
    __p[0] = v10;
    v7 = v10 + 20;
    *((_DWORD *)v10 + 4) = 779710063;
    *(_OWORD *)v10 = *(_OWORD *)"com.apple.Telephony.";
  }
  else
  {
    HIDWORD(__p[2]) = 0;
    HIBYTE(__p[2]) = v3 + 20;
    v7 = (char *)&__p[2] + 4;
    LODWORD(__p[2]) = 779710063;
    *(_OWORD *)__p = *(_OWORD *)"com.apple.Telephony.";
    if (!v3)
      goto LABEL_15;
  }
  if (v2 >= 0)
    v11 = a1;
  else
    v11 = *a1;
  memmove(v7, v11, v3);
LABEL_15:
  v7[v3] = 0;
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v13 = qword_2579B8A80;
    if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_DEFAULT))
      goto LABEL_21;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v13 = qword_2579B8A80;
    if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_DEFAULT))
      goto LABEL_21;
  }
  v14 = __p;
  if (SHIBYTE(__p[2]) < 0)
    v14 = (void **)__p[0];
  *(_DWORD *)buf = 136315138;
  v18 = v14;
  _os_log_impl(&dword_24B855000, v13, OS_LOG_TYPE_DEFAULT, "Sending CoreAnalytics event: %s", buf, 0xCu);
LABEL_21:
  object = *a2;
  if (*a2)
    xpc_retain(*a2);
  else
    object = xpc_null_create();
  analytics_send_event_lazy();
  xpc_release(object);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_24B8583EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

xpc_object_t ___ZN6metric22sendCoreAnalyticsEventENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke(uint64_t a1)
{
  xpc_object_t v1;
  xpc_object_t v2;

  v1 = *(xpc_object_t *)(a1 + 32);
  if (v1)
    xpc_retain(*(xpc_object_t *)(a1 + 32));
  else
    v1 = xpc_null_create();
  v2 = xpc_null_create();
  xpc_release(v2);
  return v1;
}

void sub_24B85847C(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
}

char *ABMGetRootVersionString@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_24B950490;
  strcpy(result, "AppleBasebandServices_Manager-1180");
  return result;
}

uint64_t hasBasebandEntitlement(xpc_object_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  xpc_connection_t remote_connection;
  xpc_object_t v8;
  __int128 v9;
  void *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  uint64_t v13;
  uint64_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  void *v20;
  xpc_object_t v21;
  size_t count;
  size_t v23;
  size_t v24;
  xpc_object_t v25;
  int v26;
  void *v27;
  void **v28;
  int v29;
  size_t v30;
  BOOL v31;
  xpc_object_t value;
  xpc_object_t v33;
  size_t v34;
  size_t v35;
  xpc_object_t v36;
  int v37;
  void *v38;
  void **v39;
  int v40;
  size_t v41;
  xpc_object_t v43;
  char v44;
  xpc_object_t object;
  xpc_object_t v46;
  void *v47[3];
  xpc_object_t v48;
  __int128 v49;
  __int128 v50;
  void *__p;
  uint64_t v52;
  uint64_t v53;

  v4 = MEMORY[0x24BD2A468](*a1);
  v5 = MEMORY[0x24BDACFA0];
  if (v4 == MEMORY[0x24BDACFA0])
  {
    remote_connection = xpc_dictionary_get_remote_connection(*a1);
    if (remote_connection)
    {
      v8 = remote_connection;
      xpc_retain(remote_connection);
    }
    else
    {
      v8 = xpc_null_create();
    }
    if (MEMORY[0x24BD2A468](v8) != MEMORY[0x24BDACF88])
    {
      v6 = 0;
LABEL_99:
      xpc_release(v8);
      return v6;
    }
    *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v49 = v9;
    v50 = v9;
    xpc_connection_get_audit_token();
    v10 = (void *)xpc_copy_entitlement_for_token();
    if (v10 || (v10 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x24BD2A468](v10) == v5)
      {
        xpc_retain(v10);
        v11 = v10;
      }
      else
      {
        v11 = xpc_null_create();
      }
    }
    else
    {
      v11 = xpc_null_create();
      v10 = 0;
    }
    xpc_release(v10);
    v12 = xpc_null_create();
    v13 = MEMORY[0x24BD2A468](v11);
    v14 = MEMORY[0x24BDACF78];
    if (v13 != v5)
    {
LABEL_23:
      v46 = v12;
      if (MEMORY[0x24BD2A468](v12) != v14)
      {
        v6 = 0;
LABEL_41:
        if ((a2 & 1) == 0)
        {
          if (MEMORY[0x24BD2A468](v11) == v5)
          {
            value = xpc_dictionary_get_value(v11, (const char *)kKeyEntitlementBasebanddAllow);
            v33 = value;
            __p = value;
            if (value)
            {
              xpc_retain(value);
            }
            else
            {
              v33 = xpc_null_create();
              __p = v33;
            }
            if (MEMORY[0x24BD2A468](v33) == MEMORY[0x24BDACFE0])
            {
              v6 = 0;
            }
            else
            {
              v6 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
              v33 = __p;
            }
            xpc_release(v33);
          }
          else
          {
            v6 = 0;
          }
        }
LABEL_98:
        xpc_release(v12);
        xpc_release(v11);
        goto LABEL_99;
      }
      if (v12)
      {
        xpc_retain(v12);
        v19 = v12;
      }
      else
      {
        v19 = xpc_null_create();
        if (!v19)
        {
          v19 = xpc_null_create();
          v20 = 0;
LABEL_29:
          xpc_release(v20);
          if (v12)
          {
            xpc_retain(v12);
            v21 = v12;
          }
          else
          {
            v21 = xpc_null_create();
          }
          v43 = v11;
          if (MEMORY[0x24BD2A468](v12) == v14)
          {
            count = xpc_array_get_count(v12);
            if (v21)
              goto LABEL_34;
          }
          else
          {
            count = 0;
            if (v21)
            {
LABEL_34:
              xpc_retain(v21);
              object = v21;
              goto LABEL_37;
            }
          }
          object = xpc_null_create();
LABEL_37:
          xpc_release(v21);
          if (!count && v19 == object)
          {
            v44 = 0;
LABEL_40:
            xpc_release(object);
            xpc_release(v19);
            v11 = v43;
            v6 = v44 & 1;
            if ((v44 & 1) != 0)
              goto LABEL_98;
            goto LABEL_41;
          }
          if ((a2 & 1) != 0)
          {
            v44 = 0;
            v23 = 0;
            v24 = count - 1;
            while (1)
            {
              v48 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
              v25 = xpc_array_get_value(v19, v23);
              v48 = v25;
              if (v25)
                xpc_retain(v25);
              else
                v48 = xpc_null_create();
              memset(v47, 170, sizeof(v47));
              __p = 0;
              v52 = 0;
              v53 = 0;
              xpc::dyn_cast_or_default();
              if (SHIBYTE(v53) < 0)
                operator delete(__p);
              v26 = SHIBYTE(v47[2]);
              v27 = SHIBYTE(v47[2]) >= 0 ? (void *)HIBYTE(v47[2]) : v47[1];
              if (v27 != (void *)strlen((const char *)kBasebandXpcRestricted))
                break;
              v28 = SHIBYTE(v47[2]) >= 0 ? v47 : (void **)v47[0];
              if (memcmp(v28, (const void *)kBasebandXpcRestricted, (size_t)v27))
                break;
              v29 = 0;
              v44 = 1;
              if (v26 < 0)
                goto LABEL_60;
LABEL_61:
              xpc_release(v48);
              v12 = v46;
              if (v29)
              {
                v30 = v23 + 1;
                v31 = v24 == v23++;
                if (!v31)
                  continue;
                v23 = v30;
                if (v19 != object)
                  continue;
              }
              goto LABEL_40;
            }
            v29 = 1;
            if ((v26 & 0x80000000) == 0)
              goto LABEL_61;
LABEL_60:
            operator delete(v47[0]);
            goto LABEL_61;
          }
          v44 = 0;
          v34 = 0;
          v35 = count - 1;
          while (1)
          {
            v48 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
            v36 = xpc_array_get_value(v19, v34);
            v48 = v36;
            if (v36)
              xpc_retain(v36);
            else
              v48 = xpc_null_create();
            memset(v47, 170, sizeof(v47));
            __p = 0;
            v52 = 0;
            v53 = 0;
            xpc::dyn_cast_or_default();
            if (SHIBYTE(v53) < 0)
              operator delete(__p);
            v37 = SHIBYTE(v47[2]);
            v38 = SHIBYTE(v47[2]) >= 0 ? (void *)HIBYTE(v47[2]) : v47[1];
            if (v38 != (void *)strlen((const char *)kBasebandXpc))
              break;
            v39 = SHIBYTE(v47[2]) >= 0 ? v47 : (void **)v47[0];
            if (memcmp(v39, (const void *)kBasebandXpc, (size_t)v38))
              break;
            v40 = 0;
            v44 = 1;
            if (v37 < 0)
              goto LABEL_85;
LABEL_86:
            xpc_release(v48);
            v12 = v46;
            if (v40)
            {
              v41 = v34 + 1;
              v31 = v35 == v34++;
              if (!v31)
                continue;
              v34 = v41;
              if (v19 != object)
                continue;
            }
            goto LABEL_40;
          }
          v40 = 1;
          if ((v37 & 0x80000000) == 0)
            goto LABEL_86;
LABEL_85:
          operator delete(v47[0]);
          goto LABEL_86;
        }
      }
      xpc_retain(v19);
      v20 = v19;
      goto LABEL_29;
    }
    v15 = xpc_dictionary_get_value(v11, (const char *)kKeyEntitlementFineGrained);
    v16 = v15;
    if (v15)
    {
      xpc_retain(v15);
    }
    else
    {
      v16 = xpc_null_create();
      if (!v16)
      {
        v17 = xpc_null_create();
        v16 = 0;
LABEL_22:
        xpc_release(v16);
        v18 = xpc_null_create();
        xpc_release(v12);
        xpc_release(v18);
        v12 = v17;
        goto LABEL_23;
      }
    }
    if (MEMORY[0x24BD2A468](v16) == v14)
    {
      xpc_retain(v16);
      v17 = v16;
    }
    else
    {
      v17 = xpc_null_create();
    }
    goto LABEL_22;
  }
  return 0;
}

void sub_24B858AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,xpc_object_t object,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;

  xpc_release(object);
  xpc_release(a12);
  xpc_release(v28);
  xpc_release(v27);
  _Unwind_Resume(a1);
}

uint64_t data::TransportService::ThrottlingConfig::asString@<X0>(data::TransportService::ThrottlingConfig *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  _QWORD *v11;
  const char *v12;
  const char *v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *__p[2];
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29 = 0xAAAAAAAAAAAAAAAALL;
  v31 = v4;
  v39 = v4;
  v38 = v4;
  v37 = v4;
  v36 = v4;
  v35 = v4;
  v34 = v4;
  v33 = v4;
  v32 = v4;
  *(_OWORD *)__p = v4;
  v28 = v4;
  v25 = v4;
  v26 = v4;
  v23 = v4;
  v24 = v4;
  v5 = MEMORY[0x24BEDB870];
  v6 = MEMORY[0x24BEDB870] + 64;
  v30 = MEMORY[0x24BEDB870] + 64;
  v7 = (uint64_t *)MEMORY[0x24BEDB800];
  v8 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v22 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v22 + *(_QWORD *)(v22 - 24));
  std::ios_base::init(v9, &v23);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v22 = v5 + 24;
  v30 = v6;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v23 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v28 = 0u;
  LODWORD(v29) = 16;
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"enabled ", 8);
  v12 = "???";
  if (!*(_DWORD *)this)
    v12 = "Disabled";
  if (*(_DWORD *)this == 1)
    v13 = "Enabled";
  else
    v13 = v12;
  v14 = strlen(v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
  if (*(_DWORD *)this == 1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)", timeout ", 10);
    std::ostream::operator<<();
  }
  if ((v29 & 0x10) != 0)
  {
    v16 = *((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1) < (unint64_t)v26)
    {
      *((_QWORD *)&v28 + 1) = v26;
      v16 = v26;
    }
    v17 = (const void *)*((_QWORD *)&v25 + 1);
    v15 = v16 - *((_QWORD *)&v25 + 1);
    if ((unint64_t)(v16 - *((_QWORD *)&v25 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_25;
  }
  else
  {
    if ((v29 & 8) == 0)
    {
      v15 = 0;
      a2[23] = 0;
      goto LABEL_21;
    }
    v17 = (const void *)v24;
    v15 = v25 - v24;
    if ((_QWORD)v25 - (_QWORD)v24 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_25:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v20 = operator new(v18 + 1);
    *((_QWORD *)a2 + 1) = v15;
    *((_QWORD *)a2 + 2) = v19 | 0x8000000000000000;
    *(_QWORD *)a2 = v20;
    a2 = v20;
    goto LABEL_20;
  }
  a2[23] = v15;
  if (v15)
LABEL_20:
    memmove(a2, v17, v15);
LABEL_21:
  a2[v15] = 0;
  v22 = *v7;
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = v7[3];
  *(_QWORD *)&v23 = v10 + 16;
  if (SBYTE7(v28) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x24BD29B5C](&v30);
}

void sub_24B858ECC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x24BD29B5C](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24BD29B5C](a1 + 112);
  return a1;
}

_QWORD *data::TransportService::TransportService(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

uint64_t data::TransportService::TransportService(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  data::TransportService::State::create((capabilities::abs *)&v10, a1);
  v6 = v11;
  if (!v11)
    return a1;
  v7 = (unint64_t *)&v11->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  data::TransportService::State::create((capabilities::abs *)&v10, a1);
  v6 = v11;
  if (!v11)
    return a1;
  v7 = (unint64_t *)&v11->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_24B859048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void data::TransportService::State::create(capabilities::abs *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (capabilities::abs::supportsDataTransportService(a1))
  {
    v4 = operator new(0xA8uLL);
    v5 = (uint64_t)v4;
    v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    v13 = *(_QWORD *)a1;
    v14 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    data::TransportService::State::State((uint64_t)v4, &v13);
    *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
    std::shared_ptr<data::TransportService::State>::shared_ptr[abi:ne180100]<data::TransportService::State,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1},void>(&v15, v5);
    ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v15);
    v9 = v15;
    v15 = 0uLL;
    *(_OWORD *)a2 = v9;
    v10 = v14;
    if (v14)
    {
      v11 = (unint64_t *)&v14->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    data::TransportService::State::init(*(data::TransportService::State **)a2);
  }
}

void sub_24B859138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void sub_24B859164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v10;
  void *v11;

  v11 = v10;
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v11);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void sub_24B85918C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_24B8591A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_24B8592BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void data::TransportService::enterLowPower(data::TransportService *this)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 0x40000000;
    v3[2] = ___ZN4data16TransportService5State13enterLowPowerEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_20;
    v3[4] = v1;
    v4 = v3;
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_21;
    block[4] = v1 + 72;
    block[5] = &v4;
    v2 = *(NSObject **)(v1 + 88);
    if (*(_QWORD *)(v1 + 96))
      dispatch_async_and_wait(v2, block);
    else
      dispatch_sync(v2, block);
  }
}

void data::TransportService::exitLowPower(data::TransportService *this)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2[0] = MEMORY[0x24BDAC760];
    v2[1] = 0x40000000;
    v2[2] = ___ZN4data16TransportService5State12exitLowPowerEv_block_invoke;
    v2[3] = &__block_descriptor_tmp_22;
    v2[4] = v1;
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
  }
}

void data::TransportService::setConfig(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  v2 = *a1;
  if (*a1)
  {
    v3 = *a2;
    v4[0] = MEMORY[0x24BDAC760];
    v4[1] = 0x40000000;
    v4[2] = ___ZN4data16TransportService5State9setConfigENS0_16ThrottlingConfigE_block_invoke;
    v4[3] = &__block_descriptor_tmp_25;
    v4[4] = v2;
    v4[5] = v3;
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v4);
  }
}

void data::TransportService::dumpState(data::TransportService *this)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 0x40000000;
    v3[2] = ___ZNK4data16TransportService5State9dumpStateEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_26;
    v3[4] = v1;
    v4 = v3;
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_21;
    block[4] = v1 + 72;
    block[5] = &v4;
    v2 = *(NSObject **)(v1 + 88);
    if (*(_QWORD *)(v1 + 96))
      dispatch_async_and_wait(v2, block);
    else
      dispatch_sync(v2, block);
  }
}

void data::TransportService::unblockThrottling(data::TransportService *this)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 0x40000000;
    v3[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_27;
    v3[4] = v1;
    v4 = v3;
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_21;
    block[4] = v1 + 72;
    block[5] = &v4;
    v2 = *(NSObject **)(v1 + 88);
    if (*(_QWORD *)(v1 + 96))
      dispatch_async_and_wait(v2, block);
    else
      dispatch_sync(v2, block);
  }
}

uint64_t ctu::PthreadMutexGuardPolicy<sys::UIObserver>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void data::TransportService::State::init(data::TransportService::State *this)
{
  NSObject *v2;
  uint64_t v3;
  sys::UIObserver *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  void (*v31)(uint8_t *, uint8_t *, uint64_t);
  void (*v32)(uint64_t, _WORD *, unsigned int);
  unint64_t *p_shared_weak_owners;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t **v43;
  __int128 v44;
  pthread_mutex_t *v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  uint64_t *v51;
  uint64_t **v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t *v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t *v71;
  uint64_t i;
  uint64_t v73;
  unsigned int v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  int *v78;
  int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  _QWORD *v84;
  uint64_t *v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  BOOL v100;
  BOOL v101;
  uint64_t *v102;
  int v103;
  uint64_t *v104;
  _QWORD *v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int *v112;
  const void *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  char *v120;
  char *v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  void (*v129)(__int128 *, __int128 *, uint64_t);
  char *v130;
  _QWORD *v131;
  void *v132;
  char *v133;
  int v134;
  int v135;
  unsigned int *v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int v143;
  unint64_t *v144;
  unint64_t v145;
  _OWORD *v146;
  uint64_t v147;
  ApplePDPHelperInterface *v148;
  ApplePDPHelperInterface *Instance;
  int v150;
  NSObject *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int v157;
  void *v158;
  data::TransportService::State *v159;
  const void *v160;
  uint64_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  __int128 v164;
  std::__shared_weak_count *v165;
  _QWORD aBlock[7];
  dispatch_object_t v167;
  void *v168;
  void *v169[2];
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  dispatch_object_t v173;
  void *v174;
  uint64_t *v175;
  NSObject *v176;
  void *v177;
  dispatch_object_t object;
  void *v179;
  uint8_t buf[16];
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  unint64_t v190;
  void *__p;
  uint64_t v192;
  pthread_mutex_t *v193;
  uint64_t v194;

  v194 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Inited", buf, 2u);
  }
  pthread_mutex_lock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
  v3 = xmmword_2579B8428;
  if (!(_QWORD)xmmword_2579B8428)
  {
    memset(buf, 170, sizeof(buf));
    v4 = (sys::UIObserver *)operator new(0x40uLL);
    sys::UIObserver::UIObserver(v4);
    std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>((std::__shared_weak_count_vtbl **)buf, (std::__shared_weak_count_vtbl *)v4);
    v5 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v6 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_2579B8428 + 1);
    xmmword_2579B8428 = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v3 = xmmword_2579B8428;
  }
  v165 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_2579B8428 + 1);
  if (*((_QWORD *)&xmmword_2579B8428 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&xmmword_2579B8428 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE13connect_eventIN5boost8signals26signalIFvbENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionIS9_EENSF_IFvRKNS7_10connectionEbEEENS7_5mutexEEES3_vJbEEEDTcl7connectfp_cvNSC_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSS_SU_E_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_0;
  aBlock[4] = (char *)this + 72;
  aBlock[5] = data::TransportService::State::handleUILockStateChange_sync;
  aBlock[6] = 0;
  v14 = _Block_copy(aBlock);
  v161 = v3;
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v15 || (v16 = *((_QWORD *)this + 9), (v17 = std::__shared_weak_count::lock(v15)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v18 = v17;
  v19 = *((_QWORD *)this + 11);
  v167 = v19;
  v160 = v14;
  if (v14)
    v20 = _Block_copy(v14);
  else
    v20 = 0;
  v168 = v20;
  dispatch_retain(v19);
  *(_OWORD *)v169 = 0u;
  v170 = 0u;
  v173 = v19;
  if (v20)
    v20 = _Block_copy(v20);
  v174 = v20;
  dispatch_retain(v19);
  object = v19;
  v162 = v16;
  v163 = v18;
  v159 = this;
  if (!v20)
  {
    v179 = 0;
    dispatch_retain(v19);
    goto LABEL_34;
  }
  v21 = _Block_copy(v20);
  v179 = v21;
  dispatch_retain(v19);
  if (!v21)
  {
LABEL_34:
    dispatch_retain(v19);
    v175 = 0;
    goto LABEL_35;
  }
  v22 = _Block_copy(v21);
  dispatch_retain(v19);
  v175 = 0;
  if (!v22)
  {
LABEL_35:
    dispatch_retain(v19);
    v158 = 0;
    v27 = 1;
LABEL_36:
    dispatch_retain(v19);
    v23 = 0;
    v28 = 1;
LABEL_37:
    dispatch_retain(v19);
    v24 = 0;
    v29 = 1;
LABEL_38:
    dispatch_retain(v19);
    v25 = 0;
    v176 = v19;
    v30 = 1;
    goto LABEL_39;
  }
  v23 = _Block_copy(v22);
  dispatch_retain(v19);
  v158 = v22;
  if (!v23)
  {
    v27 = 0;
    goto LABEL_36;
  }
  v24 = _Block_copy(v23);
  dispatch_retain(v19);
  if (!v24)
  {
    v27 = 0;
    v28 = 0;
    goto LABEL_37;
  }
  v25 = _Block_copy(v24);
  dispatch_retain(v19);
  if (!v25)
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    goto LABEL_38;
  }
  v26 = _Block_copy(v25);
  dispatch_retain(v19);
  v176 = v19;
  if (v26)
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v177 = _Block_copy(v26);
    dispatch_retain(v19);
    dispatch_release(v19);
    _Block_release(v26);
    goto LABEL_40;
  }
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
LABEL_39:
  v177 = 0;
  dispatch_retain(v19);
  dispatch_release(v19);
LABEL_40:
  dispatch_release(v19);
  if ((v30 & 1) == 0)
    _Block_release(v25);
  dispatch_release(v19);
  if ((v29 & 1) == 0)
    _Block_release(v24);
  v175 = (uint64_t *)boost::function1<void,BOOL>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>)::stored_vtable;
  dispatch_release(v19);
  if ((v28 & 1) == 0)
    _Block_release(v23);
  dispatch_release(v19);
  if ((v27 & 1) == 0)
    _Block_release(v158);
  *(_QWORD *)&v181 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v181 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0xAAAAAAAAAAAAAAAALL;
  boost::function1<void,BOOL>::move_assign((uint64_t)buf, (uint64_t *)&v175);
  boost::function1<void,BOOL>::move_assign((uint64_t)&v175, (uint64_t *)&v170 + 1);
  boost::function1<void,BOOL>::move_assign((uint64_t)&v170 + 8, (uint64_t *)buf);
  if (*(_QWORD *)buf)
  {
    if ((buf[0] & 1) == 0)
    {
      v31 = *(void (**)(uint8_t *, uint8_t *, uint64_t))(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFFELL);
      if (v31)
        v31(&buf[8], &buf[8], 2);
    }
  }
  if (v175)
  {
    if ((v175 & 1) == 0)
    {
      v32 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v175 & 0xFFFFFFFFFFFFFFFELL);
      if (v32)
        v32((uint64_t)&v176, &v176, 2u);
    }
    v175 = 0;
  }
  dispatch_release(object);
  if (v179)
    _Block_release(v179);
  dispatch_release(v173);
  if (v174)
    _Block_release(v174);
  p_shared_weak_owners = (unint64_t *)&v163->__shared_weak_owners_;
  do
    v34 = __ldxr(p_shared_weak_owners);
  while (__stxr(v34 + 1, p_shared_weak_owners));
  v35 = operator new(0x18uLL);
  *v35 = &off_251CB8818;
  v35[1] = v162;
  v35[2] = v163;
  do
    v36 = __ldxr(p_shared_weak_owners);
  while (__stxr(v36 + 1, p_shared_weak_owners));
  v37 = operator new(0x18uLL);
  v38 = v37;
  *v37 = &off_251CB8818;
  v37[1] = v162;
  v37[2] = v163;
  do
    v39 = __ldxr(p_shared_weak_owners);
  while (__stxr(v39 + 1, p_shared_weak_owners));
  *(_QWORD *)&buf[8] = v37;
  *(_DWORD *)buf = 2;
  v40 = v169[1];
  if (v169[1] < (void *)v170)
  {
    v41 = operator new(0x18uLL);
    *v41 = &off_251CB8818;
    v41[1] = v162;
    v41[2] = v163;
    do
      v42 = __ldxr(p_shared_weak_owners);
    while (__stxr(v42 + 1, p_shared_weak_owners));
    v40[1] = v41;
    *(_DWORD *)v40 = 2;
    v169[1] = v40 + 3;
LABEL_71:
    (*(void (**)(_QWORD *))(*v38 + 8))(v38);
    goto LABEL_72;
  }
  v78 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v169, (uint64_t)buf);
  v79 = *(_DWORD *)buf ^ (*(int *)buf >> 31);
  v169[1] = v78;
  if (v79 == 2)
  {
    v38 = *(_QWORD **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_72;
    goto LABEL_71;
  }
  if (v79 == 1)
  {
    v80 = v181;
    if ((_QWORD)v181)
    {
      v81 = (unsigned int *)(v181 + 12);
      do
      {
        v82 = __ldaxr(v81);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, v81));
      if (!v83)
LABEL_119:
        (*(void (**)(uint64_t))(*(_QWORD *)v80 + 24))(v80);
    }
  }
  else
  {
    v80 = v181;
    if ((_QWORD)v181)
    {
      v155 = (unsigned int *)(v181 + 12);
      do
      {
        v156 = __ldaxr(v155);
        v157 = v156 - 1;
      }
      while (__stlxr(v157, v155));
      if (!v157)
        goto LABEL_119;
    }
  }
LABEL_72:
  (*(void (**)(_QWORD *))(*v35 + 8))(v35);
  std::__shared_weak_count::__release_weak(v163);
  v43 = *(uint64_t ***)(v161 + 40);
  *(_QWORD *)&v44 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v44 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v188 = v44;
  v189 = v44;
  v186 = v44;
  v187 = v44;
  v184 = v44;
  v185 = v44;
  v182 = v44;
  v183 = v44;
  *(_OWORD *)buf = v44;
  v181 = v44;
  v45 = (pthread_mutex_t *)v43[3];
  v190 = 10;
  __p = buf;
  v192 = 0;
  v193 = v45;
  pthread_mutex_lock(v45);
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v179 = (void *)0xAAAAAAAAAAAAAAAALL;
  v46 = (unsigned int *)v43[1];
  if (v46 && (v47 = atomic_load(v46 + 2), v47 == 1))
  {
    v48 = **v43;
    v49 = v43[2];
    v50 = 2;
    if (v49 != (uint64_t *)v48)
    {
      v175 = v43[2];
      if ((uint64_t *)**v43 == v49)
        goto LABEL_110;
      goto LABEL_90;
    }
  }
  else
  {
    v51 = (uint64_t *)operator new(0x20uLL);
    v52 = (uint64_t **)*v43;
    v53 = **v43;
    v54 = operator new(0x40uLL);
    boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v54, v53);
    boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(v51, (uint64_t)v54);
    v51[2] = (uint64_t)v52[2];
    v55 = (uint64_t)v52[3];
    v51[3] = v55;
    if (v55)
    {
      v56 = (unsigned int *)(v55 + 8);
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>((uint64_t *)&v175, (uint64_t)v51);
    v58 = v175;
    v59 = (unsigned int *)v43[1];
    v175 = *v43;
    *v43 = v58;
    v43[1] = (uint64_t *)v176;
    v176 = v59;
    if (v59)
    {
      v60 = v59 + 2;
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 16))(v59);
        v63 = v59 + 3;
        do
        {
          v64 = __ldaxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (!v65)
          (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 24))(v59);
      }
    }
    v50 = 0;
    v48 = **v43;
  }
  v49 = *(uint64_t **)(v48 + 8);
  v175 = v49;
  if ((uint64_t *)**v43 == v49)
    goto LABEL_110;
LABEL_90:
  v66 = 0;
  v67 = v50 - 1;
  do
  {
    v70 = v49[2];
    v71 = *(uint64_t **)(v70 + 32);
    if (v71)
    {
      for (i = *v71; i != v71[1]; i += 24)
      {
        if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 8) + 24))(*(_QWORD *)(i + 8)) & 1) != 0)
            goto LABEL_107;
        }
        else
        {
          v73 = *(_QWORD *)(i + 16);
          if (!v73 || (v74 = atomic_load((unsigned int *)(v73 + 8))) == 0)
          {
LABEL_107:
            if (*(_BYTE *)(v70 + 24))
            {
              *(_BYTE *)(v70 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v70, buf);
            }
            break;
          }
        }
      }
    }
    v68 = v175[2];
    if (*(_BYTE *)(v68 + 24))
      v49 = (uint64_t *)v175[1];
    else
      v49 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase((uint64_t *)**v43, (int *)(v68 + 64), &v175);
    v175 = v49;
    ++v66;
  }
  while (v49 != (uint64_t *)**v43 && v67 >= v66);
LABEL_110:
  v43[2] = v49;
  v75 = (char *)operator new(0x50uLL);
  *((_QWORD *)v75 + 1) = 0;
  *((_QWORD *)v75 + 2) = 0;
  v75[24] = 1;
  *((_DWORD *)v75 + 7) = 1;
  *(_QWORD *)v75 = off_251CB8650;
  v76 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v76, (uint64_t *)v169);
  v76[3] = 0;
  v77 = *((_QWORD *)&v170 + 1);
  if (*((_QWORD *)&v170 + 1))
  {
    v76[3] = *((_QWORD *)&v170 + 1);
    if ((v77 & 1) != 0)
    {
      *((_OWORD *)v76 + 2) = v171;
      v76[6] = v172;
    }
    else
    {
      (*(void (**)(__int128 *, _QWORD *, _QWORD))(v77 & 0xFFFFFFFFFFFFFFFELL))(&v171, v76 + 4, 0);
    }
  }
  *((_QWORD *)v75 + 4) = v76;
  *((_QWORD *)v75 + 5) = 0;
  v84 = operator new(0x18uLL);
  v84[1] = 0x100000001;
  *v84 = off_251CB86F8;
  v84[2] = v76;
  *((_QWORD *)v75 + 5) = v84;
  *((_QWORD *)v75 + 6) = v43[3];
  v85 = v43[4];
  *((_QWORD *)v75 + 7) = v85;
  if (v85)
  {
    v86 = (unsigned int *)(v85 + 1);
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
  }
  *((_DWORD *)v75 + 16) = 0;
  v75[68] = 0;
  object = (dispatch_object_t)v75;
  v179 = 0;
  v88 = (unsigned int *)operator new(0x18uLL);
  *((_QWORD *)v88 + 1) = 0x100000001;
  v89 = v88 + 2;
  *(_QWORD *)v88 = off_251CB8758;
  *((_QWORD *)v88 + 2) = v75;
  v179 = v88;
  v90 = **v43;
  v91 = operator new(0x20uLL);
  v92 = v91;
  v93 = (_QWORD *)(v90 + 32);
  v91[2] = v75;
  v91[3] = v88;
  do
    v94 = __ldxr(v89);
  while (__stxr(v94 + 1, v89));
  v95 = *(_QWORD *)v90;
  *(_QWORD *)(v95 + 8) = v91;
  *v91 = v95;
  *(_QWORD *)v90 = v91;
  v91[1] = v90;
  ++*(_QWORD *)(v90 + 16);
  v96 = *(uint64_t **)(v90 + 32);
  if (v96)
  {
    v97 = v90 + 32;
    v98 = *(_QWORD *)(v90 + 32);
    do
    {
      v99 = *(_DWORD *)(v98 + 32);
      v100 = v99 == 2;
      v101 = v99 < 2;
      if (v99 >= 2)
        v102 = (uint64_t *)v98;
      else
        v102 = (uint64_t *)(v98 + 8);
      if (!v101)
        v97 = v98;
      if (v100)
      {
        v102 = (uint64_t *)v98;
        v97 = v98;
      }
      v98 = *v102;
    }
    while (*v102);
    if ((_QWORD *)v97 == v93 || *(_DWORD *)(v97 + 32) != 2)
    {
      v103 = *((_DWORD *)v96 + 8);
      while (v103 != 2)
      {
        if (v103 < 3)
        {
          v104 = (uint64_t *)v96[1];
          if (!v104)
          {
            v93 = v96 + 1;
            goto LABEL_147;
          }
        }
        else
        {
          v104 = (uint64_t *)*v96;
          v93 = v96;
          if (!*v96)
            goto LABEL_147;
        }
        v103 = *((_DWORD *)v104 + 8);
        v96 = v104;
      }
    }
    *((_DWORD *)v75 + 16) = 2;
    *(_QWORD *)(v75 + 68) = 0xAAAAAAAAAAAAAA00;
LABEL_150:
    v107 = v88 + 3;
    do
      v108 = __ldxr(v107);
    while (__stxr(v108 + 1, v107));
    *(_QWORD *)&v164 = v75;
    *((_QWORD *)&v164 + 1) = v88;
    do
      v109 = __ldxr(v107);
    while (__stxr(v109 + 1, v107));
    do
    {
      v110 = __ldaxr(v107);
      v111 = v110 - 1;
    }
    while (__stlxr(v111, v107));
    if (!v111)
      (*(void (**)(unsigned int *))(*(_QWORD *)v88 + 24))(v88);
    v112 = (unsigned int *)v179;
    v113 = v160;
    if (!v179)
      goto LABEL_166;
    goto LABEL_158;
  }
  v96 = (uint64_t *)(v90 + 32);
LABEL_147:
  v105 = operator new(0x38uLL);
  v105[4] = 0xAAAAAA0000000002;
  *((_DWORD *)v105 + 10) = -1431655766;
  v105[6] = v92;
  *v105 = 0;
  v105[1] = 0;
  v105[2] = v96;
  *v93 = v105;
  v106 = **(_QWORD **)(v90 + 24);
  if (v106)
  {
    *(_QWORD *)(v90 + 24) = v106;
    v105 = (_QWORD *)*v93;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v90 + 32), v105);
  ++*(_QWORD *)(v90 + 40);
  v75 = (char *)object;
  v88 = (unsigned int *)v179;
  LODWORD(object[8].isa) = 2;
  *(_QWORD *)(v75 + 68) = 0xAAAAAAAAAAAAAA00;
  if (v88)
    goto LABEL_150;
  v164 = (unint64_t)v75;
  v112 = (unsigned int *)v179;
  v113 = v160;
  if (v179)
  {
LABEL_158:
    v114 = v112 + 2;
    do
    {
      v115 = __ldaxr(v114);
      v116 = v115 - 1;
    }
    while (__stlxr(v116, v114));
    if (!v116)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v112 + 16))(v112);
      v117 = v112 + 3;
      do
      {
        v118 = __ldaxr(v117);
        v119 = v118 - 1;
      }
      while (__stlxr(v119, v117));
      if (!v119)
        (*(void (**)(unsigned int *))(*(_QWORD *)v112 + 24))(v112);
    }
  }
LABEL_166:
  pthread_mutex_unlock(v193);
  v120 = (char *)__p;
  if (__p)
  {
    if (v192 - 1 >= 0)
    {
      v121 = (char *)__p + 16 * v192;
      do
      {
        v122 = (unsigned int *)*((_QWORD *)v121 - 1);
        if (v122)
        {
          v123 = v122 + 2;
          do
          {
            v124 = __ldaxr(v123);
            v125 = v124 - 1;
          }
          while (__stlxr(v125, v123));
          if (!v125)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v122 + 16))(v122);
            v126 = v122 + 3;
            do
            {
              v127 = __ldaxr(v126);
              v128 = v127 - 1;
            }
            while (__stlxr(v128, v126));
            if (!v128)
              (*(void (**)(unsigned int *))(*(_QWORD *)v122 + 24))(v122);
          }
        }
        v121 -= 16;
      }
      while (v121 > v120);
    }
    if (v190 >= 0xB)
      operator delete(__p);
  }
  if (*((_QWORD *)&v170 + 1))
  {
    if ((BYTE8(v170) & 1) == 0)
    {
      v129 = *(void (**)(__int128 *, __int128 *, uint64_t))(*((_QWORD *)&v170 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v129)
        v129(&v171, &v171, 2);
    }
    *((_QWORD *)&v170 + 1) = 0;
  }
  v130 = (char *)v169[0];
  if (!v169[0])
    goto LABEL_205;
  v131 = v169[1];
  v132 = v169[0];
  if (v169[1] == v169[0])
    goto LABEL_204;
  v133 = (char *)v169[1];
  do
  {
    v134 = *((_DWORD *)v133 - 6);
    v133 -= 24;
    v135 = v134 ^ (v134 >> 31);
    if (v135 == 2)
    {
      v140 = *(v131 - 2);
      if (v140)
        (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
    }
    else if (v135 == 1)
    {
      v136 = (unsigned int *)*(v131 - 1);
      if (v136)
      {
        v137 = v136 + 3;
        do
        {
          v138 = __ldaxr(v137);
          v139 = v138 - 1;
        }
        while (__stlxr(v139, v137));
        if (!v139)
          goto LABEL_195;
      }
    }
    else
    {
      v136 = (unsigned int *)*(v131 - 1);
      if (v136)
      {
        v141 = v136 + 3;
        do
        {
          v142 = __ldaxr(v141);
          v143 = v142 - 1;
        }
        while (__stlxr(v143, v141));
        if (!v143)
LABEL_195:
          (*(void (**)(unsigned int *))(*(_QWORD *)v136 + 24))(v136);
      }
    }
    v131 = v133;
  }
  while (v133 != v130);
  v132 = v169[0];
LABEL_204:
  v169[1] = v130;
  operator delete(v132);
LABEL_205:
  dispatch_release(v167);
  if (v168)
    _Block_release(v168);
  v144 = (unint64_t *)&v163->__shared_owners_;
  do
    v145 = __ldaxr(v144);
  while (__stlxr(v145 - 1, v144));
  if (!v145)
  {
    ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
    std::__shared_weak_count::__release_weak(v163);
    if (!v113)
      goto LABEL_214;
    goto LABEL_213;
  }
  if (v113)
LABEL_213:
    _Block_release(v113);
LABEL_214:
  v146 = operator new(0x20uLL);
  v146[1] = v164;
  v147 = *((_QWORD *)v159 + 15);
  *(_QWORD *)v146 = v147;
  *((_QWORD *)v146 + 1) = (char *)v159 + 120;
  *(_QWORD *)(v147 + 8) = v146;
  *((_QWORD *)v159 + 15) = v146;
  ++*((_QWORD *)v159 + 17);
  v148 = (ApplePDPHelperInterface *)capabilities::ipc::supportsIPMetadataTrailer((capabilities::ipc *)v146);
  if (!(_DWORD)v148)
    goto LABEL_220;
  Instance = (ApplePDPHelperInterface *)ApplePDPHelperInterface::getInstance(v148);
  v150 = ApplePDPHelperInterface::enableMetadataTrailer(Instance, 1, 0);
  v151 = *((_QWORD *)v159 + 5);
  if (!v150)
  {
    if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_24B855000, v151, OS_LOG_TYPE_ERROR, "Failed to enable IP metadata trailer appending", buf, 2u);
      v152 = v165;
      if (v165)
        goto LABEL_221;
      return;
    }
    goto LABEL_220;
  }
  if (!os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
  {
LABEL_220:
    v152 = v165;
    if (v165)
      goto LABEL_221;
    return;
  }
  *(_WORD *)buf = 0;
  _os_log_impl(&dword_24B855000, v151, OS_LOG_TYPE_DEFAULT, "#I Enabled IP metadata trailer appending", buf, 2u);
  v152 = v165;
  if (!v165)
    return;
LABEL_221:
  v153 = (unint64_t *)&v152->__shared_owners_;
  do
    v154 = __ldaxr(v153);
  while (__stlxr(v154 - 1, v153));
  if (!v154)
  {
    ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
    std::__shared_weak_count::__release_weak(v152);
  }
}

void sub_24B85A5F8(uint64_t a1, int a2)
{
  boost::signals2::detail::connection_body_base *v2;
  unsigned int *v3;
  void *v4;

  if (a2)
  {
    if (*(_QWORD *)v3)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100](v3, *(_QWORD *)v3);
      operator delete(*(void **)v3);
    }
    operator delete(v3);
    boost::signals2::detail::connection_body_base::~connection_body_base(v2);
    operator delete(v4);
    JUMPOUT(0x24B85AA4CLL);
  }
  JUMPOUT(0x24B85AA44);
}

void sub_24B85A620(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  void *v45;

  operator delete(v45);
  pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
  JUMPOUT(0x24B85AA44);
}

void sub_24B85A6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B85A6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B85A6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  boost::signals2::connection::~connection((boost::signals2::connection *)va);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_24B85A6FC(void *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x24B85AA44);
}

void sub_24B85A724(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,unsigned int *a44)
{
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;

  if (a2)
  {
    __cxa_end_catch();
    if (a44)
    {
      v44 = a44 + 2;
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (!v46)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)a44 + 16))(a44);
        v47 = a44 + 3;
        do
        {
          v48 = __ldaxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
          (*(void (**)(unsigned int *))(*(_QWORD *)a44 + 24))(a44);
      }
    }
    JUMPOUT(0x24B85AA4CLL);
  }
  JUMPOUT(0x24B85AA44);
}

void sub_24B85A794(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);

  if (a2)
  {
    __cxa_begin_catch(a1);
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(v2 + 32, v2 + 32, 2);
      }
      *(_QWORD *)(v2 + 24) = 0;
    }
    if (*(_QWORD *)v2)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v2, *(_QWORD *)v2);
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x24B85AA44);
}

void sub_24B85A7FC(uint64_t a1, int a2)
{
  boost::signals2::detail::connection_body_base *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  if (a2)
  {
    __cxa_end_catch();
    v3 = (unsigned int *)*((_QWORD *)v2 + 5);
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v7 = v3 + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(v2);
    JUMPOUT(0x24B85A990);
  }
  JUMPOUT(0x24B85AA44);
}

void sub_24B85A86C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x24B85A874);
  JUMPOUT(0x24B85AA44);
}

void sub_24B85A880(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x24B85A888);
  JUMPOUT(0x24B85AA44);
}

void sub_24B85A894(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t a65;
  char *__p;
  uint64_t a67;
  char *v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;

  if (a2)
  {
    if (__p)
    {
      if (a67 - 1 >= 0)
      {
        v67 = &__p[16 * a67];
        do
        {
          v68 = (unsigned int *)*((_QWORD *)v67 - 1);
          if (v68)
          {
            v69 = v68 + 2;
            do
            {
              v70 = __ldaxr(v69);
              v71 = v70 - 1;
            }
            while (__stlxr(v71, v69));
            if (!v71)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v68 + 16))(v68);
              v72 = v68 + 3;
              do
              {
                v73 = __ldaxr(v72);
                v74 = v73 - 1;
              }
              while (__stlxr(v74, v72));
              if (!v74)
                (*(void (**)(unsigned int *))(*(_QWORD *)v68 + 24))(v68);
            }
          }
          v67 -= 16;
        }
        while (v67 > __p);
      }
      if (a65 >= 0xB)
        operator delete(__p);
    }
    JUMPOUT(0x24B85AA54);
  }
  JUMPOUT(0x24B85AA44);
}

void sub_24B85A93C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x24B85A94CLL);
  JUMPOUT(0x24B85AA44);
}

void sub_24B85A95C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x24B85A964);
  JUMPOUT(0x24B85AA44);
}

void sub_24B85A984(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x24B85A98CLL);
  JUMPOUT(0x24B85AA44);
}

void sub_24B85A998(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&a43);
    JUMPOUT(0x24B85AA4CLL);
  }
  JUMPOUT(0x24B85AA44);
}

void sub_24B85A9B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45)
{
  void (*v45)(uint64_t *, uint64_t *, uint64_t);

  if (a2)
  {
    boost::function1<void,BOOL>::~function1(&a45);
    boost::function<void ()(BOOL)>::~function(&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a43);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a37);
    if (a32)
    {
      if ((a32 & 1) == 0)
      {
        v45 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(a32 & 0xFFFFFFFFFFFFFFFELL);
        if (v45)
          v45(&a33, &a33, 2);
      }
      a32 = 0;
    }
    if (__p)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)&__p, (uint64_t)__p);
      operator delete(__p);
    }
    JUMPOUT(0x24B85AA5CLL);
  }
  JUMPOUT(0x24B85AA44);
}

void sub_24B85AA2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_24B85AB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_24B85AB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<data::TransportService::State>::shared_ptr[abi:ne180100]<data::TransportService::State,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_251CB8450;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_24B85ACA0(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1}::operator() const(data::TransportService::State*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_24B85ACC0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<data::TransportService::State *,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State *)#1},std::allocator<data::TransportService::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<data::TransportService::State *,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State *)#1},std::allocator<data::TransportService::State>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1}::operator() const(data::TransportService::State*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<data::TransportService::State *,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State *)#1},std::allocator<data::TransportService::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3__110shared"
                     "_ptrIT_EEPS8_EUlPS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3"
                                "__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1}::operator() const(data::TransportService::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB808] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB6D8], MEMORY[0x24BEDAC00]);
}

uint64_t data::TransportService::State::State(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void *__p[2];
  char v11;
  _BYTE v12[16];
  char label[23];
  char v14;
  _BYTE v15[16];
  _BYTE v16[16];

  v14 = 12;
  strcpy(label, "ipc.svc.data");
  v11 = 12;
  strcpy((char *)__p, "ipc.svc.data");
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v12, "com.apple.telephony.abm", (const char *)__p);
  v4 = dispatch_queue_create(label, 0);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v4;
  if (v4)
  {
    v5 = v4;
    dispatch_retain(v4);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v5);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_251CB85B0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v16);
  *(_QWORD *)(a1 + 8) = &unk_251CB85F0;
  *(_QWORD *)(a1 + 56) = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 64) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v15);
  *(_QWORD *)a1 = off_251CB8570;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v12);
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if ((v14 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_11:
    operator delete(*(void **)label);
    goto LABEL_9;
  }
  if (v14 < 0)
    goto LABEL_11;
LABEL_9:
  *(_QWORD *)a1 = off_251CB84A0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 120;
  *(_QWORD *)(a1 + 128) = a1 + 120;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 104) = 0x2D00000000;
  return a1;
}

void sub_24B85AF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  _QWORD *v23;
  uint64_t v24;

  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v24 - 48));
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a23);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v23);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  _Unwind_Resume(a1);
}

void data::TransportService::State::~State(data::TransportService::State *this)
{
  void *v1;

  data::TransportService::State::~State(this);
  operator delete(v1);
}

{
  char *v2;
  char *i;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int j;
  unsigned int v7;
  boost::signals2::detail::connection_body_base *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  char *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  NSObject *v34;
  NSObject *v35;
  std::__shared_weak_count *v36;

  *(_QWORD *)this = off_251CB84A0;
  v2 = (char *)this + 120;
  for (i = (char *)*((_QWORD *)this + 16); i != v2; i = (char *)*((_QWORD *)i + 1))
  {
    v4 = (unsigned int *)*((_QWORD *)i + 3);
    if (v4)
    {
      v5 = v4 + 2;
      for (j = v4[2]; j; j = v7)
      {
        v7 = __ldxr(v5);
        if (v7 == j)
        {
          if (!__stxr(j + 1, v5))
          {
            v8 = (boost::signals2::detail::connection_body_base *)*((_QWORD *)i + 2);
            if (v8)
              boost::signals2::detail::connection_body_base::disconnect(v8);
            do
            {
              v9 = __ldaxr(v5);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v5));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v11 = v4 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
  }
  if (*((_QWORD *)this + 17))
  {
    v14 = *((_QWORD *)this + 15);
    v15 = (char *)*((_QWORD *)this + 16);
    v16 = *(_QWORD *)v15;
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v16;
    *((_QWORD *)this + 17) = 0;
    if (v15 != v2)
    {
      do
      {
        v24 = (char *)*((_QWORD *)v15 + 1);
        v25 = (unsigned int *)*((_QWORD *)v15 + 3);
        if (v25)
        {
          v26 = v25 + 3;
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
            (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 24))(v25);
        }
        operator delete(v15);
        v15 = v24;
      }
      while (v24 != v2);
    }
  }
  v17 = *((_QWORD *)this + 20);
  if (v17)
    dispatch_release(v17);
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (!v18)
    goto LABEL_27;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!*((_QWORD *)this + 17))
      goto LABEL_43;
  }
  else
  {
LABEL_27:
    if (!*((_QWORD *)this + 17))
      goto LABEL_43;
  }
  v21 = *((_QWORD *)this + 15);
  v22 = (char *)*((_QWORD *)this + 16);
  v23 = *(_QWORD *)v22;
  *(_QWORD *)(v23 + 8) = *(_QWORD *)(v21 + 8);
  **(_QWORD **)(v21 + 8) = v23;
  *((_QWORD *)this + 17) = 0;
  if (v22 != v2)
  {
    do
    {
      v29 = (char *)*((_QWORD *)v22 + 1);
      v30 = (unsigned int *)*((_QWORD *)v22 + 3);
      if (v30)
      {
        v31 = v30 + 3;
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
          (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 24))(v30);
      }
      operator delete(v22);
      v22 = v29;
    }
    while (v29 != v2);
  }
LABEL_43:
  *(_QWORD *)this = off_251CB85B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v34 = *((_QWORD *)this + 12);
  if (v34)
    dispatch_release(v34);
  v35 = *((_QWORD *)this + 11);
  if (v35)
    dispatch_release(v35);
  v36 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v36)
    std::__shared_weak_count::__release_weak(v36);
}

uint64_t ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "ipc.svc.data");
}

uint64_t ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

_QWORD *ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = a1[2];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

_QWORD *ctu::SharedLoggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CB85B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CB85B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

_QWORD *ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CB85B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CB85B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void sub_24B85B408(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::shared_ptr<boost::signals2::detail::connection_body_base>::~shared_ptr((uint64_t)&a9);
  __clang_call_terminate(a1);
}

void boost::signals2::detail::connection_body_base::disconnect(boost::signals2::detail::connection_body_base *this)
{
  __int128 v2;
  char *v3;
  char *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _OWORD v12[10];
  unint64_t v13;
  void *__p;
  uint64_t v15;
  boost::signals2::detail::connection_body_base *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12[8] = v2;
  v12[9] = v2;
  v12[6] = v2;
  v12[7] = v2;
  v12[4] = v2;
  v12[5] = v2;
  v12[2] = v2;
  v12[3] = v2;
  v12[0] = v2;
  v12[1] = v2;
  v13 = 10;
  __p = v12;
  v15 = 0;
  v16 = this;
  (*(void (**)(boost::signals2::detail::connection_body_base *))(*(_QWORD *)this + 24))(this);
  if (*((_BYTE *)this + 24))
  {
    *((_BYTE *)this + 24) = 0;
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(this, v12);
  }
  (*(void (**)(boost::signals2::detail::connection_body_base *))(*(_QWORD *)v16 + 32))(v16);
  v3 = (char *)__p;
  if (__p)
  {
    if (v15 - 1 >= 0)
    {
      v4 = (char *)__p + 16 * v15;
      do
      {
        v5 = (unsigned int *)*((_QWORD *)v4 - 1);
        if (v5)
        {
          v6 = v5 + 2;
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
            v9 = v5 + 3;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
          }
        }
        v4 -= 16;
      }
      while (v4 > v3);
    }
    if (v13 >= 0xB)
      operator delete(__p);
  }
}

void sub_24B85B57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_24B85B590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body_base>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 32))(*(_QWORD *)(a1 + 184));
  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      v4 = v2 + 16 * v3;
      do
      {
        v5 = *(unsigned int **)(v4 - 8);
        if (v5)
        {
          v6 = v5 + 2;
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
            v9 = v5 + 3;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(_QWORD *)(a1 + 160) >= 0xBuLL)
      operator delete(*(void **)(a1 + 168));
  }
  return a1;
}

uint64_t boost::shared_ptr<void>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(_DWORD *a1, _QWORD *a2)
{
  int v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  __int128 v16;

  v2 = a1[7] - 1;
  a1[7] = v2;
  if (!v2)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 40))(&v16);
    v4 = a2[22];
    if (v4 == a2[20] && v4 != -1)
    {
      if (4 * v4 <= (unint64_t)(v4 + 1))
        v5 = v4 + 1;
      else
        v5 = 4 * v4;
      boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl((uint64_t)a2, v5);
      v4 = a2[22];
    }
    v6 = *((_QWORD *)&v16 + 1);
    *(_OWORD *)(a2[21] + 16 * v4) = v16;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      v4 = a2[22];
    }
    a2[22] = v4 + 1;
    v9 = (unsigned int *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
  }
}

void sub_24B85B92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::shared_ptr<void>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  v4 = (_QWORD *)a1;
  if (a2 >= 0xB)
  {
    if (a2 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(16 * a2);
  }
  v6 = *(_QWORD **)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  if (v5)
  {
    v7 = &v6[2 * v5];
    v8 = v4;
    do
    {
      v9 = v6[1];
      *v8 = *v6;
      v8[1] = v9;
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v6 += 2;
      v8 += 2;
    }
    while (v6 != v7);
    v6 = *(_QWORD **)(a1 + 168);
  }
  if (v6)
  {
    v12 = *(_QWORD *)(a1 + 176);
    if (v12 - 1 >= 0)
    {
      v13 = &v6[2 * v12];
      do
      {
        v14 = (unsigned int *)*(v13 - 1);
        if (v14)
        {
          v15 = v14 + 2;
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
            v18 = v14 + 3;
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
              (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
          }
        }
        v13 -= 2;
      }
      while (v13 > v6);
    }
    if (*(_QWORD *)(a1 + 160) >= 0xBuLL)
      operator delete(*(void **)(a1 + 168));
  }
  *(_QWORD *)(a1 + 160) = a2;
  *(_QWORD *)(a1 + 168) = v4;
}

void boost::signals2::connection::~connection(boost::signals2::connection *this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (unsigned int *)*((_QWORD *)this + 1);
  if (v1)
  {
    v2 = v1 + 3;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
  }
}

void data::TransportService::State::handleUILockStateChange_sync(data::TransportService::State *this, int a2)
{
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2 & 1) != 0)
      return;
LABEL_7:
    data::TransportService::State::unblockThrottling_sync(this);
    return;
  }
  v5 = "unlocked";
  if (a2)
    v5 = "locked";
  v6 = 136315138;
  v7 = v5;
  _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I UI has %s", (uint8_t *)&v6, 0xCu);
  if ((a2 & 1) == 0)
    goto LABEL_7;
}

uint64_t ___ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE13connect_eventIN5boost8signals26signalIFvbENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionIS9_EENSF_IFvRKNS7_10connectionEbEEENS7_5mutexEEES3_vJbEEEDTcl7connectfp_cvNSC_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSS_SU_E_block_invoke(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[5];
  v2 = a1[6];
  v3 = (_QWORD *)(a1[4] + (v2 >> 1) - 72);
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>::~slot(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 32, a1 + 32, 2);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)a1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot(uint64_t a1)
{
  const void *v2;

  dispatch_release(*(dispatch_object_t *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 184));
  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      v4 = v2 + 16 * v3;
      do
      {
        v5 = *(unsigned int **)(v4 - 8);
        if (v5)
        {
          v6 = v5 + 2;
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
            v9 = v5 + 3;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(_QWORD *)(a1 + 160) >= 0xBuLL)
      operator delete(*(void **)(a1 + 168));
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(&v11, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v11;
  v11 = v3;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  return a1;
}

void sub_24B85BE5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = &unk_251CB8A60;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_24B85BF14(void *a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  __cxa_begin_catch(a1);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_24B85BFE4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(&v11, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v11;
  v11 = v3;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  return a1;
}

void sub_24B85C1B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  v4 = std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::list((_QWORD *)a1, (_QWORD *)a2);
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  *((_BYTE *)v4 + 48) = *(_BYTE *)(a2 + 48);
  v4[3] = v4 + 4;
  v5 = (_QWORD *)(a2 + 32);
  std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(v4 + 3, *(int **)(a2 + 24), (int *)(a2 + 32));
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD **)(a2 + 24);
  if (v6 != (_QWORD *)(a2 + 32))
  {
    v7 = *(_QWORD **)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      v7[6] = v8;
      v9 = a2;
      if (v6 != v5)
        v9 = v6[6];
      v10 = (_QWORD *)v6[1];
      v11 = v10;
      v12 = v6;
      if (v10)
      {
        do
        {
          v13 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v12[2];
          v14 = *v13 == (_QWORD)v12;
          v12 = v13;
        }
        while (!v14);
      }
      v15 = a2;
      if (v13 != v5)
        v15 = v13[6];
      while (v9 != v15)
      {
        v9 = *(_QWORD *)(v9 + 8);
        v8 = *(_QWORD *)(v8 + 8);
      }
      if (v10)
      {
        do
        {
          v16 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v6[2];
          v14 = *v16 == (_QWORD)v6;
          v6 = v16;
        }
        while (!v14);
      }
      v17 = (_QWORD *)v7[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v7[2];
          v14 = *v18 == (_QWORD)v7;
          v7 = v18;
        }
        while (!v14);
      }
      v6 = v16;
      v7 = v18;
    }
    while (v16 != v5);
  }
  return a1;
}

void sub_24B85C370(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v2, *(_QWORD **)(v1 + 32));
  std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~list((uint64_t *)v1);
  _Unwind_Resume(a1);
}

_QWORD *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::list(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = (_QWORD *)a2[1];
  if (v3 != a2)
  {
    v5 = 0;
    v6 = a1;
    do
    {
      v7 = operator new(0x20uLL);
      v8 = v3[3];
      v7[2] = v3[2];
      v7[3] = v8;
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        v6 = (_QWORD *)*a1;
        v5 = a1[2];
      }
      *v7 = v6;
      v7[1] = a1;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = ++v5;
      v3 = (_QWORD *)v3[1];
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_24B85C43C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if (v2)
  {
    v5 = (uint64_t *)v1[1];
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v6;
    v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        v7 = (uint64_t *)v5[1];
        v8 = (unsigned int *)v5[3];
        if (v8)
        {
          v9 = v8 + 2;
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
            v12 = v8 + 3;
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
              (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 24))(v8);
          }
        }
        operator delete(v5);
        v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

uint64_t *std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int *v6;
  uint64_t *v7;
  uint64_t *v8;
  int *v9;
  uint64_t *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t *v15;
  int *v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t *v19[11];

  if (a2 != a3)
  {
    v19[9] = v3;
    v19[10] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      v19[0] = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      result = std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__find_equal<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>>(v7, v8, v19, &v18, v6 + 8);
      if (*result)
      {
        v9 = (int *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = result;
        v11 = operator new(0x38uLL);
        v12 = *((_QWORD *)v6 + 6);
        v11[2] = *((_OWORD *)v6 + 2);
        *((_QWORD *)v11 + 6) = v12;
        v13 = v19[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v13;
        *v10 = (uint64_t)v11;
        v14 = *(_QWORD **)*v7;
        if (v14)
        {
          *v7 = (uint64_t)v14;
          v15 = (uint64_t *)*v10;
        }
        else
        {
          v15 = (uint64_t *)v11;
        }
        result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v15);
        ++v7[2];
        v9 = (int *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            v16 = v9;
            v9 = *(int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v16 = (int *)*((_QWORD *)v6 + 2);
        v17 = *(_QWORD *)v16 == (_QWORD)v6;
        v6 = v16;
      }
      while (!v17);
LABEL_3:
      v6 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__find_equal<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  int v20;
  _QWORD *v21;
  int v22;
  uint64_t *v23;
  int v24;
  int v25;
  int v26;
  uint64_t *v27;
  int v28;
  int v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;

  v5 = a1 + 1;
  if (a1 + 1 == a2)
    goto LABEL_8;
  v6 = *a5;
  v7 = *((_DWORD *)a2 + 8);
  if (*a5 == v7)
  {
    if (v6 != 1)
    {
LABEL_6:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
    v8 = a5[2];
    v9 = *((_DWORD *)a2 + 10);
    if (v8 >= v9)
    {
      if (v9 >= v8)
        goto LABEL_6;
      goto LABEL_15;
    }
LABEL_8:
    v11 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v13 = a2;
    }
    else
    {
      if (v11)
      {
        v12 = (uint64_t *)*a2;
        do
        {
          v13 = v12;
          v12 = (uint64_t *)v12[1];
        }
        while (v12);
      }
      else
      {
        v17 = a2;
        do
        {
          v13 = (uint64_t *)v17[2];
          v18 = *v13 == (_QWORD)v17;
          v17 = v13;
        }
        while (v18);
      }
      v19 = *((_DWORD *)v13 + 8);
      v20 = *a5;
      if (v19 == *a5)
      {
        if (v19 != 1 || *((_DWORD *)v13 + 10) >= a5[2])
          goto LABEL_24;
      }
      else if (v19 >= v20)
      {
LABEL_24:
        v21 = (_QWORD *)*v5;
        if (!*v5)
        {
          *a3 = v5;
          return a1 + 1;
        }
        if (v20 != 1)
        {
          while (1)
          {
            v26 = *((_DWORD *)v21 + 8);
            v23 = v21;
            if (v20 == v26)
              break;
            if (v20 < v26)
            {
              v21 = (_QWORD *)*v21;
              v5 = v23;
              if (!*v23)
                break;
            }
            else
            {
              if (v26 >= v20)
                break;
              v5 = v21 + 1;
              v21 = (_QWORD *)v21[1];
              if (!v21)
                break;
            }
          }
LABEL_40:
          *a3 = v23;
          return v5;
        }
        v22 = a5[2];
        while (1)
        {
          v23 = v21;
          v24 = *((_DWORD *)v21 + 8);
          if (v24 == 1)
          {
            v25 = *((_DWORD *)v23 + 10);
            if (v22 >= v25)
            {
              if (v25 >= v22)
                goto LABEL_40;
              goto LABEL_33;
            }
LABEL_27:
            v21 = (_QWORD *)*v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_40;
          }
          else
          {
            if (v24 > 1)
              goto LABEL_27;
LABEL_33:
            v5 = v23 + 1;
            v21 = (_QWORD *)v23[1];
            if (!v21)
              goto LABEL_40;
          }
        }
      }
    }
    if (v11)
    {
      *a3 = v13;
      return v13 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v6 < v7)
    goto LABEL_8;
  if (v7 >= v6)
    goto LABEL_6;
LABEL_15:
  v14 = a2[1];
  if (v14)
  {
    v15 = (uint64_t *)a2[1];
    do
    {
      v16 = v15;
      v15 = (uint64_t *)*v15;
    }
    while (v15);
  }
  else
  {
    v27 = a2;
    do
    {
      v16 = (uint64_t *)v27[2];
      v18 = *v16 == (_QWORD)v27;
      v27 = v16;
    }
    while (!v18);
  }
  if (v16 == v5)
    goto LABEL_56;
  v28 = *((_DWORD *)v16 + 8);
  if (v6 == v28)
  {
    if (v6 == 1)
    {
      v29 = a5[2];
      if (v29 >= *((_DWORD *)v16 + 10))
      {
        v30 = (_QWORD *)*v5;
        if (!*v5)
        {
          *a3 = v5;
          return a1 + 1;
        }
        goto LABEL_61;
      }
      goto LABEL_56;
    }
    goto LABEL_58;
  }
  if (v6 < v28)
  {
LABEL_56:
    if (v14)
    {
      *a3 = v16;
      return v16;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
  }
LABEL_58:
  v30 = (_QWORD *)*v5;
  if (*v5)
  {
    if (v6 == 1)
    {
      v29 = a5[2];
LABEL_61:
      v31 = v30;
      while (1)
      {
        v30 = v31;
        v32 = *((_DWORD *)v31 + 8);
        if (v32 == 1)
        {
          v33 = *((_DWORD *)v30 + 10);
          if (v29 >= v33)
          {
            if (v33 >= v29)
              goto LABEL_72;
            goto LABEL_68;
          }
LABEL_62:
          v31 = (_QWORD *)*v30;
          v5 = v30;
          if (!*v30)
            goto LABEL_72;
        }
        else
        {
          if (v32 > 1)
            goto LABEL_62;
LABEL_68:
          v5 = v30 + 1;
          v31 = (_QWORD *)v30[1];
          if (!v31)
            goto LABEL_72;
        }
      }
    }
    v34 = *((_DWORD *)v30 + 8);
    while (v6 != v34)
    {
      if (v6 < v34)
      {
        v35 = *v30;
        v5 = v30;
        if (!*v30)
          break;
      }
      else
      {
        if (v34 >= v6)
          break;
        v5 = v30 + 1;
        v35 = v30[1];
        if (!v35)
          break;
      }
      v34 = *(_DWORD *)(v35 + 32);
      v30 = (_QWORD *)v35;
    }
  }
  else
  {
    v30 = a1 + 1;
  }
LABEL_72:
  *a3 = v30;
  return v5;
}

_QWORD *boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = &unk_251CB89F0;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_24B85CA18(void *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  __cxa_begin_catch(a1);
  if (v1)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(v1 + 3), (_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_24B85CAE0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(v1 + 3), (_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  BOOL v13;
  uint64_t **v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  uint64_t **v29;
  BOOL v30;
  BOOL v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD *v45;

  v6 = a1 + 4;
  v5 = (uint64_t *)a1[4];
  if (!v5)
  {
    v23 = a1[10];
    if ((uint64_t *)v23 != *a3)
      goto LABEL_55;
    v19 = *(uint64_t **)(v23 + 8);
    v9 = v6;
    v24 = (uint64_t **)(v6 - 1);
    if (v19 != a1)
    {
LABEL_46:
      v45 = a2;
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(v24, a2, (uint64_t)&std::piecewise_construct, &v45)[6] = v19;
      goto LABEL_55;
    }
    goto LABEL_31;
  }
  v7 = *a2;
  v8 = a2[2];
  v9 = v6;
  v10 = v5;
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        v16 = *((_DWORD *)v10 + 8);
        v17 = v16 < 1;
        if (v16 == 1)
          v17 = *((_DWORD *)v10 + 10) < v8;
        if (!v17)
          break;
        v10 = (uint64_t *)v10[1];
        if (!v10)
          goto LABEL_19;
      }
      v9 = v10;
      v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  else
  {
    do
    {
      v11 = *((_DWORD *)v10 + 8);
      v12 = v11 == v7;
      v13 = v11 < v7;
      if (v11 >= v7)
        v14 = (uint64_t **)v10;
      else
        v14 = (uint64_t **)(v10 + 1);
      if (v13)
        v15 = v9;
      else
        v15 = v10;
      if (v12)
      {
        v14 = (uint64_t **)v10;
        v9 = v10;
      }
      else
      {
        v9 = v15;
      }
      v10 = *v14;
    }
    while (*v14);
  }
LABEL_19:
  v18 = v9[6];
  if ((uint64_t *)v18 == *a3)
  {
    v19 = *(uint64_t **)(v18 + 8);
    v20 = v6;
    if (v7 == 1)
    {
      v21 = v5;
      while (1)
      {
        v22 = *((_DWORD *)v21 + 8);
        if (v22 == 1)
        {
          if (v8 < *((_DWORD *)v21 + 10))
            goto LABEL_27;
LABEL_22:
          v21 = (uint64_t *)v21[1];
          if (!v21)
            goto LABEL_44;
        }
        else
        {
          if (v22 <= 1)
            goto LABEL_22;
LABEL_27:
          v20 = v21;
          v21 = (uint64_t *)*v21;
          if (!v21)
            goto LABEL_44;
        }
      }
    }
    v27 = v5;
    do
    {
      v28 = *((_DWORD *)v27 + 8);
      v29 = (uint64_t **)(v27 + 1);
      v30 = v7 == v28;
      v31 = v7 < v28;
      if (v7 >= v28)
        v32 = (uint64_t **)(v27 + 1);
      else
        v32 = (uint64_t **)v27;
      if (!v31)
        v27 = v20;
      if (v30)
        v32 = v29;
      else
        v20 = v27;
      v27 = *v32;
    }
    while (*v32);
LABEL_44:
    if (v20 == v6)
    {
      v24 = (uint64_t **)(v6 - 1);
      if (v19 != a1)
        goto LABEL_46;
    }
    else
    {
      v24 = (uint64_t **)(v6 - 1);
      if (v19 != (uint64_t *)v20[6])
        goto LABEL_46;
    }
LABEL_31:
    v25 = (uint64_t *)v9[1];
    if (v25)
    {
      do
      {
        v26 = v25;
        v25 = (uint64_t *)*v25;
      }
      while (v25);
    }
    else
    {
      v33 = v9;
      do
      {
        v26 = (uint64_t *)v33[2];
        v12 = *v26 == (_QWORD)v33;
        v33 = v26;
      }
      while (!v12);
    }
    if (*v24 == v9)
      *v24 = v26;
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v5, v9);
    operator delete(v9);
  }
LABEL_55:
  v34 = *a3;
  v35 = **a3;
  v36 = (*a3)[1];
  *(_QWORD *)(v35 + 8) = v36;
  *(_QWORD *)v34[1] = v35;
  --a1[2];
  v37 = (unsigned int *)v34[3];
  if (v37)
  {
    v38 = v37 + 2;
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 16))(v37);
      v41 = v37 + 3;
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
        (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 24))(v37);
    }
  }
  operator delete(v34);
  return v36;
}

void boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>(_DWORD *a1, _QWORD *a2)
{
  int v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  __int128 v16;

  v2 = a1[7] - 1;
  a1[7] = v2;
  if (!v2)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 40))(&v16);
    v4 = a2[22];
    if (v4 == a2[20] && v4 != -1)
    {
      if (4 * v4 <= (unint64_t)(v4 + 1))
        v5 = v4 + 1;
      else
        v5 = 4 * v4;
      boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl((uint64_t)a2, v5);
      v4 = a2[22];
    }
    v6 = *((_QWORD *)&v16 + 1);
    *(_OWORD *)(a2[21] + 16 * v4) = v16;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      v4 = a2[22];
    }
    a2[22] = v4 + 1;
    v9 = (unsigned int *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
  }
}

void sub_24B85CF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::shared_ptr<void>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  int v9;
  uint64_t **v10;
  int v11;
  int v12;
  _QWORD *v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  int v18;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    if (*a2 != 1)
    {
      v18 = *((_DWORD *)v6 + 8);
      if (v8 == v18)
        return (uint64_t **)v6;
      v10 = (uint64_t **)a1[1];
      while (1)
      {
        if (v8 < v18)
        {
          v6 = *v10;
          v7 = v10;
          if (!*v10)
            goto LABEL_13;
        }
        else
        {
          if (v18 >= v8)
            return v10;
          v6 = v10[1];
          if (!v6)
          {
LABEL_11:
            v7 = v10 + 1;
            goto LABEL_13;
          }
        }
        v18 = *((_DWORD *)v6 + 8);
        v10 = (uint64_t **)v6;
        if (v8 == v18)
          return (uint64_t **)v6;
      }
    }
    v9 = a2[2];
    while (1)
    {
      v10 = (uint64_t **)v6;
      v11 = *((_DWORD *)v6 + 8);
      if (v11 == 1)
      {
        v12 = *((_DWORD *)v6 + 10);
        if (v9 >= v12)
        {
          if (v12 >= v9)
            return v10;
          goto LABEL_10;
        }
LABEL_4:
        v6 = (uint64_t *)*v6;
        v7 = v10;
        if (!*v10)
          goto LABEL_13;
      }
      else
      {
        if (v11 > 1)
          goto LABEL_4;
LABEL_10:
        v6 = (uint64_t *)v6[1];
        if (!v6)
          goto LABEL_11;
      }
    }
  }
  v10 = a1 + 1;
LABEL_13:
  v13 = operator new(0x38uLL);
  v14 = *((_DWORD *)*a4 + 2);
  v13[4] = **a4;
  *((_DWORD *)v13 + 10) = v14;
  v13[6] = 0;
  *v13 = 0;
  v13[1] = 0;
  v13[2] = v10;
  *v7 = v13;
  v15 = (uint64_t *)**a1;
  v16 = v13;
  if (v15)
  {
    *a1 = v15;
    v16 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v13;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_10;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (!v2)
  {
    v5 = 1;
    v6 = (uint64_t **)v3[2];
    v7 = *v6;
    if (*v6 == v3)
      goto LABEL_6;
LABEL_11:
    v6[1] = (uint64_t *)v2;
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
    goto LABEL_12;
  }
LABEL_10:
  v5 = 0;
  *(_QWORD *)(v2 + 16) = v3[2];
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 != v3)
    goto LABEL_11;
LABEL_6:
  *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    v7 = v6[1];
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
LABEL_12:
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
    goto LABEL_16;
  }
  v7 = 0;
  result = (uint64_t *)v2;
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
    goto LABEL_12;
LABEL_16:
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 != v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v16 = (_QWORD *)*v7;
      if (*v7)
        goto LABEL_48;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v20 = (uint64_t *)v7[1];
      *v14 = v20;
      if (v20)
        v20[2] = (uint64_t)v14;
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      v14[2] = v7;
      if (result == (uint64_t *)v14)
        result = v7;
      v7 = *v14;
      v16 = (_QWORD *)**v14;
      if (v16)
      {
LABEL_48:
        if (!*((_BYTE *)v16 + 24))
          goto LABEL_71;
      }
    }
    v21 = (uint64_t *)v7[1];
    if (v21 && !*((_BYTE *)v21 + 24))
    {
      if (v16 && !*((_BYTE *)v16 + 24))
      {
LABEL_71:
        v21 = v7;
      }
      else
      {
        *((_BYTE *)v21 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = *v21;
        v7[1] = *v21;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v21[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
        *v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        v16 = v7;
      }
      v27 = (uint64_t *)v21[2];
      *((_BYTE *)v21 + 24) = *((_BYTE *)v27 + 24);
      *((_BYTE *)v27 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v28 = *v27;
      v29 = *(_QWORD *)(*v27 + 8);
      *v27 = v29;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      *(_QWORD *)(v28 + 16) = v27[2];
      *(_QWORD *)(v27[2] + 8 * (*(_QWORD *)v27[2] != (_QWORD)v27)) = v28;
      *(_QWORD *)(v28 + 8) = v27;
      v27[2] = v28;
      return result;
    }
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
LABEL_24:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v15 = (_QWORD *)*v7;
    if (!*v7)
    {
LABEL_38:
      v19 = (uint64_t *)v7[1];
      if (v19 && !*((_BYTE *)v19 + 24))
        goto LABEL_67;
      *((_BYTE *)v7 + 24) = 0;
      v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        v12 = result;
LABEL_61:
        *((_BYTE *)v12 + 24) = 1;
        return result;
      }
      if (!*((_BYTE *)v12 + 24))
        goto LABEL_61;
      goto LABEL_24;
    }
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v17 = v14[1];
    v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18)
      v18[2] = (uint64_t)v14;
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
    *v17 = (uint64_t)v14;
    v14[2] = v17;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
    v15 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_38;
  }
  if (*((_BYTE *)v15 + 24))
    goto LABEL_38;
  v19 = (uint64_t *)v7[1];
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_67:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v23 = v15[1];
    *v7 = v23;
    if (v23)
      *(_QWORD *)(v23 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v19 = v7;
  }
  v24 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v24 + 24);
  *(_BYTE *)(v24 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v25 = *(uint64_t **)(v24 + 8);
  v26 = *v25;
  *(_QWORD *)(v24 + 8) = *v25;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  v25[2] = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v25;
  *v25 = v24;
  *(_QWORD *)(v24 + 16) = v25;
  return result;
}

void boost::signals2::detail::connection_body_base::~connection_body_base(boost::signals2::detail::connection_body_base *this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *(_QWORD *)this = &unk_251CB86B8;
  v1 = (unsigned int *)*((_QWORD *)this + 2);
  if (v1)
  {
    v2 = v1 + 3;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
  }
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  _QWORD *v1;

  v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(a1);
  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  __int128 v2;
  pthread_mutex_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int i;
  unsigned int v10;
  uint64_t v11;
  char v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  _OWORD v33[10];
  unint64_t v34;
  void *__p;
  uint64_t v36;
  pthread_mutex_t *v37;
  _QWORD v38[4];

  v38[3] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[8] = v2;
  v33[9] = v2;
  v33[6] = v2;
  v33[7] = v2;
  v33[4] = v2;
  v33[5] = v2;
  v33[2] = v2;
  v33[3] = v2;
  v33[0] = v2;
  v33[1] = v2;
  v3 = *(pthread_mutex_t **)(a1 + 48);
  v34 = 10;
  __p = v33;
  v36 = 0;
  v37 = v3;
  pthread_mutex_lock(v3);
  v4 = *(uint64_t **)(a1 + 32);
  if (!v4)
    goto LABEL_40;
  v5 = *v4;
  if (*v4 == v4[1])
    goto LABEL_40;
  do
  {
    memset(v38, 170, 24);
    v6 = *(_DWORD *)v5 ^ (*(int *)v5 >> 31);
    if (v6 == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v5 + 8) + 16))(&v32);
      v38[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      LODWORD(v38[0]) = 1;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v11 = *(_QWORD *)(v5 + 16);
        if (!v11)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v11 + 8)))
          goto LABEL_27;
LABEL_21:
        v13 = 0;
        if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v6 != 1)
    {
      LODWORD(v38[0]) = 0;
      v38[1] = 0;
      v38[2] = 0;
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(v5 + 16);
    if (!v7)
    {
LABEL_25:
      v38[1] = 0;
      v38[2] = v7;
      LODWORD(v38[0]) = 0;
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v8 = (unsigned int *)(v7 + 8);
    for (i = *(_DWORD *)(v7 + 8); ; i = v10)
    {
      if (!i)
      {
        v7 = 0;
        goto LABEL_25;
      }
      v10 = __ldxr(v8);
      if (v10 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v8))
        break;
    }
    v38[1] = *(_QWORD *)(v5 + 8);
    v38[2] = v7;
    LODWORD(v38[0]) = 0;
    if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 24))(*(_QWORD *)(v5 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v33);
    }
    v13 = 1;
    if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
    {
LABEL_30:
      v14 = (unsigned int *)v38[2];
      if (v38[2])
      {
        v15 = (unsigned int *)(v38[2] + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
          v18 = v14 + 3;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v38[1])
      (*(void (**)(_QWORD))(*(_QWORD *)v38[1] + 8))(v38[1]);
LABEL_38:
    if ((v13 & 1) != 0)
      break;
    v5 += 24;
  }
  while (v5 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
LABEL_40:
  v21 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v37);
  v22 = (char *)__p;
  if (__p)
  {
    if (v36 - 1 >= 0)
    {
      v23 = (char *)__p + 16 * v36;
      do
      {
        v24 = (unsigned int *)*((_QWORD *)v23 - 1);
        if (v24)
        {
          v25 = v24 + 2;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
            v28 = v24 + 3;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
              (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
          }
        }
        v23 -= 16;
      }
      while (v23 > v22);
    }
    if (v34 >= 0xB)
      operator delete(__p);
  }
  return v21 != 0;
}

void sub_24B85D8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(result + 40);
  v2 = (_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *(unsigned int **)(result + 40);
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        v10 = v6 + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
      }
    }
  }
  else
  {
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
  }
  return result;
}

_QWORD *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[24 * v7];
    a1[1] = std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_24B85DB74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  if (*(_QWORD *)v1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

uint64_t std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v17;

  v4 = a4;
  v17 = a4;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v9 = *(_DWORD *)v6 ^ (*(int *)v6 >> 31);
      if (v9 == 2)
      {
        *(_QWORD *)(v4 + 8) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 8) + 32))(*(_QWORD *)(v6 + 8));
        v7 = v17;
        goto LABEL_4;
      }
      if (v9 == 1)
      {
        *(_QWORD *)(v4 + 8) = *(_QWORD *)(v6 + 8);
        v10 = *(_QWORD *)(v6 + 16);
        *(_QWORD *)(v4 + 16) = v10;
        v7 = v4;
        if (!v10)
          goto LABEL_4;
        v11 = (unsigned int *)(v10 + 12);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      else
      {
        *(_QWORD *)(v4 + 8) = *(_QWORD *)(v6 + 8);
        v13 = *(_QWORD *)(v6 + 16);
        *(_QWORD *)(v4 + 16) = v13;
        v7 = v4;
        if (!v13)
          goto LABEL_4;
        v14 = (unsigned int *)(v13 + 12);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v7 = v4;
LABEL_4:
      v8 = *(_DWORD *)v6;
      v6 += 24;
      *(_DWORD *)v4 = v8 ^ (v8 >> 31);
      v4 = v7 + 24;
      v17 = v7 + 24;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_24B85DCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD **std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>::operator()[abi:ne180100](_QWORD **result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v1 = *result[2];
  v2 = *result[1];
  if (v1 != v2)
  {
    v3 = *result[2];
    do
    {
      v4 = *(_DWORD *)(v3 - 24);
      v3 -= 24;
      v5 = v4 ^ (v4 >> 31);
      if (v5 == 2)
      {
        result = *(_QWORD ***)(v1 - 16);
        if (result)
          result = (_QWORD **)((uint64_t (*)(_QWORD **))(*result)[1])(result);
        goto LABEL_3;
      }
      if (v5 == 1)
      {
        result = *(_QWORD ***)(v1 - 8);
        if (!result)
          goto LABEL_3;
        v6 = (unsigned int *)result + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (v8)
          goto LABEL_3;
      }
      else
      {
        result = *(_QWORD ***)(v1 - 8);
        if (!result)
          goto LABEL_3;
        v9 = (unsigned int *)result + 3;
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (v11)
          goto LABEL_3;
      }
      result = (_QWORD **)((uint64_t (*)(_QWORD **))(*result)[3])(result);
LABEL_3:
      v1 = v3;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::~variant(uint64_t a1)
{
  int v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  if (v2 != 2)
  {
    if (v2 == 1)
    {
      v3 = *(unsigned int **)(a1 + 16);
      if (!v3)
        return a1;
      v4 = v3 + 3;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (v6)
        return a1;
    }
    else
    {
      v3 = *(unsigned int **)(a1 + 16);
      if (!v3)
        return a1;
      v9 = v3 + 3;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (v11)
        return a1;
    }
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    return a1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

unsigned int *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100](unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  if (v4 != a2)
  {
    v5 = *((_QWORD *)result + 1);
    do
    {
      v6 = *(_DWORD *)(v5 - 24);
      v5 -= 24;
      v7 = v6 ^ (v6 >> 31);
      if (v7 == 2)
      {
        result = *(unsigned int **)(v4 - 16);
        if (result)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        goto LABEL_3;
      }
      if (v7 == 1)
      {
        result = *(unsigned int **)(v4 - 8);
        if (!result)
          goto LABEL_3;
        v8 = result + 3;
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (v10)
          goto LABEL_3;
      }
      else
      {
        result = *(unsigned int **)(v4 - 8);
        if (!result)
          goto LABEL_3;
        v11 = result + 3;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (v13)
          goto LABEL_3;
      }
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 24))(result);
LABEL_3:
      v4 = v5;
    }
    while (v5 != a2);
  }
  *((_QWORD *)v3 + 1) = a2;
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::dispose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(v1 + 32, v1 + 32, 2);
      }
      *(_QWORD *)(v1 + 24) = 0;
    }
    if (*(_QWORD *)v1)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
      operator delete(*(void **)v1);
    }
    operator delete((void *)v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *a1 = off_251CB8650;
  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  v9 = (unsigned int *)a1[5];
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v13 = v9 + 3;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  *a1 = &unk_251CB86B8;
  v16 = (unsigned int *)a1[2];
  if (v16)
  {
    v17 = v16 + 3;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
  }
  return a1;
}

uint64_t boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;

  if (*(_DWORD *)a1 == *(int *)a1 >> 31)
  {
    v2 = *(unsigned int **)(a1 + 16);
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    return a1;
  }
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(BOOL)>::~function(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  NSObject *v6;
  void *v7;
  const void *v8;
  const char *v9;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v9 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x800000024B95095FLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x800000024B95095FLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      v8 = (const void *)*((_QWORD *)a2 + 1);
      if (v8)
LABEL_9:
        _Block_release(v8);
    }
  }
  else
  {
    v6 = *(NSObject **)a1;
    v7 = *(void **)(a1 + 8);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    if (v7)
    {
      v7 = _Block_copy(v7);
      v6 = *(NSObject **)a2;
    }
    *((_QWORD *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      v8 = *(const void **)(a1 + 8);
      if (v8)
        goto LABEL_9;
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>,void,BOOL>::invoke(uint64_t a1, char a2)
{
  const void *v3;
  NSObject *v4;
  void *v5;
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  const void *v14;
  void *v15;
  const void *v16;
  void *v17;
  char v18;
  _BYTE *v19;
  _QWORD *v20;
  void *v21;
  void (*v22)(_QWORD *, _QWORD *, uint64_t);
  _QWORD v23[3];
  _QWORD block[6];

  v4 = *(NSObject **)a1;
  v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    v6 = 0;
    goto LABEL_10;
  }
  v5 = _Block_copy(v3);
  v6 = v5;
  if (!v5)
  {
LABEL_10:
    v18 = 1;
LABEL_11:
    v17 = 0;
    v23[0] = 0;
    goto LABEL_21;
  }
  v7 = _Block_copy(v5);
  v8 = v7;
  if (!v7)
  {
    v18 = 0;
    goto LABEL_11;
  }
  v9 = _Block_copy(v7);
  v10 = v9;
  if (v9)
  {
    v11 = _Block_copy(v9);
    v12 = v11;
    if (v11)
    {
      v13 = _Block_copy(v11);
      v14 = v13;
      if (v13)
      {
        v15 = _Block_copy(v13);
        v16 = v15;
        if (v15)
        {
          v17 = _Block_copy(v15);
          v23[0] = v17;
          _Block_release(v16);
        }
        else
        {
          v17 = 0;
          v23[0] = 0;
        }
        _Block_release(v14);
      }
      else
      {
        v17 = 0;
        v23[0] = 0;
      }
      _Block_release(v12);
    }
    else
    {
      v17 = 0;
      v23[0] = 0;
    }
    _Block_release(v10);
  }
  else
  {
    v17 = 0;
    v23[0] = 0;
  }
  _Block_release(v8);
  v18 = 0;
LABEL_21:
  v19 = operator new(1uLL);
  *v19 = a2;
  v20 = operator new(0x20uLL);
  *v20 = boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable;
  if (v17)
    v21 = _Block_copy(v17);
  else
    v21 = 0;
  v20[1] = v21;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvbEEEb_block_invoke;
  block[3] = &__block_descriptor_tmp_13;
  block[4] = v20;
  block[5] = v19;
  dispatch_async(v4, block);
  if (boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable)
  {
    if ((boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable & 1) == 0)
    {
      v22 = *(void (**)(_QWORD *, _QWORD *, uint64_t))((unint64_t)boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v22)
        v22(v23, v23, 2);
    }
  }
  if ((v18 & 1) == 0)
    _Block_release(v6);
}

void sub_24B85E594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const void *v9;
  const void *v10;
  char v11;

  if (v10)
    _Block_release(v10);
  if ((v11 & 1) == 0)
    _Block_release(v9);
  _Unwind_Resume(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvbEEEb_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  void (*v5)(uint64_t *, uint64_t *, uint64_t);
  void *v6;
  std::runtime_error v7;

  v1 = *(_QWORD **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v7, "call to empty boost::function");
    v7.__vftable = (std::runtime_error_vtbl *)&unk_251CB8BE8;
    boost::throw_exception<boost::bad_function_call>(&v7);
  }
  (*(void (**)(_QWORD *, _QWORD))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1, **(unsigned __int8 **)(a1 + 40));
  v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5)
          v5(v3 + 1, v3 + 1, 2);
      }
      *v3 = 0;
    }
    operator delete(v3);
  }
  v6 = *(void **)(a1 + 40);
  if (v6)
    operator delete(v6);
}

void sub_24B85E690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::bad_function_call>(const std::runtime_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_24B85E6E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(_QWORD *)a1 = &unk_251CB8BB8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &unk_251CB8B40;
  *(_QWORD *)(a1 + 8) = &unk_251CB8B70;
  *(_QWORD *)(a1 + 24) = &unk_251CB8B98;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_251CB8C10;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

char *boost::wrapexcept<boost::bad_function_call>::clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_251CB8BB8;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *((_QWORD *)v2 + 1) = &unk_251CB8BE8;
  *((_QWORD *)v2 + 3) = &unk_251CB8C10;
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v2 + 4) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &unk_251CB8B40;
  *((_QWORD *)v2 + 1) = &unk_251CB8B70;
  *((_QWORD *)v2 + 3) = &unk_251CB8B98;
  boost::exception_detail::copy_boost_exception((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_24B85E874(_Unwind_Exception *a1)
{
  void *v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24B85E890(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_24B85E8E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_251CB8C10;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  operator delete((void *)a1);
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_251CB8C10;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_251CB8C10;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
  operator delete(&this[-1].__imp_);
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_251CB8C10;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_251CB8C10;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete(&a1[-2].__imp_);
}

void boost::bad_function_call::~bad_function_call(std::runtime_error *this)
{
  void *v1;

  std::runtime_error::~runtime_error(this);
  operator delete(v1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_251CB8BB8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &unk_251CB8BE8;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_251CB8C10;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_251CB8B40;
  *(_QWORD *)(a1 + 8) = &unk_251CB8B70;
  *(_QWORD *)(a1 + 24) = &unk_251CB8B98;
  return a1;
}

void sub_24B85EB74(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    v5 = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    result = *(_QWORD *)(a1 + 8);
    if (!result)
      goto LABEL_9;
    goto LABEL_8;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
  v5 = v7;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
LABEL_8:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
LABEL_9:
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_24B85EC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(BOOL)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  void *v6;
  void *v7;
  const char *v8;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x800000024B95099DLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x800000024B95099DLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
LABEL_9:
        _Block_release(v7);
    }
  }
  else
  {
    v6 = *a1;
    if (*a1)
      v6 = _Block_copy(v6);
    *(_QWORD *)a2 = v6;
    if (a3 == 1)
    {
      v7 = *a1;
      if (*a1)
        goto LABEL_9;
    }
  }
}

uint64_t boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(BOOL)>,void,BOOL>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
}

uint64_t boost::function1<void,BOOL>::move_assign(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_24B85EE5C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_24B85EE6C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::function1<void,BOOL>::~function1(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

int *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  int *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (int *)&v7[24 * v3];
  v9 = &v7[24 * v6];
  v10 = v8 + 2;
  v11 = (_QWORD *)(a2 + 8);
  v12 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  if (v12 == 2)
  {
    *v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 32))(*v11);
    v12 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  }
  else
  {
    if (v12 != 1)
      v12 = 0;
    *(_OWORD *)v10 = *(_OWORD *)v11;
    *v11 = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *v8 = v12;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>>((uint64_t)(a1 + 2), a1[1], (int *)a1[1], *a1, (int *)*a1, (uint64_t)v8, (uint64_t)v8);
  v14 = (char *)*a1;
  v13 = (char *)a1[1];
  *a1 = v15;
  a1[1] = (uint64_t)(v8 + 6);
  a1[2] = (uint64_t)v9;
  if (v13 == v14)
  {
    if (v14)
      goto LABEL_18;
    return v8 + 6;
  }
  do
  {
    v26 = v13 - 24;
    v17 = *((_DWORD *)v13 - 6) ^ (*((int *)v13 - 6) >> 31);
    if (v17 == 2)
    {
      v22 = *((_QWORD *)v13 - 2);
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
    else if (v17 == 1)
    {
      v18 = (unsigned int *)*((_QWORD *)v13 - 1);
      if (v18)
      {
        v19 = v18 + 3;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
          goto LABEL_27;
      }
    }
    else
    {
      v18 = (unsigned int *)*((_QWORD *)v13 - 1);
      if (v18)
      {
        v23 = v18 + 3;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
LABEL_27:
          (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 24))(v18);
      }
    }
    v13 = v26;
  }
  while (v26 != v14);
  if (!v14)
    return v8 + 6;
LABEL_18:
  operator delete(v14);
  return v8 + 6;
}

void sub_24B85F100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int *v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;

  v7 = a7;
  v19 = a6;
  v20 = a7;
  if (a3 != a5)
  {
    v9 = a3;
    do
    {
      v10 = *(v9 - 6);
      v9 -= 6;
      v11 = v10 ^ (v10 >> 31);
      if (v11 == 2)
      {
        *(_QWORD *)(v7 - 16) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 - 2) + 32))(*((_QWORD *)a3 - 2));
      }
      else if (v11 == 1)
      {
        *(_QWORD *)(v7 - 16) = *((_QWORD *)a3 - 2);
        v12 = *((_QWORD *)a3 - 1);
        *(_QWORD *)(v7 - 8) = v12;
        if (v12)
        {
          v13 = (unsigned int *)(v12 + 12);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
      }
      else
      {
        *(_QWORD *)(v7 - 16) = *((_QWORD *)a3 - 2);
        v15 = *((_QWORD *)a3 - 1);
        *(_QWORD *)(v7 - 8) = v15;
        if (v15)
        {
          v16 = (unsigned int *)(v15 + 12);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
      }
      *(_DWORD *)(v7 - 24) = *v9 ^ (*v9 >> 31);
      v7 = v20 - 24;
      v20 -= 24;
      a3 = v9;
    }
    while (v9 != a5);
    return v19;
  }
  return a6;
}

void sub_24B85F26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>>::operator()[abi:ne180100]((unsigned int *)a1);
  return a1;
}

unsigned int *std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>>::operator()[abi:ne180100](unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v1 = *(_QWORD *)(*((_QWORD *)result + 2) + 8);
  v2 = *(_QWORD *)(*((_QWORD *)result + 1) + 8);
  while (v1 != v2)
  {
    v3 = *(_DWORD *)v1 ^ (*(int *)v1 >> 31);
    if (v3 == 2)
    {
      result = *(unsigned int **)(v1 + 8);
      if (result)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
    else if (v3 == 1)
    {
      result = *(unsigned int **)(v1 + 16);
      if (result)
      {
        v4 = result + 3;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          goto LABEL_10;
      }
    }
    else
    {
      result = *(unsigned int **)(v1 + 16);
      if (result)
      {
        v7 = result + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
LABEL_10:
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 24))(result);
      }
    }
    v1 += 24;
  }
  return result;
}

unsigned int *std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__destruct_at_end[abi:ne180100](unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v4;
  int v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *((_QWORD *)result + 2);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v5 = *(_DWORD *)(v2 - 24);
      *((_QWORD *)v4 + 2) = v2 - 24;
      v6 = v5 ^ (v5 >> 31);
      if (v6 == 2)
      {
        result = *(unsigned int **)(v2 - 16);
        if (result)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        goto LABEL_3;
      }
      if (v6 == 1)
      {
        result = *(unsigned int **)(v2 - 8);
        if (!result)
          goto LABEL_3;
        v7 = result + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (v9)
          goto LABEL_3;
      }
      else
      {
        result = *(unsigned int **)(v2 - 8);
        if (!result)
          goto LABEL_3;
        v10 = result + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (v12)
          goto LABEL_3;
      }
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 24))(result);
LABEL_3:
      v2 = *((_QWORD *)v4 + 2);
    }
    while (v2 != a2);
  }
  return result;
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::~foreign_weak_ptr_impl(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_251CB8818;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::~foreign_weak_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_251CB8818;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::lock(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
LABEL_6:
  v7 = operator new(0x18uLL);
  *v7 = &off_251CB8878;
  v7[1] = v6;
  v7[2] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *a2 = v7;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_24B85F5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::expired(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  return !v1 || *(_QWORD *)(v1 + 8) == -1;
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_251CB8818;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<data::TransportService::State>>::~foreign_shared_ptr_impl(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_251CB8878;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<data::TransportService::State>>::~foreign_shared_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_251CB8878;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<data::TransportService::State>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_251CB8878;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void data::TransportService::State::unblockThrottling_sync(data::TransportService::State *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  ApplePDPHelperInterface *Instance;
  NSObject *v12;
  int v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13) = 0;
    _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Disabling throttling", (uint8_t *)&v13, 2u);
  }
  if (*((_QWORD *)this + 18))
  {
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I Stop Listening for UI events", (uint8_t *)&v13, 2u);
    }
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 18) = 0;
    *((_QWORD *)this + 19) = 0;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  v7 = *((_QWORD *)this + 20);
  if (v7)
  {
    dispatch_source_cancel(v7);
    v8 = *((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    if (v8)
      dispatch_release(v8);
    v9 = *((_QWORD *)this + 5);
    v7 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v7)
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_24B855000, v9, OS_LOG_TYPE_DEFAULT, "#I Limit timer stopped", (uint8_t *)&v13, 2u);
    }
  }
  if (*((_DWORD *)this + 26) == 1)
  {
    if (*((_DWORD *)this + 28) == 1)
    {
      v10 = *((_QWORD *)this + 5);
      v7 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v7)
      {
        v13 = 136315394;
        v14 = "Throttled";
        v15 = 2080;
        v16 = "Idle";
        _os_log_impl(&dword_24B855000, v10, OS_LOG_TYPE_DEFAULT, "#I State changing from %s to %s", (uint8_t *)&v13, 0x16u);
      }
      *((_DWORD *)this + 28) = 0;
    }
    Instance = (ApplePDPHelperInterface *)ApplePDPHelperInterface::getInstance((ApplePDPHelperInterface *)v7);
    if ((ApplePDPHelperInterface::activateLowPowerPDPThrottle(Instance) & 1) == 0)
    {
      v12 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v13) = 0;
        _os_log_error_impl(&dword_24B855000, v12, OS_LOG_TYPE_ERROR, "Failed to disable flow for throttling", (uint8_t *)&v13, 2u);
      }
    }
  }
}

void ___ZN4data16TransportService5State13enterLowPowerEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  unsigned int v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 160);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *(NSObject **)(v1 + 160);
    *(_QWORD *)(v1 + 160) = 0;
    if (v3)
      dispatch_release(v3);
    v4 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9) = 0;
      _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I Limit timer stopped", (uint8_t *)&v9, 2u);
    }
  }
  v5 = *(_DWORD *)(v1 + 112);
  if (v5 >= 2)
  {
    if (v5 == 2)
      return;
  }
  else
  {
    v6 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = "???";
      if (!v5)
        v7 = "Idle";
      if (v5 == 1)
        v7 = "Throttled";
      v9 = 136315394;
      v10 = v7;
      v11 = 2080;
      v12 = "LowPower";
      _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I State changing from %s to %s", (uint8_t *)&v9, 0x16u);
    }
    *(_DWORD *)(v1 + 112) = 2;
  }
  v8 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9) = 0;
    _os_log_impl(&dword_24B855000, v8, OS_LOG_TYPE_DEFAULT, "#I Entered low power", (uint8_t *)&v9, 2u);
  }
}

void ___ZN4data16TransportService5State12exitLowPowerEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  NSObject *v6;
  sys::UIObserver *v7;
  sys::UIObserver *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  _BYTE buf[22];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(v1 + 112);
  if ((v2 - 1) <= 1)
  {
    v3 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = "???";
      if (v2 == 1)
        v4 = "Throttled";
      if (v2 == 2)
        v4 = "LowPower";
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "Throttled";
      _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I State changing from %s to %s", buf, 0x16u);
    }
    *(_DWORD *)(v1 + 112) = 1;
    data::TransportService::State::startLimitTimer_sync((data::TransportService::State *)v1);
  }
  v5 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v5, OS_LOG_TYPE_DEFAULT, "#I Exited Low Power", buf, 2u);
  }
  if (!*(_QWORD *)(v1 + 144))
  {
    v6 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I Listening for UI events", buf, 2u);
    }
    pthread_mutex_lock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
    v7 = (sys::UIObserver *)xmmword_2579B8428;
    if (!(_QWORD)xmmword_2579B8428)
    {
      memset(buf, 170, 16);
      v8 = (sys::UIObserver *)operator new(0x40uLL);
      sys::UIObserver::UIObserver(v8);
      std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>((std::__shared_weak_count_vtbl **)buf, (std::__shared_weak_count_vtbl *)v8);
      v9 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v10 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_2579B8428 + 1);
      xmmword_2579B8428 = v9;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v7 = (sys::UIObserver *)xmmword_2579B8428;
    }
    v16 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_2579B8428 + 1);
    if (*((_QWORD *)&xmmword_2579B8428 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&xmmword_2579B8428 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
    sys::UIObserver::observe(v7, 1, (std::__shared_weak_count_vtbl **)&v28);
    v19 = v28;
    v28 = 0uLL;
    v20 = *(std::__shared_weak_count **)(v1 + 152);
    *(_OWORD *)(v1 + 144) = v19;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v16)
    {
      v26 = (unint64_t *)&v16->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
}

void sub_24B85FE70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
  _Unwind_Resume(a1);
}

void data::TransportService::State::startLimitTimer_sync(data::TransportService::State *this)
{
  dispatch_time_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  unint64_t v17;
  NSObject *v18;
  _QWORD handler[6];
  std::__shared_weak_count *v20;
  uint8_t buf[16];

  if (*((_DWORD *)this + 26) == 1)
  {
    v2 = dispatch_time(0, 1000000000 * *((unsigned int *)this + 27) + 500000000);
    v3 = *((_QWORD *)this + 20);
    if (v3)
    {
      dispatch_source_cancel(v3);
      v4 = *((_QWORD *)this + 20);
      *((_QWORD *)this + 20) = 0;
      if (v4)
        dispatch_release(v4);
      v5 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_24B855000, v5, OS_LOG_TYPE_DEFAULT, "#I Limit timer stopped", buf, 2u);
      }
    }
    v6 = dispatch_source_create(MEMORY[0x24BDACA18], 1uLL, 0, *((dispatch_queue_t *)this + 11));
    v7 = *((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = v6;
    if (v7)
    {
      dispatch_release(v7);
      v6 = *((_QWORD *)this + 20);
    }
    dispatch_source_set_timer(v6, v2, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v8 || (v9 = *((_QWORD *)this + 9), (v10 = std::__shared_weak_count::lock(v8)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v11 = v10;
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    v16 = *((_QWORD *)this + 20);
    handler[0] = MEMORY[0x24BDAC760];
    handler[1] = 1174405120;
    handler[2] = ___ZN4data16TransportService5State20startLimitTimer_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_24;
    handler[4] = this;
    handler[5] = v9;
    v20 = v11;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    dispatch_source_set_event_handler(v16, handler);
    dispatch_activate(*((dispatch_object_t *)this + 20));
    v18 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_24B855000, v18, OS_LOG_TYPE_DEFAULT, "#I Limit timer started", buf, 2u);
    }
    if (v20)
      std::__shared_weak_count::__release_weak(v20);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_251CB8920;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c58_ZTSNSt3__110shared_ptrIKN4data16TransportService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c58_ZTSNSt3__110shared_ptrIKN4data16TransportService5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN4data16TransportService5State20startLimitTimer_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  data::TransportService::State *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (data::TransportService::State *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *((_QWORD *)v3 + 5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I Limit timer expired", v9, 2u);
        }
        data::TransportService::State::unblockThrottling_sync(v3);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_24B860378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c54_ZTSNSt3__18weak_ptrIN4data16TransportService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSNSt3__18weak_ptrIN4data16TransportService5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN4data16TransportService5State9setConfigENS0_16ThrottlingConfigE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void **v4;
  int v5;
  int v6;
  NSObject *v7;
  _BOOL8 v8;
  ApplePDPHelperInterface *Instance;
  NSObject *v10;
  int v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  void **v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)
    && ((data::TransportService::ThrottlingConfig::asString((data::TransportService::ThrottlingConfig *)(a1 + 40), __p),
         v13 >= 0)
      ? (v4 = __p)
      : (v4 = (void **)__p[0]),
        *(_DWORD *)buf = 136315138,
        v15 = v4,
        _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I Config set to %s", buf, 0xCu),
        v13 < 0))
  {
    operator delete(__p[0]);
    v5 = *(_DWORD *)(v2 + 104);
    v6 = *(_DWORD *)(a1 + 40);
    if (v5 == v6)
      goto LABEL_13;
  }
  else
  {
    v5 = *(_DWORD *)(v2 + 104);
    v6 = *(_DWORD *)(a1 + 40);
    if (v5 == v6)
      goto LABEL_13;
  }
  *(_DWORD *)(v2 + 104) = v6;
  v7 = *(NSObject **)(v2 + 40);
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v6;
    _os_log_impl(&dword_24B855000, v7, OS_LOG_TYPE_DEFAULT, "#I Throttling %d", (uint8_t *)__p, 8u);
  }
  Instance = (ApplePDPHelperInterface *)ApplePDPHelperInterface::getInstance((ApplePDPHelperInterface *)v8);
  if ((ApplePDPHelperInterface::enableLowPowerPDPThrottle(Instance) & 1) == 0)
  {
    v10 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v6;
      _os_log_error_impl(&dword_24B855000, v10, OS_LOG_TYPE_ERROR, "Failed setting throttling to %d", (uint8_t *)__p, 8u);
    }
  }
  v5 = *(_DWORD *)(a1 + 40);
LABEL_13:
  if (v5 == 1)
  {
    v11 = *(_DWORD *)(a1 + 44);
    if (*(_DWORD *)(v2 + 108) != v11)
    {
      *(_DWORD *)(v2 + 108) = v11;
      if (*(_QWORD *)(v2 + 160))
        data::TransportService::State::startLimitTimer_sync((data::TransportService::State *)v2);
    }
  }
}

void ___ZNK4data16TransportService5State9dumpStateEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _BYTE *v3;
  _BOOL8 v4;
  uint64_t v5;
  const char *v6;
  int NumLowPowerPDPThrottleStats;
  NSObject *v8;
  _BYTE __p[14];
  __int16 v10;
  int v11;
  char v12;
  uint8_t buf[24];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    data::TransportService::ThrottlingConfig::asString((data::TransportService::ThrottlingConfig *)(v1 + 104), __p);
    if (v12 >= 0)
      v3 = __p;
    else
      v3 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Config: %s", buf, 0xCu);
    if (v12 < 0)
      operator delete(*(void **)__p);
    v2 = *(NSObject **)(v1 + 40);
  }
  v4 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    v5 = *(int *)(v1 + 112);
    if (v5 > 2)
      v6 = "???";
    else
      v6 = off_251CB8C20[v5];
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v6;
    _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Low Power State %s", __p, 0xCu);
  }
  memset(buf, 0, 12);
  ApplePDPHelperInterface::getInstance((ApplePDPHelperInterface *)v4);
  NumLowPowerPDPThrottleStats = ApplePDPHelperInterface::getNumLowPowerPDPThrottleStats();
  v8 = *(NSObject **)(v1 + 40);
  if (NumLowPowerPDPThrottleStats)
  {
    if (os_log_type_enabled(*(os_log_t *)(v1 + 40), OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = 67109632;
      *(_DWORD *)&__p[4] = *(_DWORD *)buf;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = *(_DWORD *)&buf[4];
      v10 = 1024;
      v11 = *(_DWORD *)&buf[8];
      _os_log_impl(&dword_24B855000, v8, OS_LOG_TYPE_DEFAULT, "#I Blocked outgoing packets: %u, non-baseband wakes: %u, incoming traffic deactivations: %u", __p, 0x14u);
    }
  }
  else if (os_log_type_enabled(*(os_log_t *)(v1 + 40), OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__p = 0;
    _os_log_error_impl(&dword_24B855000, v8, OS_LOG_TYPE_ERROR, "Failed to query throttle stats", __p, 2u);
  }
}

void ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke(uint64_t a1)
{
  data::TransportService::State *v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(data::TransportService::State **)(a1 + 32);
  v2 = *((_QWORD *)v1 + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Unblocking throttling", v3, 2u);
  }
  data::TransportService::State::unblockThrottling_sync(v1);
}

uint64_t __cxx_global_var_init_3()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<sys::UIObserver>::~PthreadMutexGuardPolicy, &ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance, &dword_24B855000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_24B855000);
  }
  return result;
}

void AppleBasebandManagerInitServer(const char *a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *size;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  size_t v28;
  std::string::size_type v29;
  std::string *p_dst;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::string __dst;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51[3];
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  std::string v57;

  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  v55 = *a2;
  v56 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)a2[3];
  v53 = a2[2];
  v54 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)a2[5];
  v51[2] = a2[4];
  v52 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (v4)
  {
    v51[0] = v4;
    v51[1] = (uint64_t)v5;
    if (v5)
    {
      v14 = (unint64_t *)&v5->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    abm::AWDHelperSetConnection(v51);
    if (v5)
    {
      v16 = (unint64_t *)&v5->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  v49 = 0xAAAAAAAAAAAAAAAALL;
  v50 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v18 = (uint64_t *)off_2579B8480;
  if (!off_2579B8480)
  {
    ABMServer::create_default_global(&v57);
    v19 = *(_OWORD *)&v57.__r_.__value_.__l.__data_;
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = 0uLL;
    v20 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
    off_2579B8480 = v19;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    size = (std::__shared_weak_count *)v57.__r_.__value_.__l.__size_;
    if (v57.__r_.__value_.__l.__size_)
    {
      v24 = (unint64_t *)(v57.__r_.__value_.__l.__size_ + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v18 = (uint64_t *)off_2579B8480;
  }
  v49 = (unint64_t)v18;
  v50 = *(&off_2579B8480 + 1);
  if (*(&off_2579B8480 + 1))
  {
    v26 = (unint64_t *)(*(&off_2579B8480 + 1) + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  if (!v18)
    goto LABEL_47;
  v28 = strlen(a1);
  if (v28 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v33 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v33 = v28 | 7;
    v34 = v33 + 1;
    p_dst = (std::string *)operator new(v33 + 1);
    __dst.__r_.__value_.__l.__size_ = v29;
    __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_43:
    memcpy(p_dst, a1, v29);
    p_dst->__r_.__value_.__s.__data_[v29] = 0;
    v31 = *v18;
    v32 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_39;
LABEL_44:
    std::string::__init_copy_ctor_external(&v57, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    goto LABEL_45;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v28;
  p_dst = &__dst;
  if (v28)
    goto LABEL_43;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  v31 = *v18;
  v32 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_44;
LABEL_39:
  v57 = __dst;
LABEL_45:
  ABMServerInternal::init(v31, (uint64_t)&v57, (uint64_t)a2);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if ((v32 & 0x80000000) == 0)
      goto LABEL_47;
  }
  else if ((v32 & 0x80000000) == 0)
  {
    goto LABEL_47;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_47:
  abm::asString();
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v57;
  else
    v35 = (std::string *)v57.__r_.__value_.__r.__words[0];
  syslog(5, "%s hosting ABM with profile: %s", a1, (const char *)v35);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  v36 = (std::__shared_weak_count *)v50;
  if (v50)
  {
    v37 = (unint64_t *)(v50 + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v52;
  if (v52)
  {
    v40 = (unint64_t *)&v52->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v54;
  if (!v54)
    goto LABEL_66;
  v43 = (unint64_t *)&v54->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    v45 = v56;
    if (!v56)
      return;
  }
  else
  {
LABEL_66:
    v45 = v56;
    if (!v56)
      return;
  }
  v46 = (unint64_t *)&v45->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
}

void sub_24B860C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  uint64_t v21;

  operator delete(__p);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v21 - 96);
  _Unwind_Resume(a1);
}

BOOL AppleBasebandManagerStartServer(NSObject *a1)
{
  ABMServerInternal **v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BOOL8 result;
  _BOOL8 v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;

  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v2 = (ABMServerInternal **)off_2579B8480;
  if (!off_2579B8480)
  {
    ABMServer::create_default_global(&v17);
    v3 = v17;
    v17 = 0uLL;
    v4 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
    off_2579B8480 = v3;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v2 = (ABMServerInternal **)off_2579B8480;
  }
  v10 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
  if (*(&off_2579B8480 + 1))
  {
    v11 = (unint64_t *)(*(&off_2579B8480 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  result = ABMServerInternal::start(*v2, a1);
  v14 = result;
  if (v10)
  {
    v15 = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v14;
    }
  }
  return result;
}

void sub_24B860E58(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  _Unwind_Resume(a1);
}

BOOL AppleBasebandManagerStopServer(NSObject *a1)
{
  ABMServerInternal **v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BOOL8 result;
  _BOOL8 v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;

  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v2 = (ABMServerInternal **)off_2579B8480;
  if (!off_2579B8480)
  {
    ABMServer::create_default_global(&v17);
    v3 = v17;
    v17 = 0uLL;
    v4 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
    off_2579B8480 = v3;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v2 = (ABMServerInternal **)off_2579B8480;
  }
  v10 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
  if (*(&off_2579B8480 + 1))
  {
    v11 = (unint64_t *)(*(&off_2579B8480 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  result = ABMServerInternal::stop(*v2, a1);
  v14 = result;
  if (v10)
  {
    v15 = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v14;
    }
  }
  return result;
}

void sub_24B860FCC(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  _Unwind_Resume(a1);
}

BOOL AppleBasebandManagerShutdownServer(NSObject *a1)
{
  ABMServerInternal **v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BOOL8 result;
  _BOOL8 v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;

  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v2 = (ABMServerInternal **)off_2579B8480;
  if (!off_2579B8480)
  {
    ABMServer::create_default_global(&v17);
    v3 = v17;
    v17 = 0uLL;
    v4 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
    off_2579B8480 = v3;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v2 = (ABMServerInternal **)off_2579B8480;
  }
  v10 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
  if (*(&off_2579B8480 + 1))
  {
    v11 = (unint64_t *)(*(&off_2579B8480 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  result = ABMServerInternal::shutdown(*v2, a1);
  v14 = result;
  if (v10)
  {
    v15 = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v14;
    }
  }
  return result;
}

void sub_24B861140(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t AppleBasebandManagerGetProfile()
{
  return 3;
}

uint64_t ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t __cxx_global_var_init()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_24B855000);
  }
  return result;
}

void AnalyticsHelper::create(AnalyticsHelper **a1@<X8>)
{
  AnalyticsHelper *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  AnalyticsHelper *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *a1 = (AnalyticsHelper *)0xAAAAAAAAAAAAAAAALL;
  a1[1] = (AnalyticsHelper *)0xAAAAAAAAAAAAAAAALL;
  v3 = (AnalyticsHelper *)operator new(0x80uLL);
  AnalyticsHelper::AnalyticsHelper(v3);
  *a1 = v3;
  a1[1] = (AnalyticsHelper *)0xAAAAAAAAAAAAAAAALL;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_251CB8DC0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  a1[1] = (AnalyticsHelper *)v4;
  v6 = (std::__shared_weak_count *)*((_QWORD *)v3 + 10);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      goto LABEL_13;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    *((_QWORD *)v3 + 9) = v3;
    *((_QWORD *)v3 + 10) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    *((_QWORD *)v3 + 9) = v3;
    *((_QWORD *)v3 + 10) = v4;
  }
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v14 = *a1;
    if (!*((_QWORD *)*a1 + 7))
      return;
    goto LABEL_14;
  }
LABEL_13:
  v14 = *a1;
  if (!*((_QWORD *)*a1 + 7))
    return;
LABEL_14:
  v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 10);
  if (!v15 || (v16 = std::__shared_weak_count::lock(v15)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v16;
  ctu::LoggerCommonBase::getLogDomain((AnalyticsHelper *)((char *)v14 + 8));
  ctu::TrackedLogger::registerLoggerToServer();
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_24B861458()
{
  __break(1u);
}

void sub_24B8614A8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_24B8614BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24B8614D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::AnalyticsHelper(AnalyticsHelper *this)
{
  unsigned __int8 v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *initially_inactive;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE v12[16];
  _QWORD block[5];
  _BYTE v14[16];

  *(_QWORD *)this = off_251CB8C48;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v12, "com.apple.telephony.abm", "stats.analytics");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_5;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v4 = GetABMLogServer(void)::sLogServer;
    v3 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (*(_QWORD *)algn_2579B8AE8)
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v4 = GetABMLogServer(void)::sLogServer;
    v3 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (*(_QWORD *)algn_2579B8AE8)
    {
LABEL_4:
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v8 = dispatch_queue_create_with_target_V2("stats.analytics", initially_inactive, 0);
  dispatch_set_qos_class_floor(v8, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v8);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = v8;
  if (v8)
  {
    dispatch_retain(v8);
    *((_QWORD *)this + 12) = 0;
    dispatch_release(v8);
  }
  else
  {
    *((_QWORD *)this + 12) = 0;
  }
  *(_QWORD *)this = off_251CB8D80;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *((_QWORD *)this + 1) = &unk_251CB85F0;
  *((_QWORD *)this + 7) = v4;
  *((_QWORD *)this + 8) = v3;
  if (v3)
  {
    v9 = (unint64_t *)&v3->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
    *(_QWORD *)this = off_251CB8E10;
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
    *(_QWORD *)this = off_251CB8E10;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v12);
  *(_QWORD *)this = off_251CB8C48;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 13) = (char *)this + 112;
}

void sub_24B861754(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v3 - 64));
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  _Unwind_Resume(a1);
}

const char *AnalyticsHelper::getName(AnalyticsHelper *this)
{
  return "stats.analytics";
}

void AnalyticsHelper::~AnalyticsHelper(char **this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *this = (char *)off_251CB8C48;
  std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(this[14]);
  *this = (char *)off_251CB8D80;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = this[12];
  if (v2)
    dispatch_release(v2);
  v3 = this[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)this[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *this = (char *)off_251CB8C48;
  std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(this[14]);
  *this = (char *)off_251CB8D80;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = this[12];
  if (v2)
    dispatch_release(v2);
  v3 = this[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)this[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *this = (char *)off_251CB8C48;
  std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(this[14]);
  *this = (char *)off_251CB8D80;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = this[12];
  if (v2)
    dispatch_release(v2);
  v3 = this[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)this[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(this);
}

void AnalyticsHelper::describeAnalyticsCache(AnalyticsHelper *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  size_t v19;
  _BYTE *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  char *v30;
  void *__dst[3];

  *(_QWORD *)(a2 + 272) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a2 + 240) = v3;
  *(_OWORD *)(a2 + 256) = v3;
  *(_OWORD *)(a2 + 208) = v3;
  *(_OWORD *)(a2 + 224) = v3;
  *(_OWORD *)(a2 + 176) = v3;
  *(_OWORD *)(a2 + 192) = v3;
  *(_OWORD *)(a2 + 144) = v3;
  *(_OWORD *)(a2 + 160) = v3;
  *(_OWORD *)(a2 + 112) = v3;
  *(_OWORD *)(a2 + 128) = v3;
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 96) = v3;
  *(_OWORD *)(a2 + 48) = v3;
  *(_OWORD *)(a2 + 64) = v3;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v3;
  v4 = (_QWORD *)(a2 + 16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"** analyticsData **\n", 20);
  v5 = (_QWORD *)*((_QWORD *)this + 13);
  v30 = (char *)this + 112;
  if (v5 != (_QWORD *)((char *)this + 112))
  {
    while (1)
    {
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"[", 1);
      v7 = (const char *)(v5 + 4);
      if (*((char *)v5 + 55) < 0)
        v7 = *(const char **)v7;
      v8 = strlen(v7);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] = \n", 5);
      v10 = (_QWORD *)v5[7];
      if (v10 != v5 + 8)
        break;
LABEL_7:
      v11 = (char *)v5[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)v5[2];
          v29 = *(_QWORD *)v12 == (_QWORD)v5;
          v5 = v12;
        }
        while (!v29);
      }
      v5 = v12;
      if (v12 == v30)
        return;
    }
    while (1)
    {
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<<<", 3);
      v14 = (const char *)(v10 + 4);
      if (*((char *)v10 + 55) < 0)
        v14 = *(const char **)v14;
      v15 = strlen(v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)">>> = ", 6);
      v18 = (char *)MEMORY[0x24BD2A3F0](v10[7]);
      memset(__dst, 170, sizeof(__dst));
      v19 = strlen(v18);
      if (v19 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v20 = (_BYTE *)v19;
      if (v19 >= 0x17)
        break;
      HIBYTE(__dst[2]) = v19;
      v21 = __dst;
      if (v19)
        goto LABEL_20;
LABEL_21:
      v20[(_QWORD)v21] = 0;
      free(v18);
      if (SHIBYTE(__dst[2]) >= 0)
        v24 = (const char *)__dst;
      else
        v24 = (const char *)__dst[0];
      v25 = strlen(v24);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n", 1);
      if (SHIBYTE(__dst[2]) < 0)
      {
        operator delete(__dst[0]);
        v27 = (_QWORD *)v10[1];
        if (v27)
        {
          do
          {
LABEL_28:
            v28 = v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
          goto LABEL_10;
        }
      }
      else
      {
        v27 = (_QWORD *)v10[1];
        if (v27)
          goto LABEL_28;
      }
      do
      {
        v28 = (_QWORD *)v10[2];
        v29 = *v28 == (_QWORD)v10;
        v10 = v28;
      }
      while (!v29);
LABEL_10:
      v10 = v28;
      if (v28 == v5 + 8)
        goto LABEL_7;
    }
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v21 = (void **)operator new(v22 + 1);
    __dst[1] = v20;
    __dst[2] = (void *)(v23 | 0x8000000000000000);
    __dst[0] = v21;
LABEL_20:
    memcpy(v21, v18, (size_t)v20);
    goto LABEL_21;
  }
}

void sub_24B861BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
  _Unwind_Resume(a1);
}

void sub_24B861BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
  _Unwind_Resume(a1);
}

void sub_24B861BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
  _Unwind_Resume(a1);
}

void sub_24B861BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
  _Unwind_Resume(a1);
}

void sub_24B861C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::updateData(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t value;
  const char *v5;
  xpc_object_t v6;
  const char *v7;
  std::string::size_type size;
  void *v9;
  xpc_object_t v10;
  uint64_t v11;
  NSObject *v12;
  char *v13;
  size_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  int v24;
  char *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  unint64_t v32;
  size_t v33;
  int v34;
  uint64_t *v35;
  uint64_t *v36;
  BOOL v37;
  xpc_object_t v38;
  int v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  char *v43;
  char *v44;
  int v45;
  const void *v46;
  unint64_t v47;
  size_t v48;
  int v49;
  int v50;
  const void *v51;
  unint64_t v52;
  size_t v53;
  int v54;
  xpc_object_t v55;
  const char *v56;
  const void *v57;
  const void *v58;
  const void *v59;
  size_t v60;
  const void *v61;
  size_t v62;
  const void *v63;
  const void *v64;
  const void *v65;
  const void *v66;
  const void *v67;
  size_t v68;
  const void *v69;
  const void *v70;
  const void *v71;
  const void *v72;
  const void *v73;
  size_t v74;
  const void *v75;
  xpc_object_t v76;
  xpc_object_t v77;
  char *v78;
  uint64_t *v79;
  char *v80;
  int v81;
  const void *v82;
  unint64_t v83;
  size_t v84;
  int v85;
  int v86;
  const void *v87;
  unint64_t v88;
  size_t v89;
  int v90;
  xpc_object_t v91;
  void *v92;
  const void *v93;
  uint64_t v94;
  uint64_t v95;
  xpc_object_t *v96;
  xpc_object_t v97;
  uint64_t *v98;
  uint64_t *v99;
  _OWORD *v100;
  xpc_object_t v101;
  std::string::size_type v102;
  NSObject *v103;
  std::string *v104;
  const void **v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  std::string *v113;
  std::string::size_type v114;
  uint64_t v115;
  int v116;
  const void *v117;
  std::string::size_type v118;
  size_t v119;
  int v120;
  uint64_t *v121;
  int v122;
  const void *v123;
  size_t v124;
  size_t v125;
  int v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t *v135;
  int v136;
  const void *v137;
  size_t v138;
  char v139;
  std::string *v140;
  std::string::size_type v141;
  size_t v142;
  int v143;
  size_t v144;
  size_t v145;
  const void *v146;
  size_t v147;
  size_t v148;
  int v149;
  int v150;
  uint64_t *v151;
  uint64_t *v152;
  std::string *v153;
  __int128 v154;
  uint64_t *v155;
  uint64_t *v156;
  NSObject *v157;
  int64_t v158;
  std::string::size_type v159;
  std::string *v160;
  std::string *v161;
  std::string *v162;
  std::string::size_type v163;
  std::string::size_type v164;
  std::string *v165;
  std::string *v166;
  std::string::size_type v167;
  std::string *v168;
  std::string::size_type v169;
  std::string::size_type v170;
  std::string::size_type v171;
  uint64_t v172;
  unint64_t v173;
  std::string *v174;
  void *v175;
  void *v176;
  uint64_t **v177;
  uint64_t *v178;
  xpc_object_t xdict;
  uint64_t v180;
  std::string v181;
  std::string v182;
  const void *__s1[3];
  xpc_object_t v184;
  xpc_object_t v185;
  void *__p[3];
  std::string v187;
  xpc_object_t object[3];
  uint64_t v189;
  std::string *v190;
  std::string *v191;
  std::string *v192;
  std::string *v193;
  std::string *v194;
  char *v195;
  std::string v196;
  std::string *v197;
  int v198;
  uint64_t v199;
  _BYTE v200[12];
  __int128 buf;
  uint64_t v202;
  uint64_t v203;

  v203 = *MEMORY[0x24BDAC8D0];
  memset(&v187, 170, sizeof(v187));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05010]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v5);
  xpc_release(object[0]);
  memset(__p, 170, sizeof(__p));
  v6 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE050D8]);
  object[0] = v6;
  if (v6)
    xpc_retain(v6);
  else
    object[0] = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"None", v7);
  xpc_release(object[0]);
  size = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v187.__r_.__value_.__l.__size_;
  if (!size || (v9 = (void *)*MEMORY[0x24BE05450], !xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05450])))
  {
    v12 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_342;
    v13 = (char *)MEMORY[0x24BD2A3F0](*a2);
    memset(object, 170, sizeof(object));
    v14 = strlen(v13);
    if (v14 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v15 = (void *)v14;
    if (v14 >= 0x17)
    {
      v94 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v94 = v14 | 7;
      v95 = v94 + 1;
      v16 = operator new(v94 + 1);
      object[1] = v15;
      object[2] = (xpc_object_t)(v95 | 0x8000000000000000);
      object[0] = v16;
    }
    else
    {
      HIBYTE(object[2]) = v14;
      v16 = object;
      if (!v14)
        goto LABEL_191;
    }
    memcpy(v16, v13, (size_t)v15);
LABEL_191:
    *((_BYTE *)v15 + (_QWORD)v16) = 0;
    free(v13);
    v96 = object;
    if (SHIBYTE(object[2]) < 0)
      v96 = (xpc_object_t *)object[0];
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v96;
    _os_log_error_impl(&dword_24B855000, v12, OS_LOG_TYPE_ERROR, "Input error: Failed to update AnalyticsData with %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    goto LABEL_342;
  }
  v10 = xpc_dictionary_create(0, 0, 0);
  v11 = MEMORY[0x24BDACFA0];
  if (v10 || (v10 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v10) == v11)
    {
      xpc_retain(v10);
      xdict = v10;
    }
    else
    {
      xdict = xpc_null_create();
    }
  }
  else
  {
    xdict = xpc_null_create();
    v10 = 0;
  }
  v180 = a1;
  xpc_release(v10);
  *((_QWORD *)&buf + 1) = 0;
  v202 = 0;
  *(_QWORD *)&buf = (char *)&buf + 8;
  v177 = (uint64_t **)(a1 + 104);
  v17 = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(a1 + 104, (const void **)&v187.__r_.__value_.__l.__data_);
  v178 = (uint64_t *)(a1 + 112);
  if ((uint64_t *)(a1 + 112) == v17)
  {
LABEL_59:
    v38 = xpc_dictionary_get_value(xdict, "ReportProcessStatus");
    goto LABEL_60;
  }
  v176 = v9;
  if (&buf == (__int128 *)(v17 + 7) || (v18 = (uint64_t *)v17[7], v19 = v17 + 8, v18 == v17 + 8))
  {
    v11 = MEMORY[0x24BDACFA0];
    goto LABEL_59;
  }
  while (2)
  {
    memset(object, 170, sizeof(object));
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__construct_node<std::pair<std::string const,xpc::dict> const&>(object, (uint64_t)&buf, (uint64_t)(v18 + 4));
    v20 = (uint64_t *)object[0];
    v21 = (uint64_t *)*((_QWORD *)&buf + 1);
    v22 = (uint64_t **)&buf + 1;
    v23 = (uint64_t **)&buf + 1;
    if (!*((_QWORD *)&buf + 1))
      goto LABEL_50;
    v24 = *((char *)object[0] + 55);
    if (v24 >= 0)
      v25 = (char *)object[0] + 32;
    else
      v25 = (char *)*((_QWORD *)object[0] + 4);
    if (v24 >= 0)
      v26 = *((unsigned __int8 *)object[0] + 55);
    else
      v26 = *((_QWORD *)object[0] + 5);
    do
    {
      while (1)
      {
        v22 = (uint64_t **)v21;
        v29 = v21[4];
        v27 = v21 + 4;
        v28 = (_QWORD *)v29;
        v30 = *((char *)v27 + 23);
        v31 = v30 >= 0 ? v27 : v28;
        v32 = v30 >= 0 ? *((unsigned __int8 *)v27 + 23) : v27[1];
        v33 = v32 >= v26 ? v26 : v32;
        v34 = memcmp(v25, v31, v33);
        if (v34)
          break;
        if (v26 >= v32)
          goto LABEL_48;
LABEL_34:
        v21 = *v22;
        v23 = v22;
        if (!*v22)
          goto LABEL_50;
      }
      if (v34 < 0)
        goto LABEL_34;
LABEL_48:
      v21 = v22[1];
    }
    while (v21);
    v23 = v22 + 1;
LABEL_50:
    *v20 = 0;
    v20[1] = 0;
    v20[2] = (uint64_t)v22;
    *v23 = v20;
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf = *(_QWORD *)buf;
      v20 = *v23;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&buf + 1), v20);
    ++v202;
    v35 = (uint64_t *)v18[1];
    if (v35)
    {
      do
      {
        v36 = v35;
        v35 = (uint64_t *)*v35;
      }
      while (v35);
    }
    else
    {
      do
      {
        v36 = (uint64_t *)v18[2];
        v37 = *v36 == (_QWORD)v18;
        v18 = v36;
      }
      while (!v37);
    }
    v18 = v36;
    if (v36 != v19)
      continue;
    break;
  }
  v43 = (char *)*((_QWORD *)&buf + 1);
  HIBYTE(object[2]) = 9;
  strcpy((char *)object, "EventInfo");
  v9 = v176;
  v11 = MEMORY[0x24BDACFA0];
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_59;
  v44 = (char *)&buf + 8;
  while (2)
  {
    while (2)
    {
      v45 = v43[55];
      if (v45 >= 0)
        v46 = v43 + 32;
      else
        v46 = (const void *)*((_QWORD *)v43 + 4);
      if (v45 >= 0)
        v47 = v43[55];
      else
        v47 = *((_QWORD *)v43 + 5);
      if (v47 >= 9)
        v48 = 9;
      else
        v48 = v47;
      v49 = memcmp(v46, object, v48);
      if (v49)
      {
        if ((v49 & 0x80000000) == 0)
          break;
        goto LABEL_71;
      }
      if (v47 < 9)
      {
LABEL_71:
        v43 = (char *)*((_QWORD *)v43 + 1);
        if (!v43)
          goto LABEL_86;
        continue;
      }
      break;
    }
    v44 = v43;
    v43 = *(char **)v43;
    if (v43)
      continue;
    break;
  }
LABEL_86:
  if (v44 == (char *)&buf + 8)
    goto LABEL_59;
  v50 = v44[55];
  if (v50 >= 0)
    v51 = v44 + 32;
  else
    v51 = (const void *)*((_QWORD *)v44 + 4);
  if (v50 >= 0)
    v52 = v44[55];
  else
    v52 = *((_QWORD *)v44 + 5);
  if (v52 >= 9)
    v53 = 9;
  else
    v53 = v52;
  v54 = memcmp(object, v51, v53);
  if (v54)
  {
    if (v54 < 0)
      goto LABEL_59;
  }
  else if (v52 > 9)
  {
    goto LABEL_59;
  }
  v97 = (xpc_object_t)*((_QWORD *)v44 + 7);
  if (v97)
    xpc_retain(*((xpc_object_t *)v44 + 7));
  else
    v97 = xpc_null_create();
  xpc_release(xdict);
  xdict = v97;
  v38 = xpc_dictionary_get_value(v97, "ReportProcessStatus");
LABEL_60:
  object[0] = v38;
  if (v38)
    xpc_retain(v38);
  else
    object[0] = xpc_null_create();
  LOBYTE(v39) = xpc::dyn_cast_or_default((xpc *)object, (const object *)0xFF);
  xpc_release(object[0]);
  v185 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v40 = xpc_dictionary_create(0, 0, 0);
  v41 = v40;
  if (v40)
  {
    v185 = v40;
    goto LABEL_66;
  }
  v41 = xpc_null_create();
  v185 = v41;
  if (v41)
  {
LABEL_66:
    if (MEMORY[0x24BD2A468](v41) != v11)
    {
      v42 = xpc_null_create();
      goto LABEL_100;
    }
    xpc_retain(v41);
  }
  else
  {
    v42 = xpc_null_create();
    v41 = 0;
LABEL_100:
    v185 = v42;
  }
  xpc_release(v41);
  object[0] = a2;
  object[1] = v9;
  __s1[0] = &v185;
  __s1[1] = v9;
  xpc::dict::object_proxy::operator=((uint64_t)__s1, (uint64_t)object, &v184);
  xpc_release(v184);
  v184 = 0;
  memset(__s1, 170, sizeof(__s1));
  v55 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE050D0]);
  object[0] = v55;
  if (v55)
    xpc_retain(v55);
  else
    object[0] = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v56);
  xpc_release(object[0]);
  v57 = (const void *)*MEMORY[0x24BE05088];
  v58 = (const void *)strlen((const char *)*MEMORY[0x24BE05088]);
  v59 = v58;
  v60 = HIBYTE(__s1[2]);
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v58 != (const void *)-1)
    {
      v61 = (const void *)HIBYTE(__s1[2]);
      if (HIBYTE(__s1[2]) >= (unint64_t)v58)
        v62 = (size_t)v58;
      else
        v62 = HIBYTE(__s1[2]);
      if (memcmp(__s1, v57, v62))
        goto LABEL_117;
LABEL_116:
      if (v61 != v59)
        goto LABEL_117;
LABEL_131:
      std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>((_QWORD **)&buf, (const std::string::value_type **)__p, &v185);
      if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v182, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
      else
        v182 = v187;
      AnalyticsHelper::submitEvent(v180, (uint64_t)&v182, &buf);
      if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v182.__r_.__value_.__l.__data_);
      v39 = 1;
      goto LABEL_208;
    }
LABEL_405:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v58 == (const void *)-1)
    goto LABEL_405;
  v61 = __s1[1];
  if (__s1[1] >= v58)
    v63 = v58;
  else
    v63 = __s1[1];
  if (!memcmp(__s1[0], v57, (size_t)v63))
    goto LABEL_116;
LABEL_117:
  v64 = (const void *)*MEMORY[0x24BE05118];
  v65 = (const void *)strlen((const char *)*MEMORY[0x24BE05118]);
  v66 = v65;
  if ((v60 & 0x80) != 0)
  {
    if (v65 != (const void *)-1)
    {
      v67 = __s1[1];
      v39 = v39;
      if (__s1[1] >= v65)
        v69 = v65;
      else
        v69 = __s1[1];
      if (!memcmp(__s1[0], v64, (size_t)v69))
        goto LABEL_129;
      goto LABEL_137;
    }
LABEL_406:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v65 == (const void *)-1)
    goto LABEL_406;
  v67 = (const void *)v60;
  v39 = v39;
  if (v60 >= (unint64_t)v65)
    v68 = (size_t)v65;
  else
    v68 = v60;
  if (memcmp(__s1, v64, v68))
    goto LABEL_137;
LABEL_129:
  if (v67 == v66 && !v39)
    goto LABEL_131;
LABEL_137:
  v70 = (const void *)*MEMORY[0x24BE05080];
  v71 = (const void *)strlen((const char *)*MEMORY[0x24BE05080]);
  v72 = v71;
  if ((v60 & 0x80) == 0)
  {
    if (v71 != (const void *)-1)
    {
      v73 = (const void *)v60;
      if (v60 >= (unint64_t)v71)
        v74 = (size_t)v71;
      else
        v74 = v60;
      if (memcmp(__s1, v70, v74))
        goto LABEL_182;
      goto LABEL_149;
    }
LABEL_407:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v71 == (const void *)-1)
    goto LABEL_407;
  v73 = __s1[1];
  if (__s1[1] >= v71)
    v75 = v71;
  else
    v75 = __s1[1];
  if (memcmp(__s1[0], v70, (size_t)v75))
  {
LABEL_182:
    if ((v60 & 0x80u) == 0)
      v93 = (const void *)v60;
    else
      v93 = __s1[1];
    if (!v93)
      std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>((_QWORD **)&buf, (const std::string::value_type **)__p, &v185);
    goto LABEL_208;
  }
LABEL_149:
  if (v73 != v72)
    goto LABEL_182;
  std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>((_QWORD **)&buf, (const std::string::value_type **)__p, &v185);
  v76 = xpc_int64_create(0);
  if (!v76)
    v76 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "ReportProcessStatus", v76);
  v77 = xpc_null_create();
  xpc_release(v76);
  xpc_release(v77);
  HIBYTE(object[2]) = 9;
  strcpy((char *)object, "EventInfo");
  v78 = (char *)*((_QWORD *)&buf + 1);
  v79 = (uint64_t *)&buf + 1;
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_202;
  v80 = (char *)&buf + 8;
  while (2)
  {
    while (2)
    {
      v81 = v78[55];
      if (v81 >= 0)
        v82 = v78 + 32;
      else
        v82 = (const void *)*((_QWORD *)v78 + 4);
      if (v81 >= 0)
        v83 = v78[55];
      else
        v83 = *((_QWORD *)v78 + 5);
      if (v83 >= 9)
        v84 = 9;
      else
        v84 = v83;
      v85 = memcmp(v82, object, v84);
      if (v85)
      {
        if ((v85 & 0x80000000) == 0)
          break;
        goto LABEL_154;
      }
      if (v83 < 9)
      {
LABEL_154:
        v78 = (char *)*((_QWORD *)v78 + 1);
        if (!v78)
          goto LABEL_169;
        continue;
      }
      break;
    }
    v80 = v78;
    v78 = *(char **)v78;
    if (v78)
      continue;
    break;
  }
LABEL_169:
  v79 = (uint64_t *)&buf + 1;
  if (v80 == (char *)&buf + 8)
    goto LABEL_202;
  v86 = v80[55];
  if (v86 >= 0)
    v87 = v80 + 32;
  else
    v87 = (const void *)*((_QWORD *)v80 + 4);
  if (v86 >= 0)
    v88 = v80[55];
  else
    v88 = *((_QWORD *)v80 + 5);
  if (v88 >= 9)
    v89 = 9;
  else
    v89 = v88;
  v90 = memcmp(object, v87, v89);
  if (v90)
  {
    if ((v90 & 0x80000000) == 0)
      goto LABEL_181;
LABEL_201:
    v79 = (uint64_t *)v80;
LABEL_202:
    v181.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)v200 = 0xAAAAAAAAAAAAAAAALL;
    v98 = std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>((uint64_t **)&buf, v79, (uint64_t **)&v181, (uint64_t **)v200, (const void **)object);
    if (!*v98)
    {
      v99 = v98;
      v100 = operator new(0x40uLL);
      v100[2] = *(_OWORD *)object;
      v101 = object[2];
      memset(object, 0, sizeof(object));
      *((_QWORD *)v100 + 6) = v101;
      *((_QWORD *)v100 + 7) = xdict;
      xdict = xpc_null_create();
      v102 = v181.__r_.__value_.__r.__words[0];
      *(_QWORD *)v100 = 0;
      *((_QWORD *)v100 + 1) = 0;
      *((_QWORD *)v100 + 2) = v102;
      *v99 = (uint64_t)v100;
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf = *(_QWORD *)buf;
        v100 = (_OWORD *)*v99;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&buf + 1), (uint64_t *)v100);
      ++v202;
    }
    v91 = xdict;
  }
  else
  {
    if (v88 > 9)
      goto LABEL_201;
LABEL_181:
    v91 = xpc_null_create();
    v92 = (void *)*((_QWORD *)v80 + 7);
    *((_QWORD *)v80 + 7) = xdict;
    xpc_release(v92);
  }
  v39 = 0;
  xdict = v91;
LABEL_208:
  v103 = *(NSObject **)(v180 + 40);
  if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
  {
    v104 = &v187;
    if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v104 = (std::string *)v187.__r_.__value_.__r.__words[0];
    v105 = __s1;
    if (SHIBYTE(__s1[2]) < 0)
      v105 = (const void **)__s1[0];
    LODWORD(object[0]) = 136315650;
    *(xpc_object_t *)((char *)object + 4) = v104;
    WORD2(object[1]) = 2080;
    *(xpc_object_t *)((char *)&object[1] + 6) = v105;
    HIWORD(object[2]) = 1024;
    LODWORD(v189) = v39;
    _os_log_impl(&dword_24B855000, v103, OS_LOG_TYPE_DEFAULT, "#I Updating AnalyticsData for event[%s]: command=%s, status=%d", (uint8_t *)object, 0x1Cu);
  }
  if (v39 == 1)
  {
    v106 = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>((uint64_t)v177, (const void **)&v187.__r_.__value_.__l.__data_);
    if (v178 != v106)
    {
      v107 = v106;
      v108 = (uint64_t *)v106[1];
      if (v108)
      {
        do
        {
          v109 = v108;
          v108 = (uint64_t *)*v108;
        }
        while (v108);
      }
      else
      {
        v130 = v106;
        do
        {
          v109 = (uint64_t *)v130[2];
          v37 = *v109 == (_QWORD)v130;
          v130 = v109;
        }
        while (!v37);
      }
      if (*v177 == v106)
        *v177 = v109;
      v131 = *(uint64_t **)(v180 + 112);
      --*(_QWORD *)(v180 + 120);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v131, v107);
      std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy((char *)v107[8]);
      if (*((char *)v107 + 55) < 0)
        operator delete((void *)v107[4]);
      operator delete(v107);
    }
    goto LABEL_338;
  }
  v110 = v202;
  if (!v202)
    goto LABEL_338;
  v111 = v178;
  v112 = *v178;
  if (!*v178)
  {
    v121 = v178;
    if (*v177 == v178)
    {
      v132 = 0;
      v133 = v178;
      v121 = v178;
      goto LABEL_321;
    }
    goto LABEL_276;
  }
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v113 = &v187;
  else
    v113 = (std::string *)v187.__r_.__value_.__r.__words[0];
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v114 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  else
    v114 = v187.__r_.__value_.__l.__size_;
  v115 = *v178;
  while (2)
  {
    while (1)
    {
      v116 = *(char *)(v115 + 55);
      v117 = v116 >= 0 ? (const void *)(v115 + 32) : *(const void **)(v115 + 32);
      v118 = v116 >= 0 ? *(unsigned __int8 *)(v115 + 55) : *(_QWORD *)(v115 + 40);
      v119 = v114 >= v118 ? v118 : v114;
      v120 = memcmp(v117, v113, v119);
      if (!v120)
        break;
      if (v120 < 0)
        goto LABEL_230;
LABEL_228:
      v111 = (uint64_t *)v115;
      v115 = *(_QWORD *)v115;
      if (!v115)
        goto LABEL_245;
    }
    if (v118 >= v114)
      goto LABEL_228;
LABEL_230:
    v115 = *(_QWORD *)(v115 + 8);
    if (v115)
      continue;
    break;
  }
LABEL_245:
  v121 = v178;
  if (v111 != v178)
  {
    v122 = *((char *)v111 + 55);
    if (v122 >= 0)
      v123 = v111 + 4;
    else
      v123 = (const void *)v111[4];
    if (v122 >= 0)
      v124 = *((unsigned __int8 *)v111 + 55);
    else
      v124 = v111[5];
    if (v124 >= v114)
      v125 = v114;
    else
      v125 = v124;
    v126 = memcmp(v113, v123, v125);
    if (v126)
    {
      if ((v126 & 0x80000000) == 0)
      {
LABEL_257:
        v127 = v111 + 8;
        std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy((char *)v111[8]);
        v128 = *((_QWORD *)&buf + 1);
        v111[7] = buf;
        v111[8] = v128;
        v129 = v202;
        v111[9] = v202;
        if (v129)
        {
          *(_QWORD *)(v128 + 16) = v127;
          *(_QWORD *)&buf = (char *)&buf + 8;
          *((_QWORD *)&buf + 1) = 0;
          v202 = 0;
        }
        else
        {
          v111[7] = (uint64_t)v127;
        }
        goto LABEL_338;
      }
    }
    else if (v114 >= v124)
    {
      goto LABEL_257;
    }
    v121 = v111;
  }
  v132 = *v121;
  if (*v177 == v121)
  {
    v133 = v121;
    goto LABEL_321;
  }
  if (!v132)
  {
LABEL_276:
    v133 = v121;
    do
    {
      v135 = v133;
      v133 = (uint64_t *)v133[2];
    }
    while ((uint64_t *)*v133 == v135);
    v132 = 0;
    goto LABEL_279;
  }
  v134 = (uint64_t *)*v121;
  do
  {
    v133 = v134;
    v134 = (uint64_t *)v134[1];
  }
  while (v134);
LABEL_279:
  v136 = *((char *)v133 + 55);
  if (v136 >= 0)
    v137 = v133 + 4;
  else
    v137 = (const void *)v133[4];
  if (v136 >= 0)
    v138 = *((unsigned __int8 *)v133 + 55);
  else
    v138 = v133[5];
  v139 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v140 = &v187;
  else
    v140 = (std::string *)v187.__r_.__value_.__r.__words[0];
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v141 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  else
    v141 = v187.__r_.__value_.__l.__size_;
  if (v141 >= v138)
    v142 = v138;
  else
    v142 = v141;
  v143 = memcmp(v137, v140, v142);
  if (v143)
  {
    if (v143 < 0)
      goto LABEL_321;
LABEL_298:
    if (!v112)
    {
      v133 = v178;
      goto LABEL_329;
    }
    while (1)
    {
      v133 = (uint64_t *)v112;
      v144 = *(unsigned __int8 *)(v112 + 55);
      v145 = *(_QWORD *)(v112 + 40);
      if ((v144 & 0x80u) == 0)
        v146 = (const void *)(v112 + 32);
      else
        v146 = *(const void **)(v112 + 32);
      if ((v144 & 0x80u) == 0)
        v147 = v144;
      else
        v147 = v145;
      if (v147 >= v141)
        v148 = v141;
      else
        v148 = v147;
      v149 = memcmp(v140, v146, v148);
      if (v149)
      {
        if ((v149 & 0x80000000) == 0)
          goto LABEL_314;
      }
      else if (v141 >= v147)
      {
LABEL_314:
        v150 = memcmp(v146, v140, v148);
        if (v150)
        {
          if ((v150 & 0x80000000) == 0)
            goto LABEL_338;
        }
        else if (v147 >= v141)
        {
          goto LABEL_338;
        }
        v112 = v133[1];
        if (!v112)
        {
          v178 = v133 + 1;
          goto LABEL_329;
        }
        continue;
      }
      v112 = *v133;
      if (!*v133)
      {
        v178 = v133;
        goto LABEL_329;
      }
    }
  }
  if (v138 >= v141)
    goto LABEL_298;
LABEL_321:
  v151 = v133 + 1;
  if (!v132)
    v151 = v121;
  v178 = v151;
  if (!*v151)
  {
    if (!v132)
      v133 = v121;
    v139 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
LABEL_329:
    v152 = (uint64_t *)operator new(0x50uLL);
    v153 = (std::string *)(v152 + 4);
    if (v139 < 0)
    {
      std::string::__init_copy_ctor_external(v153, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
      v110 = v202;
    }
    else
    {
      *(_OWORD *)&v153->__r_.__value_.__l.__data_ = *(_OWORD *)&v187.__r_.__value_.__l.__data_;
      v152[6] = v187.__r_.__value_.__r.__words[2];
    }
    v154 = buf;
    v152[8] = *((_QWORD *)&buf + 1);
    v155 = v152 + 8;
    v152[7] = v154;
    v152[9] = v110;
    if (v110)
    {
      *(_QWORD *)(*((_QWORD *)&v154 + 1) + 16) = v155;
      *(_QWORD *)&buf = (char *)&buf + 8;
      *((_QWORD *)&buf + 1) = 0;
      v202 = 0;
    }
    else
    {
      v152[7] = (uint64_t)v155;
    }
    *v152 = 0;
    v152[1] = 0;
    v152[2] = (uint64_t)v133;
    *v178 = (uint64_t)v152;
    v156 = (uint64_t *)**v177;
    if (v156)
    {
      *v177 = v156;
      v152 = (uint64_t *)*v178;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v180 + 112), v152);
    ++*(_QWORD *)(v180 + 120);
  }
LABEL_338:
  v157 = *(NSObject **)(v180 + 40);
  if (!os_log_type_enabled(v157, OS_LOG_TYPE_DEBUG))
  {
    if (SHIBYTE(__s1[2]) < 0)
      goto LABEL_340;
    goto LABEL_341;
  }
  AnalyticsHelper::describeAnalyticsCache((AnalyticsHelper *)v180, (uint64_t)object);
  if ((v198 & 0x10) != 0)
  {
    v160 = v197;
    if (v197 < v194)
    {
      v197 = v194;
      v160 = v194;
    }
    v161 = v193;
  }
  else
  {
    if ((v198 & 8) == 0)
    {
      v158 = 0;
      v159 = 0;
      goto LABEL_359;
    }
    v161 = v190;
    v160 = v192;
  }
  v158 = (char *)v160 - (char *)v161;
  if (v158)
  {
    v162 = &v196;
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v162 = (std::string *)v196.__r_.__value_.__r.__words[0];
    v159 = (char *)v161 - (char *)v162;
  }
  else
  {
    v159 = 0;
  }
LABEL_359:
  v181 = v196;
  memset(&v196, 0, sizeof(v196));
  v163 = v159 + v158;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
  {
    v164 = v181.__r_.__value_.__l.__size_;
    if (v181.__r_.__value_.__l.__size_ >= v163)
    {
      v165 = (std::string *)v181.__r_.__value_.__r.__words[0];
      v181.__r_.__value_.__l.__size_ = v163;
      goto LABEL_365;
    }
LABEL_363:
    std::string::append(&v181, v163 - v164, 0);
  }
  else
  {
    v164 = HIBYTE(v181.__r_.__value_.__r.__words[2]);
    if (v163 > HIBYTE(v181.__r_.__value_.__r.__words[2]))
      goto LABEL_363;
    *((_BYTE *)&v181.__r_.__value_.__s + 23) = v163 & 0x7F;
    v165 = &v181;
LABEL_365:
    v165->__r_.__value_.__s.__data_[v163] = 0;
  }
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v159 == -1)
    {
      v181.__r_.__value_.__l.__size_ = 0;
      *v181.__r_.__value_.__l.__data_ = 0;
      goto LABEL_372;
    }
LABEL_371:
    std::string::__erase_external_with_move(&v181, 0, v159);
  }
  else
  {
    if (v159 != -1)
      goto LABEL_371;
    *((_BYTE *)&v181.__r_.__value_.__s + 23) = 0;
    v181.__r_.__value_.__s.__data_[0] = 0;
  }
LABEL_372:
  v166 = &v196;
  v197 = 0;
  v167 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
  if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v168 = &v196;
  else
    v168 = (std::string *)v196.__r_.__value_.__r.__words[0];
  if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v169 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
  else
    v169 = v196.__r_.__value_.__l.__size_;
  if ((v198 & 8) != 0)
  {
    v190 = v168;
    v191 = v168;
    v197 = (std::string *)((char *)v168 + v169);
    v192 = (std::string *)((char *)v168 + v169);
  }
  if ((v198 & 0x10) != 0)
  {
    v197 = (std::string *)((char *)v168 + v169);
    if ((*((_BYTE *)&v196.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v170 = (v196.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v196.__r_.__value_.__l.__size_ < v170)
      {
        v167 = v196.__r_.__value_.__l.__size_;
        goto LABEL_385;
      }
      v196.__r_.__value_.__l.__size_ = (v196.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v166 = (std::string *)v196.__r_.__value_.__r.__words[0];
LABEL_388:
      v166->__r_.__value_.__s.__data_[v170] = 0;
    }
    else
    {
      v170 = 22;
      if (HIBYTE(v196.__r_.__value_.__r.__words[2]) > 0x15u)
      {
        *((_BYTE *)&v196.__r_.__value_.__s + 23) = 22;
        goto LABEL_388;
      }
LABEL_385:
      std::string::append(&v196, v170 - v167, 0);
    }
    v171 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v171 = v196.__r_.__value_.__l.__size_;
    v193 = v168;
    v194 = v168;
    v195 = (char *)v168 + v171;
    if ((v198 & 3) != 0)
    {
      if (v169 >> 31)
      {
        v172 = ((v169 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v173 = 0x7FFFFFFF * ((v172 + ((v169 - 0x80000000 - v172) >> 1)) >> 30);
        v168 = (std::string *)((char *)v168 + v173 + 0x7FFFFFFF);
        v169 = v169 - v173 - 0x7FFFFFFF;
        v194 = v168;
      }
      if (v169)
        v194 = (std::string *)((char *)v168 + v169);
    }
  }
  v174 = &v181;
  if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v174 = (std::string *)v181.__r_.__value_.__r.__words[0];
  *(_DWORD *)v200 = 136315138;
  *(_QWORD *)&v200[4] = v174;
  _os_log_debug_impl(&dword_24B855000, v157, OS_LOG_TYPE_DEBUG, "#D %s", v200, 0xCu);
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v181.__r_.__value_.__l.__data_);
  object[0] = *(xpc_object_t *)MEMORY[0x24BEDB7F0];
  v175 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
  *(xpc_object_t *)((char *)object + *((_QWORD *)object[0] - 3)) = *(xpc_object_t *)(MEMORY[0x24BEDB7F0] + 64);
  object[2] = v175;
  v189 = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v196.__r_.__value_.__l.__data_);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x24BD29B5C](&v199);
  if (SHIBYTE(__s1[2]) < 0)
LABEL_340:
    operator delete((void *)__s1[0]);
LABEL_341:
  xpc_release(v185);
  std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*((char **)&buf + 1));
  xpc_release(xdict);
LABEL_342:
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_346:
    operator delete(v187.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_346;
}

void sub_24B862EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,xpc_object_t object,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,xpc_object_t a48)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void xpc::dict::object_proxy::operator=(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  xpc_object_t value;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;

  value = xpc_dictionary_get_value(**(xpc_object_t **)a2, *(const char **)(a2 + 8));
  v6 = value;
  if (value)
  {
    xpc_retain(value);
  }
  else
  {
    v6 = xpc_null_create();
    if (!v6)
    {
      v7 = xpc_null_create();
      v6 = 0;
      goto LABEL_5;
    }
  }
  xpc_retain(v6);
  v7 = v6;
LABEL_5:
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), v7);
  *a3 = v7;
  v8 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v6);
}

void std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>(_QWORD **a1, const std::string::value_type **a2, xpc_object_t *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  const std::string::value_type *v9;
  size_t v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  size_t v14;
  size_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  size_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t *v26;
  std::string *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t *v31;

  v6 = (uint64_t *)(a1 + 1);
  v7 = a1[1];
  if (!v7)
    goto LABEL_41;
  v8 = *((char *)a2 + 23);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)a2;
  else
    v9 = *a2;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (size_t)a2[1];
  v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      v12 = *((char *)v7 + 55);
      v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v15 = v10 >= v14 ? v14 : v10;
      v16 = memcmp(v13, v9, v15);
      if (v16)
        break;
      if (v14 < v10)
        goto LABEL_11;
LABEL_9:
      v11 = v7;
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_26;
    }
    if ((v16 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_11:
    v7 = (uint64_t *)v7[1];
  }
  while (v7);
LABEL_26:
  if (v11 == v6)
    goto LABEL_40;
  v17 = *((char *)v11 + 55);
  if (v17 >= 0)
    v18 = v11 + 4;
  else
    v18 = (_QWORD *)v11[4];
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)v11 + 55);
  else
    v19 = v11[5];
  if (v19 >= v10)
    v20 = v10;
  else
    v20 = v19;
  v21 = memcmp(v9, v18, v20);
  if (v21)
  {
    if ((v21 & 0x80000000) == 0)
      goto LABEL_38;
LABEL_40:
    v6 = v11;
LABEL_41:
    v30 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    v31 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    v24 = std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>(a1, v6, &v31, &v30, (const void **)a2);
    if (!*v24)
    {
      v25 = (uint64_t **)v24;
      v26 = (uint64_t *)operator new(0x40uLL);
      v27 = (std::string *)(v26 + 4);
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v27, *a2, (std::string::size_type)a2[1]);
      }
      else
      {
        *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v26[6] = (uint64_t)a2[2];
      }
      v26[7] = (uint64_t)*a3;
      *a3 = xpc_null_create();
      v28 = v31;
      *v26 = 0;
      v26[1] = 0;
      v26[2] = (uint64_t)v28;
      *v25 = v26;
      v29 = (_QWORD *)**a1;
      if (v29)
      {
        *a1 = v29;
        v26 = *v25;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v26);
      a1[2] = (_QWORD *)((char *)a1[2] + 1);
    }
  }
  else
  {
    if (v10 < v19)
      goto LABEL_40;
LABEL_38:
    v22 = (uint64_t)*a3;
    *a3 = xpc_null_create();
    v23 = (_QWORD *)v11[7];
    v11[7] = v22;
    xpc_release(v23);
  }
}

void sub_24B863358(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::submitEvent(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  BOOL v6;
  BOOL v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  const void *v14;
  const void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  NSObject *v20;
  const void **v21;
  const void ***v22;
  const void **v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  const void ***v27;
  const std::string::value_type *v28;
  char *v29;
  size_t v30;
  const void *v31;
  const void **v32;
  uint64_t v33;
  uint64_t v34;
  const void **v35;
  xpc_object_t v36;
  std::string v37;
  xpc_object_t object;
  const void *__dst[3];
  uint64_t *v40;
  uint64_t *v41;
  _BYTE buf[24];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
      v7 = a3[2] == 0;
    else
      v7 = 1;
    if (!v7)
    {
LABEL_12:
      object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      v8 = xpc_dictionary_create(0, 0, 0);
      v9 = v8;
      if (v8)
      {
        object = v8;
      }
      else
      {
        v9 = xpc_null_create();
        object = v9;
        if (!v9)
        {
          v10 = xpc_null_create();
          v9 = 0;
          goto LABEL_19;
        }
      }
      if (MEMORY[0x24BD2A468](v9) == MEMORY[0x24BDACFA0])
      {
        xpc_retain(v9);
        goto LABEL_20;
      }
      v10 = xpc_null_create();
LABEL_19:
      object = v10;
LABEL_20:
      xpc_release(v9);
      AnalyticsHelper::append(v11, (uint64_t)&object, a3);
      v12 = (const void *)*MEMORY[0x24BE055D8];
      v13 = strlen((const char *)*MEMORY[0x24BE055D8]);
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v14 = (const void *)v13;
      if (v13 >= 0x17)
      {
        v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v16 = v13 | 7;
        v17 = v16 + 1;
        v15 = (const void **)operator new(v16 + 1);
        __dst[1] = v14;
        __dst[2] = (const void *)(v17 | 0x8000000000000000);
        __dst[0] = v15;
      }
      else
      {
        HIBYTE(__dst[2]) = v13;
        v15 = __dst;
        if (!v13)
          goto LABEL_28;
      }
      memmove(v15, v12, (size_t)v14);
LABEL_28:
      *((_BYTE *)v14 + (_QWORD)v15) = 0;
      v18 = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(a1 + 104, __dst);
      v19 = v18;
      if (SHIBYTE(__dst[2]) < 0)
      {
        operator delete((void *)__dst[0]);
        if ((uint64_t *)(a1 + 112) == v19)
        {
LABEL_30:
          v20 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
LABEL_58:
            v28 = (const std::string::value_type *)a2;
            if (*(char *)(a2 + 23) < 0)
              v28 = *(const std::string::value_type **)a2;
            v29 = (char *)MEMORY[0x24BD2A3F0](object);
            memset(__dst, 170, sizeof(__dst));
            v30 = strlen(v29);
            if (v30 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v31 = (const void *)v30;
            if (v30 >= 0x17)
            {
              v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v30 | 7) != 0x17)
                v33 = v30 | 7;
              v34 = v33 + 1;
              v32 = (const void **)operator new(v33 + 1);
              __dst[1] = v31;
              __dst[2] = (const void *)(v34 | 0x8000000000000000);
              __dst[0] = v32;
            }
            else
            {
              HIBYTE(__dst[2]) = v30;
              v32 = __dst;
              if (!v30)
                goto LABEL_68;
            }
            memcpy(v32, v29, (size_t)v31);
LABEL_68:
            *((_BYTE *)v31 + (_QWORD)v32) = 0;
            free(v29);
            v35 = __dst;
            if (SHIBYTE(__dst[2]) < 0)
              v35 = (const void **)__dst[0];
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v28;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v35;
            _os_log_debug_impl(&dword_24B855000, v20, OS_LOG_TYPE_DEBUG, "#D Submitting CoreAnalytics event[%s] - %s", buf, 0x16u);
            if (SHIBYTE(__dst[2]) < 0)
              operator delete((void *)__dst[0]);
          }
LABEL_48:
          if (*(char *)(a2 + 23) < 0)
            std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
          else
            v37 = *(std::string *)a2;
          v36 = object;
          if (object)
            xpc_retain(object);
          else
            v36 = xpc_null_create();
          metric::sendCoreAnalyticsEvent((const void **)&v37.__r_.__value_.__l.__data_, &v36);
          xpc_release(v36);
          v36 = 0;
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v37.__r_.__value_.__l.__data_);
          xpc_release(object);
          return;
        }
      }
      else if ((uint64_t *)(a1 + 112) == v18)
      {
        goto LABEL_30;
      }
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = 0;
      *(_QWORD *)buf = &buf[8];
      v21 = (const void **)v19[7];
      v22 = (const void ***)(v19 + 8);
      if (v21 == (const void **)(v19 + 8))
      {
LABEL_47:
        AnalyticsHelper::append((uint64_t)v18, (uint64_t)&object, buf);
        std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*(char **)&buf[8]);
        v20 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          goto LABEL_58;
        goto LABEL_48;
      }
      while (1)
      {
        v40 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        v41 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        v18 = std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>((uint64_t **)buf, (uint64_t *)&buf[8], &v41, &v40, v21 + 4);
        if (*v18)
        {
          v23 = (const void **)v21[1];
          if (v23)
            goto LABEL_42;
        }
        else
        {
          v24 = (uint64_t **)v18;
          memset(__dst, 170, sizeof(__dst));
          std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__construct_node<std::pair<std::string const,xpc::dict> const&>(__dst, (uint64_t)buf, (uint64_t)(v21 + 4));
          v25 = v41;
          v26 = (uint64_t *)__dst[0];
          *(_QWORD *)__dst[0] = 0;
          v26[1] = 0;
          v26[2] = (uint64_t)v25;
          *v24 = v26;
          if (**(_QWORD **)buf)
          {
            *(_QWORD *)buf = **(_QWORD **)buf;
            v26 = *v24;
          }
          v18 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], v26);
          ++*(_QWORD *)&buf[16];
          v23 = (const void **)v21[1];
          if (v23)
          {
            do
            {
LABEL_42:
              v27 = (const void ***)v23;
              v23 = (const void **)*v23;
            }
            while (v23);
            goto LABEL_35;
          }
        }
        do
        {
          v27 = (const void ***)v21[2];
          v6 = *v27 == v21;
          v21 = (const void **)v27;
        }
        while (!v6);
LABEL_35:
        v21 = (const void **)v27;
        if (v27 == v22)
          goto LABEL_47;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(a2 + 23))
      v6 = a3[2] == 0;
    else
      v6 = 1;
    if (!v6)
      goto LABEL_12;
  }
}

void sub_24B863824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::append(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  xpc_object_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD applier[5];
  std::string v12;

  v3 = a3 + 1;
  v4 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    v6 = MEMORY[0x24BDAC760];
    do
    {
      memset(&v12, 170, sizeof(v12));
      if (*((char *)v4 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v12, (const std::string::value_type *)v4[4], v4[5]);
        v7 = (xpc_object_t)v4[7];
        if (v7)
        {
LABEL_6:
          xpc_retain(v7);
          goto LABEL_9;
        }
      }
      else
      {
        v12 = *(std::string *)(v4 + 4);
        v7 = (xpc_object_t)v4[7];
        if (v7)
          goto LABEL_6;
      }
      v7 = xpc_null_create();
LABEL_9:
      applier[0] = v6;
      applier[1] = 0x40000000;
      applier[2] = ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke;
      applier[3] = &__block_descriptor_tmp_13_0;
      applier[4] = a2;
      xpc_dictionary_apply(v7, applier);
      xpc_release(v7);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v12.__r_.__value_.__l.__data_);
        v8 = (_QWORD *)v4[1];
        if (v8)
        {
          do
          {
LABEL_13:
            v9 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
          goto LABEL_3;
        }
      }
      else
      {
        v8 = (_QWORD *)v4[1];
        if (v8)
          goto LABEL_13;
      }
      do
      {
        v9 = (_QWORD *)v4[2];
        v10 = *v9 == (_QWORD)v4;
        v4 = v9;
      }
      while (!v10);
LABEL_3:
      v4 = v9;
    }
    while (v9 != v3);
  }
}

void sub_24B863A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  xpc_release(v20);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke(uint64_t a1, char *__s, void *a3)
{
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  char v13;
  void *v14;
  void **v15;
  size_t v16;
  _QWORD v19[5];
  void *__dst[3];

  memset(__dst, 170, sizeof(__dst));
  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    __dst[2] = (void *)(v10 | 0x8000000000000000);
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(__dst[2]) = v6;
  v8 = __dst;
  if (v6)
LABEL_8:
    memcpy(v8, __s, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  v11 = strlen((const char *)*MEMORY[0x24BE05450]);
  v12 = (void *)v11;
  v13 = HIBYTE(__dst[2]);
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    if (v11 != -1)
    {
      v14 = (void *)HIBYTE(__dst[2]);
      v15 = __dst;
      goto LABEL_14;
    }
LABEL_27:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v11 == -1)
    goto LABEL_27;
  v15 = (void **)__dst[0];
  v14 = __dst[1];
LABEL_14:
  if (v14 >= v12)
    v16 = (size_t)v12;
  else
    v16 = (size_t)v14;
  if (!memcmp(v15, (const void *)*MEMORY[0x24BE05450], v16) && v14 == v12)
  {
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 0x40000000;
    v19[2] = ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke_2;
    v19[3] = &__block_descriptor_tmp_1;
    v19[4] = *(_QWORD *)(a1 + 32);
    xpc_dictionary_apply(a3, v19);
    v13 = HIBYTE(__dst[2]);
  }
  if (v13 < 0)
    operator delete(__dst[0]);
  return 1;
}

void sub_24B863BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke_2(uint64_t a1, const char *a2, xpc_object_t object)
{
  xpc_object_t v5;
  xpc_object_t v6;

  if (object)
  {
    v5 = object;
    xpc_retain(object);
  }
  else
  {
    v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(**(xpc_object_t **)(a1 + 32), a2, v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  return 1;
}

void analytics::registerCallbackForTimedEventImpl(const char *a1)
{
  size_t v2;
  std::string::size_type v3;
  std::string *p_dst;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  unsigned __int8 v9;
  NSObject *v10;
  void **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *__p[2];
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::string __dst;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v17 = 0xAAAAAAAAAAAAAAAALL;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  abm::AWDHelperGetConnection(&v17);
  if (!v17)
    goto LABEL_20;
  v2 = strlen(a1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v3 = v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_9;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v2;
  p_dst = &__dst;
  if (v2)
LABEL_9:
    memcpy(p_dst, a1, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  v7 = std::string::insert(&__dst, 0, "com.apple.Telephony.", 0x14uLL);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v16 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v10 = qword_2579B8A80;
    if (os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_INFO))
    {
LABEL_15:
      v11 = __p;
      if (v16 < 0)
        v11 = (void **)__p[0];
      LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_impl(&dword_24B855000, v10, OS_LOG_TYPE_INFO, "Register for 24h timer: event[%s]", (uint8_t *)&__dst, 0xCu);
    }
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v10 = qword_2579B8A80;
    if (os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_INFO))
      goto LABEL_15;
  }
  wis::WISServerConnection::RegisterCallbackForTimer();
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
LABEL_20:
  v12 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    v13 = (unint64_t *)(v18 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_24B863F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a20 < 0)
  {
    operator delete(__p);
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void ___ZN9analytics33registerCallbackForTimedEventImplEPKcN8dispatch5queueEU13block_pointerFvNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  (*(void (**)(uint64_t, std::string *))(v2 + 16))(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_24B863FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 15;
  strcpy(a1, "stats.analytics");
}

uint64_t ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CB8D80;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CB8D80;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_251CB7CB8, MEMORY[0x24BEDAB00]);
}

void sub_24B8640F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

void std::__shared_ptr_pointer<AnalyticsHelper *,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper *)#1},std::allocator<AnalyticsHelper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<AnalyticsHelper *,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper *)#1},std::allocator<AnalyticsHelper>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1}::operator() const(AnalyticsHelper*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<AnalyticsHelper *,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper *)#1},std::allocator<AnalyticsHelper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1}::operator() const(AnalyticsHelper*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::SharedLoggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CB8D80;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CB8D80;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(*((_QWORD *)a1 + 1));
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*((char **)a1 + 8));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*((_QWORD *)a1 + 1));
    xpc_release(*((xpc_object_t *)a1 + 7));
    *((_QWORD *)a1 + 7) = 0;
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  const void *v5;
  size_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  size_t v10;
  size_t v11;
  int v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v8 = *((char *)v3 + 55);
      v9 = v8 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      v10 = v8 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      v11 = v6 >= v10 ? v10 : v6;
      v12 = memcmp(v9, v5, v11);
      if (v12)
        break;
      if (v10 >= v6)
        goto LABEL_23;
LABEL_9:
      v3 = (uint64_t *)v3[1];
      if (!v3)
        goto LABEL_24;
    }
    if (v12 < 0)
      goto LABEL_9;
LABEL_23:
    v7 = v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_24:
  if (v7 == v2)
    return v2;
  v13 = *((char *)v7 + 55);
  if (v13 >= 0)
    v14 = v7 + 4;
  else
    v14 = (const void *)v7[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)v7 + 55);
  else
    v15 = v7[5];
  if (v15 >= v6)
    v16 = v6;
  else
    v16 = v15;
  v17 = memcmp(v5, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      return v7;
    return v2;
  }
  else
  {
    if (v6 < v15)
      return v2;
    return v7;
  }
}

_QWORD *std::string::__assign_no_alias<true>(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      std::string::__throw_length_error[abi:ne180100]();
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      v6 = __dst;
    }
  }
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void **std::string::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v13;
  uint64_t v14;

  v6 = (unint64_t)a1[2];
  v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) > __len)
  {
    v8 = *a1;
    a1[1] = (void *)__len;
    if (__len)
      memmove(v8, __src, __len);
    goto LABEL_12;
  }
  v9 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = v7 - 1;
  v11 = a1;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v10 > 0x3FFFFFFFFFFFFFF2)
      goto LABEL_7;
LABEL_14:
    v13 = 2 * v10;
    if (__len > 2 * v10)
      v13 = __len;
    v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v14 = v13 | 7;
    if (v13 >= 0x17)
      v9 = v14 + 1;
    else
      v9 = 23;
    v8 = operator new(v9);
    if (!__len)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = *a1;
  if (v10 <= 0x3FFFFFFFFFFFFFF2)
    goto LABEL_14;
LABEL_7:
  v8 = operator new(0x7FFFFFFFFFFFFFF7uLL);
  if (__len)
LABEL_8:
    memcpy(v8, __src, __len);
LABEL_9:
  if (v10 != 22)
    operator delete(v11);
  a1[1] = (void *)__len;
  a1[2] = (void *)(v9 | 0x8000000000000000);
  *a1 = v8;
LABEL_12:
  *((_BYTE *)v8 + __len) = 0;
  return a1;
}

xpc_object_t std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__construct_node<std::pair<std::string const,xpc::dict> const&>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  void *v8;
  xpc_object_t result;

  v5 = a2 + 8;
  memset(a1, 170, 24);
  v6 = (char *)operator new(0x40uLL);
  *a1 = v6;
  a1[1] = v5;
  *((_BYTE *)a1 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
  }
  v8 = *(void **)(a3 + 24);
  *((_QWORD *)v6 + 7) = v8;
  if (v8)
  {
    result = xpc_retain(v8);
  }
  else
  {
    result = xpc_null_create();
    *((_QWORD *)v6 + 7) = result;
  }
  *((_BYTE *)a1 + 16) = 1;
  return result;
}

void sub_24B864724(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      xpc_release(*(xpc_object_t *)(v2 + 56));
      *(_QWORD *)(v2 + 56) = 0;
      if (*(char *)(v2 + 55) < 0)
        operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  uint64_t **v8;
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  BOOL v23;
  int v24;
  const void *v25;
  size_t v26;
  int v27;
  const void *v28;
  size_t v29;
  size_t v30;
  int v31;
  uint64_t *v32;
  uint64_t **v33;
  _QWORD *v34;
  const void *v35;
  const void *v36;
  int v37;
  const void *v38;
  size_t v39;
  size_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  int v46;
  uint64_t *v47;
  size_t v48;
  size_t v49;
  int v50;
  uint64_t *v51;
  uint64_t **v52;
  uint64_t **v53;
  _QWORD *v54;
  const void *v55;
  const void *v56;
  int v57;
  const void *v58;
  size_t v59;
  size_t v60;
  int v61;
  int v62;

  v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_23;
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *((char *)a2 + 55);
  if (v13 >= 0)
    v14 = a2 + 4;
  else
    v14 = (const void *)a2[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a2 + 55);
  else
    v15 = a2[5];
  if (v15 >= v12)
    v16 = v12;
  else
    v16 = v15;
  v17 = memcmp(v11, v14, v16);
  if (!v17)
  {
    if (v12 >= v15)
      goto LABEL_19;
LABEL_23:
    v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v21 = a2;
    }
    else
    {
      if (v19)
      {
        v20 = (uint64_t *)*a2;
        do
        {
          v21 = v20;
          v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        v22 = a2;
        do
        {
          v21 = (uint64_t *)v22[2];
          v23 = *v21 == (_QWORD)v22;
          v22 = v21;
        }
        while (v23);
      }
      v24 = *((char *)v21 + 55);
      if (v24 >= 0)
        v25 = v21 + 4;
      else
        v25 = (const void *)v21[4];
      if (v24 >= 0)
        v26 = *((unsigned __int8 *)v21 + 55);
      else
        v26 = v21[5];
      v27 = *((char *)a5 + 23);
      if (v27 >= 0)
        v28 = a5;
      else
        v28 = *a5;
      if (v27 >= 0)
        v29 = *((unsigned __int8 *)a5 + 23);
      else
        v29 = (size_t)a5[1];
      if (v29 >= v26)
        v30 = v26;
      else
        v30 = v29;
      v31 = memcmp(v25, v28, v30);
      if (v31)
      {
        if ((v31 & 0x80000000) == 0)
          goto LABEL_48;
      }
      else if (v26 >= v29)
      {
LABEL_48:
        v32 = *v8;
        if (!*v8)
        {
          v33 = v8;
LABEL_69:
          *a3 = (uint64_t *)v33;
          return (uint64_t *)v8;
        }
        while (1)
        {
          v33 = (uint64_t **)v32;
          v36 = (const void *)v32[4];
          v34 = v32 + 4;
          v35 = v36;
          v37 = *((char *)v34 + 23);
          if (v37 >= 0)
            v38 = v34;
          else
            v38 = v35;
          if (v37 >= 0)
            v39 = *((unsigned __int8 *)v34 + 23);
          else
            v39 = v34[1];
          if (v39 >= v29)
            v40 = v29;
          else
            v40 = v39;
          v41 = memcmp(v28, v38, v40);
          if (v41)
          {
            if (v41 < 0)
              goto LABEL_50;
LABEL_64:
            v42 = memcmp(v38, v28, v40);
            if (v42)
            {
              if ((v42 & 0x80000000) == 0)
                goto LABEL_69;
            }
            else if (v39 >= v29)
            {
              goto LABEL_69;
            }
            v8 = v33 + 1;
            v32 = v33[1];
            if (!v32)
              goto LABEL_69;
          }
          else
          {
            if (v29 >= v39)
              goto LABEL_64;
LABEL_50:
            v32 = *v33;
            v8 = v33;
            if (!*v33)
              goto LABEL_69;
          }
        }
      }
    }
    if (v19)
    {
      *a3 = v21;
      return v21 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v17 < 0)
    goto LABEL_23;
LABEL_19:
  v18 = memcmp(v14, v11, v16);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0)
    {
LABEL_21:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
  }
  else if (v15 >= v12)
  {
    goto LABEL_21;
  }
  v43 = a2[1];
  if (v43)
  {
    v44 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v44;
      v44 = (uint64_t *)*v44;
    }
    while (v44);
  }
  else
  {
    v45 = a2;
    do
    {
      a4 = (uint64_t **)v45[2];
      v23 = *a4 == v45;
      v45 = (uint64_t *)a4;
    }
    while (!v23);
  }
  if (a4 != v8)
  {
    v46 = *((char *)a4 + 55);
    if (v46 >= 0)
      v47 = (uint64_t *)(a4 + 4);
    else
      v47 = a4[4];
    if (v46 >= 0)
      v48 = *((unsigned __int8 *)a4 + 55);
    else
      v48 = (size_t)a4[5];
    if (v48 >= v12)
      v49 = v12;
    else
      v49 = v48;
    v50 = memcmp(v11, v47, v49);
    if (v50)
    {
      if ((v50 & 0x80000000) == 0)
      {
LABEL_95:
        v51 = *v8;
        if (*v8)
        {
          v52 = a3;
          while (1)
          {
            v53 = (uint64_t **)v51;
            v56 = (const void *)v51[4];
            v54 = v51 + 4;
            v55 = v56;
            v57 = *((char *)v54 + 23);
            if (v57 >= 0)
              v58 = v54;
            else
              v58 = v55;
            if (v57 >= 0)
              v59 = *((unsigned __int8 *)v54 + 23);
            else
              v59 = v54[1];
            if (v59 >= v12)
              v60 = v12;
            else
              v60 = v59;
            v61 = memcmp(v11, v58, v60);
            if (v61)
            {
              if (v61 < 0)
                goto LABEL_97;
LABEL_111:
              v62 = memcmp(v58, v11, v60);
              if (v62)
              {
                if ((v62 & 0x80000000) == 0)
                  goto LABEL_123;
              }
              else if (v59 >= v12)
              {
                goto LABEL_123;
              }
              v8 = v53 + 1;
              v51 = v53[1];
              if (!v51)
                goto LABEL_123;
            }
            else
            {
              if (v12 >= v59)
                goto LABEL_111;
LABEL_97:
              v51 = *v53;
              v8 = v53;
              if (!*v53)
                goto LABEL_123;
            }
          }
        }
        v53 = v8;
        v52 = a3;
LABEL_123:
        *v52 = (uint64_t *)v53;
        return (uint64_t *)v8;
      }
    }
    else if (v12 >= v48)
    {
      goto LABEL_95;
    }
  }
  if (v43)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

void std::string::__erase_external_with_move(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  int v4;
  std::string::size_type size;
  std::string *v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string::size_type v9;

  if (!__n)
    return;
  v4 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v4 < 0)
  {
    v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
    v7 = size - __pos;
    if (size - __pos >= __n)
      v8 = __n;
    else
      v8 = size - __pos;
    if (size - __pos <= __n)
      goto LABEL_8;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v6 = this;
    v7 = size - __pos;
    if (size - __pos >= __n)
      v8 = __n;
    else
      v8 = HIBYTE(this->__r_.__value_.__r.__words[2]) - __pos;
    if (v7 <= __n)
      goto LABEL_8;
  }
  memmove((char *)v6 + __pos, (char *)v6 + __pos + v8, v7 - v8);
  LOBYTE(v4) = *((_BYTE *)&this->__r_.__value_.__s + 23);
LABEL_8:
  v9 = size - v8;
  if ((v4 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = v9;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
  v6->__r_.__value_.__s.__data_[v9] = 0;
}

void ResetDetection::create(NSObject **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  void *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  dispatch_object_t object;

  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = operator new(0xB8uLL);
  v9 = *a1;
  object = v9;
  if (v9)
    dispatch_retain(v9);
  v10 = (std::__shared_weak_count *)a2[1];
  v16 = *a2;
  v17 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  ResetDetection::ResetDetection((uint64_t)v8, &object, &v16, a3);
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<ResetDetection>::shared_ptr[abi:ne180100]<ResetDetection,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1},void>(a4, (uint64_t)v8);
  ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a4);
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (object)
    dispatch_release(object);
}

void sub_24B864CD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  NSObject *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v2)
    dispatch_release(v2);
  _Unwind_Resume(a1);
}

uint64_t ResetDetection::ResetDetection(uint64_t a1, NSObject **a2, _QWORD *a3, uint64_t a4)
{
  NSObject *v8;
  _BYTE v10[16];

  *(_QWORD *)a1 = off_251CB8E50;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v10, "com.apple.telephony.abm", "reset.detect");
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v8 = *a2;
  *(_QWORD *)(a1 + 88) = *a2;
  if (v8)
    dispatch_retain(v8);
  *(_QWORD *)(a1 + 96) = 0;
  ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>((_QWORD *)a1, (uint64_t)v10, a3);
  *(_QWORD *)a1 = off_251CB9070;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  *(_QWORD *)a1 = off_251CB8E50;
  *(_QWORD *)(a1 + 104) = a4;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = TelephonyBasebandCreateController();
  *(_DWORD *)(a1 + 128) = 2;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  return a1;
}

void sub_24B864E0C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  ctu::SharedLoggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void sub_24B864E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

const char *ResetDetection::getName(ResetDetection *this)
{
  return "reset.detect";
}

_QWORD *ctu::SharedLoggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CB8FE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CB8FE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ResetDetection::~ResetDetection(ResetDetection *this)
{
  const void *v2;
  __CFRunLoop *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  _QWORD block[5];

  *(_QWORD *)this = off_251CB8E50;
  v2 = (const void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (__CFRunLoop *)*((_QWORD *)this + 13);
  v4 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  v5 = (const void *)*MEMORY[0x24BDBD5A0];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN14ResetDetectionD2Ev_block_invoke;
  block[3] = &__block_descriptor_tmp_2;
  block[4] = v4;
  CFRunLoopPerformBlock(v3, v5, block);
  CFRunLoopWakeUp(*((CFRunLoopRef *)this + 13));
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*((char **)this + 21));
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*((char **)this + 18));
  v6 = (const void *)*((_QWORD *)this + 15);
  if (v6)
    CFRelease(v6);
  *(_QWORD *)this = off_251CB8FE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v7 = *((_QWORD *)this + 12);
  if (v7)
    dispatch_release(v7);
  v8 = *((_QWORD *)this + 11);
  if (v8)
    dispatch_release(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

{
  void *v1;

  ResetDetection::~ResetDetection(this);
  operator delete(v1);
}

void ___ZN14ResetDetectionD2Ev_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;

  v1 = *(_QWORD **)(a1 + 32);
  if (v1)
  {
    v2 = (std::__shared_weak_count *)v1[1];
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
    operator delete(v1);
  }
}

void ResetDetection::start(ResetDetection *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x24BDAC760];
  v1[1] = 0x40000000;
  v1[2] = ___ZN14ResetDetection5startEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_3;
  v1[4] = this;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN14ResetDetection5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  uint64_t (*v13)(uint64_t);
  NSObject *v14;
  uint64_t (*v15)(uint64_t);
  uint8_t v16[16];
  uint8_t buf[16];
  uint8_t v18[15];
  unsigned __int8 v19;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Started", buf, 2u);
  }
  v3 = operator new(0x10uLL);
  v4 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v4 || (v5 = *(_QWORD *)(v1 + 72), (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  *v3 = v5;
  v3[1] = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  *(_QWORD *)(v1 + 112) = v3;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    if ((TelephonyBasebandRegisterForReset() & 1) != 0)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if ((TelephonyBasebandRegisterForReset() & 1) != 0)
      goto LABEL_14;
  }
  v12 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v16 = 0;
    _os_log_error_impl(&dword_24B855000, v12, OS_LOG_TYPE_ERROR, "failed registering for reset detect", v16, 2u);
    v15 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
    if (!*(_QWORD *)(v1 + 120))
      v15 = 0;
    if (v15)
      goto LABEL_17;
    return;
  }
LABEL_14:
  v13 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
  if (!*(_QWORD *)(v1 + 120))
    v13 = 0;
  if (v13)
  {
LABEL_17:
    v19 = 1;
    if ((TelephonyBasebandGetReset() & 1) != 0)
    {
      *(_DWORD *)(v1 + 128) = v19;
    }
    else
    {
      v14 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v18 = 0;
        _os_log_error_impl(&dword_24B855000, v14, OS_LOG_TYPE_ERROR, "failed to poll for reset detect", v18, 2u);
      }
    }
  }
}

void sub_24B865230(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void ResetDetection::sResetDetectCallback(ResetDetection *this, void *a2, int a3, unsigned int a4, void *a5)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  int v15;

  if (this)
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (v5)
    {
      v7 = *(_QWORD *)this;
      p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      v10 = std::__shared_weak_count::lock(v5);
      if (v10)
      {
        v11 = v10;
        if (v7)
        {
          v14[0] = MEMORY[0x24BDAC760];
          v14[1] = 0x40000000;
          v14[2] = ___ZN14ResetDetection19resetDetectCallbackEPvjjS0__block_invoke;
          v14[3] = &__block_descriptor_tmp_6;
          v14[4] = v7;
          v15 = a3;
          ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)(v7 + 72), (uint64_t)v14);
        }
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t ResetDetection::poll(ResetDetection *this, BOOL *a2)
{
  uint64_t (*v3)(uint64_t);
  uint64_t Reset;
  NSObject *v7;
  uint8_t v8[15];
  BOOL v9;

  v3 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
  if (!*((_QWORD *)this + 15))
    v3 = 0;
  if (!v3)
    return 0;
  v9 = 1;
  Reset = TelephonyBasebandGetReset();
  if ((_DWORD)Reset)
  {
    *a2 = v9;
    return Reset;
  }
  v7 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    return Reset;
  *(_WORD *)v8 = 0;
  _os_log_error_impl(&dword_24B855000, v7, OS_LOG_TYPE_ERROR, "failed to poll for reset detect", v8, 2u);
  return Reset;
}

void ResetDetection::add(uint64_t a1, uint64_t a2, char a3, void **a4, uint64_t a5)
{
  void *v9;
  _QWORD v10[5];
  std::string __p;
  void *aBlock;
  uint64_t v13;
  char v14;

  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1174405120;
  v10[2] = ___ZN14ResetDetection3addENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbN8dispatch5blockIU13block_pointerFviEEEy_block_invoke;
  v10[3] = &__block_descriptor_tmp_4;
  v10[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v14 = a3;
    v9 = *a4;
    if (!*a4)
      goto LABEL_6;
    goto LABEL_5;
  }
  __p = *(std::string *)a2;
  v14 = a3;
  v9 = *a4;
  if (*a4)
LABEL_5:
    v9 = _Block_copy(v9);
LABEL_6:
  aBlock = v9;
  v13 = a5;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v10);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void ___ZN14ResetDetection3addENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbN8dispatch5blockIU13block_pointerFviEEEy_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  _BOOL4 v9;
  BOOL v10;
  BOOL v11;
  _OWORD *v13;
  int v14;
  const void *v15;
  void *v16;
  void *v17;
  const void *v18;
  void *v19;
  void *v20;
  std::string v21;
  void *v22;
  std::string v23;
  uint8_t buf[4];
  _QWORD *v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v4 = (_QWORD *)*v4;
    v5 = *(unsigned __int8 *)(a1 + 80);
    *(_DWORD *)buf = 136315394;
    v25 = v4;
    v26 = 1024;
    v27 = v5;
    _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I Added detection with key '%s', reset=%d", buf, 0x12u);
  }
  v6 = *(_DWORD *)(v2 + 128);
  v7 = *(unsigned __int8 *)(a1 + 80);
  if (v6)
  {
    if (v6 != 2)
    {
      v8 = v6 != 1 || v7 == 0;
      v9 = !v8;
      v10 = v6 | v7 || v6 == 1;
      v11 = !v10 && v7 == 0;
      if (v11 || v9)
        goto LABEL_28;
    }
  }
  else if (!*(_BYTE *)(a1 + 80))
  {
LABEL_28:
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    return;
  }
  v13 = (_OWORD *)(a1 + 40);
  v14 = *(char *)(a1 + 63);
  if (*(_BYTE *)(a1 + 80))
  {
    if (v14 < 0)
    {
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *v13;
      v23.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 56);
    }
    v15 = *(const void **)(a1 + 64);
    if (v15)
      v16 = _Block_copy(v15);
    else
      v16 = 0;
    v22 = v16;
    ResetDetection::addToBlocks_sync(v2, (uint64_t)&v23, &v22, (uint64_t **)(v2 + 136), *(_QWORD *)(a1 + 72));
    if (v16)
      _Block_release(v16);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v23.__r_.__value_.__r.__words[0];
LABEL_47:
      operator delete(v17);
    }
  }
  else
  {
    if (v14 < 0)
    {
      std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *v13;
      v21.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 56);
    }
    v18 = *(const void **)(a1 + 64);
    if (v18)
      v19 = _Block_copy(v18);
    else
      v19 = 0;
    v20 = v19;
    ResetDetection::addToBlocks_sync(v2, (uint64_t)&v21, &v20, (uint64_t **)(v2 + 160), *(_QWORD *)(a1 + 72));
    if (v19)
      _Block_release(v19);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v21.__r_.__value_.__r.__words[0];
      goto LABEL_47;
    }
  }
}

void sub_24B865724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ResetDetection::addToBlocks_sync(uint64_t a1, uint64_t a2, void **a3, uint64_t **a4, dispatch_time_t a5)
{
  NSObject *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t *v21;
  uint64_t **v22;
  int v23;
  const std::string::value_type *v24;
  size_t v25;
  uint64_t **v26;
  _QWORD *v27;
  const void *v28;
  const void *v29;
  int v30;
  const void *v31;
  size_t v32;
  size_t v33;
  int v34;
  int v35;
  _QWORD *v36;
  std::string *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  _QWORD handler[6];
  std::__shared_weak_count *v43;
  uint64_t **v44;
  std::string __p;

  v10 = dispatch_source_create(MEMORY[0x24BDACA18], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
  dispatch_source_set_timer(v10, a5, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
  v11 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v11 || (v12 = *(_QWORD *)(a1 + 72), (v13 = std::__shared_weak_count::lock(v11)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v14 = v13;
  p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
  handler[0] = MEMORY[0x24BDAC760];
  handler[1] = 1174405120;
  handler[2] = ___ZN14ResetDetection16addToBlocks_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFviEEERNS0_3mapIS6_NS0_4pairIP17dispatch_source_sSB_EENS0_4lessIS6_EENS4_INSD_IKS6_SG_EEEEEEy_block_invoke;
  handler[3] = &__block_descriptor_tmp_5;
  handler[4] = a1;
  handler[5] = v12;
  v43 = v14;
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  v44 = a4;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  dispatch_source_set_event_handler(v10, handler);
  dispatch_activate(v10);
  v20 = *a3;
  if (*a3)
    v20 = _Block_copy(v20);
  v41 = (uint64_t *)v20;
  v22 = a4 + 1;
  v21 = a4[1];
  if (v21)
  {
    v23 = *(char *)(a2 + 23);
    if (v23 >= 0)
      v24 = (const std::string::value_type *)a2;
    else
      v24 = *(const std::string::value_type **)a2;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a2 + 23);
    else
      v25 = *(_QWORD *)(a2 + 8);
    while (1)
    {
      v26 = (uint64_t **)v21;
      v29 = (const void *)v21[4];
      v27 = v21 + 4;
      v28 = v29;
      v30 = *((char *)v27 + 23);
      if (v30 >= 0)
        v31 = v27;
      else
        v31 = v28;
      if (v30 >= 0)
        v32 = *((unsigned __int8 *)v27 + 23);
      else
        v32 = v27[1];
      if (v32 >= v25)
        v33 = v25;
      else
        v33 = v32;
      v34 = memcmp(v24, v31, v33);
      if (v34)
      {
        if (v34 < 0)
          goto LABEL_23;
LABEL_37:
        v35 = memcmp(v31, v24, v33);
        if (v35)
        {
          if ((v35 & 0x80000000) == 0)
            goto LABEL_51;
        }
        else if (v32 >= v25)
        {
LABEL_51:
          v40 = v26[8];
          v26[7] = (uint64_t *)v10;
          v26[8] = v41;
          if (v40)
            goto LABEL_52;
          goto LABEL_53;
        }
        v21 = v26[1];
        if (!v21)
        {
          v22 = v26 + 1;
          goto LABEL_44;
        }
      }
      else
      {
        if (v25 >= v32)
          goto LABEL_37;
LABEL_23:
        v21 = *v26;
        v22 = v26;
        if (!*v26)
          goto LABEL_44;
      }
    }
  }
  v26 = a4 + 1;
LABEL_44:
  v36 = operator new(0x48uLL);
  v37 = (std::string *)(v36 + 4);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v37, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v37->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v36[6] = *(_QWORD *)(a2 + 16);
  }
  v36[7] = 0;
  v36[8] = 0;
  *v36 = 0;
  v36[1] = 0;
  v36[2] = v26;
  *v22 = v36;
  v38 = (uint64_t *)**a4;
  v39 = v36;
  if (v38)
  {
    *a4 = v38;
    v39 = *v22;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a4[1], v39);
  a4[2] = (uint64_t *)((char *)a4[2] + 1);
  v40 = (uint64_t *)v36[8];
  v36[7] = v10;
  v36[8] = v41;
  if (v40)
LABEL_52:
    _Block_release(v40);
LABEL_53:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v43)
    std::__shared_weak_count::__release_weak(v43);
  std::__shared_weak_count::__release_weak(v14);
}

void sub_24B865AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count *v25;
  void *v26;
  std::__shared_weak_count *v28;

  operator delete(v26);
  std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>::~pair((uint64_t)&a10);
  if (a25 < 0)
  {
    operator delete(__p);
    v28 = a18;
    if (a18)
      goto LABEL_3;
  }
  else
  {
    v28 = a18;
    if (a18)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v28);
      std::__shared_weak_count::__release_weak(v25);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::__release_weak(v25);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  void *result;

  v4 = (std::string *)(a1 + 40);
  if ((*(char *)(a2 + 63) & 0x80000000) == 0)
  {
    v5 = *(_OWORD *)(a2 + 40);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    result = *(void **)(a2 + 64);
    if (!result)
      goto LABEL_6;
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  result = *(void **)(a2 + 64);
  if (result)
LABEL_5:
    result = _Block_copy(result);
LABEL_6:
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 64);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void ___ZN14ResetDetection16addToBlocks_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFviEEERNS0_3mapIS6_NS0_4pairIP17dispatch_source_sSB_EENS0_4lessIS6_EENS4_INSD_IKS6_SG_EEEEEEy_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  const void *v11;
  size_t v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  const void *v20;
  size_t v21;
  size_t v22;
  int v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t *v29;
  const void *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    return;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    return;
  v5 = v4;
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_54;
  v6 = *(_QWORD *)(a1 + 56);
  v9 = *(uint64_t ***)(v6 + 8);
  v7 = (uint64_t *)(v6 + 8);
  v8 = v9;
  if (!v9)
    goto LABEL_54;
  v10 = *(char *)(a1 + 87);
  if (v10 >= 0)
    v11 = (const void *)(a1 + 64);
  else
    v11 = *(const void **)(a1 + 64);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 87);
  else
    v12 = *(_QWORD *)(a1 + 72);
  v13 = v7;
  do
  {
    while (1)
    {
      v14 = *((char *)v8 + 55);
      v15 = v14 >= 0 ? (uint64_t *)(v8 + 4) : v8[4];
      v16 = v14 >= 0 ? *((unsigned __int8 *)v8 + 55) : (size_t)v8[5];
      v17 = v12 >= v16 ? v16 : v12;
      v18 = memcmp(v15, v11, v17);
      if (v18)
        break;
      if (v16 >= v12)
        goto LABEL_26;
LABEL_12:
      v8 = (uint64_t **)v8[1];
      if (!v8)
        goto LABEL_27;
    }
    if (v18 < 0)
      goto LABEL_12;
LABEL_26:
    v13 = (uint64_t *)v8;
    v8 = (uint64_t **)*v8;
  }
  while (v8);
LABEL_27:
  if (v13 != v7)
  {
    v19 = *((char *)v13 + 55);
    if (v19 >= 0)
      v20 = v13 + 4;
    else
      v20 = (const void *)v13[4];
    if (v19 >= 0)
      v21 = *((unsigned __int8 *)v13 + 55);
    else
      v21 = v13[5];
    if (v21 >= v12)
      v22 = v12;
    else
      v22 = v21;
    v23 = memcmp(v11, v20, v22);
    if (v23)
    {
      if (v23 < 0)
        goto LABEL_54;
LABEL_41:
      ResetDetection::invokeBlock_sync(v3, (uint64_t)(v13 + 4), 3760250883);
      v24 = *(uint64_t ***)(a1 + 56);
      v25 = (uint64_t *)v13[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
      else
      {
        v27 = v13;
        do
        {
          v26 = (uint64_t *)v27[2];
          v28 = *v26 == (_QWORD)v27;
          v27 = v26;
        }
        while (!v28);
      }
      if (*v24 == v13)
        *v24 = v26;
      v29 = v24[1];
      v24[2] = (uint64_t *)((char *)v24[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v29, v13);
      v30 = (const void *)v13[8];
      if (v30)
        _Block_release(v30);
      if (*((char *)v13 + 55) < 0)
        operator delete((void *)v13[4]);
      operator delete(v13);
    }
    else if (v12 >= v21)
    {
      goto LABEL_41;
    }
  }
LABEL_54:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_24B865DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ResetDetection::invokeBlock_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  NSObject *v7;
  void (**v8)(void *, _QWORD);
  NSObject *v9;
  std::string *p_p;
  std::string __p;
  uint8_t buf[4];
  std::string *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  memset(&__p, 170, sizeof(__p));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v7 = *(NSObject **)(a2 + 24);
  v6 = *(const void **)(a2 + 32);
  if (v6)
  {
    v8 = (void (**)(void *, _QWORD))_Block_copy(v6);
    *(_QWORD *)(a2 + 24) = 0;
    if (!v7)
      goto LABEL_7;
    goto LABEL_6;
  }
  v8 = 0;
  *(_QWORD *)(a2 + 24) = 0;
  if (v7)
  {
LABEL_6:
    dispatch_source_cancel(v7);
    dispatch_release(v7);
  }
LABEL_7:
  v9 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v13 = p_p;
    _os_log_impl(&dword_24B855000, v9, OS_LOG_TYPE_DEFAULT, "#I Signalling %s", buf, 0xCu);
  }
  v8[2](v8, a3);
  _Block_release(v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_24B865F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrI14ResetDetectionEE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 64);
    a1[10] = *(_QWORD *)(a2 + 80);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_24B866024(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrI14ResetDetectionEE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2)
      return;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 64));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>::~pair(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

void ResetDetection::notifyResetDetectBlocks_sync(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  void *__p[2];
  __int128 v13;
  void *aBlock;
  _QWORD *v15;
  _QWORD v16[2];

  v3 = &v15;
  v4 = *(char **)(a2 + 8);
  v15 = *(_QWORD **)a2;
  v16[0] = v4;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v16[1] = v5;
  if (v5)
    v3 = v4 + 16;
  *v3 = v16;
  *(_QWORD *)a2 = a2 + 8;
  v6 = v15;
  if (v15 != v16)
  {
    while (1)
    {
      aBlock = (void *)0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)__p = v7;
      v13 = v7;
      if (*((char *)v6 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v6[4], v6[5]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v6 + 2);
        *(_QWORD *)&v13 = v6[6];
      }
      v8 = (void *)v6[8];
      *((_QWORD *)&v13 + 1) = v6[7];
      if (v8)
        v8 = _Block_copy(v8);
      aBlock = v8;
      ResetDetection::invokeBlock_sync(a1, (uint64_t)__p, 0);
      if (aBlock)
        _Block_release(aBlock);
      if (SBYTE7(v13) < 0)
      {
        operator delete(__p[0]);
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_17:
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_5;
        }
      }
      else
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_17;
      }
      do
      {
        v10 = (_QWORD *)v6[2];
        v11 = *v10 == (_QWORD)v6;
        v6 = v10;
      }
      while (!v11);
LABEL_5:
      v6 = v10;
      if (v10 == v16)
      {
        v4 = (char *)v16[0];
        break;
      }
    }
  }
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(v4);
}

void sub_24B8661F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(a15);
  _Unwind_Resume(a1);
}

void sub_24B866214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  std::pair<std::string const,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>::~pair((uint64_t)&a9);
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(a15);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>::~pair(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void ResetDetection::resetDetectCallback(ResetDetection *this, void *a2, unsigned int a3, int a4, void *a5)
{
  _QWORD v5[5];
  int v6;

  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = ___ZN14ResetDetection19resetDetectCallbackEPvjjS0__block_invoke;
  v5[3] = &__block_descriptor_tmp_6;
  v5[4] = this;
  v6 = a4;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v5);
}

void ___ZN14ResetDetection19resetDetectCallbackEPvjjS0__block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 40);
  if (v2 == -469794815)
  {
    v5 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_impl(&dword_24B855000, v5, OS_LOG_TYPE_DEFAULT, "#I baseband alive detected", (uint8_t *)&state, 2u);
    }
    *(_DWORD *)(v1 + 128) = 0;
    ResetDetection::notifyResetDetectBlocks_sync(v1, v1 + 160);
  }
  else if (v2 == -469794816)
  {
    v3 = _os_activity_create(&dword_24B855000, "Baseband state: reset detected", MEMORY[0x24BDACB08], OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
    state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
    os_activity_scope_enter(v3, &state);
    os_activity_scope_leave(&state);
    v4 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I baseband reset detected", (uint8_t *)&state, 2u);
    }
    *(_DWORD *)(v1 + 128) = 1;
    ResetDetection::notifyResetDetectBlocks_sync(v1, v1 + 136);
    if (v3)
      os_release(v3);
  }
}

void sub_24B86642C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::os::scoped_activity::~scoped_activity((void **)va);
  _Unwind_Resume(a1);
}

void ctu::os::scoped_activity::~scoped_activity(void **this)
{
  void *v1;

  v1 = *this;
  if (v1)
    os_release(v1);
}

uint64_t ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "reset.detect");
}

uint64_t ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CB8FE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CB8FE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_24B86660C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_24B866628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<ResetDetection>::shared_ptr[abi:ne180100]<ResetDetection,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_251CB9020;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_24B866744(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1}::operator() const(ResetDetection*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_24B866764(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ResetDetection *,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection *)#1},std::allocator<ResetDetection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ResetDetection *,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection *)#1},std::allocator<ResetDetection>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1}::operator() const(ResetDetection*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<ResetDetection *,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection *)#1},std::allocator<ResetDetection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptr"
                                "IT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1}::operator() const(ResetDetection*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  *a1 = off_251CB8FE0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[1] = &unk_251CB85F0;
  a1[7] = *a3;
  v5 = a3[1];
  a1[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  return a1;
}

void sub_24B8668D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

void ctu::SharedLoggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CB8FE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(char *a1)
{
  const void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (const void *)*((_QWORD *)a1 + 8);
    if (v2)
      _Block_release(v2);
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void ctu::SharedSynchronizable<ResetDetection>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI14ResetDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_251CB90A8;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI14ResetDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIK14ResetDetectionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIK14ResetDetectionEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void **std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ResetInfo::ResetInfo(ResetInfo *this)
{
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
}

{
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
}

uint64_t ResetInfo::ResetInfo(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, int a6, __int128 *a7)
{
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string __p;
  __int128 v17;
  uint64_t v18;

  v18 = 0;
  ctu::cf::assign();
  *(_OWORD *)a1 = 0uLL;
  *(_QWORD *)(a1 + 16) = v18;
  v17 = 0uLL;
  v18 = 0;
  ctu::cf::assign();
  *(_OWORD *)(a1 + 24) = 0uLL;
  *(_QWORD *)(a1 + 40) = v18;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v12 = *a4;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 48) = v12;
  }
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    __p = *(std::string *)a5;
  *(_QWORD *)(a1 + 72) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    *(_DWORD *)(a1 + 80) = a6;
    v13 = (std::string *)(a1 + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_11:
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a7, *((_QWORD *)a7 + 1));
    return a1;
  }
  *(_DWORD *)(a1 + 80) = a6;
  v13 = (std::string *)(a1 + 88);
  if (*((char *)a7 + 23) < 0)
    goto LABEL_11;
LABEL_9:
  v14 = *a7;
  v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a7 + 2);
  *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  return a1;
}

void sub_24B866DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void **v21;

  if (*(char *)(v20 + 47) < 0)
    operator delete(*v21);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void ResetInfo::ResetInfo(std::string *this, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5, int a6, __int128 *a7)
{
  __int128 v13;
  std::string *v14;
  __int128 v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string __p;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v14 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v13 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v13;
    v14 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      v15 = *a3;
      v14->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
LABEL_6:
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v16 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v16;
  }
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    __p = *(std::string *)a5;
  this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = a6;
    v17 = (std::string *)((char *)this + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0)
      goto LABEL_14;
  }
  else
  {
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = a6;
    v17 = (std::string *)((char *)this + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0)
    {
LABEL_14:
      v18 = *a7;
      v17->__r_.__value_.__r.__words[2] = *((_QWORD *)a7 + 2);
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      return;
    }
  }
  std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a7, *((_QWORD *)a7 + 1));
}

void sub_24B866FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;

  if (*(char *)(v14 + 47) < 0)
  {
    operator delete(*v15);
    if ((*(char *)(v14 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v14 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

void ResetInfo::~ResetInfo(void **this)
{
  if (*((char *)this + 111) < 0)
  {
    operator delete(this[11]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(*this);
    return;
  }
LABEL_8:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    goto LABEL_9;
}

{
  if (*((char *)this + 111) < 0)
  {
    operator delete(this[11]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(*this);
    return;
  }
LABEL_8:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    goto LABEL_9;
}

void ResetInfo::getType(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

void ResetInfo::getSubType(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
}

void ResetInfo::getReason(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 8);
  }
}

void ResetInfo::getTime(ResetInfo *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _QWORD *v6[2];

  v3 = *((_QWORD *)this + 9);
  v4 = operator new(0x38uLL);
  v4[8] = 0;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = v6;
  v5 = v4;
  v6[0] = v4;
  *((_BYTE *)v4 + 24) = 1;
  v6[1] = (_QWORD *)1;
  *((_QWORD *)v4 + 5) = v3;
  *((_QWORD *)v4 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v5, 0, 9, a2);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v5, v6[0]);
}

void sub_24B867264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t ResetInfo::getChronoTime(ResetInfo *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t ResetInfo::getRadar(ResetInfo *this)
{
  return *((unsigned int *)this + 20);
}

void ResetInfo::getCrashReason(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 13);
  }
}

void ResetInfo::setType(ResetInfo *this, const __CFString *a2)
{
  ctu::cf::assign();
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 15) = 0;
  *((_BYTE *)this + 23) = 0;
}

void sub_24B867358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ResetInfo::setSubType(ResetInfo *this, const __CFString *a2)
{
  ctu::cf::assign();
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)((char *)this + 39) = 0;
  *((_BYTE *)this + 47) = 0;
}

void sub_24B867414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **ResetInfo::setReason(uint64_t a1, void **a2)
{
  void **result;
  __int128 v4;
  size_t v5;
  size_t v6;

  result = (void **)(a1 + 48);
  if (result != a2)
  {
    if (*(char *)(a1 + 71) < 0)
    {
      v5 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        v6 = v5;
      }
      return std::string::__assign_no_alias<false>(result, a2, v6);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      return (void **)std::string::__assign_no_alias<true>(result, *a2, (size_t)a2[1]);
    }
    else
    {
      v4 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)result = v4;
    }
  }
  return result;
}

void ResetInfo::setTime(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  *(_QWORD *)(a1 + 72) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_24B867504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ResetInfo::setRadar(uint64_t result, int a2)
{
  *(_DWORD *)(result + 80) = a2;
  return result;
}

void **ResetInfo::setCrashReason(uint64_t a1, void **a2)
{
  void **result;
  __int128 v4;
  size_t v5;
  size_t v6;

  result = (void **)(a1 + 88);
  if (result != a2)
  {
    if (*(char *)(a1 + 111) < 0)
    {
      v5 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        v6 = v5;
      }
      return std::string::__assign_no_alias<false>(result, a2, v6);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      return (void **)std::string::__assign_no_alias<true>(result, *a2, (size_t)a2[1]);
    }
    else
    {
      v4 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)result = v4;
    }
  }
  return result;
}

uint64_t ResetInfo::asString@<X0>(ResetInfo *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  _QWORD *v5;
  int v6;
  ResetInfo *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  int v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  char v34;
  size_t v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  void *__p[2];
  unsigned __int8 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *v50[2];
  __int128 v51;
  __int128 v52;
  _OWORD v53[9];
  unint64_t v54;
  _QWORD **v55;
  _QWORD *v56;
  uint64_t v57;

  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1)
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global);
  v54 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53[7] = v4;
  v53[8] = v4;
  v53[5] = v4;
  v53[6] = v4;
  v53[3] = v4;
  v53[4] = v4;
  v53[1] = v4;
  v53[2] = v4;
  v52 = v4;
  v53[0] = v4;
  *(_OWORD *)v50 = v4;
  v51 = v4;
  v48 = v4;
  v49 = v4;
  v46 = v4;
  v47 = v4;
  v45 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v45);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"ResetInfo { Type='", 18);
  v6 = *((char *)this + 23);
  if (v6 >= 0)
    v7 = this;
  else
    v7 = *(ResetInfo **)this;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)this + 23);
  else
    v8 = *((_QWORD *)this + 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"' SubType='", 11);
  v11 = *((char *)this + 47);
  if (v11 >= 0)
    v12 = (char *)this + 24;
  else
    v12 = (char *)*((_QWORD *)this + 3);
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)this + 47);
  else
    v13 = *((_QWORD *)this + 4);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"' Time='", 8);
  v16 = *((_QWORD *)this + 9);
  v56 = 0;
  v57 = 0;
  v55 = &v56;
  v17 = operator new(0x38uLL);
  v17[8] = 0;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = &v56;
  v55 = (_QWORD **)v17;
  v56 = v17;
  *((_BYTE *)v17 + 24) = 1;
  v57 = 1;
  *((_QWORD *)v17 + 5) = v16;
  *((_QWORD *)v17 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v55, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v55, v56);
  if ((v44 & 0x80u) == 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if ((v44 & 0x80u) == 0)
    v19 = v44;
  else
    v19 = (uint64_t)__p[1];
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v18, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"' Radar='", 9);
  v21 = (_QWORD *)std::ostream::operator<<();
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"' Reason='", 10);
  v23 = (char *)this + 48;
  v24 = *((char *)this + 71);
  if (v24 >= 0)
    v25 = (char *)this + 48;
  else
    v25 = (char *)*((_QWORD *)this + 6);
  if (v24 >= 0)
    v26 = *((unsigned __int8 *)this + 71);
  else
    v26 = *((_QWORD *)this + 7);
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v25, v26);
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"' MTBF='", 8);
  *(_DWORD *)((char *)v28 + *(_QWORD *)(*v28 - 24) + 8) |= 1u;
  ResetInfo::isMTBF((ResetInfo **)this);
  v29 = (_QWORD *)std::ostream::operator<<();
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"' SCD='", 7);
  *(_DWORD *)((char *)v30 + *(_QWORD *)(*v30 - 24) + 8) |= 1u;
  ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v23, (__int128 **)&ResetInfo::sPatternMasks);
  v31 = (_QWORD *)std::ostream::operator<<();
  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"' COF='", 7);
  *(_DWORD *)((char *)v32 + *(_QWORD *)(*v32 - 24) + 8) |= 1u;
  ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v23, (__int128 **)&ResetInfo::sPatternMasks);
  v33 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"' }", 3);
  if (((char)v44 & 0x80000000) == 0)
  {
    v34 = BYTE8(v52);
    if ((BYTE8(v52) & 0x10) == 0)
      goto LABEL_29;
LABEL_32:
    v36 = v52;
    if ((unint64_t)v52 < *((_QWORD *)&v49 + 1))
    {
      *(_QWORD *)&v52 = *((_QWORD *)&v49 + 1);
      v36 = *((_QWORD *)&v49 + 1);
    }
    v37 = (const void *)v49;
    v35 = v36 - v49;
    if ((unint64_t)(v36 - v49) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_46;
    goto LABEL_35;
  }
  operator delete(__p[0]);
  v34 = BYTE8(v52);
  if ((BYTE8(v52) & 0x10) != 0)
    goto LABEL_32;
LABEL_29:
  if ((v34 & 8) == 0)
  {
    v35 = 0;
    a2[23] = 0;
    goto LABEL_42;
  }
  v37 = (const void *)*((_QWORD *)&v47 + 1);
  v35 = *((_QWORD *)&v48 + 1) - *((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v48 + 1) - *((_QWORD *)&v47 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_46:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_35:
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v40 = operator new(v38 + 1);
    *((_QWORD *)a2 + 1) = v35;
    *((_QWORD *)a2 + 2) = v39 | 0x8000000000000000;
    *(_QWORD *)a2 = v40;
    a2 = v40;
    goto LABEL_41;
  }
  a2[23] = v35;
  if (v35)
LABEL_41:
    memmove(a2, v37, v35);
LABEL_42:
  a2[v35] = 0;
  *(_QWORD *)&v45 = *MEMORY[0x24BEDB7F0];
  v41 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v45 + *(_QWORD *)(v45 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v46 = v41;
  *((_QWORD *)&v46 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v51) < 0)
    operator delete(v50[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x24BD29B5C](v53);
}

void sub_24B86799C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v5 - 72, *(_QWORD **)(v5 - 64));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B8679BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B8679D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B8679E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ResetInfo::readResetReasonPatterns(ResetInfo *this)
{
  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1)
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global);
}

uint64_t ResetInfo::isMTBF(ResetInfo **this)
{
  char *v2;
  int64_t v3;
  ResetInfo *v4;
  int64_t v5;
  int64_t v6;
  uint64_t result;
  char *v8;
  int v9;
  ResetInfo *v10;
  uint64_t v11;

  v2 = (char *)*MEMORY[0x24BE051D0];
  if (*((char *)this + 23) < 0)
  {
    v4 = *this;
    v3 = (int64_t)this[1];
    v5 = strlen((const char *)*MEMORY[0x24BE051D0]);
    if (!v5)
      return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (__int128 **)&ResetInfo::sPatternMasks) ^ 1;
  }
  else
  {
    v3 = *((unsigned __int8 *)this + 23);
    v4 = (ResetInfo *)this;
    v5 = strlen((const char *)*MEMORY[0x24BE051D0]);
    if (!v5)
      return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (__int128 **)&ResetInfo::sPatternMasks) ^ 1;
  }
  v6 = v5;
  if (v3 < v5)
    return 0;
  v8 = (char *)v4 + v3;
  v9 = *v2;
  v10 = v4;
  while (1)
  {
    if (v3 - v6 == -1)
      return 0;
    result = (uint64_t)memchr(v10, v9, v3 - v6 + 1);
    if (!result)
      return result;
    v11 = result;
    result = memcmp((const void *)result, v2, v6);
    if (!(_DWORD)result)
      break;
    v10 = (ResetInfo *)(v11 + 1);
    v3 = (int64_t)&v8[-v11 - 1];
    if (v3 < v6)
      return 0;
  }
  if ((char *)v11 != v8 && v11 - (_QWORD)v4 != -1)
    return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (__int128 **)&ResetInfo::sPatternMasks) ^ 1;
  return result;
}

uint64_t ResetInfo::shouldSetSCD(ResetInfo *this)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)this + 48, (__int128 **)&ResetInfo::sPatternMasks);
}

uint64_t ResetInfo::shouldSetCOF(ResetInfo *this)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)this + 48, (__int128 **)&ResetInfo::sPatternMasks);
}

uint64_t ResetInfo::addToDict(uint64_t result, __CFDictionary **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  const __CFAllocator *v8;
  __CFDictionary *v9;
  const __CFString **v10;
  const __CFAllocator *v11;
  __CFDictionary *v12;
  const __CFString **v13;
  const __CFAllocator *v14;
  _OWORD *v15;
  __CFDictionary *v16;
  const __CFString **v17;
  uint64_t v18;
  _DWORD *v19;
  const __CFAllocator *v20;
  __CFDictionary *v21;
  const __CFAllocator *v22;
  int isMTBF;
  const __CFAllocator *v24;
  int v25;
  const __CFAllocator *v26;
  int v27;
  const __CFAllocator *v28;
  std::string __p;
  std::string v30;

  if (*a2)
    v5 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  else
    v5 = 0;
  if (v5)
  {
    v7 = result;
    if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1)
      dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global);
    v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v9 = *a2;
    v10 = (const __CFString **)*MEMORY[0x24BE051A0];
    if (*(char *)(v7 + 23) < 0)
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
    else
      v30 = *(std::string *)v7;
    ctu::cf::update<char const*,std::string>(v9, v10, (uint64_t)&v30, (uint64_t)v8, a5);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      v12 = *a2;
      v13 = (const __CFString **)*MEMORY[0x24BE05398];
      if ((*(char *)(v7 + 47) & 0x80000000) == 0)
        goto LABEL_12;
    }
    else
    {
      v12 = *a2;
      v13 = (const __CFString **)*MEMORY[0x24BE05398];
      if ((*(char *)(v7 + 47) & 0x80000000) == 0)
      {
LABEL_12:
        v30 = *(std::string *)(v7 + 24);
        goto LABEL_15;
      }
    }
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v7 + 24), *(_QWORD *)(v7 + 32));
LABEL_15:
    ctu::cf::update<char const*,std::string>(v12, v13, (uint64_t)&v30, (uint64_t)v8, v11);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    v15 = (_OWORD *)(v7 + 48);
    v16 = *a2;
    v17 = (const __CFString **)*MEMORY[0x24BE052E8];
    if (*(char *)(v7 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v7 + 48), *(_QWORD *)(v7 + 56));
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *v15;
      v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 64);
    }
    ctu::cf::update<char const*,std::string>(v16, v17, (uint64_t)&v30, (uint64_t)v8, v14);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    v18 = *(_QWORD *)(v7 + 72);
    v19 = operator new(0x38uLL);
    v19[8] = 0;
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    *((_QWORD *)v19 + 2) = &v30.__r_.__value_.__l.__size_;
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    v30.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
    *((_BYTE *)v19 + 24) = 1;
    v30.__r_.__value_.__r.__words[2] = 1;
    *((_QWORD *)v19 + 5) = v18;
    *((_QWORD *)v19 + 6) = 0xAAAAAAAA00000000;
    Timestamp::asString((uint64_t)&v30, 0, 9, &__p);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v30, (_QWORD *)v30.__r_.__value_.__l.__size_);
    v21 = *a2;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v30, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v30 = __p;
    ctu::cf::update<char const*,std::string>(v21, (const __CFString **)*MEMORY[0x24BE05090], (uint64_t)&v30, (uint64_t)v8, v20);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_27;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      ctu::cf::update<char const*,unsigned int>(*a2, (const __CFString **)*MEMORY[0x24BE04E78], *(_DWORD *)(v7 + 80), v8, v22);
      isMTBF = ResetInfo::isMTBF((ResetInfo **)v7);
      ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x24BE052E0], isMTBF, (uint64_t)v8, v24);
      v25 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v15, (__int128 **)&ResetInfo::sPatternMasks);
      ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x24BE052F8], v25, (uint64_t)v8, v26);
      v27 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v15, (__int128 **)&ResetInfo::sPatternMasks);
      return ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x24BE052F0], v27, (uint64_t)v8, v28);
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_27;
  }
  return result;
}

void sub_24B867EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ResetInfo::addToDict(ResetInfo *this, xpc_object_t *a2)
{
  const char *v4;
  xpc_object_t v5;
  xpc_object_t v6;
  const char *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  const char **v10;
  const char *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  uint64_t v14;
  _DWORD *v15;
  void **v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  char isMTBF;
  xpc_object_t v22;
  xpc_object_t v23;
  char v24;
  xpc_object_t v25;
  xpc_object_t v26;
  char v27;
  xpc_object_t v28;
  xpc_object_t v29;
  void *__p[2];
  char v31;
  _DWORD *v32;
  _QWORD *v33[2];

  if (MEMORY[0x24BD2A468](*a2) != MEMORY[0x24BDACFA0])
    return;
  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1)
  {
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global);
    v4 = (const char *)this;
    if ((*((char *)this + 23) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  v4 = (const char *)this;
  if (*((char *)this + 23) < 0)
LABEL_4:
    v4 = *(const char **)this;
LABEL_5:
  v5 = xpc_string_create(v4);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x24BE051A0], v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = (char *)this + 24;
  if (*((char *)this + 47) < 0)
    v7 = *(const char **)v7;
  v8 = xpc_string_create(v7);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x24BE05398], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = (const char **)((char *)this + 48);
  v11 = (char *)this + 48;
  if (*((char *)this + 71) < 0)
    v11 = *v10;
  v12 = xpc_string_create(v11);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x24BE052E8], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = *((_QWORD *)this + 9);
  v15 = operator new(0x38uLL);
  v15[8] = 0;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = v33;
  v32 = v15;
  v33[0] = v15;
  *((_BYTE *)v15 + 24) = 1;
  v33[1] = (_QWORD *)1;
  *((_QWORD *)v15 + 5) = v14;
  *((_QWORD *)v15 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v32, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v32, v33[0]);
  if (v31 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  v17 = xpc_string_create((const char *)v16);
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x24BE05090], v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  if (v31 < 0)
    operator delete(__p[0]);
  v19 = xpc_int64_create(*((unsigned int *)this + 20));
  if (!v19)
    v19 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x24BE04E78], v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  isMTBF = ResetInfo::isMTBF((ResetInfo **)this);
  v22 = xpc_BOOL_create(isMTBF);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x24BE052E0], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  v24 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v10, (__int128 **)&ResetInfo::sPatternMasks);
  v25 = xpc_BOOL_create(v24);
  if (!v25)
    v25 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x24BE052F8], v25);
  v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  v27 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v10, (__int128 **)&ResetInfo::sPatternMasks);
  v28 = xpc_BOOL_create(v27);
  if (!v28)
    v28 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x24BE052F0], v28);
  v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
}

void sub_24B868320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void ResetInfo::fetchFromDict(void **this, xpc_object_t *a2)
{
  xpc_object_t value;
  xpc_object_t v5;
  void **v6;
  xpc_object_t v7;
  void **v8;
  xpc_object_t v9;
  xpc_object_t v10;
  void *v11;
  char v12;
  xpc_object_t object;
  __int128 v14;
  void *v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;

  if (MEMORY[0x24BD2A468](*a2) != MEMORY[0x24BDACFA0])
    return;
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE051A0]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  __p = 0;
  v17 = 0;
  v18 = 0;
  xpc::dyn_cast_or_default();
  if (*((char *)this + 23) < 0)
    operator delete(*this);
  *(_OWORD *)this = v14;
  this[2] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  v5 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05398]);
  object = v5;
  if (v5)
    xpc_retain(v5);
  else
    object = xpc_null_create();
  __p = 0;
  v17 = 0;
  v18 = 0;
  xpc::dyn_cast_or_default();
  v6 = this + 3;
  if (*((char *)this + 47) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v14;
  this[5] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE052E8]);
  object = v7;
  if (v7)
    xpc_retain(v7);
  else
    object = xpc_null_create();
  __p = 0;
  v17 = 0;
  v18 = 0;
  xpc::dyn_cast_or_default();
  v8 = this + 6;
  if (*((char *)this + 71) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v14;
  this[8] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  v9 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05090]);
  object = v9;
  if (v9)
    xpc_retain(v9);
  else
    object = xpc_null_create();
  Timestamp::Timestamp((Timestamp *)&v14);
  Timestamp::asString((uint64_t)&v14, 0, 9, &__p);
  xpc::dyn_cast_or_default();
  this[9] = Timestamp::convert((uint64_t)&v11);
  if (v12 < 0)
  {
    operator delete(v11);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      goto LABEL_22;
LABEL_25:
    operator delete(__p);
    goto LABEL_22;
  }
  if (SHIBYTE(v18) < 0)
    goto LABEL_25;
LABEL_22:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v14, *((_QWORD **)&v14 + 1));
  xpc_release(object);
  v10 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE04E78]);
  __p = v10;
  if (v10)
    xpc_retain(v10);
  else
    __p = xpc_null_create();
  *((_DWORD *)this + 20) = xpc::dyn_cast_or_default((xpc *)&__p, (const object *)7);
  xpc_release(__p);
}

void sub_24B868670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t a15, char a16, uint64_t a17, uint64_t a18, xpc_object_t object, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t ResetInfo::reasonMatchesAtLeastOneApplicablePattern(int a1, uint64_t a2, __int128 **a3)
{
  __int128 *v3;
  int v4;
  __int128 v5;
  __int128 v6;
  int v7;
  __int128 v8;
  std::string::size_type size;
  std::string *v10;
  uint64_t v11;
  std::sub_match<const char *> *v12;
  char *v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  std::sub_match<const char *> *begin;
  std::vector<std::csub_match>::pointer end;
  unint64_t v25;
  std::vector<std::csub_match> *v26;
  _QWORD *p_end;
  _BYTE *p_end_cap;
  int v29;
  int v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 *v37;
  std::locale v39[2];
  _BYTE v40[48];
  std::string v41;
  _BYTE v42[32];
  _BYTE v43[48];
  char *v44;
  char *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  char *v50;
  std::vector<std::csub_match> v51[2];
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v3 = *a3;
  v37 = a3[1];
  if (*a3 != v37)
  {
    v4 = 0;
    while (1)
    {
      *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)v42 = v5;
      *(_OWORD *)&v42[16] = v5;
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v42, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
      }
      else
      {
        v6 = *v3;
        *(_QWORD *)&v42[16] = *((_QWORD *)v3 + 2);
        *(_OWORD *)v42 = v6;
      }
      *(_DWORD *)&v42[24] = *((_DWORD *)v3 + 6);
      if ((*(_DWORD *)&v42[24] & a1) != 0)
      {
        memset(&v41, 170, sizeof(v41));
        if ((v42[23] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)v42, *(std::string::size_type *)&v42[8]);
        else
          v41 = *(std::string *)v42;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v40[16] = v8;
        *(_OWORD *)&v40[32] = v8;
        *(_OWORD *)&v39[0].__locale_ = v8;
        *(_OWORD *)v40 = v8;
        MEMORY[0x24BD29B20](v39);
        v39[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v39, MEMORY[0x24BEDB350]);
        *(_QWORD *)v40 = std::locale::use_facet(v39, MEMORY[0x24BEDB4B0]);
        memset(&v40[8], 0, 40);
        size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &v41;
        else
          v10 = (std::string *)v41.__r_.__value_.__r.__words[0];
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v41.__r_.__value_.__l.__size_;
        if ((char *)v10 + size != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>((uint64_t)v39, (char *)v10, (char *)v10 + size))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
        v11 = *(unsigned __int8 *)(a2 + 23);
        if ((v11 & 0x80u) == 0)
          v12 = (std::sub_match<const char *> *)a2;
        else
          v12 = *(std::sub_match<const char *> **)a2;
        if ((v11 & 0x80u) != 0)
          v11 = *(_QWORD *)(a2 + 8);
        v13 = (char *)v12 + v11;
        *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v49 = v14;
        v46 = 0xAAAAAAAAAAAAAA00;
        *(_QWORD *)&v43[40] = 0xAAAAAAAAAAAAAAAALL;
        v44 = 0;
        v45 = 0;
        v47 = 0;
        v48 = 0;
        LOBYTE(v49) = 0;
        BYTE8(v49) = 0;
        v50 = 0;
        memset(v43, 0, 41);
        v57 = v14;
        v54 = 0xAAAAAAAAAAAAAA00;
        v51[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
        v52 = 0;
        v53 = 0;
        v55 = 0;
        v56 = 0;
        LOBYTE(v57) = 0;
        BYTE8(v57) = 0;
        v58 = 0;
        memset(v51, 0, 41);
        v15 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v39, v12, (std::sub_match<const char *> *)((char *)v12 + v11), v51, 4160);
        v16 = v52;
        v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v51[0].__end_ - (char *)v51[0].__begin_) >> 3);
        v19 = *(_QWORD *)&v43[8];
        v18 = *(char **)v43;
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v43[8] - *(_QWORD *)v43) >> 3);
        if (v17 <= v20)
        {
          if (v17 < v20)
          {
            v19 = *(_QWORD *)v43 + 8 * (((char *)v51[0].__end_ - (char *)v51[0].__begin_) >> 3);
            *(_QWORD *)&v43[8] = v19;
          }
        }
        else
        {
          std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append((std::vector<std::ssub_match> *)v43, v17 - v20);
          v19 = *(_QWORD *)&v43[8];
          v18 = *(char **)v43;
        }
        if ((char *)v19 == v18)
        {
          begin = v51[0].__begin_;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          end = v51[0].__end_;
          begin = v51[0].__begin_;
          do
          {
            v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
            v26 = (std::vector<std::csub_match> *)&begin[v21];
            if (v25 <= v22)
              v26 = &v51[1];
            *(_QWORD *)&v18[v21 * 24] = (char *)v12 + (unint64_t)v26->__begin_ - v16;
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v51[0].__end_ - (char *)v51[0].__begin_) >> 3) <= v22)
              p_end = &v51[1].__end_;
            else
              p_end = &v51[0].__begin_[v21].second;
            *(_QWORD *)(*(_QWORD *)v43 + v21 * 24 + 8) = (char *)v12 + *p_end - v16;
            end = v51[0].__end_;
            begin = v51[0].__begin_;
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v51[0].__end_ - (char *)v51[0].__begin_) >> 3) <= v22)
              p_end_cap = &v51[1].__end_cap_;
            else
              p_end_cap = &v51[0].__begin_[v21].matched;
            v18 = *(char **)v43;
            *(_BYTE *)(*(_QWORD *)v43 + v21 * 24 + 16) = *p_end_cap;
            ++v22;
            ++v21;
          }
          while (v22 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v43[8] - (_QWORD)v18) >> 3));
        }
        *(_QWORD *)&v43[24] = v13;
        *(_QWORD *)&v43[32] = v13;
        v44 = (char *)v12 + v52 - v16;
        v45 = (char *)v12 + v53 - v16;
        LOBYTE(v46) = v54;
        v43[40] = 0;
        v47 = (char *)v12 + v55 - v16;
        v48 = (char *)v12 + v56 - v16;
        v29 = v57;
        LOBYTE(v49) = v57;
        v50 = v44;
        BYTE8(v49) = BYTE8(v57);
        if (begin)
        {
          v51[0].__end_ = begin;
          operator delete(begin);
          v29 = v49;
          v18 = *(char **)v43;
        }
        if (v29)
          v30 = v15 ^ 1;
        else
          v30 = 1;
        if (v18)
        {
          *(_QWORD *)&v43[8] = v18;
          operator delete(v18);
        }
        v31 = v15 & v30;
        if (v31)
          v7 = 2;
        else
          v7 = 0;
        v32 = *(std::__shared_weak_count **)&v40[32];
        if (!*(_QWORD *)&v40[32])
          goto LABEL_55;
        v33 = (unint64_t *)(*(_QWORD *)&v40[32] + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
          std::locale::~locale(v39);
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_62:
            operator delete(v41.__r_.__value_.__l.__data_);
            v4 |= v31;
            if ((v42[23] & 0x80000000) == 0)
              goto LABEL_58;
LABEL_57:
            operator delete(*(void **)v42);
            goto LABEL_58;
          }
        }
        else
        {
LABEL_55:
          std::locale::~locale(v39);
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_62;
        }
        v4 |= v31;
        if ((v42[23] & 0x80000000) != 0)
          goto LABEL_57;
      }
      else
      {
        v7 = 3;
        if ((v42[23] & 0x80000000) != 0)
          goto LABEL_57;
      }
LABEL_58:
      if (v7 == 3 || !v7)
      {
        v3 += 2;
        if (v3 != v37)
          continue;
      }
      return v4 & 1;
    }
  }
  LOBYTE(v4) = 0;
  return v4 & 1;
}

void sub_24B868C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_24B868C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,__int128 a52)
{
  uint64_t v52;
  NSObject *v55;
  void **p_p;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::locale::~locale(&a19);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    v55 = GetOsLogContext()[1];
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      p_p = (void **)&__p;
      if (a32 < 0)
        p_p = __p;
      *(_DWORD *)(v52 - 224) = 136315138;
      *(_QWORD *)((char *)&a52 + 4) = p_p;
      _os_log_error_impl(&dword_24B855000, v55, OS_LOG_TYPE_ERROR, "Exception with %s", (uint8_t *)(v52 - 224), 0xCu);
    }
    __cxa_rethrow();
  }
  if (a32 < 0)
    operator delete(__p);
  if (SHIBYTE(a36) < 0)
  {
    operator delete(a34);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x24B868D7CLL);
}

void sub_24B868D40()
{
  __cxa_end_catch();
  JUMPOUT(0x24B868D4CLL);
}

void sub_24B868D74(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x24B868D7CLL);
  __clang_call_terminate(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v4;

  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (!locale)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&locale->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(this);
  }
  else
  {
LABEL_5:
    std::locale::~locale(this);
  }
}

void ___ZN9ResetInfo23readResetReasonPatternsEv_block_invoke()
{
  unsigned __int8 v0;
  NSObject *v1;
  uint8_t v2[16];

  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v1 = qword_2579B8A80;
    if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
LABEL_6:
    *(_WORD *)v2 = 0;
    _os_log_debug_impl(&dword_24B855000, v1, OS_LOG_TYPE_DEBUG, "Default pattern masks will be used", v2, 2u);
    goto LABEL_4;
  }
  v1 = qword_2579B8A80;
  if (os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_DEBUG))
    goto LABEL_6;
LABEL_4:
  std::vector<ResetInfo::RegexPatternAndReasonMask>::__assign_with_size[abi:ne180100]<ResetInfo::RegexPatternAndReasonMask*,ResetInfo::RegexPatternAndReasonMask*>((void **)&ResetInfo::sPatternMasks, (void **)kDefaultPatternMasks, (char *)qword_2579B8A58, (qword_2579B8A58 - kDefaultPatternMasks) >> 5);
}

void ***std::__exception_guard_exceptions<std::vector<ResetInfo::RegexPatternAndReasonMask>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 9) < 0)
            operator delete(*(v4 - 4));
          v4 -= 4;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void std::vector<ResetInfo::RegexPatternAndReasonMask>::__assign_with_size[abi:ne180100]<ResetInfo::RegexPatternAndReasonMask*,ResetInfo::RegexPatternAndReasonMask*>(void **a1, void **a2, char *a3, unint64_t a4)
{
  uint64_t v8;
  void **v9;
  void **v10;
  void *v11;
  void **v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  char *v19;
  char *v20;
  char v21;
  __int128 v22;
  unint64_t v23;
  char *v24;
  size_t v25;
  char *v26;
  char *v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  std::string *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  std::string *v41;
  char *v42;

  v8 = (uint64_t)a1[2];
  v9 = (void **)*a1;
  if (a4 <= (v8 - (uint64_t)*a1) >> 5)
  {
    v12 = (void **)a1[1];
    v13 = ((char *)v12 - (char *)v9) >> 5;
    if (v13 >= a4)
    {
      if (a2 != (void **)a3)
      {
        v23 = 0;
        do
        {
          v26 = (char *)&v9[v23];
          v27 = (char *)&a2[v23];
          if (a2 != v9)
          {
            v28 = v27[23];
            if (v26[23] < 0)
            {
              if (v28 >= 0)
                v24 = (char *)&a2[v23];
              else
                v24 = (char *)a2[v23];
              if (v28 >= 0)
                v25 = v27[23];
              else
                v25 = (size_t)a2[v23 + 1];
              std::string::__assign_no_alias<false>(&v9[v23], v24, v25);
            }
            else if (v27[23] < 0)
            {
              std::string::__assign_no_alias<true>(&v9[v23], a2[v23], (size_t)a2[v23 + 1]);
            }
            else
            {
              v29 = *(_OWORD *)v27;
              *((_QWORD *)v26 + 2) = *((_QWORD *)v27 + 2);
              *(_OWORD *)v26 = v29;
            }
          }
          *((_DWORD *)v26 + 6) = *((_DWORD *)v27 + 6);
          v23 += 4;
        }
        while (&a2[v23] != (void **)a3);
        v12 = (void **)a1[1];
        v9 = (void **)((char *)v9 + v23 * 8);
      }
      while (v12 != v9)
      {
        if (*((char *)v12 - 9) < 0)
          operator delete(*(v12 - 4));
        v12 -= 4;
      }
      a1[1] = v9;
    }
    else
    {
      v14 = (char *)&a2[4 * v13];
      if (v12 != v9)
      {
        v15 = 0;
        v16 = 32 * v13;
        do
        {
          v19 = (char *)&v9[v15 / 8];
          v20 = (char *)&a2[v15 / 8];
          if (a2 != v9)
          {
            v21 = v20[23];
            if (v19[23] < 0)
            {
              if (v21 >= 0)
                v17 = (char *)&a2[v15 / 8];
              else
                v17 = (char *)a2[v15 / 8];
              if (v21 >= 0)
                v18 = v20[23];
              else
                v18 = (size_t)a2[v15 / 8 + 1];
              std::string::__assign_no_alias<false>(&v9[v15 / 8], v17, v18);
            }
            else if (v20[23] < 0)
            {
              std::string::__assign_no_alias<true>(&v9[v15 / 8], a2[v15 / 8], (size_t)a2[v15 / 8 + 1]);
            }
            else
            {
              v22 = *(_OWORD *)v20;
              *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
              *(_OWORD *)v19 = v22;
            }
          }
          *((_DWORD *)v19 + 6) = *((_DWORD *)v20 + 6);
          v15 += 32;
        }
        while (v16 != v15);
        v9 = (void **)a1[1];
      }
      v38 = (char *)v9;
      if (v14 != a3)
      {
        v39 = 0;
        do
        {
          v41 = (std::string *)&v9[v39];
          v42 = &v14[v39 * 8];
          if (v14[v39 * 8 + 23] < 0)
          {
            std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)v42, *((_QWORD *)v42 + 1));
          }
          else
          {
            v40 = *(_OWORD *)v42;
            v41->__r_.__value_.__r.__words[2] = *((_QWORD *)v42 + 2);
            *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v40;
          }
          LODWORD(v9[v39 + 3]) = *(_DWORD *)&v14[v39 * 8 + 24];
          v39 += 4;
        }
        while (&v14[v39 * 8] != a3);
        v38 = (char *)&v9[v39];
      }
      a1[1] = v38;
    }
  }
  else
  {
    if (v9)
    {
      v10 = (void **)a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v10 - 9) < 0)
            operator delete(*(v10 - 4));
          v10 -= 4;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 59)
      goto LABEL_70;
    v30 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v30 = a4;
    v31 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v32 = 0x7FFFFFFFFFFFFFFLL;
    if (!v31)
      v32 = v30;
    if (v32 >> 59)
LABEL_70:
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    v33 = 32 * v32;
    v34 = (char *)operator new(32 * v32);
    *a1 = v34;
    a1[1] = v34;
    a1[2] = &v34[v33];
    if (a2 != (void **)a3)
    {
      v35 = 0;
      do
      {
        v36 = (std::string *)&v34[v35 * 8];
        v37 = (char *)&a2[v35];
        if (SHIBYTE(a2[v35 + 2]) < 0)
        {
          std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)v37, *((_QWORD *)v37 + 1));
        }
        else
        {
          *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)v37;
          v36->__r_.__value_.__r.__words[2] = *((_QWORD *)v37 + 2);
        }
        *(_DWORD *)&v34[v35 * 8 + 24] = a2[v35 + 3];
        v35 += 4;
      }
      while (&a2[v35] != (void **)a3);
      v34 += v35 * 8;
    }
    a1[1] = v34;
  }
}

void sub_24B869310(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  for (; v3; v3 -= 32)
  {
    if (*(char *)(v2 + v3 - 9) < 0)
      operator delete(*(void **)(v2 + v3 - 32));
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void ctu::cf::update<char const*,std::string>(__CFDictionary *a1, const __CFString **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  void *v6;
  void *v7;
  BOOL v8;
  void *value;

  value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  v6 = value;
  value = 0;
  ctu::cf::convert_copy();
  v7 = value;
  if (v6)
    v8 = value == 0;
  else
    v8 = 1;
  if (v8)
  {
    if (!value)
      goto LABEL_8;
  }
  else
  {
    CFDictionarySetValue(a1, v6, value);
  }
  CFRelease(v7);
LABEL_8:
  if (v6)
    CFRelease(v6);
}

void sub_24B8693F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_24B869418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t ctu::cf::update<char const*,unsigned int>(__CFDictionary *a1, const __CFString **a2, unsigned int a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  const void *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  BOOL v11;
  uint64_t v12;
  unint64_t valuePtr;

  valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  v8 = (const void *)valuePtr;
  valuePtr = a3;
  v9 = CFNumberCreate(a4, kCFNumberLongLongType, &valuePtr);
  v10 = v9;
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  v12 = !v11;
  if (v11)
  {
    if (!v9)
      goto LABEL_11;
  }
  else
  {
    CFDictionarySetValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_11:
  if (v8)
    CFRelease(v8);
  return v12;
}

void sub_24B869508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_24B86952C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::update<char const*,BOOL>(__CFDictionary *a1, const __CFString **a2, int a3, uint64_t a4, const __CFAllocator *a5)
{
  void *v7;
  void **v8;
  void *v9;
  BOOL v10;
  uint64_t v11;
  void *key;

  key = 0;
  ctu::cf::convert_copy((ctu::cf *)&key, a2, (const char *)0x8000100, a4, a5);
  v7 = key;
  v8 = (void **)MEMORY[0x24BDBD270];
  if (!a3)
    v8 = (void **)MEMORY[0x24BDBD268];
  v9 = *v8;
  key = *v8;
  if (v7)
    v10 = v9 == 0;
  else
    v10 = 1;
  v11 = !v10;
  if (v10)
  {
    if (!v9)
      goto LABEL_13;
  }
  else
  {
    CFDictionarySetValue(a1, v7, v9);
  }
  CFRelease(v9);
LABEL_13:
  if (v7)
    CFRelease(v7);
  return v11;
}

void sub_24B8695EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(uint64_t a1, uint64_t a2, int a3)
{
  const std::locale *v6;
  uint64_t v7;
  char *v8;

  v6 = (const std::locale *)MEMORY[0x24BD29B20]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x24BEDB350]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x24BEDB4B0]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (char *)a2;
  else
    v8 = *(char **)a2;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if (&v8[v7] != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(a1, v8, &v8[v7]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_24B8696B8(_Unwind_Exception *a1)
{
  std::locale *v1;
  uint64_t v2;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_24B8696D4(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int v12;

  v6 = operator new(8uLL);
  *v6 = &unk_251CB9128;
  v7 = operator new(0x10uLL);
  v7[1] = v6;
  v8 = operator new(0x20uLL);
  *v8 = &unk_251CB9180;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (!v9)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    v12 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v12 <= 0x3F)
    {
LABEL_6:
      if (!v12)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      if (v12 != 16)
      {
        if (v12 != 32)
LABEL_19:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
        return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, a3);
    }
  }
  else
  {
LABEL_5:
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    v12 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v12 <= 0x3F)
      goto LABEL_6;
  }
  if (v12 == 64)
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  if (v12 == 128)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v12 != 256)
    goto LABEL_19;
  return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
}

void sub_24B86989C(_Unwind_Exception *a1)
{
  void *v1;
  void (__cdecl ***v2)(std::__owns_one_state<char> *__hidden);

  operator delete(v1);
  operator delete(v2);
  (*(void (**)(void *))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_24B8698D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24BD29940](exception, 17);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_24B869928(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  std::basic_regex<char> *v8;
  std::__owns_one_state<char> *v9;
  unsigned int marked_count;
  std::basic_regex<char> *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  std::__node<char> *v15;
  std::__node<char> *v16;
  std::__node<char> *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;
  std::__node<char> *v20;
  std::__owns_one_state<char> *v21;
  std::basic_regex<char> *v22;
  char *v23;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  std::basic_regex<char> *v26;
  std::__node<char> *v27;
  std::__owns_one_state<char> *v28;
  std::__node<char> *v29;

  end = a1->__end_;
  v7 = a2;
  while (1)
  {
    v8 = (std::basic_regex<char> *)v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v7, a3);
    if (v8 == (std::basic_regex<char> *)v7)
      break;
LABEL_2:
    if (v7 == (char *)v8)
      goto LABEL_6;
  }
  v9 = a1->__end_;
  marked_count = a1->__marked_count_;
  v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
  if (v8 != v11)
  {
    v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 != (std::basic_regex<char> *)a2)
  {
    if (v8 != (std::basic_regex<char> *)a3)
      goto LABEL_14;
    return a3;
  }
  v12 = (std::__node<char> *)operator new(0x10uLL);
  v13 = a1->__end_;
  first = v13->__first_;
  v12[1].__vftable = (std::__node<char>_vtbl *)first;
  v13->__first_ = v12;
  a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  if (v8 != (std::basic_regex<char> *)a3)
  {
LABEL_14:
    if (LOBYTE(v8->__traits_.__loc_.__locale_) != 124)
      return (char *)v8;
    v21 = a1->__end_;
    v22 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v23 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (1)
    {
      v8 = (std::basic_regex<char> *)v23;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v23, a3);
      if (v8 == (std::basic_regex<char> *)v23)
      {
        v24 = a1->__end_;
        v25 = a1->__marked_count_;
        v26 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
        if (v8 == v26)
        {
LABEL_11:
          if (v8 == v22)
          {
            v27 = (std::__node<char> *)operator new(0x10uLL);
            v28 = a1->__end_;
            v29 = v28->__first_;
            v27[1].__vftable = (std::__node<char>_vtbl *)v29;
            v28->__first_ = v27;
            a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
          }
          v15 = (std::__node<char> *)operator new(0x18uLL);
          v16 = v21->__first_;
          v15[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
          v15[2].__vftable = (std::__node<char>_vtbl *)v16;
          v15->__vftable = (std::__node<char>_vtbl *)&unk_251CB9740;
          end->__first_ = v15;
          v21->__first_ = 0;
          v17 = (std::__node<char> *)operator new(0x10uLL);
          v18 = a1->__end_->__first_;
          v17[1].__vftable = (std::__node<char>_vtbl *)v18;
          v21->__first_ = v17;
          a1->__end_->__first_ = 0;
          v19 = (std::__node<char> *)operator new(0x10uLL);
          v20 = v21->__first_;
          v19->__vftable = (std::__node<char>_vtbl *)&unk_251CB9788;
          v19[1].__vftable = (std::__node<char>_vtbl *)v20;
          a1->__end_->__first_ = v19;
          a1->__end_ = (std::__owns_one_state<char> *)v21->__first_;
          if (v8 == (std::basic_regex<char> *)a3)
            return a3;
          goto LABEL_14;
        }
        v23 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v26, (std::basic_regex<char> *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
      }
      if (v23 == (char *)v8)
        goto LABEL_11;
    }
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  std::basic_regex<char> *v3;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  std::__owns_one_state<char> *v11;
  int v12;
  char *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3)
    return a2;
  if (*a2 == 94)
  {
    v6 = operator new(0x18uLL);
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *v6 = &unk_251CB9278;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      v10 = v3;
      v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, (uint64_t)v10, a3);
      if (v10 != v13)
      {
        v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v10 != (_BYTE *)v3)
          continue;
      }
      if (v10 + 1 != a3 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v14 = operator new(0x18uLL);
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *v14 = &unk_251CB92C0;
      v14[1] = v17;
      *((_BYTE *)v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::basic_regex<char> *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_12;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2)
LABEL_12:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3)
    return a3;
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    v9 = *(_QWORD *)(a1 + 56);
    v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if ((std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1) == v11)
      goto LABEL_12;
    do
    {
      v8 = v11;
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v8 == v10)
      goto LABEL_12;
    v12 = operator new(0x18uLL);
    v13 = *(_QWORD *)(v9 + 8);
    v12[1] = *(_QWORD *)(v6 + 8);
    v12[2] = v13;
    *v12 = &unk_251CB9740;
    *(_QWORD *)(v6 + 8) = v12;
    *(_QWORD *)(v9 + 8) = 0;
    v14 = operator new(0x10uLL);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v14[1] = v15;
    *(_QWORD *)(v9 + 8) = v14;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v16 = operator new(0x10uLL);
    v17 = *(_QWORD *)(v9 + 8);
    *v16 = &unk_251CB9788;
    v16[1] = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
    if (v8 == a3)
      return a3;
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = operator new(0x10uLL);
    v10 = *(_QWORD *)(v6 + 8);
    v9[1] = v10;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = v8 + 1;
    if (v11 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = v8 + 1;
    if (v11 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (char *)memchr(v11, 10, a3 - v11);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v11)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_251CB9740;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_251CB9788;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v11 = v22;
    else
      v11 = v22 + 1;
  }
  while (v11 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  _QWORD *v9;
  uint64_t v10;
  std::basic_regex<char> *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::basic_regex<char> *v21;
  std::basic_regex<char> *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = operator new(0x10uLL);
    v10 = *(_QWORD *)(v6 + 8);
    v9[1] = v10;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v11)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_251CB9740;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_251CB9788;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v11 = v22;
    else
      v11 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
  }
  while (v11 != a3);
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24BD29940](exception, 14);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_24B86A230(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B9514E7)
    return a1 + 24;
  if (((v3 & 0x800000024B9514E7 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B9514E7))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B9514E7 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  operator delete(this);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v6;
  int v7;
  __int128 v8;
  char *v9;
  unsigned int v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unsigned int marked_count;
  std::basic_regex<char> v23;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v17 = a2[1];
        if (v17 == 66)
        {
          v18 = (char *)operator new(0x30uLL);
          v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v18 = &unk_251CB9308;
          *((_QWORD *)v18 + 1) = v20;
          std::locale::locale((std::locale *)v18 + 2, (const std::locale *)a1);
          *(_OWORD *)(v18 + 24) = *(_OWORD *)(a1 + 8);
          v18[40] = 1;
        }
        else
        {
          if (v17 != 98)
            return v3;
          v18 = (char *)operator new(0x30uLL);
          v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v18 = &unk_251CB9308;
          *((_QWORD *)v18 + 1) = v19;
          std::locale::locale((std::locale *)v18 + 2, (const std::locale *)a1);
          *(_OWORD *)(v18 + 24) = *(_OWORD *)(a1 + 8);
          v18[40] = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return v3 + 2;
      }
      return v3;
    }
    if (v6 != 94)
      return v3;
    v11 = operator new(0x18uLL);
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
LABEL_17:
    *v11 = v15 + 16;
    v11[1] = v14;
    *((_BYTE *)v11 + 16) = v12;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 == 36)
  {
    v11 = operator new(0x18uLL);
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
    goto LABEL_17;
  }
  if (v6 != 40 || a2 + 1 == a3 || a2[1] != 63 || a2 + 2 == a3)
    return v3;
  v7 = a2[2];
  if (v7 == 33)
  {
    *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v23.__loop_count_ = v21;
    *(_OWORD *)&v23.__start_.__cntrl_ = v21;
    *(_OWORD *)&v23.__traits_.__loc_.__locale_ = v21;
    *(_OWORD *)&v23.__traits_.__col_ = v21;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v23);
    v23.__flags_ = *(_DWORD *)(a1 + 24);
    v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v23, v3 + 3, a3);
    marked_count = v23.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v23, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v9 == a3 || *v9 != 41)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    goto LABEL_27;
  }
  if (v7 != 61)
    return v3;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v23.__loop_count_ = v8;
  *(_OWORD *)&v23.__start_.__cntrl_ = v8;
  *(_OWORD *)&v23.__traits_.__loc_.__locale_ = v8;
  *(_OWORD *)&v23.__traits_.__col_ = v8;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v23);
  v23.__flags_ = *(_DWORD *)(a1 + 24);
  v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v23, v3 + 3, a3);
  v10 = v23.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v23, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v10;
  if (v9 == a3 || *v9 != 41)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_27:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v23.__traits_.__loc_);
  return v9 + 1;
}

void sub_24B86A720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_24B86A734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_24B86A748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_24B86A75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::basic_regex<char> *v6;
  std::basic_regex<char> *result;
  std::__node<char> *v8;
  std::__owns_one_state<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;
  unsigned int marked_count;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  std::basic_regex<char> *v15;
  std::basic_regex<char> *v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *v19;

  v3 = a2;
  if (a2 == a3)
    return v3;
  switch(LOBYTE(a2->__traits_.__loc_.__locale_))
  {
    case '(':
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3)
        goto LABEL_26;
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
        && BYTE1(a2->__traits_.__loc_.__locale_) == 63
        && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
      {
        ++this->__open_count_;
        v6 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, a3);
        if (v6 != a3 && LOBYTE(v6->__traits_.__loc_.__locale_) == 41)
        {
          --this->__open_count_;
          return (std::basic_regex<char> *)((char *)&v6->__traits_.__loc_.__locale_ + 1);
        }
LABEL_26:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((this->__flags_ & 2) != 0)
      {
        marked_count = this->__marked_count_;
      }
      else
      {
        v11 = (std::__node<char> *)operator new(0x18uLL);
        marked_count = this->__marked_count_ + 1;
        this->__marked_count_ = marked_count;
        end = this->__end_;
        first = end->__first_;
        v11->__vftable = (std::__node<char>_vtbl *)&unk_251CB95D8;
        v11[1].__vftable = (std::__node<char>_vtbl *)first;
        LODWORD(v11[2].__vftable) = marked_count;
        end->__first_ = v11;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      ++this->__open_count_;
      v15 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, a3);
      if (v15 == a3)
        goto LABEL_26;
      v16 = v15;
      if (LOBYTE(v15->__traits_.__loc_.__locale_) != 41)
        goto LABEL_26;
      if ((this->__flags_ & 2) == 0)
      {
        v17 = (std::__node<char> *)operator new(0x18uLL);
        v18 = this->__end_;
        v19 = v18->__first_;
        v17->__vftable = (std::__node<char>_vtbl *)&unk_251CB9620;
        v17[1].__vftable = (std::__node<char>_vtbl *)v19;
        LODWORD(v17[2].__vftable) = marked_count;
        v18->__first_ = v17;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      --this->__open_count_;
      result = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
      break;
    case ')':
    case ',':
    case '-':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
    case '*':
    case '+':
    case '?':
      goto LABEL_25;
    case '.':
      v8 = (std::__node<char> *)operator new(0x10uLL);
      v9 = this->__end_;
      v10 = v9->__first_;
      v8->__vftable = (std::__node<char>_vtbl *)&unk_251CB9398;
      v8[1].__vftable = (std::__node<char>_vtbl *)v10;
      v9->__first_ = v8;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return (std::basic_regex<char> *)((char *)v3 + 1);
    case '[':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, (char *)a3);
    case '\\':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    default:
      if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123)
LABEL_25:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int v6;
  int locale_low;
  std::basic_regex<char> *v8;
  std::basic_regex<char> *v9;
  char *v10;
  size_t v11;
  char *v13;
  int v14;
  int v15;
  char *v16;
  int v17;
  int v18;
  std::basic_regex<char> *v19;
  unsigned __int8 *v20;
  BOOL v21;
  std::basic_regex<char> *v22;
  BOOL v23;
  char *v24;
  size_t v25;
  std::basic_regex<char> *v26;
  int v27;
  int v28;
  std::basic_regex<char> *v29;
  int v30;
  std::basic_regex<char> *v31;
  _BYTE *v32;

  if (this == a3)
    return this;
  v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6)
        v21 = 1;
      else
        v21 = v9 == a3;
      if (!v21 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v11 = 0;
        goto LABEL_36;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v25 = 0;
      goto LABEL_45;
    }
    v8 = this;
    if (locale_low == 43)
    {
      v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v11 = 1;
LABEL_36:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v10;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v25 = 1;
      goto LABEL_45;
    }
    return v8;
  }
  if (locale_low == 63)
  {
    v22 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6)
      v23 = 1;
    else
      v23 = v22 == a3;
    if (v23 || LOBYTE(v22->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v22;
    }
    else
    {
      v24 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v24;
    }
  }
  else
  {
    v8 = this;
    if (locale_low != 123)
      return v8;
    v13 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_72;
    v14 = *v13;
    if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      goto LABEL_72;
    v15 = v14 - 48;
    v16 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_21:
      v16 = (char *)a3;
    }
    else
    {
      while (1)
      {
        v17 = *v16;
        if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38)
          break;
        if (v15 >= 214748364)
          goto LABEL_72;
        v15 = v17 + 10 * v15 - 48;
        if (++v16 == (char *)a3)
          goto LABEL_21;
      }
    }
    if (v16 == v13)
      goto LABEL_72;
    if (v16 == (char *)a3)
      goto LABEL_73;
    v18 = *v16;
    if (v18 != 44)
    {
      if (v18 == 125)
      {
        v19 = (std::basic_regex<char> *)(v16 + 1);
        if (v6 || v19 == a3 || LOBYTE(v19->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 1);
          return v19;
        }
        else
        {
          v20 = (unsigned __int8 *)(v16 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v20;
        }
      }
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    v26 = (std::basic_regex<char> *)(v16 + 1);
    if (v16 + 1 == (char *)a3)
      goto LABEL_72;
    v27 = LOBYTE(v26->__traits_.__loc_.__locale_);
    if (v27 == 125)
    {
      v9 = (std::basic_regex<char> *)(v16 + 2);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v11 = v15;
        v10 = v16 + 3;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        goto LABEL_36;
      }
      v25 = v15;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
LABEL_45:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v25, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v9;
    }
    if ((v27 & 0xF8) != 0x30 && (v27 & 0xFE) != 0x38)
      goto LABEL_73;
    v28 = v27 - 48;
    v29 = (std::basic_regex<char> *)(v16 + 2);
    if (v29 == a3)
    {
LABEL_61:
      v29 = a3;
    }
    else
    {
      while (1)
      {
        v30 = LOBYTE(v29->__traits_.__loc_.__locale_);
        if ((v30 & 0xF8) != 0x30 && (v30 & 0xFE) != 0x38)
          break;
        if (v28 >= 214748364)
          goto LABEL_72;
        v28 = v30 + 10 * v28 - 48;
        v29 = (std::basic_regex<char> *)((char *)v29 + 1);
        if (v29 == a3)
          goto LABEL_61;
      }
    }
    if (v29 == v26 || v29 == a3 || LOBYTE(v29->__traits_.__loc_.__locale_) != 125)
LABEL_73:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v28 < v15)
      goto LABEL_72;
    v31 = (std::basic_regex<char> *)((char *)&v29->__traits_.__loc_.__locale_ + 1);
    if (v6 || v31 == a3 || LOBYTE(v31->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 1);
      return v31;
    }
    else
    {
      v32 = (char *)&v29->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v32;
    }
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x24BD29B20]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x24BEDB350]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x24BEDB4B0]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_24B86AE2C(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  char *v8;
  std::__node<char> *first;
  std::__shared_weak_count *cntrl;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v8 = (char *)operator new(0x58uLL);
  first = this->__end_->__first_;
  *(_QWORD *)v8 = &unk_251CB9350;
  *((_QWORD *)v8 + 1) = first;
  std::locale::locale((std::locale *)v8 + 2, &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *((_QWORD *)v8 + 7) = a2->__start_.__ptr_;
  *((_QWORD *)v8 + 8) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *((_QWORD *)v8 + 9) = a2->__end_;
  *((_DWORD *)v8 + 20) = a4;
  v8[84] = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24BD29940](exception, 6);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_24B86AF30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;

  if (!*(_BYTE *)(a2 + 92))
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
    return result;
  }
  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 8) && (*(_BYTE *)(a2 + 88) & 1) == 0)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_251CB9308;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_251CB9308;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_19;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          v6 = *v2;
          if (v6 == 95)
            goto LABEL_17;
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    v7 = *(v4 - 1);
    v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      v9 = 1;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    else
    {
      v9 = 0;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(_BYTE *)(result + 40) == (v9 != 0))
        goto LABEL_20;
      goto LABEL_27;
    }
LABEL_24:
    if (*(_BYTE *)(result + 40) != (v9 != 1))
      goto LABEL_27;
    goto LABEL_20;
  }
  if ((*(_BYTE *)(a2 + 88) & 8) == 0)
  {
    v6 = *(v3 - 1);
    if (v6 == 95)
      goto LABEL_17;
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(_BYTE *)(result + 40) != 1)
        goto LABEL_27;
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(_QWORD *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(_BYTE *)(result + 40))
    goto LABEL_20;
LABEL_27:
  v10 = *(_QWORD *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void (__cdecl **v6)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_251CB9350;
  v2 = (std::locale *)(a1 + 2);
  v3 = (std::__shared_weak_count *)a1[8];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1];
  if (v6)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v6 + 1))(v6);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&unk_251CB9350;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  operator delete(a1);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::vector<std::csub_match>::size_type v5;
  uint64_t v6;
  const char *v7;
  BOOL v8;
  char v9;
  std::sub_match<const char *> *begin;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  std::sub_match<const char *> *v16;
  uint64_t v17;
  std::vector<std::csub_match> __p;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v20 = 0xAAAAAAAAAAAAAAAALL;
  v22 = 0xAAAAAAAAAAAAAA00;
  v24 = v4;
  v21 = 0;
  v23 = 0uLL;
  LOBYTE(v24) = 0;
  BYTE8(v24) = 0;
  v25 = 0;
  memset(&__p, 0, sizeof(__p));
  v5 = (*(_DWORD *)(a1 + 44) + 1);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)&v19 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)&v19 + 1) = v19;
  LOBYTE(v20) = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v5, (std::vector<std::csub_match>::const_reference)&v19);
  *((_QWORD *)&v20 + 1) = v6;
  v21 = v6;
  LOBYTE(v22) = 0;
  v23 = v19;
  LOBYTE(v24) = v20;
  v25 = v6;
  BYTE8(v24) = 1;
  v7 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v8 = v7 == *(const char **)(a2 + 8);
  else
    v8 = 0;
  v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v7, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = 1;
  do
  {
    v16 = &begin[v15];
    v17 = v14 + 24 * (v13 + v12);
    *(std::pair<const char *, const char *> *)v17 = v16->std::pair<const char *, const char *>;
    *(_BYTE *)(v17 + 16) = v16->matched;
    v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_24B86B5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  void *v25;
  void *v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  void *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  _BYTE v45[96];
  std::vector<std::csub_match>::value_type __x;
  char *v47;
  char *v48;
  unint64_t v49;

  v47 = 0;
  v48 = 0;
  v49 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.second = a3;
    *(_QWORD *)&__x.matched = 0xAAAAAAAAAAAAAA00;
    __x.first = a3;
    *(_DWORD *)v45 = 0;
    memset(&v45[8], 0, 85);
    v48 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v47, (uint64_t)v45);
    if (*(_QWORD *)&v45[56])
    {
      *(_QWORD *)&v45[64] = *(_QWORD *)&v45[56];
      operator delete(*(void **)&v45[56]);
    }
    if (*(_QWORD *)&v45[32])
    {
      *(_QWORD *)&v45[40] = *(_QWORD *)&v45[32];
      operator delete(*(void **)&v45[32]);
    }
    v13 = v48;
    *((_DWORD *)v48 - 24) = 0;
    *((_QWORD *)v13 - 11) = a2;
    *((_QWORD *)v13 - 10) = a2;
    *((_QWORD *)v13 - 9) = a3;
    v14 = *((_QWORD *)v13 - 8);
    v15 = *(unsigned int *)(a1 + 28);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v13 - 7) - v14) >> 3);
    if (v15 <= v16)
    {
      if (v15 < v16)
        *((_QWORD *)v13 - 7) = v14 + 24 * v15;
    }
    else
    {
      std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
      v13 = v48;
    }
    v17 = *((_QWORD *)v13 - 5);
    v18 = *(unsigned int *)(a1 + 32);
    v19 = (*((_QWORD *)v13 - 4) - v17) >> 4;
    if (v18 <= v19)
    {
      if (v18 < v19)
        *((_QWORD *)v13 - 4) = v17 + 16 * v18;
    }
    else
    {
      std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v18 - v19);
      v13 = v48;
    }
    *((_QWORD *)v13 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *(v13 - 4) = a6;
    v20 = 1;
    while (2)
    {
      if ((v20 & 0xFFF) == 0 && (int)(v20 >> 12) >= (int)a3 - (int)a2)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v22 = *((_QWORD *)v13 - 2);
      if (v22)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v13 - 96);
      switch(*((_DWORD *)v13 - 24))
      {
        case 0xFFFFFC18:
          v23 = (const char *)*((_QWORD *)v13 - 10);
          if ((a5 & 0x20) != 0 && v23 == a2 || (a5 & 0x1000) != 0 && v23 != a3)
            goto LABEL_26;
          v36 = *a4;
          *(_QWORD *)v36 = a2;
          *(_QWORD *)(v36 + 8) = v23;
          *(_BYTE *)(v36 + 16) = 1;
          v37 = *((_QWORD *)v13 - 8);
          v38 = *((_QWORD *)v13 - 7) - v37;
          if (v38)
          {
            v39 = 0xAAAAAAAAAAAAAAABLL * (v38 >> 3);
            v40 = (_BYTE *)(v37 + 16);
            v41 = 1;
            do
            {
              v42 = v36 + 24 * v41;
              *(_OWORD *)v42 = *((_OWORD *)v40 - 1);
              v43 = *v40;
              v40 += 24;
              *(_BYTE *)(v42 + 16) = v43;
            }
            while (v39 > v41++);
          }
          v6 = 1;
          v21 = v47;
          if (!v47)
            return v6;
          goto LABEL_37;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_16;
        case 0xFFFFFC1F:
LABEL_26:
          v24 = v48;
          v25 = (void *)*((_QWORD *)v48 - 5);
          if (v25)
          {
            *((_QWORD *)v48 - 4) = v25;
            operator delete(v25);
          }
          v26 = (void *)*((_QWORD *)v24 - 8);
          if (v26)
          {
            *((_QWORD *)v24 - 7) = v26;
            operator delete(v26);
          }
          v48 = v24 - 96;
          goto LABEL_16;
        case 0xFFFFFC20:
          *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v45[64] = v27;
          *(_OWORD *)&v45[80] = v27;
          *(_OWORD *)&v45[32] = v27;
          *(_OWORD *)&v45[48] = v27;
          *(_OWORD *)v45 = v27;
          *(_OWORD *)&v45[16] = v27;
          std::__state<char>::__state((uint64_t)v45, (__int128 *)v13 - 6);
          (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v13 - 2) + 24))(*((_QWORD *)v13 - 2), 1, v13 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v45[80] + 24))(*(_QWORD *)&v45[80], 0, v45);
          v28 = v48;
          if ((unint64_t)v48 >= v49)
          {
            v48 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v47, (uint64_t)v45);
            if (*(_QWORD *)&v45[56])
            {
              *(_QWORD *)&v45[64] = *(_QWORD *)&v45[56];
              operator delete(*(void **)&v45[56]);
            }
          }
          else
          {
            v29 = *(_OWORD *)&v45[16];
            *(_OWORD *)v48 = *(_OWORD *)v45;
            *((_OWORD *)v28 + 1) = v29;
            *((_QWORD *)v28 + 4) = 0;
            *((_QWORD *)v28 + 5) = 0;
            *((_QWORD *)v28 + 6) = 0;
            *((_QWORD *)v28 + 7) = 0;
            *((_OWORD *)v28 + 2) = *(_OWORD *)&v45[32];
            *((_QWORD *)v28 + 6) = *(_QWORD *)&v45[48];
            memset(&v45[32], 0, 24);
            *((_QWORD *)v28 + 8) = 0;
            *((_QWORD *)v28 + 9) = 0;
            *(_OWORD *)(v28 + 56) = *(_OWORD *)&v45[56];
            *((_QWORD *)v28 + 9) = *(_QWORD *)&v45[72];
            memset(&v45[56], 0, 24);
            v30 = *(_QWORD *)&v45[80];
            *(_QWORD *)(v28 + 85) = *(_QWORD *)&v45[85];
            *((_QWORD *)v28 + 10) = v30;
            v48 = v28 + 96;
          }
          if (*(_QWORD *)&v45[32])
          {
            *(_QWORD *)&v45[40] = *(_QWORD *)&v45[32];
            operator delete(*(void **)&v45[32]);
          }
LABEL_16:
          v21 = v47;
          v13 = v48;
          ++v20;
          if (v47 != v48)
            continue;
          v6 = 0;
          if (v47)
          {
LABEL_37:
            v31 = v48;
            v32 = v21;
            if (v48 != v21)
            {
              do
              {
                v33 = (void *)*((_QWORD *)v31 - 5);
                if (v33)
                {
                  *((_QWORD *)v31 - 4) = v33;
                  operator delete(v33);
                }
                v34 = (void *)*((_QWORD *)v31 - 8);
                if (v34)
                {
                  *((_QWORD *)v31 - 7) = v34;
                  operator delete(v34);
                }
                v31 -= 96;
              }
              while (v31 != v21);
              v32 = v47;
            }
            v48 = v21;
            operator delete(v32);
          }
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  return v6;
}

void sub_24B86B9F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_24B86BA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::__state<char>::~__state((uint64_t *)va);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_24B86BA4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_24B86BA60(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  uint64_t v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::sub_match<const char *> *v14;
  std::vector<std::csub_match>::pointer end;
  unint64_t v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) < __n)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    v11 = v10;
    v12 = (std::sub_match<const char *> *)operator new(24 * v10);
    this->__begin_ = v12;
    this->__end_ = v12;
    this->__end_cap_.__value_ = &v12[v11];
    v13 = 24 * __n;
    v14 = &v12[__n];
    do
    {
      v12->std::pair<const char *, const char *> = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v12->matched = *(_QWORD *)&__u->matched;
      ++v12;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  end = this->__end_;
  v16 = end - begin;
  if (v16 >= __n)
    v17 = __n;
  else
    v17 = end - begin;
  if (v17)
  {
    v18 = begin;
    do
    {
      *v18++ = *__u;
      --v17;
    }
    while (v17);
  }
  if (__n <= v16)
  {
    v14 = &begin[__n];
LABEL_25:
    this->__end_ = v14;
    return;
  }
  v19 = &end[__n - v16];
  v20 = 24 * __n - 24 * v16;
  do
  {
    v21 = __u->std::pair<const char *, const char *>;
    *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
    end->std::pair<const char *, const char *> = v21;
    ++end;
    v20 -= 24;
  }
  while (v20);
  this->__end_ = v19;
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24BD29940](exception, 12);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_24B86BC84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24BD29940](exception, 16);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_24B86BCD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::__state<char>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          *((_QWORD *)v3 - 4) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 8);
        if (v6)
        {
          *((_QWORD *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v22 = (void *)*((_QWORD *)v21 - 5);
      if (v22)
      {
        *((_QWORD *)v21 - 4) = v22;
        operator delete(v22);
      }
      v23 = (void *)*((_QWORD *)v21 - 8);
      if (v23)
      {
        *((_QWORD *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::sub_match<const char *> *value;
  std::vector<std::csub_match>::pointer end;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::sub_match<const char *> *v13;
  std::vector<std::csub_match>::size_type v14;
  std::pair<const char *, const char *> v15;
  std::sub_match<const char *> *v16;
  std::vector<std::csub_match>::size_type v17;
  std::sub_match<const char *> *v18;
  std::pair<const char *, const char *> *v19;
  std::pair<const char *, const char *> v20;
  std::vector<std::csub_match>::pointer begin;
  std::pair<const char *, const char *> v22;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = &end[__n];
      v14 = 24 * __n;
      do
      {
        v15 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    v17 = 24 * __n;
    v18 = &v16[__n];
    v19 = v16;
    do
    {
      v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      *v19 = v20;
      v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v22 = end[-1].std::pair<const char *, const char *>;
        *(_QWORD *)&v16[-1].matched = *(_QWORD *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
      operator delete(end);
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::pair<unsigned long, const char *> *value;
  std::pair<unsigned long, const char *> *end;
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  std::vector<std::pair<unsigned long, const char *>>::size_type v12;
  std::pair<unsigned long, const char *> *v13;
  size_t v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      v12 = 16 * __n;
      bzero(this->__end_, 16 * __n);
      end = (std::pair<unsigned long, const char *> *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((v7 + __n) >> 60)
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    v9 = (char *)value - (char *)begin;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = (std::pair<unsigned long, const char *> *)&v11[16 * v7];
    v14 = __n;
    v15 = (std::pair<unsigned long, const char *> *)&v11[16 * v10];
    bzero(v13, v14 * 16);
    v16 = &v13[v14];
    if (end != begin)
    {
      do
      {
        v13[-1] = end[-1];
        --v13;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
      operator delete(end);
  }
}

uint64_t std::__state<char>::__state(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  size_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v8);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(_QWORD *)(a1 + 40) = &v9[v10];
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 7);
  v11 = (_BYTE *)*((_QWORD *)a2 + 8);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(_QWORD *)(a1 + 64) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  v15 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 85) = *(_QWORD *)((char *)a2 + 85);
  *(_QWORD *)(a1 + 80) = v15;
  return a1;
}

void sub_24B86C340(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  int v8;
  unsigned int v9;
  int v11;
  unsigned __int8 *v12;

  if (a2 == a3)
    return a2;
  v4 = a2;
  if (*a2 == 92)
  {
    v6 = a2 + 1;
    if (a2 + 1 == a3)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    v8 = *v6;
    v9 = v8 - 48;
    if (v8 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
      return a2 + 2;
    }
    if ((v8 - 49) <= 8)
    {
      v4 = a2 + 2;
      if (a2 + 2 == a3)
      {
        v4 = a3;
      }
      else
      {
        while (1)
        {
          v11 = *v4;
          if ((v11 - 48) > 9)
            break;
          if (v9 >= 0x19999999)
            goto LABEL_24;
          ++v4;
          v9 = v11 + 10 * v9 - 48;
          if (v4 == a3)
          {
            v4 = a3;
            break;
          }
        }
        if (!v9)
LABEL_24:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      }
      if (v9 > this->__marked_count_)
        goto LABEL_24;
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v9);
      if (v4 != v6)
        return v4;
    }
    v4 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 1, a3);
    if (v6 == v4)
    {
      v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(this, a2 + 1, a3, 0);
      if (v6 == v12)
        return a2;
      else
        return v12;
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  void *v8;
  char *v9;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if (v7 == a3)
      goto LABEL_20;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3)
      goto LABEL_20;
    do
    {
      v9 = v7;
      v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v7, a3, (uint64_t)v8);
    }
    while (v9 != v7);
    if (v9 == a3)
      goto LABEL_20;
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_24B86C614(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24BD29940](exception, 11);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_24B86C660(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *result;

  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24BD29940](exception, 3);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_24B86C7A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  _DWORD *v5;
  _DWORD *v6;
  int v7;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v6;
        *(_QWORD *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_24B86C988(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24B86C99C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24B86C9B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24B86C9C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24B86C9D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24B86C9EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  unsigned __int8 *result;
  unsigned int v8;
  std::basic_regex<char>::value_type v10;
  int v11;
  int v12;
  unsigned __int8 v13;
  char v14;
  unsigned __int8 v15;
  char v16;
  std::basic_regex<char>::value_type v17;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3 || (char)v4[1] < 65)
        goto LABEL_85;
      v8 = v4[1];
      if (v8 >= 0x5B && (v8 - 97) > 0x19u)
        goto LABEL_85;
      v10 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v10;
        *((_BYTE *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v10);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        v11 = v4[1];
        if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            v12 = *v4;
            if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38 || (v12 | 0x20u) - 97 < 6)
              goto LABEL_42;
          }
        }
      }
      goto LABEL_85;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        v6 = 11;
LABEL_68:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_42:
      if (v4 + 1 == a3)
        goto LABEL_85;
      v13 = v4[1];
      v14 = -48;
      if ((v13 & 0xF8) == 0x30 || (v13 & 0xFE) == 0x38)
        goto LABEL_47;
      v13 |= 0x20u;
      if ((v13 - 97) >= 6u)
        goto LABEL_85;
      v14 = -87;
LABEL_47:
      if (v4 + 2 == a3)
        goto LABEL_85;
      v15 = v4[2];
      v16 = -48;
      if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
      {
        v15 |= 0x20u;
        if ((v15 - 97) >= 6u)
LABEL_85:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        v16 = -87;
      }
      v17 = v15 + 16 * (v13 + v14) + v16;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v17;
      *((_BYTE *)a4 + 1) = 0;
      result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0)
        goto LABEL_85;
      if (!a4)
        goto LABEL_68;
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v5;
      *((_BYTE *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  std::__node<char> *v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  char *v8;
  std::__node<char> *first;
  std::__node<char> *v10;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (char *)operator new(0x30uLL);
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_251CB93E0;
    *((_QWORD *)v8 + 1) = first;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (char *)operator new(0x30uLL);
    v10 = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_251CB9428;
    *((_QWORD *)v8 + 1) = v10;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = v2;
    goto LABEL_6;
  }
  v5 = (std::__node<char> *)operator new(0x18uLL);
  end = this->__end_;
  v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_251CB9470;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LOBYTE(v5[2].__vftable) = v2;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_24B86CFD4(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24BD29940](exception, 4);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_24B86D04C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  std::__node<char> *v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  char *v11;

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new(0x30uLL);
    v9 = v8;
    first = this->__end_->__first_;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new(0x30uLL);
    v9 = v8;
    first = this->__end_->__first_;
    goto LABEL_6;
  }
  v5 = (std::__node<char> *)operator new(0x18uLL);
  end = this->__end_;
  v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_251CB9548;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LODWORD(v5[2].__vftable) = __i;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_251CB93E0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_251CB93E0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v4 + 8);
  }
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_251CB9428;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_251CB9428;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_251CB94B8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_251CB94B8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(_BYTE *)(v3 + 16)
    || (v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3, v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  v6 = result;
  if (v4 >= 1)
  {
    v7 = 0;
    while (1)
    {
      v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)v3 + v7));
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v7));
      if (v8 != (_DWORD)result)
        goto LABEL_3;
      if (v4 == ++v7)
      {
        v5 = *(_QWORD *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v5 + v4;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v6 + 8);
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_251CB9500;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_251CB9500;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (!*(_BYTE *)(v3 + 24 * v2 + 16)
    || (v4 = (unsigned __int8 **)(v3 + 24 * v2),
        v5 = *v4,
        v6 = v4[1] - *v4,
        v7 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    v8 = v6;
    v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      v11 = *v5++;
      v10 = v11;
      v12 = *v9++;
      if (v10 != v12)
        goto LABEL_3;
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v7 + v6;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    *(_QWORD *)(a2 + 80) = *((_QWORD *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 40);
    v5 = *(_BYTE **)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 40) = v13;
        *(_QWORD *)(a1 + 48) = v15;
        *(_QWORD *)(a1 + 56) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 40);
  v7 = *(_BYTE **)(a1 + 40);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 48) = v15;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  std::string::size_type size;
  std::string *v14;
  BOOL v15;
  std::locale v17;
  std::string v18;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v17, v11);
  std::locale::name(&v18, &v17);
  size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v18.__r_.__value_.__l.__size_;
  if (size == 1)
  {
    v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v18;
    v15 = v14->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_9;
  }
  else
  {
    v15 = 1;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v17);
  *(_BYTE *)(a1 + 171) = v15;
  return a1;
}

void sub_24B86DDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  std::locale *v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v9 + 136));
  v14 = *(void **)(v9 + 112);
  if (v14)
  {
    *(_QWORD *)(v9 + 120) = v14;
    operator delete(v14);
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
    {
LABEL_3:
      v16 = *v12;
      if (!*v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
      goto LABEL_3;
  }
  *(_QWORD *)(v9 + 72) = v15;
  operator delete(v15);
  v16 = *v12;
  if (!*v12)
  {
LABEL_5:
    std::locale::~locale(v10);
    v17 = *(_QWORD *)(v9 + 8);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(_QWORD *)(v9 + 48) = v16;
  operator delete(v16);
  goto LABEL_5;
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0)
LABEL_9:
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale *v1;

  v1 = std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);
  operator delete(v1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v2;
  char *current;
  char *last;
  char v6;
  char v7;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v14;
  char v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  void **v19;
  char v20;
  void *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  BOOL v24;
  uint64_t v25;
  _BOOL4 negate;
  void *v27;
  unsigned __int8 v28;
  std::vector<char>::pointer v29;
  unint64_t v30;
  int v31;
  std::regex_traits<char>::char_class_type v32;
  char v33;
  int v34;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v36;
  char *v37;
  std::vector<std::pair<std::string, std::string>>::pointer v38;
  std::vector<std::pair<std::string, std::string>>::pointer v39;
  unsigned int v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  void **v44;
  void *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  BOOL v48;
  int v49;
  char *v50;
  size_t v51;
  size_t v52;
  int v53;
  int v54;
  char *v55;
  size_t v56;
  size_t v57;
  int v58;
  int v59;
  char *v60;
  size_t v61;
  size_t v62;
  int v63;
  int v64;
  char *v65;
  size_t v66;
  size_t v67;
  int v68;
  int v69;
  int v70;
  std::vector<std::string>::pointer v71;
  uint64_t v72;
  int64_t v73;
  unint64_t v74;
  unint64_t v75;
  const void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  BOOL v80;
  std::string *v81;
  void *v82;
  int v83;
  std::string *v84;
  uint64_t v85;
  const void *v86;
  void *v87;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v88;
  std::vector<std::string>::pointer v89;
  int v90;
  int64_t v91;
  unint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  std::string *v98;
  void *v99;
  int v100;
  void **v101;
  uint64_t v102;
  uint64_t v103;
  const void *v104;
  uint64_t v105;
  std::string::size_type size;
  int v107;
  std::vector<std::string>::pointer v108;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v111;
  std::regex_traits<char>::char_class_type neg_mask;
  int v113;
  std::string::size_type v114;
  std::regex_traits<char>::char_class_type v115;
  int v116;
  std::__node<char> *first;
  int v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  std::string::value_type *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char v126;
  BOOL v127;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v128;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v129;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v130;
  _BOOL4 v131;
  _BOOL4 v132;
  int v133;
  uint64_t v134;
  int v135;
  void *v136[3];
  __int16 __src;
  void *__p[3];

  v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v25 = 0;
    negate = this->__negate_;
    goto LABEL_245;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_34;
  v6 = *current;
  LOBYTE(__src) = *current;
  v7 = current[1];
  HIBYTE(__src) = v7;
  if (this->__icase_)
  {
    LOBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>(&__src, (uint64_t)&this->__traits_, __p, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    v27 = __p[1];
    operator delete(__p[0]);
    if (v27)
      goto LABEL_8;
LABEL_34:
    negate = 0;
    v25 = 1;
    v28 = *v2->__current_;
    LOBYTE(__src) = v28;
    if (!this->__icase_)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (!HIBYTE(__p[2]))
    goto LABEL_34;
LABEL_8:
  begin = this->__digraphs_.__begin_;
  v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    p_second = &begin->second;
    while (__src != *(p_second - 1) || HIBYTE(__src) != *p_second)
    {
      p_second += 2;
      if (!--v11)
        goto LABEL_17;
    }
    goto LABEL_227;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
    goto LABEL_167;
  }
  memset(v136, 170, sizeof(v136));
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x2AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAA00AAAALL;
  LOWORD(__p[0]) = __src;
  (*(void (**)(void **__return_ptr, const std::collate<char> *, void **, char *))(*(_QWORD *)this->__traits_.__col_
                                                                                           + 32))(v136, this->__traits_.__col_, __p, (char *)__p + 2);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v14 = this->__ranges_.__begin_;
  v15 = HIBYTE(v136[2]);
  v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (!v16)
  {
    v24 = 0;
    v70 = 0;
    v69 = 0;
    goto LABEL_164;
  }
  v128 = v2;
  v17 = 0;
  v18 = v16 / 48;
  if (SHIBYTE(v136[2]) >= 0)
    v19 = v136;
  else
    v19 = (void **)v136[0];
  v20 = HIBYTE(v136[2]);
  if (SHIBYTE(v136[2]) >= 0)
    v21 = (void *)HIBYTE(v136[2]);
  else
    v21 = v136[1];
  if (v18 <= 1)
    v22 = 1;
  else
    v22 = v16 / 48;
  v23 = (unsigned __int8 *)&v14->second.__r_.__value_.__r.__words[2] + 7;
  v24 = 1;
  do
  {
    v59 = (char)*(v23 - 24);
    if (v59 >= 0)
      v60 = (char *)(v23 - 47);
    else
      v60 = *(char **)(v23 - 47);
    if (v59 >= 0)
      v61 = *(v23 - 24);
    else
      v61 = *(_QWORD *)(v23 - 39);
    if ((unint64_t)v21 >= v61)
      v62 = v61;
    else
      v62 = (size_t)v21;
    v63 = memcmp(v60, v19, v62);
    if (v63)
    {
      if ((v63 & 0x80000000) == 0)
        goto LABEL_98;
    }
    else if (v61 > (unint64_t)v21)
    {
      goto LABEL_98;
    }
    v64 = (char)*v23;
    if (v64 >= 0)
      v65 = (char *)(v23 - 23);
    else
      v65 = *(char **)(v23 - 23);
    if (v64 >= 0)
      v66 = *v23;
    else
      v66 = *(_QWORD *)(v23 - 15);
    if (v66 >= (unint64_t)v21)
      v67 = (size_t)v21;
    else
      v67 = v66;
    v68 = memcmp(v19, v65, v67);
    if (v68)
    {
      if (v68 < 0)
      {
LABEL_123:
        v69 = 1;
        v70 = 5;
        goto LABEL_162;
      }
    }
    else if ((unint64_t)v21 <= v66)
    {
      goto LABEL_123;
    }
LABEL_98:
    v24 = ++v17 < v18;
    v23 += 48;
  }
  while (v22 != v17);
  v70 = 0;
  v69 = 0;
LABEL_162:
  v2 = v128;
  p_traits = &this->__traits_;
  v15 = v20;
LABEL_164:
  if (v15 < 0)
    operator delete(v136[0]);
  negate = v69;
  if (v24)
    goto LABEL_207;
LABEL_167:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_209;
  v133 = negate;
  v88 = v2;
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)p_traits, __p, __p);
  v89 = this->__equivalences_.__begin_;
  v90 = SHIBYTE(__p[2]);
  v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (!v91)
    goto LABEL_188;
  v92 = v91 / 24;
  v93 = __p[1];
  if (SHIBYTE(__p[2]) >= 0)
    v94 = (void *)HIBYTE(__p[2]);
  else
    v94 = __p[1];
  if (SHIBYTE(__p[2]) < 0)
  {
    v135 = SHIBYTE(__p[2]);
    v103 = 0;
    v104 = __p[0];
    if (v92 <= 1)
      v105 = 1;
    else
      v105 = v91 / 24;
    v97 = 1;
    do
    {
      size = HIBYTE(v89->__r_.__value_.__r.__words[2]);
      v107 = (char)size;
      if ((size & 0x80u) != 0)
        size = v89->__r_.__value_.__l.__size_;
      if (v94 == (void *)size)
      {
        v108 = v107 >= 0 ? v89 : (std::vector<std::string>::pointer)v89->__r_.__value_.__r.__words[0];
        if (!memcmp(v104, v108, (size_t)v93))
        {
          v133 = 1;
          v70 = 5;
          goto LABEL_203;
        }
      }
      v97 = ++v103 < v92;
      ++v89;
    }
    while (v105 != v103);
    v70 = 0;
LABEL_203:
    v2 = v88;
    v90 = v135;
    goto LABEL_204;
  }
  if (!HIBYTE(__p[2]))
  {
    v114 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
    if ((v114 & 0x80u) != 0)
      v114 = v89->__r_.__value_.__l.__size_;
    if (v114 != HIBYTE(__p[2]))
    {
      v119 = 0;
      if (v92 <= 1)
        v120 = 1;
      else
        v120 = v92;
      v121 = v120 - 1;
      v122 = &v89[1].__r_.__value_.__s.__data_[8];
      v2 = v88;
      while (v121 != v119)
      {
        ++v119;
        v123 = v122[15];
        v125 = *(_QWORD *)v122;
        v122 += 24;
        v124 = v125;
        if ((v123 & 0x80u) != 0)
          v123 = v124;
        if (v94 == (void *)v123)
        {
          v97 = v119 < v92;
          v133 = 1;
          v70 = 5;
          goto LABEL_204;
        }
      }
      v97 = 0;
      v70 = 0;
      goto LABEL_204;
    }
    v2 = v88;
    negate = 1;
LABEL_208:
    v25 = 2;
    goto LABEL_245;
  }
  v95 = 0;
  v96 = v92 <= 1 ? 1 : v91 / 24;
  v97 = 1;
  do
  {
    v98 = &v89[v95];
    v99 = (void *)HIBYTE(v98->__r_.__value_.__r.__words[2]);
    v100 = (char)v99;
    if ((char)v99 < 0)
      v99 = (void *)v98->__r_.__value_.__l.__size_;
    if (v94 == v99)
    {
      if (v100 < 0)
        v98 = (std::string *)v98->__r_.__value_.__r.__words[0];
      v101 = __p;
      v102 = HIBYTE(__p[2]);
      while (*(unsigned __int8 *)v101 == v98->__r_.__value_.__s.__data_[0])
      {
        v101 = (void **)((char *)v101 + 1);
        v98 = (std::string *)((char *)v98 + 1);
        if (!--v102)
        {
          v133 = 1;
          v70 = 5;
          v2 = v88;
          goto LABEL_204;
        }
      }
    }
    v97 = ++v95 < v92;
  }
  while (v95 != v96);
LABEL_188:
  v97 = 0;
  v70 = 0;
  v2 = v88;
LABEL_204:
  if (v90 < 0)
    operator delete(__p[0]);
  negate = v133;
  if (!v97)
  {
LABEL_209:
    if ((char)__src < 0)
    {
      neg_mask = this->__neg_mask_;
    }
    else
    {
      mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      v111 = tab[__src];
      if (((v111 & mask) != 0 || __src == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(__src) & 0x80000000) == 0
        && ((tab[HIBYTE(__src)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(__src) == 95))
      {
        goto LABEL_227;
      }
      neg_mask = this->__neg_mask_;
      if ((neg_mask & v111) != 0 || __src == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_226:
        v113 = negate;
LABEL_228:
        negate = v113;
        v25 = 2;
        goto LABEL_245;
      }
    }
    if ((SHIBYTE(__src) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(__src)] & neg_mask) == 0)
      {
        v113 = 1;
        if (HIBYTE(__src) != 95 || (neg_mask & 0x80) == 0)
          goto LABEL_228;
      }
      goto LABEL_226;
    }
LABEL_227:
    v113 = 1;
    goto LABEL_228;
  }
LABEL_207:
  if (v70)
    goto LABEL_208;
  v25 = 2;
  v28 = *v2->__current_;
  LOBYTE(__src) = v28;
  if (this->__icase_)
  {
LABEL_35:
    v28 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v28);
    LOBYTE(__src) = v28;
  }
LABEL_36:
  v29 = this->__chars_.__begin_;
  v30 = this->__chars_.__end_ - v29;
  if (v30)
  {
    if (v30 <= 1)
      v30 = 1;
    while (1)
    {
      v31 = *v29++;
      if (v31 == v28)
        break;
      if (!--v30)
        goto LABEL_41;
    }
LABEL_244:
    negate = 1;
    goto LABEL_245;
  }
LABEL_41:
  v32 = this->__neg_mask_;
  if (v32 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v28 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v28] & v32) == 0)
    {
      v34 = (v32 >> 7) & 1;
      v33 = v28 == 95 ? v34 : 0;
    }
    else
    {
      v33 = 1;
    }
    end = this->__neg_chars_.__end_;
    v36 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v28, end - this->__neg_chars_.__begin_);
    v37 = v36 ? v36 : end;
    if ((v33 & 1) == 0 && v37 == end)
      goto LABEL_244;
  }
  v38 = this->__ranges_.__begin_;
  v39 = this->__ranges_.__end_;
  if (v38 == v39)
    goto LABEL_128;
  memset(v136, 170, sizeof(v136));
  if (!this->__collate_)
  {
    v40 = 1;
    HIBYTE(v136[2]) = 1;
    LOWORD(v136[0]) = v28;
    v41 = (char *)v39 - (char *)v38;
    if (v41)
      goto LABEL_59;
LABEL_155:
    v48 = 0;
    if ((v40 & 0x80) != 0)
      goto LABEL_126;
    goto LABEL_127;
  }
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x1AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  LOWORD(__p[0]) = v28;
  (*(void (**)(void **__return_ptr, const std::collate<char> *, void **, char *))(*(_QWORD *)this->__traits_.__col_
                                                                                           + 32))(v136, this->__traits_.__col_, __p, (char *)__p + 1);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v38 = this->__ranges_.__begin_;
  v40 = HIBYTE(v136[2]);
  v41 = (char *)this->__ranges_.__end_ - (char *)v38;
  if (!v41)
    goto LABEL_155;
LABEL_59:
  v134 = v25;
  v131 = negate;
  v129 = v2;
  v42 = 0;
  v43 = v41 / 48;
  v126 = v40;
  if ((v40 & 0x80u) == 0)
    v44 = v136;
  else
    v44 = (void **)v136[0];
  if ((v40 & 0x80u) == 0)
    v45 = (void *)v40;
  else
    v45 = v136[1];
  if (v43 <= 1)
    v46 = 1;
  else
    v46 = v41 / 48;
  v47 = (unsigned __int8 *)&v38->second.__r_.__value_.__r.__words[2] + 7;
  v48 = 1;
  while (2)
  {
    v49 = (char)*(v47 - 24);
    if (v49 >= 0)
      v50 = (char *)(v47 - 47);
    else
      v50 = *(char **)(v47 - 47);
    if (v49 >= 0)
      v51 = *(v47 - 24);
    else
      v51 = *(_QWORD *)(v47 - 39);
    if ((unint64_t)v45 >= v51)
      v52 = v51;
    else
      v52 = (size_t)v45;
    v53 = memcmp(v50, v44, v52);
    if (v53)
    {
      if (v53 < 0)
        goto LABEL_84;
    }
    else if (v51 <= (unint64_t)v45)
    {
LABEL_84:
      v54 = (char)*v47;
      if (v54 >= 0)
        v55 = (char *)(v47 - 23);
      else
        v55 = *(char **)(v47 - 23);
      if (v54 >= 0)
        v56 = *v47;
      else
        v56 = *(_QWORD *)(v47 - 15);
      if (v56 >= (unint64_t)v45)
        v57 = (size_t)v45;
      else
        v57 = v56;
      v58 = memcmp(v44, v55, v57);
      if (v58)
      {
        if (v58 < 0)
        {
LABEL_95:
          negate = 1;
          v2 = v129;
          v25 = v134;
          if ((v126 & 0x80) == 0)
            goto LABEL_127;
          goto LABEL_126;
        }
      }
      else if ((unint64_t)v45 <= v56)
      {
        goto LABEL_95;
      }
    }
    v48 = ++v42 < v43;
    v47 += 48;
    if (v46 != v42)
      continue;
    break;
  }
  v2 = v129;
  negate = v131;
  v25 = v134;
  if ((v126 & 0x80) == 0)
    goto LABEL_127;
LABEL_126:
  operator delete(v136[0]);
LABEL_127:
  if (v48)
    goto LABEL_245;
LABEL_128:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_239:
    if ((v28 & 0x80) != 0)
      goto LABEL_245;
    v115 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v28] & v115) == 0)
    {
      v116 = (v115 >> 7) & 1;
      if (v28 != 95)
        v116 = 0;
      if (v116 != 1)
        goto LABEL_245;
    }
    goto LABEL_244;
  }
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)&this->__traits_, (_BYTE *)&__src + 1, __p);
  v71 = this->__equivalences_.__begin_;
  v72 = HIBYTE(__p[2]);
  v73 = (char *)this->__equivalences_.__end_ - (char *)v71;
  if (!v73)
  {
    if ((HIBYTE(__p[2]) & 0x80) != 0)
      operator delete(__p[0]);
LABEL_238:
    v28 = __src;
    goto LABEL_239;
  }
  v132 = negate;
  v130 = v2;
  v74 = 0;
  v75 = v73 / 24;
  v76 = __p[0];
  v77 = __p[1];
  if (SHIBYTE(__p[2]) >= 0)
    v78 = (void *)HIBYTE(__p[2]);
  else
    v78 = __p[1];
  if (v75 <= 1)
    v79 = 1;
  else
    v79 = v73 / 24;
  v80 = 1;
  while (2)
  {
    v81 = &v71[v74];
    v82 = (void *)HIBYTE(v81->__r_.__value_.__r.__words[2]);
    v83 = (char)v82;
    if ((char)v82 < 0)
      v82 = (void *)v81->__r_.__value_.__l.__size_;
    if (v78 != v82)
    {
LABEL_149:
      if (++v74 == v79)
      {
        if ((v72 & 0x80) != 0)
LABEL_236:
          operator delete(__p[0]);
        v2 = v130;
        negate = v132;
        goto LABEL_238;
      }
      goto LABEL_153;
    }
    if (v83 >= 0)
      v84 = &v71[v74];
    else
      v84 = (std::string *)v81->__r_.__value_.__r.__words[0];
    if ((v72 & 0x80) == 0)
    {
      if (!(_DWORD)v72)
      {
LABEL_157:
        v2 = v130;
        negate = 1;
        if (!v80)
          goto LABEL_238;
        goto LABEL_245;
      }
      v85 = 0;
      while (*((unsigned __int8 *)__p + v85) == v84->__r_.__value_.__s.__data_[v85])
      {
        if (v72 == ++v85)
          goto LABEL_157;
      }
      goto LABEL_149;
    }
    v127 = v80;
    v86 = v76;
    v87 = v77;
    if (memcmp(v76, v84, (size_t)v77))
    {
      ++v74;
      v77 = v87;
      v76 = v86;
      if (v74 == v79)
        goto LABEL_236;
LABEL_153:
      v80 = v74 < v75;
      continue;
    }
    break;
  }
  operator delete(__p[0]);
  v2 = v130;
  negate = 1;
  if (!v127)
    goto LABEL_238;
LABEL_245:
  if (negate == this->__negate_)
  {
    first = 0;
    v118 = -993;
  }
  else
  {
    v2->__current_ += v25;
    first = this->__first_;
    v118 = -995;
  }
  v2->__do_ = v118;
  v2->__node_ = first;
}

void sub_24B86EA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  std::locale::__imp *v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  std::locale::__imp *v10;
  std::locale::__imp *v11;

  locale = a1[17].__locale_;
  if (locale)
  {
    v3 = a1[18].__locale_;
    v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*((void **)v3 - 3));
        v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  v6 = a1[11].__locale_;
  if (v6)
  {
    v7 = a1[12].__locale_;
    v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0)
LABEL_19:
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  v11 = a1[1].__locale_;
  if (v11)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void std::regex_traits<char>::__lookup_collatename<char *>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  size_t v19;
  std::string v20;
  _BYTE __dst[24];

  v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    __dst[23] = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v5);
    v9 += v5;
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  v9 = operator new(v10 + 1);
  *(_QWORD *)&__dst[8] = v5;
  *(_QWORD *)&__dst[16] = v11 | 0x8000000000000000;
  *(_QWORD *)__dst = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *v9 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if ((__dst[23] & 0x80000000) != 0)
  {
    v12 = *(char **)__dst;
    if (!*(_QWORD *)&__dst[8])
      goto LABEL_18;
  }
  else
  {
    if (!__dst[23])
      return;
    v12 = __dst;
  }
  std::__get_collation_name(&v20, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
  v13 = v20.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v20.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    goto LABEL_16;
  if ((__dst[23] & 0x80000000) != 0)
  {
    v15 = *(_QWORD *)&__dst[8];
    v12 = *(char **)__dst;
    if (*(_QWORD *)&__dst[8] < 3uLL)
      goto LABEL_24;
LABEL_18:
    operator delete(v12);
    return;
  }
  v15 = __dst[23];
  if (__dst[23] < 3u)
  {
    v12 = __dst;
LABEL_24:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v20, *(_QWORD *)(a2 + 16), v12, &v12[v15]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v20;
    if (*(char *)(a4 + 23) < 0)
    {
      v17 = *(_QWORD *)(a4 + 8);
      if (v17 == 1 || v17 == 12)
      {
        if (__dst != (_BYTE *)a4)
        {
          if (__dst[23] >= 0)
            v18 = __dst;
          else
            v18 = *(_BYTE **)__dst;
          if (__dst[23] >= 0)
            v19 = __dst[23];
          else
            v19 = *(_QWORD *)&__dst[8];
          std::string::__assign_no_alias<false>((void **)a4, v18, v19);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v16 = *(unsigned __int8 *)(a4 + 23);
      if (v16 == 1 || v16 == 12)
      {
        if (__dst != (_BYTE *)a4)
        {
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)a4, *(void **)__dst, *(size_t *)&__dst[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__dst;
            *(_QWORD *)(a4 + 16) = *(_QWORD *)&__dst[16];
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
LABEL_16:
    if ((__dst[23] & 0x80000000) == 0)
      return;
    v12 = *(char **)__dst;
    goto LABEL_18;
  }
}

void sub_24B86EE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  size_t v5;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  void *__dst[3];

  v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v5);
    v9 = (void **)((char *)v9 + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v5;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)v9 = 0;
  memset(a4, 170, 24);
  v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  if (SHIBYTE(__dst[2]) < 0)
    v12 = (char *)__dst[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v13, &v12[(_QWORD)v13]);
  v14 = *((unsigned __int8 *)a4 + 23);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = a4[1];
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      return;
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0)
      v16 = a4;
    else
      v16 = (_BYTE *)*a4;
    v16[11] = v16[3];
    if (SHIBYTE(__dst[2]) < 0)
      goto LABEL_26;
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(_BYTE *)a4 = 0;
    *((_BYTE *)a4 + 23) = 0;
    goto LABEL_25;
  }
  *(_BYTE *)*a4 = 0;
  a4[1] = 0;
  if (SHIBYTE(__dst[2]) < 0)
LABEL_26:
    operator delete(__dst[0]);
}

void sub_24B86F04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24BD29940](exception, 5);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_24B86F0A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v4;
  int64_t v5;
  int v6;
  char *v7;
  char *v8;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  char *v19;
  int v20;
  _BYTE *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  char *v25;
  uint64_t v26;
  int v27;
  int v28;
  std::basic_regex<char>::value_type *v29;
  char *v30;
  _BYTE *v31;
  int v32;
  void **v33;
  _BYTE *v34;
  char *v35;
  void *v37[2];
  uint64_t v38;
  void *v39[2];
  uint64_t v40;
  void *__p[2];
  uint64_t v42;
  __int128 v43;
  int64_t v44;

  v4 = a2;
  v5 = a2 - a3;
  if (a2 == a3)
    return a2;
  v6 = *a2;
  v7 = a2;
  if (v6 == 93)
    return v7;
  v8 = (char *)a4;
  v11 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v42 = 0;
  if (a2 + 1 == a3 || v6 != 91)
  {
LABEL_36:
    v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_39;
  }
  v12 = a2[1];
  if (v12 != 46)
  {
    if (v12 == 58)
    {
      v14 = (uint64_t)(a2 + 2);
      if (a3 - (v4 + 2) < 2)
        goto LABEL_91;
      v15 = 0;
      v16 = v5 + 4;
      v17 = (unsigned __int8 *)v4;
      v18 = v16;
      if (v4[2] == 58)
        goto LABEL_15;
      do
      {
        do
        {
          if (!v18)
            goto LABEL_91;
          v17 = (unsigned __int8 *)&v4[++v15];
          v18 = v16 + v15;
        }
        while (v4[v15 + 2] != 58);
LABEL_15:
        ;
      }
      while (v17[3] != 93);
      v19 = &v4[v15 + 2];
      if (v19 == a3)
LABEL_91:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      v20 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, v14, v19, *(_DWORD *)(a1 + 24) & 1);
      if (!v20)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
      v13 = 0;
      *((_DWORD *)v8 + 40) |= v20;
      v8 = &v4[v15 + 4];
      v7 = v4;
      if (SHIBYTE(v42) < 0)
        goto LABEL_70;
      goto LABEL_71;
    }
    if (v12 == 61)
    {
      v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
      v13 = 0;
      v7 = v4;
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_71;
      goto LABEL_70;
    }
    v11 = 0;
    goto LABEL_36;
  }
  v21 = a2 + 2;
  if (a3 - (v4 + 2) < 2)
    goto LABEL_92;
  v22 = (unsigned __int8 *)(v4 + 2);
  v23 = (unsigned __int8 *)(v4 + 3);
  if (*v21 == 46)
    goto LABEL_24;
  do
  {
    do
    {
      if (a3 - 4 == v4)
        goto LABEL_92;
      ++v4;
      v22 = v23;
      v24 = *v23++;
    }
    while (v24 != 46);
LABEL_24:
    ;
  }
  while (*v23 != 93);
  if (v22 == (unsigned __int8 *)a3)
LABEL_92:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)v21, v4 + 2, (uint64_t)&v43);
  if (SHIBYTE(v42) < 0)
    operator delete(__p[0]);
  v42 = v44;
  *(_OWORD *)__p = v43;
  v25 = (char *)HIBYTE(v44);
  v11 = SHIBYTE(v44);
  v26 = *((_QWORD *)&v43 + 1);
  if (v44 < 0)
    v25 = (char *)__p[1];
  if ((unint64_t)(v25 - 1) >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  v4 = (char *)(v22 + 2);
  v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v44 >= 0)
    v26 = HIBYTE(v44);
  if (v26)
  {
    if (v4 == a3)
      goto LABEL_52;
    goto LABEL_51;
  }
LABEL_39:
  if ((v27 | 0x40) != 0x40)
  {
    LOBYTE(v28) = *v4;
LABEL_44:
    if (v11 < 0)
    {
      v31 = __p[0];
      __p[1] = (void *)1;
      *(_BYTE *)__p[0] = v28;
      v31[1] = 0;
      if (++v4 == a3)
        goto LABEL_52;
    }
    else
    {
      HIBYTE(v42) = 1;
      LOWORD(__p[0]) = v28;
      if (++v4 == a3)
        goto LABEL_52;
    }
    goto LABEL_51;
  }
  v28 = *v4;
  if (v28 != 92)
    goto LABEL_44;
  v29 = v4 + 1;
  if (v27)
    v30 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v29, a3, (uint64_t *)__p);
  else
    v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v29, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v8);
  v4 = v30;
  if (v30 == a3)
  {
LABEL_52:
    if (SHIBYTE(v42) < 0)
    {
      if (!__p[1])
        goto LABEL_69;
      if (__p[1] != (void *)1)
      {
        v33 = (void **)__p[0];
LABEL_68:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v8, *(char *)v33, *((char *)v33 + 1));
LABEL_69:
        v13 = 1;
        v7 = v4;
        if ((SHIBYTE(v42) & 0x80000000) == 0)
          goto LABEL_71;
        goto LABEL_70;
      }
      v33 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v42))
        goto LABEL_69;
      v33 = __p;
      if (HIBYTE(v42) != 1)
        goto LABEL_68;
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, *(char *)v33);
    goto LABEL_69;
  }
LABEL_51:
  v32 = *v4;
  if (v32 == 93)
    goto LABEL_52;
  v34 = v4 + 1;
  if (v4 + 1 == a3 || v32 != 45 || *v34 == 93)
    goto LABEL_52;
  v43 = 0uLL;
  v44 = 0;
  v7 = v4 + 2;
  if (v4 + 2 == a3 || *v34 != 91 || *v7 != 46)
  {
    if ((v27 | 0x40) == 0x40)
    {
      LODWORD(v34) = *v34;
      if ((_DWORD)v34 == 92)
      {
        if (v27)
          v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4 + 2, a3, (uint64_t *)&v43);
        else
          v35 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v4 + 2, (unsigned __int8 *)a3, (uint64_t)&v43, (uint64_t)v8);
        goto LABEL_81;
      }
    }
    else
    {
      LOBYTE(v34) = *v34;
    }
    HIBYTE(v44) = 1;
    LOWORD(v43) = v34;
    goto LABEL_82;
  }
  v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v4 + 3, a3, (uint64_t)&v43);
LABEL_81:
  v7 = v35;
LABEL_82:
  *(_OWORD *)v39 = *(_OWORD *)__p;
  v40 = v42;
  __p[1] = 0;
  v42 = 0;
  __p[0] = 0;
  *(_OWORD *)v37 = v43;
  v38 = v44;
  v43 = 0uLL;
  v44 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v8, (char *)v39, (uint64_t)v37);
  if (SHIBYTE(v38) < 0)
  {
    operator delete(v37[0]);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_84:
      if ((SHIBYTE(v44) & 0x80000000) == 0)
        goto LABEL_85;
LABEL_89:
      operator delete((void *)v43);
      v13 = 1;
      if (SHIBYTE(v42) < 0)
        goto LABEL_70;
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_84;
  }
  operator delete(v39[0]);
  if (SHIBYTE(v44) < 0)
    goto LABEL_89;
LABEL_85:
  v13 = 1;
  if (SHIBYTE(v42) < 0)
LABEL_70:
    operator delete(__p[0]);
LABEL_71:
  if ((v13 & 1) != 0)
    return v7;
  return v8;
}

void sub_24B86F5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  char *v11;
  void **v12;
  unint64_t v13;
  __int128 v14;
  void *v15;
  void **v16;
  void **v17;
  void *__p[3];
  void *v20[3];

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_39;
  v6 = a3 - 2;
  v7 = a2;
  v8 = a2;
  v9 = a2 + 1;
  if (*a2 != 61)
    goto LABEL_5;
LABEL_4:
  if (*v9 != 93)
  {
LABEL_5:
    while (a2 != v6)
    {
      ++v7;
      --v6;
      v8 = v9;
      v10 = *v9++;
      if (v10 == 61)
        goto LABEL_4;
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v8 == a3)
    goto LABEL_39;
  memset(v20, 170, sizeof(v20));
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v7, (uint64_t)v20);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
    v11 = (char *)HIBYTE(v20[2]);
    if (HIBYTE(v20[2]))
    {
      memset(__p, 170, sizeof(__p));
      v12 = v20;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v11 = (char *)v20[1];
  if (!v20[1])
    goto LABEL_40;
  memset(__p, 170, sizeof(__p));
  v12 = (void **)v20[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v12, &v11[(_QWORD)v12], (_BYTE **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      v13 = *(_QWORD *)(a4 + 144);
      if (v13 >= *(_QWORD *)(a4 + 152))
      {
        *(_QWORD *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v14 = *(_OWORD *)__p;
          *(void **)(v13 + 16) = __p[2];
          *(_OWORD *)v13 = v14;
        }
        *(_QWORD *)(a4 + 144) = v13 + 24;
        *(_QWORD *)(a4 + 144) = v13 + 24;
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  v15 = (void *)HIBYTE(v20[2]);
  if (SHIBYTE(v20[2]) < 0)
    v15 = v20[1];
  if (v15 == (void *)2)
  {
    v17 = v20;
    if (SHIBYTE(v20[2]) < 0)
      v17 = (void **)v20[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v17, *((char *)v17 + 1));
  }
  else
  {
    if (v15 != (void *)1)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    v16 = v20;
    if (SHIBYTE(v20[2]) < 0)
      v16 = (void **)v20[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v16);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v20[2]) < 0)
      goto LABEL_38;
    return v7 + 2;
  }
LABEL_33:
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
    return v7 + 2;
LABEL_38:
  operator delete(v20[0]);
  return v7 + 2;
}

void sub_24B86F8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  unint64_t v14;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  v7 = a2;
  v8 = a2 + 1;
  if (*a2 != 46)
    goto LABEL_5;
LABEL_4:
  if (*v8 != 93)
  {
LABEL_5:
    while (a2 != v5)
    {
      ++v6;
      --v5;
      v7 = v8;
      v9 = *v8++;
      if (v9 == 46)
        goto LABEL_4;
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v7 == a3)
    goto LABEL_15;
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v13;
  v10 = v14;
  *(_QWORD *)(a4 + 16) = v14;
  v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a4 + 8);
  if (v11 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type *v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  std::basic_regex<char>::value_type v11;

  if (a2 == a3)
LABEL_70:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  switch(*a2)
  {
    case '"':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v5;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30)
        goto LABEL_70;
      v7 = *a2 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_42:
        if (a4)
          goto LABEL_43;
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_42;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        v8 = a3;
        if (a4)
          goto LABEL_43;
        goto LABEL_69;
      }
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      if (!a4)
        goto LABEL_69;
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v7;
      *((_BYTE *)a4 + 1) = 0;
      return v8;
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t j;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t k;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t m;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  int v33;
  char *v34;
  char v35;
  char *v36;
  char v37;
  _BYTE *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  int v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  void *__p[2];
  uint64_t v49;
  void *v50[2];
  uint64_t v51;

  v3 = a3;
  v4 = (uint64_t)a2;
  if (!*(_BYTE *)(a1 + 170))
  {
    v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((_QWORD *)a2 + 1) != 1)
        goto LABEL_74;
    }
    else if (v16 != 1)
    {
LABEL_74:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(_QWORD *)(a3 + 8) != 1)
        goto LABEL_74;
    }
    else if (*(_BYTE *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(_BYTE *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)__p = *(_OWORD *)v4;
      v49 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = 0;
      *(_OWORD *)v50 = *(_OWORD *)v3;
      v51 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)v3 = 0;
      v39 = *(_QWORD *)(a1 + 96);
      if (v39 < *(_QWORD *)(a1 + 104))
      {
        v40 = *(_OWORD *)__p;
        *(_QWORD *)(v39 + 16) = v49;
        *(_OWORD *)v39 = v40;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(_QWORD *)(v39 + 40) = v41;
        v50[1] = 0;
        v51 = 0;
        v50[0] = 0;
        *(_QWORD *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      v42 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
      v43 = SHIBYTE(v51);
      *(_QWORD *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    v34 = a2;
    if ((v16 & 0x80) != 0)
      v34 = *(char **)a2;
    v35 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
        goto LABEL_64;
    }
    else
    {
      *(_BYTE *)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        v37 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v36);
        v38 = (_BYTE *)v3;
        if (*(char *)(v3 + 23) < 0)
          v38 = *(_BYTE **)v3;
        *v38 = v37;
        goto LABEL_67;
      }
    }
    v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(_BYTE *)(a1 + 169))
  {
    for (i = 0; ; ++i)
    {
      v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(_QWORD *)(v4 + 8))
        {
LABEL_13:
          for (j = 0; ; ++j)
          {
            v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(_QWORD *)(v3 + 8))
                goto LABEL_44;
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            v13 = v3;
            if ((v12 & 0x80) != 0)
              v13 = *(_QWORD *)v3;
            v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v13 + j));
            v15 = v3;
            if (*(char *)(v3 + 23) < 0)
              v15 = *(_QWORD *)v3;
            *(_BYTE *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      v8 = v4;
      if ((v7 & 0x80) != 0)
        v8 = *(_QWORD *)v4;
      v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v8 + i));
      v10 = v4;
      if (*(char *)(v4 + 23) < 0)
        v10 = *(_QWORD *)v4;
      *(_BYTE *)(v10 + i) = v9;
    }
  }
  for (k = 0; ; ++k)
  {
    v19 = a2[23];
    if (a2[23] < 0)
      break;
    if (k >= v19)
      goto LABEL_35;
LABEL_33:
    v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      v18 = *(char **)a2;
      v20 = *(char **)a2;
    }
    else
    {
      v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((_QWORD *)a2 + 1))
    goto LABEL_33;
LABEL_35:
  for (m = 0; ; ++m)
  {
    v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0)
      break;
    if (m >= v23)
      goto LABEL_44;
LABEL_42:
    v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      v22 = *(_QWORD *)a3;
      v24 = *(_QWORD *)a3;
    }
    else
    {
      v24 = a3;
    }
    *(_BYTE *)(v24 + m) = *(_BYTE *)(v22 + m);
  }
  if (m < *(_QWORD *)(a3 + 8))
    goto LABEL_42;
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    v26 = v4;
    v4 = *(_QWORD *)v4;
    v25 = *(_QWORD *)(v26 + 8);
  }
  else
  {
    v25 = *(unsigned __int8 *)(v4 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    v28 = v3;
    v3 = *(_QWORD *)v3;
    v27 = *(_QWORD *)(v28 + 8);
  }
  else
  {
    v27 = *(unsigned __int8 *)(v3 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)__p = *(_OWORD *)v46;
  v49 = v47;
  *(_OWORD *)v50 = *(_OWORD *)v44;
  v51 = v45;
  v29 = *(_QWORD *)(a1 + 96);
  if (v29 >= *(_QWORD *)(a1 + 104))
  {
    v32 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
    v33 = SHIBYTE(v51);
    *(_QWORD *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  v30 = *(_OWORD *)__p;
  *(_QWORD *)(v29 + 16) = v49;
  *(_OWORD *)v29 = v30;
  __p[1] = 0;
  v49 = 0;
  __p[0] = 0;
  v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(_QWORD *)(v29 + 40) = v31;
  v50[1] = 0;
  v51 = 0;
  v50[0] = 0;
  *(_QWORD *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0)
    goto LABEL_69;
}

void sub_24B8704D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B8704E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  char *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _WORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  unint64_t v36;
  __int128 v37;
  __int16 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  unint64_t v53;
  __int128 v54;
  __int16 v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  _OWORD *v60;
  char *v61;
  unint64_t v62;
  __int128 v63;
  __int16 v64;

  if (*(_BYTE *)(a1 + 169))
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
    v8 = *(char **)(a1 + 120);
    v7 = *(_QWORD *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      v9 = (char **)(a1 + 112);
      v10 = *(char **)(a1 + 112);
      v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        v12 = v11 >> 1;
        v13 = v7 - (_QWORD)v10;
        if (v13 <= (v11 >> 1) + 1)
          v14 = v12 + 1;
        else
          v14 = v13;
        if (v13 >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (!v15)
        {
          v16 = 0;
          v17 = (_WORD *)(2 * v12);
          v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          v19 = 2 * v12 + 2;
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
LABEL_30:
          v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E)
            goto LABEL_71;
          if ((unint64_t)(v8 - &v16[v11 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
            goto LABEL_71;
          v31 = (v30 >> 1) + 1;
          v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          v33 = &v8[-v32];
          v17 = (_WORD *)((char *)v17 - v32);
          v34 = &v16[2 * v12 - 16];
          v35 = v8 - 16;
          v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          v16 = operator new(2 * v15);
          v17 = &v16[2 * v12];
          v18 = &v16[2 * v15];
          *v17 = v6;
          v19 = (uint64_t)(v17 + 1);
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
          goto LABEL_30;
        }
LABEL_68:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_67:
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    }
LABEL_28:
    *(_WORD *)v8 = v6;
    v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  v9 = (char **)(a1 + 112);
  v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  v8 = *(char **)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21)
      goto LABEL_28;
    v22 = *v9;
    v23 = v8 - *v9;
    if (v23 <= -3)
      goto LABEL_67;
    v24 = v23 >> 1;
    v25 = v21 - (_QWORD)v22;
    if (v25 <= (v23 >> 1) + 1)
      v26 = v24 + 1;
    else
      v26 = v25;
    if (v25 >= 0x7FFFFFFFFFFFFFFELL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      if (v27 < 0)
        goto LABEL_68;
      v28 = operator new(2 * v27);
      v17 = &v28[2 * v24];
      v18 = &v28[2 * v27];
      *v17 = v6;
      v19 = (uint64_t)(v17 + 1);
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    else
    {
      v28 = 0;
      v17 = (_WORD *)(2 * v24);
      v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      v19 = 2 * v24 + 2;
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E)
      goto LABEL_72;
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_72;
    v48 = (v47 >> 1) + 1;
    v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    v50 = &v8[-v49];
    v17 = (_WORD *)((char *)v17 - v49);
    v51 = &v28[2 * v24 - 16];
    v52 = v8 - 16;
    v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21)
    goto LABEL_28;
  v39 = *v9;
  v40 = v8 - *v9;
  if (v40 <= -3)
    goto LABEL_67;
  v41 = v40 >> 1;
  v42 = v21 - (_QWORD)v39;
  if (v42 <= (v40 >> 1) + 1)
    v43 = v41 + 1;
  else
    v43 = v42;
  if (v42 >= 0x7FFFFFFFFFFFFFFELL)
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v44 = v43;
  if (!v44)
  {
    v45 = 0;
    v17 = (_WORD *)(2 * v41);
    v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    v19 = 2 * v41 + 2;
    v46 = (char *)(v8 - v39);
    if (v8 == v39)
      goto LABEL_64;
    goto LABEL_57;
  }
  if (v44 < 0)
    goto LABEL_68;
  v45 = operator new(2 * v44);
  v17 = &v45[2 * v41];
  v18 = &v45[2 * v44];
  *v17 = v6;
  v19 = (uint64_t)(v17 + 1);
  v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E)
      goto LABEL_73;
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_73;
    v57 = (v56 >> 1) + 1;
    v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    v59 = &v8[-v58];
    v17 = (_WORD *)((char *)v17 - v58);
    v60 = &v45[2 * v41 - 16];
    v61 = v8 - 16;
    v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      *v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v18;
  if (v8)
    operator delete(v8);
LABEL_66:
  *(_QWORD *)(a1 + 120) = v19;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24BD29940](exception, 1);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_24B870920(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  char *v9;
  char *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  size_t v26;
  std::string v27;
  char __s[24];

  v5 = (unint64_t)&a3[-a2];
  memset(__s, 170, sizeof(__s));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    __s[23] = (_BYTE)a3 - a2;
    v9 = __s;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v16 = v5 | 7;
  v17 = v16 + 1;
  v9 = (char *)operator new(v16 + 1);
  *(_QWORD *)&__s[8] = v5;
  *(_QWORD *)&__s[16] = v17 | 0x8000000000000000;
  *(_QWORD *)__s = v9;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)&v9[-a2] < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
    do
    {
LABEL_15:
      v18 = *v11++;
      *v10++ = v18;
    }
    while (v11 != a3);
    goto LABEL_16;
  }
  v10 = &v9[v5 & 0xFFFFFFFFFFFFFFE0];
  v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
  v12 = (__int128 *)(a2 + 16);
  v13 = v9 + 16;
  v14 = v5 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v15 = *v12;
    *(v13 - 1) = *(v12 - 1);
    *v13 = v15;
    v12 += 2;
    v13 += 2;
    v14 -= 32;
  }
  while (v14);
  if (v5 != (v5 & 0xFFFFFFFFFFFFFFE0))
    goto LABEL_15;
LABEL_16:
  *v10 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (__s[23] < 0)
  {
    v19 = *(char **)__s;
    if (!*(_QWORD *)&__s[8])
      goto LABEL_29;
  }
  else
  {
    if (!__s[23])
      return;
    v19 = __s;
  }
  std::__get_collation_name(&v27, v19);
  *(_OWORD *)a4 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  v20 = v27.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v27.__r_.__value_.__l + 2);
  v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a4 + 8);
  if (v21)
  {
LABEL_23:
    if ((__s[23] & 0x80000000) == 0)
      return;
    v19 = *(char **)__s;
LABEL_29:
    operator delete(v19);
    return;
  }
  if (__s[23] < 0)
  {
    v19 = *(char **)__s;
    v22 = *(_QWORD *)&__s[8];
    if (*(_QWORD *)&__s[8] >= 3uLL)
      goto LABEL_29;
    goto LABEL_31;
  }
  v22 = __s[23];
  if (__s[23] < 3u)
  {
    v19 = __s;
LABEL_31:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v27, *(_QWORD *)(a1 + 16), v19, &v19[v22]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v27;
    if (*(char *)(a4 + 23) < 0)
    {
      v24 = *(_QWORD *)(a4 + 8);
      if (v24 == 1 || v24 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] >= 0)
            v25 = __s;
          else
            v25 = *(char **)__s;
          if (__s[23] >= 0)
            v26 = __s[23];
          else
            v26 = *(_QWORD *)&__s[8];
          std::string::__assign_no_alias<false>((void **)a4, v25, v26);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v23 = *(unsigned __int8 *)(a4 + 23);
      if (v23 == 1 || v23 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] < 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)a4, *(void **)__s, *(size_t *)&__s[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__s;
            *(_QWORD *)(a4 + 16) = *(_QWORD *)&__s[16];
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
    goto LABEL_23;
  }
}

void sub_24B870BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _BYTE **a4@<X8>)
{
  unint64_t v5;
  _OWORD *v9;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  void **v20;
  _BYTE *v21;
  int v22;
  _BYTE *v23;
  void *__p[3];

  v5 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 > 0x16)
  {
    v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v16 = v5 | 7;
    v17 = v16 + 1;
    v9 = operator new(v16 + 1);
    __p[1] = (void *)v5;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v9 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)v9 + (v5 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = v9 + 1;
    v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  memset(a4, 170, 24);
  v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v19 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v20, &v19[(_QWORD)v20]);
  v21 = (_BYTE *)*((unsigned __int8 *)a4 + 23);
  v22 = (char)v21;
  if ((char)v21 < 0)
    v21 = a4[1];
  if (v21 == (_BYTE *)1)
    goto LABEL_32;
  if (v21 != (_BYTE *)12)
  {
    if (v22 < 0)
    {
      **a4 = 0;
      a4[1] = 0;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        return;
LABEL_35:
      operator delete(__p[0]);
      return;
    }
    *(_BYTE *)a4 = 0;
    *((_BYTE *)a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return;
    goto LABEL_35;
  }
  if (v22 >= 0)
    v23 = a4;
  else
    v23 = *a4;
  v23[11] = v23[3];
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_35;
}

void sub_24B870E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  void **v14;
  std::string *v16;
  std::string *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    v11 = v10 + 1;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((_QWORD *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_24B871000(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24BD29940](exception, 2);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_24B8710B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, BOOL a4)
{
  unint64_t v4;
  _OWORD *v9;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  void **v20;
  void **v21;
  uint64_t classname;
  void *__p[3];

  v4 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 > 0x16)
  {
    v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v16 = v4 | 7;
    v17 = v16 + 1;
    v9 = operator new(v16 + 1);
    __p[1] = (void *)v4;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v9 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v4 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)v9 + (v4 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v4 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = v9 + 1;
    v14 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v19 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v20, &v19[(_QWORD)v20]);
  if (SHIBYTE(__p[2]) >= 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  classname = std::__get_classname((const char *)v21, a4);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_24B871248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 64);
    v5 = *(_BYTE **)(a1 + 72);
    v16 = *(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 64) = v13;
        *(_QWORD *)(a1 + 72) = v15;
        *(_QWORD *)(a1 + 80) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 64);
  v7 = *(_BYTE **)(a1 + 64);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v15;
  *(_QWORD *)(a1 + 80) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 72) = v15;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3;
  _OWORD *v7;
  _BYTE *v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;
  void **v18;
  void *__p[3];

  v3 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3 > 0x16)
  {
    v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v14 = v3 | 7;
    v15 = v14 + 1;
    v7 = operator new(v14 + 1);
    __p[1] = (void *)v3;
    __p[2] = (void *)(v15 | 0x8000000000000000);
    __p[0] = v7;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v8 = v7;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v7 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v3 < 0x20 || (unint64_t)v7 - a2 < 0x20)
  {
    v8 = v7;
    v9 = (char *)a2;
  }
  else
  {
    v8 = (char *)v7 + (v3 & 0xFFFFFFFFFFFFFFE0);
    v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    v10 = (__int128 *)(a2 + 16);
    v11 = v7 + 1;
    v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  *v8 = 0;
  v17 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v17 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v18, &v17[(_QWORD)v18]);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_24B87185C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24BD29940](exception, 9);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_24B8718B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v8 + 48;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      *((_QWORD *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      v15 = *(_OWORD *)(v13 - 3);
      *((_QWORD *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13)
        goto LABEL_22;
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0)
          goto LABEL_14;
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13)
    operator delete(v13);
  return v11;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  void *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = operator new(0x10uLL);
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new(0x38uLL);
  LODWORD(first) = this->__loop_count_;
  v18 = __s->__first_;
  *(_QWORD *)v17 = &unk_251CB9668;
  *((_QWORD *)v17 + 1) = v18;
  *((_QWORD *)v17 + 2) = v14;
  *((_QWORD *)v17 + 3) = __min;
  *((_QWORD *)v17 + 4) = __max;
  *((_DWORD *)v17 + 10) = (_DWORD)first;
  *((_DWORD *)v17 + 11) = v9;
  *((_DWORD *)v17 + 12) = v8;
  *((_BYTE *)v17 + 52) = __greedy;
  __s->__first_ = 0;
  v19 = (std::__node<char> *)operator new(0x10uLL);
  v19->__vftable = (std::__node<char>_vtbl *)&unk_251CB96F8;
  v19[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v19;
  this->__end_ = (std::__owns_one_state<char> *)*((_QWORD *)v17 + 2);
  __s->__first_ = (std::__node<char> *)v17;
  this->__loop_count_ = (_DWORD)first + 1;
}

void sub_24B871CC4(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);

  std::__loop<char>::~__loop(v1);
  _Unwind_Resume(a1);
}

void sub_24B871CD8(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24BD29940](exception, 8);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_24B871D48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24BD29940](exception, 7);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_24B871D94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_251CB96C8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_251CB96C8;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

uint64_t std::__loop<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;

  v2 = *(unsigned int *)(result + 40);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    *v4 = 0;
    if (!*(_QWORD *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(_QWORD *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
      *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
      v20 = *(_DWORD *)(result + 44);
      v21 = *(_DWORD *)(result + 48);
      if (v20 == v21)
        return result;
      v22 = (v21 - 1);
      v23 = (v20 - 1);
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 32);
      v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        v28 = v25 + 24 * v23 + 24;
        v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(_QWORD *)(v28 - 24) = v24;
          *(_QWORD *)(v28 - 16) = v24;
          *(_QWORD *)v28 = v24;
          *(_QWORD *)(v28 + 8) = v24;
          *(_BYTE *)(v28 - 8) = 0;
          *(_BYTE *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL))
          return result;
      }
      else
      {
        v27 = v23;
      }
      v30 = v22 - v27;
      v31 = (_BYTE *)(v25 + 24 * v27 + 16);
      do
      {
        *((_QWORD *)v31 - 2) = v24;
        *((_QWORD *)v31 - 1) = v24;
        *v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  v5 = *v4 + 1;
  *v4 = v5;
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6)
    v8 = v5 < v7 && *(_QWORD *)(v3 + 16 * v2 + 8) != *(_QWORD *)(a2 + 16);
  if (v8 && v5 >= v6)
    goto LABEL_26;
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(result + 44);
  v13 = *(_DWORD *)(result + 48);
  if (v12 == v13)
    return result;
  v14 = (v13 - 1);
  v15 = (v12 - 1);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    v19 = v15;
LABEL_39:
    v34 = v14 - v19;
    v35 = (_BYTE *)(v17 + 24 * v19 + 16);
    do
    {
      *((_QWORD *)v35 - 2) = v16;
      *((_QWORD *)v35 - 1) = v16;
      *v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  v32 = v17 + 24 * v15 + 24;
  v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)(v32 - 24) = v16;
    *(_QWORD *)(v32 - 16) = v16;
    *(_QWORD *)v32 = v16;
    *(_QWORD *)(v32 + 8) = v16;
    *(_BYTE *)(v32 - 8) = 0;
    *(_BYTE *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL))
    goto LABEL_39;
  return result;
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(result + 44);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(_QWORD *)(a3 + 16);
  v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    v5 = (v4 - 1);
    v6 = (v3 - 1);
    v7 = *(_QWORD *)(a3 + 24);
    v8 = *(_QWORD *)(a3 + 32);
    v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      v10 = v6;
LABEL_9:
      v13 = v5 - v10;
      v14 = (_BYTE *)(v8 + 24 * v10 + 16);
      do
      {
        *((_QWORD *)v14 - 2) = v7;
        *((_QWORD *)v14 - 1) = v7;
        *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    v11 = v8 + 24 * v6 + 24;
    v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v11 - 24) = v7;
      *(_QWORD *)(v11 - 16) = v7;
      *(_QWORD *)v11 = v7;
      *(_QWORD *)(v11 + 8) = v7;
      *(_BYTE *)(v11 - 8) = 0;
      *(_BYTE *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_9;
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_251CB96C8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_251CB96C8;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_251CB96C8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_251CB96C8;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24BD29940](exception, 15);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_24B872364(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3)
{
  char *v6;
  int v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::basic_regex<char> *v14;
  std::__owns_one_state<char> *v15;
  int v16;
  std::basic_regex<char> *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (char *)a2, a3);
  if ((char *)a2 != v6 || (char *)a2 == a3 || (char *)(a2 + 1) == a3 || *(_BYTE *)a2 != 92)
    return v6;
  v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v10 = operator new(0x18uLL);
      v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *v10 = &unk_251CB95D8;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3)
        goto LABEL_23;
      v14 = v9;
      v15 = *(std::__owns_one_state<char> **)(a1 + 56);
      v16 = *(_DWORD *)(a1 + 28);
      v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v14, a3);
      if (v14 == v17)
        break;
      v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v14 != v9);
    if ((char *)&v14->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v14->__traits_.__loc_.__locale_) != 92
      || BYTE1(v14->__traits_.__loc_.__locale_) != 41)
    {
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    v6 = (char *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 41);
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v18 = operator new(0x18uLL);
      v19 = *(_QWORD *)(a1 + 56);
      v20 = *(_QWORD *)(v19 + 8);
      *v18 = &unk_251CB9620;
      v18[1] = v20;
      *((_DWORD *)v18 + 4) = v11;
      *(_QWORD *)(v19 + 8) = v18;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v6;
    }
    return v6;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8)
    return v6;
  if ((v8 - 48) > *(_DWORD *)(a1 + 28))
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int locale_low;
  unsigned __int8 *v9;
  std::basic_regex<char> *v10;
  int v11;
  int v12;
  std::basic_regex<char> *v13;
  int v14;
  std::basic_regex<char> *v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;

  if (this == a3)
    return this;
  locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  v9 = (unsigned __int8 *)a3;
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return this;
  }
  v10 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v10 == a3)
    goto LABEL_45;
  v11 = LOBYTE(v10->__traits_.__loc_.__locale_);
  if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38)
    goto LABEL_45;
  v12 = v11 - 48;
  v13 = (std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_15:
    v13 = a3;
  }
  else
  {
    while (1)
    {
      v14 = LOBYTE(v13->__traits_.__loc_.__locale_);
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
        break;
      if (v12 >= 214748364)
        goto LABEL_45;
      v12 = v14 + 10 * v12 - 48;
      v13 = (std::basic_regex<char> *)((char *)v13 + 1);
      if (v13 == a3)
        goto LABEL_15;
    }
  }
  if (v13 == v10)
    goto LABEL_45;
  if (v13 == a3)
LABEL_46:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 1);
  v16 = LOBYTE(v13->__traits_.__loc_.__locale_);
  if (v16 != 44)
  {
    if (v15 != a3 && v16 == 92 && LOBYTE(v15->__traits_.__loc_.__locale_) == 125)
    {
      v19 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v12, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_46;
  }
  if (v15 == a3)
    goto LABEL_46;
  v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
  if ((v17 & 0xF8) == 0x30 || (v17 & 0xFE) == 0x38)
  {
    v18 = v17 - 48;
    v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_37:
      v15 = a3;
      goto LABEL_40;
    }
    while (1)
    {
      v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
      if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38)
        break;
      if (v18 >= 214748364)
        goto LABEL_45;
      v18 = v17 + 10 * v18 - 48;
      v15 = (std::basic_regex<char> *)((char *)v15 + 1);
      if (v15 == a3)
        goto LABEL_37;
    }
  }
  else
  {
    v18 = -1;
  }
  if (v15 == a3)
  {
    v20 = (unsigned __int8 *)v15;
    v15 = a3;
    v9 = v20;
  }
  else if ((std::basic_regex<char> *)((char *)&v15->__traits_.__loc_.__locale_ + 1) == a3 || v17 != 92)
  {
    v9 = (unsigned __int8 *)v15;
  }
  else
  {
    v9 = (unsigned __int8 *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 125);
  }
LABEL_40:
  if (v15 == (std::basic_regex<char> *)v9)
    goto LABEL_46;
  if (v18 != -1)
  {
    if (v18 >= v12)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v18, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v9;
    }
LABEL_45:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v9;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v5;
  char *v6;
  int v9;
  std::__node<char> *v10;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  v6 = a2 + 1;
  v5 = *a2;
  if (a2 + 1 == a3 && v5 == 36)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
    return a2 + 1;
  }
  else if (v6 != a3
         && v5 == 92
         && (v9 = *v6, (v9 - 36) <= 0x3A)
         && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
    return a2 + 2;
  }
  else
  {
    if (*a2 != 46)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
    v10 = (std::__node<char> *)operator new(0x10uLL);
    end = this->__end_;
    first = end->__first_;
    v10->__vftable = (std::__node<char>_vtbl *)&unk_251CB97D0;
    v10[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v10;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  std::basic_regex<char> *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int locale_low;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  std::basic_regex<char> *v22;
  std::basic_regex<char> *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2)
  {
    v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char>::value_type *)a2, (std::basic_regex<char>::value_type *)a3);
    if (v8 == a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, (char *)a2, (char *)a3);
      }
      else
      {
        v9 = operator new(0x10uLL);
        v10 = *(_QWORD *)(a1 + 56);
        v11 = *(_QWORD *)(v10 + 8);
        *v9 = &unk_251CB97D0;
        v9[1] = v11;
        *(_QWORD *)(v10 + 8) = v9;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      }
    }
  }
  if (v8 != a2 || v8 == a3)
  {
LABEL_23:
    if (v8 != a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    return a2;
  }
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v13 = operator new(0x18uLL);
      v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v15 = *(_QWORD *)(a1 + 56);
      goto LABEL_14;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v19 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v18 = operator new(0x18uLL);
        v19 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v19;
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD *)(v20 + 8);
        *v18 = &unk_251CB95D8;
        v18[1] = v21;
        *((_DWORD *)v18 + 4) = v19;
        *(_QWORD *)(v20 + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v22 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v22 == a3 || (v23 = v22, LOBYTE(v22->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v24 = operator new(0x18uLL);
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *v24 = &unk_251CB9620;
        v24[1] = v26;
        *((_DWORD *)v24 + 4) = v19;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v8 = (std::basic_regex<char> *)((char *)&v23->__traits_.__loc_.__locale_ + 1);
      goto LABEL_23;
    case '^':
      v13 = operator new(0x18uLL);
      v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v15 = *(_QWORD *)(a1 + 56);
LABEL_14:
      v17 = *(_QWORD *)(v15 + 8);
      *v13 = v16 + 16;
      v13[1] = v17;
      *((_BYTE *)v13 + 16) = v14;
      *(_QWORD *)(v15 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return a2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_)
        return this;
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  std::basic_regex<char>::value_type *v3;
  std::basic_regex<char>::value_type *v4;
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type *result;
  _BOOL4 v7;
  uint64_t v8;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      v3 += 2;
      return v3;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
      }
      else
      {
        v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        v8 = 2;
        if (!v7)
          v8 = 0;
        result = &v3[v8];
      }
      break;
  }
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  int v9;
  int v10;
  const std::vector<std::csub_match>::value_type *v11;
  int v12;
  const char *i;
  std::vector<std::csub_match>::pointer begin;
  std::sub_match<const char *> *first;
  std::sub_match<const char *> *second;
  uint64_t result;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0)
    this[4].__end_ = a2;
  LOBYTE(this[4].__begin_) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) != 0)goto LABEL_28;
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28;
LABEL_13:
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      v12 = v9 | 0x80;
      for (i = (char *)&a2->first + 1; i != (const char *)a3; ++i)
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28;
          }
          else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)i, (uint64_t)a3, (uint64_t *)this, v12, 0) & 1) != 0)
          {
            goto LABEL_28;
          }
        }
        else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      }
      std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28;
        }
        else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a3, (uint64_t)a3, (uint64_t *)this, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
      }
      else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0) & 1) != 0)
      {
        goto LABEL_28;
      }
    }
    result = 0;
    this->__end_ = this->__begin_;
    return result;
  }
  if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) == 0)goto LABEL_13;
LABEL_28:
  if (this->__end_ == this->__begin_)
    begin = (std::vector<std::csub_match>::pointer)v11;
  else
    begin = this->__begin_;
  first = (std::sub_match<const char *> *)begin->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)begin->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)begin->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *this, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  std::vector<std::ssub_match>::pointer begin;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  std::vector<std::ssub_match>::pointer v25;
  std::sub_match<std::__wrap_iter<const char *>> *v26;

  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  begin = this->__begin_;
  end = this->__end_;
  v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      end = (std::vector<std::ssub_match>::pointer)((char *)begin + 8 * ((a4[1] - *a4) >> 3));
      this->__end_ = end;
    }
  }
  else
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v11 - v14);
    begin = this->__begin_;
    end = this->__end_;
  }
  if (end != begin)
  {
    v15 = 0;
    v16 = 0;
    v18 = *a4;
    v17 = a4[1];
    do
    {
      v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      v20 = (_QWORD *)(v18 + v15 * 24);
      if (v19 <= v16)
        v21 = a4 + 3;
      else
        v21 = v20;
      begin[v15].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v21 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16)
        v22 = (uint64_t)(a4 + 3);
      else
        v22 = *a4 + v15 * 24;
      this->__begin_[v15].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *(_QWORD *)(v22 + 8) - v10);
      v18 = *a4;
      v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16)
        v23 = (uint64_t)(a4 + 3);
      else
        v23 = *a4 + v15 * 24;
      v24 = *(_BYTE *)(v23 + 16);
      begin = this->__begin_;
      v25 = this->__end_;
      this->__begin_[v15].matched = v24;
      ++v16;
      ++v15;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)begin) >> 3));
  }
  this[1].__begin_ = a3;
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  v26 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  this[2].__begin_ = v26;
  this[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(this[2].__end_cap_.__value_) = *((_BYTE *)a4 + 64);
  this[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  this[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(this[3].__end_cap_.__value_) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    this[4].__end_ = v26;
  LOBYTE(this[4].__begin_) = *((_BYTE *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::vector<std::pair<unsigned long, const char *>> *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  void *v72;
  void *v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  __int128 v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void **v85;
  void **v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t *v92;
  uint64_t v93;
  char v94;
  _BYTE v97[96];
  __int128 v98;
  __int128 v99;
  __int128 v100;

  v99 = 0u;
  v100 = 0u;
  v98 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    v85 = (void **)*((_QWORD *)&v98 + 1);
    v86 = (void **)v99;
    *((_QWORD *)&v100 + 1) = 0;
    v87 = v99 - *((_QWORD *)&v98 + 1);
    if ((_QWORD)v99 - *((_QWORD *)&v98 + 1) < 0x11uLL)
      goto LABEL_81;
    do
    {
LABEL_80:
      operator delete(*v85);
      v86 = (void **)v99;
      v85 = (void **)(*((_QWORD *)&v98 + 1) + 8);
      *((_QWORD *)&v98 + 1) = v85;
      v87 = v99 - (_QWORD)v85;
    }
    while ((_QWORD)v99 - (_QWORD)v85 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)v97 = 0;
  memset(&v97[8], 0, 85);
  std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v98);
  v11 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (((_QWORD)v100 + *((_QWORD *)&v100 + 1)) / 0x2AuLL))
      + 96 * (((_QWORD)v100 + *((_QWORD *)&v100 + 1)) % 0x2AuLL);
  v12 = *(_OWORD *)&v97[16];
  *(_OWORD *)v11 = *(_OWORD *)v97;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  memset(&v97[32], 0, 24);
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  memset(&v97[56], 0, 24);
  v13 = *(_QWORD *)&v97[80];
  *(_QWORD *)(v11 + 85) = *(_QWORD *)&v97[85];
  *(_QWORD *)(v11 + 80) = v13;
  v15 = *((_QWORD *)&v100 + 1);
  v14 = v100;
  v16 = ++*((_QWORD *)&v100 + 1);
  v17 = *((_QWORD *)&v98 + 1);
  v18 = *(unsigned int *)(a1 + 32);
  v19 = v100 + v15;
  v20 = 8 * (v19 / 0x2A);
  v21 = 96 * (v19 % 0x2A);
  v22 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + v20) + v21;
  *(_DWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 16) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 24) = a3;
  v23 = *(_QWORD *)(v17 + v20) + v21;
  v26 = *(_QWORD *)(v23 + 56);
  v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
  v25 = v26;
  v27 = ((uint64_t)v24->__end_ - v26) >> 4;
  v92 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27)
      v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(v24, v18 - v27);
    v16 = *((_QWORD *)&v100 + 1);
    v14 = v100;
    v17 = *((_QWORD *)&v98 + 1);
  }
  v93 = 0;
  v94 = 0;
  v28 = 0;
  v29 = v14 + v16 - 1;
  v30 = 8 * (v29 / 0x2A);
  v31 = 96 * (v29 % 0x2A);
  *(_QWORD *)(*(_QWORD *)(v17 + v30) + v31 + 80) = v6;
  v32 = a3 - a2;
  v33 = *(_QWORD *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(_BYTE *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v35 = v16 + v100 - 1;
    v36 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v35 / 0x2A));
    v37 = v35 % 0x2A;
    v38 = v36 + 96 * (v35 % 0x2A);
    v40 = (_QWORD *)(v38 + 80);
    v39 = *(_QWORD *)(v38 + 80);
    if (v39)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v36 + 96 * v37);
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        v41 = *(_QWORD *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != a3)
          goto LABEL_21;
        v65 = v41 - *(_QWORD *)(v36 + 96 * v37 + 8);
        v66 = v93;
        if ((v94 & (v93 >= v65)) == 0)
          v66 = v65;
        if (v66 == v32)
        {
          v67 = (void **)*((_QWORD *)&v98 + 1);
          v68 = v99;
          if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          {
            *((_QWORD *)&v100 + 1) = 0;
            v82 = 0;
          }
          else
          {
            v69 = (_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * ((unint64_t)v100 / 0x2A));
            v70 = (_QWORD *)(*v69 + 96 * ((unint64_t)v100 % 0x2A));
            v71 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * ((*((_QWORD *)&v100 + 1) + (_QWORD)v100) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v100 + 1) + (_QWORD)v100) % 0x2AuLL);
            if (v70 != (_QWORD *)v71)
            {
              do
              {
                v72 = (void *)v70[7];
                if (v72)
                {
                  v70[8] = v72;
                  operator delete(v72);
                }
                v73 = (void *)v70[4];
                if (v73)
                {
                  v70[5] = v73;
                  operator delete(v73);
                }
                v70 += 12;
                if ((_QWORD *)((char *)v70 - *v69) == (_QWORD *)4032)
                {
                  v74 = (_QWORD *)v69[1];
                  ++v69;
                  v70 = v74;
                }
              }
              while (v70 != (_QWORD *)v71);
              v67 = (void **)*((_QWORD *)&v98 + 1);
              v68 = v99;
            }
            *((_QWORD *)&v100 + 1) = 0;
            v82 = v68 - (_QWORD)v67;
            if (v82 >= 0x11)
            {
              do
              {
                operator delete(*v67);
                v67 = (void **)(*((_QWORD *)&v98 + 1) + 8);
                *((_QWORD *)&v98 + 1) = v67;
                v82 = v99 - (_QWORD)v67;
              }
              while ((_QWORD)v99 - (_QWORD)v67 > 0x10uLL);
            }
          }
          if (v82 >> 3 == 1)
          {
            v83 = 21;
          }
          else
          {
            if (v82 >> 3 != 2)
            {
LABEL_76:
              v94 = 1;
              v93 = a3 - a2;
              goto LABEL_8;
            }
            v83 = 42;
          }
          *(_QWORD *)&v100 = v83;
          goto LABEL_76;
        }
        v93 = v66;
        v75 = *((_QWORD *)&v100 + 1) + v100 - 1;
        v76 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v75 / 0x2A));
        v77 = v75 % 0x2A;
        v78 = *(void **)(v76 + 96 * (v75 % 0x2A) + 56);
        if (v78)
        {
          *(_QWORD *)(v76 + 96 * v77 + 64) = v78;
          operator delete(v78);
        }
        v79 = *(void **)(v76 + 96 * v77 + 32);
        if (v79)
        {
          *(_QWORD *)(v76 + 96 * v77 + 40) = v79;
          operator delete(v79);
        }
        v80 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v81 = v100;
        --*((_QWORD *)&v100 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v80 = 0;
        if ((unint64_t)(v80 - (*((_QWORD *)&v81 + 1) + v81) + 1) >= 0x54)
        {
          operator delete(*(void **)(v99 - 8));
          *(_QWORD *)&v99 = v99 - 8;
        }
        v94 = 1;
LABEL_8:
        v16 = *((_QWORD *)&v100 + 1);
        if (*((_QWORD *)&v100 + 1))
          continue;
        if ((v94 & 1) != 0)
        {
          v84 = *v92;
          *(_QWORD *)v84 = a2;
          *(_QWORD *)(v84 + 8) = a2 + v93;
          v6 = 1;
          *(_BYTE *)(v84 + 16) = 1;
          goto LABEL_79;
        }
        v6 = 0;
        v85 = (void **)*((_QWORD *)&v98 + 1);
        v86 = (void **)v99;
        *((_QWORD *)&v100 + 1) = 0;
        v87 = v99 - *((_QWORD *)&v98 + 1);
        if ((_QWORD)v99 - *((_QWORD *)&v98 + 1) >= 0x11uLL)
          goto LABEL_80;
LABEL_81:
        v88 = v87 >> 3;
        if (v88 == 1)
        {
          v89 = 21;
LABEL_85:
          *(_QWORD *)&v100 = v89;
        }
        else if (v88 == 2)
        {
          v89 = 42;
          goto LABEL_85;
        }
        if (v85 != v86)
        {
          do
          {
            v90 = *v85++;
            operator delete(v90);
          }
          while (v85 != v86);
          if ((_QWORD)v99 != *((_QWORD *)&v98 + 1))
            *(_QWORD *)&v99 = v99 + ((*((_QWORD *)&v98 + 1) - v99 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((_QWORD)v98)
          operator delete((void *)v98);
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        v49 = v100;
        if (!(_QWORD)v100)
        {
          std::deque<std::__state<char>>::__add_front_capacity((uint64_t)&v98);
          v49 = v100;
        }
        v50 = (_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v49 / 0x2A));
        v51 = *v50 + 96 * (v49 % 0x2A);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v51 = 0;
        if (v51 == *v50)
          v51 = *(v50 - 1) + 4032;
        v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        v53 = v36 + 96 * v37;
        *(_QWORD *)(v51 - 56) = 0;
        *(_QWORD *)(v51 - 48) = 0;
        *(_QWORD *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(_QWORD *)(v51 - 48) = *(_QWORD *)(v53 + 48);
        *(_QWORD *)(v53 + 32) = 0;
        *(_QWORD *)(v53 + 40) = 0;
        *(_QWORD *)(v53 + 48) = 0;
        *(_QWORD *)(v51 - 40) = 0;
        *(_QWORD *)(v51 - 32) = 0;
        *(_QWORD *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(_QWORD *)(v51 - 24) = *(_QWORD *)(v53 + 72);
        *(_QWORD *)(v53 + 56) = 0;
        *(_QWORD *)(v53 + 64) = 0;
        *(_QWORD *)(v53 + 72) = 0;
        v54 = *v40;
        *(_QWORD *)(v51 - 11) = *(_QWORD *)(v38 + 85);
        *(_QWORD *)(v51 - 16) = v54;
        v55 = *((_QWORD *)&v100 + 1);
        *(_QWORD *)&v100 = v100 - 1;
        ++*((_QWORD *)&v100 + 1);
        v56 = v55 + v100;
        v57 = (v55 + (uint64_t)v100) / 0x2AuLL;
        v43 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * v57);
        v44 = v56 - 42 * v57;
        v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45)
          goto LABEL_23;
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        v42 = *((_QWORD *)&v100 + 1) + v100 - 1;
        v43 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v42 / 0x2A));
        v44 = v42 % 0x2A;
        v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(_QWORD *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(_QWORD *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        v47 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v48 = v100;
        --*((_QWORD *)&v100 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v47 = 0;
        if ((unint64_t)(v47 - (*((_QWORD *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v99 - 8));
          *(_QWORD *)&v99 = v99 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v97[64] = v58;
        *(_OWORD *)&v97[80] = v58;
        *(_OWORD *)&v97[32] = v58;
        *(_OWORD *)&v97[48] = v58;
        *(_OWORD *)v97 = v58;
        *(_OWORD *)&v97[16] = v58;
        std::__state<char>::__state((uint64_t)v97, (__int128 *)(v36 + 96 * v37));
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v97[80] + 24))(*(_QWORD *)&v97[80], 0, v97);
        v59 = *((_QWORD *)&v98 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v60 = 0;
        else
          v60 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v61 = *((_QWORD *)&v100 + 1) + v100;
        if (v60 == *((_QWORD *)&v100 + 1) + (_QWORD)v100)
        {
          std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v98);
          v59 = *((_QWORD *)&v98 + 1);
          v61 = *((_QWORD *)&v100 + 1) + v100;
        }
        v62 = *(_QWORD *)(v59 + 8 * (v61 / 0x2A)) + 96 * (v61 % 0x2A);
        v63 = *(_OWORD *)&v97[16];
        *(_OWORD *)v62 = *(_OWORD *)v97;
        *(_OWORD *)(v62 + 16) = v63;
        *(_QWORD *)(v62 + 40) = 0;
        *(_QWORD *)(v62 + 48) = 0;
        *(_QWORD *)(v62 + 32) = 0;
        *(_OWORD *)(v62 + 32) = *(_OWORD *)&v97[32];
        *(_QWORD *)(v62 + 48) = *(_QWORD *)&v97[48];
        memset(&v97[32], 0, 24);
        *(_QWORD *)(v62 + 56) = 0;
        *(_QWORD *)(v62 + 64) = 0;
        *(_QWORD *)(v62 + 72) = 0;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)&v97[56];
        *(_QWORD *)(v62 + 72) = *(_QWORD *)&v97[72];
        memset(&v97[56], 0, 24);
        v64 = *(_QWORD *)&v97[80];
        *(_QWORD *)(v62 + 85) = *(_QWORD *)&v97[85];
        *(_QWORD *)(v62 + 80) = v64;
        ++*((_QWORD *)&v100 + 1);
        if (*(_QWORD *)&v97[56])
        {
          *(_QWORD *)&v97[64] = *(_QWORD *)&v97[56];
          operator delete(*(void **)&v97[56]);
        }
        if (*(_QWORD *)&v97[32])
        {
          *(_QWORD *)&v97[40] = *(_QWORD *)&v97[32];
          operator delete(*(void **)&v97[32]);
        }
        goto LABEL_8;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_24B873BB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_24B873BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::__state<char>::~__state((uint64_t *)va);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v11 - 144));
  _Unwind_Resume(a1);
}

void sub_24B873C14(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_24B873C28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  const char *v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  char *v24;
  const char *v25;
  char *v26;
  void *v27;
  void *v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void *v50;
  char *v51;
  char *v52;
  char *v53;
  void *v54;
  void *v55;
  uint64_t *v57;
  const char *v58;
  const char *v59;
  char v60;
  _BYTE v62[96];
  std::vector<std::csub_match>::value_type __x;
  _BYTE v64[40];
  void *v65[2];
  _BYTE v66[40];
  char *v67;
  char *v68;
  unint64_t v69;

  v67 = 0;
  v68 = 0;
  v69 = 0;
  *(_DWORD *)&v66[36] = -1431655766;
  *(_QWORD *)v64 = 0xAAAAAAAA00000000;
  memset(&v64[8], 0, 32);
  *(_OWORD *)v65 = 0u;
  memset(v66, 0, 36);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_63;
  __x.second = a3;
  *(_QWORD *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)v62 = 0;
  memset(&v62[8], 0, 85);
  v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
  if (*(_QWORD *)&v62[56])
  {
    *(_QWORD *)&v62[64] = *(_QWORD *)&v62[56];
    operator delete(*(void **)&v62[56]);
  }
  if (*(_QWORD *)&v62[32])
  {
    *(_QWORD *)&v62[40] = *(_QWORD *)&v62[32];
    operator delete(*(void **)&v62[32]);
  }
  v12 = v68;
  *((_DWORD *)v68 - 24) = 0;
  *((_QWORD *)v12 - 11) = a2;
  *((_QWORD *)v12 - 10) = a2;
  *((_QWORD *)v12 - 9) = a3;
  v13 = *((_QWORD *)v12 - 8);
  v14 = *(unsigned int *)(a1 + 28);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v12 - 7) - v13) >> 3);
  if (v14 <= v15)
  {
    if (v14 < v15)
      *((_QWORD *)v12 - 7) = v13 + 24 * v14;
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v12 - 64), v14 - v15, &__x);
    v12 = v68;
  }
  v16 = *((_QWORD *)v12 - 5);
  v17 = *(unsigned int *)(a1 + 32);
  v18 = (*((_QWORD *)v12 - 4) - v16) >> 4;
  v57 = a4;
  if (v17 <= v18)
  {
    if (v17 < v18)
      *((_QWORD *)v12 - 4) = v16 + 16 * v17;
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v12 - 40), v17 - v18);
    v12 = v68;
  }
  v60 = 0;
  v19 = 0;
  v20 = (const char *)(a3 - a2);
  *((_QWORD *)v12 - 2) = v6;
  *((_DWORD *)v12 - 2) = a5;
  v59 = 0;
  *(v12 - 4) = a6;
  v58 = a3;
  do
  {
    v21 = (++v19 & 0xFFF) != 0 || (int)(v19 >> 12) < (int)v20;
    if (!v21)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v23 = v12 - 16;
    v22 = *((_QWORD *)v12 - 2);
    v24 = v12 - 96;
    if (v22)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v12 - 96);
    switch(*(_DWORD *)v24)
    {
      case 0xFFFFFC18:
        v25 = (const char *)*((_QWORD *)v12 - 10);
        if ((a5 & 0x20) != 0 && v25 == a2 || (a5 & 0x1000) != 0 && v25 != v58)
          goto LABEL_29;
        v33 = &v25[-*((_QWORD *)v12 - 11)];
        v34 = v59;
        if ((v60 & ((uint64_t)v59 >= (uint64_t)v33)) == 0)
        {
          v35 = *((_OWORD *)v12 - 5);
          *(_OWORD *)v64 = *(_OWORD *)v24;
          *(_OWORD *)&v64[16] = v35;
          if (v64 != v24)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char **)&v64[32], *((char **)v12 - 8), *((char **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((uint64_t)v66, *((const double **)v12 - 5), *((const double **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          }
          v36 = *(_QWORD *)v23;
          *(_QWORD *)&v66[29] = *(_QWORD *)(v12 - 11);
          *(_QWORD *)&v66[24] = v36;
          v34 = v33;
        }
        v37 = v68;
        if (v34 == v20)
        {
          v38 = v67;
          while (v37 != v38)
          {
            v39 = (void *)*((_QWORD *)v37 - 5);
            if (v39)
            {
              *((_QWORD *)v37 - 4) = v39;
              operator delete(v39);
            }
            v40 = (void *)*((_QWORD *)v37 - 8);
            if (v40)
            {
              *((_QWORD *)v37 - 7) = v40;
              operator delete(v40);
            }
            v37 -= 96;
          }
          v68 = v38;
          v60 = 1;
          v59 = v20;
        }
        else
        {
          v59 = v34;
          v41 = (void *)*((_QWORD *)v68 - 5);
          if (v41)
          {
            *((_QWORD *)v68 - 4) = v41;
            operator delete(v41);
          }
          v42 = (void *)*((_QWORD *)v37 - 8);
          if (v42)
          {
            *((_QWORD *)v37 - 7) = v42;
            operator delete(v42);
          }
          v68 = v37 - 96;
          v60 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        v26 = v68;
        v27 = (void *)*((_QWORD *)v68 - 5);
        if (v27)
        {
          *((_QWORD *)v68 - 4) = v27;
          operator delete(v27);
        }
        v28 = (void *)*((_QWORD *)v26 - 8);
        if (v28)
        {
          *((_QWORD *)v26 - 7) = v28;
          operator delete(v28);
        }
        v68 = v26 - 96;
        break;
      case 0xFFFFFC20:
        *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v62[64] = v29;
        *(_OWORD *)&v62[80] = v29;
        *(_OWORD *)&v62[32] = v29;
        *(_OWORD *)&v62[48] = v29;
        *(_OWORD *)v62 = v29;
        *(_OWORD *)&v62[16] = v29;
        std::__state<char>::__state((uint64_t)v62, (__int128 *)v12 - 6);
        (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v23 + 24))(*(_QWORD *)v23, 1, v12 - 96);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v62[80] + 24))(*(_QWORD *)&v62[80], 0, v62);
        v30 = v68;
        if ((unint64_t)v68 >= v69)
        {
          v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
          if (*(_QWORD *)&v62[56])
          {
            *(_QWORD *)&v62[64] = *(_QWORD *)&v62[56];
            operator delete(*(void **)&v62[56]);
          }
        }
        else
        {
          v31 = *(_OWORD *)&v62[16];
          *(_OWORD *)v68 = *(_OWORD *)v62;
          *((_OWORD *)v30 + 1) = v31;
          *((_QWORD *)v30 + 4) = 0;
          *((_QWORD *)v30 + 5) = 0;
          *((_QWORD *)v30 + 6) = 0;
          *((_QWORD *)v30 + 7) = 0;
          *((_OWORD *)v30 + 2) = *(_OWORD *)&v62[32];
          *((_QWORD *)v30 + 6) = *(_QWORD *)&v62[48];
          memset(&v62[32], 0, 24);
          *((_QWORD *)v30 + 8) = 0;
          *((_QWORD *)v30 + 9) = 0;
          *(_OWORD *)(v30 + 56) = *(_OWORD *)&v62[56];
          *((_QWORD *)v30 + 9) = *(_QWORD *)&v62[72];
          memset(&v62[56], 0, 24);
          v32 = *(_QWORD *)&v62[80];
          *(_QWORD *)(v30 + 85) = *(_QWORD *)&v62[85];
          *((_QWORD *)v30 + 10) = v32;
          v68 = v30 + 96;
        }
        if (*(_QWORD *)&v62[32])
        {
          *(_QWORD *)&v62[40] = *(_QWORD *)&v62[32];
          operator delete(*(void **)&v62[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    v12 = v68;
  }
  while (v67 != v68);
  if ((v60 & 1) == 0)
  {
LABEL_63:
    v49 = 0;
    v50 = *(void **)v66;
    if (!*(_QWORD *)v66)
      goto LABEL_65;
    goto LABEL_64;
  }
  v43 = *v57;
  *(_QWORD *)v43 = a2;
  *(_QWORD *)(v43 + 8) = &v59[(_QWORD)a2];
  *(_BYTE *)(v43 + 16) = 1;
  if (v65[0] != *(void **)&v64[32])
  {
    v44 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v65[0] - *(_QWORD *)&v64[32]) >> 3);
    v45 = (_BYTE *)(*(_QWORD *)&v64[32] + 16);
    v46 = 1;
    do
    {
      v47 = v43 + 24 * v46;
      *(_OWORD *)v47 = *((_OWORD *)v45 - 1);
      v48 = *v45;
      v45 += 24;
      *(_BYTE *)(v47 + 16) = v48;
      v21 = v44 > v46++;
    }
    while (v21);
  }
  v49 = 1;
  v50 = *(void **)v66;
  if (*(_QWORD *)v66)
  {
LABEL_64:
    *(_QWORD *)&v66[8] = v50;
    operator delete(v50);
  }
LABEL_65:
  if (*(_QWORD *)&v64[32])
  {
    v65[0] = *(void **)&v64[32];
    operator delete(*(void **)&v64[32]);
  }
  v51 = v67;
  if (v67)
  {
    v52 = v68;
    v53 = v67;
    if (v68 != v67)
    {
      do
      {
        v54 = (void *)*((_QWORD *)v52 - 5);
        if (v54)
        {
          *((_QWORD *)v52 - 4) = v54;
          operator delete(v54);
        }
        v55 = (void *)*((_QWORD *)v52 - 8);
        if (v55)
        {
          *((_QWORD *)v52 - 7) = v55;
          operator delete(v55);
        }
        v52 -= 96;
      }
      while (v52 != v51);
      v53 = v67;
    }
    v68 = v51;
    operator delete(v53);
  }
  return v49;
}

void sub_24B8741F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::__state<char>::~__state(&a35);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v35 - 120));
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::clear(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v11 = 0;
  }
  else
  {
    v4 = a1[4];
    v5 = &v2[v4 / 0x2A];
    v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        v8 = (void *)*((_QWORD *)v6 + 7);
        if (v8)
        {
          *((_QWORD *)v6 + 8) = v8;
          operator delete(v8);
        }
        v9 = (void *)*((_QWORD *)v6 + 4);
        if (v9)
        {
          *((_QWORD *)v6 + 5) = v9;
          operator delete(v9);
        }
        v6 += 96;
        if (v6 - (_BYTE *)*v5 == 4032)
        {
          v10 = (char *)v5[1];
          ++v5;
          v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
    a1[5] = 0;
    v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v12 = a1[2];
        v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        v11 = v12 - (_QWORD)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2)
      return;
    v13 = 42;
  }
  a1[4] = v13;
}

void **std::deque<std::__state<char>>::~deque[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  _BYTE *v5;
  _BYTE *v6;

  std::deque<std::__state<char>>::clear(a1);
  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    v6 = a1[1];
    v5 = a1[2];
    if (v5 != v6)
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  BOOL v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v32 = (v5 - v9) >> 2;
      if (v5 == v9)
        v32 = 1;
      if (!(v32 >> 61))
      {
        v33 = v32 >> 2;
        v34 = 8 * v32;
        v35 = (char *)operator new(8 * v32);
        v36 = &v35[8 * v33];
        v37 = &v35[v34];
        v39 = v5 - v7;
        v38 = v5 == v7;
        v5 = v36;
        if (!v38)
        {
          v5 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= 0x38)
          {
            v73 = &v35[8 * v33];
            v41 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v40 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v41 = &v36[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v41 = &v35[8 * v33];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v41 = v80;
            v41 += 8;
          }
          while (v41 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v89);
      return;
    }
    v89 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v89);
    v42 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v42 + 1);
    v8 = *v42;
    *(_QWORD *)(a1 + 8) = v42 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v43 = (v5 - v9) >> 2;
      if (v5 == v9)
        v43 = 1;
      if (!(v43 >> 61))
      {
        v44 = v43 >> 2;
        v45 = 8 * v43;
        v35 = (char *)operator new(8 * v43);
        v36 = &v35[8 * v44];
        v37 = &v35[v45];
        v46 = v5 - v7;
        v38 = v5 == v7;
        v5 = v36;
        if (!v38)
        {
          v5 = &v36[v46 & 0xFFFFFFFFFFFFFFF8];
          v47 = v46 - 8;
          if ((unint64_t)(v46 - 8) >= 0x38)
          {
            v81 = &v35[8 * v44];
            v48 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v47 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v48 = &v36[v83];
              v7 += v83;
              v84 = (__int128 *)(v42 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v48 = &v35[8 * v44];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v48 = v88;
            v48 += 8;
          }
          while (v48 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v35;
        *(_QWORD *)(a1 + 8) = v36;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v37;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFC0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v30 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v49 = 1;
      else
        v49 = v20 >> 2;
      if (v49 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v27 = (char *)operator new(8 * v49);
      v28 = &v27[8 * v49];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v27;
      *(_QWORD *)v27 = v30;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v31 = v21 + 2;
      if (v21 >= -1)
        v31 = v21 + 1;
      v27 -= 8 * (v31 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    goto LABEL_49;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_49:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v25)
            v57 = 1;
          else
            v57 = (v28 - v25) >> 2;
          if (v57 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v58 = (char *)operator new(8 * v57);
          v59 = v58;
          v60 = (v57 + 3) >> 2;
          v27 = &v58[8 * v60];
          v61 = v29 - v25;
          v38 = v29 == v25;
          v29 = v27;
          if (!v38)
          {
            v29 = &v27[v61 & 0xFFFFFFFFFFFFFFF8];
            v62 = v61 - 8;
            v63 = &v58[8 * v60];
            v64 = v25;
            if (v62 < 0x38)
              goto LABEL_89;
            v65 = 8 * v60;
            v63 = &v58[8 * v60];
            v64 = v25;
            if ((unint64_t)(v63 - v25) < 0x20)
              goto LABEL_89;
            v66 = (v62 >> 3) + 1;
            v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
            v63 = &v27[v67];
            v64 = &v25[v67];
            v68 = (__int128 *)(v25 + 16);
            v69 = &v58[v65 + 16];
            v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v71 = *v68;
              *((_OWORD *)v69 - 1) = *(v68 - 1);
              *(_OWORD *)v69 = v71;
              v68 += 2;
              v69 += 32;
              v70 -= 4;
            }
            while (v70);
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_89:
              do
              {
                v72 = *(_QWORD *)v64;
                v64 += 8;
                *(_QWORD *)v63 = v72;
                v63 += 8;
              }
              while (v63 != v29);
            }
          }
          v28 = &v58[8 * v57];
          operator delete(v25);
          v25 = v59;
        }
        else
        {
          v53 = (v28 - v29) >> 3;
          if (v53 >= -1)
            v54 = v53 + 1;
          else
            v54 = v53 + 2;
          v55 = v54 >> 1;
          v27 = &v25[8 * (v54 >> 1)];
          v56 = v25;
          if (v29 != v25)
          {
            memmove(v27, v25, v29 - v25);
            v56 = v29;
          }
          v29 = (char *)v56 + 8 * v55;
        }
      }
      v52 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v27 - 1) = v52;
      v27 -= 8;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
  }
LABEL_45:
  v51 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v51)
    operator delete(v51);
}

void sub_24B874958(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::deque<std::__state<char>>::__add_front_capacity(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  BOOL v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  void *v46;
  void *v47;

  v3 = *(uint64_t **)(a1 + 8);
  v2 = *(uint64_t **)(a1 + 16);
  v4 = v2 - v3;
  if (v2 == v3)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v5 - (*(_QWORD *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(_QWORD *)(a1 + 32) = v6 + 42;
    v47 = (void *)*(v2 - 1);
    *(_QWORD *)(a1 + 16) = v2 - 1;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
    return;
  }
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(uint64_t **)a1;
  v9 = (uint64_t)v7 - *(_QWORD *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v47);
      v43 = *(_QWORD *)(a1 + 16);
      v47 = *(void **)(v43 - 8);
      *(_QWORD *)(a1 + 16) = v43 - 8;
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
        goto LABEL_9;
    }
    else
    {
      v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
      {
LABEL_9:
        v10 = 21;
LABEL_45:
        *(_QWORD *)(a1 + 32) = v10;
        return;
      }
    }
    v10 = *(_QWORD *)(a1 + 32) + 42;
    goto LABEL_45;
  }
  if (v7 == v8)
    v11 = 1;
  else
    v11 = v9 >> 2;
  if (v11 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v12 = (char *)operator new(8 * v11);
  v13 = operator new(0xFC0uLL);
  v14 = v13;
  if (v11)
  {
    v15 = &v12[8 * v11];
    *(_QWORD *)v12 = v13;
    v16 = v12 + 8;
    if (v3 != v2)
    {
LABEL_16:
      v17 = v12;
      while (1)
      {
        if (v16 == v15)
        {
          if (v17 <= v12)
          {
            if (v16 == v12)
              v26 = 1;
            else
              v26 = (v16 - v12) >> 2;
            if (v26 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v27 = (char *)operator new(8 * v26);
            v28 = v27;
            v29 = v26 >> 2;
            v18 = &v27[8 * (v26 >> 2)];
            v31 = v16 - v17;
            v30 = v16 == v17;
            v16 = v18;
            if (!v30)
            {
              v16 = &v18[v31 & 0xFFFFFFFFFFFFFFF8];
              v32 = v31 - 8;
              if (v32 < 0x38 || (v33 = 8 * v29, (unint64_t)(&v27[8 * v29] - v17) < 0x20))
              {
                v34 = &v27[8 * (v26 >> 2)];
                v35 = v17;
                goto LABEL_35;
              }
              v37 = (v32 >> 3) + 1;
              v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
              v34 = &v18[v38];
              v35 = &v17[v38];
              v39 = (__int128 *)(v17 + 16);
              v40 = &v27[v33 + 16];
              v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v42 = *v39;
                *((_OWORD *)v40 - 1) = *(v39 - 1);
                *(_OWORD *)v40 = v42;
                v39 += 2;
                v40 += 32;
                v41 -= 4;
              }
              while (v41);
              if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_35:
                  v36 = *(_QWORD *)v35;
                  v35 += 8;
                  *(_QWORD *)v34 = v36;
                  v34 += 8;
                }
                while (v34 != v16);
              }
            }
            v15 = &v27[8 * v26];
            if (v12)
              operator delete(v12);
            v12 = v28;
            goto LABEL_18;
          }
          v20 = (v17 - v12) >> 3;
          if (v20 >= -1)
            v21 = v20 + 1;
          else
            v21 = v20 + 2;
          v22 = v21 >> 1;
          v23 = &v17[-8 * (v21 >> 1)];
          v24 = v16;
          if (v16 != v17)
          {
            memmove(v23, v17, v16 - v17);
            v24 = v17;
          }
          v25 = -v22;
          v15 = v16;
          v16 = &v23[v16 - v17];
          v18 = &v24[8 * v25];
        }
        else
        {
          v18 = v17;
        }
LABEL_18:
        v19 = *v3++;
        *(_QWORD *)v16 = v19;
        v16 += 8;
        v17 = v18;
        if (v3 == *(uint64_t **)(a1 + 16))
          goto LABEL_48;
      }
    }
  }
  else
  {
    v44 = (char *)operator new(8uLL);
    v15 = v44 + 8;
    operator delete(v12);
    v3 = *(uint64_t **)(a1 + 8);
    v45 = *(uint64_t **)(a1 + 16);
    v12 = v44;
    *(_QWORD *)v44 = v14;
    v16 = v44 + 8;
    if (v3 != v45)
      goto LABEL_16;
  }
  v18 = v12;
LABEL_48:
  v46 = *(void **)a1;
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 24) = v15;
  if (v16 - v18 == 8)
  {
    *(_QWORD *)(a1 + 32) = 21;
    if (v46)
LABEL_50:
      operator delete(v46);
  }
  else
  {
    *(_QWORD *)(a1 + 32) += 42;
    if (v46)
      goto LABEL_50;
  }
}

void sub_24B87500C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char **a1, char *a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v18 = a1[1];
    v17 = a1 + 1;
    v14 = v18;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_OWORD *)v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      v16 = v24 - result;
      v14 = result;
    }
    else
    {
      v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      v21 = v14;
      if (v20 != a3)
      {
        v22 = v14;
        do
        {
          v23 = *(_OWORD *)v20;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    v13 = 24 * v12;
    result = (char *)operator new(24 * v12);
    v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    v16 = v15 - v14;
    v17 = a1 + 1;
  }
  *v17 = &v14[v16];
  return result;
}

double *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8;
  double *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double *v13;
  double *v14;
  int64_t v15;
  _QWORD *v16;
  double *v17;
  int64_t v18;
  unint64_t v19;
  const double *v20;
  unint64_t v21;
  double *v22;
  const double *v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;
  __int128 v28;
  unint64_t v29;
  char *v30;
  const double *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  BOOL v37;
  char v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  const double *v42;
  double *v43;
  uint64_t v44;
  const double *v45;
  double *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  const double *v56;
  double *v57;
  uint64_t v58;
  const double *v59;
  double *v60;
  float64x2x2_t v61;
  float64x2x2_t v62;
  float64x2x2_t v63;
  float64x2x2_t v64;

  v8 = *(_QWORD *)(a1 + 16);
  result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_62;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37)
      v11 = v10;
    if (v11 >> 60)
LABEL_62:
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    v12 = 2 * v11;
    result = (double *)operator new(16 * v11);
    v13 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v14 = result;
    if (a2 != a3)
    {
      result = (double *)memcpy(result, a2, ((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0);
      v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0));
    }
    v15 = (char *)v14 - (char *)v13;
    v16 = (_QWORD *)(a1 + 8);
    goto LABEL_29;
  }
  v17 = *(double **)(a1 + 8);
  v16 = (_QWORD *)(a1 + 8);
  v13 = v17;
  v18 = (char *)v17 - (char *)result;
  v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      v30 = (char *)result;
    }
    else
    {
      v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             v48 = (char *)result + v47,
             v49 = (unint64_t)a2 + v47,
             v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (v51 = 1),
            v51 ? (v52 = 0) : (v52 = 1),
            v48 > (char *)a2 ? (v53 = (unint64_t)result >= v49) : (v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        v30 = (char *)result;
        v31 = a2;
      }
      else
      {
        v54 = (v29 >> 4) + 1;
        v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        v30 = (char *)&result[v55];
        v31 = &a2[v55];
        v56 = a2 + 4;
        v57 = result + 4;
        v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = v56 - 4;
          v62 = vld2q_f64(v59);
          v64 = vld2q_f64(v56);
          v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
      do
      {
        v32 = *(_QWORD *)v31;
        v33 = *((_QWORD *)v31 + 1);
        v31 += 2;
        *(_QWORD *)v30 = v32;
        *((_QWORD *)v30 + 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    v15 = v30 - (char *)result;
    v13 = result;
    goto LABEL_29;
  }
  v20 = &a2[2 * v19];
  if (v13 != result)
  {
    v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           v35 = (char *)result + v34 - 8,
           v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (v37 = 1),
          v37 ? (v38 = 0) : (v38 = 1),
          v35 > (char *)a2 ? (v39 = (unint64_t)result >= v36) : (v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      v22 = result;
      v23 = a2;
    }
    else
    {
      v40 = (v21 >> 4) + 1;
      v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      v22 = &result[v41];
      v23 = &a2[v41];
      v42 = a2 + 4;
      v43 = result + 4;
      v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v45 = v42 - 4;
        v61 = vld2q_f64(v45);
        v63 = vld2q_f64(v42);
        v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_18;
    }
    do
    {
      v24 = *(_QWORD *)v23;
      v25 = *((_QWORD *)v23 + 1);
      v23 += 2;
      *(_QWORD *)v22 = v24;
      *((_QWORD *)v22 + 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  v26 = v13;
  if (v20 != a3)
  {
    v27 = v13;
    do
    {
      v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  v15 = (char *)v26 - (char *)v13;
LABEL_29:
  *v16 = (char *)v13 + v15;
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::sub_match<std::__wrap_iter<const char *>> *value;
  std::vector<std::ssub_match>::pointer end;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::sub_match<std::__wrap_iter<const char *>> *v11;
  std::vector<std::ssub_match>::size_type v12;
  std::sub_match<std::__wrap_iter<const char *>> *v13;
  std::vector<std::ssub_match>::size_type v14;
  std::sub_match<std::__wrap_iter<const char *>> *v15;
  std::sub_match<std::__wrap_iter<const char *>> *v16;
  std::vector<std::ssub_match>::pointer begin;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v11 = &end[__n];
      v12 = 24 * __n;
      do
      {
        end->first.__i_ = 0;
        end->second.__i_ = 0;
        end->matched = 0;
        ++end;
        v12 -= 24;
      }
      while (v12);
      end = v11;
    }
    this->__end_ = end;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v7 = v6 + __n;
    if (v6 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v6];
    v14 = 24 * __n;
    v15 = &v13[__n];
    v16 = v13;
    do
    {
      v16->first.__i_ = 0;
      v16->second.__i_ = 0;
      v16->matched = 0;
      ++v16;
      v14 -= 24;
    }
    while (v14);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v18 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(_QWORD *)&v13[-1].matched = *(_QWORD *)&end[-1].matched;
        v13[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v18;
        --v13;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v15;
    this->__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v9];
    if (end)
      operator delete(end);
  }
}

uint64_t _GLOBAL__sub_I_ResetInfo_cpp()
{
  char *v0;
  unint64_t v1;
  std::string *v2;
  void **v3;
  void *v5[2];
  char v6;
  _DWORD v7[2];
  void *v8[2];
  char v9;
  int v10;
  void *v11;
  __int128 v12;
  int v13;
  void *v14;
  __int128 v15;
  int v16;
  void *v17;
  __int128 v18;
  int v19;
  void *v20;
  __int128 v21;
  int v22;
  void *v23;
  __int128 v24;
  int v25;
  void *v26;
  __int128 v27;
  int v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  void *v61[3];
  int v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  void *v67[2];
  char v68;
  int v69;
  void *__p;
  uint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &ResetInfo::sPatternMasks, &dword_24B855000);
  v6 = 15;
  strcpy((char *)v5, ".*\\[abmtool\\].*");
  v7[0] = 1;
  v9 = 14;
  strcpy((char *)v8, ".*\\[bbutil\\].*");
  v10 = 1;
  v11 = operator new(0x50uLL);
  v12 = xmmword_24B951890;
  strcpy((char *)v11, ".*AP forced coredump via SPMI - Please analyze reason from AP perspective.*");
  v13 = 1;
  v14 = operator new(0x19uLL);
  v15 = xmmword_24B9518A0;
  strcpy((char *)v14, ".*(after OTASP/OTAPA).*");
  v16 = 1;
  v17 = operator new(0x38uLL);
  v18 = xmmword_24B9518B0;
  strcpy((char *)v17, ".*Carrier bundle updated settings that require reset");
  v19 = 1;
  v20 = operator new(0x28uLL);
  v21 = xmmword_24B950490;
  strcpy((char *)v20, ".*Manually Triggering BB Core Dump");
  v22 = 1;
  v23 = operator new(0x28uLL);
  v24 = xmmword_24B9518C0;
  strcpy((char *)v23, ".*modem manager triggered reset.*");
  v25 = 1;
  v26 = operator new(0x38uLL);
  v27 = xmmword_24B9518D0;
  strcpy((char *)v26, ".*User requested to change Baseband field test config");
  v28 = 1;
  v29 = operator new(0x28uLL);
  v30 = 33;
  v31 = 0x8000000000000028;
  strcpy((char *)v29, ".*applebbproxy setup AT interface");
  v32 = 1;
  v33 = operator new(0x28uLL);
  v34 = 36;
  v35 = 0x8000000000000028;
  strcpy((char *)v33, ".*Resetting Baseband after restore.*");
  v36 = 1;
  v37 = operator new(0x30uLL);
  v38 = 42;
  v39 = 0x8000000000000030;
  strcpy((char *)v37, ".*Resetting baseband after pushing files.*");
  v40 = 1;
  v41 = operator new(0x40uLL);
  v42 = 59;
  v43 = 0x8000000000000040;
  strcpy((char *)v41, ".*Resetting Baseband after successful restore of carrier NV");
  v44 = 1;
  v45 = operator new(0x30uLL);
  v46 = 41;
  v47 = 0x8000000000000030;
  strcpy((char *)v45, ".*Resetting modem from WirelessAutomation");
  v48 = 1;
  v49 = operator new(0x20uLL);
  v50 = 25;
  v51 = 0x8000000000000020;
  strcpy((char *)v49, ".*Requesting Soft Reset.*");
  v52 = 1;
  v53 = operator new(0x30uLL);
  v54 = 42;
  v55 = 0x8000000000000030;
  strcpy((char *)v53, ".*AP-triggered((?!: locationd PDS).*|(.*))");
  v56 = 1;
  v59 = 0x8000000000000038;
  v57 = operator new(0x38uLL);
  v58 = 50;
  strcpy((char *)v57, ".*User ((requested state)|(Triggered Core))dump.*");
  v60 = 1;
  HIBYTE(v61[2]) = 19;
  strcpy((char *)v61, ".*SIM APNs change.*");
  v62 = 1;
  v63 = operator new(0x28uLL);
  v65 = 0x8000000000000028;
  v64 = 34;
  strcpy((char *)v63, ".*AttachAPN Push to force detach.*");
  v66 = 1;
  v68 = 14;
  strcpy((char *)v67, ".*CSIM reset.*");
  v69 = 1;
  __p = operator new(0x20uLL);
  v72 = 0x8000000000000020;
  v71 = 25;
  strcpy((char *)__p, ".*com\\.apple\\.symptomsd.*");
  v73 = 1;
  qword_2579B8A58 = 0;
  qword_2579B8A60 = 0;
  kDefaultPatternMasks = 0;
  v0 = (char *)operator new(0x280uLL);
  v1 = 0;
  kDefaultPatternMasks = (uint64_t)v0;
  qword_2579B8A58 = (uint64_t)v0;
  qword_2579B8A60 = (uint64_t)(v0 + 640);
  do
  {
    v2 = (std::string *)&v0[v1 * 4];
    v3 = &v5[v1 / 2];
    if (*(&v6 + v1 * 4) < 0)
    {
      std::string::__init_copy_ctor_external(v2, (const std::string::value_type *)*v3, (std::string::size_type)v3[1]);
    }
    else
    {
      *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
      v2->__r_.__value_.__r.__words[2] = (std::string::size_type)v3[2];
    }
    *(_DWORD *)&v0[v1 * 4 + 24] = v7[v1];
    v1 += 8;
  }
  while (v1 != 160);
  qword_2579B8A58 = (uint64_t)(v0 + 640);
  if (SHIBYTE(v72) < 0)
  {
    operator delete(__p);
    if ((v68 & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v65) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_29;
    }
  }
  else if ((v68 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v67[0]);
  if ((SHIBYTE(v65) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v63);
  if ((SHIBYTE(v61[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v59) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v61[0]);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v55) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v57);
  if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v51) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v53);
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v47) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v49);
  if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v43) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v45);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v39) & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v41);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v35) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v37);
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v33);
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v27) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v29);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v26);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v23);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v20);
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v17);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_23:
    if ((SHIBYTE(v12) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v14);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
LABEL_24:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_25;
LABEL_45:
    operator delete(v8[0]);
    if ((v6 & 0x80000000) == 0)
      return __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &kDefaultPatternMasks, &dword_24B855000);
LABEL_46:
    operator delete(v5[0]);
    return __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &kDefaultPatternMasks, &dword_24B855000);
  }
LABEL_44:
  operator delete(v11);
  if (v9 < 0)
    goto LABEL_45;
LABEL_25:
  if (v6 < 0)
    goto LABEL_46;
  return __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &kDefaultPatternMasks, &dword_24B855000);
}

void sub_24B875E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a68;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;

  std::__exception_guard_exceptions<std::vector<ResetInfo::RegexPatternAndReasonMask>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a10);
  if (SLOBYTE(STACK[0x28F]) < 0)
  {
    operator delete((void *)STACK[0x278]);
    if ((SLOBYTE(STACK[0x26F]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((SLOBYTE(STACK[0x26F]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x258]);
  if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  operator delete((void *)STACK[0x238]);
  if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x218]);
  if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
  {
LABEL_6:
    if ((a84 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(a85);
  if ((a84 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a82 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  operator delete(a83);
  if ((a82 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a80 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  operator delete(a81);
  if ((a80 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a78 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(a79);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a76 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(a77);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a74 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  operator delete(a75);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a72 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a66 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(a68);
  if ((a66 & 0x80000000) == 0)
  {
LABEL_14:
    if ((a59 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(a61);
  if ((a59 & 0x80000000) == 0)
  {
LABEL_15:
    if ((a52 & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(a54);
  if ((a52 & 0x80000000) == 0)
  {
LABEL_16:
    if ((a45 & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  operator delete(a47);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_17:
    if ((a38 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_18:
    if ((a31 & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  operator delete(a33);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_19:
    if ((a24 & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  operator delete(a26);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_20:
    if ((a17 & 0x80000000) == 0)
LABEL_42:
      _Unwind_Resume(a1);
LABEL_41:
    operator delete(a12);
    _Unwind_Resume(a1);
  }
LABEL_40:
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
    goto LABEL_42;
  goto LABEL_41;
}

void LogDumpDB::LogDumpDB(LogDumpDB *this)
{
  ctu::OsLogLogger::OsLogLogger((LogDumpDB *)((char *)this + 8), "com.apple.telephony.abm", "Log Dump History");
  *(_QWORD *)this = &off_251CB9828;
  *((_DWORD *)this + 4) = 10;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  LogDumpDB::init(this);
}

{
  ctu::OsLogLogger::OsLogLogger((LogDumpDB *)((char *)this + 8), "com.apple.telephony.abm", "Log Dump History");
  *(_QWORD *)this = &off_251CB9828;
  *((_DWORD *)this + 4) = 10;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  LogDumpDB::init(this);
}

void sub_24B876144(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  std::vector<ResetInfo>::~vector[abi:ne180100](v2);
  MEMORY[0x24BD2937C](v1);
  _Unwind_Resume(a1);
}

void LogDumpDB::init(LogDumpDB *this)
{
  uint64_t v2;
  _QWORD *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  const void *v16;
  CFIndex v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const void *ValueAtIndex;
  const void *v23;
  CFTypeID v24;
  __int128 v25;
  std::string *v26;
  std::string::value_type *v27;
  char *v28;
  uint64_t Count;
  std::string v30;
  std::string v31;
  _BYTE __p[32];
  __int128 v33;
  void *v34[2];
  __int128 v35;
  void *v36[2];
  __int128 v37;
  std::string v38;
  void *v39[3];
  _BYTE v40[24];
  __int128 v41[3];
  _QWORD v42[2];
  const void *v43;
  const void *v44;
  const void *v45;
  _QWORD v46[3];

  v45 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v2 = off_2579B84D8;
  if (!off_2579B84D8)
  {
    v3 = operator new(0x30uLL);
    MEMORY[0x24BD294B4](v3, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x24BDBD590]);
    v3[3] = 0;
    v3[4] = 0;
    *((_DWORD *)v3 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(__p, (uint64_t)v3);
    v4 = *(_OWORD *)__p;
    *(_QWORD *)__p = 0;
    *(_QWORD *)&__p[8] = 0;
    v5 = (std::__shared_weak_count *)*(&off_2579B84D8 + 1);
    off_2579B84D8 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v9 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v2 = off_2579B84D8;
  }
  v11 = (std::__shared_weak_count *)*(&off_2579B84D8 + 1);
  if (*(&off_2579B84D8 + 1))
  {
    v12 = (unint64_t *)(*(&off_2579B84D8 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  __p[23] = 16;
  strcpy(__p, "Log Dump History");
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 40));
  Preferences::getPreference<__CFArray const*>((uint64_t (***)(_QWORD, uint64_t))v2, __p, &v45);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 40));
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (!v11)
    goto LABEL_22;
  v14 = (unint64_t *)&v11->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v16 = v45;
    v44 = v45;
    if (!v45)
      goto LABEL_78;
  }
  else
  {
LABEL_22:
    v16 = v45;
    v44 = v45;
    if (!v45)
      goto LABEL_78;
  }
  CFRetain(v16);
  if (ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get)
  {
    Count = CFArrayGetCount((CFArrayRef)v16);
    if (Count)
    {
      v17 = 0;
      v28 = (char *)*MEMORY[0x24BE05090];
      v18 = (const char *)*MEMORY[0x24BE053F0];
      v19 = (const char *)*MEMORY[0x24BE051A0];
      v20 = (const char *)*MEMORY[0x24BE05398];
      v21 = (const char *)*MEMORY[0x24BE052D8];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v16, v17);
        v23 = ValueAtIndex;
        if (ValueAtIndex && (v24 = CFGetTypeID(ValueAtIndex), v24 == CFDictionaryGetTypeID()))
        {
          v43 = v23;
          CFRetain(v23);
        }
        else
        {
          v23 = 0;
          v43 = 0;
        }
        v42[0] = 0xAAAAAAAAAAAAAAAALL;
        v42[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v42, (const __CFDictionary *)v23);
        memset((char *)&v41[1] + 8, 170, 24);
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v41, v28);
        ctu::cf::map_adapter::getString();
        MEMORY[0x24BD29478](v41);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        memset(v41, 170, 24);
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v40, v18);
        ctu::cf::map_adapter::getString();
        MEMORY[0x24BD29478](v40);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        memset(v40, 170, sizeof(v40));
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v39, v19);
        ctu::cf::map_adapter::getString();
        MEMORY[0x24BD29478](v39);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        memset(v39, 170, sizeof(v39));
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v38, v20);
        ctu::cf::map_adapter::getString();
        MEMORY[0x24BD29478](&v38);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        memset(&v38, 170, sizeof(v38));
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v46, v21);
        ctu::cf::map_adapter::getString();
        MEMORY[0x24BD29478](v46);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)v36 = v25;
        v37 = v25;
        *(_OWORD *)v34 = v25;
        v35 = v25;
        *(_OWORD *)&__p[16] = v25;
        v33 = v25;
        *(_OWORD *)__p = v25;
        if (SHIBYTE(v41[2]) < 0)
          std::string::__init_copy_ctor_external(&v31, *((const std::string::value_type **)&v41[1] + 1), *(std::string::size_type *)&v41[2]);
        else
          v31 = *(std::string *)((char *)&v41[1] + 8);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v30, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
        else
          v30 = v38;
        ResetInfo::ResetInfo((std::string *)__p, (__int128 *)v40, (__int128 *)v39, v41, (uint64_t)&v31, 7, (__int128 *)&v30);
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v30.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_52:
            v26 = (std::string *)*((_QWORD *)this + 4);
            if ((unint64_t)v26 < *((_QWORD *)this + 5))
              goto LABEL_53;
            goto LABEL_56;
          }
        }
        else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_52;
        }
        operator delete(v31.__r_.__value_.__l.__data_);
        v26 = (std::string *)*((_QWORD *)this + 4);
        if ((unint64_t)v26 < *((_QWORD *)this + 5))
        {
LABEL_53:
          ResetInfo::ResetInfo(v26, (const ResetInfo *)__p);
          v27 = &v26[4].__r_.__value_.__s.__data_[16];
          *((_QWORD *)this + 4) = (char *)v26 + 112;
          goto LABEL_57;
        }
LABEL_56:
        v27 = std::vector<ResetInfo>::__push_back_slow_path<ResetInfo const&>((_QWORD *)this + 3, (const ResetInfo *)__p);
LABEL_57:
        *((_QWORD *)this + 4) = v27;
        if (SHIBYTE(v37) < 0)
        {
          operator delete(v36[1]);
          if ((SBYTE7(v35) & 0x80000000) == 0)
          {
LABEL_59:
            if ((SHIBYTE(v33) & 0x80000000) == 0)
              goto LABEL_60;
            goto LABEL_70;
          }
        }
        else if ((SBYTE7(v35) & 0x80000000) == 0)
        {
          goto LABEL_59;
        }
        operator delete(v34[0]);
        if ((SHIBYTE(v33) & 0x80000000) == 0)
        {
LABEL_60:
          if ((__p[23] & 0x80000000) == 0)
            goto LABEL_61;
          goto LABEL_71;
        }
LABEL_70:
        operator delete(*(void **)&__p[24]);
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_61:
          if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_62;
          goto LABEL_72;
        }
LABEL_71:
        operator delete(*(void **)__p);
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_62:
          if ((SHIBYTE(v39[2]) & 0x80000000) == 0)
            goto LABEL_63;
          goto LABEL_73;
        }
LABEL_72:
        operator delete(v38.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v39[2]) & 0x80000000) == 0)
        {
LABEL_63:
          if ((v40[23] & 0x80000000) == 0)
            goto LABEL_64;
          goto LABEL_74;
        }
LABEL_73:
        operator delete(v39[0]);
        if ((v40[23] & 0x80000000) == 0)
        {
LABEL_64:
          if ((SBYTE7(v41[1]) & 0x80000000) == 0)
            goto LABEL_65;
          goto LABEL_75;
        }
LABEL_74:
        operator delete(*(void **)v40);
        if ((SBYTE7(v41[1]) & 0x80000000) == 0)
        {
LABEL_65:
          if ((SHIBYTE(v41[2]) & 0x80000000) == 0)
            goto LABEL_66;
          goto LABEL_76;
        }
LABEL_75:
        operator delete(*(void **)&v41[0]);
        if ((SHIBYTE(v41[2]) & 0x80000000) == 0)
        {
LABEL_66:
          MEMORY[0x24BD294A8](v42);
          if (!v23)
            goto LABEL_29;
LABEL_77:
          CFRelease(v23);
          goto LABEL_29;
        }
LABEL_76:
        operator delete(*((void **)&v41[1] + 1));
        MEMORY[0x24BD294A8](v42);
        if (v23)
          goto LABEL_77;
LABEL_29:
        ++v17;
      }
      while (Count != v17);
    }
  }
LABEL_78:
  if (v16)
    CFRelease(v16);
}

void sub_24B8767A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_24B8767F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a50 & 0x80000000) == 0)
    {
LABEL_5:
      if (a56 < 0)
        operator delete(a51);
      if (*(char *)(v56 - 193) < 0)
        operator delete(*(void **)(v56 - 216));
      if (*(char *)(v56 - 169) < 0)
        operator delete(*(void **)(v56 - 192));
      if (*(char *)(v56 - 145) < 0)
        operator delete(*(void **)(v56 - 168));
      MEMORY[0x24BD294A8](v56 - 144);
      ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v56 - 128));
      ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v56 - 120));
      _Unwind_Resume(a1);
    }
  }
  else if ((a50 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a45);
  goto LABEL_5;
}

void **std::vector<ResetInfo>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_15:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if ((*((char *)v3 - 41) & 0x80000000) == 0)
        {
LABEL_7:
          if ((*((char *)v3 - 65) & 0x80000000) == 0)
            goto LABEL_8;
          goto LABEL_12;
        }
      }
      else if ((*((char *)v3 - 41) & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(*(v3 - 8));
      if ((*((char *)v3 - 65) & 0x80000000) == 0)
      {
LABEL_8:
        if (*((char *)v3 - 89) < 0)
          goto LABEL_13;
        goto LABEL_4;
      }
LABEL_12:
      operator delete(*(v3 - 11));
      if (*((char *)v3 - 89) < 0)
LABEL_13:
        operator delete(*(v3 - 14));
LABEL_4:
      v3 -= 14;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_15;
      }
    }
  }
  return a1;
}

void sub_24B876AFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v6;
  void **v7;
  void *v8;
  void **v9;

  v4 = v3;
  v9 = v4;
  v6 = (void **)*v4;
  if (*v4)
  {
    v7 = *(void ***)(v2 + 32);
    v8 = *v4;
    if (v7 != v6)
    {
      do
        ResetInfo::~ResetInfo(v7 - 14);
      while (v7 != v6);
      v8 = *v9;
    }
    *(_QWORD *)(v2 + 32) = v6;
    operator delete(v8);
  }
  MEMORY[0x24BD2937C](v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

const void **ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

BOOL LogDumpDB::isDuplicated(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  size_t size;
  std::string *v8;
  BOOL v9;
  NSObject *v11;
  const ResetInfo *v12;
  const ResetInfo *v13;
  char *i;
  const ResetInfo *v15;
  NSObject *v16;
  std::string::value_type *v17;
  char *v18;
  std::string::value_type *v19;
  char *v20;
  char *v21;
  _QWORD v22[2];
  std::string v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;
  std::string v31;
  char v32;

  v32 = 0;
  if (*(char *)(a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  else
    v31 = *(std::string *)(a2 + 24);
  v6 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  else
    size = v31.__r_.__value_.__l.__size_;
  if (size != strlen((const char *)*MEMORY[0x24BE05798]))
  {
    v9 = 0;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_16;
LABEL_14:
    if (!v9)
      goto LABEL_17;
    return 0;
  }
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v31;
  else
    v8 = (std::string *)v31.__r_.__value_.__r.__words[0];
  v9 = memcmp(v8, (const void *)*MEMORY[0x24BE05798], size) == 0;
  if ((v6 & 0x80000000) == 0)
    goto LABEL_14;
LABEL_16:
  operator delete(v31.__r_.__value_.__l.__data_);
  if (v9)
    return 0;
LABEL_17:
  v11 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v31.__r_.__value_.__l.__data_) = 0;
    _os_log_debug_impl(&dword_24B855000, v11, OS_LOG_TYPE_DEBUG, "#D Checking if log dump is duplicated", (uint8_t *)&v31, 2u);
  }
  v12 = *(const ResetInfo **)(a1 + 24);
  v13 = *(const ResetInfo **)(a1 + 32);
  v22[0] = &v32;
  v22[1] = a1;
  ResetInfo::ResetInfo(&v23, (const ResetInfo *)a2);
  v30 = a3;
  if (v12 != v13)
  {
    while (!LogDumpDB::isDuplicated(ResetInfo const&,std::chrono::duration<long long,std::ratio<1l,1l>>)::$_0::operator()((uint64_t)v22, v12))
    {
      v12 = (const ResetInfo *)((char *)v12 + 112);
      if (v12 == v13)
      {
        v12 = v13;
        goto LABEL_29;
      }
    }
    if (v12 != v13)
    {
      for (i = (char *)v12 + 112; i != (char *)v13; i += 112)
      {
        if (!LogDumpDB::isDuplicated(ResetInfo const&,std::chrono::duration<long long,std::ratio<1l,1l>>)::$_0::operator()((uint64_t)v22, (const ResetInfo *)i))
        {
          ResetInfo::operator=((char *)v12, i);
          v12 = (const ResetInfo *)((char *)v12 + 112);
        }
      }
    }
  }
LABEL_29:
  if (v29 < 0)
  {
    operator delete(__p);
    if ((v27 & 0x80000000) == 0)
    {
LABEL_31:
      if ((v25 & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_38;
    }
  }
  else if ((v27 & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v26);
  if ((v25 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v24);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_39:
    operator delete(v23.__r_.__value_.__l.__data_);
    v15 = *(const ResetInfo **)(a1 + 32);
    if (v12 == v15)
      goto LABEL_34;
    while (1)
    {
LABEL_42:
      if (v15 == v12)
      {
        *(_QWORD *)(a1 + 32) = v12;
        if (!v32)
          goto LABEL_53;
        goto LABEL_54;
      }
      if (*((char *)v15 - 1) < 0)
      {
        operator delete(*((void **)v15 - 3));
        if ((*((char *)v15 - 41) & 0x80000000) == 0)
        {
LABEL_45:
          if (*((char *)v15 - 65) < 0)
            goto LABEL_50;
          goto LABEL_46;
        }
      }
      else if ((*((char *)v15 - 41) & 0x80000000) == 0)
      {
        goto LABEL_45;
      }
      operator delete(*((void **)v15 - 8));
      if (*((char *)v15 - 65) < 0)
      {
LABEL_50:
        operator delete(*((void **)v15 - 11));
        if ((*((char *)v15 - 89) & 0x80000000) == 0)
          goto LABEL_41;
        goto LABEL_51;
      }
LABEL_46:
      if ((*((char *)v15 - 89) & 0x80000000) == 0)
        goto LABEL_41;
LABEL_51:
      operator delete(*((void **)v15 - 14));
LABEL_41:
      v15 = (const ResetInfo *)((char *)v15 - 112);
    }
  }
LABEL_33:
  v15 = *(const ResetInfo **)(a1 + 32);
  if (v12 != v15)
    goto LABEL_42;
LABEL_34:
  if (v32)
    goto LABEL_54;
LABEL_53:
  v16 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v31.__r_.__value_.__l.__data_) = 0;
    _os_log_debug_impl(&dword_24B855000, v16, OS_LOG_TYPE_DEBUG, "#D Not found duplicated log", (uint8_t *)&v31, 2u);
    v12 = *(const ResetInfo **)(a1 + 32);
    if ((unint64_t)v12 < *(_QWORD *)(a1 + 40))
      goto LABEL_55;
LABEL_57:
    v17 = std::vector<ResetInfo>::__push_back_slow_path<ResetInfo const&>((_QWORD *)(a1 + 24), (const ResetInfo *)a2);
    goto LABEL_58;
  }
LABEL_54:
  if ((unint64_t)v12 >= *(_QWORD *)(a1 + 40))
    goto LABEL_57;
LABEL_55:
  ResetInfo::ResetInfo((std::string *)v12, (const ResetInfo *)a2);
  v17 = (char *)v12 + 112;
  *(_QWORD *)(a1 + 32) = (char *)v12 + 112;
LABEL_58:
  *(_QWORD *)(a1 + 32) = v17;
  v18 = *(char **)(a1 + 24);
  if (0x6DB6DB6DB6DB6DB7 * ((v17 - v18) >> 4) <= (unint64_t)*(unsigned int *)(a1 + 16))
    goto LABEL_76;
  if (v18 + 112 == v17)
  {
    v19 = *(std::string::value_type **)(a1 + 24);
  }
  else
  {
    v19 = *(std::string::value_type **)(a1 + 24);
    do
    {
      v20 = v18 + 112;
      v19 += 112;
      v21 = ResetInfo::operator=(v18, v18 + 112) + 224;
      v18 = v20;
    }
    while (v21 != v17);
    v17 = *(std::string::value_type **)(a1 + 32);
  }
  while (v17 != v19)
  {
    if (*(v17 - 1) < 0)
    {
      operator delete(*((void **)v17 - 3));
      if ((*(v17 - 41) & 0x80000000) == 0)
      {
LABEL_68:
        if (*(v17 - 65) < 0)
          goto LABEL_73;
        goto LABEL_69;
      }
    }
    else if ((*(v17 - 41) & 0x80000000) == 0)
    {
      goto LABEL_68;
    }
    operator delete(*((void **)v17 - 8));
    if (*(v17 - 65) < 0)
    {
LABEL_73:
      operator delete(*((void **)v17 - 11));
      if ((*(v17 - 89) & 0x80000000) == 0)
        goto LABEL_64;
      goto LABEL_74;
    }
LABEL_69:
    if ((*(v17 - 89) & 0x80000000) == 0)
      goto LABEL_64;
LABEL_74:
    operator delete(*((void **)v17 - 14));
LABEL_64:
    v17 -= 112;
  }
  *(_QWORD *)(a1 + 32) = v19;
LABEL_76:
  LogDumpDB::commitToDisk((LogDumpDB *)a1);
  return v32 != 0;
}

void sub_24B87703C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_24B877044(_Unwind_Exception *a1)
{
  void **v1;

  ResetInfo::~ResetInfo(v1);
  _Unwind_Resume(a1);
}

void sub_24B877058(_Unwind_Exception *a1)
{
  void **v1;

  ResetInfo::~ResetInfo(v1);
  _Unwind_Resume(a1);
}

void LogDumpDB::commitToDisk(LogDumpDB *this)
{
  const __CFAllocator *v2;
  CFMutableArrayRef Mutable;
  __CFArray *v4;
  __int128 *v5;
  __int128 *v6;
  const __CFString **v7;
  const __CFString **v8;
  __CFDictionary *v9;
  uint64_t v10;
  _DWORD *v11;
  const __CFAllocator *v12;
  const __CFAllocator *v13;
  __int128 v14;
  const __CFAllocator *v15;
  __int128 v16;
  const __CFAllocator *v17;
  __int128 v18;
  const __CFAllocator *v19;
  __int128 v20;
  NSObject *v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *size;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string *v34;
  const __CFString *v35;
  const __CFString *v36;
  unint64_t *v37;
  unint64_t v38;
  CFMutableArrayRef v39;
  LogDumpDB *v40;
  const __CFString **v41;
  const __CFString **v42;
  const __CFString **v43;
  CFMutableArrayRef cf;
  std::string __p;
  const __CFString *v46;
  std::string v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  cf = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v4 = Mutable;
  if (Mutable)
    cf = Mutable;
  v6 = (__int128 *)*((_QWORD *)this + 3);
  v5 = (__int128 *)*((_QWORD *)this + 4);
  v40 = this;
  if (v6 != v5)
  {
    v43 = (const __CFString **)*MEMORY[0x24BE05090];
    v42 = (const __CFString **)*MEMORY[0x24BE051A0];
    v41 = (const __CFString **)*MEMORY[0x24BE05398];
    v7 = (const __CFString **)*MEMORY[0x24BE053F0];
    v8 = (const __CFString **)*MEMORY[0x24BE052D8];
    do
    {
      v9 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      v10 = *((_QWORD *)v6 + 9);
      v11 = operator new(0x38uLL);
      v11[8] = 0;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = &v47.__r_.__value_.__l.__size_;
      v47.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      v47.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
      *((_BYTE *)v11 + 24) = 1;
      v47.__r_.__value_.__r.__words[2] = 1;
      *((_QWORD *)v11 + 5) = v10;
      *((_QWORD *)v11 + 6) = 0xAAAAAAAA00000000;
      Timestamp::asString((uint64_t)&v47, 0, 9, &__p);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v47, (_QWORD *)v47.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v47, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v47 = __p;
      ctu::cf::insert<char const*,std::string>(v9, v43, (uint64_t)&v47, (uint64_t)v2, v12);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v47.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_11:
          if ((*((char *)v6 + 23) & 0x80000000) == 0)
            goto LABEL_12;
          goto LABEL_15;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_11;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 23) & 0x80000000) == 0)
      {
LABEL_12:
        v14 = *v6;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
        goto LABEL_16;
      }
LABEL_15:
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
LABEL_16:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v47, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v47 = __p;
      ctu::cf::insert<char const*,std::string>(v9, v42, (uint64_t)&v47, (uint64_t)v2, v13);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v47.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_21:
          if ((*((char *)v6 + 47) & 0x80000000) == 0)
            goto LABEL_22;
          goto LABEL_25;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_21;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 47) & 0x80000000) == 0)
      {
LABEL_22:
        v16 = *(__int128 *)((char *)v6 + 24);
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 5);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
        goto LABEL_26;
      }
LABEL_25:
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 3), *((_QWORD *)v6 + 4));
LABEL_26:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v47, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v47 = __p;
      ctu::cf::insert<char const*,std::string>(v9, v41, (uint64_t)&v47, (uint64_t)v2, v15);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v47.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_31:
          if ((*((char *)v6 + 71) & 0x80000000) == 0)
            goto LABEL_32;
          goto LABEL_35;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_31;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 71) & 0x80000000) == 0)
      {
LABEL_32:
        v18 = v6[3];
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 8);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
        goto LABEL_36;
      }
LABEL_35:
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 6), *((_QWORD *)v6 + 7));
LABEL_36:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v47, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v47 = __p;
      ctu::cf::insert<char const*,std::string>(v9, v7, (uint64_t)&v47, (uint64_t)v2, v17);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v47.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_41:
          if ((*((char *)v6 + 111) & 0x80000000) == 0)
            goto LABEL_42;
          goto LABEL_45;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_41;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 111) & 0x80000000) == 0)
      {
LABEL_42:
        v20 = *(__int128 *)((char *)v6 + 88);
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 13);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
        goto LABEL_46;
      }
LABEL_45:
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 11), *((_QWORD *)v6 + 12));
LABEL_46:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v47, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v47 = __p;
      ctu::cf::insert<char const*,std::string>(v9, v8, (uint64_t)&v47, (uint64_t)v2, v19);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v47.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_54:
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_54;
      }
      CFArrayAppendValue(v4, v9);
      if (v9)
        CFRelease(v9);
      v6 += 7;
    }
    while (v6 != v5);
  }
  v21 = *((_QWORD *)v40 + 1);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v47.__r_.__value_.__l.__data_) = 138412290;
    *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_debug_impl(&dword_24B855000, v21, OS_LOG_TYPE_DEBUG, "#D Current tracking list: %@", (uint8_t *)&v47, 0xCu);
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v22 = off_2579B84D8;
  if (!off_2579B84D8)
  {
    v23 = operator new(0x30uLL);
    MEMORY[0x24BD294B4](v23, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x24BDBD590]);
    v23[3] = 0;
    v23[4] = 0;
    *((_DWORD *)v23 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&v47, (uint64_t)v23);
    v24 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = 0uLL;
    v25 = (std::__shared_weak_count *)*(&off_2579B84D8 + 1);
    off_2579B84D8 = v24;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    size = (std::__shared_weak_count *)v47.__r_.__value_.__l.__size_;
    if (v47.__r_.__value_.__l.__size_)
    {
      v29 = (unint64_t *)(v47.__r_.__value_.__l.__size_ + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v22 = off_2579B84D8;
  }
  v31 = (std::__shared_weak_count *)*(&off_2579B84D8 + 1);
  if (*(&off_2579B84D8 + 1))
  {
    v32 = (unint64_t *)(*(&off_2579B84D8 + 1) + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  *((_BYTE *)&v47.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&v47, "Log Dump History");
  os_unfair_lock_lock((os_unfair_lock_t)(v22 + 40));
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &v47;
  else
    v34 = (std::string *)v47.__r_.__value_.__r.__words[0];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v46, (const char *)v34);
  v35 = v46;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)cf;
  if (cf)
  {
    CFRetain(cf);
    v36 = (const __CFString *)*MEMORY[0x24BDBD588];
    CFPreferencesSetValue(v35, cf, *(CFStringRef *)(v22 + 8), *(CFStringRef *)(v22 + 16), (CFStringRef)*MEMORY[0x24BDBD588]);
    CFPreferencesSynchronize(*(CFStringRef *)(v22 + 8), *(CFStringRef *)(v22 + 16), v36);
    CFRelease(cf);
  }
  MEMORY[0x24BD29478](&v46);
  os_unfair_lock_unlock((os_unfair_lock_t)(v22 + 40));
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (!v31)
    goto LABEL_83;
  v37 = (unint64_t *)&v31->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    v39 = cf;
    if (!cf)
      return;
  }
  else
  {
LABEL_83:
    v39 = cf;
    if (!cf)
      return;
  }
  CFRelease(v39);
}

void sub_24B877718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  operator delete(v27);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(&a14);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const char *LogDumpDB::getName(LogDumpDB *this)
{
  return "Log Dump History";
}

BOOL LogDumpDB::checkIfDuplicatedSignature(LogDumpDB *this, const ResetInfo *a2, const ResetInfo *a3)
{
  int v6;
  void *v7;
  char v8;
  std::string::size_type size;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  size_t v13;
  BOOL v14;
  BOOL v15;
  NSObject *v16;
  _BOOL8 result;
  const char *v18;
  size_t v19;
  std::string::size_type v20;
  char v21;
  std::string *v22;
  std::string::size_type v23;
  size_t v24;
  BOOL v25;
  BOOL v26;
  NSObject *v27;
  _OWORD *v28;
  int v29;
  int v30;
  void *v31;
  char v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  size_t v37;
  _BOOL4 v38;
  _BOOL4 v39;
  uint64_t v40;
  _OWORD *v41;
  const char *v42;
  size_t v43;
  size_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  std::string *v49;
  NSObject *v50;
  int v51;
  void *v52;
  std::string *v53;
  int64_t v54;
  char *v55;
  char *v56;
  LogDumpDB *v57;
  std::string *v58;
  BOOL v62;
  const char *v63;
  int v64;
  void *v65;
  std::string *v66;
  int64_t v67;
  char *v68;
  char *v69;
  std::string *v70;
  _BOOL4 v74;
  int v75;
  std::string::size_type v76;
  std::string *v77;
  std::string *v78;
  int v79;
  void *v80;
  std::string *v81;
  int64_t v82;
  char *v83;
  char *v84;
  std::string *v85;
  _BOOL4 v88;
  NSObject *v89;
  NSObject *v90;
  std::string *v91;
  std::string *v92;
  std::string *v93;
  std::string v94;
  _BYTE __dst[24];
  std::string v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  else
    v94 = *(std::string *)a3;
  if (*((char *)a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  else
    v96 = *(std::string *)a2;
  v6 = SHIBYTE(v96.__r_.__value_.__r.__words[2]);
  v7 = (void *)v96.__r_.__value_.__r.__words[0];
  v8 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  else
    size = v94.__r_.__value_.__l.__size_;
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v94;
  else
    v10 = (std::string *)v94.__r_.__value_.__r.__words[0];
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  else
    v11 = v96.__r_.__value_.__l.__size_;
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v96;
  else
    v12 = (std::string *)v96.__r_.__value_.__r.__words[0];
  if (v11 >= size)
    v13 = size;
  else
    v13 = v11;
  v14 = memcmp(v10, v12, v13) == 0;
  v15 = v11 == size && v14;
  if (v6 < 0)
  {
    operator delete(v7);
    if ((*((_BYTE *)&v94.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_27:
      if (v15)
        goto LABEL_28;
LABEL_32:
      v16 = *((_QWORD *)this + 1);
      result = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
      if (!result)
        return result;
      LOWORD(v94.__r_.__value_.__l.__data_) = 0;
      v18 = "#D Two reset types are not same. No need to check duplicated signature";
      goto LABEL_34;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_27;
  }
  operator delete(v94.__r_.__value_.__l.__data_);
  if (!v15)
    goto LABEL_32;
LABEL_28:
  if (*((char *)a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  else
    v94 = *(std::string *)a3;
  v19 = strlen((const char *)*MEMORY[0x24BE051D0]);
  v20 = v19;
  v21 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v19 != -1)
    {
      v22 = &v94;
      v23 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      goto LABEL_41;
    }
LABEL_254:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v19 == -1)
    goto LABEL_254;
  v23 = v94.__r_.__value_.__l.__size_;
  v22 = (std::string *)v94.__r_.__value_.__r.__words[0];
LABEL_41:
  if (v23 >= v20)
    v24 = v20;
  else
    v24 = v23;
  v25 = memcmp(v22, (const void *)*MEMORY[0x24BE051D0], v24) == 0;
  v26 = v23 == v20 && v25;
  if ((v21 & 0x80) == 0)
  {
    if (v26)
      goto LABEL_49;
LABEL_53:
    if (*((char *)a2 + 71) < 0)
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
    else
      v94 = *(std::string *)((_BYTE *)a2 + 2);
    v28 = (_OWORD *)((char *)a3 + 48);
    if (*((char *)a3 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a3 + 6), *((_QWORD *)a3 + 7));
    }
    else
    {
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = *v28;
      v96.__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 8);
    }
    *(_QWORD *)__dst = operator new(0x68uLL);
    *(_OWORD *)&__dst[8] = xmmword_24B9518F0;
    strcpy(*(char **)__dst, "(Power assertion watchdog fired for 'com.apple.AppleBasebandManager.RadioNotReady.Bootup'; Timeout =).*");
    v29 = util::compareTwoStringsWithPattern((uint64_t)&v94, (uint64_t)&v96, (uint64_t)__dst);
    if ((__dst[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__dst);
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_61:
        if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_62;
        goto LABEL_121;
      }
    }
    else if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_61;
    }
    operator delete(v96.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_62:
      if (!v29)
        return 0;
      goto LABEL_122;
    }
LABEL_121:
    operator delete(v94.__r_.__value_.__l.__data_);
    if (!v29)
      return 0;
LABEL_122:
    v50 = *((_QWORD *)this + 1);
    if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
      return 1;
    if (*((char *)a3 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 6), *((_QWORD *)a3 + 7));
    }
    else
    {
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *v28;
      v94.__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 8);
    }
    v91 = &v94;
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v91 = (std::string *)v94.__r_.__value_.__r.__words[0];
    LODWORD(v96.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4) = (std::string::size_type)v91;
LABEL_244:
    _os_log_debug_impl(&dword_24B855000, v50, OS_LOG_TYPE_DEBUG, "#D This is duplicated signature based on the dump reason: \"%s\"", (uint8_t *)&v96, 0xCu);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 1;
    operator delete(v94.__r_.__value_.__l.__data_);
    return 1;
  }
  operator delete(v94.__r_.__value_.__l.__data_);
  if (!v26)
    goto LABEL_53;
LABEL_49:
  v27 = *((_QWORD *)this + 1);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a3 + 111) < 0)
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((_QWORD *)a3 + 12));
    else
      v94 = *(std::string *)((char *)a3 + 88);
    v75 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
    v76 = v94.__r_.__value_.__r.__words[0];
    if (*((char *)a2 + 111) < 0)
      std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
    else
      v96 = *(std::string *)((char *)a2 + 88);
    v77 = &v94;
    if (v75 < 0)
      v77 = (std::string *)v76;
    v78 = &v96;
    if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v78 = (std::string *)v96.__r_.__value_.__r.__words[0];
    *(_DWORD *)__dst = 136315394;
    *(_QWORD *)&__dst[4] = v77;
    *(_WORD *)&__dst[12] = 2080;
    *(_QWORD *)&__dst[14] = v78;
    _os_log_debug_impl(&dword_24B855000, v27, OS_LOG_TYPE_DEBUG, "#D Comparing current reason, \"%s\", and the recorded reason, \"%s\"", __dst, 0x16u);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v96.__r_.__value_.__l.__data_);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (*((char *)a3 + 111) < 0)
    std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((_QWORD *)a3 + 12));
  else
    v94 = *(std::string *)((char *)a3 + 88);
  if (*((char *)a2 + 111) < 0)
    std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  else
    v96 = *(std::string *)((char *)a2 + 88);
  v30 = SHIBYTE(v96.__r_.__value_.__r.__words[2]);
  v31 = (void *)v96.__r_.__value_.__r.__words[0];
  v32 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  else
    v33 = v94.__r_.__value_.__l.__size_;
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &v94;
  else
    v34 = (std::string *)v94.__r_.__value_.__r.__words[0];
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  else
    v35 = v96.__r_.__value_.__l.__size_;
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = &v96;
  else
    v36 = (std::string *)v96.__r_.__value_.__r.__words[0];
  if (v35 >= v33)
    v37 = v33;
  else
    v37 = v35;
  v38 = memcmp(v34, v36, v37) == 0;
  v39 = v35 == v33 && v38;
  if ((v30 & 0x80000000) == 0)
  {
    if ((v32 & 0x80) == 0)
      goto LABEL_88;
LABEL_116:
    operator delete(v94.__r_.__value_.__l.__data_);
    if (v39)
      goto LABEL_89;
    goto LABEL_117;
  }
  operator delete(v31);
  if ((*((_BYTE *)&v94.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_116;
LABEL_88:
  if (!v39)
  {
LABEL_117:
    v16 = *((_QWORD *)this + 1);
    result = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    LOWORD(v94.__r_.__value_.__l.__data_) = 0;
    v18 = "#D Two crash reasons are not identical. No need to check duplicated signature";
LABEL_34:
    _os_log_debug_impl(&dword_24B855000, v16, OS_LOG_TYPE_DEBUG, v18, (uint8_t *)&v94, 2u);
    return 0;
  }
LABEL_89:
  v40 = 0;
  v41 = (_OWORD *)((char *)a3 + 48);
  do
  {
    if (*((char *)a2 + 71) < 0)
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
    else
      v94 = *(std::string *)((_BYTE *)a2 + 2);
    if (*((char *)a3 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a3 + 6), *((_QWORD *)a3 + 7));
    }
    else
    {
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = *v41;
      v96.__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 8);
    }
    v42 = abm::kInterestingHardResetReasonSignatures[v40];
    v43 = strlen(v42);
    if (v43 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v44 = v43;
    if (v43 >= 0x17)
    {
      v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v46 = v43 | 7;
      v47 = v46 + 1;
      v45 = operator new(v46 + 1);
      *(_QWORD *)&__dst[8] = v44;
      *(_QWORD *)&__dst[16] = v47 | 0x8000000000000000;
      *(_QWORD *)__dst = v45;
LABEL_103:
      memmove(v45, v42, v44);
      goto LABEL_104;
    }
    __dst[23] = v43;
    v45 = __dst;
    if (v43)
      goto LABEL_103;
LABEL_104:
    v45[v44] = 0;
    v48 = util::compareTwoStringsWithPattern((uint64_t)&v94, (uint64_t)&v96, (uint64_t)__dst);
    if ((__dst[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__dst);
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_106:
        if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_107;
        goto LABEL_111;
      }
    }
    else if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_106;
    }
    operator delete(v96.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_107:
      if (v48)
        goto LABEL_125;
      goto LABEL_112;
    }
LABEL_111:
    operator delete(v94.__r_.__value_.__l.__data_);
    if (v48)
    {
LABEL_125:
      v50 = *((_QWORD *)this + 1);
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
        return 1;
      if (*((char *)a3 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 6), *((_QWORD *)a3 + 7));
      }
      else
      {
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *v41;
        v94.__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 8);
      }
      v92 = &v94;
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v92 = (std::string *)v94.__r_.__value_.__r.__words[0];
      LODWORD(v96.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4) = (std::string::size_type)v92;
      goto LABEL_244;
    }
LABEL_112:
    ++v40;
  }
  while (v40 != 8);
  if (*((char *)a3 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((_QWORD *)a3 + 12));
    v49 = (std::string *)((char *)a3 + 88);
  }
  else
  {
    v49 = (std::string *)((char *)a3 + 88);
    v94 = *(std::string *)((char *)a3 + 88);
  }
  v51 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
  v52 = (void *)v94.__r_.__value_.__r.__words[0];
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = &v94;
  else
    v53 = (std::string *)v94.__r_.__value_.__r.__words[0];
  v54 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v54 = v94.__r_.__value_.__l.__size_;
  v55 = (char *)v53 + v54;
  if (v54 >= 17)
  {
    v58 = v53;
    v57 = this;
    do
    {
      v56 = (char *)memchr(v58, 67, v54 - 16);
      if (!v56)
        break;
      if (*(_QWORD *)v56 == 0x63206D6F74737543 && *((_QWORD *)v56 + 1) == 0x7079742068736172 && v56[16] == 101)
        goto LABEL_146;
      v58 = (std::string *)(v56 + 1);
      v54 = v55 - (char *)v58;
    }
    while (v55 - (char *)v58 > 16);
    v56 = v55;
  }
  else
  {
    v56 = (char *)v53 + v54;
    v57 = this;
  }
LABEL_146:
  v62 = v56 == v55 || v56 - (char *)v53 == -1;
  if (v51 < 0)
    operator delete(v52);
  if (v62)
  {
    if (*((char *)a3 + 111) < 0)
    {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((_QWORD *)a3 + 12));
      v49 = (std::string *)((char *)a3 + 88);
    }
    else
    {
      v94 = *v49;
    }
    v64 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
    v65 = (void *)v94.__r_.__value_.__r.__words[0];
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = &v94;
    else
      v66 = (std::string *)v94.__r_.__value_.__r.__words[0];
    v67 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v67 = v94.__r_.__value_.__l.__size_;
    v68 = (char *)v66 + v67;
    if (v67 >= 18)
    {
      v70 = v66;
      v57 = this;
      do
      {
        v69 = (char *)memchr(v70, 67, v67 - 17);
        if (!v69)
          break;
        if (*(_QWORD *)v69 == 0x7274206873617243
          && *((_QWORD *)v69 + 1) == 0x2064657265676769
          && *((_WORD *)v69 + 8) == 31074)
        {
          goto LABEL_179;
        }
        v70 = (std::string *)(v69 + 1);
        v67 = v68 - (char *)v70;
      }
      while (v68 - (char *)v70 >= 18);
      v69 = v68;
    }
    else
    {
      v69 = (char *)v66 + v67;
      v57 = this;
    }
LABEL_179:
    v74 = v69 == v68 || v69 - (char *)v66 == -1;
    if (v64 < 0)
      operator delete(v65);
    if (v74)
    {
      if (*((char *)a3 + 111) < 0)
      {
        std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((_QWORD *)a3 + 12));
        v49 = (std::string *)((char *)a3 + 88);
      }
      else
      {
        v94 = *v49;
      }
      v79 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
      v80 = (void *)v94.__r_.__value_.__r.__words[0];
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = &v94;
      else
        v81 = (std::string *)v94.__r_.__value_.__r.__words[0];
      v82 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v82 = v94.__r_.__value_.__l.__size_;
      v83 = (char *)v81 + v82;
      if (v82 >= 14)
      {
        v85 = v81;
        v57 = this;
        do
        {
          v84 = (char *)memchr(v85, 67, v82 - 13);
          if (!v84)
            break;
          if (*(_QWORD *)v84 == 0x6E69206873617243 && *(_QWORD *)(v84 + 6) == 0x64657463656A6E69)
            goto LABEL_219;
          v85 = (std::string *)(v84 + 1);
          v82 = v83 - (char *)v85;
        }
        while (v83 - (char *)v85 >= 14);
        v84 = v83;
      }
      else
      {
        v84 = (char *)v81 + v82;
        v57 = this;
      }
LABEL_219:
      v88 = v84 == v83 || v84 - (char *)v81 == -1;
      if (v79 < 0)
        operator delete(v80);
      if (v88)
      {
        v89 = *((_QWORD *)v57 + 1);
        if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v94.__r_.__value_.__l.__data_) = 0;
          _os_log_debug_impl(&dword_24B855000, v89, OS_LOG_TYPE_DEBUG, "#D The crash reason has duplicated signature", (uint8_t *)&v94, 2u);
        }
        return 1;
      }
      v63 = "Crash injected";
    }
    else
    {
      v63 = "Crash triggered by";
    }
  }
  else
  {
    v63 = "Custom crash type";
  }
  v90 = *((_QWORD *)v57 + 1);
  result = os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG);
  if (!result)
    return result;
  if (*((char *)a3 + 111) < 0)
    std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((_QWORD *)a3 + 12));
  else
    v94 = *v49;
  v93 = &v94;
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v93 = (std::string *)v94.__r_.__value_.__r.__words[0];
  LODWORD(v96.__r_.__value_.__l.__data_) = 136315394;
  *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4) = (std::string::size_type)v93;
  WORD2(v96.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v96.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v63;
  _os_log_debug_impl(&dword_24B855000, v90, OS_LOG_TYPE_DEBUG, "#D This is NOT duplicated signature based on the crash reason: \"%s\" has \"%s\"", (uint8_t *)&v96, 0x16u);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  return 0;
}

void sub_24B878408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string::value_type *std::vector<ResetInfo>::__push_back_slow_path<ResetInfo const&>(_QWORD *a1, const ResetInfo *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  void **v10;
  char *v11;
  void **v12;
  void **v13;
  std::string *v15;
  __int128 v16;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 4);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x249249249249249)
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 4) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 4);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - *a1) >> 4)) >= 0x124924924924924)
    v6 = 0x249249249249249;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x249249249249249)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(112 * v6);
  }
  else
  {
    v7 = 0;
  }
  v15 = (std::string *)&v7[112 * v2];
  *((_QWORD *)&v16 + 1) = &v7[112 * v6];
  ResetInfo::ResetInfo(v15, a2);
  v8 = 0;
  v10 = (void **)*a1;
  for (i = a1[1];
        (void **)(i + v8) != v10;
        ResetInfo::ResetInfo((std::string *)((char *)v15 + v8), (const ResetInfo *)(v8 + i)))
  {
    v8 -= 112;
  }
  v11 = (char *)v15 + v8;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  *a1 = v11;
  *(_QWORD *)&v16 = (char *)v15 + 112;
  *(_OWORD *)(a1 + 1) = v16;
  while (v13 != v12)
  {
    if (*((char *)v13 - 1) < 0)
    {
      operator delete(*(v13 - 3));
      if ((*((char *)v13 - 41) & 0x80000000) == 0)
      {
LABEL_19:
        if (*((char *)v13 - 65) < 0)
          goto LABEL_24;
        goto LABEL_20;
      }
    }
    else if ((*((char *)v13 - 41) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(*(v13 - 8));
    if (*((char *)v13 - 65) < 0)
    {
LABEL_24:
      operator delete(*(v13 - 11));
      if ((*((char *)v13 - 89) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_25;
    }
LABEL_20:
    if ((*((char *)v13 - 89) & 0x80000000) == 0)
      goto LABEL_15;
LABEL_25:
    operator delete(*(v13 - 14));
LABEL_15:
    v13 -= 14;
  }
  if (v12)
    operator delete(v12);
  return &v15[4].__r_.__value_.__s.__data_[16];
}

void sub_24B878690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<ResetInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<ResetInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 112;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 41) & 0x80000000) == 0)
      {
LABEL_6:
        if (*(char *)(i - 65) < 0)
          goto LABEL_11;
        goto LABEL_7;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(i - 64));
    if (*(char *)(i - 65) < 0)
    {
LABEL_11:
      operator delete(*(void **)(i - 88));
      if ((*(char *)(i - 89) & 0x80000000) == 0)
        continue;
      goto LABEL_12;
    }
LABEL_7:
    if ((*(char *)(i - 89) & 0x80000000) == 0)
      continue;
LABEL_12:
    operator delete(*(void **)(i - 112));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL LogDumpDB::isDuplicated(ResetInfo const&,std::chrono::duration<long long,std::ratio<1l,1l>>)::$_0::operator()(uint64_t a1, const ResetInfo *a2)
{
  LogDumpDB *v4;
  _BOOL8 v5;
  uint64_t v6;
  NSObject *v7;
  _DWORD *v8;
  void **v9;
  uint64_t v10;
  _DWORD *v11;
  void **v12;
  uint64_t v13;
  int v14;
  std::string::size_type v15;
  std::string *v16;
  std::string *p_p;
  std::string __p;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  std::string v24;
  uint8_t buf[4];
  void **v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  void **v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  std::string *v34;
  __int16 v35;
  std::string *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = *(LogDumpDB **)(a1 + 8);
  v5 = LogDumpDB::checkIfDuplicatedSignature(v4, a2, (const ResetInfo *)(a1 + 16));
  if (v5)
  {
    v6 = *((_QWORD *)a2 + 9);
    if (*(_QWORD *)(a1 + 88) - v6 < *(_QWORD *)(a1 + 128))
    {
      v7 = *((_QWORD *)v4 + 1);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
LABEL_23:
        **(_BYTE **)a1 = 1;
        return v5;
      }
      v8 = operator new(0x38uLL);
      v8[8] = 0;
      *(_QWORD *)v8 = 0;
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 2) = &v24.__r_.__value_.__l.__size_;
      v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
      v24.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
      *((_BYTE *)v8 + 24) = 1;
      v24.__r_.__value_.__r.__words[2] = 1;
      *((_QWORD *)v8 + 5) = v6;
      *((_QWORD *)v8 + 6) = 0xAAAAAAAA00000000;
      v9 = v22;
      Timestamp::asString((uint64_t)&v24, 0, 9, v22);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v24, (_QWORD *)v24.__r_.__value_.__l.__size_);
      if (v23 < 0)
        v9 = (void **)v22[0];
      v10 = *(_QWORD *)(a1 + 88);
      v11 = operator new(0x38uLL);
      v11[8] = 0;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = &v24.__r_.__value_.__l.__size_;
      v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      v24.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
      *((_BYTE *)v11 + 24) = 1;
      v24.__r_.__value_.__r.__words[2] = 1;
      *((_QWORD *)v11 + 5) = v10;
      *((_QWORD *)v11 + 6) = 0xAAAAAAAA00000000;
      Timestamp::asString((uint64_t)&v24, 0, 9, v20);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v24, (_QWORD *)v24.__r_.__value_.__l.__size_);
      if (v21 >= 0)
        v12 = v20;
      else
        v12 = (void **)v20[0];
      v13 = *(_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 87) < 0)
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(a1 + 64), *(_QWORD *)(a1 + 72));
      else
        v24 = *(std::string *)(a1 + 64);
      v14 = SHIBYTE(v24.__r_.__value_.__r.__words[2]);
      v15 = v24.__r_.__value_.__r.__words[0];
      if (*(char *)(a1 + 127) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 104), *(_QWORD *)(a1 + 112));
      else
        __p = *(std::string *)(a1 + 104);
      v16 = &v24;
      if (v14 < 0)
        v16 = (std::string *)v15;
      p_p = &__p;
      *(_DWORD *)buf = 136316418;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v26 = v9;
      v27 = 2050;
      v28 = v6;
      v29 = 2080;
      v30 = v12;
      v31 = 2050;
      v32 = v13;
      v33 = 2082;
      v34 = v16;
      v35 = 2082;
      v36 = p_p;
      _os_log_impl(&dword_24B855000, v7, OS_LOG_TYPE_DEFAULT, "#I Found duplicated log at timestamp: %s[%{public}llu], new log timestamp: %s[%{public}llu], dump reason: %{public}s, crash reason: %{public}s", buf, 0x3Eu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_21:
          if ((v21 & 0x80000000) == 0)
            goto LABEL_22;
          goto LABEL_27;
        }
      }
      else if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_21;
      }
      operator delete(v24.__r_.__value_.__l.__data_);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_22:
        if ((v23 & 0x80000000) == 0)
          goto LABEL_23;
LABEL_28:
        operator delete(v22[0]);
        goto LABEL_23;
      }
LABEL_27:
      operator delete(v20[0]);
      if ((v23 & 0x80000000) == 0)
        goto LABEL_23;
      goto LABEL_28;
    }
  }
  return v5;
}

void sub_24B878A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a24 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a19);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  if ((a24 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

char *ResetInfo::operator=(char *a1, char *a2)
{
  char *v3;
  __int128 v4;
  void **v5;
  char *v6;
  size_t v7;
  size_t v8;
  __int128 v9;
  void **v10;
  _QWORD *v11;
  size_t v12;
  void *v13;
  size_t v14;
  __int128 v15;
  void *v16;
  size_t v17;
  uint64_t v18;
  void **v19;
  char v20;
  __int128 v21;
  void *v23;
  size_t v24;

  if (a1 == a2)
    return a1;
  v3 = a2;
  if ((a1[23] & 0x80000000) == 0)
  {
    if (a2[23] < 0)
    {
      std::string::__assign_no_alias<true>(a1, *(void **)a2, *((_QWORD *)a2 + 1));
      v5 = (void **)(a1 + 24);
      v6 = v3 + 24;
      v7 = v3[47];
      if (a1[47] < 0)
        goto LABEL_14;
    }
    else
    {
      v4 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
      v5 = (void **)(a1 + 24);
      v6 = a2 + 24;
      v7 = a2[47];
      if (a1[47] < 0)
        goto LABEL_14;
    }
LABEL_10:
    if ((v7 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v5, *((void **)v3 + 3), *((_QWORD *)v3 + 4));
      v10 = (void **)(a1 + 48);
      v11 = v3 + 48;
      v12 = v3[71];
      if (a1[71] < 0)
        goto LABEL_24;
    }
    else
    {
      v9 = *(_OWORD *)v6;
      v5[2] = (void *)*((_QWORD *)v6 + 2);
      *(_OWORD *)v5 = v9;
      v10 = (void **)(a1 + 48);
      v11 = v3 + 48;
      v12 = v3[71];
      if (a1[71] < 0)
        goto LABEL_24;
    }
LABEL_21:
    if ((v12 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v10, *((void **)v3 + 6), *((_QWORD *)v3 + 7));
    }
    else
    {
      v15 = *(_OWORD *)v11;
      v10[2] = (void *)v11[2];
      *(_OWORD *)v10 = v15;
    }
    goto LABEL_32;
  }
  if (a2[23] >= 0)
  {
    v8 = a2[23];
  }
  else
  {
    a2 = *(char **)a2;
    v8 = *((_QWORD *)v3 + 1);
  }
  std::string::__assign_no_alias<false>((void **)a1, a2, v8);
  v5 = (void **)(a1 + 24);
  v6 = v3 + 24;
  v7 = v3[47];
  if ((a1[47] & 0x80000000) == 0)
    goto LABEL_10;
LABEL_14:
  if ((v7 & 0x80u) == 0)
    v13 = v6;
  else
    v13 = (void *)*((_QWORD *)v3 + 3);
  if ((v7 & 0x80u) == 0)
    v14 = v7;
  else
    v14 = *((_QWORD *)v3 + 4);
  std::string::__assign_no_alias<false>(v5, v13, v14);
  v10 = (void **)(a1 + 48);
  v11 = v3 + 48;
  v12 = v3[71];
  if ((a1[71] & 0x80000000) == 0)
    goto LABEL_21;
LABEL_24:
  if ((v12 & 0x80u) == 0)
    v16 = v11;
  else
    v16 = (void *)*((_QWORD *)v3 + 6);
  if ((v12 & 0x80u) == 0)
    v17 = v12;
  else
    v17 = *((_QWORD *)v3 + 7);
  std::string::__assign_no_alias<false>(v10, v16, v17);
LABEL_32:
  v18 = *((_QWORD *)v3 + 9);
  *((_DWORD *)a1 + 20) = *((_DWORD *)v3 + 20);
  *((_QWORD *)a1 + 9) = v18;
  v19 = (void **)(a1 + 88);
  v20 = v3[111];
  if (a1[111] < 0)
  {
    if (v20 >= 0)
      v23 = v3 + 88;
    else
      v23 = (void *)*((_QWORD *)v3 + 11);
    if (v20 >= 0)
      v24 = v3[111];
    else
      v24 = *((_QWORD *)v3 + 12);
    std::string::__assign_no_alias<false>(v19, v23, v24);
    return a1;
  }
  else
  {
    if ((v3[111] & 0x80) == 0)
    {
      v21 = *(_OWORD *)(v3 + 88);
      *((_QWORD *)a1 + 13) = *((_QWORD *)v3 + 13);
      *(_OWORD *)v19 = v21;
      return a1;
    }
    std::string::__assign_no_alias<true>(v19, *((void **)v3 + 11), *((_QWORD *)v3 + 12));
    return a1;
  }
}

void ResetInfo::ResetInfo(std::string *this, const ResetInfo *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)((char *)a2 + 24);
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  v8 = *((_QWORD *)a2 + 9);
  LODWORD(this[3].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 20);
  this[3].__r_.__value_.__r.__words[0] = v8;
  v9 = (std::string *)((char *)this + 88);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v10 = *(_OWORD *)((char *)a2 + 88);
    this[4].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 13);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_24B878DF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::cf::insert<char const*,std::string>(__CFDictionary *a1, const __CFString **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  void *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  void *value;

  value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  v6 = value;
  value = 0;
  ctu::cf::convert_copy();
  v7 = value;
  if (v6)
    v8 = value == 0;
  else
    v8 = 1;
  v9 = !v8;
  if (v8)
  {
    if (!value)
      goto LABEL_11;
  }
  else
  {
    CFDictionaryAddValue(a1, v6, value);
  }
  CFRelease(v7);
LABEL_11:
  if (v6)
    CFRelease(v6);
  return v9;
}

void sub_24B878F18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_24B878F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_251CB98D8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (a2)
  {
    v6 = *(std::__shared_weak_count **)(a2 + 32);
    if (v6)
    {
      if (v6->__shared_owners_ != -1)
        return a1;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      *(_QWORD *)(a2 + 24) = a2;
      *(_QWORD *)(a2 + 32) = v4;
      std::__shared_weak_count::__release_weak(v6);
    }
    else
    {
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      *(_QWORD *)(a2 + 24) = a2;
      *(_QWORD *)(a2 + 32) = v4;
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_24B879078(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v4 = (void *)MEMORY[0x24BD294C0](v2);
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v3;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 32);
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
    v3 = (void *)MEMORY[0x24BD294C0](v1);
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B9519F5)
    return a1 + 24;
  if (((v3 & 0x800000024B9519F5 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B9519F5))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B9519F5 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

BOOL Preferences::getPreference<__CFArray const*>(uint64_t (***a1)(_QWORD, uint64_t), const char *a2, _QWORD *a3)
{
  const void *v5;
  const void *v6;
  CFTypeID v7;
  BOOL v8;
  _BOOL8 v9;
  uint64_t v11;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v11, a2);
  v5 = (const void *)(**a1)(a1, v11);
  v6 = v5;
  if (v5)
  {
    v7 = CFGetTypeID(v5);
    v8 = v7 == CFArrayGetTypeID();
    v9 = v8;
    if (v8)
      *a3 = v6;
    CFRelease(v6);
  }
  else
  {
    v9 = 0;
  }
  MEMORY[0x24BD29478](&v11);
  return v9;
}

uint64_t __cxx_global_var_init_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_24B855000);
  }
  return result;
}

void abm::debug::registerLogServer(uint64_t a1)
{
  _QWORD block[5];

  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  block[4] = a1;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce != -1)
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
}

void ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  capabilities::abs *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  capabilities::radio *v25;
  uint64_t v26;
  xpc_object_t v27;
  _QWORD v28[2];
  xpc_object_t object;
  xpc_object_t xdict;

  xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::LogServer::getConfig(**(ctu::LogServer ***)(a1 + 32));
  v28[0] = &xdict;
  v28[1] = "kDomainLogLevels";
  object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)v28, &object);
  v2 = MEMORY[0x24BD2A468](object);
  v3 = MEMORY[0x24BDACFA0];
  if (v2 != MEMORY[0x24BDACFA0])
  {
    v4 = xpc_dictionary_create(0, 0, 0);
    if (v4 || (v4 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x24BD2A468](v4) == v3)
      {
        xpc_retain(v4);
        v5 = v4;
      }
      else
      {
        v5 = xpc_null_create();
      }
    }
    else
    {
      v5 = xpc_null_create();
      v4 = 0;
    }
    xpc_release(v4);
    v6 = xpc_null_create();
    v7 = object;
    object = v5;
    xpc_release(v7);
    xpc_release(v6);
  }
  v8 = xpc_int64_create(1);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(object, "libetl", v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = xpc_int64_create(1);
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(object, "libtu", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  v12 = xpc_int64_create(1);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(object, "trace.diag.cfg", v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = xpc_int64_create(1);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(object, "trace.diag.svc", v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_int64_create(1);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(object, "libktl", v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = object;
  if (object)
    xpc_retain(object);
  else
    v18 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kDomainLogLevels", v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v27 = xdict;
  if (xdict)
    xpc_retain(xdict);
  else
    v27 = xpc_null_create();
  ctu::LogServer::updateConfig();
  xpc_release(v27);
  v20 = (capabilities::abs *)operator new(0x10uLL);
  v21 = *(_QWORD **)(a1 + 32);
  *(_QWORD *)v20 = *v21;
  v22 = v21[1];
  *((_QWORD *)v20 + 1) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  _MergedGlobals = (uint64_t)v20;
  if (!qword_2579B8B10)
  {
    v20 = (capabilities::abs *)os_log_create("com.apple.telephony.abm", "libtu");
    qword_2579B8B10 = (uint64_t)v20;
  }
  capabilities::abs::TUDebugFlags(v20);
  TelephonyUtilDebugSetFlags();
  v25 = (capabilities::radio *)TelephonyUtilDebugRegisterDelegate();
  v26 = capabilities::radio::ice(v25);
  if ((v26 & 1) == 0)
    capabilities::radio::maverick((capabilities::radio *)v26);
  if (!qword_2579B8B18)
    qword_2579B8B18 = (uint64_t)os_log_create("com.apple.telephony.abm", "bbu");
  BBUpdaterRegisterGlobalLogSink();
  xpc_release(object);
  xpc_release(xdict);
}

void sub_24B879794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, xpc_object_t a13, xpc_object_t a14)
{
  xpc_release(object);
  xpc_release(a13);
  xpc_release(a14);
  _Unwind_Resume(a1);
}

void xpc::dict::object_proxy::operator xpc::dict(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t v4;
  xpc_object_t v5;

  value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x24BD2A468](v4) != MEMORY[0x24BDACFA0])
  {
    v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

void abm::debug::handleDebugPrintTelephonyUtil(abm::debug *this, const char *a2, const char *a3, char *a4)
{
  abm::debug::handleDebugPrint(0, this, (uint64_t)a2, (uint64_t)a3);
}

void abm::debug::handleDebugPrintBinaryTelephonyUtil(uint64_t a1, int a2, uint64_t a3, int a4)
{
  const char *v4;
  const char *v5;
  _QWORD *v6;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ctu::Clock *v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  void **v28;
  void *__p[2];
  char v30;
  void *v31[2];
  uint64_t v32;
  _OWORD v33[3];
  unint64_t v34;
  uint8_t buf[4];
  int v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  void **v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = "misc";
  if (!a2)
    v4 = "send";
  if (a2 == 1)
    v5 = "recv";
  else
    v5 = v4;
  v6 = (_QWORD *)_MergedGlobals;
  if (_MergedGlobals)
  {
    v8 = *(std::__shared_weak_count **)(_MergedGlobals + 8);
    if (v8)
    {
      v10 = std::__shared_weak_count::lock(v8);
      if (v10)
      {
        v11 = v10;
        if (*v6)
        {
          v34 = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v33[1] = v12;
          v33[2] = v12;
          v33[0] = v12;
          ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v33);
          v13 = MEMORY[0x24BD29694](v33, a1);
          MEMORY[0x24BD29694](v13, " (");
          v14 = ctu::operator<<();
          v15 = MEMORY[0x24BD29694](v14, ") ");
          v16 = MEMORY[0x24BD29694](v15, v5);
          MEMORY[0x24BD29694](v16, "\n");
          v31[1] = (void *)0xAAAAAAAAAAAAAAAALL;
          v32 = 0xAAAAAAAAAAAAAALL;
          v31[0] = (void *)0xAAAAAAAAAAAAAA00;
          ctu::assign();
          v17 = (ctu::Clock *)MEMORY[0x24BD296A0](v33, v31);
          ctu::Clock::now_in_nanoseconds(v17);
          v18 = (std::__shared_weak_count_vtbl *)operator new(0x60uLL);
          v30 = 5;
          strcpy((char *)__p, "libtu");
          MEMORY[0x24BD293F4](v33);
          ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v33);
          ctu::LogMessage::LogMessage();
          v19 = (std::__shared_weak_count *)operator new(0x20uLL);
          v19->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          v19->__vftable = (std::__shared_weak_count_vtbl *)off_251CB9978;
          v19->__shared_weak_owners_ = 0;
          v19[1].__vftable = v18;
          if (v30 < 0)
            operator delete(__p[0]);
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
          ctu::LogServer::log();
          if (v19)
          {
            v22 = (unint64_t *)&v19->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          v24 = qword_2579B8B10;
          if (qword_2579B8B10 && os_log_type_enabled((os_log_t)qword_2579B8B10, OS_LOG_TYPE_DEBUG))
          {
            v28 = v31;
            if (v32 < 0)
              v28 = (void **)v31[0];
            *(_DWORD *)buf = 67109634;
            v36 = a4;
            v37 = 2080;
            v38 = v5;
            v39 = 2080;
            v40 = v28;
            _os_log_debug_impl(&dword_24B855000, v24, OS_LOG_TYPE_DEBUG, "(%d) %s: %s", buf, 0x1Cu);
          }
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
          if (SHIBYTE(v32) < 0)
            operator delete(v31[0]);
          MEMORY[0x24BD29424](v33);
        }
        v26 = (unint64_t *)&v11->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
}

void sub_24B879C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  do
    v29 = __ldaxr(v25);
  while (__stlxr(v29 - 1, v25));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (a22 < 0)
    operator delete(__p);
  MEMORY[0x24BD29424](&a23);
  v30 = (unint64_t *)&v23->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  _Unwind_Resume(a1);
}

uint64_t abm::debug::handleDebugPrintBBU(abm::debug *this, void *a2, const char *a3, const char *a4)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  abm::debug *v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  void **v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void *__dst[3];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *__p[2];
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35 = 0xAAAAAAAAAAAAAAAALL;
  v45 = v5;
  v44 = v5;
  v43 = v5;
  v42 = v5;
  v41 = v5;
  v40 = v5;
  v39 = v5;
  v38 = v5;
  v37 = v5;
  *(_OWORD *)__p = v5;
  v34 = v5;
  v31 = v5;
  v32 = v5;
  v29 = v5;
  v30 = v5;
  v6 = MEMORY[0x24BEDB870];
  v7 = MEMORY[0x24BEDB870] + 64;
  v36 = MEMORY[0x24BEDB870] + 64;
  v8 = (uint64_t *)MEMORY[0x24BEDB800];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v28 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v28 + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v10, &v29);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v28 = v6 + 24;
  v36 = v7;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v29 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v34 = 0u;
  LODWORD(v35) = 16;
  v12 = (_QWORD *)std::ostream::operator<<();
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)":", 1);
  v14 = strlen(a3);
  v15 = (abm::debug *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)a3, v14);
  memset(__dst, 170, sizeof(__dst));
  if ((v35 & 0x10) != 0)
  {
    v21 = *((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1) < (unint64_t)v32)
    {
      *((_QWORD *)&v34 + 1) = v32;
      v21 = v32;
    }
    v22 = (const void *)*((_QWORD *)&v31 + 1);
    v19 = v21 - *((_QWORD *)&v31 + 1);
    if ((unint64_t)(v21 - *((_QWORD *)&v31 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v35 & 8) == 0)
    {
      v19 = 0;
      HIBYTE(__dst[2]) = 0;
      v20 = __dst;
      goto LABEL_14;
    }
    v22 = (const void *)v30;
    v19 = v31 - v30;
    if ((_QWORD)v31 - (_QWORD)v30 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_22:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v19 >= 0x17)
  {
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    v20 = (void **)operator new(v23 + 1);
    __dst[1] = (void *)v19;
    __dst[2] = (void *)(v24 | 0x8000000000000000);
    __dst[0] = v20;
    goto LABEL_13;
  }
  HIBYTE(__dst[2]) = v19;
  v20 = __dst;
  if (v19)
LABEL_13:
    v15 = (abm::debug *)memmove(v20, v22, v19);
LABEL_14:
  *((_BYTE *)v20 + v19) = 0;
  v25 = __dst;
  if (SHIBYTE(__dst[2]) < 0)
    v25 = (void **)__dst[0];
  abm::debug::handleDebugPrintBBUHelper(v15, v16, v17, v18, v25);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  v28 = *v8;
  *(uint64_t *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = v8[3];
  *(_QWORD *)&v29 = v11 + 16;
  if (SBYTE7(v34) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x24BD29B5C](&v36);
}

void sub_24B879FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrint(int a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v10;
  __int128 v11;
  uint64_t v12;
  ctu::Clock *v13;
  std::string *v14;
  const char *v15;
  size_t v16;
  void *v17;
  void **v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;
  int v24;
  size_t size;
  std::string *data;
  _BYTE *v27;
  unint64_t v28;
  unsigned __int8 *v29;
  char *v30;
  int v31;
  char *v32;
  std::string::size_type v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v39;
  std::string::__raw *v40;
  std::string::size_type v41;
  std::string::pointer v42;
  std::string::__raw *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::string::pointer v49;
  std::__shared_weak_count *v50;
  void *__dst[2];
  unint64_t v52;
  std::string *v53;
  std::__shared_weak_count *v54;
  _OWORD v55[3];
  unint64_t v56;
  std::__shared_weak_count *v58;
  uint8_t buf[4];
  std::string::__raw *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)_MergedGlobals;
  if (!_MergedGlobals)
    return;
  v6 = *(std::__shared_weak_count **)(_MergedGlobals + 8);
  if (!v6)
    return;
  v10 = std::__shared_weak_count::lock(v6);
  v58 = v10;
  if (!v10)
    return;
  if (!*v4)
  {
    v19 = v10;
LABEL_67:
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    return;
  }
  v56 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v55[1] = v11;
  v55[2] = v11;
  v55[0] = v11;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v55);
  if (a2 && *a2)
  {
    v12 = MEMORY[0x24BD29694](v55, a2);
    MEMORY[0x24BD29694](v12, ": ");
  }
  MEMORY[0x24BD2940C](&v53, a3, a4);
  ctu::operator<<();
  v13 = (ctu::Clock *)MEMORY[0x24BD29424](&v53);
  ctu::Clock::now_in_nanoseconds(v13);
  v14 = (std::string *)operator new(0x60uLL);
  v15 = abm::debug::kLogDomainMap[a1];
  v16 = strlen(v15);
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    v18 = (void **)operator new(v20 + 1);
    __dst[1] = v17;
    v52 = v21 | 0x8000000000000000;
    __dst[0] = v18;
    goto LABEL_16;
  }
  HIBYTE(v52) = v16;
  v18 = __dst;
  if (v16)
LABEL_16:
    memmove(v18, v15, (size_t)v17);
  *((_BYTE *)v17 + (_QWORD)v18) = 0;
  MEMORY[0x24BD293F4](v55);
  ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v55);
  ctu::LogMessage::LogMessage();
  v53 = v14;
  v22 = (std::__shared_weak_count *)operator new(0x20uLL);
  v22->__vftable = (std::__shared_weak_count_vtbl *)off_251CB9978;
  v22->__shared_owners_ = 0;
  v22->__shared_weak_owners_ = 0;
  v22[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  v54 = v22;
  if (SHIBYTE(v52) < 0)
  {
    operator delete(__dst[0]);
    v23 = v14 + 2;
    v24 = SHIBYTE(v14[2].__r_.__value_.__r.__words[2]);
    if ((v24 & 0x80000000) == 0)
      goto LABEL_19;
  }
  else
  {
    v23 = v14 + 2;
    v24 = SHIBYTE(v14[2].__r_.__value_.__r.__words[2]);
    if ((v24 & 0x80000000) == 0)
    {
LABEL_19:
      size = v24;
      data = v23;
      goto LABEL_22;
    }
  }
  data = (std::string *)v14[2].__r_.__value_.__l.__data_;
  size = v14[2].__r_.__value_.__l.__size_;
LABEL_22:
  v27 = memchr(data, 10, size);
  if (v27)
    v28 = (unint64_t)v27;
  else
    v28 = (unint64_t)data + size;
  if (v28 - (_QWORD)data != size)
  {
    v29 = (unsigned __int8 *)(v28 + 1);
    if ((std::string *)(v28 + 1) != (std::string *)((char *)data + size))
    {
      v30 = (char *)data + size + ~v28;
      do
      {
        v31 = *v29;
        if (v31 != 10)
          *(_BYTE *)v28++ = v31;
        ++v29;
        --v30;
      }
      while (v30);
      LOBYTE(v24) = *((_BYTE *)&v14[2].__r_.__value_.__s + 23);
    }
  }
  if ((v24 & 0x80) == 0)
  {
    v32 = (char *)v23 + v24;
    v33 = v28 - (_QWORD)v23;
    if (v24 >= v28 - (unint64_t)v23)
      goto LABEL_34;
LABEL_51:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  v42 = v14[2].__r_.__value_.__l.__data_;
  v41 = v14[2].__r_.__value_.__l.__size_;
  v32 = &v42[v41];
  v33 = v28 - (_QWORD)v42;
  if (v41 < v28 - (unint64_t)v42)
    goto LABEL_51;
LABEL_34:
  if (&v32[-v28] == (char *)-1)
  {
    if ((v24 & 0x80) != 0)
    {
      v49 = v14[2].__r_.__value_.__l.__data_;
      v14[2].__r_.__value_.__l.__size_ = v33;
      v49[v33] = 0;
      v34 = v54;
      v50 = v54;
      if (!v54)
        goto LABEL_38;
    }
    else
    {
      *((_BYTE *)&v14[2].__r_.__value_.__s + 23) = v33 & 0x7F;
      v23->__r_.__value_.__s.__data_[v33] = 0;
      v34 = v54;
      v50 = v54;
      if (!v54)
        goto LABEL_38;
    }
  }
  else
  {
    std::string::__erase_external_with_move(v23, v33, (std::string::size_type)&v32[-v28]);
    v34 = v54;
    v50 = v54;
    if (!v54)
      goto LABEL_38;
  }
  v35 = (unint64_t *)&v34->__shared_owners_;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
LABEL_38:
  ctu::LogServer::log();
  if (v50)
  {
    v37 = (unint64_t *)&v50->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (a1)
  {
    if (a1 == 3)
    {
      v39 = qword_2579B8B18;
      if (qword_2579B8B18)
      {
        if (os_log_type_enabled((os_log_t)qword_2579B8B18, OS_LOG_TYPE_DEFAULT))
        {
          v40 = (std::string::__raw *)&v53[2];
          if (SHIBYTE(v53[2].__r_.__value_.__r.__words[2]) < 0)
            v40 = (std::string::__raw *)v40->__words[0];
          *(_DWORD *)buf = 136315138;
          v60 = v40;
LABEL_60:
          _os_log_impl(&dword_24B855000, v39, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        }
      }
    }
  }
  else
  {
    v39 = qword_2579B8B10;
    if (qword_2579B8B10 && os_log_type_enabled((os_log_t)qword_2579B8B10, OS_LOG_TYPE_DEFAULT))
    {
      v43 = (std::string::__raw *)&v53[2];
      if (SHIBYTE(v53[2].__r_.__value_.__r.__words[2]) < 0)
        v43 = (std::string::__raw *)v43->__words[0];
      *(_DWORD *)buf = 136315138;
      v60 = v43;
      goto LABEL_60;
    }
  }
  v44 = v54;
  if (v54)
  {
    v45 = (unint64_t *)&v54->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  MEMORY[0x24BD29424](v55);
  v19 = v58;
  if (v58)
    goto LABEL_67;
}

void sub_24B87A54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  MEMORY[0x24BD29424](&a24);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v24 - 112);
  _Unwind_Resume(a1);
}

void sub_24B87A5E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_24B87A5F8()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x24B87A640);
}

void sub_24B87A624(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  if (a16 < 0)
    operator delete(__p);
  operator delete(v16);
  JUMPOUT(0x24B87A640);
}

void std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B951AC9)
    return a1 + 24;
  if (((v3 & 0x800000024B951AC9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B951AC9))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B951AC9 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void abm::debug::handleDebugPrintBBUHelper(abm::debug *this, void *a2, uint64_t a3, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  abm::debug::handleDebugPrint(3, "", (uint64_t)"%s", (uint64_t)va);
}

void abm::AWDHelperSetConnection(uint64_t *a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;

  v1 = a1[1];
  v13 = *a1;
  v14 = (std::__shared_weak_count *)v1;
  if (v1)
  {
    v2 = (unint64_t *)(v1 + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
  }
  abm::AWDHelper::create(&v13, &v15);
  pthread_mutex_lock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  v4 = (std::__shared_weak_count *)off_2579B8538;
  *(_OWORD *)&qword_2579B8530 = v15;
  v15 = 0uLL;
  pthread_mutex_unlock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_24B87A870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_24B87A88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t abm::isWISServerAvailable(abm *this)
{
  return 1;
}

void abm::AWDHelper::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = operator new(0x10uLL);
  v5 = v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *v4 = v6;
    v4[1] = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    *v4 = v6;
    v4[1] = 0;
  }
  *a2 = v4;
  v11 = operator new(0x20uLL);
  *v11 = off_251CB99C8;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v5;
  a2[1] = v11;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_24B87A984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(v10);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void abm::AWDHelperGetConnection(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;

  pthread_mutex_lock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  v3 = (_QWORD *)qword_2579B8530;
  if (!qword_2579B8530)
  {
    abm::AWDHelper::create_default_global(&v19);
    v4 = v19;
    v19 = 0uLL;
    v5 = (std::__shared_weak_count *)off_2579B8538;
    *(_OWORD *)&qword_2579B8530 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v3 = (_QWORD *)qword_2579B8530;
  }
  v11 = (std::__shared_weak_count *)off_2579B8538;
  if (off_2579B8538)
  {
    v12 = (unint64_t *)((char *)off_2579B8538 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  pthread_mutex_unlock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  v14 = v3[1];
  *a1 = *v3;
  a1[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_24B87AB30(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t ctu::PthreadMutexGuardPolicy<abm::AWDHelper>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__shared_ptr_pointer<abm::AWDHelper *,std::shared_ptr<abm::AWDHelper>::__shared_ptr_default_delete<abm::AWDHelper,abm::AWDHelper>,std::allocator<abm::AWDHelper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<abm::AWDHelper *,std::shared_ptr<abm::AWDHelper>::__shared_ptr_default_delete<abm::AWDHelper,abm::AWDHelper>,std::allocator<abm::AWDHelper>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (std::__shared_weak_count *)v1[1];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(v1);
    }
    else
    {
LABEL_6:
      operator delete(v1);
    }
  }
}

uint64_t std::__shared_ptr_pointer<abm::AWDHelper *,std::shared_ptr<abm::AWDHelper>::__shared_ptr_default_delete<abm::AWDHelper,abm::AWDHelper>,std::allocator<abm::AWDHelper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B951B96)
    return a1 + 24;
  if (((v3 & 0x800000024B951B96 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B951B96))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B951B96 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void abm::AWDHelper::create_default_global(_QWORD *a1@<X8>)
{
  wis::WISServerConnection *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  wis::WISServerConnection *v13;
  std::__shared_weak_count *v14;
  wis::WISServerConnection *v15;
  std::__shared_weak_count *v16;

  v3 = (wis::WISServerConnection *)operator new(0x10uLL);
  wis::WISServerConnection::WISServerConnection(v3);
  v15 = v3;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_251CB9A18;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  v16 = v4;
  v13 = v3;
  v14 = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  abm::AWDHelper::create((uint64_t *)&v13, a1);
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_24B87AE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<wis::WISServerConnection *,std::shared_ptr<wis::WISServerConnection>::__shared_ptr_default_delete<wis::WISServerConnection,wis::WISServerConnection>,std::allocator<wis::WISServerConnection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<wis::WISServerConnection *,std::shared_ptr<wis::WISServerConnection>::__shared_ptr_default_delete<wis::WISServerConnection,wis::WISServerConnection>,std::allocator<wis::WISServerConnection>>::__on_zero_shared(uint64_t a1)
{
  void *v1;

  if (*(_QWORD *)(a1 + 24))
  {
    v1 = (void *)MEMORY[0x24BD296E8]();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<wis::WISServerConnection *,std::shared_ptr<wis::WISServerConnection>::__shared_ptr_default_delete<wis::WISServerConnection,wis::WISServerConnection>,std::allocator<wis::WISServerConnection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B951C6CLL)
    return a1 + 24;
  if (((v3 & 0x800000024B951C6CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B951C6CLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B951C6CLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t __cxx_global_var_init_1()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<abm::AWDHelper>::~PthreadMutexGuardPolicy, &ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance, &dword_24B855000);
  }
  return result;
}

const char *asString(unsigned int a1)
{
  if (a1 > 3)
    return "???";
  else
    return off_251CB9B70[(char)a1];
}

const char *ABMServiceManager::getName(ABMServiceManager *this)
{
  return "service.mgr";
}

uint64_t ABMServiceManager::getInitTimeoutSec(ABMServiceManager *this)
{
  return 12 * capabilities::abs::serviceInitTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getStartTimeoutSec(ABMServiceManager *this)
{
  return 30 * capabilities::abs::serviceStartTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getSleepTimeoutSec(ABMServiceManager *this)
{
  return 29 * capabilities::abs::serviceSleepTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getDefaultShutdownTimeoutSec(ABMServiceManager *this)
{
  return 5 * capabilities::abs::serviceShutdownTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getShutdownTimeoutSec(capabilities::abs *a1, int a2)
{
  uint64_t IsInternalBuild;

  if (a2 == 1)
    return 15 * capabilities::abs::serviceShutdownTimeoutScalingFactor(a1);
  if (a2)
    return (*(uint64_t (**)(capabilities::abs *))(*(_QWORD *)a1 + 112))(a1);
  IsInternalBuild = config::hw::watch(a1);
  if ((_DWORD)IsInternalBuild
    && ((IsInternalBuild = TelephonyUtilIsInternalBuild(), (IsInternalBuild & 1) != 0)
     || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild)))
  {
    return 120 * capabilities::abs::serviceShutdownTimeoutScalingFactor((capabilities::abs *)IsInternalBuild);
  }
  else
  {
    return 30 * capabilities::abs::serviceShutdownTimeoutScalingFactor((capabilities::abs *)IsInternalBuild);
  }
}

void ABMServiceManager::ABMServiceManager(ServiceManager *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)a1 = off_251CB9A68;
  ServiceManager::ServiceManager(a1, "service.mgr");
  *v3 = off_251CB9A68;
  v4 = a2[1];
  v3[25] = *a2;
  v3[26] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

{
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)a1 = off_251CB9A68;
  ServiceManager::ServiceManager(a1, "service.mgr");
  *v3 = off_251CB9A68;
  v4 = a2[1];
  v3[25] = *a2;
  v3[26] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

double ABMServiceManager::create@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  ServiceManager *v4;
  ServiceManager *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  double result;
  uint64_t v14;
  std::__shared_weak_count *v15;
  ABMServiceManager *v16[2];

  v4 = (ServiceManager *)operator new(0xD8uLL);
  v5 = v4;
  v6 = (std::__shared_weak_count *)a1[1];
  v14 = *a1;
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  *(_QWORD *)v4 = off_251CB9A68;
  ServiceManager::ServiceManager(v4, "service.mgr");
  *(_QWORD *)v5 = off_251CB9A68;
  *((_QWORD *)v5 + 25) = v14;
  *((_QWORD *)v5 + 26) = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v16[0] = (ABMServiceManager *)0xAAAAAAAAAAAAAAAALL;
  v16[1] = (ABMServiceManager *)0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<ABMServiceManager>::shared_ptr[abi:ne180100]<ABMServiceManager,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1},void>(v16, (uint64_t)v5);
  ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v16[0]);
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  ABMServiceManager::init(v16[0]);
  result = *(double *)v16;
  *a2 = *(_OWORD *)v16;
  return result;
}

void sub_24B87B230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B87B244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_24B87B260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_24B87B274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void ABMServiceManager::init(ABMServiceManager *this)
{
  CommandDriverFactory *v2;
  unint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  NSObject *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t v38;
  unint64_t v39;
  uint8_t buf[16];

  v38 = 0xAAAAAAAAAAAAAAAALL;
  v39 = 0xAAAAAAAAAAAAAAAALL;
  v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v3 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v2);
    v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v5 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v3 = off_2579B85E0;
  }
  v38 = v3;
  v39 = *(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v8 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (!v3)
  {
    v16 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_24B855000, v16, OS_LOG_TYPE_ERROR, "Unable to access CommandDriverFactory. BasebandManager registry will not be set in command drivers!", buf, 2u);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
      if (!v15)
        goto LABEL_49;
      goto LABEL_23;
    }
LABEL_22:
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v15)
      goto LABEL_49;
    goto LABEL_23;
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  v36 = *((_QWORD *)this + 25);
  v37 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  CommandDriverFactory::setRegistry();
  if (!v37)
    goto LABEL_22;
  v13 = &v37->__shared_owners_;
  do
    v14 = __ldaxr((unint64_t *)v13);
  while (__stlxr(v14 - 1, (unint64_t *)v13));
  if (v14)
    goto LABEL_22;
  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
  std::__shared_weak_count::__release_weak(v37);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v15)
LABEL_49:
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_23:
  v17 = *((_QWORD *)this + 9);
  v18 = std::__shared_weak_count::lock(v15);
  if (!v18)
    goto LABEL_49;
  v19 = v18;
  v33 = v17;
  v34 = v18;
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v22 = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  PowerManager::create(&v33, buf);
  v35 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  ServiceManager::init(this, (uint64_t *)&v35);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v28 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  v30 = (std::__shared_weak_count *)v39;
  if (v39)
  {
    v31 = (unint64_t *)(v39 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_24B87B59C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_24B87B5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_24B87B5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v15 - 48);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ABMServiceManager::registerGlobalServices(ABMServiceManager *this)
{
  NSObject *v1;
  char *v2;
  ABMServiceManager *v3;
  _QWORD block[6];

  v3 = this;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager22registerGlobalServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = (char *)this + 72;
  block[5] = &v3;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ABMServiceManager::registerDynamicServices(ABMServiceManager *this)
{
  NSObject *v1;
  char *v2;
  ABMServiceManager *v3;
  _QWORD block[6];

  v3 = this;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager23registerDynamicServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = (char *)this + 72;
  block[5] = &v3;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ABMServiceManager::~ABMServiceManager(ABMServiceManager *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_251CB9A68;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    ServiceManager::~ServiceManager(this);
  }
  else
  {
LABEL_5:
    ServiceManager::~ServiceManager(this);
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)this = off_251CB9A68;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    ServiceManager::~ServiceManager(this);
  }
  else
  {
LABEL_5:
    ServiceManager::~ServiceManager(this);
  }
  operator delete(v5);
}

uint64_t ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_24B87BA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_24B87BAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<ABMServiceManager>::shared_ptr[abi:ne180100]<ABMServiceManager,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_251CB9B10;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_24B87BBBC(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1}::operator() const(ABMServiceManager*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_24B87BBDC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ABMServiceManager *,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager *)#1},std::allocator<ABMServiceManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMServiceManager *,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager *)#1},std::allocator<ABMServiceManager>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1}::operator() const(ABMServiceManager*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<ABMServiceManager *,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager *)#1},std::allocator<ABMServiceManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110share"
                     "d_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt"
                                "3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1}::operator() const(ABMServiceManager*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager22registerGlobalServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  v3 = *(std::__shared_weak_count **)(*v1 + 80);
  if (!v3 || (v4 = *(_QWORD *)(v2 + 72), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  v23 = v4;
  v24 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  LogTracker::create(&v23, &v25);
  v11 = v25;
  if (v25)
  {
    v12 = v26;
    v27 = v25;
    v28 = v26;
    if (v26)
    {
      v13 = (unint64_t *)&v26->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = *(_QWORD **)(v2 + 128);
    if ((unint64_t)v15 >= *(_QWORD *)(v2 + 136))
    {
      v16 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 120), (uint64_t)&v27);
      v17 = v28;
      *(_QWORD *)(v2 + 128) = v16;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    else
    {
      *v15 = v11;
      v15[1] = v12;
      *(_QWORD *)(v2 + 128) = v15 + 2;
    }
  }
  v20 = v26;
  if (v26)
  {
    v21 = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
}

char *std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>(char **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v2 = (a1[1] - *a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
  v5 = a1[2] - *a1;
  if (v5 >> 3 > v3)
    v3 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  if (v7 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v2];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = v11 + 16;
  v13 = &v10[v9];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v15 - 1);
      v15 -= 16;
      *((_OWORD *)v11 - 1) = v16;
      v11 -= 16;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
    }
    while (v15 != v14);
    v15 = *a1;
    v17 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
    while (v17 != v15)
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v17 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v12;
}

void ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager23registerDynamicServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  char *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t *v61;
  char *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t *v81;
  char *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t *v101;
  char *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t *v121;
  char *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;

  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  v3 = *(std::__shared_weak_count **)(*v1 + 80);
  if (!v3)
    goto LABEL_166;
  v4 = *(_QWORD *)(v2 + 72);
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    goto LABEL_166;
  v6 = v5;
  v151 = v4;
  v152 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v11 = *(std::__shared_weak_count **)(v2 + 208);
  v149 = *(_QWORD *)(v2 + 200);
  v150 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  TransportModule::create(&v151, &v149, &v153);
  v14 = v153;
  if (v153)
  {
    v15 = v154;
    v155 = v153;
    v156 = v154;
    if (v154)
    {
      v16 = (unint64_t *)&v154->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = *(uint64_t **)(v2 + 152);
    if ((unint64_t)v18 >= *(_QWORD *)(v2 + 160))
    {
      v19 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v155);
      v20 = v156;
      *(_QWORD *)(v2 + 152) = v19;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
    else
    {
      *v18 = v14;
      v18[1] = (uint64_t)v15;
      *(_QWORD *)(v2 + 152) = v18 + 2;
    }
  }
  v23 = v154;
  if (v154)
  {
    v24 = (unint64_t *)&v154->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v150;
  if (v150)
  {
    v27 = (unint64_t *)&v150->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v152)
    std::__shared_weak_count::__release_weak(v152);
  v29 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v29)
    goto LABEL_166;
  v30 = *(_QWORD *)(v2 + 72);
  v31 = std::__shared_weak_count::lock(v29);
  if (!v31)
    goto LABEL_166;
  v32 = v31;
  v145 = v30;
  v146 = v31;
  v33 = (unint64_t *)&v31->__shared_weak_owners_;
  do
    v34 = __ldxr(v33);
  while (__stxr(v34 + 1, v33));
  v35 = (unint64_t *)&v31->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v32);
  }
  RadioModule::create(&v145, &v147);
  v37 = v147;
  if (v147)
  {
    v38 = v148;
    v155 = v147;
    v156 = v148;
    if (v148)
    {
      v39 = (unint64_t *)&v148->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = *(uint64_t **)(v2 + 152);
    if ((unint64_t)v41 >= *(_QWORD *)(v2 + 160))
    {
      v42 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v155);
      v43 = v156;
      *(_QWORD *)(v2 + 152) = v42;
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
    }
    else
    {
      *v41 = v37;
      v41[1] = (uint64_t)v38;
      *(_QWORD *)(v2 + 152) = v41 + 2;
    }
  }
  v46 = v148;
  if (v148)
  {
    v47 = (unint64_t *)&v148->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v146)
    std::__shared_weak_count::__release_weak(v146);
  v49 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v49)
    goto LABEL_166;
  v50 = *(_QWORD *)(v2 + 72);
  v51 = std::__shared_weak_count::lock(v49);
  if (!v51)
    goto LABEL_166;
  v52 = v51;
  v141 = v50;
  v142 = v51;
  v53 = (unint64_t *)&v51->__shared_weak_owners_;
  do
    v54 = __ldxr(v53);
  while (__stxr(v54 + 1, v53));
  v55 = (unint64_t *)&v51->__shared_owners_;
  do
    v56 = __ldaxr(v55);
  while (__stlxr(v56 - 1, v55));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v52);
  }
  Simulator::create(&v141, &v143);
  v57 = v143;
  if (v143)
  {
    v58 = v144;
    v155 = v143;
    v156 = v144;
    if (v144)
    {
      v59 = (unint64_t *)&v144->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    v61 = *(uint64_t **)(v2 + 152);
    if ((unint64_t)v61 >= *(_QWORD *)(v2 + 160))
    {
      v62 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v155);
      v63 = v156;
      *(_QWORD *)(v2 + 152) = v62;
      if (v63)
      {
        v64 = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
    }
    else
    {
      *v61 = v57;
      v61[1] = (uint64_t)v58;
      *(_QWORD *)(v2 + 152) = v61 + 2;
    }
  }
  v66 = v144;
  if (v144)
  {
    v67 = (unint64_t *)&v144->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v142)
    std::__shared_weak_count::__release_weak(v142);
  v69 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v69)
    goto LABEL_166;
  v70 = *(_QWORD *)(v2 + 72);
  v71 = std::__shared_weak_count::lock(v69);
  if (!v71)
    goto LABEL_166;
  v72 = v71;
  v137 = v70;
  v138 = v71;
  v73 = (unint64_t *)&v71->__shared_weak_owners_;
  do
    v74 = __ldxr(v73);
  while (__stxr(v74 + 1, v73));
  v75 = (unint64_t *)&v71->__shared_owners_;
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v72);
  }
  TraceManager::create(&v137, &v139);
  v77 = v139;
  if (v139)
  {
    v78 = v140;
    v155 = v139;
    v156 = v140;
    if (v140)
    {
      v79 = (unint64_t *)&v140->__shared_owners_;
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }
    v81 = *(uint64_t **)(v2 + 152);
    if ((unint64_t)v81 >= *(_QWORD *)(v2 + 160))
    {
      v82 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v155);
      v83 = v156;
      *(_QWORD *)(v2 + 152) = v82;
      if (v83)
      {
        v84 = (unint64_t *)&v83->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
    }
    else
    {
      *v81 = v77;
      v81[1] = (uint64_t)v78;
      *(_QWORD *)(v2 + 152) = v81 + 2;
    }
  }
  v86 = v140;
  if (v140)
  {
    v87 = (unint64_t *)&v140->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (v138)
    std::__shared_weak_count::__release_weak(v138);
  v89 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v89)
    goto LABEL_166;
  v90 = *(_QWORD *)(v2 + 72);
  v91 = std::__shared_weak_count::lock(v89);
  if (!v91)
    goto LABEL_166;
  v92 = v91;
  v133 = v90;
  v134 = v91;
  v93 = (unint64_t *)&v91->__shared_weak_owners_;
  do
    v94 = __ldxr(v93);
  while (__stxr(v94 + 1, v93));
  v95 = (unint64_t *)&v91->__shared_owners_;
  do
    v96 = __ldaxr(v95);
  while (__stlxr(v96 - 1, v95));
  if (!v96)
  {
    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
    std::__shared_weak_count::__release_weak(v92);
  }
  AWDModule::create(&v133, &v135);
  v97 = v135;
  if (v135)
  {
    v98 = v136;
    v155 = v135;
    v156 = v136;
    if (v136)
    {
      v99 = (unint64_t *)&v136->__shared_owners_;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    v101 = *(uint64_t **)(v2 + 152);
    if ((unint64_t)v101 >= *(_QWORD *)(v2 + 160))
    {
      v102 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v155);
      v103 = v156;
      *(_QWORD *)(v2 + 152) = v102;
      if (v103)
      {
        v104 = (unint64_t *)&v103->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
    }
    else
    {
      *v101 = v97;
      v101[1] = (uint64_t)v98;
      *(_QWORD *)(v2 + 152) = v101 + 2;
    }
  }
  v106 = v136;
  if (v136)
  {
    v107 = (unint64_t *)&v136->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  if (v134)
    std::__shared_weak_count::__release_weak(v134);
  v109 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v109 || (v110 = *(_QWORD *)(v2 + 72), (v111 = std::__shared_weak_count::lock(v109)) == 0))
LABEL_166:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v112 = v111;
  v129 = v110;
  v130 = v111;
  v113 = (unint64_t *)&v111->__shared_weak_owners_;
  do
    v114 = __ldxr(v113);
  while (__stxr(v114 + 1, v113));
  v115 = (unint64_t *)&v111->__shared_owners_;
  do
    v116 = __ldaxr(v115);
  while (__stlxr(v116 - 1, v115));
  if (!v116)
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v112);
  }
  BootModule::create(&v129, &v131);
  v117 = v131;
  if (v131)
  {
    v118 = v132;
    v155 = v131;
    v156 = v132;
    if (v132)
    {
      v119 = (unint64_t *)&v132->__shared_owners_;
      do
        v120 = __ldxr(v119);
      while (__stxr(v120 + 1, v119));
    }
    v121 = *(uint64_t **)(v2 + 152);
    if ((unint64_t)v121 >= *(_QWORD *)(v2 + 160))
    {
      v122 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v155);
      v123 = v156;
      *(_QWORD *)(v2 + 152) = v122;
      if (v123)
      {
        v124 = (unint64_t *)&v123->__shared_owners_;
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
    }
    else
    {
      *v121 = v117;
      v121[1] = (uint64_t)v118;
      *(_QWORD *)(v2 + 152) = v121 + 2;
    }
  }
  v126 = v132;
  if (v132)
  {
    v127 = (unint64_t *)&v132->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  if (v130)
    std::__shared_weak_count::__release_weak(v130);
}

uint64_t __cxx_global_var_init_7()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_24B855000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_24B855000);
  }
  return result;
}

uint64_t __cxx_global_var_init_8()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_24B855000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_24B855000);
  }
  return result;
}

uint64_t util::apfs::is_transcription_pending(util::apfs *this)
{
  NSObject *v1;
  NSObject *v2;
  const char *v3;
  NSObject *v4;
  NSObject *v5;
  uint32_t v6;
  NSObject *v7;
  NSObject *v9;
  NSObject *v10;
  uint8_t buf[4];
  _BYTE v12[12];
  statfs v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  bzero(&v13, 0x878uLL);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
  v1 = *(NSObject **)&v12[4];
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v1, OS_LOG_TYPE_DEFAULT, "Checking if disk requires APFS transcription", buf, 2u);
  }
  if (statfs("/private/var", &v13))
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    v2 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_11;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v12 = "/private/var";
    v3 = "Failed to statfs: %s";
    v4 = v2;
LABEL_9:
    v6 = 12;
LABEL_10:
    _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, v3, buf, v6);
    goto LABEL_11;
  }
  if (strlen(v13.f_mntfromname) - 1024 <= 0xFFFFFFFFFFFFFC00)
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    v5 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      goto LABEL_11;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v12 = v13.f_mntfromname;
    v3 = "Failed to get mount point: %s";
    v4 = v5;
    goto LABEL_9;
  }
  if (APFSVolumeRole())
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    v9 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v12 = 0;
      v3 = "APFS volume role error: %d";
      v4 = v9;
      v6 = 8;
      goto LABEL_10;
    }
  }
  else
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    v10 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v3 = "APFS volume role does not match";
      v4 = v10;
      v6 = 2;
      goto LABEL_10;
    }
  }
LABEL_11:
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
  v7 = *(NSObject **)&v12[4];
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v12 = 0;
    _os_log_impl(&dword_24B855000, v7, OS_LOG_TYPE_DEFAULT, "APFS needs crypto migration: %d", buf, 8u);
  }
  return 0;
}

void sub_24B87D208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_ea8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_ea8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_24B87D348(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_24B87D35C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_24B87D588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_24B87E1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  __cxa_guard_abort(&qword_2579B8B38);

  _Unwind_Resume(a1);
}

void sub_24B87E434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,dispatch_object_t object)
{
  void **v25;

  if (object)
    dispatch_release(object);

  support::ui::NotificationInfo::~NotificationInfo(v25);
  _Unwind_Resume(a1);
}

void sub_24B87E45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_24B87EB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, dispatch_object_t object, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

void CallBackData::~CallBackData(void **this)
{
  NSObject *v2;

  if (*((char *)this + 39) < 0)
  {
    operator delete(this[2]);
    v2 = this[1];
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = this[1];
  if (v2)
LABEL_3:
    dispatch_release(v2);
LABEL_4:

}

void support::ui::NotificationInfo::~NotificationInfo(void **this)
{
  if (*((char *)this + 71) < 0)
  {
    operator delete(this[6]);
    if ((*((char *)this + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 23) & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(*this);
      return;
    }
  }
  else if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    goto LABEL_7;
}

void __copy_helper_block_ea8_40c35_ZTSN7support2ui16NotificationInfoE112c18_ZTS12CallBackData(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  void *v9;
  NSObject *v10;
  std::string *v11;
  __int128 v12;

  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
    v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
    v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)(a2 + 64);
      v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 80);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
LABEL_6:
  v7 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  v9 = _Block_copy(*(const void **)(a2 + 112));
  v10 = *(NSObject **)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v9;
  *(_QWORD *)(a1 + 120) = v10;
  if (v10)
    dispatch_retain(v10);
  v11 = (std::string *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
}

void sub_24B87EED8(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  NSObject *v4;

  v4 = *(NSObject **)(v2 + 120);
  if (v4)
    dispatch_release(v4);

  support::ui::NotificationInfo::~NotificationInfo(v1);
  _Unwind_Resume(a1);
}

void sub_24B87EF00(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 87) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v2 + 63) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v2 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_40c35_ZTSN7support2ui16NotificationInfoE112c18_ZTS12CallBackData(uint64_t a1)
{
  NSObject *v2;

  if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    v2 = *(NSObject **)(a1 + 120);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 128));
  v2 = *(NSObject **)(a1 + 120);
  if (v2)
LABEL_3:
    dispatch_release(v2);
LABEL_4:

  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        return;
LABEL_12:
      operator delete(*(void **)(a1 + 40));
      return;
    }
  }
  else if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_12;
}

void sub_24B87F480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,xpc_object_t object)
{
  if (a24 < 0)
    operator delete(__p);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void sub_24B87FE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,dispatch_object_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (object)
    dispatch_release(object);

  CallBackData::~CallBackData((void **)&a21);
  if (a32 < 0)
    operator delete(__p);
  if (a40 < 0)
  {
    operator delete(a35);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_32c18_ZTS12CallBackData(std::string *a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;
  std::string *v6;
  __int128 v7;

  v4 = _Block_copy(*(const void **)(a2 + 32));
  v5 = *(NSObject **)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = (std::string::size_type)v4;
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v5;
  if (v5)
    dispatch_retain(v5);
  v6 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_24B87FFDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  NSObject *v3;

  v3 = *(NSObject **)(v1 + 40);
  if (v3)
    dispatch_release(v3);

  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c18_ZTS12CallBackData(uint64_t a1)
{
  NSObject *v2;

  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    v2 = *(NSObject **)(a1 + 40);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = *(NSObject **)(a1 + 40);
  if (v2)
LABEL_3:
    dispatch_release(v2);
LABEL_4:

}

void support::ui::showNotification(unsigned int a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  std::string v7;
  std::string v8;
  std::string __p;

  v5 = a3;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v7 = *(std::string *)a2;
  if (*(char *)(a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  else
    v8 = *(std::string *)(a2 + 24);
  if (*(char *)(a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  else
    __p = *(std::string *)(a2 + 48);
  v6 = 0;
  support::ui::showNotification(a1, (uint64_t)&v7, v5, &v6);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_15:
    operator delete(v8.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_16;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_15;
LABEL_12:
  if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:

    return;
  }
LABEL_16:
  operator delete(v7.__r_.__value_.__l.__data_);

}

void sub_24B8801C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a11);

  _Unwind_Resume(a1);
}

void sub_24B880218(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_24B880228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);

  _Unwind_Resume(a1);
}

void support::ui::showNotification(unsigned int a1, uint64_t a2, void *a3, NSObject **a4)
{
  id v7;
  std::string::size_type size;
  unsigned __int8 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  std::string *v16;
  unsigned __int8 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  uint64_t **v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::string::size_type v55;
  __int128 v56;
  void *v57;
  NSObject *v58;
  void *v59;
  NSObject *v60;
  std::string::size_type v61;
  id v62;
  dispatch_object_t object;
  std::string __p;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string buf;
  std::string v70;
  uint8_t v71[16];
  __int128 block;
  std::string v73;

  v7 = a3;
  memset(&v70, 170, sizeof(v70));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v70 = *(std::string *)a2;
  size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
  if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v70.__r_.__value_.__l.__size_;
  if (size)
  {
    std::string::insert(&v70, 0, "com.apple.telephony.", 0x14uLL);
    goto LABEL_20;
  }
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  *(_QWORD *)&block = MEMORY[0x24BDAC760];
  *((_QWORD *)&block + 1) = 0x40000000;
  v73.__r_.__value_.__r.__words[0] = (std::string::size_type)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v73.__r_.__value_.__l.__size_ = (std::string::size_type)&__block_descriptor_tmp_13_5;
  v73.__r_.__value_.__r.__words[2] = (std::string::size_type)&GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_11;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
    {
LABEL_11:
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  v13 = *((_QWORD *)GetGlobalLogger((uint64_t *)&block) + 4);
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_24B855000, v13, OS_LOG_TYPE_DEFAULT, "#I Notification requires identifier!", (uint8_t *)&buf, 2u);
  }
LABEL_20:
  memset(&buf, 0, sizeof(buf));
  if (a1 <= 2)
  {
    v16 = std::string::__assign_external(&buf, "BasebandServicesNotification", 0x1CuLL);
    goto LABEL_33;
  }
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  *(_QWORD *)&block = MEMORY[0x24BDAC760];
  *((_QWORD *)&block + 1) = 0x40000000;
  v73.__r_.__value_.__r.__words[0] = (std::string::size_type)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v73.__r_.__value_.__l.__size_ = (std::string::size_type)&__block_descriptor_tmp_13_5;
  v73.__r_.__value_.__r.__words[2] = (std::string::size_type)&GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v18 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_27;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
LABEL_27:
  v21 = *((_QWORD *)GetGlobalLogger((uint64_t *)&block) + 4);
  if (v18)
  {
    v22 = (unint64_t *)&v18->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v16 = (std::string *)os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  if ((_DWORD)v16)
  {
    *(_WORD *)v71 = 0;
    _os_log_error_impl(&dword_24B855000, v21, OS_LOG_TYPE_ERROR, "ABM notification is not supported for the caller", v71, 2u);
    v61 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v61 = v70.__r_.__value_.__l.__size_;
    if (!v61)
      goto LABEL_130;
    goto LABEL_36;
  }
LABEL_33:
  v24 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
  if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v24 = v70.__r_.__value_.__l.__size_;
  if (!v24)
    goto LABEL_130;
LABEL_36:
  v25 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v25 = buf.__r_.__value_.__l.__size_;
  if (v25)
  {
    v26 = (uint64_t **)(a2 + 24);
    v27 = *(unsigned __int8 *)(a2 + 47);
    v28 = (char)v27;
    if ((v27 & 0x80u) != 0)
      v27 = *(_QWORD *)(a2 + 32);
    switch(v27)
    {
      case 20:
        if (v28 >= 0)
          v29 = (uint64_t *)(a2 + 24);
        else
          v29 = *v26;
        v30 = *v29;
        v31 = v29[1];
        v32 = *((_DWORD *)v29 + 4);
        if (v30 == 0x6E6F6870656C6554 && v31 == 0x525F706D75445F79 && v32 == 2036621669)
          goto LABEL_94;
        goto LABEL_96;
      case 22:
        if (v28 >= 0)
          v35 = (uint64_t *)(a2 + 24);
        else
          v35 = *v26;
        v36 = *v35;
        v37 = v35[1];
        v38 = *(uint64_t *)((char *)v35 + 14);
        if (v36 != 0x6E6F6870656C6554 || v37 != 0x535F706D75445F79 || v38 != 0x646574726174535FLL)
          goto LABEL_96;
        goto LABEL_94;
      case 23:
        if (v28 >= 0)
          v41 = (uint64_t *)(a2 + 24);
        else
          v41 = *v26;
        v42 = *v41;
        v43 = v41[1];
        v44 = *(uint64_t *)((char *)v41 + 15);
        v46 = v42 == 0x72616C756C6C6543 && v43 == 0x445F65757373495FLL && v44 == 0x6465746365746544;
        if (v46 && (a1 != 2 || (config::hw::watch((config::hw *)v16) & 1) != 0))
          break;
        goto LABEL_96;
      case 27:
        if (v28 >= 0)
          v47 = (uint64_t *)(a2 + 24);
        else
          v47 = *v26;
        v48 = *v47;
        v49 = v47[1];
        v50 = v47[2];
        v51 = *(uint64_t *)((char *)v47 + 19);
        if (v48 != 0x6E6F6870656C6554
          || v49 != 0x495F706D75445F79
          || v50 != 0x696369666675736ELL
          || v51 != 0x746E656963696666)
        {
          goto LABEL_96;
        }
LABEL_94:
        if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
          goto LABEL_96;
        break;
      default:
LABEL_96:
        v55 = *(_QWORD *)a2;
        v56 = *(_OWORD *)(a2 + 8);
        *(std::string *)a2 = v70;
        v70.__r_.__value_.__r.__words[0] = v55;
        *(_OWORD *)&v70.__r_.__value_.__r.__words[1] = v56;
        v73.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v56 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v56 + 1) = 0xAAAAAAAAAAAAAAAALL;
        block = v56;
        *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v56;
        v57 = _Block_copy(v7);
        v58 = *a4;
        *(_QWORD *)&block = v57;
        *((_QWORD *)&block + 1) = v58;
        if (v58)
          dispatch_retain(v58);
        if (*(char *)(a2 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
        }
        else
        {
          *(_OWORD *)&v73.__r_.__value_.__l.__data_ = *(_OWORD *)v26;
          v73.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v68, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        else
          v68 = buf;
        +[UserNotificationManager sharedInstance:](UserNotificationManager, "sharedInstance:", &v68);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v65 = *(std::string *)a2;
        if (*(char *)(a2 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
        }
        else
        {
          *(_OWORD *)&v66.__r_.__value_.__l.__data_ = *(_OWORD *)v26;
          v66.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
        }
        if (*(char *)(a2 + 71) < 0)
          std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
        else
          v67 = *(std::string *)(a2 + 48);
        v62 = _Block_copy((const void *)block);
        object = (dispatch_object_t)*((_QWORD *)&block + 1);
        if (*((_QWORD *)&block + 1))
          dispatch_retain(*((dispatch_object_t *)&block + 1));
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__p, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
        else
          __p = v73;
        objc_msgSend(v59, "showNotification:withCallBackData:", &v65, &v62);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (object)
          dispatch_release(object);

        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v67.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_124:
            if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_125;
            goto LABEL_137;
          }
        }
        else if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_124;
        }
        operator delete(v66.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_125:

          if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_126;
          goto LABEL_138;
        }
LABEL_137:
        operator delete(v65.__r_.__value_.__l.__data_);

        if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_126:
          if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_127;
          goto LABEL_139;
        }
LABEL_138:
        operator delete(v68.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_127:
          v60 = *((_QWORD *)&block + 1);
          if (!*((_QWORD *)&block + 1))
            goto LABEL_129;
          goto LABEL_128;
        }
LABEL_139:
        operator delete(v73.__r_.__value_.__l.__data_);
        v60 = *((_QWORD *)&block + 1);
        if (*((_QWORD *)&block + 1))
LABEL_128:
          dispatch_release(v60);
LABEL_129:

        break;
    }
  }
LABEL_130:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_132;
LABEL_134:
    operator delete(v70.__r_.__value_.__l.__data_);
    goto LABEL_132;
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_134;
LABEL_132:

}

void sub_24B880A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, dispatch_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  void *v43;
  void *v44;
  uint64_t v45;

  if (object)
    dispatch_release(object);

  support::ui::NotificationInfo::~NotificationInfo(&a15);
  if (a36 < 0)
    operator delete(__p);
  CallBackData::~CallBackData((void **)(v45 - 112));
  if (a43 < 0)
  {
    operator delete(a38);
    if ((*(char *)(v45 - 137) & 0x80000000) == 0)
    {
LABEL_7:

      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v45 - 137) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(v45 - 160));

  _Unwind_Resume(a1);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  void *v7;
  unint64_t v8;
  std::string *v9;
  unint64_t v10;
  size_t v11;
  std::string::size_type v12;
  uint64_t v13;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__n > v8)
    {
      v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __n - v8)
      {
        v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v7 = operator new(v11);
          memcpy(v7, __s, __n);
          if (v8 != 22)
            operator delete(v9);
          this->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
          this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
LABEL_23:
          this->__r_.__value_.__l.__size_ = __n;
          goto LABEL_24;
        }
LABEL_8:
        v12 = 2 * v8;
        if (__n > 2 * v8)
          v12 = __n;
        v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v13 = v12 | 7;
        if (v12 >= 0x17)
          v11 = v13 + 1;
        else
          v11 = 23;
        goto LABEL_15;
      }
LABEL_25:
      std::string::__throw_length_error[abi:ne180100]();
    }
    v6 = HIBYTE(v10);
    v7 = (void *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      if (__n - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        v8 = 22;
        v9 = this;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    goto LABEL_23;
  *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_24:
  *((_BYTE *)v7 + __n) = 0;
  return this;
}

void std::__tree<std::__value_type<std::string,CallBackData>,std::__map_value_compare<std::string,std::__value_type<std::string,CallBackData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CallBackData>>>::destroy(char *a1)
{
  NSObject *v2;

  if (!a1)
    return;
  std::__tree<std::__value_type<std::string,CallBackData>,std::__map_value_compare<std::string,std::__value_type<std::string,CallBackData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CallBackData>>>::destroy(*(_QWORD *)a1);
  std::__tree<std::__value_type<std::string,CallBackData>,std::__map_value_compare<std::string,std::__value_type<std::string,CallBackData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CallBackData>>>::destroy(*((_QWORD *)a1 + 1));
  if (a1[95] < 0)
  {
    operator delete(*((void **)a1 + 9));
    v2 = *((_QWORD *)a1 + 8);
    if (!v2)
      goto LABEL_5;
    goto LABEL_4;
  }
  v2 = *((_QWORD *)a1 + 8);
  if (v2)
LABEL_4:
    dispatch_release(v2);
LABEL_5:

  if (a1[55] < 0)
    operator delete(*((void **)a1 + 4));
  operator delete(a1);
}

void Simulator::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  uint64_t v10[2];

  v4 = operator new(0xB0uLL);
  v5 = (uint64_t)v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v10[0] = v6;
  v10[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  Simulator::Simulator((uint64_t)v4, v10);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<Simulator>::shared_ptr[abi:ne180100]<Simulator,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1},void>(a2, v5);
  ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void sub_24B880E50(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t Simulator::Simulator(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *initially_inactive;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE v20[16];
  _QWORD block[5];
  _BYTE v22[16];

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_251CC0DB8;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_251CB9EC8;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_251CB9EC8;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_251CB9C60;
  *(_QWORD *)(a1 + 48) = &unk_251CB9CD0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v20, "com.apple.telephony.abm", "simulator");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_5;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (*(_QWORD *)algn_2579B8AE8)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (*(_QWORD *)algn_2579B8AE8)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v15 = dispatch_queue_create_with_target_V2("simulator", initially_inactive, 0);
  dispatch_set_qos_class_floor(v15, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v15);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v15;
  if (v15)
  {
    dispatch_retain(v15);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v15);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_251CB9F38;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 56) = &unk_251CB85F0;
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = v10;
  if (v10)
  {
    v16 = (unint64_t *)&v10->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_251CB9FC8;
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_251CB9FC8;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  *(_QWORD *)a1 = off_251CB9C60;
  *(_QWORD *)(a1 + 48) = &unk_251CB9CD0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  return a1;
}

void sub_24B8811A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  Service *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v4 - 64));
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v2);
  _Unwind_Resume(a1);
}

void sub_24B8811DC(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

const char *Simulator::getName(Simulator *this)
{
  return "simulator";
}

void Simulator::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[5];
  dispatch_group_t group;

  v3 = a1 + 15;
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 1174405120;
  v15[2] = ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke;
  v15[3] = &__block_descriptor_tmp_5_0;
  v4 = *a2;
  v15[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<Simulator>::execute_wrapped(v3, (uint64_t)v15);
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(8uLL);
  *v9 = a1;
  v10 = a1[17];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Simulator>::execute_wrapped<Simulator::initialize(dispatch::group_session)::$_0>(Simulator::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<Simulator::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<Simulator::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  _QWORD aBlock[6];
  std::__shared_weak_count *v19;
  const void *v20;
  void *__dst[2];
  unint64_t v22;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const void *)*MEMORY[0x24BE05770];
  v11 = strlen((const char *)*MEMORY[0x24BE05770]);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = (void **)operator new(v14 + 1);
    __dst[1] = v12;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v22) = v11;
    v13 = __dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(v13, v10, (size_t)v12);
LABEL_17:
  *((_BYTE *)v12 + (_QWORD)v13) = 0;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_4_0;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v19 = v5;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = _Block_copy(aBlock);
  v20 = v17;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v20);
  if (v17)
    _Block_release(v17);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_24B881500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count *v23;
  const void *v24;

  if (v24)
    _Block_release(v24);
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_5:
      std::__shared_weak_count::__release_weak(v23);
      _Unwind_Resume(a1);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void sub_24B88155C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, void **a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  xpc_object_t object;
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x24BDAC760];
      v14[1] = 1174405120;
      v14[2] = ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v14[3] = &__block_descriptor_tmp_5;
      v10 = *a2;
      v14[4] = v7;
      object = v10;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (!*a3)
          goto LABEL_9;
      }
      else
      {
        object = xpc_null_create();
        v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlock = v11;
          ctu::SharedSynchronizable<Simulator>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v14);
          if (aBlock)
            _Block_release(aBlock);
          xpc_release(object);
          object = 0;
          goto LABEL_12;
        }
      }
      v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t value;
  int v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  xpc_object_t object;

  v2 = *(_QWORD *)(a1 + 32);
  value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x24BE05620]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v4 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  if ((v4 | 0xE0000000) != 0xE0000270)
    *(_BYTE *)(v2 + 168) = (v4 | 0xE0000000) == -536870272;
  v5 = xpc_null_create();
  v6 = *(_QWORD *)(a1 + 48);
  object = v5;
  v7 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, 3760250880, &object);
  xpc_release(object);
  xpc_release(v7);
}

void sub_24B88178C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

uint64_t Simulator::handleSimulatedPowerNotification_sync(Simulator *this, int a2)
{
  if (a2 != -536870288)
    *((_BYTE *)this + 168) = a2 == -536870272;
  return 0;
}

void *__copy_helper_block_e8_40c15_ZTSN3xpc4dictE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *result;

  v4 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    xpc_retain(v4);
    result = *(void **)(a2 + 48);
    if (!result)
      goto LABEL_6;
    goto LABEL_5;
  }
  *(_QWORD *)(a1 + 40) = xpc_null_create();
  result = *(void **)(a2 + 48);
  if (result)
LABEL_5:
    result = _Block_copy(result);
LABEL_6:
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    _Block_release(v2);
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SimulatorEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SimulatorEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 40);
    if (v3)
      dispatch_release(v3);
  }
}

void Simulator::finishInitialization_sync(std::__shared_weak_count **this)
{
  const char *v2;
  size_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  size_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  NSObject *v32;
  _QWORD v33[6];
  std::__shared_weak_count *v34;
  void *aBlock;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v38;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v41;
  __int128 v42;

  v2 = (const char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    v41 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v41) = v3;
    v5 = __dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v5, v2, (size_t)v4);
LABEL_9:
  *((_BYTE *)v4 + (_QWORD)v5) = 0;
  cf = 0;
  AppleBasebandManager::create();
  v8 = v42;
  v42 = 0uLL;
  v9 = this[20];
  *(_OWORD *)(this + 19) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_18;
  v13 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_18:
    v15 = cf;
    if (!cf)
      goto LABEL_20;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  v15 = cf;
  if (cf)
LABEL_19:
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v41) < 0)
    operator delete(__dst[0]);
  v16 = this[16];
  if (!v16 || (v17 = this[15], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v22 = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  v24 = (const void *)*MEMORY[0x24BE05540];
  v25 = strlen((const char *)*MEMORY[0x24BE05540]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v27 = operator new(v28 + 1);
    __p[1] = v26;
    v38 = v29 | 0x8000000000000000;
    __p[0] = v27;
  }
  else
  {
    HIBYTE(v38) = v25;
    v27 = __p;
    if (!v25)
      goto LABEL_38;
  }
  memmove(v27, v24, (size_t)v26);
LABEL_38:
  *((_BYTE *)v26 + (_QWORD)v27) = 0;
  v33[0] = MEMORY[0x24BDAC760];
  v33[1] = 1174405120;
  v33[2] = ___ZN9Simulator25finishInitialization_syncEv_block_invoke;
  v33[3] = &__block_descriptor_tmp_7;
  v33[4] = this;
  v33[5] = v17;
  v34 = v19;
  do
    v30 = __ldxr(p_shared_weak_owners);
  while (__stxr(v30 + 1, p_shared_weak_owners));
  v31 = _Block_copy(v33);
  v32 = this[17];
  if (v32)
    dispatch_retain((dispatch_object_t)this[17]);
  aBlock = v31;
  object = v32;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  AppleBasebandManager::eventsOn((AppleBasebandManager *)this[19]);
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  std::__shared_weak_count::__release_weak(v19);
}

void sub_24B881C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__shared_weak_count *v30;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN9Simulator25finishInitialization_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5] && *(_BYTE *)(v3 + 168))
      {
        v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I Baseband reset during simulated low power, simulating exit low power", v9, 2u);
        }
        *(_BYTE *)(v3 + 168) = 0;
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

uint64_t dispatch::callback<void({block_pointer})(std::shared_ptr<abm::client::Event>)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

_BYTE *Simulator::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void Simulator::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t *v4;
  NSObject *v5;
  _QWORD v6[4];
  dispatch_group_t group;
  char v8;

  v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 1174405120;
  v6[2] = ___ZN9Simulator8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_8_0;
  v5 = *a3;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v8 = a2;
  ctu::SharedSynchronizable<Simulator>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void __copy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 32);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void __destroy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 32);
    if (v3)
      dispatch_release(v3);
  }
}

void Simulator::~Simulator(Simulator *this)
{
  void *v1;

  Simulator::~Simulator(this);
  operator delete(v1);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;

  *(_QWORD *)this = off_251CB9C60;
  *((_QWORD *)this + 6) = &unk_251CB9CD0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_QWORD *)this + 6) = off_251CB9F38;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v5 = *((_QWORD *)this + 18);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)this + 17);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  *(_QWORD *)this = off_251CC0DB8;
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    v9 = *((_QWORD *)this + 4);
    v10 = (void *)*((_QWORD *)this + 3);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0)
          operator delete(*(void **)(v9 - 24));
        v9 -= 24;
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v8;
    operator delete(v10);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

void `non-virtual thunk to'Simulator::~Simulator(Simulator *this)
{
  Simulator::~Simulator((Simulator *)((char *)this - 48));
}

{
  void *v1;

  Simulator::~Simulator((Simulator *)((char *)this - 48));
  operator delete(v1);
}

uint64_t ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CB9F38;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CB9F38;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_24B882300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_24B88231C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<Simulator>::shared_ptr[abi:ne180100]<Simulator,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_251CB9F78;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_24B882438(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1}::operator() const(Simulator*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_24B882458(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<Simulator *,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator *)#1},std::allocator<Simulator>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<Simulator *,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator *)#1},std::allocator<Simulator>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1}::operator() const(Simulator*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<Simulator *,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator *)#1},std::allocator<Simulator>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1}::operator() const(Simulator*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::SharedLoggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CB9F38;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CB9F38;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ctu::SharedSynchronizable<Simulator>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI9SimulatorE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_251CBA000;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI9SimulatorE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9SimulatorEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9SimulatorEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void dispatch::async<void ctu::SharedSynchronizable<Simulator>::execute_wrapped<Simulator::initialize(dispatch::group_session)::$_0>(Simulator::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<Simulator::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<Simulator::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count ***v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(std::__shared_weak_count ****)a1;
  Simulator::finishInitialization_sync(**(std::__shared_weak_count ****)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_24B8827F4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_2()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_24B855000);
  }
  return result;
}

void TransportService::create(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t MipcTransportService::MipcTransportService(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  NSObject *initially_inactive;
  NSObject *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _BYTE v28[16];
  _BYTE v29[16];
  _BYTE v30[16];

  *(_QWORD *)a1 = off_251CBA040;
  *(_QWORD *)(a1 + 104) = &unk_251CBA0F0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v28, "com.apple.telephony.abm", "ipc.svc.mipc");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v11 = dispatch_queue_create_with_target_V2("ipc.svc.mipc", initially_inactive, 0);
  dispatch_set_qos_class_floor(v11, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v11);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v11;
  if (v11)
  {
    dispatch_retain(v11);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v11);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_251CBA330;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v30);
  *(_QWORD *)(a1 + 8) = &unk_251CB85F0;
  *(_QWORD *)(a1 + 56) = *a2;
  v12 = a2[1];
  *(_QWORD *)(a1 + 64) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v29);
  *(_QWORD *)a1 = off_251CBA370;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v28);
  v15 = *a5;
  v16 = (std::__shared_weak_count *)a5[1];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 104) = &unk_251CBA2B0;
    *(_QWORD *)(a1 + 112) = v15;
    *(_QWORD *)(a1 + 120) = v16;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 104) = &unk_251CBA2B0;
    *(_QWORD *)(a1 + 112) = v15;
    *(_QWORD *)(a1 + 120) = 0;
  }
  *(_QWORD *)a1 = off_251CBA040;
  *(_QWORD *)(a1 + 104) = &unk_251CBA0F0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = *a3;
  v21 = a3[1];
  *(_QWORD *)(a1 + 192) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_QWORD *)(a1 + 200) = *a4;
  v24 = a4[1];
  *(_QWORD *)(a1 + 208) = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 16);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  std::string::append((std::string *)(a1 + 216), 0x100uLL, 0);
  return a1;
}

void sub_24B882B1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  TransportService *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  std::__shared_weak_count *v9;
  NSObject *v10;

  if (*(char *)(v1 + 239) < 0)
  {
    operator delete(*v7);
    v9 = *(std::__shared_weak_count **)(v1 + 208);
    if (!v9)
    {
LABEL_3:
      std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v6);
      std::unique_ptr<support::misc::Watchdog>::~unique_ptr[abi:ne180100](v3);
      v10 = *(NSObject **)(v1 + 168);
      if (!v10)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v9 = *(std::__shared_weak_count **)(v1 + 208);
    if (!v9)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v6);
  std::unique_ptr<support::misc::Watchdog>::~unique_ptr[abi:ne180100](v3);
  v10 = *(NSObject **)(v1 + 168);
  if (!v10)
  {
LABEL_5:
    dispatch::callback<void({block_pointer})(WakeReason)>::~callback(v5);
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v4);
    TransportService::~TransportService(v2);
    ctu::SharedLoggable<MipcTransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable((_QWORD *)v1);
    _Unwind_Resume(a1);
  }
LABEL_4:
  dispatch_release(v10);
  goto LABEL_5;
}

void sub_24B882BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  _QWORD *v13;

  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

const char *MipcTransportService::getName(MipcTransportService *this)
{
  return "ipc.svc.mipc";
}

void **std::unique_ptr<support::misc::Watchdog>::~unique_ptr[abi:ne180100](void **a1)
{
  void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v2);
  }
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(WakeReason)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void TransportService::~TransportService(TransportService *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &unk_251CBA2B0;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *ctu::SharedLoggable<MipcTransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBA330;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBA330;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void MipcTransportService::~MipcTransportService(MipcTransportService *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  uint8_t v21[16];

  *(_QWORD *)this = off_251CBA040;
  *((_QWORD *)this + 13) = &unk_251CBA0F0;
  MipcTransportService::cancelWakeRequest_sync(this);
  v2 = dispatch_group_create();
  dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if ((*((char *)this + 239) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_37:
    operator delete(*((void **)this + 27));
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
    if (!v4)
      goto LABEL_7;
    goto LABEL_6;
  }
  *(_WORD *)v21 = 0;
  _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I Gone!", v21, 2u);
  if (*((char *)this + 239) < 0)
    goto LABEL_37;
LABEL_5:
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v4)
LABEL_6:
    std::__shared_weak_count::__release_weak(v4);
LABEL_7:
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (!v5)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
LABEL_11:
    v8 = (void *)*((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = 0;
    if (!v8)
      goto LABEL_13;
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v8 = (void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v8)
  {
LABEL_12:
    TelephonyBasebandWatchdogStop();
    operator delete(v8);
  }
LABEL_13:
  v9 = *((_QWORD *)this + 21);
  if (v9)
    dispatch_release(v9);
  v10 = *((_QWORD *)this + 20);
  if (v10)
    dispatch_release(v10);
  v11 = (const void *)*((_QWORD *)this + 19);
  if (v11)
    _Block_release(v11);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *((_QWORD *)this + 13) = &unk_251CBA2B0;
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)this = off_251CBA330;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v18 = *((_QWORD *)this + 12);
  if (v18)
    dispatch_release(v18);
  v19 = *((_QWORD *)this + 11);
  if (v19)
    dispatch_release(v19);
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
}

{
  void *v1;

  MipcTransportService::~MipcTransportService(this);
  operator delete(v1);
}

void MipcTransportService::shutdown_sync(MipcTransportService *this)
{
  NSObject *v1;

  MipcTransportService::cancelWakeRequest_sync(this);
  v1 = dispatch_group_create();
  dispatch_group_wait(v1, 0xFFFFFFFFFFFFFFFFLL);
  if (v1)
    dispatch_release(v1);
}

const char *`non-virtual thunk to'MipcTransportService::getName(MipcTransportService *this)
{
  return "ipc.svc.mipc";
}

void MipcTransportService::cancelWakeRequest_sync(MipcTransportService *this)
{
  NSObject *v2;
  NSObject *v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  const void *v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  const void *v16;
  void *v17;
  NSObject *v18;
  uint64_t block;
  uint64_t v20;
  void (*v21)(uint64_t);
  void *v22;
  void *aBlock;
  int v24;
  xpc_object_t object;

  v2 = *((_QWORD *)this + 21);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = 0;
    if (v3)
      dispatch_release(v3);
    if (*((_QWORD *)this + 19) && *((_QWORD *)this + 20))
    {
      if (*((char *)this + 239) < 0)
      {
        if (*((_QWORD *)this + 28))
          goto LABEL_8;
      }
      else if (*((_BYTE *)this + 239))
      {
LABEL_8:
        v4 = xpc_dictionary_create(0, 0, 0);
        if (v4 || (v4 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x24BD2A468](v4) == MEMORY[0x24BDACFA0])
          {
            xpc_retain(v4);
            v5 = v4;
          }
          else
          {
            v5 = xpc_null_create();
          }
        }
        else
        {
          v5 = xpc_null_create();
          v4 = 0;
        }
        xpc_release(v4);
        v10 = (char *)this + 216;
        if (*((char *)this + 239) < 0)
          v10 = *(const char **)v10;
        v11 = xpc_string_create(v10);
        if (!v11)
          v11 = xpc_null_create();
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x24BE05128], v11);
        v12 = xpc_null_create();
        xpc_release(v11);
        xpc_release(v12);
        v13 = xpc_BOOL_create(*((_BYTE *)this + 240));
        if (!v13)
          v13 = xpc_null_create();
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x24BE056C0], v13);
        v14 = xpc_null_create();
        xpc_release(v13);
        xpc_release(v14);
        if (v5)
        {
          xpc_retain(v5);
          v15 = v5;
          v16 = (const void *)*((_QWORD *)this + 19);
          if (v16)
          {
LABEL_36:
            v17 = _Block_copy(v16);
            goto LABEL_39;
          }
        }
        else
        {
          v15 = xpc_null_create();
          v16 = (const void *)*((_QWORD *)this + 19);
          if (v16)
            goto LABEL_36;
        }
        v17 = 0;
LABEL_39:
        v18 = *((_QWORD *)this + 20);
        block = MEMORY[0x24BDAC760];
        v20 = 1174405120;
        v21 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke;
        v22 = &__block_descriptor_tmp_24_0;
        if (v17)
        {
          aBlock = _Block_copy(v17);
          v24 = 3;
          object = v15;
          if (v15)
          {
LABEL_41:
            xpc_retain(v15);
LABEL_44:
            dispatch_async(v18, &block);
            xpc_release(object);
            object = 0;
            if (aBlock)
              _Block_release(aBlock);
            if (v17)
              _Block_release(v17);
            xpc_release(v15);
            xpc_release(v5);
            return;
          }
        }
        else
        {
          aBlock = 0;
          v24 = 3;
          object = v15;
          if (v15)
            goto LABEL_41;
        }
        object = xpc_null_create();
        goto LABEL_44;
      }
      v6 = xpc_null_create();
      v7 = (const void *)*((_QWORD *)this + 19);
      if (v7)
        v8 = _Block_copy(v7);
      else
        v8 = 0;
      v9 = *((_QWORD *)this + 20);
      block = MEMORY[0x24BDAC760];
      v20 = 1174405120;
      v21 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke;
      v22 = &__block_descriptor_tmp_24_0;
      if (v8)
      {
        aBlock = _Block_copy(v8);
        v24 = 4;
        object = v6;
        if (v6)
        {
LABEL_19:
          xpc_retain(v6);
LABEL_22:
          dispatch_async(v9, &block);
          xpc_release(object);
          object = 0;
          if (aBlock)
            _Block_release(aBlock);
          if (v8)
            _Block_release(v8);
          xpc_release(v6);
          return;
        }
      }
      else
      {
        aBlock = 0;
        v24 = 4;
        object = v6;
        if (v6)
          goto LABEL_19;
      }
      object = xpc_null_create();
      goto LABEL_22;
    }
  }
}

void MipcTransportService::shutdown(MipcTransportService *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = ___ZN20MipcTransportService8shutdownEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_6;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI20MipcTransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_9;
  block[4] = (char *)this + 72;
  block[5] = &v4;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ___ZN20MipcTransportService8shutdownEv_block_invoke(uint64_t a1)
{
  NSObject *v1;

  MipcTransportService::cancelWakeRequest_sync(*(MipcTransportService **)(a1 + 32));
  v1 = dispatch_group_create();
  dispatch_group_wait(v1, 0xFFFFFFFFFFFFFFFFLL);
  if (v1)
    dispatch_release(v1);
}

void `non-virtual thunk to'MipcTransportService::shutdown(MipcTransportService *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = ___ZN20MipcTransportService8shutdownEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_6;
  v3[4] = (char *)this - 104;
  v4 = v3;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI20MipcTransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_9;
  block[4] = (char *)this - 32;
  block[5] = &v4;
  v2 = (char *)this - 16;
  v1 = *((_QWORD *)this - 2);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void MipcTransportService::init(MipcTransportService *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<MipcTransportService>::execute_wrapped<MipcTransportService::init(void)::$_0>(MipcTransportService::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<MipcTransportService::init(void)::$_0,dispatch_queue_s *::default_delete<MipcTransportService::init(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void `non-virtual thunk to'MipcTransportService::init(MipcTransportService *this)
{
  MipcTransportService::init((MipcTransportService *)((char *)this - 104));
}

BOOL MipcTransportService::engage(MipcTransportService *this)
{
  NSObject *v1;
  char *v2;
  MipcTransportService *v4;
  _QWORD v5[6];
  _QWORD *v6;
  uint64_t block;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  void *v10;
  char *v11;
  _QWORD *v12;
  char v13;

  v4 = this;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK3ctu20SharedSynchronizableI20MipcTransportServiceE20execute_wrapped_syncIZNS1_6engageEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  v5[3] = &__block_descriptor_tmp_14;
  v5[4] = (char *)this + 72;
  v5[5] = &v4;
  v6 = v5;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
  {
    v13 = -86;
    block = MEMORY[0x24BDAC760];
    v8 = 0x40000000;
    v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v10 = &__block_descriptor_tmp_19;
    v11 = &v13;
    v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    v13 = -86;
    block = MEMORY[0x24BDAC760];
    v8 = 0x40000000;
    v9 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v10 = &__block_descriptor_tmp_18;
    v11 = &v13;
    v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13 != 0;
}

BOOL `non-virtual thunk to'MipcTransportService::engage(MipcTransportService *this)
{
  NSObject *v1;
  char *v2;
  char *v4;
  _QWORD v5[6];
  _QWORD *v6;
  uint64_t block;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  void *v10;
  char *v11;
  _QWORD *v12;
  char v13;

  v4 = (char *)this - 104;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK3ctu20SharedSynchronizableI20MipcTransportServiceE20execute_wrapped_syncIZNS1_6engageEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  v5[3] = &__block_descriptor_tmp_14;
  v5[4] = (char *)this - 32;
  v5[5] = &v4;
  v6 = v5;
  v2 = (char *)this - 16;
  v1 = *((_QWORD *)this - 2);
  if (*((_QWORD *)v2 + 1))
  {
    v13 = -86;
    block = MEMORY[0x24BDAC760];
    v8 = 0x40000000;
    v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v10 = &__block_descriptor_tmp_19;
    v11 = &v13;
    v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    v13 = -86;
    block = MEMORY[0x24BDAC760];
    v8 = 0x40000000;
    v9 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v10 = &__block_descriptor_tmp_18;
    v11 = &v13;
    v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13 != 0;
}

void MipcTransportService::resetBaseband_sync(_QWORD *a1, const char *a2)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  std::__shared_weak_count *v9;
  const char *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  const char *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  uint64_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  __int128 *p_buf;
  uint64_t v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  const void *v27;
  xpc_object_t object;
  uint64_t v29;
  std::__shared_weak_count *v30;
  __int128 buf;
  unint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    if (a2[23] >= 0)
      v10 = a2;
    else
      v10 = *(const char **)a2;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v10;
    _os_log_error_impl(&dword_24B855000, v4, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
    v5 = (std::__shared_weak_count *)a1[26];
    if (!v5)
      return;
  }
  else
  {
    v5 = (std::__shared_weak_count *)a1[26];
    if (!v5)
      return;
  }
  v6 = std::__shared_weak_count::lock(v5);
  v30 = v6;
  if (!v6)
    return;
  v29 = a1[25];
  if (!v29)
  {
    v9 = v6;
LABEL_39:
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return;
  }
  v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v7) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v7);
      v8 = v7;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    v7 = 0;
  }
  xpc_release(v7);
  v11 = xpc_string_create((const char *)*MEMORY[0x24BE051D0]);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x24BE051A0], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_string_create((const char *)*MEMORY[0x24BE057C0]);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x24BE05398], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (a2[23] >= 0)
    v15 = a2;
  else
    v15 = *(const char **)a2;
  v16 = xpc_string_create(v15);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x24BE052E8], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = v29;
  v19 = (const void *)*MEMORY[0x24BE05170];
  v20 = strlen((const char *)*MEMORY[0x24BE05170]);
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    p_buf = (__int128 *)operator new(v23 + 1);
    *((_QWORD *)&buf + 1) = v21;
    v32 = v24 | 0x8000000000000000;
    *(_QWORD *)&buf = p_buf;
LABEL_34:
    memmove(p_buf, v19, v21);
    *((_BYTE *)p_buf + v21) = 0;
    object = v8;
    if (v8)
      goto LABEL_30;
    goto LABEL_35;
  }
  HIBYTE(v32) = v20;
  p_buf = &buf;
  if (v20)
    goto LABEL_34;
  LOBYTE(buf) = 0;
  object = v8;
  if (v8)
  {
LABEL_30:
    xpc_retain(v8);
    goto LABEL_36;
  }
LABEL_35:
  object = xpc_null_create();
LABEL_36:
  v27 = 0;
  Service::runCommand(v18, (uint64_t)&buf, &object, &v27);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v32) < 0)
    operator delete((void *)buf);
  xpc_release(v8);
  v9 = v30;
  if (v30)
    goto LABEL_39;
}

void sub_24B883B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t MipcTransportService::recover(MipcTransportService *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'MipcTransportService::recover(MipcTransportService *this)
{
  return 1;
}

void MipcTransportService::enterLowPower(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[11];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<MipcTransportService>::execute_wrapped<MipcTransportService::enterLowPower(dispatch::group_session)::$_0>(MipcTransportService::enterLowPower(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<MipcTransportService::enterLowPower(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<MipcTransportService::enterLowPower(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void `non-virtual thunk to'MipcTransportService::enterLowPower(uint64_t a1, dispatch_object_t *a2)
{
  MipcTransportService::enterLowPower((_QWORD *)(a1 - 104), a2);
}

BOOL MipcTransportService::tearDown(MipcTransportService *this)
{
  NSObject *v1;
  char *v2;
  MipcTransportService *v4;
  _QWORD v5[6];
  _QWORD *v6;
  uint64_t block;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  void *v10;
  char *v11;
  _QWORD *v12;
  char v13;

  v4 = this;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK3ctu20SharedSynchronizableI20MipcTransportServiceE20execute_wrapped_syncIZNS1_8tearDownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  v5[3] = &__block_descriptor_tmp_22_0;
  v5[4] = (char *)this + 72;
  v5[5] = &v4;
  v6 = v5;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
  {
    v13 = -86;
    block = MEMORY[0x24BDAC760];
    v8 = 0x40000000;
    v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v10 = &__block_descriptor_tmp_19;
    v11 = &v13;
    v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    v13 = -86;
    block = MEMORY[0x24BDAC760];
    v8 = 0x40000000;
    v9 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v10 = &__block_descriptor_tmp_18;
    v11 = &v13;
    v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13 != 0;
}

BOOL `non-virtual thunk to'MipcTransportService::tearDown(MipcTransportService *this)
{
  NSObject *v1;
  char *v2;
  char *v4;
  _QWORD v5[6];
  _QWORD *v6;
  uint64_t block;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  void *v10;
  char *v11;
  _QWORD *v12;
  char v13;

  v4 = (char *)this - 104;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK3ctu20SharedSynchronizableI20MipcTransportServiceE20execute_wrapped_syncIZNS1_8tearDownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  v5[3] = &__block_descriptor_tmp_22_0;
  v5[4] = (char *)this - 32;
  v5[5] = &v4;
  v6 = v5;
  v2 = (char *)this - 16;
  v1 = *((_QWORD *)this - 2);
  if (*((_QWORD *)v2 + 1))
  {
    v13 = -86;
    block = MEMORY[0x24BDAC760];
    v8 = 0x40000000;
    v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v10 = &__block_descriptor_tmp_19;
    v11 = &v13;
    v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    v13 = -86;
    block = MEMORY[0x24BDAC760];
    v8 = 0x40000000;
    v9 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v10 = &__block_descriptor_tmp_18;
    v11 = &v13;
    v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13 != 0;
}

void MipcTransportService::exitLowPower(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[11];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<MipcTransportService>::execute_wrapped<MipcTransportService::exitLowPower(dispatch::group_session)::$_0>(MipcTransportService::exitLowPower(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<MipcTransportService::exitLowPower(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<MipcTransportService::exitLowPower(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void `non-virtual thunk to'MipcTransportService::exitLowPower(uint64_t a1, dispatch_object_t *a2)
{
  MipcTransportService::exitLowPower((_QWORD *)(a1 - 104), a2);
}

void MipcTransportService::dumpState(MipcTransportService *this)
{
  NSObject *v1;
  char *v2;
  MipcTransportService *v3;
  _QWORD block[6];

  v3 = this;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI20MipcTransportServiceE20execute_wrapped_syncIZNS1_9dumpStateEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_23_0;
  block[4] = (char *)this + 72;
  block[5] = &v3;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void `non-virtual thunk to'MipcTransportService::dumpState(MipcTransportService *this)
{
  NSObject *v1;
  char *v2;
  char *v3;
  _QWORD block[6];

  v3 = (char *)this - 104;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI20MipcTransportServiceE20execute_wrapped_syncIZNS1_9dumpStateEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_23_0;
  block[4] = (char *)this - 32;
  block[5] = &v3;
  v2 = (char *)this - 16;
  v1 = *((_QWORD *)this - 2);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

uint64_t MipcTransportService::enableBypass(MipcTransportService *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'MipcTransportService::enableBypass(MipcTransportService *this)
{
  return 0;
}

void MipcTransportService::registerForWakeReason(_QWORD *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  char *v7;
  unint64_t *p_shared_owners;
  NSObject *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  __int128 v13;

  v13 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v4 = a1[9], (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  v7 = (char *)operator new(0x18uLL);
  *(_QWORD *)v7 = a1;
  *(_OWORD *)(v7 + 8) = v13;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v9 = a1[11];
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  v11 = operator new(0x18uLL);
  *v11 = v7;
  v11[1] = v4;
  v11[2] = v6;
  dispatch_async_f(v9, v11, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<MipcTransportService>::execute_wrapped<MipcTransportService::registerForWakeReason(dispatch::callback<void({block_pointer})(WakeReason)>)::$_0>(MipcTransportService::registerForWakeReason(dispatch::callback<void({block_pointer})(WakeReason)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<MipcTransportService::registerForWakeReason(dispatch::callback<void({block_pointer})(WakeReason)>)::$_0,dispatch_queue_s *::default_delete<MipcTransportService::registerForWakeReason(dispatch::callback<void({block_pointer})(WakeReason)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void `non-virtual thunk to'MipcTransportService::registerForWakeReason(uint64_t a1, __int128 *a2)
{
  MipcTransportService::registerForWakeReason((_QWORD *)(a1 - 104), a2);
}

void MipcTransportService::updateWakeReason_sync(MipcTransportService *this)
{
  _QWORD *v2;
  char SystemWakeReason;
  NSObject *v4;
  char v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)((char *)this + 216);
  if ((*((char *)this + 239) & 0x80000000) == 0)
  {
    SystemWakeReason = TelephonyUtilGetSystemWakeReason();
    v4 = *((_QWORD *)this + 5);
    if ((SystemWakeReason & 1) != 0)
      goto LABEL_3;
LABEL_9:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v6) = 0;
      _os_log_error_impl(&dword_24B855000, v4, OS_LOG_TYPE_ERROR, "Failed to fetch system wake reason", (uint8_t *)&v6, 2u);
      if (!*((_QWORD *)this + 19))
        return;
      goto LABEL_11;
    }
LABEL_10:
    if (!*((_QWORD *)this + 19))
      return;
    goto LABEL_11;
  }
  v5 = TelephonyUtilGetSystemWakeReason();
  v4 = *((_QWORD *)this + 5);
  if ((v5 & 1) == 0)
    goto LABEL_9;
LABEL_3:
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    goto LABEL_10;
  if (*((char *)this + 239) < 0)
    v2 = (_QWORD *)*v2;
  v6 = 136315138;
  v7 = v2;
  _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I System wake reason: %s", (uint8_t *)&v6, 0xCu);
  if (*((_QWORD *)this + 19))
  {
LABEL_11:
    if (*((_QWORD *)this + 20))
      MipcTransportService::getWakeReason_sync(this, 2);
  }
}

void MipcTransportService::getWakeReason_sync(MipcTransportService *this, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  CommandDriverFactory *v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  NSObject *v30;
  std::__shared_weak_count *v31;
  NSObject *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD v35[6];
  std::__shared_weak_count *v36;
  int v37;
  void *aBlock;
  dispatch_object_t object;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  uint8_t buf[16];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v3 || (v5 = *((_QWORD *)this + 9), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = *((_QWORD *)this + 5);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      goto LABEL_10;
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  v12 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
LABEL_9:
    --a2;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_24B855000, v12, OS_LOG_TYPE_DEFAULT, "#I Sending request to get wake reason. Remaining-attempts=%u", buf, 8u);
  }
LABEL_10:
  v44 = 0xAAAAAAAAAAAAAAAALL;
  v45 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v13 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v14 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v13);
    v15 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v16 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v15;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v14 = off_2579B85E0;
  }
  v22 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  v40 = v14;
  v41 = *(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v23 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(&v42, v14);
  v44 = 0;
  v45 = 0;
  if (v43)
  {
    v45 = std::__shared_weak_count::lock(v43);
    if (v45)
      v44 = v42;
    if (v43)
      std::__shared_weak_count::__release_weak(v43);
  }
  if (!v22)
    goto LABEL_34;
  v25 = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v27 = v44;
    if (v44)
      goto LABEL_35;
  }
  else
  {
LABEL_34:
    v27 = v44;
    if (v44)
    {
LABEL_35:
      v35[0] = MEMORY[0x24BDAC760];
      v35[1] = 1174405120;
      v35[2] = ___ZN20MipcTransportService18getWakeReason_syncEj_block_invoke;
      v35[3] = &__block_descriptor_tmp_6_0;
      v35[4] = this;
      v35[5] = v5;
      v36 = v7;
      do
        v28 = __ldxr(p_shared_weak_owners);
      while (__stxr(v28 + 1, p_shared_weak_owners));
      v37 = a2;
      v29 = _Block_copy(v35);
      v30 = *((_QWORD *)this + 11);
      if (v30)
        dispatch_retain(v30);
      aBlock = v29;
      object = v30;
      (*(void (**)(unint64_t, void **))(*(_QWORD *)v27 + 136))(v27, &aBlock);
      if (object)
        dispatch_release(object);
      if (aBlock)
        _Block_release(aBlock);
      if (v36)
      {
        std::__shared_weak_count::__release_weak(v36);
        v31 = v45;
        if (!v45)
          goto LABEL_55;
        goto LABEL_51;
      }
LABEL_50:
      v31 = v45;
      if (!v45)
        goto LABEL_55;
      goto LABEL_51;
    }
  }
  v32 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    goto LABEL_50;
  *(_WORD *)buf = 0;
  _os_log_error_impl(&dword_24B855000, v32, OS_LOG_TYPE_ERROR, "Failed to get radio command driver!", buf, 2u);
  v31 = v45;
  if (!v45)
    goto LABEL_55;
LABEL_51:
  v33 = (unint64_t *)&v31->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_55:
  std::__shared_weak_count::__release_weak(v7);
}

void sub_24B8846F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN20MipcTransportService18getWakeReason_syncEj_block_invoke(uint64_t a1, _QWORD *a2, ctu **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  std::__shared_weak_count *v11;
  const char *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  const void *v17;
  uint64_t (*v18)(uint64_t);
  int v19;
  NSObject *v20;
  NSObject *v21;
  dispatch_time_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  NSObject *v25;
  unint64_t *p_shared_weak_owners;
  unint64_t v27;
  uint64_t (*v28)(uint64_t);
  xpc_object_t v29;
  xpc_object_t v30;
  const void *v31;
  void *v32;
  const void *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  NSObject *v37;
  void *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  _QWORD handler[6];
  std::__shared_weak_count *v42;
  int v43;
  std::__shared_weak_count *v45;
  xpc_object_t object;
  uint64_t v47;
  void (*v48)(uint64_t);
  void *v49;
  void *aBlock;
  int v51;
  xpc_object_t v52;

  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = std::__shared_weak_count::lock(v4);
    v45 = v8;
    if (v8)
    {
      if (!*(_QWORD *)(a1 + 40))
      {
        v11 = v8;
LABEL_78:
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v40 = __ldaxr(p_shared_owners);
        while (__stlxr(v40 - 1, p_shared_owners));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        return;
      }
      v9 = xpc_dictionary_create(0, 0, 0);
      if (v9 || (v9 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x24BD2A468](v9) == MEMORY[0x24BDACFA0])
        {
          xpc_retain(v9);
          v10 = v9;
        }
        else
        {
          v10 = xpc_null_create();
        }
      }
      else
      {
        v10 = xpc_null_create();
        v9 = 0;
      }
      xpc_release(v9);
      v12 = (const char *)(v7 + 216);
      if (*(char *)(v7 + 239) < 0)
        v12 = *(const char **)v12;
      v13 = xpc_string_create(v12);
      if (!v13)
        v13 = xpc_null_create();
      xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x24BE05128], v13);
      v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      v15 = xpc_BOOL_create(*(_BYTE *)(v7 + 240));
      if (!v15)
        v15 = xpc_null_create();
      xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x24BE056C0], v15);
      v16 = xpc_null_create();
      xpc_release(v15);
      xpc_release(v16);
      if (*a2)
        v18 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v18 = 0;
      if (v18)
        goto LABEL_21;
      v28 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      if (!*a3)
        v28 = 0;
      if (!v28)
      {
LABEL_21:
        v19 = *(_DWORD *)(a1 + 56);
        if (v19)
        {
          v20 = dispatch_source_create(MEMORY[0x24BDACA18], 1uLL, 0, *(dispatch_queue_t *)(v7 + 88));
          v21 = *(NSObject **)(v7 + 168);
          *(_QWORD *)(v7 + 168) = v20;
          if (v21)
          {
            dispatch_release(v21);
            v20 = *(NSObject **)(v7 + 168);
          }
          if (v20)
          {
            v22 = dispatch_time(0, 1000000000);
            dispatch_source_set_timer(v20, v22, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
            handler[0] = MEMORY[0x24BDAC760];
            handler[2] = ___ZN20MipcTransportService18getWakeReason_syncEj_block_invoke_2;
            handler[3] = &__block_descriptor_tmp_4_1;
            v24 = *(_QWORD *)(a1 + 40);
            v23 = *(std::__shared_weak_count **)(a1 + 48);
            handler[4] = v7;
            handler[5] = v24;
            v25 = *(NSObject **)(v7 + 168);
            handler[1] = 1174405120;
            v42 = v23;
            if (v23)
            {
              p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
              do
                v27 = __ldxr(p_shared_weak_owners);
              while (__stxr(v27 + 1, p_shared_weak_owners));
            }
            v43 = *(_DWORD *)(a1 + 56);
            dispatch_source_set_event_handler(v25, handler);
            dispatch_activate(*(dispatch_object_t *)(v7 + 168));
            if (v42)
              std::__shared_weak_count::__release_weak(v42);
          }
          goto LABEL_77;
        }
      }
      else
      {
        if (*(_QWORD *)(v7 + 152) && *(_QWORD *)(v7 + 160))
        {
          ctu::cf_to_xpc(*a3, v17);
          v29 = object;
          if (object && MEMORY[0x24BD2A468](object) == MEMORY[0x24BDACFA0])
            xpc_retain(object);
          else
            v29 = xpc_null_create();
          xpc_release(object);
          xpc_release(v29);
        }
        v19 = 1;
      }
      if (*(_QWORD *)(v7 + 152) && *(_QWORD *)(v7 + 160))
      {
        if (*(char *)(v7 + 239) < 0)
        {
          if (((*(_QWORD *)(v7 + 224) == 0) & ~v19) == 0)
            goto LABEL_45;
        }
        else if (((*(_BYTE *)(v7 + 239) == 0) & ~v19) == 0)
        {
LABEL_45:
          if (v10)
          {
            xpc_retain(v10);
            v30 = v10;
          }
          else
          {
            v30 = xpc_null_create();
          }
          v33 = *(const void **)(v7 + 152);
          if (v33)
            v34 = _Block_copy(v33);
          else
            v34 = 0;
          v37 = *(NSObject **)(v7 + 160);
          object = (xpc_object_t)MEMORY[0x24BDAC760];
          v47 = 1174405120;
          v48 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke;
          v49 = &__block_descriptor_tmp_24_0;
          if (v34)
            v38 = _Block_copy(v34);
          else
            v38 = 0;
          aBlock = v38;
          v51 = 3;
          v52 = v30;
          if (v30)
            xpc_retain(v30);
          else
            v52 = xpc_null_create();
          dispatch_async(v37, &object);
          xpc_release(v52);
          v52 = 0;
          if (aBlock)
            _Block_release(aBlock);
          if (v34)
            _Block_release(v34);
LABEL_76:
          xpc_release(v30);
          goto LABEL_77;
        }
        v30 = xpc_null_create();
        v31 = *(const void **)(v7 + 152);
        if (v31)
          v32 = _Block_copy(v31);
        else
          v32 = 0;
        v35 = *(NSObject **)(v7 + 160);
        object = (xpc_object_t)MEMORY[0x24BDAC760];
        v47 = 1174405120;
        v48 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke;
        v49 = &__block_descriptor_tmp_24_0;
        if (v32)
          v36 = _Block_copy(v32);
        else
          v36 = 0;
        aBlock = v36;
        v51 = 4;
        v52 = v30;
        if (v30)
          xpc_retain(v30);
        else
          v52 = xpc_null_create();
        dispatch_async(v35, &object);
        xpc_release(v52);
        v52 = 0;
        if (aBlock)
          _Block_release(aBlock);
        if (v32)
          _Block_release(v32);
        goto LABEL_76;
      }
LABEL_77:
      xpc_release(v10);
      v11 = v45;
      if (!v45)
        return;
      goto LABEL_78;
    }
  }
}

void sub_24B884C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  void *v18;

  xpc_release(v18);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void ___ZN20MipcTransportService18getWakeReason_syncEj_block_invoke_2(uint64_t a1)
{
  std::__shared_weak_count *v2;
  dispatch_source_t *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(dispatch_source_t **)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 40))
      {
        dispatch_source_cancel(v3[21]);
        v6 = v3[21];
        v3[21] = 0;
        if (v6)
          dispatch_release(v6);
        MipcTransportService::getWakeReason_sync((MipcTransportService *)v3, *(_DWORD *)(a1 + 56));
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_24B884DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrI20MipcTransportServiceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrI20MipcTransportServiceEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t MipcTransportService::shouldTeardownOnWillReset(MipcTransportService *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'MipcTransportService::shouldTeardownOnWillReset(MipcTransportService *this)
{
  return 0;
}

uint64_t ctu::Loggable<MipcTransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<MipcTransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "ipc.svc.mipc");
}

uint64_t ctu::Loggable<MipcTransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<MipcTransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBA330;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<MipcTransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBA330;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::SharedLoggable<MipcTransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBA330;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<MipcTransportService>::execute_wrapped<MipcTransportService::init(void)::$_0>(MipcTransportService::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<MipcTransportService::init(void)::$_0,dispatch_queue_s *::default_delete<MipcTransportService::init(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  _BOOL8 v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 40);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    LOWORD(v11) = 0;
    _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I ----------------- Setting up ----------------", (uint8_t *)&v11, 2u);
  }
  if ((capabilities::ipc::supportsPCI((capabilities::ipc *)v5) & 1) == 0)
  {
    v10 = GetOsLogContext()[1];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      v11 = 136315906;
      v12 = "ABM ASSERT";
      v13 = 2080;
      v14 = "capabilities::ipc::supportsPCI()";
      v15 = 2080;
      v16 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/Transport/MIPC/Service/MipcTransportService.cpp";
      v17 = 1024;
      v18 = 112;
      _os_log_fault_impl(&dword_24B855000, v10, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v11, 0x26u);
    }
    __break(1u);
  }
  if (!*(_QWORD *)(v3 + 112) && (v6 = *(NSObject **)(v3 + 40), os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)))
  {
    LOWORD(v11) = 0;
    _os_log_error_impl(&dword_24B855000, v6, OS_LOG_TYPE_ERROR, "Invalid registry; skipping router server setup",
      (uint8_t *)&v11,
      2u);
    operator delete(v2);
    v7 = (std::__shared_weak_count *)a1[2];
    if (!v7)
      goto LABEL_11;
  }
  else
  {
    operator delete(v2);
    v7 = (std::__shared_weak_count *)a1[2];
    if (!v7)
      goto LABEL_11;
  }
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_11:
  operator delete(a1);
}

void sub_24B88519C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI20MipcTransportServiceE20execute_wrapped_syncIZNS1_6engageEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  unint64_t v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  unint64_t v17;
  NSObject *v18;
  _QWORD *v19;
  _QWORD v21[6];
  std::__shared_weak_count *v22;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD **)v1;
  v3 = *(std::__shared_weak_count **)(*(_QWORD *)v1 + 80);
  if (!v3 || (v4 = v2[9], (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
    v11 = v2[5];
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      goto LABEL_10;
    goto LABEL_9;
  }
  v11 = v2[5];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
LABEL_9:
    LOWORD(v21[0]) = 0;
    _os_log_impl(&dword_24B855000, v11, OS_LOG_TYPE_DEFAULT, "#I Requesting start transition", (uint8_t *)v21, 2u);
  }
LABEL_10:
  v21[0] = MEMORY[0x24BDAC760];
  v21[1] = 1174405120;
  v21[2] = ___ZZN20MipcTransportService6engageEvENK3__0clEv_block_invoke;
  v21[3] = &__block_descriptor_tmp_15;
  v21[4] = v2;
  v21[5] = v4;
  v22 = v6;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = operator new(0x10uLL);
  v14 = _Block_copy(v21);
  *v13 = "Watchdog timed out";
  TelephonyBasebandWatchdogStart();
  if (v14)
    _Block_release(v14);
  v15 = (void *)v2[22];
  v2[22] = v13;
  if (v15)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v15);
  }
  v16 = dispatch_group_create();
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = v2[11];
  v19 = operator new(0x18uLL);
  *v19 = v2;
  v19[1] = v4;
  v19[2] = v6;
  dispatch_group_notify_f(v16, v18, v19, (dispatch_function_t)dispatch::detail::group_notify<MipcTransportService::engage(void)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,MipcTransportService::engage(void)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (v16)
    dispatch_release(v16);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  std::__shared_weak_count::__release_weak(v6);
  return 1;
}

void sub_24B8853EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  std::__shared_weak_count *v15;
  NSObject *v16;
  std::__shared_weak_count *v18;

  std::__shared_weak_count::__release_weak(v15);
  if (v16)
  {
    dispatch_release(v16);
    v18 = a15;
    if (!a15)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v15);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v18 = a15;
    if (!a15)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

void ___ZZN20MipcTransportService6engageEvENK3__0clEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = (std::__shared_weak_count *)v3[10];
        if (!v6 || (v7 = v3[9], (v8 = std::__shared_weak_count::lock(v6)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v9 = v8;
        v10 = operator new(8uLL);
        *v10 = v3;
        v11 = v3[11];
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
        v14 = operator new(0x18uLL);
        *v14 = v10;
        v14[1] = v7;
        v14[2] = v9;
        dispatch_async_f(v11, v14, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI20MipcTransportServiceE15execute_wrappedIZZZNS3_6engageEvENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v16 = (unint64_t *)&v5->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI20MipcTransportServiceE15execute_wrappedIZZZNS3_6engageEvENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *__p;
  __int128 v8;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 128) != 2)
  {
    __p = operator new(0x20uLL);
    v8 = xmmword_24B952040;
    strcpy((char *)__p, "Transport engage timeout");
    MipcTransportService::resetBaseband_sync((_QWORD *)v3, (const char *)&__p);
    if (SHIBYTE(v8) < 0)
      operator delete(__p);
  }
  operator delete(v2);
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(a1);
}

void sub_24B885678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  if (a15 < 0)
    operator delete(__p);
  operator delete(v16);
  v18 = (std::__shared_weak_count *)v15[2];
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<MipcTransportService::engage(void)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,MipcTransportService::engage(void)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  void *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  NSObject *v12;
  char *v13;
  size_t v14;
  void *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v27;
  uint8_t buf[16];

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_37;
  v3 = *__p;
  v4 = std::__shared_weak_count::lock(v2);
  if (v4)
  {
    v5 = v4;
    if (!__p[1])
      goto LABEL_31;
    v6 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I Start transition complete", buf, 2u);
    }
    *(_DWORD *)(v3 + 128) = 2;
    v7 = *(void **)(v3 + 176);
    *(_QWORD *)(v3 + 176) = 0;
    if (v7)
    {
      TelephonyBasebandWatchdogStop();
      operator delete(v7);
    }
    v8 = *(std::__shared_weak_count **)(v3 + 208);
    if (!v8)
      goto LABEL_31;
    v9 = std::__shared_weak_count::lock(v8);
    if (!v9)
      goto LABEL_31;
    v10 = v9;
    v11 = *(_QWORD *)(v3 + 200);
    if (!v11)
    {
LABEL_27:
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
LABEL_31:
      v21 = (unint64_t *)&v5->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_35;
    }
    v12 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_24B855000, v12, OS_LOG_TYPE_DEFAULT, "#I ----------------- TransportIsReady -----------------", buf, 2u);
    }
    v13 = abm::kEventTransportIsReady[0];
    v14 = strlen(abm::kEventTransportIsReady[0]);
    if (v14 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v15 = (void *)v14;
    if (v14 >= 0x17)
    {
      v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v17 = v14 | 7;
      v18 = v17 + 1;
      v16 = (void **)operator new(v17 + 1);
      __dst[1] = v15;
      v27 = v18 | 0x8000000000000000;
      __dst[0] = v16;
    }
    else
    {
      HIBYTE(v27) = v14;
      v16 = __dst;
      if (!v14)
        goto LABEL_21;
    }
    memmove(v16, v13, (size_t)v15);
LABEL_21:
    *((_BYTE *)v15 + (_QWORD)v16) = 0;
    aBlock = 0;
    cf = 0;
    Service::broadcastEvent(v11, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock)
      _Block_release(aBlock);
    if (cf)
      CFRelease(cf);
    if (SHIBYTE(v27) < 0)
      operator delete(__dst[0]);
    goto LABEL_27;
  }
LABEL_35:
  v23 = (std::__shared_weak_count *)__p[2];
  if (v23)
    std::__shared_weak_count::__release_weak(v23);
LABEL_37:
  operator delete(__p);
}

void sub_24B885940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, CFTypeRef cf, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;

  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (a17 < 0)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  v23 = (unint64_t *)&v18->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
  {
    v25 = (std::__shared_weak_count *)v17[2];
    if (!v25)
      goto LABEL_15;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    v25 = (std::__shared_weak_count *)v17[2];
    if (!v25)
    {
LABEL_15:
      operator delete(v17);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::__release_weak(v25);
  operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_BYTE **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_BYTE **)(a1 + 32) = result;
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<MipcTransportService>::execute_wrapped<MipcTransportService::enterLowPower(dispatch::group_session)::$_0>(MipcTransportService::enterLowPower(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<MipcTransportService::enterLowPower(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<MipcTransportService::enterLowPower(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(dispatch_object_t **a1)
{
  dispatch_object_t *v2;
  dispatch_object_t v3;
  NSObject *isa;
  Class v5;
  void *v6;
  const void *v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  Class v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  NSObject *v20;
  NSObject *v21;
  _QWORD *v22;
  NSObject *v23;
  NSObject *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD v28[4];
  void *aBlock;
  int v30;

  v2 = *a1;
  v3 = **a1;
  isa = v3[5].isa;
  if (os_log_type_enabled(isa, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v28[0]) = 0;
    _os_log_impl(&dword_24B855000, isa, OS_LOG_TYPE_DEFAULT, "#I Requesting sleep transition", (uint8_t *)v28, 2u);
  }
  LOBYTE(v3[30].isa) = 0;
  if (SHIBYTE(v3[29].isa) < 0)
  {
    v3[28].isa = 0;
    *(_BYTE *)v3[27].isa = 0;
    v5 = v3[19].isa;
    if (!v5)
      goto LABEL_15;
  }
  else
  {
    HIBYTE(v3[29].isa) = 0;
    LOBYTE(v3[27].isa) = 0;
    v5 = v3[19].isa;
    if (!v5)
      goto LABEL_15;
  }
  if (v3[20].isa)
  {
    v6 = _Block_copy(v5);
    v7 = v6;
    v8 = v3[20].isa;
    v28[0] = MEMORY[0x24BDAC760];
    v28[1] = 1174405120;
    v28[2] = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJNS1_6StatusEEEEvDpT__block_invoke;
    v28[3] = &__block_descriptor_tmp_21_0;
    if (v6)
      v9 = _Block_copy(v6);
    else
      v9 = 0;
    aBlock = v9;
    v30 = 2;
    dispatch_async(v8, v28);
    if (aBlock)
      _Block_release(aBlock);
    if (v7)
      _Block_release(v7);
  }
LABEL_15:
  v10 = dispatch_group_create();
  v11 = (std::__shared_weak_count *)v3[10].isa;
  if (!v11 || (v12 = v3[9].isa, (v13 = std::__shared_weak_count::lock(v11)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v14 = v13;
  p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  v20 = v2[1];
  if (v20)
  {
    dispatch_retain(v2[1]);
    dispatch_group_enter(v20);
  }
  v21 = v3[11].isa;
  v22 = operator new(0x20uLL);
  *v22 = v3;
  v22[1] = v12;
  v22[2] = v14;
  v22[3] = v20;
  dispatch_group_notify_f(v10, v21, v22, (dispatch_function_t)dispatch::detail::group_notify<MipcTransportService::enterLowPower(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,MipcTransportService::enterLowPower(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v14);
  if (v10)
    dispatch_release(v10);
  v23 = v2[1];
  if (v23)
  {
    dispatch_group_leave(v23);
    v24 = v2[1];
    if (v24)
      dispatch_release(v24);
  }
  operator delete(v2);
  v25 = (std::__shared_weak_count *)a1[2];
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  operator delete(a1);
}

void sub_24B885CFC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v6 = v5;
  if (v6)
  {
    v8 = v6;
    dispatch_group_leave(v6);
    dispatch_release(v8);
  }
  std::__shared_weak_count::__release_weak(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (v3)
    dispatch_release(v3);
  v9 = v2[1];
  if (v9)
  {
    dispatch_group_leave(v9);
    v10 = v2[1];
    if (v10)
      dispatch_release(v10);
  }
  operator delete(v2);
  v11 = (std::__shared_weak_count *)v1[2];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJNS1_6StatusEEEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  xpc_object_t object;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 40);
  object = xpc_null_create();
  (*(void (**)(uint64_t, int *))(v1 + 16))(v1, &v2);
  xpc_release(object);
}

void sub_24B885DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10WakeReasonEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10WakeReasonEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

void dispatch::detail::group_notify<MipcTransportService::enterLowPower(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,MipcTransportService::enterLowPower(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  uint8_t v12[16];

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    v3 = *__p;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (__p[1])
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v12 = 0;
          _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I Sleep transition complete", v12, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  v9 = __p[3];
  if (v9)
  {
    dispatch_group_leave(v9);
    v10 = __p[3];
    if (v10)
      dispatch_release(v10);
  }
  v11 = (std::__shared_weak_count *)__p[2];
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  operator delete(__p);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI20MipcTransportServiceE20execute_wrapped_syncIZNS1_8tearDownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v7;
  uint8_t v8[16];
  uint8_t buf[16];

  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  v3 = *(void **)(*v1 + 176);
  *(_QWORD *)(*v1 + 176) = 0;
  if (v3)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v3);
  }
  if (*(_DWORD *)(v2 + 128))
  {
    MipcTransportService::cancelWakeRequest_sync((MipcTransportService *)v2);
    v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I Teardown mipc router transport", buf, 2u);
    }
    v5 = dispatch_group_create();
    *(_DWORD *)(v2 + 128) = 0;
    if (v5)
      dispatch_release(v5);
    return 1;
  }
  v7 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    return 1;
  *(_WORD *)v8 = 0;
  _os_log_impl(&dword_24B855000, v7, OS_LOG_TYPE_DEFAULT, "#I Ignoring tear down request as transport state is already reset", v8, 2u);
  return 1;
}

void dispatch::async<void ctu::SharedSynchronizable<MipcTransportService>::execute_wrapped<MipcTransportService::exitLowPower(dispatch::group_session)::$_0>(MipcTransportService::exitLowPower(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<MipcTransportService::exitLowPower(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<MipcTransportService::exitLowPower(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(dispatch_object_t **a1)
{
  dispatch_object_t *v2;
  dispatch_object_t v3;
  NSObject *isa;
  NSObject *v5;
  std::__shared_weak_count *v6;
  Class v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  _QWORD *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int16 v24[8];
  uint8_t buf[16];

  v2 = *a1;
  v3 = **a1;
  isa = v3[5].isa;
  if (os_log_type_enabled(isa, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, isa, OS_LOG_TYPE_DEFAULT, "#I Requesting wake transition", buf, 2u);
  }
  if (LODWORD(v3[16].isa) == 2)
  {
    MipcTransportService::updateWakeReason_sync((MipcTransportService *)v3);
    v5 = dispatch_group_create();
    v6 = (std::__shared_weak_count *)v3[10].isa;
    if (!v6 || (v7 = v3[9].isa, (v8 = std::__shared_weak_count::lock(v6)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v9 = v8;
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    v15 = v2[1];
    if (v15)
    {
      dispatch_retain(v2[1]);
      dispatch_group_enter(v15);
    }
    v16 = v3[11].isa;
    v17 = operator new(0x20uLL);
    *v17 = v3;
    v17[1] = v7;
    v17[2] = v9;
    v17[3] = v15;
    dispatch_group_notify_f(v5, v16, v17, (dispatch_function_t)dispatch::detail::group_notify<MipcTransportService::exitLowPower(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,MipcTransportService::exitLowPower(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
    std::__shared_weak_count::__release_weak(v9);
    if (v5)
      dispatch_release(v5);
  }
  else
  {
    v18 = v3[5].isa;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v24[0] = 0;
      _os_log_impl(&dword_24B855000, v18, OS_LOG_TYPE_DEFAULT, "#I Skipping wake transition as baseband ready is pending", (uint8_t *)v24, 2u);
    }
  }
  v19 = v2[1];
  if (v19)
  {
    dispatch_group_leave(v19);
    v20 = v2[1];
    if (v20)
      dispatch_release(v20);
  }
  operator delete(v2);
  v21 = (std::__shared_weak_count *)a1[2];
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  operator delete(a1);
}

void sub_24B886248(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
  std::__shared_weak_count::__release_weak(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (v3)
    dispatch_release(v3);
  v7 = v2[1];
  if (v7)
  {
    dispatch_group_leave(v7);
    v8 = v2[1];
    if (v8)
      dispatch_release(v8);
  }
  operator delete(v2);
  v9 = (std::__shared_weak_count *)v1[2];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<MipcTransportService::exitLowPower(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,MipcTransportService::exitLowPower(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  uint8_t v12[16];

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    v3 = *__p;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (__p[1])
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v12 = 0;
          _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I Wake transition complete", v12, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  v9 = __p[3];
  if (v9)
  {
    dispatch_group_leave(v9);
    v10 = __p[3];
    if (v10)
      dispatch_release(v10);
  }
  v11 = (std::__shared_weak_count *)__p[2];
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  operator delete(__p);
}

void dispatch::async<void ctu::SharedSynchronizable<MipcTransportService>::execute_wrapped<MipcTransportService::registerForWakeReason(dispatch::callback<void({block_pointer})(WakeReason)>)::$_0>(MipcTransportService::registerForWakeReason(dispatch::callback<void({block_pointer})(WakeReason)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<MipcTransportService::registerForWakeReason(dispatch::callback<void({block_pointer})(WakeReason)>)::$_0,dispatch_queue_s *::default_delete<MipcTransportService::registerForWakeReason(dispatch::callback<void({block_pointer})(WakeReason)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v2 = *a1;
  v4 = **a1;
  v3 = (void *)(*a1)[1];
  if (v3)
    v3 = _Block_copy(v3);
  v5 = *(const void **)(v4 + 152);
  *(_QWORD *)(v4 + 152) = v3;
  if (v5)
    _Block_release(v5);
  v6 = v2[2];
  if (v6)
    dispatch_retain((dispatch_object_t)v2[2]);
  v7 = *(NSObject **)(v4 + 160);
  *(_QWORD *)(v4 + 160) = v6;
  if (v7)
    dispatch_release(v7);
  v8 = v2[2];
  if (v8)
    dispatch_release(v8);
  v9 = (const void *)v2[1];
  if (v9)
    _Block_release(v9);
  operator delete(v2);
  v10 = (std::__shared_weak_count *)a1[2];
  if (!v10)
    goto LABEL_17;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    operator delete(a1);
  }
  else
  {
LABEL_17:
    operator delete(a1);
  }
}

uint64_t ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  void *v3;
  int v4;
  xpc_object_t object;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 40);
  v3 = *(void **)(a1 + 48);
  v4 = v2;
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, int *))(v1 + 16))(v1, &v4);
  xpc_release(object);
}

void sub_24B886534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10WakeReasonEEE40c16_ZTS10WakeReason(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  xpc_object_t result;

  v4 = *(void **)(a2 + 32);
  if (v4)
    v4 = _Block_copy(v4);
  *(_QWORD *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v5 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    return xpc_retain(v5);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10WakeReasonEEE40c16_ZTS10WakeReason(uint64_t a1)
{
  const void *v2;

  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
}

uint64_t __cxx_global_var_init_7_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_24B855000);
  }
  return result;
}

void util::strip_non_printable(std::string *this)
{
  std::string *v1;
  std::string::size_type size;
  std::string *v3;
  std::string *v4;
  std::string::size_type v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  std::string::size_type v12;
  int v13;
  std::string *v14;
  char *v15;
  std::string::size_type v16;
  std::string::size_type v17;

  v1 = this;
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v3 = this;
  else
    v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    v4 = (std::string *)((char *)v3 + size);
    v5 = size - 1;
    v6 = MEMORY[0x24BDAC740];
    while (1)
    {
      v7 = v3->__r_.__value_.__s.__data_[0];
      if ((v7 & 0x80000000) != 0)
        break;
      v8 = *(_DWORD *)(v6 + 4 * v7 + 60);
      if ((v8 & 0x40000) == 0 || (v8 & 0x4000) != 0)
        goto LABEL_15;
LABEL_8:
      v3 = (std::string *)((char *)v3 + 1);
      --v5;
      if (v3 == v4)
        goto LABEL_28;
    }
    if (__maskrune(v3->__r_.__value_.__s.__data_[0], 0x40000uLL) && !__maskrune(v7, 0x4000uLL))
      goto LABEL_8;
LABEL_15:
    if (v3 != v4 && (std::string *)((char *)&v3->__r_.__value_.__l.__data_ + 1) != v4)
    {
      v9 = 1;
      v4 = v3;
      while (1)
      {
        v10 = v3->__r_.__value_.__s.__data_[v9];
        if ((v10 & 0x80000000) != 0)
        {
          if (!__maskrune(v3->__r_.__value_.__s.__data_[v9], 0x40000uLL) || __maskrune(v10, 0x4000uLL))
            goto LABEL_19;
        }
        else
        {
          v11 = *(_DWORD *)(v6 + 4 * v10 + 60);
          if ((v11 & 0x40000) == 0 || (v11 & 0x4000) != 0)
            goto LABEL_19;
        }
        v4->__r_.__value_.__s.__data_[0] = v3->__r_.__value_.__s.__data_[v9];
        v4 = (std::string *)((char *)v4 + 1);
LABEL_19:
        ++v9;
        if (!--v5)
          goto LABEL_28;
      }
    }
  }
  v4 = v3;
LABEL_28:
  v12 = HIBYTE(v1->__r_.__value_.__r.__words[2]);
  v13 = (char)v12;
  v14 = (std::string *)v1->__r_.__value_.__r.__words[0];
  v15 = (char *)(v1->__r_.__value_.__r.__words[0] + v1->__r_.__value_.__l.__size_);
  if ((v12 & 0x80u) != 0)
  {
    v16 = v1->__r_.__value_.__r.__words[0];
  }
  else
  {
    v15 = (char *)v1 + v12;
    v16 = (std::string::size_type)v1;
  }
  if ((v12 & 0x80u) != 0)
    v12 = v1->__r_.__value_.__l.__size_;
  v17 = (std::string::size_type)v4 - v16;
  if (v12 < (unint64_t)v4 - v16)
    std::string::__throw_out_of_range[abi:ne180100]();
  if (v15 - (char *)v4 == -1)
  {
    if (v13 < 0)
    {
      v1->__r_.__value_.__l.__size_ = v17;
      v1 = v14;
    }
    else
    {
      *((_BYTE *)&v1->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
    v1->__r_.__value_.__s.__data_[v17] = 0;
  }
  else
  {
    std::string::__erase_external_with_move(v1, v17, v15 - (char *)v4);
  }
}

uint64_t util::convert_garbage(uint64_t result)
{
  int v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v1 = *(char *)(result + 23);
  if (v1 >= 0)
    v2 = (_BYTE *)result;
  else
    v2 = *(_BYTE **)result;
  if (v1 >= 0)
    v3 = *(unsigned __int8 *)(result + 23);
  else
    v3 = *(_QWORD *)(result + 8);
  if (v3)
  {
    v4 = MEMORY[0x24BDAC740];
    do
    {
      v5 = (char)*v2;
      if ((v5 & 0x80000000) != 0)
      {
        result = __maskrune((char)*v2, 0x40000uLL);
        if ((_DWORD)result)
          goto LABEL_10;
        result = __maskrune(v5, 0x4000uLL);
        if ((_DWORD)result)
          goto LABEL_10;
      }
      else
      {
        v6 = *(_DWORD *)(v4 + 4 * v5 + 60);
        if ((v6 & 0x40000) != 0)
          goto LABEL_10;
        result = v6 & 0x4000;
        if ((v6 & 0x4000) != 0)
          goto LABEL_10;
      }
      *v2 = 32;
LABEL_10:
      ++v2;
      --v3;
    }
    while (v3);
  }
  return result;
}

void util::strip_pattern(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  int v5;
  int v6;
  std::string *v7;
  std::string *v8;
  int64_t v9;
  std::string::size_type v10;
  char *v11;
  uint64_t size;
  std::string::size_type v13;
  std::string::size_type v14;
  int v15;
  std::string *v16;
  int v17;
  char *v18;
  int64_t v19;
  int64_t v20;
  char *v21;
  int v22;
  std::string *v23;
  int64_t v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  std::string *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  std::string::size_type v33;
  int v34;
  std::string *v35;
  int v36;
  char *v37;
  int64_t v38;
  int64_t v39;
  char *v40;
  int v41;
  std::string *v42;
  int64_t v43;
  char *v44;
  char *v45;

  memset(a3, 170, sizeof(std::string));
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v5 = a1[23];
  v6 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
  v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    v8 = a3;
  else
    v8 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if (v5 >= 0)
    v9 = a1[23];
  else
    v9 = *((_QWORD *)a1 + 1);
  v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if (v5 >= 0)
    v11 = a1;
  else
    v11 = *(char **)a1;
  if (!v9)
  {
    v13 = 0;
    goto LABEL_20;
  }
  if (v6 >= 0)
    size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  else
    size = a3->__r_.__value_.__l.__size_;
  if (size >= v9)
  {
    v27 = (char *)v8 + size;
    v28 = *v11;
    v29 = v8;
    do
    {
      v30 = size - v9;
      if (v30 == -1)
        break;
      v31 = (char *)memchr(v29, v28, v30 + 1);
      if (!v31)
        break;
      v32 = v31;
      if (!memcmp(v31, v11, v9))
      {
        if (v32 != v27)
        {
          v13 = v32 - (char *)v8;
          if (v32 - (char *)v8 != -1)
          {
            if (v9 == -1)
            {
              while (1)
              {
                v33 = a3->__r_.__value_.__l.__size_;
                if ((v10 & 0x80u) == 0)
                  v33 = v10;
                if (v33 < v13)
                  break;
                if ((char)v10 < 0)
                {
                  a3->__r_.__value_.__l.__size_ = v13;
                }
                else
                {
                  *((_BYTE *)&a3->__r_.__value_.__s + 23) = v13 & 0x7F;
                  v7 = a3;
                }
                v7->__r_.__value_.__s.__data_[v13] = 0;
                v34 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
                if (v34 >= 0)
                  v35 = a3;
                else
                  v35 = (std::string *)a3->__r_.__value_.__r.__words[0];
                v36 = a1[23];
                if (v36 >= 0)
                  v37 = a1;
                else
                  v37 = *(char **)a1;
                if (v36 >= 0)
                  v38 = a1[23];
                else
                  v38 = *((_QWORD *)a1 + 1);
                if (v38)
                {
                  if (v34 >= 0)
                    v39 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  else
                    v39 = a3->__r_.__value_.__l.__size_;
                  if (v39 < v38)
                    return;
                  v40 = (char *)v35 + v39;
                  v41 = *v37;
                  v42 = v35;
                  while (1)
                  {
                    v43 = v39 - v38;
                    if (v43 == -1)
                      return;
                    v44 = (char *)memchr(v42, v41, v43 + 1);
                    if (!v44)
                      return;
                    v45 = v44;
                    if (!memcmp(v44, v37, v38))
                      break;
                    v42 = (std::string *)(v45 + 1);
                    v39 = v40 - (v45 + 1);
                    if (v39 < v38)
                      return;
                  }
                  if (v45 == v40)
                    return;
                  v13 = v45 - (char *)v35;
                  if (v45 - (char *)v35 == -1)
                    return;
                }
                else
                {
                  v13 = 0;
                }
              }
            }
            else
            {
LABEL_20:
              while (1)
              {
                v14 = (v10 & 0x80u) == 0 ? v10 : a3->__r_.__value_.__l.__size_;
                if (v14 < v13)
                  break;
                std::string::__erase_external_with_move(a3, v13, v9);
                v15 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                if (v15 >= 0)
                  v16 = a3;
                else
                  v16 = (std::string *)a3->__r_.__value_.__r.__words[0];
                v17 = a1[23];
                if (v17 >= 0)
                  v18 = a1;
                else
                  v18 = *(char **)a1;
                if (v17 >= 0)
                  v19 = a1[23];
                else
                  v19 = *((_QWORD *)a1 + 1);
                if (v19)
                {
                  if (v15 >= 0)
                    v20 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  else
                    v20 = a3->__r_.__value_.__l.__size_;
                  if (v20 < v19)
                    return;
                  v21 = (char *)v16 + v20;
                  v22 = *v18;
                  v23 = v16;
                  while (1)
                  {
                    v24 = v20 - v19;
                    if (v24 == -1)
                      return;
                    v25 = (char *)memchr(v23, v22, v24 + 1);
                    if (!v25)
                      return;
                    v26 = v25;
                    if (!memcmp(v25, v18, v19))
                      break;
                    v23 = (std::string *)(v26 + 1);
                    v20 = v21 - (v26 + 1);
                    if (v20 < v19)
                      return;
                  }
                  if (v26 == v21)
                    return;
                  v13 = v26 - (char *)v16;
                  if (v26 - (char *)v16 == -1)
                    return;
                }
                else
                {
                  v13 = 0;
                }
              }
            }
            std::string::__throw_out_of_range[abi:ne180100]();
          }
        }
        return;
      }
      v29 = (std::string *)(v32 + 1);
      size = v27 - (v32 + 1);
    }
    while (size >= v9);
  }
}

void sub_24B886B78(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *util::strip_leading_trailing@<X0>(_QWORD *result@<X0>, void **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  void *v10;
  size_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = *((unsigned __int8 *)result + 23);
  v5 = (_QWORD *)*result;
  v6 = result[1];
  if ((v4 & 0x80u) == 0)
    v7 = result;
  else
    v7 = (_QWORD *)*result;
  if ((v4 & 0x80u) == 0)
    v8 = *((unsigned __int8 *)result + 23);
  else
    v8 = result[1];
  v9 = *((char *)a2 + 23);
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *a2;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a2 + 23);
  else
    v11 = (size_t)a2[1];
  if (!v8)
    goto LABEL_26;
  v12 = result;
  v13 = 0;
  if (!v11)
  {
    v14 = v8 - 1;
    if ((v4 & 0x80) == 0)
      goto LABEL_28;
    goto LABEL_24;
  }
  while (1)
  {
    result = memchr(v10, *((char *)v7 + v13), v11);
    if (!result)
      break;
    if (v8 == ++v13)
      goto LABEL_26;
  }
  if (v13 == -1)
  {
LABEL_26:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  do
  {
    if (!v8)
    {
      v14 = -1;
      if ((v4 & 0x80) == 0)
        goto LABEL_28;
LABEL_24:
      if (v6 >= v13)
      {
        v4 = v6;
        v12 = v5;
        goto LABEL_29;
      }
LABEL_41:
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    result = memchr(v10, *((char *)v7 + --v8), v11);
  }
  while (result);
  v14 = v8;
  if ((v4 & 0x80) != 0)
    goto LABEL_24;
LABEL_28:
  if (v13 > v4)
    goto LABEL_41;
LABEL_29:
  v15 = v14 - v13 + 1;
  if (v4 - v13 >= v15)
    v16 = v15;
  else
    v16 = v4 - v13;
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v16 >= 0x17)
  {
    v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v17 = v16 | 7;
    v18 = v17 + 1;
    v19 = operator new(v17 + 1);
    a3[1] = v16;
    a3[2] = v18 | 0x8000000000000000;
    *a3 = v19;
    a3 = v19;
    goto LABEL_39;
  }
  *((_BYTE *)a3 + 23) = v16;
  if (v16)
LABEL_39:
    result = memmove(a3, (char *)v12 + v13, v16);
  *((_BYTE *)a3 + v16) = 0;
  return result;
}

uint64_t util::to_upper(uint64_t result)
{
  uint64_t v1;
  int v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;

  v1 = *(unsigned __int8 *)(result + 23);
  v2 = (char)v1;
  v3 = (_BYTE *)(result + v1);
  if (v2 >= 0)
    v4 = v3;
  else
    v4 = (_BYTE *)(*(_QWORD *)result + *(_QWORD *)(result + 8));
  if (v2 >= 0)
    v5 = (_BYTE *)result;
  else
    v5 = *(_BYTE **)result;
  for (; v5 != v4; ++v5)
  {
    result = __toupper((char)*v5);
    *v5 = result;
  }
  return result;
}

BOOL util::equal_nocase(const char *a1, const char *a2)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  return strcasecmp(a1, a2) == 0;
}

void util::strip_non_alpha(std::string *a1)
{
  std::string::size_type size;
  char *v3;
  char *v4;
  std::string::size_type v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  std::string::size_type v12;
  char *v13;
  std::string *v14;
  std::string::size_type v15;

  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v3 = (char *)a1;
  else
    v3 = (char *)a1->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_21;
  v4 = &v3[size];
  v5 = size - 1;
  v6 = MEMORY[0x24BDAC740];
  while (1)
  {
    v7 = *v3;
    if ((v7 & 0x80000000) != 0)
    {
      if (!__maskrune(v7, 0x100uLL))
        break;
      goto LABEL_9;
    }
    if ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x100) == 0)
      break;
LABEL_9:
    ++v3;
    --v5;
    if (v3 == v4)
      goto LABEL_22;
  }
  if (v3 != v4 && v3 + 1 != v4)
  {
    v8 = 1;
    v4 = v3;
    while (1)
    {
      v9 = v3[v8];
      if ((v9 & 0x80000000) == 0)
        break;
      if (__maskrune(v9, 0x100uLL))
        goto LABEL_16;
LABEL_17:
      ++v8;
      if (!--v5)
        goto LABEL_22;
    }
    if ((*(_DWORD *)(v6 + 4 * v9 + 60) & 0x100) == 0)
      goto LABEL_17;
LABEL_16:
    *v4++ = v3[v8];
    goto LABEL_17;
  }
LABEL_21:
  v4 = v3;
LABEL_22:
  v10 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  v11 = (char)v10;
  v12 = a1->__r_.__value_.__r.__words[0];
  v13 = (char *)(a1->__r_.__value_.__r.__words[0] + a1->__r_.__value_.__l.__size_);
  if ((v10 & 0x80u) != 0)
  {
    v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  else
  {
    v13 = (char *)a1 + v10;
    v14 = a1;
  }
  if ((v10 & 0x80u) != 0)
    v10 = a1->__r_.__value_.__l.__size_;
  v15 = v4 - (char *)v14;
  if (v10 < v4 - (char *)v14)
    std::string::__throw_out_of_range[abi:ne180100]();
  if (v13 - v4 == -1)
  {
    if (v11 < 0)
    {
      a1->__r_.__value_.__l.__size_ = v15;
      *(_BYTE *)(v12 + v15) = 0;
    }
    else
    {
      *((_BYTE *)&a1->__r_.__value_.__s + 23) = v15 & 0x7F;
      a1->__r_.__value_.__s.__data_[v15] = 0;
    }
  }
  else
  {
    std::string::__erase_external_with_move(a1, v15, v13 - v4);
  }
}

void util::readPlistToCFDictionary(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v2;
  const __CFAllocator *v4;
  __CFError *v5;
  __CFError *v6;
  uint64_t (*v7)(uint64_t);
  __CFError *v8;
  __CFReadStream *v9;
  uint64_t (*v10)(uint64_t);
  CFPropertyListRef v11;
  unsigned __int8 v12;
  NSObject *v13;
  CFIndex Code;
  void **v15;
  void *__p[2];
  uint64_t v17;
  CFErrorRef error[4];
  uint8_t buf[24];
  void **v20;
  uint64_t v21;

  v2 = (const char *)a1;
  v21 = *MEMORY[0x24BDAC8D0];
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (*(char *)(a1 + 23) < 0)
    v2 = *(const char **)a1;
  v5 = (__CFError *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v2, 0x8000100u);
  error[3] = v5;
  v6 = CFURLCreateWithFileSystemPath(v4, (CFStringRef)v5, kCFURLPOSIXPathStyle, 0);
  error[2] = v6;
  *a2 = 0;
  v7 = ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get;
  if (!v6)
    v7 = 0;
  if (!v7)
    goto LABEL_18;
  v8 = CFReadStreamCreateWithFile(v4, v6);
  v9 = v8;
  error[1] = v8;
  v10 = ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get;
  if (!v8)
    v10 = 0;
  if (!v10
    || (CFReadStreamOpen(v8),
        error[0] = 0,
        v11 = CFPropertyListCreateWithStream(v4, v9, 0, 1uLL, 0, error),
        *a2 = v11,
        CFReadStreamClose(v9),
        !error[0]))
  {
LABEL_16:
    if (!v9)
      goto LABEL_18;
    goto LABEL_17;
  }
  CFErrorGetDomain(error[0]);
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  *(_OWORD *)__p = *(_OWORD *)buf;
  v17 = *(_QWORD *)&buf[16];
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v13 = qword_2579B8A80;
    if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
LABEL_26:
    Code = CFErrorGetCode(error[0]);
    v15 = __p;
    if (v17 < 0)
      v15 = (void **)__p[0];
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v6;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = Code;
    *(_WORD *)&buf[22] = 2080;
    v20 = v15;
    _os_log_error_impl(&dword_24B855000, v13, OS_LOG_TYPE_ERROR, "Failed to create %@ PropertyList: %ld: %s", buf, 0x20u);
    goto LABEL_13;
  }
  v13 = qword_2579B8A80;
  if (os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
    goto LABEL_26;
LABEL_13:
  CFRelease(error[0]);
  *a2 = 0;
  if (v11)
    CFRelease(v11);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
    goto LABEL_16;
  operator delete(__p[0]);
  if (v9)
LABEL_17:
    CFRelease(v9);
LABEL_18:
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
}

void sub_24B8871FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

const void **ctu::cf::CFSharedRef<__CFReadStream>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void util::moveDirContent(const void **a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int filtered_files;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  int v17;
  size_t v18;
  unint64_t v19;
  std::string *p_dst;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  int is_directory;
  int v29;
  size_t v30;
  unint64_t v31;
  std::string *v32;
  unsigned __int8 v33;
  NSObject *v34;
  int v35;
  size_t v36;
  unint64_t v37;
  std::string *v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  std::string *p_p;
  unsigned __int8 v62;
  NSObject *v63;
  void **v64;
  void **v65;
  char *v66;
  __int128 v67;
  int v68;
  size_t v69;
  unint64_t v70;
  std::string *p_buf;
  uint64_t v72;
  uint64_t v73;
  const void *v74;
  std::string *v75;
  std::string::size_type v76;
  std::string *v77;
  __int128 v78;
  int v79;
  size_t v80;
  unint64_t v81;
  std::string *v82;
  uint64_t v83;
  uint64_t v84;
  const void *v85;
  std::string *v86;
  std::string::size_type v87;
  std::string *v88;
  __int128 v89;
  char v90;
  unsigned __int8 v91;
  NSObject *v92;
  int v93;
  size_t v94;
  unint64_t v95;
  std::string *v96;
  NSObject *v97;
  int v98;
  size_t v99;
  unint64_t v100;
  std::string *v101;
  uint64_t v102;
  uint64_t v103;
  const void *v104;
  std::string *v105;
  std::string::size_type v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  std::string *v110;
  uint64_t v111;
  uint64_t v112;
  const void *v113;
  std::string *v114;
  std::string::size_type v115;
  std::string *v116;
  __int128 v117;
  std::string *v118;
  std::string *v119;
  std::string::size_type v120;
  int v121;
  char *v124;
  std::locale v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  std::string v131;
  void *v132[2];
  std::string::size_type v133;
  std::string __dst;
  std::string __p;
  std::locale v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  char *v142;
  void **v143;
  uint64_t v144;
  uint8_t v145[4];
  std::string *v146;
  __int16 v147;
  std::string *v148;
  std::string buf;
  std::string v150;
  uint64_t v151;

  v151 = *MEMORY[0x24BDAC8D0];
  v142 = 0;
  v143 = 0;
  v144 = 0;
  std::locale::locale(&v136, (const std::locale *)a5);
  v137 = *(_OWORD *)(a5 + 8);
  v138 = *(_OWORD *)(a5 + 24);
  v8 = *(std::__shared_weak_count **)(a5 + 48);
  v139 = *(_QWORD *)(a5 + 40);
  v140 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v141 = *(_QWORD *)(a5 + 56);
  filtered_files = ctu::fs::get_filtered_files();
  v12 = v140;
  if (!v140)
    goto LABEL_8;
  v13 = (unint64_t *)&v140->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    std::locale::~locale(&v136);
    if (filtered_files)
    {
LABEL_9:
      v15 = v142;
      v124 = (char *)v143;
      if (v142 != (char *)v143)
      {
        if (a4)
        {
          while (1)
          {
            memset(&v150, 170, sizeof(v150));
            if (v15[23] < 0)
            {
              std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
            }
            else
            {
              v16 = *(_OWORD *)v15;
              v150.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
              *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v16;
            }
            v17 = *((char *)a1 + 23);
            if (v17 >= 0)
              v18 = *((unsigned __int8 *)a1 + 23);
            else
              v18 = (size_t)a1[1];
            v19 = v18 + 1;
            memset(&__dst, 170, sizeof(__dst));
            if (v18 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v19 >= 0x17)
            {
              v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v19 | 7) != 0x17)
                v21 = v19 | 7;
              v22 = v21 + 1;
              p_dst = (std::string *)operator new(v21 + 1);
              __dst.__r_.__value_.__l.__size_ = v18 + 1;
              __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              p_dst = &__dst;
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18 + 1;
              if (!v18)
                goto LABEL_30;
            }
            if (v17 >= 0)
              v23 = a1;
            else
              v23 = *a1;
            memmove(p_dst, v23, v18);
LABEL_30:
            *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v18) = 47;
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v24 = &v150;
            else
              v24 = (std::string *)v150.__r_.__value_.__r.__words[0];
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            else
              size = v150.__r_.__value_.__l.__size_;
            v26 = std::string::append(&__dst, (const std::string::value_type *)v24, size);
            v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            is_directory = ctu::fs::is_directory();
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_38:
                if (is_directory)
                  goto LABEL_39;
                goto LABEL_48;
              }
            }
            else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_38;
            }
            operator delete(__dst.__r_.__value_.__l.__data_);
            if (is_directory)
            {
LABEL_39:
              v29 = *((char *)a1 + 23);
              if (v29 >= 0)
                v30 = *((unsigned __int8 *)a1 + 23);
              else
                v30 = (size_t)a1[1];
              v31 = v30 + 1;
              memset(&__dst, 170, sizeof(__dst));
              if (v30 + 1 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v31 >= 0x17)
              {
                v39 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v31 | 7) != 0x17)
                  v39 = v31 | 7;
                v40 = v39 + 1;
                v32 = (std::string *)operator new(v39 + 1);
                __dst.__r_.__value_.__l.__size_ = v30 + 1;
                __dst.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
              }
              else
              {
                memset(&__dst, 0, sizeof(__dst));
                v32 = &__dst;
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v30 + 1;
                if (!v30)
                  goto LABEL_65;
              }
              if (v29 >= 0)
                v41 = a1;
              else
                v41 = *a1;
              memmove(v32, v41, v30);
LABEL_65:
              *(_WORD *)((char *)&v32->__r_.__value_.__l.__data_ + v30) = 47;
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v42 = &v150;
              else
                v42 = (std::string *)v150.__r_.__value_.__r.__words[0];
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v43 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
              else
                v43 = v150.__r_.__value_.__l.__size_;
              v44 = std::string::append(&__dst, (const std::string::value_type *)v42, v43);
              v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v45;
              v44->__r_.__value_.__l.__size_ = 0;
              v44->__r_.__value_.__r.__words[2] = 0;
              v44->__r_.__value_.__r.__words[0] = 0;
              v46 = std::string::append(&__p, "/", 1uLL);
              v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
              v133 = v46->__r_.__value_.__r.__words[2];
              *(_OWORD *)v132 = v47;
              v46->__r_.__value_.__l.__size_ = 0;
              v46->__r_.__value_.__r.__words[2] = 0;
              v46->__r_.__value_.__r.__words[0] = 0;
              if (*(char *)(a2 + 23) < 0)
                std::string::__init_copy_ctor_external(&v131, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
              else
                v131 = *(std::string *)a2;
              std::locale::locale(&v125, (const std::locale *)a5);
              v126 = *(_OWORD *)(a5 + 8);
              v127 = *(_OWORD *)(a5 + 24);
              v48 = *(std::__shared_weak_count **)(a5 + 48);
              v128 = *(_QWORD *)(a5 + 40);
              v129 = v48;
              if (v48)
              {
                v49 = (unint64_t *)&v48->__shared_owners_;
                do
                  v50 = __ldxr(v49);
                while (__stxr(v50 + 1, v49));
              }
              v130 = *(_QWORD *)(a5 + 56);
              util::moveDirContent(v132, &v131, a3, (a4 - 1), &v125);
              v51 = v129;
              if (!v129)
                goto LABEL_81;
              v52 = (unint64_t *)&v129->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
                std::locale::~locale(&v125);
                if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_82;
              }
              else
              {
LABEL_81:
                std::locale::~locale(&v125);
                if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_82:
                  if ((SHIBYTE(v133) & 0x80000000) == 0)
                    goto LABEL_83;
LABEL_88:
                  operator delete(v132[0]);
                  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_84;
                  goto LABEL_89;
                }
              }
              operator delete(v131.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v133) & 0x80000000) == 0)
              {
LABEL_83:
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_84;
                goto LABEL_89;
              }
              goto LABEL_88;
            }
LABEL_48:
            {
              GetOsLogContext(void)::sOsLogContext = 0;
              qword_2579B8A80 = 0;
              __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
            }
            if (GetOsLogContext(void)::onceToken == -1)
            {
              v34 = qword_2579B8A80;
              if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
                goto LABEL_91;
            }
            else
            {
              dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
              v34 = qword_2579B8A80;
              if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
                goto LABEL_91;
            }
            v35 = *((char *)a1 + 23);
            if (v35 >= 0)
              v36 = *((unsigned __int8 *)a1 + 23);
            else
              v36 = (size_t)a1[1];
            v37 = v36 + 1;
            memset(&__dst, 170, sizeof(__dst));
            if (v36 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v37 >= 0x17)
            {
              v121 = v35;
              v54 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v37 | 7) != 0x17)
                v54 = v37 | 7;
              v55 = v54 + 1;
              v38 = (std::string *)operator new(v54 + 1);
              __dst.__r_.__value_.__l.__size_ = v36 + 1;
              __dst.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
              v35 = v121;
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              v38 = &__dst;
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v36 + 1;
              if (!v36)
                goto LABEL_100;
            }
            if (v35 >= 0)
              v56 = a1;
            else
              v56 = *a1;
            memmove(v38, v56, v36);
LABEL_100:
            *(_WORD *)((char *)&v38->__r_.__value_.__l.__data_ + v36) = 47;
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v57 = &v150;
            else
              v57 = (std::string *)v150.__r_.__value_.__r.__words[0];
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v58 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            else
              v58 = v150.__r_.__value_.__l.__size_;
            v59 = std::string::append(&__dst, (const std::string::value_type *)v57, v58);
            v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v60;
            v59->__r_.__value_.__l.__size_ = 0;
            v59->__r_.__value_.__r.__words[2] = 0;
            v59->__r_.__value_.__r.__words[0] = 0;
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
            _os_log_error_impl(&dword_24B855000, v34, OS_LOG_TYPE_ERROR, "%s is not a directory. So, skip to move it with the depth (%d)", (uint8_t *)&buf, 0x12u);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_84:
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_90;
              goto LABEL_91;
            }
LABEL_89:
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_90:
              operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_91:
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v150.__r_.__value_.__l.__data_);
            v15 += 24;
            if (v15 == v124)
              goto LABEL_118;
          }
        }
        while (1)
        {
          memset(&v150, 170, sizeof(v150));
          if (v15[23] < 0)
          {
            std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
          }
          else
          {
            v67 = *(_OWORD *)v15;
            v150.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
            *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v67;
          }
          memset(&__p, 170, sizeof(__p));
          v68 = *(char *)(a2 + 23);
          if (v68 >= 0)
            v69 = *(unsigned __int8 *)(a2 + 23);
          else
            v69 = *(_QWORD *)(a2 + 8);
          v70 = v69 + 1;
          memset(&buf, 170, sizeof(buf));
          if (v69 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v70 >= 0x17)
          {
            v72 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v70 | 7) != 0x17)
              v72 = v70 | 7;
            v73 = v72 + 1;
            p_buf = (std::string *)operator new(v72 + 1);
            buf.__r_.__value_.__l.__size_ = v69 + 1;
            buf.__r_.__value_.__r.__words[2] = v73 | 0x8000000000000000;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
          }
          else
          {
            memset(&buf, 0, sizeof(buf));
            p_buf = &buf;
            *((_BYTE *)&buf.__r_.__value_.__s + 23) = v69 + 1;
            if (!v69)
              goto LABEL_148;
          }
          if (v68 >= 0)
            v74 = (const void *)a2;
          else
            v74 = *(const void **)a2;
          memmove(p_buf, v74, v69);
LABEL_148:
          *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v69) = 47;
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v75 = &v150;
          else
            v75 = (std::string *)v150.__r_.__value_.__r.__words[0];
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v76 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
          else
            v76 = v150.__r_.__value_.__l.__size_;
          v77 = std::string::append(&buf, (const std::string::value_type *)v75, v76);
          v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          ctu::fs::get_unique_filename();
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_156;
          }
          else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_156;
          }
          operator delete(buf.__r_.__value_.__l.__data_);
LABEL_156:
          v79 = *((char *)a1 + 23);
          if (v79 >= 0)
            v80 = *((unsigned __int8 *)a1 + 23);
          else
            v80 = (size_t)a1[1];
          v81 = v80 + 1;
          memset(&buf, 170, sizeof(buf));
          if (v80 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v81 >= 0x17)
          {
            v83 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v81 | 7) != 0x17)
              v83 = v81 | 7;
            v84 = v83 + 1;
            v82 = (std::string *)operator new(v83 + 1);
            buf.__r_.__value_.__l.__size_ = v80 + 1;
            buf.__r_.__value_.__r.__words[2] = v84 | 0x8000000000000000;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          }
          else
          {
            memset(&buf, 0, sizeof(buf));
            v82 = &buf;
            *((_BYTE *)&buf.__r_.__value_.__s + 23) = v80 + 1;
            if (!v80)
              goto LABEL_170;
          }
          if (v79 >= 0)
            v85 = a1;
          else
            v85 = *a1;
          memmove(v82, v85, v80);
LABEL_170:
          *(_WORD *)((char *)&v82->__r_.__value_.__l.__data_ + v80) = 47;
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v86 = &v150;
          else
            v86 = (std::string *)v150.__r_.__value_.__r.__words[0];
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v87 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
          else
            v87 = v150.__r_.__value_.__l.__size_;
          v88 = std::string::append(&buf, (const std::string::value_type *)v86, v87);
          v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v89;
          v88->__r_.__value_.__l.__size_ = 0;
          v88->__r_.__value_.__r.__words[2] = 0;
          v88->__r_.__value_.__r.__words[0] = 0;
          v90 = ctu::fs::rename();
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_178:
              if ((v90 & 1) == 0)
                goto LABEL_193;
              goto LABEL_179;
            }
          }
          else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_178;
          }
          operator delete(buf.__r_.__value_.__l.__data_);
          if ((v90 & 1) == 0)
          {
LABEL_193:
            {
              GetOsLogContext(void)::sOsLogContext = 0;
              qword_2579B8A80 = 0;
              __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
            }
            if (GetOsLogContext(void)::onceToken == -1)
            {
              v97 = qword_2579B8A80;
              if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
                goto LABEL_243;
LABEL_196:
              v98 = *((char *)a1 + 23);
              if (v98 >= 0)
                v99 = *((unsigned __int8 *)a1 + 23);
              else
                v99 = (size_t)a1[1];
              v100 = v99 + 1;
              memset(&buf, 170, sizeof(buf));
              if (v99 + 1 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v100 >= 0x17)
              {
                v111 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v100 | 7) != 0x17)
                  v111 = v100 | 7;
                v112 = v111 + 1;
                v101 = (std::string *)operator new(v111 + 1);
                buf.__r_.__value_.__l.__size_ = v99 + 1;
                buf.__r_.__value_.__r.__words[2] = v112 | 0x8000000000000000;
                buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
              }
              else
              {
                memset(&buf, 0, sizeof(buf));
                v101 = &buf;
                *((_BYTE *)&buf.__r_.__value_.__s + 23) = v99 + 1;
                if (!v99)
                  goto LABEL_230;
              }
              if (v98 >= 0)
                v113 = a1;
              else
                v113 = *a1;
              memmove(v101, v113, v99);
LABEL_230:
              *(_WORD *)((char *)&v101->__r_.__value_.__l.__data_ + v99) = 47;
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v114 = &v150;
              else
                v114 = (std::string *)v150.__r_.__value_.__r.__words[0];
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v115 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
              else
                v115 = v150.__r_.__value_.__l.__size_;
              v116 = std::string::append(&buf, (const std::string::value_type *)v114, v115);
              v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
              __dst.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v117;
              v116->__r_.__value_.__l.__size_ = 0;
              v116->__r_.__value_.__r.__words[2] = 0;
              v116->__r_.__value_.__r.__words[0] = 0;
              v118 = &__dst;
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v118 = (std::string *)__dst.__r_.__value_.__r.__words[0];
              v119 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v119 = (std::string *)__p.__r_.__value_.__r.__words[0];
              *(_DWORD *)v145 = 136315394;
              v146 = v118;
              v147 = 2080;
              v148 = v119;
              _os_log_error_impl(&dword_24B855000, v97, OS_LOG_TYPE_ERROR, "Failed to move %s -> %s", v145, 0x16u);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_241:
                operator delete(__dst.__r_.__value_.__l.__data_);
                if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_243;
                goto LABEL_242;
              }
LABEL_221:
              if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_243;
LABEL_242:
              operator delete(buf.__r_.__value_.__l.__data_);
              goto LABEL_243;
            }
            dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
            v97 = qword_2579B8A80;
            if (os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
              goto LABEL_196;
            goto LABEL_243;
          }
LABEL_179:
          {
            GetOsLogContext(void)::sOsLogContext = 0;
            qword_2579B8A80 = 0;
            __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
          }
          if (GetOsLogContext(void)::onceToken == -1)
          {
            v92 = qword_2579B8A80;
            if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_DEFAULT))
              goto LABEL_243;
LABEL_182:
            v93 = *((char *)a1 + 23);
            if (v93 >= 0)
              v94 = *((unsigned __int8 *)a1 + 23);
            else
              v94 = (size_t)a1[1];
            v95 = v94 + 1;
            memset(&buf, 170, sizeof(buf));
            if (v94 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v95 >= 0x17)
            {
              v102 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v95 | 7) != 0x17)
                v102 = v95 | 7;
              v103 = v102 + 1;
              v96 = (std::string *)operator new(v102 + 1);
              buf.__r_.__value_.__l.__size_ = v94 + 1;
              buf.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
            }
            else
            {
              memset(&buf, 0, sizeof(buf));
              v96 = &buf;
              *((_BYTE *)&buf.__r_.__value_.__s + 23) = v94 + 1;
              if (!v94)
                goto LABEL_210;
            }
            if (v93 >= 0)
              v104 = a1;
            else
              v104 = *a1;
            memmove(v96, v104, v94);
LABEL_210:
            *(_WORD *)((char *)&v96->__r_.__value_.__l.__data_ + v94) = 47;
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v105 = &v150;
            else
              v105 = (std::string *)v150.__r_.__value_.__r.__words[0];
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v106 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            else
              v106 = v150.__r_.__value_.__l.__size_;
            v107 = std::string::append(&buf, (const std::string::value_type *)v105, v106);
            v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
            __dst.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v108;
            v107->__r_.__value_.__l.__size_ = 0;
            v107->__r_.__value_.__r.__words[2] = 0;
            v107->__r_.__value_.__r.__words[0] = 0;
            v109 = &__dst;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v109 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            v110 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v110 = (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)v145 = 136315394;
            v146 = v109;
            v147 = 2080;
            v148 = v110;
            _os_log_impl(&dword_24B855000, v92, OS_LOG_TYPE_DEFAULT, "Moved %s -> %s", v145, 0x16u);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_241;
            goto LABEL_221;
          }
          dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
          v92 = qword_2579B8A80;
          if (os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_DEFAULT))
            goto LABEL_182;
LABEL_243:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
LABEL_247:
              operator delete(v150.__r_.__value_.__l.__data_);
          }
          else if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_247;
          }
          v15 += 24;
          if (v15 == v124)
            goto LABEL_118;
        }
      }
      goto LABEL_118;
    }
  }
  else
  {
LABEL_8:
    std::locale::~locale(&v136);
    if (filtered_files)
      goto LABEL_9;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v63 = qword_2579B8A80;
    if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
      goto LABEL_118;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v63 = qword_2579B8A80;
    if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
      goto LABEL_118;
  }
  v120 = (std::string::size_type)a1;
  if (*((char *)a1 + 23) < 0)
    v120 = (std::string::size_type)*a1;
  LODWORD(v150.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v150.__r_.__value_.__r.__words + 4) = v120;
  _os_log_error_impl(&dword_24B855000, v63, OS_LOG_TYPE_ERROR, "Failed to find a content in %s", (uint8_t *)&v150, 0xCu);
LABEL_118:
  if (a3)
    ctu::fs::remove_dir();
  v64 = (void **)v142;
  if (v142)
  {
    v65 = v143;
    v66 = v142;
    if (v143 != (void **)v142)
    {
      do
      {
        if (*((char *)v65 - 1) < 0)
          operator delete(*(v65 - 3));
        v65 -= 3;
      }
      while (v65 != v64);
      v66 = v142;
    }
    v143 = v64;
    operator delete(v66);
  }
}

void sub_24B888388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,std::locale a58)
{
  uint64_t v58;

  if (a57 < 0)
    operator delete(__p);
  if (*(char *)(v58 - 105) < 0)
    operator delete(*(void **)(v58 - 128));
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v58 - 216));
  _Unwind_Resume(a1);
}

void util::generateSHA256(const char *a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, unsigned __int8 **a4@<X8>)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  __int128 v10;
  const char *v11;
  int v12;
  unint64_t v13;
  ssize_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  const char *v17;
  uint8_t *p_c;
  NSObject *v19;
  uint32_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  int *v23;
  char *v24;
  int v25;
  int v26;
  unsigned __int8 v27;
  NSObject *v28;
  int *v29;
  char *v30;
  int v31;
  int v32;
  CC_SHA256_CTX c;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = (unsigned __int8 *)operator new(0x20uLL);
  a4[1] = v8 + 32;
  a4[2] = v8 + 32;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *a4 = v8;
  if (!a2)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_2579B8A80 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v16 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        return;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v16 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        return;
    }
    LOWORD(c.count[0]) = 0;
    v17 = "dataIn Buffer is NULL";
    p_c = (uint8_t *)&c;
    v19 = v16;
    v20 = 2;
LABEL_20:
    _os_log_error_impl(&dword_24B855000, v19, OS_LOG_TYPE_ERROR, v17, p_c, v20);
    return;
  }
  v9 = v8;
  *(_QWORD *)&c.wbuf[14] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&c.wbuf[6] = v10;
  *(_OWORD *)&c.wbuf[10] = v10;
  *(_OWORD *)&c.hash[6] = v10;
  *(_OWORD *)&c.wbuf[2] = v10;
  *(_OWORD *)c.count = v10;
  *(_OWORD *)&c.hash[2] = v10;
  if (!ctu::fs::get_file_size())
    return;
  CC_SHA256_Init(&c);
  v11 = a1;
  if (a1[23] < 0)
    v11 = *(const char **)a1;
  v12 = open(v11, 0);
  if (v12 >= 1)
  {
    v13 = 0;
    while (1)
    {
      v14 = read(v12, a2, a3);
      if (v14 == -1)
        break;
      CC_SHA256_Update(&c, a2, v14);
      v13 += v14;
      if (v13 >= 0xAAAAAAAAAAAAAAAALL)
        goto LABEL_24;
    }
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_2579B8A80 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v28 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
      {
LABEL_24:
        CC_SHA256_Final(v9, &c);
        close(v12);
        return;
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v28 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
    }
    if (a1[23] < 0)
      a1 = *(const char **)a1;
    v29 = __error();
    v30 = strerror(*v29);
    v31 = *__error();
    v32 = *__error();
    *(_DWORD *)buf = 136315906;
    v35 = a1;
    v36 = 2080;
    v37 = v30;
    v38 = 1024;
    v39 = v31;
    v40 = 1024;
    v41 = v32;
    _os_log_error_impl(&dword_24B855000, v28, OS_LOG_TYPE_ERROR, "Failed to read: %s : %s (%d,0x%x)", buf, 0x22u);
    goto LABEL_24;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v22 = qword_2579B8A80;
    if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
      return;
    goto LABEL_17;
  }
  dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
  v22 = qword_2579B8A80;
  if (os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
  {
LABEL_17:
    if (a1[23] < 0)
      a1 = *(const char **)a1;
    v23 = __error();
    v24 = strerror(*v23);
    v25 = *__error();
    v26 = *__error();
    *(_DWORD *)buf = 136315906;
    v35 = a1;
    v36 = 2080;
    v37 = v24;
    v38 = 1024;
    v39 = v25;
    v40 = 1024;
    v41 = v26;
    v17 = "Failed to open: %s : %s (%d, 0x%x)";
    p_c = buf;
    v19 = v22;
    v20 = 34;
    goto LABEL_20;
  }
}

void sub_24B8889E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_24B8889F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_24B888A10(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_24B888A28(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_24B888A40(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

BOOL util::markPurgeableFile(uint64_t *a1)
{
  uint64_t *v1;
  int v2;
  int v3;
  int v4;
  unsigned __int8 v5;
  uint64_t v6;
  _BOOL8 result;
  int *v8;
  char *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  int *v15;
  char *v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t *v19;
  __int16 v20;
  _BYTE v21[14];
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v1 = a1;
  v24 = *MEMORY[0x24BDAC8D0];
  v17 = 65541;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v2 = open((const char *)a1, 0);
    if ((v2 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_11:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_2579B8A80 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v14 = qword_2579B8A80;
      result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v14 = qword_2579B8A80;
      result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
    }
    if (*((char *)v1 + 23) < 0)
      v1 = (uint64_t *)*v1;
    v15 = __error();
    v16 = strerror(*v15);
    *(_DWORD *)buf = 136315394;
    v19 = v1;
    v20 = 2080;
    *(_QWORD *)v21 = v16;
    v10 = "Failed to open %s : %s";
    v11 = v14;
    v12 = 22;
    goto LABEL_17;
  }
  v2 = open((const char *)*a1, 0);
  if (v2 < 0)
    goto LABEL_11;
LABEL_3:
  v3 = v2;
  v4 = ffsctl(v2, 0xC0084A44uLL, &v17, 0);
  close(v3);
  if (!v4)
    return 1;
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_2579B8A80;
    result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
    if (result)
    {
LABEL_7:
      if (*((char *)v1 + 23) < 0)
        v1 = (uint64_t *)*v1;
      v8 = __error();
      v9 = strerror(*v8);
      *(_DWORD *)buf = 136315906;
      v19 = v1;
      v20 = 1024;
      *(_DWORD *)v21 = v4;
      *(_WORD *)&v21[4] = 2080;
      *(_QWORD *)&v21[6] = v9;
      v22 = 2048;
      v23 = v17;
      v10 = "Failed to mark %s as purgeable %d (%s) (flags 0x%llx)";
      v11 = v6;
      v12 = 38;
LABEL_17:
      _os_log_error_impl(&dword_24B855000, v11, OS_LOG_TYPE_ERROR, v10, buf, v12);
      return 0;
    }
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v6 = qword_2579B8A80;
    result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
    if (result)
      goto LABEL_7;
  }
  return result;
}

BOOL util::checkLogFileAge(uint64_t a1, int64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  std::sub_match<const char *> *v6;
  std::sub_match<std::__wrap_iter<const char *>> *v7;
  int v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  char *v16;
  __int128 *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  _BOOL8 v21;
  void *v22;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  char *v32;
  __int128 *v33;
  _OWORD *v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  char *v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  char *v58;
  __int128 *v59;
  _OWORD *v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  char *v71;
  __int128 *v72;
  _OWORD *v73;
  unint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  char *v84;
  __int128 *v85;
  _OWORD *v86;
  unint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  time_t v92;
  std::string v93;
  _BYTE v94[40];
  __int128 v95;
  uint64_t v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  tm __p;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v95 = 0xAAAAAAAAAAAAAAAALL;
  v97 = 0xAAAAAAAAAAAAAA00;
  v99 = v4;
  v96 = 0;
  v98 = 0uLL;
  LOBYTE(v99) = 0;
  BYTE8(v99) = 0;
  v100 = 0;
  memset(v94, 0, sizeof(v94));
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (std::sub_match<const char *> *)a1;
  else
    v6 = *(std::sub_match<const char *> **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  v7 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v6 + v5);
  v103 = 0xAAAAAAAAAAAAAA00;
  __p.tm_gmtoff = 0xAAAAAAAAAAAAAAAALL;
  v106 = v4;
  __p.tm_zone = 0;
  v102 = 0;
  v104 = 0;
  v105 = 0;
  LOBYTE(v106) = 0;
  BYTE8(v106) = 0;
  v107 = 0;
  memset(&__p, 0, 41);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a3, v6, (std::sub_match<const char *> *)((char *)v6 + v5), (std::vector<std::csub_match> *)&__p, 4160);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)v94, (uint64_t)v6, v7, (uint64_t *)&__p.tm_sec, 0);
  if (*(_QWORD *)&__p.tm_sec)
  {
    *(_QWORD *)&__p.tm_hour = *(_QWORD *)&__p.tm_sec;
    operator delete(*(void **)&__p.tm_sec);
  }
  if ((_BYTE)v99)
    v9 = 0;
  else
    v9 = v8;
  if (v9 != 1)
  {
    v21 = 0;
    v22 = *(void **)v94;
    if (!*(_QWORD *)v94)
      return v21;
LABEL_23:
    *(_QWORD *)&v94[8] = v22;
    operator delete(v22);
    return v21;
  }
  memset(&__p, 0, sizeof(__p));
  v10 = *(_QWORD *)v94;
  if (!*(_BYTE *)(*(_QWORD *)v94 + 40))
  {
    memset(&v93, 0, sizeof(v93));
    goto LABEL_33;
  }
  v12 = *(_QWORD *)(*(_QWORD *)v94 + 24);
  v11 = *(char **)(*(_QWORD *)v94 + 32);
  v13 = (unint64_t)&v11[-v12];
  if ((unint64_t)&v11[-v12] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v13 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v11 - v12;
    v14 = &v93;
    if ((char *)v12 != v11)
      goto LABEL_16;
LABEL_29:
    *v14 = 0;
    goto LABEL_33;
  }
  v24 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17)
    v24 = v13 | 7;
  v25 = v24 + 1;
  v14 = operator new(v24 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v11[-v12];
  v93.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  if ((char *)v12 == v11)
    goto LABEL_29;
LABEL_16:
  if (v13 < 0x20 || (unint64_t)&v14[-v12] < 0x20)
  {
    v15 = v14;
    v16 = (char *)v12;
  }
  else
  {
    v15 = &v14[v13 & 0xFFFFFFFFFFFFFFE0];
    v16 = (char *)(v12 + (v13 & 0xFFFFFFFFFFFFFFE0));
    v17 = (__int128 *)(v12 + 16);
    v18 = v14 + 16;
    v19 = v13 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v20 = *v17;
      *(v18 - 1) = *(v17 - 1);
      *v18 = v20;
      v17 += 2;
      v18 += 2;
      v19 -= 32;
    }
    while (v19);
    if (v13 == (v13 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_32;
  }
  do
  {
    v26 = *v16++;
    *v15++ = v26;
  }
  while (v16 != v11);
LABEL_32:
  *v15 = 0;
LABEL_33:
  util::convert<int>(&v93, &__p.tm_year, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    __p.tm_year -= 1900;
    if (*(_BYTE *)(v10 + 64))
      goto LABEL_35;
LABEL_45:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_53;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  __p.tm_year -= 1900;
  if (!*(_BYTE *)(v10 + 64))
    goto LABEL_45;
LABEL_35:
  v28 = *(_QWORD *)(v10 + 48);
  v27 = *(char **)(v10 + 56);
  v29 = (unint64_t)&v27[-v28];
  if ((unint64_t)&v27[-v28] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v29 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v27 - v28;
    v30 = &v93;
    if ((char *)v28 != v27)
      goto LABEL_38;
LABEL_49:
    *v30 = 0;
    goto LABEL_53;
  }
  v37 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v29 | 7) != 0x17)
    v37 = v29 | 7;
  v38 = v37 + 1;
  v30 = operator new(v37 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v27[-v28];
  v93.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  if ((char *)v28 == v27)
    goto LABEL_49;
LABEL_38:
  if (v29 < 0x20 || (unint64_t)&v30[-v28] < 0x20)
  {
    v31 = v30;
    v32 = (char *)v28;
  }
  else
  {
    v31 = &v30[v29 & 0xFFFFFFFFFFFFFFE0];
    v32 = (char *)(v28 + (v29 & 0xFFFFFFFFFFFFFFE0));
    v33 = (__int128 *)(v28 + 16);
    v34 = v30 + 16;
    v35 = v29 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v36 = *v33;
      *(v34 - 1) = *(v33 - 1);
      *v34 = v36;
      v33 += 2;
      v34 += 2;
      v35 -= 32;
    }
    while (v35);
    if (v29 == (v29 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_52;
  }
  do
  {
    v39 = *v32++;
    *v31++ = v39;
  }
  while (v32 != v27);
LABEL_52:
  *v31 = 0;
LABEL_53:
  util::convert<int>(&v93, &__p.tm_mon, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    --__p.tm_mon;
    if (*(_BYTE *)(v10 + 88))
      goto LABEL_55;
LABEL_65:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_73;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  --__p.tm_mon;
  if (!*(_BYTE *)(v10 + 88))
    goto LABEL_65;
LABEL_55:
  v41 = *(_QWORD *)(v10 + 72);
  v40 = *(char **)(v10 + 80);
  v42 = (unint64_t)&v40[-v41];
  if ((unint64_t)&v40[-v41] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v42 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v40 - v41;
    v43 = &v93;
    if ((char *)v41 != v40)
      goto LABEL_58;
LABEL_69:
    *v43 = 0;
    goto LABEL_73;
  }
  v50 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v42 | 7) != 0x17)
    v50 = v42 | 7;
  v51 = v50 + 1;
  v43 = operator new(v50 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v40[-v41];
  v93.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  if ((char *)v41 == v40)
    goto LABEL_69;
LABEL_58:
  if (v42 < 0x20 || (unint64_t)&v43[-v41] < 0x20)
  {
    v44 = v43;
    v45 = (char *)v41;
  }
  else
  {
    v44 = &v43[v42 & 0xFFFFFFFFFFFFFFE0];
    v45 = (char *)(v41 + (v42 & 0xFFFFFFFFFFFFFFE0));
    v46 = (__int128 *)(v41 + 16);
    v47 = v43 + 16;
    v48 = v42 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v49 = *v46;
      *(v47 - 1) = *(v46 - 1);
      *v47 = v49;
      v46 += 2;
      v47 += 2;
      v48 -= 32;
    }
    while (v48);
    if (v42 == (v42 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_72;
  }
  do
  {
    v52 = *v45++;
    *v44++ = v52;
  }
  while (v45 != v40);
LABEL_72:
  *v44 = 0;
LABEL_73:
  util::convert<int>(&v93, (_DWORD *)((unint64_t)&__p | 0xC), 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v10 + 112))
      goto LABEL_75;
LABEL_85:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_93;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v10 + 112))
    goto LABEL_85;
LABEL_75:
  v54 = *(_QWORD *)(v10 + 96);
  v53 = *(char **)(v10 + 104);
  v55 = (unint64_t)&v53[-v54];
  if ((unint64_t)&v53[-v54] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v55 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v53 - v54;
    v56 = &v93;
    if ((char *)v54 != v53)
      goto LABEL_78;
LABEL_89:
    *v56 = 0;
    goto LABEL_93;
  }
  v63 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17)
    v63 = v55 | 7;
  v64 = v63 + 1;
  v56 = operator new(v63 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v53[-v54];
  v93.__r_.__value_.__r.__words[2] = v64 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if ((char *)v54 == v53)
    goto LABEL_89;
LABEL_78:
  if (v55 < 0x20 || (unint64_t)&v56[-v54] < 0x20)
  {
    v57 = v56;
    v58 = (char *)v54;
  }
  else
  {
    v57 = &v56[v55 & 0xFFFFFFFFFFFFFFE0];
    v58 = (char *)(v54 + (v55 & 0xFFFFFFFFFFFFFFE0));
    v59 = (__int128 *)(v54 + 16);
    v60 = v56 + 16;
    v61 = v55 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v62 = *v59;
      *(v60 - 1) = *(v59 - 1);
      *v60 = v62;
      v59 += 2;
      v60 += 2;
      v61 -= 32;
    }
    while (v61);
    if (v55 == (v55 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_92;
  }
  do
  {
    v65 = *v58++;
    *v57++ = v65;
  }
  while (v58 != v53);
LABEL_92:
  *v57 = 0;
LABEL_93:
  util::convert<int>(&v93, &__p.tm_hour, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v10 + 136))
      goto LABEL_95;
LABEL_105:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_113;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v10 + 136))
    goto LABEL_105;
LABEL_95:
  v67 = *(_QWORD *)(v10 + 120);
  v66 = *(char **)(v10 + 128);
  v68 = (unint64_t)&v66[-v67];
  if ((unint64_t)&v66[-v67] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v68 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v66 - v67;
    v69 = &v93;
    if ((char *)v67 != v66)
      goto LABEL_98;
LABEL_109:
    *v69 = 0;
    goto LABEL_113;
  }
  v76 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v68 | 7) != 0x17)
    v76 = v68 | 7;
  v77 = v76 + 1;
  v69 = operator new(v76 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v66[-v67];
  v93.__r_.__value_.__r.__words[2] = v77 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
  if ((char *)v67 == v66)
    goto LABEL_109;
LABEL_98:
  if (v68 < 0x20 || (unint64_t)&v69[-v67] < 0x20)
  {
    v70 = v69;
    v71 = (char *)v67;
  }
  else
  {
    v70 = &v69[v68 & 0xFFFFFFFFFFFFFFE0];
    v71 = (char *)(v67 + (v68 & 0xFFFFFFFFFFFFFFE0));
    v72 = (__int128 *)(v67 + 16);
    v73 = v69 + 16;
    v74 = v68 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v75 = *v72;
      *(v73 - 1) = *(v72 - 1);
      *v73 = v75;
      v72 += 2;
      v73 += 2;
      v74 -= 32;
    }
    while (v74);
    if (v68 == (v68 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_112;
  }
  do
  {
    v78 = *v71++;
    *v70++ = v78;
  }
  while (v71 != v66);
LABEL_112:
  *v70 = 0;
LABEL_113:
  util::convert<int>(&v93, &__p.tm_min, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v10 + 160))
      goto LABEL_115;
LABEL_125:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_133;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v10 + 160))
    goto LABEL_125;
LABEL_115:
  v80 = *(_QWORD *)(v10 + 144);
  v79 = *(char **)(v10 + 152);
  v81 = (unint64_t)&v79[-v80];
  if ((unint64_t)&v79[-v80] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v81 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v79 - v80;
    v82 = &v93;
    if ((char *)v80 != v79)
      goto LABEL_118;
LABEL_129:
    *v82 = 0;
    goto LABEL_133;
  }
  v89 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17)
    v89 = v81 | 7;
  v90 = v89 + 1;
  v82 = operator new(v89 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v79[-v80];
  v93.__r_.__value_.__r.__words[2] = v90 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
  if ((char *)v80 == v79)
    goto LABEL_129;
LABEL_118:
  if (v81 < 0x20 || (unint64_t)&v82[-v80] < 0x20)
  {
    v83 = v82;
    v84 = (char *)v80;
  }
  else
  {
    v83 = &v82[v81 & 0xFFFFFFFFFFFFFFE0];
    v84 = (char *)(v80 + (v81 & 0xFFFFFFFFFFFFFFE0));
    v85 = (__int128 *)(v80 + 16);
    v86 = v82 + 16;
    v87 = v81 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v88 = *v85;
      *(v86 - 1) = *(v85 - 1);
      *v86 = v88;
      v85 += 2;
      v86 += 2;
      v87 -= 32;
    }
    while (v87);
    if (v81 == (v81 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_132;
  }
  do
  {
    v91 = *v84++;
    *v83++ = v91;
  }
  while (v84 != v79);
LABEL_132:
  *v83 = 0;
LABEL_133:
  util::convert<int>(&v93, &__p, 10);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  __p.tm_isdst = -1;
  v92 = mktime(&__p);
  v93.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v93.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday((timeval *)&v93, 0);
  v21 = (int64_t)(v93.__r_.__value_.__r.__words[0] - v92) > a2;
  v22 = *(void **)v94;
  if (*(_QWORD *)v94)
    goto LABEL_23;
  return v21;
}

void sub_24B8895AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t util::convert<int>(const std::string *a1, _DWORD *a2, int a3)
{
  uint64_t v6;
  const char *v7;
  std::string::size_type size;
  size_t __idx;

  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    LODWORD(v6) = strcasecmp((const char *)a1, "false");
    if (!(_DWORD)v6)
      goto LABEL_29;
    LODWORD(v6) = strcasecmp((const char *)a1, "off");
    if (!(_DWORD)v6)
      goto LABEL_29;
    LODWORD(v6) = strcasecmp((const char *)a1, "no");
    if (!(_DWORD)v6)
      goto LABEL_29;
    if (strcasecmp((const char *)a1, "true")
      && strcasecmp((const char *)a1, "on")
      && strcasecmp((const char *)a1, "yes")
      && strcasecmp((const char *)a1, "full")
      && strcasecmp((const char *)a1, "streaming"))
    {
      v7 = (const char *)a1;
      if (!strcasecmp((const char *)a1, "lite"))
        goto LABEL_30;
      goto LABEL_21;
    }
LABEL_28:
    LODWORD(v6) = 1;
    goto LABEL_29;
  }
  v7 = (const char *)a1->__r_.__value_.__r.__words[0];
  LODWORD(v6) = strcasecmp(a1->__r_.__value_.__l.__data_, "false");
  if (!(_DWORD)v6)
    goto LABEL_29;
  LODWORD(v6) = strcasecmp(v7, "off");
  if (!(_DWORD)v6)
    goto LABEL_29;
  LODWORD(v6) = strcasecmp(v7, "no");
  if (!(_DWORD)v6)
    goto LABEL_29;
  if (!strcasecmp(v7, "true")
    || !strcasecmp(v7, "on")
    || !strcasecmp(v7, "yes")
    || !strcasecmp(v7, "full")
    || !strcasecmp(v7, "streaming"))
  {
    goto LABEL_28;
  }
  if (!strcasecmp(v7, "lite"))
  {
LABEL_30:
    LODWORD(v6) = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v7, "background"))
    goto LABEL_30;
  __idx = 0xAAAAAAAAAAAAAAAALL;
  v6 = std::stol(a1, &__idx, a3);
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (__idx != size || v6 < (uint64_t)0xFFFFFFFF80000000 || v6 > 0x7FFFFFFF)
    return 0;
LABEL_29:
  *a2 = v6;
  return 1;
}

uint64_t sub_24B889860(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

void util::findBasebandLogInfoFile(const void **a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v3;
  __int128 v5;
  int v6;
  size_t v7;
  int v8;
  size_t size;
  unint64_t v10;
  void **v11;
  const void *v12;
  char *v13;
  std::string *v14;
  timespec v15;
  const char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  DIR *v21;
  DIR *v22;
  dirent *v23;
  _DWORD *v24;
  void **v28;
  void *v29;
  _DWORD *v30;
  char *v34;
  uint64_t v35;
  int v36;
  int v38;
  size_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  _OWORD *v45;
  _OWORD *v46;
  __int128 *v47;
  void *__dst[3];
  std::string v49;
  stat v50;

  *a3 = 0;
  a3[1] = 0;
  v46 = a3;
  a3[2] = 0;
  v3 = *a2;
  v47 = a2[1];
  if (v3 == v47)
    return;
  while (1)
  {
    memset(&v49, 170, sizeof(v49));
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
    }
    else
    {
      v5 = *v3;
      v49.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v5;
    }
    v6 = *((char *)a1 + 23);
    if (v6 >= 0)
      v7 = *((unsigned __int8 *)a1 + 23);
    else
      v7 = (size_t)a1[1];
    v8 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    else
      size = v49.__r_.__value_.__l.__size_;
    v10 = size + v7;
    memset(__dst, 170, sizeof(__dst));
    if (size + v7 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v10 <= 0x16)
    {
      memset(__dst, 0, sizeof(__dst));
      v11 = __dst;
      HIBYTE(__dst[2]) = size + v7;
      if (!v7)
        goto LABEL_20;
LABEL_16:
      if (v6 >= 0)
        v12 = a1;
      else
        v12 = *a1;
      memmove(v11, v12, v7);
      goto LABEL_20;
    }
    v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v18 = v10 | 7;
    v19 = v18 + 1;
    v11 = (void **)operator new(v18 + 1);
    __dst[1] = (void *)(size + v7);
    __dst[2] = (void *)(v19 | 0x8000000000000000);
    __dst[0] = v11;
    if (v7)
      goto LABEL_16;
LABEL_20:
    v13 = (char *)v11 + v7;
    if (size)
    {
      if (v8 >= 0)
        v14 = &v49;
      else
        v14 = (std::string *)v49.__r_.__value_.__r.__words[0];
      memmove(v13, v14, size);
    }
    v13[size] = 0;
    v15.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v15.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v50.st_blksize = v15;
    *(timespec *)v50.st_qspare = v15;
    v50.st_birthtimespec = v15;
    *(timespec *)&v50.st_size = v15;
    v50.st_mtimespec = v15;
    v50.st_ctimespec = v15;
    *(timespec *)&v50.st_uid = v15;
    v50.st_atimespec = v15;
    *(timespec *)&v50.st_dev = v15;
    if (SHIBYTE(__dst[2]) >= 0)
      v16 = (const char *)__dst;
    else
      v16 = (const char *)__dst[0];
    if (stat(v16, &v50)
      || (SHIBYTE(__dst[2]) >= 0 ? (v20 = (const char *)__dst) : (v20 = (const char *)__dst[0]),
          v21 = opendir(v20),
          (v22 = v21) == 0))
    {
      v17 = HIBYTE(__dst[2]);
      goto LABEL_30;
    }
    v23 = readdir(v21);
    closedir(v22);
    v17 = HIBYTE(__dst[2]);
    if (v23)
      break;
LABEL_30:
    if (v17 < 0)
    {
      operator delete(__dst[0]);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
LABEL_59:
        operator delete(v49.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_59;
    }
    v3 = (__int128 *)((char *)v3 + 24);
    if (v3 == v47)
      return;
  }
  if ((HIBYTE(__dst[2]) & 0x80) == 0)
  {
    if (HIBYTE(__dst[2]) <= 4u)
      goto LABEL_99;
    v24 = (_DWORD *)((char *)__dst + HIBYTE(__dst[2]) - 5);
    if (*v24 == 1885626669 && *((_BYTE *)__dst + HIBYTE(__dst[2]) - 1) == 108)
      goto LABEL_79;
    if (*v24 == 1935962413 && *((_BYTE *)__dst + HIBYTE(__dst[2]) - 1) == 115)
      goto LABEL_79;
    if (*v24 == 1634296877 && *((_BYTE *)__dst + HIBYTE(__dst[2]) - 1) == 103)
      goto LABEL_79;
    if (HIBYTE(__dst[2]) < 9u)
      goto LABEL_99;
    v28 = __dst;
    v29 = (void *)HIBYTE(__dst[2]);
    goto LABEL_74;
  }
  v29 = __dst[1];
  if (__dst[1] < (void *)5)
    goto LABEL_99;
  v28 = (void **)__dst[0];
  v30 = (char *)__dst[1] + (unint64_t)__dst[0] - 5;
  if ((*v30 != 1885626669 || *((_BYTE *)__dst[1] + (unint64_t)__dst[0] - 1) != 108)
    && (*v30 != 1935962413 || *((_BYTE *)__dst[1] + (unint64_t)__dst[0] - 1) != 115)
    && (*v30 != 1634296877 || *((_BYTE *)__dst[1] + (unint64_t)__dst[0] - 1) != 103))
  {
    if (__dst[1] < (void *)9)
LABEL_99:
      std::string::__throw_out_of_range[abi:ne180100]();
LABEL_74:
    v34 = (char *)v28 + (_QWORD)v29;
    v35 = *(_QWORD *)(v34 - 9);
    v36 = *(v34 - 1);
    if (v35 == 0x636172742D62622DLL && v36 == 101)
      goto LABEL_79;
    goto LABEL_30;
  }
LABEL_79:
  v38 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  else
    v39 = v49.__r_.__value_.__l.__size_;
  v40 = v39 + 9;
  memset(&v50, 170, 24);
  if (v39 + 9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v40 >= 0x17)
  {
    v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v42 = v40 | 7;
    v43 = v42 + 1;
    v41 = operator new(v42 + 1);
    v50.st_ino = v39 + 9;
    *(_QWORD *)&v50.st_uid = v43 | 0x8000000000000000;
    *(_QWORD *)&v50.st_dev = v41;
  }
  else
  {
    memset(&v50, 0, 24);
    v41 = &v50;
    HIBYTE(v50.st_gid) = v39 + 9;
    if (!v39)
      goto LABEL_93;
  }
  if (v38 >= 0)
    v44 = &v49;
  else
    v44 = (std::string *)v49.__r_.__value_.__r.__words[0];
  memmove(v41, v44, v39);
LABEL_93:
  strcpy((char *)v41 + v39, "/info.txt");
  v45 = v46;
  *v46 = *(_OWORD *)&v50.st_dev;
  *((_QWORD *)v45 + 2) = *(_QWORD *)&v50.st_uid;
  if ((v17 & 0x80) == 0)
  {
    if ((v38 & 0x80) == 0)
      return;
LABEL_97:
    operator delete(v49.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__dst[0]);
  if ((*((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_97;
}

void sub_24B889CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  _Unwind_Resume(exception_object);
}

BOOL util::isDumpForSysdiagnose(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  int v3;
  size_t v4;
  unint64_t v5;
  const void **v6;
  std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  const void **v12;
  std::string *v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  _BOOL4 FilteredFiles;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _BOOL8 v21;
  void **v22;
  void **v23;
  void *v24;
  int v25;
  size_t size;
  int v27;
  size_t v28;
  unint64_t v29;
  void **v30;
  const void *v31;
  char *v32;
  std::string *v33;
  void **v34;
  uint64_t v35;
  int v36;
  void *v37;
  char *v38;
  void **v39;
  char *v40;
  unsigned __int8 v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  NSObject *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void **v55;
  void **v56;
  void *v57;
  std::string *v59;
  void *v60;
  void **v61;
  uint64_t v62;
  std::string v63;
  std::locale v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::string v70;
  std::string v71;
  _BYTE v72[48];
  __int128 v73;
  void *v74;
  void **v75;
  uint64_t v76;
  void *__dst[4];
  void *__p[76];

  __p[73] = *(void **)MEMORY[0x24BDAC8D0];
  v74 = 0;
  v75 = 0;
  v76 = 0;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v72[32] = v2;
  v73 = v2;
  *(_OWORD *)v72 = v2;
  *(_OWORD *)&v72[16] = v2;
  v3 = *(char *)(a2 + 23);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  v5 = v4 + 2;
  memset(&v71, 170, sizeof(v71));
  if (v4 + 2 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (const void **)a2;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    v71.__r_.__value_.__l.__size_ = v4 + 2;
    v71.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    v71.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    *v11 = 10798;
    v8 = (std::string::value_type *)(v11 + 1);
  }
  else
  {
    v71.__r_.__value_.__r.__words[2] = 0;
    *((_BYTE *)&v71.__r_.__value_.__s + 23) = v4 + 2;
    v8 = &v71.__r_.__value_.__s.__data_[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = 0x2A2EuLL;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = v6;
  else
    v12 = (const void **)*v6;
  memmove(v8, v12, v4);
LABEL_15:
  v8[v4] = 0;
  v13 = std::string::append(&v71, ".*", 2uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __p[2] = (void *)v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v72, (uint64_t)__p, 0);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
LABEL_20:
    operator delete(v71.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_21;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
LABEL_17:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_18:
    v70 = *(std::string *)a1;
    goto LABEL_22;
  }
LABEL_21:
  std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
LABEL_22:
  std::locale::locale(&v64, (const std::locale *)v72);
  v65 = *(_OWORD *)&v72[8];
  v66 = *(_OWORD *)&v72[24];
  v67 = *(_QWORD *)&v72[40];
  v68 = (std::__shared_weak_count *)v73;
  if ((_QWORD)v73)
  {
    v15 = (unint64_t *)(v73 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v69 = *((_QWORD *)&v73 + 1);
  FilteredFiles = support::fs::getFilteredFiles((const char *)&v70, (uint64_t)&v64, (uint64_t)&v74, 0);
  v18 = v68;
  if (!v68)
    goto LABEL_29;
  p_shared_owners = (unint64_t *)&v68->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    std::locale::~locale(&v64);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_30:
      if (FilteredFiles)
        goto LABEL_31;
LABEL_35:
      v21 = 0;
      goto LABEL_116;
    }
  }
  else
  {
LABEL_29:
    std::locale::~locale(&v64);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
  }
  operator delete(v70.__r_.__value_.__l.__data_);
  if (!FilteredFiles)
    goto LABEL_35;
LABEL_31:
  memset(&v71, 170, sizeof(v71));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v63 = *(std::string *)a1;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v60, (uint64_t)v74, (uint64_t)v75, 0xAAAAAAAAAAAAAAABLL * (((char *)v75 - (_BYTE *)v74) >> 3));
  util::findBasebandLogInfoFile((const void **)&v63.__r_.__value_.__l.__data_, (__int128 **)&v60, &v71);
  v22 = (void **)v60;
  if (v60)
  {
    v23 = v61;
    v24 = v60;
    if (v61 != v60)
    {
      do
      {
        if (*((char *)v23 - 1) < 0)
          operator delete(*(v23 - 3));
        v23 -= 3;
      }
      while (v23 != v22);
      v24 = v60;
    }
    v61 = v22;
    operator delete(v24);
  }
  if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v25 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    else
      size = v71.__r_.__value_.__l.__size_;
    if (size)
      goto LABEL_50;
LABEL_97:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_2579B8A80 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v47 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_DEFAULT))
        goto LABEL_103;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v47 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_DEFAULT))
        goto LABEL_103;
    }
    if (*((char *)v6 + 23) < 0)
      v6 = (const void **)*v6;
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v6;
    _os_log_impl(&dword_24B855000, v47, OS_LOG_TYPE_DEFAULT, "No baseband info file found for %s", (uint8_t *)__p, 0xCu);
LABEL_103:
    v21 = 0;
    if ((v25 & 0x80) != 0)
      goto LABEL_115;
    goto LABEL_116;
  }
  operator delete(v63.__r_.__value_.__l.__data_);
  v25 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  else
    size = v71.__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_97;
LABEL_50:
  memset(__p, 170, 0x240uLL);
  v27 = *(char *)(a1 + 23);
  if (v27 >= 0)
    v28 = *(unsigned __int8 *)(a1 + 23);
  else
    v28 = *(_QWORD *)(a1 + 8);
  v29 = v28 + size;
  memset(__dst, 170, 24);
  if (v28 + size > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v29 <= 0x16)
  {
    memset(__dst, 0, 24);
    v30 = __dst;
    HIBYTE(__dst[2]) = v28 + size;
    if (!v28)
      goto LABEL_60;
    goto LABEL_56;
  }
  v48 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v29 | 7) != 0x17)
    v48 = v29 | 7;
  v49 = v48 + 1;
  v30 = (void **)operator new(v48 + 1);
  __dst[1] = (void *)(v28 + size);
  __dst[2] = (void *)(v49 | 0x8000000000000000);
  __dst[0] = v30;
  if (v28)
  {
LABEL_56:
    if (v27 >= 0)
      v31 = (const void *)a1;
    else
      v31 = *(const void **)a1;
    memmove(v30, v31, v28);
  }
LABEL_60:
  v32 = (char *)v30 + v28;
  if (v25 >= 0)
    v33 = &v71;
  else
    v33 = (std::string *)v71.__r_.__value_.__r.__words[0];
  memmove(v32, v33, size);
  v32[size] = 0;
  std::ifstream::basic_ifstream(__p);
  if (SHIBYTE(__dst[2]) < 0)
  {
    operator delete(__dst[0]);
    if (__p[17])
      goto LABEL_65;
LABEL_110:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_2579B8A80 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v51 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
      {
LABEL_113:
        v21 = 0;
        goto LABEL_114;
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v51 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        goto LABEL_113;
    }
    v59 = (std::string *)v71.__r_.__value_.__r.__words[0];
    if (v25 >= 0)
      v59 = &v71;
    LODWORD(__dst[0]) = 136315138;
    *(void **)((char *)__dst + 4) = v59;
    _os_log_error_impl(&dword_24B855000, v51, OS_LOG_TYPE_ERROR, "Failed to open info file: %s", (uint8_t *)__dst, 0xCu);
    goto LABEL_113;
  }
  if (!__p[17])
    goto LABEL_110;
LABEL_65:
  std::istream::seekg();
  memset(__dst, 170, 24);
  v34 = __dst;
  support::fs::readCurrentLine(__p, __dst);
  v35 = HIBYTE(__dst[2]);
  v36 = SHIBYTE(__dst[2]);
  v37 = __dst[0];
  if (SHIBYTE(__dst[2]) < 0)
  {
    v35 = (uint64_t)__dst[1];
    v34 = (void **)__dst[0];
  }
  v38 = (char *)v34 + v35;
  if (v35 >= 35)
  {
    v39 = v34;
    do
    {
      v40 = (char *)memchr(v39, 98, v35 - 34);
      if (!v40)
        break;
      if (*(_QWORD *)v40 == 0x6320676F6C206262
        && *((_QWORD *)v40 + 1) == 0x6F697463656C6C6FLL
        && *((_QWORD *)v40 + 2) == 0x20726F66202D206ELL
        && *((_QWORD *)v40 + 3) == 0x6E67616964737973
        && *(_QWORD *)(v40 + 27) == 0x65736F6E67616964)
      {
        goto LABEL_85;
      }
      v39 = (void **)(v40 + 1);
      v35 = v38 - (char *)v39;
    }
    while (v38 - (char *)v39 > 34);
  }
  v40 = v38;
LABEL_85:
  v21 = v40 != v38 && v40 - (char *)v34 != -1;
  if (v36 < 0)
    operator delete(v37);
LABEL_114:
  __p[0] = *(void **)MEMORY[0x24BEDB7E0];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x24BD299B8](&__p[2]);
  std::istream::~istream();
  MEMORY[0x24BD29B5C](&__p[53]);
  if ((*((_BYTE *)&v71.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_115:
    operator delete(v71.__r_.__value_.__l.__data_);
LABEL_116:
  v52 = (std::__shared_weak_count *)v73;
  if ((_QWORD)v73)
  {
    v53 = (unint64_t *)(v73 + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  std::locale::~locale((std::locale *)v72);
  v55 = (void **)v74;
  if (v74)
  {
    v56 = v75;
    v57 = v74;
    if (v75 != v74)
    {
      do
      {
        if (*((char *)v56 - 1) < 0)
          operator delete(*(v56 - 3));
        v56 -= 3;
      }
      while (v56 != v55);
      v57 = v74;
    }
    v75 = v55;
    operator delete(v57);
  }
  return v21;
}

void sub_24B88A5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,std::locale a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a31);
  std::vector<std::string>::~vector[abi:ne180100](&a40);
  _Unwind_Resume(a1);
}

void sub_24B88A62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::locale a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  std::vector<std::string>::~vector[abi:ne180100](&a10);
  if (a18 < 0)
    operator delete(a13);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a34);
  std::vector<std::string>::~vector[abi:ne180100](&a43);
  _Unwind_Resume(a1);
}

void sub_24B88A650(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a17);
  if (a30 < 0)
    JUMPOUT(0x24B88A668);
  JUMPOUT(0x24B88A66CLL);
}

void sub_24B88A684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0)
  {
    operator delete(__p);
    if (a33 < 0)
    {
LABEL_5:
      operator delete(a28);
      std::vector<std::string>::~vector[abi:ne180100](&a43);
      _Unwind_Resume(a1);
    }
  }
  else if (a33 < 0)
  {
    goto LABEL_5;
  }
  std::vector<std::string>::~vector[abi:ne180100](&a43);
  _Unwind_Resume(a1);
}

void sub_24B88A6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  std::vector<std::string>::~vector[abi:ne180100](&a40);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x24BD299AC](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_24B88A7D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x24BD29B5C](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x24BD299B8](a1 + 2);
  std::istream::~istream();
  MEMORY[0x24BD29B5C](a1 + 53);
  return a1;
}

void util::findLastLogDumpTimestamp(util *this@<X0>, const char *__s@<X1>, const char *a3@<X2>, int a4@<W3>, char *a5@<X4>, std::string *a6@<X8>)
{
  unsigned int v8;
  std::string *v10;
  size_t v11;
  size_t v12;
  __int128 *p_dst;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  size_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _BOOL4 FilteredFiles;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __n128 v31;
  unint64_t v32;
  uint64_t v33;
  const void **v34;
  __int128 v35;
  int64_t size;
  std::string::size_type v37;
  int v38;
  std::string *v39;
  std::string *v40;
  std::string *v41;
  int64_t v42;
  __int128 v43;
  std::string::size_type v44;
  std::sub_match<const char *> *v45;
  int v46;
  std::string::size_type v47;
  std::string *v48;
  _BYTE *p_end_cap;
  std::vector<std::ssub_match>::pointer begin;
  std::__wrap_iter<const char *>::iterator_type i;
  const char **p_i;
  const char *v53;
  unint64_t v54;
  __int128 *v55;
  __int128 *v56;
  const char *v57;
  __int128 *v58;
  _OWORD *v59;
  unint64_t v60;
  __int128 v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  int v65;
  std::sub_match<std::__wrap_iter<const char *>> *v66;
  char *v67;
  int v68;
  std::string *v69;
  int64_t v70;
  char *v71;
  char *v72;
  char *v73;
  int v74;
  std::string *v75;
  int64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  size_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  _BOOL4 isDumpForSysdiagnose;
  unsigned __int8 v88;
  NSObject *v89;
  std::string *v90;
  char v91;
  char v92;
  int64_t v93;
  std::string *v94;
  size_t v95;
  unint64_t *v96;
  unint64_t v97;
  _BOOL4 v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  const void **v108;
  const void **v109;
  const void **v110;
  unsigned int v111;
  char *v113;
  const void **v115;
  std::string *v116;
  BOOL v117;
  std::locale v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  std::string v124;
  std::string v125;
  void *v126[2];
  unint64_t v127;
  std::vector<std::ssub_match> v128[2];
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  std::string v136;
  std::string v137;
  std::locale v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  void *__p[2];
  unint64_t v145;
  _BYTE v146[48];
  __int128 v147;
  _BYTE v148[48];
  __int128 v149;
  void *v150[3];
  const void **v151;
  const void **v152;
  uint64_t v153;
  __int128 __dst;
  _BYTE v155[32];
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;

  v8 = a3;
  v10 = a6;
  v163 = *MEMORY[0x24BDAC8D0];
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  memset(v150, 170, sizeof(v150));
  v11 = strlen(__s);
  v116 = v10;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (__int128 *)operator new(v14 + 1);
    *((_QWORD *)&__dst + 1) = v12;
    *(_QWORD *)v155 = v15 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  v155[7] = v11;
  p_dst = &__dst;
  if (v11)
LABEL_8:
    memcpy(p_dst, __s, v12);
  *((_BYTE *)p_dst + v12) = 0;
  v16 = std::string::append((std::string *)&__dst, ".*", 2uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v150[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v150 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((v155[7] & 0x80000000) != 0)
    operator delete((void *)__dst);
  *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v148[32] = v18;
  v149 = v18;
  *(_OWORD *)v148 = v18;
  *(_OWORD *)&v148[16] = v18;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v148, (uint64_t)v150, 0);
  *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v146[32] = v19;
  v147 = v19;
  *(_OWORD *)v146 = v19;
  *(_OWORD *)&v146[16] = v19;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v146, "(\\d{4})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{3})", 0);
  v20 = strlen((const char *)this);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = (void *)v20;
  v117 = a5 == 0;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    v145 = v24 | 0x8000000000000000;
    __p[0] = v22;
    __p[1] = v21;
    goto LABEL_18;
  }
  HIBYTE(v145) = v20;
  v22 = __p;
  if (v20)
LABEL_18:
    memcpy(v22, this, (size_t)v21);
  *((_BYTE *)v21 + (_QWORD)v22) = 0;
  std::locale::locale(&v138, (const std::locale *)v148);
  v139 = *(_OWORD *)&v148[8];
  v140 = *(_OWORD *)&v148[24];
  v141 = *(_QWORD *)&v148[40];
  v142 = (std::__shared_weak_count *)v149;
  if ((_QWORD)v149)
  {
    v25 = (unint64_t *)(v149 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v143 = *((_QWORD *)&v149 + 1);
  FilteredFiles = support::fs::getFilteredFiles((const char *)__p, (uint64_t)&v138, (uint64_t)&v151, 0);
  v28 = v142;
  if (!v142)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v142->__shared_owners_;
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    std::locale::~locale(&v138);
    if ((SHIBYTE(v145) & 0x80000000) == 0)
    {
LABEL_27:
      if (!FilteredFiles)
        goto LABEL_176;
      goto LABEL_31;
    }
  }
  else
  {
LABEL_26:
    std::locale::~locale(&v138);
    if ((SHIBYTE(v145) & 0x80000000) == 0)
      goto LABEL_27;
  }
  operator delete(__p[0]);
  if (!FilteredFiles)
    goto LABEL_176;
LABEL_31:
  v32 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v152 - v151));
  if (v152 == v151)
    v33 = 0;
  else
    v33 = v32;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>((uint64_t)v151, v152, v33, 1, v31);
  memset(&v137, 0, sizeof(v137));
  v34 = v151;
  v115 = v152;
  if (v151 == v152)
  {
LABEL_176:
    if (!v8)
      goto LABEL_196;
LABEL_177:
    if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v124, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
    else
      v124 = *v10;
    std::locale::locale(&v118, (const std::locale *)v146);
    v119 = *(_OWORD *)&v146[8];
    v120 = *(_OWORD *)&v146[24];
    v121 = *(_QWORD *)&v146[40];
    v122 = (std::__shared_weak_count *)v147;
    if ((_QWORD)v147)
    {
      v96 = (unint64_t *)(v147 + 8);
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    v123 = *((_QWORD *)&v147 + 1);
    v98 = util::checkLogFileAge((uint64_t)&v124, v8, (uint64_t)&v118);
    v99 = v122;
    if (!v122)
      goto LABEL_187;
    v100 = (unint64_t *)&v122->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
      std::locale::~locale(&v118);
      if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_188:
        if (!v98)
          goto LABEL_196;
LABEL_192:
        if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
        {
          *v10->__r_.__value_.__l.__data_ = 0;
          v10->__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v10->__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v10->__r_.__value_.__s + 23) = 0;
        }
        goto LABEL_196;
      }
    }
    else
    {
LABEL_187:
      std::locale::~locale(&v118);
      if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_188;
    }
    operator delete(v124.__r_.__value_.__l.__data_);
    if (!v98)
      goto LABEL_196;
    goto LABEL_192;
  }
  v111 = v8;
  v113 = a5;
  while (1)
  {
    memset(&v136, 170, sizeof(v136));
    if (*((char *)v34 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v136, (const std::string::value_type *)*v34, (std::string::size_type)v34[1]);
    }
    else
    {
      v35 = *(_OWORD *)v34;
      v136.__r_.__value_.__r.__words[2] = (std::string::size_type)v34[2];
      *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v35;
    }
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    else
      size = v137.__r_.__value_.__l.__size_;
    v37 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
    v38 = SHIBYTE(v136.__r_.__value_.__r.__words[2]);
    v39 = (std::string *)v136.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &v137;
      else
        v40 = (std::string *)v137.__r_.__value_.__r.__words[0];
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v136;
      else
        v41 = (std::string *)v136.__r_.__value_.__r.__words[0];
      v42 = v136.__r_.__value_.__l.__size_;
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
      if (v42 >= size)
      {
        v67 = (char *)v41 + v42;
        v68 = v40->__r_.__value_.__s.__data_[0];
        v69 = v41;
        do
        {
          v70 = v42 - size;
          if (v70 == -1)
            break;
          v71 = (char *)memchr(v69, v68, v70 + 1);
          if (!v71)
            break;
          v72 = v71;
          if (!memcmp(v71, v40, size))
          {
            if (v72 == v67 || v72 - (char *)v41 == -1)
              break;
            v65 = 3;
            v10 = v116;
            if ((v38 & 0x80) == 0)
              goto LABEL_155;
            goto LABEL_109;
          }
          v69 = (std::string *)(v72 + 1);
          v42 = v67 - (v72 + 1);
        }
        while (v42 >= size);
      }
    }
    *(_QWORD *)&v43 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v134 = v43;
    v131 = 0xAAAAAAAAAAAAAA00;
    v128[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
    v129 = 0;
    v130 = 0;
    v132 = 0;
    v133 = 0;
    LOBYTE(v134) = 0;
    BYTE8(v134) = 0;
    v135 = 0;
    memset(v128, 0, 41);
    if (v117)
    {
      v44 = v136.__r_.__value_.__l.__size_;
      v161 = v43;
      v158 = 0xAAAAAAAAAAAAAA00;
      *(_QWORD *)&v155[24] = v43;
      v156 = 0;
      v157 = 0;
      v159 = 0;
      v160 = 0;
      LOBYTE(v161) = 0;
      BYTE8(v161) = 0;
      v162 = 0;
      __dst = 0uLL;
      *(_OWORD *)v155 = 0uLL;
      if (v38 >= 0)
        v45 = (std::sub_match<const char *> *)&v136;
      else
        v45 = (std::sub_match<const char *> *)v39;
      if (v38 >= 0)
        v44 = v37;
      *(_OWORD *)&v155[9] = 0uLL;
      v10 = v116;
      v46 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v146, v45, (std::sub_match<const char *> *)((char *)v45 + v44), (std::vector<std::csub_match> *)&__dst, 0);
      v47 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = &v136;
      else
        v48 = (std::string *)v136.__r_.__value_.__r.__words[0];
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v47 = v136.__r_.__value_.__l.__size_;
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v128, (uint64_t)v48, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v48 + v47), (uint64_t *)&__dst, 0);
      if ((_QWORD)__dst)
      {
        *((_QWORD *)&__dst + 1) = __dst;
        operator delete((void *)__dst);
      }
      if (v46)
      {
        p_end_cap = &v128[1].__end_cap_;
        if (v128[0].__end_ != v128[0].__begin_)
          p_end_cap = &v128[0].__begin_->matched;
        if (!*p_end_cap)
        {
          __dst = 0uLL;
          *(_QWORD *)v155 = 0;
          if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_119;
          goto LABEL_104;
        }
        begin = (std::vector<std::ssub_match>::pointer)&v128[1];
        if (v128[0].__end_ != v128[0].__begin_)
          begin = v128[0].__begin_;
        i = begin->first.__i_;
        p_i = &v128[0].__begin_->second.__i_;
        if (v128[0].__end_ == v128[0].__begin_)
          p_i = (const char **)&v128[1].__end_;
        v53 = *p_i;
        v54 = *p_i - i;
        if (v54 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v54 > 0x16)
        {
          v79 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v54 | 7) != 0x17)
            v79 = v54 | 7;
          v80 = v79 + 1;
          v55 = (__int128 *)operator new(v79 + 1);
          *((_QWORD *)&__dst + 1) = v54;
          *(_QWORD *)v155 = v80 | 0x8000000000000000;
          *(_QWORD *)&__dst = v55;
          if (i != v53)
          {
LABEL_77:
            if (v54 < 0x20 || (unint64_t)((char *)v55 - i) < 0x20)
            {
              v56 = v55;
              v57 = i;
            }
            else
            {
              v56 = (__int128 *)((char *)v55 + (v54 & 0xFFFFFFFFFFFFFFE0));
              v57 = &i[v54 & 0xFFFFFFFFFFFFFFE0];
              v58 = (__int128 *)(i + 16);
              v59 = v55 + 1;
              v60 = v54 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v61 = *v58;
                *(v59 - 1) = *(v58 - 1);
                *v59 = v61;
                v58 += 2;
                v59 += 2;
                v60 -= 32;
              }
              while (v60);
              if (v54 == (v54 & 0x7FFFFFFFFFFFFFE0))
              {
LABEL_118:
                *(_BYTE *)v56 = 0;
                if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_119:
                  *(_OWORD *)&v116->__r_.__value_.__l.__data_ = __dst;
                  v116->__r_.__value_.__r.__words[2] = *(_QWORD *)v155;
                  if (!a4)
                    goto LABEL_146;
                  goto LABEL_120;
                }
LABEL_104:
                operator delete(v116->__r_.__value_.__l.__data_);
                *(_OWORD *)&v116->__r_.__value_.__l.__data_ = __dst;
                v116->__r_.__value_.__r.__words[2] = *(_QWORD *)v155;
                if (!a4)
                  goto LABEL_146;
LABEL_120:
                v82 = strlen((const char *)this);
                if (v82 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v83 = (void *)v82;
                if (v82 >= 0x17)
                {
                  v85 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v82 | 7) != 0x17)
                    v85 = v82 | 7;
                  v86 = v85 + 1;
                  v84 = operator new(v85 + 1);
                  v126[1] = v83;
                  v127 = v86 | 0x8000000000000000;
                  v126[0] = v84;
                }
                else
                {
                  HIBYTE(v127) = v82;
                  v84 = v126;
                  if (!v82)
                  {
                    LOBYTE(v126[0]) = 0;
                    if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_124:
                      v125 = *v116;
LABEL_130:
                      isDumpForSysdiagnose = util::isDumpForSysdiagnose((uint64_t)v126, (uint64_t)&v125);
                      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v125.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v127) & 0x80000000) == 0)
                        {
LABEL_132:
                          if (isDumpForSysdiagnose)
                          {
LABEL_133:
                            if ((v88 & 1) == 0
                            {
                              GetOsLogContext(void)::sOsLogContext = 0;
                              qword_2579B8A80 = 0;
                              __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
                            }
                            if (GetOsLogContext(void)::onceToken == -1)
                            {
                              v89 = qword_2579B8A80;
                              if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_DEFAULT))
                                goto LABEL_140;
                            }
                            else
                            {
                              dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
                              v89 = qword_2579B8A80;
                              if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_DEFAULT))
                                goto LABEL_140;
                            }
                            if ((v116->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v90 = v116;
                            else
                              v90 = (std::string *)v116->__r_.__value_.__r.__words[0];
                            LODWORD(__dst) = 136315138;
                            *(_QWORD *)((char *)&__dst + 4) = v90;
                            _os_log_impl(&dword_24B855000, v89, OS_LOG_TYPE_DEFAULT, "Ignore dump for sysdiagnose: %s", (uint8_t *)&__dst, 0xCu);
LABEL_140:
                            if (&v137 != v116)
                            {
                              v91 = HIBYTE(v116->__r_.__value_.__r.__words[2]);
                              if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
                              {
                                if (v91 >= 0)
                                  v94 = v116;
                                else
                                  v94 = (std::string *)v116->__r_.__value_.__r.__words[0];
                                if (v91 >= 0)
                                  v95 = HIBYTE(v116->__r_.__value_.__r.__words[2]);
                                else
                                  v95 = v116->__r_.__value_.__l.__size_;
                                std::string::__assign_no_alias<false>((void **)&v137.__r_.__value_.__l.__data_, v94, v95);
                              }
                              else
                              {
                                if ((*((_BYTE *)&v116->__r_.__value_.__s + 23) & 0x80) == 0)
                                {
                                  v137 = *v116;
LABEL_169:
                                  v65 = 0;
                                  v116->__r_.__value_.__s.__data_[0] = 0;
                                  *((_BYTE *)&v116->__r_.__value_.__s + 23) = 0;
                                  goto LABEL_151;
                                }
                                std::string::__assign_no_alias<true>(&v137, v116->__r_.__value_.__l.__data_, v116->__r_.__value_.__l.__size_);
                              }
                            }
                            if (SHIBYTE(v116->__r_.__value_.__r.__words[2]) < 0)
                            {
                              v65 = 0;
                              *v116->__r_.__value_.__l.__data_ = 0;
                              v116->__r_.__value_.__l.__size_ = 0;
                              goto LABEL_151;
                            }
                            goto LABEL_169;
                          }
                          goto LABEL_146;
                        }
                      }
                      else if ((SHIBYTE(v127) & 0x80000000) == 0)
                      {
                        goto LABEL_132;
                      }
                      operator delete(v126[0]);
                      if (isDumpForSysdiagnose)
                        goto LABEL_133;
LABEL_146:
                      v65 = 2;
LABEL_151:
                      v92 = 1;
LABEL_152:
                      v117 = v92;
                      v66 = v128[0].__begin_;
                      if (v128[0].__begin_)
                        goto LABEL_153;
                      goto LABEL_154;
                    }
LABEL_129:
                    std::string::__init_copy_ctor_external(&v125, v116->__r_.__value_.__l.__data_, v116->__r_.__value_.__l.__size_);
                    goto LABEL_130;
                  }
                }
                memcpy(v84, this, (size_t)v83);
                *((_BYTE *)v83 + (_QWORD)v84) = 0;
                if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_124;
                goto LABEL_129;
              }
            }
            do
            {
              v81 = *v57++;
              *(_BYTE *)v56 = v81;
              v56 = (__int128 *)((char *)v56 + 1);
            }
            while (v57 != v53);
            goto LABEL_118;
          }
        }
        else
        {
          v155[7] = *(_BYTE *)p_i - (_BYTE)i;
          v55 = &__dst;
          if (i != v53)
            goto LABEL_77;
        }
        *(_BYTE *)v55 = 0;
        if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_119;
        goto LABEL_104;
      }
LABEL_150:
      v65 = 0;
      goto LABEL_151;
    }
    if (v38 >= 0)
      v39 = &v136;
    v62 = strlen(v113);
    v10 = v116;
    if (!v62)
    {
LABEL_149:
      std::string::__assign_external(&v137, v113);
      goto LABEL_150;
    }
    v63 = v62;
    v64 = v136.__r_.__value_.__l.__size_;
    if (v38 >= 0)
      v64 = v37;
    if (v64 >= v62)
    {
      v73 = (char *)v39 + v64;
      v74 = *v113;
      v75 = v39;
      do
      {
        v76 = v64 - v63;
        if (v76 == -1)
          break;
        v77 = (char *)memchr(v75, v74, v76 + 1);
        if (!v77)
          break;
        v78 = v77;
        if (!memcmp(v77, v113, v63))
        {
          v92 = 0;
          if (v78 != v73)
          {
            v93 = v78 - (char *)v39;
            v65 = 0;
            if (v93 == -1)
              goto LABEL_152;
            goto LABEL_149;
          }
          v65 = 0;
          v117 = 0;
          v66 = v128[0].__begin_;
          if (v128[0].__begin_)
            goto LABEL_153;
          goto LABEL_154;
        }
        v75 = (std::string *)(v78 + 1);
        v64 = v73 - (v78 + 1);
      }
      while (v64 >= v63);
    }
    v65 = 0;
    v117 = 0;
    v66 = v128[0].__begin_;
    if (v128[0].__begin_)
    {
LABEL_153:
      v128[0].__end_ = v66;
      operator delete(v66);
    }
LABEL_154:
    if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) != 0)
      break;
LABEL_155:
    if (v65 != 3)
      goto LABEL_156;
LABEL_36:
    v34 += 3;
    if (v34 == v115)
      goto LABEL_175;
  }
LABEL_109:
  operator delete(v136.__r_.__value_.__l.__data_);
  if (v65 == 3)
    goto LABEL_36;
LABEL_156:
  if (!v65)
    goto LABEL_36;
LABEL_175:
  v8 = v111;
  if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_176;
  operator delete(v137.__r_.__value_.__l.__data_);
  if (v111)
    goto LABEL_177;
LABEL_196:
  v102 = (std::__shared_weak_count *)v147;
  if ((_QWORD)v147)
  {
    v103 = (unint64_t *)(v147 + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
      std::locale::~locale((std::locale *)v146);
      v105 = (std::__shared_weak_count *)v149;
      if ((_QWORD)v149)
        goto LABEL_201;
      goto LABEL_204;
    }
  }
  std::locale::~locale((std::locale *)v146);
  v105 = (std::__shared_weak_count *)v149;
  if (!(_QWORD)v149)
    goto LABEL_204;
LABEL_201:
  v106 = (unint64_t *)&v105->__shared_owners_;
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (v107)
  {
LABEL_204:
    std::locale::~locale((std::locale *)v148);
    if (SHIBYTE(v150[2]) < 0)
      goto LABEL_205;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v105);
    std::locale::~locale((std::locale *)v148);
    if (SHIBYTE(v150[2]) < 0)
LABEL_205:
      operator delete(v150[0]);
  }
  v108 = v151;
  if (v151)
  {
    v109 = v152;
    v110 = v151;
    if (v152 != v151)
    {
      do
      {
        if (*((char *)v109 - 1) < 0)
          operator delete((void *)*(v109 - 3));
        v109 -= 3;
      }
      while (v109 != v108);
      v110 = v151;
    }
    v152 = v108;
    operator delete(v110);
  }
}

void sub_24B88B54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;

  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x220]);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x260]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v24 - 248));
  if (*(char *)(a24 + 23) < 0)
    operator delete(*(void **)a24);
  _Unwind_Resume(a1);
}

uint64_t util::getNumberOfLogDumps(uint64_t a1, const void **a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  int v7;
  size_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  _BYTE *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  __int128 v20;
  int v21;
  size_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  _BYTE *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::sub_match<const char *> *v39;
  std::sub_match<const char *> *v40;
  __int128 v41;
  const char *second;
  std::sub_match<const char *> *first;
  int v44;
  const char *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t *v48;
  uint64_t v49;
  char **v50;
  char *v51;
  unint64_t v52;
  _OWORD *v53;
  _BYTE *v54;
  char *v55;
  __int128 *v56;
  _OWORD *v57;
  unint64_t v58;
  __int128 v59;
  void *v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint8x8_t v71;
  unint64_t v72;
  uint64_t **v73;
  uint64_t *v74;
  char v75;
  void *v76;
  void **v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  const void **v82;
  void **v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const void **v87;
  void **v88;
  uint64_t v89;
  int v90;
  _QWORD *v91;
  float v92;
  uint64_t v93;
  _QWORD *v94;
  _BOOL8 v95;
  unint64_t v96;
  unint64_t v97;
  size_t prime;
  void *v99;
  void *v100;
  uint64_t v101;
  _QWORD **v102;
  size_t v103;
  size_t v104;
  size_t v105;
  _QWORD *i;
  size_t v107;
  uint64_t v108;
  unint64_t v109;
  uint8x8_t v110;
  uint64_t v111;
  _QWORD *v112;
  void *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  size_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void **v125;
  void *v126;
  void **v127;
  void **v128;
  void *v129;
  void **v131;
  void *v132;
  char *v133;
  std::sub_match<const char *> *v134;
  void *v135[2];
  int64_t v136;
  std::locale v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::string v143;
  std::locale v144[2];
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _BYTE v148[48];
  __int128 v149;
  __int128 v150;
  __int128 v151;
  unint64_t v152;
  void *v153;
  std::sub_match<const char *> *v154;
  uint64_t v155;
  _BYTE __p[48];
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  _BYTE __dst[48];
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;

  v172 = *MEMORY[0x24BDAC8D0];
  v153 = 0;
  v154 = 0;
  v155 = 0;
  v150 = 0u;
  v151 = 0u;
  v152 = 0xAAAAAAAA3F800000;
  v4 = (char *)operator new(0x48uLL);
  v5 = v4;
  strcpy(v4, "[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2,4}-[0-9]{3}");
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v148[32] = v6;
  v149 = v6;
  *(_OWORD *)v148 = v6;
  *(_OWORD *)&v148[16] = v6;
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  v9 = v8 + 64;
  memset(__dst, 170, 24);
  v133 = v4;
  if (v8 + 64 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v9 <= 0x16)
  {
    memset(__dst, 0, 24);
    v10 = __dst;
    __dst[23] = v8 + 64;
LABEL_10:
    if (v7 >= 0)
      v13 = a2;
    else
      v13 = *a2;
    memmove(v10, v13, v8);
    goto LABEL_14;
  }
  v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17)
    v11 = v9 | 7;
  v12 = v11 + 1;
  v10 = operator new(v11 + 1);
  *(_QWORD *)&__dst[8] = v8 + 64;
  *(_QWORD *)&__dst[16] = v12 | 0x8000000000000000;
  *(_QWORD *)__dst = v10;
  if (v8)
    goto LABEL_10;
LABEL_14:
  v14 = &v10[v8];
  v15 = *(_OWORD *)v5;
  v16 = *((_OWORD *)v5 + 1);
  v17 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v14 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v14 + 3) = v17;
  *(_OWORD *)v14 = v15;
  *((_OWORD *)v14 + 1) = v16;
  v14[64] = 0;
  v18 = std::string::append((std::string *)__dst, ".*", 2uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v148, (uint64_t)__p, 0);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_16;
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(*(void **)__dst);
LABEL_16:
  *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v146 = v20;
  v147 = v20;
  v145 = v20;
  *(_OWORD *)&v144[0].__locale_ = v20;
  v21 = *((char *)a2 + 23);
  if (v21 >= 0)
    v22 = *((unsigned __int8 *)a2 + 23);
  else
    v22 = (size_t)a2[1];
  v23 = v22 + 64;
  memset(__dst, 170, 24);
  if (v22 + 64 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v23 <= 0x16)
  {
    memset(__dst, 0, 24);
    v24 = __dst;
    __dst[23] = v22 + 64;
LABEL_25:
    if (v21 >= 0)
      v27 = a2;
    else
      v27 = *a2;
    memmove(v24, v27, v22);
    goto LABEL_29;
  }
  v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v23 | 7) != 0x17)
    v25 = v23 | 7;
  v26 = v25 + 1;
  v24 = operator new(v25 + 1);
  *(_QWORD *)&__dst[8] = v22 + 64;
  *(_QWORD *)&__dst[16] = v26 | 0x8000000000000000;
  *(_QWORD *)__dst = v24;
  if (v22)
    goto LABEL_25;
LABEL_29:
  v28 = &v24[v22];
  v29 = *(_OWORD *)v5;
  v30 = *((_OWORD *)v5 + 1);
  v31 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v28 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v28 + 3) = v31;
  *(_OWORD *)v28 = v29;
  *((_OWORD *)v28 + 1) = v30;
  v28[64] = 0;
  v32 = std::string::append((std::string *)__dst, "(?=-*)(?!\\.json)", 0x10uLL);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v32->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v144, (uint64_t)__p, 0);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_31;
LABEL_36:
    operator delete(*(void **)__dst);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_37;
  }
  operator delete(*(void **)__p);
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_36;
LABEL_31:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_32:
    v143 = *(std::string *)a1;
    goto LABEL_38;
  }
LABEL_37:
  std::string::__init_copy_ctor_external(&v143, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
LABEL_38:
  std::locale::locale(&v137, (const std::locale *)v148);
  v138 = *(_OWORD *)&v148[8];
  v139 = *(_OWORD *)&v148[24];
  v140 = *(_QWORD *)&v148[40];
  v141 = (std::__shared_weak_count *)v149;
  if ((_QWORD)v149)
  {
    v34 = (unint64_t *)(v149 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v142 = *((_QWORD *)&v149 + 1);
  support::fs::getFilteredFiles((const char *)&v143, (uint64_t)&v137, (uint64_t)&v153, 0);
  v36 = v141;
  if (!v141)
    goto LABEL_45;
  p_shared_owners = (unint64_t *)&v141->__shared_owners_;
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    std::locale::~locale(&v137);
    if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_46:
      v40 = (std::sub_match<const char *> *)v153;
      v39 = v154;
      if (v153 == v154)
        goto LABEL_222;
      goto LABEL_50;
    }
  }
  else
  {
LABEL_45:
    std::locale::~locale(&v137);
    if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
  }
  operator delete(v143.__r_.__value_.__l.__data_);
  v40 = (std::sub_match<const char *> *)v153;
  v39 = v154;
  if (v153 != v154)
  {
LABEL_50:
    v134 = v39;
    while (1)
    {
      *(_QWORD *)&v41 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v170 = v41;
      v167 = 0xAAAAAAAAAAAAAA00;
      *(_QWORD *)&__dst[40] = 0xAAAAAAAAAAAAAAAALL;
      v165 = 0;
      v166 = 0;
      v168 = 0;
      v169 = 0;
      LOBYTE(v170) = 0;
      BYTE8(v170) = 0;
      v171 = 0;
      memset(__dst, 0, 41);
      v162 = v41;
      v159 = 0xAAAAAAAAAAAAAA00;
      *(_QWORD *)&__p[40] = 0xAAAAAAAAAAAAAAAALL;
      v157 = 0;
      v158 = 0;
      v160 = 0;
      v161 = 0;
      LOBYTE(v162) = 0;
      BYTE8(v162) = 0;
      v163 = 0;
      memset(__p, 0, 41);
      second = (const char *)*((unsigned __int8 *)&v40->matched + 7);
      if ((char)second >= 0)
        first = v40;
      else
        first = (std::sub_match<const char *> *)v40->first;
      if ((char)second < 0)
        second = v40->second;
      v44 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v144, first, (std::sub_match<const char *> *)&second[(_QWORD)first], (std::vector<std::csub_match> *)__p, 0);
      v45 = (const char *)*((unsigned __int8 *)&v40->matched + 7);
      if ((char)v45 >= 0)
        v46 = (uint64_t)v40;
      else
        v46 = (uint64_t)v40->first;
      if ((char)v45 < 0)
        v45 = v40->second;
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__dst, v46, (std::sub_match<std::__wrap_iter<const char *>> *)&v45[v46], (uint64_t *)__p, 0);
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      if (!v44)
        goto LABEL_220;
      v47 = *(_QWORD *)&__dst[8] == *(_QWORD *)__dst ? &__dst[40] : (_BYTE *)(*(_QWORD *)__dst + 16);
      if (*v47)
        break;
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v135[0] = 0;
      v135[1] = 0;
      v136 = 0;
LABEL_90:
      if ((v62 & 0x80u) == 0)
        v66 = (uint64_t *)v135;
      else
        v66 = v61;
      if ((v62 & 0x80u) == 0)
        v67 = v62;
      else
        v67 = (unint64_t)v60;
      v68 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)__p, v66, v67);
      v69 = v68;
      v70 = *((_QWORD *)&v150 + 1);
      if (!*((_QWORD *)&v150 + 1))
      {
        v72 = 0xAAAAAAAAAAAAAAAALL;
LABEL_146:
        *(_QWORD *)&__p[16] = 0xAAAAAAAAAAAAAA01;
        v91 = operator new(0x28uLL);
        *(_QWORD *)__p = v91;
        *(_QWORD *)&__p[8] = &v151;
        *v91 = 0;
        v91[1] = v69;
        *((_OWORD *)v91 + 1) = *(_OWORD *)v135;
        v91[4] = v136;
        v135[0] = 0;
        v135[1] = 0;
        v136 = 0;
        v92 = (float)(unint64_t)(*((_QWORD *)&v151 + 1) + 1);
        if (v70 && (float)(*(float *)&v152 * (float)v70) >= v92)
        {
          v39 = v134;
          v93 = v150;
          v94 = *(_QWORD **)(v150 + 8 * v72);
          if (v94)
            goto LABEL_149;
LABEL_198:
          *v91 = v151;
          *(_QWORD *)&v151 = v91;
          *(_QWORD *)(v93 + 8 * v72) = &v151;
          if (*v91)
          {
            v115 = *(_QWORD *)(*v91 + 8);
            if ((v70 & (v70 - 1)) != 0)
            {
              if (v115 >= v70)
                v115 %= v70;
            }
            else
            {
              v115 &= v70 - 1;
            }
            v94 = (_QWORD *)(v150 + 8 * v115);
LABEL_217:
            *v94 = v91;
          }
          ++*((_QWORD *)&v151 + 1);
          if (v136 < 0)
            goto LABEL_219;
          goto LABEL_220;
        }
        v95 = (v70 & (v70 - 1)) != 0;
        if (v70 < 3)
          v95 = 1;
        v96 = v95 | (2 * v70);
        v97 = vcvtps_u32_f32(v92 / *(float *)&v152);
        if (v96 <= v97)
          prime = v97;
        else
          prime = v96;
        v39 = v134;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v70 = *((_QWORD *)&v150 + 1);
        }
        if (prime <= v70)
        {
          if (prime >= v70)
            goto LABEL_196;
          v109 = vcvtps_u32_f32((float)*((unint64_t *)&v151 + 1) / *(float *)&v152);
          if (v70 < 3 || (v110 = (uint8x8_t)vcnt_s8((int8x8_t)v70), v110.i16[0] = vaddlv_u8(v110), v110.u32[0] > 1uLL))
          {
            v109 = std::__next_prime(v109);
          }
          else
          {
            v111 = 1 << -(char)__clz(v109 - 1);
            if (v109 >= 2)
              v109 = v111;
          }
          if (prime <= v109)
            prime = v109;
          if (prime < v70)
          {
            if (prime)
              goto LABEL_160;
            v113 = (void *)v150;
            *(_QWORD *)&v150 = 0;
            if (v113)
              operator delete(v113);
            v70 = 0;
            *((_QWORD *)&v150 + 1) = 0;
            v114 = -1;
            goto LABEL_197;
          }
          v70 = *((_QWORD *)&v150 + 1);
          v114 = *((_QWORD *)&v150 + 1) - 1;
          if ((*((_QWORD *)&v150 + 1) & (*((_QWORD *)&v150 + 1) - 1)) == 0)
            goto LABEL_197;
          goto LABEL_209;
        }
LABEL_160:
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v99 = operator new(8 * prime);
        v100 = (void *)v150;
        *(_QWORD *)&v150 = v99;
        if (v100)
          operator delete(v100);
        v101 = 0;
        *((_QWORD *)&v150 + 1) = prime;
        do
          *(_QWORD *)(v150 + 8 * v101++) = 0;
        while (prime != v101);
        v102 = (_QWORD **)v151;
        if (!(_QWORD)v151)
        {
LABEL_208:
          v70 = prime;
          v114 = prime - 1;
          if ((prime & (prime - 1)) == 0)
            goto LABEL_197;
          goto LABEL_209;
        }
        v103 = *(_QWORD *)(v151 + 8);
        v104 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v105 = v103 & v104;
          *(_QWORD *)(v150 + 8 * v105) = &v151;
          for (i = *v102; *v102; i = *v102)
          {
            v107 = i[1] & v104;
            if (v107 == v105)
            {
              v102 = (_QWORD **)i;
            }
            else if (*(_QWORD *)(v150 + 8 * v107))
            {
              *v102 = (_QWORD *)*i;
              v108 = 8 * v107;
              *i = **(_QWORD **)(v150 + v108);
              **(_QWORD **)(v150 + v108) = i;
            }
            else
            {
              *(_QWORD *)(v150 + 8 * v107) = v102;
              v102 = (_QWORD **)i;
              v105 = v107;
            }
          }
          goto LABEL_208;
        }
        if (v103 < prime)
        {
          *(_QWORD *)(v150 + 8 * v103) = &v151;
          v112 = *v102;
          if (*v102)
            goto LABEL_203;
LABEL_195:
          v70 = prime;
LABEL_196:
          v114 = v70 - 1;
          if ((v70 & (v70 - 1)) == 0)
          {
LABEL_197:
            v72 = v114 & v69;
            v93 = v150;
            v94 = *(_QWORD **)(v150 + 8 * (v114 & v69));
            if (!v94)
              goto LABEL_198;
LABEL_149:
            *v91 = *v94;
            goto LABEL_217;
          }
LABEL_209:
          if (v69 >= v70)
          {
            v72 = v69 % v70;
            v93 = v150;
            v94 = *(_QWORD **)(v150 + 8 * (v69 % v70));
            if (!v94)
              goto LABEL_198;
          }
          else
          {
            v72 = v69;
            v93 = v150;
            v94 = *(_QWORD **)(v150 + 8 * v69);
            if (!v94)
              goto LABEL_198;
          }
          goto LABEL_149;
        }
        v103 %= prime;
        *(_QWORD *)(v150 + 8 * v103) = &v151;
        v112 = *v102;
        if (!*v102)
          goto LABEL_195;
        while (1)
        {
LABEL_203:
          v117 = v112[1];
          if (v117 >= prime)
            v117 %= prime;
          if (v117 == v103)
            goto LABEL_202;
          if (*(_QWORD *)(v150 + 8 * v117))
            break;
          *(_QWORD *)(v150 + 8 * v117) = v102;
          v102 = (_QWORD **)v112;
          v112 = (_QWORD *)*v112;
          v103 = v117;
          if (!v112)
            goto LABEL_208;
        }
        *v102 = (_QWORD *)*v112;
        v116 = 8 * v117;
        *v112 = **(_QWORD **)(v150 + v116);
        **(_QWORD **)(v150 + v116) = v112;
        v112 = v102;
LABEL_202:
        v102 = (_QWORD **)v112;
        v112 = (_QWORD *)*v112;
        if (!v112)
          goto LABEL_208;
        goto LABEL_203;
      }
      v71 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v150 + 8));
      v71.i16[0] = vaddlv_u8(v71);
      if (v71.u32[0] > 1uLL)
      {
        v72 = v68;
        if (v68 >= *((_QWORD *)&v150 + 1))
          v72 = v68 % *((_QWORD *)&v150 + 1);
      }
      else
      {
        v72 = (*((_QWORD *)&v150 + 1) - 1) & v68;
      }
      v73 = *(uint64_t ***)(v150 + 8 * v72);
      if (!v73)
        goto LABEL_146;
      v74 = *v73;
      if (!*v73)
        goto LABEL_146;
      v75 = HIBYTE(v136);
      if (v136 >= 0)
        v76 = (void *)HIBYTE(v136);
      else
        v76 = v135[1];
      if (v136 >= 0)
        v77 = v135;
      else
        v77 = (void **)v135[0];
      if (v71.u32[0] >= 2uLL)
      {
        while (1)
        {
          v79 = v74[1];
          if (v79 == v69)
          {
            v80 = *((unsigned __int8 *)v74 + 39);
            if ((v80 & 0x80u) == 0)
              v81 = (void *)*((unsigned __int8 *)v74 + 39);
            else
              v81 = (void *)v74[3];
            if (v81 == v76)
            {
              v82 = (const void **)(v74 + 2);
              if ((v80 & 0x80) != 0)
              {
                if (!memcmp(*v82, v77, v74[3]))
                {
LABEL_128:
                  v39 = v134;
                  if (v75 < 0)
                    goto LABEL_219;
                  goto LABEL_220;
                }
              }
              else
              {
                if (!*((_BYTE *)v74 + 39))
                  goto LABEL_128;
                v83 = v77;
                while (*(unsigned __int8 *)v82 == *(unsigned __int8 *)v83)
                {
                  v82 = (const void **)((char *)v82 + 1);
                  v83 = (void **)((char *)v83 + 1);
                  if (!--v80)
                    goto LABEL_128;
                }
              }
            }
          }
          else
          {
            if (v79 >= v70)
              v79 %= v70;
            if (v79 != v72)
              goto LABEL_146;
          }
          v74 = (uint64_t *)*v74;
          if (!v74)
            goto LABEL_146;
        }
      }
      v78 = *((_QWORD *)&v150 + 1) - 1;
      while (1)
      {
        v84 = v74[1];
        if (v84 != v69)
        {
          if ((v84 & v78) != v72)
            goto LABEL_146;
          goto LABEL_131;
        }
        v85 = *((unsigned __int8 *)v74 + 39);
        v86 = (v85 & 0x80u) == 0 ? (void *)*((unsigned __int8 *)v74 + 39) : (void *)v74[3];
        if (v86 == v76)
          break;
LABEL_131:
        v74 = (uint64_t *)*v74;
        if (!v74)
          goto LABEL_146;
      }
      v87 = (const void **)(v74 + 2);
      if ((v85 & 0x80) == 0)
      {
        if (!*((_BYTE *)v74 + 39))
          goto LABEL_144;
        v88 = v77;
        while (*(unsigned __int8 *)v87 == *(unsigned __int8 *)v88)
        {
          v87 = (const void **)((char *)v87 + 1);
          v88 = (void **)((char *)v88 + 1);
          if (!--v85)
            goto LABEL_144;
        }
        goto LABEL_131;
      }
      v132 = v76;
      v89 = v78;
      v90 = memcmp(*v87, v77, v74[3]);
      v78 = v89;
      v76 = v132;
      if (v90)
        goto LABEL_131;
LABEL_144:
      v39 = v134;
      if (v75 < 0)
LABEL_219:
        operator delete(v135[0]);
LABEL_220:
      if (*(_QWORD *)__dst)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        operator delete(*(void **)__dst);
      }
      if (++v40 == v39)
        goto LABEL_222;
    }
    v48 = (uint64_t *)&__dst[24];
    if (*(_QWORD *)&__dst[8] != *(_QWORD *)__dst)
      v48 = *(uint64_t **)__dst;
    v49 = *v48;
    v50 = (char **)(*(_QWORD *)__dst + 8);
    if (*(_QWORD *)&__dst[8] == *(_QWORD *)__dst)
      v50 = (char **)&__dst[32];
    v51 = *v50;
    v52 = (unint64_t)&(*v50)[-v49];
    if (v52 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v52 > 0x16)
    {
      v63 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v52 | 7) != 0x17)
        v63 = v52 | 7;
      v64 = v63 + 1;
      v53 = operator new(v63 + 1);
      v135[1] = (void *)v52;
      v136 = v64 | 0x8000000000000000;
      v135[0] = v53;
      if ((char *)v49 != v51)
        goto LABEL_76;
    }
    else
    {
      HIBYTE(v136) = *(_BYTE *)v50 - v49;
      v53 = v135;
      if ((char *)v49 != v51)
      {
LABEL_76:
        if (v52 < 0x20 || (unint64_t)v53 - v49 < 0x20)
        {
          v54 = v53;
          v55 = (char *)v49;
        }
        else
        {
          v54 = (char *)v53 + (v52 & 0xFFFFFFFFFFFFFFE0);
          v55 = (char *)(v49 + (v52 & 0xFFFFFFFFFFFFFFE0));
          v56 = (__int128 *)(v49 + 16);
          v57 = v53 + 1;
          v58 = v52 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v59 = *v56;
            *(v57 - 1) = *(v56 - 1);
            *v57 = v59;
            v56 += 2;
            v57 += 2;
            v58 -= 32;
          }
          while (v58);
          if (v52 == (v52 & 0x7FFFFFFFFFFFFFE0))
            goto LABEL_89;
        }
        do
        {
          v65 = *v55++;
          *v54++ = v65;
        }
        while (v55 != v51);
LABEL_89:
        *v54 = 0;
        v62 = HIBYTE(v136);
        v61 = (uint64_t *)v135[0];
        v60 = v135[1];
        goto LABEL_90;
      }
    }
    v54 = v53;
    goto LABEL_89;
  }
LABEL_222:
  v118 = *((_QWORD *)&v151 + 1);
  v119 = (std::__shared_weak_count *)v147;
  if ((_QWORD)v147)
  {
    v120 = (unint64_t *)(v147 + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  std::locale::~locale(v144);
  v122 = (std::__shared_weak_count *)v149;
  if ((_QWORD)v149)
  {
    v123 = (unint64_t *)(v149 + 8);
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  std::locale::~locale((std::locale *)v148);
  operator delete(v133);
  v125 = (void **)v151;
  if ((_QWORD)v151)
  {
    do
    {
      v131 = (void **)*v125;
      if (*((char *)v125 + 39) < 0)
        operator delete(v125[2]);
      operator delete(v125);
      v125 = v131;
    }
    while (v131);
  }
  v126 = (void *)v150;
  *(_QWORD *)&v150 = 0;
  if (v126)
    operator delete(v126);
  v127 = (void **)v153;
  if (v153)
  {
    v128 = (void **)v154;
    v129 = v153;
    if (v154 != v153)
    {
      do
      {
        if (*((char *)v128 - 1) < 0)
          operator delete(*(v128 - 3));
        v128 -= 3;
      }
      while (v128 != v127);
      v129 = v153;
    }
    v154 = (std::sub_match<const char *> *)v127;
    operator delete(v129);
  }
  return v118;
}

void sub_24B88C6A4(_Unwind_Exception *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  operator delete(v2);
  std::unordered_set<std::string>::~unordered_set[abi:ne180100](&v3);
  std::vector<std::string>::~vector[abi:ne180100](&v4);
  _Unwind_Resume(a1);
}

void sub_24B88C6AC()
{
  __cxa_end_catch();
  JUMPOUT(0x24B88C6B4);
}

void sub_24B88C6D4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x24B88C6DCLL);
  JUMPOUT(0x24B88C57CLL);
}

uint64_t std::unordered_set<std::string>::~unordered_set[abi:ne180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t util::compareTwoStringsWithPattern(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  std::sub_match<const char *> *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::vector<std::ssub_match>::pointer begin;
  std::vector<std::ssub_match>::pointer end;
  __int128 v14;
  std::__wrap_iter<const char *>::iterator_type v15;
  std::__wrap_iter<const char *>::iterator_type i;
  unint64_t v17;
  std::sub_match<const char *> *v18;
  std::sub_match<const char *> *v19;
  _BYTE *v20;
  __int128 *v21;
  BOOL *p_matched;
  unint64_t v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  void **v32;
  __int128 v33;
  uint64_t v34;
  std::sub_match<const char *> *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  std::vector<std::ssub_match>::pointer v39;
  std::vector<std::ssub_match>::pointer v40;
  __int128 v41;
  std::__wrap_iter<const char *>::iterator_type v42;
  std::__wrap_iter<const char *>::iterator_type v43;
  unint64_t v44;
  std::sub_match<const char *> *v45;
  std::sub_match<const char *> *v46;
  _BYTE *v47;
  __int128 *v48;
  BOOL *v49;
  unint64_t v50;
  __int128 v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  void **v62;
  char *v63;
  char *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char *v70;
  uint64_t v71;
  char *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  void *__p;
  char *v77;
  unint64_t v78;
  void *v79;
  char *v80;
  unint64_t v81;
  std::locale v82[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  std::vector<std::ssub_match> v86[2];
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  std::vector<std::csub_match> v94[2];
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;

  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v89 = 0xAAAAAAAAAAAAAA00;
  v86[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
  v92 = v5;
  v87 = 0;
  v88 = 0;
  v90 = 0;
  v91 = 0;
  LOBYTE(v92) = 0;
  BYTE8(v92) = 0;
  v93 = 0;
  memset(v86, 0, 41);
  v84 = v5;
  v85 = v5;
  *(_OWORD *)&v82[0].__locale_ = v5;
  v83 = v5;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v82, a3, 0);
  v79 = 0;
  v80 = 0;
  v81 = 0;
  __p = 0;
  v77 = 0;
  v78 = 0;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v97 = 0xAAAAAAAAAAAAAA00;
  v94[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
  v100 = v6;
  v95 = 0;
  v96 = 0;
  v98 = 0;
  v99 = 0;
  LOBYTE(v100) = 0;
  BYTE8(v100) = 0;
  v101 = 0;
  memset(v94, 0, 32);
  v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (std::sub_match<const char *> *)a1;
  else
    v8 = *(std::sub_match<const char *> **)a1;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)((char *)&v94[1].__begin_ + 1) = 0uLL;
  v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v82, v8, (std::sub_match<const char *> *)((char *)v8 + v7), v94, 0);
  v10 = *(unsigned __int8 *)(a1 + 23);
  if ((v10 & 0x80u) == 0)
    v11 = a1;
  else
    v11 = *(_QWORD *)a1;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a1 + 8);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v86, v11, (std::sub_match<std::__wrap_iter<const char *>> *)(v11 + v10), (uint64_t *)v94, 0);
  if (v94[0].__begin_)
  {
    v94[0].__end_ = v94[0].__begin_;
    operator delete(v94[0].__begin_);
  }
  if (v9)
  {
    end = v86[0].__end_;
    begin = v86[0].__begin_;
    if (v86[0].__begin_ != v86[0].__end_)
    {
      while (1)
      {
        if (!begin->matched)
        {
          memset(v94, 0, 24);
          v25 = v80;
          if ((unint64_t)v80 >= v81)
            goto LABEL_38;
          goto LABEL_16;
        }
        i = begin->first.__i_;
        v15 = begin->second.__i_;
        v17 = v15 - begin->first.__i_;
        if (v17 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v17 > 0x16)
        {
          v26 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v26 = v17 | 7;
          v27 = v26 + 1;
          v18 = (std::sub_match<const char *> *)operator new(v26 + 1);
          v94[0].__end_ = (std::vector<std::csub_match>::pointer)v17;
          v94[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v27 | 0x8000000000000000);
          v94[0].__begin_ = v18;
          if (i == v15)
          {
LABEL_33:
            LOBYTE(v18->first) = 0;
            v25 = v80;
            if ((unint64_t)v80 >= v81)
              goto LABEL_38;
            goto LABEL_16;
          }
        }
        else
        {
          HIBYTE(v94[0].__end_cap_.__value_) = (_BYTE)v15 - LOBYTE(begin->first.__i_);
          v18 = (std::sub_match<const char *> *)v94;
          if (i == v15)
            goto LABEL_33;
        }
        if (v17 < 0x20 || (unint64_t)((char *)v18 - i) < 0x20)
          break;
        v19 = (std::sub_match<const char *> *)((char *)v18 + (v17 & 0xFFFFFFFFFFFFFFE0));
        v20 = &i[v17 & 0xFFFFFFFFFFFFFFE0];
        v21 = (__int128 *)(i + 16);
        p_matched = &v18->matched;
        v23 = v17 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v24 = *v21;
          *((_OWORD *)p_matched - 1) = *(v21 - 1);
          *(_OWORD *)p_matched = v24;
          v21 += 2;
          p_matched += 32;
          v23 -= 32;
        }
        while (v23);
        if (v17 != (v17 & 0x7FFFFFFFFFFFFFE0))
          goto LABEL_36;
LABEL_37:
        LOBYTE(v19->first) = 0;
        v25 = v80;
        if ((unint64_t)v80 >= v81)
        {
LABEL_38:
          v80 = std::vector<std::string>::__push_back_slow_path<std::string>(&v79, (uint64_t)v94);
          if (SHIBYTE(v94[0].__end_cap_.__value_) < 0)
            operator delete(v94[0].__begin_);
          goto LABEL_17;
        }
LABEL_16:
        v14 = *(_OWORD *)&v94[0].__begin_;
        *((_QWORD *)v25 + 2) = v94[0].__end_cap_.__value_;
        *(_OWORD *)v25 = v14;
        v80 = v25 + 24;
LABEL_17:
        if (++begin == end)
          goto LABEL_40;
      }
      v19 = v18;
      v20 = i;
      do
      {
LABEL_36:
        v28 = *v20++;
        LOBYTE(v19->first) = v28;
        v19 = (std::sub_match<const char *> *)((char *)v19 + 1);
      }
      while (v20 != v15);
      goto LABEL_37;
    }
LABEL_40:
    v29 = (char *)v79;
    v30 = v80;
    if (v80 - (_BYTE *)v79 != 24)
    {
      if ((char *)v79 + 24 != v80)
      {
        v31 = (char *)v79 + 23;
        do
        {
          v32 = (void **)(v31 - 23);
          if (*v31 < 0)
            operator delete(*v32);
          *(_OWORD *)v32 = *(_OWORD *)(v31 + 1);
          *(_QWORD *)(v31 - 7) = *(_QWORD *)(v31 + 17);
          v31[24] = 0;
          v31 += 24;
          *(v31 - 23) = 0;
          v29 += 24;
        }
        while (v31 + 1 != v30);
        v30 = v80;
      }
      while (v30 != v29)
      {
        if (*(v30 - 1) < 0)
          operator delete(*((void **)v30 - 3));
        v30 -= 24;
      }
      v80 = v29;
    }
    *(_QWORD *)&v33 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v97 = 0xAAAAAAAAAAAAAA00;
    v94[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
    v100 = v33;
    v95 = 0;
    v96 = 0;
    v98 = 0;
    v99 = 0;
    LOBYTE(v100) = 0;
    BYTE8(v100) = 0;
    v101 = 0;
    memset(v94, 0, 32);
    v34 = *(unsigned __int8 *)(a2 + 23);
    if ((v34 & 0x80u) == 0)
      v35 = (std::sub_match<const char *> *)a2;
    else
      v35 = *(std::sub_match<const char *> **)a2;
    if ((v34 & 0x80u) != 0)
      v34 = *(_QWORD *)(a2 + 8);
    *(_OWORD *)((char *)&v94[1].__begin_ + 1) = 0uLL;
    v36 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v82, v35, (std::sub_match<const char *> *)((char *)v35 + v34), v94, 0);
    v37 = *(unsigned __int8 *)(a2 + 23);
    if ((v37 & 0x80u) == 0)
      v38 = a2;
    else
      v38 = *(_QWORD *)a2;
    if ((v37 & 0x80u) != 0)
      v37 = *(_QWORD *)(a2 + 8);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v86, v38, (std::sub_match<std::__wrap_iter<const char *>> *)(v38 + v37), (uint64_t *)v94, 0);
    if (v94[0].__begin_)
    {
      v94[0].__end_ = v94[0].__begin_;
      operator delete(v94[0].__begin_);
    }
    if (v36)
    {
      v40 = v86[0].__end_;
      v39 = v86[0].__begin_;
      if (v86[0].__begin_ != v86[0].__end_)
      {
        while (1)
        {
          if (!v39->matched)
          {
            memset(v94, 0, 24);
            v52 = v77;
            if ((unint64_t)v77 >= v78)
              goto LABEL_89;
            goto LABEL_67;
          }
          v43 = v39->first.__i_;
          v42 = v39->second.__i_;
          v44 = v42 - v39->first.__i_;
          if (v44 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v44 > 0x16)
          {
            v53 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v44 | 7) != 0x17)
              v53 = v44 | 7;
            v54 = v53 + 1;
            v45 = (std::sub_match<const char *> *)operator new(v53 + 1);
            v94[0].__end_ = (std::vector<std::csub_match>::pointer)v44;
            v94[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v54 | 0x8000000000000000);
            v94[0].__begin_ = v45;
            if (v43 == v42)
            {
LABEL_84:
              LOBYTE(v45->first) = 0;
              v52 = v77;
              if ((unint64_t)v77 >= v78)
                goto LABEL_89;
              goto LABEL_67;
            }
          }
          else
          {
            HIBYTE(v94[0].__end_cap_.__value_) = (_BYTE)v42 - LOBYTE(v39->first.__i_);
            v45 = (std::sub_match<const char *> *)v94;
            if (v43 == v42)
              goto LABEL_84;
          }
          if (v44 < 0x20 || (unint64_t)((char *)v45 - v43) < 0x20)
            break;
          v46 = (std::sub_match<const char *> *)((char *)v45 + (v44 & 0xFFFFFFFFFFFFFFE0));
          v47 = &v43[v44 & 0xFFFFFFFFFFFFFFE0];
          v48 = (__int128 *)(v43 + 16);
          v49 = &v45->matched;
          v50 = v44 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v51 = *v48;
            *((_OWORD *)v49 - 1) = *(v48 - 1);
            *(_OWORD *)v49 = v51;
            v48 += 2;
            v49 += 32;
            v50 -= 32;
          }
          while (v50);
          if (v44 != (v44 & 0x7FFFFFFFFFFFFFE0))
            goto LABEL_87;
LABEL_88:
          LOBYTE(v46->first) = 0;
          v52 = v77;
          if ((unint64_t)v77 >= v78)
          {
LABEL_89:
            v77 = std::vector<std::string>::__push_back_slow_path<std::string>(&__p, (uint64_t)v94);
            if (SHIBYTE(v94[0].__end_cap_.__value_) < 0)
              operator delete(v94[0].__begin_);
            goto LABEL_68;
          }
LABEL_67:
          v41 = *(_OWORD *)&v94[0].__begin_;
          *((_QWORD *)v52 + 2) = v94[0].__end_cap_.__value_;
          *(_OWORD *)v52 = v41;
          v77 = v52 + 24;
LABEL_68:
          if (++v39 == v40)
            goto LABEL_91;
        }
        v46 = v45;
        v47 = v43;
        do
        {
LABEL_87:
          v55 = *v47++;
          LOBYTE(v46->first) = v55;
          v46 = (std::sub_match<const char *> *)((char *)v46 + 1);
        }
        while (v47 != v42);
        goto LABEL_88;
      }
LABEL_91:
      v57 = (char *)__p;
      v56 = v77;
      if (v77 - (_BYTE *)__p == 24)
      {
        v58 = (char *)v79;
        v59 = v80;
        v60 = 1;
        if (v79 != v80)
          goto LABEL_117;
LABEL_105:
        if (v57)
          goto LABEL_106;
LABEL_134:
        v64 = (char *)v79;
        if (v79)
          goto LABEL_135;
        goto LABEL_108;
      }
      if ((char *)__p + 24 != v77)
      {
        v61 = (char *)__p + 23;
        do
        {
          v62 = (void **)(v61 - 23);
          if (*v61 < 0)
            operator delete(*v62);
          *(_OWORD *)v62 = *(_OWORD *)(v61 + 1);
          *(_QWORD *)(v61 - 7) = *(_QWORD *)(v61 + 17);
          v61[24] = 0;
          v61 += 24;
          *(v61 - 23) = 0;
          v57 += 24;
        }
        while (v61 + 1 != v56);
        v56 = v77;
      }
      while (v56 != v57)
      {
        if (*(v56 - 1) < 0)
          operator delete(*((void **)v56 - 3));
        v56 -= 24;
      }
      v77 = v57;
      v57 = (char *)__p;
      v58 = (char *)v79;
      v59 = v80;
      v60 = 1;
      if (v79 == v80)
        goto LABEL_105;
      while (1)
      {
LABEL_117:
        v66 = v58[23];
        if ((v66 & 0x80u) == 0)
          v67 = v58[23];
        else
          v67 = *((_QWORD *)v58 + 1);
        v68 = v57[23];
        v69 = (char)v68;
        if ((v68 & 0x80u) != 0)
          v68 = *((_QWORD *)v57 + 1);
        if (v67 != v68)
          break;
        if (v69 >= 0)
          v70 = v57;
        else
          v70 = *(char **)v57;
        if ((v66 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v58, v70, *((_QWORD *)v58 + 1)))
            break;
        }
        else if (v58[23])
        {
          v71 = 0;
          while (v58[v71] == v70[v71])
          {
            if (v66 == ++v71)
              goto LABEL_116;
          }
          break;
        }
LABEL_116:
        v58 += 24;
        v57 += 24;
        if (v58 == v59)
          goto LABEL_133;
      }
    }
  }
  v60 = 0;
LABEL_133:
  v57 = (char *)__p;
  if (!__p)
    goto LABEL_134;
LABEL_106:
  v63 = v77;
  if (v77 != v57)
  {
    do
    {
      if (*(v63 - 1) < 0)
        operator delete(*((void **)v63 - 3));
      v63 -= 24;
    }
    while (v63 != v57);
    v77 = v57;
    operator delete(__p);
    v64 = (char *)v79;
    if (v79)
      goto LABEL_135;
LABEL_108:
    v65 = (std::__shared_weak_count *)v85;
    if (!(_QWORD)v85)
      goto LABEL_146;
    goto LABEL_142;
  }
  v77 = v57;
  operator delete(v57);
  v64 = (char *)v79;
  if (!v79)
    goto LABEL_108;
LABEL_135:
  v72 = v80;
  if (v80 == v64)
  {
    v80 = v64;
    operator delete(v64);
    v65 = (std::__shared_weak_count *)v85;
    if (!(_QWORD)v85)
      goto LABEL_146;
    goto LABEL_142;
  }
  do
  {
    if (*(v72 - 1) < 0)
      operator delete(*((void **)v72 - 3));
    v72 -= 24;
  }
  while (v72 != v64);
  v80 = v64;
  operator delete(v79);
  v65 = (std::__shared_weak_count *)v85;
  if ((_QWORD)v85)
  {
LABEL_142:
    p_shared_owners = (unint64_t *)&v65->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
LABEL_146:
  std::locale::~locale(v82);
  if (v86[0].__begin_)
  {
    v86[0].__end_ = v86[0].__begin_;
    operator delete(v86[0].__begin_);
  }
  return v60;
}

void sub_24B88CF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v24;
  void *v26;

  v26 = *(void **)(v24 - 192);
  if (v26)
  {
    *(_QWORD *)(v24 - 184) = v26;
    operator delete(v26);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)&a9);
  std::vector<std::string>::~vector[abi:ne180100](&a12);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a15);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v8;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(24 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[24 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = (std::string *)&v8[v9];
        v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)v11;
          v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_24B88D07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_24B88D090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(uint64_t a1, const void **a2, uint64_t a3, char a4, __n128 result)
{
  unint64_t j;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  int v17;
  const void *v18;
  size_t v19;
  int v20;
  const void *v21;
  size_t v22;
  size_t v23;
  int v24;
  uint64_t v25;
  __n128 v26;
  __n128 *v27;
  size_t v28;
  const void *v29;
  int v30;
  const void *v31;
  size_t v32;
  size_t v33;
  int v34;
  unint64_t v35;
  const void **v36;
  const void **v37;
  const void **v38;
  const void *v39;
  const void **v40;
  size_t v41;
  size_t v42;
  int v43;
  const void *v44;
  const void **v45;
  size_t v46;
  size_t v47;
  int v48;
  const void **v49;
  __int128 v50;
  __int128 v51;
  __n128 *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  const void *v56;
  unint64_t v57;
  size_t v58;
  int v59;
  const void **v60;
  const void *v61;
  const void **v62;
  unint64_t v63;
  size_t v64;
  int v65;
  __n128 *v66;
  __n128 v67;
  __n128 v68;
  BOOL v69;
  __n128 v70;
  const void **v71;
  __n128 *v72;
  size_t v73;
  size_t v74;
  const void *v75;
  const void **v76;
  const void **v77;
  size_t v78;
  size_t v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  const void *v83;
  size_t v84;
  size_t v85;
  int v86;
  const void **k;
  const void **v88;
  const void **v89;
  size_t v90;
  size_t v91;
  int v92;
  const void *v93;
  __int128 v94;
  __int128 v95;
  __n128 *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  const void *v100;
  unint64_t v101;
  size_t v102;
  int v103;
  const void **v104;
  const void *v105;
  const void **v106;
  const void *v107;
  size_t v108;
  int v109;
  __n128 *v110;
  __n128 v111;
  int v112;
  const void *v113;
  size_t v114;
  size_t v115;
  int v116;
  __n128 *v117;
  int v118;
  const void **v119;
  size_t v120;
  int v121;
  void *v122;
  const void *v123;
  const void *v124;
  size_t v125;
  size_t v126;
  int v127;
  const void *v128;
  uint64_t v129;
  uint64_t v130;
  __n128 *v131;
  __n128 *v132;
  int v133;
  const void *v134;
  size_t v135;
  int v136;
  __n128 *v137;
  size_t v138;
  size_t v139;
  int v140;
  __n128 v141;
  __n128 *v142;
  size_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  const void *v147;
  size_t v148;
  size_t v149;
  int v150;
  int64_t v151;
  int64_t v152;
  const void **v153;
  int64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const void **v158;
  int v159;
  const void *v160;
  unint64_t v161;
  int v162;
  const void *v163;
  unint64_t v164;
  size_t v165;
  int v166;
  BOOL v167;
  uint64_t v168;
  int v169;
  const void *v170;
  size_t v171;
  int v172;
  const void *v173;
  size_t v174;
  size_t v175;
  int v176;
  BOOL v177;
  __n128 v178;
  __int128 v179;
  unint64_t v180;
  __n128 *v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  const void *v186;
  unint64_t v187;
  int v188;
  const void *v189;
  unint64_t v190;
  size_t v191;
  int v192;
  BOOL v193;
  int v194;
  const void *v195;
  size_t v196;
  size_t v197;
  int v198;
  int64_t v199;
  uint64_t v200;
  uint64_t v201;
  __n128 *v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  const void *v206;
  size_t v207;
  int v208;
  const void *v209;
  size_t v210;
  size_t v211;
  int v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  int v217;
  const void *v218;
  size_t v219;
  int v220;
  __n128 *v221;
  size_t v222;
  size_t v223;
  int v224;
  __n128 v225;
  __n128 *v226;
  size_t v227;
  __n128 v228;
  __int128 v229;
  unint64_t v230;
  uint64_t v231;
  int v232;
  const void *v233;
  size_t v234;
  size_t v235;
  int v236;
  const void *v237;
  const void **v238;
  int v239;
  const void *v240;
  size_t v241;
  int v242;
  const void *v243;
  size_t v244;
  size_t v245;
  int v246;
  __n128 v247;
  __n128 *v248;
  size_t v249;
  uint64_t i;
  int v251;
  const void *v252;
  size_t v253;
  size_t v254;
  int v255;
  const void *v256;
  uint64_t v257;
  const void **v258;
  const void **v259;
  size_t v261;
  const void *v262;
  uint64_t v263;
  __n128 *v264;
  const void *v265;
  const void **v266;
  int64_t v267;
  const void *v268;
  const void **v269;
  const void **v270;
  __n128 v271;
  int64_t v272;

LABEL_1:
  v266 = a2 - 3;
  v269 = a2;
  v258 = a2 - 9;
  v259 = a2 - 6;
  j = a1;
  while (2)
  {
    a1 = j;
    v9 = (uint64_t)a2 - j;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - j) >> 3);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v117 = (__n128 *)(a2 - 3);
        v118 = *((char *)a2 - 1);
        if (v118 >= 0)
          v119 = a2 - 3;
        else
          v119 = (const void **)*(a2 - 3);
        if (v118 >= 0)
          v120 = *((unsigned __int8 *)a2 - 1);
        else
          v120 = (size_t)*(a2 - 2);
        v121 = *(char *)(a1 + 23);
        v122 = *(void **)a1;
        v123 = *(const void **)(a1 + 8);
        if (v121 >= 0)
          v124 = (const void *)a1;
        else
          v124 = *(const void **)a1;
        if (v121 >= 0)
          v125 = *(unsigned __int8 *)(a1 + 23);
        else
          v125 = *(_QWORD *)(a1 + 8);
        if (v125 >= v120)
          v126 = v120;
        else
          v126 = v125;
        v127 = memcmp(v119, v124, v126);
        if (v127)
        {
          if (v127 < 0)
            return result;
        }
        else if (v120 <= v125)
        {
          return result;
        }
        v256 = *(const void **)(a1 + 16);
        v257 = (uint64_t)*(a2 - 1);
        result = *v117;
        *(__n128 *)a1 = *v117;
        *(_QWORD *)(a1 + 16) = v257;
        *(a2 - 3) = v122;
        *(a2 - 2) = v123;
        *(a2 - 1) = v256;
        return result;
      case 3uLL:
        result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, v266).n128_u64[0];
        return result;
      case 4uLL:
        result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, v266).n128_u64[0];
        return result;
      case 5uLL:
        result.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, v266).n128_u64[0];
        return result;
      default:
        if (v9 <= 575)
        {
          if ((a4 & 1) != 0)
          {
            if ((const void **)a1 == a2)
              return result;
            v128 = (const void *)(a1 + 24);
            if ((const void **)(a1 + 24) == a2)
              return result;
            v129 = 0;
            v130 = a1;
            while (1)
            {
              v132 = (__n128 *)v130;
              v130 = (uint64_t)v128;
              v133 = v132[2].n128_i8[15];
              if (v133 >= 0)
                v134 = v128;
              else
                v134 = (const void *)v132[1].n128_u64[1];
              if (v133 >= 0)
                v135 = v132[2].n128_u8[15];
              else
                v135 = v132[2].n128_u64[0];
              v136 = v132[1].n128_i8[7];
              if (v136 >= 0)
                v137 = v132;
              else
                v137 = (__n128 *)v132->n128_u64[0];
              if (v136 >= 0)
                v138 = v132[1].n128_u8[7];
              else
                v138 = v132->n128_u64[1];
              if (v138 >= v135)
                v139 = v135;
              else
                v139 = v138;
              v140 = memcmp(v134, v137, v139);
              if (v140)
              {
                if (v140 < 0)
                  goto LABEL_259;
              }
              else if (v135 <= v138)
              {
                goto LABEL_259;
              }
              v141 = *(__n128 *)v130;
              v272 = *(_QWORD *)(v130 + 16);
              v271 = v141;
              if (v272 >= 0)
                v142 = &v271;
              else
                v142 = (__n128 *)v141.n128_u64[0];
              if (v272 >= 0)
                v143 = HIBYTE(v272);
              else
                v143 = v141.n128_u64[1];
              *(_QWORD *)(v130 + 16) = v132[1].n128_u64[0];
              *(__n128 *)v130 = *v132;
              v132[1].n128_u8[7] = 0;
              v132->n128_u8[0] = 0;
              v131 = (__n128 *)a1;
              if (v132 != (__n128 *)a1)
              {
                v144 = v129;
                while (1)
                {
                  v145 = a1 + v144;
                  v146 = *(char *)(a1 + v144 - 1);
                  if (v146 >= 0)
                    v147 = (const void *)(a1 + v144 - 24);
                  else
                    v147 = *(const void **)(a1 + v144 - 24);
                  if (v146 >= 0)
                    v148 = *(unsigned __int8 *)(a1 + v144 - 1);
                  else
                    v148 = *(_QWORD *)(a1 + v144 - 16);
                  if (v148 >= v143)
                    v149 = v143;
                  else
                    v149 = v148;
                  v150 = memcmp(v142, v147, v149);
                  if (v150)
                  {
                    if (v150 < 0)
                    {
                      v131 = (__n128 *)(a1 + v144);
                      break;
                    }
                  }
                  else if (v143 <= v148)
                  {
                    v131 = v132;
                    break;
                  }
                  v132 = (__n128 *)((char *)v132 - 24);
                  *(_OWORD *)v145 = *(_OWORD *)(a1 + v144 - 24);
                  *(_QWORD *)(v145 + 16) = *(_QWORD *)(a1 + v144 - 8);
                  *(_BYTE *)(v145 - 1) = 0;
                  *(_BYTE *)(v145 - 24) = 0;
                  v144 -= 24;
                  if (!v144)
                  {
                    v131 = (__n128 *)a1;
                    break;
                  }
                }
              }
              result = v271;
              v131[1].n128_u64[0] = v272;
              *v131 = result;
LABEL_259:
              v128 = (const void *)(v130 + 24);
              v129 += 24;
              if ((const void **)(v130 + 24) == v269)
                return result;
            }
          }
          if ((const void **)a1 == a2)
            return result;
          v237 = (const void *)(a1 + 24);
          if ((const void **)(a1 + 24) == a2)
            return result;
LABEL_471:
          v238 = (const void **)a1;
          a1 = (uint64_t)v237;
          v239 = *((char *)v238 + 47);
          if (v239 >= 0)
            v240 = v237;
          else
            v240 = v238[3];
          if (v239 >= 0)
            v241 = *((unsigned __int8 *)v238 + 47);
          else
            v241 = (size_t)v238[4];
          v242 = *((char *)v238 + 23);
          if (v242 >= 0)
            v243 = v238;
          else
            v243 = *v238;
          if (v242 >= 0)
            v244 = *((unsigned __int8 *)v238 + 23);
          else
            v244 = (size_t)v238[1];
          if (v244 >= v241)
            v245 = v241;
          else
            v245 = v244;
          v246 = memcmp(v240, v243, v245);
          if (v246)
          {
            if (v246 < 0)
              goto LABEL_470;
          }
          else if (v241 <= v244)
          {
            goto LABEL_470;
          }
          v247 = *(__n128 *)a1;
          v272 = *(_QWORD *)(a1 + 16);
          v271 = v247;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          if (v272 >= 0)
            v248 = &v271;
          else
            v248 = (__n128 *)v271.n128_u64[0];
          if (v272 >= 0)
            v249 = HIBYTE(v272);
          else
            v249 = v271.n128_u64[1];
          for (i = a1; ; i -= 24)
          {
            *(_OWORD *)i = *(_OWORD *)(i - 24);
            *(_QWORD *)(i + 16) = *(_QWORD *)(i - 8);
            *(_BYTE *)(i - 1) = 0;
            *(_BYTE *)(i - 24) = 0;
            v251 = *(char *)(i - 25);
            if (v251 >= 0)
              v252 = (const void *)(i - 48);
            else
              v252 = *(const void **)(i - 48);
            if (v251 >= 0)
              v253 = *(unsigned __int8 *)(i - 25);
            else
              v253 = *(_QWORD *)(i - 40);
            if (v253 >= v249)
              v254 = v249;
            else
              v254 = v253;
            v255 = memcmp(v248, v252, v254);
            if (v255)
            {
              if (v255 < 0)
              {
LABEL_469:
                result = v271;
                *(_QWORD *)(i - 8) = v272;
                *(__n128 *)(i - 24) = result;
LABEL_470:
                v237 = (const void *)(a1 + 24);
                if ((const void **)(a1 + 24) == a2)
                  return result;
                goto LABEL_471;
              }
            }
            else if (v249 <= v253)
            {
              goto LABEL_469;
            }
          }
        }
        if (!a3)
        {
          if ((const void **)a1 == a2)
            return result;
          v151 = (v10 - 2) >> 1;
          v152 = v151;
          while (1)
          {
            v154 = v152;
            if (v151 < v152)
              goto LABEL_306;
            v155 = (2 * v152) | 1;
            v156 = a1 + 24 * v155;
            v157 = 2 * v152 + 2;
            if (v157 >= (uint64_t)v10)
              goto LABEL_330;
            v158 = (const void **)(v156 + 24);
            v159 = *(char *)(v156 + 23);
            v160 = v159 >= 0 ? (const void *)(a1 + 24 * v155) : *(const void **)v156;
            v161 = v159 >= 0 ? *(unsigned __int8 *)(v156 + 23) : *(_QWORD *)(v156 + 8);
            v162 = *(char *)(v156 + 47);
            v163 = v162 >= 0 ? (const void *)(v156 + 24) : *(const void **)(v156 + 24);
            v164 = v162 >= 0 ? *(unsigned __int8 *)(v156 + 47) : *(_QWORD *)(v156 + 32);
            v165 = v164 >= v161 ? v161 : v164;
            v166 = memcmp(v160, v163, v165);
            if (v166)
              break;
            v167 = v161 >= v164;
            if (v161 == v164)
            {
              v158 = (const void **)(a1 + 24 * v155);
              v157 = (2 * v154) | 1;
              a2 = v269;
              goto LABEL_331;
            }
            a2 = v269;
            if (!v167)
              goto LABEL_330;
LABEL_331:
            v168 = a1 + 24 * v154;
            v169 = *((char *)v158 + 23);
            if (v169 >= 0)
              v170 = v158;
            else
              v170 = *v158;
            if (v169 >= 0)
              v171 = *((unsigned __int8 *)v158 + 23);
            else
              v171 = (size_t)v158[1];
            v172 = *(char *)(v168 + 23);
            if (v172 >= 0)
              v173 = (const void *)(a1 + 24 * v154);
            else
              v173 = *(const void **)v168;
            if (v172 >= 0)
              v174 = *(unsigned __int8 *)(v168 + 23);
            else
              v174 = *(_QWORD *)(v168 + 8);
            if (v174 >= v171)
              v175 = v171;
            else
              v175 = v174;
            v176 = memcmp(v170, v173, v175);
            if (v176)
            {
              v151 = (v10 - 2) >> 1;
              if (v176 < 0)
                goto LABEL_350;
            }
            else
            {
              v177 = v171 > v174;
              v151 = (v10 - 2) >> 1;
              if (!v177)
              {
LABEL_350:
                v178 = *(__n128 *)v168;
                v272 = *(_QWORD *)(v168 + 16);
                v271 = v178;
                *(_QWORD *)(v168 + 8) = 0;
                *(_QWORD *)(v168 + 16) = 0;
                *(_QWORD *)v168 = 0;
                v179 = *(_OWORD *)v158;
                *(_QWORD *)(v168 + 16) = v158[2];
                *(_OWORD *)v168 = v179;
                *((_BYTE *)v158 + 23) = 0;
                *(_BYTE *)v158 = 0;
                if (v151 >= v157)
                {
                  v180 = HIBYTE(v272);
                  v181 = &v271;
                  if (v272 < 0)
                  {
                    v180 = v271.n128_u64[1];
                    v181 = (__n128 *)v271.n128_u64[0];
                  }
                  v261 = v180;
                  v264 = v181;
                  v267 = v154;
                  while (1)
                  {
                    v183 = (2 * v157) | 1;
                    v184 = a1 + 24 * v183;
                    v157 = 2 * v157 + 2;
                    if (v157 >= (uint64_t)v10)
                      goto LABEL_378;
                    v153 = (const void **)(v184 + 24);
                    v185 = *(char *)(v184 + 23);
                    v186 = v185 >= 0 ? (const void *)(a1 + 24 * v183) : *(const void **)v184;
                    v187 = v185 >= 0 ? *(unsigned __int8 *)(v184 + 23) : *(_QWORD *)(v184 + 8);
                    v188 = *(char *)(v184 + 47);
                    v189 = v188 >= 0 ? (const void *)(v184 + 24) : *(const void **)(v184 + 24);
                    v190 = v188 >= 0 ? *(unsigned __int8 *)(v184 + 47) : *(_QWORD *)(v184 + 32);
                    v191 = v190 >= v187 ? v187 : v190;
                    v192 = memcmp(v186, v189, v191);
                    if (v192)
                      break;
                    v193 = v187 >= v190;
                    if (v187 == v190)
                    {
                      v153 = (const void **)(a1 + 24 * v183);
                      v157 = v183;
                      a2 = v269;
                      v151 = (v10 - 2) >> 1;
                      goto LABEL_379;
                    }
                    a2 = v269;
                    v151 = (v10 - 2) >> 1;
                    if (!v193)
                      goto LABEL_378;
LABEL_379:
                    v194 = *((char *)v153 + 23);
                    if (v194 >= 0)
                      v195 = v153;
                    else
                      v195 = *v153;
                    if (v194 >= 0)
                      v196 = *((unsigned __int8 *)v153 + 23);
                    else
                      v196 = (size_t)v153[1];
                    if (v261 >= v196)
                      v197 = v196;
                    else
                      v197 = v261;
                    v198 = memcmp(v195, v264, v197);
                    if (v198)
                    {
                      v154 = v267;
                      if ((v198 & 0x80000000) == 0)
                        goto LABEL_304;
                    }
                    else
                    {
                      v154 = v267;
                      if (v196 > v261)
                        goto LABEL_304;
                    }
                    v182 = *(_OWORD *)v153;
                    v158[2] = v153[2];
                    *(_OWORD *)v158 = v182;
                    *((_BYTE *)v153 + 23) = 0;
                    *(_BYTE *)v153 = 0;
                    v158 = v153;
                    if (v151 < v157)
                      goto LABEL_305;
                  }
                  a2 = v269;
                  v151 = (v10 - 2) >> 1;
                  if ((v192 & 0x80000000) == 0)
                    goto LABEL_379;
LABEL_378:
                  v153 = (const void **)(a1 + 24 * v183);
                  v157 = v183;
                  goto LABEL_379;
                }
LABEL_304:
                v153 = v158;
LABEL_305:
                result = v271;
                v153[2] = (const void *)v272;
                *(__n128 *)v153 = result;
              }
            }
LABEL_306:
            v152 = v154 - 1;
            if (!v154)
            {
              v199 = v9 / 0x18uLL;
              while (2)
              {
                if (v199 < 2)
                  goto LABEL_393;
                v200 = 0;
                v268 = *(const void **)a1;
                v270 = a2;
                v262 = *(const void **)(a1 + 16);
                v265 = *(const void **)(a1 + 8);
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                v201 = a1;
                *(_QWORD *)a1 = 0;
LABEL_399:
                v203 = v201 + 24 * v200 + 24;
                v204 = (2 * v200) | 1;
                v200 = 2 * v200 + 2;
                if (v200 >= v199)
                  goto LABEL_397;
                v202 = (__n128 *)(v203 + 24);
                v205 = *(char *)(v203 + 23);
                if (v205 >= 0)
                  v206 = (const void *)v203;
                else
                  v206 = *(const void **)v203;
                if (v205 >= 0)
                  v207 = *(unsigned __int8 *)(v203 + 23);
                else
                  v207 = *(_QWORD *)(v203 + 8);
                v208 = *(char *)(v203 + 47);
                if (v208 >= 0)
                  v209 = (const void *)(v203 + 24);
                else
                  v209 = *(const void **)(v203 + 24);
                if (v208 >= 0)
                  v210 = *(unsigned __int8 *)(v203 + 47);
                else
                  v210 = *(_QWORD *)(v203 + 32);
                if (v210 >= v207)
                  v211 = v207;
                else
                  v211 = v210;
                v212 = memcmp(v206, v209, v211);
                if (v212)
                {
                  if ((v212 & 0x80000000) == 0)
                    goto LABEL_417;
LABEL_397:
                  v202 = (__n128 *)v203;
                  v200 = v204;
                  if ((*(char *)(v201 + 23) & 0x80000000) == 0)
                  {
LABEL_398:
                    result = *v202;
                    *(_QWORD *)(v201 + 16) = v202[1].n128_u64[0];
                    *(__n128 *)v201 = result;
                    v202[1].n128_u8[7] = 0;
                    v202->n128_u8[0] = 0;
                    v201 = (uint64_t)v202;
                    if (v200 > (uint64_t)((unint64_t)(v199 - 2) >> 1))
                    {
                      if (v202 == (__n128 *)(a2 - 3))
                      {
                        v202->n128_u64[0] = (unint64_t)v268;
                        v202->n128_u64[1] = (unint64_t)v265;
                        v202[1].n128_u64[0] = (unint64_t)v262;
                      }
                      else
                      {
                        result = *(__n128 *)(a2 - 3);
                        v202[1].n128_u64[0] = (unint64_t)*(a2 - 1);
                        *v202 = result;
                        *(a2 - 3) = v268;
                        *(a2 - 2) = v265;
                        *(a2 - 1) = v262;
                        v213 = (uint64_t)&v202[1].n128_i64[1] - a1;
                        if (v213 >= 25)
                        {
                          v214 = v213 / 0x18uLL - 2;
                          v215 = v214 >> 1;
                          v216 = a1 + 24 * (v214 >> 1);
                          v217 = *(char *)(v216 + 23);
                          if (v217 >= 0)
                            v218 = (const void *)(a1 + 24 * (v214 >> 1));
                          else
                            v218 = *(const void **)v216;
                          if (v217 >= 0)
                            v219 = *(unsigned __int8 *)(v216 + 23);
                          else
                            v219 = *(_QWORD *)(v216 + 8);
                          v220 = v202[1].n128_i8[7];
                          if (v220 >= 0)
                            v221 = v202;
                          else
                            v221 = (__n128 *)v202->n128_u64[0];
                          if (v220 >= 0)
                            v222 = v202[1].n128_u8[7];
                          else
                            v222 = v202->n128_u64[1];
                          if (v222 >= v219)
                            v223 = v219;
                          else
                            v223 = v222;
                          v224 = memcmp(v218, v221, v223);
                          if (v224)
                          {
                            if (v224 < 0)
                              goto LABEL_393;
LABEL_443:
                            v225 = *v202;
                            v272 = v202[1].n128_i64[0];
                            v271 = v225;
                            v202->n128_u64[1] = 0;
                            v202[1].n128_u64[0] = 0;
                            v202->n128_u64[0] = 0;
                            if (v272 >= 0)
                              v226 = &v271;
                            else
                              v226 = (__n128 *)v271.n128_u64[0];
                            if (v272 >= 0)
                              v227 = HIBYTE(v272);
                            else
                              v227 = v271.n128_u64[1];
                            v228 = *(__n128 *)v216;
                            v202[1].n128_u64[0] = *(_QWORD *)(v216 + 16);
                            *v202 = v228;
                            *(_BYTE *)(v216 + 23) = 0;
                            *(_BYTE *)v216 = 0;
                            if (v214 >= 2)
                            {
                              while (1)
                              {
                                v230 = v215 - 1;
                                v215 = (v215 - 1) >> 1;
                                v231 = a1 + 24 * v215;
                                v232 = *(char *)(v231 + 23);
                                if (v232 >= 0)
                                  v233 = (const void *)(a1 + 24 * v215);
                                else
                                  v233 = *(const void **)v231;
                                if (v232 >= 0)
                                  v234 = *(unsigned __int8 *)(v231 + 23);
                                else
                                  v234 = *(_QWORD *)(v231 + 8);
                                if (v227 >= v234)
                                  v235 = v234;
                                else
                                  v235 = v227;
                                v236 = memcmp(v233, v226, v235);
                                if (v236)
                                {
                                  if (v236 < 0)
                                    break;
                                }
                                else if (v234 <= v227)
                                {
                                  break;
                                }
                                v229 = *(_OWORD *)v231;
                                *(_QWORD *)(v216 + 16) = *(_QWORD *)(v231 + 16);
                                *(_OWORD *)v216 = v229;
                                *(_BYTE *)(v231 + 23) = 0;
                                *(_BYTE *)v231 = 0;
                                v216 = a1 + 24 * v215;
                                if (v230 <= 1)
                                  goto LABEL_465;
                              }
                            }
                            v231 = v216;
LABEL_465:
                            result = v271;
                            *(_QWORD *)(v231 + 16) = v272;
                            *(__n128 *)v231 = result;
                            a2 = v270;
                          }
                          else if (v219 > v222)
                          {
                            goto LABEL_443;
                          }
                        }
                      }
LABEL_393:
                      a2 -= 3;
                      v177 = (unint64_t)v199-- > 2;
                      if (!v177)
                        return result;
                      continue;
                    }
                    goto LABEL_399;
                  }
                }
                else
                {
                  if (v207 == v210 || v207 < v210)
                    goto LABEL_397;
LABEL_417:
                  if ((*(char *)(v201 + 23) & 0x80000000) == 0)
                    goto LABEL_398;
                }
                break;
              }
              operator delete(*(void **)v201);
              goto LABEL_398;
            }
          }
          a2 = v269;
          if ((v166 & 0x80000000) == 0)
            goto LABEL_331;
LABEL_330:
          v158 = (const void **)(a1 + 24 * v155);
          v157 = (2 * v154) | 1;
          goto LABEL_331;
        }
        v11 = v10 >> 1;
        v12 = a1 + 24 * (v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v12, a1, v266);
          v263 = a3 - 1;
          if ((a4 & 1) != 0)
            goto LABEL_26;
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, v12, v266);
          v13 = 24 * v11;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 24, v13 + a1 - 24, v259);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 48, a1 + 24 + v13, v258);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v13 + a1 - 24, v12, (const void **)(a1 + 24 + v13));
          v14 = *(void **)a1;
          v15 = *(_OWORD *)(a1 + 8);
          v16 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 + 16);
          *(_OWORD *)a1 = v16;
          *(_QWORD *)v12 = v14;
          *(_OWORD *)(v12 + 8) = v15;
          v263 = a3 - 1;
          if ((a4 & 1) != 0)
            goto LABEL_26;
        }
        v17 = *(char *)(a1 - 1);
        if (v17 >= 0)
          v18 = (const void *)(a1 - 24);
        else
          v18 = *(const void **)(a1 - 24);
        if (v17 >= 0)
          v19 = *(unsigned __int8 *)(a1 - 1);
        else
          v19 = *(_QWORD *)(a1 - 16);
        v20 = *(char *)(a1 + 23);
        if (v20 >= 0)
          v21 = (const void *)a1;
        else
          v21 = *(const void **)a1;
        if (v20 >= 0)
          v22 = *(unsigned __int8 *)(a1 + 23);
        else
          v22 = *(_QWORD *)(a1 + 8);
        if (v22 >= v19)
          v23 = v19;
        else
          v23 = v22;
        v24 = memcmp(v18, v21, v23);
        if (v24)
        {
          if ((v24 & 0x80000000) == 0)
            goto LABEL_26;
LABEL_124:
          v70 = *(__n128 *)a1;
          v272 = *(_QWORD *)(a1 + 16);
          v271 = v70;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v71 = a2;
          if (v272 >= 0)
            v72 = &v271;
          else
            v72 = (__n128 *)v271.n128_u64[0];
          if (v272 >= 0)
            v73 = HIBYTE(v272);
          else
            v73 = v271.n128_u64[1];
          v74 = *((unsigned __int8 *)v71 - 1);
          v76 = (const void **)*(v71 - 3);
          v75 = *(v71 - 2);
          if ((v74 & 0x80u) == 0)
            v77 = v266;
          else
            v77 = (const void **)*(v71 - 3);
          if ((v74 & 0x80u) == 0)
            v78 = *((unsigned __int8 *)v71 - 1);
          else
            v78 = (size_t)*(v71 - 2);
          if (v78 >= v73)
            v79 = v73;
          else
            v79 = v78;
          v80 = memcmp(v72, v77, v79);
          if (v80)
          {
            if ((v80 & 0x80000000) == 0)
              goto LABEL_141;
          }
          else if (v73 > v78)
          {
LABEL_141:
            v81 = a1 + 24;
            do
            {
              while (1)
              {
                j = v81;
                v82 = *(unsigned __int8 *)(v81 + 23);
                v83 = (v82 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                v84 = (v82 & 0x80u) == 0 ? v82 : *(_QWORD *)(j + 8);
                v85 = v84 >= v73 ? v73 : v84;
                v86 = memcmp(v72, v83, v85);
                v81 = j + 24;
                if (v86)
                  break;
                if (v73 > v84)
                  goto LABEL_154;
              }
            }
            while (v86 < 0);
            goto LABEL_154;
          }
          for (j = a1 + 24; j < (unint64_t)v269; j += 24)
          {
            v112 = *(char *)(j + 23);
            if (v112 >= 0)
              v113 = (const void *)j;
            else
              v113 = *(const void **)j;
            if (v112 >= 0)
              v114 = *(unsigned __int8 *)(j + 23);
            else
              v114 = *(_QWORD *)(j + 8);
            if (v114 >= v73)
              v115 = v73;
            else
              v115 = v114;
            v116 = memcmp(v72, v113, v115);
            if (v116)
            {
              if ((v116 & 0x80000000) == 0)
                break;
            }
            else if (v73 > v114)
            {
              break;
            }
          }
LABEL_154:
          k = v269;
          if (j < (unint64_t)v269)
          {
            for (k = v266; ; v75 = k[1])
            {
              if ((v74 & 0x80u) == 0)
                v89 = k;
              else
                v89 = v76;
              if ((v74 & 0x80u) == 0)
                v90 = v74;
              else
                v90 = (size_t)v75;
              if (v90 >= v73)
                v91 = v73;
              else
                v91 = v90;
              v92 = memcmp(v72, v89, v91);
              if (v92)
              {
                if (v92 < 0)
                  break;
              }
              else if (v73 <= v90)
              {
                break;
              }
              v88 = (const void **)*(k - 3);
              k -= 3;
              v76 = v88;
              v74 = *((unsigned __int8 *)k + 23);
            }
          }
          if (j < (unint64_t)k)
          {
            v93 = *(const void **)j;
            do
            {
              v94 = *(_OWORD *)(j + 8);
              v95 = *(_OWORD *)k;
              *(_QWORD *)(j + 16) = k[2];
              *(_OWORD *)j = v95;
              *k = v93;
              *(_OWORD *)(k + 1) = v94;
              if (v272 >= 0)
                v96 = &v271;
              else
                v96 = (__n128 *)v271.n128_u64[0];
              if (v272 >= 0)
                v97 = HIBYTE(v272);
              else
                v97 = v271.n128_u64[1];
              v98 = j + 24;
              do
              {
                while (1)
                {
                  j = v98;
                  v99 = *(unsigned __int8 *)(v98 + 23);
                  v93 = *(const void **)j;
                  v100 = (v99 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                  v101 = (v99 & 0x80u) == 0 ? v99 : *(_QWORD *)(j + 8);
                  v102 = v101 >= v97 ? v97 : v101;
                  v103 = memcmp(v96, v100, v102);
                  v98 = j + 24;
                  if (v103)
                    break;
                  if (v97 > v101)
                    goto LABEL_191;
                }
              }
              while (v103 < 0);
LABEL_191:
              v104 = k - 3;
              do
              {
                while (1)
                {
                  k = v104;
                  v105 = (const void *)*((unsigned __int8 *)v104 + 23);
                  v106 = (char)v105 >= 0 ? k : (const void **)*k;
                  v107 = (char)v105 >= 0 ? v105 : k[1];
                  v108 = (unint64_t)v107 >= v97 ? v97 : (size_t)v107;
                  v109 = memcmp(v96, v106, v108);
                  v104 = k - 3;
                  if (v109)
                    break;
                  if (v97 <= (unint64_t)v107)
                    goto LABEL_171;
                }
              }
              while ((v109 & 0x80000000) == 0);
LABEL_171:
              ;
            }
            while (j < (unint64_t)k);
          }
          v110 = (__n128 *)(j - 24);
          if (j - 24 == a1)
          {
            a2 = v269;
            a3 = v263;
            if (*(char *)(j - 1) < 0)
              operator delete(*(void **)a1);
          }
          else
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v111 = *v110;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
            *(__n128 *)a1 = v111;
            *(_BYTE *)(j - 1) = 0;
            *(_BYTE *)(j - 24) = 0;
            a2 = v269;
            a3 = v263;
          }
          a4 = 0;
          result = v271;
          *(_QWORD *)(j - 8) = v272;
          *v110 = result;
          continue;
        }
        if (v19 <= v22)
          goto LABEL_124;
LABEL_26:
        v25 = 0;
        v26 = *(__n128 *)a1;
        v272 = *(_QWORD *)(a1 + 16);
        v271 = v26;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        if (v272 >= 0)
          v27 = &v271;
        else
          v27 = (__n128 *)v271.n128_u64[0];
        if (v272 >= 0)
          v28 = HIBYTE(v272);
        else
          v28 = v271.n128_u64[1];
        while (2)
        {
          v29 = *(const void **)(a1 + v25 + 24);
          v30 = *(char *)(a1 + v25 + 47);
          if (v30 >= 0)
            v31 = (const void *)(a1 + v25 + 24);
          else
            v31 = *(const void **)(a1 + v25 + 24);
          if (v30 >= 0)
            v32 = *(unsigned __int8 *)(a1 + v25 + 47);
          else
            v32 = *(_QWORD *)(a1 + v25 + 32);
          if (v28 >= v32)
            v33 = v32;
          else
            v33 = v28;
          v34 = memcmp(v31, v27, v33);
          if (!v34)
          {
            if (v32 <= v28)
              goto LABEL_45;
LABEL_33:
            v25 += 24;
            continue;
          }
          break;
        }
        if ((v34 & 0x80000000) == 0)
          goto LABEL_33;
LABEL_45:
        v35 = a1 + v25 + 24;
        v36 = v266;
        if (v25)
        {
          do
          {
            while (1)
            {
              v37 = v36;
              v44 = (const void *)*((unsigned __int8 *)v36 + 23);
              v45 = (char)v44 >= 0 ? v37 : (const void **)*v37;
              v46 = (size_t)((char)v44 >= 0 ? v44 : v37[1]);
              v47 = v28 >= v46 ? v46 : v28;
              v48 = memcmp(v45, v27, v47);
              v36 = v37 - 3;
              if (v48)
                break;
              if (v46 > v28)
                goto LABEL_76;
            }
          }
          while (v48 < 0);
        }
        else
        {
          v37 = v269;
          if (v35 < (unint64_t)v269)
          {
            v38 = v266;
            do
            {
              while (1)
              {
                v37 = v38;
                v39 = (const void *)*((unsigned __int8 *)v38 + 23);
                v40 = (char)v39 >= 0 ? v37 : (const void **)*v37;
                v41 = (size_t)((char)v39 >= 0 ? v39 : v37[1]);
                v42 = v28 >= v41 ? v41 : v28;
                v43 = memcmp(v40, v27, v42);
                v38 = v37 - 3;
                if (!v43)
                  break;
                if (v35 >= (unint64_t)v37 || (v43 & 0x80000000) == 0)
                  goto LABEL_76;
              }
            }
            while (v35 < (unint64_t)v37 && v41 <= v28);
          }
        }
LABEL_76:
        if (v35 >= (unint64_t)v37)
        {
          j = v35;
        }
        else
        {
          v49 = v37;
          j = v35;
          do
          {
            v50 = *(_OWORD *)(j + 8);
            v51 = *(_OWORD *)v49;
            *(_QWORD *)(j + 16) = v49[2];
            *(_OWORD *)j = v51;
            *v49 = v29;
            *(_OWORD *)(v49 + 1) = v50;
            if (v272 >= 0)
              v52 = &v271;
            else
              v52 = (__n128 *)v271.n128_u64[0];
            if (v272 >= 0)
              v53 = HIBYTE(v272);
            else
              v53 = v271.n128_u64[1];
            v54 = j + 24;
            do
            {
              while (1)
              {
                j = v54;
                v55 = *(unsigned __int8 *)(v54 + 23);
                v29 = *(const void **)j;
                v56 = (v55 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                v57 = (v55 & 0x80u) == 0 ? v55 : *(_QWORD *)(j + 8);
                v58 = v53 >= v57 ? v57 : v53;
                v59 = memcmp(v56, v52, v58);
                v54 = j + 24;
                if (v59)
                  break;
                if (v57 <= v53)
                  goto LABEL_98;
              }
            }
            while ((v59 & 0x80000000) == 0);
LABEL_98:
            v60 = v49 - 3;
            do
            {
              while (1)
              {
                v49 = v60;
                v61 = (const void *)*((unsigned __int8 *)v60 + 23);
                v62 = (char)v61 >= 0 ? v49 : (const void **)*v49;
                v63 = (unint64_t)((char)v61 >= 0 ? v61 : v49[1]);
                v64 = v53 >= v63 ? v63 : v53;
                v65 = memcmp(v62, v52, v64);
                v60 = v49 - 3;
                if (v65)
                  break;
                if (v63 > v53)
                  goto LABEL_78;
              }
            }
            while (v65 < 0);
LABEL_78:
            ;
          }
          while (j < (unint64_t)v49);
        }
        v66 = (__n128 *)(j - 24);
        if (j - 24 == a1)
        {
          a2 = v269;
          a3 = v263;
          if (*(char *)(j - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          a2 = v269;
          a3 = v263;
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v67 = *v66;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
          *(__n128 *)a1 = v67;
          *(_BYTE *)(j - 1) = 0;
          *(_BYTE *)(j - 24) = 0;
        }
        v68 = v271;
        *(_QWORD *)(j - 8) = v272;
        *v66 = v68;
        if (v35 < (unint64_t)v37)
        {
LABEL_122:
          std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(a1, j - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v69 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, (const void **)(j - 24));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(j, a2))
        {
          if (v69)
            continue;
          goto LABEL_122;
        }
        a2 = (const void **)(j - 24);
        if (!v69)
          goto LABEL_1;
        return result;
    }
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, const void **a3)
{
  int v6;
  const void *v7;
  const void *v8;
  const void *v9;
  size_t v10;
  int v11;
  const void *v12;
  const void *v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  int v18;
  const void *v19;
  size_t v20;
  size_t v21;
  int v22;
  const void *v23;
  const void *v24;
  __n128 result;
  int v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const void *v34;
  size_t v35;
  const void *v36;
  size_t v37;
  size_t v38;
  int v39;
  const void *v40;
  const void *v41;
  int v42;
  const void *v43;
  size_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  const void *v48;
  size_t v49;
  size_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;

  v6 = *(char *)(a2 + 23);
  v7 = *(const void **)a2;
  v8 = *(const void **)(a2 + 8);
  if (v6 >= 0)
    v9 = (const void *)a2;
  else
    v9 = *(const void **)a2;
  if (v6 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  v11 = *(char *)(a1 + 23);
  v13 = *(const void **)a1;
  v12 = *(const void **)(a1 + 8);
  if (v11 >= 0)
    v14 = (const void *)a1;
  else
    v14 = *(const void **)a1;
  if (v11 >= 0)
    v15 = *(unsigned __int8 *)(a1 + 23);
  else
    v15 = *(_QWORD *)(a1 + 8);
  if (v15 >= v10)
    v16 = v10;
  else
    v16 = v15;
  v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      goto LABEL_18;
  }
  else if (v10 > v15)
  {
LABEL_18:
    v18 = *((char *)a3 + 23);
    if (v18 >= 0)
      v19 = a3;
    else
      v19 = *a3;
    if (v18 >= 0)
      v20 = *((unsigned __int8 *)a3 + 23);
    else
      v20 = (size_t)a3[1];
    if (v10 >= v20)
      v21 = v20;
    else
      v21 = v10;
    v22 = memcmp(v19, v9, v21);
    if (v22)
    {
      if ((v22 & 0x80000000) == 0)
      {
LABEL_29:
        v23 = *(const void **)(a1 + 16);
        v24 = a3[2];
        result = *(__n128 *)a3;
        *(_OWORD *)a1 = *(_OWORD *)a3;
        *(_QWORD *)(a1 + 16) = v24;
        *a3 = v13;
        a3[1] = v12;
        a3[2] = v23;
        return result;
      }
    }
    else if (v20 > v10)
    {
      goto LABEL_29;
    }
    v31 = *(_QWORD *)(a1 + 16);
    v32 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v32;
    *(_QWORD *)a2 = v13;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 16) = v31;
    v33 = *((char *)a3 + 23);
    if (v33 >= 0)
      v34 = a3;
    else
      v34 = *a3;
    if (v33 >= 0)
      v35 = *((unsigned __int8 *)a3 + 23);
    else
      v35 = (size_t)a3[1];
    if (v31 >= 0)
      v36 = (const void *)a2;
    else
      v36 = v13;
    if (v31 >= 0)
      v37 = HIBYTE(v31);
    else
      v37 = (size_t)v12;
    if (v37 >= v35)
      v38 = v35;
    else
      v38 = v37;
    v39 = memcmp(v34, v36, v38);
    if (v39)
    {
      if (v39 < 0)
        return result;
    }
    else if (v35 <= v37)
    {
      return result;
    }
    result = *(__n128 *)a3;
    *(_QWORD *)(a2 + 16) = a3[2];
    *(__n128 *)a2 = result;
    *a3 = v13;
    a3[1] = v12;
    a3[2] = (const void *)v31;
    return result;
  }
  v26 = *((char *)a3 + 23);
  if (v26 >= 0)
    v27 = a3;
  else
    v27 = *a3;
  if (v26 >= 0)
    v28 = *((unsigned __int8 *)a3 + 23);
  else
    v28 = (size_t)a3[1];
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = v10;
  v30 = memcmp(v27, v9, v29);
  if (v30)
  {
    if (v30 < 0)
      return result;
  }
  else if (v28 <= v10)
  {
    return result;
  }
  v40 = *(const void **)(a2 + 16);
  v41 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v41;
  *a3 = v7;
  a3[1] = v8;
  a3[2] = v40;
  v42 = *(char *)(a2 + 23);
  if (v42 >= 0)
    v43 = (const void *)a2;
  else
    v43 = *(const void **)a2;
  if (v42 >= 0)
    v44 = *(unsigned __int8 *)(a2 + 23);
  else
    v44 = *(_QWORD *)(a2 + 8);
  v45 = *(char *)(a1 + 23);
  v46 = *(const void **)a1;
  v47 = *(_QWORD *)(a1 + 8);
  if (v45 >= 0)
    v48 = (const void *)a1;
  else
    v48 = *(const void **)a1;
  if (v45 >= 0)
    v49 = *(unsigned __int8 *)(a1 + 23);
  else
    v49 = *(_QWORD *)(a1 + 8);
  if (v49 >= v44)
    v50 = v44;
  else
    v50 = v49;
  v51 = memcmp(v43, v48, v50);
  if (!v51)
  {
    if (v44 <= v49)
      return result;
    goto LABEL_84;
  }
  if ((v51 & 0x80000000) == 0)
  {
LABEL_84:
    v52 = *(_QWORD *)(a1 + 16);
    v53 = *(_QWORD *)(a2 + 16);
    result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v53;
    *(_QWORD *)a2 = v46;
    *(_QWORD *)(a2 + 8) = v47;
    *(_QWORD *)(a2 + 16) = v52;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, const void **a2)
{
  const void **v2;
  unint64_t v4;
  _BOOL8 result;
  const void **v6;
  int v7;
  const void **v8;
  size_t v9;
  int v10;
  const void *v11;
  const void *v12;
  const void *v13;
  size_t v14;
  size_t v15;
  int v16;
  const void **v17;
  const void **v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  const void *v24;
  size_t v25;
  int v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  unint64_t v35;
  int v36;
  const void *v37;
  unint64_t v38;
  size_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  const void **v43;
  __int128 v44;
  const void *v45;

  v2 = a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 3;
      v7 = *((char *)a2 - 1);
      if (v7 >= 0)
        v8 = a2 - 3;
      else
        v8 = (const void **)*(a2 - 3);
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)a2 - 1);
      else
        v9 = (size_t)*(a2 - 2);
      v10 = *(char *)(a1 + 23);
      v11 = *(const void **)a1;
      v12 = *(const void **)(a1 + 8);
      if (v10 >= 0)
        v13 = (const void *)a1;
      else
        v13 = *(const void **)a1;
      if (v10 >= 0)
        v14 = *(unsigned __int8 *)(a1 + 23);
      else
        v14 = *(_QWORD *)(a1 + 8);
      if (v14 >= v9)
        v15 = v9;
      else
        v15 = v14;
      v16 = memcmp(v8, v13, v15);
      if (v16)
      {
        if (v16 < 0)
          return 1;
      }
      else if (v9 <= v14)
      {
        return 1;
      }
      v41 = *(const void **)(a1 + 16);
      v42 = (uint64_t)*(v2 - 1);
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(_QWORD *)(a1 + 16) = v42;
      *(v2 - 3) = v11;
      *(v2 - 2) = v12;
      *(v2 - 1) = v41;
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 3);
      return 1;
    default:
      v17 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, (const void **)(a1 + 48));
      v18 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == v2)
        return 1;
      v19 = 0;
      v20 = 0;
      v43 = v2;
      break;
  }
  while (2)
  {
    v23 = *((char *)v18 + 23);
    if (v23 >= 0)
      v24 = v18;
    else
      v24 = *v18;
    if (v23 >= 0)
      v25 = *((unsigned __int8 *)v18 + 23);
    else
      v25 = (size_t)v18[1];
    v26 = *((char *)v17 + 23);
    if (v26 >= 0)
      v27 = v17;
    else
      v27 = *v17;
    if (v26 >= 0)
      v28 = *((unsigned __int8 *)v17 + 23);
    else
      v28 = (size_t)v17[1];
    if (v28 >= v25)
      v29 = v25;
    else
      v29 = v28;
    v30 = memcmp(v24, v27, v29);
    if (v30)
    {
      if (v30 < 0)
        goto LABEL_25;
    }
    else if (v25 <= v28)
    {
      goto LABEL_25;
    }
    v44 = *(_OWORD *)v18;
    v45 = v18[2];
    *(_OWORD *)v18 = *(_OWORD *)v17;
    v18[2] = v17[2];
    *((_BYTE *)v17 + 23) = 0;
    *(_BYTE *)v17 = 0;
    v21 = a1;
    if (v17 == (const void **)a1)
      goto LABEL_24;
    v31 = v19;
    while (1)
    {
      v32 = a1 + v31;
      v33 = (_OWORD *)(a1 + v31 + 24);
      v34 = SHIBYTE(v45) >= 0 ? &v44 : (__int128 *)v44;
      v35 = SHIBYTE(v45) >= 0 ? HIBYTE(v45) : *((_QWORD *)&v44 + 1);
      v36 = *(char *)(v32 + 47);
      v37 = v36 >= 0 ? (const void *)(a1 + v31 + 24) : *(const void **)(a1 + v31 + 24);
      v38 = v36 >= 0 ? *(unsigned __int8 *)(v32 + 47) : *(_QWORD *)(v32 + 32);
      v39 = v38 >= v35 ? v35 : v38;
      v40 = memcmp(v34, v37, v39);
      if (!v40)
        break;
      if (v40 < 0)
      {
        v21 = (uint64_t)v17;
        goto LABEL_23;
      }
LABEL_48:
      v17 -= 3;
      *(_OWORD *)(v32 + 48) = *v33;
      *(_QWORD *)(v32 + 64) = *(_QWORD *)(a1 + v31 + 40);
      *(_BYTE *)(v32 + 47) = 0;
      *(_BYTE *)v33 = 0;
      v31 -= 24;
      if (v31 == -48)
      {
        v21 = a1;
        goto LABEL_23;
      }
    }
    if (v35 > v38)
      goto LABEL_48;
    v21 = a1 + v31 + 48;
LABEL_23:
    v2 = v43;
LABEL_24:
    v22 = v44;
    *(_QWORD *)(v21 + 16) = v45;
    *(_OWORD *)v21 = v22;
    if (++v20 == 8)
      return v18 + 3 == v2;
LABEL_25:
    v17 = v18;
    v19 += 24;
    v18 += 3;
    if (v18 != v2)
      continue;
    return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  int v8;
  const void *v9;
  size_t v10;
  int v11;
  const void *v12;
  const void *v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  __n128 result;
  const void *v19;
  const void *v20;
  int v21;
  const void *v22;
  size_t v23;
  int v24;
  const void *v25;
  uint64_t v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const void *v34;
  size_t v35;
  int v36;
  const void *v37;
  uint64_t v38;
  const void *v39;
  size_t v40;
  size_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, (const void **)a3);
  v8 = *((char *)a4 + 23);
  if (v8 >= 0)
    v9 = a4;
  else
    v9 = *a4;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = (size_t)a4[1];
  v11 = *(char *)(a3 + 23);
  v12 = *(const void **)a3;
  v13 = *(const void **)(a3 + 8);
  if (v11 >= 0)
    v14 = (const void *)a3;
  else
    v14 = *(const void **)a3;
  if (v11 >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  if (v15 >= v10)
    v16 = v10;
  else
    v16 = v15;
  v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if (v17 < 0)
      return result;
  }
  else if (v10 <= v15)
  {
    return result;
  }
  v19 = *(const void **)(a3 + 16);
  v20 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v20;
  *a4 = v12;
  a4[1] = v13;
  a4[2] = v19;
  v21 = *(char *)(a3 + 23);
  if (v21 >= 0)
    v22 = (const void *)a3;
  else
    v22 = *(const void **)a3;
  if (v21 >= 0)
    v23 = *(unsigned __int8 *)(a3 + 23);
  else
    v23 = *(_QWORD *)(a3 + 8);
  v24 = *(char *)(a2 + 23);
  v25 = *(const void **)a2;
  v26 = *(_QWORD *)(a2 + 8);
  if (v24 >= 0)
    v27 = (const void *)a2;
  else
    v27 = *(const void **)a2;
  if (v24 >= 0)
    v28 = *(unsigned __int8 *)(a2 + 23);
  else
    v28 = *(_QWORD *)(a2 + 8);
  if (v28 >= v23)
    v29 = v23;
  else
    v29 = v28;
  v30 = memcmp(v22, v27, v29);
  if (v30)
  {
    if (v30 < 0)
      return result;
  }
  else if (v23 <= v28)
  {
    return result;
  }
  v31 = *(_QWORD *)(a2 + 16);
  v32 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v32;
  *(_QWORD *)a3 = v25;
  *(_QWORD *)(a3 + 8) = v26;
  *(_QWORD *)(a3 + 16) = v31;
  v33 = *(char *)(a2 + 23);
  if (v33 >= 0)
    v34 = (const void *)a2;
  else
    v34 = *(const void **)a2;
  if (v33 >= 0)
    v35 = *(unsigned __int8 *)(a2 + 23);
  else
    v35 = *(_QWORD *)(a2 + 8);
  v36 = *(char *)(a1 + 23);
  v37 = *(const void **)a1;
  v38 = *(_QWORD *)(a1 + 8);
  if (v36 >= 0)
    v39 = (const void *)a1;
  else
    v39 = *(const void **)a1;
  if (v36 >= 0)
    v40 = *(unsigned __int8 *)(a1 + 23);
  else
    v40 = *(_QWORD *)(a1 + 8);
  if (v40 >= v35)
    v41 = v35;
  else
    v41 = v40;
  v42 = memcmp(v34, v39, v41);
  if (!v42)
  {
    if (v35 <= v40)
      return result;
LABEL_58:
    v43 = *(_QWORD *)(a1 + 16);
    v44 = *(_QWORD *)(a2 + 16);
    result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v44;
    *(_QWORD *)a2 = v37;
    *(_QWORD *)(a2 + 8) = v38;
    *(_QWORD *)(a2 + 16) = v43;
    return result;
  }
  if ((v42 & 0x80000000) == 0)
    goto LABEL_58;
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  const void *v14;
  const void *v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  __n128 result;
  const void *v21;
  const void *v22;
  int v23;
  const void *v24;
  size_t v25;
  int v26;
  const void *v27;
  uint64_t v28;
  const void *v29;
  size_t v30;
  size_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  const void *v36;
  size_t v37;
  int v38;
  const void *v39;
  uint64_t v40;
  const void *v41;
  size_t v42;
  size_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  const void *v48;
  size_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  const void *v53;
  size_t v54;
  size_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, a3, (const void **)a4);
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *(char *)(a4 + 23);
  v14 = *(const void **)a4;
  v15 = *(const void **)(a4 + 8);
  if (v13 >= 0)
    v16 = (const void *)a4;
  else
    v16 = *(const void **)a4;
  if (v13 >= 0)
    v17 = *(unsigned __int8 *)(a4 + 23);
  else
    v17 = *(_QWORD *)(a4 + 8);
  if (v17 >= v12)
    v18 = v12;
  else
    v18 = v17;
  v19 = memcmp(v11, v16, v18);
  if (v19)
  {
    if (v19 < 0)
      return result;
  }
  else if (v12 <= v17)
  {
    return result;
  }
  v21 = *(const void **)(a4 + 16);
  v22 = a5[2];
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_QWORD *)(a4 + 16) = v22;
  *a5 = v14;
  a5[1] = v15;
  a5[2] = v21;
  v23 = *(char *)(a4 + 23);
  if (v23 >= 0)
    v24 = (const void *)a4;
  else
    v24 = *(const void **)a4;
  if (v23 >= 0)
    v25 = *(unsigned __int8 *)(a4 + 23);
  else
    v25 = *(_QWORD *)(a4 + 8);
  v26 = *(char *)(a3 + 23);
  v27 = *(const void **)a3;
  v28 = *(_QWORD *)(a3 + 8);
  if (v26 >= 0)
    v29 = (const void *)a3;
  else
    v29 = *(const void **)a3;
  if (v26 >= 0)
    v30 = *(unsigned __int8 *)(a3 + 23);
  else
    v30 = *(_QWORD *)(a3 + 8);
  if (v30 >= v25)
    v31 = v25;
  else
    v31 = v30;
  v32 = memcmp(v24, v29, v31);
  if (v32)
  {
    if (v32 < 0)
      return result;
  }
  else if (v25 <= v30)
  {
    return result;
  }
  v33 = *(_QWORD *)(a3 + 16);
  v34 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v34;
  *(_QWORD *)a4 = v27;
  *(_QWORD *)(a4 + 8) = v28;
  *(_QWORD *)(a4 + 16) = v33;
  v35 = *(char *)(a3 + 23);
  if (v35 >= 0)
    v36 = (const void *)a3;
  else
    v36 = *(const void **)a3;
  if (v35 >= 0)
    v37 = *(unsigned __int8 *)(a3 + 23);
  else
    v37 = *(_QWORD *)(a3 + 8);
  v38 = *(char *)(a2 + 23);
  v39 = *(const void **)a2;
  v40 = *(_QWORD *)(a2 + 8);
  if (v38 >= 0)
    v41 = (const void *)a2;
  else
    v41 = *(const void **)a2;
  if (v38 >= 0)
    v42 = *(unsigned __int8 *)(a2 + 23);
  else
    v42 = *(_QWORD *)(a2 + 8);
  if (v42 >= v37)
    v43 = v37;
  else
    v43 = v42;
  v44 = memcmp(v36, v41, v43);
  if (v44)
  {
    if (v44 < 0)
      return result;
  }
  else if (v37 <= v42)
  {
    return result;
  }
  v45 = *(_QWORD *)(a2 + 16);
  v46 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v46;
  *(_QWORD *)a3 = v39;
  *(_QWORD *)(a3 + 8) = v40;
  *(_QWORD *)(a3 + 16) = v45;
  v47 = *(char *)(a2 + 23);
  if (v47 >= 0)
    v48 = (const void *)a2;
  else
    v48 = *(const void **)a2;
  if (v47 >= 0)
    v49 = *(unsigned __int8 *)(a2 + 23);
  else
    v49 = *(_QWORD *)(a2 + 8);
  v50 = *(char *)(a1 + 23);
  v51 = *(const void **)a1;
  v52 = *(_QWORD *)(a1 + 8);
  if (v50 >= 0)
    v53 = (const void *)a1;
  else
    v53 = *(const void **)a1;
  if (v50 >= 0)
    v54 = *(unsigned __int8 *)(a1 + 23);
  else
    v54 = *(_QWORD *)(a1 + 8);
  if (v54 >= v49)
    v55 = v49;
  else
    v55 = v54;
  v56 = memcmp(v48, v53, v55);
  if (v56)
  {
    if (v56 < 0)
      return result;
  }
  else if (v49 <= v54)
  {
    return result;
  }
  v57 = *(_QWORD *)(a1 + 16);
  v58 = *(_QWORD *)(a2 + 16);
  result = *(__n128 *)a2;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v58;
  *(_QWORD *)a2 = v51;
  *(_QWORD *)(a2 + 8) = v52;
  *(_QWORD *)(a2 + 16) = v57;
  return result;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  void **v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1, char *a2, int a3)
{
  const std::locale *v6;
  size_t v7;

  v6 = (const std::locale *)MEMORY[0x24BD29B20]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x24BEDB350]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x24BEDB4B0]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(a1, a2, &a2[v7]) != (std::basic_regex<char> *)&a2[v7])
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_24B88EC98(_Unwind_Exception *a1)
{
  std::locale *v1;
  uint64_t v2;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_24B88ECB4(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char *v15;
  std::basic_regex<char> *v16;
  std::__owns_one_state<char> *v17;
  int v18;
  std::basic_regex<char> *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  std::basic_regex<char> *v30;
  char *v31;
  std::__owns_one_state<char> *v32;
  int v33;
  std::basic_regex<char> *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = operator new(8uLL);
  *v6 = &unk_251CB9128;
  v7 = operator new(0x10uLL);
  v7[1] = v6;
  v8 = operator new(0x20uLL);
  *v8 = &unk_251CB9180;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v12 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 56) = v12;
      v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if (v13 <= 0x3F)
        goto LABEL_6;
LABEL_11:
      if (v13 != 64)
      {
        if (v13 == 128)
          return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(a1, a2, a3);
        if (v13 == 256)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
LABEL_38:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    }
  }
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v13 > 0x3F)
    goto LABEL_11;
LABEL_6:
  if (v13)
  {
    if (v13 == 16)
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, a3);
    if (v13 != 32)
      goto LABEL_38;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  }
  v15 = a2;
  while (1)
  {
    v16 = (std::basic_regex<char> *)v15;
    v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v15, a3);
    if (v15 == (char *)v16)
      break;
LABEL_17:
    if (v15 == (char *)v16)
      goto LABEL_23;
  }
  v17 = *(std::__owns_one_state<char> **)(a1 + 56);
  v18 = *(_DWORD *)(a1 + 28);
  v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v16, (std::basic_regex<char> *)a3);
  if (v19 != v16)
  {
    v15 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v19, (std::basic_regex<char> *)a3, v17, (v18 + 1), (*(_DWORD *)(a1 + 28) + 1));
    goto LABEL_17;
  }
LABEL_23:
  if (v16 == (std::basic_regex<char> *)a2)
  {
    v20 = operator new(0x10uLL);
    v21 = *(_QWORD *)(a1 + 56);
    v22 = *(_QWORD *)(v21 + 8);
    v20[1] = v22;
    *(_QWORD *)(v21 + 8) = v20;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v16 == (std::basic_regex<char> *)a3)
    return (std::basic_regex<char> *)a3;
  while (2)
  {
    if (LOBYTE(v16->__traits_.__loc_.__locale_) != 124)
      return v16;
    v29 = *(_QWORD *)(a1 + 56);
    v30 = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
    v31 = (char *)&v16->__traits_.__loc_.__locale_ + 1;
    while (2)
    {
      v16 = (std::basic_regex<char> *)v31;
      v31 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v31, a3);
      if (v31 != (char *)v16)
      {
LABEL_32:
        if (v31 == (char *)v16)
          goto LABEL_27;
        continue;
      }
      break;
    }
    v32 = *(std::__owns_one_state<char> **)(a1 + 56);
    v33 = *(_DWORD *)(a1 + 28);
    v34 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v16, (std::basic_regex<char> *)a3);
    if (v34 != v16)
    {
      v31 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v34, (std::basic_regex<char> *)a3, v32, (v33 + 1), (*(_DWORD *)(a1 + 28) + 1));
      goto LABEL_32;
    }
LABEL_27:
    if (v16 == v30)
    {
      v35 = operator new(0x10uLL);
      v36 = *(_QWORD *)(a1 + 56);
      v37 = *(_QWORD *)(v36 + 8);
      v35[1] = v37;
      *(_QWORD *)(v36 + 8) = v35;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    v23 = operator new(0x18uLL);
    v24 = *(_QWORD *)(v29 + 8);
    v23[1] = *(_QWORD *)(v12 + 8);
    v23[2] = v24;
    *v23 = &unk_251CB9740;
    *(_QWORD *)(v12 + 8) = v23;
    *(_QWORD *)(v29 + 8) = 0;
    v25 = operator new(0x10uLL);
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v25[1] = v26;
    *(_QWORD *)(v29 + 8) = v25;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v27 = operator new(0x10uLL);
    v28 = *(_QWORD *)(v29 + 8);
    *v27 = &unk_251CB9788;
    v27[1] = v28;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v27;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v29 + 8);
    if (v16 != (std::basic_regex<char> *)a3)
      continue;
    return (std::basic_regex<char> *)a3;
  }
}

void sub_24B88F0C8(_Unwind_Exception *a1)
{
  void *v1;
  void (__cdecl ***v2)(std::__owns_one_state<char> *__hidden);

  operator delete(v1);
  operator delete(v2);
  (*(void (**)(void *))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_24B88F104(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  std::basic_regex<char> *v8;
  std::__owns_one_state<char> *v9;
  unsigned int marked_count;
  std::basic_regex<char> *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  std::__node<char> *v15;
  std::__node<char> *v16;
  std::__node<char> *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;
  std::__node<char> *v20;
  std::__owns_one_state<char> *v21;
  std::basic_regex<char> *v22;
  char *v23;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  std::basic_regex<char> *v26;
  std::__node<char> *v27;
  std::__owns_one_state<char> *v28;
  std::__node<char> *v29;

  end = a1->__end_;
  v7 = a2;
  while (1)
  {
    v8 = (std::basic_regex<char> *)v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v7, a3);
    if (v7 == (char *)v8)
      break;
LABEL_2:
    if (v7 == (char *)v8)
      goto LABEL_6;
  }
  v9 = a1->__end_;
  marked_count = a1->__marked_count_;
  v11 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
  if (v11 != v8)
  {
    v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == (std::basic_regex<char> *)a2)
  {
    v12 = (std::__node<char> *)operator new(0x10uLL);
    v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v8 == (std::basic_regex<char> *)a3)
    return a3;
  while (2)
  {
    if (LOBYTE(v8->__traits_.__loc_.__locale_) != 124)
      return (char *)v8;
    v21 = a1->__end_;
    v22 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v23 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (2)
    {
      v8 = (std::basic_regex<char> *)v23;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v23, a3);
      if (v23 != (char *)v8)
      {
LABEL_14:
        if (v23 == (char *)v8)
          goto LABEL_17;
        continue;
      }
      break;
    }
    v24 = a1->__end_;
    v25 = a1->__marked_count_;
    v26 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
    if (v26 != v8)
    {
      v23 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v26, (std::basic_regex<char> *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
      goto LABEL_14;
    }
LABEL_17:
    if (v8 == v22)
    {
      v27 = (std::__node<char> *)operator new(0x10uLL);
      v28 = a1->__end_;
      v29 = v28->__first_;
      v27[1].__vftable = (std::__node<char>_vtbl *)v29;
      v28->__first_ = v27;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    v15 = (std::__node<char> *)operator new(0x18uLL);
    v16 = v21->__first_;
    v15[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
    v15[2].__vftable = (std::__node<char>_vtbl *)v16;
    v15->__vftable = (std::__node<char>_vtbl *)&unk_251CB9740;
    end->__first_ = v15;
    v21->__first_ = 0;
    v17 = (std::__node<char> *)operator new(0x10uLL);
    v18 = a1->__end_->__first_;
    v17[1].__vftable = (std::__node<char>_vtbl *)v18;
    v21->__first_ = v17;
    a1->__end_->__first_ = 0;
    v19 = (std::__node<char> *)operator new(0x10uLL);
    v20 = v21->__first_;
    v19->__vftable = (std::__node<char>_vtbl *)&unk_251CB9788;
    v19[1].__vftable = (std::__node<char>_vtbl *)v20;
    a1->__end_->__first_ = v19;
    a1->__end_ = (std::__owns_one_state<char> *)v21->__first_;
    if (v8 != (std::basic_regex<char> *)a3)
      continue;
    return a3;
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  std::basic_regex<char> *v3;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::__owns_one_state<char> *v11;
  int v12;
  char *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3)
    return a2;
  if (*a2 == 94)
  {
    v6 = operator new(0x18uLL);
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *v6 = &unk_251CB9278;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      v10 = v3;
      v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, (uint64_t)v10, a3);
      if (v13 != (char *)v10)
      {
        v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v3 != v10)
          continue;
      }
      if ((char *)&v10->__traits_.__loc_.__locale_ + 1 != a3 || LOBYTE(v10->__traits_.__loc_.__locale_) != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v14 = operator new(0x18uLL);
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *v14 = &unk_251CB92C0;
      v14[1] = v17;
      *((_BYTE *)v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::basic_regex<char> *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_13;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v7, v3);
  }
  while (v7 != v8);
  if (v8 == a2)
LABEL_13:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 != v3)
  {
    while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
    {
      v9 = *(_QWORD *)(a1 + 56);
      v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), v3);
      if (v11 == (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1))
        goto LABEL_13;
      do
      {
        v8 = v11;
        v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v11, v3);
      }
      while (v11 != v8);
      if (v8 == v10)
        goto LABEL_13;
      v12 = operator new(0x18uLL);
      v13 = *(_QWORD *)(v9 + 8);
      v12[1] = *(_QWORD *)(v6 + 8);
      v12[2] = v13;
      *v12 = &unk_251CB9740;
      *(_QWORD *)(v6 + 8) = v12;
      *(_QWORD *)(v9 + 8) = 0;
      v14 = operator new(0x10uLL);
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v14[1] = v15;
      *(_QWORD *)(v9 + 8) = v14;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
      v16 = operator new(0x10uLL);
      v17 = *(_QWORD *)(v9 + 8);
      *v16 = &unk_251CB9788;
      v16[1] = v17;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
      if (v8 == v3)
        return v3;
    }
    return v8;
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v10 = operator new(0x10uLL);
    v11 = *(_QWORD *)(v6 + 8);
    v10[1] = v11;
    *(_QWORD *)(v6 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (char *)memchr(v9, 10, a3 - v9);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v9)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v9, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_251CB9740;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_251CB9788;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v9 = v22;
    else
      v9 = v22 + 1;
  }
  while (v9 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::basic_regex<char> *v21;
  std::basic_regex<char> *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v10 = operator new(0x10uLL);
    v11 = *(_QWORD *)(v6 + 8);
    v10[1] = v11;
    *(_QWORD *)(v6 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v9 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v9 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (std::basic_regex<char> *)memchr(v9, 10, (char *)a3 - (char *)v9);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v9)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v9, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_251CB9740;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_251CB9788;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v9 = v22;
    else
      v9 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
  }
  while (v9 != a3);
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *v7;
  BOOL v8;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int v20;
  __int128 v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  unsigned int marked_count;
  std::basic_regex<char> v27;

  if (a2 == a3)
    return a2;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v15 = a2[1];
        if (v15 == 66)
        {
          v16 = (char *)operator new(0x30uLL);
          v24 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_251CB9308;
          *((_QWORD *)v16 + 1) = v24;
          std::locale::locale((std::locale *)v16 + 2, (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          v16[40] = 1;
        }
        else
        {
          if (v15 != 98)
            return a2;
          v16 = (char *)operator new(0x30uLL);
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_251CB9308;
          *((_QWORD *)v16 + 1) = v17;
          std::locale::locale((std::locale *)v16 + 2, (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          v16[40] = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return a2 + 2;
      }
      return a2;
    }
    if (v6 != 94)
      return a2;
    v10 = operator new(0x18uLL);
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
LABEL_14:
    *v10 = v14 + 16;
    v10[1] = v13;
    *((_BYTE *)v10 + 16) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    v10 = operator new(0x18uLL);
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    goto LABEL_14;
  }
  v8 = v6 == 40;
  v7 = a2 + 1;
  v8 = !v8 || v7 == a3;
  if (v8)
    return a2;
  v8 = *v7 == 63;
  v18 = a2 + 2;
  if (!v8 || v18 == a3)
    return a2;
  v20 = *v18;
  if (v20 == 33)
  {
    *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v27.__loop_count_ = v25;
    *(_OWORD *)&v27.__start_.__cntrl_ = v25;
    *(_OWORD *)&v27.__traits_.__loc_.__locale_ = v25;
    *(_OWORD *)&v27.__traits_.__col_ = v25;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v27);
    v27.__flags_ = *(_DWORD *)(a1 + 24);
    v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v27, a2 + 3, a3);
    marked_count = v27.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v27, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v22 == a3 || *v22 != 41)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    goto LABEL_32;
  }
  if (v20 != 61)
    return a2;
  *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v27.__loop_count_ = v21;
  *(_OWORD *)&v27.__start_.__cntrl_ = v21;
  *(_OWORD *)&v27.__traits_.__loc_.__locale_ = v21;
  *(_OWORD *)&v27.__traits_.__col_ = v21;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v27);
  v27.__flags_ = *(_DWORD *)(a1 + 24);
  v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v27, a2 + 3, a3);
  v23 = v27.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v27, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v23;
  if (v22 == a3 || *v22 != 41)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_32:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v27.__traits_.__loc_);
  return v22 + 1;
}

void sub_24B88FCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_24B88FCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_24B88FCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_24B88FD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  int *p_open_count;
  char *v7;
  std::__node<char> *v8;
  std::__owns_one_state<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v12;
  unsigned int marked_count;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *v19;

  v3 = a2;
  if (a2 != a3)
  {
    switch(LOBYTE(a2->__traits_.__loc_.__locale_))
    {
      case '(':
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3)
          goto LABEL_26;
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
          && BYTE1(a2->__traits_.__loc_.__locale_) == 63
          && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, (char *)a3);
          if (v7 == (char *)a3)
            goto LABEL_26;
          v3 = (std::basic_regex<char> *)v7;
          if (*v7 != 41)
            goto LABEL_26;
        }
        else
        {
          if ((this->__flags_ & 2) != 0)
          {
            marked_count = this->__marked_count_;
          }
          else
          {
            v12 = (std::__node<char> *)operator new(0x18uLL);
            marked_count = this->__marked_count_ + 1;
            this->__marked_count_ = marked_count;
            end = this->__end_;
            first = end->__first_;
            v12->__vftable = (std::__node<char>_vtbl *)&unk_251CB95D8;
            v12[1].__vftable = (std::__node<char>_vtbl *)first;
            LODWORD(v12[2].__vftable) = marked_count;
            end->__first_ = v12;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, (char *)a3);
          if (v16 == (char *)a3 || (v3 = (std::basic_regex<char> *)v16, *v16 != 41))
LABEL_26:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          if ((this->__flags_ & 2) == 0)
          {
            v17 = (std::__node<char> *)operator new(0x18uLL);
            v18 = this->__end_;
            v19 = v18->__first_;
            v17->__vftable = (std::__node<char>_vtbl *)&unk_251CB9620;
            v17[1].__vftable = (std::__node<char>_vtbl *)v19;
            LODWORD(v17[2].__vftable) = marked_count;
            v18->__first_ = v17;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
        }
        --*p_open_count;
LABEL_23:
        v3 = (std::basic_regex<char> *)((char *)v3 + 1);
        break;
      case ')':
      case ',':
      case '-':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
      case '*':
      case '+':
      case '?':
        goto LABEL_25;
      case '.':
        v8 = (std::__node<char> *)operator new(0x10uLL);
        v9 = this->__end_;
        v10 = v9->__first_;
        v8->__vftable = (std::__node<char>_vtbl *)&unk_251CB9398;
        v8[1].__vftable = (std::__node<char>_vtbl *)v10;
        v9->__first_ = v8;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        goto LABEL_23;
      case '[':
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      case '\\':
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      default:
        if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123)
LABEL_25:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int v6;
  int locale_low;
  std::basic_regex<char> *v8;
  char *v9;
  size_t v10;
  char *v11;
  int v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  std::basic_regex<char> *v17;
  unsigned __int8 *v18;
  BOOL v20;
  std::basic_regex<char> *v21;
  BOOL v22;
  char *v23;
  size_t v24;
  std::basic_regex<char> *v25;
  int v26;
  int v27;
  std::basic_regex<char> *v28;
  int v29;
  std::basic_regex<char> *v30;
  _BYTE *v31;

  if (this == a3)
    return this;
  v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6)
        v20 = 1;
      else
        v20 = v8 == a3;
      if (!v20 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v10 = 0;
        goto LABEL_35;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v24 = 0;
      goto LABEL_44;
    }
    if (locale_low == 43)
    {
      v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v10 = 1;
LABEL_35:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v10, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v9;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v24 = 1;
      goto LABEL_44;
    }
    return this;
  }
  if (locale_low == 63)
  {
    v21 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6)
      v22 = 1;
    else
      v22 = v21 == a3;
    if (v22 || LOBYTE(v21->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v21;
    }
    else
    {
      v23 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v23;
    }
  }
  else
  {
    if (locale_low != 123)
      return this;
    v11 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_71;
    v12 = *v11;
    if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38)
      goto LABEL_71;
    v13 = v12 - 48;
    v14 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_19:
      v14 = (char *)a3;
    }
    else
    {
      while (1)
      {
        v15 = *v14;
        if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
          break;
        if (v13 >= 214748364)
          goto LABEL_71;
        v13 = v15 + 10 * v13 - 48;
        if (++v14 == (char *)a3)
          goto LABEL_19;
      }
    }
    if (v14 == v11)
      goto LABEL_71;
    if (v14 == (char *)a3)
      goto LABEL_72;
    v16 = *v14;
    if (v16 != 44)
    {
      if (v16 == 125)
      {
        v17 = (std::basic_regex<char> *)(v14 + 1);
        if (v6 || v17 == a3 || LOBYTE(v17->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 1);
          return v17;
        }
        else
        {
          v18 = (unsigned __int8 *)(v14 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v18;
        }
      }
LABEL_71:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    v25 = (std::basic_regex<char> *)(v14 + 1);
    if (v14 + 1 == (char *)a3)
      goto LABEL_71;
    v26 = LOBYTE(v25->__traits_.__loc_.__locale_);
    if (v26 == 125)
    {
      v8 = (std::basic_regex<char> *)(v14 + 2);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v10 = v13;
        v9 = v14 + 3;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        goto LABEL_35;
      }
      v24 = v13;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
LABEL_44:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v24, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v8;
    }
    if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38)
      goto LABEL_72;
    v27 = v26 - 48;
    v28 = (std::basic_regex<char> *)(v14 + 2);
    if (v28 == a3)
    {
LABEL_60:
      v28 = a3;
    }
    else
    {
      while (1)
      {
        v29 = LOBYTE(v28->__traits_.__loc_.__locale_);
        if ((v29 & 0xF8) != 0x30 && (v29 & 0xFE) != 0x38)
          break;
        if (v27 >= 214748364)
          goto LABEL_71;
        v27 = v29 + 10 * v27 - 48;
        v28 = (std::basic_regex<char> *)((char *)v28 + 1);
        if (v28 == a3)
          goto LABEL_60;
      }
    }
    if (v28 == v25 || v28 == a3 || LOBYTE(v28->__traits_.__loc_.__locale_) != 125)
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v27 < v13)
      goto LABEL_71;
    v30 = (std::basic_regex<char> *)((char *)&v28->__traits_.__loc_.__locale_ + 1);
    if (v6 || v30 == a3 || LOBYTE(v30->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 1);
      return v30;
    }
    else
    {
      v31 = (char *)&v28->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v31;
    }
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  int v7;
  unsigned int v8;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v7 = *v5;
  v8 = v7 - 48;
  if (v7 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v8);
    return a2 + 2;
  }
  if ((v7 - 49) > 8)
    goto LABEL_18;
  v10 = a2 + 2;
  if (a2 + 2 == a3)
  {
    v10 = a3;
  }
  else
  {
    while (1)
    {
      v11 = *v10;
      if ((v11 - 48) > 9)
        break;
      if (v8 >= 0x19999999)
        goto LABEL_23;
      ++v10;
      v8 = v11 + 10 * v8 - 48;
      if (v10 == a3)
      {
        v10 = a3;
        break;
      }
    }
    if (!v8)
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v8 > this->__marked_count_)
    goto LABEL_23;
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v8);
  if (v10 == v5)
  {
LABEL_18:
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>((uint64_t)this, a2 + 1, a3);
    if (v10 == v5)
    {
      v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, a3, 0);
      if (v12 == v5)
        return a2;
      else
        return v12;
    }
  }
  return v10;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  void *v8;
  char *v9;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if (v7 == a3)
      goto LABEL_20;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3)
      goto LABEL_20;
    do
    {
      v9 = v7;
      v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v7, a3, (uint64_t)v8);
    }
    while (v7 != v9);
    if (v9 == a3)
      goto LABEL_20;
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_24B89060C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *result;

  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  _DWORD *v5;
  _DWORD *v6;
  int v7;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v6;
        *(_QWORD *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_24B890860(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24B890874(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24B890888(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24B89089C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24B8908B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24B8908C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  unsigned __int8 *result;
  unsigned __int8 v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  int v11;
  unsigned __int8 v12;
  char v13;
  unsigned __int8 v14;
  char v15;
  std::basic_regex<char>::value_type v16;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3)
        goto LABEL_81;
      v8 = v4[1];
      if (((v8 & 0xDF) - 65) > 0x19u)
        goto LABEL_81;
      v9 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v9;
        *((_BYTE *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v9);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        v10 = v4[1];
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            v11 = *v4;
            if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
              goto LABEL_38;
          }
        }
      }
      goto LABEL_81;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        v6 = 11;
LABEL_65:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_38:
      if (v4 + 1 == a3)
        goto LABEL_81;
      v12 = v4[1];
      v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
        goto LABEL_43;
      v12 |= 0x20u;
      if ((v12 - 97) >= 6u)
        goto LABEL_81;
      v13 = -87;
LABEL_43:
      if (v4 + 2 == a3)
        goto LABEL_81;
      v14 = v4[2];
      v15 = -48;
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      {
        v14 |= 0x20u;
        if ((v14 - 97) >= 6u)
LABEL_81:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        v15 = -87;
      }
      v16 = v14 + 16 * (v12 + v13) + v15;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v16;
      *((_BYTE *)a4 + 1) = 0;
      result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0)
        goto LABEL_81;
      if (!a4)
        goto LABEL_65;
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v5;
      *((_BYTE *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v4;
  int v5;
  char *v6;
  int v9;
  int v10;
  char v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  uint64_t v23;
  int v24;
  int v25;
  std::basic_regex<char>::value_type *v26;
  char *v27;
  char *v28;
  int v29;
  void **v30;
  _BYTE *v31;
  char *v32;
  _BYTE *v34;
  void *v35[2];
  uint64_t v36;
  void *v37[2];
  uint64_t v38;
  void *__p[2];
  uint64_t v40;
  __int128 v41;
  int64_t v42;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (char *)a4;
  v9 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v40 = 0;
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_38:
    v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_33;
  }
  v10 = a2[1];
  if (v10 != 46)
  {
    if (v10 != 58)
    {
      if (v10 == 61)
      {
        v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
        v11 = 0;
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_64;
        goto LABEL_63;
      }
      v9 = 0;
      goto LABEL_38;
    }
    v12 = a2 + 2;
    if (a3 - (v4 + 2) >= 2)
    {
      v13 = 0;
      v14 = (unsigned __int8 *)v4;
      if (v4[2] == 58)
        goto LABEL_14;
      do
      {
        do
        {
          if (a3 - v4 - 4 == v13)
            goto LABEL_89;
          v14 = (unsigned __int8 *)&v4[++v13];
        }
        while (v4[v13 + 2] != 58);
LABEL_14:
        ;
      }
      while (v14[3] != 93);
      v15 = &v4[v13 + 2];
      if (v15 != a3)
      {
        v16 = std::regex_traits<char>::__lookup_classname<char const*>(a1, v12, v15, *(_DWORD *)(a1 + 24) & 1);
        if (!v16)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
        v11 = 0;
        *((_DWORD *)v6 + 40) |= v16;
        v6 = &v4[v13 + 4];
        if (SHIBYTE(v40) < 0)
          goto LABEL_63;
        goto LABEL_64;
      }
    }
LABEL_89:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  v17 = a2 + 2;
  if (a3 - (v4 + 2) < 2)
    goto LABEL_89;
  v18 = a3 - v4 - 4;
  v19 = v4 + 2;
  v20 = v17 + 1;
  if (*v17 == 46)
    goto LABEL_23;
  do
  {
    do
    {
      if (!v18)
        goto LABEL_89;
      --v18;
      v19 = v20;
      v21 = *v20++;
    }
    while (v21 != 46);
LABEL_23:
    ;
  }
  while (*v20 != 93);
  if (v19 == a3)
    goto LABEL_89;
  std::regex_traits<char>::__lookup_collatename<char *>(v17, a1, v19, (uint64_t)&v41);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v40 = v42;
  *(_OWORD *)__p = v41;
  v22 = (char *)HIBYTE(v42);
  v9 = SHIBYTE(v42);
  v23 = *((_QWORD *)&v41 + 1);
  if (v42 < 0)
    v22 = (char *)__p[1];
  if ((unint64_t)(v22 - 1) >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  v4 = v19 + 2;
  v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v42 >= 0)
    v23 = HIBYTE(v42);
  if (v23)
  {
    v28 = v4;
    if (v4 == a3)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_33:
  if ((v24 | 0x40) != 0x40)
  {
    LOBYTE(v25) = *v4;
LABEL_57:
    if (v9 < 0)
    {
      v34 = __p[0];
      __p[1] = (void *)1;
      *(_BYTE *)__p[0] = v25;
      v34[1] = 0;
      v28 = v4 + 1;
      if (v4 + 1 == a3)
        goto LABEL_41;
    }
    else
    {
      HIBYTE(v40) = 1;
      LOWORD(__p[0]) = v25;
      v28 = v4 + 1;
      if (v4 + 1 == a3)
        goto LABEL_41;
    }
    goto LABEL_40;
  }
  v25 = *v4;
  if (v25 != 92)
    goto LABEL_57;
  v26 = v4 + 1;
  if (v24)
    v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v26, a3, (uint64_t *)__p);
  else
    v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v26, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v6);
  v28 = v27;
  if (v27 == a3)
  {
LABEL_41:
    if (SHIBYTE(v40) < 0)
    {
      if (!__p[1])
        goto LABEL_62;
      if (__p[1] != (void *)1)
      {
        v30 = (void **)__p[0];
LABEL_61:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v6, *(char *)v30, *((char *)v30 + 1));
LABEL_62:
        v11 = 1;
        v4 = v28;
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_64;
        goto LABEL_63;
      }
      v30 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v40))
        goto LABEL_62;
      v30 = __p;
      if (HIBYTE(v40) != 1)
        goto LABEL_61;
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, *(char *)v30);
    goto LABEL_62;
  }
LABEL_40:
  v29 = *v28;
  if (v29 == 93)
    goto LABEL_41;
  v31 = v28 + 1;
  if (v28 + 1 == a3 || v29 != 45 || *v31 == 93)
    goto LABEL_41;
  v41 = 0uLL;
  v42 = 0;
  v4 = v28 + 2;
  if (v28 + 2 == a3 || *v31 != 91 || *v4 != 46)
  {
    if ((v24 | 0x40) == 0x40)
    {
      LODWORD(v31) = *v31;
      if ((_DWORD)v31 == 92)
      {
        if (v24)
          v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v28 + 2, a3, (uint64_t *)&v41);
        else
          v32 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v28 + 2, (unsigned __int8 *)a3, (uint64_t)&v41, (uint64_t)v6);
        goto LABEL_79;
      }
    }
    else
    {
      LOBYTE(v31) = *v31;
    }
    HIBYTE(v42) = 1;
    LOWORD(v41) = v31;
    goto LABEL_80;
  }
  v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v28 + 3, a3, (uint64_t)&v41);
LABEL_79:
  v4 = v32;
LABEL_80:
  *(_OWORD *)v37 = *(_OWORD *)__p;
  v38 = v40;
  __p[1] = 0;
  v40 = 0;
  __p[0] = 0;
  *(_OWORD *)v35 = v41;
  v36 = v42;
  v41 = 0uLL;
  v42 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v6, (char *)v37, (uint64_t)v35);
  if (SHIBYTE(v36) < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_83;
LABEL_87:
      operator delete((void *)v41);
      v11 = 1;
      if (SHIBYTE(v40) < 0)
        goto LABEL_63;
      goto LABEL_64;
    }
  }
  else if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    goto LABEL_82;
  }
  operator delete(v37[0]);
  if (SHIBYTE(v42) < 0)
    goto LABEL_87;
LABEL_83:
  v11 = 1;
  if (SHIBYTE(v40) < 0)
LABEL_63:
    operator delete(__p[0]);
LABEL_64:
  if ((v11 & 1) != 0)
    return v4;
  return v6;
}

void sub_24B8912A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  char *v9;
  void **v10;
  unint64_t v11;
  __int128 v12;
  void *v13;
  void **v14;
  void **v15;
  void *__p[3];
  void *v18[3];

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_39;
  v7 = 0;
  v8 = __src;
  if (*__src != 61)
    goto LABEL_5;
LABEL_4:
  if (v8[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v7)
    {
      v8 = &__src[++v7];
      if (__src[v7] == 61)
        goto LABEL_4;
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v7] == a3)
    goto LABEL_39;
  memset(v18, 170, sizeof(v18));
  std::regex_traits<char>::__lookup_collatename<char *>(__src, a1, &__src[v7], (uint64_t)v18);
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
    v9 = (char *)HIBYTE(v18[2]);
    if (HIBYTE(v18[2]))
    {
      memset(__p, 170, sizeof(__p));
      v10 = v18;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v9 = (char *)v18[1];
  if (!v18[1])
    goto LABEL_40;
  memset(__p, 170, sizeof(__p));
  v10 = (void **)v18[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v10, &v9[(_QWORD)v10], (_BYTE **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      v11 = *(_QWORD *)(a4 + 144);
      if (v11 >= *(_QWORD *)(a4 + 152))
      {
        *(_QWORD *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v12 = *(_OWORD *)__p;
          *(void **)(v11 + 16) = __p[2];
          *(_OWORD *)v11 = v12;
        }
        *(_QWORD *)(a4 + 144) = v11 + 24;
        *(_QWORD *)(a4 + 144) = v11 + 24;
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  v13 = (void *)HIBYTE(v18[2]);
  if (SHIBYTE(v18[2]) < 0)
    v13 = v18[1];
  if (v13 == (void *)2)
  {
    v15 = v18;
    if (SHIBYTE(v18[2]) < 0)
      v15 = (void **)v18[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v15, *((char *)v15 + 1));
  }
  else
  {
    if (v13 != (void *)1)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    v14 = v18;
    if (SHIBYTE(v18[2]) < 0)
      v14 = (void **)v18[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v14);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v18[2]) < 0)
      goto LABEL_38;
    return &__src[v7 + 2];
  }
LABEL_33:
  if (SHIBYTE(v18[2]) < 0)
LABEL_38:
    operator delete(v18[0]);
  return &__src[v7 + 2];
}

void sub_24B891568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  unint64_t v12;

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_15;
  v6 = 0;
  v7 = __src;
  if (*__src != 46)
    goto LABEL_5;
LABEL_4:
  if (v7[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v6)
    {
      v7 = &__src[++v6];
      if (__src[v6] == 46)
        goto LABEL_4;
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v6] == a3)
    goto LABEL_15;
  std::regex_traits<char>::__lookup_collatename<char *>(__src, a1, &__src[v6], (uint64_t)&v11);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v11;
  v8 = v12;
  *(_QWORD *)(a4 + 16) = v12;
  v9 = HIBYTE(v8);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a4 + 8);
  if (v9 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return &__src[v6 + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type *v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  std::basic_regex<char>::value_type v11;

  if (a2 == a3)
LABEL_70:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  switch(*a2)
  {
    case '"':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v5;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30)
        goto LABEL_70;
      v7 = *a2 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_42:
        if (a4)
          goto LABEL_43;
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_42;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        v8 = a3;
        if (a4)
          goto LABEL_43;
        goto LABEL_69;
      }
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      if (!a4)
        goto LABEL_69;
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v7;
      *((_BYTE *)a4 + 1) = 0;
      return v8;
  }
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, _BYTE *__src, _BYTE *a3, BOOL a4)
{
  size_t v4;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  const char *v14;
  uint64_t classname;
  void *__dst[3];

  v4 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v4);
    v9 = (void **)((char *)v9 + v4);
    goto LABEL_9;
  }
  v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v10 = v4 | 7;
  v11 = v10 + 1;
  v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v4;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)v9 = 0;
  v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  if (SHIBYTE(__dst[2]) < 0)
    v12 = (char *)__dst[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v13, &v12[(_QWORD)v13]);
  if (SHIBYTE(__dst[2]) >= 0)
    v14 = (const char *)__dst;
  else
    v14 = (const char *)__dst[0];
  classname = std::__get_classname(v14, a4);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  return classname;
}

void sub_24B891DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(uint64_t a1, uint64_t a2, char *a3)
{
  char *v6;
  char *v7;
  int v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::basic_regex<char> *v15;
  std::__owns_one_state<char> *v16;
  int v17;
  std::basic_regex<char> *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>((std::basic_regex<char> *)a1, (char *)a2, a3);
  v7 = v6;
  if (v6 != (char *)a2 || v6 == a3)
    return v7;
  if ((char *)(a2 + 1) == a3)
    return (char *)a2;
  if (*(_BYTE *)a2 != 92)
    return (char *)a2;
  v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v10 = operator new(0x18uLL);
      v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *v10 = &unk_251CB95D8;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3)
        goto LABEL_25;
      v15 = v9;
      v16 = *(std::__owns_one_state<char> **)(a1 + 56);
      v17 = *(_DWORD *)(a1 + 28);
      v18 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, v15, a3);
      if (v18 == v15)
        break;
      v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v18, (std::basic_regex<char> *)a3, v16, (v17 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v9 != v15);
    if ((char *)&v15->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v15->__traits_.__loc_.__locale_) != 92
      || BYTE1(v15->__traits_.__loc_.__locale_) != 41)
    {
LABEL_25:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    v7 = (char *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 41);
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v19 = operator new(0x18uLL);
      v20 = *(_QWORD *)(a1 + 56);
      v21 = *(_QWORD *)(v20 + 8);
      *v19 = &unk_251CB9620;
      v19[1] = v21;
      *((_DWORD *)v19 + 4) = v11;
      *(_QWORD *)(v20 + 8) = v19;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v7;
    }
    return v7;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8)
    return (char *)a2;
  if ((v8 - 48) > *(_DWORD *)(a1 + 28))
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  std::basic_regex<char> *v6;
  int locale_low;
  std::basic_regex<char> *v9;
  int v10;
  int v11;
  std::basic_regex<char> *v12;
  int v13;
  std::basic_regex<char> *v14;
  int v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;

  v6 = this;
  if (this == a3)
    return v6;
  locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)v6 + 1);
  }
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return v6;
  }
  v9 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v9 == a3)
    goto LABEL_43;
  v10 = LOBYTE(v9->__traits_.__loc_.__locale_);
  if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38)
    goto LABEL_43;
  v11 = v10 - 48;
  v12 = (std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_16:
    v12 = a3;
  }
  else
  {
    while (1)
    {
      v13 = LOBYTE(v12->__traits_.__loc_.__locale_);
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38)
        break;
      if (v11 >= 214748364)
        goto LABEL_43;
      v11 = v13 + 10 * v11 - 48;
      v12 = (std::basic_regex<char> *)((char *)v12 + 1);
      if (v12 == a3)
        goto LABEL_16;
    }
  }
  if (v12 == v9)
    goto LABEL_43;
  if (v12 == a3)
    goto LABEL_41;
  v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 1);
  v15 = LOBYTE(v12->__traits_.__loc_.__locale_);
  if (v15 != 44)
  {
    if (v14 != a3 && v15 == 92 && LOBYTE(v14->__traits_.__loc_.__locale_) == 125)
    {
      v19 = (unsigned __int8 *)&v12->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v11, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_41;
  }
  if (v14 == a3)
    goto LABEL_41;
  v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
  if ((v16 & 0xF8) == 0x30 || (v16 & 0xFE) == 0x38)
  {
    v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2) == a3)
      goto LABEL_41;
    v17 = v16 - 48;
    while (1)
    {
      v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
      if ((v16 & 0xF8) != 0x30 && (v16 & 0xFE) != 0x38)
        break;
      if (v17 >= 214748364)
        goto LABEL_43;
      v17 = v16 + 10 * v17 - 48;
      v14 = (std::basic_regex<char> *)((char *)v14 + 1);
      if (v14 == a3)
        goto LABEL_41;
    }
  }
  else
  {
    v17 = -1;
  }
  if (v14 == a3
    || (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1) == a3
    || v16 != 92
    || BYTE1(v14->__traits_.__loc_.__locale_) != 125)
  {
LABEL_41:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  v18 = (unsigned __int8 *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 125);
  if (v17 != -1)
  {
    if (v17 >= v11)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v17, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v18;
    }
LABEL_43:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v5;
  char *v6;
  int v9;
  std::__node<char> *v10;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  v6 = a2 + 1;
  v5 = *a2;
  if (a2 + 1 == a3 && v5 == 36)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
    return a2 + 1;
  }
  else
  {
    if (v6 != a3 && v5 == 92)
    {
      v9 = *v6;
      if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
        return a2 + 2;
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    }
    if (v5 != 46)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    v10 = (std::__node<char> *)operator new(0x10uLL);
    end = this->__end_;
    first = end->__first_;
    v10->__vftable = (std::__node<char>_vtbl *)&unk_251CB97D0;
    v10[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v10;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  std::basic_regex<char> *v8;
  int locale_low;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  std::basic_regex<char> *v22;
  std::basic_regex<char> *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2
    && (v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(a1, a2, a3), v8 == a2))
  {
    if (a2 != a3 && LOBYTE(a2->__traits_.__loc_.__locale_) == 46)
    {
      v14 = operator new(0x10uLL);
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(v15 + 8);
      *v14 = &unk_251CB97D0;
      v14[1] = v16;
      *(_QWORD *)(v15 + 8) = v14;
LABEL_14:
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, (char *)a2, (char *)a3);
    if (v8 != a2)
      goto LABEL_25;
  }
  else if (v8 != a2)
  {
    goto LABEL_25;
  }
  if (v8 == a3)
  {
LABEL_25:
    if (v8 != a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    return a2;
  }
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v10 = operator new(0x18uLL);
      v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v12 = *(_QWORD *)(a1 + 56);
      goto LABEL_13;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v19 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v18 = operator new(0x18uLL);
        v19 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v19;
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD *)(v20 + 8);
        *v18 = &unk_251CB95D8;
        v18[1] = v21;
        *((_DWORD *)v18 + 4) = v19;
        *(_QWORD *)(v20 + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v22 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v22 == a3 || (v23 = v22, LOBYTE(v22->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v24 = operator new(0x18uLL);
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *v24 = &unk_251CB9620;
        v24[1] = v26;
        *((_DWORD *)v24 + 4) = v19;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v8 = (std::basic_regex<char> *)((char *)&v23->__traits_.__loc_.__locale_ + 1);
      goto LABEL_25;
    case '^':
      v10 = operator new(0x18uLL);
      v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v12 = *(_QWORD *)(a1 + 56);
LABEL_13:
      v17 = *(_QWORD *)(v12 + 8);
      *v10 = v13 + 16;
      v10[1] = v17;
      *((_BYTE *)v10 + 16) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      goto LABEL_14;
  }
  return a2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_)
        return this;
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::basic_regex<char>::value_type *v4;
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type *result;
  _BOOL4 v7;
  uint64_t v8;

  v3 = this;
  if (this == a3)
    return (std::basic_regex<char>::value_type *)v3;
  v4 = (char *)&this->__traits_.__loc_.__locale_ + 1;
  if ((std::basic_regex<char> *)((char *)&v3->__traits_.__loc_.__locale_ + 1) == a3
    || LOBYTE(v3->__traits_.__loc_.__locale_) != 92)
  {
    return (std::basic_regex<char>::value_type *)v3;
  }
  v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      return (char *)v3 + 2;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, (std::basic_regex<char>::value_type *)a3, 0);
      }
      else
      {
        v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        v8 = 2;
        if (!v7)
          v8 = 0;
        result = (char *)v3 + v8;
      }
      break;
  }
  return result;
}

uint64_t *std::unique_ptr<std::__hash_node<std::string,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v23 + v26 + v27 + a3;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v27 + a3 + v24 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v25 + v28 + v36;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v49 + v47 + v58 + v48;
        v40 = __ROR8__(v49 + v47 + v58, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

uint64_t *BasebandTransport::getSupportedProtocols@<X0>(BasebandTransport *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *result;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  result = (uint64_t *)capabilities::radio::vendor(this);
  if ((_DWORD)result == 1)
  {
    v13 = operator new(0x18uLL);
    v13[4] = 0;
    *(_QWORD *)v13 = &v33;
    *((_QWORD *)v13 + 1) = &v33;
    v34 = (uint64_t *)v13;
    v14 = operator new(0x18uLL);
    v14[4] = 1;
    *(_QWORD *)v14 = v13;
    *((_QWORD *)v14 + 1) = &v33;
    *((_QWORD *)v13 + 1) = v14;
    v15 = operator new(0x18uLL);
    v15[4] = 2;
    *(_QWORD *)v15 = v14;
    *((_QWORD *)v15 + 1) = &v33;
    *((_QWORD *)v14 + 1) = v15;
    v16 = operator new(0x18uLL);
    v16[4] = 3;
    *(_QWORD *)v16 = v15;
    *((_QWORD *)v16 + 1) = &v33;
    *((_QWORD *)v15 + 1) = v16;
    v17 = operator new(0x18uLL);
    v17[4] = 4;
    *(_QWORD *)v17 = v16;
    *((_QWORD *)v17 + 1) = &v33;
    *((_QWORD *)v16 + 1) = v17;
    v18 = operator new(0x18uLL);
    v18[4] = 5;
    *(_QWORD *)v18 = v17;
    *((_QWORD *)v18 + 1) = &v33;
    *((_QWORD *)v17 + 1) = v18;
    v19 = operator new(0x18uLL);
    v19[4] = 10;
    *(_QWORD *)v19 = v18;
    *((_QWORD *)v19 + 1) = &v33;
    *((_QWORD *)v18 + 1) = v19;
    v20 = operator new(0x18uLL);
    v20[4] = 12;
    *(_QWORD *)v20 = v19;
    *((_QWORD *)v20 + 1) = &v33;
    *((_QWORD *)v19 + 1) = v20;
    v21 = operator new(0x18uLL);
    v21[4] = 14;
    *(_QWORD *)v21 = v20;
    *((_QWORD *)v21 + 1) = &v33;
    *((_QWORD *)v20 + 1) = v21;
    v33 = (uint64_t)v21;
    v35 = 9;
    result = (uint64_t *)capabilities::radio::mav20Plus((capabilities::radio *)v21);
    if ((_DWORD)result)
    {
      v22 = operator new(0x18uLL);
      v22[4] = 11;
      v23 = v33;
      *(_QWORD *)v22 = v33;
      *((_QWORD *)v22 + 1) = &v33;
      *(_QWORD *)(v23 + 8) = v22;
      v24 = v35;
      v33 = (uint64_t)v22;
      ++v35;
      result = (uint64_t *)operator new(0x18uLL);
      *((_DWORD *)result + 4) = 15;
      *result = (uint64_t)v22;
      result[1] = (uint64_t)&v33;
      *((_QWORD *)v22 + 1) = result;
      v33 = (uint64_t)result;
      v35 = v24 + 2;
    }
    if (a2[2])
    {
      v25 = *a2;
      result = (uint64_t *)a2[1];
      v26 = *result;
      *(_QWORD *)(v26 + 8) = *(_QWORD *)(*a2 + 8);
      **(_QWORD **)(v25 + 8) = v26;
      a2[2] = 0;
      if (result != a2)
      {
        do
        {
          v27 = result[1];
          operator delete(result);
          result = (uint64_t *)v27;
        }
        while ((uint64_t *)v27 != a2);
      }
    }
  }
  else
  {
    if ((_DWORD)result != 2)
      return result;
    v4 = operator new(0x18uLL);
    v4[4] = 6;
    *(_QWORD *)v4 = &v33;
    *((_QWORD *)v4 + 1) = &v33;
    v34 = (uint64_t *)v4;
    v5 = operator new(0x18uLL);
    v5[4] = 7;
    *(_QWORD *)v5 = v4;
    *((_QWORD *)v5 + 1) = &v33;
    *((_QWORD *)v4 + 1) = v5;
    v6 = operator new(0x18uLL);
    v6[4] = 8;
    *(_QWORD *)v6 = v5;
    *((_QWORD *)v6 + 1) = &v33;
    *((_QWORD *)v5 + 1) = v6;
    v7 = operator new(0x18uLL);
    v7[4] = 9;
    *(_QWORD *)v7 = v6;
    *((_QWORD *)v7 + 1) = &v33;
    *((_QWORD *)v6 + 1) = v7;
    v8 = operator new(0x18uLL);
    v8[4] = 10;
    *(_QWORD *)v8 = v7;
    *((_QWORD *)v8 + 1) = &v33;
    *((_QWORD *)v7 + 1) = v8;
    v33 = (uint64_t)v8;
    v35 = 5;
    result = (uint64_t *)capabilities::abs::supportsETSProtocol((capabilities::abs *)v8);
    if ((_DWORD)result)
    {
      result = (uint64_t *)operator new(0x18uLL);
      *((_DWORD *)result + 4) = 13;
      v9 = v33;
      *result = v33;
      result[1] = (uint64_t)&v33;
      *(_QWORD *)(v9 + 8) = result;
      v33 = (uint64_t)result;
      ++v35;
    }
    if (a2[2])
    {
      v10 = *a2;
      result = (uint64_t *)a2[1];
      v11 = *result;
      *(_QWORD *)(v11 + 8) = *(_QWORD *)(*a2 + 8);
      **(_QWORD **)(v10 + 8) = v11;
      a2[2] = 0;
      if (result != a2)
      {
        do
        {
          v12 = result[1];
          operator delete(result);
          result = (uint64_t *)v12;
        }
        while ((uint64_t *)v12 != a2);
      }
    }
  }
  v28 = v35;
  if (v35)
  {
    v30 = v33;
    v29 = v34;
    v31 = *v34;
    *(_QWORD *)(v31 + 8) = *(_QWORD *)(v33 + 8);
    **(_QWORD **)(v30 + 8) = v31;
    v32 = *a2;
    *(_QWORD *)(v32 + 8) = v29;
    *v29 = v32;
    *a2 = v30;
    *(_QWORD *)(v30 + 8) = a2;
    a2[2] += v28;
  }
  return result;
}

void sub_24B892F58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  va_list va;

  va_start(va, a2);
  std::list<BasebandTransport::Protocol>::~list((uint64_t *)va);
  std::list<BasebandTransport::Protocol>::~list(v2);
  _Unwind_Resume(a1);
}

void sub_24B892F88(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::list<BasebandTransport::Protocol>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_24B892FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v16;

  do
  {
    v16 = (_QWORD *)v13[1];
    operator delete(v13);
    v13 = v16;
  }
  while (v16 != v14);
  std::list<BasebandTransport::Protocol>::~list(v12);
  _Unwind_Resume(a1);
}

uint64_t *std::list<BasebandTransport::Protocol>::~list(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void BasebandTransport::getSupportedProtocolsAsStringLowerCase(BasebandTransport *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t i;
  int v4;
  char v5;
  char v6;
  char v7;
  char v8;
  __darwin_ct_rune_t v9;
  char v10;
  __darwin_ct_rune_t v11;
  _QWORD *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  __darwin_ct_rune_t v19[6];
  uint64_t v20[3];

  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  memset(v20, 170, sizeof(v20));
  BasebandTransport::getSupportedProtocols(this, v20);
  for (i = v20[1]; (uint64_t *)i != v20; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_DWORD *)(i + 16);
    memset(v19, 170, sizeof(v19));
    switch(v4)
    {
      case 0:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4997712;
        goto LABEL_30;
      case 1:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4997715;
        goto LABEL_30;
      case 2:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1195460932;
        goto LABEL_26;
      case 3:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1397114194;
        goto LABEL_26;
      case 4:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "QMUX1");
        v7 = 1;
        break;
      case 5:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "QMUX2");
        v7 = 1;
        break;
      case 6:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5066578;
        goto LABEL_30;
      case 7:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1414483778;
        goto LABEL_26;
      case 8:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4805185;
        goto LABEL_30;
      case 9:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5526611;
        goto LABEL_30;
      case 10:
        v10 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 2;
        strcpy((char *)v19, "AT");
        v5 = 1;
        break;
      case 11:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1280328769;
        goto LABEL_26;
      case 12:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 8;
        strcpy((char *)v19, "MEDIACTL");
        break;
      case 13:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5461061;
        goto LABEL_30;
      case 14:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        strcpy((char *)v19, "GNSS");
        v6 = 1;
        break;
      case 15:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1397965905;
        goto LABEL_26;
      case 16:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "RCTTH");
        v7 = 1;
        break;
      case 17:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5260097;
        goto LABEL_30;
      case 18:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1297040214;
        goto LABEL_26;
      case 19:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1129335117;
LABEL_26:
        v19[0] = v11;
        v6 = 1;
        LOBYTE(v19[1]) = 0;
        break;
      case 20:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4999236;
        goto LABEL_30;
      case 21:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5789005;
        goto LABEL_30;
      case 22:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4407622;
LABEL_30:
        v19[0] = v9;
        v10 = 1;
        break;
      default:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v7 = 0;
        HIBYTE(v19[5]) = 7;
        strcpy((char *)v19, "Unknown");
        v8 = 1;
        break;
    }
    LOBYTE(v19[0]) = __tolower(SLOBYTE(v19[0]));
    BYTE1(v19[0]) = __tolower(SBYTE1(v19[0]));
    if ((v5 & 1) == 0)
    {
      BYTE2(v19[0]) = __tolower(SBYTE2(v19[0]));
      if ((v10 & 1) == 0)
      {
        HIBYTE(v19[0]) = __tolower(SHIBYTE(v19[0]));
        if ((v6 & 1) == 0)
        {
          LOBYTE(v19[1]) = __tolower(SLOBYTE(v19[1]));
          if ((v7 & 1) == 0)
          {
            BYTE1(v19[1]) = __tolower(SBYTE1(v19[1]));
            BYTE2(v19[1]) = __tolower(SBYTE2(v19[1]));
            if ((v8 & 1) == 0)
              HIBYTE(v19[1]) = __tolower(SHIBYTE(v19[1]));
          }
        }
      }
    }
    v12 = operator new(0x28uLL);
    v13 = (std::string *)(v12 + 2);
    *v12 = 0;
    v12[1] = 0;
    if (SHIBYTE(v19[5]) < 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v19, *(std::string::size_type *)&v19[2]);
    }
    else
    {
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)v19;
      v12[4] = *(_QWORD *)&v19[4];
    }
    v14 = *a2;
    *v12 = *a2;
    v12[1] = a2;
    *(_QWORD *)(v14 + 8) = v12;
    *a2 = (uint64_t)v12;
    ++a2[2];
    if (SHIBYTE(v19[5]) < 0)
      operator delete(*(void **)v19);
  }
  if (v20[2])
  {
    v16 = v20[0];
    v15 = (uint64_t *)v20[1];
    v17 = *(_QWORD *)v20[1];
    *(_QWORD *)(v17 + 8) = *(_QWORD *)(v20[0] + 8);
    **(_QWORD **)(v16 + 8) = v17;
    v20[2] = 0;
    if (v15 != v20)
    {
      do
      {
        v18 = (uint64_t *)v15[1];
        operator delete(v15);
        v15 = v18;
      }
      while (v18 != v20);
    }
  }
}

void sub_24B893614(_Unwind_Exception *a1)
{
  char *v1;

  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_24B893628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  char *v15;
  void *v16;
  void *v17;

  v17 = v16;
  operator delete(v17);
  if (a14 < 0)
    operator delete(__p);
  std::list<BasebandTransport::Protocol>::~list(&a15);
  std::list<std::string>::~list(v15);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::asStringLowerCase@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;

  memset(a2, 170, 24);
  result = BasebandTransport::asString(a1, (char *)a2);
  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = (char)v4;
  v6 = (char *)a2 + v4;
  if (v5 >= 0)
    v7 = v6;
  else
    v7 = (_BYTE *)(*a2 + a2[1]);
  if (v5 >= 0)
    v8 = a2;
  else
    v8 = (_BYTE *)*a2;
  for (; v8 != v7; ++v8)
  {
    result = __tolower((char)*v8);
    *v8 = result;
  }
  return result;
}

void sub_24B8936E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *std::list<std::string>::~list(char *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v6;

  if (*((_QWORD *)a1 + 2))
  {
    v2 = *(_QWORD *)a1;
    v3 = (char *)*((_QWORD *)a1 + 1);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*(_QWORD *)a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v3 + 1);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void BasebandTransport::getSupportedProtocolsAsString(BasebandTransport *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18[3];

  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  memset(v18, 170, sizeof(v18));
  BasebandTransport::getSupportedProtocols(this, v18);
  v3 = (uint64_t *)v18[1];
  if ((uint64_t *)v18[1] != v18)
  {
    v4 = a2[2];
    v5 = v4 + 1;
    v6 = (_QWORD *)*a2;
    v7 = v18[1];
    do
    {
      v8 = 8;
      v9 = 0x4C5443414944454DLL;
      switch(*(_DWORD *)(v7 + 16))
      {
        case 0:
          v9 = v4 & 0xFFFFFFFF00000000 | 0x4C4250;
          v8 = 3;
          break;
        case 1:
          v9 = (v4 & 0xFFFFFFFF00000000 | 0x4C4250) + 3;
          v8 = 3;
          break;
        case 2:
          v10 = 1195460932;
          goto LABEL_25;
        case 3:
          v10 = 1397114194;
          goto LABEL_25;
        case 4:
          v11 = 0x3158554D51;
          goto LABEL_21;
        case 5:
          v11 = 0x3258554D51;
          goto LABEL_21;
        case 6:
          v12 = 5066578;
          goto LABEL_29;
        case 7:
          v10 = 1414483778;
          goto LABEL_25;
        case 8:
          v12 = 4805185;
          goto LABEL_29;
        case 9:
          v12 = 5526611;
          goto LABEL_29;
        case 0xA:
          v13 = v4 & 0xFFFFFFFFFF000000 | 0x5441;
          v8 = 2;
          goto LABEL_30;
        case 0xB:
          v10 = 1280328769;
          goto LABEL_25;
        case 0xC:
          break;
        case 0xD:
          v12 = 5461061;
          goto LABEL_29;
        case 0xE:
          v9 = (v4 & 0xFFFFFF0000000000 | 0x53534451) + 2550;
          v8 = 4;
          break;
        case 0xF:
          v9 = v4 & 0xFFFFFF0000000000 | 0x53534451;
          v8 = 4;
          break;
        case 0x10:
          v11 = 0x4854544352;
LABEL_21:
          v13 = v4 & 0xFFFF000000000000 | v11 & 0xFFFFFFFFFFFFLL;
          v8 = 5;
          goto LABEL_30;
        case 0x11:
          v12 = 5260097;
          goto LABEL_29;
        case 0x12:
          v10 = 1297040214;
          goto LABEL_25;
        case 0x13:
          v10 = 1129335117;
LABEL_25:
          v13 = v4 & 0xFFFFFF0000000000 | v10 & 0xFFFFFFFFFFLL;
          v8 = 4;
          goto LABEL_30;
        case 0x14:
          v9 = (v4 & 0xFFFFFFFF00000000 | 0x4C4250) + 1524;
          v8 = 3;
          break;
        case 0x15:
          v12 = 5789005;
          goto LABEL_29;
        case 0x16:
          v12 = 4407622;
LABEL_29:
          v13 = v4 & 0xFFFFFFFF00000000 | v12;
          v8 = 3;
LABEL_30:
          v9 = v13;
          break;
        default:
          v8 = 7;
          v9 = 0x6E776F6E6B6E55;
          break;
      }
      v14 = operator new(0x28uLL);
      v14[2] = v9;
      v14[3] = 0;
      *((_BYTE *)v14 + 39) = v8;
      *v14 = v6;
      v14[1] = a2;
      v6[1] = v14;
      *a2 = v14;
      a2[2] = v5;
      v7 = *(_QWORD *)(v7 + 8);
      ++v5;
      v4 = v9;
      v6 = v14;
    }
    while ((uint64_t *)v7 != v18);
  }
  if (v18[2])
  {
    v15 = v18[0];
    v16 = *v3;
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(v18[0] + 8);
    **(_QWORD **)(v15 + 8) = v16;
    v18[2] = 0;
    if (v3 != v18)
    {
      do
      {
        v17 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v17;
      }
      while (v17 != v18);
    }
  }
}

void sub_24B893A38(_Unwind_Exception *a1)
{
  char *v1;

  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_24B893A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  char *v2;
  va_list va;

  va_start(va, a2);
  std::list<BasebandTransport::Protocol>::~list((uint64_t *)va);
  std::list<std::string>::~list(v2);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::asString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      a2[23] = 3;
      *(_DWORD *)a2 = 4997712;
      break;
    case 1:
      a2[23] = 3;
      *(_DWORD *)a2 = 4997715;
      break;
    case 2:
      a2[23] = 4;
      strcpy(a2, "DIAG");
      break;
    case 3:
      a2[23] = 4;
      strcpy(a2, "REFS");
      break;
    case 4:
      a2[23] = 5;
      strcpy(a2, "QMUX1");
      break;
    case 5:
      a2[23] = 5;
      strcpy(a2, "QMUX2");
      break;
    case 6:
      a2[23] = 3;
      *(_DWORD *)a2 = 5066578;
      break;
    case 7:
      a2[23] = 4;
      strcpy(a2, "BOOT");
      break;
    case 8:
      a2[23] = 3;
      *(_DWORD *)a2 = 4805185;
      break;
    case 9:
      a2[23] = 3;
      *(_DWORD *)a2 = 5526611;
      break;
    case 10:
      a2[23] = 2;
      strcpy(a2, "AT");
      break;
    case 11:
      a2[23] = 4;
      strcpy(a2, "ADPL");
      break;
    case 12:
      a2[23] = 8;
      strcpy(a2, "MEDIACTL");
      break;
    case 13:
      a2[23] = 3;
      *(_DWORD *)a2 = 5461061;
      break;
    case 14:
      a2[23] = 4;
      strcpy(a2, "GNSS");
      break;
    case 15:
      a2[23] = 4;
      strcpy(a2, "QDSS");
      break;
    case 16:
      a2[23] = 5;
      strcpy(a2, "RCTTH");
      break;
    case 17:
      a2[23] = 3;
      *(_DWORD *)a2 = 5260097;
      break;
    case 18:
      a2[23] = 4;
      strcpy(a2, "VCOM");
      break;
    case 19:
      a2[23] = 4;
      strcpy(a2, "MIPC");
      break;
    case 20:
      a2[23] = 3;
      *(_DWORD *)a2 = 4999236;
      break;
    case 21:
      a2[23] = 3;
      *(_DWORD *)a2 = 5789005;
      break;
    case 22:
      a2[23] = 3;
      *(_DWORD *)a2 = 4407622;
      break;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      break;
  }
  return result;
}

{
  switch((int)result)
  {
    case 0:
      a2[23] = 8;
      strcpy(a2, "NotReady");
      break;
    case 1:
      a2[23] = 5;
      strcpy(a2, "Ready");
      break;
    case 2:
      a2[23] = 5;
      strcpy(a2, "Error");
      break;
    case 3:
      a2[23] = 7;
      strcpy(a2, "Stalled");
      break;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      break;
  }
  return result;
}

uint64_t BasebandTransport::asProtocol(char *__s1)
{
  const char *v1;
  uint64_t result;

  v1 = __s1;
  if ((__s1[23] & 0x80000000) == 0)
  {
    result = strcmp(__s1, "PBL");
    if (!(_DWORD)result)
      return result;
    if (!strcmp(v1, "SBL"))
      return 1;
    if (strcasecmp(v1, "DIAG"))
    {
      if (strcasecmp(v1, "REFS"))
      {
        if (strcasecmp(v1, "QMUX1"))
        {
          if (strcasecmp(v1, "QMUX2"))
          {
            if (strcasecmp(v1, "ROM"))
            {
              if (strcasecmp(v1, "BOOT"))
              {
                if (strcasecmp(v1, "ARI"))
                {
                  if (strcasecmp(v1, "STT"))
                  {
                    if (strcasecmp(v1, "AT"))
                    {
                      if (strcasecmp(v1, "ADPL"))
                      {
                        if (strcasecmp(v1, "MEDIACTL"))
                        {
                          if (strcasecmp(v1, "ETS"))
                          {
                            if (strcasecmp(v1, "GNSS"))
                            {
                              if (strcasecmp(v1, "QDSS"))
                              {
                                if (strcasecmp(v1, "RCTTH"))
                                {
                                  if (strcasecmp(v1, "ACP"))
                                  {
                                    if (strcasecmp(v1, "VCOM"))
                                    {
                                      if (strcasecmp(v1, "MIPC"))
                                      {
                                        if (strcasecmp(v1, "DHL"))
                                        {
                                          if (strcasecmp(v1, "MUX"))
                                            goto LABEL_24;
                                          return 21;
                                        }
                                        return 20;
                                      }
                                      return 19;
                                    }
                                    return 18;
                                  }
                                  return 17;
                                }
                                return 16;
                              }
                              return 15;
                            }
                            return 14;
                          }
                          return 13;
                        }
                        return 12;
                      }
                      return 11;
                    }
                    return 10;
                  }
                  return 9;
                }
                return 8;
              }
              return 7;
            }
            return 6;
          }
          return 5;
        }
        return 4;
      }
      return 3;
    }
    return 2;
  }
  v1 = *(const char **)__s1;
  result = strcmp(*(const char **)__s1, "PBL");
  if (!(_DWORD)result)
    return result;
  if (!strcmp(v1, "SBL"))
    return 1;
  if (!strcasecmp(v1, "DIAG"))
    return 2;
  if (!strcasecmp(v1, "REFS"))
    return 3;
  if (!strcasecmp(v1, "QMUX1"))
    return 4;
  if (!strcasecmp(v1, "QMUX2"))
    return 5;
  if (!strcasecmp(v1, "ROM"))
    return 6;
  if (!strcasecmp(v1, "BOOT"))
    return 7;
  if (!strcasecmp(v1, "ARI"))
    return 8;
  if (!strcasecmp(v1, "STT"))
    return 9;
  if (!strcasecmp(v1, "AT"))
    return 10;
  if (!strcasecmp(v1, "ADPL"))
    return 11;
  if (!strcasecmp(v1, "MEDIACTL"))
    return 12;
  if (!strcasecmp(v1, "ETS"))
    return 13;
  if (!strcasecmp(v1, "GNSS"))
    return 14;
  if (!strcasecmp(v1, "QDSS"))
    return 15;
  if (!strcasecmp(v1, "RCTTH"))
    return 16;
  if (!strcasecmp(v1, "ACP"))
    return 17;
  if (!strcasecmp(v1, "VCOM"))
    return 18;
  if (!strcasecmp(v1, "MIPC"))
    return 19;
  if (!strcasecmp(v1, "DHL"))
    return 20;
  if (!strcasecmp(v1, "MUX"))
    return 21;
LABEL_24:
  if (!strcasecmp(v1, "FAC"))
    return 22;
  else
    return 23;
}

uint64_t BasebandTransport::getDefaultTransportIOReadSize(capabilities::abs *a1)
{
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(a1))
    return 0x4000;
  else
    return 0x8000;
}

uint64_t BasebandTransport::getDefaultTransportIOReadCount(capabilities::abs *a1)
{
  int v1;
  char shouldUseMinBasebandTransportIOReadCount;
  int v3;
  int v4;
  unsigned int v5;

  v1 = (int)a1;
  shouldUseMinBasebandTransportIOReadCount = capabilities::abs::shouldUseMinBasebandTransportIOReadCount(a1);
  if (v1 == 15)
    v3 = 36;
  else
    v3 = 4;
  if (v1 == 16)
    v4 = 36;
  else
    v4 = v3;
  if (v1 == 2)
    v5 = 16;
  else
    v5 = v4;
  if ((shouldUseMinBasebandTransportIOReadCount & 1) != 0)
    return 4;
  else
    return v5;
}

double BasebandTransport::Status::Status(BasebandTransport::Status *this)
{
  double result;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

double BasebandTransport::Status::init(BasebandTransport::Status *this)
{
  double result;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t BasebandTransport::Status::toString@<X0>(BasebandTransport::Status *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  size_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  void *__p[2];
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *v32[2];
  __int128 v33;
  __int128 v34;
  _OWORD v35[9];
  unint64_t v36;

  v36 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35[7] = v4;
  v35[8] = v4;
  v35[5] = v4;
  v35[6] = v4;
  v35[3] = v4;
  v35[4] = v4;
  v35[1] = v4;
  v35[2] = v4;
  v34 = v4;
  v35[0] = v4;
  *(_OWORD *)v32 = v4;
  v33 = v4;
  v30 = v4;
  v31 = v4;
  v28 = v4;
  v29 = v4;
  v27 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v27);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"State: ", 7);
  switch(*(_DWORD *)this)
  {
    case 0:
      v6 = 8;
      v26 = 8;
      strcpy((char *)__p, "NotReady");
      break;
    case 1:
      v6 = 5;
      v26 = 5;
      strcpy((char *)__p, "Ready");
      break;
    case 2:
      v6 = 5;
      v26 = 5;
      strcpy((char *)__p, "Error");
      break;
    case 3:
      v6 = 7;
      v26 = 7;
      LODWORD(__p[0]) = 1818326099;
      v7 = 1684368492;
      goto LABEL_7;
    default:
      v6 = 7;
      v26 = 7;
      LODWORD(__p[0]) = 1852534357;
      v7 = 1853321070;
LABEL_7:
      *(_DWORD *)((char *)__p + 3) = v7;
      HIBYTE(__p[0]) = 0;
      break;
  }
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, v6);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Async: ", 7);
  *(_DWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 8) |= 1u;
  v11 = (_QWORD *)std::ostream::operator<<();
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Total Rx: ", 10);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" KB, ", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Total Tx: ", 10);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" KB", 3);
  if ((v26 & 0x80000000) == 0)
  {
    v16 = BYTE8(v34);
    if ((BYTE8(v34) & 0x10) == 0)
      goto LABEL_10;
LABEL_13:
    v18 = v34;
    if ((unint64_t)v34 < *((_QWORD *)&v31 + 1))
    {
      *(_QWORD *)&v34 = *((_QWORD *)&v31 + 1);
      v18 = *((_QWORD *)&v31 + 1);
    }
    v19 = (const void *)v31;
    v17 = v18 - v31;
    if ((unint64_t)(v18 - v31) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_27;
    goto LABEL_16;
  }
  operator delete(__p[0]);
  v16 = BYTE8(v34);
  if ((BYTE8(v34) & 0x10) != 0)
    goto LABEL_13;
LABEL_10:
  if ((v16 & 8) == 0)
  {
    v17 = 0;
    a2[23] = 0;
    goto LABEL_23;
  }
  v19 = (const void *)*((_QWORD *)&v29 + 1);
  v17 = *((_QWORD *)&v30 + 1) - *((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v30 + 1) - *((_QWORD *)&v29 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_27:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_16:
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    v22 = operator new(v20 + 1);
    *((_QWORD *)a2 + 1) = v17;
    *((_QWORD *)a2 + 2) = v21 | 0x8000000000000000;
    *(_QWORD *)a2 = v22;
    a2 = v22;
    goto LABEL_22;
  }
  a2[23] = v17;
  if (v17)
LABEL_22:
    memmove(a2, v19, v17);
LABEL_23:
  a2[v17] = 0;
  *(_QWORD *)&v27 = *MEMORY[0x24BEDB7F0];
  v23 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v27 + *(_QWORD *)(v27 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v28 = v23;
  *((_QWORD *)&v28 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v33) < 0)
    operator delete(v32[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x24BD29B5C](v35);
}

void sub_24B894644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B894658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::Parameters::toString@<X0>(BasebandTransport::Parameters *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  size_t v5;
  int v6;
  uint64_t p_p;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  size_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  void *v27[2];
  char v28;
  void *__p;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37[2];
  __int128 v38;
  __int128 v39;
  _OWORD v40[9];
  unint64_t v41;

  v41 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40[7] = v4;
  v40[8] = v4;
  v40[5] = v4;
  v40[6] = v4;
  v40[3] = v4;
  v40[4] = v4;
  v40[1] = v4;
  v40[2] = v4;
  v39 = v4;
  v40[0] = v4;
  *(_OWORD *)v37 = v4;
  v38 = v4;
  v35 = v4;
  v36 = v4;
  v33 = v4;
  v34 = v4;
  v32 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v32);
  switch(*(_DWORD *)this)
  {
    case 0:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "PBL");
      break;
    case 1:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "SBL");
      break;
    case 2:
      v5 = 4;
      v28 = 4;
      v6 = 1195460932;
      goto LABEL_25;
    case 3:
      v5 = 4;
      v28 = 4;
      v6 = 1397114194;
      goto LABEL_25;
    case 4:
      v5 = 5;
      v28 = 5;
      strcpy((char *)v27, "QMUX1");
      break;
    case 5:
      v5 = 5;
      v28 = 5;
      strcpy((char *)v27, "QMUX2");
      break;
    case 6:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "ROM");
      break;
    case 7:
      v5 = 4;
      v28 = 4;
      v6 = 1414483778;
      goto LABEL_25;
    case 8:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "ARI");
      break;
    case 9:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "STT");
      break;
    case 0xA:
      v5 = 2;
      v28 = 2;
      strcpy((char *)v27, "AT");
      break;
    case 0xB:
      v5 = 4;
      v28 = 4;
      v6 = 1280328769;
      goto LABEL_25;
    case 0xC:
      v5 = 8;
      v28 = 8;
      strcpy((char *)v27, "MEDIACTL");
      break;
    case 0xD:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "ETS");
      break;
    case 0xE:
      v5 = 4;
      v28 = 4;
      v6 = 1397968455;
      goto LABEL_25;
    case 0xF:
      v5 = 4;
      v28 = 4;
      v6 = 1397965905;
      goto LABEL_25;
    case 0x10:
      v5 = 5;
      v28 = 5;
      strcpy((char *)v27, "RCTTH");
      break;
    case 0x11:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "ACP");
      break;
    case 0x12:
      v5 = 4;
      v28 = 4;
      v6 = 1297040214;
      goto LABEL_25;
    case 0x13:
      v5 = 4;
      v28 = 4;
      v6 = 1129335117;
LABEL_25:
      LODWORD(v27[0]) = v6;
      BYTE4(v27[0]) = 0;
      break;
    case 0x14:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "DHL");
      break;
    case 0x15:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "MUX");
      break;
    case 0x16:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "FAC");
      break;
    default:
      v5 = 7;
      v28 = 7;
      strcpy((char *)v27, "Unknown");
      break;
  }
  v30 = 8250;
  v31 = 0;
  HIBYTE(v31) = v5 + 10;
  __p = *(void **)"Protocol: ";
  memcpy((char *)&v30 + 2, v27, v5);
  *((_BYTE *)&v30 + v5 + 2) = 0;
  if (v31 >= 0)
    p_p = (uint64_t)&__p;
  else
    p_p = 0x6C6F636F746F7250;
  if (v31 >= 0)
    v8 = HIBYTE(v31);
  else
    v8 = v30;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, p_p, v8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Powersave: ", 11);
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 8) |= 1u;
  v12 = (_QWORD *)std::ostream::operator<<();
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Create Timeout: ", 16);
  v14 = (_QWORD *)std::ostream::operator<<();
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" sec, ", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"IO Size: ", 9);
  v16 = (_QWORD *)std::ostream::operator<<();
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" KB, ", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Num Pending Reads: ", 19);
  std::ostream::operator<<();
  if (SHIBYTE(v31) < 0)
  {
    operator delete(__p);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_34:
      v18 = BYTE8(v39);
      if ((BYTE8(v39) & 0x10) == 0)
        goto LABEL_35;
LABEL_39:
      v20 = v39;
      if ((unint64_t)v39 < *((_QWORD *)&v36 + 1))
      {
        *(_QWORD *)&v39 = *((_QWORD *)&v36 + 1);
        v20 = *((_QWORD *)&v36 + 1);
      }
      v21 = (const void *)v36;
      v19 = v20 - v36;
      if ((unint64_t)(v20 - v36) >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_53;
      goto LABEL_42;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_34;
  }
  operator delete(v27[0]);
  v18 = BYTE8(v39);
  if ((BYTE8(v39) & 0x10) != 0)
    goto LABEL_39;
LABEL_35:
  if ((v18 & 8) == 0)
  {
    v19 = 0;
    a2[23] = 0;
    goto LABEL_49;
  }
  v21 = (const void *)*((_QWORD *)&v34 + 1);
  v19 = *((_QWORD *)&v35 + 1) - *((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v35 + 1) - *((_QWORD *)&v34 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_53:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_42:
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v24 = operator new(v22 + 1);
    *((_QWORD *)a2 + 1) = v19;
    *((_QWORD *)a2 + 2) = v23 | 0x8000000000000000;
    *(_QWORD *)a2 = v24;
    a2 = v24;
    goto LABEL_48;
  }
  a2[23] = v19;
  if (v19)
LABEL_48:
    memmove(a2, v21, v19);
LABEL_49:
  a2[v19] = 0;
  *(_QWORD *)&v32 = *MEMORY[0x24BEDB7F0];
  v25 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v33 = v25;
  *((_QWORD *)&v33 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v38) < 0)
    operator delete(v37[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x24BD29B5C](v40);
}

void sub_24B894CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B894CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::BasebandTransport(uint64_t a1, _QWORD *a2, NSObject **a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  capabilities::abs *v11;
  capabilities::abs *shouldUseMinBasebandTransportIOReadSize;
  int v13;
  NSObject *v14;
  uint64_t Controller;
  _BYTE v17[16];
  _BYTE v18[16];
  _BYTE v19[16];

  *(_QWORD *)a1 = off_251CBA500;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v17, "com.apple.telephony.abm", "ipc.bb");
  v6 = dispatch_queue_create("ipc.bb", 0);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v6;
  if (v6)
  {
    v7 = v6;
    dispatch_retain(v6);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v7);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_251CBA9A0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v19);
  *(_QWORD *)(a1 + 8) = &unk_251CB85F0;
  *(_QWORD *)(a1 + 56) = *a2;
  v8 = a2[1];
  *(_QWORD *)(a1 + 64) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v18);
  *(_QWORD *)a1 = off_251CBAAB8;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v17);
  *(_QWORD *)a1 = off_251CBA500;
  *(_DWORD *)(a1 + 104) = 23;
  *(_BYTE *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 112) = 10;
  shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v11);
  if ((_DWORD)shouldUseMinBasebandTransportIOReadSize)
    v13 = 0x4000;
  else
    v13 = 0x8000;
  *(_DWORD *)(a1 + 120) = v13;
  capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize);
  *(_DWORD *)(a1 + 124) = 4;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v14 = *a3;
  *(_QWORD *)(a1 + 152) = *a3;
  if (v14)
    dispatch_retain(v14);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  Controller = TelephonyBasebandCreateController();
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = Controller;
  *(_QWORD *)(a1 + 285) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 320) = dispatch_group_create();
  *(_DWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 332) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 365) = 0;
  return a1;
}

void sub_24B894F30(_Unwind_Exception *a1)
{
  _QWORD *v1;
  const void **v2;
  const void *v4;
  NSObject *v5;
  const void *v6;

  v4 = (const void *)v1[21];
  if (v4)
    _Block_release(v4);
  if (*v2)
    _Block_release(*v2);
  v5 = v1[19];
  if (v5)
    dispatch_release(v5);
  v6 = (const void *)v1[18];
  if (v6)
    _Block_release(v6);
  ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

const char *BasebandTransport::getName(BasebandTransport *this)
{
  return "ipc.bb";
}

_QWORD *ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBA9A0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBA9A0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void BasebandTransport::~BasebandTransport(BasebandTransport *this)
{
  NSObject *v2;
  NSObject *v3;
  const void *v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  NSObject *v11;
  const void *v12;
  NSObject *v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  uint8_t v16[16];

  *(_QWORD *)this = off_251CBA500;
  v2 = *((_QWORD *)this + 35);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((_QWORD *)this + 35) = 0;
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", v16, 2u);
    }
  }
  (*(void (**)(BasebandTransport *))(*(_QWORD *)this + 80))(this);
  v4 = (const void *)*((_QWORD *)this + 33);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 33) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 37);
  if (v5)
  {
    operator delete[](v5);
    *((_QWORD *)this + 37) = 0;
  }
  v6 = *((_QWORD *)this + 40);
  if (v6)
    dispatch_release(v6);
  v7 = *((_QWORD *)this + 39);
  if (v7)
    dispatch_release(v7);
  v8 = (const void *)*((_QWORD *)this + 34);
  if (v8)
    _Block_release(v8);
  v9 = (const void *)*((_QWORD *)this + 21);
  if (v9)
    _Block_release(v9);
  v10 = (const void *)*((_QWORD *)this + 20);
  if (v10)
    _Block_release(v10);
  v11 = *((_QWORD *)this + 19);
  if (v11)
    dispatch_release(v11);
  v12 = (const void *)*((_QWORD *)this + 18);
  if (v12)
    _Block_release(v12);
  *(_QWORD *)this = off_251CBA9A0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v13 = *((_QWORD *)this + 12);
  if (v13)
    dispatch_release(v13);
  v14 = *((_QWORD *)this + 11);
  if (v14)
    dispatch_release(v14);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
}

{
  void *v1;

  BasebandTransport::~BasebandTransport(this);
  operator delete(v1);
}

void BasebandTransport::timerOff_sync(BasebandTransport *this)
{
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *((_QWORD *)this + 35);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((_QWORD *)this + 35) = 0;
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", v4, 2u);
    }
  }
}

void BasebandTransport::create(NSObject **this@<X0>, queue a2@<0:X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD block[5];

  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZL14sLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_75;
  block[4] = &qword_2579B8B68;
  if (_MergedGlobals_1 == -1)
  {
    v5 = (std::__shared_weak_count *)unk_2579B8B70;
    v12 = qword_2579B8B68;
    v13 = unk_2579B8B70;
    if (!unk_2579B8B70)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&_MergedGlobals_1, block);
    v5 = (std::__shared_weak_count *)unk_2579B8B70;
    v12 = qword_2579B8B68;
    v13 = unk_2579B8B70;
    if (!unk_2579B8B70)
      goto LABEL_5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
LABEL_5:
  v8 = *this;
  v11 = v8;
  if (v8)
    dispatch_retain(v8);
  BasebandTransport::create((capabilities::radio *)&v12, &v11, a3);
  if (v8)
    dispatch_release(v8);
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_24B895338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  NSObject *v10;

  if (v10)
    dispatch_release(v10);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void BasebandTransport::create(capabilities::radio *a1@<X0>, NSObject **a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (capabilities::radio::vendor(a1) != 3)
    return;
  v6 = operator new(0x198uLL);
  v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v37 = *(_QWORD *)a1;
  v38 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *a2;
  v36 = v10;
  if (v10)
    dispatch_retain(v10);
  BasebandTransport::BasebandTransport((uint64_t)v6, &v37, &v36);
  v39 = v6;
  v40 = 0xAAAAAAAAAAAAAAAALL;
  v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)off_251CBAAF8;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  v40 = (unint64_t)v11;
  v13 = (std::__shared_weak_count *)*((_QWORD *)v6 + 10);
  if (v13)
  {
    if (v13->__shared_owners_ != -1)
      goto LABEL_19;
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + 1, v12));
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    *((_QWORD *)v6 + 9) = v6;
    *((_QWORD *)v6 + 10) = v11;
    std::__shared_weak_count::__release_weak(v13);
  }
  else
  {
    do
      v17 = __ldxr(v12);
    while (__stxr(v17 + 1, v12));
    v18 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    *((_QWORD *)v6 + 9) = v6;
    *((_QWORD *)v6 + 10) = v11;
  }
  do
    v20 = __ldaxr(v12);
  while (__stlxr(v20 - 1, v12));
  if (v20)
  {
LABEL_19:
    v21 = v39;
    if (v39[7])
      goto LABEL_20;
    goto LABEL_33;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v21 = v39;
  if (v39[7])
  {
LABEL_20:
    v22 = (std::__shared_weak_count *)v21[10];
    if (!v22 || (v23 = v21[9], (v24 = std::__shared_weak_count::lock(v22)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v25 = v24;
    v43 = v23;
    v44 = v24;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v21 + 1));
    v41 = v23;
    v42 = v25;
    v43 = 0;
    v44 = 0;
    ctu::TrackedLogger::registerLoggerToServer();
    v26 = v42;
    if (v42)
    {
      v27 = (unint64_t *)&v42->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v44;
    if (v44)
    {
      v30 = (unint64_t *)&v44->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v21 = v39;
  }
LABEL_33:
  v32 = v40;
  v39 = 0;
  v40 = 0;
  *(_QWORD *)a3 = v21;
  *(_QWORD *)(a3 + 8) = v32;
  if (v10)
    dispatch_release(v10);
  v33 = v38;
  if (v38)
  {
    v34 = (unint64_t *)&v38->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  BasebandTransport::init(*(BasebandTransport **)a3);
}

void sub_24B8955F4()
{
  __break(1u);
}

void sub_24B895638()
{
  __cxa_end_catch();
  JUMPOUT(0x24B895674);
}

void sub_24B895648()
{
  JUMPOUT(0x24B895678);
}

void sub_24B895654(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_24B8956C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BasebandTransport::init(BasebandTransport *this)
{
  std::__shared_weak_count *v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD *v18;
  _QWORD block[6];

  v5 = *((_QWORD *)this + 9);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v4 = (char *)this + 72;
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = MEMORY[0x24BDAC760];
  v16[0] = MEMORY[0x24BDAC760];
  v16[1] = 1174405120;
  v16[2] = ___ZN17BasebandTransport4initEv_block_invoke;
  v16[3] = &__block_descriptor_tmp_47;
  v16[4] = this;
  v16[5] = v5;
  v17 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v18 = v16;
  block[0] = v12;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_77;
  block[4] = v4;
  block[5] = &v18;
  v14 = *((_QWORD *)this + 11);
  if (!*((_QWORD *)this + 12))
  {
    dispatch_sync(v14, block);
    v15 = v17;
    if (!v17)
      goto LABEL_14;
    goto LABEL_13;
  }
  dispatch_async_and_wait(v14, block);
  v15 = v17;
  if (v17)
LABEL_13:
    std::__shared_weak_count::__release_weak(v15);
LABEL_14:
  std::__shared_weak_count::__release_weak(v7);
}

void ___ZN17BasebandTransport4initEv_block_invoke(capabilities::ipc *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  void *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  const void *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD aBlock[6];
  std::__shared_weak_count *v19;

  v2 = *((_QWORD *)a1 + 4);
  if (capabilities::ipc::supportsPCI(a1))
  {
    v3 = MEMORY[0x24BDAC760];
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN17BasebandTransport4initEv_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_7;
    v5 = *((_QWORD *)a1 + 5);
    v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 6);
    aBlock[4] = v2;
    aBlock[5] = v5;
    v19 = v4;
    if (v4)
    {
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
    }
    v8 = _Block_copy(aBlock);
    v9 = *(const void **)(v2 + 160);
    *(_QWORD *)(v2 + 160) = v8;
    if (v9)
      _Block_release(v9);
    v16[0] = v3;
    v16[1] = 1174405120;
    v16[2] = ___ZN17BasebandTransport4initEv_block_invoke_43;
    v16[3] = &__block_descriptor_tmp_45;
    v11 = *((_QWORD *)a1 + 5);
    v10 = (std::__shared_weak_count *)*((_QWORD *)a1 + 6);
    v16[4] = v2;
    v16[5] = v11;
    v17 = v10;
    if (v10)
    {
      v12 = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = _Block_copy(v16);
    v15 = *(const void **)(v2 + 168);
    *(_QWORD *)(v2 + 168) = v14;
    if (v15)
      _Block_release(v15);
    if (v17)
      std::__shared_weak_count::__release_weak(v17);
    if (v19)
      std::__shared_weak_count::__release_weak(v19);
  }
}

void ___ZN17BasebandTransport4initEv_block_invoke_2(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  const void *v13;
  void *v14;
  const void *v15;
  __int128 v16;
  NSObject *v17;
  void *v18;
  char *v19;
  __int128 v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _BYTE v23[32];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v9 = a1[4];
    v10 = std::__shared_weak_count::lock(v5);
    if (v10)
    {
      v11 = v10;
      if (a1[5])
      {
        v12 = *(NSObject **)(v9 + 40);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v23 = 67109632;
          *(_DWORD *)&v23[4] = a2;
          *(_WORD *)&v23[8] = 2048;
          *(_QWORD *)&v23[10] = a3;
          *(_WORD *)&v23[18] = 2048;
          *(_QWORD *)&v23[20] = a4;
          _os_log_error_impl(&dword_24B855000, v12, OS_LOG_TYPE_ERROR, "PCI Transport Status: 0x%x (0x%08lx, 0x%08lx)", v23, 0x1Cu);
        }
        *(_DWORD *)(v9 + 328) = 2 * (a2 != 0);
        *(int64x2_t *)(v9 + 352) = vsubq_s64(*(int64x2_t *)(v9 + 336), *(int64x2_t *)(v9 + 376));
        v13 = *(const void **)(v9 + 272);
        if (v13)
        {
          v14 = _Block_copy(v13);
          v15 = v14;
          v16 = *(_OWORD *)(v9 + 344);
          *(_OWORD *)v23 = *(_OWORD *)(v9 + 328);
          *(_OWORD *)&v23[16] = v16;
          v24 = *(_QWORD *)(v9 + 360);
          v17 = *(NSObject **)(v9 + 152);
          if (v14)
            v18 = _Block_copy(v14);
          else
            v18 = 0;
          v19 = (char *)operator new(0x30uLL);
          *(_QWORD *)v19 = v18;
          v20 = *(_OWORD *)&v23[16];
          *(_OWORD *)(v19 + 8) = *(_OWORD *)v23;
          *(_OWORD *)(v19 + 24) = v20;
          *((_QWORD *)v19 + 5) = v24;
          dispatch_async_f(v17, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb0_E3__0EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          if (v15)
            _Block_release(v15);
        }
      }
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_24B895B04(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

int64x2_t BasebandTransport::updateDeltas_sync(BasebandTransport *this)
{
  int64x2_t result;

  result = vsubq_s64(*((int64x2_t *)this + 21), *(int64x2_t *)((char *)this + 376));
  *((int64x2_t *)this + 22) = result;
  return result;
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrI17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrI17BasebandTransportEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN17BasebandTransport4initEv_block_invoke_43(_QWORD *a1, int a2, void *a3, unsigned int a4)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const void *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  char v21;
  NSObject *v22;
  void *v23;
  void *v24;
  size_t v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *__p;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint8_t buf[8];
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v6 = a1[4];
  v33 = 0;
  v34 = 0;
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v34 = std::__shared_weak_count::lock(v7)) != 0 && (v10 = a1[5], (v33 = v10) != 0))
  {
    v11 = *(NSObject **)(v10 + 320);
    if (v11)
    {
      dispatch_retain(*(dispatch_object_t *)(v10 + 320));
      dispatch_group_enter(v11);
    }
    if (a2)
    {
      v12 = *(NSObject **)(v6 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = a2;
        _os_log_debug_impl(&dword_24B855000, v12, OS_LOG_TYPE_DEBUG, "#D Async read error 0x%08x", buf, 8u);
      }
    }
    else
    {
      *(_QWORD *)(v6 + 336) += a4;
      v16 = *(const void **)(v6 + 144);
      if (v16)
      {
        v17 = _Block_copy(v16);
        v18 = *(_QWORD *)(v6 + 128);
        if (v18)
        {
          __p = 0;
          v31 = 0;
          v32 = 0;
          (*(void (**)(uint64_t, void *, _QWORD, void **))(*(_QWORD *)v18 + 8))(v18, a3, a4, &__p);
          v19 = *(NSObject **)(v6 + 152);
          if (v17)
            v20 = _Block_copy(v17);
          else
            v20 = 0;
          *(_QWORD *)buf = v20;
          v36 = 0;
          v37 = 0;
          v38 = 0;
          v24 = __p;
          v25 = v31 - (_BYTE *)__p;
          if (v31 == __p)
          {
            v27 = 0;
            v26 = 0;
          }
          else
          {
            if ((v25 & 0x8000000000000000) != 0)
              std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
            v26 = (char *)operator new(v31 - (_BYTE *)__p);
            v27 = &v26[v25];
            v36 = v26;
            v38 = &v26[v25];
            memcpy(v26, v24, v25);
            v37 = &v26[v25];
          }
          v28 = operator new(0x20uLL);
          *v28 = v20;
          v28[1] = v26;
          v28[2] = v27;
          v28[3] = v27;
          dispatch_async_f(v19, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          if (__p)
          {
            v31 = __p;
            operator delete(__p);
          }
        }
        else
        {
          v21 = *(_BYTE *)(v6 + 136);
          v22 = *(NSObject **)(v6 + 152);
          if (v17)
            v23 = _Block_copy(v17);
          else
            v23 = 0;
          v29 = operator new(0x18uLL);
          *v29 = v23;
          v29[1] = a3;
          *((_DWORD *)v29 + 4) = a4;
          *((_BYTE *)v29 + 20) = v21;
          dispatch_async_f(v22, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__2EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          a3 = 0;
        }
        if (v17)
          _Block_release(v17);
      }
    }
    if (a3 && !*(_BYTE *)(v6 + 136))
      free(a3);
    if (v11)
    {
      dispatch_group_leave(v11);
      dispatch_release(v11);
    }
  }
  else if (a3)
  {
    free(a3);
  }
  v13 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_24B895E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *aBlock, void *a16, uint64_t a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

BOOL BasebandTransport::open(BasebandTransport *a1, __int128 *a2, void **a3)
{
  uint64_t v6;
  __int128 v7;
  void *v8;
  NSObject *v9;
  int v10;
  void *v11;
  _QWORD v13[6];
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *aBlock;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  _QWORD block[6];

  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  BasebandTransport::stopReader(a1);
  v6 = MEMORY[0x24BDAC760];
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1174405120;
  v13[2] = ___ZN17BasebandTransport4openENS_10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke;
  v13[3] = &unk_251CBA5F0;
  v13[5] = a1;
  v7 = a2[1];
  v14 = *a2;
  v15 = v7;
  v16 = *((_QWORD *)a2 + 4);
  v8 = *a3;
  if (*a3)
    v8 = _Block_copy(v8);
  aBlock = v8;
  v13[4] = &v18;
  v22 = v13;
  block[0] = v6;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_77;
  block[4] = (char *)a1 + 72;
  block[5] = &v22;
  v9 = *((_QWORD *)a1 + 11);
  if (*((_QWORD *)a1 + 12))
  {
    dispatch_async_and_wait(v9, block);
    v10 = *((unsigned __int8 *)v19 + 24);
    v11 = aBlock;
    if (!aBlock)
      goto LABEL_8;
    goto LABEL_7;
  }
  dispatch_sync(v9, block);
  v10 = *((unsigned __int8 *)v19 + 24);
  v11 = aBlock;
  if (aBlock)
LABEL_7:
    _Block_release(v11);
LABEL_8:
  _Block_object_dispose(&v18, 8);
  return v10 != 0;
}

void sub_24B896018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void BasebandTransport::stopReader(BasebandTransport *this)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  char *v5;
  NSObject *v6;
  NSObject *v7;
  dispatch_time_t v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[3];
  char v16;
  _QWORD *v17;
  _QWORD block[6];

  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2000000000;
  v16 = 0;
  v2 = (uint64_t *)((char *)this + 72);
  v3 = MEMORY[0x24BDAC760];
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 0x40000000;
  v14[2] = ___ZN17BasebandTransport10stopReaderEv_block_invoke;
  v14[3] = &unk_251CBA758;
  v14[4] = v15;
  v14[5] = this;
  v17 = v14;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_77;
  block[4] = (char *)this + 72;
  block[5] = &v17;
  v5 = (char *)this + 88;
  v4 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v5 + 1))
    dispatch_async_and_wait(v4, block);
  else
    dispatch_sync(v4, block);
  v13[0] = v3;
  v13[1] = 0x40000000;
  v13[2] = ___ZN17BasebandTransport10stopReaderEv_block_invoke_2;
  v13[3] = &unk_251CBA780;
  v13[4] = v15;
  v13[5] = this;
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v2, (uint64_t)v13);
  v6 = *((_QWORD *)this + 40);
  if (v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl(&dword_24B855000, v7, OS_LOG_TYPE_DEFAULT, "#I Waiting for reader to be stopped", (uint8_t *)block, 2u);
      v6 = *((_QWORD *)this + 40);
    }
    v8 = dispatch_time(0, 3000000000);
    if (dispatch_group_wait(v6, v8))
    {
      (*(void (**)(BasebandTransport *))(*(_QWORD *)this + 80))(this);
      v9 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        LOWORD(block[0]) = 0;
        _os_log_error_impl(&dword_24B855000, v9, OS_LOG_TYPE_ERROR, "Timeout waiting for read to unblock, freed transport to force read unblock", (uint8_t *)block, 2u);
      }
    }
    else
    {
      v11 = (void *)*((_QWORD *)this + 37);
      if (v11)
      {
        operator delete[](v11);
        *((_QWORD *)this + 37) = 0;
        v12 = *((_QWORD *)this + 39);
        *((_QWORD *)this + 39) = 0;
        if (v12)
          dispatch_release(v12);
      }
    }
    v10 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl(&dword_24B855000, v10, OS_LOG_TYPE_DEFAULT, "#I Reader stopped", (uint8_t *)block, 2u);
    }
  }
  _Block_object_dispose(v15, 8);
}

void sub_24B896244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN17BasebandTransport4openENS_10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  char v5;
  __int128 v6;
  void *v7;
  const void *v8;
  _QWORD v9[5];
  char v10;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(NSObject **)(v2 + 280);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(v2 + 280));
    *(_QWORD *)(v2 + 280) = 0;
    v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9[0]) = 0;
      _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", (uint8_t *)v9, 2u);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
  *(_DWORD *)(v2 + 328) = 0;
  *(_BYTE *)(v2 + 332) = 0;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_QWORD *)(v2 + 365) = 0;
  v5 = *(_BYTE *)(a1 + 80);
  v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 120) = v6;
  *(_BYTE *)(v2 + 136) = v5;
  v7 = *(void **)(a1 + 88);
  if (v7)
    v7 = _Block_copy(v7);
  v8 = *(const void **)(v2 + 144);
  *(_QWORD *)(v2 + 144) = v7;
  if (v8)
    _Block_release(v8);
  if (*(_DWORD *)(v2 + 104) != 23)
  {
    if (capabilities::ipc::supportsPCI((capabilities::ipc *)v7))
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = BasebandTransport::openPCI_sync((BasebandTransport *)v2);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      BasebandTransport::timerOn_sync((BasebandTransport *)v2);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 0x40000000;
    v9[2] = ___ZN17BasebandTransport9dumpStateEb_block_invoke;
    v9[3] = &__block_descriptor_tmp_70;
    v9[4] = v2;
    v10 = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v9);
  }
}

uint64_t BasebandTransport::openPCI_sync(BasebandTransport *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  capabilities::abs *inited;
  int v10;
  uint64_t shouldUseMinBasebandTransportIOReadCount;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  uint8_t *v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v31;
  unsigned int v32;
  uint8_t buf[23];
  char v34;
  uint8_t v35[4];
  uint8_t *v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v4 = v3;
  p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
  do
    v6 = __ldxr(p_shared_weak_owners);
  while (__stxr(v6 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  inited = (capabilities::abs *)TelephonyBasebandPCITransportInitParameters();
  v10 = *((_DWORD *)this + 28);
  shouldUseMinBasebandTransportIOReadCount = capabilities::abs::traceTransportTimeoutScalingFactor(inited);
  v12 = 1000 * v10;
  if ((((1000 * v10) * (unint64_t)shouldUseMinBasebandTransportIOReadCount) & 0xFFFFFFFF00000000) != 0)
  {
    v13 = *((_QWORD *)this + 5);
    shouldUseMinBasebandTransportIOReadCount = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if ((_DWORD)shouldUseMinBasebandTransportIOReadCount)
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v12;
      _os_log_error_impl(&dword_24B855000, v13, OS_LOG_TYPE_ERROR, "Scaled create timeout overflowed, falling back to unscaled value: %u", buf, 8u);
    }
  }
  v14 = *((_DWORD *)this + 31);
  if (v14)
    goto LABEL_20;
  v15 = *((_DWORD *)this + 26);
  shouldUseMinBasebandTransportIOReadCount = capabilities::abs::shouldUseMinBasebandTransportIOReadCount((capabilities::abs *)shouldUseMinBasebandTransportIOReadCount);
  if ((shouldUseMinBasebandTransportIOReadCount & 1) != 0)
    goto LABEL_14;
  if (v15 != 2)
  {
    if (v15 != 16 && v15 != 15)
    {
LABEL_14:
      v31 = 4;
      v16 = *((_DWORD *)this + 30);
      if (!v16)
        goto LABEL_21;
      goto LABEL_24;
    }
    v14 = 36;
LABEL_20:
    v31 = v14;
    v16 = *((_DWORD *)this + 30);
    if (!v16)
      goto LABEL_21;
    goto LABEL_24;
  }
  v31 = 16;
  v16 = *((_DWORD *)this + 30);
  if (!v16)
  {
LABEL_21:
    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)shouldUseMinBasebandTransportIOReadCount))
      v16 = 0x4000;
    else
      v16 = 0x8000;
  }
LABEL_24:
  v32 = v16;
  v17 = *((_DWORD *)this + 26);
  switch(v17)
  {
    case 0:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 1:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 2:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 3:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 4:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 5:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 6:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 7:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 8:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 9:
    case 17:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 10:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 11:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 12:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 13:
    case 18:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 14:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 15:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 16:
      v18 = v31;
      if (v31 >= 0x41)
      {
LABEL_30:
        v19 = *((_QWORD *)this + 5);
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          goto LABEL_148;
        switch(v17)
        {
          case 0:
            v34 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            v34 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            v34 = 4;
            v28 = 1195460932;
            goto LABEL_122;
          case 3:
            v34 = 4;
            v28 = 1397114194;
            goto LABEL_122;
          case 4:
            v34 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            v34 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            v34 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            v34 = 4;
            v28 = 1414483778;
            goto LABEL_122;
          case 8:
            v34 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            v34 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 10:
            v34 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 11:
            v34 = 4;
            v28 = 1280328769;
            goto LABEL_122;
          case 12:
            v34 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 13:
            v34 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 14:
            v34 = 4;
            v28 = 1397968455;
            goto LABEL_122;
          case 15:
            v34 = 4;
            v28 = 1397965905;
            goto LABEL_122;
          case 16:
            v34 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 17:
            v34 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 18:
            v34 = 4;
            v28 = 1297040214;
LABEL_122:
            *(_DWORD *)buf = v28;
            buf[4] = 0;
            break;
          default:
            v34 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)v35 = 136315394;
        v36 = buf;
        v37 = 2048;
        v38 = v18;
        v24 = "%s: invalid transport io read count (%lu)";
LABEL_145:
        v25 = v19;
        v26 = 22;
LABEL_146:
        _os_log_error_impl(&dword_24B855000, v25, OS_LOG_TYPE_ERROR, v24, v35, v26);
        if (v34 < 0)
          operator delete(*(void **)buf);
        goto LABEL_148;
      }
LABEL_60:
      if (v16 - 0x4000 > 0xFC000)
      {
        v19 = *((_QWORD *)this + 5);
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          goto LABEL_148;
        switch(v17)
        {
          case 0:
            v34 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            v34 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            v34 = 4;
            v29 = 1195460932;
            goto LABEL_143;
          case 3:
            v34 = 4;
            v29 = 1397114194;
            goto LABEL_143;
          case 4:
            v34 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            v34 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            v34 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            v34 = 4;
            v29 = 1414483778;
            goto LABEL_143;
          case 8:
            v34 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            v34 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 10:
            v34 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 11:
            v34 = 4;
            v29 = 1280328769;
            goto LABEL_143;
          case 12:
            v34 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 13:
            v34 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 14:
            v34 = 4;
            v29 = 1397968455;
            goto LABEL_143;
          case 15:
            v34 = 4;
            v29 = 1397965905;
            goto LABEL_143;
          case 16:
            v34 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 17:
            v34 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 18:
            v34 = 4;
            v29 = 1297040214;
LABEL_143:
            *(_DWORD *)buf = v29;
            buf[4] = 0;
            break;
          default:
            v34 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)v35 = 136315394;
        v36 = buf;
        v37 = 2048;
        v38 = v16;
        v24 = "%s: invalid transport io read size (%lu)";
        goto LABEL_145;
      }
      if (*((_QWORD *)this + 18))
        *((_BYTE *)this + 332) = 1;
      if (!TelephonyBasebandPCITransportCreate())
      {
        *((_DWORD *)this + 82) = 2;
        v22 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          BasebandTransport::asString(*((unsigned int *)this + 26), (char *)buf);
          if (v34 >= 0)
            v23 = buf;
          else
            v23 = *(uint8_t **)buf;
          *(_DWORD *)v35 = 136315138;
          v36 = v23;
          v24 = "%s: transport open failed";
          v25 = v22;
          v26 = 12;
          goto LABEL_146;
        }
LABEL_148:
        v20 = 0;
        goto LABEL_149;
      }
      v20 = 1;
      *((_DWORD *)this + 82) = 1;
      v21 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            v34 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            v34 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            v34 = 4;
            v27 = 1195460932;
            goto LABEL_97;
          case 3:
            v34 = 4;
            v27 = 1397114194;
            goto LABEL_97;
          case 4:
            v34 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            v34 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            v34 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            v34 = 4;
            v27 = 1414483778;
            goto LABEL_97;
          case 8:
            v34 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            v34 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 0xA:
            v34 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 0xB:
            v34 = 4;
            v27 = 1280328769;
            goto LABEL_97;
          case 0xC:
            v34 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 0xD:
            v34 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 0xE:
            v34 = 4;
            v27 = 1397968455;
            goto LABEL_97;
          case 0xF:
            v34 = 4;
            v27 = 1397965905;
            goto LABEL_97;
          case 0x10:
            v34 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 0x11:
            v34 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 0x12:
            v34 = 4;
            v27 = 1297040214;
            goto LABEL_97;
          case 0x13:
            v34 = 4;
            v27 = 1129335117;
LABEL_97:
            *(_DWORD *)buf = v27;
            buf[4] = 0;
            break;
          case 0x14:
            v34 = 3;
            strcpy((char *)buf, "DHL");
            break;
          case 0x15:
            v34 = 3;
            strcpy((char *)buf, "MUX");
            break;
          case 0x16:
            v34 = 3;
            strcpy((char *)buf, "FAC");
            break;
          default:
            v34 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)v35 = 136315394;
        v36 = buf;
        v37 = 1024;
        LODWORD(v38) = v32;
        _os_log_impl(&dword_24B855000, v21, OS_LOG_TYPE_DEFAULT, "#I %s: transport successfully opened with read io size as %u", v35, 0x12u);
        if (v34 < 0)
          operator delete(*(void **)buf);
      }
LABEL_149:
      std::__shared_weak_count::__release_weak(v4);
      return v20;
    default:
      goto LABEL_148;
  }
}

void sub_24B897034(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_24B897048(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BasebandTransport::timerOn_sync(BasebandTransport *this)
{
  NSObject *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  NSObject *v6;
  dispatch_time_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  unint64_t v17;
  NSObject *v18;
  int v19;
  NSObject *v20;
  _QWORD handler[6];
  std::__shared_weak_count *v22;
  uint8_t buf[4];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 35);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((_QWORD *)this + 35) = 0;
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", buf, 2u);
    }
  }
  if (*((_DWORD *)this + 82) == 1)
  {
    v4 = *((_DWORD *)this + 72);
    if (v4 && *((_QWORD *)this + 34))
    {
      v5 = 1000000000 * v4;
      v6 = dispatch_source_create(MEMORY[0x24BDACA18], 1uLL, 0, *((dispatch_queue_t *)this + 11));
      *((_QWORD *)this + 35) = v6;
      v7 = dispatch_time(0, v5);
      dispatch_source_set_timer(v6, v7, v5, 0xBEBC200uLL);
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
      if (!v8 || (v9 = *((_QWORD *)this + 9), (v10 = std::__shared_weak_count::lock(v8)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v11 = v10;
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v13 = __ldxr(p_shared_weak_owners);
      while (__stxr(v13 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
      v16 = *((_QWORD *)this + 35);
      handler[0] = MEMORY[0x24BDAC760];
      handler[1] = 1174405120;
      handler[2] = ___ZN17BasebandTransport12timerOn_syncEv_block_invoke;
      handler[3] = &__block_descriptor_tmp_69;
      handler[4] = this;
      handler[5] = v9;
      v22 = v11;
      do
        v17 = __ldxr(p_shared_weak_owners);
      while (__stxr(v17 + 1, p_shared_weak_owners));
      dispatch_source_set_event_handler(v16, handler);
      dispatch_activate(*((dispatch_object_t *)this + 35));
      v18 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v19 = *((_DWORD *)this + 72);
        *(_DWORD *)buf = 67109120;
        v24 = v19;
        _os_log_impl(&dword_24B855000, v18, OS_LOG_TYPE_DEFAULT, "#I Status report enabled(%d sec)", buf, 8u);
      }
      if (v22)
        std::__shared_weak_count::__release_weak(v22);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    v20 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_24B855000, v20, OS_LOG_TYPE_DEFAULT, "#I Invalid state for status report enable.  Ignoring enable request.", buf, 2u);
    }
  }
}

void BasebandTransport::dumpState(BasebandTransport *this, char a2)
{
  _QWORD v2[5];
  char v3;

  v2[0] = MEMORY[0x24BDAC760];
  v2[1] = 0x40000000;
  v2[2] = ___ZN17BasebandTransport9dumpStateEb_block_invoke;
  v2[3] = &__block_descriptor_tmp_70;
  v2[4] = this;
  v3 = a2;
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v2);
}

void *__copy_helper_block_e8_88c45_ZTSN8dispatch5blockIU13block_pointerFvPhjEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 88);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 88) = result;
  return result;
}

void __destroy_helper_block_e8_88c45_ZTSN8dispatch5blockIU13block_pointerFvPhjEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 88);
  if (v1)
    _Block_release(v1);
}

BOOL BasebandTransport::write(BasebandTransport *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4)
{
  char *v7;
  _QWORD *v8;
  NSObject *v9;
  char *v10;
  NSObject *v11;
  uint64_t (**v12)(_QWORD, uint64_t);
  int v13;
  NSObject *v14;
  _BOOL8 v15;
  _QWORD v17[6];
  _QWORD v18[10];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  const unsigned __int8 *v26;
  uint64_t block;
  uint64_t p_block;
  uint64_t v29;
  __n128 (*v30)(_QWORD *, uint64_t);
  void (*v31)(uint64_t);
  void *__p;
  void *v33;
  uint64_t v34;
  _QWORD v35[7];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *(*v47)(uint64_t);
  void *v48;
  char *v49;
  _QWORD *v50;

  v40 = 0;
  v41 = &v40;
  v42 = 0x2000000000;
  v43 = 0;
  v36 = 0;
  v37 = &v36;
  v38 = 0x2000000000;
  v39 = 0;
  v7 = (char *)this + 72;
  v8 = (_QWORD *)MEMORY[0x24BDAC760];
  v35[0] = MEMORY[0x24BDAC760];
  v35[1] = 0x40000000;
  v35[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke;
  v35[3] = &unk_251CBA628;
  v35[5] = &v40;
  v35[6] = this;
  v35[4] = &v36;
  v45 = v35;
  block = MEMORY[0x24BDAC760];
  p_block = 0x40000000;
  v29 = (uint64_t)___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v30 = (__n128 (*)(_QWORD *, uint64_t))&__block_descriptor_tmp_77;
  v31 = (void (*)(uint64_t))((char *)this + 72);
  __p = &v45;
  v10 = (char *)this + 88;
  v9 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v10 + 1))
  {
    dispatch_async_and_wait(v9, &block);
    if (*((_BYTE *)v41 + 24))
      goto LABEL_3;
LABEL_10:
    v15 = 0;
    goto LABEL_19;
  }
  dispatch_sync(v9, &block);
  if (!*((_BYTE *)v41 + 24))
    goto LABEL_10;
LABEL_3:
  block = 0;
  p_block = (uint64_t)&block;
  v29 = 0x4002000000;
  v30 = __Block_byref_object_copy_;
  v31 = __Block_byref_object_dispose_;
  v33 = 0;
  v34 = 0;
  __p = 0;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = a2;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = a3;
  v18[0] = v8;
  v18[1] = 0x40000000;
  v18[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_50;
  v18[3] = &unk_251CBA650;
  v18[8] = a2;
  v18[9] = a3;
  v18[4] = &block;
  v18[5] = &v23;
  v18[6] = &v19;
  v18[7] = this;
  v44 = v18;
  v45 = v8;
  v46 = 0x40000000;
  v47 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v48 = &__block_descriptor_tmp_77;
  v49 = v7;
  v50 = &v44;
  v11 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12))
  {
    dispatch_async_and_wait(v11, &v45);
    if (v20[3])
      goto LABEL_5;
  }
  else
  {
    dispatch_sync(v11, &v45);
    if (v20[3])
    {
LABEL_5:
      v12 = (uint64_t (**)(_QWORD, uint64_t))v37[3];
      if (*v12)
      {
        v13 = (*v12)(v12, v24[3]);
        *((_BYTE *)v41 + 24) = v13;
        if (v13)
        {
          v17[0] = v8;
          v17[1] = 0x40000000;
          v17[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_2;
          v17[3] = &unk_251CBA678;
          v17[4] = &v19;
          v17[5] = this;
          v44 = v17;
          v45 = v8;
          v46 = 0x40000000;
          v47 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
          v48 = &__block_descriptor_tmp_77;
          v49 = v7;
          v50 = &v44;
          v14 = *((_QWORD *)this + 11);
          if (*((_QWORD *)this + 12))
            dispatch_async_and_wait(v14, &v45);
          else
            dispatch_sync(v14, &v45);
          v15 = *((_BYTE *)v41 + 24) != 0;
        }
        else
        {
          v15 = 0;
        }
      }
      else
      {
        v15 = 0;
        *((_BYTE *)v41 + 24) = 0;
      }
      goto LABEL_17;
    }
  }
  v15 = 1;
LABEL_17:
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&block, 8);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
LABEL_19:
  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(&v40, 8);
  return v15;
}

void sub_24B897668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  uint64_t v40;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  if (__p)
  {
    a40 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v40 - 224), 8);
  _Block_object_dispose((const void *)(v40 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t result;

  v2 = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v2 + 176;
  v3 = *(uint64_t (**)(void))(v2 + 232);
  if (v3)
  {
    result = v3();
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = result;
  }
  else
  {
    result = 0;
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
  }
  return result;
}

__n128 __Block_byref_object_copy_(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(v2 + 344) + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  *(_QWORD *)(v2 + 344) = v3;
  v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6 = 134218240;
    v7 = v5;
    v8 = 2048;
    v9 = v3;
    _os_log_debug_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEBUG, "#D Written: %zu bytes, for a total of: %llu", (uint8_t *)&v6, 0x16u);
  }
}

uint64_t BasebandTransport::read(BasebandTransport *this, unsigned __int8 *a2, unint64_t a3, unsigned int *a4)
{
  uint64_t *v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  char v13;
  void (*v14)(void);
  uint64_t v15;
  _QWORD v17[6];
  _QWORD v18[7];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  _QWORD block[6];

  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  v6 = (uint64_t *)((char *)this + 72);
  v7 = MEMORY[0x24BDAC760];
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 0x40000000;
  v18[2] = ___ZN17BasebandTransport4readEPhmPjbj_block_invoke;
  v18[3] = &unk_251CBA6A0;
  v18[5] = &v23;
  v18[6] = this;
  v18[4] = &v19;
  v27 = v18;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_77;
  block[4] = (char *)this + 72;
  block[5] = &v27;
  v9 = (char *)this + 88;
  v8 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v9 + 1))
  {
    dispatch_async_and_wait(v8, block);
    v10 = v24;
    if (!*((_BYTE *)v24 + 24))
      goto LABEL_13;
LABEL_5:
    v11 = v20[3];
    if (v11 && (v12 = *(uint64_t (**)(void))(v11 + 8)) != 0)
    {
      v13 = v12();
      *((_BYTE *)v24 + 24) = v13;
      if ((v13 & 1) != 0)
      {
        v17[0] = v7;
        v17[1] = 0x40000000;
        v17[2] = ___ZN17BasebandTransport4readEPhmPjbj_block_invoke_54;
        v17[3] = &__block_descriptor_tmp_55;
        v17[4] = this;
        v17[5] = a4;
        ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v6, (uint64_t)v17);
        goto LABEL_13;
      }
      v14 = *(void (**)(void))(v20[3] + 24);
      if (!v14)
        goto LABEL_13;
    }
    else
    {
      *((_BYTE *)v10 + 24) = 0;
      v14 = *(void (**)(void))(v11 + 24);
      if (!v14)
        goto LABEL_13;
    }
    v14();
    goto LABEL_13;
  }
  dispatch_sync(v8, block);
  v10 = v24;
  if (*((_BYTE *)v24 + 24))
    goto LABEL_5;
LABEL_13:
  v15 = *((unsigned __int8 *)v24 + 24);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  return v15;
}

void sub_24B897A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void ___ZN17BasebandTransport4readEPhmPjbj_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  unsigned int (*v3)(void);
  NSObject *v4;
  uint8_t v5[16];

  v2 = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v2 + 176;
  v3 = *(unsigned int (**)(void))(v2 + 232);
  if (v3)
  {
    if (!v3())
    {
      *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
      if (!*(_BYTE *)(v2 + 332))
        return;
      goto LABEL_7;
    }
    LOBYTE(v3) = *(_BYTE *)(v2 + 332) == 0;
  }
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = (_BYTE)v3;
  if (!*(_BYTE *)(v2 + 332))
    return;
LABEL_7:
  v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v5 = 0;
    _os_log_error_impl(&dword_24B855000, v4, OS_LOG_TYPE_ERROR, "Explicit reads not allowed in async mode", v5, 2u);
  }
}

uint64_t ___ZN17BasebandTransport4readEPhmPjbj_block_invoke_54(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 336) += **(unsigned int **)(result + 40);
  return result;
}

uint64_t BasebandTransport::close(BasebandTransport *this)
{
  char *v2;
  uint64_t v3;
  NSObject *v4;
  char *v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[6];
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t block;
  uint64_t v17;
  _QWORD *(*v18)(uint64_t);
  void *v19;
  char *v20;
  _QWORD *v21;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 1;
  *((_DWORD *)this + 72) = 0;
  v2 = (char *)this + 72;
  v3 = MEMORY[0x24BDAC760];
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 0x40000000;
  v10[2] = ___ZN17BasebandTransport5closeEv_block_invoke;
  v10[3] = &__block_descriptor_tmp_56;
  v10[4] = this;
  v15 = v10;
  block = MEMORY[0x24BDAC760];
  v17 = 0x40000000;
  v18 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v19 = &__block_descriptor_tmp_77;
  v20 = (char *)this + 72;
  v21 = &v15;
  v5 = (char *)this + 88;
  v4 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v5 + 1))
    dispatch_async_and_wait(v4, &block);
  else
    dispatch_sync(v4, &block);
  BasebandTransport::stopReader(this);
  v9[0] = v3;
  v9[1] = 0x40000000;
  v9[2] = ___ZN17BasebandTransport5closeEv_block_invoke_2;
  v9[3] = &unk_251CBA708;
  v9[4] = &v11;
  v9[5] = this;
  v15 = v9;
  block = v3;
  v17 = 0x40000000;
  v18 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v19 = &__block_descriptor_tmp_77;
  v20 = v2;
  v21 = &v15;
  v6 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12))
    dispatch_async_and_wait(v6, &block);
  else
    dispatch_sync(v6, &block);
  v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_24B897CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN17BasebandTransport5closeEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 280);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(v1 + 280));
    *(_QWORD *)(v1 + 280) = 0;
    v3 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", v4, 2u);
    }
  }
}

uint64_t ___ZN17BasebandTransport5closeEv_block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 80))(*(_QWORD *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t BasebandTransport::operator*(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD block[6];

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = ___ZN17BasebandTransportdeEv_block_invoke;
  v5[3] = &unk_251CBA730;
  v5[4] = &v6;
  v5[5] = a1;
  v10 = v5;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_77;
  block[4] = a1 + 72;
  block[5] = &v10;
  v2 = a1 + 88;
  v1 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(v2 + 8))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZN17BasebandTransportdeEv_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_QWORD *)(result + 40) + 176;
  return result;
}

uint64_t BasebandTransport::switchDIAG_sync(BasebandTransport *this)
{
  return 0;
}

uint64_t BasebandTransport::getIOSizeRx(BasebandTransport *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t BasebandTransport::close_sync(BasebandTransport *this)
{
  unsigned int (*v2)(char *);
  _OWORD *v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  const char *v7;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  void **v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int (*)(char *))*((_QWORD *)this + 29);
  if (v2 && (v3 = (_OWORD *)((char *)this + 176), v2((char *)this + 176)))
  {
    *((_DWORD *)this + 82) = 0;
    v4 = TelephonyUtilTransportFree();
    *v3 = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_QWORD *)this + 32) = 0;
    v5 = *((_QWORD *)this + 5);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      return v4;
  }
  else
  {
    v4 = 1;
    v5 = *((_QWORD *)this + 5);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      return v4;
  }
  switch(*((_DWORD *)this + 26))
  {
    case 0:
      v10 = 3;
      LODWORD(__p[0]) = 4997712;
      break;
    case 1:
      v10 = 3;
      LODWORD(__p[0]) = 4997715;
      break;
    case 2:
      v10 = 4;
      v6 = 1195460932;
      goto LABEL_28;
    case 3:
      v10 = 4;
      v6 = 1397114194;
      goto LABEL_28;
    case 4:
      v10 = 5;
      strcpy((char *)__p, "QMUX1");
      break;
    case 5:
      v10 = 5;
      strcpy((char *)__p, "QMUX2");
      break;
    case 6:
      v10 = 3;
      LODWORD(__p[0]) = 5066578;
      break;
    case 7:
      v10 = 4;
      v6 = 1414483778;
      goto LABEL_28;
    case 8:
      v10 = 3;
      LODWORD(__p[0]) = 4805185;
      break;
    case 9:
      v10 = 3;
      LODWORD(__p[0]) = 5526611;
      break;
    case 0xA:
      v10 = 2;
      strcpy((char *)__p, "AT");
      break;
    case 0xB:
      v10 = 4;
      v6 = 1280328769;
      goto LABEL_28;
    case 0xC:
      v10 = 8;
      strcpy((char *)__p, "MEDIACTL");
      break;
    case 0xD:
      v10 = 3;
      LODWORD(__p[0]) = 5461061;
      break;
    case 0xE:
      v10 = 4;
      v6 = 1397968455;
      goto LABEL_28;
    case 0xF:
      v10 = 4;
      v6 = 1397965905;
      goto LABEL_28;
    case 0x10:
      v10 = 5;
      strcpy((char *)__p, "RCTTH");
      break;
    case 0x11:
      v10 = 3;
      LODWORD(__p[0]) = 5260097;
      break;
    case 0x12:
      v10 = 4;
      v6 = 1297040214;
      goto LABEL_28;
    case 0x13:
      v10 = 4;
      v6 = 1129335117;
LABEL_28:
      LODWORD(__p[0]) = v6;
      BYTE4(__p[0]) = 0;
      break;
    case 0x14:
      v10 = 3;
      LODWORD(__p[0]) = 4999236;
      break;
    case 0x15:
      v10 = 3;
      LODWORD(__p[0]) = 5789005;
      break;
    case 0x16:
      v10 = 3;
      LODWORD(__p[0]) = 4407622;
      break;
    default:
      v10 = 7;
      strcpy((char *)__p, "Unknown");
      break;
  }
  v7 = "error";
  if ((_DWORD)v4)
    v7 = "success";
  *(_DWORD *)buf = 136315394;
  v12 = __p;
  v13 = 2080;
  v14 = v7;
  _os_log_impl(&dword_24B855000, v5, OS_LOG_TYPE_DEFAULT, "#I Transport close %s: %s", buf, 0x16u);
  if (v10 < 0)
    operator delete(__p[0]);
  return v4;
}

uint64_t BasebandTransport::startReader_sync(NSObject **this)
{
  size_t v2;
  dispatch_queue_t v3;
  NSObject *v4;

  if (!this[37])
  {
    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)this))
      v2 = 0x4000;
    else
      v2 = 0x8000;
    this[38] = v2;
    this[37] = operator new[](v2);
    v3 = dispatch_queue_create("ipc.bb", 0);
    v4 = this[39];
    this[39] = v3;
    if (v4)
      dispatch_release(v4);
  }
  *((_BYTE *)this + 292) = 1;
  *((_BYTE *)this + 332) = 1;
  BasebandTransport::queueRead_sync((BasebandTransport *)this);
  return *((unsigned __int8 *)this + 292);
}

void BasebandTransport::queueRead_sync(BasebandTransport *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v13[6];
  std::__shared_weak_count *v14;
  dispatch_group_t group;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = *((_QWORD *)this + 40);
  if (v6)
  {
    dispatch_retain(*((dispatch_object_t *)this + 40));
    dispatch_group_enter(v6);
  }
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1174405120;
  v13[2] = ___ZN17BasebandTransport14queueRead_syncEv_block_invoke;
  v13[3] = &__block_descriptor_tmp_63;
  v13[4] = this;
  v13[5] = v3;
  v14 = v5;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  group = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v6);
  }
  dispatch_async(*((dispatch_queue_t *)this + 39), v13);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v6)
  {
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t ___ZN17BasebandTransport10stopReaderEv_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_BYTE *)(v1 + 292);
  *(_BYTE *)(v1 + 292) = 0;
  *(_BYTE *)(v1 + 332) = 0;
  return result;
}

uint64_t ___ZN17BasebandTransport10stopReaderEv_block_invoke_2(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v1 = *(_QWORD *)(result + 40);
  v2 = *(uint64_t (**)(uint64_t))(v1 + 232);
  if (v2)
  {
    v3 = result;
    result = v2(v1 + 176);
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24))
      {
        v4 = *(uint64_t (**)(uint64_t))(v1 + 192);
        if (v4)
          return v4(v1 + 176);
      }
    }
  }
  return result;
}

void ___ZN17BasebandTransport14queueRead_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(a1 + 56);
  v3 = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v2);
  }
  BasebandTransport::read_sync(v1, &v3);
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void sub_24B898524(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void BasebandTransport::read_sync(uint64_t a1, NSObject **a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  capabilities::abs *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, int *, _QWORD, uint64_t, _QWORD);
  uint64_t v10;
  capabilities::abs *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD v31[6];
  std::__shared_weak_count *v32;
  _QWORD block[6];
  std::__shared_weak_count *v34;
  dispatch_group_t group;
  int v36;
  _QWORD v37[5];
  int v38;
  int v39;
  uint64_t v40;
  std::__shared_weak_count *v41;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  v5 = (uint64_t *)(a1 + 72);
  v40 = v6;
  if (!v4
    || (v8 = (capabilities::abs *)std::__shared_weak_count::lock(v4), (v41 = (std::__shared_weak_count *)v8) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v39 = 0;
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, _QWORD, uint64_t, _QWORD))(a1 + 184);
  v10 = MEMORY[0x24BDAC760];
  if (v9)
  {
    v11 = v8;
    v12 = *(_QWORD *)(a1 + 296);
    v13 = capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v8) ? 0x4000 : 0x8000;
    v14 = v9(a1 + 176, v12, v13, &v39, 0, 0xFFFFFFFFLL, 0);
    v15 = v39 ? v14 : 0;
    if (v15 == 1)
    {
      v37[0] = v10;
      v37[1] = 0x40000000;
      v37[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke;
      v37[3] = &__block_descriptor_tmp_64;
      v37[4] = a1;
      v38 = v39;
      ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v5, (uint64_t)v37);
      block[0] = v10;
      block[1] = 1174405120;
      block[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_2;
      block[3] = &__block_descriptor_tmp_65;
      block[4] = a1;
      block[5] = v6;
      v34 = (std::__shared_weak_count *)v11;
      v16 = (unint64_t *)((char *)v11 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v18 = *a2;
      group = v18;
      if (v18)
      {
        dispatch_retain(v18);
        dispatch_group_enter(v18);
      }
      v36 = v39;
      dispatch_sync(*(dispatch_queue_t *)(a1 + 152), block);
      v19 = group;
      if (group)
      {
        dispatch_group_leave(group);
        dispatch_release(v19);
      }
      v20 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
  }
  v31[0] = v10;
  v31[1] = 1174405120;
  v31[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_66;
  v31[3] = &__block_descriptor_tmp_67;
  v31[4] = a1;
  v31[5] = v40;
  v32 = v41;
  if (v41)
  {
    v23 = (unint64_t *)&v41->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v5, (uint64_t)v31);
  v25 = v32;
  if (v32)
  {
    v26 = (unint64_t *)&v32->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_24B8987C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE56c30_ZTSN8dispatch13group_sessionE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[7];
  a1[7] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[7];
    if (v7)
      dispatch_group_enter(v7);
  }
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 56);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 336) += *(unsigned int *)(result + 40);
  return result;
}

void ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_2(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p;
  void *v5;
  uint64_t v6;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = v2[16];
  if (v3)
  {
    __p = 0;
    v5 = 0;
    v6 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)v3 + 8))(v3, v2[37], *(unsigned int *)(a1 + 64), &__p);
    (*(void (**)(void))(v2[18] + 16))();
    if (__p)
    {
      v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    (*(void (**)(void))(v2[18] + 16))();
  }
}

void sub_24B898960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN17BasebandTransport12timerOn_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD block[6];
  std::__shared_weak_count *v22;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      if (!v6)
      {
LABEL_19:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
      v7 = (_OWORD *)(v3 + 328);
      v8 = *(_QWORD *)(v3 + 336);
      v9 = *(_QWORD *)(v3 + 376);
      v10 = *(_QWORD *)(v3 + 344) - *(_QWORD *)(v3 + 384);
      *(_QWORD *)(v3 + 352) = v8 - v9;
      *(_QWORD *)(v3 + 360) = v10;
      if (v10)
        v11 = 0;
      else
        v11 = v8 == v9;
      if (v11)
      {
        v12 = 3;
      }
      else
      {
        if (*(_DWORD *)v7 != 3)
        {
LABEL_12:
          v13 = *(_OWORD *)(v3 + 344);
          *(_OWORD *)(v3 + 368) = *v7;
          *(_OWORD *)(v3 + 384) = v13;
          *(_QWORD *)(v3 + 400) = *(_QWORD *)(v3 + 360);
          block[0] = MEMORY[0x24BDAC760];
          block[1] = 1174405120;
          block[2] = ___ZN17BasebandTransport12timerOn_syncEv_block_invoke_2;
          block[3] = &__block_descriptor_tmp_68;
          block[4] = v3;
          block[5] = v6;
          v14 = (unint64_t *)&v4->__shared_owners_;
          v22 = v4;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          dispatch_async(*(dispatch_queue_t *)(v3 + 152), block);
          v16 = v22;
          if (v22)
          {
            v17 = (unint64_t *)&v22->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          goto LABEL_19;
        }
        v12 = 1;
      }
      *(_DWORD *)v7 = v12;
      goto LABEL_12;
    }
  }
}

uint64_t ___ZN17BasebandTransport12timerOn_syncEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v9[2];
  uint64_t v10;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 272);
  v10 = *(_QWORD *)(v5 + 400);
  v7 = *(_OWORD *)(v5 + 384);
  v9[0] = *(_OWORD *)(v5 + 368);
  v9[1] = v7;
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t))(v6 + 16))(v6, v9, a3, a4, a5);
}

__n128 BasebandTransport::getStatus@<Q0>(BasebandTransport *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 45);
  result = *(__n128 *)((char *)this + 328);
  v3 = *(_OWORD *)((char *)this + 344);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void ___ZN17BasebandTransport9dumpStateEb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void **v4;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  *(int64x2_t *)(v2 + 352) = vsubq_s64(*(int64x2_t *)(v2 + 336), *(int64x2_t *)(v2 + 376));
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BasebandTransport::Parameters::toString((BasebandTransport::Parameters *)(v2 + 104), __p);
    if (v7 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v9 = v4;
    _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
    if (v7 < 0)
      operator delete(__p[0]);
    v3 = *(NSObject **)(v2 + 40);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)
    && ((BasebandTransport::Status::toString((BasebandTransport::Status *)(v2 + 328), __p), v7 >= 0)
      ? (v5 = __p)
      : (v5 = (void **)__p[0]),
        *(_DWORD *)buf = 136315138,
        v9 = v5,
        _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu),
        v7 < 0))
  {
    operator delete(__p[0]);
    if (!*(_BYTE *)(a1 + 40))
      return;
  }
  else if (!*(_BYTE *)(a1 + 40))
  {
    return;
  }
  *(_DWORD *)(v2 + 328) = 0;
  *(_BYTE *)(v2 + 332) = 0;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_QWORD *)(v2 + 365) = 0;
  BasebandTransport::timerOn_sync((BasebandTransport *)v2);
}

void BasebandTransport::reportStatus(uint64_t a1, int a2, void **a3)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[5];
  void *aBlock;
  int v10;
  _QWORD *v11;
  _QWORD block[6];

  v4 = MEMORY[0x24BDAC760];
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 1174405120;
  v8[2] = ___ZN17BasebandTransport12reportStatusEjN8dispatch5blockIU13block_pointerFvNS_6StatusEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_71;
  v8[4] = a1;
  v10 = a2;
  v5 = *a3;
  if (*a3)
    v5 = _Block_copy(v5);
  aBlock = v5;
  v11 = v8;
  block[0] = v4;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_77;
  block[4] = a1 + 72;
  block[5] = &v11;
  v6 = *(NSObject **)(a1 + 88);
  if (!*(_QWORD *)(a1 + 96))
  {
    dispatch_sync(v6, block);
    v7 = aBlock;
    if (!aBlock)
      return;
    goto LABEL_7;
  }
  dispatch_async_and_wait(v6, block);
  v7 = aBlock;
  if (aBlock)
LABEL_7:
    _Block_release(v7);
}

void ___ZN17BasebandTransport12reportStatusEjN8dispatch5blockIU13block_pointerFvNS_6StatusEEEE_block_invoke(uint64_t a1)
{
  int v1;
  void *v2;
  uint64_t v3;
  const void *v4;

  v1 = *(_DWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  *(_DWORD *)(v3 + 288) = v1;
  if (v2)
    v2 = _Block_copy(v2);
  v4 = *(const void **)(v3 + 272);
  *(_QWORD *)(v3 + 272) = v2;
  if (v4)
    _Block_release(v4);
  BasebandTransport::timerOn_sync((BasebandTransport *)v3);
}

void *__copy_helper_block_e8_40c70_ZTSN8dispatch5blockIU13block_pointerFvN17BasebandTransport6StatusEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c70_ZTSN8dispatch5blockIU13block_pointerFvN17BasebandTransport6StatusEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

uint64_t ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

double ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 16) = 0x600000000000000;
  result = *(double *)"ipc.bb";
  *(_OWORD *)a1 = *(_OWORD *)"ipc.bb";
  return result;
}

uint64_t ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBA9A0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBA9A0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ___ZL14sLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  char __p[19];
  char v19;
  __int128 v20;

  v19 = 18;
  strcpy(__p, "baseband.transport");
  ctu::LogServer::create();
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v20;
  v20 = 0uLL;
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)v2 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (*((_QWORD *)&v20 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v20 + 1) + 16))(*((_QWORD *)&v20 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
      if ((v19 & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  if (v19 < 0)
LABEL_11:
    operator delete(*(void **)__p);
LABEL_12:
  v9 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_251CBAA00;
  *(_QWORD *)__p = v9;
  v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_251CBAA68;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = v9;
  *(_QWORD *)&__p[8] = v10;
  v17 = v10;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  ctu::LogServer::addWriter();
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  ctu::LogServer::setEnabled(**(ctu::LogServer ***)(a1 + 32));
  if (*(_QWORD *)&__p[8])
  {
    v15 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
    }
  }
}

void sub_24B899168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_24B899184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_24B8991AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B9526FFLL)
    return a1 + 24;
  if (((v3 & 0x800000024B9526FFLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B9526FFLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B9526FFLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBA9A0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport*)#1}::operator() const(BasebandTransport*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_"
                                "ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport*)#1}::operator() const(BasebandTransport*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb0_E3__0EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (**v6)(const void *, _OWORD *, uint64_t, uint64_t, uint64_t);
  __int128 v7;
  _OWORD v8[2];
  uint64_t v9;

  v6 = *(void (***)(const void *, _OWORD *, uint64_t, uint64_t, uint64_t))a1;
  v7 = *(_OWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 40);
  v8[0] = *(_OWORD *)(a1 + 8);
  v8[1] = v7;
  v6[2](v6, v8, a3, a4, a5);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  operator delete((void *)a1);
}

void sub_24B899438(_Unwind_Exception *a1)
{
  const void **v1;

  if (*v1)
    _Block_release(*v1);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(const void **a1)
{
  void *v2;

  (*((void (**)(void))*a1 + 2))();
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  if (*a1)
    _Block_release(*a1);
  operator delete(a1);
}

void sub_24B8994B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(_QWORD *)(v1 + 16) = v3;
    operator delete(v3);
  }
  if (*(_QWORD *)v1)
    _Block_release(*(const void **)v1);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__2EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(void *a1)
{
  const void *v2;

  (*(void (**)(void))(*(_QWORD *)a1 + 16))();
  if (*((_BYTE *)a1 + 20))
  {
    v2 = *(const void **)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_6;
    goto LABEL_5;
  }
  free(*((void **)a1 + 1));
  v2 = *(const void **)a1;
  if (*(_QWORD *)a1)
LABEL_5:
    _Block_release(v2);
LABEL_6:
  operator delete(a1);
}

void sub_24B899540(_Unwind_Exception *a1)
{
  const void **v1;

  if (*v1)
    _Block_release(*v1);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_251CBAB60;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIK17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIK17BasebandTransportEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void RadioModule::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  dispatch_object_t object;
  uint64_t v46;
  std::__shared_weak_count *v47;
  __int128 v48;
  void (*v49)(uint64_t);
  void *v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x168uLL);
  v5 = (std::__shared_weak_count *)a1[1];
  v46 = *a1;
  v47 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = v48;
    v48 = 0uLL;
    v11 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (*((_QWORD *)&v48 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v48 + 1) + 16))(*((_QWORD *)&v48 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v48 + 1));
      }
    }
    v9 = off_2579B85E0;
  }
  v16 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v17 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t))(*(_QWORD *)v9 + 24))(&object, v9);
  RadioModule::RadioModule((uint64_t)v4, &v46, &object);
  *a2 = v4;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v19 = (std::__shared_weak_count *)operator new(0x20uLL);
  v19->__shared_owners_ = 0;
  v20 = (unint64_t *)&v19->__shared_owners_;
  v19->__vftable = (std::__shared_weak_count_vtbl *)off_251CBB7A0;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a2[1] = v19;
  v21 = (std::__shared_weak_count *)*((_QWORD *)v4 + 16);
  if (v21)
  {
    if (v21->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v22 = __ldxr(v20);
    while (__stxr(v22 + 1, v20));
    v23 = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    *((_QWORD *)v4 + 15) = v4;
    *((_QWORD *)v4 + 16) = v19;
    std::__shared_weak_count::__release_weak(v21);
  }
  else
  {
    do
      v25 = __ldxr(v20);
    while (__stxr(v25 + 1, v20));
    v26 = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    *((_QWORD *)v4 + 15) = v4;
    *((_QWORD *)v4 + 16) = v19;
  }
  do
    v28 = __ldaxr(v20);
  while (__stlxr(v28 - 1, v20));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v29 = (_QWORD *)*a2;
    if (!*(_QWORD *)(*a2 + 104))
      goto LABEL_47;
    goto LABEL_32;
  }
LABEL_31:
  v29 = (_QWORD *)*a2;
  if (!*(_QWORD *)(*a2 + 104))
    goto LABEL_47;
LABEL_32:
  v30 = (std::__shared_weak_count *)v29[16];
  if (!v30 || (v31 = v29[15], (v32 = std::__shared_weak_count::lock(v30)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v33 = v32;
  *(_QWORD *)&v48 = v31;
  *((_QWORD *)&v48 + 1) = v32;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v29 + 7));
  v34 = v31 + 48;
  if (!v31)
    v34 = 0;
  v52 = v34;
  v53 = v33;
  v48 = 0uLL;
  ctu::TrackedLogger::registerLoggerToServer();
  v35 = v53;
  if (v53)
  {
    v36 = (unint64_t *)&v53->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
LABEL_47:
  if (object)
    dispatch_release(object);
  if (v16)
  {
    v41 = (unint64_t *)&v16->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v47)
    std::__shared_weak_count::__release_weak(v47);
  v43 = *a2;
  v44 = (uint64_t *)(*a2 + 120);
  *(_QWORD *)&v48 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v48 + 1) = 0x40000000;
  v49 = ___ZN11RadioModule4initEv_block_invoke;
  v50 = &__block_descriptor_tmp_8;
  v51 = v43;
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v44, (uint64_t)&v48);
}

void sub_24B899AB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, uint64_t a13, uint64_t a14, char a15)
{
  __break(1u);
}

void sub_24B899B14()
{
  __cxa_end_catch();
  JUMPOUT(0x24B899B58);
}

void sub_24B899B24()
{
  JUMPOUT(0x24B899B5CLL);
}

void sub_24B899B30()
{
  JUMPOUT(0x24B899B68);
}

void sub_24B899B40()
{
  JUMPOUT(0x24B899B74);
}

void RadioModule::init(RadioModule *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x24BDAC760];
  v1[1] = 0x40000000;
  v1[2] = ___ZN11RadioModule4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_8;
  v1[4] = this;
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)this + 15, (uint64_t)v1);
}

uint64_t RadioModule::RadioModule(uint64_t a1, uint64_t *a2, NSObject **a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  void (**v12)(RadioModule *__hidden);
  const char *v13;
  unsigned __int8 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  NSObject *initially_inactive;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  void **v28;
  uint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  void *v47;
  uint64_t Controller;
  const void *v49;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  _BYTE v53[16];
  _QWORD v54[2];
  __int128 block;
  void (*v56)(uint64_t);
  void *v57;
  uint64_t *v58;

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_251CC0DB8;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(_QWORD *)a1 = &unk_251CB9EC8;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_251CB9EC8;
    *(_QWORD *)(a1 + 8) = v5;
  }
  *(_QWORD *)a1 = off_251CBABA0;
  *(_QWORD *)(a1 + 48) = &unk_251CBAC10;
  v51 = (_QWORD *)(a1 + 48);
  v11 = *a3;
  if (v11)
  {
    dispatch_retain(v11);
    v12 = *(void (***)(RadioModule *__hidden))a1;
  }
  else
  {
    v12 = off_251CBABA0;
  }
  v13 = (const char *)((uint64_t (*)(uint64_t))v12[2])(a1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v53, "com.apple.telephony.abm", v13);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  *(_QWORD *)&block = MEMORY[0x24BDAC760];
  *((_QWORD *)&block + 1) = 0x40000000;
  v56 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v57 = &__block_descriptor_tmp_13_5;
  v58 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v15 = GetABMLogServer(void)::sLogServer;
    v16 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_17;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v15 = GetABMLogServer(void)::sLogServer;
    v16 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(p_shared_owners);
  while (__stxr(v18 + 1, p_shared_owners));
LABEL_17:
  if (v11)
    dispatch_retain(v11);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v20 = dispatch_queue_create_with_target_V2("radio.mod", initially_inactive, v11);
  dispatch_set_qos_class_floor(v20, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v20);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v20;
  if (v20)
    dispatch_retain(v20);
  *(_QWORD *)(a1 + 144) = v11;
  if (v11)
    dispatch_retain(v11);
  if (v20)
    dispatch_release(v20);
  if (v11)
    dispatch_release(v11);
  *(_QWORD *)(a1 + 48) = off_251CBB760;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&block);
  *(_QWORD *)(a1 + 56) = &unk_251CB85F0;
  *(_QWORD *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 112) = v16;
  if (v16)
  {
    v21 = (unint64_t *)&v16->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v54);
    *v51 = off_251CBB7F0;
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v54);
    *v51 = off_251CBB7F0;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v53);
  if (v11)
    dispatch_release(v11);
  *(_QWORD *)a1 = off_251CBABA0;
  *(_QWORD *)(a1 + 175) = 0;
  *(_QWORD *)(a1 + 48) = &unk_251CBAC10;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 183) = 0;
  *(_WORD *)(a1 + 191) = 768;
  radio::RFCalibration_t::RFCalibration_t((radio::RFCalibration_t *)(a1 + 200));
  *(_QWORD *)(a1 + 248) = xpc_null_create();
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_BYTE *)(a1 + 288) = 1;
  *(_BYTE *)(a1 + 296) = 0;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  *(_QWORD *)&block = MEMORY[0x24BDAC760];
  *((_QWORD *)&block + 1) = 0x40000000;
  v56 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v57 = &__block_descriptor_tmp_13_5;
  v58 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v25 = *(_QWORD *)algn_2579B8AE8;
    v52 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_42;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v25 = *(_QWORD *)algn_2579B8AE8;
    v52 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_42;
  }
  v26 = (unint64_t *)(v25 + 8);
  do
    v27 = __ldxr(v26);
  while (__stxr(v27 + 1, v26));
LABEL_42:
  v28 = (void **)(a1 + 248);
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v29 = off_2579B8480;
  if (!off_2579B8480)
  {
    ABMServer::create_default_global(&block);
    v30 = block;
    block = 0uLL;
    v31 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
    off_2579B8480 = v30;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
    if (*((_QWORD *)&block + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v29 = off_2579B8480;
  }
  v37 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
  v54[0] = v29;
  v54[1] = *(&off_2579B8480 + 1);
  if (*(&off_2579B8480 + 1))
  {
    v38 = (unint64_t *)(*(&off_2579B8480 + 1) + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::iokit::Controller::create();
  if (v37)
  {
    v40 = (unint64_t *)&v37->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v52)
  {
    v42 = (unint64_t *)&v52->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  *(_WORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 322) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 328;
  *(_QWORD *)(a1 + 336) = a1 + 328;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  v44 = xpc_dictionary_create(0, 0, 0);
  if (v44 || (v44 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v44) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v44);
      v45 = v44;
    }
    else
    {
      v45 = xpc_null_create();
    }
  }
  else
  {
    v45 = xpc_null_create();
    v44 = 0;
  }
  xpc_release(v44);
  v46 = xpc_null_create();
  v47 = *v28;
  *v28 = v45;
  xpc_release(v47);
  xpc_release(v46);
  Controller = TelephonyBasebandCreateController();
  v49 = *(const void **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = Controller;
  if (v49)
    CFRelease(v49);
  return a1;
}

void sub_24B89A27C(_Unwind_Exception *a1, uint64_t a2, _QWORD *a3, ...)
{
  void **v3;
  xpc_object_t *v4;
  char *v5;
  va_list va;

  va_start(va, a3);
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 34));
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 32));
  xpc::dict::~dict(v4);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 22));
  if (*v5 < 0)
    operator delete(v3[19]);
  ctu::SharedLoggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(a3);
  Service::~Service((Service *)v3);
  _Unwind_Resume(a1);
}

void sub_24B89A344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  Service *v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;
  uint64_t v17;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v7);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  if (v6)
    dispatch_release(v6);
  Service::~Service(v5);
  _Unwind_Resume(a1);
}

void xpc::dict::~dict(xpc_object_t *this)
{
  xpc_release(*this);
  *this = 0;
}

const void **ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t *std::list<boost::signals2::connection>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 3;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

_QWORD *ctu::SharedLoggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBB760;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBB760;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void RadioModule::~RadioModule(RadioModule *this)
{
  NSObject *v2;
  const void *v3;
  uint64_t v4;
  RadioModule *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  RadioModule *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  std::__shared_weak_count *v30;
  uint8_t v31[16];

  *(_QWORD *)this = off_251CBABA0;
  *((_QWORD *)this + 6) = &unk_251CBAC10;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v31 = 0;
    _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v31, 2u);
  }
  v3 = (const void *)*((_QWORD *)this + 44);
  if (v3)
    CFRelease(v3);
  if (*((_QWORD *)this + 43))
  {
    v4 = *((_QWORD *)this + 41);
    v5 = (RadioModule *)*((_QWORD *)this + 42);
    v6 = *(_QWORD *)v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    *((_QWORD *)this + 43) = 0;
    if (v5 != (RadioModule *)((char *)this + 328))
    {
      do
      {
        v25 = (RadioModule *)*((_QWORD *)v5 + 1);
        v26 = (unsigned int *)*((_QWORD *)v5 + 3);
        if (v26)
        {
          v27 = v26 + 3;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
            (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 24))(v26);
        }
        operator delete(v5);
        v5 = v25;
      }
      while (v25 != (RadioModule *)((char *)this + 328));
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  xpc_release(*((xpc_object_t *)this + 31));
  *((_QWORD *)this + 31) = 0;
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (!v16)
    goto LABEL_26;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_26:
    if ((*((char *)this + 175) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if (*((char *)this + 175) < 0)
LABEL_27:
    operator delete(*((void **)this + 19));
LABEL_28:
  *((_QWORD *)this + 6) = off_251CBB760;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v19 = *((_QWORD *)this + 18);
  if (v19)
    dispatch_release(v19);
  v20 = *((_QWORD *)this + 17);
  if (v20)
    dispatch_release(v20);
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  *(_QWORD *)this = off_251CC0DB8;
  v22 = *((_QWORD *)this + 3);
  if (v22)
  {
    v23 = *((_QWORD *)this + 4);
    v24 = (void *)*((_QWORD *)this + 3);
    if (v23 != v22)
    {
      do
      {
        if (*(char *)(v23 - 1) < 0)
          operator delete(*(void **)(v23 - 24));
        v23 -= 24;
      }
      while (v23 != v22);
      v24 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v22;
    operator delete(v24);
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
}

{
  void *v1;

  RadioModule::~RadioModule(this);
  operator delete(v1);
}

void `non-virtual thunk to'RadioModule::~RadioModule(RadioModule *this)
{
  RadioModule::~RadioModule((RadioModule *)((char *)this - 48));
}

{
  void *v1;

  RadioModule::~RadioModule((RadioModule *)((char *)this - 48));
  operator delete(v1);
}

const char *RadioModule::getName(RadioModule *this)
{
  return "radio.mod";
}

void ___ZN11RadioModule4initEv_block_invoke(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_24B855000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing", v2, 2u);
  }
}

_BYTE *RadioModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void RadioModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t *v4;
  NSObject *v5;
  _QWORD v6[5];
  dispatch_group_t group;
  char v8;

  v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 1174405120;
  v6[2] = ___ZN11RadioModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_5_1;
  v5 = *a3;
  v6[4] = a1;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v8 = a2;
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN11RadioModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *i;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int j;
  unsigned int v7;
  boost::signals2::detail::connection_body_base *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1 + 41;
  for (i = (uint64_t *)v1[42]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = (unsigned int *)i[3];
    if (v4)
    {
      v5 = v4 + 2;
      for (j = v4[2]; j; j = v7)
      {
        v7 = __ldxr(v5);
        if (v7 == j)
        {
          if (!__stxr(j + 1, v5))
          {
            v8 = (boost::signals2::detail::connection_body_base *)i[2];
            if (v8)
              boost::signals2::detail::connection_body_base::disconnect(v8);
            do
            {
              v9 = __ldaxr(v5);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v5));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v11 = v4 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
  }
  if (v1[43])
  {
    v14 = v1[41];
    v15 = (uint64_t *)v1[42];
    v16 = *v15;
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v16;
    v1[43] = 0;
    if (v15 != v2)
    {
      do
      {
        v26 = (uint64_t *)v15[1];
        v27 = (unsigned int *)v15[3];
        if (v27)
        {
          v28 = v27 + 3;
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
            (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
        }
        operator delete(v15);
        v15 = v26;
      }
      while (v26 != v2);
    }
  }
  v17 = (std::__shared_weak_count *)v1[35];
  v1[34] = 0;
  v1[35] = 0;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)v1[33];
  v1[32] = 0;
  v1[33] = 0;
  if (!v20)
    goto LABEL_30;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = (std::__shared_weak_count *)v1[23];
    v1[22] = 0;
    v1[23] = 0;
    if (!v23)
      return;
  }
  else
  {
LABEL_30:
    v23 = (std::__shared_weak_count *)v1[23];
    v1[22] = 0;
    v1[23] = 0;
    if (!v23)
      return;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
}

void sub_24B89AB58(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  do
  {
    v4 = __ldaxr(v2);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v2));
  if (!v5)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
    v6 = v1 + 3;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

void RadioModule::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[5];
  dispatch_group_t group;

  v3 = a1 + 15;
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 1174405120;
  v15[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v15[3] = &__block_descriptor_tmp_93;
  v4 = *a2;
  v15[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v3, (uint64_t)v15);
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(8uLL);
  *v9 = a1;
  v10 = a1[17];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::initialize(dispatch::group_session)::$_0>(RadioModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  const void *v35;
  size_t v36;
  size_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  const void *v43;
  size_t v44;
  size_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  const void *v51;
  size_t v52;
  size_t v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  const void *v59;
  size_t v60;
  size_t v61;
  void **v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  const void *v67;
  size_t v68;
  size_t v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  const void *v75;
  size_t v76;
  size_t v77;
  void **v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  const void *v83;
  size_t v84;
  size_t v85;
  void **v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  const void *v91;
  size_t v92;
  size_t v93;
  void **v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  const void *v99;
  size_t v100;
  size_t v101;
  void **v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  const void *v107;
  size_t v108;
  size_t v109;
  void **v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  const void *v115;
  size_t v116;
  size_t v117;
  void **v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  void *v122;
  capabilities::abs *v123;
  const void *v124;
  size_t v125;
  size_t v126;
  void **v127;
  NSObject *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  const void *v133;
  size_t v134;
  size_t v135;
  void **v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  const void *v141;
  size_t v142;
  size_t v143;
  void **v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  const void *v149;
  size_t v150;
  size_t v151;
  void **v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  void *v156;
  const void *v157;
  size_t v158;
  size_t v159;
  void **v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  const void *v165;
  size_t v166;
  size_t v167;
  void **v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void *v172;
  const void *v173;
  size_t v174;
  size_t v175;
  void **v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  capabilities::abs *v181;
  const void *v182;
  size_t v183;
  size_t v184;
  void **v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  void *v189;
  const void *v190;
  size_t v191;
  size_t v192;
  void **v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  void *v197;
  const void *v198;
  size_t v199;
  size_t v200;
  void **v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  void *v205;
  const void *v206;
  size_t v207;
  size_t v208;
  void **v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  void *v213;
  _QWORD v214[5];
  std::__shared_weak_count *v215;
  const void *v216;
  _QWORD v217[5];
  std::__shared_weak_count *v218;
  const void *v219;
  _QWORD v220[5];
  std::__shared_weak_count *v221;
  const void *v222;
  _QWORD v223[6];
  std::__shared_weak_count *v224;
  const void *v225;
  _QWORD v226[6];
  std::__shared_weak_count *v227;
  const void *v228;
  _QWORD v229[6];
  std::__shared_weak_count *v230;
  const void *v231;
  _QWORD v232[6];
  std::__shared_weak_count *v233;
  const void *v234;
  _QWORD v235[6];
  std::__shared_weak_count *v236;
  const void *v237;
  _QWORD v238[6];
  std::__shared_weak_count *v239;
  const void *v240;
  _QWORD v241[6];
  std::__shared_weak_count *v242;
  const void *v243;
  _QWORD v244[6];
  std::__shared_weak_count *v245;
  const void *v246;
  _QWORD v247[6];
  std::__shared_weak_count *v248;
  const void *v249;
  _QWORD v250[6];
  std::__shared_weak_count *v251;
  const void *v252;
  _QWORD v253[6];
  std::__shared_weak_count *v254;
  const void *v255;
  _QWORD v256[6];
  std::__shared_weak_count *v257;
  const void *v258;
  _QWORD v259[6];
  std::__shared_weak_count *v260;
  const void *v261;
  _QWORD v262[6];
  std::__shared_weak_count *v263;
  const void *v264;
  _QWORD v265[6];
  std::__shared_weak_count *v266;
  const void *v267;
  _QWORD v268[6];
  std::__shared_weak_count *v269;
  const void *v270;
  _QWORD v271[6];
  std::__shared_weak_count *v272;
  const void *v273;
  _QWORD v274[6];
  std::__shared_weak_count *v275;
  const void *v276;
  _QWORD v277[6];
  std::__shared_weak_count *v278;
  const void *v279;
  _QWORD v280[6];
  std::__shared_weak_count *v281;
  const void *v282;
  _QWORD v283[6];
  std::__shared_weak_count *v284;
  const void *v285;
  _QWORD aBlock[6];
  std::__shared_weak_count *v287;
  const void *v288;
  void **__dst;
  size_t v290;
  unint64_t v291;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (std::__shared_weak_count *)v1[16];
  if (!v2 || (v3 = v1[15], (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const void *)*MEMORY[0x24BE05298];
  v11 = strlen((const char *)*MEMORY[0x24BE05298]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v290 = v12;
    v291 = v15 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v291) = v11;
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v12);
LABEL_17:
  *((_BYTE *)p_dst + v12) = 0;
  v16 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_13_1;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v287 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = _Block_copy(aBlock);
  v288 = v18;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v288);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v19 = (const void *)*MEMORY[0x24BE05688];
  v20 = strlen((const char *)*MEMORY[0x24BE05688]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    v290 = v21;
    v291 = v24 | 0x8000000000000000;
    __dst = v22;
  }
  else
  {
    HIBYTE(v291) = v20;
    v22 = (void **)&__dst;
    if (!v20)
      goto LABEL_31;
  }
  memmove(v22, v19, v21);
LABEL_31:
  *((_BYTE *)v22 + v21) = 0;
  v283[0] = v16;
  v283[1] = 1174405120;
  v283[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_14;
  v283[3] = &__block_descriptor_tmp_20_0;
  v283[4] = v1;
  v283[5] = v3;
  v284 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = _Block_copy(v283);
  v285 = v26;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v285);
  if (v26)
    _Block_release(v26);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v27 = (const void *)*MEMORY[0x24BE05720];
  v28 = strlen((const char *)*MEMORY[0x24BE05720]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = (void **)operator new(v31 + 1);
    v290 = v29;
    v291 = v32 | 0x8000000000000000;
    __dst = v30;
  }
  else
  {
    HIBYTE(v291) = v28;
    v30 = (void **)&__dst;
    if (!v28)
      goto LABEL_45;
  }
  memmove(v30, v27, v29);
LABEL_45:
  *((_BYTE *)v30 + v29) = 0;
  v280[0] = v16;
  v280[1] = 1174405120;
  v280[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_21;
  v280[3] = &__block_descriptor_tmp_27_0;
  v280[4] = v1;
  v280[5] = v3;
  v281 = v5;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  v34 = _Block_copy(v280);
  v282 = v34;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v282);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v35 = (const void *)*MEMORY[0x24BE05730];
  v36 = strlen((const char *)*MEMORY[0x24BE05730]);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v37 = v36;
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = (void **)operator new(v39 + 1);
    v290 = v37;
    v291 = v40 | 0x8000000000000000;
    __dst = v38;
  }
  else
  {
    HIBYTE(v291) = v36;
    v38 = (void **)&__dst;
    if (!v36)
      goto LABEL_59;
  }
  memmove(v38, v35, v37);
LABEL_59:
  *((_BYTE *)v38 + v37) = 0;
  v277[0] = v16;
  v277[1] = 1174405120;
  v277[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_28;
  v277[3] = &__block_descriptor_tmp_34;
  v277[4] = v1;
  v277[5] = v3;
  v278 = v5;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  v42 = _Block_copy(v277);
  v279 = v42;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v279);
  if (v42)
    _Block_release(v42);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v43 = (const void *)*MEMORY[0x24BE05718];
  v44 = strlen((const char *)*MEMORY[0x24BE05718]);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v45 = v44;
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    v46 = (void **)operator new(v47 + 1);
    v290 = v45;
    v291 = v48 | 0x8000000000000000;
    __dst = v46;
  }
  else
  {
    HIBYTE(v291) = v44;
    v46 = (void **)&__dst;
    if (!v44)
      goto LABEL_73;
  }
  memmove(v46, v43, v45);
LABEL_73:
  *((_BYTE *)v46 + v45) = 0;
  v274[0] = v16;
  v274[1] = 1174405120;
  v274[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_35;
  v274[3] = &__block_descriptor_tmp_40;
  v274[4] = v1;
  v274[5] = v3;
  v275 = v5;
  do
    v49 = __ldxr(p_shared_weak_owners);
  while (__stxr(v49 + 1, p_shared_weak_owners));
  v50 = _Block_copy(v274);
  v276 = v50;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v276);
  if (v50)
    _Block_release(v50);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v51 = (const void *)*MEMORY[0x24BE05590];
  v52 = strlen((const char *)*MEMORY[0x24BE05590]);
  if (v52 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v53 = v52;
  if (v52 >= 0x17)
  {
    v55 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v52 | 7) != 0x17)
      v55 = v52 | 7;
    v56 = v55 + 1;
    v54 = (void **)operator new(v55 + 1);
    v290 = v53;
    v291 = v56 | 0x8000000000000000;
    __dst = v54;
  }
  else
  {
    HIBYTE(v291) = v52;
    v54 = (void **)&__dst;
    if (!v52)
      goto LABEL_87;
  }
  memmove(v54, v51, v53);
LABEL_87:
  *((_BYTE *)v54 + v53) = 0;
  v271[0] = v16;
  v271[1] = 1174405120;
  v271[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_41;
  v271[3] = &__block_descriptor_tmp_44;
  v271[4] = v1;
  v271[5] = v3;
  v272 = v5;
  do
    v57 = __ldxr(p_shared_weak_owners);
  while (__stxr(v57 + 1, p_shared_weak_owners));
  v58 = _Block_copy(v271);
  v273 = v58;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v273);
  if (v58)
    _Block_release(v58);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v59 = (const void *)*MEMORY[0x24BE055A0];
  v60 = strlen((const char *)*MEMORY[0x24BE055A0]);
  if (v60 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v61 = v60;
  if (v60 >= 0x17)
  {
    v63 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v60 | 7) != 0x17)
      v63 = v60 | 7;
    v64 = v63 + 1;
    v62 = (void **)operator new(v63 + 1);
    v290 = v61;
    v291 = v64 | 0x8000000000000000;
    __dst = v62;
  }
  else
  {
    HIBYTE(v291) = v60;
    v62 = (void **)&__dst;
    if (!v60)
      goto LABEL_101;
  }
  memmove(v62, v59, v61);
LABEL_101:
  *((_BYTE *)v62 + v61) = 0;
  v268[0] = v16;
  v268[1] = 1174405120;
  v268[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_45;
  v268[3] = &__block_descriptor_tmp_52_0;
  v268[4] = v1;
  v268[5] = v3;
  v269 = v5;
  do
    v65 = __ldxr(p_shared_weak_owners);
  while (__stxr(v65 + 1, p_shared_weak_owners));
  v66 = _Block_copy(v268);
  v270 = v66;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v270);
  if (v66)
    _Block_release(v66);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v67 = (const void *)*MEMORY[0x24BE04F08];
  v68 = strlen((const char *)*MEMORY[0x24BE04F08]);
  if (v68 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v69 = v68;
  if (v68 >= 0x17)
  {
    v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v68 | 7) != 0x17)
      v71 = v68 | 7;
    v72 = v71 + 1;
    v70 = (void **)operator new(v71 + 1);
    v290 = v69;
    v291 = v72 | 0x8000000000000000;
    __dst = v70;
  }
  else
  {
    HIBYTE(v291) = v68;
    v70 = (void **)&__dst;
    if (!v68)
      goto LABEL_115;
  }
  memmove(v70, v67, v69);
LABEL_115:
  *((_BYTE *)v70 + v69) = 0;
  v265[0] = v16;
  v265[1] = 1174405120;
  v265[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_53;
  v265[3] = &__block_descriptor_tmp_58_0;
  v265[4] = v1;
  v265[5] = v3;
  v266 = v5;
  do
    v73 = __ldxr(p_shared_weak_owners);
  while (__stxr(v73 + 1, p_shared_weak_owners));
  v74 = _Block_copy(v265);
  v267 = v74;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v267);
  if (v74)
    _Block_release(v74);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v75 = (const void *)*MEMORY[0x24BE057D8];
  v76 = strlen((const char *)*MEMORY[0x24BE057D8]);
  if (v76 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v77 = v76;
  if (v76 >= 0x17)
  {
    v79 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v76 | 7) != 0x17)
      v79 = v76 | 7;
    v80 = v79 + 1;
    v78 = (void **)operator new(v79 + 1);
    v290 = v77;
    v291 = v80 | 0x8000000000000000;
    __dst = v78;
  }
  else
  {
    HIBYTE(v291) = v76;
    v78 = (void **)&__dst;
    if (!v76)
      goto LABEL_129;
  }
  memmove(v78, v75, v77);
LABEL_129:
  *((_BYTE *)v78 + v77) = 0;
  v262[0] = v16;
  v262[1] = 1174405120;
  v262[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_59;
  v262[3] = &__block_descriptor_tmp_60;
  v262[4] = v1;
  v262[5] = v3;
  v263 = v5;
  do
    v81 = __ldxr(p_shared_weak_owners);
  while (__stxr(v81 + 1, p_shared_weak_owners));
  v82 = _Block_copy(v262);
  v264 = v82;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v264);
  if (v82)
    _Block_release(v82);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v83 = (const void *)*MEMORY[0x24BE05100];
  v84 = strlen((const char *)*MEMORY[0x24BE05100]);
  if (v84 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v85 = v84;
  if (v84 >= 0x17)
  {
    v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17)
      v87 = v84 | 7;
    v88 = v87 + 1;
    v86 = (void **)operator new(v87 + 1);
    v290 = v85;
    v291 = v88 | 0x8000000000000000;
    __dst = v86;
  }
  else
  {
    HIBYTE(v291) = v84;
    v86 = (void **)&__dst;
    if (!v84)
      goto LABEL_143;
  }
  memmove(v86, v83, v85);
LABEL_143:
  *((_BYTE *)v86 + v85) = 0;
  v259[0] = v16;
  v259[1] = 1174405120;
  v259[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_61;
  v259[3] = &__block_descriptor_tmp_62_0;
  v259[4] = v1;
  v259[5] = v3;
  v260 = v5;
  do
    v89 = __ldxr(p_shared_weak_owners);
  while (__stxr(v89 + 1, p_shared_weak_owners));
  v90 = _Block_copy(v259);
  v261 = v90;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v261);
  if (v90)
    _Block_release(v90);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v91 = (const void *)*MEMORY[0x24BE05518];
  v92 = strlen((const char *)*MEMORY[0x24BE05518]);
  if (v92 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v93 = v92;
  if (v92 >= 0x17)
  {
    v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v92 | 7) != 0x17)
      v95 = v92 | 7;
    v96 = v95 + 1;
    v94 = (void **)operator new(v95 + 1);
    v290 = v93;
    v291 = v96 | 0x8000000000000000;
    __dst = v94;
  }
  else
  {
    HIBYTE(v291) = v92;
    v94 = (void **)&__dst;
    if (!v92)
      goto LABEL_157;
  }
  memmove(v94, v91, v93);
LABEL_157:
  *((_BYTE *)v94 + v93) = 0;
  v256[0] = v16;
  v256[1] = 1174405120;
  v256[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_63;
  v256[3] = &__block_descriptor_tmp_64_0;
  v256[4] = v1;
  v256[5] = v3;
  v257 = v5;
  do
    v97 = __ldxr(p_shared_weak_owners);
  while (__stxr(v97 + 1, p_shared_weak_owners));
  v98 = _Block_copy(v256);
  v258 = v98;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v258);
  if (v98)
    _Block_release(v98);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v99 = (const void *)*MEMORY[0x24BE05600];
  v100 = strlen((const char *)*MEMORY[0x24BE05600]);
  if (v100 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v101 = v100;
  if (v100 >= 0x17)
  {
    v103 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v100 | 7) != 0x17)
      v103 = v100 | 7;
    v104 = v103 + 1;
    v102 = (void **)operator new(v103 + 1);
    v290 = v101;
    v291 = v104 | 0x8000000000000000;
    __dst = v102;
  }
  else
  {
    HIBYTE(v291) = v100;
    v102 = (void **)&__dst;
    if (!v100)
      goto LABEL_171;
  }
  memmove(v102, v99, v101);
LABEL_171:
  *((_BYTE *)v102 + v101) = 0;
  v253[0] = v16;
  v253[1] = 1174405120;
  v253[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_65;
  v253[3] = &__block_descriptor_tmp_66;
  v253[4] = v1;
  v253[5] = v3;
  v254 = v5;
  do
    v105 = __ldxr(p_shared_weak_owners);
  while (__stxr(v105 + 1, p_shared_weak_owners));
  v106 = _Block_copy(v253);
  v255 = v106;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v255);
  if (v106)
    _Block_release(v106);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v107 = (const void *)*MEMORY[0x24BE05250];
  v108 = strlen((const char *)*MEMORY[0x24BE05250]);
  if (v108 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v109 = v108;
  if (v108 >= 0x17)
  {
    v111 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v108 | 7) != 0x17)
      v111 = v108 | 7;
    v112 = v111 + 1;
    v110 = (void **)operator new(v111 + 1);
    v290 = v109;
    v291 = v112 | 0x8000000000000000;
    __dst = v110;
  }
  else
  {
    HIBYTE(v291) = v108;
    v110 = (void **)&__dst;
    if (!v108)
      goto LABEL_185;
  }
  memmove(v110, v107, v109);
LABEL_185:
  *((_BYTE *)v110 + v109) = 0;
  v250[0] = v16;
  v250[1] = 1174405120;
  v250[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_67;
  v250[3] = &__block_descriptor_tmp_68_0;
  v250[4] = v1;
  v250[5] = v3;
  v251 = v5;
  do
    v113 = __ldxr(p_shared_weak_owners);
  while (__stxr(v113 + 1, p_shared_weak_owners));
  v114 = _Block_copy(v250);
  v252 = v114;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v252);
  if (v114)
    _Block_release(v114);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v115 = (const void *)*MEMORY[0x24BE057A0];
  v116 = strlen((const char *)*MEMORY[0x24BE057A0]);
  if (v116 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v117 = v116;
  if (v116 >= 0x17)
  {
    v119 = (v116 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v116 | 7) != 0x17)
      v119 = v116 | 7;
    v120 = v119 + 1;
    v118 = (void **)operator new(v119 + 1);
    v290 = v117;
    v291 = v120 | 0x8000000000000000;
    __dst = v118;
  }
  else
  {
    HIBYTE(v291) = v116;
    v118 = (void **)&__dst;
    if (!v116)
      goto LABEL_199;
  }
  memmove(v118, v115, v117);
LABEL_199:
  *((_BYTE *)v118 + v117) = 0;
  v247[0] = v16;
  v247[1] = 1174405120;
  v247[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_69;
  v247[3] = &__block_descriptor_tmp_70_0;
  v247[4] = v1;
  v247[5] = v3;
  v248 = v5;
  do
    v121 = __ldxr(p_shared_weak_owners);
  while (__stxr(v121 + 1, p_shared_weak_owners));
  v122 = _Block_copy(v247);
  v249 = v122;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v249);
  if (v122)
    _Block_release(v122);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  if (capabilities::abs::supportsRFSelfTest(v123))
  {
    v124 = (const void *)*MEMORY[0x24BE05760];
    v125 = strlen((const char *)*MEMORY[0x24BE05760]);
    if (v125 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v126 = v125;
    if (v125 >= 0x17)
    {
      v129 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v125 | 7) != 0x17)
        v129 = v125 | 7;
      v130 = v129 + 1;
      v127 = (void **)operator new(v129 + 1);
      v290 = v126;
      v291 = v130 | 0x8000000000000000;
      __dst = v127;
    }
    else
    {
      HIBYTE(v291) = v125;
      v127 = (void **)&__dst;
      if (!v125)
        goto LABEL_216;
    }
    memmove(v127, v124, v126);
LABEL_216:
    *((_BYTE *)v127 + v126) = 0;
    v244[0] = v16;
    v244[1] = 1174405120;
    v244[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_71;
    v244[3] = &__block_descriptor_tmp_72;
    v244[4] = v1;
    v244[5] = v3;
    v245 = v5;
    do
      v131 = __ldxr(p_shared_weak_owners);
    while (__stxr(v131 + 1, p_shared_weak_owners));
    v132 = _Block_copy(v244);
    v246 = v132;
    Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v246);
    if (v132)
      _Block_release(v132);
    if (SHIBYTE(v291) < 0)
      operator delete(__dst);
    v133 = (const void *)*MEMORY[0x24BE05768];
    v134 = strlen((const char *)*MEMORY[0x24BE05768]);
    if (v134 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v135 = v134;
    if (v134 >= 0x17)
    {
      v137 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v134 | 7) != 0x17)
        v137 = v134 | 7;
      v138 = v137 + 1;
      v136 = (void **)operator new(v137 + 1);
      v290 = v135;
      v291 = v138 | 0x8000000000000000;
      __dst = v136;
    }
    else
    {
      HIBYTE(v291) = v134;
      v136 = (void **)&__dst;
      if (!v134)
        goto LABEL_230;
    }
    memmove(v136, v133, v135);
LABEL_230:
    *((_BYTE *)v136 + v135) = 0;
    v241[0] = v16;
    v241[1] = 1174405120;
    v241[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_73;
    v241[3] = &__block_descriptor_tmp_74;
    v241[4] = v1;
    v241[5] = v3;
    v242 = v5;
    do
      v139 = __ldxr(p_shared_weak_owners);
    while (__stxr(v139 + 1, p_shared_weak_owners));
    v140 = _Block_copy(v241);
    v243 = v140;
    Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v243);
    if (v140)
      _Block_release(v140);
    if (SHIBYTE(v291) < 0)
      operator delete(__dst);
    v141 = (const void *)*MEMORY[0x24BE057C8];
    v142 = strlen((const char *)*MEMORY[0x24BE057C8]);
    if (v142 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v143 = v142;
    if (v142 >= 0x17)
    {
      v145 = (v142 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v142 | 7) != 0x17)
        v145 = v142 | 7;
      v146 = v145 + 1;
      v144 = (void **)operator new(v145 + 1);
      v290 = v143;
      v291 = v146 | 0x8000000000000000;
      __dst = v144;
    }
    else
    {
      HIBYTE(v291) = v142;
      v144 = (void **)&__dst;
      if (!v142)
      {
LABEL_244:
        *((_BYTE *)v144 + v143) = 0;
        v238[0] = v16;
        v238[1] = 1174405120;
        v238[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_75;
        v238[3] = &__block_descriptor_tmp_76;
        v238[4] = v1;
        v238[5] = v3;
        v239 = v5;
        do
          v147 = __ldxr(p_shared_weak_owners);
        while (__stxr(v147 + 1, p_shared_weak_owners));
        v148 = _Block_copy(v238);
        v240 = v148;
        Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v240);
        if (v148)
          _Block_release(v148);
        if (SHIBYTE(v291) < 0)
          operator delete(__dst);
        if (v239)
          std::__shared_weak_count::__release_weak(v239);
        if (v242)
          std::__shared_weak_count::__release_weak(v242);
        if (v245)
          std::__shared_weak_count::__release_weak(v245);
        goto LABEL_256;
      }
    }
    memmove(v144, v141, v143);
    goto LABEL_244;
  }
  v128 = v1[11];
  if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__dst) = 0;
    _os_log_impl(&dword_24B855000, v128, OS_LOG_TYPE_DEFAULT, "#I RF Self Test not supported", (uint8_t *)&__dst, 2u);
  }
LABEL_256:
  v149 = (const void *)*MEMORY[0x24BE05370];
  v150 = strlen((const char *)*MEMORY[0x24BE05370]);
  if (v150 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v151 = v150;
  if (v150 >= 0x17)
  {
    v153 = (v150 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v150 | 7) != 0x17)
      v153 = v150 | 7;
    v154 = v153 + 1;
    v152 = (void **)operator new(v153 + 1);
    v290 = v151;
    v291 = v154 | 0x8000000000000000;
    __dst = v152;
  }
  else
  {
    HIBYTE(v291) = v150;
    v152 = (void **)&__dst;
    if (!v150)
      goto LABEL_264;
  }
  memmove(v152, v149, v151);
LABEL_264:
  *((_BYTE *)v152 + v151) = 0;
  v235[0] = v16;
  v235[1] = 1174405120;
  v235[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_77;
  v235[3] = &__block_descriptor_tmp_78_0;
  v235[4] = v1;
  v235[5] = v3;
  v236 = v5;
  do
    v155 = __ldxr(p_shared_weak_owners);
  while (__stxr(v155 + 1, p_shared_weak_owners));
  v156 = _Block_copy(v235);
  v237 = v156;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v237);
  if (v156)
    _Block_release(v156);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v157 = (const void *)*MEMORY[0x24BE051E8];
  v158 = strlen((const char *)*MEMORY[0x24BE051E8]);
  if (v158 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v159 = v158;
  if (v158 >= 0x17)
  {
    v161 = (v158 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v158 | 7) != 0x17)
      v161 = v158 | 7;
    v162 = v161 + 1;
    v160 = (void **)operator new(v161 + 1);
    v290 = v159;
    v291 = v162 | 0x8000000000000000;
    __dst = v160;
  }
  else
  {
    HIBYTE(v291) = v158;
    v160 = (void **)&__dst;
    if (!v158)
      goto LABEL_278;
  }
  memmove(v160, v157, v159);
LABEL_278:
  *((_BYTE *)v160 + v159) = 0;
  v232[0] = v16;
  v232[1] = 1174405120;
  v232[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_79;
  v232[3] = &__block_descriptor_tmp_80;
  v232[4] = v1;
  v232[5] = v3;
  v233 = v5;
  do
    v163 = __ldxr(p_shared_weak_owners);
  while (__stxr(v163 + 1, p_shared_weak_owners));
  v164 = _Block_copy(v232);
  v234 = v164;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v234);
  if (v164)
    _Block_release(v164);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v165 = (const void *)*MEMORY[0x24BE051F8];
  v166 = strlen((const char *)*MEMORY[0x24BE051F8]);
  if (v166 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v167 = v166;
  if (v166 >= 0x17)
  {
    v169 = (v166 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v166 | 7) != 0x17)
      v169 = v166 | 7;
    v170 = v169 + 1;
    v168 = (void **)operator new(v169 + 1);
    v290 = v167;
    v291 = v170 | 0x8000000000000000;
    __dst = v168;
  }
  else
  {
    HIBYTE(v291) = v166;
    v168 = (void **)&__dst;
    if (!v166)
      goto LABEL_292;
  }
  memmove(v168, v165, v167);
LABEL_292:
  *((_BYTE *)v168 + v167) = 0;
  v229[0] = v16;
  v229[1] = 1174405120;
  v229[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_81;
  v229[3] = &__block_descriptor_tmp_82;
  v229[4] = v1;
  v229[5] = v3;
  v230 = v5;
  do
    v171 = __ldxr(p_shared_weak_owners);
  while (__stxr(v171 + 1, p_shared_weak_owners));
  v172 = _Block_copy(v229);
  v231 = v172;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v231);
  if (v172)
    _Block_release(v172);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v173 = (const void *)*MEMORY[0x24BE04EB8];
  v174 = strlen((const char *)*MEMORY[0x24BE04EB8]);
  if (v174 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v175 = v174;
  if (v174 >= 0x17)
  {
    v177 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v174 | 7) != 0x17)
      v177 = v174 | 7;
    v178 = v177 + 1;
    v176 = (void **)operator new(v177 + 1);
    v290 = v175;
    v291 = v178 | 0x8000000000000000;
    __dst = v176;
  }
  else
  {
    HIBYTE(v291) = v174;
    v176 = (void **)&__dst;
    if (!v174)
      goto LABEL_306;
  }
  memmove(v176, v173, v175);
LABEL_306:
  *((_BYTE *)v176 + v175) = 0;
  v226[0] = v16;
  v226[1] = 1174405120;
  v226[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_83;
  v226[3] = &__block_descriptor_tmp_84;
  v226[4] = v1;
  v226[5] = v3;
  v227 = v5;
  do
    v179 = __ldxr(p_shared_weak_owners);
  while (__stxr(v179 + 1, p_shared_weak_owners));
  v180 = _Block_copy(v226);
  v228 = v180;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v228);
  if (v180)
    _Block_release(v180);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  if (capabilities::abs::supportsRFFEScanData(v181))
  {
    v182 = (const void *)*MEMORY[0x24BE056D0];
    v183 = strlen((const char *)*MEMORY[0x24BE056D0]);
    if (v183 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v184 = v183;
    if (v183 >= 0x17)
    {
      v186 = (v183 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v183 | 7) != 0x17)
        v186 = v183 | 7;
      v187 = v186 + 1;
      v185 = (void **)operator new(v186 + 1);
      v290 = v184;
      v291 = v187 | 0x8000000000000000;
      __dst = v185;
    }
    else
    {
      HIBYTE(v291) = v183;
      v185 = (void **)&__dst;
      if (!v183)
      {
LABEL_321:
        *((_BYTE *)v185 + v184) = 0;
        v223[0] = v16;
        v223[1] = 1174405120;
        v223[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_85;
        v223[3] = &__block_descriptor_tmp_86;
        v223[4] = v1;
        v223[5] = v3;
        v224 = v5;
        do
          v188 = __ldxr(p_shared_weak_owners);
        while (__stxr(v188 + 1, p_shared_weak_owners));
        v189 = _Block_copy(v223);
        v225 = v189;
        Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v225);
        if (v189)
          _Block_release(v189);
        if (SHIBYTE(v291) < 0)
          operator delete(__dst);
        if (v224)
          std::__shared_weak_count::__release_weak(v224);
        goto LABEL_329;
      }
    }
    memmove(v185, v182, v184);
    goto LABEL_321;
  }
LABEL_329:
  v190 = (const void *)*MEMORY[0x24BE05650];
  v191 = strlen((const char *)*MEMORY[0x24BE05650]);
  if (v191 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v192 = v191;
  if (v191 >= 0x17)
  {
    v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17)
      v194 = v191 | 7;
    v195 = v194 + 1;
    v193 = (void **)operator new(v194 + 1);
    v290 = v192;
    v291 = v195 | 0x8000000000000000;
    __dst = v193;
  }
  else
  {
    HIBYTE(v291) = v191;
    v193 = (void **)&__dst;
    if (!v191)
      goto LABEL_337;
  }
  memmove(v193, v190, v192);
LABEL_337:
  *((_BYTE *)v193 + v192) = 0;
  v220[0] = v16;
  v220[1] = 1174405120;
  v220[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_87;
  v220[3] = &__block_descriptor_tmp_88;
  v220[4] = v3;
  v221 = v5;
  do
    v196 = __ldxr(p_shared_weak_owners);
  while (__stxr(v196 + 1, p_shared_weak_owners));
  v197 = _Block_copy(v220);
  v222 = v197;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v222);
  if (v197)
    _Block_release(v197);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v198 = (const void *)*MEMORY[0x24BE055A8];
  v199 = strlen((const char *)*MEMORY[0x24BE055A8]);
  if (v199 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v200 = v199;
  if (v199 >= 0x17)
  {
    v202 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17)
      v202 = v199 | 7;
    v203 = v202 + 1;
    v201 = (void **)operator new(v202 + 1);
    v290 = v200;
    v291 = v203 | 0x8000000000000000;
    __dst = v201;
  }
  else
  {
    HIBYTE(v291) = v199;
    v201 = (void **)&__dst;
    if (!v199)
      goto LABEL_351;
  }
  memmove(v201, v198, v200);
LABEL_351:
  *((_BYTE *)v201 + v200) = 0;
  v217[0] = v16;
  v217[1] = 1174405120;
  v217[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_89;
  v217[3] = &__block_descriptor_tmp_90;
  v217[4] = v3;
  v218 = v5;
  do
    v204 = __ldxr(p_shared_weak_owners);
  while (__stxr(v204 + 1, p_shared_weak_owners));
  v205 = _Block_copy(v217);
  v219 = v205;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v219);
  if (v205)
    _Block_release(v205);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v206 = (const void *)*MEMORY[0x24BE05598];
  v207 = strlen((const char *)*MEMORY[0x24BE05598]);
  if (v207 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v208 = v207;
  if (v207 >= 0x17)
  {
    v210 = (v207 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v207 | 7) != 0x17)
      v210 = v207 | 7;
    v211 = v210 + 1;
    v209 = (void **)operator new(v210 + 1);
    v290 = v208;
    v291 = v211 | 0x8000000000000000;
    __dst = v209;
  }
  else
  {
    HIBYTE(v291) = v207;
    v209 = (void **)&__dst;
    if (!v207)
      goto LABEL_365;
  }
  memmove(v209, v206, v208);
LABEL_365:
  *((_BYTE *)v209 + v208) = 0;
  v214[0] = v16;
  v214[1] = 1174405120;
  v214[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_91;
  v214[3] = &__block_descriptor_tmp_92;
  v214[4] = v3;
  v215 = v5;
  do
    v212 = __ldxr(p_shared_weak_owners);
  while (__stxr(v212 + 1, p_shared_weak_owners));
  v213 = _Block_copy(v214);
  v216 = v213;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v216);
  if (v213)
    _Block_release(v213);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  if (v215)
    std::__shared_weak_count::__release_weak(v215);
  if (v218)
    std::__shared_weak_count::__release_weak(v218);
  if (v221)
    std::__shared_weak_count::__release_weak(v221);
  if (v227)
    std::__shared_weak_count::__release_weak(v227);
  if (v230)
    std::__shared_weak_count::__release_weak(v230);
  if (v233)
    std::__shared_weak_count::__release_weak(v233);
  if (v236)
    std::__shared_weak_count::__release_weak(v236);
  if (v248)
    std::__shared_weak_count::__release_weak(v248);
  if (v251)
    std::__shared_weak_count::__release_weak(v251);
  if (v254)
    std::__shared_weak_count::__release_weak(v254);
  if (v257)
    std::__shared_weak_count::__release_weak(v257);
  if (v260)
    std::__shared_weak_count::__release_weak(v260);
  if (v263)
    std::__shared_weak_count::__release_weak(v263);
  if (v266)
    std::__shared_weak_count::__release_weak(v266);
  if (v269)
    std::__shared_weak_count::__release_weak(v269);
  if (v272)
    std::__shared_weak_count::__release_weak(v272);
  if (v275)
    std::__shared_weak_count::__release_weak(v275);
  if (v278)
    std::__shared_weak_count::__release_weak(v278);
  if (v281)
    std::__shared_weak_count::__release_weak(v281);
  if (v284)
    std::__shared_weak_count::__release_weak(v284);
  if (v287)
    std::__shared_weak_count::__release_weak(v287);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_24B89C7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,std::__shared_weak_count *a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count *a69;
  std::__shared_weak_count *v69;
  const void *v70;
  uint64_t v71;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;

  if (v70)
    _Block_release(v70);
  if (a37)
    std::__shared_weak_count::__release_weak(a37);
  if (*(char *)(v71 - 105) < 0)
    operator delete(*(void **)(v71 - 128));
  if (a45)
    std::__shared_weak_count::__release_weak(a45);
  if (a53)
    std::__shared_weak_count::__release_weak(a53);
  if (a61)
    std::__shared_weak_count::__release_weak(a61);
  if (a69)
    std::__shared_weak_count::__release_weak(a69);
  if (STACK[0x2E0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x2E0]);
  if (STACK[0x320])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x320]);
  if (STACK[0x360])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x360]);
  if (STACK[0x3A0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x3A0]);
  if (STACK[0x3E0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x3E0]);
  if (STACK[0x420])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x420]);
  if (STACK[0x460])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x460]);
  if (STACK[0x4A0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x4A0]);
  if (STACK[0x4E0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x4E0]);
  if (STACK[0x520])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x520]);
  if (STACK[0x560])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x560]);
  if (STACK[0x5A0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x5A0]);
  v73 = *(std::__shared_weak_count **)(v71 - 208);
  if (v73)
    std::__shared_weak_count::__release_weak(v73);
  v74 = *(std::__shared_weak_count **)(v71 - 144);
  if (v74)
    std::__shared_weak_count::__release_weak(v74);
  std::__shared_weak_count::__release_weak(v69);
  _Unwind_Resume(a1);
}

void sub_24B89CF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;

  if (!a69)
    JUMPOUT(0x24B89CECCLL);
  JUMPOUT(0x24B89CEC8);
}

void sub_24B89CF94()
{
  JUMPOUT(0x24B89CECCLL);
}

void sub_24B89CF9C()
{
  if (!STACK[0x320])
    JUMPOUT(0x24B89CEE4);
  JUMPOUT(0x24B89CEE0);
}

void sub_24B89CFAC()
{
  JUMPOUT(0x24B89CEE4);
}

void sub_24B89CFB4()
{
  if (!STACK[0x3A0])
    JUMPOUT(0x24B89CEFCLL);
  JUMPOUT(0x24B89CEF8);
}

void sub_24B89CFC4()
{
  JUMPOUT(0x24B89CEFCLL);
}

void sub_24B89CFCC()
{
  if (!STACK[0x420])
    JUMPOUT(0x24B89CF14);
  JUMPOUT(0x24B89CF10);
}

void sub_24B89CFDC()
{
  JUMPOUT(0x24B89CF14);
}

void sub_24B89CFE4()
{
  if (!STACK[0x4A0])
    JUMPOUT(0x24B89CF2CLL);
  JUMPOUT(0x24B89CF28);
}

void sub_24B89CFF4()
{
  JUMPOUT(0x24B89CF2CLL);
}

void sub_24B89CFFC()
{
  if (!STACK[0x520])
    JUMPOUT(0x24B89CF44);
  JUMPOUT(0x24B89CF40);
}

void sub_24B89D00C()
{
  JUMPOUT(0x24B89CF44);
}

void sub_24B89D014()
{
  if (!STACK[0x5A0])
    JUMPOUT(0x24B89CF5CLL);
  JUMPOUT(0x24B89CF58);
}

void sub_24B89D024()
{
  JUMPOUT(0x24B89CF5CLL);
}

void sub_24B89D02C()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 144))
    JUMPOUT(0x24B89CF74);
  JUMPOUT(0x24B89CF70);
}

void sub_24B89D03C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[5];
  void *aBlock;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_14:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      v18[0] = MEMORY[0x24BDAC760];
      v18[1] = 1174405120;
      v18[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v18[3] = &__block_descriptor_tmp_11_0;
      v18[4] = v6;
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v11 = a1[5];
        v12 = (uint64_t *)(v6 + 120);
        aBlock = v10;
        v20 = v11;
        v13 = (std::__shared_weak_count *)a1[6];
        v21 = v13;
        if (!v13)
          goto LABEL_10;
      }
      else
      {
        v12 = (uint64_t *)(v6 + 120);
        aBlock = 0;
        v20 = v9;
        v13 = (std::__shared_weak_count *)a1[6];
        v21 = v13;
        if (!v13)
        {
LABEL_10:
          ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v18);
          if (v21)
            std::__shared_weak_count::__release_weak(v21);
          if (aBlock)
            _Block_release(aBlock);
          goto LABEL_14;
        }
      }
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_3(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  CommandDriverFactory *v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  std::string *v36;
  __int128 v37;
  NSObject *v38;
  uint64_t *v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  void *v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  void *v47;
  void **v48;
  xpc_object_t v49;
  xpc_object_t v50;
  void *v51;
  dispatch_object_t object;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  _QWORD aBlock[6];
  std::__shared_weak_count *v60;
  void *v61;
  void *__p[4];
  std::string __dst;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)a1[4];
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    v3 = (const void *)*MEMORY[0x24BE05298];
    v4 = strlen((const char *)*MEMORY[0x24BE05298]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v33 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v33 = v4 | 7;
      v34 = v33 + 1;
      p_dst = (std::string *)operator new(v33 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_63:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v35 = (char *)operator new(0x28uLL);
        strcpy(v35, " rejected; ABM is shutting down ");
        v36 = std::string::append(&__dst, v35, 0x20uLL);
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        __p[2] = (void *)v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        operator delete(v35);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v38 = v2[11];
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
LABEL_65:
            v40 = a1[5];
            v39 = a1 + 5;
            if (!v40)
            {
LABEL_89:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              return;
            }
LABEL_71:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v43 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v43 = __p[1];
            if (v43)
            {
              v44 = xpc_dictionary_create(0, 0, 0);
              if (v44 || (v44 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x24BD2A468](v44) == MEMORY[0x24BDACFA0])
                {
                  xpc_retain(v44);
                  v45 = v44;
                }
                else
                {
                  v45 = xpc_null_create();
                }
              }
              else
              {
                v45 = xpc_null_create();
                v44 = 0;
              }
              xpc_release(v44);
              v46 = xpc_null_create();
              v47 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
              xpc_release(v47);
              xpc_release(v46);
              if (SHIBYTE(__p[2]) >= 0)
                v48 = __p;
              else
                v48 = (void **)__p[0];
              v49 = xpc_string_create((const char *)v48);
              if (!v49)
                v49 = xpc_null_create();
              xpc_dictionary_set_value(v45, (const char *)*MEMORY[0x24BE04F20], v49);
              v50 = xpc_null_create();
              xpc_release(v49);
              xpc_release(v50);
            }
            LODWORD(v57) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v39, (unsigned int *)&v57, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_89;
          }
        }
        else
        {
          v38 = v2[11];
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            goto LABEL_65;
        }
        v41 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v41 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
        _os_log_impl(&dword_24B855000, v38, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v42 = a1[5];
        v39 = a1 + 5;
        if (!v42)
          goto LABEL_89;
        goto LABEL_71;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_63;
  }
  __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_7;
  aBlock[3] = &__block_descriptor_tmp_10;
  v8 = a1[6];
  v7 = (std::__shared_weak_count *)a1[7];
  aBlock[4] = v2;
  aBlock[5] = v8;
  aBlock[1] = 1174405120;
  v60 = v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  v11 = (void *)a1[5];
  if (v11)
    v11 = _Block_copy(v11);
  v61 = v11;
  v12 = _Block_copy(aBlock);
  v13 = v2[17];
  if (v13)
    dispatch_retain(v13);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
  v57 = 0xAAAAAAAAAAAAAAAALL;
  v58 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v14 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v15 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v14);
    v16 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v17 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v16;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v21 = (unint64_t *)((char *)__p[1] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v15 = off_2579B85E0;
  }
  v23 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  v53 = v15;
  v54 = *(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v24 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(&v55, v15);
  v57 = 0;
  v58 = 0;
  if (v56)
  {
    v58 = std::__shared_weak_count::lock(v56);
    if (v58)
      v57 = v55;
    if (v56)
      std::__shared_weak_count::__release_weak(v56);
  }
  if (!v23)
    goto LABEL_37;
  v26 = (unint64_t *)&v23->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    v28 = v57;
    if (v57)
      goto LABEL_38;
  }
  else
  {
LABEL_37:
    v28 = v57;
    if (v57)
    {
LABEL_38:
      v29 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0])
        v29 = _Block_copy(__dst.__r_.__value_.__l.__data_);
      v51 = v29;
      object = (dispatch_object_t)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_)
        dispatch_retain((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
      (*(void (**)(unint64_t, void **))(*(_QWORD *)v28 + 96))(v28, &v51);
      if (object)
        dispatch_release(object);
      if (v51)
        _Block_release(v51);
    }
  }
  v30 = v58;
  if (v58)
  {
    v31 = (unint64_t *)&v58->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (__dst.__r_.__value_.__l.__size_)
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  if (__dst.__r_.__value_.__r.__words[0])
    _Block_release(__dst.__r_.__value_.__l.__data_);
  if (v61)
    _Block_release(v61);
  if (v60)
    std::__shared_weak_count::__release_weak(v60);
}

void sub_24B89D764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(uint64_t *a1, unsigned int *a2, void **a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  xpc_object_t object;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  object = v5;
  if (v5)
    xpc_retain(v5);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v4, &object);
  xpc_release(object);
}

void sub_24B89D8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_7(_QWORD *a1, uint64_t *a2, const __CFDictionary **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  std::__shared_weak_count *v11;
  xpc_object_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  NSObject *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  const __CFDictionary *v18;
  uint64_t (*v19)(uint64_t);
  const __CFNumber *v20;
  const __CFNumber *v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  void **v27;
  xpc_object_t v28;
  xpc_object_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  _QWORD v32[2];
  int64_t valuePtr;
  int64_t value;
  void *v35[2];
  uint64_t v36;
  xpc_object_t xdict;
  unsigned int v38;
  std::__shared_weak_count *v40;
  uint8_t buf[16];
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  v40 = v8;
  if (!v8)
    return;
  if (!a1[5])
  {
    v11 = v8;
LABEL_39:
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  v38 = 0;
  v9 = xpc_dictionary_create(0, 0, 0);
  v10 = v9;
  if (v9)
  {
    xdict = v9;
  }
  else
  {
    v10 = xpc_null_create();
    xdict = v10;
    if (!v10)
    {
      v12 = xpc_null_create();
      v10 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x24BD2A468](v10) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v10);
    goto LABEL_13;
  }
  v12 = xpc_null_create();
LABEL_12:
  xdict = v12;
LABEL_13:
  xpc_release(v10);
  v35[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v36 = 0xAAAAAAAAAAAAAALL;
  value = 0;
  v35[0] = (void *)0xAAAAAAAAAAAAAA00;
  valuePtr = 0;
  v13 = *a2;
  v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!v13)
    v14 = 0;
  if (v14)
  {
    v38 = -534716416;
    v15 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v13;
      _os_log_error_impl(&dword_24B855000, v15, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }
    v16 = xpc_string_create("Unknown error");
    if (!v16)
      v16 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x24BE04F20], v16);
    v17 = xpc_null_create();
    xpc_release(v16);
    xpc_release(v17);
  }
  else
  {
    v18 = *a3;
    v19 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    if (!*a3)
      v19 = 0;
    if (v19)
    {
      v32[0] = 0xAAAAAAAAAAAAAAAALL;
      v32[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v32, v18);
      v20 = (const __CFNumber *)ctu::cf::map_adapter::copyCFNumberRef((ctu::cf::map_adapter *)v32, (const __CFString *)*MEMORY[0x24BED3808]);
      v21 = v20;
      if (v20)
      {
        CFNumberGetValue(v20, kCFNumberLongType, &valuePtr);
        CFRelease(v21);
        LODWORD(value) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v32, (const __CFString *)*MEMORY[0x24BED3828]);
      }
      ctu::cf::map_adapter::getString();
      *(_OWORD *)v35 = *(_OWORD *)buf;
      v36 = v42;
      HIBYTE(v42) = 0;
      buf[0] = 0;
      v22 = xpc_int64_create(valuePtr);
      if (!v22)
        v22 = xpc_null_create();
      v23 = xdict;
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x24BE05300], v22);
      v24 = xpc_null_create();
      xpc_release(v22);
      xpc_release(v24);
      v25 = xpc_int64_create((int)value);
      if (!v25)
        v25 = xpc_null_create();
      xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x24BE055E0], v25);
      v26 = xpc_null_create();
      xpc_release(v25);
      xpc_release(v26);
      if (v36 >= 0)
        v27 = v35;
      else
        v27 = (void **)v35[0];
      v28 = xpc_string_create((const char *)v27);
      if (!v28)
        v28 = xpc_null_create();
      xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x24BE053A8], v28);
      v29 = xpc_null_create();
      xpc_release(v28);
      xpc_release(v29);
      MEMORY[0x24BD294A8](v32);
    }
  }
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(a1 + 7, &v38, &xdict);
  if (SHIBYTE(v36) < 0)
    operator delete(v35[0]);
  xpc_release(xdict);
  v11 = v40;
  if (v40)
    goto LABEL_39;
}

void sub_24B89DD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(uint64_t *a1, unsigned int *a2, void **a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  xpc_object_t object;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  object = v5;
  if (v5)
    xpc_retain(v5);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v4, &object);
  xpc_release(object);
}

void sub_24B89DE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void *__copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(_QWORD *a1, _QWORD *a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (void *)a2[5];
  if (result)
    result = _Block_copy(result);
  v6 = a2[6];
  v5 = a2[7];
  a1[5] = result;
  a1[6] = v6;
  a1[7] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  const void *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_14(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v12[0] = MEMORY[0x24BDAC760];
        v12[1] = 1174405120;
        v12[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_15;
        v12[3] = &__block_descriptor_tmp_19_0;
        v12[4] = v6;
        v9 = *a3;
        if (*a3)
          v9 = _Block_copy(v9);
        aBlock = v9;
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v12);
        if (aBlock)
          _Block_release(aBlock);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_15(uint64_t a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  void *v7;
  void (**v8)(void *, std::string *);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  void *v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  void *v23;
  void **v24;
  xpc_object_t v25;
  xpc_object_t v26;
  _QWORD v27[5];
  void *aBlock;
  void (**v29)(void *, std::string *);
  unsigned int v30;
  void *__p[4];
  std::string __dst;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    v3 = (const void *)*MEMORY[0x24BE05688];
    v4 = strlen((const char *)*MEMORY[0x24BE05688]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v9 = v4 | 7;
      v10 = v9 + 1;
      p_dst = (std::string *)operator new(v9 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_16:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v11 = (char *)operator new(0x28uLL);
        strcpy(v11, " rejected; ABM is shutting down ");
        v12 = std::string::append(&__dst, v11, 0x20uLL);
        v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        operator delete(v11);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
LABEL_18:
            v16 = *(_QWORD *)(a1 + 40);
            v15 = (uint64_t *)(a1 + 40);
            if (!v16)
            {
LABEL_40:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              return;
            }
LABEL_24:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v19 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v19 = __p[1];
            if (v19)
            {
              v20 = xpc_dictionary_create(0, 0, 0);
              if (v20 || (v20 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x24BD2A468](v20) == MEMORY[0x24BDACFA0])
                {
                  xpc_retain(v20);
                  v21 = v20;
                }
                else
                {
                  v21 = xpc_null_create();
                }
              }
              else
              {
                v21 = xpc_null_create();
                v20 = 0;
              }
              xpc_release(v20);
              v22 = xpc_null_create();
              v23 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
              xpc_release(v23);
              xpc_release(v22);
              if (SHIBYTE(__p[2]) >= 0)
                v24 = __p;
              else
                v24 = (void **)__p[0];
              v25 = xpc_string_create((const char *)v24);
              if (!v25)
                v25 = xpc_null_create();
              xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x24BE04F20], v25);
              v26 = xpc_null_create();
              xpc_release(v25);
              xpc_release(v26);
            }
            v30 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v15, &v30, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_40;
          }
        }
        else
        {
          v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            goto LABEL_18;
        }
        v17 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v17 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
        _os_log_impl(&dword_24B855000, v14, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v18 = *(_QWORD *)(a1 + 40);
        v15 = (uint64_t *)(a1 + 40);
        if (!v18)
          goto LABEL_40;
        goto LABEL_24;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_16;
  }
  v27[0] = MEMORY[0x24BDAC760];
  v27[1] = 1174405120;
  v27[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_16;
  v27[3] = &__block_descriptor_tmp_18_0;
  v27[4] = v2;
  v7 = *(void **)(a1 + 40);
  if (v7)
    v7 = _Block_copy(v7);
  aBlock = v7;
  v8 = (void (**)(void *, std::string *))_Block_copy(v27);
  v29 = v8;
  RadioModule::getVersion_sync((uint64_t)v2, &v29);
  if (v8)
    _Block_release(v8);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_24B89E46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void RadioModule::getVersion_sync(uint64_t a1, void (***a2)(void *, std::string *))
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::string *v12;
  int v13;
  void (**v14)(void *, std::string *);
  std::string::size_type v15;
  unint64_t v16;
  void (**v17)(void *, std::string *);
  void *v18;
  NSObject *v19;
  CommandDriverFactory *v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *size;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  dispatch_object_t object;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  _QWORD aBlock[6];
  std::__shared_weak_count *v48;
  void *v49;
  void *v50;
  dispatch_object_t v51;
  std::string v52;

  v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (v5 = *(_QWORD *)(a1 + 120), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = (std::string *)(a1 + 152);
    v13 = *(char *)(a1 + 175);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    v12 = (std::string *)(a1 + 152);
    v13 = *(char *)(a1 + 175);
    if ((v13 & 0x80000000) == 0)
    {
LABEL_9:
      if (v13)
      {
        v14 = *a2;
        v52 = *v12;
        goto LABEL_14;
      }
      goto LABEL_16;
    }
  }
  v15 = *(_QWORD *)(a1 + 160);
  if (v15)
  {
    v14 = *a2;
    std::string::__init_copy_ctor_external(&v52, v12->__r_.__value_.__l.__data_, v15);
LABEL_14:
    v14[2](v14, &v52);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    goto LABEL_68;
  }
LABEL_16:
  v50 = (void *)0xAAAAAAAAAAAAAAAALL;
  v51 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule15getVersion_syncEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_103;
  aBlock[4] = a1;
  aBlock[5] = v5;
  v48 = v7;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = *a2;
  if (*a2)
    v17 = (void (**)(void *, std::string *))_Block_copy(v17);
  v49 = v17;
  v18 = _Block_copy(aBlock);
  v19 = *(NSObject **)(a1 + 136);
  if (v19)
    dispatch_retain(v19);
  v50 = v18;
  v51 = v19;
  v45 = 0xAAAAAAAAAAAAAAAALL;
  v46 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v20 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v21 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v20);
    v22 = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = 0uLL;
    v23 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v22;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v27 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v21 = off_2579B85E0;
  }
  v29 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  v41 = v21;
  v42 = *(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v30 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v21 + 16))(&v43, v21);
  v45 = 0;
  v46 = 0;
  if (v44)
  {
    v46 = std::__shared_weak_count::lock(v44);
    if (v46)
      v45 = v43;
    if (v44)
      std::__shared_weak_count::__release_weak(v44);
  }
  if (!v29)
    goto LABEL_46;
  v32 = (unint64_t *)&v29->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    v34 = v45;
    if (v45)
      goto LABEL_47;
  }
  else
  {
LABEL_46:
    v34 = v45;
    if (v45)
    {
LABEL_47:
      v35 = v50;
      if (v50)
        v35 = _Block_copy(v50);
      v39 = v35;
      object = v51;
      if (v51)
        dispatch_retain(v51);
      (*(void (**)(unint64_t, void **))(*(_QWORD *)v34 + 112))(v34, &v39);
      if (object)
        dispatch_release(object);
      if (v39)
        _Block_release(v39);
    }
  }
  v36 = v46;
  if (v46)
  {
    v37 = (unint64_t *)&v46->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v51)
    dispatch_release(v51);
  if (v50)
    _Block_release(v50);
  if (v49)
    _Block_release(v49);
  if (v48)
    std::__shared_weak_count::__release_weak(v48);
LABEL_68:
  std::__shared_weak_count::__release_weak(v7);
}

void sub_24B89E8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock)
{
  std::__shared_weak_count *v24;
  uint64_t v25;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 96);
  if (aBlock)
    _Block_release(aBlock);
  if (a23)
  {
    std::__shared_weak_count::__release_weak(a23);
    std::__shared_weak_count::__release_weak(v24);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_16(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  char *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  os_unfair_lock_s *v13;
  _QWORD *v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  size_t v25;
  size_t v26;
  __int128 *p_dst;
  xpc_object_t v28;
  xpc_object_t v29;
  uint64_t v30;
  uint64_t v31;
  os_unfair_lock_s *v32;
  const char *v33;
  const void *v34;
  const void *v35;
  CFTypeID v36;
  const void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  CFTypeID v41;
  const void *v42;
  size_t v43;
  size_t v44;
  void *p_p;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  const char *v50;
  xpc_object_t v51;
  xpc_object_t v52;
  size_t v53;
  size_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  const char *v59;
  xpc_object_t v60;
  xpc_object_t v61;
  size_t v62;
  size_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  const char *v68;
  xpc_object_t v69;
  xpc_object_t v70;
  size_t v71;
  size_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  const char *v77;
  xpc_object_t v78;
  xpc_object_t v79;
  size_t v80;
  size_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  const char *v86;
  xpc_object_t v87;
  xpc_object_t v88;
  CFTypeRef v89;
  void *__p;
  std::__shared_weak_count *v91;
  unint64_t v92;
  _QWORD v93[2];
  CFTypeRef cf;
  __int128 __dst;
  int64_t v96;
  xpc_object_t xdict;
  unsigned int v98;
  uint64_t v99;

  v4 = *(_QWORD *)(a1 + 32);
  v98 = 0;
  v5 = xpc_dictionary_create(0, 0, 0);
  v6 = v5;
  if (v5)
  {
    xdict = v5;
  }
  else
  {
    v6 = xpc_null_create();
    xdict = v6;
    if (!v6)
    {
      v7 = xpc_null_create();
      v6 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x24BD2A468](v6) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v6);
    goto LABEL_9;
  }
  v7 = xpc_null_create();
LABEL_8:
  xdict = v7;
LABEL_9:
  xpc_release(v6);
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (*((_BYTE *)a2 + 23))
      goto LABEL_11;
LABEL_37:
    v98 = -534716416;
    v28 = xpc_string_create("Unknown error");
    if (!v28)
      v28 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x24BE04F20], v28);
    v29 = xpc_null_create();
    xpc_release(v28);
    xpc_release(v29);
    goto LABEL_156;
  }
  if (!a2[1])
    goto LABEL_37;
LABEL_11:
  v8 = (char *)operator new(0x28uLL);
  strcpy(v8, "AppleBasebandServices_Manager-1180");
  v9 = xpc_string_create(v8);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x24BE054E0], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  operator delete(v8);
  if (*((char *)a2 + 23) < 0)
    a2 = (uint64_t *)*a2;
  v11 = xpc_string_create((const char *)a2);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x24BE05060], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v13 = (os_unfair_lock_s *)off_2579B84D8;
  if (!off_2579B84D8)
  {
    v14 = operator new(0x30uLL);
    MEMORY[0x24BD294B4](v14, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x24BDBD590]);
    v14[3] = 0;
    v14[4] = 0;
    *((_DWORD *)v14 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&__dst, (uint64_t)v14);
    v15 = __dst;
    __dst = 0uLL;
    v16 = (std::__shared_weak_count *)*(&off_2579B84D8 + 1);
    off_2579B84D8 = v15;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    if (*((_QWORD *)&__dst + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v13 = (os_unfair_lock_s *)off_2579B84D8;
  }
  __p = v13;
  v91 = (std::__shared_weak_count *)*(&off_2579B84D8 + 1);
  if (*(&off_2579B84D8 + 1))
  {
    v22 = (unint64_t *)(*(&off_2579B84D8 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v24 = (const void *)*MEMORY[0x24BE05148];
  v25 = strlen((const char *)*MEMORY[0x24BE05148]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = v25;
  if (v25 >= 0x17)
  {
    v30 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v30 = v25 | 7;
    v31 = v30 + 1;
    p_dst = (__int128 *)operator new(v30 + 1);
    *((_QWORD *)&__dst + 1) = v26;
    v96 = v31 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_43;
  }
  HIBYTE(v96) = v25;
  p_dst = &__dst;
  if (v25)
LABEL_43:
    memmove(p_dst, v24, v26);
  *((_BYTE *)p_dst + v26) = 0;
  v32 = v13 + 10;
  os_unfair_lock_lock(v13 + 10);
  if (v96 >= 0)
    v33 = (const char *)&__dst;
  else
    v33 = (const char *)__dst;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v93, v33);
  v34 = (const void *)(**(uint64_t (***)(os_unfair_lock_s *, _QWORD))&v13->_os_unfair_lock_opaque)(v13, v93[0]);
  v35 = v34;
  if (!v34)
  {
    v37 = 0;
    MEMORY[0x24BD29478](v93);
    os_unfair_lock_unlock(v32);
    if ((SHIBYTE(v96) & 0x80000000) == 0)
      goto LABEL_52;
LABEL_55:
    operator delete((void *)__dst);
    v38 = v91;
    if (!v91)
      goto LABEL_59;
    goto LABEL_56;
  }
  v36 = CFGetTypeID(v34);
  if (v36 == CFDictionaryGetTypeID())
    v37 = v35;
  else
    v37 = 0;
  CFRelease(v35);
  MEMORY[0x24BD29478](v93);
  os_unfair_lock_unlock(v32);
  if (SHIBYTE(v96) < 0)
    goto LABEL_55;
LABEL_52:
  v38 = v91;
  if (!v91)
    goto LABEL_59;
LABEL_56:
  v39 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (v40)
  {
LABEL_59:
    if (!v37)
      goto LABEL_66;
    goto LABEL_60;
  }
  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
  std::__shared_weak_count::__release_weak(v38);
  if (!v37)
  {
LABEL_66:
    v46 = *(NSObject **)(v4 + 88);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__dst) = 0;
      _os_log_error_impl(&dword_24B855000, v46, OS_LOG_TYPE_ERROR, "Failed to get ABM Shared Data", (uint8_t *)&__dst, 2u);
    }
    goto LABEL_156;
  }
LABEL_60:
  v41 = CFGetTypeID(v37);
  if (v41 != CFDictionaryGetTypeID())
    goto LABEL_66;
  cf = v37;
  CFRetain(v37);
  v93[0] = 0xAAAAAAAAAAAAAAAALL;
  v93[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v93, (const __CFDictionary *)v37);
  v42 = (const void *)*MEMORY[0x24BE058E0];
  v43 = strlen((const char *)*MEMORY[0x24BE058E0]);
  if (v43 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v44 = v43;
  if (v43 >= 0x17)
  {
    v47 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v47 = v43 | 7;
    v48 = v47 + 1;
    p_p = operator new(v47 + 1);
    v91 = (std::__shared_weak_count *)v44;
    v92 = v48 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_71;
  }
  HIBYTE(v92) = v43;
  p_p = &__p;
  if (v43)
LABEL_71:
    memmove(p_p, v42, v44);
  v49 = (const char *)*MEMORY[0x24BE05178];
  *((_BYTE *)p_p + v44) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v99, v49);
  ctu::cf::map_adapter::getString();
  MEMORY[0x24BD29478](&v99);
  if (v96 >= 0)
    v50 = (const char *)&__dst;
  else
    v50 = (const char *)__dst;
  v51 = xpc_string_create(v50);
  if (!v51)
    v51 = xpc_null_create();
  xpc_dictionary_set_value(xdict, v49, v51);
  v52 = xpc_null_create();
  xpc_release(v51);
  xpc_release(v52);
  if (SHIBYTE(v96) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v92) & 0x80000000) == 0)
    {
LABEL_79:
      v53 = strlen((const char *)v42);
      if (v53 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_80;
LABEL_143:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v92) & 0x80000000) == 0)
  {
    goto LABEL_79;
  }
  operator delete(__p);
  v53 = strlen((const char *)v42);
  if (v53 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_143;
LABEL_80:
  v54 = v53;
  if (v53 >= 0x17)
  {
    v56 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v53 | 7) != 0x17)
      v56 = v53 | 7;
    v57 = v56 + 1;
    v55 = operator new(v56 + 1);
    v91 = (std::__shared_weak_count *)v54;
    v92 = v57 | 0x8000000000000000;
    __p = v55;
    goto LABEL_86;
  }
  HIBYTE(v92) = v53;
  v55 = &__p;
  if (v53)
LABEL_86:
    memmove(v55, v42, v54);
  v58 = (const char *)*MEMORY[0x24BE050C0];
  *((_BYTE *)v55 + v54) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v99, v58);
  ctu::cf::map_adapter::getString();
  MEMORY[0x24BD29478](&v99);
  if (v96 >= 0)
    v59 = (const char *)&__dst;
  else
    v59 = (const char *)__dst;
  v60 = xpc_string_create(v59);
  if (!v60)
    v60 = xpc_null_create();
  xpc_dictionary_set_value(xdict, v58, v60);
  v61 = xpc_null_create();
  xpc_release(v60);
  xpc_release(v61);
  if (SHIBYTE(v96) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v92) & 0x80000000) == 0)
    {
LABEL_94:
      v62 = strlen((const char *)v42);
      if (v62 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_95;
LABEL_146:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v92) & 0x80000000) == 0)
  {
    goto LABEL_94;
  }
  operator delete(__p);
  v62 = strlen((const char *)v42);
  if (v62 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_146;
LABEL_95:
  v63 = v62;
  if (v62 >= 0x17)
  {
    v65 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v62 | 7) != 0x17)
      v65 = v62 | 7;
    v66 = v65 + 1;
    v64 = operator new(v65 + 1);
    v91 = (std::__shared_weak_count *)v63;
    v92 = v66 | 0x8000000000000000;
    __p = v64;
    goto LABEL_101;
  }
  HIBYTE(v92) = v62;
  v64 = &__p;
  if (v62)
LABEL_101:
    memmove(v64, v42, v63);
  v67 = (const char *)*MEMORY[0x24BE05218];
  *((_BYTE *)v64 + v63) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v99, v67);
  ctu::cf::map_adapter::getString();
  MEMORY[0x24BD29478](&v99);
  if (v96 >= 0)
    v68 = (const char *)&__dst;
  else
    v68 = (const char *)__dst;
  v69 = xpc_string_create(v68);
  if (!v69)
    v69 = xpc_null_create();
  xpc_dictionary_set_value(xdict, v67, v69);
  v70 = xpc_null_create();
  xpc_release(v69);
  xpc_release(v70);
  if (SHIBYTE(v96) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v92) & 0x80000000) == 0)
    {
LABEL_109:
      v71 = strlen((const char *)v42);
      if (v71 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_110;
LABEL_149:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v92) & 0x80000000) == 0)
  {
    goto LABEL_109;
  }
  operator delete(__p);
  v71 = strlen((const char *)v42);
  if (v71 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_149;
LABEL_110:
  v72 = v71;
  if (v71 >= 0x17)
  {
    v74 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v71 | 7) != 0x17)
      v74 = v71 | 7;
    v75 = v74 + 1;
    v73 = operator new(v74 + 1);
    v91 = (std::__shared_weak_count *)v72;
    v92 = v75 | 0x8000000000000000;
    __p = v73;
    goto LABEL_116;
  }
  HIBYTE(v92) = v71;
  v73 = &__p;
  if (v71)
LABEL_116:
    memmove(v73, v42, v72);
  v76 = (const char *)*MEMORY[0x24BE04F60];
  *((_BYTE *)v73 + v72) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v99, v76);
  ctu::cf::map_adapter::getString();
  MEMORY[0x24BD29478](&v99);
  if (v96 >= 0)
    v77 = (const char *)&__dst;
  else
    v77 = (const char *)__dst;
  v78 = xpc_string_create(v77);
  if (!v78)
    v78 = xpc_null_create();
  xpc_dictionary_set_value(xdict, v76, v78);
  v79 = xpc_null_create();
  xpc_release(v78);
  xpc_release(v79);
  if (SHIBYTE(v96) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v92) & 0x80000000) == 0)
    {
LABEL_124:
      v80 = strlen((const char *)v42);
      if (v80 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_125;
LABEL_152:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v92) & 0x80000000) == 0)
  {
    goto LABEL_124;
  }
  operator delete(__p);
  v80 = strlen((const char *)v42);
  if (v80 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_152;
LABEL_125:
  v81 = v80;
  if (v80 >= 0x17)
  {
    v83 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v80 | 7) != 0x17)
      v83 = v80 | 7;
    v84 = v83 + 1;
    v82 = operator new(v83 + 1);
    v91 = (std::__shared_weak_count *)v81;
    v92 = v84 | 0x8000000000000000;
    __p = v82;
  }
  else
  {
    HIBYTE(v92) = v80;
    v82 = &__p;
    if (!v80)
      goto LABEL_132;
  }
  memmove(v82, v42, v81);
LABEL_132:
  v85 = (const char *)*MEMORY[0x24BE05220];
  *((_BYTE *)v82 + v81) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v99, v85);
  ctu::cf::map_adapter::getString();
  MEMORY[0x24BD29478](&v99);
  if (v96 >= 0)
    v86 = (const char *)&__dst;
  else
    v86 = (const char *)__dst;
  v87 = xpc_string_create(v86);
  if (!v87)
    v87 = xpc_null_create();
  xpc_dictionary_set_value(xdict, v85, v87);
  v88 = xpc_null_create();
  xpc_release(v87);
  xpc_release(v88);
  if (SHIBYTE(v96) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v92) & 0x80000000) == 0)
    {
LABEL_139:
      MEMORY[0x24BD294A8](v93);
      v89 = cf;
      if (!cf)
        goto LABEL_156;
      goto LABEL_155;
    }
  }
  else if ((SHIBYTE(v92) & 0x80000000) == 0)
  {
    goto LABEL_139;
  }
  operator delete(__p);
  MEMORY[0x24BD294A8](v93);
  v89 = cf;
  if (cf)
LABEL_155:
    CFRelease(v89);
LABEL_156:
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 40), &v98, &xdict);
  xpc_release(xdict);
}

void sub_24B89F524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20,xpc_object_t object)
{
  uint64_t v21;

  MEMORY[0x24BD29478](v21 - 72);
  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x24BD294A8](&a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_21(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v12[0] = MEMORY[0x24BDAC760];
        v12[1] = 1174405120;
        v12[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_22;
        v12[3] = &__block_descriptor_tmp_26_0;
        v12[4] = v6;
        v9 = *a3;
        if (*a3)
          v9 = _Block_copy(v9);
        aBlock = v9;
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v12);
        if (aBlock)
          _Block_release(aBlock);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_22(uint64_t a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  void *v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  void *v23;
  void **v24;
  xpc_object_t v25;
  xpc_object_t v26;
  _QWORD aBlock[4];
  void *v28;
  void *v29;
  unsigned int v30;
  void *__p[4];
  std::string __dst;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    v3 = (const void *)*MEMORY[0x24BE05720];
    v4 = strlen((const char *)*MEMORY[0x24BE05720]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v9 = v4 | 7;
      v10 = v9 + 1;
      p_dst = (std::string *)operator new(v9 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_16:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v11 = (char *)operator new(0x28uLL);
        strcpy(v11, " rejected; ABM is shutting down ");
        v12 = std::string::append(&__dst, v11, 0x20uLL);
        v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        operator delete(v11);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
LABEL_18:
            v16 = *(_QWORD *)(a1 + 40);
            v15 = (uint64_t *)(a1 + 40);
            if (!v16)
            {
LABEL_40:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              return;
            }
LABEL_24:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v19 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v19 = __p[1];
            if (v19)
            {
              v20 = xpc_dictionary_create(0, 0, 0);
              if (v20 || (v20 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x24BD2A468](v20) == MEMORY[0x24BDACFA0])
                {
                  xpc_retain(v20);
                  v21 = v20;
                }
                else
                {
                  v21 = xpc_null_create();
                }
              }
              else
              {
                v21 = xpc_null_create();
                v20 = 0;
              }
              xpc_release(v20);
              v22 = xpc_null_create();
              v23 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
              xpc_release(v23);
              xpc_release(v22);
              if (SHIBYTE(__p[2]) >= 0)
                v24 = __p;
              else
                v24 = (void **)__p[0];
              v25 = xpc_string_create((const char *)v24);
              if (!v25)
                v25 = xpc_null_create();
              xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x24BE04F20], v25);
              v26 = xpc_null_create();
              xpc_release(v25);
              xpc_release(v26);
            }
            v30 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v15, &v30, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_40;
          }
        }
        else
        {
          v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            goto LABEL_18;
        }
        v17 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v17 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
        _os_log_impl(&dword_24B855000, v14, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v18 = *(_QWORD *)(a1 + 40);
        v15 = (uint64_t *)(a1 + 40);
        if (!v18)
          goto LABEL_40;
        goto LABEL_24;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_16;
  }
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_23;
  aBlock[3] = &__block_descriptor_tmp_25_0;
  v7 = *(void **)(a1 + 40);
  if (v7)
    v7 = _Block_copy(v7);
  v28 = v7;
  v8 = _Block_copy(aBlock);
  v29 = v8;
  RadioModule::getOperatingMode_sync((uint64_t)v2, &v29);
  if (v8)
    _Block_release(v8);
  if (v28)
    _Block_release(v28);
}

void sub_24B89FBAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void RadioModule::getOperatingMode_sync(uint64_t a1, void **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  NSObject *v15;
  CommandDriverFactory *v16;
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  NSObject *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  dispatch_object_t object;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  _QWORD aBlock[6];
  std::__shared_weak_count *v45;
  void *v46;
  void *v47;
  dispatch_object_t v48;
  uint8_t buf[16];

  v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (v5 = *(_QWORD *)(a1 + 120), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v47 = (void *)0xAAAAAAAAAAAAAAAALL;
  v48 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule21getOperatingMode_syncEN8dispatch5blockIU13block_pointerFviEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_104;
  aBlock[4] = a1;
  aBlock[5] = v5;
  v45 = v7;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = *a2;
  if (*a2)
    v13 = _Block_copy(v13);
  v46 = v13;
  v14 = _Block_copy(aBlock);
  v15 = *(NSObject **)(a1 + 136);
  if (v15)
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  v47 = v14;
  v48 = v15;
  v42 = 0xAAAAAAAAAAAAAAAALL;
  v43 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v16 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v17 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v16);
    v18 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v19 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v18;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v23 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = off_2579B85E0;
  }
  v25 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  v38 = v17;
  v39 = *(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v26 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v17 + 16))(&v40, v17);
  v42 = 0;
  v43 = 0;
  if (v41)
  {
    v43 = std::__shared_weak_count::lock(v41);
    if (v43)
      v42 = v40;
    if (v41)
      std::__shared_weak_count::__release_weak(v41);
  }
  if (!v25)
    goto LABEL_39;
  v28 = (unint64_t *)&v25->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    v30 = v42;
    if (!v42)
      goto LABEL_50;
  }
  else
  {
LABEL_39:
    v30 = v42;
    if (!v42)
      goto LABEL_50;
  }
  v31 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v31, OS_LOG_TYPE_DEFAULT, "#I Request to get operating mode", buf, 2u);
  }
  v32 = v47;
  if (v47)
    v32 = _Block_copy(v47);
  v36 = v32;
  object = v48;
  if (v48)
    dispatch_retain(v48);
  (*(void (**)(unint64_t, void **))(*(_QWORD *)v30 + 160))(v30, &v36);
  if (object)
    dispatch_release(object);
  if (v36)
    _Block_release(v36);
LABEL_50:
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v48)
    dispatch_release(v48);
  if (v47)
    _Block_release(v47);
  if (v46)
    _Block_release(v46);
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_24B89FFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock)
{
  std::__shared_weak_count *v24;
  uint64_t v25;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 80);
  if (aBlock)
    _Block_release(aBlock);
  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_23(uint64_t a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  unsigned int v9;
  xpc_object_t xdict;

  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    xdict = v4;
  }
  else
  {
    v5 = xpc_null_create();
    xdict = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x24BD2A468](v5) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  xdict = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(a2);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x24BE05460], v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = (a2 >> 31) & 0xE020E002;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 32), &v9, &xdict);
  xpc_release(xdict);
}

void sub_24B8A01A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_28(_QWORD *a1, xpc_object_t *a2, void (***a3)(void *, uint64_t, xpc_object_t *))
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  xpc_object_t value;
  int v11;
  xpc_object_t v12;
  int v13;
  xpc_object_t v14;
  char v15;
  void (**v16)(void *, uint64_t, xpc_object_t *);
  xpc_object_t v17;
  void (**v18)(void *, uint64_t, xpc_object_t *);
  xpc_object_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD v22[5];
  void *aBlock;
  int v24;
  int v25;
  char v26;
  std::__shared_weak_count *v28;
  xpc_object_t v29;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v28 = v8;
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE04E20]);
        v29 = value;
        if (value)
          xpc_retain(value);
        else
          v29 = xpc_null_create();
        v11 = xpc::dyn_cast_or_default((xpc *)&v29, (const object *)0x2710);
        xpc_release(v29);
        v12 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05460]);
        v29 = v12;
        if (v12)
          xpc_retain(v12);
        else
          v29 = xpc_null_create();
        v13 = xpc::dyn_cast_or_default((xpc *)&v29, (const object *)0xFFFFFFFFLL);
        xpc_release(v29);
        v14 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE056A0]);
        v29 = v14;
        if (v14)
          xpc_retain(v14);
        else
          v29 = xpc_null_create();
        v15 = xpc::dyn_cast_or_default((xpc *)&v29, 0);
        xpc_release(v29);
        if (v13 < 0)
        {
          v17 = xpc_null_create();
          v18 = *a3;
          v29 = v17;
          v19 = xpc_null_create();
          v18[2](v18, 3760250882, &v29);
          xpc_release(v29);
          xpc_release(v19);
        }
        else
        {
          v22[0] = MEMORY[0x24BDAC760];
          v22[1] = 1174405120;
          v22[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_29;
          v22[3] = &__block_descriptor_tmp_33;
          v22[4] = v7;
          v16 = *a3;
          if (*a3)
            v16 = (void (**)(void *, uint64_t, xpc_object_t *))_Block_copy(v16);
          aBlock = v16;
          v24 = v11;
          v25 = v13;
          v26 = v15;
          ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v22);
          if (aBlock)
            _Block_release(aBlock);
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_24B8A0454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  uint64_t v11;
  va_list va;

  va_start(va, a10);
  xpc_release(*(xpc_object_t *)(v11 - 56));
  xpc_release(v10);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_29(uint64_t a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  unsigned int v7;
  int v8;
  int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  std::string *v15;
  __int128 v16;
  NSObject *v17;
  uint64_t *v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void *v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  void *v26;
  void **v27;
  xpc_object_t v28;
  xpc_object_t v29;
  _QWORD aBlock[4];
  void *v31;
  void *v32;
  unsigned int v33;
  void *__p[4];
  std::string __dst;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    v3 = (const void *)*MEMORY[0x24BE05730];
    v4 = strlen((const char *)*MEMORY[0x24BE05730]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v12 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v12 = v4 | 7;
      v13 = v12 + 1;
      p_dst = (std::string *)operator new(v12 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_16:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v14 = (char *)operator new(0x28uLL);
        strcpy(v14, " rejected; ABM is shutting down ");
        v15 = std::string::append(&__dst, v14, 0x20uLL);
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        __p[2] = (void *)v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        operator delete(v14);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v17 = v2[11];
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
LABEL_18:
            v19 = *(_QWORD *)(a1 + 40);
            v18 = (uint64_t *)(a1 + 40);
            if (!v19)
            {
LABEL_40:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              return;
            }
LABEL_24:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v22 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v22 = __p[1];
            if (v22)
            {
              v23 = xpc_dictionary_create(0, 0, 0);
              if (v23 || (v23 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x24BD2A468](v23) == MEMORY[0x24BDACFA0])
                {
                  xpc_retain(v23);
                  v24 = v23;
                }
                else
                {
                  v24 = xpc_null_create();
                }
              }
              else
              {
                v24 = xpc_null_create();
                v23 = 0;
              }
              xpc_release(v23);
              v25 = xpc_null_create();
              v26 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
              xpc_release(v26);
              xpc_release(v25);
              if (SHIBYTE(__p[2]) >= 0)
                v27 = __p;
              else
                v27 = (void **)__p[0];
              v28 = xpc_string_create((const char *)v27);
              if (!v28)
                v28 = xpc_null_create();
              xpc_dictionary_set_value(v24, (const char *)*MEMORY[0x24BE04F20], v28);
              v29 = xpc_null_create();
              xpc_release(v28);
              xpc_release(v29);
            }
            v33 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v18, &v33, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_40;
          }
        }
        else
        {
          v17 = v2[11];
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            goto LABEL_18;
        }
        v20 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v20 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
        _os_log_impl(&dword_24B855000, v17, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v21 = *(_QWORD *)(a1 + 40);
        v18 = (uint64_t *)(a1 + 40);
        if (!v21)
          goto LABEL_40;
        goto LABEL_24;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_16;
  }
  v7 = *(_DWORD *)(a1 + 48);
  v8 = *(_DWORD *)(a1 + 52);
  v9 = *(unsigned __int8 *)(a1 + 56);
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_30;
  aBlock[3] = &__block_descriptor_tmp_32;
  v10 = *(void **)(a1 + 40);
  if (v10)
    v10 = _Block_copy(v10);
  v31 = v10;
  v11 = _Block_copy(aBlock);
  v32 = v11;
  RadioModule::setOperatingMode_sync(v2, v7, v8, v9 != 0, &v32);
  if (v11)
    _Block_release(v11);
  if (v31)
    _Block_release(v31);
}

void sub_24B8A08D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void RadioModule::setOperatingMode_sync(_QWORD *a1, unsigned int a2, uint64_t a3, int a4, void **a5)
{
  std::__shared_weak_count *v6;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  NSObject *v21;
  CommandDriverFactory *v22;
  uint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void *v42;
  dispatch_object_t v43;
  void *v44;
  dispatch_object_t object;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  _QWORD aBlock[6];
  std::__shared_weak_count *v53;
  void *v54;
  void *v55;
  dispatch_object_t v56;
  __int128 v57;

  v6 = (std::__shared_weak_count *)a1[16];
  if (!v6 || (v11 = a1[15], (v12 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v55 = (void *)0xAAAAAAAAAAAAAAAALL;
  v56 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule21setOperatingMode_syncEjN5radio13OperatingModeEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_119;
  aBlock[4] = a1;
  aBlock[5] = v11;
  v53 = v13;
  do
    v18 = __ldxr(p_shared_weak_owners);
  while (__stxr(v18 + 1, p_shared_weak_owners));
  v19 = *a5;
  if (*a5)
    v19 = _Block_copy(v19);
  v54 = v19;
  v20 = _Block_copy(aBlock);
  v21 = a1[17];
  if (v21)
    dispatch_retain(v21);
  v55 = v20;
  v56 = v21;
  v50 = 0xAAAAAAAAAAAAAAAALL;
  v51 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v22 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v23 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v22);
    v24 = v57;
    v57 = 0uLL;
    v25 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v24;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v57 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v23 = off_2579B85E0;
  }
  v31 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  v46 = v23;
  v47 = *(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v32 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v23 + 16))(&v48, v23);
  v50 = 0;
  v51 = 0;
  if (v49)
  {
    v51 = std::__shared_weak_count::lock(v49);
    if (v51)
      v50 = v48;
    if (v49)
      std::__shared_weak_count::__release_weak(v49);
  }
  if (!v31)
    goto LABEL_39;
  v34 = (unint64_t *)&v31->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    v36 = v50;
    if (!v50)
      goto LABEL_58;
  }
  else
  {
LABEL_39:
    v36 = v50;
    if (!v50)
      goto LABEL_58;
  }
  v37 = 1000000 * a2;
  v38 = v55;
  if (a4)
  {
    if (v55)
      v38 = _Block_copy(v55);
    v44 = v38;
    object = v56;
    if (v56)
      dispatch_retain(v56);
    (*(void (**)(unint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v36 + 152))(v36, v37, a3, &v44);
    if (object)
      dispatch_release(object);
    if (v44)
      _Block_release(v44);
  }
  else
  {
    if (v55)
      v38 = _Block_copy(v55);
    v42 = v38;
    v43 = v56;
    if (v56)
      dispatch_retain(v56);
    (*(void (**)(unint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v36 + 144))(v36, v37, a3, &v42);
    if (v43)
      dispatch_release(v43);
    if (v42)
      _Block_release(v42);
  }
LABEL_58:
  v39 = v51;
  if (v51)
  {
    v40 = (unint64_t *)&v51->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v56)
    dispatch_release(v56);
  if (v55)
    _Block_release(v55);
  if (v54)
    _Block_release(v54);
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  std::__shared_weak_count::__release_weak(v13);
}

void sub_24B8A0D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,void *aBlock)
{
  std::__shared_weak_count *v26;
  uint64_t v27;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v27 - 112);
  if (aBlock)
    _Block_release(aBlock);
  if (a25)
    std::__shared_weak_count::__release_weak(a25);
  std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_30(uint64_t a1, int a2)
{
  uint64_t v3;
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t object;

  if (a2)
    v3 = 0;
  else
    v3 = 3760250880;
  v4 = xpc_null_create();
  v5 = *(_QWORD *)(a1 + 32);
  object = v4;
  v6 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v5 + 16))(v5, v3, &object);
  xpc_release(object);
  xpc_release(v6);
}

void sub_24B8A0E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_35(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[5];
  void *aBlock;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_14:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      v18[0] = MEMORY[0x24BDAC760];
      v18[1] = 1174405120;
      v18[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_36;
      v18[3] = &__block_descriptor_tmp_39;
      v18[4] = v6;
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v11 = a1[5];
        v12 = (uint64_t *)(v6 + 120);
        aBlock = v10;
        v20 = v11;
        v13 = (std::__shared_weak_count *)a1[6];
        v21 = v13;
        if (!v13)
          goto LABEL_10;
      }
      else
      {
        v12 = (uint64_t *)(v6 + 120);
        aBlock = 0;
        v20 = v9;
        v13 = (std::__shared_weak_count *)a1[6];
        v21 = v13;
        if (!v13)
        {
LABEL_10:
          ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v18);
          if (v21)
            std::__shared_weak_count::__release_weak(v21);
          if (aBlock)
            _Block_release(aBlock);
          goto LABEL_14;
        }
      }
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_36(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  CommandDriverFactory *v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  std::string *v36;
  __int128 v37;
  NSObject *v38;
  uint64_t *v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  void *v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  void *v47;
  void **v48;
  xpc_object_t v49;
  xpc_object_t v50;
  void *v51;
  dispatch_object_t object;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  _QWORD aBlock[6];
  std::__shared_weak_count *v60;
  void *v61;
  void *__p[4];
  std::string __dst;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)a1[4];
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    v3 = (const void *)*MEMORY[0x24BE05718];
    v4 = strlen((const char *)*MEMORY[0x24BE05718]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v33 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v33 = v4 | 7;
      v34 = v33 + 1;
      p_dst = (std::string *)operator new(v33 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_63:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v35 = (char *)operator new(0x28uLL);
        strcpy(v35, " rejected; ABM is shutting down ");
        v36 = std::string::append(&__dst, v35, 0x20uLL);
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        __p[2] = (void *)v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        operator delete(v35);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v38 = v2[11];
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
LABEL_65:
            v40 = a1[5];
            v39 = a1 + 5;
            if (!v40)
            {
LABEL_89:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              return;
            }
LABEL_71:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v43 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v43 = __p[1];
            if (v43)
            {
              v44 = xpc_dictionary_create(0, 0, 0);
              if (v44 || (v44 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x24BD2A468](v44) == MEMORY[0x24BDACFA0])
                {
                  xpc_retain(v44);
                  v45 = v44;
                }
                else
                {
                  v45 = xpc_null_create();
                }
              }
              else
              {
                v45 = xpc_null_create();
                v44 = 0;
              }
              xpc_release(v44);
              v46 = xpc_null_create();
              v47 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
              xpc_release(v47);
              xpc_release(v46);
              if (SHIBYTE(__p[2]) >= 0)
                v48 = __p;
              else
                v48 = (void **)__p[0];
              v49 = xpc_string_create((const char *)v48);
              if (!v49)
                v49 = xpc_null_create();
              xpc_dictionary_set_value(v45, (const char *)*MEMORY[0x24BE04F20], v49);
              v50 = xpc_null_create();
              xpc_release(v49);
              xpc_release(v50);
            }
            LODWORD(v57) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v39, (unsigned int *)&v57, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_89;
          }
        }
        else
        {
          v38 = v2[11];
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            goto LABEL_65;
        }
        v41 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v41 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
        _os_log_impl(&dword_24B855000, v38, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v42 = a1[5];
        v39 = a1 + 5;
        if (!v42)
          goto LABEL_89;
        goto LABEL_71;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_63;
  }
  __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_37;
  aBlock[3] = &__block_descriptor_tmp_38;
  v8 = a1[6];
  v7 = (std::__shared_weak_count *)a1[7];
  aBlock[4] = v2;
  aBlock[5] = v8;
  aBlock[1] = 1174405120;
  v60 = v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  v11 = (void *)a1[5];
  if (v11)
    v11 = _Block_copy(v11);
  v61 = v11;
  v12 = _Block_copy(aBlock);
  v13 = v2[17];
  if (v13)
    dispatch_retain(v13);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
  v57 = 0xAAAAAAAAAAAAAAAALL;
  v58 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v14 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v15 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v14);
    v16 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v17 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v16;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v21 = (unint64_t *)((char *)__p[1] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v15 = off_2579B85E0;
  }
  v23 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  v53 = v15;
  v54 = *(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v24 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(&v55, v15);
  v57 = 0;
  v58 = 0;
  if (v56)
  {
    v58 = std::__shared_weak_count::lock(v56);
    if (v58)
      v57 = v55;
    if (v56)
      std::__shared_weak_count::__release_weak(v56);
  }
  if (!v23)
    goto LABEL_37;
  v26 = (unint64_t *)&v23->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    v28 = v57;
    if (v57)
      goto LABEL_38;
  }
  else
  {
LABEL_37:
    v28 = v57;
    if (v57)
    {
LABEL_38:
      v29 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0])
        v29 = _Block_copy(__dst.__r_.__value_.__l.__data_);
      v51 = v29;
      object = (dispatch_object_t)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_)
        dispatch_retain((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
      (*(void (**)(unint64_t, void **))(*(_QWORD *)v28 + 104))(v28, &v51);
      if (object)
        dispatch_release(object);
      if (v51)
        _Block_release(v51);
    }
  }
  v30 = v58;
  if (v58)
  {
    v31 = (unint64_t *)&v58->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (__dst.__r_.__value_.__l.__size_)
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  if (__dst.__r_.__value_.__r.__words[0])
    _Block_release(__dst.__r_.__value_.__l.__data_);
  if (v61)
    _Block_release(v61);
  if (v60)
    std::__shared_weak_count::__release_weak(v60);
}

void sub_24B8A15C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_37(_QWORD *a1, void **a2, ctu **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  const void *v10;
  xpc_object_t v11;
  void *v12;
  uint64_t (*v13)(uint64_t);
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  uint64_t (*v18)(uint64_t);
  xpc_object_t v19;
  NSObject *v20;
  xpc_object_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unsigned int v24;
  xpc_object_t object;
  std::__shared_weak_count *v27;
  xpc_object_t buf[4];

  buf[3] = *(xpc_object_t *)MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v27 = v8;
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
        goto LABEL_21;
      v11 = xpc_null_create();
      object = v11;
      v24 = -534716416;
      v12 = *a2;
      v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      if (!v12)
        v13 = 0;
      if (v13)
      {
        v14 = *(NSObject **)(v7 + 88);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf[0]) = 138412290;
          *(xpc_object_t *)((char *)buf + 4) = v12;
          v15 = "%@";
          v16 = v14;
          v17 = 12;
LABEL_9:
          _os_log_error_impl(&dword_24B855000, v16, OS_LOG_TYPE_ERROR, v15, (uint8_t *)buf, v17);
        }
      }
      else
      {
        v18 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        if (!*a3)
          v18 = 0;
        if (v18)
        {
          ctu::cf_to_xpc(*a3, v10);
          v19 = buf[0];
          if (buf[0] && MEMORY[0x24BD2A468](buf[0]) == MEMORY[0x24BDACFA0])
            xpc_retain(buf[0]);
          else
            v19 = xpc_null_create();
          v21 = xpc_null_create();
          object = v19;
          xpc_release(v11);
          xpc_release(v21);
          xpc_release(buf[0]);
          v24 = 0;
          goto LABEL_20;
        }
        v20 = *(NSObject **)(v7 + 88);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf[0]) = 0;
          v15 = "Empty response received with no error";
          v16 = v20;
          v17 = 2;
          goto LABEL_9;
        }
      }
LABEL_20:
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(a1 + 7, &v24, &object);
      xpc_release(object);
LABEL_21:
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_24B8A1908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_41(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v12[0] = MEMORY[0x24BDAC760];
        v12[1] = 1174405120;
        v12[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_42;
        v12[3] = &__block_descriptor_tmp_43;
        v12[4] = v6;
        v9 = *a3;
        if (*a3)
          v9 = _Block_copy(v9);
        aBlock = v9;
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v12);
        if (aBlock)
          _Block_release(aBlock);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_42(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), &v2, (void **)(v1 + 248));
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_45(_QWORD *a1, void **a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[5];
  void *aBlock;
  xpc_object_t object;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_16:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v18[0] = MEMORY[0x24BDAC760];
      v18[1] = 1174405120;
      v18[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_46;
      v18[3] = &__block_descriptor_tmp_51_0;
      v18[4] = v7;
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v11 = *a2;
        aBlock = v10;
        object = v11;
        if (v11)
          goto LABEL_6;
      }
      else
      {
        v11 = *a2;
        aBlock = 0;
        object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          v12 = (uint64_t *)(v7 + 120);
          v13 = (std::__shared_weak_count *)a1[6];
          v21 = a1[5];
          v22 = v13;
          if (!v13)
            goto LABEL_12;
          goto LABEL_10;
        }
      }
      object = xpc_null_create();
      v12 = (uint64_t *)(v7 + 120);
      v13 = (std::__shared_weak_count *)a1[6];
      v21 = a1[5];
      v22 = v13;
      if (!v13)
      {
LABEL_12:
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v18);
        if (v22)
          std::__shared_weak_count::__release_weak(v22);
        xpc_release(object);
        object = 0;
        if (aBlock)
          _Block_release(aBlock);
        goto LABEL_16;
      }
LABEL_10:
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
      goto LABEL_12;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_46(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  NSObject *v15;
  uint64_t *v16;
  uint64_t v17;
  CommandDriverFactory *v18;
  const void *v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::string::size_type v29;
  void *v30;
  const object *v31;
  xpc_object_t *v32;
  uint64_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  CFTypeID v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *p_shared_weak_owners;
  unint64_t v42;
  void *v43;
  void *v44;
  NSObject *v45;
  std::__shared_weak_count *size;
  unint64_t *v47;
  unint64_t v48;
  xpc_object_t v49;
  void *v50;
  xpc_object_t *v51;
  xpc_object_t v52;
  xpc_object_t v53;
  _QWORD aBlock[6];
  std::__shared_weak_count *v55;
  void *v56;
  void *v57;
  dispatch_object_t v58;
  CFTypeRef cf[3];
  xpc_object_t v60;
  std::__shared_weak_count *v61;
  xpc_object_t object[4];
  std::string __dst;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)a1[4];
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(object, 170, 24);
    v3 = (const void *)*MEMORY[0x24BE055A0];
    v4 = strlen((const char *)*MEMORY[0x24BE055A0]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v10 = v4 | 7;
      v11 = v10 + 1;
      p_dst = (std::string *)operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_12:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v12 = (char *)operator new(0x28uLL);
        strcpy(v12, " rejected; ABM is shutting down ");
        v13 = std::string::append(&__dst, v12, 0x20uLL);
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)object = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        operator delete(v12);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
LABEL_14:
            v17 = a1[5];
            v16 = a1 + 5;
            if (!v17)
            {
LABEL_88:
              if (SHIBYTE(object[2]) < 0)
                operator delete(object[0]);
              return;
            }
LABEL_43:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v34 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0)
              v34 = object[1];
            if (v34)
            {
              v35 = xpc_dictionary_create(0, 0, 0);
              if (v35 || (v35 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x24BD2A468](v35) == MEMORY[0x24BDACFA0])
                {
                  xpc_retain(v35);
                  v36 = v35;
                }
                else
                {
                  v36 = xpc_null_create();
                }
              }
              else
              {
                v36 = xpc_null_create();
                v35 = 0;
              }
              xpc_release(v35);
              v49 = xpc_null_create();
              v50 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
              xpc_release(v50);
              xpc_release(v49);
              if (SHIBYTE(object[2]) >= 0)
                v51 = object;
              else
                v51 = (xpc_object_t *)object[0];
              v52 = xpc_string_create((const char *)v51);
              if (!v52)
                v52 = xpc_null_create();
              xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x24BE04F20], v52);
              v53 = xpc_null_create();
              xpc_release(v52);
              xpc_release(v53);
            }
            LODWORD(v60) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v16, (unsigned int *)&v60, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_88;
          }
        }
        else
        {
          v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            goto LABEL_14;
        }
        v32 = object;
        if (SHIBYTE(object[2]) < 0)
          v32 = (xpc_object_t *)object[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
        _os_log_impl(&dword_24B855000, v15, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v33 = a1[5];
        v16 = a1 + 5;
        if (!v33)
          goto LABEL_88;
        goto LABEL_43;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_12;
  }
  if (MEMORY[0x24BD2A468](a1[6]) == MEMORY[0x24BDACFA0])
  {
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
    v18 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    v19 = (const void *)off_2579B85E0;
    if (!off_2579B85E0)
    {
      CommandDriverFactory::create_default_global(v18);
      v20 = *(_OWORD *)object;
      object[0] = 0;
      object[1] = 0;
      v21 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
      off_2579B85E0 = v20;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v19 = (const void *)off_2579B85E0;
    }
    v24 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    cf[1] = v19;
    cf[2] = *((CFTypeRef *)&off_2579B85E0 + 1);
    if (*(&off_2579B85E0 + 1))
    {
      v25 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(xpc_object_t *__return_ptr, const void *))(*(_QWORD *)v19 + 16))(&v60, v19);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    if (v61)
    {
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v61);
      if (__dst.__r_.__value_.__l.__size_)
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
      if (v61)
        std::__shared_weak_count::__release_weak(v61);
    }
    if (v24)
    {
      v27 = (unint64_t *)&v24->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v29 = __dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0])
    {
      v30 = (void *)a1[6];
      v60 = v30;
      if (v30)
        xpc_retain(v30);
      else
        v60 = xpc_null_create();
      xpc::bridge((xpc *)&v60, v31);
      v37 = object[0];
      if (object[0] && (v38 = CFGetTypeID(object[0]), v38 == CFDictionaryGetTypeID()))
      {
        cf[0] = v37;
        CFRetain(v37);
      }
      else
      {
        cf[0] = 0;
      }
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_47;
      aBlock[3] = &__block_descriptor_tmp_50;
      v40 = a1[7];
      v39 = (std::__shared_weak_count *)a1[8];
      aBlock[4] = v2;
      aBlock[5] = v40;
      v55 = v39;
      if (v39)
      {
        p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
        do
          v42 = __ldxr(p_shared_weak_owners);
        while (__stxr(v42 + 1, p_shared_weak_owners));
      }
      v43 = (void *)a1[5];
      if (v43)
        v43 = _Block_copy(v43);
      v56 = v43;
      v44 = _Block_copy(aBlock);
      v45 = v2[17];
      if (v45)
        dispatch_retain(v45);
      v57 = v44;
      v58 = v45;
      (*(void (**)(std::string::size_type, CFTypeRef *, void **))(*(_QWORD *)v29 + 192))(v29, cf, &v57);
      if (v58)
        dispatch_release(v58);
      if (v57)
        _Block_release(v57);
      if (cf[0])
        CFRelease(cf[0]);
      if (object[0])
        CFRelease(object[0]);
      xpc_release(v60);
      if (v56)
        _Block_release(v56);
      if (v55)
        std::__shared_weak_count::__release_weak(v55);
    }
    size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_)
    {
      v47 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  else
  {
    v7 = xpc_null_create();
    v8 = a1[5];
    object[0] = v7;
    v9 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v8 + 16))(v8, 3760250882, object);
    xpc_release(object[0]);
    xpc_release(v9);
  }
}

void sub_24B8A226C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, char a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,xpc_object_t object,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_24B8A23CC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  operator delete(v1);
  if (*(char *)(v2 - 73) < 0)
  {
    operator delete(*(void **)(v2 - 96));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x24B8A23BCLL);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_47(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  NSObject *v9;
  std::__shared_weak_count *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  char *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  const void *v20;
  size_t v21;
  size_t v22;
  __int128 *p_buf;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  xpc_object_t v28;
  uint64_t v29;
  xpc_object_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  const void *v33;
  xpc_object_t object;
  std::__shared_weak_count *v36;
  __int128 buf;
  unint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v36 = v6;
  if (!v6)
    return;
  if (!a1[5])
  {
    v10 = v6;
LABEL_45:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  v7 = *a2;
  if (*a2)
    v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v8 = 0;
  if (v8)
  {
    v9 = *(NSObject **)(v5 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v7;
      _os_log_error_impl(&dword_24B855000, v9, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!*(_QWORD *)(v5 + 176))
    goto LABEL_38;
  v11 = xpc_dictionary_create(0, 0, 0);
  if (v11 || (v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v11) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v11);
      v12 = v11;
    }
    else
    {
      v12 = xpc_null_create();
    }
  }
  else
  {
    v12 = xpc_null_create();
    v11 = 0;
  }
  xpc_release(v11);
  v13 = xpc_string_create((const char *)*MEMORY[0x24BE051D8]);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x24BE051A0], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = xpc_string_create((const char *)*MEMORY[0x24BE05798]);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x24BE05398], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = (char *)operator new(0x38uLL);
  strcpy(v17, "User requested to change Baseband field test config");
  v18 = xpc_string_create(v17);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x24BE052E8], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  operator delete(v17);
  v20 = (const void *)*MEMORY[0x24BE05170];
  v21 = strlen((const char *)*MEMORY[0x24BE05170]);
  if (v21 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v22 = v21;
  if (v21 >= 0x17)
  {
    v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v24 = v21 | 7;
    v25 = v24 + 1;
    p_buf = (__int128 *)operator new(v24 + 1);
    *((_QWORD *)&buf + 1) = v22;
    v38 = v25 | 0x8000000000000000;
    *(_QWORD *)&buf = p_buf;
  }
  else
  {
    HIBYTE(v38) = v21;
    p_buf = &buf;
    if (!v21)
      goto LABEL_32;
  }
  memmove(p_buf, v20, v22);
LABEL_32:
  *((_BYTE *)p_buf + v22) = 0;
  object = v12;
  if (v12)
    xpc_retain(v12);
  else
    object = xpc_null_create();
  v33 = 0;
  Service::runCommand(v5, (uint64_t)&buf, &object, &v33);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v38) < 0)
    operator delete((void *)buf);
  xpc_release(v12);
LABEL_38:
  if (*a2)
    v26 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v26 = 0;
  if (v26)
    v27 = 3760250880;
  else
    v27 = 0;
  v28 = xpc_null_create();
  v29 = a1[7];
  *(_QWORD *)&buf = v28;
  v30 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, __int128 *))(v29 + 16))(v29, v27, &buf);
  xpc_release((xpc_object_t)buf);
  xpc_release(v30);
  v10 = v36;
  if (v36)
    goto LABEL_45;
}

void sub_24B8A2804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

const void **ctu::cf::CFSharedRef<void const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

xpc_object_t __copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c15_ZTSN3xpc4dictE56c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  void *v5;
  void *v6;
  xpc_object_t result;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v4 = (const void *)a2[5];
  if (v4)
  {
    v5 = _Block_copy(v4);
    v6 = (void *)a2[6];
    a1[5] = v5;
    a1[6] = v6;
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v6 = (void *)a2[6];
    a1[5] = 0;
    a1[6] = v6;
    if (v6)
    {
LABEL_3:
      result = xpc_retain(v6);
      v8 = a2[8];
      a1[7] = a2[7];
      a1[8] = v8;
      if (!v8)
        return result;
      goto LABEL_7;
    }
  }
  result = xpc_null_create();
  a1[6] = result;
  v8 = a2[8];
  a1[7] = a2[7];
  a1[8] = v8;
  if (!v8)
    return result;
LABEL_7:
  v9 = (unint64_t *)(v8 + 16);
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c15_ZTSN3xpc4dictE56c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  const void *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_53(_QWORD *a1, void **a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[5];
  void *aBlock;
  xpc_object_t object;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_16:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v18[0] = MEMORY[0x24BDAC760];
      v18[1] = 1174405120;
      v18[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_54;
      v18[3] = &__block_descriptor_tmp_57_0;
      v18[4] = v7;
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v11 = *a2;
        aBlock = v10;
        object = v11;
        if (v11)
          goto LABEL_6;
      }
      else
      {
        v11 = *a2;
        aBlock = 0;
        object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          v12 = (uint64_t *)(v7 + 120);
          v13 = (std::__shared_weak_count *)a1[6];
          v21 = a1[5];
          v22 = v13;
          if (!v13)
            goto LABEL_12;
          goto LABEL_10;
        }
      }
      object = xpc_null_create();
      v12 = (uint64_t *)(v7 + 120);
      v13 = (std::__shared_weak_count *)a1[6];
      v21 = a1[5];
      v22 = v13;
      if (!v13)
      {
LABEL_12:
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v18);
        if (v22)
          std::__shared_weak_count::__release_weak(v22);
        xpc_release(object);
        object = 0;
        if (aBlock)
          _Block_release(aBlock);
        goto LABEL_16;
      }
LABEL_10:
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
      goto LABEL_12;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_54(uint64_t a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  NSObject *v15;
  uint64_t *v16;
  uint64_t v17;
  CommandDriverFactory *v18;
  uint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::string::size_type v31;
  xpc_object_t value;
  const char *v33;
  std::string *v34;
  uint64_t v35;
  std::string::size_type size;
  xpc_object_t v37;
  xpc_object_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *p_shared_weak_owners;
  unint64_t v42;
  void *v43;
  void *v44;
  NSObject *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  xpc_object_t v49;
  void *v50;
  std::string *v51;
  xpc_object_t v52;
  xpc_object_t v53;
  _QWORD v54[6];
  std::__shared_weak_count *v55;
  void *v56;
  void *aBlock;
  dispatch_object_t v58;
  std::string v59;
  uint64_t v60;
  uint64_t v61;
  xpc_object_t object;
  std::__shared_weak_count *v63;
  std::string v64;
  std::string __dst;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(&v64, 170, sizeof(v64));
    v3 = (const void *)*MEMORY[0x24BE04F08];
    v4 = strlen((const char *)*MEMORY[0x24BE04F08]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v10 = v4 | 7;
      v11 = v10 + 1;
      p_dst = (std::string *)operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_12:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v12 = (char *)operator new(0x28uLL);
        strcpy(v12, " rejected; ABM is shutting down ");
        v13 = std::string::append(&__dst, v12, 0x20uLL);
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        operator delete(v12);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
LABEL_14:
            v17 = *(_QWORD *)(a1 + 40);
            v16 = (uint64_t *)(a1 + 40);
            if (!v17)
            {
LABEL_92:
              if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v64.__r_.__value_.__l.__data_);
              return;
            }
LABEL_48:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
            if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = v64.__r_.__value_.__l.__size_;
            if (size)
            {
              v37 = xpc_dictionary_create(0, 0, 0);
              if (v37 || (v37 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x24BD2A468](v37) == MEMORY[0x24BDACFA0])
                {
                  xpc_retain(v37);
                  v38 = v37;
                }
                else
                {
                  v38 = xpc_null_create();
                }
              }
              else
              {
                v38 = xpc_null_create();
                v37 = 0;
              }
              xpc_release(v37);
              v49 = xpc_null_create();
              v50 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
              xpc_release(v50);
              xpc_release(v49);
              if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v51 = &v64;
              else
                v51 = (std::string *)v64.__r_.__value_.__r.__words[0];
              v52 = xpc_string_create((const char *)v51);
              if (!v52)
                v52 = xpc_null_create();
              xpc_dictionary_set_value(v38, (const char *)*MEMORY[0x24BE04F20], v52);
              v53 = xpc_null_create();
              xpc_release(v52);
              xpc_release(v53);
            }
            LODWORD(object) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v16, (unsigned int *)&object, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_92;
          }
        }
        else
        {
          v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            goto LABEL_14;
        }
        v34 = &v64;
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v34 = (std::string *)v64.__r_.__value_.__r.__words[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
        _os_log_impl(&dword_24B855000, v15, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v35 = *(_QWORD *)(a1 + 40);
        v16 = (uint64_t *)(a1 + 40);
        if (!v35)
          goto LABEL_92;
        goto LABEL_48;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_12;
  }
  if (MEMORY[0x24BD2A468](*(_QWORD *)(a1 + 48)) == MEMORY[0x24BDACFA0])
  {
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
    v18 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    v19 = off_2579B85E0;
    if (!off_2579B85E0)
    {
      CommandDriverFactory::create_default_global(v18);
      v20 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = 0uLL;
      v21 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
      off_2579B85E0 = v20;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if (v64.__r_.__value_.__l.__size_)
      {
        v24 = (unint64_t *)(v64.__r_.__value_.__l.__size_ + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          (*(void (**)(std::string::size_type))(*(_QWORD *)v64.__r_.__value_.__l.__size_ + 16))(v64.__r_.__value_.__l.__size_);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v64.__r_.__value_.__l.__size_);
        }
      }
      v19 = off_2579B85E0;
    }
    v26 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    v60 = v19;
    v61 = *(&off_2579B85E0 + 1);
    if (*(&off_2579B85E0 + 1))
    {
      v27 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(xpc_object_t *__return_ptr, uint64_t))(*(_QWORD *)v19 + 16))(&object, v19);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    if (v63)
    {
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v63);
      if (__dst.__r_.__value_.__l.__size_)
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)object;
      if (v63)
        std::__shared_weak_count::__release_weak(v63);
    }
    if (v26)
    {
      v29 = (unint64_t *)&v26->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v31 = __dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0])
    {
      memset(&v64, 170, sizeof(v64));
      value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 48), (const char *)*MEMORY[0x24BE05040]);
      object = value;
      if (value)
        xpc_retain(value);
      else
        object = xpc_null_create();
      xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v33);
      xpc_release(object);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v59, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
      else
        v59 = v64;
      v54[0] = MEMORY[0x24BDAC760];
      v54[1] = 1174405120;
      v54[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_55;
      v54[3] = &__block_descriptor_tmp_56_0;
      v40 = *(_QWORD *)(a1 + 56);
      v39 = *(std::__shared_weak_count **)(a1 + 64);
      v54[4] = v2;
      v54[5] = v40;
      v55 = v39;
      if (v39)
      {
        p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
        do
          v42 = __ldxr(p_shared_weak_owners);
        while (__stxr(v42 + 1, p_shared_weak_owners));
      }
      v43 = *(void **)(a1 + 40);
      if (v43)
        v43 = _Block_copy(v43);
      v56 = v43;
      v44 = _Block_copy(v54);
      v45 = v2[17];
      if (v45)
        dispatch_retain(v45);
      aBlock = v44;
      v58 = v45;
      (*(void (**)(std::string::size_type, std::string *, void **))(*(_QWORD *)v31 + 216))(v31, &v59, &aBlock);
      if (v58)
        dispatch_release(v58);
      if (aBlock)
        _Block_release(aBlock);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      if (v56)
        _Block_release(v56);
      if (v55)
        std::__shared_weak_count::__release_weak(v55);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
    }
    v46 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_)
    {
      v47 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
  else
  {
    v7 = xpc_null_create();
    v8 = *(_QWORD *)(a1 + 40);
    v64.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    v9 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v8 + 16))(v8, 3760250882, &v64);
    xpc_release(v64.__r_.__value_.__l.__data_);
    xpc_release(v9);
  }
}

void sub_24B8A323C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,xpc_object_t object)
{
  uint64_t v28;

  if (*(char *)(v28 - 105) < 0)
  {
    operator delete(*(void **)(v28 - 128));
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v28 - 96);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v28 - 96);
  _Unwind_Resume(a1);
}

void sub_24B8A3318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B8A335C(_Unwind_Exception *a1)
{
  uint64_t v1;

  xpc_release(*(xpc_object_t *)(v1 - 96));
  if (*(char *)(v1 - 105) < 0)
  {
    operator delete(*(void **)(v1 - 128));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x24B8A33C0);
}

void sub_24B8A3390()
{
  void *v0;
  uint64_t v1;

  xpc_release(*(xpc_object_t *)(v1 - 128));
  xpc_release(v0);
  JUMPOUT(0x24B8A33C0);
}

void sub_24B8A33B8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_24B8A33D0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  operator delete(v1);
  if (*(char *)(v2 - 73) < 0)
  {
    operator delete(*(void **)(v2 - 96));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x24B8A33C0);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_55(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  NSObject *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  xpc_object_t v15;
  uint64_t v16;
  xpc_object_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  NSObject *v22;
  _BYTE object[24];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        v10 = *a2;
        if (*a2)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (v11)
        {
          v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v10;
            _os_log_error_impl(&dword_24B855000, v12, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
          }
        }
        else
        {
          v20 = *a3;
          v21 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v21 = 0;
          if (v21)
          {
            v22 = *(NSObject **)(v7 + 88);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)object = 138412290;
              *(_QWORD *)&object[4] = v20;
              _os_log_impl(&dword_24B855000, v22, OS_LOG_TYPE_DEFAULT, "#I %@", object, 0xCu);
            }
          }
        }
        if (*a2)
          v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v13 = 0;
        if (v13)
          v14 = 3760250880;
        else
          v14 = 0;
        v15 = xpc_null_create();
        v16 = a1[7];
        *(_QWORD *)object = v15;
        v17 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(v16 + 16))(v16, v14, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v17);
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_24B8A35E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_59(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_61(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_63(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_65(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_67(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb4_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_69(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb5_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_71(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  xpc_object_t v10;
  const void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  xpc_object_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_26:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v10 = *a2;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (*a3)
          goto LABEL_6;
      }
      else
      {
        v10 = xpc_null_create();
        v11 = *a3;
        if (*a3)
        {
LABEL_6:
          v12 = _Block_copy(v11);
          v14 = a1[5];
          v13 = (std::__shared_weak_count *)a1[6];
          if (!v13)
          {
LABEL_12:
            v17 = (std::__shared_weak_count *)v7[16];
            if (!v17 || (v18 = v7[15], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x28uLL);
            *v21 = v7;
            v21[1] = v10;
            v22 = xpc_null_create();
            v21[2] = v12;
            v21[3] = v14;
            v21[4] = v13;
            if (v13)
            {
              p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
              do
                v24 = __ldxr(p_shared_weak_owners);
              while (__stxr(v24 + 1, p_shared_weak_owners));
            }
            v25 = v7[17];
            v26 = (unint64_t *)&v20->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
            v28 = operator new(0x18uLL);
            *v28 = v21;
            v28[1] = v18;
            v28[2] = v20;
            dispatch_async_f(v25, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb6_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
            do
              v29 = __ldaxr(v26);
            while (__stlxr(v29 - 1, v26));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            if (v13)
              std::__shared_weak_count::__release_weak(v13);
            xpc_release(v22);
            goto LABEL_26;
          }
LABEL_10:
          v15 = (unint64_t *)&v13->__shared_weak_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
          goto LABEL_12;
        }
      }
      v12 = 0;
      v14 = a1[5];
      v13 = (std::__shared_weak_count *)a1[6];
      if (!v13)
        goto LABEL_12;
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_73(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  xpc_object_t v10;
  const void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  xpc_object_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_26:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v10 = *a2;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (*a3)
          goto LABEL_6;
      }
      else
      {
        v10 = xpc_null_create();
        v11 = *a3;
        if (*a3)
        {
LABEL_6:
          v12 = _Block_copy(v11);
          v14 = a1[5];
          v13 = (std::__shared_weak_count *)a1[6];
          if (!v13)
          {
LABEL_12:
            v17 = (std::__shared_weak_count *)v7[16];
            if (!v17 || (v18 = v7[15], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x28uLL);
            *v21 = v7;
            v21[1] = v10;
            v22 = xpc_null_create();
            v21[2] = v12;
            v21[3] = v14;
            v21[4] = v13;
            if (v13)
            {
              p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
              do
                v24 = __ldxr(p_shared_weak_owners);
              while (__stxr(v24 + 1, p_shared_weak_owners));
            }
            v25 = v7[17];
            v26 = (unint64_t *)&v20->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
            v28 = operator new(0x18uLL);
            *v28 = v21;
            v28[1] = v18;
            v28[2] = v20;
            dispatch_async_f(v25, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb7_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
            do
              v29 = __ldaxr(v26);
            while (__stlxr(v29 - 1, v26));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            if (v13)
              std::__shared_weak_count::__release_weak(v13);
            xpc_release(v22);
            goto LABEL_26;
          }
LABEL_10:
          v15 = (unint64_t *)&v13->__shared_weak_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
          goto LABEL_12;
        }
      }
      v12 = 0;
      v14 = a1[5];
      v13 = (std::__shared_weak_count *)a1[6];
      if (!v13)
        goto LABEL_12;
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_75(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  xpc_object_t v10;
  const void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  xpc_object_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_26:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v10 = *a2;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (*a3)
          goto LABEL_6;
      }
      else
      {
        v10 = xpc_null_create();
        v11 = *a3;
        if (*a3)
        {
LABEL_6:
          v12 = _Block_copy(v11);
          v14 = a1[5];
          v13 = (std::__shared_weak_count *)a1[6];
          if (!v13)
          {
LABEL_12:
            v17 = (std::__shared_weak_count *)v7[16];
            if (!v17 || (v18 = v7[15], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x28uLL);
            *v21 = v7;
            v21[1] = v10;
            v22 = xpc_null_create();
            v21[2] = v12;
            v21[3] = v14;
            v21[4] = v13;
            if (v13)
            {
              p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
              do
                v24 = __ldxr(p_shared_weak_owners);
              while (__stxr(v24 + 1, p_shared_weak_owners));
            }
            v25 = v7[17];
            v26 = (unint64_t *)&v20->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
            v28 = operator new(0x18uLL);
            *v28 = v21;
            v28[1] = v18;
            v28[2] = v20;
            dispatch_async_f(v25, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb8_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
            do
              v29 = __ldaxr(v26);
            while (__stlxr(v29 - 1, v26));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            if (v13)
              std::__shared_weak_count::__release_weak(v13);
            xpc_release(v22);
            goto LABEL_26;
          }
LABEL_10:
          v15 = (unint64_t *)&v13->__shared_weak_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
          goto LABEL_12;
        }
      }
      v12 = 0;
      v14 = a1[5];
      v13 = (std::__shared_weak_count *)a1[6];
      if (!v13)
        goto LABEL_12;
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_77(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb9_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_79(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  xpc_object_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  xpc_object_t v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_26:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (*a3)
      {
        v11 = _Block_copy(*a3);
        v10 = a1[5];
        v12 = (std::__shared_weak_count *)a1[6];
        if (!v12)
          goto LABEL_10;
      }
      else
      {
        v11 = 0;
        v12 = (std::__shared_weak_count *)a1[6];
        if (!v12)
        {
LABEL_10:
          v15 = *a2;
          if (*a2)
          {
            xpc_retain(*a2);
            v16 = (std::__shared_weak_count *)v7[16];
            if (!v16)
LABEL_31:
              std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          else
          {
            v15 = xpc_null_create();
            v16 = (std::__shared_weak_count *)v7[16];
            if (!v16)
              goto LABEL_31;
          }
          v17 = v7[15];
          v18 = std::__shared_weak_count::lock(v16);
          if (!v18)
            goto LABEL_31;
          v19 = v18;
          v20 = operator new(0x28uLL);
          v21 = v20;
          *v20 = v7;
          v20[1] = v11;
          v20[2] = v10;
          v20[3] = v12;
          if (v12)
          {
            p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
            do
              v23 = __ldxr(p_shared_weak_owners);
            while (__stxr(v23 + 1, p_shared_weak_owners));
          }
          v20[4] = v15;
          v24 = xpc_null_create();
          v25 = v7[17];
          v26 = (unint64_t *)&v19->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v28 = operator new(0x18uLL);
          *v28 = v21;
          v28[1] = v17;
          v28[2] = v19;
          dispatch_async_f(v25, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb10_E4__10EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v29 = __ldaxr(v26);
          while (__stlxr(v29 - 1, v26));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
          xpc_release(v24);
          if (v12)
            std::__shared_weak_count::__release_weak(v12);
          goto LABEL_26;
        }
      }
      v13 = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_81(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  xpc_object_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  xpc_object_t v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_26:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (*a3)
      {
        v11 = _Block_copy(*a3);
        v10 = a1[5];
        v12 = (std::__shared_weak_count *)a1[6];
        if (!v12)
          goto LABEL_10;
      }
      else
      {
        v11 = 0;
        v12 = (std::__shared_weak_count *)a1[6];
        if (!v12)
        {
LABEL_10:
          v15 = *a2;
          if (*a2)
          {
            xpc_retain(*a2);
            v16 = (std::__shared_weak_count *)v7[16];
            if (!v16)
LABEL_31:
              std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          else
          {
            v15 = xpc_null_create();
            v16 = (std::__shared_weak_count *)v7[16];
            if (!v16)
              goto LABEL_31;
          }
          v17 = v7[15];
          v18 = std::__shared_weak_count::lock(v16);
          if (!v18)
            goto LABEL_31;
          v19 = v18;
          v20 = operator new(0x28uLL);
          v21 = v20;
          *v20 = v7;
          v20[1] = v11;
          v20[2] = v10;
          v20[3] = v12;
          if (v12)
          {
            p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
            do
              v23 = __ldxr(p_shared_weak_owners);
            while (__stxr(v23 + 1, p_shared_weak_owners));
          }
          v20[4] = v15;
          v24 = xpc_null_create();
          v25 = v7[17];
          v26 = (unint64_t *)&v19->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v28 = operator new(0x18uLL);
          *v28 = v21;
          v28[1] = v17;
          v28[2] = v19;
          dispatch_async_f(v25, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb11_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v29 = __ldaxr(v26);
          while (__stlxr(v29 - 1, v26));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
          xpc_release(v24);
          if (v12)
            std::__shared_weak_count::__release_weak(v12);
          goto LABEL_26;
        }
      }
      v13 = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_83(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  xpc_object_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  xpc_object_t v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_26:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (*a3)
      {
        v11 = _Block_copy(*a3);
        v10 = a1[5];
        v12 = (std::__shared_weak_count *)a1[6];
        if (!v12)
          goto LABEL_10;
      }
      else
      {
        v11 = 0;
        v12 = (std::__shared_weak_count *)a1[6];
        if (!v12)
        {
LABEL_10:
          v15 = *a2;
          if (*a2)
          {
            xpc_retain(*a2);
            v16 = (std::__shared_weak_count *)v7[16];
            if (!v16)
LABEL_31:
              std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          else
          {
            v15 = xpc_null_create();
            v16 = (std::__shared_weak_count *)v7[16];
            if (!v16)
              goto LABEL_31;
          }
          v17 = v7[15];
          v18 = std::__shared_weak_count::lock(v16);
          if (!v18)
            goto LABEL_31;
          v19 = v18;
          v20 = operator new(0x28uLL);
          v21 = v20;
          *v20 = v7;
          v20[1] = v11;
          v20[2] = v10;
          v20[3] = v12;
          if (v12)
          {
            p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
            do
              v23 = __ldxr(p_shared_weak_owners);
            while (__stxr(v23 + 1, p_shared_weak_owners));
          }
          v20[4] = v15;
          v24 = xpc_null_create();
          v25 = v7[17];
          v26 = (unint64_t *)&v19->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v28 = operator new(0x18uLL);
          *v28 = v21;
          v28[1] = v17;
          v28[2] = v19;
          dispatch_async_f(v25, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb12_E4__12EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v29 = __ldaxr(v26);
          while (__stlxr(v29 - 1, v26));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
          xpc_release(v24);
          if (v12)
            std::__shared_weak_count::__release_weak(v12);
          goto LABEL_26;
        }
      }
      v13 = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_85(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb13_E4__13EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_87(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  int v7;
  xpc_object_t v8;
  xpc_object_t v9;
  std::__shared_weak_count *v10;
  xpc_object_t v11;
  unsigned int v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned int v15;
  xpc_object_t object;
  CFTypeRef cf;
  std::__shared_weak_count *v19;

  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4)
    return;
  v6 = std::__shared_weak_count::lock(v4);
  v19 = v6;
  if (!v6)
    return;
  if (!*(_QWORD *)(a1 + 32))
  {
    v10 = v6;
LABEL_19:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  cf = (CFTypeRef)TelephonyBasebandCreateController();
  v7 = TelephonyBasebandPowerDebugUnblock();
  v8 = xpc_dictionary_create(0, 0, 0);
  v9 = v8;
  if (v8)
  {
    object = v8;
  }
  else
  {
    v9 = xpc_null_create();
    object = v9;
    if (!v9)
    {
      v11 = xpc_null_create();
      v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x24BD2A468](v9) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  v11 = xpc_null_create();
LABEL_12:
  object = v11;
LABEL_13:
  xpc_release(v9);
  if (v7)
    v12 = 0;
  else
    v12 = -534716414;
  v15 = v12;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v15, &object);
  xpc_release(object);
  if (cf)
    CFRelease(cf);
  v10 = v19;
  if (v19)
    goto LABEL_19;
}

void sub_24B8A508C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, const void *a12, __int16 a13, char a14, char a15)
{
  xpc_release(object);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(&a12);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_24B8A50C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_89(uint64_t a1, xpc_object_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  xpc_object_t value;
  std::__shared_weak_count *v9;
  int v10;
  xpc_object_t v11;
  int v12;
  xpc_object_t v13;
  int v14;
  xpc_object_t v15;
  int v16;
  xpc_object_t v17;
  int v18;
  xpc_object_t v19;
  int v20;
  xpc_object_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  int v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  unsigned int v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unsigned int v42;
  xpc_object_t object;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v47;

  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4)
    return;
  v7 = std::__shared_weak_count::lock(v4);
  v47 = v7;
  if (!v7)
    return;
  if (!*(_QWORD *)(a1 + 32))
  {
    v9 = v7;
LABEL_65:
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return;
  }
  v44 = 0;
  v45 = 0;
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE057E8]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v10 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v11 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05848]);
  object = v11;
  if (v11)
    xpc_retain(v11);
  else
    object = xpc_null_create();
  v12 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v13 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05828]);
  object = v13;
  if (v13)
    xpc_retain(v13);
  else
    object = xpc_null_create();
  v14 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v15 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05850]);
  object = v15;
  if (v15)
    xpc_retain(v15);
  else
    object = xpc_null_create();
  v16 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v17 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05858]);
  object = v17;
  if (v17)
    xpc_retain(v17);
  else
    object = xpc_null_create();
  v18 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v19 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05870]);
  object = v19;
  if (v19)
    xpc_retain(v19);
  else
    object = xpc_null_create();
  v20 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v21 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05840]);
  object = v21;
  if (v21)
    xpc_retain(v21);
  else
    object = xpc_null_create();
  v22 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  if (v12)
    v23 = 2;
  else
    v23 = 0;
  v24 = v23 | v10;
  if (v14)
    v25 = 4;
  else
    v25 = 0;
  if (v16)
    v26 = 8;
  else
    v26 = 0;
  v27 = v24 | v25 | v26;
  if (v18)
    v28 = 16;
  else
    v28 = 0;
  if (v20)
    v29 = 32;
  else
    v29 = 0;
  v30 = v28 | v29;
  if (v22)
    v31 = 64;
  else
    v31 = 0;
  LODWORD(v44) = v27 | v30 | v31;
  v32 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE04F68]);
  object = v32;
  if (v32)
    xpc_retain(v32);
  else
    object = xpc_null_create();
  HIDWORD(v44) = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v33 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05318]);
  object = v33;
  if (v33)
    xpc_retain(v33);
  else
    object = xpc_null_create();
  LODWORD(v45) = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v34 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05830]);
  object = v34;
  if (v34)
    xpc_retain(v34);
  else
    object = xpc_null_create();
  BYTE4(v45) = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  BYTE5(v45) = 0;
  v35 = TelephonyBasebandSetPowerDebugOptions();
  object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v36 = xpc_dictionary_create(0, 0, 0);
  v37 = v36;
  if (v36)
  {
    object = v36;
  }
  else
  {
    v37 = xpc_null_create();
    object = v37;
    if (!v37)
    {
      v38 = xpc_null_create();
      v37 = 0;
      goto LABEL_60;
    }
  }
  if (MEMORY[0x24BD2A468](v37) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v37);
    goto LABEL_61;
  }
  v38 = xpc_null_create();
LABEL_60:
  object = v38;
LABEL_61:
  xpc_release(v37);
  if (v35)
    v39 = 0;
  else
    v39 = -534716414;
  v42 = v39;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v42, &object);
  xpc_release(object);
  v9 = v47;
  if (v47)
    goto LABEL_65;
}

void sub_24B8A5588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, char a13)
{
  xpc_release(object);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_91(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  int v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  unsigned int v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unsigned int v38;
  xpc_object_t object;
  int64_t value;
  int64_t v41;
  std::__shared_weak_count *v43;

  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4)
    return;
  v6 = std::__shared_weak_count::lock(v4);
  v43 = v6;
  if (!v6)
    return;
  if (!*(_QWORD *)(a1 + 32))
  {
    v11 = v6;
LABEL_41:
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  value = 0;
  v41 = 0;
  v7 = MEMORY[0x24BD28DD0](&value);
  object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v8 = xpc_dictionary_create(0, 0, 0);
  v9 = v8;
  v10 = MEMORY[0x24BDACFA0];
  if (v8)
  {
    object = v8;
  }
  else
  {
    v9 = xpc_null_create();
    object = v9;
    if (!v9)
    {
      v12 = xpc_null_create();
      v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x24BD2A468](v9) == v10)
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  v12 = xpc_null_create();
LABEL_12:
  object = v12;
LABEL_13:
  xpc_release(v9);
  if (v7)
  {
    if (MEMORY[0x24BD2A468](object) == v10)
    {
      v13 = xpc_BOOL_create(value & 1);
      if (!v13)
        v13 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x24BE057E8], v13);
      v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      v15 = xpc_BOOL_create((value & 2) != 0);
      if (!v15)
        v15 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x24BE05848], v15);
      v16 = xpc_null_create();
      xpc_release(v15);
      xpc_release(v16);
      v17 = xpc_BOOL_create((value & 4) != 0);
      if (!v17)
        v17 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x24BE05828], v17);
      v18 = xpc_null_create();
      xpc_release(v17);
      xpc_release(v18);
      v19 = xpc_BOOL_create((value & 8) != 0);
      if (!v19)
        v19 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x24BE05850], v19);
      v20 = xpc_null_create();
      xpc_release(v19);
      xpc_release(v20);
      v21 = xpc_BOOL_create((value & 0x10) != 0);
      if (!v21)
        v21 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x24BE05858], v21);
      v22 = xpc_null_create();
      xpc_release(v21);
      xpc_release(v22);
      v23 = xpc_BOOL_create((value & 0x20) != 0);
      if (!v23)
        v23 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x24BE05870], v23);
      v24 = xpc_null_create();
      xpc_release(v23);
      xpc_release(v24);
      v25 = xpc_BOOL_create((value & 0x40) != 0);
      if (!v25)
        v25 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x24BE05840], v25);
      v26 = xpc_null_create();
      xpc_release(v25);
      xpc_release(v26);
      v27 = xpc_int64_create(HIDWORD(value));
      if (!v27)
        v27 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x24BE04F68], v27);
      v28 = xpc_null_create();
      xpc_release(v27);
      xpc_release(v28);
      v29 = xpc_int64_create(v41);
      if (!v29)
        v29 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x24BE05318], v29);
      v30 = xpc_null_create();
      xpc_release(v29);
      xpc_release(v30);
      v31 = xpc_BOOL_create(SBYTE4(v41));
      if (!v31)
        v31 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x24BE05830], v31);
      v32 = xpc_null_create();
      xpc_release(v31);
      xpc_release(v32);
      v33 = xpc_BOOL_create(SBYTE5(v41));
      if (!v33)
        v33 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x24BE05750], v33);
      v34 = xpc_null_create();
      xpc_release(v33);
      xpc_release(v34);
    }
    v35 = 0;
  }
  else
  {
    v35 = -534716414;
  }
  v38 = v35;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v38, &object);
  xpc_release(object);
  v11 = v43;
  if (v43)
    goto LABEL_41;
}

void sub_24B8A5D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  xpc_release(v13);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void RadioModule::finishInitialization_sync(RadioModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  CommandDriverFactory *v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  void *v23;
  NSObject *v24;
  const char *v25;
  size_t v26;
  void *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  CFTypeRef v38;
  const void *v39;
  size_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  NSObject *v47;
  const void *v48;
  size_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  NSObject *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD v60[6];
  std::__shared_weak_count *v61;
  void *v62;
  dispatch_object_t v63;
  void *v64[2];
  unint64_t v65;
  _QWORD v66[6];
  std::__shared_weak_count *v67;
  void *v68;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v71;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v74;
  _QWORD aBlock[6];
  std::__shared_weak_count *v76;
  const void *v77;
  dispatch_object_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  __int128 v85;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v83 = 0xAAAAAAAAAAAAAAAALL;
  v84 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v10 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v11 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v10);
    v12 = v85;
    v85 = 0uLL;
    v13 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v12;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v11 = off_2579B85E0;
  }
  v16 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  v79 = v11;
  v80 = *(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v17 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v11 + 16))(&v81, v11);
  v83 = 0;
  v84 = 0;
  if (v82)
  {
    v84 = std::__shared_weak_count::lock(v82);
    if (v84)
      v83 = v81;
    if (v82)
      std::__shared_weak_count::__release_weak(v82);
  }
  if (!v16)
    goto LABEL_28;
  v19 = (unint64_t *)&v16->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v21 = (_QWORD *)&loc_24B950000;
    if (!v83)
      goto LABEL_39;
  }
  else
  {
LABEL_28:
    v21 = &loc_24B950000;
    if (!v83)
      goto LABEL_39;
  }
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = v21[145];
  aBlock[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_96;
  aBlock[4] = this;
  aBlock[5] = v3;
  v76 = v5;
  do
    v22 = __ldxr(p_shared_weak_owners);
  while (__stxr(v22 + 1, p_shared_weak_owners));
  v23 = _Block_copy(aBlock);
  v24 = *((_QWORD *)this + 17);
  if (v24)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v77 = v23;
  v78 = v24;
  radio::CommandDriver::watchOperatingMode();
  if (v78)
    dispatch_release(v78);
  if (v77)
    _Block_release(v77);
  if (v76)
    std::__shared_weak_count::__release_weak(v76);
LABEL_39:
  v25 = (const char *)(*(uint64_t (**)(RadioModule *))(*(_QWORD *)this + 16))(this);
  v26 = strlen(v25);
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v29 = v26 | 7;
    v30 = v29 + 1;
    v28 = (void **)operator new(v29 + 1);
    __dst[1] = v27;
    v74 = v30 | 0x8000000000000000;
    __dst[0] = v28;
  }
  else
  {
    HIBYTE(v74) = v26;
    v28 = __dst;
    if (!v26)
      goto LABEL_47;
  }
  memmove(v28, v25, (size_t)v27);
LABEL_47:
  *((_BYTE *)v27 + (_QWORD)v28) = 0;
  cf = 0;
  AppleBasebandManager::create();
  v31 = v85;
  v85 = 0uLL;
  v32 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  *((_OWORD *)this + 11) = v31;
  if (!v32)
    goto LABEL_51;
  v33 = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
    if (!*((_QWORD *)&v85 + 1))
      goto LABEL_55;
  }
  else
  {
LABEL_51:
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
    if (!*((_QWORD *)&v85 + 1))
      goto LABEL_55;
  }
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (v37)
  {
LABEL_55:
    v38 = cf;
    if (!cf)
      goto LABEL_57;
    goto LABEL_56;
  }
  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
  std::__shared_weak_count::__release_weak(v35);
  v38 = cf;
  if (cf)
LABEL_56:
    CFRelease(v38);
LABEL_57:
  if (SHIBYTE(v74) < 0)
    operator delete(__dst[0]);
  v39 = (const void *)*MEMORY[0x24BE05658];
  v40 = strlen((const char *)*MEMORY[0x24BE05658]);
  if (v40 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v41 = (void *)v40;
  if (v40 >= 0x17)
  {
    v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v43 = v40 | 7;
    v44 = v43 + 1;
    v42 = operator new(v43 + 1);
    __p[1] = v41;
    v71 = v44 | 0x8000000000000000;
    __p[0] = v42;
  }
  else
  {
    HIBYTE(v71) = v40;
    v42 = __p;
    if (!v40)
      goto LABEL_67;
  }
  memmove(v42, v39, (size_t)v41);
LABEL_67:
  *((_BYTE *)v41 + (_QWORD)v42) = 0;
  v66[0] = MEMORY[0x24BDAC760];
  v66[1] = 1174405120;
  v66[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_97;
  v66[3] = &__block_descriptor_tmp_100;
  v66[4] = this;
  v66[5] = v3;
  v67 = v5;
  do
    v45 = __ldxr(p_shared_weak_owners);
  while (__stxr(v45 + 1, p_shared_weak_owners));
  v46 = _Block_copy(v66);
  v47 = *((_QWORD *)this + 17);
  if (v47)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v68 = v46;
  object = v47;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (v68)
    _Block_release(v68);
  if (SHIBYTE(v71) < 0)
    operator delete(__p[0]);
  v48 = (const void *)*MEMORY[0x24BE05420];
  v49 = strlen((const char *)*MEMORY[0x24BE05420]);
  if (v49 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v50 = (void *)v49;
  if (v49 >= 0x17)
  {
    v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v52 = v49 | 7;
    v53 = v52 + 1;
    v51 = operator new(v52 + 1);
    v64[1] = v50;
    v65 = v53 | 0x8000000000000000;
    v64[0] = v51;
  }
  else
  {
    HIBYTE(v65) = v49;
    v51 = v64;
    if (!v49)
      goto LABEL_85;
  }
  memmove(v51, v48, (size_t)v50);
LABEL_85:
  *((_BYTE *)v50 + (_QWORD)v51) = 0;
  v60[0] = MEMORY[0x24BDAC760];
  v60[1] = 1174405120;
  v60[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_101;
  v60[3] = &__block_descriptor_tmp_102;
  v60[4] = this;
  v60[5] = v3;
  v61 = v5;
  do
    v54 = __ldxr(p_shared_weak_owners);
  while (__stxr(v54 + 1, p_shared_weak_owners));
  v55 = _Block_copy(v60);
  v56 = *((_QWORD *)this + 17);
  if (v56)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v62 = v55;
  v63 = v56;
  AppleBasebandManager::setEventHandler();
  if (v63)
    dispatch_release(v63);
  if (v62)
    _Block_release(v62);
  if (SHIBYTE(v65) < 0)
    operator delete(v64[0]);
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 22));
  if (v61)
    std::__shared_weak_count::__release_weak(v61);
  if (v67)
    std::__shared_weak_count::__release_weak(v67);
  v57 = v84;
  if (v84)
  {
    v58 = (unint64_t *)&v84->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_24B8A6438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53)
{
  std::__shared_weak_count *v53;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  std::__shared_weak_count::__release_weak(v53);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke(_QWORD *a1, uint64_t *a2, const __CFDictionary **a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void *v15;
  size_t v16;
  void *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  const __CFDictionary *v21;
  capabilities::abs *v22;
  capabilities::txpower *v23;
  int Int;
  NSObject *v25;
  const char *v26;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  _BYTE buf[12];
  uint8_t v34[24];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = a1[4];
  v31 = 0;
  v32 = 0;
  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v32 = std::__shared_weak_count::lock(v5);
    if (!v32)
      return;
    v31 = a1[5];
    if (v31)
    {
      v8 = *a2;
      v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      if (!v8)
        v9 = 0;
      if (v9)
      {
        v10 = *(NSObject **)(v4 + 88);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v34 = 138412290;
          *(_QWORD *)&v34[4] = v8;
          _os_log_error_impl(&dword_24B855000, v10, OS_LOG_TYPE_ERROR, "%@", v34, 0xCu);
        }
        goto LABEL_9;
      }
      if (*a3
         ? ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get
         : 0)
      {
        v15 = (const void *)*MEMORY[0x24BE05778];
        v16 = strlen((const char *)*MEMORY[0x24BE05778]);
        if (v16 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v17 = (void *)v16;
        if (v16 >= 0x17)
        {
          v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v19 = v16 | 7;
          v20 = v19 + 1;
          v18 = (void **)operator new(v19 + 1);
          __dst[1] = v17;
          v30 = v20 | 0x8000000000000000;
          __dst[0] = v18;
        }
        else
        {
          HIBYTE(v30) = v16;
          v18 = __dst;
          if (!v16)
            goto LABEL_27;
        }
        memmove(v18, v15, (size_t)v17);
LABEL_27:
        *((_BYTE *)v17 + (_QWORD)v18) = 0;
        v21 = *a3;
        cf = v21;
        if (v21)
          CFRetain(v21);
        aBlock = 0;
        Service::broadcastEvent(v4, (uint64_t)__dst, &cf, (const void **)&aBlock);
        if (aBlock)
          _Block_release(aBlock);
        v22 = (capabilities::abs *)cf;
        if (cf)
          CFRelease(cf);
        if (SHIBYTE(v30) < 0)
          operator delete(__dst[0]);
        v23 = (capabilities::txpower *)capabilities::abs::supportsChargerDesense(v22);
        if ((_DWORD)v23 && capabilities::txpower::supportsPowerChargerDesense(v23))
        {
          memset(v34, 170, 16);
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v34, *a3);
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, (const char *)*MEMORY[0x24BE05460]);
          Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v34, *(const __CFString **)buf);
          MEMORY[0x24BD29478](buf);
          TelephonyBasebandSetChargerDesense();
          v25 = *(NSObject **)(v4 + 88);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            v26 = "Off";
            if (!Int)
              v26 = "On";
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v26;
            _os_log_impl(&dword_24B855000, v25, OS_LOG_TYPE_DEFAULT, "#I Charger Desense: %s", buf, 0xCu);
          }
          MEMORY[0x24BD294A8](v34);
        }
      }
    }
  }
LABEL_9:
  v11 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_97(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  const void *v7;
  int v8;
  size_t v9;
  __int128 *v10;
  capabilities::radio *v11;
  __int128 *v12;
  __int128 *v13;
  ctu::iokit::Controller *v14;
  std::__shared_weak_count *v15;
  capabilities::abs *v16;
  RadioModule *v17;
  void (**v18)(void *, std::string *);
  capabilities::abs *v19;
  capabilities::abs *v20;
  capabilities::abs *v21;
  CommandDriverFactory *v22;
  uint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  _QWORD aBlock[5];
  void (**v47)(void *, std::string *);
  uint8_t buf[16];
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  _QWORD v52[2];
  unint64_t v53;
  std::__shared_weak_count *v55;

  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v55 = v6;
  if (!v6)
    return;
  if (!a1[5])
  {
    v15 = v6;
LABEL_82:
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    return;
  }
  v53 = 0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData(*a2);
  v7 = (const void *)0xAAAAAAAAAAAAAAAALL;
  if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
  {
    v52[0] = 0xAAAAAAAAAAAAAAAALL;
    v52[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v52, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
    v50 = 0uLL;
    v51 = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v44, (const char *)*MEMORY[0x24BE05198]);
    ctu::cf::map_adapter::getString();
    MEMORY[0x24BD29478](&v44);
    if (SHIBYTE(v51) < 0)
      operator delete((void *)v50);
    v51 = v49;
    v50 = *(_OWORD *)buf;
    v8 = SHIBYTE(v49);
    if (v49 >= 0)
      v9 = HIBYTE(v51);
    else
      v9 = *((_QWORD *)&v50 + 1);
    if (v9 == strlen((const char *)*MEMORY[0x24BE05418])
      && (v49 >= 0 ? (v10 = &v50) : (v10 = (__int128 *)v50),
          v11 = (capabilities::radio *)memcmp(v10, (const void *)*MEMORY[0x24BE05418], v9),
          !(_DWORD)v11))
    {
      v16 = (capabilities::abs *)capabilities::radio::supportsBasebandStateController(v11);
      if ((_DWORD)v16)
        RadioModule::getResetProperties_sync((RadioModule *)v5);
      v17 = (RadioModule *)capabilities::abs::supportsBatteryInfoMonitoring(v16);
      if ((_DWORD)v17)
      {
        *(_WORD *)(v5 + 320) = 0;
        *(_BYTE *)(v5 + 322) = 0;
        RadioModule::monitorBatteryInfo_sync((RadioModule *)v5);
      }
      RadioModule::setRegion_sync(v17);
      RadioModule::startHealthService_sync((RadioModule *)v5);
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 0x40000000;
      aBlock[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_2;
      aBlock[3] = &__block_descriptor_tmp_98;
      aBlock[4] = v5;
      v18 = (void (**)(void *, std::string *))_Block_copy(aBlock);
      v47 = v18;
      RadioModule::getVersion_sync(v5, &v47);
      if (v18)
        _Block_release(v18);
      v20 = (capabilities::abs *)capabilities::abs::supportsCalibrationQuery(v19);
      if ((_DWORD)v20)
      {
        if (*(_BYTE *)(v5 + 192) == 3)
          RadioModule::queryFactoryCalibrationStatus_sync((RadioModule *)v5);
        if (*(_BYTE *)(v5 + 200) == 2)
          RadioModule::queryRFCalibrationStatus_sync((RadioModule *)v5);
      }
      v21 = (capabilities::abs *)capabilities::abs::supportsFieldTestConfig(v20);
      if ((_DWORD)v21)
        RadioModule::queryFieldTestConfig_sync((RadioModule *)v5);
      if (capabilities::abs::supportsResetSPMIEvent(v21))
      {
        v44 = 0xAAAAAAAAAAAAAAAALL;
        v45 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
        v22 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
        v23 = off_2579B85E0;
        if (!off_2579B85E0)
        {
          CommandDriverFactory::create_default_global(v22);
          v24 = *(_OWORD *)buf;
          memset(buf, 0, sizeof(buf));
          v25 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
          off_2579B85E0 = v24;
          if (v25)
          {
            v26 = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          v28 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v29 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          v23 = off_2579B85E0;
        }
        v31 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
        if (*(&off_2579B85E0 + 1))
        {
          v32 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
        (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v23 + 16))(&v42, v23);
        v44 = 0;
        v45 = 0;
        if (v43)
        {
          v45 = std::__shared_weak_count::lock(v43);
          if (v45)
            v44 = v42;
          if (v43)
            std::__shared_weak_count::__release_weak(v43);
        }
        if (v31)
        {
          v34 = (unint64_t *)&v31->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if (v44)
          (*(void (**)(unint64_t))(*(_QWORD *)v44 + 392))(v44);
        v36 = v45;
        if (v45)
        {
          v37 = (unint64_t *)&v45->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
            if (SHIBYTE(v51) < 0)
              goto LABEL_77;
            goto LABEL_78;
          }
        }
      }
    }
    else if (v9 == strlen((const char *)*MEMORY[0x24BE05530])
           && (v8 >= 0 ? (v12 = &v50) : (v12 = (__int128 *)v50), !memcmp(v12, (const void *)*MEMORY[0x24BE05530], v9))
           || v9 == strlen((const char *)*MEMORY[0x24BE05680])
           && (v8 >= 0 ? (v13 = &v50) : (v13 = (__int128 *)v50), !memcmp(v13, (const void *)*MEMORY[0x24BE05680], v9)))
    {
      v14 = *(ctu::iokit::Controller **)(v5 + 304);
      if (v14)
      {
        ctu::iokit::Controller::stopBatteryInfoNotifications(v14);
      }
      else
      {
        v39 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_24B855000, v39, OS_LOG_TYPE_ERROR, "Invalid fIOKitController", buf, 2u);
          if ((SHIBYTE(v51) & 0x80000000) == 0)
            goto LABEL_78;
          goto LABEL_77;
        }
      }
    }
    if (SHIBYTE(v51) < 0)
LABEL_77:
      operator delete((void *)v50);
LABEL_78:
    MEMORY[0x24BD294A8](v52);
    v7 = (const void *)v53;
  }
  if (v7)
    CFRelease(v7);
  v15 = v55;
  if (v55)
    goto LABEL_82;
}

void sub_24B8A6DE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (*(char *)(v1 - 73) < 0)
    operator delete(*(void **)(v1 - 96));
  MEMORY[0x24BD294A8](v1 - 72);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v1 - 56));
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void RadioModule::getResetProperties_sync(RadioModule *this)
{
  NSObject *v2;
  const char *v3;
  int v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  CommandDriverFactory *v17;
  uint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  dispatch_object_t object;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  _QWORD aBlock[6];
  std::__shared_weak_count *v45;
  void *v46;
  dispatch_object_t v47;
  _BYTE buf[18];
  __int16 v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 296))
  {
    v2 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_BYTE *)this + 289))
        v3 = "true";
      else
        v3 = "false";
      v4 = *((unsigned __int16 *)this + 145);
      v5 = *((_DWORD *)this + 73);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v3;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v4;
      v49 = 1024;
      v50 = v5;
      _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Baseband properties (cached):\n    Coredump supported: %s\n    PowerSequence index: %u\n    Baseband version: 0x%08x", buf, 0x18u);
    }
    return;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v6 || (v7 = *((_QWORD *)this + 15), (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v46 = (void *)0xAAAAAAAAAAAAAAAALL;
  v47 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule23getResetProperties_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_112;
  aBlock[4] = this;
  aBlock[5] = v7;
  v45 = v9;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = _Block_copy(aBlock);
  v16 = *((_QWORD *)this + 17);
  if (v16)
    dispatch_retain(v16);
  v46 = v15;
  v47 = v16;
  v42 = 0xAAAAAAAAAAAAAAAALL;
  v43 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v17 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v18 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v17);
    v19 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v20 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v19;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v18 = off_2579B85E0;
  }
  v26 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  v38 = v18;
  v39 = *(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v27 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v18 + 16))(&v40, v18);
  v42 = 0;
  v43 = 0;
  if (v41)
  {
    v43 = std::__shared_weak_count::lock(v41);
    if (v43)
      v42 = v40;
    if (v41)
      std::__shared_weak_count::__release_weak(v41);
  }
  if (!v26)
    goto LABEL_43;
  v29 = (unint64_t *)&v26->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v31 = v42;
    if (v42)
      goto LABEL_44;
  }
  else
  {
LABEL_43:
    v31 = v42;
    if (v42)
    {
LABEL_44:
      v32 = v46;
      if (v46)
        v32 = _Block_copy(v46);
      v36 = v32;
      object = v47;
      if (v47)
        dispatch_retain(v47);
      (*(void (**)(unint64_t, void **))(*(_QWORD *)v31 + 168))(v31, &v36);
      if (object)
        dispatch_release(object);
      if (v36)
        _Block_release(v36);
    }
  }
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v47)
    dispatch_release(v47);
  if (v46)
    _Block_release(v46);
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_24B8A728C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void RadioModule::monitorBatteryInfo_sync(RadioModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  char v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  _QWORD v22[6];
  std::__shared_weak_count *v23;
  void *v24;
  dispatch_object_t v25;
  void *v26;
  dispatch_object_t object;
  uint8_t buf[8];
  _QWORD aBlock[6];
  std::__shared_weak_count *v30;
  uint8_t v31[16];

  if (*((_QWORD *)this + 38))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v5 = v4;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
    memset(v31, 170, sizeof(v31));
    v10 = MEMORY[0x24BDAC760];
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_113;
    aBlock[4] = this;
    aBlock[5] = v3;
    v30 = v5;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    v12 = _Block_copy(aBlock);
    v13 = *((_QWORD *)this + 17);
    if (v13)
      dispatch_retain(*((dispatch_object_t *)this + 17));
    *(_QWORD *)v31 = v12;
    *(_QWORD *)&v31[8] = v13;
    v14 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_24B855000, v14, OS_LOG_TYPE_DEFAULT, "#I Registering for battery info updates", buf, 2u);
    }
    v22[0] = v10;
    v22[1] = 1174405120;
    v22[2] = ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke_114;
    v22[3] = &__block_descriptor_tmp_118;
    v22[4] = this;
    v22[5] = v3;
    v23 = v5;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    if (v12)
    {
      v24 = _Block_copy(v12);
      v25 = v13;
      if (!v13)
        goto LABEL_21;
    }
    else
    {
      v24 = 0;
      v25 = v13;
      if (!v13)
      {
LABEL_21:
        v16 = _Block_copy(v22);
        v17 = *((_QWORD *)this + 17);
        if (v17)
          dispatch_retain(*((dispatch_object_t *)this + 17));
        v26 = v16;
        object = v17;
        v18 = ctu::iokit::Controller::registerForBatteryInfoChange();
        if (object)
          dispatch_release(object);
        if (v26)
          _Block_release(v26);
        if ((v18 & 1) == 0 && (v19 = *((_QWORD *)this + 11), os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_24B855000, v19, OS_LOG_TYPE_ERROR, "Failed to register for battery info updates", buf, 2u);
          v20 = v25;
          if (!v25)
            goto LABEL_31;
        }
        else
        {
          v20 = v25;
          if (!v25)
          {
LABEL_31:
            if (v24)
              _Block_release(v24);
            if (v23)
              std::__shared_weak_count::__release_weak(v23);
            if (v13)
              dispatch_release(v13);
            if (v12)
              _Block_release(v12);
            if (v30)
              std::__shared_weak_count::__release_weak(v30);
            std::__shared_weak_count::__release_weak(v5);
            return;
          }
        }
        dispatch_release(v20);
        goto LABEL_31;
      }
    }
    dispatch_retain(v13);
    goto LABEL_21;
  }
  v21 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v31 = 0;
    _os_log_error_impl(&dword_24B855000, v21, OS_LOG_TYPE_ERROR, "Invalid fIOKitController", v31, 2u);
  }
}

void sub_24B8A761C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  std::__shared_weak_count *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v32;

  dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitBatteryInfo)>::~callback((uint64_t)&a19);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v29);
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v30 - 112);
    v32 = a28;
    if (!a28)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v28);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v30 - 112);
    v32 = a28;
    if (!a28)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v32);
  std::__shared_weak_count::__release_weak(v28);
  _Unwind_Resume(a1);
}

void RadioModule::setRegion_sync(RadioModule *this)
{
  CommandDriverFactory *v1;
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  config::hw *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *__p;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  __int128 v27;

  if (!capabilities::abs::shouldSetRegion(this))
    return;
  v25 = 0xAAAAAAAAAAAAAAAALL;
  v26 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v1 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v2 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v1);
    v3 = v27;
    v27 = 0uLL;
    v4 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v3;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (*((_QWORD *)&v27 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v27 + 1) + 16))(*((_QWORD *)&v27 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v27 + 1));
      }
    }
    v2 = off_2579B85E0;
  }
  v9 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  v21 = v2;
  v22 = *(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v10 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v2 + 16))(&v23, v2);
  v25 = 0;
  v26 = 0;
  v12 = (config::hw *)v24;
  if (v24)
  {
    v26 = std::__shared_weak_count::lock(v24);
    if (v26)
      v25 = v23;
    v12 = (config::hw *)v24;
    if (v24)
      std::__shared_weak_count::__release_weak(v24);
  }
  if (!v9)
    goto LABEL_26;
  v13 = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v15 = v25;
    if (v25)
    {
LABEL_27:
      config::hw::regionCode(v12);
      (*(void (**)(unint64_t, void **))(*(_QWORD *)v15 + 304))(v15, &__p);
      if (v20 < 0)
        operator delete(__p);
    }
  }
  else
  {
LABEL_26:
    v15 = v25;
    if (v25)
      goto LABEL_27;
  }
  v16 = v26;
  if (v26)
  {
    v17 = (unint64_t *)&v26->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_24B8A7880(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_24B8A789C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v15 - 48);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v15 - 48);
  _Unwind_Resume(a1);
}

void sub_24B8A78D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void RadioModule::startHealthService_sync(RadioModule *this)
{
  CFMutableDictionaryRef Mutable;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  DataStallDetection *v18;
  uint64_t v19;
  uint64_t v20;
  capabilities::radio *v21;
  unsigned __int8 v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  CFTypeRef v29;
  CFTypeID v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  CFTypeRef v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  CFTypeRef v42;
  CFTypeRef v43[2];
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  CFTypeRef cf;
  uint64_t block;
  uint64_t v52;
  void (*v53)(uint64_t);
  void *v54;
  uint64_t *v55;

  cf = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
    cf = Mutable;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  v4 = MEMORY[0x24BDAC760];
  block = MEMORY[0x24BDAC760];
  v52 = 0x40000000;
  v53 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v54 = &__block_descriptor_tmp_13_5;
  v55 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v5 = *(_QWORD *)algn_2579B8AE8;
    v47 = GetABMLogServer(void)::sLogServer;
    v48 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_8;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v5 = *(_QWORD *)algn_2579B8AE8;
    v47 = GetABMLogServer(void)::sLogServer;
    v48 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_8;
  }
  v6 = (unint64_t *)(v5 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_8:
  DataStallDetection::create((capabilities::abs *)&v47, (uint64_t *)&v49);
  v8 = v49;
  v49 = 0uLL;
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  *((_OWORD *)this + 16) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v48;
  if (v48)
  {
    v16 = (unint64_t *)&v48->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      v18 = (DataStallDetection *)*((_QWORD *)this + 32);
      if (!v18)
        goto LABEL_24;
      goto LABEL_23;
    }
  }
  v18 = (DataStallDetection *)*((_QWORD *)this + 32);
  if (v18)
LABEL_23:
    DataStallDetection::start(v18);
LABEL_24:
  v21 = (capabilities::radio *)operator new(0x10uLL);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  block = v4;
  v52 = 0x40000000;
  v53 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v54 = &__block_descriptor_tmp_13_5;
  v55 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v23 = *(_QWORD *)algn_2579B8AE8;
    v45 = GetABMLogServer(void)::sLogServer;
    v46 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_29;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v23 = *(_QWORD *)algn_2579B8AE8;
    v45 = GetABMLogServer(void)::sLogServer;
    v46 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_29;
  }
  v24 = (unint64_t *)(v23 + 8);
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
LABEL_29:
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  v43[1] = *((CFTypeRef *)this + 32);
  v44 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = cf;
  if (cf && (v30 = CFGetTypeID(cf), v30 == CFDictionaryGetTypeID()))
  {
    v43[0] = v29;
    CFRetain(v29);
  }
  else
  {
    v43[0] = 0;
  }
  radio::HealthService::HealthService(v21, v19, v20, v43);
  v31 = operator new(0x20uLL);
  *v31 = off_251CBBB58;
  v31[1] = 0;
  v31[2] = 0;
  v31[3] = v21;
  v32 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 34) = v21;
  *((_QWORD *)this + 35) = v31;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      v35 = v43[0];
      if (!v43[0])
        goto LABEL_42;
      goto LABEL_41;
    }
  }
  v35 = v43[0];
  if (v43[0])
LABEL_41:
    CFRelease(v35);
LABEL_42:
  v36 = v44;
  if (v44)
  {
    v37 = (unint64_t *)&v44->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v46;
  if (!v46)
    goto LABEL_51;
  v40 = (unint64_t *)&v46->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (v41)
  {
LABEL_51:
    v42 = cf;
    if (!cf)
      return;
    goto LABEL_52;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  v42 = cf;
  if (cf)
LABEL_52:
    CFRelease(v42);
}

void sub_24B8A7D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, __int16 a11, char a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,const void *a21)
{
  _QWORD *v21;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;

  v23 = (std::__shared_weak_count *)v21[1];
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  operator delete(v21);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a21);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_2(uint64_t a1, size_t *a2)
{
  size_t *v2;
  uint64_t v3;
  void **v4;
  __int128 v5;
  size_t v6;
  uint64_t v7;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v9;
  __CFDictionary *v10;
  NSObject *v11;
  config::build *v12;
  const __CFAllocator *v13;
  char *v14;
  const __CFAllocator *v15;
  config::hw *v16;
  const __CFAllocator *v17;
  pid_t v18;
  const __CFAllocator *v19;
  capabilities::radio *v20;
  const __CFAllocator *v21;
  const __CFAllocator *v22;
  std::string::size_type v23;
  _QWORD *v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *size;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  const void *v34;
  size_t v35;
  std::string::size_type v36;
  void *p_dst;
  uint64_t v38;
  uint64_t v39;
  CFTypeRef v40;
  std::string *v41;
  const __CFString *v42;
  const __CFString *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::string __p;
  CFTypeRef cf;
  std::string __dst;
  _QWORD v50[2];

  v2 = a2;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = (void **)(v3 + 152);
  if ((size_t *)(v3 + 152) != a2)
  {
    if (*(char *)(v3 + 175) < 0)
    {
      if (*((char *)a2 + 23) >= 0)
      {
        v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (size_t *)*a2;
        v6 = v2[1];
      }
      std::string::__assign_no_alias<false>(v4, a2, v6);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v4, (void *)*a2, a2[1]);
    }
    else
    {
      v5 = *(_OWORD *)a2;
      *(_QWORD *)(v3 + 168) = a2[2];
      *(_OWORD *)v4 = v5;
    }
  }
  cf = 0;
  v7 = *MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v10 = Mutable;
  if (Mutable)
  {
    cf = Mutable;
    if (*((char *)v2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__dst, (const std::string::value_type *)*v2, v2[1]);
    else
      __dst = *(std::string *)v2;
    v12 = (config::build *)ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x24BE05210], (uint64_t)&__dst, v7, v9);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    config::build::version(v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      __dst = __p;
    ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x24BE05218], (uint64_t)&__dst, v7, v13);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_23:
    v14 = (char *)operator new(0x28uLL);
    strcpy(v14, "AppleBasebandServices_Manager-1180");
    std::string::__init_copy_ctor_external(&__dst, v14, 0x22uLL);
    ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x24BE050C8], (uint64_t)&__dst, v7, v15);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    operator delete(v14);
    config::hw::product(v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      __dst = __p;
    ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x24BE050C0], (uint64_t)&__dst, v7, v17);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_32;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_32:
    v18 = getpid();
    std::to_string(&__p, v18);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      __dst = __p;
    v20 = (capabilities::radio *)ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x24BE04F60], (uint64_t)&__dst, v7, v19);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_39;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_39;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_39:
    capabilities::radio::radioType(v20);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      __dst = __p;
    ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x24BE05220], (uint64_t)&__dst, v7, v21);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_46;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_46:
    config::hw::getBootArgs(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      __dst = __p;
    ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x24BE05178], (uint64_t)&__dst, v7, v22);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_53;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_53;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_53:
    pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
    v23 = off_2579B84D8;
    if (!off_2579B84D8)
    {
      v24 = operator new(0x30uLL);
      MEMORY[0x24BD294B4](v24, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x24BDBD590]);
      v24[3] = 0;
      v24[4] = 0;
      *((_DWORD *)v24 + 10) = 0;
      std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&__dst, (uint64_t)v24);
      v25 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
      v26 = (std::__shared_weak_count *)*(&off_2579B84D8 + 1);
      off_2579B84D8 = v25;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_)
      {
        v30 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v23 = off_2579B84D8;
    }
    __p.__r_.__value_.__r.__words[0] = v23;
    __p.__r_.__value_.__l.__size_ = *(&off_2579B84D8 + 1);
    if (*(&off_2579B84D8 + 1))
    {
      v32 = (unint64_t *)(*(&off_2579B84D8 + 1) + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
    v34 = (const void *)*MEMORY[0x24BE05148];
    v35 = strlen((const char *)*MEMORY[0x24BE05148]);
    if (v35 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v36 = v35;
    if (v35 >= 0x17)
    {
      v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17)
        v38 = v35 | 7;
      v39 = v38 + 1;
      p_dst = operator new(v38 + 1);
      __dst.__r_.__value_.__l.__size_ = v36;
      __dst.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v35;
      p_dst = &__dst;
      if (!v35)
        goto LABEL_76;
    }
    memmove(p_dst, v34, v36);
LABEL_76:
    *((_BYTE *)p_dst + v36) = 0;
    v40 = cf;
    os_unfair_lock_lock((os_unfair_lock_t)(v23 + 40));
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = &__dst;
    else
      v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v50, (const char *)v41);
    v42 = (const __CFString *)v50[0];
    v50[1] = v40;
    if (v40)
    {
      CFRetain(v40);
      v43 = (const __CFString *)*MEMORY[0x24BDBD588];
      CFPreferencesSetValue(v42, v40, *(CFStringRef *)(v23 + 8), *(CFStringRef *)(v23 + 16), (CFStringRef)*MEMORY[0x24BDBD588]);
      CFPreferencesSynchronize(*(CFStringRef *)(v23 + 8), *(CFStringRef *)(v23 + 16), v43);
      CFRelease(v40);
    }
    MEMORY[0x24BD29478](v50);
    os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 40));
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v44 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v45 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (cf)
      CFRelease(cf);
    return;
  }
  v11 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
    _os_log_error_impl(&dword_24B855000, v11, OS_LOG_TYPE_ERROR, "Failed to create dictionary to update abm domain preferences", (uint8_t *)&__dst, 2u);
  }
}

void sub_24B8A8488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  void *v23;

  operator delete(v23);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a15);
  _Unwind_Resume(a1);
}

void RadioModule::queryFactoryCalibrationStatus_sync(RadioModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  CommandDriverFactory *v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  dispatch_object_t object;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  _QWORD aBlock[6];
  std::__shared_weak_count *v41;
  void *v42;
  dispatch_object_t v43;
  __int128 v44;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v42 = (void *)0xAAAAAAAAAAAAAAAALL;
  v43 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule34queryFactoryCalibrationStatus_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_120;
  aBlock[4] = this;
  aBlock[5] = v3;
  v41 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  v11 = _Block_copy(aBlock);
  v12 = *((_QWORD *)this + 17);
  if (v12)
    dispatch_retain(v12);
  v42 = v11;
  v43 = v12;
  v38 = 0xAAAAAAAAAAAAAAAALL;
  v39 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v13 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v14 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v13);
    v15 = v44;
    v44 = 0uLL;
    v16 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v15;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v14 = off_2579B85E0;
  }
  v22 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  v34 = v14;
  v35 = *(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v23 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(&v36, v14);
  v38 = 0;
  v39 = 0;
  if (v37)
  {
    v39 = std::__shared_weak_count::lock(v37);
    if (v39)
      v38 = v36;
    if (v37)
      std::__shared_weak_count::__release_weak(v37);
  }
  if (!v22)
    goto LABEL_37;
  v25 = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v27 = v38;
    if (!v38)
      goto LABEL_46;
  }
  else
  {
LABEL_37:
    v27 = v38;
    if (!v38)
      goto LABEL_46;
  }
  v28 = v42;
  if (v42)
    v28 = _Block_copy(v42);
  v32 = v28;
  object = v43;
  if (v43)
    dispatch_retain(v43);
  (*(void (**)(unint64_t, void **))(*(_QWORD *)v27 + 120))(v27, &v32);
  if (object)
    dispatch_release(object);
  if (v32)
    _Block_release(v32);
LABEL_46:
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v43)
    dispatch_release(v43);
  if (v42)
    _Block_release(v42);
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_24B8A88FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v24;
  uint64_t v25;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 64);
  if (a24)
    std::__shared_weak_count::__release_weak(a24);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void RadioModule::queryRFCalibrationStatus_sync(RadioModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  CommandDriverFactory *v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  dispatch_object_t object;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  _QWORD aBlock[6];
  std::__shared_weak_count *v41;
  void *v42;
  dispatch_object_t v43;
  __int128 v44;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v42 = (void *)0xAAAAAAAAAAAAAAAALL;
  v43 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule29queryRFCalibrationStatus_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_121;
  aBlock[4] = this;
  aBlock[5] = v3;
  v41 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  v11 = _Block_copy(aBlock);
  v12 = *((_QWORD *)this + 17);
  if (v12)
    dispatch_retain(v12);
  v42 = v11;
  v43 = v12;
  v38 = 0xAAAAAAAAAAAAAAAALL;
  v39 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v13 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v14 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v13);
    v15 = v44;
    v44 = 0uLL;
    v16 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v15;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v14 = off_2579B85E0;
  }
  v22 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  v34 = v14;
  v35 = *(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v23 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(&v36, v14);
  v38 = 0;
  v39 = 0;
  if (v37)
  {
    v39 = std::__shared_weak_count::lock(v37);
    if (v39)
      v38 = v36;
    if (v37)
      std::__shared_weak_count::__release_weak(v37);
  }
  if (!v22)
    goto LABEL_37;
  v25 = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v27 = v38;
    if (!v38)
      goto LABEL_46;
  }
  else
  {
LABEL_37:
    v27 = v38;
    if (!v38)
      goto LABEL_46;
  }
  v28 = v42;
  if (v42)
    v28 = _Block_copy(v42);
  v32 = v28;
  object = v43;
  if (v43)
    dispatch_retain(v43);
  (*(void (**)(unint64_t, void **))(*(_QWORD *)v27 + 128))(v27, &v32);
  if (object)
    dispatch_release(object);
  if (v32)
    _Block_release(v32);
LABEL_46:
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v43)
    dispatch_release(v43);
  if (v42)
    _Block_release(v42);
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_24B8A8C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v24;
  uint64_t v25;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 64);
  if (a24)
    std::__shared_weak_count::__release_weak(a24);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void RadioModule::queryFieldTestConfig_sync(RadioModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  CommandDriverFactory *v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  dispatch_object_t object;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  _QWORD aBlock[6];
  std::__shared_weak_count *v41;
  void *v42;
  dispatch_object_t v43;
  __int128 v44;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v42 = (void *)0xAAAAAAAAAAAAAAAALL;
  v43 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule25queryFieldTestConfig_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_122;
  aBlock[4] = this;
  aBlock[5] = v3;
  v41 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  v11 = _Block_copy(aBlock);
  v12 = *((_QWORD *)this + 17);
  if (v12)
    dispatch_retain(v12);
  v42 = v11;
  v43 = v12;
  v38 = 0xAAAAAAAAAAAAAAAALL;
  v39 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v13 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v14 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v13);
    v15 = v44;
    v44 = 0uLL;
    v16 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v15;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v14 = off_2579B85E0;
  }
  v22 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  v34 = v14;
  v35 = *(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v23 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(&v36, v14);
  v38 = 0;
  v39 = 0;
  if (v37)
  {
    v39 = std::__shared_weak_count::lock(v37);
    if (v39)
      v38 = v36;
    if (v37)
      std::__shared_weak_count::__release_weak(v37);
  }
  if (!v22)
    goto LABEL_37;
  v25 = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v27 = v38;
    if (!v38)
      goto LABEL_46;
  }
  else
  {
LABEL_37:
    v27 = v38;
    if (!v38)
      goto LABEL_46;
  }
  v28 = v42;
  if (v42)
    v28 = _Block_copy(v42);
  v32 = v28;
  object = v43;
  if (v43)
    dispatch_retain(v43);
  (*(void (**)(unint64_t, void **))(*(_QWORD *)v27 + 184))(v27, &v32);
  if (object)
    dispatch_release(object);
  if (v32)
    _Block_release(v32);
LABEL_46:
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v43)
    dispatch_release(v43);
  if (v42)
    _Block_release(v42);
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_24B8A8FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v24;
  uint64_t v25;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 64);
  if (a24)
    std::__shared_weak_count::__release_weak(a24);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void RadioModule::stopMonitoringBatteryInfo_sync(ctu::iokit::Controller **this)
{
  NSObject *v1;
  uint8_t v2[16];

  if (this[38])
  {
    ctu::iokit::Controller::stopBatteryInfoNotifications(this[38]);
  }
  else
  {
    v1 = this[11];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v2 = 0;
      _os_log_error_impl(&dword_24B855000, v1, OS_LOG_TYPE_ERROR, "Invalid fIOKitController", v2, 2u);
    }
  }
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_101(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  _BOOL8 v7;
  _QWORD *v8;
  NSObject *v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  NSObject *v14;
  _BYTE *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _BYTE buf[12];
  char v19;
  uint8_t v20[4];
  _BYTE *v21;
  __int16 v22;
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 88);
        v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
        if (v7)
        {
          v8 = (_QWORD *)(v3 + 152);
          if (*(char *)(v3 + 175) < 0)
            v8 = (_QWORD *)*v8;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v8;
          _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I Baseband FW Version: %s", buf, 0xCu);
        }
        if (capabilities::abs::supportsCalibrationQuery((capabilities::abs *)v7))
        {
          v9 = *(NSObject **)(v3 + 88);
          v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          if (v10)
          {
            v11 = capabilities::radio::supportsFactoryCalibrationV2((capabilities::radio *)v10)
                ? radio::asStringV2()
                : radio::asString();
            v12 = v11;
            radio::RFCalibration_t::toString((radio::RFCalibration_t *)(v3 + 200));
            v13 = v19 >= 0 ? buf : *(_BYTE **)buf;
            *(_DWORD *)v20 = 136315394;
            v21 = (_BYTE *)v12;
            v22 = 2080;
            v23 = v13;
            _os_log_impl(&dword_24B855000, v9, OS_LOG_TYPE_DEFAULT, "#I \n--- Factory and RF calibration ---\n%s\n%s\n----------------------------------", v20, 0x16u);
            if (v19 < 0)
              operator delete(*(void **)buf);
          }
        }
        if (MEMORY[0x24BD2A468](*(_QWORD *)(v3 + 248)) == MEMORY[0x24BDACFA0])
        {
          v14 = *(NSObject **)(v3 + 88);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            xpc::object::to_string((xpc::object *)(v3 + 248));
            if (v19 >= 0)
              v15 = buf;
            else
              v15 = *(_BYTE **)buf;
            *(_DWORD *)v20 = 136315138;
            v21 = v15;
            _os_log_impl(&dword_24B855000, v14, OS_LOG_TYPE_DEFAULT, "#I Baseband field test config:\n%s", v20, 0xCu);
            if (v19 < 0)
              operator delete(*(void **)buf);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_24B8A9348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_24B8A935C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_24B8A9370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_24B8A9384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RadioModule::sleep(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::sleep(dispatch::group_session)::$_0>(RadioModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void RadioModule::wake(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::wake(dispatch::group_session)::$_0>(RadioModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN11RadioModule15getVersion_syncEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1, std::string::size_type *a2, const __CFDictionary **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::string::size_type v10;
  uint64_t (*v11)(uint64_t);
  NSObject *v12;
  const __CFDictionary *v13;
  uint64_t (*v14)(uint64_t);
  void **v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD v19[2];
  std::__shared_weak_count *v21;
  std::string buf;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v21 = v8;
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        v10 = *a2;
        v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!v10)
          v11 = 0;
        if (v11)
        {
          v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v10;
            _os_log_error_impl(&dword_24B855000, v12, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
          }
        }
        else
        {
          v13 = *a3;
          v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v14 = 0;
          if (v14)
          {
            v19[0] = 0xAAAAAAAAAAAAAAAALL;
            v19[1] = 0xAAAAAAAAAAAAAAAALL;
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v19, v13);
            ctu::cf::map_adapter::getString();
            v15 = (void **)(v7 + 152);
            if (*(char *)(v7 + 175) < 0)
              operator delete(*v15);
            *(_OWORD *)v15 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
            *(_QWORD *)(v7 + 168) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
            *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
            buf.__r_.__value_.__s.__data_[0] = 0;
            MEMORY[0x24BD294A8](v19);
          }
        }
        v16 = a1[7];
        if (*(char *)(v7 + 175) < 0)
          std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v7 + 152), *(_QWORD *)(v7 + 160));
        else
          buf = *(std::string *)(v7 + 152);
        (*(void (**)(uint64_t, std::string *))(v16 + 16))(v16, &buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_24B8A9788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x24BD294A8](&a16);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_24B8A97B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B8A97CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN11RadioModule21getOperatingMode_syncEN8dispatch5blockIU13block_pointerFviEEE_block_invoke(_QWORD *a1, uint64_t *a2, const __CFDictionary **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  NSObject *v12;
  const __CFDictionary *v13;
  uint64_t (*v14)(uint64_t);
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint8_t buf[24];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        v10 = *a2;
        v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!v10)
          v11 = 0;
        if (v11)
        {
          v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v10;
            _os_log_error_impl(&dword_24B855000, v12, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        else
        {
          v13 = *a3;
          v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v14 = 0;
          if (v14)
          {
            memset(buf, 170, 16);
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v13);
            ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x24BED38E8]);
            MEMORY[0x24BD294A8](buf);
          }
        }
        (*(void (**)(void))(a1[7] + 16))();
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN11RadioModule23getResetProperties_syncEv_block_invoke(_QWORD *a1, CFErrorRef *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  std::__shared_weak_count *v11;
  const void *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  int v16;
  int v17;
  std::__shared_weak_count *v18;
  CFStringRef *v19;
  NSObject *v20;
  std::string *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::string *v25;
  CFErrorRef v26;
  unint64_t *v27;
  unint64_t v28;
  const void *v29;
  size_t v30;
  size_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  const char *v36;
  const void **v37;
  const void *v38;
  CFStringRef *v39;
  const __CFString *v40;
  _BOOL4 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count_vtbl *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  size_t v52;
  size_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  BOOL *v58;
  BOOL *v59;
  CFTypeID v60;
  const __CFBoolean *v61;
  int v62;
  uint64_t *v63;
  unint64_t v64;
  NSObject *v65;
  std::__shared_weak_count *v66;
  CFStringRef *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  const void *v73;
  size_t v74;
  size_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  const void *v79;
  const char *v80;
  const __CFString *v81;
  const __CFAllocator *v82;
  const __CFString *v83;
  const __CFString *v84;
  _BOOL4 v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  size_t v96;
  size_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  unsigned __int16 *v102;
  unsigned __int16 *v103;
  CFTypeID v104;
  const __CFNumber *v105;
  int v106;
  std::__shared_weak_count *v107;
  uint64_t *v108;
  unint64_t v109;
  NSObject *v110;
  std::__shared_weak_count *v111;
  CFStringRef *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  const void *v118;
  size_t v119;
  size_t v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  const void *v124;
  const char *v125;
  const __CFString *v126;
  const __CFString *v127;
  const __CFString *v128;
  _BOOL4 v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  size_t v140;
  size_t v141;
  _BYTE *v142;
  uint64_t v143;
  uint64_t v144;
  const char *v145;
  unsigned int *v146;
  unsigned int *v147;
  CFTypeID v148;
  const __CFNumber *v149;
  int v150;
  std::__shared_weak_count *v151;
  uint64_t *v152;
  unint64_t v153;
  NSObject *v154;
  int v155;
  xpc_object_t v156;
  xpc_object_t v157;
  xpc_object_t v158;
  xpc_object_t v159;
  xpc_object_t v160;
  xpc_object_t v161;
  std::string *v162;
  xpc_object_t v163;
  xpc_object_t v164;
  uint64_t v165;
  const void *v166;
  size_t v167;
  size_t v168;
  _BYTE *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t *p_shared_owners;
  unint64_t v173;
  std::string *v174;
  const void *v175;
  xpc_object_t object;
  int v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  CFTypeRef cf;
  std::string v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  const __CFString *v184;
  CFStringRef key;
  const void *valuePtr;
  _BYTE buf[24];
  uint64_t v188;

  v188 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  v183 = v8;
  if (!v8)
    return;
  v182 = a1[5];
  if (!v182)
  {
    v11 = v8;
LABEL_287:
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v173 = __ldaxr(p_shared_owners);
    while (__stlxr(v173 - 1, p_shared_owners));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  memset(&v181, 0, sizeof(v181));
  if (*a2)
    v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v9 = 0;
  if (v9)
  {
    std::string::__assign_external(&v181, "Failed to get reset properties", 0x1EuLL);
    v10 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v25 = &v181;
      if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v25 = (std::string *)v181.__r_.__value_.__r.__words[0];
      v26 = *a2;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v25;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v26;
      _os_log_error_impl(&dword_24B855000, v10, OS_LOG_TYPE_ERROR, "%s\n:%@", buf, 0x16u);
    }
    CFErrorGetCode(*a2);
    goto LABEL_284;
  }
  v12 = *a3;
  cf = v12;
  if (v12)
    CFRetain(v12);
  v13 = radio::BasebandProperties::create();
  *(_QWORD *)(v7 + 288) = v13;
  if (cf)
  {
    CFRelease(cf);
    if (*(_BYTE *)(v7 + 288))
      goto LABEL_15;
LABEL_27:
    std::string::__assign_external(&v181, "Invalid reset properties", 0x18uLL);
    v20 = *(NSObject **)(v7 + 88);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      goto LABEL_252;
    v21 = &v181;
    if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)v181.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v21;
LABEL_295:
    _os_log_error_impl(&dword_24B855000, v20, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    goto LABEL_252;
  }
  if (!(_BYTE)v13)
    goto LABEL_27;
LABEL_15:
  v14 = *(NSObject **)(v7 + 88);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(v7 + 289))
      v15 = "true";
    else
      v15 = "false";
    v16 = *(unsigned __int16 *)(v7 + 290);
    v17 = *(_DWORD *)(v7 + 292);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v16;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v17;
    _os_log_impl(&dword_24B855000, v14, OS_LOG_TYPE_DEFAULT, "#I Baseband properties:\n    Coredump supported: %s\n    PowerSequence index: %u\n    Baseband version: 0x%08x", buf, 0x18u);
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0
    && (TelephonyUtilIsCarrierBuild() & 1) == 0
    && !TelephonyUtilIsVendorBuild())
  {
    goto LABEL_249;
  }
  LOBYTE(v184) = *(_BYTE *)(v7 + 289) ^ 1;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_2579B86F8)
  {
LABEL_24:
    v19 = (CFStringRef *)qword_2579B86F8;
    v18 = (std::__shared_weak_count *)off_2579B8700;
    v178 = qword_2579B86F8;
    v179 = (std::__shared_weak_count *)off_2579B8700;
    if (!off_2579B8700)
      goto LABEL_42;
    goto LABEL_40;
  }
  v19 = (CFStringRef *)operator new(0x18uLL);
  MEMORY[0x24BD294B4](v19, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x24BDBD590]);
  v18 = (std::__shared_weak_count *)operator new(0x20uLL);
  v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_251CBBBA8;
  v18->__shared_owners_ = 0;
  v18->__shared_weak_owners_ = 0;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)v19;
  v22 = (std::__shared_weak_count *)off_2579B8700;
  qword_2579B86F8 = (uint64_t)v19;
  off_2579B8700 = v18;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    goto LABEL_24;
  }
  v178 = (uint64_t)v19;
  v179 = v18;
LABEL_40:
  v27 = (unint64_t *)&v18->__shared_owners_;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_42:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v29 = (const void *)*MEMORY[0x24BED3908];
  v30 = strlen((const char *)*MEMORY[0x24BED3908]);
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v31 = v30;
  if (v30 >= 0x17)
  {
    v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v33 = v30 | 7;
    v34 = v33 + 1;
    v32 = operator new(v33 + 1);
    *(_QWORD *)&buf[8] = v31;
    *(_QWORD *)&buf[16] = v34 | 0x8000000000000000;
    *(_QWORD *)buf = v32;
    goto LABEL_49;
  }
  buf[23] = v30;
  v32 = buf;
  if (v30)
LABEL_49:
    memmove(v32, v29, v31);
  v32[v31] = 0;
  v35 = *(unsigned __int8 *)(v7 + 289);
  if (buf[23] >= 0)
    v36 = buf;
  else
    v36 = *(const char **)buf;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&key, v36);
  v37 = (const void **)MEMORY[0x24BDBD270];
  if (!v35)
    v37 = (const void **)MEMORY[0x24BDBD268];
  v38 = *v37;
  valuePtr = v38;
  v39 = (CFStringRef *)MEMORY[0x24BDBD588];
  if (v38)
  {
    v40 = (const __CFString *)*MEMORY[0x24BDBD588];
    CFPreferencesSetValue(key, v38, v19[1], v19[2], (CFStringRef)*MEMORY[0x24BDBD588]);
    v41 = CFPreferencesSynchronize(v19[1], v19[2], v40) != 0;
    CFRelease(v38);
    MEMORY[0x24BD29478](&key);
    if ((buf[23] & 0x80000000) == 0)
      goto LABEL_57;
  }
  else
  {
    v41 = 0;
    MEMORY[0x24BD29478](&key);
    if ((buf[23] & 0x80000000) == 0)
    {
LABEL_57:
      v42 = v179;
      if (!v179)
        goto LABEL_65;
      goto LABEL_61;
    }
  }
  operator delete(*(void **)buf);
  v42 = v179;
  if (!v179)
    goto LABEL_65;
LABEL_61:
  v43 = (unint64_t *)&v42->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
LABEL_65:
  if (!v41)
  {
LABEL_103:
    v65 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_24B855000, v65, OS_LOG_TYPE_ERROR, "Failed to save CoredumpSupported property in ABMPreferences file", buf, 2u);
    }
    goto LABEL_105;
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_2579B86F8)
  {
LABEL_67:
    v46 = (std::__shared_weak_count_vtbl *)qword_2579B86F8;
    v45 = (std::__shared_weak_count *)off_2579B8700;
    v178 = qword_2579B86F8;
    v179 = (std::__shared_weak_count *)off_2579B8700;
    if (!off_2579B8700)
      goto LABEL_77;
    goto LABEL_75;
  }
  v46 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  MEMORY[0x24BD294B4](v46, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x24BDBD590]);
  v45 = (std::__shared_weak_count *)operator new(0x20uLL);
  v45->__vftable = (std::__shared_weak_count_vtbl *)&unk_251CBBBA8;
  v45->__shared_owners_ = 0;
  v45->__shared_weak_owners_ = 0;
  v45[1].__vftable = v46;
  v47 = (std::__shared_weak_count *)off_2579B8700;
  qword_2579B86F8 = (uint64_t)v46;
  off_2579B8700 = v45;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
    goto LABEL_67;
  }
  v178 = (uint64_t)v46;
  v179 = v45;
LABEL_75:
  v50 = (unint64_t *)&v45->__shared_owners_;
  do
    v51 = __ldxr(v50);
  while (__stxr(v51 + 1, v50));
LABEL_77:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v52 = strlen((const char *)v29);
  if (v52 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v53 = v52;
  if (v52 >= 0x17)
  {
    v55 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v52 | 7) != 0x17)
      v55 = v52 | 7;
    v56 = v55 + 1;
    v54 = operator new(v55 + 1);
    *(_QWORD *)&buf[8] = v53;
    *(_QWORD *)&buf[16] = v56 | 0x8000000000000000;
    *(_QWORD *)buf = v54;
    goto LABEL_84;
  }
  buf[23] = v52;
  v54 = buf;
  if (v52)
LABEL_84:
    memmove(v54, v29, v53);
  v54[v53] = 0;
  if (buf[23] >= 0)
    v57 = buf;
  else
    v57 = *(const char **)buf;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&valuePtr, v57);
  v58 = (BOOL *)(*(uint64_t (**)(std::__shared_weak_count_vtbl *, const void *))v46->~__shared_weak_count)(v46, valuePtr);
  v59 = v58;
  if (v58)
  {
    v60 = CFGetTypeID(v58);
    if (v60 == CFBooleanGetTypeID())
      v62 = ctu::cf::assign((ctu::cf *)&v184, v59, v61);
    else
      v62 = 0;
    CFRelease(v59);
  }
  else
  {
    v62 = 0;
  }
  MEMORY[0x24BD29478](&valuePtr);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (v179)
  {
    v63 = &v179->__shared_owners_;
    do
      v64 = __ldaxr((unint64_t *)v63);
    while (__stlxr(v64 - 1, (unint64_t *)v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  if (!v62 || v184 != *(unsigned __int8 *)(v7 + 289))
    goto LABEL_103;
LABEL_105:
  LOWORD(v177) = *(_WORD *)(v7 + 290) == 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_2579B86F8)
    goto LABEL_106;
  v67 = (CFStringRef *)operator new(0x18uLL);
  MEMORY[0x24BD294B4](v67, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x24BDBD590]);
  v66 = (std::__shared_weak_count *)operator new(0x20uLL);
  v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_251CBBBA8;
  v66->__shared_owners_ = 0;
  v66->__shared_weak_owners_ = 0;
  v66[1].__vftable = (std::__shared_weak_count_vtbl *)v67;
  v68 = (std::__shared_weak_count *)off_2579B8700;
  qword_2579B86F8 = (uint64_t)v67;
  off_2579B8700 = v66;
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
LABEL_106:
    v67 = (CFStringRef *)qword_2579B86F8;
    v66 = (std::__shared_weak_count *)off_2579B8700;
    v178 = qword_2579B86F8;
    v179 = (std::__shared_weak_count *)off_2579B8700;
    if (!off_2579B8700)
      goto LABEL_116;
    goto LABEL_114;
  }
  v178 = (uint64_t)v67;
  v179 = v66;
LABEL_114:
  v71 = (unint64_t *)&v66->__shared_owners_;
  do
    v72 = __ldxr(v71);
  while (__stxr(v72 + 1, v71));
LABEL_116:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v73 = (const void *)*MEMORY[0x24BED3910];
  v74 = strlen((const char *)*MEMORY[0x24BED3910]);
  if (v74 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v75 = v74;
  if (v74 >= 0x17)
  {
    v77 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v74 | 7) != 0x17)
      v77 = v74 | 7;
    v78 = v77 + 1;
    v76 = operator new(v77 + 1);
    *(_QWORD *)&buf[8] = v75;
    *(_QWORD *)&buf[16] = v78 | 0x8000000000000000;
    *(_QWORD *)buf = v76;
    goto LABEL_123;
  }
  buf[23] = v74;
  v76 = buf;
  if (v74)
LABEL_123:
    memmove(v76, v73, v75);
  v76[v75] = 0;
  v79 = (const void *)*(unsigned __int16 *)(v7 + 290);
  if (buf[23] >= 0)
    v80 = buf;
  else
    v80 = *(const char **)buf;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v184, v80);
  v81 = v184;
  v82 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  valuePtr = v79;
  v83 = (const __CFString *)CFNumberCreate(v82, kCFNumberLongLongType, &valuePtr);
  key = v83;
  if (v83)
  {
    v84 = *v39;
    CFPreferencesSetValue(v81, v83, v67[1], v67[2], *v39);
    v85 = CFPreferencesSynchronize(v67[1], v67[2], v84) != 0;
    CFRelease(v83);
    MEMORY[0x24BD29478](&v184);
    if ((buf[23] & 0x80000000) == 0)
      goto LABEL_129;
  }
  else
  {
    v85 = 0;
    MEMORY[0x24BD29478](&v184);
    if ((buf[23] & 0x80000000) == 0)
    {
LABEL_129:
      v86 = v179;
      if (!v179)
        goto LABEL_137;
      goto LABEL_133;
    }
  }
  operator delete(*(void **)buf);
  v86 = v179;
  if (!v179)
    goto LABEL_137;
LABEL_133:
  v87 = (unint64_t *)&v86->__shared_owners_;
  do
    v88 = __ldaxr(v87);
  while (__stlxr(v88 - 1, v87));
  if (!v88)
  {
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    std::__shared_weak_count::__release_weak(v86);
  }
LABEL_137:
  if (!v85)
  {
LABEL_175:
    v110 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_24B855000, v110, OS_LOG_TYPE_ERROR, "Failed to save PowerSequence property in ABMPreferences file", buf, 2u);
    }
    goto LABEL_177;
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_2579B86F8)
  {
LABEL_139:
    v90 = (std::__shared_weak_count_vtbl *)qword_2579B86F8;
    v89 = (std::__shared_weak_count *)off_2579B8700;
    v178 = qword_2579B86F8;
    v179 = (std::__shared_weak_count *)off_2579B8700;
    if (!off_2579B8700)
      goto LABEL_149;
    goto LABEL_147;
  }
  v90 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  MEMORY[0x24BD294B4](v90, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x24BDBD590]);
  v89 = (std::__shared_weak_count *)operator new(0x20uLL);
  v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_251CBBBA8;
  v89->__shared_owners_ = 0;
  v89->__shared_weak_owners_ = 0;
  v89[1].__vftable = v90;
  v91 = (std::__shared_weak_count *)off_2579B8700;
  qword_2579B86F8 = (uint64_t)v90;
  off_2579B8700 = v89;
  if (v91)
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
    goto LABEL_139;
  }
  v178 = (uint64_t)v90;
  v179 = v89;
LABEL_147:
  v94 = (unint64_t *)&v89->__shared_owners_;
  do
    v95 = __ldxr(v94);
  while (__stxr(v95 + 1, v94));
LABEL_149:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v96 = strlen((const char *)v73);
  if (v96 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v97 = v96;
  if (v96 >= 0x17)
  {
    v99 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v96 | 7) != 0x17)
      v99 = v96 | 7;
    v100 = v99 + 1;
    v98 = operator new(v99 + 1);
    *(_QWORD *)&buf[8] = v97;
    *(_QWORD *)&buf[16] = v100 | 0x8000000000000000;
    *(_QWORD *)buf = v98;
    goto LABEL_156;
  }
  buf[23] = v96;
  v98 = buf;
  if (v96)
LABEL_156:
    memmove(v98, v73, v97);
  v98[v97] = 0;
  if (buf[23] >= 0)
    v101 = buf;
  else
    v101 = *(const char **)buf;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&valuePtr, v101);
  v102 = (unsigned __int16 *)(*(uint64_t (**)(std::__shared_weak_count_vtbl *, const void *))v90->~__shared_weak_count)(v90, valuePtr);
  v103 = v102;
  if (v102)
  {
    v104 = CFGetTypeID(v102);
    if (v104 == CFNumberGetTypeID())
      v106 = ctu::cf::assign((ctu::cf *)&v177, v103, v105);
    else
      v106 = 0;
    CFRelease(v103);
  }
  else
  {
    v106 = 0;
  }
  MEMORY[0x24BD29478](&valuePtr);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v107 = v179;
  if (v179)
  {
    v108 = &v179->__shared_owners_;
    do
      v109 = __ldaxr((unint64_t *)v108);
    while (__stlxr(v109 - 1, (unint64_t *)v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  if (!v106 || (unsigned __int16)v177 != *(unsigned __int16 *)(v7 + 290))
    goto LABEL_175;
LABEL_177:
  v177 = *(_DWORD *)(v7 + 292) == 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_2579B86F8)
    goto LABEL_178;
  v112 = (CFStringRef *)operator new(0x18uLL);
  MEMORY[0x24BD294B4](v112, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x24BDBD590]);
  v111 = (std::__shared_weak_count *)operator new(0x20uLL);
  v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_251CBBBA8;
  v111->__shared_owners_ = 0;
  v111->__shared_weak_owners_ = 0;
  v111[1].__vftable = (std::__shared_weak_count_vtbl *)v112;
  v113 = (std::__shared_weak_count *)off_2579B8700;
  qword_2579B86F8 = (uint64_t)v112;
  off_2579B8700 = v111;
  if (v113)
  {
    v114 = (unint64_t *)&v113->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
LABEL_178:
    v112 = (CFStringRef *)qword_2579B86F8;
    v111 = (std::__shared_weak_count *)off_2579B8700;
    v178 = qword_2579B86F8;
    v179 = (std::__shared_weak_count *)off_2579B8700;
    if (!off_2579B8700)
      goto LABEL_188;
    goto LABEL_186;
  }
  v178 = (uint64_t)v112;
  v179 = v111;
LABEL_186:
  v116 = (unint64_t *)&v111->__shared_owners_;
  do
    v117 = __ldxr(v116);
  while (__stxr(v117 + 1, v116));
LABEL_188:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v118 = (const void *)*MEMORY[0x24BED38F8];
  v119 = strlen((const char *)*MEMORY[0x24BED38F8]);
  if (v119 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v120 = v119;
  if (v119 >= 0x17)
  {
    v122 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v119 | 7) != 0x17)
      v122 = v119 | 7;
    v123 = v122 + 1;
    v121 = operator new(v122 + 1);
    *(_QWORD *)&buf[8] = v120;
    *(_QWORD *)&buf[16] = v123 | 0x8000000000000000;
    *(_QWORD *)buf = v121;
    goto LABEL_195;
  }
  buf[23] = v119;
  v121 = buf;
  if (v119)
LABEL_195:
    memmove(v121, v118, v120);
  v121[v120] = 0;
  v124 = (const void *)*(unsigned int *)(v7 + 292);
  if (buf[23] >= 0)
    v125 = buf;
  else
    v125 = *(const char **)buf;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v184, v125);
  v126 = v184;
  valuePtr = v124;
  v127 = (const __CFString *)CFNumberCreate(v82, kCFNumberLongLongType, &valuePtr);
  key = v127;
  if (v127)
  {
    v128 = *v39;
    CFPreferencesSetValue(v126, v127, v112[1], v112[2], *v39);
    v129 = CFPreferencesSynchronize(v112[1], v112[2], v128) != 0;
    CFRelease(v127);
    MEMORY[0x24BD29478](&v184);
    if ((buf[23] & 0x80000000) == 0)
      goto LABEL_201;
  }
  else
  {
    v129 = 0;
    MEMORY[0x24BD29478](&v184);
    if ((buf[23] & 0x80000000) == 0)
    {
LABEL_201:
      v130 = v179;
      if (!v179)
        goto LABEL_209;
      goto LABEL_205;
    }
  }
  operator delete(*(void **)buf);
  v130 = v179;
  if (!v179)
    goto LABEL_209;
LABEL_205:
  v131 = (unint64_t *)&v130->__shared_owners_;
  do
    v132 = __ldaxr(v131);
  while (__stlxr(v132 - 1, v131));
  if (!v132)
  {
    ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
    std::__shared_weak_count::__release_weak(v130);
  }
LABEL_209:
  if (!v129)
  {
LABEL_247:
    v154 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_24B855000, v154, OS_LOG_TYPE_ERROR, "Failed to save BasebandVersion property in ABMPreferences file", buf, 2u);
    }
    goto LABEL_249;
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_2579B86F8)
  {
LABEL_211:
    v134 = (std::__shared_weak_count_vtbl *)qword_2579B86F8;
    v133 = (std::__shared_weak_count *)off_2579B8700;
    v178 = qword_2579B86F8;
    v179 = (std::__shared_weak_count *)off_2579B8700;
    if (!off_2579B8700)
      goto LABEL_221;
    goto LABEL_219;
  }
  v134 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  MEMORY[0x24BD294B4](v134, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x24BDBD590]);
  v133 = (std::__shared_weak_count *)operator new(0x20uLL);
  v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_251CBBBA8;
  v133->__shared_owners_ = 0;
  v133->__shared_weak_owners_ = 0;
  v133[1].__vftable = v134;
  v135 = (std::__shared_weak_count *)off_2579B8700;
  qword_2579B86F8 = (uint64_t)v134;
  off_2579B8700 = v133;
  if (v135)
  {
    v136 = (unint64_t *)&v135->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
    goto LABEL_211;
  }
  v178 = (uint64_t)v134;
  v179 = v133;
LABEL_219:
  v138 = (unint64_t *)&v133->__shared_owners_;
  do
    v139 = __ldxr(v138);
  while (__stxr(v139 + 1, v138));
LABEL_221:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v140 = strlen((const char *)v118);
  if (v140 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v141 = v140;
  if (v140 >= 0x17)
  {
    v143 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v140 | 7) != 0x17)
      v143 = v140 | 7;
    v144 = v143 + 1;
    v142 = operator new(v143 + 1);
    *(_QWORD *)&buf[8] = v141;
    *(_QWORD *)&buf[16] = v144 | 0x8000000000000000;
    *(_QWORD *)buf = v142;
    goto LABEL_228;
  }
  buf[23] = v140;
  v142 = buf;
  if (v140)
LABEL_228:
    memmove(v142, v118, v141);
  v142[v141] = 0;
  if (buf[23] >= 0)
    v145 = buf;
  else
    v145 = *(const char **)buf;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&valuePtr, v145);
  v146 = (unsigned int *)(*(uint64_t (**)(std::__shared_weak_count_vtbl *, const void *))v134->~__shared_weak_count)(v134, valuePtr);
  v147 = v146;
  if (v146)
  {
    v148 = CFGetTypeID(v146);
    if (v148 == CFNumberGetTypeID())
      v150 = ctu::cf::assign((ctu::cf *)&v177, v147, v149);
    else
      v150 = 0;
    CFRelease(v147);
  }
  else
  {
    v150 = 0;
  }
  MEMORY[0x24BD29478](&valuePtr);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v151 = v179;
  if (v179)
  {
    v152 = &v179->__shared_owners_;
    do
      v153 = __ldaxr((unint64_t *)v152);
    while (__stlxr(v153 - 1, (unint64_t *)v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  if (!v150 || v177 != *(_DWORD *)(v7 + 292))
    goto LABEL_247;
LABEL_249:
  v155 = TelephonyBasebandSetBasebandProperty();
  if ((TelephonyBasebandSetBasebandProperty() & v155 & 1) != 0)
  {
    *(_BYTE *)(v7 + 296) = 1;
    goto LABEL_284;
  }
  *(_BYTE *)(v7 + 296) = 0;
  std::string::__assign_external(&v181, "Failed to send reset properties to AppleBaseband driver", 0x37uLL);
  v20 = *(NSObject **)(v7 + 88);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    v174 = &v181;
    if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v174 = (std::string *)v181.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v174;
    goto LABEL_295;
  }
LABEL_252:
  if ((TelephonyUtilIsInternalBuild() & 1) == 0
    && (TelephonyUtilIsCarrierBuild() & 1) == 0
    && !TelephonyUtilIsVendorBuild())
  {
    goto LABEL_284;
  }
  v156 = xpc_dictionary_create(0, 0, 0);
  if (v156 || (v156 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v156) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v156);
      v157 = v156;
    }
    else
    {
      v157 = xpc_null_create();
    }
  }
  else
  {
    v157 = xpc_null_create();
    v156 = 0;
  }
  xpc_release(v156);
  v158 = xpc_string_create((const char *)*MEMORY[0x24BE051D0]);
  if (!v158)
    v158 = xpc_null_create();
  xpc_dictionary_set_value(v157, (const char *)*MEMORY[0x24BE051A0], v158);
  v159 = xpc_null_create();
  xpc_release(v158);
  xpc_release(v159);
  v160 = xpc_string_create((const char *)*MEMORY[0x24BE05710]);
  if (!v160)
    v160 = xpc_null_create();
  xpc_dictionary_set_value(v157, (const char *)*MEMORY[0x24BE05398], v160);
  v161 = xpc_null_create();
  xpc_release(v160);
  xpc_release(v161);
  if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v162 = &v181;
  else
    v162 = (std::string *)v181.__r_.__value_.__r.__words[0];
  v163 = xpc_string_create((const char *)v162);
  if (!v163)
    v163 = xpc_null_create();
  xpc_dictionary_set_value(v157, (const char *)*MEMORY[0x24BE052E8], v163);
  v164 = xpc_null_create();
  xpc_release(v163);
  xpc_release(v164);
  v165 = v182;
  v166 = (const void *)*MEMORY[0x24BE05170];
  v167 = strlen((const char *)*MEMORY[0x24BE05170]);
  if (v167 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v168 = v167;
  if (v167 >= 0x17)
  {
    v170 = (v167 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v167 | 7) != 0x17)
      v170 = v167 | 7;
    v171 = v170 + 1;
    v169 = operator new(v170 + 1);
    *(_QWORD *)&buf[8] = v168;
    *(_QWORD *)&buf[16] = v171 | 0x8000000000000000;
    *(_QWORD *)buf = v169;
  }
  else
  {
    buf[23] = v167;
    v169 = buf;
    if (!v167)
      goto LABEL_278;
  }
  memmove(v169, v166, v168);
LABEL_278:
  v169[v168] = 0;
  object = v157;
  if (v157)
    xpc_retain(v157);
  else
    object = xpc_null_create();
  v175 = 0;
  Service::runCommand(v165, (uint64_t)buf, &object, &v175);
  xpc_release(object);
  object = 0;
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  xpc_release(v157);
LABEL_284:
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v181.__r_.__value_.__l.__data_);
  v11 = v183;
  if (v183)
    goto LABEL_287;
}

void ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!*a2)
          v9 = 0;
        v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            v13 = 138412290;
            v14 = v8;
            _os_log_error_impl(&dword_24B855000, v10, OS_LOG_TYPE_ERROR, "Failed to send battery info update\n:%@", (uint8_t *)&v13, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v13) = 0;
          _os_log_impl(&dword_24B855000, v10, OS_LOG_TYPE_DEFAULT, "#I Success sending battery info update", (uint8_t *)&v13, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke_114(_QWORD *a1, unsigned int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unsigned int v8;
  _BOOL4 v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  CommandDriverFactory *v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  void *v31;
  NSObject *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *aBlock;
  dispatch_object_t object;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v47;
  _BYTE buf[18];
  __int16 v49;
  const char *v50;
  __int16 v51;
  const char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v47 = v6;
  if (!v6)
    return;
  v7 = v6;
  if (!a1[5])
  {
LABEL_60:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  v8 = *(unsigned __int8 *)(v5 + 320);
  if (*(_BYTE *)(v5 + 320)
    && (v8 > 0x27 || a2 <= 0x29u)
    && (v8 < 0x28 || a2 >= 0x26u))
  {
    v9 = ((a2 >> 8) & 1) != *(unsigned __int8 *)(v5 + 321);
    v10 = *(NSObject **)(v5 + 88);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
  }
  else
  {
    v9 = 1;
    v10 = *(NSObject **)(v5 + 88);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
  }
  v11 = "TRUE";
  if ((a2 & 0x100) != 0)
    v12 = "TRUE";
  else
    v12 = "FALSE";
  *(_DWORD *)buf = 67109890;
  *(_DWORD *)&buf[4] = a2;
  if ((*(_QWORD *)&a2 & 0x10000) != 0)
    v13 = "TRUE";
  else
    v13 = "FALSE";
  *(_WORD *)&buf[8] = 2080;
  *(_QWORD *)&buf[10] = v12;
  v49 = 2080;
  if (!v9)
    v11 = "FALSE";
  v50 = v13;
  v51 = 2080;
  v52 = v11;
  _os_log_impl(&dword_24B855000, v10, OS_LOG_TYPE_DEFAULT, "#I Battery Info Update:\n   chargeLevel:        %u\n   charging:           %s\n   fully charged:      %s\n   reportToBaseband:   %s", buf, 0x26u);
LABEL_19:
  if (!v9)
    goto LABEL_60;
  *(_WORD *)(v5 + 320) = a2;
  *(_BYTE *)(v5 + 322) = BYTE2(a2);
  v44 = 0xAAAAAAAAAAAAAAAALL;
  v45 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v14 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v15 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v14);
    v16 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v17 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v16;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v15 = off_2579B85E0;
  }
  v23 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  v40 = v15;
  v41 = *(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v24 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(&v42, v15);
  v44 = 0;
  v45 = 0;
  if (v43)
  {
    v45 = std::__shared_weak_count::lock(v43);
    if (v45)
      v44 = v42;
    if (v43)
      std::__shared_weak_count::__release_weak(v43);
  }
  if (v23)
  {
    v26 = (unint64_t *)&v23->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v28 = v44;
  if (v44)
  {
    v29 = *(unsigned __int8 *)(v5 + 320);
    v30 = *(unsigned __int8 *)(v5 + 321);
    v31 = (void *)a1[7];
    if (v31)
      v31 = _Block_copy(v31);
    v32 = a1[8];
    aBlock = v31;
    object = v32;
    if (v32)
      dispatch_retain(v32);
    (*(void (**)(unint64_t, uint64_t, BOOL, void **))(*(_QWORD *)v28 + 176))(v28, v29, v30 != 0, &aBlock);
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
  }
  v33 = v45;
  if (v45)
  {
    v34 = (unint64_t *)&v45->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v7 = v47;
  if (v47)
    goto LABEL_60;
}

void sub_24B8AB718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[8];
  a1[7] = v7;
  a1[8] = v8;
  if (v8)
    dispatch_retain(v8);
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitBatteryInfo)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN11RadioModule21setOperatingMode_syncEjN5radio13OperatingModeEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint8_t buf[4];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        if (*a2)
          v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v9 = 0;
        if (v9)
        {
          v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v14 = v8;
            _os_log_error_impl(&dword_24B855000, v10, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        (*(void (**)(void))(a1[7] + 16))();
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_24B8AB9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN11RadioModule34queryFactoryCalibrationStatus_syncEv_block_invoke(_QWORD *a1, uint64_t *a2, const __CFDictionary **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  NSObject *v12;
  const __CFDictionary *v13;
  uint64_t (*v14)(uint64_t);
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint8_t buf[24];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        v10 = *a2;
        v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!v10)
          v11 = 0;
        if (v11)
        {
          v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v10;
            _os_log_error_impl(&dword_24B855000, v12, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        else
        {
          v13 = *a3;
          v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v14 = 0;
          if (v14)
          {
            memset(buf, 170, 16);
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v13);
            *(_BYTE *)(v7 + 192) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x24BED3920]);
            MEMORY[0x24BD294A8](buf);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN11RadioModule29queryRFCalibrationStatus_syncEv_block_invoke(_QWORD *a1, uint64_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void *v15;
  uint64_t (*v16)(uint64_t);
  CFTypeRef cf;
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        v10 = *a2;
        v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!v10)
          v11 = 0;
        if (v11)
        {
          v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v19 = v10;
            _os_log_error_impl(&dword_24B855000, v12, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        else
        {
          v15 = *a3;
          v16 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v16 = 0;
          if (v16)
          {
            cf = *a3;
            if (v15)
              CFRetain(v15);
            radio::RFCalibration_t::fill();
            if (cf)
              CFRelease(cf);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_24B8ABD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN11RadioModule25queryFieldTestConfig_syncEv_block_invoke(_QWORD *a1, uint64_t *a2, ctu **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  NSObject *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t (*v16)(uint64_t);
  xpc_object_t v17;
  xpc_object_t v18;
  void *v19;
  NSObject *v20;
  _BYTE *v21;
  _BYTE object[12];
  char v23;
  uint8_t buf[4];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v10 = v8;
      if (a1[5])
      {
        v11 = *a2;
        v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!v11)
          v12 = 0;
        if (v12)
        {
          v13 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v11;
            _os_log_error_impl(&dword_24B855000, v13, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
          }
        }
        else
        {
          v16 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v16 = 0;
          if (v16)
          {
            ctu::cf_to_xpc(*a3, v9);
            v17 = *(xpc_object_t *)object;
            if (*(_QWORD *)object && MEMORY[0x24BD2A468](*(_QWORD *)object) == MEMORY[0x24BDACFA0])
              xpc_retain(*(xpc_object_t *)object);
            else
              v17 = xpc_null_create();
            v18 = xpc_null_create();
            v19 = *(void **)(v7 + 248);
            *(_QWORD *)(v7 + 248) = v17;
            xpc_release(v19);
            xpc_release(v18);
            xpc_release(*(xpc_object_t *)object);
            v20 = *(NSObject **)(v7 + 88);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              xpc::object::to_string((xpc::object *)(v7 + 248));
              v21 = v23 >= 0 ? object : *(_BYTE **)object;
              *(_DWORD *)buf = 136315138;
              v25 = v21;
              _os_log_impl(&dword_24B855000, v20, OS_LOG_TYPE_DEFAULT, "#I Baseband field test config:\n%s", buf, 0xCu);
              if (v23 < 0)
                operator delete(*(void **)object);
            }
          }
        }
      }
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_24B8ABFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RadioModule::handleResetSPMI_sync(RadioModule *this, int a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  int v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 67109120;
    LODWORD(v9) = a2;
    _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I Received request to reset SPMI with data (0x%x)", (uint8_t *)&v8, 8u);
  }
  v5 = TelephonyBasebandResetSPMI();
  v6 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = " not ";
    if (v5)
      v7 = " ";
    v8 = 136315138;
    v9 = v7;
    _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I Request to reset SPMI was%ssuccessful", (uint8_t *)&v8, 0xCu);
  }
}

uint64_t ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBB760;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBB760;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<RadioModule *,std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule *)#1},std::allocator<RadioModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<RadioModule *,std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule *)#1},std::allocator<RadioModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule*)#1}::operator() const(RadioModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<RadioModule *,std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule *)#1},std::allocator<RadioModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule*)#1}::operator() const(RadioModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBB760;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ctu::SharedSynchronizable<RadioModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_251CBB828;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11RadioModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11RadioModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x24BE057D8];
    v5 = strlen((const char *)*MEMORY[0x24BE057D8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x24BD2A468](v38) == MEMORY[0x24BDACFA0])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x24BE04F20], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_24B855000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_2579B85E0;
  }
  v14 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v15 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x24BDAC760];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__0clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_134;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 224))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_24B8ACB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__0clEv_block_invoke(_QWORD *a1, _QWORD *a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  std::__shared_weak_count *v10;
  xpc_object_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  int v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *v22;
  char v23;
  xpc_object_t xdict;
  std::__shared_weak_count *v26;
  void *__p[3];

  v4 = (std::__shared_weak_count *)a1[5];
  if (!v4)
    return;
  v7 = std::__shared_weak_count::lock(v4);
  v26 = v7;
  if (!v7)
    return;
  if (!a1[4])
  {
    v10 = v7;
LABEL_29:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  v8 = xpc_dictionary_create(0, 0, 0);
  v9 = v8;
  if (v8)
  {
    xdict = v8;
  }
  else
  {
    v9 = xpc_null_create();
    xdict = v9;
    if (!v9)
    {
      v11 = xpc_null_create();
      v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x24BD2A468](v9) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  v11 = xpc_null_create();
LABEL_12:
  xdict = v11;
LABEL_13:
  xpc_release(v9);
  v12 = MEMORY[0x24BD2A468](*a2);
  v13 = MEMORY[0x24BDACFE0];
  if (v12 == MEMORY[0x24BDACFE0])
  {
    v17 = *a3;
    if (v17)
      xpc_retain(v17);
    else
      v17 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x24BE05900], v17);
    v18 = xpc_null_create();
    xpc_release(v17);
    xpc_release(v18);
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    xpc::dyn_cast_or_default();
    if (v23 >= 0)
      v14 = (const char *)&v22;
    else
      v14 = (const char *)v22;
    v15 = xpc_string_create(v14);
    if (!v15)
      v15 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x24BE05038], v15);
    v16 = xpc_null_create();
    xpc_release(v15);
    xpc_release(v16);
    if (v23 < 0)
      operator delete(v22);
  }
  if (MEMORY[0x24BD2A468](*a2) == v13)
    v19 = 0;
  else
    v19 = -534716416;
  LODWORD(__p[0]) = v19;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, (unsigned int *)__p, &xdict);
  xpc_release(xdict);
  v10 = v26;
  if (v26)
    goto LABEL_29;
}

void sub_24B8ACF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  xpc_release(object);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[6];
  if (result)
    result = _Block_copy(result);
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x24BE05100];
    v5 = strlen((const char *)*MEMORY[0x24BE05100]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x24BD2A468](v38) == MEMORY[0x24BDACFA0])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x24BE04F20], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_24B855000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_2579B85E0;
  }
  v14 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v15 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x24BDAC760];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__1clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_135;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 264))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_24B8AD668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__1clEv_block_invoke(_QWORD *a1, xpc_object_t *a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  xpc_object_t v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  std::__shared_weak_count *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  unsigned int v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unsigned int v23;
  xpc_object_t object;
  std::__shared_weak_count *v26;

  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v26 = v7;
    if (v7)
    {
      if (!a1[4])
      {
        v13 = v7;
LABEL_25:
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        return;
      }
      v8 = xpc_null_create();
      object = v8;
      v9 = MEMORY[0x24BD2A468](*a2);
      v10 = MEMORY[0x24BDACFE0];
      if (v9 == MEMORY[0x24BDACFE0])
      {
        v14 = *a3;
        if (v14 && MEMORY[0x24BD2A468](v14) == MEMORY[0x24BDACFA0])
          xpc_retain(v14);
        else
          v14 = xpc_null_create();
        v15 = xpc_null_create();
        object = v14;
        xpc_release(v8);
        xpc_release(v15);
      }
      else
      {
        v11 = xpc_dictionary_create(0, 0, 0);
        if (v11 || (v11 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x24BD2A468](v11) == MEMORY[0x24BDACFA0])
          {
            xpc_retain(v11);
            v12 = v11;
          }
          else
          {
            v12 = xpc_null_create();
          }
        }
        else
        {
          v12 = xpc_null_create();
          v11 = 0;
        }
        xpc_release(v11);
        v16 = xpc_null_create();
        v17 = object;
        object = v12;
        xpc_release(v17);
        xpc_release(v16);
        v18 = *a2;
        if (*a2)
          xpc_retain(*a2);
        else
          v18 = xpc_null_create();
        xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x24BE05038], v18);
        v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
      }
      if (MEMORY[0x24BD2A468](*a2) == v10)
        v20 = 0;
      else
        v20 = -534716416;
      v23 = v20;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v23, &object);
      xpc_release(object);
      v13 = v26;
      if (v26)
        goto LABEL_25;
    }
  }
}

void sub_24B8ADACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  xpc_release(v11);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x24BE05518];
    v5 = strlen((const char *)*MEMORY[0x24BE05518]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x24BD2A468](v38) == MEMORY[0x24BDACFA0])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x24BE04F20], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_24B855000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_2579B85E0;
  }
  v14 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v15 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x24BDAC760];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__2clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_136;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 280))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_24B8AE0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__2clEv_block_invoke(_QWORD *a1, xpc_object_t *a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  xpc_object_t v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  std::__shared_weak_count *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  unsigned int v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unsigned int v23;
  xpc_object_t object;
  std::__shared_weak_count *v26;

  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v26 = v7;
    if (v7)
    {
      if (!a1[4])
      {
        v13 = v7;
LABEL_25:
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        return;
      }
      v8 = xpc_null_create();
      object = v8;
      v9 = MEMORY[0x24BD2A468](*a2);
      v10 = MEMORY[0x24BDACFE0];
      if (v9 == MEMORY[0x24BDACFE0])
      {
        v14 = *a3;
        if (v14 && MEMORY[0x24BD2A468](v14) == MEMORY[0x24BDACFA0])
          xpc_retain(v14);
        else
          v14 = xpc_null_create();
        v15 = xpc_null_create();
        object = v14;
        xpc_release(v8);
        xpc_release(v15);
      }
      else
      {
        v11 = xpc_dictionary_create(0, 0, 0);
        if (v11 || (v11 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x24BD2A468](v11) == MEMORY[0x24BDACFA0])
          {
            xpc_retain(v11);
            v12 = v11;
          }
          else
          {
            v12 = xpc_null_create();
          }
        }
        else
        {
          v12 = xpc_null_create();
          v11 = 0;
        }
        xpc_release(v11);
        v16 = xpc_null_create();
        v17 = object;
        object = v12;
        xpc_release(v17);
        xpc_release(v16);
        v18 = *a2;
        if (*a2)
          xpc_retain(*a2);
        else
          v18 = xpc_null_create();
        xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x24BE05038], v18);
        v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
      }
      if (MEMORY[0x24BD2A468](*a2) == v10)
        v20 = 0;
      else
        v20 = -534716416;
      v23 = v20;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v23, &object);
      xpc_release(object);
      v13 = v26;
      if (v26)
        goto LABEL_25;
    }
  }
}

void sub_24B8AE558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  xpc_release(v11);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x24BE05600];
    v5 = strlen((const char *)*MEMORY[0x24BE05600]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x24BD2A468](v38) == MEMORY[0x24BDACFA0])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x24BE04F20], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_24B855000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_2579B85E0;
  }
  v14 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v15 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x24BDAC760];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__3clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_137;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 288))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_24B8AEB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__3clEv_block_invoke(_QWORD *a1, _QWORD *a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  xpc_object_t v9;
  uint64_t v10;
  uint64_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  unsigned int v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unsigned int v17;
  xpc_object_t object;
  std::__shared_weak_count *v20;

  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v20 = v7;
    if (v7)
    {
      v8 = v7;
      if (a1[4])
      {
        v9 = xpc_null_create();
        object = v9;
        v10 = MEMORY[0x24BD2A468](*a2);
        v11 = MEMORY[0x24BDACFE0];
        if (v10 == MEMORY[0x24BDACFE0])
        {
          v12 = *a3;
          if (v12 && MEMORY[0x24BD2A468](v12) == MEMORY[0x24BDACFA0])
            xpc_retain(v12);
          else
            v12 = xpc_null_create();
          v13 = xpc_null_create();
          object = v12;
          xpc_release(v9);
          xpc_release(v13);
        }
        if (MEMORY[0x24BD2A468](*a2) == v11)
          v14 = 0;
        else
          v14 = -534716416;
        v17 = v14;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v17, &object);
        xpc_release(object);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_24B8AEEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  xpc_release(v11);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb4_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x24BE05250];
    v5 = strlen((const char *)*MEMORY[0x24BE05250]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x24BD2A468](v38) == MEMORY[0x24BDACFA0])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x24BE04F20], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_24B855000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_2579B85E0;
  }
  v14 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v15 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x24BDAC760];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb4_ENK3__4clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_138;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 296))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_24B8AF4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb4_ENK3__4clEv_block_invoke(_QWORD *a1, _QWORD *a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  xpc_object_t v9;
  uint64_t v10;
  uint64_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  unsigned int v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unsigned int v17;
  xpc_object_t object;
  std::__shared_weak_count *v20;

  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v20 = v7;
    if (v7)
    {
      v8 = v7;
      if (a1[4])
      {
        v9 = xpc_null_create();
        object = v9;
        v10 = MEMORY[0x24BD2A468](*a2);
        v11 = MEMORY[0x24BDACFE0];
        if (v10 == MEMORY[0x24BDACFE0])
        {
          v12 = *a3;
          if (v12 && MEMORY[0x24BD2A468](v12) == MEMORY[0x24BDACFA0])
            xpc_retain(v12);
          else
            v12 = xpc_null_create();
          v13 = xpc_null_create();
          object = v12;
          xpc_release(v9);
          xpc_release(v13);
        }
        if (MEMORY[0x24BD2A468](*a2) == v11)
          v14 = 0;
        else
          v14 = -534716416;
        v17 = v14;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v17, &object);
        xpc_release(object);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_24B8AF82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  xpc_release(v11);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb5_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x24BE057A0];
    v5 = strlen((const char *)*MEMORY[0x24BE057A0]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x24BD2A468](v38) == MEMORY[0x24BDACFA0])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x24BE04F20], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_24B855000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_2579B85E0;
  }
  v14 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v15 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x24BDAC760];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb5_ENK3__5clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_139;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 232))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_24B8AFE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb5_ENK3__5clEv_block_invoke(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  std::__shared_weak_count *v10;
  xpc_object_t v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  unsigned int v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unsigned int v19;
  xpc_object_t xdict;
  std::__shared_weak_count *v22;

  v4 = (std::__shared_weak_count *)a1[5];
  if (!v4)
    return;
  v7 = std::__shared_weak_count::lock(v4);
  v22 = v7;
  if (!v7)
    return;
  if (!a1[4])
  {
    v10 = v7;
LABEL_22:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  v8 = xpc_dictionary_create(0, 0, 0);
  v9 = v8;
  if (v8)
  {
    xdict = v8;
  }
  else
  {
    v9 = xpc_null_create();
    xdict = v9;
    if (!v9)
    {
      v11 = xpc_null_create();
      v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x24BD2A468](v9) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  v11 = xpc_null_create();
LABEL_12:
  xdict = v11;
LABEL_13:
  xpc_release(v9);
  v12 = MEMORY[0x24BD2A468](*a3);
  v13 = MEMORY[0x24BDACFE0];
  if (v12 != MEMORY[0x24BDACFE0])
  {
    v14 = (xpc_object_t)*a3;
    if (v14)
      xpc_retain(v14);
    else
      v14 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x24BE05900], v14);
    v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
  }
  if (MEMORY[0x24BD2A468](*a2) == v13)
    v16 = 0;
  else
    v16 = -534716416;
  v19 = v16;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v19, &xdict);
  xpc_release(xdict);
  v10 = v22;
  if (v22)
    goto LABEL_22;
}

void sub_24B8B0218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  xpc_release(object);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb6_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  const object *v29;
  xpc_object_t *v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  NSObject *v34;
  xpc_object_t v35;
  uint64_t v36;
  xpc_object_t v37;
  CFTypeRef v38;
  CFTypeID v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_weak_owners;
  unint64_t v42;
  void *v43;
  void *v44;
  NSObject *v45;
  unint64_t *v46;
  unint64_t v47;
  xpc_object_t v48;
  void *v49;
  xpc_object_t *v50;
  xpc_object_t v51;
  xpc_object_t v52;
  std::__shared_weak_count *v53;
  const void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  xpc_object_t object[6];
  std::__shared_weak_count *v59;
  void *aBlock;
  xpc_object_t v61;
  CFTypeRef cf;
  CFTypeRef v63;
  std::string __dst;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    v4 = (const void *)*MEMORY[0x24BE05768];
    v5 = strlen((const char *)*MEMORY[0x24BE05768]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)object = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 2;
            if (!v2[2])
            {
LABEL_92:
              if (SHIBYTE(object[2]) < 0)
                operator delete(object[0]);
              goto LABEL_94;
            }
LABEL_43:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v31 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0)
              v31 = object[1];
            if (v31)
            {
              v32 = xpc_dictionary_create(0, 0, 0);
              if (v32 || (v32 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x24BD2A468](v32) == MEMORY[0x24BDACFA0])
                {
                  xpc_retain(v32);
                  v33 = v32;
                }
                else
                {
                  v33 = xpc_null_create();
                }
              }
              else
              {
                v33 = xpc_null_create();
                v32 = 0;
              }
              xpc_release(v32);
              v48 = xpc_null_create();
              v49 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              xpc_release(v49);
              xpc_release(v48);
              if (SHIBYTE(object[2]) >= 0)
                v50 = object;
              else
                v50 = (xpc_object_t *)object[0];
              v51 = xpc_string_create((const char *)v50);
              if (!v51)
                v51 = xpc_null_create();
              xpc_dictionary_set_value(v33, (const char *)*MEMORY[0x24BE04F20], v51);
              v52 = xpc_null_create();
              xpc_release(v51);
              xpc_release(v52);
            }
            LODWORD(v63) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, (unsigned int *)&v63, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_92;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v30 = object;
        if (SHIBYTE(object[2]) < 0)
          v30 = (xpc_object_t *)object[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
        _os_log_impl(&dword_24B855000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 2;
        if (!v2[2])
          goto LABEL_92;
        goto LABEL_43;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_2579B85E0;
  }
  v14 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v15 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
LABEL_51:
    v34 = v3[11];
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_24B855000, v34, OS_LOG_TYPE_ERROR, "No radio driver", (uint8_t *)object, 2u);
    }
    v35 = xpc_null_create();
    v36 = v2[2];
    object[0] = v35;
    v37 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v36 + 16))(v36, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v37);
    goto LABEL_78;
  }
LABEL_36:
  if (!v18)
    goto LABEL_51;
LABEL_37:
  v28 = (void *)v2[1];
  v61 = v28;
  if (v28)
    xpc_retain(v28);
  else
    v61 = xpc_null_create();
  xpc::bridge((xpc *)&v61, v29);
  v38 = cf;
  if (cf && (v39 = CFGetTypeID(cf), v39 == CFDictionaryGetTypeID()))
  {
    v63 = v38;
    CFRetain(v38);
  }
  else
  {
    v63 = 0;
  }
  object[0] = (xpc_object_t)MEMORY[0x24BDAC760];
  object[1] = (xpc_object_t)1174405120;
  object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb6_ENK3__6clEv_block_invoke;
  object[3] = &__block_descriptor_tmp_140;
  object[4] = v3;
  object[5] = *((xpc_object_t *)v2 + 3);
  v40 = (std::__shared_weak_count *)v2[4];
  v59 = v40;
  if (v40)
  {
    p_shared_weak_owners = (unint64_t *)&v40->__shared_weak_owners_;
    do
      v42 = __ldxr(p_shared_weak_owners);
    while (__stxr(v42 + 1, p_shared_weak_owners));
  }
  v43 = (void *)v2[2];
  if (v43)
    v43 = _Block_copy(v43);
  aBlock = v43;
  v44 = _Block_copy(object);
  v45 = v3[17];
  if (v45)
    dispatch_retain(v45);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
  (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(_QWORD *)v18 + 248))(v18, &v63, &__dst);
  if (__dst.__r_.__value_.__l.__size_)
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  if (__dst.__r_.__value_.__r.__words[0])
    _Block_release(__dst.__r_.__value_.__l.__data_);
  if (v63)
    CFRelease(v63);
  if (cf)
    CFRelease(cf);
  xpc_release(v61);
  if (aBlock)
    _Block_release(aBlock);
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
LABEL_78:
  if (v17)
  {
    v46 = (unint64_t *)&v17->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_94:
  v53 = (std::__shared_weak_count *)v2[4];
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  v54 = (const void *)v2[2];
  if (v54)
    _Block_release(v54);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v55 = (std::__shared_weak_count *)a1[2];
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  operator delete(a1);
}

void sub_24B8B0944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb6_ENK3__6clEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _BYTE object[24];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        if (*a2)
          v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v9 = 0;
        if (v9)
        {
          v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v8;
            _os_log_error_impl(&dword_24B855000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            v8 = *a2;
          }
        }
        if (v8)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (v11)
          v12 = 3760250880;
        else
          v12 = 0;
        v13 = xpc_null_create();
        v14 = a1[7];
        *(_QWORD *)object = v13;
        v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_24B8B0D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb7_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  xpc_object_t value;
  std::string *v29;
  std::string::size_type size;
  xpc_object_t v31;
  xpc_object_t v32;
  NSObject *v33;
  xpc_object_t v34;
  uint64_t v35;
  xpc_object_t v36;
  int v37;
  NSObject *v38;
  _BOOL4 v39;
  std::string *v40;
  xpc_object_t v41;
  xpc_object_t v42;
  void *v43;
  const object *v44;
  CFTypeRef v45;
  CFTypeID v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_weak_owners;
  unint64_t v49;
  void *v50;
  void *v51;
  NSObject *v52;
  NSObject *v53;
  xpc_object_t v54;
  uint64_t v55;
  xpc_object_t v56;
  unint64_t *v57;
  unint64_t v58;
  xpc_object_t v59;
  void *v60;
  std::string *p_object;
  xpc_object_t v62;
  xpc_object_t v63;
  std::__shared_weak_count *v64;
  const void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::string object;
  void *v70;
  _QWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  void *aBlock;
  xpc_object_t v75;
  CFTypeRef cf;
  CFTypeRef v77;
  std::string __dst;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = (_QWORD *)**a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(&object, 170, sizeof(object));
    v4 = (const void *)*MEMORY[0x24BE05768];
    v5 = strlen((const char *)*MEMORY[0x24BE05768]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        object.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&object.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 2;
            if (!v2[2])
            {
LABEL_109:
              if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                operator delete(object.__r_.__value_.__l.__data_);
              goto LABEL_111;
            }
LABEL_43:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            size = HIBYTE(object.__r_.__value_.__r.__words[2]);
            if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = object.__r_.__value_.__l.__size_;
            if (size)
            {
              v31 = xpc_dictionary_create(0, 0, 0);
              if (v31 || (v31 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x24BD2A468](v31) == MEMORY[0x24BDACFA0])
                {
                  xpc_retain(v31);
                  v32 = v31;
                }
                else
                {
                  v32 = xpc_null_create();
                }
              }
              else
              {
                v32 = xpc_null_create();
                v31 = 0;
              }
              xpc_release(v31);
              v59 = xpc_null_create();
              v60 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
              xpc_release(v60);
              xpc_release(v59);
              if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_object = &object;
              else
                p_object = (std::string *)object.__r_.__value_.__r.__words[0];
              v62 = xpc_string_create((const char *)p_object);
              if (!v62)
                v62 = xpc_null_create();
              xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x24BE04F20], v62);
              v63 = xpc_null_create();
              xpc_release(v62);
              xpc_release(v63);
            }
            LODWORD(v77) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, (unsigned int *)&v77, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_109;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v29 = &object;
        if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v29 = (std::string *)object.__r_.__value_.__r.__words[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
        _os_log_impl(&dword_24B855000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 2;
        if (!v2[2])
          goto LABEL_109;
        goto LABEL_43;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)&object.__r_.__value_.__l.__data_;
    *(_OWORD *)&object.__r_.__value_.__l.__data_ = 0uLL;
    v11 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_2579B85E0;
  }
  v14 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v15 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
    {
LABEL_36:
      if (v18)
        goto LABEL_37;
LABEL_51:
      v33 = v3[11];
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        LOWORD(object.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl(&dword_24B855000, v33, OS_LOG_TYPE_ERROR, "No radio driver", (uint8_t *)&object, 2u);
      }
      v34 = xpc_null_create();
      v35 = v2[2];
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
      v36 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, std::string *))(v35 + 16))(v35, 3760250880, &object);
      xpc_release(object.__r_.__value_.__l.__data_);
      xpc_release(v36);
      goto LABEL_96;
    }
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (v27)
    goto LABEL_36;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!v18)
    goto LABEL_51;
LABEL_37:
  value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x24BE054E8]);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value)
    xpc_retain(value);
  else
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  v37 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object.__r_.__value_.__l.__data_);
  v38 = v3[11];
  v39 = os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
  if (v37 == 1)
  {
    if (v39)
    {
      LOWORD(object.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_24B855000, v38, OS_LOG_TYPE_DEFAULT, "#I RF Self Test in FTM requested", (uint8_t *)&object, 2u);
    }
    goto LABEL_65;
  }
  if (v39)
  {
    LOWORD(object.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_24B855000, v38, OS_LOG_TYPE_DEFAULT, "#I RF Self Test in AST2 mode requested", (uint8_t *)&object, 2u);
  }
  memset(&object, 0, sizeof(object));
  ctu::cf::assign();
  __dst = object;
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &__dst;
  else
    v40 = (std::string *)object.__r_.__value_.__r.__words[0];
  v41 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)v40);
  v42 = v41;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v42)
      goto LABEL_65;
LABEL_93:
    v53 = v3[11];
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_24B855000, v53, OS_LOG_TYPE_ERROR, "Ticket was not provided", (uint8_t *)&object, 2u);
    }
    v54 = xpc_null_create();
    v55 = v2[2];
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
    v56 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v55 + 16))(v55, 3760250882, &object);
    xpc_release(object.__r_.__value_.__l.__data_);
    xpc_release(v56);
    goto LABEL_96;
  }
  if (!v41)
    goto LABEL_93;
LABEL_65:
  v43 = (void *)v2[1];
  v75 = v43;
  if (v43)
    xpc_retain(v43);
  else
    v75 = xpc_null_create();
  xpc::bridge((xpc *)&v75, v44);
  v45 = cf;
  if (cf && (v46 = CFGetTypeID(cf), v46 == CFDictionaryGetTypeID()))
  {
    v77 = v45;
    CFRetain(v45);
  }
  else
  {
    v77 = 0;
  }
  object.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
  object.__r_.__value_.__l.__size_ = 1174405120;
  object.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb7_ENK3__7clEv_block_invoke;
  v70 = &__block_descriptor_tmp_141;
  v71 = v3;
  v72 = v2[3];
  v47 = (std::__shared_weak_count *)v2[4];
  v73 = v47;
  if (v47)
  {
    p_shared_weak_owners = (unint64_t *)&v47->__shared_weak_owners_;
    do
      v49 = __ldxr(p_shared_weak_owners);
    while (__stxr(v49 + 1, p_shared_weak_owners));
  }
  v50 = (void *)v2[2];
  if (v50)
    v50 = _Block_copy(v50);
  aBlock = v50;
  v51 = _Block_copy(&object);
  v52 = v3[17];
  if (v52)
    dispatch_retain(v52);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v52;
  (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(_QWORD *)v18 + 256))(v18, &v77, &__dst);
  if (__dst.__r_.__value_.__l.__size_)
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  if (__dst.__r_.__value_.__r.__words[0])
    _Block_release(__dst.__r_.__value_.__l.__data_);
  if (v77)
    CFRelease(v77);
  if (cf)
    CFRelease(cf);
  xpc_release(v75);
  if (aBlock)
    _Block_release(aBlock);
  if (v73)
    std::__shared_weak_count::__release_weak(v73);
LABEL_96:
  if (v17)
  {
    v57 = (unint64_t *)&v17->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_111:
  v64 = (std::__shared_weak_count *)v2[4];
  if (v64)
    std::__shared_weak_count::__release_weak(v64);
  v65 = (const void *)v2[2];
  if (v65)
    _Block_release(v65);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v66 = (std::__shared_weak_count *)a1[2];
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  operator delete(a1);
}

void sub_24B8B161C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,void *aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb7_ENK3__7clEv_block_invoke(_QWORD *a1, uint64_t *a2, ctu **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  NSObject *v13;
  uint64_t (*v14)(uint64_t);
  unsigned int v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unsigned int v18;
  std::__shared_weak_count *v20;
  _BYTE object[24];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v20 = v8;
    if (v8)
    {
      v10 = v8;
      if (a1[5])
      {
        v11 = *a2;
        if (*a2)
          v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v12 = 0;
        if (v12)
        {
          v13 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v11;
            _os_log_error_impl(&dword_24B855000, v13, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            v11 = *a2;
          }
        }
        if (v11)
          v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v14 = 0;
        if (v14)
          v15 = -534716416;
        else
          v15 = 0;
        v18 = v15;
        ctu::cf_to_xpc(*a3, v9);
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(a1 + 7, &v18, (void **)object);
        xpc_release(*(xpc_object_t *)object);
      }
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_24B8B1A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(uint64_t *a1, unsigned int *a2, void **a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  xpc_object_t object;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  object = v5;
  if (v5 && MEMORY[0x24BD2A468](v5) == MEMORY[0x24BDACFA0])
    xpc_retain(v5);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v4, &object);
  xpc_release(object);
}

void sub_24B8B1B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb8_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  xpc_object_t value;
  xpc_object_t v29;
  void *v30;
  const object *v31;
  xpc_object_t *v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  NSObject *v36;
  xpc_object_t v37;
  uint64_t v38;
  xpc_object_t v39;
  NSObject *v40;
  xpc_object_t v41;
  uint64_t v42;
  xpc_object_t v43;
  CFTypeRef v44;
  CFTypeID v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_weak_owners;
  unint64_t v48;
  void *v49;
  void *v50;
  NSObject *v51;
  unint64_t *v52;
  unint64_t v53;
  xpc_object_t v54;
  void *v55;
  xpc_object_t *v56;
  xpc_object_t v57;
  xpc_object_t v58;
  std::__shared_weak_count *v59;
  const void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  xpc_object_t object[6];
  std::__shared_weak_count *v65;
  void *aBlock;
  xpc_object_t v67;
  CFTypeRef cf;
  CFTypeRef v69;
  std::string __dst;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    v4 = (const void *)*MEMORY[0x24BE057C8];
    v5 = strlen((const char *)*MEMORY[0x24BE057C8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)object = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 2;
            if (!v2[2])
            {
LABEL_98:
              if (SHIBYTE(object[2]) < 0)
                operator delete(object[0]);
              goto LABEL_100;
            }
LABEL_45:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v33 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0)
              v33 = object[1];
            if (v33)
            {
              v34 = xpc_dictionary_create(0, 0, 0);
              if (v34 || (v34 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x24BD2A468](v34) == MEMORY[0x24BDACFA0])
                {
                  xpc_retain(v34);
                  v35 = v34;
                }
                else
                {
                  v35 = xpc_null_create();
                }
              }
              else
              {
                v35 = xpc_null_create();
                v34 = 0;
              }
              xpc_release(v34);
              v54 = xpc_null_create();
              v55 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
              xpc_release(v55);
              xpc_release(v54);
              if (SHIBYTE(object[2]) >= 0)
                v56 = object;
              else
                v56 = (xpc_object_t *)object[0];
              v57 = xpc_string_create((const char *)v56);
              if (!v57)
                v57 = xpc_null_create();
              xpc_dictionary_set_value(v35, (const char *)*MEMORY[0x24BE04F20], v57);
              v58 = xpc_null_create();
              xpc_release(v57);
              xpc_release(v58);
            }
            LODWORD(v69) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, (unsigned int *)&v69, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_98;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v32 = object;
        if (SHIBYTE(object[2]) < 0)
          v32 = (xpc_object_t *)object[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
        _os_log_impl(&dword_24B855000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 2;
        if (!v2[2])
          goto LABEL_98;
        goto LABEL_45;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_2579B85E0;
  }
  v14 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v15 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
    {
LABEL_36:
      if (v18)
        goto LABEL_37;
LABEL_53:
      v36 = v3[11];
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        LOWORD(object[0]) = 0;
        _os_log_error_impl(&dword_24B855000, v36, OS_LOG_TYPE_ERROR, "No radio driver", (uint8_t *)object, 2u);
      }
      v37 = xpc_null_create();
      v38 = v2[2];
      object[0] = v37;
      v39 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v38 + 16))(v38, 3760250880, object);
      xpc_release(object[0]);
      xpc_release(v39);
      goto LABEL_84;
    }
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (v27)
    goto LABEL_36;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!v18)
    goto LABEL_53;
LABEL_37:
  memset(object, 0, 24);
  ctu::cf::assign();
  memset(&__dst, 0, sizeof(__dst));
  value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)&__dst);
  v29 = value;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v29)
      goto LABEL_39;
LABEL_57:
    v40 = v3[11];
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_24B855000, v40, OS_LOG_TYPE_ERROR, "Ticket was not provided", (uint8_t *)object, 2u);
    }
    v41 = xpc_null_create();
    v42 = v2[2];
    object[0] = v41;
    v43 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v42 + 16))(v42, 3760250882, object);
    xpc_release(object[0]);
    xpc_release(v43);
    goto LABEL_84;
  }
  if (!value)
    goto LABEL_57;
LABEL_39:
  v30 = (void *)v2[1];
  v67 = v30;
  if (v30)
    xpc_retain(v30);
  else
    v67 = xpc_null_create();
  xpc::bridge((xpc *)&v67, v31);
  v44 = cf;
  if (cf && (v45 = CFGetTypeID(cf), v45 == CFDictionaryGetTypeID()))
  {
    v69 = v44;
    CFRetain(v44);
  }
  else
  {
    v69 = 0;
  }
  object[0] = (xpc_object_t)MEMORY[0x24BDAC760];
  object[1] = (xpc_object_t)1174405120;
  object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb8_ENK3__8clEv_block_invoke;
  object[3] = &__block_descriptor_tmp_142;
  object[4] = v3;
  object[5] = *((xpc_object_t *)v2 + 3);
  v46 = (std::__shared_weak_count *)v2[4];
  v65 = v46;
  if (v46)
  {
    p_shared_weak_owners = (unint64_t *)&v46->__shared_weak_owners_;
    do
      v48 = __ldxr(p_shared_weak_owners);
    while (__stxr(v48 + 1, p_shared_weak_owners));
  }
  v49 = (void *)v2[2];
  if (v49)
    v49 = _Block_copy(v49);
  aBlock = v49;
  v50 = _Block_copy(object);
  v51 = v3[17];
  if (v51)
    dispatch_retain(v51);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
  (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(_QWORD *)v18 + 240))(v18, &v69, &__dst);
  if (__dst.__r_.__value_.__l.__size_)
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  if (__dst.__r_.__value_.__r.__words[0])
    _Block_release(__dst.__r_.__value_.__l.__data_);
  if (v69)
    CFRelease(v69);
  if (cf)
    CFRelease(cf);
  xpc_release(v67);
  if (aBlock)
    _Block_release(aBlock);
  if (v65)
    std::__shared_weak_count::__release_weak(v65);
LABEL_84:
  if (v17)
  {
    v52 = (unint64_t *)&v17->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_100:
  v59 = (std::__shared_weak_count *)v2[4];
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
  v60 = (const void *)v2[2];
  if (v60)
    _Block_release(v60);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v61 = (std::__shared_weak_count *)a1[2];
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  operator delete(a1);
}

void sub_24B8B2350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,void *aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb8_ENK3__8clEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _BYTE object[24];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        if (*a2)
          v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v9 = 0;
        if (v9)
        {
          v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v8;
            _os_log_error_impl(&dword_24B855000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            v8 = *a2;
          }
        }
        if (v8)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (v11)
          v12 = 3760250880;
        else
          v12 = 0;
        v13 = xpc_null_create();
        v14 = a1[7];
        *(_QWORD *)object = v13;
        v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_24B8B27A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb9_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  xpc_object_t *v25;
  uint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  xpc_object_t v29;
  uint64_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  uint64_t v36;
  xpc_object_t v37;
  unint64_t *v38;
  unint64_t v39;
  xpc_object_t v40;
  void *v41;
  xpc_object_t *v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned int v50;
  xpc_object_t object[4];
  std::string __dst;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = (_QWORD *)**a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    v4 = (const void *)*MEMORY[0x24BE05370];
    v5 = strlen((const char *)*MEMORY[0x24BE05370]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)object = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = object;
            if (SHIBYTE(object[2]) < 0)
              v25 = (xpc_object_t *)object[0];
            LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
            _os_log_impl(&dword_24B855000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
            v26 = v2 + 1;
            if (!v2[1])
              goto LABEL_65;
            goto LABEL_42;
          }
        }
        else
        {
          v24 = v3[11];
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v26 = v2 + 1;
        if (!v2[1])
        {
LABEL_65:
          if (SHIBYTE(object[2]) < 0)
            operator delete(object[0]);
          goto LABEL_67;
        }
LABEL_42:
        __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
        v32 = (xpc_object_t)HIBYTE(object[2]);
        if (SHIBYTE(object[2]) < 0)
          v32 = object[1];
        if (v32)
        {
          v33 = xpc_dictionary_create(0, 0, 0);
          if (v33 || (v33 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x24BD2A468](v33) == MEMORY[0x24BDACFA0])
            {
              xpc_retain(v33);
              v34 = v33;
            }
            else
            {
              v34 = xpc_null_create();
            }
          }
          else
          {
            v34 = xpc_null_create();
            v33 = 0;
          }
          xpc_release(v33);
          v40 = xpc_null_create();
          v41 = (void *)__dst.__r_.__value_.__r.__words[0];
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
          xpc_release(v41);
          xpc_release(v40);
          if (SHIBYTE(object[2]) >= 0)
            v42 = object;
          else
            v42 = (xpc_object_t *)object[0];
          v43 = xpc_string_create((const char *)v42);
          if (!v43)
            v43 = xpc_null_create();
          xpc_dictionary_set_value(v34, (const char *)*MEMORY[0x24BE04F20], v43);
          v44 = xpc_null_create();
          xpc_release(v43);
          xpc_release(v44);
        }
        v50 = -534716415;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v26, &v50, (void **)&__dst.__r_.__value_.__l.__data_);
        xpc_release(__dst.__r_.__value_.__l.__data_);
        goto LABEL_65;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_2579B85E0;
  }
  v14 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v15 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_38;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_38;
  }
  v27 = (unint64_t *)&v14->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_39;
LABEL_50:
    v35 = xpc_null_create();
    v36 = v2[1];
    object[0] = v35;
    v37 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v36 + 16))(v36, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v37);
    goto LABEL_51;
  }
LABEL_38:
  if (!v18)
    goto LABEL_50;
LABEL_39:
  (*(void (**)(std::string::size_type, _QWORD))(*(_QWORD *)v18 + 312))(v18, 0);
  (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)v18 + 312))(v18, 1);
  (*(void (**)(std::string::size_type))(*(_QWORD *)v18 + 320))(v18);
  v29 = xpc_null_create();
  v30 = v2[1];
  object[0] = v29;
  v31 = xpc_null_create();
  (*(void (**)(uint64_t, _QWORD, xpc_object_t *))(v30 + 16))(v30, 0, object);
  xpc_release(object[0]);
  xpc_release(v31);
LABEL_51:
  if (v17)
  {
    v38 = (unint64_t *)&v17->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_67:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_24B8B2DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t __p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb10_E4__10EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  std::string *v24;
  __int128 v25;
  NSObject *v26;
  uint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_weak_owners;
  unint64_t v32;
  void *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  const object *v37;
  _BYTE *v38;
  uint64_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  uint64_t v43;
  xpc_object_t v44;
  CFTypeRef v45;
  CFTypeID v46;
  unint64_t *v47;
  unint64_t v48;
  xpc_object_t v49;
  void *v50;
  const char *v51;
  xpc_object_t v52;
  xpc_object_t v53;
  std::__shared_weak_count *v54;
  const void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  xpc_object_t object;
  CFTypeRef cf;
  CFTypeRef v61;
  _BYTE aBlock[24];
  void *v63;
  _QWORD *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  void *v67;
  std::string __dst;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = (_QWORD *)**a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(aBlock, 170, sizeof(aBlock));
    v4 = (const void *)*MEMORY[0x24BE051E8];
    v5 = strlen((const char *)*MEMORY[0x24BE051E8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v21 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v21 = v5 | 7;
      v22 = v21 + 1;
      p_dst = (std::string *)operator new(v21 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_33:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v23 = (char *)operator new(0x28uLL);
        strcpy(v23, " rejected; ABM is shutting down ");
        v24 = std::string::append(&__dst, v23, 0x20uLL);
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        *(_QWORD *)&aBlock[16] = *((_QWORD *)&v24->__r_.__value_.__l + 2);
        *(_OWORD *)aBlock = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        operator delete(v23);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v26 = v3[11];
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
LABEL_35:
            v27 = v2 + 1;
            if (!v2[1])
            {
LABEL_95:
              if ((aBlock[23] & 0x80000000) != 0)
                operator delete(*(void **)aBlock);
              goto LABEL_97;
            }
LABEL_55:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v39 = aBlock[23];
            if (aBlock[23] < 0)
              v39 = *(_QWORD *)&aBlock[8];
            if (v39)
            {
              v40 = xpc_dictionary_create(0, 0, 0);
              if (v40 || (v40 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x24BD2A468](v40) == MEMORY[0x24BDACFA0])
                {
                  xpc_retain(v40);
                  v41 = v40;
                }
                else
                {
                  v41 = xpc_null_create();
                }
              }
              else
              {
                v41 = xpc_null_create();
                v40 = 0;
              }
              xpc_release(v40);
              v49 = xpc_null_create();
              v50 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
              xpc_release(v50);
              xpc_release(v49);
              if (aBlock[23] >= 0)
                v51 = aBlock;
              else
                v51 = *(const char **)aBlock;
              v52 = xpc_string_create(v51);
              if (!v52)
                v52 = xpc_null_create();
              xpc_dictionary_set_value(v41, (const char *)*MEMORY[0x24BE04F20], v52);
              v53 = xpc_null_create();
              xpc_release(v52);
              xpc_release(v53);
            }
            LODWORD(v61) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v27, (unsigned int *)&v61, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_95;
          }
        }
        else
        {
          v26 = v3[11];
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            goto LABEL_35;
        }
        v38 = aBlock;
        if (aBlock[23] < 0)
          v38 = *(_BYTE **)aBlock;
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
        _os_log_impl(&dword_24B855000, v26, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v27 = v2 + 1;
        if (!v2[1])
          goto LABEL_95;
        goto LABEL_55;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_33;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)aBlock;
    *(_OWORD *)aBlock = 0uLL;
    v11 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (*(_QWORD *)&aBlock[8])
    {
      v14 = (unint64_t *)(*(_QWORD *)&aBlock[8] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)&aBlock[8] + 16))(*(_QWORD *)&aBlock[8]);
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&aBlock[8]);
      }
    }
    v9 = off_2579B85E0;
  }
  v16 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v17 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v19 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v19)
      v20 = __dst.__r_.__value_.__r.__words[0];
    else
      v20 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v16)
      goto LABEL_41;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    if (!v16)
      goto LABEL_41;
  }
  v28 = (unint64_t *)&v16->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (v20)
      goto LABEL_42;
    goto LABEL_63;
  }
LABEL_41:
  if (v20)
  {
LABEL_42:
    *(_QWORD *)aBlock = MEMORY[0x24BDAC760];
    *(_QWORD *)&aBlock[8] = 1174405120;
    *(_QWORD *)&aBlock[16] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb10_ENK4__10clEv_block_invoke;
    v63 = &__block_descriptor_tmp_143;
    v64 = v3;
    v65 = v2[2];
    v30 = (std::__shared_weak_count *)v2[3];
    v66 = v30;
    if (v30)
    {
      p_shared_weak_owners = (unint64_t *)&v30->__shared_weak_owners_;
      do
        v32 = __ldxr(p_shared_weak_owners);
      while (__stxr(v32 + 1, p_shared_weak_owners));
    }
    v33 = (void *)v2[1];
    if (v33)
      v33 = _Block_copy(v33);
    v67 = v33;
    v34 = _Block_copy(aBlock);
    v35 = v3[17];
    if (v35)
      dispatch_retain(v35);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
    v36 = (void *)v2[4];
    object = v36;
    if (v36)
      xpc_retain(v36);
    else
      object = xpc_null_create();
    xpc::bridge((xpc *)&object, v37);
    v45 = cf;
    if (cf && (v46 = CFGetTypeID(cf), v46 == CFDictionaryGetTypeID()))
    {
      v61 = v45;
      CFRetain(v45);
    }
    else
    {
      v61 = 0;
    }
    (*(void (**)(std::string::size_type, std::string *, CFTypeRef *))(*(_QWORD *)v20 + 344))(v20, &__dst, &v61);
    if (v61)
      CFRelease(v61);
    if (cf)
      CFRelease(cf);
    xpc_release(object);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (v67)
      _Block_release(v67);
    if (v66)
      std::__shared_weak_count::__release_weak(v66);
    goto LABEL_81;
  }
LABEL_63:
  v42 = xpc_null_create();
  v43 = v2[1];
  *(_QWORD *)aBlock = v42;
  v44 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(v43 + 16))(v43, 3760250880, aBlock);
  xpc_release(*(xpc_object_t *)aBlock);
  xpc_release(v44);
LABEL_81:
  if (v19)
  {
    v47 = (unint64_t *)&v19->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
LABEL_97:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  v54 = (std::__shared_weak_count *)v2[3];
  if (v54)
    std::__shared_weak_count::__release_weak(v54);
  v55 = (const void *)v2[1];
  if (v55)
    _Block_release(v55);
  operator delete(v2);
  v56 = (std::__shared_weak_count *)a1[2];
  if (v56)
  {
    v57 = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  operator delete(a1);
}

void sub_24B8B3678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, CFTypeRef a11, CFTypeRef cf, xpc_object_t object, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *a23,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb10_ENK4__10clEv_block_invoke(_QWORD *a1, uint64_t *a2, ctu **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  NSObject *v13;
  uint64_t (*v14)(uint64_t);
  unsigned int v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  ctu *v18;
  uint64_t (*v19)(uint64_t);
  NSObject *v20;
  unsigned int v21;
  std::__shared_weak_count *v23;
  _BYTE object[24];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v23 = v8;
    if (v8)
    {
      v10 = v8;
      if (a1[5])
      {
        v11 = *a2;
        if (*a2)
          v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v12 = 0;
        if (v12)
        {
          v13 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v11;
            _os_log_error_impl(&dword_24B855000, v13, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
          }
        }
        else
        {
          v18 = *a3;
          v19 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v19 = 0;
          if (v19)
          {
            v20 = *(NSObject **)(v7 + 88);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)object = 138412290;
              *(_QWORD *)&object[4] = v18;
              _os_log_impl(&dword_24B855000, v20, OS_LOG_TYPE_DEFAULT, "#I Get Antenna Port Info: %@", object, 0xCu);
            }
          }
        }
        if (*a2)
          v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v14 = 0;
        if (v14)
          v15 = -534716416;
        else
          v15 = 0;
        v21 = v15;
        ctu::cf_to_xpc(*a3, v9);
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(a1 + 7, &v21, (void **)object);
        xpc_release(*(xpc_object_t *)object);
      }
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_24B8B3ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb11_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  const object *v29;
  xpc_object_t *v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  uint64_t v35;
  xpc_object_t v36;
  CFTypeRef v37;
  CFTypeID v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_weak_owners;
  unint64_t v41;
  void *v42;
  void *v43;
  NSObject *v44;
  unint64_t *v45;
  unint64_t v46;
  xpc_object_t v47;
  void *v48;
  xpc_object_t *v49;
  xpc_object_t v50;
  xpc_object_t v51;
  std::__shared_weak_count *v52;
  const void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  xpc_object_t object[6];
  std::__shared_weak_count *v58;
  void *aBlock;
  xpc_object_t v60;
  CFTypeRef cf;
  CFTypeRef v62;
  std::string __dst;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    v4 = (const void *)*MEMORY[0x24BE051F8];
    v5 = strlen((const char *)*MEMORY[0x24BE051F8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)object = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_90:
              if (SHIBYTE(object[2]) < 0)
                operator delete(object[0]);
              goto LABEL_92;
            }
LABEL_43:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v31 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0)
              v31 = object[1];
            if (v31)
            {
              v32 = xpc_dictionary_create(0, 0, 0);
              if (v32 || (v32 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x24BD2A468](v32) == MEMORY[0x24BDACFA0])
                {
                  xpc_retain(v32);
                  v33 = v32;
                }
                else
                {
                  v33 = xpc_null_create();
                }
              }
              else
              {
                v33 = xpc_null_create();
                v32 = 0;
              }
              xpc_release(v32);
              v47 = xpc_null_create();
              v48 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              xpc_release(v48);
              xpc_release(v47);
              if (SHIBYTE(object[2]) >= 0)
                v49 = object;
              else
                v49 = (xpc_object_t *)object[0];
              v50 = xpc_string_create((const char *)v49);
              if (!v50)
                v50 = xpc_null_create();
              xpc_dictionary_set_value(v33, (const char *)*MEMORY[0x24BE04F20], v50);
              v51 = xpc_null_create();
              xpc_release(v50);
              xpc_release(v51);
            }
            LODWORD(v62) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, (unsigned int *)&v62, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_90;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v30 = object;
        if (SHIBYTE(object[2]) < 0)
          v30 = (xpc_object_t *)object[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
        _os_log_impl(&dword_24B855000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_90;
        goto LABEL_43;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_2579B85E0;
  }
  v14 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v15 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_51;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    v28 = (void *)v2[4];
    v60 = v28;
    if (v28)
      xpc_retain(v28);
    else
      v60 = xpc_null_create();
    xpc::bridge((xpc *)&v60, v29);
    v37 = cf;
    if (cf && (v38 = CFGetTypeID(cf), v38 == CFDictionaryGetTypeID()))
    {
      v62 = v37;
      CFRetain(v37);
    }
    else
    {
      v62 = 0;
    }
    object[0] = (xpc_object_t)MEMORY[0x24BDAC760];
    object[1] = (xpc_object_t)1174405120;
    object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb11_ENK4__11clEv_block_invoke;
    object[3] = &__block_descriptor_tmp_144;
    object[4] = v3;
    object[5] = *((xpc_object_t *)v2 + 2);
    v39 = (std::__shared_weak_count *)v2[3];
    v58 = v39;
    if (v39)
    {
      p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
      do
        v41 = __ldxr(p_shared_weak_owners);
      while (__stxr(v41 + 1, p_shared_weak_owners));
    }
    v42 = (void *)v2[1];
    if (v42)
      v42 = _Block_copy(v42);
    aBlock = v42;
    v43 = _Block_copy(object);
    v44 = v3[17];
    if (v44)
      dispatch_retain(v44);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
    (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(_QWORD *)v18 + 352))(v18, &v62, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (v62)
      CFRelease(v62);
    if (cf)
      CFRelease(cf);
    xpc_release(v60);
    if (aBlock)
      _Block_release(aBlock);
    if (v58)
      std::__shared_weak_count::__release_weak(v58);
    goto LABEL_76;
  }
LABEL_51:
  v34 = xpc_null_create();
  v35 = v2[1];
  object[0] = v34;
  v36 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v35 + 16))(v35, 3760250880, object);
  xpc_release(object[0]);
  xpc_release(v36);
LABEL_76:
  if (v17)
  {
    v45 = (unint64_t *)&v17->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_92:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  v52 = (std::__shared_weak_count *)v2[3];
  if (v52)
    std::__shared_weak_count::__release_weak(v52);
  v53 = (const void *)v2[1];
  if (v53)
    _Block_release(v53);
  operator delete(v2);
  v54 = (std::__shared_weak_count *)a1[2];
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  operator delete(a1);
}

void sub_24B8B41C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb11_ENK4__11clEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _BYTE object[24];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        if (*a2)
          v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v9 = 0;
        if (v9)
        {
          v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v8;
            _os_log_error_impl(&dword_24B855000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            v8 = *a2;
          }
        }
        if (v8)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (v11)
          v12 = 3760250880;
        else
          v12 = 0;
        v13 = xpc_null_create();
        v14 = a1[7];
        *(_QWORD *)object = v13;
        v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_24B8B45B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb12_E4__12EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  const object *v29;
  xpc_object_t *v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  uint64_t v35;
  xpc_object_t v36;
  CFTypeRef v37;
  CFTypeID v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_weak_owners;
  unint64_t v41;
  void *v42;
  void *v43;
  NSObject *v44;
  unint64_t *v45;
  unint64_t v46;
  xpc_object_t v47;
  void *v48;
  xpc_object_t *v49;
  xpc_object_t v50;
  xpc_object_t v51;
  std::__shared_weak_count *v52;
  const void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  xpc_object_t object[6];
  std::__shared_weak_count *v58;
  void *aBlock;
  xpc_object_t v60;
  CFTypeRef cf;
  CFTypeRef v62;
  std::string __dst;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    v4 = (const void *)*MEMORY[0x24BE04EB8];
    v5 = strlen((const char *)*MEMORY[0x24BE04EB8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)object = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_90:
              if (SHIBYTE(object[2]) < 0)
                operator delete(object[0]);
              goto LABEL_92;
            }
LABEL_43:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v31 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0)
              v31 = object[1];
            if (v31)
            {
              v32 = xpc_dictionary_create(0, 0, 0);
              if (v32 || (v32 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x24BD2A468](v32) == MEMORY[0x24BDACFA0])
                {
                  xpc_retain(v32);
                  v33 = v32;
                }
                else
                {
                  v33 = xpc_null_create();
                }
              }
              else
              {
                v33 = xpc_null_create();
                v32 = 0;
              }
              xpc_release(v32);
              v47 = xpc_null_create();
              v48 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              xpc_release(v48);
              xpc_release(v47);
              if (SHIBYTE(object[2]) >= 0)
                v49 = object;
              else
                v49 = (xpc_object_t *)object[0];
              v50 = xpc_string_create((const char *)v49);
              if (!v50)
                v50 = xpc_null_create();
              xpc_dictionary_set_value(v33, (const char *)*MEMORY[0x24BE04F20], v50);
              v51 = xpc_null_create();
              xpc_release(v50);
              xpc_release(v51);
            }
            LODWORD(v62) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, (unsigned int *)&v62, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_90;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v30 = object;
        if (SHIBYTE(object[2]) < 0)
          v30 = (xpc_object_t *)object[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
        _os_log_impl(&dword_24B855000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_90;
        goto LABEL_43;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_2579B85E0;
  }
  v14 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v15 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_51;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    v28 = (void *)v2[4];
    v60 = v28;
    if (v28)
      xpc_retain(v28);
    else
      v60 = xpc_null_create();
    xpc::bridge((xpc *)&v60, v29);
    v37 = cf;
    if (cf && (v38 = CFGetTypeID(cf), v38 == CFDictionaryGetTypeID()))
    {
      v62 = v37;
      CFRetain(v37);
    }
    else
    {
      v62 = 0;
    }
    object[0] = (xpc_object_t)MEMORY[0x24BDAC760];
    object[1] = (xpc_object_t)1174405120;
    object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb12_ENK4__12clEv_block_invoke;
    object[3] = &__block_descriptor_tmp_145;
    object[4] = v3;
    object[5] = *((xpc_object_t *)v2 + 2);
    v39 = (std::__shared_weak_count *)v2[3];
    v58 = v39;
    if (v39)
    {
      p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
      do
        v41 = __ldxr(p_shared_weak_owners);
      while (__stxr(v41 + 1, p_shared_weak_owners));
    }
    v42 = (void *)v2[1];
    if (v42)
      v42 = _Block_copy(v42);
    aBlock = v42;
    v43 = _Block_copy(object);
    v44 = v3[17];
    if (v44)
      dispatch_retain(v44);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
    (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(_QWORD *)v18 + 360))(v18, &v62, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (v62)
      CFRelease(v62);
    if (cf)
      CFRelease(cf);
    xpc_release(v60);
    if (aBlock)
      _Block_release(aBlock);
    if (v58)
      std::__shared_weak_count::__release_weak(v58);
    goto LABEL_76;
  }
LABEL_51:
  v34 = xpc_null_create();
  v35 = v2[1];
  object[0] = v34;
  v36 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v35 + 16))(v35, 3760250880, object);
  xpc_release(object[0]);
  xpc_release(v36);
LABEL_76:
  if (v17)
  {
    v45 = (unint64_t *)&v17->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_92:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  v52 = (std::__shared_weak_count *)v2[3];
  if (v52)
    std::__shared_weak_count::__release_weak(v52);
  v53 = (const void *)v2[1];
  if (v53)
    _Block_release(v53);
  operator delete(v2);
  v54 = (std::__shared_weak_count *)a1[2];
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  operator delete(a1);
}

void sub_24B8B4CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb12_ENK4__12clEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _BYTE object[24];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        if (*a2)
          v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v9 = 0;
        if (v9)
        {
          v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v8;
            _os_log_error_impl(&dword_24B855000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            v8 = *a2;
          }
        }
        if (v8)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (v11)
          v12 = 3760250880;
        else
          v12 = 0;
        v13 = xpc_null_create();
        v14 = a1[7];
        *(_QWORD *)object = v13;
        v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_24B8B50BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb13_E4__13EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x24BE056D0];
    v5 = strlen((const char *)*MEMORY[0x24BE056D0]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x24BD2A468](v38) == MEMORY[0x24BDACFA0])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x24BE04F20], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_24B855000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_2579B85E0;
  }
  v14 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v15 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x24BDAC760];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb13_ENK4__13clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_146;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 384))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_24B8B5700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb13_ENK4__13clEv_block_invoke(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  std::__shared_weak_count *v10;
  xpc_object_t v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  unsigned int v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unsigned int v19;
  xpc_object_t xdict;
  std::__shared_weak_count *v22;

  v4 = (std::__shared_weak_count *)a1[5];
  if (!v4)
    return;
  v7 = std::__shared_weak_count::lock(v4);
  v22 = v7;
  if (!v7)
    return;
  if (!a1[4])
  {
    v10 = v7;
LABEL_22:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  v8 = xpc_dictionary_create(0, 0, 0);
  v9 = v8;
  if (v8)
  {
    xdict = v8;
  }
  else
  {
    v9 = xpc_null_create();
    xdict = v9;
    if (!v9)
    {
      v11 = xpc_null_create();
      v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x24BD2A468](v9) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  v11 = xpc_null_create();
LABEL_12:
  xdict = v11;
LABEL_13:
  xpc_release(v9);
  v12 = MEMORY[0x24BD2A468](*a3);
  v13 = MEMORY[0x24BDACFE0];
  if (v12 != MEMORY[0x24BDACFE0])
  {
    v14 = (xpc_object_t)*a3;
    if (v14)
      xpc_retain(v14);
    else
      v14 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x24BE050E8], v14);
    v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
  }
  if (MEMORY[0x24BD2A468](*a2) == v13)
    v16 = 0;
  else
    v16 = -534716416;
  v19 = v16;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v19, &xdict);
  xpc_release(xdict);
  v10 = v22;
  if (v22)
    goto LABEL_22;
}

void sub_24B8B5AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  xpc_release(object);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::initialize(dispatch::group_session)::$_0>(RadioModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  RadioModule **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(RadioModule ***)a1;
  RadioModule::finishInitialization_sync(**(RadioModule ***)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_24B8B5B80(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::sleep(dispatch::group_session)::$_0>(RadioModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  NSObject *v14;

  v2 = *a1;
  v3 = **a1;
  v4 = *(uint64_t **)(v3 + 272);
  if (v4)
  {
    v5 = _Block_copy(&__block_literal_global_0);
    v6 = v5;
    v7 = *(NSObject **)(v3 + 136);
    if (v7)
    {
      dispatch_retain(v7);
      v13 = v6;
      v14 = v7;
      radio::HealthService::enterLowPower(v4, (uint64_t)&v13);
      dispatch_release(v7);
      if (!v6)
        goto LABEL_7;
      goto LABEL_6;
    }
    v13 = v5;
    v14 = 0;
    radio::HealthService::enterLowPower(v4, (uint64_t)&v13);
    if (v6)
LABEL_6:
      _Block_release(v6);
  }
LABEL_7:
  v8 = v2[1];
  if (v8)
  {
    dispatch_group_leave(v8);
    v9 = v2[1];
    if (v9)
      dispatch_release(v9);
  }
  operator delete(v2);
  v10 = (std::__shared_weak_count *)a1[2];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::wake(dispatch::group_session)::$_0>(RadioModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  NSObject *v14;

  v2 = *a1;
  v3 = **a1;
  v4 = *(uint64_t **)(v3 + 272);
  if (v4)
  {
    v5 = _Block_copy(&__block_literal_global_149);
    v6 = v5;
    v7 = *(NSObject **)(v3 + 136);
    if (v7)
    {
      dispatch_retain(v7);
      v13 = v6;
      v14 = v7;
      radio::HealthService::exitLowPower(v4, (uint64_t)&v13);
      dispatch_release(v7);
      if (!v6)
        goto LABEL_7;
      goto LABEL_6;
    }
    v13 = v5;
    v14 = 0;
    radio::HealthService::exitLowPower(v4, (uint64_t)&v13);
    if (v6)
LABEL_6:
      _Block_release(v6);
  }
LABEL_7:
  v8 = v2[1];
  if (v8)
  {
    dispatch_group_leave(v8);
    v9 = v2[1];
    if (v9)
      dispatch_release(v9);
  }
  operator delete(v2);
  v10 = (std::__shared_weak_count *)a1[2];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  operator delete(a1);
}

void std::__shared_ptr_pointer<radio::HealthService *,std::shared_ptr<radio::HealthService>::__shared_ptr_default_delete<radio::HealthService,radio::HealthService>,std::allocator<radio::HealthService>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::HealthService *,std::shared_ptr<radio::HealthService>::__shared_ptr_default_delete<radio::HealthService,radio::HealthService>,std::allocator<radio::HealthService>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (std::__shared_weak_count *)v1[1];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(v1);
    }
    else
    {
LABEL_6:
      operator delete(v1);
    }
  }
}

uint64_t std::__shared_ptr_pointer<radio::HealthService *,std::shared_ptr<radio::HealthService>::__shared_ptr_default_delete<radio::HealthService,radio::HealthService>,std::allocator<radio::HealthService>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B952B2CLL)
    return a1 + 24;
  if (((v3 & 0x800000024B952B2CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B952B2CLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B952B2CLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::__on_zero_shared(uint64_t a1)
{
  void *v1;

  if (*(_QWORD *)(a1 + 24))
  {
    v1 = (void *)MEMORY[0x24BD294C0]();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B952BFDLL)
    return a1 + 24;
  if (((v3 & 0x800000024B952BFDLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B952BFDLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B952BFDLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t __cxx_global_var_init_125()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_24B855000);
  }
  return result;
}

uint64_t __cxx_global_var_init_126()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_24B855000);
  }
  return result;
}

uint64_t __cxx_global_var_init_127()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_24B855000);
  }
  return result;
}

uint64_t __cxx_global_var_init_128()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_24B855000);
  }
  return result;
}

uint64_t TraceFilter::determineFilterAction(std::string *a1)
{
  const void *v2;
  size_t v3;
  std::string::size_type v4;
  std::string *p_dst;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __darwin_ino64_t v10;
  const void *v11;
  size_t v12;
  std::string::size_type v13;
  std::string *v14;
  int v15;
  int v16;
  __darwin_ino64_t st_ino;
  uint64_t st_rdev;
  __darwin_ino64_t v19;
  unsigned __int8 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  NSObject *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  std::string::size_type size;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  size_t v33;
  std::string::size_type v34;
  std::string *v35;
  uint64_t v36;
  uint64_t v37;
  signed int v38;
  std::string::size_type v39;
  _QWORD *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  const void *v50;
  size_t v51;
  __darwin_ino64_t v52;
  stat *p_p;
  void *v54;
  std::string::size_type v55;
  unsigned __int8 v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_unfair_lock_s *v61;
  const char *v62;
  const void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  timespec v67;
  std::string *v68;
  int v69;
  const void *v70;
  size_t v71;
  size_t v72;
  __int128 *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t NumberOfLogDumps;
  unsigned __int8 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  NSObject *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  void *v87;
  signed int v88;
  std::string v89;
  int v90;
  unsigned int v91;
  __int128 v92;
  __int128 v93;
  unint64_t v94;
  std::string v95;
  std::string __dst;
  stat __p;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  std::string::__assign_external(a1, (const std::string::value_type *)*MEMORY[0x24BE05280]);
  if (TelephonyUtilIsInternalBuild())
  {
    v91 = -1431655766;
    v2 = (const void *)*MEMORY[0x24BE051C0];
    v3 = strlen((const char *)*MEMORY[0x24BE051C0]);
    if (v3 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v4 = v3;
    if (v3 >= 0x17)
    {
      v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v7 = v3 | 7;
      v8 = v7 + 1;
      p_dst = (std::string *)operator new(v7 + 1);
      __dst.__r_.__value_.__l.__size_ = v4;
      __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v3;
      p_dst = &__dst;
      if (!v3)
      {
LABEL_11:
        p_dst->__r_.__value_.__s.__data_[v4] = 0;
        memset(&__p, 0, 24);
        if (prop::logfilter::get((char *)&__dst, (uint64_t)&__p))
        {
          v9 = util::convert<int>((const std::string *)&__p, &v91, 0);
          if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
            goto LABEL_16;
        }
        else
        {
          v9 = 0;
          if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
            goto LABEL_16;
        }
        operator delete(*(void **)&__p.st_dev);
LABEL_16:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          if (v9)
          {
LABEL_18:
            v10 = v91;
            v95.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
            v95.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
            v95.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
            v11 = (const void *)*MEMORY[0x24BDFC720];
            v12 = strlen((const char *)*MEMORY[0x24BDFC720]);
            if (v12 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v13 = v12;
            if (v12 >= 0x17)
            {
              v30 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v12 | 7) != 0x17)
                v30 = v12 | 7;
              v31 = v30 + 1;
              v14 = (std::string *)operator new(v30 + 1);
              __dst.__r_.__value_.__l.__size_ = v13;
              __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v12;
              v14 = &__dst;
              if (!v12)
              {
                __dst.__r_.__value_.__s.__data_[0] = 0;
                v15 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_22;
                goto LABEL_47;
              }
            }
            memmove(v14, v11, v13);
            v14->__r_.__value_.__s.__data_[v13] = 0;
            v15 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_22:
              if (!v15)
                goto LABEL_51;
              memset(&__p, 0, 64);
              v16 = statvfs((const char *)&__dst, (statvfs *)&__p);
              st_ino = __p.st_ino;
              st_rdev = __p.st_rdev;
              if ((v15 & 0x80000000) == 0)
              {
LABEL_25:
                if (!v16)
                {
                  v19 = (st_ino * st_rdev) >> 20;
                  if ((v10 & 0x80000000) == 0 && v19 <= v10)
                    std::string::__assign_external(&v95, (const std::string::value_type *)*MEMORY[0x24BE05278]);
                  {
                    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
                  }
                  *(_QWORD *)&__p.st_dev = MEMORY[0x24BDAC760];
                  __p.st_ino = 0x40000000;
                  *(_QWORD *)&__p.st_uid = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
                  *(_QWORD *)&__p.st_rdev = &__block_descriptor_tmp_13_5;
                  __p.st_atimespec.tv_sec = (__darwin_time_t)&GetABMLogServer(void)::sLogServer;
                  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
                  {
                    v21 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
                    v93 = GetABMLogServer(void)::sLogServer;
                    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
                      goto LABEL_32;
                  }
                  else
                  {
                    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
                    v21 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
                    v93 = GetABMLogServer(void)::sLogServer;
                    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
                    {
LABEL_32:
                      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
                      do
                        v23 = __ldxr(p_shared_owners);
                      while (__stxr(v23 + 1, p_shared_owners));
                    }
                  }
                  v24 = *((_QWORD *)GetGlobalLogger((uint64_t *)&v93) + 4);
                  if (v21)
                  {
                    v25 = (unint64_t *)&v21->__shared_owners_;
                    do
                      v26 = __ldaxr(v25);
                    while (__stlxr(v26 - 1, v25));
                    if (!v26)
                    {
                      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                      std::__shared_weak_count::__release_weak(v21);
                    }
                  }
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
                  {
                    __p.st_dev = 136315394;
                    *(_QWORD *)&__p.st_mode = "trace.filter";
                    WORD2(__p.st_ino) = 2048;
                    *(__darwin_ino64_t *)((char *)&__p.st_ino + 6) = v19;
                    _os_log_impl(&dword_24B855000, v24, OS_LOG_TYPE_DEFAULT, "#I %s: Free disk space = %lu MB", (uint8_t *)&__p, 0x16u);
                  }
                }
LABEL_51:
                size = v95.__r_.__value_.__l.__size_;
                v27 = (void *)v95.__r_.__value_.__r.__words[0];
                v29 = v95.__r_.__value_.__r.__words[2];
LABEL_52:
                v90 = -1431655766;
                v32 = (const void *)*MEMORY[0x24BE05338];
                v33 = strlen((const char *)*MEMORY[0x24BE05338]);
                if (v33 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v34 = v33;
                if (v33 >= 0x17)
                {
                  v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v33 | 7) != 0x17)
                    v36 = v33 | 7;
                  v37 = v36 + 1;
                  v35 = (std::string *)operator new(v36 + 1);
                  __dst.__r_.__value_.__l.__size_ = v34;
                  __dst.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
                }
                else
                {
                  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v33;
                  v35 = &__dst;
                  if (!v33)
                  {
LABEL_60:
                    v35->__r_.__value_.__s.__data_[v34] = 0;
                    memset(&__p, 0, 24);
                    if (prop::logfilter::get((char *)&__dst, (uint64_t)&__p))
                    {
                      v6 = util::convert<int>((const std::string *)&__p, &v90, 0);
                      if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
                        goto LABEL_65;
                    }
                    else
                    {
                      v6 = 0;
                      if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
                        goto LABEL_65;
                    }
                    operator delete(*(void **)&__p.st_dev);
LABEL_65:
                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(__dst.__r_.__value_.__l.__data_);
                      if ((_DWORD)v6)
                      {
LABEL_67:
                        v38 = v90;
                        memset(&v89, 0, sizeof(v89));
                        if (v90 < 0)
                        {
                          v56 = 0;
                          v55 = 0;
                          v54 = 0;
                          v58 = HIBYTE(v29);
                          if (v29 < 0)
                            v58 = size;
                          if (v58)
                            goto LABEL_165;
                          goto LABEL_162;
                        }
                        memset(&__dst, 0, sizeof(__dst));
                        pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
                        v39 = off_2579B84D8;
                        if (!off_2579B84D8)
                        {
                          v40 = operator new(0x30uLL);
                          MEMORY[0x24BD294B4](v40, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x24BDBD590]);
                          v40[3] = 0;
                          v40[4] = 0;
                          *((_DWORD *)v40 + 10) = 0;
                          std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&__p, (uint64_t)v40);
                          v41 = *(_OWORD *)&__p.st_dev;
                          *(_QWORD *)&__p.st_dev = 0;
                          __p.st_ino = 0;
                          v42 = (std::__shared_weak_count *)*(&off_2579B84D8 + 1);
                          off_2579B84D8 = v41;
                          if (v42)
                          {
                            v43 = (unint64_t *)&v42->__shared_owners_;
                            do
                              v44 = __ldaxr(v43);
                            while (__stlxr(v44 - 1, v43));
                            if (!v44)
                            {
                              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                              std::__shared_weak_count::__release_weak(v42);
                            }
                          }
                          v45 = (std::__shared_weak_count *)__p.st_ino;
                          if (__p.st_ino)
                          {
                            v46 = (unint64_t *)(__p.st_ino + 8);
                            do
                              v47 = __ldaxr(v46);
                            while (__stlxr(v47 - 1, v46));
                            if (!v47)
                            {
                              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                              std::__shared_weak_count::__release_weak(v45);
                            }
                          }
                          v39 = off_2579B84D8;
                        }
                        v95.__r_.__value_.__r.__words[0] = v39;
                        v95.__r_.__value_.__l.__size_ = *(&off_2579B84D8 + 1);
                        if (*(&off_2579B84D8 + 1))
                        {
                          v48 = (unint64_t *)(*(&off_2579B84D8 + 1) + 8);
                          do
                            v49 = __ldxr(v48);
                          while (__stxr(v49 + 1, v48));
                        }
                        v88 = v38;
                        pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
                        v50 = (const void *)*MEMORY[0x24BDFC748];
                        v51 = strlen((const char *)*MEMORY[0x24BDFC748]);
                        if (v51 > 0x7FFFFFFFFFFFFFF7)
                          std::string::__throw_length_error[abi:ne180100]();
                        v52 = v51;
                        if (v51 >= 0x17)
                        {
                          v87 = v27;
                          v59 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v51 | 7) != 0x17)
                            v59 = v51 | 7;
                          v60 = v59 + 1;
                          p_p = (stat *)operator new(v59 + 1);
                          __p.st_ino = v52;
                          *(_QWORD *)&__p.st_uid = v60 | 0x8000000000000000;
                          *(_QWORD *)&__p.st_dev = p_p;
                          v27 = v87;
                        }
                        else
                        {
                          HIBYTE(__p.st_gid) = v51;
                          p_p = &__p;
                          if (!v51)
                          {
LABEL_100:
                            *((_BYTE *)&p_p->st_dev + v52) = 0;
                            v61 = (os_unfair_lock_s *)(v39 + 40);
                            os_unfair_lock_lock((os_unfair_lock_t)(v39 + 40));
                            if ((__p.st_gid & 0x80000000) == 0)
                              v62 = (const char *)&__p;
                            else
                              v62 = *(const char **)&__p.st_dev;
                            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v93, v62);
                            v63 = (const void *)(**(uint64_t (***)(std::string::size_type, _QWORD))v39)(v39, v93);
                            if (v63)
                            {
                              ctu::cf::assign();
                              CFRelease(v63);
                            }
                            MEMORY[0x24BD29478](&v93);
                            os_unfair_lock_unlock(v61);
                            if (SHIBYTE(__p.st_gid) < 0)
                              operator delete(*(void **)&__p.st_dev);
                            v64 = (std::__shared_weak_count *)v95.__r_.__value_.__l.__size_;
                            if (v95.__r_.__value_.__l.__size_)
                            {
                              v65 = (unint64_t *)(v95.__r_.__value_.__l.__size_ + 8);
                              do
                                v66 = __ldaxr(v65);
                              while (__stlxr(v66 - 1, v65));
                              if (!v66)
                              {
                                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                                std::__shared_weak_count::__release_weak(v64);
                              }
                            }
                            v67.tv_sec = 0xAAAAAAAAAAAAAAAALL;
                            v67.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
                            *(timespec *)&__p.st_blksize = v67;
                            *(timespec *)__p.st_qspare = v67;
                            __p.st_birthtimespec = v67;
                            *(timespec *)&__p.st_size = v67;
                            __p.st_mtimespec = v67;
                            __p.st_ctimespec = v67;
                            *(timespec *)&__p.st_uid = v67;
                            __p.st_atimespec = v67;
                            *(timespec *)&__p.st_dev = v67;
                            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v68 = &__dst;
                            else
                              v68 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                            if (stat((const char *)v68, &__p))
                            {
                              v69 = -1;
                              goto LABEL_142;
                            }
                            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                              std::string::__init_copy_ctor_external(&v95, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                            else
                              v95 = __dst;
                            v70 = (const void *)*MEMORY[0x24BDFC718];
                            v71 = strlen((const char *)*MEMORY[0x24BDFC718]);
                            if (v71 > 0x7FFFFFFFFFFFFFF7)
                              std::string::__throw_length_error[abi:ne180100]();
                            v72 = v71;
                            if (v71 >= 0x17)
                            {
                              v74 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v71 | 7) != 0x17)
                                v74 = v71 | 7;
                              v75 = v74 + 1;
                              v73 = (__int128 *)operator new(v74 + 1);
                              *((_QWORD *)&v93 + 1) = v72;
                              v94 = v75 | 0x8000000000000000;
                              *(_QWORD *)&v93 = v73;
                            }
                            else
                            {
                              HIBYTE(v94) = v71;
                              v73 = &v93;
                              if (!v71)
                              {
LABEL_128:
                                *((_BYTE *)v73 + v72) = 0;
                                NumberOfLogDumps = util::getNumberOfLogDumps((uint64_t)&v95, (const void **)&v93);
                                if (SHIBYTE(v94) < 0)
                                {
                                  operator delete((void *)v93);
                                  if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                  {
LABEL_130:
                                    if (NumberOfLogDumps >> 31)
                                      v69 = -1;
                                    else
                                      v69 = NumberOfLogDumps;
                                    if (v69 == -1)
                                      goto LABEL_142;
LABEL_140:
                                    if (v69 >= v88)
                                    {
                                      std::string::__assign_external(&v89, (const std::string::value_type *)*MEMORY[0x24BE05278]);
                                      v69 = NumberOfLogDumps;
                                    }
LABEL_142:
                                    if ((v77 & 1) == 0
                                    {
                                      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
                                    }
                                    *(_QWORD *)&__p.st_dev = MEMORY[0x24BDAC760];
                                    __p.st_ino = 0x40000000;
                                    *(_QWORD *)&__p.st_uid = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
                                    *(_QWORD *)&__p.st_rdev = &__block_descriptor_tmp_13_5;
                                    __p.st_atimespec.tv_sec = (__darwin_time_t)&GetABMLogServer(void)::sLogServer;
                                    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
                                    {
                                      v78 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer
                                                                        + 1);
                                      v92 = GetABMLogServer(void)::sLogServer;
                                      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
                                        goto LABEL_147;
                                    }
                                    else
                                    {
                                      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
                                      v78 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer
                                                                        + 1);
                                      v92 = GetABMLogServer(void)::sLogServer;
                                      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
                                        goto LABEL_147;
                                    }
                                    v79 = (unint64_t *)&v78->__shared_owners_;
                                    do
                                      v80 = __ldxr(v79);
                                    while (__stxr(v80 + 1, v79));
LABEL_147:
                                    v81 = *((_QWORD *)GetGlobalLogger((uint64_t *)&v92) + 4);
                                    if (v78)
                                    {
                                      v82 = (unint64_t *)&v78->__shared_owners_;
                                      do
                                        v83 = __ldaxr(v82);
                                      while (__stlxr(v83 - 1, v82));
                                      if (!v83)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                                        std::__shared_weak_count::__release_weak(v78);
                                      }
                                    }
                                    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
                                    {
                                      __p.st_dev = 136315650;
                                      *(_QWORD *)&__p.st_mode = "trace.filter";
                                      WORD2(__p.st_ino) = 1024;
                                      *(_DWORD *)((char *)&__p.st_ino + 6) = v69;
                                      HIWORD(__p.st_uid) = 1024;
                                      __p.st_gid = v88;
                                      _os_log_impl(&dword_24B855000, v81, OS_LOG_TYPE_DEFAULT, "#I %s: log dump count = %d, max log limit = %d", (uint8_t *)&__p, 0x18u);
                                    }
                                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                    {
                                      operator delete(__dst.__r_.__value_.__l.__data_);
                                      v55 = v89.__r_.__value_.__l.__size_;
                                      v54 = (void *)v89.__r_.__value_.__r.__words[0];
                                      v56 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
                                      v85 = HIBYTE(v29);
                                      if (v29 < 0)
                                        v85 = size;
                                      if (v85)
                                        goto LABEL_165;
                                    }
                                    else
                                    {
                                      v55 = v89.__r_.__value_.__l.__size_;
                                      v54 = (void *)v89.__r_.__value_.__r.__words[0];
                                      v56 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
                                      v84 = HIBYTE(v29);
                                      if (v29 < 0)
                                        v84 = size;
                                      if (v84)
                                        goto LABEL_165;
                                    }
LABEL_162:
                                    if ((v56 & 0x80u) == 0)
                                      v55 = v56;
                                    if (!v55)
                                    {
LABEL_166:
                                      if ((v56 & 0x80) != 0)
                                      {
                                        operator delete(v54);
                                        if ((v29 & 0x8000000000000000) == 0)
                                          return v6;
                                      }
                                      else if ((v29 & 0x8000000000000000) == 0)
                                      {
                                        return v6;
                                      }
                                      operator delete(v27);
                                      return v6;
                                    }
LABEL_165:
                                    std::string::__assign_external(a1, (const std::string::value_type *)*MEMORY[0x24BE05278]);
                                    goto LABEL_166;
                                  }
                                }
                                else if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                {
                                  goto LABEL_130;
                                }
                                operator delete(v95.__r_.__value_.__l.__data_);
                                if (NumberOfLogDumps >> 31)
                                  v69 = -1;
                                else
                                  v69 = NumberOfLogDumps;
                                if (v69 == -1)
                                  goto LABEL_142;
                                goto LABEL_140;
                              }
                            }
                            memmove(v73, v70, v72);
                            goto LABEL_128;
                          }
                        }
                        memmove(p_p, v50, v52);
                        goto LABEL_100;
                      }
                    }
                    else if ((_DWORD)v6)
                    {
                      goto LABEL_67;
                    }
                    v54 = 0;
                    v55 = 0;
                    v56 = 0;
                    v57 = HIBYTE(v29);
                    if (v29 < 0)
                      v57 = size;
                    if (v57)
                      goto LABEL_165;
                    goto LABEL_162;
                  }
                }
                memmove(v35, v32, v34);
                goto LABEL_60;
              }
LABEL_24:
              operator delete(__dst.__r_.__value_.__l.__data_);
              goto LABEL_25;
            }
LABEL_47:
            if (!__dst.__r_.__value_.__l.__size_)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              goto LABEL_51;
            }
            memset(&__p, 0, 64);
            v16 = statvfs(__dst.__r_.__value_.__l.__data_, (statvfs *)&__p);
            st_ino = __p.st_ino;
            st_rdev = __p.st_rdev;
            if ((v15 & 0x80000000) == 0)
              goto LABEL_25;
            goto LABEL_24;
          }
        }
        else if (v9)
        {
          goto LABEL_18;
        }
        v27 = 0;
        size = 0;
        v29 = 0;
        goto LABEL_52;
      }
    }
    memmove(p_dst, v2, v4);
    goto LABEL_11;
  }
  return 1;
}

void sub_24B8B6D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;
  uint64_t v45;

  if (a38 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (v45 < 0)
    operator delete(v44);
  _Unwind_Resume(exception_object);
}

_QWORD *PowerManager::PowerManager(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  *a1 = off_251CBBBF8;
  v3 = a1 + 1;
  v4 = (std::__shared_weak_count *)a2[1];
  v8 = *a2;
  v9 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  PowerManager::State::create(&v8, v3);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  PowerManager::State::init((PowerManager::State *)*v3);
  return a1;
}

{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  *a1 = off_251CBBBF8;
  v3 = a1 + 1;
  v4 = (std::__shared_weak_count *)a2[1];
  v8 = *a2;
  v9 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  PowerManager::State::create(&v8, v3);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  PowerManager::State::init((PowerManager::State *)*v3);
  return a1;
}

void sub_24B8B6F48(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_24B8B6F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(exception_object);
}

void PowerManager::State::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v4 = operator new(0x120uLL);
  v5 = (uint64_t)v4;
  v6 = (std::__shared_weak_count *)a1[1];
  v9 = *a1;
  v10 = v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  PowerManager::State::State((uint64_t)v4, &v9);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<PowerManager::State>::shared_ptr[abi:ne180100]<PowerManager::State,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1},void>(a2, v5);
  ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
}

void sub_24B8B7014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v10);
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(a1);
}

void PowerManager::State::init(PowerManager::State *this)
{
  std::__shared_weak_count *v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD *v18;
  _QWORD block[6];

  v5 = *((_QWORD *)this + 9);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v4 = (char *)this + 72;
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = MEMORY[0x24BDAC760];
  v16[0] = MEMORY[0x24BDAC760];
  v16[1] = 1174405120;
  v16[2] = ___ZN12PowerManager5State4initEv_block_invoke;
  v16[3] = &__block_descriptor_tmp_11_1;
  v16[4] = this;
  v16[5] = v5;
  v17 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v18 = v16;
  block[0] = v12;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_12;
  block[4] = v4;
  block[5] = &v18;
  v14 = *((_QWORD *)this + 11);
  if (!*((_QWORD *)this + 12))
  {
    dispatch_sync(v14, block);
    v15 = v17;
    if (!v17)
      goto LABEL_14;
    goto LABEL_13;
  }
  dispatch_async_and_wait(v14, block);
  v15 = v17;
  if (v17)
LABEL_13:
    std::__shared_weak_count::__release_weak(v15);
LABEL_14:
  std::__shared_weak_count::__release_weak(v7);
}

void sub_24B8B720C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v12 = *(std::__shared_weak_count **)(v10 + 16);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Unwind_Resume(exception_object);
}

void PowerManager::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v4 = operator new(0x18uLL);
  v5 = v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    *v4 = off_251CBBBF8;
    v12 = v6;
    v13 = v7;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  else
  {
    *v4 = off_251CBBBF8;
    v12 = v6;
    v13 = 0;
  }
  PowerManager::State::create(&v12, v4 + 1);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  PowerManager::State::init((PowerManager::State *)v5[1]);
  *a2 = v5;
  v11 = operator new(0x20uLL);
  *v11 = off_251CBC170;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v5;
  a2[1] = v11;
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void sub_24B8B733C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  _Unwind_Resume(a1);
}

void PowerManager::registerForPowerEvents(uint64_t a1, const void **a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  void *aBlock;

  v2 = *(_QWORD *)(a1 + 8);
  if (*a2)
    v3 = _Block_copy(*a2);
  else
    v3 = 0;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 1174405120;
  v5[2] = ___ZN12PowerManager5State22registerForPowerEventsEN8dispatch5blockIU13block_pointerFv10PowerStateNS1_13group_sessionEEEE_block_invoke;
  v5[3] = &__block_descriptor_tmp_17;
  v5[4] = v2;
  if (v3)
    v4 = _Block_copy(v3);
  else
    v4 = 0;
  aBlock = v4;
  ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v5);
  if (aBlock)
    _Block_release(aBlock);
  if (v3)
    _Block_release(v3);
}

void PowerManager::createPowerAssertion(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject **a4@<X8>)
{
  _QWORD *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  std::string *v13;
  dispatch_group_t v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  std::string v20;
  _QWORD *v21;
  std::string __p;
  uint64_t v23;
  dispatch_group_t group;

  v6 = *(_QWORD **)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v20 = *(std::string *)a2;
  v7 = dispatch_group_create();
  *a4 = v7;
  v21 = v6;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  else
    __p = v20;
  v23 = a3;
  group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    if (group)
      dispatch_group_enter(group);
  }
  v8 = (std::__shared_weak_count *)v6[10];
  if (!v8 || (v9 = v6[9], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = operator new(0x30uLL);
  *v12 = v21;
  v13 = (std::string *)(v12 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v12[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v14 = group;
  v12[4] = v23;
  v12[5] = v14;
  group = 0;
  v15 = v6[11];
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = operator new(0x18uLL);
  *v18 = v12;
  v18[1] = v9;
  v18[2] = v11;
  dispatch_async_f(v15, v18, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>(PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1},std::default_delete<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete(v20.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_28;
}

void sub_24B8B7678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  NSObject *v14;

  if (v14)
  {
    dispatch_release(v14);
    if ((a14 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PowerManager::releasePowerAssertion(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  std::string *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  std::string v14;
  _QWORD *v15;
  std::string __p;

  v2 = *(_QWORD **)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v15 = v2;
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_5:
    std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    goto LABEL_6;
  }
  v14 = *(std::string *)a2;
  v15 = v2;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
LABEL_3:
  __p = v14;
LABEL_6:
  v3 = (std::__shared_weak_count *)v2[10];
  if (!v3 || (v4 = v2[9], (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  v7 = operator new(0x20uLL);
  *v7 = v15;
  v8 = (std::string *)(v7 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v7[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v9 = v2[11];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v7;
  v12[1] = v4;
  v12[2] = v6;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>(PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_21:
      operator delete(v14.__r_.__value_.__l.__data_);
      return;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_21;
}

void sub_24B8B7864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PowerManager::initialize(PowerManager *this)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *((_QWORD *)this + 1);
  v2[0] = MEMORY[0x24BDAC760];
  v2[1] = 0x40000000;
  v2[2] = ___ZN12PowerManager5State10initializeEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_33_0;
  v2[4] = v1;
  ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
}

void PowerManager::shutdown(PowerManager *this)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *((_QWORD *)this + 1);
  v2[0] = MEMORY[0x24BDAC760];
  v2[1] = 0x40000000;
  v2[2] = ___ZN12PowerManager5State8shutdownEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_34_0;
  v2[4] = v1;
  ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
}

void PowerManager::~PowerManager(PowerManager *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = off_251CBBBF8;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_251CBBBF8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(this);
  }
  else
  {
LABEL_5:
    operator delete(this);
  }
}

void ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_24B8B7B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_24B8B7B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<PowerManager::State>::shared_ptr[abi:ne180100]<PowerManager::State,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_251CBBC68;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_24B8B7C54(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1}::operator() const(PowerManager::State*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_24B8B7C74(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<PowerManager::State *,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State *)#1},std::allocator<PowerManager::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<PowerManager::State *,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State *)#1},std::allocator<PowerManager::State>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1}::operator() const(PowerManager::State*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<PowerManager::State *,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State *)#1},std::allocator<PowerManager::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shar"
                                "ed_ptrIT_EEPS7_EUlPS2_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1}::operator() const(PowerManager::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t PowerManager::State::State(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *initially_inactive;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  PowerStats *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _BYTE v20[16];
  _QWORD block[5];
  _BYTE v22[16];

  *(_QWORD *)a1 = off_251CBBCB8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v20, "com.apple.telephony.abm", "power.mgr");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_5;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v6 = GetABMLogServer(void)::sLogServer;
    v5 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (*(_QWORD *)algn_2579B8AE8)
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v6 = GetABMLogServer(void)::sLogServer;
    v5 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (*(_QWORD *)algn_2579B8AE8)
    {
LABEL_4:
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v10 = dispatch_queue_create_with_target_V2("power.mgr", initially_inactive, 0);
  dispatch_set_qos_class_floor(v10, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v10);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v10;
  if (v10)
  {
    dispatch_retain(v10);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v10);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_251CBBDC8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 8) = &unk_251CB85F0;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v5;
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)a1 = off_251CBBD88;
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)a1 = off_251CBBD88;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  *(_QWORD *)a1 = off_251CBBCB8;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0x200000001;
  *(_DWORD *)(a1 + 128) = -536870144;
  v14 = (PowerStats *)operator new(0x88uLL);
  PowerStats::PowerStats(v14);
  *(_QWORD *)(a1 + 136) = v14;
  v15 = operator new(0x20uLL);
  *v15 = off_251CBD230;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = v14;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 144) = v15;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 256;
  *(_QWORD *)(a1 + 272) = *a2;
  v16 = a2[1];
  *(_QWORD *)(a1 + 280) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 16);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  ctu::LoggerCommonBase::setLogLevel();
  return a1;
}

void sub_24B8B8074(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void **v6;
  std::__shared_weak_count *v8;
  const void *v9;

  v8 = *(std::__shared_weak_count **)(v1 + 280);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v1 + 256));
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*(_QWORD *)(v1 + 232));
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*(_QWORD *)(v1 + 208));
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v4);
  v9 = *(const void **)(v1 + 160);
  if (v9)
    _Block_release(v9);
  if (*v6)
    _Block_release(*v6);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v2);
  ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable((_QWORD *)v1);
  _Unwind_Resume(a1);
}

void sub_24B8B80EC()
{
  PowerStats *v0;

  PowerStats::~PowerStats(v0);
}

void sub_24B8B80F8()
{
  _QWORD *v0;
  _Unwind_Exception *v1;
  uint64_t v2;
  void *v3;

  operator delete(v3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v2);
  ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v0);
  _Unwind_Resume(v1);
}

void sub_24B8B8120(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v2);
  ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void sub_24B8B813C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBBDC8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBBDC8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void PowerManager::State::~State(PowerManager::State *this)
{
  void *v1;

  PowerManager::State::~State(this);
  operator delete(v1);
}

{
  uint64_t v2;
  const void *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const void *v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  NSObject *v21;
  std::__shared_weak_count *v22;
  uint8_t v23[16];

  *(_QWORD *)this = off_251CBBCB8;
  v2 = *((_QWORD *)this + 20);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v2, 1);
    v3 = (const void *)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    if (v3)
      _Block_release(v3);
  }
  v4 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I Gone!", v23, 2u);
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*((char **)this + 32));
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*((_QWORD *)this + 29));
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*((_QWORD *)this + 26));
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v9)
    goto LABEL_17;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_17:
    v12 = (const void *)*((_QWORD *)this + 20);
    if (!v12)
      goto LABEL_19;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  v12 = (const void *)*((_QWORD *)this + 20);
  if (v12)
LABEL_18:
    _Block_release(v12);
LABEL_19:
  v13 = (const void *)*((_QWORD *)this + 19);
  if (v13)
    _Block_release(v13);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *(_QWORD *)this = off_251CBBDC8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v20 = *((_QWORD *)this + 12);
  if (v20)
    dispatch_release(v20);
  v21 = *((_QWORD *)this + 11);
  if (v21)
    dispatch_release(v21);
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
}

uint64_t ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "power.mgr");
}

uint64_t ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBBDC8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

_QWORD *ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBBDC8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBBDC8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(char *a1)
{
  NSObject *v2;
  NSObject *v3;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = *((_QWORD *)a1 + 7);
    if (v2)
    {
      dispatch_group_leave(v2);
      v3 = *((_QWORD *)a1 + 7);
      if (v3)
        dispatch_release(v3);
    }
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*(_QWORD *)(a1 + 8));
    v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_7;
    }
    else
    {
LABEL_6:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_7:
        operator delete((void *)a1);
        return;
      }
    }
    operator delete(*(void **)(a1 + 32));
    operator delete((void *)a1);
  }
}

void ___ZN12PowerManager5State4initEv_block_invoke(uint64_t a1)
{
  __int128 v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15;
  void *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  NSObject *v31;
  unint64_t *v32;
  unint64_t v33;
  const void *v34;
  __int128 v35;
  uint8_t v36[16];
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD *, int);
  void *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  void *v45;
  void *v46;
  std::string __p;
  uint8_t buf[16];
  _QWORD aBlock[4];
  __int128 v50;
  std::__shared_weak_count *v51;
  __int128 v52;
  __int128 v53;
  std::string v54;

  v54.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53 = v2;
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v2;
  v52 = v2;
  v3 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12PowerManager5State4initEv_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_9;
  v35 = *(_OWORD *)(a1 + 32);
  v50 = v35;
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  v51 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  v7 = _Block_copy(aBlock);
  v8 = *(NSObject **)(v35 + 88);
  *(_QWORD *)&v52 = 1;
  *((_QWORD *)&v52 + 1) = v8;
  if (v8)
    dispatch_retain(v8);
  if (v7)
  {
    v53 = (unint64_t)_Block_copy(v7);
    v54.__r_.__value_.__r.__words[0] = 5063233;
    *((_BYTE *)&v54.__r_.__value_.__s + 23) = 3;
    _Block_release(v7);
  }
  else
  {
    v53 = 0uLL;
    v54.__r_.__value_.__r.__words[0] = 5063233;
    *((_BYTE *)&v54.__r_.__value_.__s + 23) = 3;
  }
  ctu::power::manager::get((ctu::power::manager *)v8);
  v9 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v10 = *(std::__shared_weak_count **)(v35 + 176);
  *(_OWORD *)(v35 + 168) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (*(_QWORD *)&buf[8])
  {
    v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 16))(*(_QWORD *)&buf[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  v44 = v52;
  if (*((_QWORD *)&v52 + 1))
    dispatch_retain(*((dispatch_object_t *)&v52 + 1));
  v15 = (void *)v53;
  if ((_QWORD)v53)
    v15 = _Block_copy((const void *)v53);
  v45 = v15;
  v16 = (void *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
    v16 = _Block_copy(*((const void **)&v53 + 1));
  v46 = v16;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
  else
    __p = v54;
  ctu::power::manager::registerListener();
  v17 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v18 = *(std::__shared_weak_count **)(v35 + 192);
  *(_OWORD *)(v35 + 184) = v17;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_37;
  v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_37:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_38;
LABEL_41:
    operator delete(__p.__r_.__value_.__l.__data_);
    v24 = v46;
    if (!v46)
      goto LABEL_43;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_41;
LABEL_38:
  v24 = v46;
  if (v46)
LABEL_42:
    _Block_release(v24);
LABEL_43:
  if (v45)
    _Block_release(v45);
  if (*((_QWORD *)&v44 + 1))
    dispatch_release(*((dispatch_object_t *)&v44 + 1));
  v25 = *(NSObject **)(v35 + 40);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v25, OS_LOG_TYPE_DEFAULT, "#I Registered power listener", buf, 2u);
  }
  memset(buf, 170, sizeof(buf));
  abm::AWDHelperGetConnection(buf);
  if (*(_QWORD *)buf)
  {
    v37 = v3;
    v38 = 1174405120;
    v39 = ___ZN12PowerManager5State4initEv_block_invoke_5;
    v40 = &__block_descriptor_tmp_10_0;
    v27 = *(_QWORD *)(a1 + 40);
    v26 = *(std::__shared_weak_count **)(a1 + 48);
    v41 = v35;
    v42 = v27;
    v43 = v26;
    if (v26)
    {
      v28 = (unint64_t *)&v26->__shared_weak_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    wis::WISServerConnection::RegisterQueriableMetricCallbackForIdentifier();
    if (v43)
    {
      std::__shared_weak_count::__release_weak(v43);
      v30 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_62;
      goto LABEL_58;
    }
  }
  else
  {
    v31 = *(NSObject **)(v35 + 40);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v36 = 0;
      _os_log_error_impl(&dword_24B855000, v31, OS_LOG_TYPE_ERROR, "AWD connection setup failed", v36, 2u);
      v30 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_62;
      goto LABEL_58;
    }
  }
  v30 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_62;
LABEL_58:
  v32 = (unint64_t *)&v30->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_62:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v54.__r_.__value_.__l.__data_);
    v34 = (const void *)*((_QWORD *)&v53 + 1);
    if (!*((_QWORD *)&v53 + 1))
      goto LABEL_67;
    goto LABEL_66;
  }
  v34 = (const void *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
LABEL_66:
    _Block_release(v34);
LABEL_67:
  if ((_QWORD)v53)
    _Block_release((const void *)v53);
  if (*((_QWORD *)&v52 + 1))
    dispatch_release(*((dispatch_object_t *)&v52 + 1));
  if (v51)
    std::__shared_weak_count::__release_weak(v51);
}

void sub_24B8B8AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, char a20,dispatch_object_t object,void *a22,void *aBlock,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  uint64_t v36;
  std::__shared_weak_count *v38;

  if (aBlock)
    _Block_release(aBlock);
  if (a22)
    _Block_release(a22);
  if (object)
  {
    dispatch_release(object);
    ctu::power::manager::parameters::~parameters((void **)(v36 - 128));
    v38 = a36;
    if (!a36)
LABEL_7:
      _Unwind_Resume(a1);
  }
  else
  {
    ctu::power::manager::parameters::~parameters((void **)(v36 - 128));
    v38 = a36;
    if (!a36)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v38);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State4initEv_block_invoke_2(_QWORD *a1, ctu::power::manager *a2, const void **a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v8;
  void (**v9)(void *, uint64_t);
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  BOOL v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_weak_owners;
  unint64_t v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  void *v51;
  const void *v52;
  int v53;
  _QWORD block[5];
  dispatch_object_t object;
  void *aBlock;
  uint64_t v57;
  std::__shared_weak_count *v58;
  int v59;
  unint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  _BYTE buf[12];
  __int16 v65;
  _BYTE v66[24];
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  const char *v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v5 = a1[4];
  v6 = (std::__shared_weak_count *)a1[6];
  if (!v6)
  {
    v8 = 0;
    goto LABEL_7;
  }
  v8 = std::__shared_weak_count::lock(v6);
  if (!v8 || !a1[5])
  {
LABEL_7:
    (*((void (**)(void))*a3 + 2))();
    if (!v8)
      return;
    goto LABEL_96;
  }
  if (*a3)
    v9 = (void (**)(void *, uint64_t))_Block_copy(*a3);
  else
    v9 = 0;
  v10 = *(_DWORD *)(v5 + 120);
  v11 = *(_QWORD *)(v5 + 124);
  v53 = v11;
  HIDWORD(v12) = (_DWORD)a2;
  LODWORD(v12) = (_DWORD)a2 + 536870288;
  switch((v12 >> 4))
  {
    case 0u:
      if (v10 != 1)
        goto LABEL_34;
      v13 = 0;
      v14 = 1;
      if (*(_QWORD *)(v5 + 216))
        goto LABEL_31;
      goto LABEL_49;
    case 1u:
      if (v10 != 1)
        goto LABEL_34;
      v14 = 0;
      v13 = v11 != 0;
      if (!*(_QWORD *)(v5 + 216))
        goto LABEL_49;
      goto LABEL_31;
    case 2u:
      if (!(_DWORD)v11)
        goto LABEL_24;
      goto LABEL_34;
    case 9u:
      if (v10)
        v15 = 0;
      else
        v15 = (_DWORD)v11 == 2;
      if (!v15)
        goto LABEL_34;
LABEL_24:
      v13 = 2;
      v14 = 1;
      if (!*(_QWORD *)(v5 + 216))
        goto LABEL_49;
      goto LABEL_31;
    case 0xBu:
      if (v10)
        v16 = 1;
      else
        v16 = (_DWORD)v11 == 2;
      if (v16)
        goto LABEL_34;
      v14 = 0;
      v13 = 2;
      if (!*(_QWORD *)(v5 + 216))
        goto LABEL_49;
LABEL_31:
      if ((_DWORD)a2 == -536870288)
        goto LABEL_34;
      if ((_DWORD)a2 != -536870272)
      {
LABEL_49:
        *(_DWORD *)(v5 + 120) = v14;
        *(_DWORD *)(v5 + 124) = v13;
        *(_DWORD *)(v5 + 128) = (_DWORD)a2;
        v26 = *(_QWORD *)(v5 + 136);
        v61 = (int)a2;
        v62 = v10;
        v63 = v11;
        v60 = __PAIR64__(v13, v14);
        PowerStats::reportSystemStateChange(v26, (uint64_t)&v62, (uint64_t *)&v60);
        v27 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          v28 = ctu::power::manager::asCString(a2);
          v29 = "Unknown";
          v30 = "PoweredOn";
          v31 = *(_DWORD *)(v5 + 120);
          v32 = *(int *)(v5 + 124);
          if (v31 != 1)
            v30 = "Unknown";
          if (!v31)
            v30 = "LowPower";
          if (v32 <= 2)
            v29 = off_251CBC1B0[v32];
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v28;
          v65 = 2080;
          *(_QWORD *)v66 = v30;
          *(_WORD *)&v66[8] = 2080;
          *(_QWORD *)&v66[10] = v29;
          _os_log_impl(&dword_24B855000, v27, OS_LOG_TYPE_DEFAULT, "#I Power notification: %s, Power state: %s, Sleep state: %s", buf, 0x20u);
        }
        v33 = *(_DWORD *)(v5 + 128);
        switch(v33)
        {
          case -536870144:
            goto LABEL_60;
          case -536870256:
            v9[2](v9, 1);
            v46 = *(_QWORD *)(v5 + 264);
            if (v46)
            {
              v47 = *(NSObject **)(v5 + 40);
              if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 134217984;
                *(_QWORD *)&buf[4] = v46;
                _os_log_impl(&dword_24B855000, v47, OS_LOG_TYPE_DEFAULT, "#I Allowing deferred work to run (after WillNotSleep); count=%zd",
                  buf,
                  0xCu);
              }
              std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v5 + 256));
              *(_QWORD *)(v5 + 256) = 0;
              *(_QWORD *)(v5 + 264) = 0;
              *(_QWORD *)(v5 + 248) = v5 + 256;
            }
            break;
          case -536870272:
LABEL_60:
            v34 = *(unsigned int *)(v5 + 120);
            v35 = dispatch_group_create();
            v36 = *(_QWORD *)(v5 + 152);
            if (v36)
            {
              if (v35)
              {
                dispatch_retain(v35);
                dispatch_group_enter(v35);
                v36 = *(_QWORD *)(v5 + 152);
              }
              *(_QWORD *)buf = v35;
              (*(void (**)(uint64_t, uint64_t, _BYTE *))(v36 + 16))(v36, v34, buf);
              if (*(_QWORD *)buf)
              {
                dispatch_group_leave(*(dispatch_group_t *)buf);
                if (*(_QWORD *)buf)
                  dispatch_release(*(dispatch_object_t *)buf);
              }
            }
            v37 = *(std::__shared_weak_count **)(v5 + 80);
            if (!v37 || (v38 = *(_QWORD *)(v5 + 72), (v39 = std::__shared_weak_count::lock(v37)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v40 = v39;
            p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
            do
              v42 = __ldxr(p_shared_weak_owners);
            while (__stxr(v42 + 1, p_shared_weak_owners));
            p_shared_owners = (unint64_t *)&v39->__shared_owners_;
            do
              v44 = __ldaxr(p_shared_owners);
            while (__stlxr(v44 - 1, p_shared_owners));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v40);
            }
            block[0] = MEMORY[0x24BDAC760];
            block[1] = 1174405120;
            block[2] = ___ZN12PowerManager5State28handlePowerNotification_syncEN8dispatch5blockIU13block_pointerFvbEEEj_block_invoke;
            block[3] = &__block_descriptor_tmp_15_0;
            block[4] = v5;
            object = v35;
            if (v35)
              dispatch_retain(v35);
            if (v9)
              v45 = _Block_copy(v9);
            else
              v45 = 0;
            aBlock = v45;
            v57 = v38;
            v58 = v40;
            do
              v48 = __ldxr(p_shared_weak_owners);
            while (__stxr(v48 + 1, p_shared_weak_owners));
            v59 = v34;
            dispatch_group_notify(v35, *(dispatch_queue_t *)(v5 + 88), block);
            if (v58)
              std::__shared_weak_count::__release_weak(v58);
            if (aBlock)
              _Block_release(aBlock);
            if (object)
              dispatch_release(object);
            std::__shared_weak_count::__release_weak(v40);
            if (v35)
              dispatch_release(v35);
LABEL_94:
            if (!v9)
              goto LABEL_96;
            break;
          default:
            v9[2](v9, 1);
            break;
        }
LABEL_95:
        _Block_release(v9);
        goto LABEL_96;
      }
      if (*(_QWORD *)(v5 + 264))
      {
LABEL_34:
        v9[2](v9, 0);
        v17 = 0;
        v18 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          goto LABEL_42;
        goto LABEL_35;
      }
      if (v9)
        v51 = _Block_copy(v9);
      else
        v51 = 0;
      v52 = *(const void **)(v5 + 160);
      *(_QWORD *)(v5 + 160) = v51;
      if (v52)
        _Block_release(v52);
      v17 = 1;
      v18 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
LABEL_35:
        v19 = ctu::power::manager::asCString(a2);
        v20 = *(_QWORD *)(v5 + 216);
        v21 = "Unknown";
        v22 = *(_QWORD *)(v5 + 264);
        if (v10 == 1)
          v21 = "PoweredOn";
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = v19;
        v65 = 1024;
        if (!v10)
          v21 = "LowPower";
        *(_DWORD *)v66 = v53;
        v23 = "false";
        *(_WORD *)&v66[4] = 2080;
        *(_QWORD *)&v66[6] = v21;
        *(_WORD *)&v66[14] = 2048;
        if (v17)
          v23 = "true";
        *(_QWORD *)&v66[16] = v20;
        v67 = 2048;
        v68 = v22;
        v69 = 2080;
        v70 = v23;
        _os_log_impl(&dword_24B855000, v18, OS_LOG_TYPE_DEFAULT, "#I Cannot accept notification: %s, SleepState: %u, PowerState: %s, Assertions: %lu, Assertions-deferred: %lu, Deferred-ack: %s", buf, 0x3Au);
      }
LABEL_42:
      if ((_DWORD)a2 != -536870144 && (_DWORD)a2 != -536870256)
        goto LABEL_94;
      v24 = *(_QWORD *)(v5 + 264);
      if (!v24)
        goto LABEL_94;
      v25 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v24;
        _os_log_impl(&dword_24B855000, v25, OS_LOG_TYPE_DEFAULT, "#I Allowing deferred work to run (skipping power event); count=%zd",
          buf,
          0xCu);
      }
      std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v5 + 256));
      *(_QWORD *)(v5 + 256) = 0;
      *(_QWORD *)(v5 + 264) = 0;
      *(_QWORD *)(v5 + 248) = v5 + 256;
      if (v9)
        goto LABEL_95;
LABEL_96:
      v49 = (unint64_t *)&v8->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      goto LABEL_34;
  }
}

void sub_24B8B9260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,dispatch_group_t group)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN12PowerManager5State4initEv_block_invoke_5(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  int v11;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v10[0] = MEMORY[0x24BDAC760];
        v10[1] = 0x40000000;
        v10[2] = ___ZN12PowerManager5State4initEv_block_invoke_2_6;
        v10[3] = &__block_descriptor_tmp_8_1;
        v10[4] = v5;
        v11 = a2;
        ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v5 + 72), (uint64_t)v10);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN12PowerManager5State4initEv_block_invoke_2_6(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40) == 524466)
    PowerStats::submitLowPowerStatsMetric_sync(*(os_log_t **)(*(_QWORD *)(a1 + 32) + 136));
}

void ___ZN12PowerManager5State28handlePowerNotification_syncEN8dispatch5blockIU13block_pointerFvbEEEj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 56))
      {
        if (*(_DWORD *)(a1 + 72) == 1)
        {
          v6 = *(_QWORD *)(v2 + 264);
          if (v6)
          {
            v7 = *(NSObject **)(v2 + 40);
            if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
            {
              v10 = 134217984;
              v11 = v6;
              _os_log_impl(&dword_24B855000, v7, OS_LOG_TYPE_DEFAULT, "#I Allowing deferred work to run; count=%zd",
                (uint8_t *)&v10,
                0xCu);
            }
            std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v2 + 256));
            *(_QWORD *)(v2 + 256) = 0;
            *(_QWORD *)(v2 + 264) = 0;
            *(_QWORD *)(v2 + 248) = v2 + 256;
          }
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void *__copy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE56c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  void *result;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
    dispatch_retain(v4);
  result = (void *)a2[6];
  if (result)
    result = _Block_copy(result);
  v7 = a2[7];
  v6 = a2[8];
  a1[6] = result;
  a1[7] = v7;
  a1[8] = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE56c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  const void *v3;
  NSObject *v4;

  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (const void *)a1[6];
  if (v3)
    _Block_release(v3);
  v4 = a1[5];
  if (v4)
    dispatch_release(v4);
}

void ctu::power::manager::parameters::~parameters(void **this)
{
  const void *v2;
  const void *v3;
  NSObject *v4;

  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    v2 = this[3];
    if (!v2)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = this[3];
  if (v2)
LABEL_5:
    _Block_release(v2);
LABEL_6:
  v3 = this[2];
  if (v3)
    _Block_release(v3);
  v4 = this[1];
  if (v4)
    dispatch_release(v4);
}

void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_251CBBF00;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN12PowerManager5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN12PowerManager5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN12PowerManager5State22registerForPowerEventsEN8dispatch5blockIU13block_pointerFv10PowerStateNS1_13group_sessionEEEE_block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(void **)(a1 + 40);
  if (v1)
    v1 = _Block_copy(v1);
  v3 = *(const void **)(v2 + 152);
  *(_QWORD *)(v2 + 152) = v1;
  if (v3)
    _Block_release(v3);
}

void *__copy_helper_block_e8_40c73_ZTSN8dispatch5blockIU13block_pointerFv10PowerStateNS_13group_sessionEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c73_ZTSN8dispatch5blockIU13block_pointerFv10PowerStateNS_13group_sessionEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

void dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>(PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1},std::default_delete<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t **v24;
  size_t v25;
  size_t v26;
  const void *v27;
  const void *v28;
  size_t v29;
  uint64_t **v30;
  uint64_t **v31;
  int v32;
  uint64_t *v33;
  size_t v34;
  size_t v35;
  int v36;
  uint64_t **v37;
  int v38;
  uint64_t *v39;
  size_t v40;
  size_t v41;
  int v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t *v52;
  uint64_t **v53;
  uint64_t *v54;
  char v55;
  uint64_t *v56;
  int v57;
  uint64_t *v58;
  size_t v59;
  const void *v60;
  size_t v61;
  size_t v62;
  int v63;
  _QWORD *v64;
  uint64_t **v65;
  int v66;
  const void *v67;
  size_t v68;
  size_t v69;
  int v70;
  int v71;
  char v72;
  uint64_t *v73;
  std::string *v74;
  __int128 v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  NSObject *v82;
  _BOOL4 v83;
  std::string::size_type v84;
  std::string::size_type v85;
  uint64_t v86;
  std::string::size_type v87;
  std::string::size_type v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  const void *v92;
  NSObject *v93;
  __int128 v94;
  __int128 v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  __int128 v105;
  NSObject *v106;
  uint64_t *v107;
  std::string *p_buf;
  std::string::size_type size;
  uint64_t **v110;
  uint64_t **v111;
  _QWORD *v112;
  const void *v113;
  const void *v114;
  int v115;
  const void *v116;
  size_t v117;
  size_t v118;
  int v119;
  int v120;
  uint64_t *v121;
  std::string *v122;
  uint64_t v123;
  uint64_t *v124;
  void *v125;
  uint64_t **v126;
  uint64_t *v127;
  size_t v128;
  const void *v129;
  size_t v130;
  const void *v131;
  size_t v132;
  uint64_t **v133;
  uint64_t **v134;
  int v135;
  uint64_t *v136;
  size_t v137;
  size_t v138;
  int v139;
  uint64_t **v140;
  int v141;
  uint64_t *v142;
  size_t v143;
  size_t v144;
  int v145;
  uint64_t *v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t **v152;
  uint64_t *v153;
  char v154;
  uint64_t *v155;
  int v156;
  uint64_t *v157;
  size_t v158;
  const void *v159;
  size_t v160;
  int v161;
  uint64_t **v162;
  size_t v163;
  size_t v164;
  const void *v165;
  size_t v166;
  size_t v167;
  int v168;
  int v169;
  std::__shared_weak_count *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  NSObject *v174;
  NSObject *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  char v179;
  char *v180;
  uint64_t *v181;
  __int128 v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  char v186;
  uint64_t *__p;
  uint64_t *__pa;
  char v189;
  std::__shared_weak_count *v190;
  _QWORD *v191;
  _QWORD *v193;
  uint64_t v194;
  std::string v195;
  unint64_t v196;
  unint64_t v197;
  std::string buf;
  _BYTE group[24];
  std::__shared_weak_count *v200;
  std::string v201;
  uint64_t v202;
  uint64_t v203;

  v203 = *MEMORY[0x24BDAC8D0];
  v1 = (_QWORD *)*a1;
  v2 = *(_QWORD **)*a1;
  v194 = *a1 + 8;
  v196 = 0xAAAAAAAAAAAAAAAALL;
  v197 = 0xAAAAAAAAAAAAAAAALL;
  v193 = v1;
  pthread_mutex_lock(&ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance);
  if (qword_2579B8588)
    goto LABEL_20;
  v3 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
  MEMORY[0x24BD295D4]();
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_251CBBFA0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = v3;
  v6 = (std::__shared_weak_count *)v3->~__shared_weak_count_0;
  if (!v6)
  {
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    v3->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v3;
    v3->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    do
LABEL_12:
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    goto LABEL_15;
  }
  if (v6->__shared_owners_ == -1)
  {
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v3->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v3;
    v3->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    std::__shared_weak_count::__release_weak(v6);
    goto LABEL_12;
  }
LABEL_15:
  v14 = (std::__shared_weak_count *)off_2579B8590;
  qword_2579B8588 = (uint64_t)v3;
  off_2579B8590 = v4;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
LABEL_20:
  v17 = (std::__shared_weak_count *)off_2579B8590;
  if (off_2579B8590)
  {
    v18 = (unint64_t *)((char *)off_2579B8590 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance);
  ctu::power::assertion::createInternal();
  if (v17)
  {
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      v22 = (uint64_t *)v196;
      if (v196)
        goto LABEL_28;
LABEL_72:
      v49 = v2[5];
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        v50 = v194;
        if (*((char *)v1 + 31) < 0)
          v50 = *(_QWORD *)v194;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v50;
        _os_log_error_impl(&dword_24B855000, v49, OS_LOG_TYPE_ERROR, "Failed to create power assertion '%s'", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_344;
    }
  }
  v22 = (uint64_t *)v196;
  if (!v196)
    goto LABEL_72;
LABEL_28:
  v24 = (uint64_t **)(v2 + 26);
  v23 = (uint64_t *)v2[26];
  v191 = v2;
  __p = v22;
  if (!v23)
  {
    v51 = (uint64_t **)v2[25];
    v37 = (uint64_t **)(v2 + 26);
    if (v51 == v24)
    {
      v52 = 0;
      v37 = v24;
      v53 = v24;
      if (*v24)
        goto LABEL_153;
      goto LABEL_138;
    }
    goto LABEL_86;
  }
  v25 = *((unsigned __int8 *)v1 + 31);
  v27 = (const void *)v1[1];
  v26 = v1[2];
  if ((v25 & 0x80u) == 0)
    v28 = (const void *)v194;
  else
    v28 = (const void *)v1[1];
  if ((v25 & 0x80u) == 0)
    v29 = *((unsigned __int8 *)v1 + 31);
  else
    v29 = v1[2];
  v30 = (uint64_t **)(v2 + 26);
  v31 = (uint64_t **)v2[26];
  do
  {
    while (1)
    {
      v32 = *((char *)v31 + 55);
      v33 = v32 >= 0 ? (uint64_t *)(v31 + 4) : v31[4];
      v34 = v32 >= 0 ? *((unsigned __int8 *)v31 + 55) : (size_t)v31[5];
      v35 = v29 >= v34 ? v34 : v29;
      v36 = memcmp(v33, v28, v35);
      if (v36)
        break;
      if (v34 >= v29)
        goto LABEL_50;
LABEL_36:
      v31 = (uint64_t **)v31[1];
      if (!v31)
        goto LABEL_51;
    }
    if (v36 < 0)
      goto LABEL_36;
LABEL_50:
    v30 = v31;
    v31 = (uint64_t **)*v31;
  }
  while (v31);
LABEL_51:
  v37 = v24;
  if (v30 != v24)
  {
    v38 = *((char *)v30 + 55);
    if (v38 >= 0)
      v39 = (uint64_t *)(v30 + 4);
    else
      v39 = v30[4];
    if (v38 >= 0)
      v40 = *((unsigned __int8 *)v30 + 55);
    else
      v40 = (size_t)v30[5];
    if (v40 >= v29)
      v41 = v29;
    else
      v41 = v40;
    v42 = memcmp(v28, v39, v41);
    if (v42)
    {
      if ((v42 & 0x80000000) == 0)
      {
LABEL_63:
        v43 = v197;
        if (v197)
        {
          v44 = (unint64_t *)(v197 + 8);
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        v46 = (std::__shared_weak_count *)v30[8];
        v30[7] = __p;
        v30[8] = (uint64_t *)v43;
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        goto LABEL_153;
      }
    }
    else if (v29 >= v40)
    {
      goto LABEL_63;
    }
    v37 = v30;
  }
  v52 = *v37;
  if ((uint64_t **)v191[25] == v37)
  {
    v53 = v37;
    if (v52)
      v24 = v37 + 1;
    else
      v24 = v37;
    if (*v24)
      goto LABEL_153;
LABEL_138:
    if (v52)
      v65 = v53;
    else
      v65 = v37;
    v64 = v193;
    v72 = *((_BYTE *)v193 + 31);
    goto LABEL_144;
  }
  if (!v52)
  {
LABEL_86:
    v53 = v37;
    do
    {
      v56 = (uint64_t *)v53;
      v53 = (uint64_t **)v53[2];
    }
    while (*v53 == v56);
    v52 = 0;
    v25 = *((unsigned __int8 *)v193 + 31);
    v27 = (const void *)v193[1];
    v26 = v193[2];
    v55 = *((_BYTE *)v193 + 31);
    goto LABEL_89;
  }
  v54 = *v37;
  do
  {
    v53 = (uint64_t **)v54;
    v54 = (uint64_t *)v54[1];
  }
  while (v54);
  v55 = v25;
LABEL_89:
  v57 = *((char *)v53 + 55);
  if (v57 >= 0)
    v58 = (uint64_t *)(v53 + 4);
  else
    v58 = v53[4];
  if (v57 >= 0)
    v59 = *((unsigned __int8 *)v53 + 55);
  else
    v59 = (size_t)v53[5];
  v189 = v55;
  if (v55 >= 0)
    v60 = (const void *)v194;
  else
    v60 = v27;
  if (v55 >= 0)
    v61 = v25;
  else
    v61 = v26;
  if (v61 >= v59)
    v62 = v59;
  else
    v62 = v61;
  v63 = memcmp(v58, v60, v62);
  if (!v63)
  {
    if (v59 >= v61)
      goto LABEL_106;
    goto LABEL_129;
  }
  if (v63 < 0)
  {
LABEL_129:
    if (v52)
      v24 = v53 + 1;
    else
      v24 = v37;
    if (*v24)
      goto LABEL_153;
    goto LABEL_138;
  }
LABEL_106:
  v64 = v193;
  if (!v23)
  {
    v65 = v24;
    goto LABEL_143;
  }
  while (2)
  {
    while (2)
    {
      v65 = (uint64_t **)v23;
      v66 = *((char *)v23 + 55);
      if (v66 >= 0)
        v67 = v23 + 4;
      else
        v67 = (const void *)v23[4];
      if (v66 >= 0)
        v68 = *((unsigned __int8 *)v23 + 55);
      else
        v68 = v23[5];
      if (v68 >= v61)
        v69 = v61;
      else
        v69 = v68;
      v70 = memcmp(v60, v67, v69);
      if (v70)
      {
        if (v70 < 0)
          break;
        goto LABEL_122;
      }
      if (v61 >= v68)
      {
LABEL_122:
        v71 = memcmp(v67, v60, v69);
        if (v71)
        {
          if ((v71 & 0x80000000) == 0)
            goto LABEL_153;
        }
        else if (v68 >= v61)
        {
          goto LABEL_153;
        }
        v23 = v65[1];
        v64 = v193;
        if (!v23)
        {
          v24 = v65 + 1;
          goto LABEL_143;
        }
        continue;
      }
      break;
    }
    v23 = *v65;
    if (*v65)
      continue;
    break;
  }
  v24 = v65;
LABEL_143:
  v72 = v189;
LABEL_144:
  v73 = (uint64_t *)operator new(0x48uLL);
  v74 = (std::string *)(v73 + 4);
  if (v72 < 0)
  {
    std::string::__init_copy_ctor_external(v74, (const std::string::value_type *)v64[1], v64[2]);
    v76 = v197;
    v73[7] = v196;
    v73[8] = v76;
    if (!v76)
      goto LABEL_150;
  }
  else
  {
    v75 = *(_OWORD *)v194;
    v73[6] = *(_QWORD *)(v194 + 16);
    *(_OWORD *)&v74->__r_.__value_.__l.__data_ = v75;
    v76 = v197;
    v73[7] = (uint64_t)__p;
    v73[8] = v76;
    if (!v76)
      goto LABEL_150;
  }
  v77 = (unint64_t *)(v76 + 8);
  do
    v78 = __ldxr(v77);
  while (__stxr(v78 + 1, v77));
LABEL_150:
  *v73 = 0;
  v73[1] = 0;
  v73[2] = (uint64_t)v65;
  *v24 = v73;
  v79 = *(_QWORD *)v191[25];
  if (v79)
  {
    v191[25] = v79;
    v73 = *v24;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v191[26], v73);
  ++v191[27];
LABEL_153:
  v80 = *(_DWORD *)(v196 + 32);
  v81 = *((_DWORD *)v191 + 30);
  v82 = v191[5];
  v83 = os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT);
  if (!v81)
  {
    v1 = v193;
    if (!v83)
    {
LABEL_166:
      v91 = v191[20];
      if (v91)
      {
        (*(void (**)(uint64_t, uint64_t))(v91 + 16))(v91, 1);
        v92 = (const void *)v191[20];
        v191[20] = 0;
        if (v92)
          _Block_release(v92);
        v93 = v191[5];
        if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          v80 = 2;
          _os_log_impl(&dword_24B855000, v93, OS_LOG_TYPE_DEFAULT, "#I Assertion held, but action will be deferred; acknowledging previous notification",
            (uint8_t *)&buf,
            2u);
          v86 = v191[17];
          if (*((char *)v193 + 31) < 0)
            goto LABEL_158;
        }
        else
        {
          v80 = 2;
          v86 = v191[17];
          if (*((char *)v193 + 31) < 0)
            goto LABEL_158;
        }
        goto LABEL_174;
      }
      v80 = 2;
      goto LABEL_173;
    }
    v87 = v194;
    if (*((char *)v193 + 31) < 0)
    {
      v87 = *(_QWORD *)v194;
      v88 = v193[4];
      v89 = *((int *)v191 + 31);
      if (v89 <= 2)
        goto LABEL_162;
    }
    else
    {
      v88 = v193[4];
      v89 = *((int *)v191 + 31);
      if (v89 <= 2)
      {
LABEL_162:
        v90 = off_251CBC1B0[v89];
LABEL_165:
        LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v87;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v88;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
        *(_DWORD *)group = v80;
        *(_WORD *)&group[4] = 1024;
        *(_DWORD *)&group[6] = 2;
        *(_WORD *)&group[10] = 2080;
        *(_QWORD *)&group[12] = v90;
        _os_log_impl(&dword_24B855000, v82, OS_LOG_TYPE_DEFAULT, "#I Power assertion created for '%s' during sleep; Timeout (millisec): %llu, Status = %d, Override = %d; Sleep state: %s",
          (uint8_t *)&buf,
          0x2Cu);
        goto LABEL_166;
      }
    }
    v90 = "Unknown";
    goto LABEL_165;
  }
  v1 = v193;
  if (!v83)
  {
LABEL_173:
    v86 = v191[17];
    if (*((char *)v1 + 31) < 0)
      goto LABEL_158;
    goto LABEL_174;
  }
  v84 = v194;
  if (*((char *)v193 + 31) < 0)
    v84 = *(_QWORD *)v194;
  v85 = v193[4];
  LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v84;
  WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v85;
  HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
  *(_DWORD *)group = v80;
  _os_log_impl(&dword_24B855000, v82, OS_LOG_TYPE_DEFAULT, "#I Power assertion created for '%s'; Timeout (millisec): %llu, Status = %d",
    (uint8_t *)&buf,
    0x1Cu);
  v86 = v191[17];
  if (*((char *)v193 + 31) < 0)
  {
LABEL_158:
    std::string::__init_copy_ctor_external(&v195, (const std::string::value_type *)v1[1], v1[2]);
    goto LABEL_175;
  }
LABEL_174:
  v94 = *(_OWORD *)v194;
  v195.__r_.__value_.__r.__words[2] = *(_QWORD *)(v194 + 16);
  *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v94;
LABEL_175:
  PowerStats::gotAssertion(v86, (uint64_t)&v195, v80);
  if ((SHIBYTE(v195.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v80 == 2)
      goto LABEL_177;
LABEL_180:
    if ((uint64_t)v1[4] < 1)
      goto LABEL_344;
    v96 = (std::__shared_weak_count *)v191[10];
    if (!v96 || (v97 = v191[9], (v98 = std::__shared_weak_count::lock(v96)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v99 = v98;
    v100 = (unint64_t *)&v98->__shared_weak_owners_;
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
    v102 = (unint64_t *)&v98->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v99);
    }
    buf.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
    buf.__r_.__value_.__l.__size_ = 1174405120;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZN12PowerManager5State20createPowerAssertionENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6chrono8durationIxNS1_5ratioILl1ELl1000EEEEEENKUlvE_clEv_block_invoke;
    *(_QWORD *)group = &__block_descriptor_tmp_18_1;
    *(_QWORD *)&group[8] = v191;
    *(_QWORD *)&group[16] = v97;
    v200 = v99;
    do
      v104 = __ldxr(v100);
    while (__stxr(v104 + 1, v100));
    v190 = v99;
    if (*((char *)v1 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v201, (const std::string::value_type *)v1[1], v1[2]);
    }
    else
    {
      v105 = *(_OWORD *)v194;
      v201.__r_.__value_.__r.__words[2] = *(_QWORD *)(v194 + 16);
      *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v105;
    }
    v202 = v1[4];
    v124 = (uint64_t *)operator new(0x10uLL);
    v125 = _Block_copy(&buf);
    *v124 = (uint64_t)"Watchdog timed out";
    __pa = v124;
    TelephonyBasebandWatchdogStart();
    if (v125)
      _Block_release(v125);
    v126 = (uint64_t **)(v191 + 29);
    v127 = (uint64_t *)v191[29];
    if (!v127)
    {
      v140 = (uint64_t **)(v191 + 29);
      if ((uint64_t **)v191[28] == v126)
      {
        v151 = 0;
        v140 = (uint64_t **)(v191 + 29);
        v152 = (uint64_t **)(v191 + 29);
        goto LABEL_335;
      }
      goto LABEL_291;
    }
    v128 = *((unsigned __int8 *)v1 + 31);
    v129 = (const void *)v1[1];
    v130 = v1[2];
    if ((v128 & 0x80u) == 0)
      v131 = (const void *)v194;
    else
      v131 = (const void *)v1[1];
    if ((v128 & 0x80u) == 0)
      v132 = *((unsigned __int8 *)v1 + 31);
    else
      v132 = v1[2];
    v133 = (uint64_t **)(v191 + 29);
    v134 = (uint64_t **)v191[29];
    while (1)
    {
      v135 = *((char *)v134 + 55);
      if (v135 >= 0)
        v136 = (uint64_t *)(v134 + 4);
      else
        v136 = v134[4];
      if (v135 >= 0)
        v137 = *((unsigned __int8 *)v134 + 55);
      else
        v137 = (size_t)v134[5];
      if (v132 >= v137)
        v138 = v137;
      else
        v138 = v132;
      v139 = memcmp(v136, v131, v138);
      if (v139)
      {
        if (v139 < 0)
          goto LABEL_249;
      }
      else if (v137 < v132)
      {
LABEL_249:
        v134 = (uint64_t **)v134[1];
        if (!v134)
          goto LABEL_264;
        continue;
      }
      v133 = v134;
      v134 = (uint64_t **)*v134;
      if (!v134)
      {
LABEL_264:
        v140 = (uint64_t **)(v191 + 29);
        if (v133 == v126)
          goto LABEL_286;
        v141 = *((char *)v133 + 55);
        if (v141 >= 0)
          v142 = (uint64_t *)(v133 + 4);
        else
          v142 = v133[4];
        if (v141 >= 0)
          v143 = *((unsigned __int8 *)v133 + 55);
        else
          v143 = (size_t)v133[5];
        if (v143 >= v132)
          v144 = v132;
        else
          v144 = v143;
        v145 = memcmp(v131, v142, v144);
        if (!v145)
        {
          v1 = v193;
          if (v132 < v143)
            goto LABEL_285;
LABEL_276:
          v146 = (uint64_t *)operator new(0x20uLL);
          *v146 = (uint64_t)off_251CBBFF0;
          v146[1] = 0;
          v147 = v190;
          v146[2] = 0;
          v146[3] = (uint64_t)__pa;
          v148 = (std::__shared_weak_count *)v133[8];
          v133[7] = __pa;
          v133[8] = v146;
          if (v148)
          {
            v149 = (unint64_t *)&v148->__shared_owners_;
            do
              v150 = __ldaxr(v149);
            while (__stlxr(v150 - 1, v149));
            if (!v150)
            {
              ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
              std::__shared_weak_count::__release_weak(v148);
              if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_373;
              goto LABEL_341;
            }
          }
LABEL_340:
          if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_373;
          goto LABEL_341;
        }
        v1 = v193;
        if ((v145 & 0x80000000) == 0)
          goto LABEL_276;
LABEL_285:
        v140 = v133;
LABEL_286:
        v151 = *v140;
        if ((uint64_t **)v191[28] == v140)
        {
          v152 = v140;
          goto LABEL_335;
        }
        if (v151)
        {
          v153 = *v140;
          do
          {
            v152 = (uint64_t **)v153;
            v153 = (uint64_t *)v153[1];
          }
          while (v153);
          v154 = v128;
LABEL_294:
          v156 = *((char *)v152 + 55);
          if (v156 >= 0)
            v157 = (uint64_t *)(v152 + 4);
          else
            v157 = v152[4];
          if (v156 >= 0)
            v158 = *((unsigned __int8 *)v152 + 55);
          else
            v158 = (size_t)v152[5];
          v186 = v154;
          if (v154 >= 0)
            v159 = (const void *)v194;
          else
            v159 = v129;
          if (v154 >= 0)
            v130 = v128;
          if (v130 >= v158)
            v160 = v158;
          else
            v160 = v130;
          v161 = memcmp(v157, v159, v160);
          if (v161)
          {
            if (v161 < 0)
            {
LABEL_335:
              if (v151)
                v126 = v152 + 1;
              else
                v126 = v140;
              if (!*v126)
              {
                if (v151)
                  v162 = v152;
                else
                  v162 = v140;
                v1 = v193;
                v179 = *((_BYTE *)v193 + 31);
                goto LABEL_367;
              }
LABEL_339:
              TelephonyBasebandWatchdogStop();
              operator delete(__pa);
              v1 = v193;
              v147 = v190;
              goto LABEL_340;
            }
          }
          else if (v158 < v130)
          {
            goto LABEL_335;
          }
          if (!v127)
          {
            v162 = (uint64_t **)(v191 + 29);
            v1 = v193;
            goto LABEL_366;
          }
          v1 = v193;
          while (1)
          {
            v162 = (uint64_t **)v127;
            v163 = *((unsigned __int8 *)v127 + 55);
            v164 = v127[5];
            if ((v163 & 0x80u) == 0)
              v165 = v127 + 4;
            else
              v165 = (const void *)v127[4];
            if ((v163 & 0x80u) == 0)
              v166 = v163;
            else
              v166 = v164;
            if (v166 >= v130)
              v167 = v130;
            else
              v167 = v166;
            v168 = memcmp(v159, v165, v167);
            if (v168)
            {
              if ((v168 & 0x80000000) == 0)
                goto LABEL_328;
            }
            else if (v130 >= v166)
            {
LABEL_328:
              v169 = memcmp(v165, v159, v167);
              if (v169)
              {
                if ((v169 & 0x80000000) == 0)
                  goto LABEL_339;
              }
              else if (v166 >= v130)
              {
                goto LABEL_339;
              }
              v127 = v162[1];
              v1 = v193;
              if (!v127)
              {
                v126 = v162 + 1;
                goto LABEL_366;
              }
              continue;
            }
            v127 = *v162;
            if (!*v162)
            {
              v126 = v162;
LABEL_366:
              v179 = v186;
LABEL_367:
              v180 = (char *)operator new(0x48uLL);
              v181 = (uint64_t *)v180;
              if (v179 < 0)
              {
                v183 = (uint64_t)__pa;
                v147 = v190;
                std::string::__init_copy_ctor_external((std::string *)(v180 + 32), (const std::string::value_type *)v1[1], v1[2]);
              }
              else
              {
                v182 = *(_OWORD *)v194;
                *((_QWORD *)v180 + 6) = *(_QWORD *)(v194 + 16);
                *((_OWORD *)v180 + 2) = v182;
                v183 = (uint64_t)__pa;
                v147 = v190;
              }
              v181[7] = v183;
              v184 = operator new(0x20uLL);
              *v184 = off_251CBBFF0;
              v184[1] = 0;
              v184[2] = 0;
              v184[3] = v183;
              v181[8] = (uint64_t)v184;
              *v181 = 0;
              v181[1] = 0;
              v181[2] = (uint64_t)v162;
              *v126 = v181;
              v185 = *(_QWORD *)v191[28];
              if (v185)
              {
                v191[28] = v185;
                v181 = *v126;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v191[29], v181);
              ++v191[30];
              if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_373:
                operator delete(v201.__r_.__value_.__l.__data_);
                v170 = v200;
                if (!v200)
                  goto LABEL_343;
LABEL_342:
                std::__shared_weak_count::__release_weak(v170);
LABEL_343:
                std::__shared_weak_count::__release_weak(v147);
                goto LABEL_344;
              }
LABEL_341:
              v170 = v200;
              if (v200)
                goto LABEL_342;
              goto LABEL_343;
            }
          }
        }
LABEL_291:
        v152 = v140;
        do
        {
          v155 = (uint64_t *)v152;
          v152 = (uint64_t **)v152[2];
        }
        while (*v152 == v155);
        v151 = 0;
        v128 = *((unsigned __int8 *)v193 + 31);
        v129 = (const void *)v193[1];
        v130 = v193[2];
        v154 = *((_BYTE *)v193 + 31);
        goto LABEL_294;
      }
    }
  }
  operator delete(v195.__r_.__value_.__l.__data_);
  if (v80 != 2)
    goto LABEL_180;
LABEL_177:
  if (*((char *)v1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&buf, (const std::string::value_type *)v1[1], v1[2]);
  }
  else
  {
    v95 = *(_OWORD *)v194;
    buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v194 + 16);
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v95;
  }
  v106 = v1[5];
  *(_QWORD *)group = v106;
  if (v106)
  {
    dispatch_retain(v106);
    if (*(_QWORD *)group)
      dispatch_group_enter(*(dispatch_group_t *)group);
  }
  v107 = (uint64_t *)v191[32];
  if (!v107)
  {
    v110 = (uint64_t **)(v191 + 32);
    v111 = (uint64_t **)(v191 + 32);
    goto LABEL_225;
  }
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_buf = &buf;
  else
    p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  else
    size = buf.__r_.__value_.__l.__size_;
  do
  {
    while (2)
    {
      v111 = (uint64_t **)v107;
      v114 = (const void *)v107[4];
      v112 = v107 + 4;
      v113 = v114;
      v115 = *((char *)v112 + 23);
      if (v115 >= 0)
        v116 = v112;
      else
        v116 = v113;
      if (v115 >= 0)
        v117 = *((unsigned __int8 *)v112 + 23);
      else
        v117 = v112[1];
      if (v117 >= size)
        v118 = size;
      else
        v118 = v117;
      v119 = memcmp(p_buf, v116, v118);
      if (v119)
      {
        if (v119 < 0)
          goto LABEL_204;
      }
      else if (size < v117)
      {
LABEL_204:
        v107 = *v111;
        v110 = v111;
        if (!*v111)
          goto LABEL_225;
        continue;
      }
      break;
    }
    v120 = memcmp(v116, p_buf, v118);
    if (v120)
    {
      if ((v120 & 0x80000000) == 0)
        goto LABEL_231;
    }
    else if (v117 >= size)
    {
      goto LABEL_231;
    }
    v107 = v111[1];
  }
  while (v107);
  v110 = v111 + 1;
LABEL_225:
  v121 = (uint64_t *)operator new(0x40uLL);
  v122 = (std::string *)(v121 + 4);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v122, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v122->__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v121[6] = buf.__r_.__value_.__r.__words[2];
  }
  v121[7] = *(_QWORD *)group;
  *(_QWORD *)group = 0;
  *v121 = 0;
  v121[1] = 0;
  v121[2] = (uint64_t)v111;
  *v110 = v121;
  v123 = *(_QWORD *)v191[31];
  if (v123)
  {
    v191[31] = v123;
    v121 = *v110;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v191[32], v121);
  ++v191[33];
LABEL_231:
  if (*(_QWORD *)group)
  {
    dispatch_group_leave(*(dispatch_group_t *)group);
    if (*(_QWORD *)group)
      dispatch_release(*(dispatch_object_t *)group);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_344:
  v171 = (std::__shared_weak_count *)v197;
  if (v197)
  {
    v172 = (unint64_t *)(v197 + 8);
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = v1[5];
  if (v174)
  {
    dispatch_group_leave(v174);
    v175 = v1[5];
    if (v175)
      dispatch_release(v175);
  }
  if (*((char *)v1 + 31) < 0)
    operator delete(*(void **)v194);
  operator delete(v1);
  v176 = (std::__shared_weak_count *)a1[2];
  if (v176)
  {
    v177 = (unint64_t *)&v176->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  operator delete(a1);
}

void sub_24B8BA8D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, std::__shared_weak_count *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,dispatch_group_t group,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  __break(1u);
}

void sub_24B8BAA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, void **a16)
{
  NSObject *v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  __cxa_end_catch();
  pthread_mutex_unlock(&ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance);
  v16 = *(NSObject **)(a15 + 40);
  if (v16)
  {
    dispatch_group_leave(v16);
    v17 = *(NSObject **)(a15 + 40);
    if (v17)
      dispatch_release(v17);
  }
  if (*(char *)(a15 + 31) < 0)
    operator delete(*a16);
  operator delete((void *)a15);
  v18 = (std::__shared_weak_count *)a14[2];
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(a14);
  JUMPOUT(0x24B8BAB74);
}

