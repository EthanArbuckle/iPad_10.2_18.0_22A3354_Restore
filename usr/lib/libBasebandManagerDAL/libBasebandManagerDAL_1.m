void sub_24B8BAA34()
{
  JUMPOUT(0x24B8BAA5CLL);
}

void sub_24B8BAA40()
{
  JUMPOUT(0x24B8BAA5CLL);
}

void sub_24B8BAA48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    JUMPOUT(0x24B8BAA58);
  JUMPOUT(0x24B8BAA5CLL);
}

void sub_24B8BAAA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, void **a16)
{
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  NSObject *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;

  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *(NSObject **)(a15 + 40);
  if (v19)
  {
    dispatch_group_leave(v19);
    v20 = *(NSObject **)(a15 + 40);
    if (v20)
      dispatch_release(v20);
  }
  if (*(char *)(a15 + 31) < 0)
    operator delete(*a16);
  operator delete((void *)a15);
  v21 = (std::__shared_weak_count *)a14[2];
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  operator delete(a14);
  JUMPOUT(0x24B8BAB74);
}

void sub_24B8BAADC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZZN12PowerManager5State20createPowerAssertionENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6chrono8durationIxNS1_5ratioILl1ELl1000EEEEEENKUlvE_clEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  _QWORD *v11;
  std::string *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::string __p;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    v24 = v4;
    if (v4)
    {
      v5 = *(_QWORD **)(a1 + 40);
      v23 = v5;
      if (!v5)
      {
        v6 = v4;
LABEL_23:
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        return;
      }
      v20 = v3;
      if (*(char *)(a1 + 79) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 56), *(_QWORD *)(a1 + 64));
      else
        __p = *(std::string *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 80);
      v7 = (std::__shared_weak_count *)v5[10];
      if (!v7 || (v8 = v5[9], (v9 = std::__shared_weak_count::lock(v7)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v10 = v9;
      v11 = operator new(0x28uLL);
      *v11 = v20;
      v12 = (std::string *)(v11 + 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v11[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      }
      v11[4] = v22;
      v13 = v5[11];
      v14 = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v16 = operator new(0x18uLL);
      *v16 = v11;
      v16[1] = v8;
      v16[2] = v10;
      dispatch_async_f(v13, v16, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedIZZZNS4_20createPowerAssertionENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_6chrono8durationIxNS7_5ratioILl1ELl1000EEEEEENKUlvE_clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISL_NS7_14default_deleteISL_EEEEENUlPvE_8__invokeESU_);
      do
        v17 = __ldaxr(v14);
      while (__stlxr(v17 - 1, v14));
      if (v17)
      {
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_19;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_19:
          v6 = v24;
          if (!v24)
            return;
          goto LABEL_23;
        }
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      v6 = v24;
      if (!v24)
        return;
      goto LABEL_23;
    }
  }
}

void sub_24B8BAD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    a1[9] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_24B8BADE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2)
      return;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
}

void std::__shared_ptr_pointer<ctu::power::assertion *,std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion *)#1},std::allocator<ctu::power::assertion>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ctu::power::assertion *,std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion *)#1},std::allocator<ctu::power::assertion>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 16), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion*)#1}::operator() const(ctu::power::assertion*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<ctu::power::assertion *,std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion *)#1},std::allocator<ctu::power::assertion>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared"
                                "_ptrIT_EEPS7_EUlPS2_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion*)#1}::operator() const(ctu::power::assertion*)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(*(char **)(a1 + 40));
    v2 = *(NSObject **)(a1 + 24);
    if (v2)
      dispatch_release(v2);
    v3 = *(NSObject **)(a1 + 16);
    if (v3)
      dispatch_release(v3);
    v4 = *(std::__shared_weak_count **)(a1 + 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    operator delete((void *)a1);
  }
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(char *a1)
{
  std::__shared_weak_count *v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (std::__shared_weak_count *)*((_QWORD *)a1 + 8);
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedIZZZNS4_20createPowerAssertionENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_6chrono8durationIxNS7_5ratioILl1ELl1000EEEEEENKUlvE_clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISL_NS7_14default_deleteISL_EEEEENUlPvE_8__invokeESU_(void ***a1)
{
  void **v2;
  _QWORD *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  _QWORD *v9;
  void **v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  xpc_object_t v19;
  xpc_object_t v20;
  NSObject *v21;
  size_t v22;
  void **v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  size_t v26;
  void **p_dst;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  uint64_t v37;
  const char *v38;
  xpc_object_t v39;
  xpc_object_t v40;
  const void *v41;
  size_t v42;
  size_t v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  const void **v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  void **__dst;
  size_t v60;
  int64_t v61;
  std::string v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 __p;
  __int128 v69;
  unint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 buf;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v70 = 0xAAAAAAAAAAAAAAAALL;
  v80 = v4;
  v79 = v4;
  v78 = v4;
  v77 = v4;
  v76 = v4;
  v75 = v4;
  v74 = v4;
  v73 = v4;
  v72 = v4;
  v69 = v4;
  __p = v4;
  v66 = v4;
  v67 = v4;
  v64 = v4;
  v65 = v4;
  v5 = MEMORY[0x24BEDB870];
  v6 = MEMORY[0x24BEDB870] + 64;
  v71 = MEMORY[0x24BEDB870] + 64;
  v7 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v63 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v63 + *(_QWORD *)(v63 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v63 + *(_QWORD *)(v63 - 24));
  std::ios_base::init(v8, &v64);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v63 = v5 + 24;
  v71 = v6;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&v64 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v69 = 0u;
  LODWORD(v70) = 16;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Power assertion watchdog fired for '", 36);
  v10 = v2 + 1;
  v11 = *((char *)v2 + 31);
  if (v11 >= 0)
    v12 = (uint64_t)(v2 + 1);
  else
    v12 = (uint64_t)v2[1];
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)v2 + 31);
  else
    v13 = (uint64_t)v2[2];
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"'; Timeout (millisec): ",
    23);
  std::ostream::operator<<();
  if (*((char *)v2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v62, (const std::string::value_type *)v2[1], (std::string::size_type)v2[2]);
  }
  else
  {
    v15 = *(_OWORD *)v10;
    v62.__r_.__value_.__r.__words[2] = (std::string::size_type)v2[3];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v15;
  }
  PowerManager::State::releasePowerAssertion_sync(v3, (const void **)&v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (TelephonyUtilIsInternalBuild())
  {
    v16 = (std::__shared_weak_count *)v3[35];
    if (!v16)
      goto LABEL_93;
    v17 = std::__shared_weak_count::lock(v16);
    if (!v17)
      goto LABEL_93;
    v18 = v17;
    v57 = v3[34];
    if (!v57)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
LABEL_73:
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      goto LABEL_93;
    }
    v19 = xpc_dictionary_create(0, 0, 0);
    if (v19 || (v19 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x24BD2A468](v19) == MEMORY[0x24BDACFA0])
      {
        xpc_retain(v19);
        v20 = v19;
      }
      else
      {
        v20 = xpc_null_create();
      }
    }
    else
    {
      v20 = xpc_null_create();
      v19 = 0;
    }
    xpc_release(v19);
    if ((v70 & 0x10) != 0)
    {
      v28 = *((_QWORD *)&v69 + 1);
      if (*((_QWORD *)&v69 + 1) < (unint64_t)v67)
      {
        *((_QWORD *)&v69 + 1) = v67;
        v28 = v67;
      }
      v29 = (const void *)*((_QWORD *)&v66 + 1);
      v26 = v28 - *((_QWORD *)&v66 + 1);
      if ((unint64_t)(v28 - *((_QWORD *)&v66 + 1)) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_76;
    }
    else
    {
      if ((v70 & 8) == 0)
      {
        v26 = 0;
        HIBYTE(v61) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_42;
      }
      v29 = (const void *)v65;
      v26 = v66 - v65;
      if ((_QWORD)v66 - (_QWORD)v65 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_76:
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v26 >= 0x17)
    {
      v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v30 = v26 | 7;
      v31 = v30 + 1;
      p_dst = (void **)operator new(v30 + 1);
      v60 = v26;
      v61 = v31 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v61) = v26;
      p_dst = (void **)&__dst;
      if (!v26)
      {
LABEL_42:
        *((_BYTE *)p_dst + v26) = 0;
        if (v61 >= 0)
          v32 = (const char *)&__dst;
        else
          v32 = (const char *)__dst;
        v33 = xpc_string_create(v32);
        if (!v33)
          v33 = xpc_null_create();
        xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x24BE053F0], v33);
        v34 = xpc_null_create();
        xpc_release(v33);
        xpc_release(v34);
        if (SHIBYTE(v61) < 0)
          operator delete(__dst);
        v35 = xpc_int64_create(0);
        if (!v35)
          v35 = xpc_null_create();
        xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x24BE04E78], v35);
        v36 = xpc_null_create();
        xpc_release(v35);
        xpc_release(v36);
        Timestamp::Timestamp((Timestamp *)&buf);
        Timestamp::asString(v37, 0, 9, &__dst);
        if (v61 >= 0)
          v38 = (const char *)&__dst;
        else
          v38 = (const char *)__dst;
        v39 = xpc_string_create(v38);
        if (!v39)
          v39 = xpc_null_create();
        xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x24BE05090], v39);
        v40 = xpc_null_create();
        xpc_release(v39);
        xpc_release(v40);
        if (SHIBYTE(v61) < 0)
          operator delete(__dst);
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, *((_QWORD **)&buf + 1));
        v41 = (const void *)*MEMORY[0x24BE05200];
        v42 = strlen((const char *)*MEMORY[0x24BE05200]);
        if (v42 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v43 = v42;
        if (v42 >= 0x17)
        {
          v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v42 | 7) != 0x17)
            v45 = v42 | 7;
          v46 = v45 + 1;
          v44 = (void **)operator new(v45 + 1);
          v60 = v43;
          v61 = v46 | 0x8000000000000000;
          __dst = v44;
        }
        else
        {
          HIBYTE(v61) = v42;
          v44 = (void **)&__dst;
          if (!v42)
            goto LABEL_66;
        }
        memmove(v44, v41, v43);
LABEL_66:
        *((_BYTE *)v44 + v43) = 0;
        *(_QWORD *)&buf = v20;
        if (v20)
          xpc_retain(v20);
        else
          *(_QWORD *)&buf = xpc_null_create();
        v58 = 0;
        ServiceManager::runCommand(v57, (uint64_t)&__dst, (void **)&buf, &v58);
        xpc_release((xpc_object_t)buf);
        *(_QWORD *)&buf = 0;
        if (SHIBYTE(v61) < 0)
          operator delete(__dst);
        xpc_release(v20);
        v47 = (unint64_t *)&v18->__shared_owners_;
        do
          v25 = __ldaxr(v47);
        while (__stlxr(v25 - 1, v47));
        goto LABEL_73;
      }
    }
    memmove(p_dst, v29, v26);
    goto LABEL_42;
  }
  v21 = v3[5];
  if (!os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
    goto LABEL_93;
  if ((v70 & 0x10) != 0)
  {
    v48 = *((_QWORD *)&v69 + 1);
    if (*((_QWORD *)&v69 + 1) < (unint64_t)v67)
    {
      *((_QWORD *)&v69 + 1) = v67;
      v48 = v67;
    }
    v49 = (const void **)&v66 + 1;
  }
  else
  {
    if ((v70 & 8) == 0)
    {
      v22 = 0;
      HIBYTE(v61) = 0;
      v23 = (void **)&__dst;
      goto LABEL_89;
    }
    v49 = (const void **)&v65;
    v48 = v66;
  }
  v50 = *v49;
  v22 = v48 - (_QWORD)*v49;
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v22 >= 0x17)
  {
    v51 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v51 = v22 | 7;
    v52 = v51 + 1;
    v23 = (void **)operator new(v51 + 1);
    v60 = v22;
    v61 = v52 | 0x8000000000000000;
    __dst = v23;
  }
  else
  {
    HIBYTE(v61) = v48 - *(_BYTE *)v49;
    v23 = (void **)&__dst;
    if (!v22)
      goto LABEL_89;
  }
  memmove(v23, v50, v22);
LABEL_89:
  *((_BYTE *)v23 + v22) = 0;
  v53 = (void **)&__dst;
  if (v61 < 0)
    v53 = __dst;
  LODWORD(buf) = 136315138;
  *(_QWORD *)((char *)&buf + 4) = v53;
  _os_log_fault_impl(&dword_24B855000, v21, OS_LOG_TYPE_FAULT, "%s", (uint8_t *)&buf, 0xCu);
  if (SHIBYTE(v61) < 0)
    operator delete(__dst);
LABEL_93:
  v63 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&v63 + *(_QWORD *)(v63 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *(_QWORD *)&v64 = MEMORY[0x24BEDB848] + 16;
  if (SBYTE7(v69) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24BD29B5C](&v71);
  if (*((char *)v2 + 31) < 0)
    operator delete(*v10);
  operator delete(v2);
  v54 = (std::__shared_weak_count *)a1[2];
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  operator delete(a1);
}

void sub_24B8BB740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void PowerManager::State::releasePowerAssertion_sync(_QWORD *a1, const void **a2)
{
  const void **v2;
  uint64_t *v4;
  _QWORD *v5;
  char v6;
  const void *v7;
  size_t v8;
  _QWORD *v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  NSObject *v23;
  const void **v24;
  const char *v25;
  _QWORD *v26;
  BOOL v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  const void **v31;
  uint64_t *v32;
  char v33;
  const void *v34;
  size_t v35;
  _QWORD *v36;
  uint64_t *v37;
  int v38;
  const void *v39;
  size_t v40;
  size_t v41;
  int v42;
  int v43;
  const void *v44;
  size_t v45;
  size_t v46;
  int v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  NSObject *v54;
  uint64_t v55;
  NSObject *v56;
  const void *v57;
  int v58;
  const void **v59;
  uint64_t v60;

  v2 = a2;
  v60 = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 26;
  v4 = (uint64_t *)a1[26];
  if (!v4)
    goto LABEL_40;
  v6 = *((_BYTE *)a2 + 23);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *a2;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  v9 = a1 + 26;
  v10 = (uint64_t *)a1[26];
  do
  {
    while (1)
    {
      v11 = *((char *)v10 + 55);
      v12 = v11 >= 0 ? v10 + 4 : (uint64_t *)v10[4];
      v13 = v11 >= 0 ? *((unsigned __int8 *)v10 + 55) : v10[5];
      v14 = v8 >= v13 ? v13 : v8;
      v15 = memcmp(v12, v7, v14);
      if (v15)
        break;
      if (v13 >= v8)
        goto LABEL_23;
LABEL_9:
      v10 = (uint64_t *)v10[1];
      if (!v10)
        goto LABEL_24;
    }
    if (v15 < 0)
      goto LABEL_9;
LABEL_23:
    v9 = v10;
    v10 = (uint64_t *)*v10;
  }
  while (v10);
LABEL_24:
  if (v9 == v5)
    goto LABEL_40;
  v16 = *((char *)v9 + 55);
  if (v16 >= 0)
    v17 = v9 + 4;
  else
    v17 = (const void *)v9[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v9 + 55);
  else
    v18 = v9[5];
  if (v18 >= v8)
    v19 = v8;
  else
    v19 = v18;
  v20 = memcmp(v7, v17, v19);
  if (v20)
  {
    if ((v20 & 0x80000000) == 0)
      goto LABEL_36;
LABEL_40:
    v23 = a1[5];
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = v2;
      if (*((char *)v2 + 23) < 0)
        v24 = (const void **)*v2;
      v58 = 136315138;
      v59 = v24;
      v25 = "#I Attempt to release non-existent power assertion '%s'";
LABEL_60:
      _os_log_impl(&dword_24B855000, v23, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&v58, 0xCu);
    }
  }
  else
  {
    if (v8 < v18)
      goto LABEL_40;
LABEL_36:
    v21 = (_QWORD *)v9[1];
    if (v21)
    {
      do
      {
        v22 = v21;
        v21 = (_QWORD *)*v21;
      }
      while (v21);
    }
    else
    {
      v26 = v9;
      do
      {
        v22 = (_QWORD *)v26[2];
        v27 = *v22 == (_QWORD)v26;
        v26 = v22;
      }
      while (!v27);
    }
    if ((_QWORD *)a1[25] == v9)
      a1[25] = v22;
    --a1[27];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v4, v9);
    v28 = (std::__shared_weak_count *)v9[8];
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (*((char *)v9 + 55) < 0)
      operator delete((void *)v9[4]);
    operator delete(v9);
    v23 = a1[5];
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v31 = v2;
      if (*((char *)v2 + 23) < 0)
        v31 = (const void **)*v2;
      v58 = 136315138;
      v59 = v31;
      v25 = "#I Released power assertion '%s'";
      goto LABEL_60;
    }
  }
  v32 = (uint64_t *)a1[29];
  if (!v32)
    goto LABEL_117;
  v33 = *((_BYTE *)v2 + 23);
  if (v33 >= 0)
    v34 = v2;
  else
    v34 = *v2;
  if (v33 >= 0)
    v35 = *((unsigned __int8 *)v2 + 23);
  else
    v35 = (size_t)v2[1];
  v36 = a1 + 29;
  v37 = (uint64_t *)a1[29];
  while (2)
  {
    while (2)
    {
      v38 = *((char *)v37 + 55);
      if (v38 >= 0)
        v39 = v37 + 4;
      else
        v39 = (const void *)v37[4];
      if (v38 >= 0)
        v40 = *((unsigned __int8 *)v37 + 55);
      else
        v40 = v37[5];
      if (v35 >= v40)
        v41 = v40;
      else
        v41 = v35;
      v42 = memcmp(v39, v34, v41);
      if (v42)
      {
        if ((v42 & 0x80000000) == 0)
          break;
        goto LABEL_69;
      }
      if (v40 < v35)
      {
LABEL_69:
        v37 = (uint64_t *)v37[1];
        if (!v37)
          goto LABEL_84;
        continue;
      }
      break;
    }
    v36 = v37;
    v37 = (uint64_t *)*v37;
    if (v37)
      continue;
    break;
  }
LABEL_84:
  if (v36 != a1 + 29)
  {
    v43 = *((char *)v36 + 55);
    if (v43 >= 0)
      v44 = v36 + 4;
    else
      v44 = (const void *)v36[4];
    if (v43 >= 0)
      v45 = *((unsigned __int8 *)v36 + 55);
    else
      v45 = v36[5];
    if (v45 >= v35)
      v46 = v35;
    else
      v46 = v45;
    v47 = memcmp(v34, v44, v46);
    if (v47)
    {
      if (v47 < 0)
        goto LABEL_117;
LABEL_98:
      v48 = (_QWORD *)v36[1];
      if (v48)
      {
        do
        {
          v49 = v48;
          v48 = (_QWORD *)*v48;
        }
        while (v48);
      }
      else
      {
        v50 = v36;
        do
        {
          v49 = (_QWORD *)v50[2];
          v27 = *v49 == (_QWORD)v50;
          v50 = v49;
        }
        while (!v27);
      }
      if ((_QWORD *)a1[28] == v36)
        a1[28] = v49;
      --a1[30];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v32, v36);
      v51 = (std::__shared_weak_count *)v36[8];
      if (v51)
      {
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      if (*((char *)v36 + 55) < 0)
        operator delete((void *)v36[4]);
      operator delete(v36);
      v54 = a1[5];
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)v2 + 23) < 0)
          v2 = (const void **)*v2;
        v58 = 136315138;
        v59 = v2;
        _os_log_impl(&dword_24B855000, v54, OS_LOG_TYPE_DEFAULT, "#I Clear watchdog timer for power assertion '%s'", (uint8_t *)&v58, 0xCu);
      }
    }
    else if (v35 >= v45)
    {
      goto LABEL_98;
    }
  }
LABEL_117:
  if (!a1[27])
  {
    *(_BYTE *)(a1[17] + 88) = 0;
    v55 = a1[20];
    if (v55)
    {
      v56 = a1[5];
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v58) = 0;
        _os_log_impl(&dword_24B855000, v56, OS_LOG_TYPE_DEFAULT, "#I No more assertions held, acknowledging previous notification", (uint8_t *)&v58, 2u);
        v55 = a1[20];
      }
      (*(void (**)(uint64_t, uint64_t))(v55 + 16))(v55, 1);
      v57 = (const void *)a1[20];
      a1[20] = 0;
      if (v57)
        _Block_release(v57);
    }
  }
}

void sub_24B8BBE2C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<support::misc::Watchdog  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<support::misc::Watchdog  *>::__on_zero_shared(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<support::misc::Watchdog  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B953060)
    return a1 + 24;
  if (((v3 & 0x800000024B953060 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B953060))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B953060 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>(PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string v9;

  v2 = *(_QWORD **)a1;
  v3 = **(_QWORD ***)a1;
  v4 = (void **)(*(_QWORD *)a1 + 8);
  if (*(char *)(*(_QWORD *)a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v9, (const std::string::value_type *)v2[1], v2[2]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v9.__r_.__value_.__r.__words[2] = v2[3];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v5;
  }
  PowerManager::State::releasePowerAssertion_sync(v3, (const void **)&v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((*((char *)v2 + 31) & 0x80000000) == 0)
    {
LABEL_6:
      operator delete(v2);
      v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
      if (!v6)
        goto LABEL_7;
      goto LABEL_11;
    }
  }
  else if ((*((char *)v2 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*v4);
  operator delete(v2);
  v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (!v6)
    goto LABEL_7;
LABEL_11:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    operator delete(a1);
    return;
  }
LABEL_7:
  operator delete(a1);
}

void sub_24B8BC010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _QWORD *v16;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&a10);
  v18 = (std::__shared_weak_count *)v16[2];
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 31) < 0)
      operator delete(*(void **)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

void ___ZN12PowerManager5State10initializeEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  const void *v28;
  const void *v29;
  size_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  NSObject *v37;
  const void *v38;
  size_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  NSObject *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  void *v51;
  NSObject *v52;
  void *v53;
  const void *v54;
  NSObject *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD v62[5];
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  _QWORD v66[6];
  std::__shared_weak_count *v67;
  void *v68;
  dispatch_object_t v69;
  void *v70[2];
  unint64_t v71;
  _QWORD v72[6];
  std::__shared_weak_count *v73;
  void *v74;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v77;
  const void *v78;
  void *v79[2];
  char v80;
  _QWORD aBlock[6];
  std::__shared_weak_count *v82;
  void *v83;
  __int128 __dst;
  unint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 72), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    v86 = 0;
    v87 = 0;
    v10 = *(std::__shared_weak_count **)(v1 + 280);
    if (!v10)
      goto LABEL_109;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    v86 = 0;
    v87 = 0;
    v10 = *(std::__shared_weak_count **)(v1 + 280);
    if (!v10)
      goto LABEL_109;
  }
  v87 = std::__shared_weak_count::lock(v10);
  if (!v87)
    goto LABEL_114;
  v11 = *(_QWORD *)(v1 + 272);
  v86 = v11;
  if (v11)
  {
    v12 = abm::kCommandSetPowerDownMessageList[0];
    v13 = strlen(abm::kCommandSetPowerDownMessageList[0]);
    if (v13 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v16 = v13 | 7;
      v17 = v16 + 1;
      p_dst = (__int128 *)operator new(v16 + 1);
      *((_QWORD *)&__dst + 1) = v14;
      v85 = v17 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v85) = v13;
      p_dst = &__dst;
      if (!v13)
        goto LABEL_21;
    }
    memmove(p_dst, v12, v14);
LABEL_21:
    *((_BYTE *)p_dst + v14) = 0;
    v18 = MEMORY[0x24BDAC760];
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_24_1;
    aBlock[4] = v1;
    aBlock[5] = v3;
    v82 = v5;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
    v20 = _Block_copy(aBlock);
    v83 = v20;
    ServiceManager::registerCommandHandler(v11, (uint64_t)&__dst, &v83);
    if (v20)
      _Block_release(v20);
    if (SHIBYTE(v85) < 0)
      operator delete((void *)__dst);
    v80 = 9;
    v78 = 0;
    strcpy((char *)v79, "power.mgr");
    AppleBasebandManager::create();
    v21 = __dst;
    __dst = 0uLL;
    v22 = *(std::__shared_weak_count **)(v1 + 112);
    *(_OWORD *)(v1 + 104) = v21;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    if (!*((_QWORD *)&__dst + 1))
      goto LABEL_36;
    v26 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      v28 = v78;
      if (!v78)
      {
LABEL_38:
        if (v80 < 0)
          operator delete(v79[0]);
        v29 = (const void *)*MEMORY[0x24BE05420];
        v30 = strlen((const char *)*MEMORY[0x24BE05420]);
        if (v30 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v31 = (void *)v30;
        if (v30 >= 0x17)
        {
          v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v30 | 7) != 0x17)
            v33 = v30 | 7;
          v34 = v33 + 1;
          v32 = operator new(v33 + 1);
          __p[1] = v31;
          v77 = v34 | 0x8000000000000000;
          __p[0] = v32;
        }
        else
        {
          HIBYTE(v77) = v30;
          v32 = __p;
          if (!v30)
            goto LABEL_48;
        }
        memmove(v32, v29, (size_t)v31);
LABEL_48:
        *((_BYTE *)v31 + (_QWORD)v32) = 0;
        v72[0] = v18;
        v72[1] = 1174405120;
        v72[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_25;
        v72[3] = &__block_descriptor_tmp_27_1;
        v72[4] = v1;
        v72[5] = v3;
        v73 = v5;
        do
          v35 = __ldxr(p_shared_weak_owners);
        while (__stxr(v35 + 1, p_shared_weak_owners));
        v36 = _Block_copy(v72);
        v37 = *(NSObject **)(v1 + 88);
        if (v37)
          dispatch_retain(*(dispatch_object_t *)(v1 + 88));
        v74 = v36;
        object = v37;
        AppleBasebandManager::setEventHandler();
        if (object)
          dispatch_release(object);
        if (v74)
          _Block_release(v74);
        if (SHIBYTE(v77) < 0)
          operator delete(__p[0]);
        v38 = (const void *)*MEMORY[0x24BE05428];
        v39 = strlen((const char *)*MEMORY[0x24BE05428]);
        if (v39 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v40 = (void *)v39;
        if (v39 >= 0x17)
        {
          v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v39 | 7) != 0x17)
            v42 = v39 | 7;
          v43 = v42 + 1;
          v41 = operator new(v42 + 1);
          v70[1] = v40;
          v71 = v43 | 0x8000000000000000;
          v70[0] = v41;
        }
        else
        {
          HIBYTE(v71) = v39;
          v41 = v70;
          if (!v39)
            goto LABEL_66;
        }
        memmove(v41, v38, (size_t)v40);
LABEL_66:
        *((_BYTE *)v40 + (_QWORD)v41) = 0;
        v66[0] = v18;
        v66[1] = 1174405120;
        v66[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_28;
        v66[3] = &__block_descriptor_tmp_29;
        v66[4] = v1;
        v66[5] = v3;
        v67 = v5;
        do
          v44 = __ldxr(p_shared_weak_owners);
        while (__stxr(v44 + 1, p_shared_weak_owners));
        v45 = _Block_copy(v66);
        v46 = *(NSObject **)(v1 + 88);
        if (v46)
          dispatch_retain(*(dispatch_object_t *)(v1 + 88));
        v68 = v45;
        v69 = v46;
        AppleBasebandManager::setEventHandler();
        if (v69)
          dispatch_release(v69);
        if (v68)
          _Block_release(v68);
        if (SHIBYTE(v71) < 0)
          operator delete(v70[0]);
        AppleBasebandManager::eventsOn(*(AppleBasebandManager **)(v1 + 104));
        v47 = *(_QWORD *)(v1 + 136);
        v62[0] = v18;
        v62[1] = 1174405120;
        v62[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_30;
        v62[3] = &__block_descriptor_tmp_32_0;
        v62[4] = v3;
        v63 = v5;
        do
          v48 = __ldxr(p_shared_weak_owners);
        while (__stxr(v48 + 1, p_shared_weak_owners));
        v64 = v86;
        v65 = v87;
        if (v87)
        {
          v49 = (unint64_t *)&v87->__shared_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        v51 = _Block_copy(v62);
        v52 = *(NSObject **)(v1 + 88);
        if (v52)
          dispatch_retain(*(dispatch_object_t *)(v1 + 88));
        if (v51)
        {
          v53 = _Block_copy(v51);
          v54 = *(const void **)(v47 + 104);
          *(_QWORD *)(v47 + 104) = v53;
          if (!v54)
            goto LABEL_88;
        }
        else
        {
          v54 = *(const void **)(v47 + 104);
          *(_QWORD *)(v47 + 104) = 0;
          if (!v54)
          {
LABEL_88:
            if (v52)
              dispatch_retain(v52);
            v55 = *(NSObject **)(v47 + 112);
            *(_QWORD *)(v47 + 112) = v52;
            if (v55)
              dispatch_release(v55);
            if (v52)
              dispatch_release(v52);
            if (v51)
              _Block_release(v51);
            v56 = v65;
            if (v65)
            {
              v57 = (unint64_t *)&v65->__shared_owners_;
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            if (v63)
              std::__shared_weak_count::__release_weak(v63);
            if (v67)
              std::__shared_weak_count::__release_weak(v67);
            if (v73)
              std::__shared_weak_count::__release_weak(v73);
            if (v82)
              std::__shared_weak_count::__release_weak(v82);
            goto LABEL_109;
          }
        }
        _Block_release(v54);
        goto LABEL_88;
      }
    }
    else
    {
LABEL_36:
      v28 = v78;
      if (!v78)
        goto LABEL_38;
    }
    CFRelease(v28);
    goto LABEL_38;
  }
LABEL_109:
  v59 = v87;
  if (v87)
  {
    v60 = (unint64_t *)&v87->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
LABEL_114:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_24B8BC76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v49;

  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  if (a38)
    std::__shared_weak_count::__release_weak(a38);
  v49 = *(std::__shared_weak_count **)(v47 - 160);
  if (v49)
  {
    std::__shared_weak_count::__release_weak(v49);
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v47 - 120);
    std::__shared_weak_count::__release_weak(v46);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v47 - 120);
  std::__shared_weak_count::__release_weak(v46);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_2(_QWORD *a1, void **a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  xpc_object_t object;
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x24BDAC760];
      v14[1] = 1174405120;
      v14[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_3;
      v14[3] = &__block_descriptor_tmp_22_1;
      v10 = *a2;
      v14[4] = v7;
      object = v10;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (!*a3)
          goto LABEL_9;
      }
      else
      {
        object = xpc_null_create();
        v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlock = v11;
          ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v7 + 72), (uint64_t)v14);
          if (aBlock)
            _Block_release(aBlock);
          xpc_release(object);
          object = 0;
          goto LABEL_12;
        }
      }
      v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_3(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  xpc_object_t object;
  xpc_object_t v9;

  v3 = a1[4];
  v2 = (void *)a1[5];
  v4 = *(_QWORD *)(v3 + 136);
  object = v2;
  if (v2)
    xpc_retain(v2);
  else
    object = xpc_null_create();
  PowerStats::setPowerdownMessage(v4, &object);
  xpc_release(object);
  object = 0;
  v5 = xpc_null_create();
  v6 = a1[6];
  v9 = v5;
  v7 = xpc_null_create();
  (*(void (**)(uint64_t, _QWORD, xpc_object_t *))(v6 + 16))(v6, 0, &v9);
  xpc_release(v9);
  xpc_release(v7);
}

void sub_24B8BCA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_25(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        PowerStats::dumpState(*(os_log_t **)(v3 + 136));
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_24B8BCB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_28(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  os_log_t *v9;
  _QWORD *v10;
  NSObject *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  NSObject *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint8_t buf[4];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        v9 = (os_log_t *)v3[17];
        if (v9)
          PowerStats::dumpState(v9);
        v10 = (_QWORD *)v3[25];
        if (v10 != v3 + 26)
        {
          do
          {
            v11 = v3[5];
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              v12 = v10 + 4;
              if (*((char *)v10 + 55) < 0)
                v12 = (_QWORD *)*v12;
              *(_DWORD *)buf = 136315138;
              v22 = v12;
              _os_log_impl(&dword_24B855000, v11, OS_LOG_TYPE_DEFAULT, "#I Pending power assertion '%s'", buf, 0xCu);
            }
            v13 = (_QWORD *)v10[1];
            if (v13)
            {
              do
              {
                v14 = v13;
                v13 = (_QWORD *)*v13;
              }
              while (v13);
            }
            else
            {
              do
              {
                v14 = (_QWORD *)v10[2];
                v15 = *v14 == (_QWORD)v10;
                v10 = v14;
              }
              while (!v15);
            }
            v10 = v14;
          }
          while (v14 != v3 + 26);
        }
        v16 = (_QWORD *)v3[31];
        if (v16 != v3 + 32)
        {
          do
          {
            v17 = v3[5];
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              v18 = v16 + 4;
              if (*((char *)v16 + 55) < 0)
                v18 = (_QWORD *)*v18;
              *(_DWORD *)buf = 136315138;
              v22 = v18;
              _os_log_impl(&dword_24B855000, v17, OS_LOG_TYPE_DEFAULT, "#I Deferred work due to sleep '%s'", buf, 0xCu);
            }
            v19 = (_QWORD *)v16[1];
            if (v19)
            {
              do
              {
                v20 = v19;
                v19 = (_QWORD *)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                v20 = (_QWORD *)v16[2];
                v15 = *v20 == (_QWORD)v16;
                v16 = v20;
              }
              while (!v15);
            }
            v16 = v20;
          }
          while (v20 != v3 + 32);
        }
      }
    }
  }
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_30(_QWORD *a1, xpc_object_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  void *v10;
  void **v11;
  xpc_object_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  void *v18;
  void *__dst[2];
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v3 = (std::__shared_weak_count *)a1[5];
  if (!v3)
    return;
  v5 = std::__shared_weak_count::lock(v3);
  v22 = v5;
  if (!v5)
    return;
  v6 = v5;
  v21 = a1[4];
  if (!v21 || (v7 = a1[6]) == 0)
  {
LABEL_18:
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    return;
  }
  v8 = (const void *)*MEMORY[0x24BE051F0];
  v9 = strlen((const char *)*MEMORY[0x24BE051F0]);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v13 = v9 | 7;
    v14 = v13 + 1;
    v11 = (void **)operator new(v13 + 1);
    __dst[1] = v10;
    v20 = v14 | 0x8000000000000000;
    __dst[0] = v11;
LABEL_13:
    memmove(v11, v8, (size_t)v10);
    *((_BYTE *)v10 + (_QWORD)v11) = 0;
    v12 = *a2;
    v18 = v12;
    if (v12)
      goto LABEL_9;
    goto LABEL_14;
  }
  HIBYTE(v20) = v9;
  v11 = __dst;
  if (v9)
    goto LABEL_13;
  LOBYTE(__dst[0]) = 0;
  v12 = *a2;
  v18 = v12;
  if (v12)
  {
LABEL_9:
    xpc_retain(v12);
    goto LABEL_15;
  }
LABEL_14:
  v12 = xpc_null_create();
  v18 = v12;
LABEL_15:
  v17 = 0;
  ServiceManager::runCommand(v7, (uint64_t)__dst, &v18, &v17);
  xpc_release(v12);
  v18 = 0;
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
  v6 = v22;
  if (v22)
    goto LABEL_18;
}

void sub_24B8BCF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  xpc_release(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE48c42_ZTSNSt3__110shared_ptrI14ServiceManagerEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE48c42_ZTSNSt3__110shared_ptrI14ServiceManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

uint64_t dispatch::callback<void({block_pointer})(xpc::dict)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN12PowerManager5State8shutdownEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (std::__shared_weak_count *)v1[10];
  if (!v2 || (v3 = v1[9], (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = v1;
  v7 = v1[11];
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>(PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = (std::__shared_weak_count *)v1[14];
    v1[13] = 0;
    v1[14] = 0;
    if (!v12)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v12 = (std::__shared_weak_count *)v1[14];
    v1[13] = 0;
    v1[14] = 0;
    if (!v12)
      return;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>(PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint8_t buf[4];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  v4 = (_QWORD *)v3[25];
  v5 = v3 + 26;
  if (v4 != v3 + 26)
  {
    do
    {
      v6 = v3[5];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = v4 + 4;
        if (*((char *)v4 + 55) < 0)
          v7 = (_QWORD *)*v7;
        *(_DWORD *)buf = 136315138;
        v19 = v7;
        _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I Forcefully releasing power assertion '%s'", buf, 0xCu);
      }
      v8 = (_QWORD *)v4[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v4[2];
          v10 = *v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v10);
      }
      v4 = v9;
    }
    while (v9 != v5);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(v3[26]);
  v11 = v3[29];
  v3[25] = v5;
  v3[26] = 0;
  v3[27] = 0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(v11);
  v3[28] = v3 + 29;
  v3[29] = 0;
  v3[30] = 0;
  *(_BYTE *)(v3[17] + 88) = 0;
  v12 = v3[20];
  if (v12)
  {
    v13 = v3[5];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_24B855000, v13, OS_LOG_TYPE_DEFAULT, "#I No more assertions held, acknowledging previous notification", buf, 2u);
      v12 = v3[20];
    }
    (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v12, 1);
    v14 = (const void *)v3[20];
    v3[20] = 0;
    if (v14)
      _Block_release(v14);
  }
  operator delete(v2);
  v15 = (std::__shared_weak_count *)a1[2];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(a1);
}

void sub_24B8BD3AC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<PowerManager *,std::shared_ptr<PowerManager>::__shared_ptr_default_delete<PowerManager,PowerManager>,std::allocator<PowerManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<PowerManager *,std::shared_ptr<PowerManager>::__shared_ptr_default_delete<PowerManager,PowerManager>,std::allocator<PowerManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<PowerManager *,std::shared_ptr<PowerManager>::__shared_ptr_default_delete<PowerManager,PowerManager>,std::allocator<PowerManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B953110)
    return a1 + 24;
  if (((v3 & 0x800000024B953110 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B953110))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B953110 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t __cxx_global_var_init_4()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_24B855000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance, &dword_24B855000);
  }
  return result;
}

_QWORD *ABMServer::create_default_global@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  ABMServerInternal *v4;
  _QWORD *result;

  v3 = operator new(0x10uLL);
  *v3 = 0xAAAAAAAAAAAAAAAALL;
  v3[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v4);
  std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(v3, (uint64_t)v4);
  *a1 = v3;
  result = operator new(0x20uLL);
  *result = off_251CBC658;
  result[1] = 0;
  result[2] = 0;
  result[3] = v3;
  a1[1] = result;
  return result;
}

void sub_24B8BD56C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = (std::__shared_weak_count *)v1[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ABMServer::ABMServer(ABMServer *this)
{
  ABMServerInternal *v2;

  *(_QWORD *)this = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)this + 1) = 0xAAAAAAAAAAAAAAAALL;
  v2 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v2);
  std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(this, (uint64_t)v2);
}

{
  ABMServerInternal *v2;

  *(_QWORD *)this = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)this + 1) = 0xAAAAAAAAAAAAAAAALL;
  v2 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v2);
  std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(this, (uint64_t)v2);
}

void sub_24B8BD624(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24B8BD674(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *ABMServerInternal::create@<X0>(_QWORD *a1@<X8>)
{
  ABMServerInternal *v3;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  v3 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v3);
  return std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(a1, (uint64_t)v3);
}

void sub_24B8BD6C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ABMServer::init(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::string __p;

  v4 = *a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  ABMServerInternal::init(v4, (uint64_t)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_24B8BD75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v7[6];
  std::string __p;
  _QWORD *v9;
  _QWORD block[6];

  v4 = a1 + 8;
  v5 = MEMORY[0x24BDAC760];
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1174405120;
  v7[2] = ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke;
  v7[3] = &__block_descriptor_tmp_6_1;
  v7[4] = a1;
  v7[5] = a3;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v9 = v7;
  block[0] = v5;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_44_0;
  block[4] = v4;
  block[5] = &v9;
  v6 = *(NSObject **)(a1 + 24);
  if (*(_QWORD *)(a1 + 32))
  {
    dispatch_async_and_wait(v6, block);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  dispatch_sync(v6, block);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

BOOL ABMServer::start(ABMServerInternal **this, NSObject *a2)
{
  return ABMServerInternal::start(*this, a2);
}

BOOL ABMServerInternal::start(ABMServerInternal *this, NSObject *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  _QWORD v10[6];
  dispatch_group_t group;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint8_t buf[8];
  uint64_t v18;
  _QWORD *(*v19)(uint64_t);
  void *v20;
  char *v21;
  _QWORD *v22;

  v4 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I Request to start server", buf, 2u);
  }
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
    dispatch_release(a2);
  }
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  v5 = MEMORY[0x24BDAC760];
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1174405120;
  v10[2] = ___ZN17ABMServerInternal5startEP16dispatch_group_s_block_invoke;
  v10[3] = &unk_251CBC2A8;
  v10[5] = this;
  group = a2;
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_group_enter(a2);
  }
  v10[4] = &v12;
  v16 = v10;
  *(_QWORD *)buf = v5;
  v18 = 0x40000000;
  v19 = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v20 = &__block_descriptor_tmp_44_0;
  v21 = (char *)this + 8;
  v22 = &v16;
  v6 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4))
  {
    dispatch_async_and_wait(v6, buf);
    v7 = *((unsigned __int8 *)v13 + 24);
    v8 = group;
    if (!group)
      goto LABEL_13;
  }
  else
  {
    dispatch_sync(v6, buf);
    v7 = *((unsigned __int8 *)v13 + 24);
    v8 = group;
    if (!group)
      goto LABEL_13;
  }
  dispatch_group_leave(v8);
  if (group)
    dispatch_release(group);
LABEL_13:
  _Block_object_dispose(&v12, 8);
  if (a2)
  {
    dispatch_group_leave(a2);
    dispatch_release(a2);
  }
  return v7 != 0;
}

BOOL ABMServer::stop(ABMServerInternal **this, NSObject *a2)
{
  return ABMServerInternal::stop(*this, a2);
}

BOOL ABMServerInternal::stop(ABMServerInternal *this, NSObject *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  _QWORD v10[6];
  dispatch_group_t group;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint8_t buf[8];
  uint64_t v18;
  _QWORD *(*v19)(uint64_t);
  void *v20;
  char *v21;
  _QWORD *v22;

  v4 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I Request to stop server", buf, 2u);
  }
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
    dispatch_release(a2);
  }
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  v5 = MEMORY[0x24BDAC760];
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1174405120;
  v10[2] = ___ZN17ABMServerInternal4stopEP16dispatch_group_s_block_invoke;
  v10[3] = &unk_251CBC2E0;
  v10[5] = this;
  group = a2;
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_group_enter(a2);
  }
  v10[4] = &v12;
  v16 = v10;
  *(_QWORD *)buf = v5;
  v18 = 0x40000000;
  v19 = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v20 = &__block_descriptor_tmp_44_0;
  v21 = (char *)this + 8;
  v22 = &v16;
  v6 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4))
  {
    dispatch_async_and_wait(v6, buf);
    v7 = *((unsigned __int8 *)v13 + 24);
    v8 = group;
    if (!group)
      goto LABEL_13;
  }
  else
  {
    dispatch_sync(v6, buf);
    v7 = *((unsigned __int8 *)v13 + 24);
    v8 = group;
    if (!group)
      goto LABEL_13;
  }
  dispatch_group_leave(v8);
  if (group)
    dispatch_release(group);
LABEL_13:
  _Block_object_dispose(&v12, 8);
  if (a2)
  {
    dispatch_group_leave(a2);
    dispatch_release(a2);
  }
  return v7 != 0;
}

BOOL ABMServer::shutdown(ABMServerInternal **this, NSObject *a2)
{
  return ABMServerInternal::shutdown(*this, a2);
}

BOOL ABMServerInternal::shutdown(ABMServerInternal *this, NSObject *a2)
{
  NSObject *v4;
  NSObject *v5;
  dispatch_group_s *v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  _QWORD v12[6];
  dispatch_group_t group;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  uint8_t buf[8];
  uint64_t v20;
  _QWORD *(*v21)(uint64_t);
  void *v22;
  char *v23;
  _QWORD *v24;

  v4 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I Request to shutdown server", buf, 2u);
  }
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
    dispatch_release(a2);
LABEL_5:
    v5 = 0;
    goto LABEL_8;
  }
  v6 = (dispatch_group_s *)dispatch_group_create();
  a2 = v6;
  if (!v6)
    goto LABEL_5;
  dispatch_retain((dispatch_object_t)v6);
  dispatch_group_enter(a2);
  v5 = a2;
LABEL_8:
  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  v7 = MEMORY[0x24BDAC760];
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 1174405120;
  v12[2] = ___ZN17ABMServerInternal8shutdownEP16dispatch_group_s_block_invoke;
  v12[3] = &unk_251CBC318;
  v12[4] = &v14;
  v12[5] = this;
  group = a2;
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_group_enter(a2);
  }
  v18 = v12;
  *(_QWORD *)buf = v7;
  v20 = 0x40000000;
  v21 = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v22 = &__block_descriptor_tmp_44_0;
  v23 = (char *)this + 8;
  v24 = &v18;
  v8 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4))
  {
    dispatch_async_and_wait(v8, buf);
    v9 = *((unsigned __int8 *)v15 + 24);
    v10 = group;
    if (!group)
      goto LABEL_16;
  }
  else
  {
    dispatch_sync(v8, buf);
    v9 = *((unsigned __int8 *)v15 + 24);
    v10 = group;
    if (!group)
      goto LABEL_16;
  }
  dispatch_group_leave(v10);
  if (group)
    dispatch_release(group);
LABEL_16:
  _Block_object_dispose(&v14, 8);
  if (v5)
    dispatch_release(v5);
  if (a2)
  {
    dispatch_group_leave(a2);
    dispatch_release(a2);
  }
  return v9 != 0;
}

void ABMServer::broadcast(uint64_t *a1, uint64_t a2, const void **a3, const void **a4)
{
  uint64_t v6;
  const void *v7;
  void *v8;
  void *v9;
  const void *v10;
  std::string v11;

  v6 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v7 = *a3;
    v10 = v7;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  v11 = *(std::string *)a2;
  v7 = *a3;
  v10 = v7;
  if (v7)
LABEL_5:
    CFRetain(v7);
LABEL_6:
  if (*a4)
    v8 = _Block_copy(*a4);
  else
    v8 = 0;
  v9 = v8;
  ABMServerInternal::broadcast(v6, (uint64_t)&v11, &v10, &v9);
  if (v8)
    _Block_release(v8);
  if (v7)
    CFRelease(v7);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_24B8BDE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  const void *v16;

  if (v16)
    _Block_release(v16);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ABMServerInternal::broadcast(uint64_t a1, uint64_t a2, const void **a3, void **a4)
{
  const void *v7;
  void *v8;
  _QWORD v9[5];
  std::string __p;
  CFTypeRef cf;
  void *aBlock;

  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1174405120;
  v9[2] = ___ZN17ABMServerInternal9broadcastENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_23_1;
  v9[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v7 = *a3;
    cf = v7;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  __p = *(std::string *)a2;
  v7 = *a3;
  cf = v7;
  if (v7)
LABEL_5:
    CFRetain(v7);
LABEL_6:
  v8 = *a4;
  if (*a4)
    v8 = _Block_copy(v8);
  aBlock = v8;
  ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v9);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void ABMServerInternal::ABMServerInternal(ABMServerInternal *this)
{
  unsigned __int8 v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *shared_owners;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE v28[16];
  xpc_object_t object;
  __int128 __p;
  void (*v31)(uint64_t);
  void *v32;
  uint64_t *v33;
  _QWORD v34[2];

  *(_QWORD *)this = &off_251CBC1E0;
  *((_QWORD *)this + 9) = &unk_251CBC220;
  HIBYTE(v31) = 11;
  strcpy((char *)&__p, "server.main");
  object = xpc_null_create();
  v34[0] = 0;
  ctu::XpcServer::XpcServer();
  xpc_release(object);
  object = 0;
  *(_QWORD *)this = &off_251CBC1E0;
  *((_QWORD *)this + 9) = &unk_251CBC220;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v28, "com.apple.telephony.abm", "server.main");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  *(_QWORD *)&__p = MEMORY[0x24BDAC760];
  *((_QWORD *)&__p + 1) = 0x40000000;
  v31 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v32 = &__block_descriptor_tmp_13_5;
  v33 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v4 = GetABMLogServer(void)::sLogServer;
    v3 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
    v4 = GetABMLogServer(void)::sLogServer;
    v3 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_6;
  }
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
LABEL_6:
  *((_QWORD *)this + 9) = off_251CBC618;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&__p);
  *((_QWORD *)this + 10) = &unk_251CB85F0;
  *((_QWORD *)this + 16) = v4;
  *((_QWORD *)this + 17) = v3;
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v34);
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v34);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v28);
  *(_QWORD *)this = &off_251CBC1E0;
  *((_QWORD *)this + 9) = &unk_251CBC220;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 18) = (char *)this + 152;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 48) = 3;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  v10 = (std::__shared_weak_count *)operator new(0x38uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_251CBC6F8;
  Registry::Registry((Registry *)&v10[1]);
  *((_QWORD *)this + 28) = v12;
  *((_QWORD *)this + 29) = v10;
  shared_owners = (std::__shared_weak_count *)v10[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_27;
    do
      v14 = __ldxr(v11);
    while (__stxr(v14 + 1, v11));
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v10[1].__vftable = (std::__shared_weak_count_vtbl *)&v10[1];
    v10[1].__shared_owners_ = (uint64_t)v10;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v17 = __ldxr(v11);
    while (__stxr(v17 + 1, v11));
    v18 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v10[1].__vftable = (std::__shared_weak_count_vtbl *)&v10[1];
    v10[1].__shared_owners_ = (uint64_t)v10;
  }
  do
    v20 = __ldaxr(v11);
  while (__stlxr(v20 - 1, v11));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_27:
  _ZNSt3__115allocate_sharedB8ne180100I16ABMServerFactoryNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)&__p);
  v21 = __p;
  *((_OWORD *)this + 15) = __p;
  if (*((_QWORD *)&v21 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = (char *)operator new(0x28uLL);
  *((_QWORD *)v24 + 2) = 0;
  *(_QWORD *)v24 = off_251CBD590;
  *((_QWORD *)v24 + 1) = 0;
  if (*((_QWORD *)&v21 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    *(_OWORD *)(v24 + 24) = v21;
    *((_QWORD *)this + 32) = v24 + 24;
    *((_QWORD *)this + 33) = v24;
    do
      v27 = __ldaxr(v25);
    while (__stlxr(v27 - 1, v25));
    if (!v27)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v21 + 1) + 16))(*((_QWORD *)&v21 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v21 + 1));
    }
  }
  else
  {
    *((_QWORD *)v24 + 3) = v21;
    *((_QWORD *)v24 + 4) = 0;
    *((_QWORD *)this + 32) = v24 + 24;
    *((_QWORD *)this + 33) = v24;
  }
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  ctu::LoggerCommonBase::setLogLevel();
}

void sub_24B8BE42C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  dispatch_group_t *v6;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 + 288);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 + 240);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 + 224);
  if (*v6)
  {
    dispatch_group_leave(*v6);
    if (*v6)
      dispatch_release(*v6);
  }
  if (*(char *)(v1 + 191) < 0)
    operator delete(*v5);
  std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*(_QWORD **)(v1 + 152));
  *(_QWORD *)(v1 + 72) = v4;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  ctu::XpcServer::~XpcServer((ctu::XpcServer *)v1);
  _Unwind_Resume(a1);
}

void sub_24B8BE4DC(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v2 - 80));
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  JUMPOUT(0x24B8BE4CCLL);
}

void sub_24B8BE504()
{
  JUMPOUT(0x24B8BE4CCLL);
}

void sub_24B8BE510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  NSObject *v23;

  v23 = *(NSObject **)(v21 - 80);
  if (v23)
    dispatch_release(v23);
  xpc_release(object);
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x24B8BE4D4);
}

const char *ABMServerInternal::getName(ABMServerInternal *this)
{
  return "server.main";
}

void xpc::connection::~connection(xpc_object_t *this)
{
  xpc_release(*this);
  *this = 0;
}

void ABMServerInternal::~ABMServerInternal(ABMServerInternal *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  NSObject *v18;

  *(_QWORD *)this = &off_251CBC1E0;
  *((_QWORD *)this + 9) = &unk_251CBC220;
  ABMServerInternal::finishShutdown_sync(this);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *((_QWORD *)this + 25);
  if (v17)
  {
    dispatch_group_leave(v17);
    v18 = *((_QWORD *)this + 25);
    if (v18)
      dispatch_release(v18);
  }
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*((_QWORD **)this + 19));
  *((_QWORD *)this + 9) = off_251CBC618;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  ctu::XpcServer::~XpcServer(this);
}

{
  void *v1;

  ABMServerInternal::~ABMServerInternal(this);
  operator delete(v1);
}

void ABMServerInternal::finishShutdown_sync(ABMServerInternal *this)
{
  _QWORD *v2;
  NSObject *v3;
  xpc_connection_t *Listener_sync;
  NSObject *v5;
  uint8_t v6[16];
  xpc_object_t object;
  dispatch_group_t group;

  v2 = (_QWORD *)((char *)this + 152);
  std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*((_QWORD **)this + 19));
  *((_QWORD *)this + 18) = v2;
  *((_QWORD *)this + 20) = 0;
  *v2 = 0;
  group = (dispatch_group_t)0xAAAAAAAAAAAAAAAALL;
  ServiceManager::shutdownGlobalServices(*((ServiceManager **)this + 36), &group);
  v3 = group;
  dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
  Listener_sync = (xpc_connection_t *)ctu::XpcServer::getListener_sync(this);
  xpc_connection_cancel(*Listener_sync);
  object = xpc_null_create();
  ctu::XpcServer::setListener_sync();
  xpc_release(object);
  object = 0;
  ABMServerInternal::changeState_sync(this, 5);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 34) + 88))(*((_QWORD *)this + 34), 5);
  v5 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_24B855000, v5, OS_LOG_TYPE_DEFAULT, "#I --------- ABM shutdown completed ---------", v6, 2u);
  }
  ABMServerInternal::stopRunLoop_sync(this);
  if (v3)
    dispatch_release(v3);
}

void sub_24B8BE82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  NSObject *v11;

  xpc_release(object);
  if (v11)
    dispatch_release(v11);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'ABMServerInternal::~ABMServerInternal(ABMServerInternal *this)
{
  ABMServerInternal::~ABMServerInternal((ABMServerInternal *)((char *)this - 72));
}

{
  void *v1;

  ABMServerInternal::~ABMServerInternal((ABMServerInternal *)((char *)this - 72));
  operator delete(v1);
}

void ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  capabilities::radio *v9;
  unint64_t *v10;
  unint64_t v11;
  __CFNotificationCenter *DarwinNotifyCenter;
  __int128 *v13;
  void **v14;
  char v15;
  __int128 v16;
  void *v17;
  size_t v18;
  NSObject *v19;
  void (***v20)(uint8_t *__return_ptr, _QWORD, uint64_t *);
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  void *v37;
  const void *v38;
  NSObject *v39;
  char v40;
  char v41;
  NSObject *v42;
  _BOOL8 v43;
  int v44;
  uint64_t v45;
  __int16 v46[6];
  int v47;
  _QWORD aBlock[5];
  uint64_t v49;
  std::__shared_weak_count *v50;
  xpc_object_t object;
  uint64_t v52[2];
  dispatch_group_t buf[3];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I Request to init server", (uint8_t *)buf, 2u);
  }
  v4 = *(_QWORD *)(v2 + 256);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(std::__shared_weak_count **)(v5 + 24);
  v52[0] = *(_QWORD *)(v5 + 16);
  v52[1] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  ABMServerRegistryBuilder::setupQMIServer(v4, (Registry **)(v2 + 224), v52);
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  capabilities::radio::vendor(v9);
  ABMServerInternal::startRunLoop_sync((ABMServerInternal *)v2);
  object = xpc_connection_create_mach_service(kABMDefaultServiceName[0], 0, 1uLL);
  if (!object)
    object = xpc_null_create();
  ctu::XpcServer::setListener_sync();
  xpc_release(object);
  object = 0;
  ctu::XpcServer::startListener_sync((ctu::XpcServer *)v2);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAppleBasebandManagerDaemonReady"), 0, 0, 1u);
  v13 = (__int128 *)(a1 + 48);
  v14 = (void **)(v2 + 168);
  if (v2 + 168 != a1 + 48)
  {
    v15 = *(_BYTE *)(a1 + 71);
    if (*(char *)(v2 + 191) < 0)
    {
      if (v15 >= 0)
        v17 = (void *)(a1 + 48);
      else
        v17 = *(void **)(a1 + 48);
      if (v15 >= 0)
        v18 = *(unsigned __int8 *)(a1 + 71);
      else
        v18 = *(_QWORD *)(a1 + 56);
      std::string::__assign_no_alias<false>(v14, v17, v18);
    }
    else if ((*(_BYTE *)(a1 + 71) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v14, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
    else
    {
      v16 = *v13;
      *(_QWORD *)(v2 + 184) = *(_QWORD *)(a1 + 64);
      *(_OWORD *)v14 = v16;
    }
  }
  v19 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 71) < 0)
      v13 = *(__int128 **)v13;
    LODWORD(buf[0]) = 136315138;
    *(dispatch_group_t *)((char *)buf + 4) = (dispatch_group_t)v13;
    _os_log_impl(&dword_24B855000, v19, OS_LOG_TYPE_DEFAULT, "#I host: %s", (uint8_t *)buf, 0xCu);
  }
  ABMServerInternal::changeState_sync(v2, 3u);
  v21 = *(std::__shared_weak_count **)(v2 + 232);
  v20 = *(void (****)(uint8_t *__return_ptr, _QWORD, uint64_t *))(v2 + 240);
  v49 = *(_QWORD *)(v2 + 224);
  v50 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  (**v20)((uint8_t *)buf, v20, &v49);
  v24 = *(_OWORD *)buf;
  memset(buf, 0, 16);
  v25 = *(std::__shared_weak_count **)(v2 + 296);
  *(_OWORD *)(v2 + 288) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)buf[1];
  if (buf[1])
  {
    v29 = (unint64_t *)&buf[1][1];
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v50;
  if (v50)
  {
    v32 = (unint64_t *)&v50->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = *(_QWORD *)(v2 + 288);
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke_3;
  aBlock[3] = &__block_descriptor_tmp_10;
  aBlock[4] = v2;
  v35 = _Block_copy(aBlock);
  v36 = v35;
  if (!v35)
  {
    v38 = *(const void **)(v34 + 184);
    *(_QWORD *)(v34 + 184) = 0;
    if (!v38)
      goto LABEL_52;
    goto LABEL_51;
  }
  v37 = _Block_copy(v35);
  v38 = *(const void **)(v34 + 184);
  *(_QWORD *)(v34 + 184) = v37;
  if (v38)
LABEL_51:
    _Block_release(v38);
LABEL_52:
  if (v36)
    _Block_release(v36);
  (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 288) + 64))(*(_QWORD *)(v2 + 288));
  buf[0] = (dispatch_group_t)0xAAAAAAAAAAAAAAAALL;
  ServiceManager::initializeGlobalServices(*(ServiceManager **)(v2 + 288), buf);
  v39 = buf[0];
  dispatch_group_wait(buf[0], 0xFFFFFFFFFFFFFFFFLL);
  v47 = 6;
  v40 = (*(uint64_t (**)(_QWORD, int *))(**(_QWORD **)(v2 + 272) + 96))(*(_QWORD *)(v2 + 272), &v47);
  if (v47 == 3)
    v41 = v40;
  else
    v41 = 0;
  if ((v41 & 1) == 0)
  {
    v42 = *(NSObject **)(v2 + 112);
    v43 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
    if (v43)
    {
      v46[0] = 0;
      _os_log_impl(&dword_24B855000, v42, OS_LOG_TYPE_DEFAULT, "#I Previous shutdown was not clean", (uint8_t *)v46, 2u);
    }
    v44 = capabilities::radio::ice((capabilities::radio *)v43);
    v45 = 72;
    if (v44)
      v45 = 80;
    (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 272) + v45))(*(_QWORD *)(v2 + 272));
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 272) + 88))(*(_QWORD *)(v2 + 272), 3);
  }
  if (v39)
    dispatch_release(v39);
}

void sub_24B8BED14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, xpc_object_t object, char a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::startRunLoop_sync(ABMServerInternal *this)
{
  NSObject *v2;
  NSObject *v3;
  __int128 v4;
  _QWORD v5[5];
  dispatch_object_t object;
  pthread_attr_t buf;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__sig) = 0;
    _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Starting ABM RunLoop", (uint8_t *)&buf, 2u);
  }
  v3 = dispatch_group_create();
  dispatch_group_enter(v3);
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 1174405120;
  v5[2] = ___ZN17ABMServerInternal17startRunLoop_syncEv_block_invoke;
  v5[3] = &__block_descriptor_tmp_11_2;
  v5[4] = this;
  object = v3;
  if (v3)
    dispatch_retain(v3);
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&buf.__opaque[24] = v4;
  *(_OWORD *)&buf.__opaque[40] = v4;
  *(_OWORD *)&buf.__sig = v4;
  *(_OWORD *)&buf.__opaque[8] = v4;
  pthread_attr_init(&buf);
  pthread_attr_set_qos_class_np(&buf, QOS_CLASS_USER_INITIATED, 0);
  pthread_create((pthread_t *)this + 27, &buf, (void *(__cdecl *)(void *))sServerRunLoopMain, v5);
  dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  if (object)
    dispatch_release(object);
  if (v3)
    dispatch_release(v3);
}

void sub_24B8BEECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  NSObject *v14;

  if (object)
  {
    dispatch_release(object);
    if (!v14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  dispatch_release(v14);
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::changeState_sync(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  char *v5;
  NSObject *v6;
  dispatch_object_t v7;
  uint8_t buf[4];
  char *v9;
  __int16 v10;
  char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = *(NSObject **)(a1 + 112);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = to_string(*(_DWORD *)(a1 + 192));
    *(_DWORD *)buf = 136315394;
    v9 = v5;
    v10 = 2080;
    v11 = to_string(a2);
    _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I State change: %s -> %s", buf, 0x16u);
  }
  *(_DWORD *)(a1 + 192) = a2;
  v6 = *(NSObject **)(a1 + 200);
  if (v6)
  {
    v7 = *(dispatch_object_t *)(a1 + 200);
    dispatch_retain(v6);
    dispatch_group_enter(v6);
    ABMServerInternal::checkShutdown_sync((ABMServerInternal *)a1, &v7);
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
}

void sub_24B8BEFFC(_Unwind_Exception *a1)
{
  NSObject *v1;

  dispatch_group_leave(v1);
  dispatch_release(v1);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke_3(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  _QWORD *v6;
  void *v7;
  void *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  char *v13;
  std::string *v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  const void *v20;
  std::string __p;
  void *aBlock[2];

  v6 = *(_QWORD **)(a1 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v7 = *a3;
    aBlock[0] = v7;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  __p = *(std::string *)a2;
  v7 = *a3;
  aBlock[0] = v7;
  if (v7)
LABEL_5:
    CFRetain(v7);
LABEL_6:
  v8 = *a4;
  if (*a4)
    v8 = _Block_copy(v8);
  aBlock[1] = v8;
  v9 = (std::__shared_weak_count *)v6[2];
  if (!v9 || (v10 = v6[1], (v11 = std::__shared_weak_count::lock(v9)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = v6;
  v14 = (std::string *)(v13 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v13 + 3) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *((_OWORD *)v13 + 2) = *(_OWORD *)aBlock;
  aBlock[0] = 0;
  aBlock[1] = 0;
  v15 = v6[3];
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = operator new(0x18uLL);
  *v18 = v13;
  v18[1] = v10;
  v18[2] = v12;
  dispatch_async_f(v15, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableINS1_9XpcServerEE15execute_wrappedIZZZN17ABMServerInternal4initENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEERKN3abm9OverridesEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISJ_NS7_14default_deleteISJ_EEEEENUlPvE_8__invokeESS_);
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v20 = aBlock[1];
    if (!aBlock[1])
      goto LABEL_22;
    goto LABEL_21;
  }
  v20 = aBlock[1];
  if (aBlock[1])
LABEL_21:
    _Block_release(v20);
LABEL_22:
  if (aBlock[0])
    CFRelease(aBlock[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void __copy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 48);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void ___ZN17ABMServerInternal5startEP16dispatch_group_s_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  void *__dst[2];
  unint64_t v13;

  v1 = a1[5];
  v2 = *(_DWORD *)(v1 + 192);
  if (v2 > 5)
    return;
  if (((1 << v2) & 0x35) != 0)
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
    return;
  }
  if (v2 == 1)
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
    return;
  }
  ABMServerInternal::changeState_sync(a1[5], 0);
  v4 = (const void *)*MEMORY[0x24BE05150];
  v5 = strlen((const char *)*MEMORY[0x24BE05150]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(v13) = v5;
    v7 = __dst;
    if (!v5)
      goto LABEL_15;
  }
  memmove(v7, v4, (size_t)v6);
LABEL_15:
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  ABMServerInternal::broadcastServerState_sync(v1, (uint64_t)__dst);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  v10 = a1[6];
  v11 = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(v10);
  }
  ABMServerInternal::start_sync(v1, &v11);
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
  }
}

void sub_24B8BF3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  NSObject *v15;

  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServerInternal::getState_sync(ABMServerInternal *this)
{
  return *((unsigned int *)this + 48);
}

void ABMServerInternal::broadcastServerState_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v6;
  __CFDictionary *v7;
  const void *v8;
  size_t v9;
  void *v10;
  void **v11;
  CFTypeRef v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeID v15;
  const void *v16;
  void *v17;
  ctu *v18;
  void *__dst[2];
  unint64_t v20;
  CFTypeRef cf;
  std::string v22;

  cf = 0;
  v4 = *MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v7 = Mutable;
  if (Mutable)
    cf = Mutable;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v22 = *(std::string *)a2;
  ctu::cf::insert<char const*,std::string>(v7, (const __CFString **)*MEMORY[0x24BE04F30], (uint64_t)&v22, v4, v6);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  v8 = (const void *)*MEMORY[0x24BE052A8];
  v9 = strlen((const char *)*MEMORY[0x24BE052A8]);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v13 = v9 | 7;
    v14 = v13 + 1;
    v11 = (void **)operator new(v13 + 1);
    __dst[1] = v10;
    v20 = v14 | 0x8000000000000000;
    __dst[0] = v11;
LABEL_16:
    memmove(v11, v8, (size_t)v10);
    *((_BYTE *)v10 + (_QWORD)v11) = 0;
    v12 = cf;
    if (!cf)
      goto LABEL_19;
    goto LABEL_17;
  }
  HIBYTE(v20) = v9;
  v11 = __dst;
  if (v9)
    goto LABEL_16;
  LOBYTE(__dst[0]) = 0;
  v12 = cf;
  if (!cf)
    goto LABEL_19;
LABEL_17:
  v15 = CFGetTypeID(v12);
  if (v15 == CFDictionaryGetTypeID())
  {
    v18 = (ctu *)v12;
    CFRetain(v12);
    v16 = v12;
    goto LABEL_20;
  }
LABEL_19:
  v16 = 0;
  v18 = 0;
LABEL_20:
  v17 = 0;
  ABMServerInternal::broadcast_sync(a1, (uint64_t)__dst, &v18, &v17);
  if (v16)
    CFRelease(v16);
  if (SHIBYTE(v20) < 0)
  {
    operator delete(__dst[0]);
    if (!v12)
      return;
  }
  else if (!v12)
  {
    return;
  }
  CFRelease(v12);
}

void sub_24B8BF600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a17);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a17);
  _Unwind_Resume(a1);
}

void ABMServerInternal::start_sync(uint64_t a1, NSObject **a2)
{
  NSObject *v4;
  void **v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD block[6];
  std::__shared_weak_count *v20;
  dispatch_group_t group;
  void *__p[2];
  char v23;
  uint8_t buf[4];
  void **v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = *(NSObject **)(a1 + 112);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    abm::asString();
    v5 = v23 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v25 = v5;
    _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I Starting ABM with profile: %s", buf, 0xCu);
    if (v23 < 0)
      operator delete(__p[0]);
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 272) + 88))(*(_QWORD *)(a1 + 272), 0);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 288) + 72))(*(_QWORD *)(a1 + 288));
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  ServiceManager::initializeDynamicServices(*(ServiceManager **)(a1 + 288), (NSObject **)__p);
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6 || (v7 = *(_QWORD *)(a1 + 8), (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = __p[0];
  v11 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZN17ABMServerInternal10start_syncEN8dispatch13group_sessionE_block_invoke;
  block[3] = &__block_descriptor_tmp_12_0;
  block[4] = a1;
  block[5] = v7;
  v20 = v8;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = *a2;
  group = v14;
  if (v14)
  {
    dispatch_retain(v14);
    dispatch_group_enter(v14);
  }
  dispatch_group_notify(v10, v11, block);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  v15 = v20;
  if (v20)
  {
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p[0])
    dispatch_release((dispatch_object_t)__p[0]);
}

void sub_24B8BF898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, dispatch_object_t object)
{
  if (object)
  {
    dispatch_release(object);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 48);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void __destroy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 48);
    if (v3)
      dispatch_release(v3);
  }
}

void ___ZN17ABMServerInternal4stopEP16dispatch_group_s_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;
  char v4;
  const void *v5;
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  void *__dst[2];
  unint64_t v14;

  v1 = a1[5];
  v2 = *(_DWORD *)(v1 + 192);
  if (v2 <= 5)
  {
    v4 = 1;
    if (((1 << v2) & 0x15) != 0)
    {
      v4 = 0;
LABEL_20:
      *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = v4;
      return;
    }
    if (((1 << v2) & 0x28) != 0)
      goto LABEL_20;
    ABMServerInternal::changeState_sync(a1[5], 2u);
    v5 = (const void *)*MEMORY[0x24BE05158];
    v6 = strlen((const char *)*MEMORY[0x24BE05158]);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      v8 = (void **)operator new(v9 + 1);
      __dst[1] = v7;
      v14 = v10 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v14) = v6;
      v8 = __dst;
      if (!v6)
        goto LABEL_13;
    }
    memmove(v8, v5, (size_t)v7);
LABEL_13:
    *((_BYTE *)v7 + (_QWORD)v8) = 0;
    ABMServerInternal::broadcastServerState_sync(v1, (uint64_t)__dst);
    if (SHIBYTE(v14) < 0)
      operator delete(__dst[0]);
    v11 = a1[6];
    v12 = v11;
    if (v11)
    {
      dispatch_retain(v11);
      dispatch_group_enter(v11);
    }
    ABMServerInternal::stop_sync(v1, &v12);
    if (v11)
    {
      dispatch_group_leave(v11);
      dispatch_release(v11);
    }
    v4 = 1;
    goto LABEL_20;
  }
}

void sub_24B8BFAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  NSObject *v15;

  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::stop_sync(uint64_t a1, NSObject **a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD block[6];
  std::__shared_weak_count *v18;
  dispatch_group_t group;
  NSObject *v20;

  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 272) + 88))(*(_QWORD *)(a1 + 272), 2);
  v20 = 0xAAAAAAAAAAAAAAAALL;
  ServiceManager::shutdownDynamicServices(*(ServiceManager **)(a1 + 288), &v20);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4 || (v5 = *(_QWORD *)(a1 + 8), (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = v20;
  v9 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZN17ABMServerInternal9stop_syncEN8dispatch13group_sessionE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_2;
  block[4] = a1;
  block[5] = v5;
  v18 = v6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = *a2;
  group = v12;
  if (v12)
  {
    dispatch_retain(v12);
    dispatch_group_enter(v12);
  }
  dispatch_group_notify(v8, v9, block);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v20)
    dispatch_release(v20);
}

void sub_24B8BFC68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v3;

  v3 = *(NSObject **)(v1 - 56);
  if (v3)
    dispatch_release(v3);
  _Unwind_Resume(exception_object);
}

void ___ZN17ABMServerInternal8shutdownEP16dispatch_group_s_block_invoke(_QWORD *a1)
{
  NSObject *v2;
  ABMServerInternal *v3;
  dispatch_object_t v4;

  v3 = (ABMServerInternal *)a1[5];
  v2 = a1[6];
  v4 = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v2);
  }
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = ABMServerInternal::checkShutdown_sync(v3, &v4);
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void sub_24B8BFD04(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServerInternal::checkShutdown_sync(ABMServerInternal *this, dispatch_object_t *a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  const void *v7;
  size_t v8;
  void *v9;
  void **v10;
  NSObject *v11;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *__dst[2];
  unint64_t v17;

  switch(*((_DWORD *)this + 48))
  {
    case 0:
    case 2:
      v4 = *a2;
      if (*a2)
      {
        dispatch_retain(*a2);
        dispatch_group_enter(v4);
      }
      v5 = *((_QWORD *)this + 25);
      *((_QWORD *)this + 25) = v4;
      if (!v5)
        return 1;
      dispatch_group_leave(v5);
      v6 = v5;
      goto LABEL_25;
    case 1:
      ABMServerInternal::changeState_sync(this, 4);
      v7 = (const void *)*MEMORY[0x24BE05158];
      v8 = strlen((const char *)*MEMORY[0x24BE05158]);
      if (v8 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v9 = (void *)v8;
      if (v8 >= 0x17)
      {
        v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17)
          v13 = v8 | 7;
        v14 = v13 + 1;
        v10 = (void **)operator new(v13 + 1);
        __dst[1] = v9;
        v17 = v14 | 0x8000000000000000;
        __dst[0] = v10;
      }
      else
      {
        HIBYTE(v17) = v8;
        v10 = __dst;
        if (!v8)
          goto LABEL_19;
      }
      memmove(v10, v7, (size_t)v9);
LABEL_19:
      *((_BYTE *)v9 + (_QWORD)v10) = 0;
      ABMServerInternal::broadcastServerState_sync((uint64_t)this, (uint64_t)__dst);
      if (SHIBYTE(v17) < 0)
        operator delete(__dst[0]);
      v11 = *a2;
      v15 = v11;
      if (v11)
      {
        dispatch_retain(v11);
        dispatch_group_enter(v11);
      }
      ABMServerInternal::shutdown_sync((uint64_t)this, &v15);
      if (v11)
      {
LABEL_24:
        dispatch_group_leave(v11);
        v6 = v11;
LABEL_25:
        dispatch_release(v6);
      }
      return 1;
    case 3:
      ABMServerInternal::finishShutdown_sync(this);
      v11 = *((_QWORD *)this + 25);
      *((_QWORD *)this + 25) = 0;
      if (!v11)
        return 1;
      goto LABEL_24;
    case 4:
      return 0;
    case 5:
      v11 = *((_QWORD *)this + 25);
      *((_QWORD *)this + 25) = 0;
      if (!v11)
        return 1;
      goto LABEL_24;
    default:
      return 1;
  }
}

void sub_24B8BFEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  NSObject *v15;

  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServerInternal::getRunLoop(ABMServerInternal *this)
{
  return *((_QWORD *)this + 26);
}

void ABMServerInternal::shutdown_sync(uint64_t a1, NSObject **a2)
{
  NSObject *v4;
  NSObject *v5;

  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 272) + 88))(*(_QWORD *)(a1 + 272), 4);
  v4 = *a2;
  v5 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ABMServerInternal::stop_sync(a1, &v5);
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
}

void sub_24B8BFFB0(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

char *to_string(unsigned int a1)
{
  NSObject *v3;
  NSObject *v4;
  uint64_t v5[2];
  uint64_t v6[2];
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a1 >= 6)
  {
    GetABMLogServer(v6);
    v3 = *((_QWORD *)GetGlobalLogger(v6) + 4);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v6);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v8) = a1;
      _os_log_fault_impl(&dword_24B855000, v3, OS_LOG_TYPE_FAULT, "Unknown server state %d", buf, 8u);
    }
    GetABMLogServer(v5);
    v4 = *((_QWORD *)GetGlobalLogger(v5) + 4);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315906;
      v8 = "ABM ASSERT";
      v9 = 2080;
      v10 = "false";
      v11 = 2080;
      v12 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/ABMServer.cpp";
      v13 = 1024;
      v14 = 85;
      _os_log_fault_impl(&dword_24B855000, v4, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    }
    __break(1u);
  }
  return off_251CBC790[a1];
}

void sub_24B8C0134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_24B8C0148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal17startRunLoop_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *(_QWORD *)(a1 + 32);
  pthread_setname_np("ABM.Server.RunLoop");
  pthread_set_qos_class_self_np(QOS_CLASS_DEFAULT, 0);
  *(_QWORD *)(v2 + 208) = CFRunLoopGetCurrent();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  v3 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I ABM RunLoop Started", v4, 2u);
  }
}

void __copy_helper_block_e8_40c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;

  v3 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
    dispatch_retain(v3);
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(a1 + 40);
  if (v1)
    dispatch_release(v1);
}

uint64_t sServerRunLoopMain(void (**a1)(_QWORD))
{
  CFRunLoopSourceRef v2;
  __CFRunLoopSource *v3;
  __CFRunLoop *Current;
  const __CFString *v5;
  __CFRunLoop *v6;
  unsigned __int8 v8;
  NSObject *v9;
  uint8_t v10[16];
  CFRunLoopSourceContext context;

  memset(&context, 0, sizeof(context));
  v2 = CFRunLoopSourceCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, &context);
  if (v2)
  {
    v3 = v2;
    Current = CFRunLoopGetCurrent();
    v5 = (const __CFString *)*MEMORY[0x24BDBD5A0];
    CFRunLoopAddSource(Current, v3, (CFRunLoopMode)*MEMORY[0x24BDBD5A0]);
    a1[2](a1);
    while ((CFRunLoopRunInMode(v5, 1.79769313e308, 1u) - 1) > 1)
      ;
    v6 = CFRunLoopGetCurrent();
    CFRunLoopRemoveSource(v6, v3, v5);
    CFRelease(v3);
    return 0;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v9 = qword_2579B8A80;
    if (os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_DEFAULT))
      goto LABEL_9;
    return 0;
  }
  v9 = qword_2579B8A80;
  if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_DEFAULT))
    return 0;
LABEL_9:
  *(_WORD *)v10 = 0;
  _os_log_impl(&dword_24B855000, v9, OS_LOG_TYPE_DEFAULT, "Failed to create dummySource for runloop", v10, 2u);
  return 0;
}

void ABMServerInternal::stopRunLoop_sync(ABMServerInternal *this)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v5[0]) = 0;
    _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Stopping ABM RunLoop", (uint8_t *)v5, 2u);
  }
  usleep(0x7A120u);
  CFRunLoopStop(*((CFRunLoopRef *)this + 26));
  *((_QWORD *)this + 26) = 0;
  v3 = pthread_join(*((pthread_t *)this + 27), 0);
  *((_QWORD *)this + 27) = 0;
  v4 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I Stopped ABM RunLoop: %d", (uint8_t *)v5, 8u);
  }
}

uint64_t ABMServer::getProfile(ABMServer *this)
{
  return 3;
}

uint64_t ___ZN17ABMServerInternal10start_syncEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  size_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *__dst[2];
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 32);
  ABMServerInternal::changeState_sync(v1, 1u);
  v2 = (const void *)*MEMORY[0x24BE050A0];
  v3 = strlen((const char *)*MEMORY[0x24BE050A0]);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    v10 = v7 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_8;
  }
  HIBYTE(v10) = v3;
  v5 = __dst;
  if (v3)
LABEL_8:
    memmove(v5, v2, (size_t)v4);
  *((_BYTE *)v4 + (_QWORD)v5) = 0;
  ABMServerInternal::broadcastServerState_sync(v1, (uint64_t)__dst);
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 272) + 88))(*(_QWORD *)(v1 + 272), 1);
}

void sub_24B8C05B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9XpcServerEEE56c30_ZTSN8dispatch13group_sessionE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[7];
  a1[7] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[7];
    if (v7)
      dispatch_group_enter(v7);
  }
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9XpcServerEEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 56);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void ___ZN17ABMServerInternal9stop_syncEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  ABMServerInternal *v2;
  std::error_code *v3;
  NSObject *v4;
  const void *v5;
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  ctu *v18;
  void *__p[2];
  unint64_t v20;
  void *__dst[2];
  unint64_t v22;
  std::__fs::filesystem::path buf;

  v2 = *(ABMServerInternal **)(a1 + 32);
  v1 = (uint64_t)v2;
  if (*((_DWORD *)v2 + 48) == 4)
  {
    ABMServerInternal::finishShutdown_sync(v2);
  }
  else
  {
    ABMServerInternal::changeState_sync(v2, 3);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 272) + 88))(*(_QWORD *)(v1 + 272), 3);
    v4 = *(NSObject **)(v1 + 112);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__pn_.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I --------- ABM stop completed ---------", (uint8_t *)&buf, 2u);
    }
  }
  *((_BYTE *)&buf.__pn_.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&buf, "/tmp/abm.shutdown");
  if (remove(&buf, v3))
    unlink((const char *)&buf);
  v5 = (const void *)*MEMORY[0x24BE050A8];
  v6 = strlen((const char *)*MEMORY[0x24BE050A8]);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    v22 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_14;
  }
  HIBYTE(v22) = v6;
  v8 = __dst;
  if (v6)
LABEL_14:
    memmove(v8, v5, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  ABMServerInternal::broadcastServerState_sync(v1, (uint64_t)__dst);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
  v11 = (const void *)*MEMORY[0x24BE050B8];
  v12 = strlen((const char *)*MEMORY[0x24BE050B8]);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    __p[1] = v13;
    v20 = v16 | 0x8000000000000000;
    __p[0] = v14;
    goto LABEL_24;
  }
  HIBYTE(v20) = v12;
  v14 = __p;
  if (v12)
LABEL_24:
    memmove(v14, v11, (size_t)v13);
  *((_BYTE *)v13 + (_QWORD)v14) = 0;
  v17 = 0;
  v18 = 0;
  ABMServerInternal::broadcast_sync(v1, (uint64_t)__p, &v18, &v17);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
}

void sub_24B8C08EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

void ABMServerInternal::finishStop_sync(ABMServerInternal *this)
{
  NSObject *v2;
  uint8_t v3[16];

  ABMServerInternal::changeState_sync((uint64_t)this, 3u);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 34) + 88))(*((_QWORD *)this + 34), 3);
  v2 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I --------- ABM stop completed ---------", v3, 2u);
  }
}

void ABMServerInternal::broadcast_sync(uint64_t a1, uint64_t a2, ctu **a3, void **a4)
{
  xpc_object_t v7;
  xpc_object_t v8;
  const void *v9;
  uint64_t (*v10)(uint64_t);
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  const char *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  xpc_object_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t SystemTime;
  NSObject *v33;
  const void *v34;
  __int128 v35;
  std::string *v36;
  NSObject *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  BOOL v53;
  NSObject *v54;
  unint64_t v55;
  void *v56;
  xpc_object_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  NSObject *group;
  _QWORD *v62;
  _QWORD block[6];
  std::__shared_weak_count *v64;
  std::string v65;
  void *aBlock;
  _QWORD handler[6];
  std::__shared_weak_count *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  std::string __p;
  uint64_t v72;
  NSObject *v73;
  std::string v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  xpc_object_t v77;
  unint64_t v78;
  unint64_t v79;
  xpc_object_t v80;
  uint8_t buf[4];
  const void *v82;
  __int16 v83;
  std::string *v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v7) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v7);
      v8 = v7;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    v7 = 0;
  }
  xpc_release(v7);
  v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!*a3)
    v10 = 0;
  v57 = v8;
  if (v10)
  {
    ctu::cf_to_xpc(*a3, v9);
    xpc_dictionary_set_value(v8, kKeyEventData[0], v80);
    v11 = v80;
    v80 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v80);
    v80 = 0;
  }
  v12 = xpc_string_create(kCommandSignalNotification[0]);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v8, kKeyCommand[0], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = (const char *)a2;
  if (*(char *)(a2 + 23) < 0)
    v14 = *(const char **)a2;
  v15 = xpc_string_create(v14);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v8, kKeyEvent[0], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  group = dispatch_group_create();
  v17 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v17 || (v58 = *(_QWORD *)(a1 + 8), (v18 = std::__shared_weak_count::lock(v17)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  v62 = (_QWORD *)a1;
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  v59 = v19;
  v24 = (_QWORD *)v62[18];
  if (v24 != v62 + 19)
  {
    do
    {
      v78 = 0xAAAAAAAAAAAAAAAALL;
      v79 = 0xAAAAAAAAAAAAAAAALL;
      v25 = (xpc_object_t)v24[4];
      v77 = v25;
      if (v25)
      {
        xpc_retain(v25);
        v27 = v24[5];
        v26 = v24[6];
        v78 = v27;
        v79 = v26;
        if (!v26)
          goto LABEL_34;
      }
      else
      {
        v25 = xpc_null_create();
        v77 = v25;
        v27 = v24[5];
        v26 = v24[6];
        v78 = v27;
        v79 = v26;
        if (!v26)
          goto LABEL_34;
      }
      v28 = (unint64_t *)(v26 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
LABEL_34:
      if (v25)
      {
        xpc_retain(v25);
        v75 = v27;
        v76 = (std::__shared_weak_count *)v26;
        if (!v26)
          goto LABEL_40;
      }
      else
      {
        v25 = xpc_null_create();
        v75 = v27;
        v76 = (std::__shared_weak_count *)v26;
        if (!v26)
          goto LABEL_40;
      }
      v30 = (unint64_t *)(v26 + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
LABEL_40:
      if ((uint64_t *)(v27 + 40) == std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(v27 + 32, (const void **)a2))goto LABEL_71;
      SystemTime = TelephonyUtilGetSystemTime();
      v33 = v62[14];
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        v34 = (const void *)a2;
        if (*(char *)(a2 + 23) < 0)
        {
          v34 = *(const void **)a2;
          if (*(char *)(v27 + 23) < 0)
            goto LABEL_46;
LABEL_44:
          v35 = *(_OWORD *)v27;
          v74.__r_.__value_.__r.__words[2] = *(_QWORD *)(v27 + 16);
          *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v35;
        }
        else
        {
          if ((*(char *)(v27 + 23) & 0x80000000) == 0)
            goto LABEL_44;
LABEL_46:
          std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)v27, *(_QWORD *)(v27 + 8));
        }
        v36 = &v74;
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v36 = (std::string *)v74.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        v82 = v34;
        v83 = 2080;
        v84 = v36;
        v85 = 2048;
        v86 = SystemTime;
        _os_log_impl(&dword_24B855000, v33, OS_LOG_TYPE_DEFAULT, "#I Sending %s to %s at %llu", buf, 0x20u);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
        v8 = v57;
      }
      if (!*a4)
      {
        xpc_connection_send_message((xpc_connection_t)v25, v8);
        goto LABEL_71;
      }
      dispatch_group_enter(group);
      v37 = v62[3];
      handler[0] = MEMORY[0x24BDAC760];
      handler[1] = 1174405120;
      handler[2] = ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
      handler[3] = &__block_descriptor_tmp_25_1;
      handler[4] = v62;
      handler[5] = v58;
      v68 = v59;
      do
        v38 = __ldxr(p_shared_weak_owners);
      while (__stxr(v38 + 1, p_shared_weak_owners));
      v69 = v27;
      v70 = (std::__shared_weak_count *)v26;
      if (v26)
      {
        v39 = (unint64_t *)(v26 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        __p = *(std::string *)a2;
      v72 = SystemTime;
      v73 = group;
      xpc_connection_send_message_with_reply((xpc_connection_t)v25, v8, v37, handler);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v41 = v70;
        if (!v70)
          goto LABEL_69;
      }
      else
      {
        v41 = v70;
        if (!v70)
          goto LABEL_69;
      }
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (v43)
      {
LABEL_69:
        v44 = v68;
        if (!v68)
          goto LABEL_71;
LABEL_70:
        std::__shared_weak_count::__release_weak(v44);
        goto LABEL_71;
      }
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      v44 = v68;
      if (v68)
        goto LABEL_70;
LABEL_71:
      v45 = v76;
      if (v76)
      {
        v46 = (unint64_t *)&v76->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      xpc_release(v25);
      v48 = (std::__shared_weak_count *)v79;
      if (v79)
      {
        v49 = (unint64_t *)(v79 + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      xpc_release(v77);
      v51 = (_QWORD *)v24[1];
      if (v51)
      {
        do
        {
          v52 = v51;
          v51 = (_QWORD *)*v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          v52 = (_QWORD *)v24[2];
          v53 = *v52 == (_QWORD)v24;
          v24 = v52;
        }
        while (!v53);
      }
      v24 = v52;
    }
    while (v52 != v62 + 19);
  }
  if (*a4)
  {
    v54 = v62[3];
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_26;
    block[3] = &__block_descriptor_tmp_27_2;
    block[4] = v62;
    block[5] = v58;
    v64 = v59;
    do
      v55 = __ldxr(p_shared_weak_owners);
    while (__stxr(v55 + 1, p_shared_weak_owners));
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v65 = *(std::string *)a2;
    v56 = *a4;
    if (*a4)
      v56 = _Block_copy(v56);
    aBlock = v56;
    dispatch_group_notify(group, v54, block);
    if (aBlock)
      _Block_release(aBlock);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (v64)
      std::__shared_weak_count::__release_weak(v64);
  }
  dispatch_release(group);
  std::__shared_weak_count::__release_weak(v59);
  xpc_release(v8);
}

void sub_24B8C10C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a28)
    std::__shared_weak_count::__release_weak(a28);
  std::__shared_weak_count::__release_weak(a17);
  xpc_release(object);
  _Unwind_Resume(a1);
}

_QWORD *ABMServerInternal::getClientState_sync@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  *a3 = 0;
  a3[1] = 0;
  v5 = *(_QWORD **)(a1 + 152);
  result = (_QWORD *)(a1 + 152);
  v4 = v5;
  if (v5)
  {
    v6 = *a2;
    v7 = result;
    do
    {
      v8 = v4[4];
      v9 = v8 >= v6;
      if (v8 >= v6)
        v10 = v4;
      else
        v10 = v4 + 1;
      if (v9)
        v7 = v4;
      v4 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 != result && v6 >= v7[4])
    {
      v12 = v7[5];
      v11 = v7[6];
      if (v11)
      {
        v13 = (unint64_t *)(v11 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      *a3 = v12;
      a3[1] = v11;
    }
  }
  return result;
}

void ABMServerInternal::handleServerError_sync(uint64_t a1, xpc::object *a2)
{
  int v2;
  NSObject *v5;
  void *p_p;
  void *__p;
  char v8;
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a1 + 192);
  if (v2 != 3 && v2 != 5)
  {
    v5 = *(NSObject **)(a1 + 112);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      xpc::object::to_string(a2);
      if (v8 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      *(_DWORD *)buf = 136315138;
      v10 = p_p;
      _os_log_impl(&dword_24B855000, v5, OS_LOG_TYPE_DEFAULT, "#I Server error: %s", buf, 0xCu);
      if (v8 < 0)
        operator delete(__p);
    }
  }
}

void ABMServerInternal::handleNewClient_sync(uint64_t a1@<X0>, xpc::object *a2@<X1>, const void **a3@<X8>)
{
  NSObject *v6;
  char *v7;
  size_t v8;
  void *v9;
  void *v10;
  std::string *v11;
  std::string *v12;
  _QWORD *v13;
  NSObject *v14;
  char *v15;
  size_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void **v22;
  char *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t *v28;
  uint64_t **v29;
  unint64_t v30;
  uint64_t **v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  void *v44;
  const void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD v49[5];
  void *__p[3];
  _BYTE buf[22];
  uint8_t v52[4];
  void **v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  if ((*(_DWORD *)(a1 + 192) & 0xFFFFFFFE) == 4)
  {
    v6 = *(NSObject **)(a1 + 112);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      return;
    v7 = (char *)MEMORY[0x24BD2A3F0](*(_QWORD *)a2);
    memset(__p, 170, sizeof(__p));
    v8 = strlen(v7);
    if (v8 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v19 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v19 = v8 | 7;
      v20 = v19 + 1;
      v10 = operator new(v19 + 1);
      __p[1] = v9;
      __p[2] = (void *)(v20 | 0x8000000000000000);
      __p[0] = v10;
    }
    else
    {
      HIBYTE(__p[2]) = v8;
      v10 = __p;
      if (!v8)
        goto LABEL_22;
    }
    memcpy(v10, v7, (size_t)v9);
LABEL_22:
    *((_BYTE *)v9 + (_QWORD)v10) = 0;
    free(v7);
    v21 = SHIBYTE(__p[2]);
    v22 = (void **)__p[0];
    v23 = to_string(*(_DWORD *)(a1 + 192));
    v24 = __p;
    if (v21 < 0)
      v24 = v22;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v24;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v23;
    _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I Rejecting new client %s because server state is '%s'", buf, 0x16u);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return;
  }
  xpc::object::to_string(a2);
  v11 = (std::string *)operator new(0x38uLL);
  v12 = v11;
  if (SHIBYTE(__p[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v11->__r_.__value_.__r.__words[2] = (std::string::size_type)__p[2];
  }
  v12[1].__r_.__value_.__s.__data_[0] = 0;
  v12[2].__r_.__value_.__r.__words[0] = 0;
  v12[1].__r_.__value_.__r.__words[2] = 0;
  v12[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v12[1].__r_.__value_.__r.__words[2];
  *(_QWORD *)buf = v12;
  v13 = operator new(0x20uLL);
  *v13 = off_251CBEBD8;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = v12;
  *(_QWORD *)&buf[8] = v13;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v14 = *(NSObject **)(a1 + 112);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_33;
  }
  else
  {
    v14 = *(NSObject **)(a1 + 112);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_33;
  }
  v15 = (char *)MEMORY[0x24BD2A3F0](*(_QWORD *)a2);
  memset(__p, 170, sizeof(__p));
  v16 = strlen(v15);
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    v25 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v25 = v16 | 7;
    v26 = v25 + 1;
    v18 = operator new(v25 + 1);
    __p[1] = v17;
    __p[2] = (void *)(v26 | 0x8000000000000000);
    __p[0] = v18;
    goto LABEL_29;
  }
  HIBYTE(__p[2]) = v16;
  v18 = __p;
  if (v16)
LABEL_29:
    memcpy(v18, v15, (size_t)v17);
  *((_BYTE *)v17 + (_QWORD)v18) = 0;
  free(v15);
  v27 = __p;
  if (SHIBYTE(__p[2]) < 0)
    v27 = (void **)__p[0];
  *(_DWORD *)v52 = 136315138;
  v53 = v27;
  _os_log_impl(&dword_24B855000, v14, OS_LOG_TYPE_DEFAULT, "#I New client: %s", v52, 0xCu);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v29 = (uint64_t **)(a1 + 152);
    v28 = *(uint64_t **)(a1 + 152);
    if (v28)
      goto LABEL_34;
    goto LABEL_43;
  }
LABEL_33:
  v29 = (uint64_t **)(a1 + 152);
  v28 = *(uint64_t **)(a1 + 152);
  if (v28)
  {
LABEL_34:
    v30 = *(_QWORD *)a2;
    while (1)
    {
      while (1)
      {
        v31 = (uint64_t **)v28;
        v32 = v28[4];
        if (v30 >= v32)
          break;
        v28 = *v31;
        v29 = v31;
        if (!*v31)
          goto LABEL_44;
      }
      if (v32 >= v30)
        break;
      v28 = v31[1];
      if (!v28)
      {
        v29 = v31 + 1;
        goto LABEL_44;
      }
    }
    v33 = (uint64_t *)v31;
    v35 = *(_QWORD *)buf;
    v34 = *(_QWORD *)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_52;
    goto LABEL_50;
  }
LABEL_43:
  v31 = v29;
LABEL_44:
  v33 = (uint64_t *)operator new(0x38uLL);
  v36 = *(void **)a2;
  v33[4] = *(_QWORD *)a2;
  if (v36)
    xpc_retain(v36);
  else
    v33[4] = (uint64_t)xpc_null_create();
  v33[5] = 0;
  v33[6] = 0;
  *v33 = 0;
  v33[1] = 0;
  v33[2] = (uint64_t)v31;
  *v29 = v33;
  v37 = **(_QWORD **)(a1 + 144);
  v38 = v33;
  if (v37)
  {
    *(_QWORD *)(a1 + 144) = v37;
    v38 = *v29;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 152), v38);
  ++*(_QWORD *)(a1 + 160);
  v35 = *(_QWORD *)buf;
  v34 = *(_QWORD *)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_52;
LABEL_50:
  v39 = (unint64_t *)(v34 + 8);
  do
    v40 = __ldxr(v39);
  while (__stxr(v40 + 1, v39));
LABEL_52:
  v41 = (std::__shared_weak_count *)v33[6];
  v33[5] = v35;
  v33[6] = v34;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v49[0] = MEMORY[0x24BDAC760];
  v49[1] = 0x40000000;
  v49[2] = ___ZN17ABMServerInternal20handleNewClient_syncEN3xpc10connectionE_block_invoke;
  v49[3] = &__block_descriptor_tmp_15_1;
  v49[4] = a1;
  v44 = _Block_copy(v49);
  v45 = *a3;
  *a3 = v44;
  if (v45)
    _Block_release(v45);
  v46 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v47 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_24B8C1824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  const void **v20;
  void *v21;

  operator delete(v21);
  if (a19 < 0)
    operator delete(__p);
  if (*v20)
    _Block_release(*v20);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal20handleNewClient_syncEN3xpc10connectionE_block_invoke(uint64_t a1, void **a2, void **a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  xpc_object_t object;
  xpc_object_t v8;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *a2;
  v8 = v5;
  if (!v5)
  {
    v8 = xpc_null_create();
    v6 = *a3;
    object = v6;
    if (v6)
      goto LABEL_3;
LABEL_5:
    object = xpc_null_create();
    goto LABEL_6;
  }
  xpc_retain(v5);
  v6 = *a3;
  object = v6;
  if (!v6)
    goto LABEL_5;
LABEL_3:
  xpc_retain(v6);
LABEL_6:
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(*(_QWORD *)v4 + 40))(v4, &v8, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v8);
}

void sub_24B8C1954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
  xpc_release(object);
  xpc_release(a10);
  _Unwind_Resume(a1);
}

void ABMServerInternal::handleClientError_sync(_QWORD *a1, xpc_object_t *a2, xpc::object *a3)
{
  xpc_object_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  __int128 *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  _BOOL4 v23;
  void **v24;
  std::string *v25;
  NSObject *v26;
  void **v27;
  _QWORD *v28;
  xpc_object_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  _QWORD *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  void **v36;
  const char *v37;
  unint64_t *v38;
  unint64_t v39;
  void **v40;
  void *__p[4];
  __int128 *v42;
  std::__shared_weak_count *v43;
  std::string v44;
  std::string v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v42 = 0;
    v43 = 0;
    v8 = a1 + 19;
    v7 = (_QWORD *)a1[19];
    if (!v7)
      goto LABEL_15;
  }
  else
  {
    v6 = xpc_null_create();
    v42 = 0;
    v43 = 0;
    v8 = a1 + 19;
    v7 = (_QWORD *)a1[19];
    if (!v7)
    {
LABEL_15:
      v13 = 0;
      v14 = 0;
      goto LABEL_16;
    }
  }
  v9 = v8;
  do
  {
    v10 = v7[4];
    v11 = v10 >= (unint64_t)v6;
    if (v10 >= (unint64_t)v6)
      v12 = v7;
    else
      v12 = v7 + 1;
    if (v11)
      v9 = v7;
    v7 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 == v8 || (unint64_t)v6 < v9[4])
    goto LABEL_15;
  v14 = (__int128 *)v9[5];
  v13 = (std::__shared_weak_count *)v9[6];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
  }
  v42 = v14;
  v43 = v13;
LABEL_16:
  xpc_release(v6);
  if (!v14)
    goto LABEL_63;
  memset(__p, 170, 24);
  if (*((char *)v14 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
  }
  else
  {
    v15 = *v14;
    v44.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v15;
  }
  v16 = std::string::insert(&v44, 0, "Client '", 8uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v45, "'", 1uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  __p[2] = (void *)v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v45.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      v20 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 != MEMORY[0x24BDACF38])
        goto LABEL_23;
LABEL_36:
      v26 = a1[14];
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        v27 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v27 = (void **)__p[0];
        LODWORD(v45.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_24B855000, v26, OS_LOG_TYPE_DEFAULT, "#I %s disappeared", (uint8_t *)&v45, 0xCu);
      }
      v28 = (_QWORD *)a1[19];
      if (v28)
      {
        v29 = *a2;
        v30 = (uint64_t)v8;
        do
        {
          v31 = v28[4];
          v32 = v31 >= (unint64_t)v29;
          if (v31 >= (unint64_t)v29)
            v33 = v28;
          else
            v33 = v28 + 1;
          if (v32)
            v30 = (uint64_t)v28;
          v28 = (_QWORD *)*v33;
        }
        while (*v33);
        if ((_QWORD *)v30 != v8 && (unint64_t)v29 >= *(_QWORD *)(v30 + 32))
          std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::erase(a1 + 18, v30);
      }
      goto LABEL_61;
    }
  }
  else if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(v44.__r_.__value_.__l.__data_);
  v20 = *(_QWORD *)a3;
  if (*(_QWORD *)a3 == MEMORY[0x24BDACF38])
    goto LABEL_36;
LABEL_23:
  if (v20 == MEMORY[0x24BDACF30])
  {
    v22 = a1[14];
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      goto LABEL_61;
    v36 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v36 = (void **)__p[0];
    LODWORD(v45.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
    v37 = "#D %s connection interrupted";
  }
  else
  {
    v21 = MEMORY[0x24BDACF48];
    v22 = a1[14];
    v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG);
    if (v20 != v21)
    {
      if (v23)
      {
        xpc::object::to_string(a3);
        v24 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v24 = (void **)__p[0];
        v25 = (v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v45
            : (std::string *)v45.__r_.__value_.__r.__words[0];
        LODWORD(v44.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
        WORD2(v44.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v44.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v25;
        _os_log_debug_impl(&dword_24B855000, v22, OS_LOG_TYPE_DEBUG, "#D %s %s", (uint8_t *)&v44, 0x16u);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v45.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
            goto LABEL_63;
          goto LABEL_62;
        }
      }
LABEL_61:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_63;
      goto LABEL_62;
    }
    if (!v23)
      goto LABEL_61;
    v40 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v40 = (void **)__p[0];
    LODWORD(v45.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
    v37 = "#D %s will be terminated";
  }
  _os_log_debug_impl(&dword_24B855000, v22, OS_LOG_TYPE_DEBUG, v37, (uint8_t *)&v45, 0xCu);
  if (SHIBYTE(__p[2]) < 0)
LABEL_62:
    operator delete(__p[0]);
LABEL_63:
  if (v13)
  {
    v38 = (unint64_t *)&v13->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_24B8C1DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_24B8C1E2C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ABMServerInternal::handleMessage_sync(uint64_t a1, xpc_object_t *a2, xpc::object *a3)
{
  xpc_object_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  __int128 *v13;
  NSObject *v14;
  _BOOL4 v15;
  xpc_object_t v16;
  uint64_t v17;
  uint64_t v18;
  xpc_object_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _xpc_connection_s *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string *v27;
  void **v28;
  __int128 v29;
  int v30;
  std::string::size_type v31;
  xpc_connection_t v32;
  xpc_object_t v33;
  void *__p[2];
  char v35;
  std::string v36;
  __int128 *v37;
  std::__shared_weak_count *v38;
  uint8_t buf[4];
  std::string *v40;
  __int16 v41;
  void **v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v37 = 0;
    v38 = 0;
    v7 = (_QWORD *)(a1 + 152);
    v8 = *(_QWORD **)(a1 + 152);
    if (!v8)
      goto LABEL_15;
  }
  else
  {
    v6 = xpc_null_create();
    v37 = 0;
    v38 = 0;
    v7 = (_QWORD *)(a1 + 152);
    v8 = *(_QWORD **)(a1 + 152);
    if (!v8)
    {
LABEL_15:
      v13 = 0;
      goto LABEL_16;
    }
  }
  v9 = v7;
  do
  {
    v10 = v8[4];
    v11 = v10 >= (unint64_t)v6;
    if (v10 >= (unint64_t)v6)
      v12 = v8;
    else
      v12 = v8 + 1;
    if (v11)
      v9 = v8;
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 == v7 || (unint64_t)v6 < v9[4])
    goto LABEL_15;
  v13 = (__int128 *)v9[5];
  v20 = (std::__shared_weak_count *)v9[6];
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v37 = v13;
  v38 = v20;
LABEL_16:
  xpc_release(v6);
  v14 = *(NSObject **)(a1 + 112);
  v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
  if (v13)
  {
    if (!v15)
      goto LABEL_21;
    if (*((char *)v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
    }
    else
    {
      v29 = *v13;
      v36.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v29;
    }
    v30 = SHIBYTE(v36.__r_.__value_.__r.__words[2]);
    v31 = v36.__r_.__value_.__r.__words[0];
    xpc::object::to_string(a3);
    v27 = &v36;
    if (v30 < 0)
      v27 = (std::string *)v31;
    if (v35 >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
  }
  else
  {
    if (!v15)
      goto LABEL_21;
    xpc::object::to_string((xpc::object *)a2);
    xpc::object::to_string(a3);
    v27 = &v36;
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
    if (v35 >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
  }
  *(_DWORD *)buf = 136315394;
  v40 = v27;
  v41 = 2080;
  v42 = v28;
  _os_log_debug_impl(&dword_24B855000, v14, OS_LOG_TYPE_DEBUG, "#D Message from %s:\n%s", buf, 0x16u);
  if (v35 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
LABEL_21:
  v16 = *(xpc_object_t *)a3;
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  if (v16)
  {
    xpc_retain(v16);
  }
  else
  {
    v16 = xpc_null_create();
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  }
  v17 = MEMORY[0x24BD2A468](v16);
  v18 = MEMORY[0x24BDACFA0];
  if (v17 == MEMORY[0x24BDACFA0])
  {
    v19 = *a2;
    v33 = v19;
    if (v19)
    {
      xpc_retain(v19);
    }
    else
    {
      v19 = xpc_null_create();
      v33 = v19;
    }
    ABMServerInternal::handleInternalMessage_sync(a1, &v33, (xpc_object_t *)&v36.__r_.__value_.__l.__data_);
    xpc_release(v19);
    v33 = 0;
    v16 = (xpc_object_t)v36.__r_.__value_.__r.__words[0];
  }
  if (MEMORY[0x24BD2A468](v16) == v18)
  {
    v23 = (_xpc_connection_s *)*a2;
    v32 = v23;
    if (v23)
    {
      xpc_retain(v23);
    }
    else
    {
      v23 = (_xpc_connection_s *)xpc_null_create();
      v32 = v23;
    }
    ABMServerInternal::handlePublicMessage_sync(a1, &v32, (xpc_object_t *)&v36.__r_.__value_.__l.__data_);
    xpc_release(v23);
    v32 = 0;
  }
  xpc_release(v36.__r_.__value_.__l.__data_);
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_24B8C21B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_24B8C21D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object)
{
  void *v15;

  xpc_release(v15);
  xpc_release(object);
  JUMPOUT(0x24B8C2250);
}

void sub_24B8C21F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  xpc_release(v15);
  xpc_release(a15);
  JUMPOUT(0x24B8C2250);
}

void sub_24B8C2260(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ABMServerInternal::handleInternalMessage_sync(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3)
{
  xpc_object_t value;
  int v7;
  size_t v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  xpc_object_t v13;
  const object *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  const object *v18;
  xpc_object_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  BOOL v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  __int128 v28;
  _QWORD *v29;
  xpc_object_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  NSObject *v38;
  const void *v39;
  CFTypeID v40;
  const void *v41;
  uint64_t (*v42)(uint64_t);
  xpc_object_t v43;
  int v44;
  const void *v45;
  CFTypeID v46;
  const void *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  uint64_t (*v50)(uint64_t);
  xpc_object_t v51;
  xpc_object_t *v52;
  size_t v53;
  unint64_t *v54;
  unint64_t v55;
  xpc_object_t reply;
  xpc_object_t v57;
  xpc_object_t v58;
  xpc_object_t v59;
  NSObject *v60;
  xpc_object_t v61;
  xpc_object_t v62;
  xpc_object_t v63;
  size_t v64;
  void **v65;
  xpc_object_t v66;
  void **v67;
  xpc_object_t *v68;
  _QWORD v69[5];
  xpc_object_t v70;
  const void *v71;
  xpc_object_t v72;
  const void *v73;
  xpc_object_t v74;
  xpc_object_t v75;
  xpc_object_t object[3];
  void *__p[3];
  uint8_t buf[24];
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  memset(__p, 170, sizeof(__p));
  value = xpc_dictionary_get_value(*a3, kKeyCommand[0]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  v7 = SHIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v8 = HIBYTE(__p[2]);
  else
    v8 = (size_t)__p[1];
  if (v8 == strlen(kCommandCheckIn[0]))
  {
    v9 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
    if (!memcmp(v9, kCommandCheckIn[0], v8))
    {
      memset(object, 170, sizeof(object));
      v15 = xpc_dictionary_get_value(*a3, kKeyClientName[0]);
      v75 = v15;
      if (v15)
        xpc_retain(v15);
      else
        v75 = xpc_null_create();
      memset(buf, 0, sizeof(buf));
      xpc::dyn_cast_or_default();
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
      xpc_release(v75);
      memset(buf, 170, 16);
      v19 = *a2;
      if (*a2)
      {
        xpc_retain(*a2);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        v20 = (_QWORD *)(a1 + 152);
        v21 = *(_QWORD **)(a1 + 152);
        if (!v21)
          goto LABEL_52;
      }
      else
      {
        v19 = xpc_null_create();
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        v20 = (_QWORD *)(a1 + 152);
        v21 = *(_QWORD **)(a1 + 152);
        if (!v21)
          goto LABEL_52;
      }
      v22 = v20;
      do
      {
        v23 = v21[4];
        v24 = v23 >= (unint64_t)v19;
        if (v23 >= (unint64_t)v19)
          v25 = v21;
        else
          v25 = v21 + 1;
        if (v24)
          v22 = v21;
        v21 = (_QWORD *)*v25;
      }
      while (*v25);
      if (v22 != v20 && (unint64_t)v19 >= v22[4])
      {
        v27 = v22[5];
        v26 = (std::__shared_weak_count *)v22[6];
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v49 = __ldxr(p_shared_owners);
          while (__stxr(v49 + 1, p_shared_owners));
        }
        *(_QWORD *)buf = v27;
        *(_QWORD *)&buf[8] = v26;
        goto LABEL_53;
      }
LABEL_52:
      v26 = 0;
      v27 = 0;
LABEL_53:
      xpc_release(v19);
      if (v27)
      {
        if ((xpc_object_t *)v27 != object)
        {
          if (*(char *)(v27 + 23) < 0)
          {
            if (SHIBYTE(object[2]) >= 0)
              v52 = object;
            else
              v52 = (xpc_object_t *)object[0];
            if (SHIBYTE(object[2]) >= 0)
              v53 = HIBYTE(object[2]);
            else
              v53 = (size_t)object[1];
            std::string::__assign_no_alias<false>((void **)v27, v52, v53);
          }
          else if ((HIBYTE(object[2]) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)v27, object[0], (size_t)object[1]);
          }
          else
          {
            v28 = *(_OWORD *)object;
            *(xpc_object_t *)(v27 + 16) = object[2];
            *(_OWORD *)v27 = v28;
          }
        }
        *(_BYTE *)(v27 + 24) = 1;
      }
      if (v26)
      {
        v54 = (unint64_t *)&v26->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if (SHIBYTE(object[2]) < 0)
        operator delete(object[0]);
      v44 = 0;
      goto LABEL_135;
    }
  }
  if (v8 != strlen(kCommandCheckOut[0])
    || (v7 >= 0 ? (v10 = __p) : (v10 = (void **)__p[0]), memcmp(v10, kCommandCheckOut[0], v8)))
  {
    if (v8 != strlen(kCommandEventsOn[0])
      || (v7 >= 0 ? (v11 = __p) : (v11 = (void **)__p[0]), memcmp(v11, kCommandEventsOn[0], v8)))
    {
      if (v8 != strlen(kCommandEventsOff[0]))
        goto LABEL_161;
      v12 = v7 >= 0 ? __p : (void **)__p[0];
      if (memcmp(v12, kCommandEventsOff[0], v8))
        goto LABEL_161;
      v13 = xpc_dictionary_get_value(*a3, kKeyEventsList[0]);
      object[0] = v13;
      if (v13)
        xpc_retain(v13);
      else
        object[0] = xpc_null_create();
      xpc::bridge((xpc *)object, v14);
      v45 = *(const void **)buf;
      if (!*(_QWORD *)buf)
        goto LABEL_102;
      v46 = CFGetTypeID(*(CFTypeRef *)buf);
      if (v46 == CFArrayGetTypeID())
      {
        CFRetain(v45);
        v47 = *(const void **)buf;
        if (!*(_QWORD *)buf)
          goto LABEL_102;
      }
      else
      {
        v45 = 0;
        v47 = *(const void **)buf;
        if (!*(_QWORD *)buf)
        {
LABEL_102:
          xpc_release(object[0]);
          v50 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
          if (!v45)
            v50 = 0;
          if (v50)
          {
            v51 = *a2;
            v72 = v51;
            if (v51)
            {
              xpc_retain(v51);
              v71 = v45;
              if (v45)
              {
LABEL_107:
                CFRetain(v45);
                ABMServerInternal::registerNotification(a1, &v72, 0, &v71);
                CFRelease(v45);
                v51 = v72;
                goto LABEL_123;
              }
            }
            else
            {
              v51 = xpc_null_create();
              v71 = v45;
              v72 = v51;
              if (v45)
                goto LABEL_107;
            }
            ABMServerInternal::registerNotification(a1, &v72, 0, &v71);
LABEL_123:
            xpc_release(v51);
            v44 = 0;
            v72 = 0;
            if (!v45)
              goto LABEL_135;
            goto LABEL_124;
          }
          v44 = -534716414;
          if (v45)
LABEL_124:
            CFRelease(v45);
LABEL_135:
          reply = xpc_dictionary_create_reply(*a3);
          if (reply || (reply = xpc_null_create()) != 0)
          {
            if (MEMORY[0x24BD2A468](reply) == MEMORY[0x24BDACFA0])
            {
              xpc_retain(reply);
              v57 = reply;
            }
            else
            {
              v57 = xpc_null_create();
            }
          }
          else
          {
            v57 = xpc_null_create();
            reply = 0;
          }
          xpc_release(reply);
          v58 = xpc_int64_create(v44);
          if (!v58)
            v58 = xpc_null_create();
          xpc_dictionary_set_value(v57, kKeyCommandResult[0], v58);
          v59 = xpc_null_create();
          xpc_release(v58);
          xpc_release(v59);
          v60 = *(NSObject **)(a1 + 112);
          if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
          {
            v67 = __p;
            if (SHIBYTE(__p[2]) < 0)
              v67 = (void **)__p[0];
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v67;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v44;
            _os_log_debug_impl(&dword_24B855000, v60, OS_LOG_TYPE_DEBUG, "#D Replying to client's command: %s, with return code: 0x%x", buf, 0x12u);
          }
          xpc_connection_send_message((xpc_connection_t)*a2, v57);
          v61 = xpc_null_create();
          v62 = xpc_null_create();
          v63 = *a3;
          *a3 = v61;
          xpc_release(v63);
          xpc_release(v62);
          if (SHIBYTE(__p[2]) >= 0)
            v64 = HIBYTE(__p[2]);
          else
            v64 = (size_t)__p[1];
          if (v64 == strlen(kCommandEventsOn[0]))
          {
            v65 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
            if (!memcmp(v65, kCommandEventsOn[0], v64) && *(_DWORD *)(a1 + 192) == 1)
            {
              v69[0] = MEMORY[0x24BDAC760];
              v69[1] = 1174405120;
              v69[2] = ___ZN17ABMServerInternal26handleInternalMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke;
              v69[3] = &__block_descriptor_tmp_18_2;
              v66 = *a2;
              v69[4] = a1;
              v70 = v66;
              if (v66)
                xpc_retain(v66);
              else
                v70 = xpc_null_create();
              ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v69);
              xpc_release(v70);
              v70 = 0;
            }
          }
          xpc_release(v57);
          goto LABEL_161;
        }
      }
      CFRelease(v47);
      goto LABEL_102;
    }
    v17 = xpc_dictionary_get_value(*a3, kKeyEventsList[0]);
    object[0] = v17;
    if (v17)
      xpc_retain(v17);
    else
      object[0] = xpc_null_create();
    xpc::bridge((xpc *)object, v18);
    v39 = *(const void **)buf;
    if (*(_QWORD *)buf)
    {
      v40 = CFGetTypeID(*(CFTypeRef *)buf);
      if (v40 == CFArrayGetTypeID())
      {
        CFRetain(v39);
        v41 = *(const void **)buf;
        if (!*(_QWORD *)buf)
          goto LABEL_83;
      }
      else
      {
        v39 = 0;
        v41 = *(const void **)buf;
        if (!*(_QWORD *)buf)
          goto LABEL_83;
      }
      CFRelease(v41);
    }
LABEL_83:
    xpc_release(object[0]);
    v42 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    if (!v39)
      v42 = 0;
    if (!v42)
    {
      v44 = -534716414;
      if (!v39)
        goto LABEL_135;
LABEL_113:
      CFRelease(v39);
      goto LABEL_135;
    }
    v43 = *a2;
    v74 = v43;
    if (v43)
    {
      xpc_retain(v43);
      v73 = v39;
      if (v39)
      {
LABEL_88:
        CFRetain(v39);
        ABMServerInternal::registerNotification(a1, &v74, 1, &v73);
        CFRelease(v39);
        v43 = v74;
        goto LABEL_112;
      }
    }
    else
    {
      v43 = xpc_null_create();
      v73 = v39;
      v74 = v43;
      if (v39)
        goto LABEL_88;
    }
    ABMServerInternal::registerNotification(a1, &v74, 1, &v73);
LABEL_112:
    xpc_release(v43);
    v44 = 0;
    v74 = 0;
    if (!v39)
      goto LABEL_135;
    goto LABEL_113;
  }
  memset(object, 170, sizeof(object));
  v16 = xpc_dictionary_get_value(*a3, kKeyClientName[0]);
  v75 = v16;
  if (v16)
    xpc_retain(v16);
  else
    v75 = xpc_null_create();
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  xpc_release(v75);
  v29 = *(_QWORD **)(a1 + 152);
  if (v29)
  {
    v30 = *a2;
    v31 = a1 + 152;
    do
    {
      v32 = v29[4];
      v33 = v32 >= (unint64_t)v30;
      if (v32 >= (unint64_t)v30)
        v34 = v29;
      else
        v34 = v29 + 1;
      if (v33)
        v31 = (uint64_t)v29;
      v29 = (_QWORD *)*v34;
    }
    while (*v34);
    if (v31 != a1 + 152 && (unint64_t)v30 >= *(_QWORD *)(v31 + 32))
      std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::erase((_QWORD *)(a1 + 144), v31);
  }
  v35 = xpc_null_create();
  v36 = xpc_null_create();
  v37 = *a3;
  *a3 = v35;
  xpc_release(v37);
  xpc_release(v36);
  v38 = *(NSObject **)(a1 + 112);
  if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
  {
    if ((SHIBYTE(object[2]) & 0x80000000) == 0)
      goto LABEL_161;
    goto LABEL_75;
  }
  v68 = object;
  if (SHIBYTE(object[2]) < 0)
    v68 = (xpc_object_t *)object[0];
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)&buf[4] = v68;
  _os_log_debug_impl(&dword_24B855000, v38, OS_LOG_TYPE_DEBUG, "#D Client '%s' checked out", buf, 0xCu);
  if (SHIBYTE(object[2]) < 0)
LABEL_75:
    operator delete(object[0]);
LABEL_161:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_24B8C2BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t object,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ABMServerInternal::handlePublicMessage_sync(uint64_t a1, xpc_connection_t *a2, xpc_object_t *a3)
{
  xpc_object_t reply;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t value;
  uint64_t v14;
  xpc_object_t v15;
  xpc_connection_t v16;
  void *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  _QWORD v25[5];
  xpc_object_t v26;
  xpc_object_t v27;
  void *v28;
  xpc_object_t v29;
  xpc_object_t object;
  void *__p[6];

  reply = xpc_dictionary_create_reply(*a3);
  v7 = MEMORY[0x24BDACFA0];
  if (reply || (reply = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](reply) == v7)
    {
      xpc_retain(reply);
      v8 = reply;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    reply = 0;
  }
  xpc_release(reply);
  if (*(_DWORD *)(a1 + 192) == 5)
  {
    if (MEMORY[0x24BD2A468](v8) == v7)
    {
      v9 = xpc_int64_create(-534716415);
      if (!v9)
        v9 = xpc_null_create();
      xpc_dictionary_set_value(v8, kKeyCommandResult[0], v9);
      v10 = xpc_null_create();
      xpc_release(v9);
      xpc_release(v10);
      v11 = xpc_dictionary_create(0, 0, 0);
      if (v11 || (v11 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x24BD2A468](v11) == v7)
        {
          xpc_retain(v11);
          v12 = v11;
        }
        else
        {
          v12 = xpc_null_create();
        }
      }
      else
      {
        v12 = xpc_null_create();
        v11 = 0;
      }
      xpc_release(v11);
      v18 = xpc_string_create("Server not available");
      if (!v18)
        v18 = xpc_null_create();
      xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x24BE04F20], v18);
      v19 = xpc_null_create();
      xpc_release(v18);
      xpc_release(v19);
      if (v12)
      {
        xpc_retain(v12);
        v20 = v12;
      }
      else
      {
        v20 = xpc_null_create();
      }
      xpc_dictionary_set_value(v8, kKeyCommandData[0], v20);
      v21 = xpc_null_create();
      xpc_release(v20);
      xpc_release(v21);
      xpc_connection_send_message(*a2, v8);
      xpc_release(v12);
    }
    goto LABEL_38;
  }
  memset(__p, 170, 24);
  value = xpc_dictionary_get_value(*a3, kKeyCommand[0]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  memset(&__p[3], 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object);
  v14 = *(_QWORD *)(a1 + 288);
  v15 = *a3;
  v29 = v15;
  if (v15)
    xpc_retain(v15);
  else
    v29 = xpc_null_create();
  v25[0] = MEMORY[0x24BDAC760];
  v25[1] = 1174405120;
  v25[2] = ___ZN17ABMServerInternal24handlePublicMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke;
  v25[3] = &__block_descriptor_tmp_21_1;
  v25[4] = a1;
  v26 = v8;
  if (!v8)
  {
    v26 = xpc_null_create();
    v16 = *a2;
    v27 = v16;
    if (v16)
      goto LABEL_23;
LABEL_25:
    v27 = xpc_null_create();
    goto LABEL_26;
  }
  xpc_retain(v8);
  v16 = *a2;
  v27 = v16;
  if (!v16)
    goto LABEL_25;
LABEL_23:
  xpc_retain(v16);
LABEL_26:
  v17 = _Block_copy(v25);
  v28 = v17;
  ServiceManager::runCommand(v14, (uint64_t)__p, &v29, &v28);
  if (v17)
    _Block_release(v17);
  xpc_release(v29);
  v29 = 0;
  xpc_release(v27);
  v27 = 0;
  xpc_release(v26);
  v26 = 0;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
LABEL_38:
  v22 = xpc_null_create();
  v23 = xpc_null_create();
  v24 = *a3;
  *a3 = v22;
  xpc_release(v24);
  xpc_release(v23);
  xpc_release(v8);
}

void sub_24B8C3190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t a14, xpc_object_t object, uint64_t a16, xpc_object_t a17, xpc_object_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;

  xpc_release(v25);
  xpc_release(v24);
  _Unwind_Resume(a1);
}

void ABMServerInternal::registerNotification(uint64_t a1, void **a2, char a3, const void **a4)
{
  void *v7;
  const void *v8;
  _QWORD v9[5];
  xpc_object_t object;
  CFTypeRef cf;
  char v12;

  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1174405120;
  v9[2] = ___ZN17ABMServerInternal20registerNotificationEN3xpc10connectionEbN3ctu2cf11CFSharedRefIK9__CFArrayEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_22_2;
  v7 = *a2;
  v9[4] = a1;
  object = v7;
  if (!v7)
  {
    object = xpc_null_create();
    v12 = a3;
    v8 = *a4;
    cf = v8;
    if (!v8)
      goto LABEL_6;
    goto LABEL_5;
  }
  xpc_retain(v7);
  v12 = a3;
  v8 = *a4;
  cf = v8;
  if (v8)
LABEL_5:
    CFRetain(v8);
LABEL_6:
  ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v9);
  if (cf)
    CFRelease(cf);
  xpc_release(object);
}

void ___ZN17ABMServerInternal26handleInternalMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v5;
  void *v6;
  const void *v7;
  size_t v8;
  void *v9;
  void **v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeID v14;
  const void *v15;
  void *v16;
  ctu *v17;
  void *__dst[2];
  unint64_t v19;
  xpc_object_t object;
  CFTypeRef cf;

  v2 = *(_QWORD **)(a1 + 32);
  cf = 0;
  v3 = *MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
    cf = Mutable;
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x24BE04F30], (const __CFString **)*MEMORY[0x24BE050A0], v3, v5);
  v6 = *(void **)(a1 + 40);
  object = v6;
  if (v6)
    xpc_retain(v6);
  else
    object = xpc_null_create();
  v7 = (const void *)*MEMORY[0x24BE052A8];
  v8 = strlen((const char *)*MEMORY[0x24BE052A8]);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    v10 = (void **)operator new(v12 + 1);
    __dst[1] = v9;
    v19 = v13 | 0x8000000000000000;
    __dst[0] = v10;
LABEL_14:
    memmove(v10, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v10) = 0;
    v11 = cf;
    if (!cf)
      goto LABEL_17;
    goto LABEL_15;
  }
  HIBYTE(v19) = v8;
  v10 = __dst;
  if (v8)
    goto LABEL_14;
  LOBYTE(__dst[0]) = 0;
  v11 = cf;
  if (!cf)
    goto LABEL_17;
LABEL_15:
  v14 = CFGetTypeID(v11);
  if (v14 == CFDictionaryGetTypeID())
  {
    v17 = (ctu *)v11;
    CFRetain(v11);
    v15 = v11;
    goto LABEL_18;
  }
LABEL_17:
  v15 = 0;
  v17 = 0;
LABEL_18:
  v16 = 0;
  ABMServerInternal::unicast_sync(v2, (xpc_connection_t *)&object, (uint64_t)__dst, &v17, &v16);
  if (v15)
    CFRelease(v15);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
  xpc_release(object);
  object = 0;
  if (v11)
    CFRelease(v11);
}

void sub_24B8C3578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, xpc_object_t object, const void *a19)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  if (a17 < 0)
    operator delete(__p);
  xpc_release(object);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a19);
  _Unwind_Resume(a1);
}

void ABMServerInternal::unicast_sync(_QWORD *a1, xpc_connection_t *a2, uint64_t a3, ctu **a4, void **a5)
{
  xpc_object_t v10;
  xpc_object_t v11;
  const void *v12;
  uint64_t (*v13)(uint64_t);
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  const char *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  xpc_connection_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t SystemTime;
  NSObject *v37;
  void **v38;
  const void *v39;
  unint64_t v40;
  __int128 v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::string *v45;
  _xpc_connection_s **v46;
  void **v47;
  _xpc_connection_s *v48;
  NSObject *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  NSObject *v56;
  unint64_t v57;
  xpc_connection_t v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  xpc_connection_t *v63;
  uint64_t v64;
  _QWORD block[6];
  std::__shared_weak_count *v66;
  xpc_object_t object;
  std::string v68;
  void *aBlock;
  _QWORD handler[6];
  std::__shared_weak_count *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  std::string __p;
  uint64_t v75;
  NSObject *v76;
  std::string v77;
  unint64_t v78;
  unint64_t v79;
  xpc_object_t v80;
  uint8_t buf[4];
  const void *v82;
  __int16 v83;
  std::string *v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v10 = xpc_dictionary_create(0, 0, 0);
  if (v10 || (v10 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v10) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v10);
      v11 = v10;
    }
    else
    {
      v11 = xpc_null_create();
    }
  }
  else
  {
    v11 = xpc_null_create();
    v10 = 0;
  }
  xpc_release(v10);
  v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!*a4)
    v13 = 0;
  if (v13)
  {
    ctu::cf_to_xpc(*a4, v12);
    xpc_dictionary_set_value(v11, kKeyEventData[0], v80);
    v14 = v80;
    v80 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v80);
    v80 = 0;
  }
  v15 = xpc_string_create(kCommandSignalNotification[0]);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v11, kKeyCommand[0], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = (const char *)a3;
  if (*(char *)(a3 + 23) < 0)
    v17 = *(const char **)a3;
  v18 = xpc_string_create(v17);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v11, kKeyEvent[0], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = dispatch_group_create();
  v21 = (std::__shared_weak_count *)a1[2];
  if (!v21 || (v64 = a1[1], (v22 = std::__shared_weak_count::lock(v21)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v23 = v22;
  p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (v27)
  {
    v78 = 0xAAAAAAAAAAAAAAAALL;
    v79 = 0xAAAAAAAAAAAAAAAALL;
    v28 = *a2;
    if (*a2)
      goto LABEL_25;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v23);
    v78 = 0xAAAAAAAAAAAAAAAALL;
    v79 = 0xAAAAAAAAAAAAAAAALL;
    v28 = *a2;
    if (*a2)
    {
LABEL_25:
      xpc_retain(v28);
      v78 = 0;
      v79 = 0;
      v29 = a1 + 19;
      v30 = (_QWORD *)a1[19];
      if (!v30)
        goto LABEL_39;
      goto LABEL_29;
    }
  }
  v28 = (xpc_connection_t)xpc_null_create();
  v78 = 0;
  v79 = 0;
  v29 = a1 + 19;
  v30 = (_QWORD *)a1[19];
  if (!v30)
  {
LABEL_39:
    v35 = 0;
    goto LABEL_40;
  }
LABEL_29:
  v31 = v29;
  do
  {
    v32 = v30[4];
    v33 = v32 >= (unint64_t)v28;
    if (v32 >= (unint64_t)v28)
      v34 = v30;
    else
      v34 = v30 + 1;
    if (v33)
      v31 = v30;
    v30 = (_QWORD *)*v34;
  }
  while (*v34);
  if (v31 == v29 || (unint64_t)v28 < v31[4])
    goto LABEL_39;
  v35 = v31[5];
  v42 = v31[6];
  if (v42)
  {
    v43 = (unint64_t *)(v42 + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v78 = v35;
  v79 = v42;
LABEL_40:
  xpc_release(v28);
  if (!v35
    || (uint64_t *)(v35 + 40) == std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(v35 + 32, (const void **)a3))
  {
    goto LABEL_76;
  }
  SystemTime = TelephonyUtilGetSystemTime();
  v37 = a1[14];
  v63 = a2;
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    v38 = a5;
    v39 = (const void *)a3;
    if (*(char *)(a3 + 23) < 0)
    {
      v39 = *(const void **)a3;
      v40 = v78;
      if ((*(char *)(v78 + 23) & 0x80000000) == 0)
        goto LABEL_45;
    }
    else
    {
      v40 = v78;
      if ((*(char *)(v78 + 23) & 0x80000000) == 0)
      {
LABEL_45:
        v41 = *(_OWORD *)v40;
        v77.__r_.__value_.__r.__words[2] = *(_QWORD *)(v40 + 16);
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v41;
LABEL_52:
        v45 = &v77;
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v45 = (std::string *)v77.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        v82 = v39;
        v83 = 2080;
        v84 = v45;
        v85 = 2048;
        v86 = SystemTime;
        _os_log_impl(&dword_24B855000, v37, OS_LOG_TYPE_DEFAULT, "#I Sending %s to %s at %llu", buf, 0x20u);
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v77.__r_.__value_.__l.__data_);
        a5 = v38;
        a2 = v63;
        goto LABEL_57;
      }
    }
    std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)v40, *(_QWORD *)(v40 + 8));
    goto LABEL_52;
  }
LABEL_57:
  if (*a5)
  {
    v46 = a2;
    v47 = a5;
    dispatch_group_enter(v20);
    v48 = *v46;
    v49 = a1[3];
    handler[0] = MEMORY[0x24BDAC760];
    handler[1] = 1174405120;
    handler[2] = ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
    handler[3] = &__block_descriptor_tmp_28;
    handler[4] = a1;
    handler[5] = v64;
    v71 = v23;
    do
      v50 = __ldxr(p_shared_weak_owners);
    while (__stxr(v50 + 1, p_shared_weak_owners));
    v72 = v78;
    v73 = (std::__shared_weak_count *)v79;
    if (v79)
    {
      v51 = (unint64_t *)(v79 + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      __p = *(std::string *)a3;
    v75 = SystemTime;
    v76 = v20;
    xpc_connection_send_message_with_reply(v48, v11, v49, handler);
    a5 = v47;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v53 = v73;
    a2 = v63;
    if (v73)
    {
      v54 = (unint64_t *)&v73->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (v71)
      std::__shared_weak_count::__release_weak(v71);
  }
  else
  {
    xpc_connection_send_message(*a2, v11);
  }
LABEL_76:
  if (!*a5)
    goto LABEL_92;
  v56 = a1[3];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_29;
  block[3] = &__block_descriptor_tmp_30;
  block[4] = a1;
  block[5] = v64;
  v66 = v23;
  do
    v57 = __ldxr(p_shared_weak_owners);
  while (__stxr(v57 + 1, p_shared_weak_owners));
  v58 = *a2;
  object = v58;
  if (!v58)
  {
    object = xpc_null_create();
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      goto LABEL_81;
LABEL_83:
    std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    goto LABEL_84;
  }
  xpc_retain(v58);
  if (*(char *)(a3 + 23) < 0)
    goto LABEL_83;
LABEL_81:
  v68 = *(std::string *)a3;
LABEL_84:
  v59 = *a5;
  if (*a5)
    v59 = _Block_copy(v59);
  aBlock = v59;
  dispatch_group_notify(v20, v56, block);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  xpc_release(object);
  object = 0;
  if (v66)
    std::__shared_weak_count::__release_weak(v66);
LABEL_92:
  dispatch_release(v20);
  v60 = (std::__shared_weak_count *)v79;
  if (v79)
  {
    v61 = (unint64_t *)(v79 + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  std::__shared_weak_count::__release_weak(v23);
  xpc_release(v11);
}

void sub_24B8C3C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v39 - 168);
  std::__shared_weak_count::__release_weak(v38);
  xpc_release(v37);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c22_ZTSN3xpc10connectionE(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c22_ZTSN3xpc10connectionE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZN17ABMServerInternal24handlePublicMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = MEMORY[0x24BD2A468](*(_QWORD *)(a1 + 40));
  v8 = MEMORY[0x24BDACFA0];
  if (v7 == MEMORY[0x24BDACFA0])
  {
    if (a2 == -534716414)
    {
      if (*(_DWORD *)(v6 + 192) == 3)
      {
        v9 = xpc_dictionary_create(0, 0, 0);
        if (v9 || (v9 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x24BD2A468](v9) == v8)
          {
            xpc_retain(v9);
            v10 = v9;
          }
          else
          {
            v10 = xpc_null_create();
          }
        }
        else
        {
          v10 = xpc_null_create();
          v9 = 0;
        }
        xpc_release(v9);
        v15 = xpc_int64_create(-534716415);
        if (!v15)
          v15 = xpc_null_create();
        xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandResult[0], v15);
        v16 = xpc_null_create();
        xpc_release(v15);
        xpc_release(v16);
        v17 = xpc_string_create("Server not available");
        if (!v17)
          v17 = xpc_null_create();
        xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x24BE04F20], v17);
        v18 = xpc_null_create();
        xpc_release(v17);
        xpc_release(v18);
        if (v10)
        {
          xpc_retain(v10);
          v19 = v10;
        }
        else
        {
          v19 = xpc_null_create();
        }
        xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandData[0], v19);
        v20 = xpc_null_create();
        xpc_release(v19);
        xpc_release(v20);
        xpc_release(v10);
LABEL_27:
        xpc_connection_send_message(*(xpc_connection_t *)(a1 + 48), *(xpc_object_t *)(a1 + 40));
        return;
      }
      v11 = xpc_int64_create(-534716414);
      if (v11)
      {
LABEL_12:
        xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandResult[0], v11);
        v12 = xpc_null_create();
        xpc_release(v11);
        xpc_release(v12);
        if (MEMORY[0x24BD2A468](*a3) == v8)
        {
          v13 = (xpc_object_t)*a3;
          if (v13)
            xpc_retain(v13);
          else
            v13 = xpc_null_create();
          xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandData[0], v13);
          v14 = xpc_null_create();
          xpc_release(v13);
          xpc_release(v14);
        }
        goto LABEL_27;
      }
    }
    else
    {
      v11 = xpc_int64_create(a2);
      if (v11)
        goto LABEL_12;
    }
    v11 = xpc_null_create();
    goto LABEL_12;
  }
}

xpc_object_t __copy_helper_block_e8_40c15_ZTSN3xpc4dictE48c22_ZTSN3xpc10connectionE(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  xpc_object_t result;

  v4 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    xpc_retain(v4);
    v5 = *(void **)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v5;
    if (v5)
      return xpc_retain(v5);
  }
  else
  {
    *(_QWORD *)(a1 + 40) = xpc_null_create();
    v5 = *(void **)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v5;
    if (v5)
      return xpc_retain(v5);
  }
  result = xpc_null_create();
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE48c22_ZTSN3xpc10connectionE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZN17ABMServerInternal20registerNotificationEN3xpc10connectionEbN3ctu2cf11CFSharedRefIK9__CFArrayEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  xpc::object *v3;
  xpc_object_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  const std::string::value_type **v12;
  int v13;
  const void *v14;
  NSObject *v15;
  __int128 v16;
  NSObject *v17;
  std::string *p_p;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::string *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::string __p;
  const void *v26;
  const std::string::value_type **v27;
  std::__shared_weak_count *v28;
  uint8_t buf[4];
  std::string *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (xpc::object *)(a1 + 40);
  v4 = *(xpc_object_t *)(a1 + 40);
  if (v4)
  {
    xpc_retain(*(xpc_object_t *)(a1 + 40));
    v27 = 0;
    v28 = 0;
    v5 = (_QWORD *)(v2 + 152);
    v6 = *(_QWORD **)(v2 + 152);
    if (!v6)
      goto LABEL_15;
  }
  else
  {
    v4 = xpc_null_create();
    v27 = 0;
    v28 = 0;
    v5 = (_QWORD *)(v2 + 152);
    v6 = *(_QWORD **)(v2 + 152);
    if (!v6)
    {
LABEL_15:
      v11 = 0;
      v12 = 0;
      goto LABEL_16;
    }
  }
  v7 = v5;
  do
  {
    v8 = v6[4];
    v9 = v8 >= (unint64_t)v4;
    if (v8 >= (unint64_t)v4)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = v6;
    v6 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == v5 || (unint64_t)v4 < v7[4])
    goto LABEL_15;
  v12 = (const std::string::value_type **)v7[5];
  v11 = (std::__shared_weak_count *)v7[6];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v27 = v12;
  v28 = v11;
LABEL_16:
  xpc_release(v4);
  if (!v12)
  {
    v17 = *(NSObject **)(v2 + 112);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      goto LABEL_39;
    xpc::object::to_string(v3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v30 = p_p;
    _os_log_error_impl(&dword_24B855000, v17, OS_LOG_TYPE_ERROR, "%s is not in client list", buf, 0xCu);
    goto LABEL_37;
  }
  v13 = *(unsigned __int8 *)(a1 + 56);
  v14 = *(const void **)(a1 + 48);
  v26 = v14;
  if (v14)
    CFRetain(v14);
  ServerClientState::registerNotification_sync((void **)&v27, v13 != 0, &v26);
  if (v14)
    CFRelease(v14);
  v15 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *v12, (std::string::size_type)v12[1]);
    }
    else
    {
      v16 = *(_OWORD *)v12;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v12[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
    }
    v21 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v22 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 136315394;
    v30 = v21;
    v31 = 2112;
    v32 = v22;
    _os_log_impl(&dword_24B855000, v15, OS_LOG_TYPE_DEFAULT, "#I %s registered for: %@", buf, 0x16u);
LABEL_37:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_39:
  if (v11)
  {
    v23 = (unint64_t *)&v11->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_24B8C443C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B8C4470(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

CFTypeRef __copy_helper_block_e8_40c22_ZTSN3xpc10connectionE48c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  CFTypeRef result;

  v4 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (!v4)
  {
    *(_QWORD *)(a1 + 40) = xpc_null_create();
    result = *(CFTypeRef *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = result;
    if (!result)
      return result;
    return CFRetain(result);
  }
  xpc_retain(v4);
  result = *(CFTypeRef *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c22_ZTSN3xpc10connectionE48c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZN17ABMServerInternal9broadcastENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  ctu *v3;
  const void *v4;
  void *v5;
  void *v6;
  ctu *v7;
  std::string v8;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
    v3 = *(ctu **)(a1 + 64);
    v7 = v3;
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  v8 = *(std::string *)(a1 + 40);
  v3 = *(ctu **)(a1 + 64);
  v7 = v3;
  if (v3)
LABEL_5:
    CFRetain(v3);
LABEL_6:
  v4 = *(const void **)(a1 + 72);
  if (v4)
    v5 = _Block_copy(v4);
  else
    v5 = 0;
  v6 = v5;
  ABMServerInternal::broadcast_sync(v2, (uint64_t)&v8, &v7, &v6);
  if (v5)
    _Block_release(v5);
  if (v3)
    CFRelease(v3);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_24B8C4620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  const void *v16;

  if (v16)
    _Block_release(v16);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE72c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  const void *v6;
  void *result;

  v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
    v6 = *(const void **)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v6;
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = *(_OWORD *)(a2 + 40);
  v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  v6 = *(const void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v6;
  if (v6)
LABEL_5:
    CFRetain(v6);
LABEL_6:
  result = *(void **)(a2 + 72);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 72) = result;
  return result;
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE72c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 72);
  if (v2)
    _Block_release(v2);
  v3 = *(const void **)(a1 + 64);
  if (v3)
    CFRelease(v3);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  __int128 *v7;
  __int128 v8;
  std::string *p_p;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string __p;
  std::__shared_weak_count *v16;
  uint8_t buf[4];
  std::string *v18;
  __int16 v19;
  _QWORD *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && (v3 = *(_QWORD *)(a1 + 32), v4 = std::__shared_weak_count::lock(v2), (v16 = v4) != 0))
  {
    v5 = v4;
    if (*(_QWORD *)(a1 + 40))
    {
      v6 = *(NSObject **)(v3 + 112);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(__int128 **)(a1 + 56);
        if (*((char *)v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
        }
        else
        {
          v8 = *v7;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        v10 = (_QWORD *)(a1 + 72);
        if (*(char *)(a1 + 95) < 0)
          v10 = (_QWORD *)*v10;
        v11 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)buf = 136315650;
        v18 = p_p;
        v19 = 2080;
        v20 = v10;
        v21 = 2048;
        v22 = v11;
        _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I %s responded to %s sent at %llu", buf, 0x20u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
  }
}

void sub_24B8C48D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTS17ServerClientState72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v3;
  unint64_t *v4;
  unint64_t v5;
  std::string::size_type v6;
  unint64_t *v7;
  unint64_t v8;
  std::string *v9;
  __int128 v10;

  v3 = *(_QWORD *)(a2 + 48);
  a1[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
  a1[2].__r_.__value_.__r.__words[0] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a2 + 64);
  a1[2].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 56);
  a1[2].__r_.__value_.__r.__words[2] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a1 + 3;
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_24B8C498C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v2);
  v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTS17ServerClientState72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2)
      goto LABEL_8;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2)
      goto LABEL_8;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_8:
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      return;
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5)
LABEL_9:
    std::__shared_weak_count::__release_weak(v5);
}

uint64_t std::pair<xpc::connection const,ServerClientState>::~pair(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  xpc_release(*(xpc_object_t *)a1);
  *(_QWORD *)a1 = 0;
  return a1;
}

void ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_26(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t buf[4];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      if (*(_QWORD *)(a1 + 40))
      {
        v5 = *(NSObject **)(v2 + 112);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          v6 = (_QWORD *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0)
            v6 = (_QWORD *)*v6;
          *(_DWORD *)buf = 136315138;
          v10 = v6;
          _os_log_impl(&dword_24B855000, v5, OS_LOG_TYPE_DEFAULT, "#I All clients responded to %s", buf, 0xCu);
        }
      }
    }
  }
  else
  {
    v4 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_24B8C4BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  void *result;

  v4 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 56);
    a1[9] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  result = *(void **)(a2 + 80);
  if (result)
    result = _Block_copy(result);
  a1[10] = result;
  return result;
}

void sub_24B8C4C54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 80);
  if (v2)
    _Block_release(v2);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3)
      return;
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 56));
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
LABEL_5:
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  __int128 *v7;
  __int128 v8;
  std::string *p_p;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string __p;
  std::__shared_weak_count *v16;
  uint8_t buf[4];
  std::string *v18;
  __int16 v19;
  _QWORD *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && (v3 = *(_QWORD *)(a1 + 32), v4 = std::__shared_weak_count::lock(v2), (v16 = v4) != 0))
  {
    v5 = v4;
    if (*(_QWORD *)(a1 + 40))
    {
      v6 = *(NSObject **)(v3 + 112);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(__int128 **)(a1 + 56);
        if (*((char *)v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
        }
        else
        {
          v8 = *v7;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        v10 = (_QWORD *)(a1 + 72);
        if (*(char *)(a1 + 95) < 0)
          v10 = (_QWORD *)*v10;
        v11 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)buf = 136315650;
        v18 = p_p;
        v19 = 2080;
        v20 = v10;
        v21 = 2048;
        v22 = v11;
        _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I %s responded to %s sent at %llu", buf, 0x20u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
  }
}

void sub_24B8C4E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_29(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  void *p_p;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v12 = 0;
  v13 = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    v13 = v4;
    if (v4)
    {
      v12 = *(_QWORD *)(a1 + 40);
      if (v12)
      {
        v5 = *(NSObject **)(v2 + 112);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          xpc::object::to_string((xpc::object *)(a1 + 56));
          p_p = __p;
          if (v11 >= 0)
            p_p = &__p;
          v7 = (_QWORD *)(a1 + 64);
          if (*(char *)(a1 + 87) < 0)
            v7 = (_QWORD *)*v7;
          *(_DWORD *)buf = 136315394;
          v15 = p_p;
          v16 = 2080;
          v17 = v7;
          _os_log_impl(&dword_24B855000, v5, OS_LOG_TYPE_DEFAULT, "#I Client '%s' responded to %s", buf, 0x16u);
          if (v11 < 0)
            operator delete(__p);
        }
      }
    }
  }
  else
  {
    v4 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 88) + 16))();
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_24B8C4FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B8C4FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTSKN3xpc10connectionE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  std::string *v8;
  __int128 v9;
  void *result;

  v4 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(void **)(a2 + 56);
  a1[7] = v7;
  if (v7)
  {
    xpc_retain(v7);
    v8 = (std::string *)(a1 + 8);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_6:
      v9 = *(_OWORD *)(a2 + 64);
      v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 80);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      goto LABEL_9;
    }
  }
  else
  {
    a1[7] = xpc_null_create();
    v8 = (std::string *)(a1 + 8);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
      goto LABEL_6;
  }
  std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
LABEL_9:
  result = *(void **)(a2 + 88);
  if (result)
    result = _Block_copy(result);
  a1[11] = result;
  return result;
}

void sub_24B8C50BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  xpc_object_t *v2;
  std::__shared_weak_count *v4;

  xpc::connection::~connection(v2);
  v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTSKN3xpc10connectionE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 88);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t ABMServer::previousShutdownWasClean(ABMServer *this)
{
  if (qword_2579B8B80 != -1)
    dispatch_once(&qword_2579B8B80, &__block_literal_global_1);
  return _MergedGlobals_2;
}

void ___ZN9ABMServer24previousShutdownWasCleanEv_block_invoke()
{
  timespec v0;
  int v1;
  int v2;
  int v3;
  int v4;
  unsigned __int8 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  const char *v12;
  unsigned __int8 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned __int8 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char __p[18];
  char v33;
  stat block;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v33 = 17;
  strcpy(__p, "/tmp/abm.shutdown");
  v0.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v0.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&block.st_blksize = v0;
  *(timespec *)block.st_qspare = v0;
  block.st_birthtimespec = v0;
  *(timespec *)&block.st_size = v0;
  block.st_mtimespec = v0;
  block.st_ctimespec = v0;
  *(timespec *)&block.st_uid = v0;
  block.st_atimespec = v0;
  *(timespec *)&block.st_dev = v0;
  v1 = stat(__p, &block);
  v2 = v1;
  if ((v33 & 0x80000000) == 0)
  {
    if (v1)
      goto LABEL_3;
LABEL_19:
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
    }
    *(_QWORD *)&block.st_dev = MEMORY[0x24BDAC760];
    block.st_ino = 0x40000000;
    *(_QWORD *)&block.st_uid = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    *(_QWORD *)&block.st_rdev = &__block_descriptor_tmp_13_5;
    block.st_atimespec.tv_sec = (__darwin_time_t)&GetABMLogServer(void)::sLogServer;
    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v14 = *(std::__shared_weak_count **)algn_2579B8AE8;
      v30 = GetABMLogServer(void)::sLogServer;
      v31 = *(_QWORD *)algn_2579B8AE8;
      if (*(_QWORD *)algn_2579B8AE8)
        goto LABEL_22;
    }
    else
    {
      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
      v14 = *(std::__shared_weak_count **)algn_2579B8AE8;
      v30 = GetABMLogServer(void)::sLogServer;
      v31 = *(_QWORD *)algn_2579B8AE8;
      if (*(_QWORD *)algn_2579B8AE8)
      {
LABEL_22:
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
    }
    v17 = *((_QWORD *)GetGlobalLogger(&v30) + 4);
    if (v14)
    {
      v18 = (unint64_t *)&v14->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      block.st_dev = 136315138;
      *(_QWORD *)&block.st_mode = "abmserver";
      _os_log_impl(&dword_24B855000, v17, OS_LOG_TYPE_DEFAULT, "#I %s: Previous shutdown was not clean", (uint8_t *)&block, 0xCu);
    }
    _MergedGlobals_2 = 0;
    return;
  }
  operator delete(*(void **)__p);
  if (!v2)
    goto LABEL_19;
LABEL_3:
  _MergedGlobals_2 = 1;
  HIBYTE(block.st_gid) = 17;
  strcpy((char *)&block, "/tmp/abm.shutdown");
  v3 = open((const char *)&block, 513, 420);
  v4 = v3;
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if (v4 < 1)
      goto LABEL_33;
    do
    {
LABEL_5:
      if (!close(v4))
        return;
    }
    while (*__error() == 4);
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
    }
    *(_QWORD *)&block.st_dev = MEMORY[0x24BDAC760];
    block.st_ino = 0x40000000;
    *(_QWORD *)&block.st_uid = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    *(_QWORD *)&block.st_rdev = &__block_descriptor_tmp_13_5;
    block.st_atimespec.tv_sec = (__darwin_time_t)&GetABMLogServer(void)::sLogServer;
    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v6 = *(std::__shared_weak_count **)algn_2579B8AE8;
      v28 = GetABMLogServer(void)::sLogServer;
      v29 = *(_QWORD *)algn_2579B8AE8;
      if (!*(_QWORD *)algn_2579B8AE8)
        goto LABEL_12;
    }
    else
    {
      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
      v6 = *(std::__shared_weak_count **)algn_2579B8AE8;
      v28 = GetABMLogServer(void)::sLogServer;
      v29 = *(_QWORD *)algn_2579B8AE8;
      if (!*(_QWORD *)algn_2579B8AE8)
        goto LABEL_12;
    }
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
LABEL_12:
    v9 = *((_QWORD *)GetGlobalLogger(&v28) + 4);
    if (!v6)
      goto LABEL_16;
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        return;
    }
    else
    {
LABEL_16:
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        return;
    }
    block.st_dev = 136315394;
    *(_QWORD *)&block.st_mode = "abmserver";
    WORD2(block.st_ino) = 2080;
    *(__darwin_ino64_t *)((char *)&block.st_ino + 6) = (__darwin_ino64_t)"/tmp/abm.shutdown";
    v12 = "%s: Failed closing %s";
    goto LABEL_48;
  }
  if (v3 >= 1)
    goto LABEL_5;
LABEL_33:
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  *(_QWORD *)&block.st_dev = MEMORY[0x24BDAC760];
  block.st_ino = 0x40000000;
  *(_QWORD *)&block.st_uid = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  *(_QWORD *)&block.st_rdev = &__block_descriptor_tmp_13_5;
  block.st_atimespec.tv_sec = (__darwin_time_t)&GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v21 = *(std::__shared_weak_count **)algn_2579B8AE8;
    v26 = GetABMLogServer(void)::sLogServer;
    v27 = *(_QWORD *)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_38;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v21 = *(std::__shared_weak_count **)algn_2579B8AE8;
    v26 = GetABMLogServer(void)::sLogServer;
    v27 = *(_QWORD *)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_38;
  }
  v22 = (unint64_t *)&v21->__shared_owners_;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
LABEL_38:
  v9 = *((_QWORD *)GetGlobalLogger(&v26) + 4);
  if (v21)
  {
    v24 = (unint64_t *)&v21->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    block.st_dev = 136315394;
    *(_QWORD *)&block.st_mode = "abmserver";
    WORD2(block.st_ino) = 2080;
    *(__darwin_ino64_t *)((char *)&block.st_ino + 6) = (__darwin_ino64_t)"/tmp/abm.shutdown";
    v12 = "%s: Failed creating %s";
LABEL_48:
    _os_log_error_impl(&dword_24B855000, v9, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&block, 0x16u);
  }
}

void sub_24B8C570C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B8C5720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B8C5734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B8C5748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServer::getRunLoop(ABMServer *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 208);
}

uint64_t ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "server.main");
}

uint64_t ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBC618;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBC618;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<ABMServer *,std::shared_ptr<ABMServer>::__shared_ptr_default_delete<ABMServer,ABMServer>,std::allocator<ABMServer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMServer *,std::shared_ptr<ABMServer>::__shared_ptr_default_delete<ABMServer,ABMServer>,std::allocator<ABMServer>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (std::__shared_weak_count *)v1[1];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(v1);
    }
    else
    {
LABEL_6:
      operator delete(v1);
    }
  }
}

uint64_t std::__shared_ptr_pointer<ABMServer *,std::shared_ptr<ABMServer>::__shared_ptr_default_delete<ABMServer,ABMServer>,std::allocator<ABMServer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B953248)
    return a1 + 24;
  if (((v3 & 0x800000024B953248 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B953248))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B953248 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

_QWORD *std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_251CBC6A8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_24B8C5A50(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1}::operator() const(ABMServerInternal*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_24B8C5A70(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ABMServerInternal *,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal *)#1},std::allocator<ABMServerInternal>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMServerInternal *,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal *)#1},std::allocator<ABMServerInternal>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1}::operator() const(ABMServerInternal*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<ABMServerInternal *,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal *)#1},std::allocator<ABMServerInternal>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3__110shared_"
                     "ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3_"
                                "_110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1}::operator() const(ABMServerInternal*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

void std::__shared_ptr_emplace<Registry>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_251CBC6F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Registry>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_251CBC6F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<Registry>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*a1);
    std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[6];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    xpc_release((xpc_object_t)a1[4]);
    operator delete(a1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableINS1_9XpcServerEE15execute_wrappedIZZZN17ABMServerInternal4initENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEERKN3abm9OverridesEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISJ_NS7_14default_deleteISJ_EEEEENUlPvE_8__invokeESS_(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  void **v4;
  __int128 v5;
  ctu *v6;
  const void *v7;
  void *v8;
  const void *v9;
  const void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  ctu *v15;
  std::string v16;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = (void **)(*(_QWORD *)a1 + 8);
  if (*(char *)(*(_QWORD *)a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, (const std::string::value_type *)v2[1], v2[2]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v16.__r_.__value_.__r.__words[2] = *(_QWORD *)(*(_QWORD *)a1 + 24);
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v5;
  }
  v6 = (ctu *)v2[4];
  v15 = v6;
  if (v6)
    CFRetain(v6);
  v7 = (const void *)v2[5];
  if (v7)
    v8 = _Block_copy(v7);
  else
    v8 = 0;
  v14 = v8;
  ABMServerInternal::broadcast_sync(v3, (uint64_t)&v16, &v15, &v14);
  if (v8)
    _Block_release(v8);
  if (v6)
    CFRelease(v6);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v16.__r_.__value_.__l.__data_);
    v9 = (const void *)v2[5];
    if (!v9)
      goto LABEL_18;
    goto LABEL_17;
  }
  v9 = (const void *)v2[5];
  if (v9)
LABEL_17:
    _Block_release(v9);
LABEL_18:
  v10 = (const void *)v2[4];
  if (v10)
    CFRelease(v10);
  if (*((char *)v2 + 31) < 0)
    operator delete(*v4);
  operator delete(v2);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_24B8C5DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _QWORD *v16;
  uint64_t v17;
  void **v18;
  const void *v20;
  const void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;

  v20 = *(const void **)(v17 + 40);
  if (v20)
    _Block_release(v20);
  v21 = *(const void **)(v17 + 32);
  if (v21)
    CFRelease(v21);
  if (*(char *)(v17 + 31) < 0)
    operator delete(*v18);
  operator delete((void *)v17);
  v22 = (std::__shared_weak_count *)v16[2];
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::erase(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = *(_QWORD **)(a2 + 8);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = (_QWORD *)a2;
    do
    {
      v4 = (_QWORD *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  v8 = *(std::__shared_weak_count **)(a2 + 48);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  xpc_release(*(xpc_object_t *)(a2 + 32));
  operator delete((void *)a2);
}

uint64_t ctu::cf::insert<char const*,char const*>(__CFDictionary *a1, const __CFString **a2, const __CFString **a3, uint64_t a4, const __CFAllocator *a5)
{
  void *v8;
  const __CFAllocator *v9;
  void *v10;
  BOOL v11;
  uint64_t v12;
  void *value;

  value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  v8 = value;
  value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a3, (const char *)0x8000100, a4, v9);
  v10 = value;
  if (v8)
    v11 = value == 0;
  else
    v11 = 1;
  v12 = !v11;
  if (v11)
  {
    if (!value)
      goto LABEL_11;
  }
  else
  {
    CFDictionaryAddValue(a1, v8, value);
  }
  CFRelease(v10);
LABEL_11:
  if (v8)
    CFRelease(v8);
  return v12;
}

void sub_24B8C5FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_24B8C6020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_251CBC760;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcServerEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

std::__shared_weak_count_vtbl **sys::UIObserver::create_default_global@<X0>(uint64_t a1@<X8>)
{
  sys::UIObserver *v3;

  *(_QWORD *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  v3 = (sys::UIObserver *)operator new(0x40uLL);
  sys::UIObserver::UIObserver(v3);
  return std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>((std::__shared_weak_count_vtbl **)a1, (std::__shared_weak_count_vtbl *)v3);
}

void sub_24B8C6218(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

sys::UIObserver *sys::UIObserver::UIObserver(sys::UIObserver *this)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t *v4;

  v2 = dispatch_queue_create("sys::UIObserver", 0);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = v2;
  if (v2)
  {
    v3 = v2;
    dispatch_retain(v2);
    *((_QWORD *)this + 3) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  *((_QWORD *)this + 4) = &off_251CBC8D0;
  v4 = (uint64_t *)operator new(0x28uLL);
  boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::signal_impl(v4);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>((_QWORD *)this + 5, (uint64_t)v4);
  *((_QWORD *)this + 7) = 0xFFFFFFFF00000000;
  return this;
}

void sub_24B8C62D0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  operator delete(v2);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v1);
  _Unwind_Resume(a1);
}

void sub_24B8C62EC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v1);
  _Unwind_Resume(a1);
}

uint64_t sys::UIObserver::handleDisplayLockedChange_sync(uint64_t this)
{
  uint64_t v1;
  char v2;

  if (*(_DWORD *)(this + 60) != -1)
  {
    v1 = this;
    v2 = SBSGetScreenLockStatus() != 0;
    return boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v1 + 40), v2);
  }
  return this;
}

void sys::UIObserver::registerForScreenLockedNotification_sync(sys::UIObserver *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _QWORD v11[5];
  std::__shared_weak_count *v12;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v2 || (v3 = *(_QWORD *)this, (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1174405120;
  v11[2] = ___ZN3sys10UIObserver40registerForScreenLockedNotification_syncEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_11;
  v11[4] = v3;
  v12 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  notify_register_dispatch("com.apple.springboard.lockstate", (int *)this + 15, *((dispatch_queue_t *)this + 2), v11);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_24B8C6448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v14;

  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void ___ZN3sys10UIObserver40registerForScreenLockedNotification_syncEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  char v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 32);
      if (v5 && *(_DWORD *)(v5 + 60) != -1)
      {
        v6 = SBSGetScreenLockStatus() != 0;
        boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v5 + 40), v6);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_24B8C651C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t sys::UIObserver::unregisterForScreenLockedNotification_sync(sys::UIObserver *this)
{
  uint64_t result;

  result = *((unsigned int *)this + 15);
  if ((_DWORD)result != -1)
  {
    result = notify_cancel(result);
    *((_DWORD *)this + 15) = -1;
  }
  return result;
}

void sys::UIObserver::observe(sys::UIObserver *this@<X0>, char a2@<W1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  const void *v18;
  void (__cdecl *v19)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  char v28;
  _QWORD aBlock[6];
  std::__shared_weak_count *v30;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v4 || (v7 = *(_QWORD *)this, (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  *a3 = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  a3[1] = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  v14 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v15 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN3sys10UIObserver7observeEb_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_6_2;
  aBlock[4] = this;
  aBlock[5] = v7;
  v30 = v9;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = _Block_copy(aBlock);
  v18 = v17;
  if (v17)
    v19 = (void (__cdecl *)(std::__shared_weak_count *__hidden))_Block_copy(v17);
  else
    v19 = 0;
  v14->~__shared_weak_count = v19;
  *a3 = v14;
  v20 = (std::__shared_weak_count *)operator new(0x20uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__vftable = (std::__shared_weak_count_vtbl *)off_251CBCB18;
  v20->__shared_weak_owners_ = 0;
  v20[1].__vftable = v14;
  a3[1] = (std::__shared_weak_count_vtbl *)v20;
  if (v18)
    _Block_release(v18);
  v26[0] = v15;
  v26[1] = 1174405120;
  v26[2] = ___ZN3sys10UIObserver7observeEb_block_invoke_7;
  v26[3] = &__block_descriptor_tmp_8_3;
  v26[4] = this;
  v26[5] = v14;
  v27 = v20;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  v28 = a2;
  ctu::SharedSynchronizable<sys::UIObserver>::execute_wrapped((uint64_t *)this, (uint64_t)v26);
  v23 = v27;
  if (v27)
  {
    v24 = (unint64_t *)&v27->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_24B8C679C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v24;
  const void **v25;
  const void *v26;
  uint64_t v27;

  (*(void (**)(uint64_t))(v27 + 16))(v27);
  if (*v25)
    _Block_release(*v25);
  operator delete(v25);
  if (v26)
    _Block_release(v26);
  if (a24)
  {
    std::__shared_weak_count::__release_weak(a24);
    std::__shared_weak_count::__release_weak(v24);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN3sys10UIObserver7observeEb_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[5];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = (uint64_t *)a1[5];
      if (v6)
      {
        v9[0] = MEMORY[0x24BDAC760];
        v9[1] = 0x40000000;
        v9[2] = ___ZN3sys10UIObserver7observeEb_block_invoke_2;
        v9[3] = &__block_descriptor_tmp_5_2;
        v9[4] = v3;
        ctu::SharedSynchronizable<sys::UIObserver>::execute_wrapped(v6, (uint64_t)v9);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

uint64_t ___ZN3sys10UIObserver7observeEb_block_invoke_2(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(_DWORD *)(v1 + 56) - 1;
  *(_DWORD *)(v1 + 56) = v2;
  if (!v2)
  {
    result = *(unsigned int *)(v1 + 60);
    if ((_DWORD)result != -1)
    {
      result = notify_cancel(result);
      *(_DWORD *)(v1 + 60) = -1;
    }
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN3sys10UIObserver7observeEb_block_invoke_7(uint64_t a1)
{
  uint64_t v2;
  int v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(v2 + 56);
  *(_DWORD *)(v2 + 56) = v3 + 1;
  if (v3)
  {
    if (!*(_BYTE *)(a1 + 56))
      return;
  }
  else
  {
    sys::UIObserver::registerForScreenLockedNotification_sync((sys::UIObserver *)v2);
    if (!*(_BYTE *)(a1 + 56))
      return;
  }
  if (*(_DWORD *)(v2 + 60) != -1)
  {
    v4 = SBSGetScreenLockStatus() != 0;
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v2 + 40), v4);
  }
}

uint64_t __copy_helper_block_e8_40c51_ZTSNSt3__110shared_ptrIN3sys10UIObserver6HandleEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c51_ZTSNSt3__110shared_ptrIN3sys10UIObserver6HandleEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

std::__shared_weak_count_vtbl **std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  void *__p;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_251CBC880;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  __p = 0;
  if (!a2)
    return a1;
  v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
  if (!v6)
  {
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    do
LABEL_12:
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    goto LABEL_15;
  }
  if (v6->__shared_owners_ == -1)
  {
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    std::__shared_weak_count::__release_weak(v6);
    goto LABEL_12;
  }
LABEL_15:
  v14 = __p;
  __p = 0;
  if (v14)
    std::default_delete<sys::UIObserver>::operator()[abi:ne180100]((int)&__p, v14);
  return a1;
}

void sub_24B8C6B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  a10 = 0;
  if (v10)
    std::default_delete<sys::UIObserver>::operator()[abi:ne180100]((int)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<sys::UIObserver *,std::shared_ptr<sys::UIObserver>::__shared_ptr_default_delete<sys::UIObserver,sys::UIObserver>,std::allocator<sys::UIObserver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<sys::UIObserver *,std::shared_ptr<sys::UIObserver>::__shared_ptr_default_delete<sys::UIObserver,sys::UIObserver>,std::allocator<sys::UIObserver>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<sys::UIObserver>::operator()[abi:ne180100](a1 + 24, *(_QWORD **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<sys::UIObserver *,std::shared_ptr<sys::UIObserver>::__shared_ptr_default_delete<sys::UIObserver,sys::UIObserver>,std::allocator<sys::UIObserver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B953592)
    return a1 + 24;
  if (((v3 & 0x800000024B953592 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B953592))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B953592 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::default_delete<sys::UIObserver>::operator()[abi:ne180100](int a1, _QWORD *__p)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;

  if (__p)
  {
    __p[4] = &off_251CBC8D0;
    v3 = (unsigned int *)__p[6];
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v7 = v3 + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
      }
    }
    v10 = __p[3];
    if (v10)
      dispatch_release(v10);
    v11 = __p[2];
    if (v11)
      dispatch_release(v11);
    v12 = (std::__shared_weak_count *)__p[1];
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
    operator delete(__p);
  }
}

_QWORD *boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::~signal(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_251CBC8D0;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::~signal(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *__p = &off_251CBC8D0;
  v2 = (unsigned int *)__p[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  a1[1] = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = off_251CBCA50;
  v4[2] = a2;
  a1[1] = v4;
  return a1;
}

void sub_24B8C6E78(void *a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  __cxa_begin_catch(a1);
  if (v1)
  {
    v2 = (unsigned int *)v1[4];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_24B8C6F48(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  __cxa_end_catch();
  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::signal_impl(uint64_t *a1)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  pthread_mutex_t *v9;
  _QWORD *v10;
  uint64_t *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD *v24[4];

  v2 = (uint64_t *)operator new(0x20uLL);
  v20 = (uint64_t)&v20;
  v21 = &v20;
  v24[0] = 0;
  v24[1] = 0;
  v22 = 0;
  v23 = v24;
  v3 = operator new(0x40uLL);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v3, (uint64_t)&v20);
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(v2, (uint64_t)v3);
  v4 = operator new(1uLL);
  v2[2] = (uint64_t)v4;
  v2[3] = 0;
  v5 = operator new(0x18uLL);
  v5[1] = 0x100000001;
  *v5 = off_251CBC990;
  v5[2] = v4;
  v2[3] = (uint64_t)v5;
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(a1, (uint64_t)v2);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v23, v24[0]);
  if (v22)
  {
    v6 = v20;
    v7 = v21;
    v8 = *v21;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v20 + 8);
    **(_QWORD **)(v6 + 8) = v8;
    v22 = 0;
    if (v7 != &v20)
    {
      do
      {
        v12 = (uint64_t *)v7[1];
        v13 = (unsigned int *)v7[3];
        if (v13)
        {
          v14 = v13 + 2;
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
            v17 = v13 + 3;
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
              (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 24))(v13);
          }
        }
        operator delete(v7);
        v7 = v12;
      }
      while (v12 != &v20);
    }
  }
  a1[2] = *(_QWORD *)*a1;
  v9 = (pthread_mutex_t *)operator new(0x40uLL);
  pthread_mutex_init(v9, 0);
  a1[3] = (uint64_t)v9;
  a1[4] = 0;
  v10 = operator new(0x18uLL);
  v10[1] = 0x100000001;
  *v10 = off_251CBC9F0;
  v10[2] = v9;
  a1[4] = (uint64_t)v10;
  return a1;
}

void sub_24B8C7168(void *a1)
{
  pthread_mutex_t *v1;

  __cxa_begin_catch(a1);
  pthread_mutex_destroy(v1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_24B8C7180()
{
  __break(1u);
}

void sub_24B8C724C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  __cxa_end_catch();
  v11 = (unsigned int *)v9[3];
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
      v15 = v11 + 3;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 24))(v11);
    }
  }
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::~shared_ptr((uint64_t)v9);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_24B8C72DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  v11 = v10;
  operator delete(v11);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_24B8C7304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(a1 + 3), (_QWORD *)a1[4]);
  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::dispose(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 16);
  if (v1)
    operator delete(v1);
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_untyped_deleter()
{
  return 0;
}

void boost::detail::sp_counted_impl_p<boost::signals2::mutex>::dispose(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 16);
  if (v1)
  {
    pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 16));
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_untyped_deleter()
{
  return 0;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[4];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(uint64_t ***a1, char a2)
{
  __int128 v3;
  pthread_mutex_t *v4;
  uint64_t **v5;
  unsigned int v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  char *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  _QWORD v49[4];
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  uint64_t ***v53;
  uint64_t v54;
  uint64_t **v55;
  unsigned int *v56;
  char v57;
  __int128 v58;
  __int128 v59;
  std::runtime_error v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  void *__p[2];
  pthread_mutex_t *v72[2];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v57 = a2;
  v55 = 0;
  v56 = 0;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = v3;
  v70 = v3;
  v67 = v3;
  v68 = v3;
  v65 = v3;
  v66 = v3;
  v63 = v3;
  v64 = v3;
  v61 = v3;
  v62 = v3;
  v4 = (pthread_mutex_t *)a1[3];
  __p[0] = (void *)10;
  __p[1] = &v61;
  v72[0] = 0;
  v72[1] = v4;
  pthread_mutex_lock(v4);
  v5 = a1[1];
  if (!v5)
  {
    v7 = *a1;
    goto LABEL_15;
  }
  v6 = atomic_load((unsigned int *)v5 + 2);
  v7 = *a1;
  if (v6 == 1)
  {
    v8 = (uint64_t)a1[2];
    if ((uint64_t *)v8 == *v7)
    {
      v8 = (*v7)[1];
      *(_QWORD *)&v58 = v8;
      v9 = *v7;
      if (*v7 == (uint64_t *)v8)
      {
LABEL_11:
        a1[2] = (uint64_t **)v8;
        goto LABEL_12;
      }
    }
    else
    {
      *(_QWORD *)&v58 = a1[2];
      v9 = *v7;
      if (*v7 == (uint64_t *)v8)
        goto LABEL_11;
    }
    v10 = *(_QWORD *)(v8 + 16);
    if (*(_BYTE *)(v10 + 24))
    {
      v8 = *(_QWORD *)(v8 + 8);
    }
    else
    {
      v8 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(v9, (int *)(v10 + 64), (uint64_t **)&v58);
      v7 = *a1;
    }
    goto LABEL_11;
  }
LABEL_12:
  v5 = a1[1];
  if (v5)
  {
    v11 = (unsigned int *)(v5 + 1);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
LABEL_15:
  v13 = v56;
  v55 = v7;
  v56 = (unsigned int *)v5;
  if (v13)
  {
    v14 = v13 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
      v17 = v13 + 3;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
        (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 24))(v13);
    }
  }
  pthread_mutex_unlock(v72[1]);
  v20 = (char *)__p[1];
  if (__p[1])
  {
    if ((uint64_t)&v72[0][-1].__opaque[55] >= 0)
    {
      v21 = (char *)__p[1] + 16 * (uint64_t)v72[0];
      do
      {
        v22 = (unsigned int *)*((_QWORD *)v21 - 1);
        if (v22)
        {
          v23 = v22 + 2;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22);
            v26 = v22 + 3;
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
              (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 24))(v22);
          }
        }
        v21 -= 16;
      }
      while (v21 > v20);
    }
    if (__p[0] >= (void *)0xB)
      operator delete(__p[1]);
  }
  *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v74 = v29;
  v75 = v29;
  *(_OWORD *)v72 = v29;
  v73 = v29;
  v70 = v29;
  *(_OWORD *)__p = v29;
  v68 = v29;
  v69 = v29;
  v66 = v29;
  v67 = v29;
  v64 = v29;
  v65 = v29;
  v62 = v29;
  v63 = v29;
  v61 = v29;
  LOBYTE(v61) = 0;
  v76 = 0xAAAAAAAAAAAAAAAALL;
  v77 = 10;
  v78 = (char *)&v61 + 8;
  v79 = 0;
  v81 = 0;
  v82 = 0;
  v80 = &v57;
  v30 = v55;
  v31 = (uint64_t)*v55;
  v52 = &v61;
  v53 = a1;
  v54 = v31;
  *(_QWORD *)&v50 = *(_QWORD *)(v31 + 8);
  *((_QWORD *)&v50 + 1) = v31;
  *(_QWORD *)&v51 = &v61;
  *((_QWORD *)&v51 + 1) = v31;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v50);
  v49[0] = *v30;
  v49[1] = v49[0];
  v49[2] = &v61;
  v49[3] = v49[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(v49);
  v58 = v50;
  v59 = v51;
  v32 = v49[0];
  v33 = v50;
  if ((_QWORD)v50 == v49[0])
  {
    if (HIDWORD(v81) <= v81)
      goto LABEL_57;
LABEL_56:
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections((uint64_t)v53, v54);
    goto LABEL_57;
  }
  v34 = (_BYTE *)v59;
  if (!*(_BYTE *)v59)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v50 + 16) + 32);
    v36 = *(_QWORD *)(v35 + 24);
    if (!v36)
    {
      std::runtime_error::runtime_error(&v60, "call to empty boost::function");
      v60.__vftable = (std::runtime_error_vtbl *)&unk_251CB8BE8;
      boost::throw_exception<boost::bad_function_call>(&v60);
    }
    (*(void (**)(uint64_t, _QWORD))((v36 & 0xFFFFFFFFFFFFFFFELL) + 8))(v35 + 32, **(unsigned __int8 **)(v59 + 272));
    if (!*v34)
      *v34 = 1;
  }
  *(_QWORD *)&v58 = *(_QWORD *)(v33 + 8);
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v58);
  v37 = v59;
  if (*(_BYTE *)v59)
    *(_BYTE *)v59 = 0;
  for (i = v58; (_QWORD)v58 != v32; i = v58)
  {
    v39 = *(_QWORD *)(*(_QWORD *)(i + 16) + 32);
    v40 = *(_QWORD *)(v39 + 24);
    if (!v40)
    {
      std::runtime_error::runtime_error(&v60, "call to empty boost::function");
      v60.__vftable = (std::runtime_error_vtbl *)&unk_251CB8BE8;
      boost::throw_exception<boost::bad_function_call>(&v60);
    }
    (*(void (**)(uint64_t, _QWORD))((v40 & 0xFFFFFFFFFFFFFFFELL) + 8))(v39 + 32, **(unsigned __int8 **)(v37 + 272));
    if (!*(_BYTE *)v37)
      *(_BYTE *)v37 = 1;
    *(_QWORD *)&v58 = *(_QWORD *)(i + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v58);
    v37 = v59;
    if (*(_BYTE *)v59)
      *(_BYTE *)v59 = 0;
  }
  if (*((_DWORD *)v52 + 71) > *((_DWORD *)v52 + 70))
    goto LABEL_56;
LABEL_57:
  result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache((uint64_t)&v61);
  v42 = v56;
  if (v56)
  {
    v43 = v56 + 2;
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v42 + 16))(v42);
      v46 = v42 + 3;
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
        return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v42 + 24))(v42);
    }
  }
  return result;
}

void sub_24B8C7BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a29);
  JUMPOUT(0x24B8C7D38);
}

void sub_24B8C7BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::runtime_error a27)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  std::runtime_error::~runtime_error(&a27);
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v29);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache((uint64_t)&v31);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v30);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a23 + 16));
  __cxa_rethrow();
}

void sub_24B8C7C34(_Unwind_Exception *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v4);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache((uint64_t)&v6);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v5);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x24B8C7C04);
}

void sub_24B8C7C6C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,unint64_t a49,char *__p,uint64_t a51)
{
  char *v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;

  if (__p)
  {
    if (a51 - 1 >= 0)
    {
      v51 = &__p[16 * a51];
      do
      {
        v52 = (unsigned int *)*((_QWORD *)v51 - 1);
        if (v52)
        {
          v53 = v52 + 2;
          do
          {
            v54 = __ldaxr(v53);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, v53));
          if (!v55)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 16))(v52);
            v56 = v52 + 3;
            do
            {
              v57 = __ldaxr(v56);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v56));
            if (!v58)
              (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 24))(v52);
          }
        }
        v51 -= 16;
      }
      while (v51 > __p);
    }
    if (a49 >= 0xB)
      operator delete(__p);
  }
  JUMPOUT(0x24B8C7D38);
}

void sub_24B8C7D14(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x24B8C7D40);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280))
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  return a1;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int i;
  unsigned int v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  int *v51;
  char v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  int v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  unint64_t v85;
  unint64_t v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _QWORD v107[6];

  v107[3] = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  if (*a1 == a1[3])
    return;
  if (v1 == a1[1])
  {
LABEL_126:
    v80 = a1[3];
    if (v80 != v1)
    {
      *(_QWORD *)&v81 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v81 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v103 = v81;
      v104 = v81;
      v101 = v81;
      v102 = v81;
      v99 = v81;
      v100 = v81;
      v97 = v81;
      v98 = v81;
      v95 = v81;
      v96 = v81;
      v82 = *(_QWORD *)(v80 + 16);
      *(_QWORD *)&v105 = 10;
      *((_QWORD *)&v105 + 1) = &v95;
      *(_QWORD *)&v106 = 0;
      *((_QWORD *)&v106 + 1) = v82;
      (*(void (**)(uint64_t))(*(_QWORD *)v82 + 24))(v82);
      v83 = a1[2];
      a1[3] = a1[1];
      v84 = *(_DWORD **)(v83 + 288);
      if (v84)
        boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v84, &v95);
      *(_QWORD *)(v83 + 288) = 0;
      (*(void (**)(_QWORD))(**((_QWORD **)&v106 + 1) + 32))(*((_QWORD *)&v106 + 1));
      v85 = *((_QWORD *)&v105 + 1);
      if (*((_QWORD *)&v105 + 1))
      {
        if ((uint64_t)v106 - 1 >= 0)
        {
          v86 = *((_QWORD *)&v105 + 1) + 16 * v106;
          do
          {
            v87 = *(unsigned int **)(v86 - 8);
            if (v87)
            {
              v88 = v87 + 2;
              do
              {
                v89 = __ldaxr(v88);
                v90 = v89 - 1;
              }
              while (__stlxr(v90, v88));
              if (!v90)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v87 + 16))(v87);
                v91 = v87 + 3;
                do
                {
                  v92 = __ldaxr(v91);
                  v93 = v92 - 1;
                }
                while (__stlxr(v93, v91));
                if (!v93)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v87 + 24))(v87);
              }
            }
            v86 -= 16;
          }
          while (v86 > v85);
        }
        if ((unint64_t)v105 >= 0xB)
          operator delete(*((void **)&v105 + 1));
      }
    }
    return;
  }
  while (1)
  {
    v3 = a1[2];
    v4 = *(_QWORD *)(v3 + 264);
    if (v4)
    {
      if (v4 - 1 < 0)
      {
        v17 = *(_QWORD *)(v3 + 264);
      }
      else
      {
        v5 = *(_QWORD *)(v3 + 256);
        v6 = v5 + 24 * v4;
        v7 = v6;
        do
        {
          v8 = *(_DWORD *)(v7 - 24);
          v7 -= 24;
          if (v8 == v8 >> 31)
          {
            v9 = *(unsigned int **)(v6 - 8);
            if (v9)
            {
              v10 = v9 + 2;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
                v13 = v9 + 3;
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)(v6 - 16);
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          v6 = v7;
        }
        while (v7 > v5);
        v17 = *(_QWORD *)(v3 + 264);
        v1 = *a1;
      }
      *(_QWORD *)(v3 + 264) = v17 - v4;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v105 = v18;
    v106 = v18;
    v103 = v18;
    v104 = v18;
    v101 = v18;
    v102 = v18;
    v99 = v18;
    v100 = v18;
    v97 = v18;
    v98 = v18;
    v95 = v18;
    v96 = v18;
    v19 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)&v105 = 10;
    *((_QWORD *)&v105 + 1) = &v95;
    *(_QWORD *)&v106 = 0;
    *((_QWORD *)&v106 + 1) = v19;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = *a1;
    v21 = *(_QWORD *)(*a1 + 16);
    v22 = a1[2];
    v23 = *(uint64_t **)(v21 + 32);
    if (v23)
    {
      v24 = *v23;
      if (*v23 != v23[1])
      {
        while (1)
        {
          memset(v107, 170, 24);
          v25 = *(_DWORD *)v24 ^ (*(int *)v24 >> 31);
          if (v25 == 2)
          {
            (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v24 + 8) + 16))(&v94);
            v107[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v94 + 16))(v94);
            LODWORD(v107[0]) = 1;
            if (v94)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
              if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
                goto LABEL_68;
LABEL_39:
              v30 = *(_QWORD *)(v24 + 16);
              if (!v30)
                goto LABEL_69;
              if (!atomic_load((unsigned int *)(v30 + 8)))
                goto LABEL_69;
              goto LABEL_41;
            }
LABEL_38:
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_68;
            goto LABEL_39;
          }
          if (v25 != 1)
          {
            LODWORD(v107[0]) = 0;
            v107[1] = 0;
            v107[2] = 0;
            goto LABEL_38;
          }
          v26 = *(_QWORD *)(v24 + 16);
          if (!v26)
          {
LABEL_67:
            v107[1] = 0;
            v107[2] = v26;
            LODWORD(v107[0]) = 0;
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_68;
            goto LABEL_39;
          }
          v27 = (unsigned int *)(v26 + 8);
          for (i = *(_DWORD *)(v26 + 8); ; i = v29)
          {
            if (!i)
            {
              v26 = 0;
              goto LABEL_67;
            }
            v29 = __ldxr(v27);
            if (v29 != i)
            {
              __clrex();
              continue;
            }
            if (!__stxr(i + 1, v27))
              break;
          }
          v107[1] = *(_QWORD *)(v24 + 8);
          v107[2] = v26;
          LODWORD(v107[0]) = 0;
          if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) != 2)
            goto LABEL_39;
LABEL_68:
          if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v24 + 8) + 24))(*(_QWORD *)(v24 + 8)))
          {
LABEL_69:
            if (*(_BYTE *)(v21 + 24))
            {
              *(_BYTE *)(v21 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v21, &v95);
            }
            v52 = 1;
            if (LODWORD(v107[0]) == SLODWORD(v107[0]) >> 31)
              goto LABEL_72;
LABEL_89:
            if (v107[1])
              (*(void (**)(_QWORD))(*(_QWORD *)v107[1] + 8))(v107[1]);
            goto LABEL_91;
          }
LABEL_41:
          v32 = *(_QWORD *)(v22 + 264);
          if (v32 == *(_QWORD *)(v22 + 248))
          {
            if (v32 == -1)
            {
              v34 = *(_QWORD **)(v22 + 256);
              v50 = -1;
            }
            else
            {
              if (4 * v32 <= (unint64_t)(v32 + 1))
                v33 = v32 + 1;
              else
                v33 = 4 * v32;
              v34 = (_QWORD *)(v22 + 8);
              if (v33 >= 0xB)
              {
                if (v33 >= 0xAAAAAAAAAAAAAABLL)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v34 = operator new(24 * v33);
              }
              if (v32)
              {
                v35 = *(_QWORD *)(v22 + 256);
                v36 = v35 + 24 * v32;
                v37 = v34;
                do
                {
                  v39 = *(_QWORD *)(v35 + 8);
                  if (*(_DWORD *)v35 == *(int *)v35 >> 31)
                  {
                    v37[1] = v39;
                    v40 = *(_QWORD *)(v35 + 16);
                    v37[2] = v40;
                    if (v40)
                    {
                      v41 = (unsigned int *)(v40 + 8);
                      do
                        v42 = __ldxr(v41);
                      while (__stxr(v42 + 1, v41));
                    }
                  }
                  else
                  {
                    v37[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
                  }
                  v38 = *(_DWORD *)v35;
                  v35 += 24;
                  *(_DWORD *)v37 = v38 ^ (v38 >> 31);
                  v37 += 3;
                }
                while (v35 != v36);
              }
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((_QWORD *)(v22 + 8));
              *(_QWORD *)(v22 + 248) = v33;
              *(_QWORD *)(v22 + 256) = v34;
              v50 = *(_QWORD *)(v22 + 264);
            }
            v60 = &v34[3 * v50 + 1];
            v45 = v107[0];
            v46 = SLODWORD(v107[0]) >> 31;
            if (SLODWORD(v107[0]) >> 31 == LODWORD(v107[0]))
            {
              *v60 = v107[1];
              v61 = v107[2];
              v34[3 * v50 + 2] = v107[2];
              if (v61)
              {
                v62 = (unsigned int *)(v61 + 8);
                do
                  v63 = __ldxr(v62);
                while (__stxr(v63 + 1, v62));
              }
            }
            else
            {
              *v60 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v107[1] + 16))(v107[1]);
            }
            v51 = (int *)&v34[3 * v50];
          }
          else
          {
            v43 = *(_QWORD *)(v22 + 256);
            v44 = (_QWORD *)(v43 + 24 * v32 + 8);
            v45 = v107[0];
            v46 = SLODWORD(v107[0]) >> 31;
            if (SLODWORD(v107[0]) >> 31 == LODWORD(v107[0]))
            {
              *v44 = v107[1];
              v47 = v107[2];
              *(_QWORD *)(v43 + 24 * v32 + 16) = v107[2];
              if (v47)
              {
                v48 = (unsigned int *)(v47 + 8);
                do
                  v49 = __ldxr(v48);
                while (__stxr(v49 + 1, v48));
              }
            }
            else
            {
              *v44 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v107[1] + 16))(v107[1]);
            }
            v51 = (int *)(v43 + 24 * v32);
          }
          v52 = 0;
          *v51 = v45 ^ v46;
          ++*(_QWORD *)(v22 + 264);
          if (LODWORD(v107[0]) != SLODWORD(v107[0]) >> 31)
            goto LABEL_89;
LABEL_72:
          v53 = (unsigned int *)v107[2];
          if (v107[2])
          {
            v54 = (unsigned int *)(v107[2] + 8);
            do
            {
              v55 = __ldaxr(v54);
              v56 = v55 - 1;
            }
            while (__stlxr(v56, v54));
            if (!v56)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 16))(v53);
              v57 = v53 + 3;
              do
              {
                v58 = __ldaxr(v57);
                v59 = v58 - 1;
              }
              while (__stlxr(v59, v57));
              if (!v59)
                (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 24))(v53);
            }
          }
LABEL_91:
          if ((v52 & 1) == 0)
          {
            v24 += 24;
            if (v24 != *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8))
              continue;
          }
          v20 = *a1;
          v21 = *(_QWORD *)(*a1 + 16);
          v22 = a1[2];
          break;
        }
      }
    }
    if (*(_BYTE *)(v21 + 24))
    {
      ++*(_DWORD *)(v22 + 280);
      v64 = *(_QWORD *)(v21 + 16);
      if (v64)
      {
        if (atomic_load((unsigned int *)(v64 + 8)))
        {
          v66 = 1;
          goto LABEL_108;
        }
        v22 = a1[2];
        v20 = *a1;
      }
      a1[3] = v20;
      if (a1[1] == v20)
      {
        v69 = *(_DWORD **)(v22 + 288);
        if (v69)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v69, &v95);
        v66 = 0;
        *(_QWORD *)(v22 + 288) = 0;
      }
      else
      {
        v67 = *(_QWORD *)(v20 + 16);
        v68 = *(_DWORD **)(v22 + 288);
        if (v68)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v68, &v95);
        *(_QWORD *)(v22 + 288) = v67;
        v66 = 0;
        if (v67)
          ++*(_DWORD *)(v67 + 28);
      }
    }
    else
    {
      ++*(_DWORD *)(v22 + 284);
      v66 = 1;
    }
LABEL_108:
    (*(void (**)(_QWORD))(**((_QWORD **)&v106 + 1) + 32))(*((_QWORD *)&v106 + 1));
    v70 = *((_QWORD *)&v105 + 1);
    if (*((_QWORD *)&v105 + 1))
    {
      if ((uint64_t)v106 - 1 >= 0)
      {
        v71 = *((_QWORD *)&v105 + 1) + 16 * v106;
        do
        {
          v72 = *(unsigned int **)(v71 - 8);
          if (v72)
          {
            v73 = v72 + 2;
            do
            {
              v74 = __ldaxr(v73);
              v75 = v74 - 1;
            }
            while (__stlxr(v75, v73));
            if (!v75)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 16))(v72);
              v76 = v72 + 3;
              do
              {
                v77 = __ldaxr(v76);
                v78 = v77 - 1;
              }
              while (__stlxr(v78, v76));
              if (!v78)
                (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 24))(v72);
            }
          }
          v71 -= 16;
        }
        while (v71 > v70);
      }
      if ((unint64_t)v105 >= 0xB)
        operator delete(*((void **)&v105 + 1));
    }
    v1 = *a1;
    v79 = a1[1];
    if (!v66)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    *a1 = v1;
    if (v1 == v79)
    {
      v1 = v79;
      goto LABEL_126;
    }
  }
  if (v1 == v79)
    goto LABEL_126;
}

void sub_24B8C85D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B8C85EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,unint64_t a33,char *__p,uint64_t a35)
{
  char *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;

  if (__p)
  {
    if (a35 - 1 >= 0)
    {
      v36 = &__p[16 * a35];
      do
      {
        v37 = (unsigned int *)*((_QWORD *)v36 - 1);
        if (v37)
        {
          v38 = v37 + 2;
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 16))(v37);
            v41 = v37 + 3;
            do
            {
              v42 = __ldaxr(v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v41));
            if (!v43)
              (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 24))(v37);
          }
        }
        v36 -= 16;
      }
      while (v36 > __p);
    }
    if (a33 >= 0xB)
    {
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x24B8C8888);
}

void sub_24B8C8748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  if (a5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a5 + 8))(a5);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x24B8C8794);
}

void sub_24B8C8770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B8C8788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(v5 - 128);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B8C87AC(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (v3 != v2)
    {
      v4 = v2;
      do
      {
        if (*(_DWORD *)v4 == *(int *)v4 >> 31)
        {
          v5 = *(unsigned int **)(v4 + 16);
          if (v5)
          {
            v6 = v5 + 2;
            do
            {
              v7 = __ldaxr(v6);
              v8 = v7 - 1;
            }
            while (__stlxr(v8, v6));
            if (!v8)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
              v9 = v5 + 3;
              do
              {
                v10 = __ldaxr(v9);
                v11 = v10 - 1;
              }
              while (__stlxr(v11, v9));
              if (!v11)
                (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
            }
          }
        }
        else
        {
          v12 = *(_QWORD *)(v4 + 8);
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        v4 += 24;
      }
      while (v4 != v3);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x24B8C8888);
}

void sub_24B8C8864()
{
  void *v0;
  unint64_t v1;

  __cxa_end_catch();
  if (v1 >= 0xB)
    operator delete(v0);
  JUMPOUT(0x24B8C878CLL);
}

void sub_24B8C8880(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v1 = a1[31];
  if (v1)
  {
    v3 = a1[32];
    if (v3 - 1 >= 0)
    {
      v4 = v1 + 24 * v3;
      v5 = v4;
      do
      {
        v6 = *(_DWORD *)(v5 - 24);
        v5 -= 24;
        if (v6 == v6 >> 31)
        {
          v7 = *(unsigned int **)(v4 - 8);
          if (v7)
          {
            v8 = v7 + 2;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
              v11 = v7 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
            }
          }
        }
        else
        {
          v14 = *(_QWORD *)(v4 - 16);
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        }
        v4 = v5;
      }
      while (v5 > v1);
    }
    if (a1[30] >= 0xBuLL)
      operator delete((void *)a1[31]);
  }
}

void boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  pthread_mutex_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  __int128 v36;
  _OWORD v37[10];
  unint64_t v38;
  void *__p;
  uint64_t v40;
  pthread_mutex_t *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[8] = v4;
  v37[9] = v4;
  v37[6] = v4;
  v37[7] = v4;
  v37[4] = v4;
  v37[5] = v4;
  v37[2] = v4;
  v37[3] = v4;
  v37[0] = v4;
  v37[1] = v4;
  v5 = *(pthread_mutex_t **)(a1 + 24);
  v38 = 10;
  __p = v37;
  v40 = 0;
  v41 = v5;
  pthread_mutex_lock(v5);
  if (**(_QWORD **)a1 == a2)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6 || (v7 = atomic_load((unsigned int *)(v6 + 8)), v7 != 1))
    {
      v8 = (uint64_t *)operator new(0x20uLL);
      v9 = *(uint64_t **)a1;
      v10 = **(_QWORD **)a1;
      v11 = operator new(0x40uLL);
      boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v11, v10);
      boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(v8, (uint64_t)v11);
      v8[2] = v9[2];
      v12 = v9[3];
      v8[3] = v12;
      if (v12)
      {
        v13 = (unsigned int *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>((uint64_t *)&v36, (uint64_t)v8);
      v15 = *(uint64_t **)a1;
      v16 = *(unsigned int **)(a1 + 8);
      *(_OWORD *)a1 = v36;
      *(_QWORD *)&v36 = v15;
      *((_QWORD *)&v36 + 1) = v16;
      if (v16)
      {
        v17 = v16 + 2;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 16))(v16);
          v20 = v16 + 3;
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
            (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
        }
      }
    }
    v23 = *(uint64_t ***)a1;
    v24 = **(uint64_t ***)a1;
    v25 = v24[1];
    *(_QWORD *)&v36 = v25;
    if (v24 != (uint64_t *)v25)
    {
      do
      {
        while (1)
        {
          v26 = *(_QWORD *)(v25 + 16);
          if (!*(_BYTE *)(v26 + 24))
            break;
          v25 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)&v36 = v25;
          v24 = *v23;
          if ((uint64_t *)v25 == *v23)
            goto LABEL_20;
        }
        v25 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(v24, (int *)(v26 + 64), (uint64_t **)&v36);
        v23 = *(uint64_t ***)a1;
        *(_QWORD *)&v36 = v25;
        v24 = *v23;
      }
      while ((uint64_t *)v25 != *v23);
    }
LABEL_20:
    *(_QWORD *)(a1 + 16) = v25;
  }
  pthread_mutex_unlock(v41);
  v27 = (char *)__p;
  if (__p)
  {
    if (v40 - 1 >= 0)
    {
      v28 = (char *)__p + 16 * v40;
      do
      {
        v29 = (unsigned int *)*((_QWORD *)v28 - 1);
        if (v29)
        {
          v30 = v29 + 2;
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 16))(v29);
            v33 = v29 + 3;
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
              (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 24))(v29);
          }
        }
        v28 -= 16;
      }
      while (v28 > v27);
    }
    if (v38 >= 0xB)
      operator delete(__p);
  }
}

void sub_24B8C8C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v14[10];
  unint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 288);
  if (v2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[8] = v3;
    v14[9] = v3;
    v14[6] = v3;
    v14[7] = v3;
    v14[4] = v3;
    v14[5] = v3;
    v14[2] = v3;
    v14[3] = v3;
    v14[0] = v3;
    v14[1] = v3;
    v15 = 10;
    __p = v14;
    v17 = 0;
    v18 = v2;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    v4 = (char *)__p;
    if (__p)
    {
      if (v17 - 1 >= 0)
      {
        v5 = (char *)__p + 16 * v17;
        do
        {
          v6 = (unsigned int *)*((_QWORD *)v5 - 1);
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v15 >= 0xB)
        operator delete(__p);
    }
  }
  boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((_QWORD *)(a1 + 8));
  if (*(_BYTE *)a1)
    *(_BYTE *)a1 = 0;
  return a1;
}

void sub_24B8C8E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ctu::SharedSynchronizable<sys::UIObserver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3sys10UIObserverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_251CBCAD8;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3sys10UIObserverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIKN3sys10UIObserverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIKN3sys10UIObserverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_pointer<sys::UIObserver::Handle *,std::shared_ptr<sys::UIObserver::Handle>::__shared_ptr_default_delete<sys::UIObserver::Handle,sys::UIObserver::Handle>,std::allocator<sys::UIObserver::Handle>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<sys::UIObserver::Handle *,std::shared_ptr<sys::UIObserver::Handle>::__shared_ptr_default_delete<sys::UIObserver::Handle,sys::UIObserver::Handle>,std::allocator<sys::UIObserver::Handle>>::__on_zero_shared(uint64_t a1)
{
  const void **v1;

  v1 = *(const void ***)(a1 + 24);
  if (v1)
  {
    (*((void (**)(void))*v1 + 2))();
    if (*v1)
      _Block_release(*v1);
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<sys::UIObserver::Handle *,std::shared_ptr<sys::UIObserver::Handle>::__shared_ptr_default_delete<sys::UIObserver::Handle,sys::UIObserver::Handle>,std::allocator<sys::UIObserver::Handle>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B9537D6)
    return a1 + 24;
  if (((v3 & 0x800000024B9537D6 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B9537D6))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B9537D6 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void AWDModule::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  __int128 v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13[2];
  uint64_t v14;
  __int128 block;
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  uint64_t *v19;

  *a2 = 0;
  a2[1] = 0;
  if (capabilities::radio::supportsMultiClientAWD((capabilities::radio *)a1))
  {
    v4 = operator new(0xC0uLL);
    v5 = (uint64_t)v4;
    v6 = *a1;
    v7 = (std::__shared_weak_count *)a1[1];
    v13[0] = v6;
    v13[1] = (uint64_t)v7;
    if (v7)
    {
      p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
    }
    AWDModule::AWDModule(v4, v13);
    *(_QWORD *)&block = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
    std::shared_ptr<AWDModule>::shared_ptr[abi:ne180100]<AWDModule,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1},void>(&block, v5);
    ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(block + 48);
    v10 = block;
    block = 0uLL;
    *(_OWORD *)a2 = v10;
    if (v7)
    {
      v12 = v10;
      std::__shared_weak_count::__release_weak(v7);
      *(_QWORD *)&v10 = v12;
    }
    v14 = v10;
    *(_QWORD *)&block = MEMORY[0x24BDAC760];
    *((_QWORD *)&block + 1) = 0x40000000;
    v16 = ___ZNK3ctu20SharedSynchronizableI9AWDModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
    v17 = &__block_descriptor_tmp_30_0;
    v18 = v10 + 120;
    v19 = &v14;
    v11 = *(NSObject **)(v10 + 136);
    if (*(_QWORD *)(v10 + 144))
      dispatch_async_and_wait(v11, &block);
    else
      dispatch_sync(v11, &block);
  }
}

void sub_24B8C9310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v7);
  _Unwind_Resume(a1);
}

void sub_24B8C9378(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AWDModule::init(AWDModule *this)
{
  NSObject *v1;
  char *v2;
  AWDModule *v3;
  _QWORD block[6];

  v3 = this;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI9AWDModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_30_0;
  block[4] = (char *)this + 120;
  block[5] = &v3;
  v2 = (char *)this + 136;
  v1 = *((_QWORD *)this + 17);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void AWDModule::~AWDModule(AWDModule *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;

  *(_QWORD *)this = off_251CBCB68;
  *((_QWORD *)this + 6) = &unk_251CBCBD8;
  std::__tree<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::__map_value_compare<awd::AppID,std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::less<awd::AppID>,true>,std::allocator<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>>>::destroy(*((_QWORD **)this + 22));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_QWORD *)this + 6) = off_251CBCF68;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v5 = *((_QWORD *)this + 18);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)this + 17);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  *(_QWORD *)this = off_251CC0DB8;
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    v9 = *((_QWORD *)this + 4);
    v10 = (void *)*((_QWORD *)this + 3);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0)
          operator delete(*(void **)(v9 - 24));
        v9 -= 24;
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v8;
    operator delete(v10);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

{
  void *v1;

  AWDModule::~AWDModule(this);
  operator delete(v1);
}

_QWORD *ctu::SharedLoggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBCF68;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBCF68;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void `non-virtual thunk to'AWDModule::~AWDModule(AWDModule *this)
{
  AWDModule::~AWDModule((AWDModule *)((char *)this - 48));
}

{
  void *v1;

  AWDModule::~AWDModule((AWDModule *)((char *)this - 48));
  operator delete(v1);
}

_QWORD *AWDModule::AWDModule(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *initially_inactive;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  CommandDriverFactory *v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  _BYTE v35[16];
  __int128 block;
  void (*v37)(uint64_t);
  void *v38;
  uint64_t *v39;
  _QWORD v40[2];

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *a1 = off_251CC0DB8;
    a1[1] = v3;
    a1[2] = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    a1[3] = 0;
    a1[4] = 0;
    a1[5] = 0;
    std::__shared_weak_count::__release_weak(v4);
    *a1 = &unk_251CB9EC8;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *a1 = &unk_251CB9EC8;
    a1[1] = v3;
  }
  *a1 = off_251CBCB68;
  a1[6] = &unk_251CBCBD8;
  v9 = a1 + 6;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v35, "com.apple.telephony.abm", "awd.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  *(_QWORD *)&block = MEMORY[0x24BDAC760];
  *((_QWORD *)&block + 1) = 0x40000000;
  v37 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v38 = &__block_descriptor_tmp_13_5;
  v39 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v12 = GetABMLogServer(void)::sLogServer;
    v11 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (*(_QWORD *)algn_2579B8AE8)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v12 = GetABMLogServer(void)::sLogServer;
    v11 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (*(_QWORD *)algn_2579B8AE8)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v16 = dispatch_queue_create_with_target_V2("awd.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v16, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v16);
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = v16;
  if (v16)
  {
    dispatch_retain(v16);
    a1[18] = 0;
    dispatch_release(v16);
  }
  else
  {
    a1[18] = 0;
  }
  a1[6] = off_251CBCF68;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&block);
  a1[7] = &unk_251CB85F0;
  a1[13] = v12;
  a1[14] = v11;
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v40);
    *v9 = off_251CBCFF8;
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v40);
    *v9 = off_251CBCFF8;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v35);
  *a1 = off_251CBCB68;
  a1[6] = &unk_251CBCBD8;
  v20 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v21 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v20);
    v22 = block;
    block = 0uLL;
    v23 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v22;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
    if (*((_QWORD *)&block + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v21 = off_2579B85E0;
  }
  v29 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  v40[0] = v21;
  v40[1] = *(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v30 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 64))(v21);
  if (v29)
  {
    v32 = (unint64_t *)&v29->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  a1[23] = 0;
  a1[22] = 0;
  a1[21] = a1 + 22;
  return a1;
}

void sub_24B8C99C8(_Unwind_Exception *a1)
{
  Service *v1;
  _QWORD *v2;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  ctu::SharedLoggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v2);
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void sub_24B8C9A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  Service *v19;
  _QWORD *v20;

  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a19);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v20);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v19);
  _Unwind_Resume(a1);
}

void sub_24B8C9A4C(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

const char *AWDModule::getName(AWDModule *this)
{
  return "awd.mod";
}

_BYTE *AWDModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void AWDModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t *v4;
  NSObject *v5;
  _QWORD v6[5];
  dispatch_group_t group;
  char v8;

  v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 1174405120;
  v6[2] = ___ZN9AWDModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_12;
  v5 = *a3;
  v6[4] = a1;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v8 = a2;
  ctu::SharedSynchronizable<AWDModule>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN9AWDModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void AWDModule::initialize(uint64_t a1, NSObject **a2)
{
  uint64_t *v2;
  NSObject *v3;
  _QWORD v4[5];
  dispatch_group_t group;

  v2 = (uint64_t *)(a1 + 120);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 1174405120;
  v4[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v4[3] = &__block_descriptor_tmp_12_1;
  v3 = *a2;
  v4[4] = a1;
  group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  ctu::SharedSynchronizable<AWDModule>::execute_wrapped(v2, (uint64_t)v4);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  const void *v35;
  size_t v36;
  size_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  _QWORD v43[6];
  std::__shared_weak_count *v44;
  const void *v45;
  _QWORD v46[6];
  std::__shared_weak_count *v47;
  const void *v48;
  _QWORD v49[6];
  std::__shared_weak_count *v50;
  const void *v51;
  _QWORD aBlock[6];
  std::__shared_weak_count *v53;
  const void *v54;
  void **__dst;
  size_t v56;
  unint64_t v57;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const void *)*MEMORY[0x24BE05348];
  v11 = strlen((const char *)*MEMORY[0x24BE05348]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v56 = v12;
    v57 = v15 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v57) = v11;
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v12);
LABEL_17:
  *((_BYTE *)p_dst + v12) = 0;
  v16 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_5_3;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v53 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = _Block_copy(aBlock);
  v54 = v18;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v54);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst);
  v19 = (const void *)*MEMORY[0x24BE054B0];
  v20 = strlen((const char *)*MEMORY[0x24BE054B0]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    v56 = v21;
    v57 = v24 | 0x8000000000000000;
    __dst = v22;
  }
  else
  {
    HIBYTE(v57) = v20;
    v22 = (void **)&__dst;
    if (!v20)
      goto LABEL_31;
  }
  memmove(v22, v19, v21);
LABEL_31:
  *((_BYTE *)v22 + v21) = 0;
  v49[0] = v16;
  v49[1] = 1174405120;
  v49[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_6;
  v49[3] = &__block_descriptor_tmp_7_1;
  v49[4] = v1;
  v49[5] = v3;
  v50 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = _Block_copy(v49);
  v51 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v51);
  if (v26)
    _Block_release(v26);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst);
  v27 = (const void *)*MEMORY[0x24BE05050];
  v28 = strlen((const char *)*MEMORY[0x24BE05050]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = (void **)operator new(v31 + 1);
    v56 = v29;
    v57 = v32 | 0x8000000000000000;
    __dst = v30;
  }
  else
  {
    HIBYTE(v57) = v28;
    v30 = (void **)&__dst;
    if (!v28)
      goto LABEL_45;
  }
  memmove(v30, v27, v29);
LABEL_45:
  *((_BYTE *)v30 + v29) = 0;
  v46[0] = v16;
  v46[1] = 1174405120;
  v46[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_8;
  v46[3] = &__block_descriptor_tmp_9_1;
  v46[4] = v1;
  v46[5] = v3;
  v47 = v5;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  v34 = _Block_copy(v46);
  v48 = v34;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v48);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst);
  v35 = (const void *)*MEMORY[0x24BE05378];
  v36 = strlen((const char *)*MEMORY[0x24BE05378]);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v37 = v36;
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = (void **)operator new(v39 + 1);
    v56 = v37;
    v57 = v40 | 0x8000000000000000;
    __dst = v38;
  }
  else
  {
    HIBYTE(v57) = v36;
    v38 = (void **)&__dst;
    if (!v36)
      goto LABEL_59;
  }
  memmove(v38, v35, v37);
LABEL_59:
  *((_BYTE *)v38 + v37) = 0;
  v43[0] = v16;
  v43[1] = 1174405120;
  v43[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_10;
  v43[3] = &__block_descriptor_tmp_11_3;
  v43[4] = v1;
  v43[5] = v3;
  v44 = v5;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  v42 = _Block_copy(v43);
  v45 = v42;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v45);
  if (v42)
    _Block_release(v42);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  if (v47)
    std::__shared_weak_count::__release_weak(v47);
  if (v50)
    std::__shared_weak_count::__release_weak(v50);
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_24B8CA124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  std::__shared_weak_count *v39;
  const void *v40;
  uint64_t v41;
  std::__shared_weak_count *v43;

  if (v40)
    _Block_release(v40);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if ((*(char *)(v41 - 105) & 0x80000000) == 0)
    {
LABEL_5:
      v43 = a23;
      if (!a23)
      {
LABEL_10:
        if (a31)
          std::__shared_weak_count::__release_weak(a31);
        if (a39)
        {
          std::__shared_weak_count::__release_weak(a39);
          std::__shared_weak_count::__release_weak(v39);
          _Unwind_Resume(a1);
        }
        std::__shared_weak_count::__release_weak(v39);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v43);
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v41 - 105) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v41 - 128));
  v43 = a23;
  if (!a23)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  xpc_object_t v14;
  const void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  xpc_object_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_25:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (std::__shared_weak_count *)a1[6];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
      }
      v14 = *a2;
      if (v14)
      {
        xpc_retain(v14);
        v15 = *a3;
        if (*a3)
          goto LABEL_9;
      }
      else
      {
        v14 = xpc_null_create();
        v15 = *a3;
        if (*a3)
        {
LABEL_9:
          v16 = _Block_copy(v15);
          v17 = (std::__shared_weak_count *)v7[16];
          if (!v17)
LABEL_30:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_13;
        }
      }
      v16 = 0;
      v17 = (std::__shared_weak_count *)v7[16];
      if (!v17)
        goto LABEL_30;
LABEL_13:
      v18 = v7[15];
      v19 = std::__shared_weak_count::lock(v17);
      if (!v19)
        goto LABEL_30;
      v20 = v19;
      v21 = operator new(0x28uLL);
      v22 = v21;
      *v21 = v10;
      v21[1] = v11;
      if (v11)
      {
        v23 = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v21[2] = v7;
      v21[3] = v14;
      v25 = xpc_null_create();
      v22[4] = v16;
      v26 = v7[17];
      v27 = (unint64_t *)&v20->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v29 = operator new(0x18uLL);
      *v29 = v22;
      v29[1] = v18;
      v29[2] = v20;
      dispatch_async_f(v26, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      do
        v30 = __ldaxr(v27);
      while (__stlxr(v30 - 1, v27));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      xpc_release(v25);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      goto LABEL_25;
    }
  }
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_6(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  xpc_object_t v14;
  const void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  xpc_object_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_25:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (std::__shared_weak_count *)a1[6];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
      }
      v14 = *a2;
      if (v14)
      {
        xpc_retain(v14);
        v15 = *a3;
        if (*a3)
          goto LABEL_9;
      }
      else
      {
        v14 = xpc_null_create();
        v15 = *a3;
        if (*a3)
        {
LABEL_9:
          v16 = _Block_copy(v15);
          v17 = (std::__shared_weak_count *)v7[16];
          if (!v17)
LABEL_30:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_13;
        }
      }
      v16 = 0;
      v17 = (std::__shared_weak_count *)v7[16];
      if (!v17)
        goto LABEL_30;
LABEL_13:
      v18 = v7[15];
      v19 = std::__shared_weak_count::lock(v17);
      if (!v19)
        goto LABEL_30;
      v20 = v19;
      v21 = operator new(0x28uLL);
      v22 = v21;
      *v21 = v10;
      v21[1] = v11;
      if (v11)
      {
        v23 = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v21[2] = v7;
      v21[3] = v14;
      v25 = xpc_null_create();
      v22[4] = v16;
      v26 = v7[17];
      v27 = (unint64_t *)&v20->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v29 = operator new(0x18uLL);
      *v29 = v22;
      v29[1] = v18;
      v29[2] = v20;
      dispatch_async_f(v26, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      do
        v30 = __ldaxr(v27);
      while (__stlxr(v30 - 1, v27));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      xpc_release(v25);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      goto LABEL_25;
    }
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_8(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  xpc_object_t v14;
  const void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  xpc_object_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_25:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (std::__shared_weak_count *)a1[6];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
      }
      v14 = *a2;
      if (v14)
      {
        xpc_retain(v14);
        v15 = *a3;
        if (*a3)
          goto LABEL_9;
      }
      else
      {
        v14 = xpc_null_create();
        v15 = *a3;
        if (*a3)
        {
LABEL_9:
          v16 = _Block_copy(v15);
          v17 = (std::__shared_weak_count *)v7[16];
          if (!v17)
LABEL_30:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_13;
        }
      }
      v16 = 0;
      v17 = (std::__shared_weak_count *)v7[16];
      if (!v17)
        goto LABEL_30;
LABEL_13:
      v18 = v7[15];
      v19 = std::__shared_weak_count::lock(v17);
      if (!v19)
        goto LABEL_30;
      v20 = v19;
      v21 = operator new(0x28uLL);
      v22 = v21;
      *v21 = v10;
      v21[1] = v11;
      if (v11)
      {
        v23 = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v21[2] = v7;
      v21[3] = v14;
      v25 = xpc_null_create();
      v22[4] = v16;
      v26 = v7[17];
      v27 = (unint64_t *)&v20->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v29 = operator new(0x18uLL);
      *v29 = v22;
      v29[1] = v18;
      v29[2] = v20;
      dispatch_async_f(v26, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      do
        v30 = __ldaxr(v27);
      while (__stlxr(v30 - 1, v27));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      xpc_release(v25);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      goto LABEL_25;
    }
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_10(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  xpc_object_t v14;
  const void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  xpc_object_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_25:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (std::__shared_weak_count *)a1[6];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
      }
      v14 = *a2;
      if (v14)
      {
        xpc_retain(v14);
        v15 = *a3;
        if (*a3)
          goto LABEL_9;
      }
      else
      {
        v14 = xpc_null_create();
        v15 = *a3;
        if (*a3)
        {
LABEL_9:
          v16 = _Block_copy(v15);
          v17 = (std::__shared_weak_count *)v7[16];
          if (!v17)
LABEL_30:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_13;
        }
      }
      v16 = 0;
      v17 = (std::__shared_weak_count *)v7[16];
      if (!v17)
        goto LABEL_30;
LABEL_13:
      v18 = v7[15];
      v19 = std::__shared_weak_count::lock(v17);
      if (!v19)
        goto LABEL_30;
      v20 = v19;
      v21 = operator new(0x28uLL);
      v22 = v21;
      *v21 = v10;
      v21[1] = v11;
      if (v11)
      {
        v23 = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v21[2] = v7;
      v21[3] = v14;
      v25 = xpc_null_create();
      v22[4] = v16;
      v26 = v7[17];
      v27 = (unint64_t *)&v20->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v29 = operator new(0x18uLL);
      *v29 = v22;
      v29[1] = v18;
      v29[2] = v20;
      dispatch_async_f(v26, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      do
        v30 = __ldaxr(v27);
      while (__stlxr(v30 - 1, v27));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      xpc_release(v25);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      goto LABEL_25;
    }
  }
}

void AWDModule::sendPayload_sync(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  _QWORD v18[4];
  void *v19;
  void *aBlock;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint8_t buf[16];

  v6 = *(_QWORD *)(a1 + 152);
  if (v6)
  {
    v9 = (std::__shared_weak_count *)a2[1];
    v21 = *a2;
    v22 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v18[0] = MEMORY[0x24BDAC760];
    v18[1] = 1174405120;
    v18[2] = ___ZN9AWDModule16sendPayload_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_11PayloadTypeERKNS0_6vectorIhNS0_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v18[3] = &__block_descriptor_tmp_14_0;
    v12 = *(void **)a5;
    if (*(_QWORD *)a5)
      v12 = _Block_copy(v12);
    v19 = v12;
    aBlock = _Block_copy(v18);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void **))(*(_QWORD *)v6 + 56))(v6, &v21, a3, a4, &aBlock);
    if (aBlock)
      _Block_release(aBlock);
    v13 = v22;
    if (!v22)
      goto LABEL_13;
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v16 = v19;
      if (!v19)
        return;
    }
    else
    {
LABEL_13:
      v16 = v19;
      if (!v19)
        return;
    }
    _Block_release(v16);
  }
  else
  {
    v17 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_24B855000, v17, OS_LOG_TYPE_ERROR, "Cannot send payload because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(_QWORD *)a5 + 16))();
  }
}

void sub_24B8CAC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a13)
    _Block_release(a13);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule16sendPayload_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_11PayloadTypeERKNS0_6vectorIhNS0_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

void AWDModule::enableMetricSubmission_sync(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  _QWORD v16[4];
  void *v17;
  void *aBlock;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint8_t buf[16];

  v5 = *(_QWORD *)(a1 + 152);
  if (v5)
  {
    v7 = (std::__shared_weak_count *)a2[1];
    v19 = *a2;
    v20 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v16[0] = MEMORY[0x24BDAC760];
    v16[1] = 1174405120;
    v16[2] = ___ZN9AWDModule27enableMetricSubmission_syncENSt3__110shared_ptrIN3awd10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v16[3] = &__block_descriptor_tmp_15_2;
    v10 = *(void **)a4;
    if (*(_QWORD *)a4)
      v10 = _Block_copy(v10);
    v17 = v10;
    aBlock = _Block_copy(v16);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, void **))(*(_QWORD *)v5 + 48))(v5, &v19, a3, &aBlock);
    if (aBlock)
      _Block_release(aBlock);
    v11 = v20;
    if (!v20)
      goto LABEL_13;
    v12 = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v14 = v17;
      if (!v17)
        return;
    }
    else
    {
LABEL_13:
      v14 = v17;
      if (!v17)
        return;
    }
    _Block_release(v14);
  }
  else
  {
    v15 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_24B855000, v15, OS_LOG_TYPE_ERROR, "Cannot enable metric submission because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  }
}

void sub_24B8CAE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a13)
    _Block_release(a13);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule27enableMetricSubmission_syncENSt3__110shared_ptrIN3awd10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void AWDModule::clearConfiguration_sync(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  _QWORD v14[4];
  void *v15;
  void *aBlock;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint8_t buf[16];

  v4 = *(_QWORD *)(a1 + 152);
  if (v4)
  {
    v5 = (std::__shared_weak_count *)a2[1];
    v17 = *a2;
    v18 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v14[0] = MEMORY[0x24BDAC760];
    v14[1] = 1174405120;
    v14[2] = ___ZN9AWDModule23clearConfiguration_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v14[3] = &__block_descriptor_tmp_16_1;
    v8 = *(void **)a3;
    if (*(_QWORD *)a3)
      v8 = _Block_copy(v8);
    v15 = v8;
    aBlock = _Block_copy(v14);
    (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v4 + 64))(v4, &v17, &aBlock);
    if (aBlock)
      _Block_release(aBlock);
    v9 = v18;
    if (!v18)
      goto LABEL_13;
    v10 = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v12 = v15;
      if (!v15)
        return;
    }
    else
    {
LABEL_13:
      v12 = v15;
      if (!v15)
        return;
    }
    _Block_release(v12);
  }
  else
  {
    v13 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_24B855000, v13, OS_LOG_TYPE_ERROR, "Cannot clear configuration because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(_QWORD *)a3 + 16))();
  }
}

void sub_24B8CAFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a13)
    _Block_release(a13);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule23clearConfiguration_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void AWDModule::updateProperties_sync(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  _QWORD v14[4];
  void *v15;
  void *aBlock;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint8_t buf[16];

  v4 = *(_QWORD *)(a1 + 152);
  if (v4)
  {
    v5 = (std::__shared_weak_count *)a2[1];
    v17 = *a2;
    v18 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v14[0] = MEMORY[0x24BDAC760];
    v14[1] = 1174405120;
    v14[2] = ___ZN9AWDModule21updateProperties_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v14[3] = &__block_descriptor_tmp_17_0;
    v8 = *(void **)a3;
    if (*(_QWORD *)a3)
      v8 = _Block_copy(v8);
    v15 = v8;
    aBlock = _Block_copy(v14);
    (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v4 + 72))(v4, &v17, &aBlock);
    if (aBlock)
      _Block_release(aBlock);
    v9 = v18;
    if (!v18)
      goto LABEL_13;
    v10 = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v12 = v15;
      if (!v15)
        return;
    }
    else
    {
LABEL_13:
      v12 = v15;
      if (!v15)
        return;
    }
    _Block_release(v12);
  }
  else
  {
    v13 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_24B855000, v13, OS_LOG_TYPE_ERROR, "Cannot update properties because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(_QWORD *)a3 + 16))();
  }
}

void sub_24B8CB1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a13)
    _Block_release(a13);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule21updateProperties_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void AWDModule::queryMetric_sync(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  _QWORD v18[4];
  void *v19;
  void *aBlock;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint8_t buf[16];

  v6 = *(_QWORD *)(a1 + 152);
  if (v6)
  {
    v9 = (std::__shared_weak_count *)a2[1];
    v21 = *a2;
    v22 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v18[0] = MEMORY[0x24BDAC760];
    v18[1] = 1174405120;
    v18[2] = ___ZN9AWDModule16queryMetric_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_10MetricInfoENS2_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v18[3] = &__block_descriptor_tmp_18_3;
    v12 = *(void **)a5;
    if (*(_QWORD *)a5)
      v12 = _Block_copy(v12);
    v19 = v12;
    aBlock = _Block_copy(v18);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void **))(*(_QWORD *)v6 + 88))(v6, &v21, a3, a4, &aBlock);
    if (aBlock)
      _Block_release(aBlock);
    v13 = v22;
    if (!v22)
      goto LABEL_13;
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v16 = v19;
      if (!v19)
        return;
    }
    else
    {
LABEL_13:
      v16 = v19;
      if (!v19)
        return;
    }
    _Block_release(v16);
  }
  else
  {
    v17 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_24B855000, v17, OS_LOG_TYPE_ERROR, "Cannot query metric because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(_QWORD *)a5 + 16))();
  }
}

void sub_24B8CB380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a13)
    _Block_release(a13);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule16queryMetric_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_10MetricInfoENS2_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void AWDModule::appCheckIn_sync(uint64_t a1@<X0>, unsigned int a2@<W1>, char **a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t **v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  _QWORD v51[6];
  std::__shared_weak_count *v52;
  char *v53;
  std::__shared_weak_count *v54;
  void *v55;
  _QWORD v56[6];
  std::__shared_weak_count *v57;
  char *v58;
  std::__shared_weak_count *v59;
  void *v60;
  _QWORD aBlock[6];
  std::__shared_weak_count *v62;
  void *v63;
  uint8_t buf[4];
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v5 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v5 || (v48 = *(_QWORD *)(a1 + 120), (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  *a3 = (char *)0xAAAAAAAAAAAAAAAALL;
  a3[1] = (char *)0xAAAAAAAAAAAAAAAALL;
  v49 = v8;
  v13 = (char *)operator new(0x58uLL);
  v14 = v13;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = off_251CBD1E0;
  v15 = v13 + 24;
  v16 = *(NSObject **)(a1 + 136);
  if (v16)
  {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
    *((_QWORD *)v14 + 3) = v16;
    dispatch_retain(v16);
    *(_WORD *)(v14 + 33) = 0;
    *(_OWORD *)(v14 + 40) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_OWORD *)(v14 + 72) = 0u;
    v14[32] = a2;
    dispatch_release(v16);
  }
  else
  {
    *((_QWORD *)v13 + 3) = 0;
    *(_WORD *)(v13 + 33) = 0;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    v13[32] = a2;
  }
  *a3 = v15;
  a3[1] = v14;
  v17 = (unint64_t *)(v14 + 16);
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  v20 = (uint64_t **)(a1 + 176);
  v19 = *(uint64_t **)(a1 + 176);
  if (v19)
  {
    while (1)
    {
      while (1)
      {
        v21 = (uint64_t **)v19;
        v22 = *((unsigned __int8 *)v19 + 32);
        if (v22 <= a2)
          break;
        v19 = *v21;
        v20 = v21;
        if (!*v21)
          goto LABEL_21;
      }
      if (v22 >= a2)
        break;
      v19 = v21[1];
      if (!v19)
      {
        v20 = v21 + 1;
        goto LABEL_21;
      }
    }
    v26 = v15;
    v27 = v14;
    goto LABEL_26;
  }
  v21 = (uint64_t **)(a1 + 176);
LABEL_21:
  v23 = operator new(0x38uLL);
  *((_BYTE *)v23 + 32) = a2;
  *((_QWORD *)v23 + 5) = 0;
  *((_QWORD *)v23 + 6) = 0;
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = v21;
  *v20 = (uint64_t *)v23;
  v24 = **(_QWORD **)(a1 + 168);
  v25 = (uint64_t *)v23;
  if (v24)
  {
    *(_QWORD *)(a1 + 168) = v24;
    v25 = *v20;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 176), v25);
  ++*(_QWORD *)(a1 + 184);
  v26 = *a3;
  v27 = a3[1];
  if (v27)
  {
    v21 = (uint64_t **)v23;
LABEL_26:
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v23 = v21;
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)v23 + 6);
  *((_QWORD *)v23 + 5) = v26;
  *((_QWORD *)v23 + 6) = v27;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      v33 = *(NSObject **)(a1 + 88);
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        goto LABEL_35;
      goto LABEL_34;
    }
  }
  v33 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
LABEL_34:
    *(_DWORD *)buf = 136315138;
    v65 = awd::asString();
    _os_log_impl(&dword_24B855000, v33, OS_LOG_TYPE_DEFAULT, "#I New app checking-in: %s", buf, 0xCu);
  }
LABEL_35:
  v34 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_20_1;
  aBlock[4] = a1;
  aBlock[5] = v48;
  v62 = v49;
  do
    v35 = __ldxr(p_shared_weak_owners);
  while (__stxr(v35 + 1, p_shared_weak_owners));
  v63 = _Block_copy(aBlock);
  awd::AppContext::setHandler();
  if (v63)
    _Block_release(v63);
  v56[0] = v34;
  v56[1] = 1174405120;
  v56[2] = ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_21;
  v56[3] = &__block_descriptor_tmp_23_2;
  v56[4] = a1;
  v56[5] = v48;
  v57 = v49;
  do
    v36 = __ldxr(p_shared_weak_owners);
  while (__stxr(v36 + 1, p_shared_weak_owners));
  v58 = v15;
  v59 = (std::__shared_weak_count *)v14;
  do
    v37 = __ldxr(v17);
  while (__stxr(v37 + 1, v17));
  v60 = _Block_copy(v56);
  awd::AppContext::setHandler();
  if (v60)
    _Block_release(v60);
  v51[0] = v34;
  v51[1] = 1174405120;
  v51[2] = ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_24;
  v51[3] = &__block_descriptor_tmp_26_1;
  v51[4] = a1;
  v51[5] = v48;
  v52 = v49;
  do
    v38 = __ldxr(p_shared_weak_owners);
  while (__stxr(v38 + 1, p_shared_weak_owners));
  v53 = v15;
  v54 = (std::__shared_weak_count *)v14;
  do
    v39 = __ldxr(v17);
  while (__stxr(v39 + 1, v17));
  v55 = _Block_copy(v51);
  awd::AppContext::setHandler();
  if (v55)
    _Block_release(v55);
  if (*(_QWORD *)(a1 + 152))
  {
    v40 = (std::__shared_weak_count *)a3[1];
    v50 = v40;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    awd::AwdCommandDriver::checkIn();
    if (v50)
    {
      v43 = (unint64_t *)&v50->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
        v45 = v54;
        if (!v54)
          goto LABEL_64;
LABEL_63:
        std::__shared_weak_count::__release_weak(v45);
        goto LABEL_64;
      }
    }
LABEL_62:
    v45 = v54;
    if (!v54)
      goto LABEL_64;
    goto LABEL_63;
  }
  v46 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    goto LABEL_62;
  v47 = awd::asString();
  *(_DWORD *)buf = 136315138;
  v65 = v47;
  _os_log_error_impl(&dword_24B855000, v46, OS_LOG_TYPE_ERROR, "Cannot check in context of app %s because driver is unavailable", buf, 0xCu);
  v45 = v54;
  if (v54)
    goto LABEL_63;
LABEL_64:
  if (v52)
    std::__shared_weak_count::__release_weak(v52);
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
  if (v57)
    std::__shared_weak_count::__release_weak(v57);
  if (v62)
    std::__shared_weak_count::__release_weak(v62);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v14);
  std::__shared_weak_count::__release_weak(v49);
}

void sub_24B8CB924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21,void *aBlock,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,std::__shared_weak_count *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  std::__shared_weak_count *v39;
  uint64_t v40;

  if (a21)
    std::__shared_weak_count::__release_weak(a21);
  if (a19)
    std::__shared_weak_count::__release_weak(a19);
  if (a31)
    std::__shared_weak_count::__release_weak(a31);
  if (a29)
    std::__shared_weak_count::__release_weak(a29);
  if (a39)
    std::__shared_weak_count::__release_weak(a39);
  std::__shared_weak_count::__release_weak(v39);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v40);
  std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(a1);
}

void sub_24B8CB9FC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_24B8CBA18()
{
  JUMPOUT(0x24B8CB9ECLL);
}

void ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t buf[4];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v10 = awd::asString();
          _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I Client state: %s", buf, 0xCu);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_24B8CBB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_21(_QWORD *a1, uint64_t a2, int *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  int v9;
  std::__shared_weak_count *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  std::__shared_weak_count *v13;
  unsigned int AppID;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  const void *v25;
  size_t v26;
  void *v27;
  void **v28;
  const object *v29;
  uint64_t v30;
  uint64_t v31;
  CFTypeRef v32;
  CFTypeID v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  void *aBlock;
  xpc_object_t object;
  CFTypeRef cf;
  CFTypeRef v42;
  void *__dst[2];
  unint64_t v44;
  std::__shared_weak_count *v46;
  uint8_t buf[8];
  std::__shared_weak_count *v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v6 = a1[4];
  v7 = std::__shared_weak_count::lock(v4);
  v46 = v7;
  if (!v7)
    return;
  if (!a1[5])
  {
    v13 = v7;
LABEL_54:
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    return;
  }
  v8 = *(NSObject **)(v6 + 88);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *a3;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v9;
    _os_log_impl(&dword_24B855000, v8, OS_LOG_TYPE_DEFAULT, "#I Received trigger 0x%x", buf, 8u);
  }
  *(_QWORD *)buf = 0;
  v48 = 0;
  v10 = (std::__shared_weak_count *)a1[8];
  if (v10)
  {
    v48 = std::__shared_weak_count::lock(v10);
    if (v48)
      *(_QWORD *)buf = a1[7];
  }
  v11 = xpc_dictionary_create(0, 0, 0);
  if (v11 || (v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v11) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v11);
      v12 = v11;
    }
    else
    {
      v12 = xpc_null_create();
    }
  }
  else
  {
    v12 = xpc_null_create();
    v11 = 0;
  }
  xpc_release(v11);
  AppID = awd::AppContext::getAppID(*(awd::AppContext **)buf);
  v15 = xpc_int64_create(AppID);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x24BE058E8], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = xpc_int64_create(a3[1]);
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x24BE04EE0], v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  v19 = xpc_int64_create(a3[2]);
  if (!v19)
    v19 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x24BE04F50], v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  v21 = xpc_int64_create(*a3);
  if (!v21)
    v21 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x24BE04EA0], v21);
  v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  v23 = xpc_int64_create(*((_QWORD *)a3 + 2));
  if (!v23)
    v23 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x24BE04F48], v23);
  v24 = xpc_null_create();
  xpc_release(v23);
  xpc_release(v24);
  v25 = (const void *)*MEMORY[0x24BE04E48];
  v26 = strlen((const char *)*MEMORY[0x24BE04E48]);
  if (v26 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v30 = v26 | 7;
    v31 = v30 + 1;
    v28 = (void **)operator new(v30 + 1);
    __dst[1] = v27;
    v44 = v31 | 0x8000000000000000;
    __dst[0] = v28;
LABEL_34:
    memmove(v28, v25, (size_t)v27);
    *((_BYTE *)v27 + (_QWORD)v28) = 0;
    object = v12;
    if (v12)
      goto LABEL_30;
LABEL_35:
    object = xpc_null_create();
    goto LABEL_36;
  }
  HIBYTE(v44) = v26;
  v28 = __dst;
  if (v26)
    goto LABEL_34;
  LOBYTE(__dst[0]) = 0;
  object = v12;
  if (!v12)
    goto LABEL_35;
LABEL_30:
  xpc_retain(v12);
LABEL_36:
  xpc::bridge((xpc *)&object, v29);
  v32 = cf;
  if (cf && (v33 = CFGetTypeID(cf), v33 == CFDictionaryGetTypeID()))
  {
    v42 = v32;
    CFRetain(v32);
  }
  else
  {
    v42 = 0;
  }
  aBlock = 0;
  Service::broadcastEvent(v6, (uint64_t)__dst, &v42, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (v42)
    CFRelease(v42);
  if (cf)
    CFRelease(cf);
  xpc_release(object);
  if (SHIBYTE(v44) < 0)
    operator delete(__dst[0]);
  xpc_release(v12);
  v34 = v48;
  if (v48)
  {
    v35 = (unint64_t *)&v48->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v13 = v46;
  if (v46)
    goto LABEL_54;
}

void sub_24B8CBFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, char a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *__copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE56c41_ZTSNSt3__18weak_ptrIN3awd10AppContextEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[8];
  result[7] = a2[7];
  result[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE56c41_ZTSNSt3__18weak_ptrIN3awd10AppContextEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_24(_QWORD *a1, int *a2, int a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  int v12;
  xpc_object_t v13;
  xpc_object_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unsigned int AppID;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  const void *v34;
  size_t v35;
  void *v36;
  void **v37;
  const object *v38;
  uint64_t v39;
  uint64_t v40;
  CFTypeRef v41;
  CFTypeID v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  void *aBlock;
  xpc_object_t object;
  CFTypeRef cf;
  CFTypeRef v51;
  void *__dst[2];
  unint64_t v53;
  std::__shared_weak_count *v55;
  uint8_t buf[8];
  std::__shared_weak_count *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v5 = (std::__shared_weak_count *)a1[6];
  if (!v5)
    return;
  v9 = a1[4];
  v10 = std::__shared_weak_count::lock(v5);
  v55 = v10;
  if (!v10)
    return;
  if (!a1[5])
  {
    v15 = v10;
LABEL_62:
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    return;
  }
  v11 = *(NSObject **)(v9 + 88);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = a2[1];
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a3;
    LOWORD(v57) = 1024;
    *(_DWORD *)((char *)&v57 + 2) = v12;
    _os_log_impl(&dword_24B855000, v11, OS_LOG_TYPE_DEFAULT, "#I Received segment %d of metric 0x%x", buf, 0xEu);
  }
  v13 = xpc_dictionary_create(0, 0, 0);
  if (v13 || (v13 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v13) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v13);
      v14 = v13;
    }
    else
    {
      v14 = xpc_null_create();
    }
  }
  else
  {
    v14 = xpc_null_create();
    v13 = 0;
  }
  xpc_release(v13);
  *(_QWORD *)buf = 0;
  v57 = 0;
  v16 = (std::__shared_weak_count *)a1[8];
  if (v16)
  {
    v16 = std::__shared_weak_count::lock(v16);
    v57 = v16;
    if (v16)
    {
      v16 = (std::__shared_weak_count *)a1[7];
      *(_QWORD *)buf = v16;
    }
  }
  AppID = awd::AppContext::getAppID((awd::AppContext *)v16);
  v18 = xpc_int64_create(AppID);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x24BE058E8], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = xpc_int64_create(a2[3]);
  if (!v20)
    v20 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x24BE04EE0], v20);
  v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  v22 = xpc_int64_create(*a2);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x24BE04E70], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  v24 = xpc_int64_create(a2[1]);
  if (!v24)
    v24 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x24BE04E30], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  v26 = xpc_BOOL_create(*((_BYTE *)a2 + 16));
  if (!v26)
    v26 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x24BE04E10], v26);
  v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  v28 = xpc_BOOL_create(*((_BYTE *)a2 + 17));
  if (!v28)
    v28 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x24BE04F78], v28);
  v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  if (*((_BYTE *)a2 + 24))
  {
    v30 = xpc_int64_create(a2[5]);
    if (!v30)
      v30 = xpc_null_create();
    xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x24BE04F70], v30);
    v31 = xpc_null_create();
    xpc_release(v30);
    xpc_release(v31);
  }
  v32 = xpc_data_create(*(const void **)a4, *(_QWORD *)(a4 + 8) - *(_QWORD *)a4);
  if (!v32)
    v32 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x24BE04E18], v32);
  v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  v34 = (const void *)*MEMORY[0x24BE04E28];
  v35 = strlen((const char *)*MEMORY[0x24BE04E28]);
  if (v35 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v39 = v35 | 7;
    v40 = v39 + 1;
    v37 = (void **)operator new(v39 + 1);
    __dst[1] = v36;
    v53 = v40 | 0x8000000000000000;
    __dst[0] = v37;
LABEL_42:
    memmove(v37, v34, (size_t)v36);
    *((_BYTE *)v36 + (_QWORD)v37) = 0;
    object = v14;
    if (v14)
      goto LABEL_38;
LABEL_43:
    object = xpc_null_create();
    goto LABEL_44;
  }
  HIBYTE(v53) = v35;
  v37 = __dst;
  if (v35)
    goto LABEL_42;
  LOBYTE(__dst[0]) = 0;
  object = v14;
  if (!v14)
    goto LABEL_43;
LABEL_38:
  xpc_retain(v14);
LABEL_44:
  xpc::bridge((xpc *)&object, v38);
  v41 = cf;
  if (cf && (v42 = CFGetTypeID(cf), v42 == CFDictionaryGetTypeID()))
  {
    v51 = v41;
    CFRetain(v41);
  }
  else
  {
    v51 = 0;
  }
  aBlock = 0;
  Service::broadcastEvent(v9, (uint64_t)__dst, &v51, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (v51)
    CFRelease(v51);
  if (cf)
    CFRelease(cf);
  xpc_release(object);
  if (SHIBYTE(v53) < 0)
    operator delete(__dst[0]);
  v43 = v57;
  if (v57)
  {
    v44 = (unint64_t *)&v57->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  xpc_release(v14);
  v15 = v55;
  if (v55)
    goto LABEL_62;
}

void sub_24B8CC708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, char a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBCF68;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBCF68;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_24B8CCAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_24B8CCAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<AWDModule>::shared_ptr[abi:ne180100]<AWDModule,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_251CBCFA8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_24B8CCBF0(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1}::operator() const(AWDModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_24B8CCC10(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AWDModule *,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule *)#1},std::allocator<AWDModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<AWDModule *,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule *)#1},std::allocator<AWDModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1}::operator() const(AWDModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<AWDModule *,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule *)#1},std::allocator<AWDModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1}::operator() const(AWDModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__tree<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::__map_value_compare<awd::AppID,std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::less<awd::AppID>,true>,std::allocator<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::__map_value_compare<awd::AppID,std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::less<awd::AppID>,true>,std::allocator<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>>>::destroy(*a1);
    std::__tree<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::__map_value_compare<awd::AppID,std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::less<awd::AppID>,true>,std::allocator<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[6];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(a1);
    }
    else
    {
LABEL_6:
      operator delete(a1);
    }
  }
}

void ctu::SharedLoggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBCF68;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ___ZNK3ctu20SharedSynchronizableI9AWDModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(**(_QWORD **)(a1 + 40) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_24B855000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing", v2, 2u);
  }
}

void ctu::SharedSynchronizable<AWDModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_251CBD050;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9AWDModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9AWDModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *value;
  unsigned __int8 v15;
  capabilities::abs *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  char *v23;
  char *v24;
  unsigned __int8 v25;
  xpc_object_t v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  _QWORD aBlock[6];
  void *v44;
  char *v45;
  std::__shared_weak_count *v46;
  void *v47;
  uint64_t v48[2];
  xpc_object_t object;
  void *__p[3];
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  char *v55;
  char *v56;
  uint64_t v57;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  v51 = 0;
  v52 = &v51;
  v53 = 0x2000000000;
  v54 = -534716414;
  if (MEMORY[0x24BD2A468](*(_QWORD *)(v2 + 24)) == MEMORY[0x24BDACFA0])
  {
    value = (char *)xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x24BE058E8]);
    v55 = value;
    if (value)
      xpc_retain(value);
    else
      v55 = (char *)xpc_null_create();
    v15 = xpc::dyn_cast_or_default((xpc *)&v55, (const object *)0xFFFFFFFFLL);
    xpc_release(v55);
    if (v15 != 1)
    {
      if (v15)
      {
        if ((v15 - 2) > 3u)
          goto LABEL_2;
      }
      else if ((capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v16) & 1) == 0)
      {
        goto LABEL_2;
      }
    }
    v17 = *(_QWORD *)(v3 + 176);
    if (!v17)
      goto LABEL_35;
    v18 = v3 + 176;
    do
    {
      v19 = *(unsigned __int8 *)(v17 + 32);
      v20 = v19 >= v15;
      if (v19 >= v15)
        v21 = (uint64_t *)v17;
      else
        v21 = (uint64_t *)(v17 + 8);
      if (v20)
        v18 = v17;
      v17 = *v21;
    }
    while (*v21);
    if (v18 != v3 + 176 && *(unsigned __int8 *)(v18 + 32) <= v15)
    {
      v23 = *(char **)(v18 + 40);
      v22 = *(std::__shared_weak_count **)(v18 + 48);
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v42 = __ldxr(p_shared_owners);
        while (__stxr(v42 + 1, p_shared_owners));
      }
    }
    else
    {
LABEL_35:
      AWDModule::appCheckIn_sync(v3, v15, &v55);
      v23 = v55;
      v22 = (std::__shared_weak_count *)v56;
    }
    if (v23)
    {
      *((_DWORD *)v52 + 6) = -534716416;
      v24 = (char *)xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x24BE04F28]);
      v55 = v24;
      if (v24)
        xpc_retain(v24);
      else
        v55 = (char *)xpc_null_create();
      v25 = xpc::dyn_cast_or_default((xpc *)&v55, (const object *)0xFFFFFFFFLL);
      xpc_release(v55);
      memset(__p, 170, sizeof(__p));
      v26 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x24BE04E18]);
      object = v26;
      if (v26)
        xpc_retain(v26);
      else
        object = xpc_null_create();
      v55 = 0;
      v56 = 0;
      v57 = 0;
      xpc::dyn_cast_or_default();
      if (v55)
      {
        v56 = v55;
        operator delete(v55);
      }
      xpc_release(object);
      v27 = __p[0];
      if (__p[1] != __p[0] && v25 <= 2u)
      {
        v48[0] = (uint64_t)v23;
        v48[1] = (uint64_t)v22;
        if (v22)
        {
          v28 = (unint64_t *)&v22->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        aBlock[0] = MEMORY[0x24BDAC760];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke;
        aBlock[3] = &unk_251CBD0C0;
        aBlock[5] = v3;
        v30 = *(void **)(v2 + 32);
        if (v30)
          v30 = _Block_copy(v30);
        v44 = v30;
        v45 = v23;
        v46 = v22;
        if (v22)
        {
          v31 = (unint64_t *)&v22->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
        aBlock[4] = &v51;
        v33 = _Block_copy(aBlock);
        v47 = v33;
        AWDModule::sendPayload_sync(v3, v48, v25, (uint64_t)__p, (uint64_t)&v47);
        if (v33)
          _Block_release(v33);
        if (v22)
        {
          v34 = (unint64_t *)&v22->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v36 = v46;
        if (v46)
        {
          v37 = (unint64_t *)&v46->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        if (v44)
          _Block_release(v44);
        v27 = __p[0];
      }
      if (v27)
      {
        __p[1] = v27;
        operator delete(v27);
      }
    }
    if (v22)
    {
      v39 = (unint64_t *)&v22->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
LABEL_2:
  v4 = v52;
  if (*((_DWORD *)v52 + 6) == -534716414)
  {
    v5 = (char *)xpc_null_create();
    v6 = *(_QWORD *)(v2 + 32);
    v7 = *((unsigned int *)v4 + 6);
    v55 = v5;
    v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, char **))(v6 + 16))(v6, v7, &v55);
    xpc_release(v55);
    xpc_release(v8);
    _Block_object_dispose(&v51, 8);
  }
  else
  {
    _Block_object_dispose(&v51, 8);
    if (!v2)
      goto LABEL_10;
  }
  v9 = *(const void **)(v2 + 32);
  if (v9)
    _Block_release(v9);
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(_QWORD *)(v2 + 24) = 0;
  v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  operator delete((void *)v2);
LABEL_10:
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_24B8CD494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,xpc_object_t object,void *__p,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  const void *v27;
  uint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  const void *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;

  if (v27)
    _Block_release(v27);
  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  if (aBlock)
    _Block_release(aBlock);
  if (a21)
  {
    v32 = (unint64_t *)&a21->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  if (__p)
    operator delete(__p);
  if (v26)
  {
    v34 = (unint64_t *)&v26->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  _Block_object_dispose((const void *)(v28 - 120), 8);
  v36 = *(const void **)(v25 + 32);
  if (v36)
    _Block_release(v36);
  xpc_release(*(xpc_object_t *)(v25 + 24));
  *(_QWORD *)(v25 + 24) = 0;
  v37 = *(std::__shared_weak_count **)(v25 + 8);
  if (v37)
    std::__shared_weak_count::__release_weak(v37);
  operator delete((void *)v25);
  v38 = (std::__shared_weak_count *)v24[2];
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  operator delete(v24);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke(_QWORD *a1, char a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  void *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  xpc_object_t v12;
  uint64_t v13;
  xpc_object_t v14;
  _QWORD aBlock[5];
  void *v16;
  char v17;
  void *v18;
  uint64_t v19[2];
  xpc_object_t v20;

  if ((a2 & 1) != 0)
  {
    v3 = a1[5];
    v4 = (std::__shared_weak_count *)a1[8];
    v19[0] = a1[7];
    v19[1] = (uint64_t)v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke_2;
    aBlock[3] = &unk_251CBD088;
    aBlock[4] = a1[4];
    v17 = 1;
    v7 = (void *)a1[6];
    if (v7)
      v7 = _Block_copy(v7);
    v16 = v7;
    v8 = _Block_copy(aBlock);
    v18 = v8;
    AWDModule::enableMetricSubmission_sync(v3, v19, 1, (uint64_t)&v18);
    if (v8)
      _Block_release(v8);
    if (!v4)
      goto LABEL_13;
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v11 = v16;
      if (v16)
        goto LABEL_14;
    }
    else
    {
LABEL_13:
      v11 = v16;
      if (v16)
LABEL_14:
        _Block_release(v11);
    }
  }
  else
  {
    v12 = xpc_null_create();
    v13 = a1[6];
    v20 = v12;
    v14 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v13 + 16))(v13, 3760250880, &v20);
    xpc_release(v20);
    xpc_release(v14);
  }
}

void sub_24B8CD838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock)
{
  void *v15;
  uint64_t v16;

  xpc_release(*(xpc_object_t *)(v16 - 40));
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke_2(uint64_t a1, unsigned __int8 a2)
{
  int v3;
  uint64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t object;

  if (((*(_BYTE *)(a1 + 48) != 0) & a2) != 0)
    v3 = 0;
  else
    v3 = -534716416;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = xpc_null_create();
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned int *)(v4 + 24);
  object = v5;
  v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_24B8CD938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE56c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE(_QWORD *a1, _QWORD *a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (void *)a2[6];
  if (result)
    result = _Block_copy(result);
  v6 = a2[7];
  v5 = a2[8];
  a1[6] = result;
  a1[7] = v6;
  a1[8] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void __destroy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE56c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const void *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(const void **)(a1 + 48);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(const void **)(a1 + 48);
    if (!v5)
      return;
  }
  _Block_release(v5);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  xpc_object_t value;
  unsigned __int8 v15;
  capabilities::abs *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void *v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD v29[6];
  void *aBlock;
  uint64_t v31;
  void *v32;
  uint64_t v33[2];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  xpc_object_t v38;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  v34 = 0;
  v35 = &v34;
  v36 = 0x2000000000;
  v37 = -534716414;
  if (MEMORY[0x24BD2A468](*(_QWORD *)(v2 + 24)) == MEMORY[0x24BDACFA0])
  {
    value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x24BE058E8]);
    v38 = value;
    if (value)
      xpc_retain(value);
    else
      v38 = xpc_null_create();
    v15 = xpc::dyn_cast_or_default((xpc *)&v38, (const object *)0xFFFFFFFFLL);
    xpc_release(v38);
    if (v15 != 1)
    {
      if (v15)
      {
        if (v15 - 2 > 3)
          goto LABEL_2;
      }
      else if ((capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v16) & 1) == 0)
      {
        goto LABEL_2;
      }
    }
    v17 = *(_QWORD *)(v3 + 176);
    if (v17)
    {
      v18 = v3 + 176;
      do
      {
        v19 = *(unsigned __int8 *)(v17 + 32);
        v20 = v19 >= v15;
        if (v19 >= v15)
          v21 = (uint64_t *)v17;
        else
          v21 = (uint64_t *)(v17 + 8);
        if (v20)
          v18 = v17;
        v17 = *v21;
      }
      while (*v21);
      if (v18 != v3 + 176 && *(unsigned __int8 *)(v18 + 32) <= v15)
      {
        *((_DWORD *)v35 + 6) = -534716416;
        v22 = *(std::__shared_weak_count **)(v18 + 48);
        v33[0] = *(_QWORD *)(v18 + 40);
        v33[1] = (uint64_t)v22;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
        }
        v29[0] = MEMORY[0x24BDAC760];
        v29[1] = 1174405120;
        v29[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke;
        v29[3] = &unk_251CBD130;
        v29[5] = v3;
        v25 = *(void **)(v2 + 32);
        if (v25)
          v25 = _Block_copy(v25);
        aBlock = v25;
        v31 = v18;
        v29[4] = &v34;
        v26 = _Block_copy(v29);
        v32 = v26;
        AWDModule::clearConfiguration_sync(v3, v33, (uint64_t)&v32);
        if (v26)
          _Block_release(v26);
        if (v22)
        {
          v27 = (unint64_t *)&v22->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (aBlock)
          _Block_release(aBlock);
      }
    }
  }
LABEL_2:
  v4 = v35;
  if (*((_DWORD *)v35 + 6) == -534716414)
  {
    v5 = xpc_null_create();
    v6 = *(_QWORD *)(v2 + 32);
    v7 = *((unsigned int *)v4 + 6);
    v38 = v5;
    v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &v38);
    xpc_release(v38);
    xpc_release(v8);
    _Block_object_dispose(&v34, 8);
  }
  else
  {
    _Block_object_dispose(&v34, 8);
    if (!v2)
      goto LABEL_10;
  }
  v9 = *(const void **)(v2 + 32);
  if (v9)
    _Block_release(v9);
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(_QWORD *)(v2 + 24) = 0;
  v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  operator delete((void *)v2);
LABEL_10:
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_24B8CDD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  const void *v23;
  unint64_t *p_shared_owners;
  unint64_t v26;
  const void *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;

  if (v23)
    _Block_release(v23);
  if (aBlock)
    _Block_release(aBlock);
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  _Block_object_dispose(&a20, 8);
  v27 = *(const void **)(v21 + 32);
  if (v27)
    _Block_release(v27);
  xpc_release(*(xpc_object_t *)(v21 + 24));
  *(_QWORD *)(v21 + 24) = 0;
  v28 = *(std::__shared_weak_count **)(v21 + 8);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  operator delete((void *)v21);
  v29 = (std::__shared_weak_count *)v20[2];
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke(_QWORD *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t v15;
  _QWORD aBlock[5];
  void *v17;
  char v18;
  void *v19;
  uint64_t v20[2];
  xpc_object_t v21;

  if ((a2 & 1) != 0)
  {
    v3 = a1[5];
    v4 = a1[7];
    v5 = *(std::__shared_weak_count **)(v4 + 48);
    v20[0] = *(_QWORD *)(v4 + 40);
    v20[1] = (uint64_t)v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke_2;
    aBlock[3] = &unk_251CBD0F8;
    aBlock[4] = a1[4];
    v18 = 1;
    v8 = (void *)a1[6];
    if (v8)
      v8 = _Block_copy(v8);
    v17 = v8;
    v9 = _Block_copy(aBlock);
    v19 = v9;
    AWDModule::enableMetricSubmission_sync(v3, v20, 0, (uint64_t)&v19);
    if (v9)
      _Block_release(v9);
    if (!v5)
      goto LABEL_13;
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v12 = v17;
      if (v17)
        goto LABEL_14;
    }
    else
    {
LABEL_13:
      v12 = v17;
      if (v17)
LABEL_14:
        _Block_release(v12);
    }
  }
  else
  {
    v13 = xpc_null_create();
    v14 = a1[6];
    v21 = v13;
    v15 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v14 + 16))(v14, 3760250880, &v21);
    xpc_release(v21);
    xpc_release(v15);
  }
}

void sub_24B8CDFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock)
{
  void *v15;
  uint64_t v16;

  xpc_release(*(xpc_object_t *)(v16 - 40));
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke_2(uint64_t a1, unsigned __int8 a2)
{
  int v3;
  uint64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t object;

  if (((*(_BYTE *)(a1 + 48) != 0) & a2) != 0)
    v3 = 0;
  else
    v3 = -534716416;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = xpc_null_create();
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned int *)(v4 + 24);
  object = v5;
  v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_24B8CE0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 48);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 48);
  if (v1)
    _Block_release(v1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  xpc_object_t value;
  unsigned __int8 v15;
  capabilities::abs *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  xpc_object_t v22;
  xpc_object_t v23;
  int v24;
  xpc_object_t v25;
  int v26;
  xpc_object_t v27;
  int v28;
  xpc_object_t v29;
  int v30;
  xpc_object_t v31;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  void *v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  _QWORD aBlock[5];
  void *v43;
  void *v44;
  _DWORD v45[4];
  uint64_t v46;
  _DWORD v47[7];
  uint64_t v48[2];
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  xpc_object_t v53[2];

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  v49 = 0;
  v50 = &v49;
  v51 = 0x2000000000;
  v52 = -534716414;
  if (MEMORY[0x24BD2A468](*(_QWORD *)(v2 + 24)) == MEMORY[0x24BDACFA0])
  {
    value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x24BE058E8]);
    v53[0] = value;
    if (value)
      xpc_retain(value);
    else
      v53[0] = xpc_null_create();
    v15 = xpc::dyn_cast_or_default((xpc *)v53, (const object *)0xFFFFFFFFLL);
    xpc_release(v53[0]);
    if (v15 <= 5u
      && (((1 << v15) & 0x36) != 0
       || !v15 && capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v16)))
    {
      v17 = *(_QWORD *)(v3 + 176);
      if (v17)
      {
        v18 = v3 + 176;
        do
        {
          v19 = *(unsigned __int8 *)(v17 + 32);
          v20 = v19 >= v15;
          if (v19 >= v15)
            v21 = (uint64_t *)v17;
          else
            v21 = (uint64_t *)(v17 + 8);
          if (v20)
            v18 = v17;
          v17 = *v21;
        }
        while (*v21);
        if (v18 != v3 + 176 && *(unsigned __int8 *)(v18 + 32) <= v15)
        {
          *((_DWORD *)v50 + 6) = -534716416;
          v22 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x24BE04EE0]);
          v53[0] = v22;
          if (v22)
            xpc_retain(v22);
          else
            v53[0] = xpc_null_create();
          v41 = xpc::dyn_cast_or_default((xpc *)v53, 0);
          xpc_release(v53[0]);
          v23 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x24BE04F50]);
          v53[0] = v23;
          if (v23)
            xpc_retain(v23);
          else
            v53[0] = xpc_null_create();
          v24 = xpc::dyn_cast_or_default((xpc *)v53, 0);
          xpc_release(v53[0]);
          v25 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x24BE04EA0]);
          v53[0] = v25;
          if (v25)
            xpc_retain(v25);
          else
            v53[0] = xpc_null_create();
          v26 = xpc::dyn_cast_or_default((xpc *)v53, 0);
          xpc_release(v53[0]);
          v27 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x24BE04E70]);
          v53[0] = v27;
          if (v27)
            xpc_retain(v27);
          else
            v53[0] = xpc_null_create();
          v28 = xpc::dyn_cast_or_default((xpc *)v53, 0);
          xpc_release(v53[0]);
          v29 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x24BE04E30]);
          v53[0] = v29;
          if (v29)
            xpc_retain(v29);
          else
            v53[0] = xpc_null_create();
          v30 = xpc::dyn_cast_or_default((xpc *)v53, 0);
          xpc_release(v53[0]);
          v31 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x24BE04F80]);
          v53[0] = v31;
          if (v31)
            xpc_retain(v31);
          else
            v53[0] = xpc_null_create();
          v32 = xpc::dyn_cast_or_default((xpc *)v53, 0);
          xpc_release(v53[0]);
          v33 = *(_QWORD *)(v18 + 40);
          v34 = *(std::__shared_weak_count **)(v18 + 48);
          v48[0] = v33;
          v48[1] = (uint64_t)v34;
          if (v34)
          {
            p_shared_owners = (unint64_t *)&v34->__shared_owners_;
            do
              v36 = __ldxr(p_shared_owners);
            while (__stxr(v36 + 1, p_shared_owners));
          }
          v47[0] = v28;
          v47[1] = v30;
          v47[2] = 0;
          v47[3] = v32;
          v47[4] = -1431699456;
          v47[5] = -1431655936;
          v47[6] = -1431655936;
          v45[0] = v26;
          v45[1] = v41;
          v45[2] = v24;
          v45[3] = -1431655766;
          v46 = 0;
          aBlock[0] = MEMORY[0x24BDAC760];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__3clEv_block_invoke;
          aBlock[3] = &unk_251CBD168;
          aBlock[4] = &v49;
          v37 = *(void **)(v2 + 32);
          if (v37)
            v37 = _Block_copy(v37);
          v43 = v37;
          v38 = _Block_copy(aBlock);
          v44 = v38;
          AWDModule::queryMetric_sync(v3, v48, (uint64_t)v47, (uint64_t)v45, (uint64_t)&v44);
          if (v38)
            _Block_release(v38);
          if (v34)
          {
            v39 = (unint64_t *)&v34->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          if (v43)
            _Block_release(v43);
        }
      }
    }
  }
  v4 = v50;
  if (*((_DWORD *)v50 + 6) == -534716414)
  {
    v5 = xpc_null_create();
    v6 = *(_QWORD *)(v2 + 32);
    v7 = *((unsigned int *)v4 + 6);
    v53[0] = v5;
    v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, v53);
    xpc_release(v53[0]);
    xpc_release(v8);
    _Block_object_dispose(&v49, 8);
  }
  else
  {
    _Block_object_dispose(&v49, 8);
    if (!v2)
      goto LABEL_10;
  }
  v9 = *(const void **)(v2 + 32);
  if (v9)
    _Block_release(v9);
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(_QWORD *)(v2 + 24) = 0;
  v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  operator delete((void *)v2);
LABEL_10:
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_24B8CE628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock)
{
  _QWORD *v16;
  uint64_t v17;
  const void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v23;
  const void *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;

  if (v18)
    _Block_release(v18);
  if (aBlock)
    _Block_release(aBlock);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  _Block_object_dispose((const void *)(v20 - 128), 8);
  v24 = *(const void **)(v17 + 32);
  if (v24)
    _Block_release(v24);
  xpc_release(*(xpc_object_t *)(v17 + 24));
  *(_QWORD *)(v17 + 24) = 0;
  v25 = *(std::__shared_weak_count **)(v17 + 8);
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  operator delete((void *)v17);
  v26 = (std::__shared_weak_count *)v16[2];
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__3clEv_block_invoke(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t object;

  if (a2)
    v3 = 0;
  else
    v3 = -534716416;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = xpc_null_create();
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned int *)(v4 + 24);
  object = v5;
  v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_24B8CE8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  xpc_object_t value;
  unsigned __int8 v15;
  capabilities::abs *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  xpc_object_t v22;
  char v23;
  xpc_object_t v24;
  char v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD v33[5];
  void *aBlock;
  void *v35;
  uint64_t v36[2];
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  xpc_object_t v41;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  v37 = 0;
  v38 = &v37;
  v39 = 0x2000000000;
  v40 = -534716414;
  if (MEMORY[0x24BD2A468](*(_QWORD *)(v2 + 24)) == MEMORY[0x24BDACFA0])
  {
    value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x24BE058E8]);
    v41 = value;
    if (value)
      xpc_retain(value);
    else
      v41 = xpc_null_create();
    v15 = xpc::dyn_cast_or_default((xpc *)&v41, (const object *)0xFFFFFFFFLL);
    xpc_release(v41);
    if (v15 <= 5u
      && (((1 << v15) & 0x36) != 0
       || !v15 && capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v16)))
    {
      v17 = *(_QWORD *)(v3 + 176);
      if (v17)
      {
        v18 = v3 + 176;
        do
        {
          v19 = *(unsigned __int8 *)(v17 + 32);
          v20 = v19 >= v15;
          if (v19 >= v15)
            v21 = (uint64_t *)v17;
          else
            v21 = (uint64_t *)(v17 + 8);
          if (v20)
            v18 = v17;
          v17 = *v21;
        }
        while (*v21);
        if (v18 != v3 + 176 && *(unsigned __int8 *)(v18 + 32) <= v15)
        {
          *((_DWORD *)v38 + 6) = -534716416;
          v22 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x24BE05078]);
          v41 = v22;
          if (v22)
            xpc_retain(v22);
          else
            v41 = xpc_null_create();
          v23 = xpc::dyn_cast_or_default((xpc *)&v41, 0);
          xpc_release(v41);
          v24 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x24BE04ED0]);
          v41 = v24;
          if (v24)
            xpc_retain(v24);
          else
            v41 = xpc_null_create();
          v25 = xpc::dyn_cast_or_default((xpc *)&v41, 0);
          xpc_release(v41);
          LOWORD(v41) = -21846;
          BYTE2(v41) = -86;
          LOBYTE(v41) = awd::AppContext::getProperties(*(awd::AppContext **)(v18 + 40));
          BYTE1(v41) = v25;
          BYTE2(v41) = v23;
          awd::AppContext::setProperties();
          v26 = *(std::__shared_weak_count **)(v18 + 48);
          v36[0] = *(_QWORD *)(v18 + 40);
          v36[1] = (uint64_t)v26;
          if (v26)
          {
            p_shared_owners = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldxr(p_shared_owners);
            while (__stxr(v28 + 1, p_shared_owners));
          }
          v33[0] = MEMORY[0x24BDAC760];
          v33[1] = 1174405120;
          v33[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__4clEv_block_invoke;
          v33[3] = &unk_251CBD1A0;
          v33[4] = &v37;
          v29 = *(void **)(v2 + 32);
          if (v29)
            v29 = _Block_copy(v29);
          aBlock = v29;
          v30 = _Block_copy(v33);
          v35 = v30;
          AWDModule::updateProperties_sync(v3, v36, (uint64_t)&v35);
          if (v30)
            _Block_release(v30);
          if (v26)
          {
            v31 = (unint64_t *)&v26->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          if (aBlock)
            _Block_release(aBlock);
        }
      }
    }
  }
  v4 = v38;
  if (*((_DWORD *)v38 + 6) == -534716414)
  {
    v5 = xpc_null_create();
    v6 = *(_QWORD *)(v2 + 32);
    v7 = *((unsigned int *)v4 + 6);
    v41 = v5;
    v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &v41);
    xpc_release(v41);
    xpc_release(v8);
    _Block_object_dispose(&v37, 8);
  }
  else
  {
    _Block_object_dispose(&v37, 8);
    if (!v2)
      goto LABEL_10;
  }
  v9 = *(const void **)(v2 + 32);
  if (v9)
    _Block_release(v9);
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(_QWORD *)(v2 + 24) = 0;
  v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  operator delete((void *)v2);
LABEL_10:
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_24B8CEC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  const void *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;
  const void *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;

  if (v21)
    _Block_release(v21);
  if (aBlock)
    _Block_release(aBlock);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  _Block_object_dispose(&a18, 8);
  v25 = *(const void **)(v19 + 32);
  if (v25)
    _Block_release(v25);
  xpc_release(*(xpc_object_t *)(v19 + 24));
  *(_QWORD *)(v19 + 24) = 0;
  v26 = *(std::__shared_weak_count **)(v19 + 8);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  operator delete((void *)v19);
  v27 = (std::__shared_weak_count *)v18[2];
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  operator delete(v18);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__4clEv_block_invoke(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t object;

  if (a2)
    v3 = 0;
  else
    v3 = -534716416;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = xpc_null_create();
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned int *)(v4 + 24);
  object = v5;
  v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_24B8CEEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<awd::AppContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_251CBD1E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::AppContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_251CBD1E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::AppContext>::__on_zero_shared(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  NSObject *v8;

  v2 = (const void *)a1[10];
  if (v2)
    _Block_release(v2);
  v3 = (const void *)a1[9];
  if (v3)
    _Block_release(v3);
  v4 = (const void *)a1[8];
  if (v4)
    _Block_release(v4);
  v5 = (const void *)a1[7];
  if (v5)
    _Block_release(v5);
  v6 = (const void *)a1[6];
  if (v6)
    _Block_release(v6);
  v7 = (const void *)a1[5];
  if (v7)
    _Block_release(v7);
  v8 = a1[3];
  if (v8)
    dispatch_release(v8);
}

uint64_t __cxx_global_var_init_27()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_24B855000);
  }
  return result;
}

PowerStats *PowerStats::create@<X0>(PowerStats **a1@<X8>)
{
  PowerStats *v3;
  PowerStats *result;

  v3 = (PowerStats *)operator new(0x88uLL);
  PowerStats::PowerStats(v3);
  *a1 = v3;
  result = (PowerStats *)operator new(0x20uLL);
  *(_QWORD *)result = off_251CBD230;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  *((_QWORD *)result + 3) = v3;
  a1[1] = result;
  return result;
}

void sub_24B8CF030()
{
  PowerStats *v0;

  PowerStats::~PowerStats(v0);
}

void sub_24B8CF03C(void *a1)
{
  _Unwind_Exception *v1;

  operator delete(a1);
  _Unwind_Resume(v1);
}

void sub_24B8CF048(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void PowerStats::PowerStats(PowerStats *this)
{
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *__p[2];
  char v10;
  __int128 v11;
  _BYTE v12[8];

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v11, "com.apple.telephony.abm", "power.stats");
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger(this, (const ctu::OsLogLogger *)v12);
  MEMORY[0x24BD2937C](v12);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v11);
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *(_QWORD *)((char *)this + 92) = 0x200000001;
  *((_DWORD *)this + 25) = -536870144;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 40, 0);
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = 0;
  v10 = 11;
  strcpy((char *)__p, "power.stats");
  AppleBasebandManager::create();
  v2 = v11;
  v11 = 0uLL;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  *(_OWORD *)((char *)this + 120) = v2;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_24B8CF21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)&a9);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v17);
  dispatch::callback<void({block_pointer})(xpc::dict)>::~callback(v18);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v16, *(_QWORD **)(v15 + 48));
  MEMORY[0x24BD2937C](v15);
  _Unwind_Resume(a1);
}

const char *PowerStats::getName(PowerStats *this)
{
  return "power.stats";
}

void PowerStats::clear(PowerStats *this)
{
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 48);
  v1 = (_QWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 40, v1);
  *(v2 - 1) = v2;
  *v2 = 0;
  v2[1] = 0;
}

void PowerStats::~PowerStats(PowerStats *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  const void *v6;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *((_QWORD *)this + 14);
  if (v5)
    dispatch_release(v5);
  v6 = (const void *)*((_QWORD *)this + 13);
  if (v6)
    _Block_release(v6);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  JUMPOUT(0x24BD2937CLL);
}

void PowerStats::gotAssertion(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  std::string *v5;
  std::string v6;
  std::string v7;
  std::string v8;

  *(_BYTE *)(a1 + 88) = 1;
  v4 = *(_DWORD *)(a1 + 96);
  if (v4 == 1)
  {
    ++*(_DWORD *)(a1 + 16);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v6 = *(std::string *)a2;
    v5 = &v6;
    PowerStats::submitLowPowerEventMetric_sync(a1, 0, 1u, (const char *)&v6);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_18;
  }
  else if (!v4)
  {
    if (a3 == 1)
    {
      ++*(_DWORD *)(a1 + 12);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v8 = *(std::string *)a2;
      v5 = &v8;
      PowerStats::submitLowPowerEventMetric_sync(a1, 2u, 0, (const char *)&v8);
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
LABEL_18:
        operator delete(v5->__r_.__value_.__l.__data_);
    }
    else
    {
      ++*(_DWORD *)(a1 + 8);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v7 = *(std::string *)a2;
      v5 = &v7;
      PowerStats::submitLowPowerEventMetric_sync(a1, 0, 0, (const char *)&v7);
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_18;
    }
  }
}

void PowerStats::submitLowPowerEventMetric_sync(uint64_t a1, unsigned int a2, unsigned int a3, const char *a4)
{
  NSObject *v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  const void *v27;
  void *v28;
  NSObject *v29;
  _QWORD v30[4];
  void *aBlock;
  xpc_object_t object;

  v8 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v30[0]) = 0;
    _os_log_impl(&dword_24B855000, v8, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of low power event stats", (uint8_t *)v30, 2u);
  }
  v9 = xpc_dictionary_create(0, 0, 0);
  v10 = MEMORY[0x24BDACFA0];
  if (v9 || (v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v9) == v10)
    {
      xpc_retain(v9);
      v11 = v9;
    }
    else
    {
      v11 = xpc_null_create();
    }
  }
  else
  {
    v11 = xpc_null_create();
    v9 = 0;
  }
  xpc_release(v9);
  v12 = xpc_dictionary_create(0, 0, 0);
  if (v12 || (v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v12) == v10)
    {
      xpc_retain(v12);
      v13 = v12;
    }
    else
    {
      v13 = xpc_null_create();
    }
  }
  else
  {
    v13 = xpc_null_create();
    v12 = 0;
  }
  xpc_release(v12);
  v14 = xpc_int64_create(a2);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x24BE05180], v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_int64_create(a3);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x24BE05190], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  if (a4[23] < 0)
    a4 = *(const char **)a4;
  v18 = xpc_string_create(a4);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x24BE05008], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = xpc_string_create((const char *)*MEMORY[0x24BE058A0]);
  if (!v20)
    v20 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x24BE04E88], v20);
  v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  v22 = xpc_int64_create(524464);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x24BE04F38], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (v13)
  {
    xpc_retain(v13);
    v24 = v13;
  }
  else
  {
    v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x24BE04E80], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (*(_QWORD *)(a1 + 104) && *(_QWORD *)(a1 + 112))
  {
    if (v11)
    {
      xpc_retain(v11);
      v26 = v11;
      v27 = *(const void **)(a1 + 104);
      if (v27)
      {
LABEL_34:
        v28 = _Block_copy(v27);
        goto LABEL_37;
      }
    }
    else
    {
      v26 = xpc_null_create();
      v27 = *(const void **)(a1 + 104);
      if (v27)
        goto LABEL_34;
    }
    v28 = 0;
LABEL_37:
    v29 = *(NSObject **)(a1 + 112);
    v30[0] = MEMORY[0x24BDAC760];
    v30[1] = 1174405120;
    v30[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke;
    v30[3] = &__block_descriptor_tmp_13;
    if (v28)
    {
      aBlock = _Block_copy(v28);
      object = v26;
      if (v26)
      {
LABEL_39:
        xpc_retain(v26);
LABEL_42:
        dispatch_async(v29, v30);
        xpc_release(object);
        object = 0;
        if (aBlock)
          _Block_release(aBlock);
        if (v28)
          _Block_release(v28);
        xpc_release(v26);
        goto LABEL_47;
      }
    }
    else
    {
      aBlock = 0;
      object = v26;
      if (v26)
        goto LABEL_39;
    }
    object = xpc_null_create();
    goto LABEL_42;
  }
LABEL_47:
  xpc_release(v13);
  xpc_release(v11);
}

uint64_t PowerStats::noPendingAssertion(uint64_t this)
{
  *(_BYTE *)(this + 88) = 0;
  return this;
}

void PowerStats::reportSystemStateChange(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t SystemTime;
  uint64_t v11;
  unsigned int v12;
  void *__p;
  char v14;
  uint8_t buf[16];

  v4 = *a3;
  *(_DWORD *)(a1 + 100) = *((_DWORD *)a3 + 2);
  *(_QWORD *)(a1 + 92) = v4;
  v5 = *((_DWORD *)a3 + 2);
  if (v5 == -536870112)
  {
    ++*(_DWORD *)(a1 + 24);
    SystemTime = TelephonyUtilGetSystemTime();
    *(_QWORD *)(a1 + 64) = SystemTime;
    v11 = *(_QWORD *)(a1 + 72);
    if (v11)
    {
      v12 = ((int)SystemTime - (int)v11) / 0x3E8u;
      *(_DWORD *)(a1 + 84) = v12;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 84);
    }
    PowerStats::submitWakeInfoMetric_sync(a1, *(_DWORD *)(a2 + 4) == 1, v12, *(_DWORD *)(a1 + 80));
    return;
  }
  if (v5 != -536870272)
    return;
  if (*((_DWORD *)a3 + 1) != 1)
  {
    ++*(_DWORD *)(a1 + 32);
    v7 = TelephonyUtilGetSystemTime();
    *(_QWORD *)(a1 + 72) = v7;
    v8 = *(_QWORD *)(a1 + 64);
    if (!v8)
      return;
    goto LABEL_14;
  }
  if (*(_BYTE *)(a1 + 88))
  {
    v6 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I Forced sleep while power assertion(s) held ", buf, 2u);
    }
    ++*(_DWORD *)(a1 + 20);
    v14 = 0;
    LOBYTE(__p) = 0;
    PowerStats::submitLowPowerEventMetric_sync(a1, 1u, 1u, (const char *)&__p);
    if (v14 < 0)
      operator delete(__p);
  }
  ++*(_DWORD *)(a1 + 28);
  v7 = TelephonyUtilGetSystemTime();
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
LABEL_14:
    *(_DWORD *)(a1 + 80) = ((int)v7 - (int)v8) / 0x3E8u;
}

void PowerStats::submitWakeInfoMetric_sync(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  NSObject *v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  const void *v27;
  void *v28;
  NSObject *v29;
  _QWORD v30[4];
  void *aBlock;
  xpc_object_t object;

  v8 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v30[0]) = 0;
    _os_log_impl(&dword_24B855000, v8, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of wake info", (uint8_t *)v30, 2u);
  }
  v9 = xpc_dictionary_create(0, 0, 0);
  v10 = MEMORY[0x24BDACFA0];
  if (v9 || (v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v9) == v10)
    {
      xpc_retain(v9);
      v11 = v9;
    }
    else
    {
      v11 = xpc_null_create();
    }
  }
  else
  {
    v11 = xpc_null_create();
    v9 = 0;
  }
  xpc_release(v9);
  v12 = xpc_dictionary_create(0, 0, 0);
  if (v12 || (v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v12) == v10)
    {
      xpc_retain(v12);
      v13 = v12;
    }
    else
    {
      v13 = xpc_null_create();
    }
  }
  else
  {
    v13 = xpc_null_create();
    v12 = 0;
  }
  xpc_release(v12);
  v14 = xpc_int64_create(a2);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x24BE05438], v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_int64_create(a3);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x24BE05660], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = xpc_int64_create(a4);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x24BE055C0], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = xpc_string_create((const char *)*MEMORY[0x24BE058A0]);
  if (!v20)
    v20 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x24BE04E88], v20);
  v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  v22 = xpc_int64_create(524465);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x24BE04F38], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (v13)
  {
    xpc_retain(v13);
    v24 = v13;
  }
  else
  {
    v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x24BE04E80], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (*(_QWORD *)(a1 + 104) && *(_QWORD *)(a1 + 112))
  {
    if (v11)
    {
      xpc_retain(v11);
      v26 = v11;
      v27 = *(const void **)(a1 + 104);
      if (v27)
      {
LABEL_32:
        v28 = _Block_copy(v27);
        goto LABEL_35;
      }
    }
    else
    {
      v26 = xpc_null_create();
      v27 = *(const void **)(a1 + 104);
      if (v27)
        goto LABEL_32;
    }
    v28 = 0;
LABEL_35:
    v29 = *(NSObject **)(a1 + 112);
    v30[0] = MEMORY[0x24BDAC760];
    v30[1] = 1174405120;
    v30[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke;
    v30[3] = &__block_descriptor_tmp_13;
    if (v28)
    {
      aBlock = _Block_copy(v28);
      object = v26;
      if (v26)
      {
LABEL_37:
        xpc_retain(v26);
LABEL_40:
        dispatch_async(v29, v30);
        xpc_release(object);
        object = 0;
        if (aBlock)
          _Block_release(aBlock);
        if (v28)
          _Block_release(v28);
        xpc_release(v26);
        goto LABEL_45;
      }
    }
    else
    {
      aBlock = 0;
      object = v26;
      if (v26)
        goto LABEL_37;
    }
    object = xpc_null_create();
    goto LABEL_40;
  }
LABEL_45:
  xpc_release(v13);
  xpc_release(v11);
}

void PowerStats::setPowerdownMessage(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t value;
  const object *v4;
  const __CFArray *v5;
  CFTypeID v6;
  CFTypeRef v7;
  CFIndex v8;
  uint64_t **v9;
  CFIndex Count;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v12;
  CFTypeID v13;
  const __CFDictionary *v14;
  unsigned int Int;
  uint64_t v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t *v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  char v23;
  char v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  CFTypeRef cf[2];
  CFArrayRef theArray;
  xpc_object_t object;

  theArray = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
  value = xpc_dictionary_get_value(*a2, abm::kKeyPowerDownMessageList[0]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  xpc::bridge((xpc *)&object, v4);
  v5 = (const __CFArray *)cf[0];
  if (cf[0])
  {
    v6 = CFGetTypeID(cf[0]);
    if (v6 == CFArrayGetTypeID())
    {
      theArray = (CFArrayRef)cf[0];
      CFRetain(cf[0]);
      v7 = cf[0];
LABEL_8:
      CFRelease(v7);
      goto LABEL_9;
    }
  }
  v5 = 0;
  theArray = 0;
  v7 = cf[0];
  if (cf[0])
    goto LABEL_8;
LABEL_9:
  xpc_release(object);
  v8 = 0;
  v9 = (uint64_t **)(a1 + 48);
  while (1)
  {
    Count = CFArrayGetCount(v5);
    v5 = theArray;
    if (Count <= v8)
      break;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v8);
    v12 = ValueAtIndex;
    if (!ValueAtIndex)
      goto LABEL_12;
    cf[0] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    cf[1] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    v13 = CFGetTypeID(ValueAtIndex);
    if (v13 == CFDictionaryGetTypeID())
      v14 = v12;
    else
      v14 = 0;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)cf, v14);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&object, abm::kKeyPowerDownMessageQMISvc[0]);
    Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)cf, (const __CFString *)object);
    MEMORY[0x24BD29478](&object);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&object, abm::kKeyPowerDownMessageId[0]);
    v16 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)cf, (const __CFString *)object);
    MEMORY[0x24BD29478](&object);
    v17 = *v9;
    v18 = (uint64_t **)(a1 + 48);
    v19 = (uint64_t *)(a1 + 48);
    if (*v9)
    {
      while (1)
      {
        while (1)
        {
          v19 = v17;
          v20 = *((_DWORD *)v17 + 7);
          if (Int == v20)
            break;
          if (Int >= v20)
          {
            if (v20 >= Int)
              v24 = 1;
            else
              v24 = -1;
            if ((v24 & 0x80) == 0)
              goto LABEL_39;
            goto LABEL_35;
          }
LABEL_20:
          v17 = (uint64_t *)*v19;
          v18 = (uint64_t **)v19;
          if (!*v19)
            goto LABEL_37;
        }
        v21 = *((_DWORD *)v19 + 8);
        if (v16 < v21)
          goto LABEL_20;
        v22 = v21 == (_DWORD)v16;
        if (v21 >= v16)
          v23 = 1;
        else
          v23 = -1;
        if (v22)
          v23 = 0;
        if ((v23 & 0x80) == 0)
        {
LABEL_39:
          v25 = (char *)v19;
          goto LABEL_11;
        }
LABEL_35:
        v17 = (uint64_t *)v19[1];
        if (!v17)
        {
          v18 = (uint64_t **)(v19 + 1);
          break;
        }
      }
    }
LABEL_37:
    v25 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v25 + 28) = Int | (unint64_t)(v16 << 32);
    *((_DWORD *)v25 + 9) = 0;
    *(_QWORD *)v25 = 0;
    *((_QWORD *)v25 + 1) = 0;
    *((_QWORD *)v25 + 2) = v19;
    *v18 = (uint64_t *)v25;
    v26 = **(_QWORD **)(a1 + 40);
    v27 = (uint64_t *)v25;
    if (v26)
    {
      *(_QWORD *)(a1 + 40) = v26;
      v27 = *v18;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 48), v27);
    ++*(_QWORD *)(a1 + 56);
    v5 = theArray;
LABEL_11:
    ++*((_DWORD *)v25 + 9);
    MEMORY[0x24BD294A8](cf);
LABEL_12:
    ++v8;
  }
  if (theArray)
    CFRelease(theArray);
}

void sub_24B8D02D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void PowerStats::submitLowPowerStatsMetric_sync(os_log_t *this)
{
  NSObject *v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  os_log_t v21;
  NSObject *v22;
  unsigned int v23;
  const char *v24;
  int64_t isa_low;
  int64_t isa_high;
  int64_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  NSObject *isa;
  NSObject *v39;
  BOOL v40;
  xpc_object_t v41;
  void *v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  xpc_object_t v50;
  xpc_object_t v51;
  xpc_object_t v52;
  os_log_t v53;
  void *v54;
  NSObject *v55;
  os_log_t *v56;
  void *v57;
  xpc_object_t xdict;
  char *v59;
  char *v60;
  char *key;
  xpc_object_t xarray;
  uint8_t buf[8];
  uint64_t v64;
  void (*v65)(uint64_t);
  void *v66;
  void *aBlock;
  xpc_object_t object;

  v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of low power stats", buf, 2u);
  }
  v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v3) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v3);
      v4 = v3;
    }
    else
    {
      v4 = xpc_null_create();
    }
  }
  else
  {
    v4 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v5 = xpc_dictionary_create(0, 0, 0);
  if (v5 || (v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v5) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v5);
      v6 = v5;
    }
    else
    {
      v6 = xpc_null_create();
    }
  }
  else
  {
    v6 = xpc_null_create();
    v5 = 0;
  }
  xpc_release(v5);
  v7 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x24BE05548], v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = xpc_int64_create((*((_DWORD *)this + 4) + *((_DWORD *)this + 2)));
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x24BE05188], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_int64_create(*((unsigned int *)this + 5));
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x24BE05390], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(*((unsigned int *)this + 6));
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x24BE04FB8], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = xpc_int64_create(*((unsigned int *)this + 8));
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x24BE05228], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = xpc_int64_create(*((unsigned int *)this + 7));
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x24BE052B8], v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  v19 = xpc_array_create(0, 0);
  if (v19 || (v19 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v19) == MEMORY[0x24BDACF78])
    {
      xpc_retain(v19);
      v20 = v19;
    }
    else
    {
      v20 = xpc_null_create();
    }
  }
  else
  {
    v20 = xpc_null_create();
    v19 = 0;
  }
  xpc_release(v19);
  xarray = v20;
  v57 = v4;
  xdict = v6;
  v21 = this[5];
  v56 = this;
  v22 = (this + 6);
  if (v21 == (os_log_t)(this + 6))
  {
    v23 = 0;
  }
  else
  {
    v23 = 0;
    key = (char *)*MEMORY[0x24BE05388];
    v60 = (char *)*MEMORY[0x24BE052C8];
    v59 = (char *)*MEMORY[0x24BE04FB0];
    v24 = (const char *)*MEMORY[0x24BE04FA8];
    do
    {
      isa_high = HIDWORD(v21[3].isa);
      isa_low = LODWORD(v21[4].isa);
      v27 = HIDWORD(v21[4].isa);
      v28 = xpc_dictionary_create(0, 0, 0);
      if (v28 || (v28 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x24BD2A468](v28) == MEMORY[0x24BDACFA0])
        {
          xpc_retain(v28);
          v29 = v28;
        }
        else
        {
          v29 = xpc_null_create();
        }
      }
      else
      {
        v29 = xpc_null_create();
        v28 = 0;
      }
      xpc_release(v28);
      v30 = xpc_int64_create(0);
      if (!v30)
        v30 = xpc_null_create();
      xpc_dictionary_set_value(v29, key, v30);
      v31 = xpc_null_create();
      xpc_release(v30);
      xpc_release(v31);
      v32 = xpc_int64_create(isa_high);
      if (!v32)
        v32 = xpc_null_create();
      xpc_dictionary_set_value(v29, v60, v32);
      v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
      v34 = xpc_int64_create(isa_low);
      if (!v34)
        v34 = xpc_null_create();
      xpc_dictionary_set_value(v29, v59, v34);
      v35 = xpc_null_create();
      xpc_release(v34);
      xpc_release(v35);
      v36 = xpc_int64_create(v27);
      if (!v36)
        v36 = xpc_null_create();
      xpc_dictionary_set_value(v29, v24, v36);
      v37 = xpc_null_create();
      xpc_release(v36);
      xpc_release(v37);
      xpc_array_append_value(xarray, v29);
      xpc_release(v29);
      isa = v21[1].isa;
      if (isa)
      {
        do
        {
          v39 = isa;
          isa = isa->isa;
        }
        while (isa);
      }
      else
      {
        do
        {
          v39 = v21[2].isa;
          v40 = v39->isa == (Class)v21;
          v21 = v39;
        }
        while (!v40);
      }
      v23 += v27;
      v21 = v39;
    }
    while (v39 != v22);
  }
  if (xarray)
  {
    xpc_retain(xarray);
    v41 = xarray;
    v42 = xdict;
  }
  else
  {
    v42 = xdict;
    v41 = xpc_null_create();
  }
  xpc_dictionary_set_value(v42, (const char *)*MEMORY[0x24BE052C0], v41);
  v43 = xpc_null_create();
  xpc_release(v41);
  xpc_release(v43);
  v44 = xpc_int64_create(v23);
  if (!v44)
    v44 = xpc_null_create();
  xpc_dictionary_set_value(v42, (const char *)*MEMORY[0x24BE054C8], v44);
  v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  v46 = xpc_string_create((const char *)*MEMORY[0x24BE058A0]);
  if (!v46)
    v46 = xpc_null_create();
  xpc_dictionary_set_value(v57, (const char *)*MEMORY[0x24BE04E88], v46);
  v47 = xpc_null_create();
  xpc_release(v46);
  xpc_release(v47);
  v48 = xpc_int64_create(524466);
  if (!v48)
    v48 = xpc_null_create();
  xpc_dictionary_set_value(v57, (const char *)*MEMORY[0x24BE04F38], v48);
  v49 = xpc_null_create();
  xpc_release(v48);
  xpc_release(v49);
  if (v42)
  {
    xpc_retain(v42);
    v50 = v42;
  }
  else
  {
    v50 = xpc_null_create();
  }
  xpc_dictionary_set_value(v57, (const char *)*MEMORY[0x24BE04E80], v50);
  v51 = xpc_null_create();
  xpc_release(v50);
  xpc_release(v51);
  if (v56[13] && v56[14])
  {
    if (v57)
    {
      xpc_retain(v57);
      v52 = v57;
      v53 = v56[13];
      if (v53)
      {
LABEL_73:
        v54 = _Block_copy(v53);
        goto LABEL_76;
      }
    }
    else
    {
      v52 = xpc_null_create();
      v53 = v56[13];
      if (v53)
        goto LABEL_73;
    }
    v54 = 0;
LABEL_76:
    v55 = v56[14];
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    v64 = 1174405120;
    v65 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke;
    v66 = &__block_descriptor_tmp_13;
    if (v54)
    {
      aBlock = _Block_copy(v54);
      object = v52;
      if (v52)
      {
LABEL_78:
        xpc_retain(v52);
LABEL_81:
        dispatch_async(v55, buf);
        xpc_release(object);
        object = 0;
        if (aBlock)
          _Block_release(aBlock);
        if (v54)
          _Block_release(v54);
        xpc_release(v52);
        goto LABEL_86;
      }
    }
    else
    {
      aBlock = 0;
      object = v52;
      if (v52)
        goto LABEL_78;
    }
    object = xpc_null_create();
    goto LABEL_81;
  }
LABEL_86:
  xpc_release(xarray);
  xpc_release(v42);
  xpc_release(v57);
}

void sub_24B8D0CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object)
{
  void *v16;

  xpc_release(v16);
  xpc_release(object);
  xpc_release(a12);
  xpc_release(a11);
  _Unwind_Resume(a1);
}

void PowerStats::reportStats(os_log_t *this, int a2)
{
  if (a2 == 524466)
    PowerStats::submitLowPowerStatsMetric_sync(this);
}

void PowerStats::registerStatsHandler(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v4;
  if (v5)
    _Block_release(v5);
  v6 = *(NSObject **)(a2 + 8);
  if (v6)
    dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v6;
  if (v7)
    dispatch_release(v7);
}

void PowerStats::dumpState(os_log_t *this)
{
  NSObject *v2;
  _QWORD *v3;
  char *v4;
  os_log_t v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  NSObject *v16;
  int isa_high;
  int isa;
  int v19;
  NSObject *v20;
  NSObject *v21;
  BOOL v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Power state ---------------", buf, 2u);
    v2 = *this;
    v3 = &loc_24B950000;
    if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
    {
LABEL_3:
      v4 = "NSt3__120__shared_ptr_pointerIPN7support4misc8WatchdogENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE" + 6;
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v3 = (_QWORD *)&loc_24B950000;
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_3;
  }
  v7 = *((_DWORD *)this + 3);
  *(_DWORD *)buf = v3[152];
  v24 = v7;
  _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Idle sleep reverted due to BB events: %u", buf, 8u);
  v2 = *this;
  v4 = "120__shared_ptr_pointerIPN7support4misc8WatchdogENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE";
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_4:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  v8 = *((_DWORD *)this + 2);
  v9 = *((_DWORD *)this + 4);
  *(_DWORD *)buf = *((_QWORD *)v4 + 262);
  v24 = v8;
  v25 = 1024;
  v26 = v9;
  _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I BB events deferred on idle sleep: %u, on forced sleep: %u", buf, 0xEu);
  v2 = *this;
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_5:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  v10 = *((_DWORD *)this + 5);
  *(_DWORD *)buf = v3[152];
  v24 = v10;
  _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Forced sleep during BB event handling: %u", buf, 8u);
  v2 = *this;
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_6:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  v12 = *((_DWORD *)this + 7);
  v11 = *((_DWORD *)this + 8);
  v13 = *((_DWORD *)this + 6);
  *(_DWORD *)buf = 67109632;
  v24 = v11;
  v25 = 1024;
  v26 = v12;
  v27 = 1024;
  v28 = v13;
  _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Number of idle sleeps: %u, forced sleeps: %u, wakes: %u", buf, 0x14u);
  v2 = *this;
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_7:
    v5 = this[5];
    v6 = (this + 6);
    if (v5 == (os_log_t)(this + 6))
      return;
    goto LABEL_17;
  }
LABEL_14:
  v14 = *((_DWORD *)this + 20);
  v15 = *((_DWORD *)this + 21);
  *(_DWORD *)buf = *((_QWORD *)v4 + 262);
  v24 = v14;
  v25 = 1024;
  v26 = v15;
  _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Last wake duration: %u, sleep duration: %u", buf, 0xEu);
  v5 = this[5];
  v6 = (this + 6);
  if (v5 == (os_log_t)(this + 6))
    return;
  do
  {
LABEL_17:
    v16 = *this;
    if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
    {
      isa = (int)v5[4].isa;
      isa_high = HIDWORD(v5[4].isa);
      v19 = HIDWORD(v5[3].isa);
      *(_DWORD *)buf = 67109632;
      v24 = v19;
      v25 = 1024;
      v26 = isa;
      v27 = 1024;
      v28 = isa_high;
      _os_log_impl(&dword_24B855000, v16, OS_LOG_TYPE_DEFAULT, "#I Received message QMI_SVC 0x%x, ID 0x%x, %u times after powerdown", buf, 0x14u);
    }
    v20 = v5[1].isa;
    if (v20)
    {
      do
      {
        v21 = v20;
        v20 = v20->isa;
      }
      while (v20);
    }
    else
    {
      do
      {
        v21 = v5[2].isa;
        v22 = v21->isa == (Class)v5;
        v5 = v21;
      }
      while (!v22);
    }
    v5 = v21;
  }
  while (v21 != v6);
}

void std::__shared_ptr_pointer<PowerStats *,std::shared_ptr<PowerStats>::__shared_ptr_default_delete<PowerStats,PowerStats>,std::allocator<PowerStats>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

PowerStats *std::__shared_ptr_pointer<PowerStats *,std::shared_ptr<PowerStats>::__shared_ptr_default_delete<PowerStats,PowerStats>,std::allocator<PowerStats>>::__on_zero_shared(uint64_t a1)
{
  PowerStats *result;

  result = *(PowerStats **)(a1 + 24);
  if (result)
    PowerStats::~PowerStats(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<PowerStats *,std::shared_ptr<PowerStats>::__shared_ptr_default_delete<PowerStats,PowerStats>,std::allocator<PowerStats>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B953B12)
    return a1 + 24;
  if (((v3 & 0x800000024B953B12 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B953B12))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B953B12 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  xpc_object_t object;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(void **)(a1 + 40);
  object = v1;
  if (v1)
    xpc_retain(v1);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, xpc_object_t *))(v2 + 16))(v2, &object);
  xpc_release(object);
}

void sub_24B8D128C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c53_ZTSN8dispatch5blockIU13block_pointerFvN3xpc4dictEEEE40c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  void *v6;
  xpc_object_t result;

  v4 = *(const void **)(a2 + 32);
  if (v4)
  {
    v5 = _Block_copy(v4);
    v6 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v6;
    if (v6)
      return xpc_retain(v6);
  }
  else
  {
    v6 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v6;
    if (v6)
      return xpc_retain(v6);
  }
  result = xpc_null_create();
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c53_ZTSN8dispatch5blockIU13block_pointerFvN3xpc4dictEEEE40c15_ZTSN3xpc4dictE(uint64_t a1)
{
  const void *v2;

  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
}

uint64_t __cxx_global_var_init_5()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_24B855000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance, &dword_24B855000);
  }
  return result;
}

BOOL defaults::get(char *a1, char *a2, std::string *a3)
{
  const char *v6;
  NSObject *v7;
  char *v9;
  uint64_t *v10;
  int v11;
  const char *v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  uint64_t *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04EE8])
      && strcasecmp(a1, (const char *)*MEMORY[0x24BE058D8])
      && strcasecmp(a1, (const char *)*MEMORY[0x24BDFC778])
      && strcasecmp(a1, (const char *)*MEMORY[0x24BDFC770]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04EF0]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x24BE05920]) && strcasecmp(a1, (const char *)*MEMORY[0x24BE04F58]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04FE0]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04FE8]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04FA0]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04E38]))
                {
                  if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04F98]))
                  {
                    if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04EB0]))
                    {
                      v6 = a1;
                      if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04F00]))
                        goto LABEL_16;
                      return defaults::tailspin::get(a2, (uint64_t)a3);
                    }
                    return defaults::profile::get(a2, (uint64_t)a3);
                  }
                  return defaults::systemlogs::get(a2, (uint64_t)a3);
                }
                return defaults::logfilter::get(a2, (uint64_t)a3);
              }
              return defaults::ttr::get(a2, (uint64_t)a3);
            }
            return defaults::compression::get(a2, (uint64_t)a3);
          }
          return defaults::bbipc::get(a2, (uint64_t)a3);
        }
        return defaults::ipc::get(a2, (uint64_t)a3);
      }
      return defaults::coredump::get(a2, (uint64_t)a3);
    }
    return defaults::bbtrace::get(a2, (std::string::size_type *)a3);
  }
  v6 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE04EE8])
    || !strcasecmp(v6, (const char *)*MEMORY[0x24BE058D8])
    || !strcasecmp(v6, (const char *)*MEMORY[0x24BDFC778])
    || !strcasecmp(v6, (const char *)*MEMORY[0x24BDFC770]))
  {
    return defaults::bbtrace::get(a2, (std::string::size_type *)a3);
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04EF0]))
    return defaults::coredump::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE05920]) || !strcasecmp(v6, (const char *)*MEMORY[0x24BE04F58]))
    return defaults::ipc::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04FE0]))
    return defaults::bbipc::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04FE8]))
    return defaults::compression::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04FA0]))
    return defaults::ttr::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04E38]))
    return defaults::logfilter::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04F98]))
    return defaults::systemlogs::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04EB0]))
    return defaults::profile::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04F00]))
    return defaults::tailspin::get(a2, (uint64_t)a3);
LABEL_16:
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04EF8]))
    return defaults::tracesettings::get(a2, a3);
  v7 = GetOsLogContext()[1];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0)
      v9 = a1;
    else
      v9 = *(char **)a1;
    if (a2[23] >= 0)
      v10 = (uint64_t *)a2;
    else
      v10 = *(uint64_t **)a2;
    v11 = 136315650;
    v12 = "prop.default";
    v13 = 2080;
    v14 = v9;
    v15 = 2080;
    v16 = v10;
    _os_log_error_impl(&dword_24B855000, v7, OS_LOG_TYPE_ERROR, "%s: Invalid domain; domain='%s' key='%s'",
      (uint8_t *)&v11,
      0x20u);
  }
  return 0;
}

BOOL defaults::bbtrace::get(char *a1, std::string::size_type *a2)
{
  int v4;
  capabilities::trace *v5;
  capabilities::trace *v6;
  capabilities::trace *v7;
  capabilities::trace *v8;
  const char *v9;
  capabilities::radio *v10;
  const char *v11;
  const char *v12;
  capabilities::radio *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  std::string::size_type v18;
  char v19;
  std::string::size_type v20;
  _BOOL8 result;
  uint64_t v22;
  const char *v23;
  capabilities::radio *v24;
  const char *v25;
  capabilities::radio *v26;
  const char *v27;
  capabilities::radio *v28;
  const char *v29;
  capabilities::radio *v30;
  uint64_t v31;
  capabilities::radio *v32;
  const char *v33;
  capabilities::radio *v34;
  const std::string::value_type *v35;
  const char *v36;
  capabilities::radio *v37;
  capabilities::trace *v38;
  capabilities::trace *v39;
  capabilities::radio *v40;
  defaults::bbtrace *v41;
  const char *v42;
  NSObject *v43;
  std::string::size_type v44;
  char *v45;
  unsigned int count;
  unsigned int v47;
  unsigned int v48;
  capabilities::abs *v49;
  unsigned int v50;
  std::string v51;
  char *v52;
  _QWORD v53[3];

  v53[2] = *MEMORY[0x24BDAC8D0];
  v4 = a1[23];
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x24BE04F88]);
    if ((_DWORD)v5)
    {
      v6 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x24BE04FC8]);
      if ((_DWORD)v6)
      {
        v7 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x24BE05130]);
        if ((_DWORD)v7)
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04E90]))
          {
            if (!strcasecmp(a1, (const char *)*MEMORY[0x24BE05068]))
              goto LABEL_114;
            if (strcasecmp(a1, (const char *)*MEMORY[0x24BE05048]))
            {
              v8 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x24BE04F90]);
              v9 = a1;
              if ((_DWORD)v8)
                goto LABEL_9;
              goto LABEL_23;
            }
          }
LABEL_27:
          *(_QWORD *)((char *)v53 + 7) = 0;
          v53[0] = 0;
          std::to_string(&v51, 0);
          goto LABEL_28;
        }
LABEL_26:
        v17 = capabilities::trace::supportsDataLoggingByDefault(v7);
        v53[0] = 0;
        *(_QWORD *)((char *)v53 + 7) = 0;
        std::to_string(&v51, v17);
        goto LABEL_28;
      }
LABEL_25:
      v16 = capabilities::trace::supportsHighTPutByDefault(v6);
      v53[0] = 0;
      *(_QWORD *)((char *)v53 + 7) = 0;
      std::to_string(&v51, v16);
      goto LABEL_28;
    }
LABEL_24:
    v15 = capabilities::trace::enabledByDefault(v5);
    v53[0] = 0;
    *(_QWORD *)((char *)v53 + 7) = 0;
    std::to_string(&v51, v15);
    goto LABEL_28;
  }
  v9 = *(const char **)a1;
  v5 = (capabilities::trace *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE04F88]);
  if (!(_DWORD)v5)
    goto LABEL_24;
  v6 = (capabilities::trace *)strcasecmp(v9, (const char *)*MEMORY[0x24BE04FC8]);
  if (!(_DWORD)v6)
    goto LABEL_25;
  v7 = (capabilities::trace *)strcasecmp(v9, (const char *)*MEMORY[0x24BE05130]);
  if (!(_DWORD)v7)
    goto LABEL_26;
  if (!strcasecmp(v9, (const char *)*MEMORY[0x24BE04E90]))
    goto LABEL_27;
  if (!strcasecmp(v9, (const char *)*MEMORY[0x24BE05068]))
    goto LABEL_114;
  if (!strcasecmp(v9, (const char *)*MEMORY[0x24BE05048]))
    goto LABEL_27;
  v8 = (capabilities::trace *)strcasecmp(v9, (const char *)*MEMORY[0x24BE04F90]);
  if (!(_DWORD)v8)
  {
LABEL_23:
    v14 = capabilities::trace::defaultHistorySizeMB(v8);
    v53[0] = 0;
    *(_QWORD *)((char *)v53 + 7) = 0;
    std::to_string(&v51, v14);
LABEL_28:
    v53[0] = v51.__r_.__value_.__l.__size_;
    v18 = v51.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v53 + 7) = *(std::string::size_type *)((char *)&v51.__r_.__value_.__r.__words[1] + 7);
    v19 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    if (*((char *)a2 + 23) < 0)
      operator delete((void *)*a2);
    v20 = v53[0];
    *a2 = v18;
    a2[1] = v20;
    *(std::string::size_type *)((char *)a2 + 15) = *(_QWORD *)((char *)v53 + 7);
    *((_BYTE *)a2 + 23) = v19;
    return 1;
  }
LABEL_9:
  v10 = (capabilities::radio *)strcasecmp(v9, (const char *)*MEMORY[0x24BDFC998]);
  if (!(_DWORD)v10)
  {
    v22 = capabilities::radio::maverick(v10);
    if ((v22 & 1) != 0 || (capabilities::radio::ice((capabilities::radio *)v22) & 1) != 0)
    {
      util::to_str<diag::config::DuringAPSleep>(&v51);
LABEL_71:
      if (*((char *)a2 + 23) < 0)
        operator delete((void *)*a2);
      *(std::string *)a2 = v51;
      return 1;
    }
    LOBYTE(v4) = a1[23];
  }
  v11 = *(const char **)a1;
  if ((v4 & 0x80u) == 0)
    v12 = a1;
  else
    v12 = *(const char **)a1;
  v13 = (capabilities::radio *)strcasecmp(v12, (const char *)*MEMORY[0x24BDFC988]);
  if (!(_DWORD)v13)
  {
    if ((capabilities::radio::maverick(v13) & 1) != 0)
      goto LABEL_70;
    LOBYTE(v4) = a1[23];
    v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v23 = a1;
  else
    v23 = v11;
  v24 = (capabilities::radio *)strcasecmp(v23, (const char *)*MEMORY[0x24BDFC980]);
  if (!(_DWORD)v24)
  {
    if ((capabilities::radio::maverick(v24) & 1) != 0)
      goto LABEL_70;
    LOBYTE(v4) = a1[23];
    v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v25 = a1;
  else
    v25 = v11;
  v26 = (capabilities::radio *)strcasecmp(v25, (const char *)*MEMORY[0x24BDFC9A0]);
  if (!(_DWORD)v26)
  {
    if ((capabilities::radio::maverick(v26) & 1) != 0)
    {
      util::to_str<unsigned int>(&v51, 3u);
      goto LABEL_71;
    }
    LOBYTE(v4) = a1[23];
    v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v27 = a1;
  else
    v27 = v11;
  v28 = (capabilities::radio *)strcasecmp(v27, (const char *)*MEMORY[0x24BDFC9A8]);
  if (!(_DWORD)v28)
  {
    if ((capabilities::radio::maverick(v28) & 1) != 0)
    {
      util::to_str<diag::config::Recovery>(&v51);
      goto LABEL_71;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    v29 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x24BDFC990]))
      goto LABEL_60;
LABEL_70:
    util::to_str<BOOL>(&v51, 0);
    goto LABEL_71;
  }
  v29 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BDFC990]))
    goto LABEL_70;
LABEL_60:
  v30 = (capabilities::radio *)strcasecmp(v29, (const char *)*MEMORY[0x24BE05528]);
  if (!(_DWORD)v30)
  {
    v31 = capabilities::radio::maverick(v30);
    if ((v31 & 1) != 0)
      goto LABEL_76;
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    v32 = (capabilities::radio *)strcasecmp(a1, (const char *)*MEMORY[0x24BE05630]);
    v33 = a1;
    if ((_DWORD)v32)
      goto LABEL_65;
LABEL_75:
    v31 = capabilities::radio::ice(v32);
    if (!(_DWORD)v31)
    {
      v35 = "None";
LABEL_80:
      std::string::__assign_external((std::string *)a2, v35);
      return 1;
    }
LABEL_76:
    if (config::hw::watch((config::hw *)v31))
      v35 = "Lite";
    else
      v35 = "Default";
    goto LABEL_80;
  }
  v33 = *(const char **)a1;
  v32 = (capabilities::radio *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE05630]);
  if (!(_DWORD)v32)
    goto LABEL_75;
LABEL_65:
  v34 = (capabilities::radio *)strcasecmp(v33, (const char *)*MEMORY[0x24BDFC978]);
  if (!(_DWORD)v34)
  {
    if ((capabilities::radio::maverick(v34) & 1) != 0)
    {
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 4;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((_BYTE *)a2 + 23) = 4;
      }
      strcpy((char *)a2, "None");
      return 1;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80u) == 0)
    v36 = a1;
  else
    v36 = *(const char **)a1;
  v37 = (capabilities::radio *)strcasecmp(v36, (const char *)*MEMORY[0x24BE05400]);
  if (!(_DWORD)v37)
  {
    if ((capabilities::radio::maverick(v37) & 1) != 0)
    {
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 5;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((_BYTE *)a2 + 23) = 5;
      }
      strcpy((char *)a2, "Sleep");
      return 1;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x24BE05098]))
    {
      v38 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x24BE05570]);
      if ((_DWORD)v38)
      {
        if (!strcasecmp(a1, (const char *)*MEMORY[0x24BE05820]))
          goto LABEL_70;
        if (strcasecmp(a1, (const char *)*MEMORY[0x24BE057F0]) && strcasecmp(a1, (const char *)*MEMORY[0x24BE057F8]))
        {
          v39 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x24BE04FC0]);
          if ((_DWORD)v39)
          {
            v40 = (capabilities::radio *)strcasecmp(a1, (const char *)*MEMORY[0x24BE05328]);
            if ((_DWORD)v40)
            {
              v41 = (defaults::bbtrace *)strcasecmp(a1, (const char *)*MEMORY[0x24BE05410]);
              v42 = a1;
              if ((_DWORD)v41)
                goto LABEL_99;
LABEL_113:
              count = defaults::bbtrace::transport_read_count(v41);
              util::to_str<unsigned int>(&v51, count);
              goto LABEL_71;
            }
LABEL_129:
            v49 = (capabilities::abs *)capabilities::radio::vendor(v40);
            if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v49))
              v50 = 0x4000;
            else
              v50 = 0x8000;
            util::to_str<unsigned int>(&v51, v50);
            goto LABEL_71;
          }
LABEL_128:
          v48 = capabilities::trace::defaultFileSizeBytes(v39);
          util::to_str<unsigned int>(&v51, v48);
          goto LABEL_71;
        }
LABEL_114:
        if (*((char *)a2 + 23) < 0)
        {
          a2[1] = 0;
          a2 = (std::string::size_type *)*a2;
        }
        else
        {
          *((_BYTE *)a2 + 23) = 0;
        }
        *(_BYTE *)a2 = 0;
        return 1;
      }
LABEL_120:
      v47 = capabilities::trace::defaultMemoryFileMaxCount(v38);
      util::to_str<unsigned int>(&v51, v47);
      goto LABEL_71;
    }
LABEL_118:
    if (*((char *)a2 + 23) < 0)
    {
      a2[1] = 17;
      a2 = (std::string::size_type *)*a2;
    }
    else
    {
      *((_BYTE *)a2 + 23) = 17;
    }
    strcpy((char *)a2, "/usr/lib/bbmasks/");
    return 1;
  }
  v42 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE05098]))
    goto LABEL_118;
  v38 = (capabilities::trace *)strcasecmp(v42, (const char *)*MEMORY[0x24BE05570]);
  if (!(_DWORD)v38)
    goto LABEL_120;
  if (!strcasecmp(v42, (const char *)*MEMORY[0x24BE05820]))
    goto LABEL_70;
  if (!strcasecmp(v42, (const char *)*MEMORY[0x24BE057F0]) || !strcasecmp(v42, (const char *)*MEMORY[0x24BE057F8]))
    goto LABEL_114;
  v39 = (capabilities::trace *)strcasecmp(v42, (const char *)*MEMORY[0x24BE04FC0]);
  if (!(_DWORD)v39)
    goto LABEL_128;
  v40 = (capabilities::radio *)strcasecmp(v42, (const char *)*MEMORY[0x24BE05328]);
  if (!(_DWORD)v40)
    goto LABEL_129;
  v41 = (defaults::bbtrace *)strcasecmp(v42, (const char *)*MEMORY[0x24BE05410]);
  if (!(_DWORD)v41)
    goto LABEL_113;
LABEL_99:
  if (!strcasecmp(v42, (const char *)*MEMORY[0x24BE05628]))
  {
    util::to_str<BOOL>(&v51, 1);
    goto LABEL_71;
  }
  v43 = GetOsLogContext()[1];
  result = os_log_type_enabled(v43, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v44 = *MEMORY[0x24BE058D8];
    if (a1[23] >= 0)
      v45 = a1;
    else
      v45 = *(char **)a1;
    LODWORD(v51.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
    WORD2(v51.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v51.__r_.__value_.__r.__words[1] + 6) = v44;
    HIWORD(v51.__r_.__value_.__r.__words[2]) = 2080;
    v52 = v45;
    _os_log_error_impl(&dword_24B855000, v43, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v51,
      0x20u);
    return 0;
  }
  return result;
}

void sub_24B8D2210(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x24B8D1C18);
    JUMPOUT(0x24B8D1C20);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::coredump::get(const char *a1, uint64_t a2)
{
  uint64_t *v3;
  capabilities::trace *v4;
  int v5;
  unsigned __int8 v6;
  NSObject *v7;
  std::string::size_type v8;
  uint64_t *v9;
  int v10;
  std::string::size_type v11;
  char v12;
  uint64_t v13;
  std::string v15;
  uint64_t *v16;
  _QWORD v17[3];

  v3 = (uint64_t *)a1;
  v17[2] = *MEMORY[0x24BDAC8D0];
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v4 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x24BE04F88]);
  v5 = (int)v4;
  if ((_DWORD)v4)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_2579B8A80 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v7 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        return v5 == 0;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v7 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        return v5 == 0;
    }
    v8 = *MEMORY[0x24BE04EF0];
    if (*((char *)v3 + 23) >= 0)
      v9 = v3;
    else
      v9 = (uint64_t *)*v3;
    LODWORD(v15.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
    WORD2(v15.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 6) = v8;
    HIWORD(v15.__r_.__value_.__r.__words[2]) = 2080;
    v16 = v9;
    _os_log_error_impl(&dword_24B855000, v7, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v15,
      0x20u);
  }
  else
  {
    v10 = capabilities::trace::allowed(v4);
    v17[0] = 0;
    *(_QWORD *)((char *)v17 + 7) = 0;
    std::to_string(&v15, v10);
    v17[0] = v15.__r_.__value_.__l.__size_;
    v11 = v15.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v17 + 7) = *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 7);
    v12 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v13 = v17[0];
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v17 + 7);
    *(_BYTE *)(a2 + 23) = v12;
  }
  return v5 == 0;
}

void sub_24B8D2474(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x24B8D23B0);
    JUMPOUT(0x24B8D23B8);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::ipc::get(char *a1, uint64_t a2)
{
  capabilities::ipc *v4;
  capabilities::ipc *v5;
  const char *v6;
  capabilities::ipc *v7;
  int v8;
  capabilities::trace *v9;
  std::string::size_type v10;
  char v11;
  uint64_t v12;
  _BOOL8 result;
  unsigned __int8 v14;
  NSObject *v15;
  std::string::size_type v16;
  char *v17;
  std::string v18;
  char *v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  if (a1[23] < 0)
  {
    v6 = *(const char **)a1;
    v4 = (capabilities::ipc *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE04F88]);
    if ((_DWORD)v4)
    {
      v5 = (capabilities::ipc *)strcasecmp(v6, (const char *)*MEMORY[0x24BE04F90]);
      if ((_DWORD)v5)
        goto LABEL_4;
LABEL_9:
      v8 = capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(v5);
      memset(v20, 0, 15);
      std::to_string(&v18, v8);
      goto LABEL_13;
    }
LABEL_10:
    v9 = (capabilities::trace *)capabilities::ipc::supportsPCI(v4);
    if ((_DWORD)v9)
      LODWORD(v9) = capabilities::trace::enabledByDefault(v9);
    memset(v20, 0, 15);
    std::to_string(&v18, (int)v9);
    goto LABEL_13;
  }
  v4 = (capabilities::ipc *)strcasecmp(a1, (const char *)*MEMORY[0x24BE04F88]);
  if (!(_DWORD)v4)
    goto LABEL_10;
  v5 = (capabilities::ipc *)strcasecmp(a1, (const char *)*MEMORY[0x24BE04F90]);
  v6 = a1;
  if (!(_DWORD)v5)
    goto LABEL_9;
LABEL_4:
  v7 = (capabilities::ipc *)strcasecmp(v6, "BufferCount");
  if (!(_DWORD)v7 && capabilities::ipc::supportsPCI(v7))
  {
    memset(v20, 0, 15);
    std::to_string(&v18, 4uLL);
LABEL_13:
    v20[0] = v18.__r_.__value_.__l.__size_;
    v10 = v18.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 7);
    v11 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v12 = v20[0];
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v20 + 7);
    *(_BYTE *)(a2 + 23) = v11;
    return 1;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v15 = qword_2579B8A80;
    result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v15 = qword_2579B8A80;
    result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v16 = *MEMORY[0x24BE05920];
  if (a1[23] >= 0)
    v17 = a1;
  else
    v17 = *(char **)a1;
  LODWORD(v18.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v18.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 6) = v16;
  HIWORD(v18.__r_.__value_.__r.__words[2]) = 2080;
  v19 = v17;
  _os_log_error_impl(&dword_24B855000, v15, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v18,
    0x20u);
  return 0;
}

void sub_24B8D2748(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x24B8D25B0);
    JUMPOUT(0x24B8D25B8);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::bbipc::get(char *a1, uint64_t a2)
{
  capabilities::trace *v4;
  capabilities::ipc *v5;
  const char *v6;
  capabilities::ipc *v7;
  unsigned __int8 v8;
  NSObject *v9;
  _BOOL8 result;
  std::string::size_type v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  std::string::size_type v16;
  char v17;
  uint64_t v18;
  std::string v19;
  char *v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  if ((a1[23] & 0x80000000) == 0)
  {
    v4 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x24BE04F88]);
    if ((_DWORD)v4)
    {
      v5 = (capabilities::ipc *)strcasecmp(a1, (const char *)*MEMORY[0x24BE04FD0]);
      v6 = a1;
      if ((_DWORD)v5)
        goto LABEL_4;
      goto LABEL_14;
    }
LABEL_15:
    v14 = capabilities::trace::enabledByDefault(v4);
    v21[0] = 0;
    *(_QWORD *)((char *)v21 + 7) = 0;
    std::to_string(&v19, v14);
    goto LABEL_17;
  }
  v6 = *(const char **)a1;
  v4 = (capabilities::trace *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE04F88]);
  if (!(_DWORD)v4)
    goto LABEL_15;
  v5 = (capabilities::ipc *)strcasecmp(v6, (const char *)*MEMORY[0x24BE04FD0]);
  if (!(_DWORD)v5)
  {
LABEL_14:
    v13 = capabilities::ipc::defaultLogLevel(v5);
    v21[0] = 0;
    *(_QWORD *)((char *)v21 + 7) = 0;
    std::to_string(&v19, v13);
LABEL_17:
    v21[0] = v19.__r_.__value_.__l.__size_;
    v16 = v19.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v19.__r_.__value_.__r.__words[1] + 7);
    v17 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v18 = v21[0];
    *(_QWORD *)a2 = v16;
    *(_QWORD *)(a2 + 8) = v18;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v21 + 7);
    *(_BYTE *)(a2 + 23) = v17;
    return 1;
  }
LABEL_4:
  v7 = (capabilities::ipc *)strcasecmp(v6, (const char *)*MEMORY[0x24BE05138]);
  if (!(_DWORD)v7)
  {
    v15 = capabilities::ipc::defaultMHIConfigPayloadSizeBytes(v7);
    v21[0] = 0;
    *(_QWORD *)((char *)v21 + 7) = 0;
    std::to_string(&v19, v15);
    goto LABEL_17;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v9 = qword_2579B8A80;
    result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v9 = qword_2579B8A80;
    result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v11 = *MEMORY[0x24BE04FE0];
  if (a1[23] >= 0)
    v12 = a1;
  else
    v12 = *(char **)a1;
  LODWORD(v19.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v19.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v19.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v19.__r_.__value_.__r.__words[1] + 6) = v11;
  HIWORD(v19.__r_.__value_.__r.__words[2]) = 2080;
  v20 = v12;
  _os_log_error_impl(&dword_24B855000, v9, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v19,
    0x20u);
  return 0;
}

void sub_24B8D2A04(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x24B8D2944);
    JUMPOUT(0x24B8D294CLL);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::compression::get(char *a1, uint64_t a2)
{
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  _BOOL8 result;
  std::string::size_type v8;
  char *v9;
  uint64_t IsInternalBuild;
  int CompressionMode;
  std::string v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if ((a1[23] & 0x80000000) == 0)
  {
    v4 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x24BDFC970]))
      goto LABEL_3;
LABEL_12:
    IsInternalBuild = TelephonyUtilIsInternalBuild();
    if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
      CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
    else
      CompressionMode = 2;
    std::to_string(&v12, CompressionMode);
    goto LABEL_18;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BDFC970]))
    goto LABEL_12;
LABEL_3:
  if (!strcasecmp(v4, (const char *)*MEMORY[0x24BDFC7F8]))
  {
    std::to_string(&v12, 0);
LABEL_18:
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v12;
    return 1;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_2579B8A80;
    result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v6 = qword_2579B8A80;
    result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v8 = *MEMORY[0x24BE04FE8];
  if (a1[23] >= 0)
    v9 = a1;
  else
    v9 = *(char **)a1;
  LODWORD(v12.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v12.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 6) = v8;
  HIWORD(v12.__r_.__value_.__r.__words[2]) = 2080;
  v13 = v9;
  _os_log_error_impl(&dword_24B855000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v12,
    0x20u);
  return 0;
}

BOOL defaults::ttr::get(char *a1, uint64_t a2)
{
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  _BOOL8 result;
  std::string::size_type v8;
  char *v9;
  int IsCarrierBuild;
  std::string::size_type v11;
  char v12;
  uint64_t v13;
  std::string v14;
  char *v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  if ((a1[23] & 0x80000000) == 0)
  {
    v4 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04E90]))
      goto LABEL_3;
LABEL_12:
    if ((TelephonyUtilIsInternalBuild() & 1) != 0)
      IsCarrierBuild = 1;
    else
      IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    memset(v16, 0, 15);
    std::to_string(&v14, IsCarrierBuild);
    goto LABEL_17;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE04E90]))
    goto LABEL_12;
LABEL_3:
  if (!strcasecmp(v4, (const char *)*MEMORY[0x24BE05568]))
  {
    memset(v16, 0, 15);
    std::to_string(&v14, 43200);
LABEL_17:
    v16[0] = v14.__r_.__value_.__l.__size_;
    v11 = v14.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 7);
    v12 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v13 = v16[0];
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v16 + 7);
    *(_BYTE *)(a2 + 23) = v12;
    return 1;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_2579B8A80;
    result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v6 = qword_2579B8A80;
    result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v8 = *MEMORY[0x24BE04FA0];
  if (a1[23] >= 0)
    v9 = a1;
  else
    v9 = *(char **)a1;
  LODWORD(v14.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v14.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v14.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 6) = v8;
  HIWORD(v14.__r_.__value_.__r.__words[2]) = 2080;
  v15 = v9;
  _os_log_error_impl(&dword_24B855000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v14,
    0x20u);
  return 0;
}

void sub_24B8D2EB0(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x24B8D2DF0);
    JUMPOUT(0x24B8D2DF8);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::logfilter::get(char *a1, uint64_t a2)
{
  const char *v4;
  capabilities::trace *v5;
  unsigned __int8 v6;
  NSObject *v7;
  _BOOL8 result;
  std::string::size_type v9;
  char *v10;
  int v11;
  std::string::size_type v12;
  char v13;
  uint64_t v14;
  std::string v15;
  char *v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x24BE051C0]))
    {
      v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x24BE05338]))
        goto LABEL_4;
      goto LABEL_14;
    }
LABEL_15:
    memset(v17, 0, 15);
    std::to_string(&v15, 512);
    goto LABEL_17;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE051C0]))
    goto LABEL_15;
  if (!strcasecmp(v4, (const char *)*MEMORY[0x24BE05338]))
  {
LABEL_14:
    memset(v17, 0, 15);
    std::to_string(&v15, -1);
LABEL_17:
    v17[0] = v15.__r_.__value_.__l.__size_;
    v12 = v15.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v17 + 7) = *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 7);
    v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v14 = v17[0];
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v14;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v17 + 7);
    *(_BYTE *)(a2 + 23) = v13;
    return 1;
  }
LABEL_4:
  v5 = (capabilities::trace *)strcasecmp(v4, (const char *)*MEMORY[0x24BE05838]);
  if (!(_DWORD)v5)
  {
    v11 = capabilities::trace::supportsDuplicateSignatureDetection(v5);
    memset(v17, 0, 15);
    std::to_string(&v15, v11);
    goto LABEL_17;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v7 = qword_2579B8A80;
    result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v7 = qword_2579B8A80;
    result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v9 = *MEMORY[0x24BE04E38];
  if (a1[23] >= 0)
    v10 = a1;
  else
    v10 = *(char **)a1;
  LODWORD(v15.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v15.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 6) = v9;
  HIWORD(v15.__r_.__value_.__r.__words[2]) = 2080;
  v16 = v10;
  _os_log_error_impl(&dword_24B855000, v7, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v15,
    0x20u);
  return 0;
}

void sub_24B8D315C(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x24B8D309CLL);
    JUMPOUT(0x24B8D30A4);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::systemlogs::get(char *a1, uint64_t a2)
{
  capabilities::abs *v4;
  const char *v5;
  unsigned __int8 v6;
  NSObject *v7;
  _BOOL8 result;
  std::string::size_type v9;
  char *v10;
  int v11;
  int IsCarrierBuild;
  std::string::size_type v13;
  char v14;
  uint64_t v15;
  std::string v16;
  char *v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04E90]))
    {
      v4 = (capabilities::abs *)strcasecmp(a1, (const char *)*MEMORY[0x24BE04F90]);
      v5 = a1;
      if ((_DWORD)v4)
        goto LABEL_4;
LABEL_14:
      v11 = capabilities::abs::defaultSystemLogsHistory(v4);
      v18[0] = 0;
      *(_QWORD *)((char *)v18 + 7) = 0;
      std::to_string(&v16, v11);
LABEL_20:
      v18[0] = v16.__r_.__value_.__l.__size_;
      v13 = v16.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)v18 + 7) = *(std::string::size_type *)((char *)&v16.__r_.__value_.__r.__words[1] + 7);
      v14 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      v15 = v18[0];
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v15;
      *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v18 + 7);
      *(_BYTE *)(a2 + 23) = v14;
      return 1;
    }
LABEL_15:
    if ((TelephonyUtilIsInternalBuild() & 1) != 0)
      IsCarrierBuild = 1;
    else
      IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    *(_QWORD *)((char *)v18 + 7) = 0;
    v18[0] = 0;
    std::to_string(&v16, IsCarrierBuild);
    goto LABEL_20;
  }
  v5 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE04E90]))
    goto LABEL_15;
  v4 = (capabilities::abs *)strcasecmp(v5, (const char *)*MEMORY[0x24BE04F90]);
  if (!(_DWORD)v4)
    goto LABEL_14;
LABEL_4:
  if (!strcasecmp(v5, (const char *)*MEMORY[0x24BE05498]))
  {
    *(_QWORD *)((char *)v18 + 7) = 0;
    v18[0] = 0;
    std::to_string(&v16, 1);
    goto LABEL_20;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v7 = qword_2579B8A80;
    result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v7 = qword_2579B8A80;
    result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v9 = *MEMORY[0x24BE04F98];
  if (a1[23] >= 0)
    v10 = a1;
  else
    v10 = *(char **)a1;
  LODWORD(v16.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v16.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v16.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v16.__r_.__value_.__r.__words[1] + 6) = v9;
  HIWORD(v16.__r_.__value_.__r.__words[2]) = 2080;
  v17 = v10;
  _os_log_error_impl(&dword_24B855000, v7, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v16,
    0x20u);
  return 0;
}

void sub_24B8D3428(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x24B8D3368);
    JUMPOUT(0x24B8D3370);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::profile::get(char *a1, uint64_t a2)
{
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  _BOOL8 result;
  std::string::size_type v8;
  char *v9;
  std::string::size_type v10;
  char v11;
  uint64_t v12;
  std::string v13;
  char *v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (a1[23] < 0)
  {
    v4 = *(const char **)a1;
    if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE04E08]))
      goto LABEL_12;
  }
  else
  {
    v4 = a1;
    if (!strcasecmp(a1, (const char *)*MEMORY[0x24BE04E08]))
    {
LABEL_12:
      memset(v15, 0, 15);
      std::to_string(&v13, 0);
      v15[0] = v13.__r_.__value_.__l.__size_;
      v10 = v13.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 7);
      v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      v12 = v15[0];
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v12;
      *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v15 + 7);
      *(_BYTE *)(a2 + 23) = v11;
      return 1;
    }
  }
  if (!strcasecmp(v4, (const char *)*MEMORY[0x24BE05808]))
    goto LABEL_12;
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_2579B8A80;
    result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v6 = qword_2579B8A80;
    result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v8 = *MEMORY[0x24BE04EB0];
  if (a1[23] >= 0)
    v9 = a1;
  else
    v9 = *(char **)a1;
  LODWORD(v13.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v13.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v13.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 6) = v8;
  HIWORD(v13.__r_.__value_.__r.__words[2]) = 2080;
  v14 = v9;
  _os_log_error_impl(&dword_24B855000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v13,
    0x20u);
  return 0;
}

void sub_24B8D36A0(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x24B8D35E0);
    JUMPOUT(0x24B8D35E8);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::tailspin::get(const char *a1, uint64_t a2)
{
  uint64_t *v3;
  int v4;
  unsigned __int8 v5;
  NSObject *v6;
  std::string::size_type v7;
  uint64_t *v8;
  std::string::size_type v9;
  char v10;
  uint64_t v11;
  std::string v13;
  uint64_t *v14;
  _QWORD v15[3];

  v3 = (uint64_t *)a1;
  v15[2] = *MEMORY[0x24BDAC8D0];
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v4 = strcasecmp(a1, (const char *)*MEMORY[0x24BE04E08]);
  if (v4)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_2579B8A80 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        return v4 == 0;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v6 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        return v4 == 0;
    }
    v7 = *MEMORY[0x24BE04F00];
    if (*((char *)v3 + 23) >= 0)
      v8 = v3;
    else
      v8 = (uint64_t *)*v3;
    LODWORD(v13.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v13.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
    WORD2(v13.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 6) = v7;
    HIWORD(v13.__r_.__value_.__r.__words[2]) = 2080;
    v14 = v8;
    _os_log_error_impl(&dword_24B855000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v13,
      0x20u);
  }
  else
  {
    memset(v15, 0, 15);
    std::to_string(&v13, 0);
    v15[0] = v13.__r_.__value_.__l.__size_;
    v9 = v13.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 7);
    v10 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v11 = v15[0];
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v15 + 7);
    *(_BYTE *)(a2 + 23) = v10;
  }
  return v4 == 0;
}

void sub_24B8D38C0(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x24B8D37FCLL);
    JUMPOUT(0x24B8D3804);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::tracesettings::get(char *a1, std::string *a2)
{
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  _BOOL8 result;
  uint64_t v8;
  char *v9;
  const std::string::value_type *v10;
  const char *v11;
  size_t v12;
  size_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (!strcasecmp(a1, (const char *)*MEMORY[0x24BE053F8]))
    {
LABEL_19:
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        a2->__r_.__value_.__l.__size_ = 1;
        a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&a2->__r_.__value_.__s + 23) = 1;
      }
      LOWORD(a2->__r_.__value_.__l.__data_) = 48;
      return 1;
    }
    if (strcasecmp(a1, (const char *)*MEMORY[0x24BE05488]))
    {
      v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x24BE05140]))
        goto LABEL_5;
LABEL_16:
      if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
        v10 = "1";
      else
        v10 = "3";
      std::string::__assign_external(a2, v10);
      return 1;
    }
LABEL_21:
    v11 = (const char *)abm::helper::asString();
    v12 = strlen(v11);
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v13 = v12;
    if (v12 >= 0x17)
    {
      v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v15 = v12 | 7;
      v16 = v15 + 1;
      v14 = operator new(v15 + 1);
      *(_QWORD *)&v17[8] = v13;
      *(_QWORD *)&v17[16] = v16 | 0x8000000000000000;
      *(_QWORD *)v17 = v14;
    }
    else
    {
      v17[23] = v12;
      v14 = v17;
      if (!v12)
      {
        v17[0] = 0;
        if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_25:
          *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v17;
          a2->__r_.__value_.__r.__words[2] = *(_QWORD *)&v17[16];
          return 1;
        }
LABEL_32:
        operator delete(a2->__r_.__value_.__l.__data_);
        goto LABEL_25;
      }
    }
    memmove(v14, v11, v13);
    v14[v13] = 0;
    if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_32;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE053F8]))
    goto LABEL_19;
  if (!strcasecmp(v4, (const char *)*MEMORY[0x24BE05488]))
    goto LABEL_21;
  if (!strcasecmp(v4, (const char *)*MEMORY[0x24BE05140]))
    goto LABEL_16;
LABEL_5:
  if (!strcasecmp(v4, (const char *)*MEMORY[0x24BE05320]))
    goto LABEL_19;
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_2579B8A80;
    result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v6 = qword_2579B8A80;
    result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v8 = *MEMORY[0x24BE04EF8];
  if (a1[23] >= 0)
    v9 = a1;
  else
    v9 = *(char **)a1;
  *(_DWORD *)v17 = 136315650;
  *(_QWORD *)&v17[4] = "prop.default";
  *(_WORD *)&v17[12] = 2080;
  *(_QWORD *)&v17[14] = v8;
  *(_WORD *)&v17[22] = 2080;
  v18 = v9;
  _os_log_error_impl(&dword_24B855000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'", v17, 0x20u);
  return 0;
}

double util::to_str<BOOL>(std::string *a1, int __val)
{
  double result;
  std::string v4;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, __val);
  result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a1 = v4;
  return result;
}

void sub_24B8D3C7C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x24B8D3C6CLL);
}

void sub_24B8D3C88(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::mode(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::history(defaults::bbtrace *this)
{
  return capabilities::trace::defaultHistorySizeMB(this);
}

double util::to_str<diag::config::DuringAPSleep>(std::string *a1)
{
  double result;
  std::string v3;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v3, 0);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_24B8D3D14(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x24B8D3D04);
}

void sub_24B8D3D20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::enabled_during_sleep(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::buffering_on_ap_wake(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::stall_detection(defaults::bbtrace *this)
{
  return 0;
}

double util::to_str<unsigned int>(std::string *a1, unsigned int __val)
{
  double result;
  std::string v4;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, __val);
  result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a1 = v4;
  return result;
}

void sub_24B8D3D9C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x24B8D3D8CLL);
}

void sub_24B8D3DA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::stall_retries(defaults::bbtrace *this)
{
  return 3;
}

double util::to_str<diag::config::Recovery>(std::string *a1)
{
  double result;
  std::string v3;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v3, 0);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_24B8D3E14(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x24B8D3E04);
}

void sub_24B8D3E20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::stall_recovery(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::keep_scratch_logs(defaults::bbtrace *this)
{
  return 0;
}

const char *defaults::bbtrace::primary_dmc(defaults::bbtrace *this)
{
  if (config::hw::watch(this))
    return "Lite";
  else
    return "Default";
}

const char *defaults::bbtrace::secondary_dmc(defaults::bbtrace *this)
{
  config::hw *v1;

  v1 = (config::hw *)capabilities::radio::ice(this);
  if (!(_DWORD)v1)
    return "None";
  if (config::hw::watch(v1))
    return "Lite";
  return "Default";
}

const char *defaults::bbtrace::extra_dmc(defaults::bbtrace *this)
{
  return "None";
}

const char *defaults::bbtrace::sleep_dmc(defaults::bbtrace *this)
{
  return "Sleep";
}

uint64_t defaults::bbtrace::max_memory_file_count(defaults::bbtrace *this)
{
  return capabilities::trace::defaultMemoryFileMaxCount(this);
}

uint64_t defaults::bbtrace::carrier_logging_allowed(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::file_size(defaults::bbtrace *this)
{
  return capabilities::trace::defaultFileSizeBytes(this);
}

uint64_t defaults::bbtrace::transport_read_size(defaults::bbtrace *this)
{
  capabilities::abs *v1;

  v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v1))
    return 0x4000;
  else
    return 0x8000;
}

uint64_t defaults::bbtrace::transport_read_count(defaults::bbtrace *this)
{
  capabilities::abs *v1;
  int v2;
  char shouldUseMinBasebandTransportIOReadCount;
  int v4;
  int v5;
  unsigned int v6;

  v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if (((_DWORD)v1 - 1) > 2)
    v2 = 23;
  else
    v2 = dword_24B953B5C[(int)v1 - 1];
  shouldUseMinBasebandTransportIOReadCount = capabilities::abs::shouldUseMinBasebandTransportIOReadCount(v1);
  if (v2 == 15)
    v4 = 36;
  else
    v4 = 4;
  if (v2 == 16)
    v5 = 36;
  else
    v5 = v4;
  if (v2 == 2)
    v6 = 16;
  else
    v6 = v5;
  if ((shouldUseMinBasebandTransportIOReadCount & 1) != 0)
    return 4;
  else
    return v6;
}

uint64_t defaults::bbtrace::privacyLevel(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::error_handling(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::live_filter(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::high_water_mark(defaults::bbtrace *this)
{
  if (capabilities::radio::ice(this))
    return 80;
  else
    return 0xFFFFFFFFLL;
}

uint64_t defaults::bbtrace::low_water_mark(defaults::bbtrace *this)
{
  if (capabilities::radio::ice(this))
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t defaults::bbtrace::min_file_size(defaults::bbtrace *this)
{
  capabilities::abs *v1;

  v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v1))
    return 0x4000;
  else
    return 0x8000;
}

capabilities::trace *defaults::ipc::enabled(defaults::ipc *this)
{
  capabilities::trace *result;

  result = (capabilities::trace *)capabilities::ipc::supportsPCI(this);
  if ((_DWORD)result)
    return (capabilities::trace *)capabilities::trace::enabledByDefault(result);
  return result;
}

uint64_t defaults::ipc::history(defaults::ipc *this)
{
  return capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(this);
}

uint64_t defaults::ipc::buffer_count(defaults::ipc *this)
{
  return 4;
}

uint64_t defaults::bbipc::mhiConfigPayloadSize(defaults::bbipc *this)
{
  return capabilities::ipc::defaultMHIConfigPayloadSizeBytes(this);
}

uint64_t defaults::logfilter::free_space_limit(defaults::logfilter *this)
{
  return 512;
}

uint64_t defaults::logfilter::max_log_limit(defaults::logfilter *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t defaults::helper::supported(defaults::helper *this)
{
  return 1;
}

uint64_t defaults::compression::mode(defaults::compression *this)
{
  uint64_t IsInternalBuild;

  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0)
    return capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  IsInternalBuild = TelephonyUtilIsCarrierBuild();
  if ((_DWORD)IsInternalBuild)
    return capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  else
    return 2;
}

uint64_t defaults::compression::splitArchive(defaults::compression *this)
{
  return 0;
}

uint64_t defaults::compression::supported(defaults::compression *this)
{
  return 1;
}

uint64_t defaults::ttr::mode(defaults::ttr *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  else
    return TelephonyUtilIsCarrierBuild();
}

uint64_t defaults::ttr::agelimit(defaults::ttr *this)
{
  return 43200;
}

uint64_t defaults::ttr::supported(defaults::ttr *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  else
    return TelephonyUtilIsCarrierBuild();
}

uint64_t defaults::systemlogs::mode(defaults::systemlogs *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  else
    return TelephonyUtilIsCarrierBuild();
}

uint64_t defaults::systemlogs::history(defaults::systemlogs *this)
{
  return capabilities::abs::defaultSystemLogsHistory(this);
}

uint64_t defaults::systemlogs::userConfirmationRequired(defaults::systemlogs *this)
{
  return 1;
}

uint64_t defaults::systemlogs::supported(defaults::systemlogs *this)
{
  return 1;
}

uint64_t defaults::profile::enabled(defaults::profile *this)
{
  return 0;
}

uint64_t defaults::profile::version(defaults::profile *this)
{
  return 0;
}

uint64_t defaults::tailspin::enabled(defaults::tailspin *this)
{
  return 0;
}

unint64_t defaults::tracesettings::config@<X0>(_QWORD *a1@<X8>)
{
  const char *v3;
  unint64_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)abm::helper::asString();
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a1[1] = v5;
    a1[2] = v7 | 0x8000000000000000;
    *a1 = v8;
    a1 = v8;
  }
  else
  {
    *((_BYTE *)a1 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a1 = 0;
      return result;
    }
  }
  result = (unint64_t)memmove(a1, v3, v5);
  *((_BYTE *)a1 + v5) = 0;
  return result;
}

void DataStallDetection::create(capabilities::abs *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  if (capabilities::abs::supportsRadioHealth(a1))
  {
    v4 = operator new(0xA0uLL);
    v5 = (uint64_t)v4;
    v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    v12 = *(_QWORD *)a1;
    v13 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    DataStallDetection::DataStallDetection((uint64_t)v4, &v12);
    *a2 = 0xAAAAAAAAAAAAAAAALL;
    a2[1] = 0xAAAAAAAAAAAAAAAALL;
    std::shared_ptr<DataStallDetection>::shared_ptr[abi:ne180100]<DataStallDetection,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1},void>(a2, v5);
    ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2);
    v9 = v13;
    if (v13)
    {
      v10 = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_24B8D43C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_24B8D43E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_24B8D43F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t DataStallDetection::DataStallDetection(uint64_t a1, _QWORD *a2)
{
  NSObject *initially_inactive;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v47;
  _BYTE v48[16];
  _QWORD v49[2];
  __int128 v50;

  *(_QWORD *)a1 = off_251CBD2D8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v48, "com.apple.telephony.abm", "net.stall");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v5 = dispatch_queue_create_with_target_V2("net.stall", initially_inactive, 0);
  dispatch_set_qos_class_floor(v5, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v5);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v5;
  if (v5)
  {
    dispatch_retain(v5);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v5);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_251CBD468;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v50);
  *(_QWORD *)(a1 + 8) = &unk_251CB85F0;
  *(_QWORD *)(a1 + 56) = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 64) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v49);
  *(_QWORD *)a1 = off_251CBD4F8;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v48);
  *(_QWORD *)a1 = off_251CBD2D8;
  *(_QWORD *)(a1 + 104) = *a2;
  v9 = a2[1];
  *(_QWORD *)(a1 + 112) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v12 = off_2579B8480;
  if (!off_2579B8480)
  {
    ABMServer::create_default_global(&v50);
    v13 = v50;
    v50 = 0uLL;
    v14 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
    off_2579B8480 = v13;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v12 = off_2579B8480;
  }
  v20 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
  if (*(&off_2579B8480 + 1))
  {
    v21 = (unint64_t *)(*(&off_2579B8480 + 1) + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v23 = *(_QWORD *)(*(_QWORD *)v12 + 208);
  if (v20)
  {
    v24 = (unint64_t *)&v20->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  *(_QWORD *)(a1 + 120) = v23;
  v26 = _Block_copy(&__block_literal_global_2);
  v27 = *(_QWORD *)(a1 + 88);
  if (v27)
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  *(_QWORD *)(a1 + 128) = v26;
  *(_QWORD *)(a1 + 136) = v27;
  v28 = (std::__shared_weak_count *)a2[1];
  v47 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v31 = off_2579B8480;
  if (!off_2579B8480)
  {
    ABMServer::create_default_global(&v50);
    v32 = v50;
    v50 = 0uLL;
    v33 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
    off_2579B8480 = v32;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v31 = off_2579B8480;
  }
  v39 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
  v49[0] = v31;
  v49[1] = *(&off_2579B8480 + 1);
  if (*(&off_2579B8480 + 1))
  {
    v40 = (unint64_t *)(*(&off_2579B8480 + 1) + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::iokit::Controller::create();
  if (v39)
  {
    v42 = (unint64_t *)&v39->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v47)
  {
    v44 = (unint64_t *)&v47->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  return a1;
}

void sub_24B8D482C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;

  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  dispatch::callback<void({block_pointer})(std::string)>::~callback((uint64_t)(v9 + 16));
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v10);
  ctu::SharedLoggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v9);
  _Unwind_Resume(a1);
}

void sub_24B8D48C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

const char *DataStallDetection::getName(DataStallDetection *this)
{
  return "net.stall";
}

uint64_t dispatch::callback<void({block_pointer})(std::string)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

_QWORD *ctu::SharedLoggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBD468;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBD468;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void DataStallDetection::~DataStallDetection(DataStallDetection *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  __CFRunLoop *v5;
  NSObject *v6;
  NSObject *v7;
  __CFRunLoop *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  _QWORD block[4];
  dispatch_group_t group;

  *(_QWORD *)this = off_251CBD2D8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (__CFRunLoop *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_19;
  }
  else
  {
LABEL_5:
    v5 = (__CFRunLoop *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_19;
  }
  if (CFRunLoopIsWaiting(v5))
  {
    v6 = dispatch_group_create();
    v7 = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v7);
    }
    v8 = (__CFRunLoop *)*((_QWORD *)this + 15);
    v9 = (const void *)*MEMORY[0x24BDBD5A0];
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN18DataStallDetectionD2Ev_block_invoke;
    block[3] = &__block_descriptor_tmp_3_0;
    group = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(v7);
    }
    CFRunLoopPerformBlock(v8, v9, block);
    CFRunLoopWakeUp(*((CFRunLoopRef *)this + 15));
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    if (v7)
    {
      dispatch_group_leave(v7);
      dispatch_release(v7);
      dispatch_group_wait(v7, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v7);
    }
    else
    {
      dispatch_group_wait(0, 0xFFFFFFFFFFFFFFFFLL);
    }
  }
LABEL_19:
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *((_QWORD *)this + 17);
  if (v13)
    dispatch_release(v13);
  v14 = (const void *)*((_QWORD *)this + 16);
  if (v14)
    _Block_release(v14);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)this = off_251CBD468;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v18 = *((_QWORD *)this + 12);
  if (v18)
    dispatch_release(v18);
  v19 = *((_QWORD *)this + 11);
  if (v19)
    dispatch_release(v19);
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
}

{
  void *v1;

  DataStallDetection::~DataStallDetection(this);
  operator delete(v1);
}

void DataStallDetection::start(DataStallDetection *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::string *v30;
  std::string *v31;
  void *v32;
  _QWORD v33[5];
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36[2];
  NetworkStatsInterface *v37;
  unint64_t v38;
  void *v39;
  std::string *v40;
  unint64_t v41;
  _QWORD *v42;
  uint8_t buf[16];
  _BYTE v44[32];

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v4 = v3;
  p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
  do
    v6 = __ldxr(p_shared_weak_owners);
  while (__stxr(v6 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v9 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v9, OS_LOG_TYPE_DEFAULT, "#I Start", buf, 2u);
  }
  v37 = (NetworkStatsInterface *)0xAAAAAAAAAAAAAAAALL;
  v38 = 0xAAAAAAAAAAAAAAAALL;
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  v36[0] = *((_QWORD *)this + 13);
  v36[1] = (uint64_t)v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  NetworkStatsInterface::create(v36, (uint64_t *)&v37);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v34 = (_QWORD *)0xAAAAAAAAAAAAAAAALL;
  v35 = 0xAAAAAAAAAAAAAAAALL;
  NetworkStatsInterface::query(v37, &v34);
  v15 = v34 + 1;
  v16 = (_QWORD *)*v34;
  if ((_QWORD *)*v34 != v34 + 1)
  {
    do
    {
      *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)buf = v17;
      *(_OWORD *)v44 = v17;
      *(_OWORD *)&v44[16] = v17;
      *(_DWORD *)buf = *((_DWORD *)v16 + 8);
      v44[0] = *((_BYTE *)v16 + 48);
      *(_QWORD *)&buf[8] = v16[5];
      if (*((char *)v16 + 79) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v44[8], (const std::string::value_type *)v16[7], v16[8]);
      }
      else
      {
        *(_OWORD *)&v44[8] = *(_OWORD *)(v16 + 7);
        *(_QWORD *)&v44[24] = v16[9];
      }
      v18 = v40;
      if ((unint64_t)v40 >= v41)
      {
        v40 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v39, (uint64_t)&v44[8]);
        if ((v44[31] & 0x80000000) == 0)
          goto LABEL_30;
      }
      else if ((v44[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v40, *(const std::string::value_type **)&v44[8], *(std::string::size_type *)&v44[16]);
        v40 = v18 + 1;
        if ((v44[31] & 0x80000000) == 0)
        {
LABEL_30:
          v20 = (_QWORD *)v16[1];
          if (!v20)
            goto LABEL_36;
          goto LABEL_34;
        }
      }
      else
      {
        v19 = *(_OWORD *)&v44[8];
        v40->__r_.__value_.__r.__words[2] = *(_QWORD *)&v44[24];
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        v40 = v18 + 1;
        if ((v44[31] & 0x80000000) == 0)
          goto LABEL_30;
      }
      operator delete(*(void **)&v44[8]);
      v20 = (_QWORD *)v16[1];
      if (!v20)
      {
        do
        {
LABEL_36:
          v21 = (_QWORD *)v16[2];
          v22 = *v21 == (_QWORD)v16;
          v16 = v21;
        }
        while (!v22);
        goto LABEL_21;
      }
      do
      {
LABEL_34:
        v21 = v20;
        v20 = (_QWORD *)*v20;
      }
      while (v20);
LABEL_21:
      v16 = v21;
    }
    while (v21 != v15);
  }
  v33[0] = MEMORY[0x24BDAC760];
  v33[1] = 0x40000000;
  v33[2] = ___ZN18DataStallDetection5startEv_block_invoke;
  v33[3] = &__block_descriptor_tmp_5_4;
  v33[4] = this;
  v42 = v33;
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)v44 = ___ZNK3ctu20SharedSynchronizableI18DataStallDetectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  *(_QWORD *)&v44[8] = &__block_descriptor_tmp_9_2;
  *(_QWORD *)&v44[16] = (char *)this + 72;
  *(_QWORD *)&v44[24] = &v42;
  v23 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12))
  {
    dispatch_async_and_wait(v23, buf);
    v24 = (std::__shared_weak_count *)v35;
    if (!v35)
      goto LABEL_47;
  }
  else
  {
    dispatch_sync(v23, buf);
    v24 = (std::__shared_weak_count *)v35;
    if (!v35)
      goto LABEL_47;
  }
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_47:
  v27 = (std::__shared_weak_count *)v38;
  if (v38)
  {
    v28 = (unint64_t *)(v38 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::string *)v39;
  if (v39)
  {
    v31 = v40;
    v32 = v39;
    if (v40 != v39)
    {
      do
      {
        if (SHIBYTE(v31[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31[-1].__r_.__value_.__l.__data_);
        --v31;
      }
      while (v31 != v30);
      v32 = v39;
    }
    v40 = v30;
    operator delete(v32);
  }
  std::__shared_weak_count::__release_weak(v4);
}

void sub_24B8D4FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::__shared_weak_count *v33;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::vector<std::string>::~vector[abi:ne180100](&a21);
  std::__shared_weak_count::__release_weak(v33);
  _Unwind_Resume(a1);
}

void ___ZN18DataStallDetection5startEv_block_invoke(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_24B855000, v1, OS_LOG_TYPE_DEFAULT, "#I Started", v2, 2u);
  }
}

void DataStallDetection::setCallback(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1174405120;
  v7[2] = ___ZN18DataStallDetection11setCallbackEN8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_6_3;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<DataStallDetection>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN18DataStallDetection11setCallbackEN8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1)
{
  _QWORD *v2;
  NSObject *v3;
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;
  uint8_t v8[16];

  v2 = (_QWORD *)a1[4];
  v3 = v2[5];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I setCallback", v8, 2u);
  }
  v4 = (void *)a1[5];
  if (v4)
    v4 = _Block_copy(v4);
  v5 = (const void *)v2[16];
  v2[16] = v4;
  if (v5)
    _Block_release(v5);
  v6 = a1[6];
  if (v6)
    dispatch_retain(v6);
  v7 = v2[17];
  v2[17] = v6;
  if (v7)
    dispatch_release(v7);
}

void __copy_helper_block_e8_40c109_ZTSN8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c109_ZTSN8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

uint64_t ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "net.stall");
}

uint64_t ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBD468;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBD468;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_24B8D53FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_24B8D5418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<DataStallDetection>::shared_ptr[abi:ne180100]<DataStallDetection,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_251CBD4A8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_24B8D5534(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1}::operator() const(DataStallDetection*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_24B8D5554(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<DataStallDetection *,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection *)#1},std::allocator<DataStallDetection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<DataStallDetection *,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection *)#1},std::allocator<DataStallDetection>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1}::operator() const(DataStallDetection*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<DataStallDetection *,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection *)#1},std::allocator<DataStallDetection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI18DataStallDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI18DataStallDetectionE15make_shared_ptrIS1_EENSt3__110shared"
                                "_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI18DataStallDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI18DataStallDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1}::operator() const(DataStallDetection*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBD468;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ctu::SharedSynchronizable<DataStallDetection>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI18DataStallDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_251CBD550;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI18DataStallDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIK18DataStallDetectionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIK18DataStallDetectionEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t __cxx_global_var_init_6()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_24B855000);
  }
  return result;
}

_QWORD *ABMServerRegistryBuilder::create@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  *result = off_251CBD590;
  v6 = *a1;
  v5 = a1[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  result[3] = v6;
  result[4] = v5;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

__n128 ABMServerRegistryBuilder::ABMServerRegistryBuilder(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

void ABMServerRegistryBuilder::~ABMServerRegistryBuilder(ABMServerRegistryBuilder *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ABMServerRegistryBuilder::setupQMIServer(uint64_t a1, Registry **a2, uint64_t *a3)
{
  _QWORD **RegistryModel;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;

  RegistryModel = (_QWORD **)Registry::getRegistryModel(*a2);
  v6 = *RegistryModel;
  if (!**RegistryModel)
  {
    v7 = *a3;
    if (*a3)
    {
      v8 = a3[1];
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = (std::__shared_weak_count *)v6[1];
      *v6 = v7;
      v6[1] = v8;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    else
    {
      (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a1 + 8))(&v21);
      v14 = v21;
      v21 = 0uLL;
      v15 = (std::__shared_weak_count *)v6[1];
      *(_OWORD *)v6 = v14;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }
}

void ABMServerRegistryBuilder::setupRouterServer(uint64_t a1, Registry **a2, uint64_t *a3)
{
  uint64_t RegistryModel;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;

  RegistryModel = Registry::getRegistryModel(*a2);
  v6 = *(_QWORD *)RegistryModel;
  if (!*(_QWORD *)(*(_QWORD *)RegistryModel + 16))
  {
    v7 = *a3;
    if (*a3)
    {
      v8 = a3[1];
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = *(std::__shared_weak_count **)(v6 + 24);
      *(_QWORD *)(v6 + 16) = v7;
      *(_QWORD *)(v6 + 24) = v8;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    else
    {
      (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a1 + 16))(&v21);
      v14 = v21;
      v21 = 0uLL;
      v15 = *(std::__shared_weak_count **)(v6 + 24);
      *(_OWORD *)(v6 + 16) = v14;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }
}

void std::__shared_ptr_emplace<ABMServerRegistryBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_251CBD590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ABMServerRegistryBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_251CBD590;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<ABMServerRegistryBuilder>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t support::fs::toString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if ((_DWORD)result == 1)
  {
    a2[23] = 9;
    strcpy(a2, "_wireless");
  }
  else if ((_DWORD)result)
  {
    a2[23] = 0;
    *a2 = 0;
  }
  else
  {
    a2[23] = 6;
    strcpy(a2, "mobile");
  }
  return result;
}

uint64_t support::fs::updateOwner(const char *a1, uint64_t a2, uint64_t a3)
{
  const char *v5;
  timespec v6;
  size_t v7;
  __darwin_ino64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  stat *v14;
  uint64_t updated;
  void *v16;
  const char *v17;
  DIR *v18;
  DIR *v19;
  dirent *v20;
  char *v21;
  const std::string::value_type **v22;
  char v23;
  __int128 v24;
  int v25;
  size_t v26;
  unint64_t v27;
  char *p_dst;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  std::string *v32;
  std::string::size_type size;
  std::string *v34;
  __int128 v35;
  std::string::size_type v36;
  std::string *v37;
  std::string *v38;
  timespec v39;
  std::string *v40;
  std::string *p_p;
  size_t v42;
  __darwin_ino64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  int st_gid_high;
  void *v48;
  stat *v49;
  void *v50;
  std::string *v51;
  DIR *v52;
  DIR *v53;
  dirent *v54;
  void **v55;
  char *v57;
  std::string v58;
  std::string __p;
  std::string v60;
  void *v61;
  char *v62;
  uint64_t v63;
  stat __dst;

  v5 = a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blksize = v6;
  *(timespec *)__dst.st_qspare = v6;
  __dst.st_birthtimespec = v6;
  *(timespec *)&__dst.st_size = v6;
  __dst.st_mtimespec = v6;
  __dst.st_ctimespec = v6;
  *(timespec *)&__dst.st_uid = v6;
  __dst.st_atimespec = v6;
  *(timespec *)&__dst.st_dev = v6;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (!stat(a1, &__dst))
  {
    v17 = v5[23] >= 0 ? v5 : *(const char **)v5;
    v18 = opendir(v17);
    if (v18)
    {
      v19 = v18;
      v20 = readdir(v18);
      closedir(v19);
      if (v20)
      {
        v61 = 0;
        v62 = 0;
        v63 = 0;
        support::fs::readDir(v5, (uint64_t)&v61);
        v21 = (char *)v61;
        v57 = v62;
        if (v61 == v62)
        {
          updated = 0;
          if (v61)
            goto LABEL_105;
          return updated;
        }
        v22 = (const std::string::value_type **)((char *)v61 + 24);
        while (1)
        {
          memset(&v60, 170, sizeof(v60));
          if (*((char *)v22 - 1) < 0)
          {
            std::string::__init_copy_ctor_external(&v60, *(v22 - 3), (std::string::size_type)*(v22 - 2));
          }
          else
          {
            v24 = *(_OWORD *)(v22 - 3);
            v60.__r_.__value_.__r.__words[2] = (std::string::size_type)*(v22 - 1);
            *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v24;
          }
          memset(&__p, 170, sizeof(__p));
          v25 = v5[23];
          if (v25 >= 0)
            v26 = *((unsigned __int8 *)v5 + 23);
          else
            v26 = *((_QWORD *)v5 + 1);
          v27 = v26 + 1;
          memset(&__dst, 170, 24);
          if (v26 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v27 >= 0x17)
          {
            v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17)
              v29 = v27 | 7;
            v30 = v29 + 1;
            p_dst = (char *)operator new(v29 + 1);
            __dst.st_ino = v26 + 1;
            *(_QWORD *)&__dst.st_uid = v30 | 0x8000000000000000;
            *(_QWORD *)&__dst.st_dev = p_dst;
          }
          else
          {
            memset(&__dst, 0, 24);
            p_dst = (char *)&__dst;
            HIBYTE(__dst.st_gid) = v26 + 1;
            if (!v26)
              goto LABEL_47;
          }
          if (v25 >= 0)
            v31 = v5;
          else
            v31 = *(const char **)v5;
          memmove(p_dst, v31, v26);
LABEL_47:
          *(_WORD *)&p_dst[v26] = 47;
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v32 = &v60;
          else
            v32 = (std::string *)v60.__r_.__value_.__r.__words[0];
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          else
            size = v60.__r_.__value_.__l.__size_;
          v34 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v32, size);
          v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.st_gid) < 0)
            operator delete(*(void **)&__dst.st_dev);
          v36 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v36 = v60.__r_.__value_.__l.__size_;
          if (v36 == 2)
          {
            v38 = &v60;
            if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v38 = (std::string *)v60.__r_.__value_.__r.__words[0];
            if (LOWORD(v38->__r_.__value_.__l.__data_) == 11822)
            {
LABEL_70:
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_p = &__p;
              else
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              v42 = strlen((const char *)p_p);
              if (v42 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              v43 = v42;
              if (v42 >= 0x17)
              {
                v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v42 | 7) != 0x17)
                  v45 = v42 | 7;
                v46 = v45 + 1;
                v44 = operator new(v45 + 1);
                __dst.st_ino = v43;
                *(_QWORD *)&__dst.st_uid = v46 | 0x8000000000000000;
                *(_QWORD *)&__dst.st_dev = v44;
              }
              else
              {
                HIBYTE(__dst.st_gid) = v42;
                v44 = &__dst;
                if (!v42)
                {
LABEL_81:
                  v44[v43] = 0;
                  st_gid_high = SHIBYTE(__dst.st_gid);
                  v48 = *(void **)&__dst.st_dev;
                  if ((__dst.st_gid & 0x80000000) == 0)
                    v49 = &__dst;
                  else
                    v49 = *(stat **)&__dst.st_dev;
                  updated = chown((const char *)v49, a2, a3) == 0;
                  if (st_gid_high < 0)
                  {
                    v50 = v48;
LABEL_86:
                    operator delete(v50);
                    goto LABEL_87;
                  }
                  goto LABEL_87;
                }
              }
              memmove(v44, p_p, v43);
              goto LABEL_81;
            }
          }
          else if (v36 == 1)
          {
            v37 = &v60;
            if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v37 = (std::string *)v60.__r_.__value_.__r.__words[0];
            if (v37->__r_.__value_.__s.__data_[0] == 46)
              goto LABEL_70;
          }
          v39.tv_sec = 0xAAAAAAAAAAAAAAAALL;
          v39.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
          *(timespec *)&__dst.st_blksize = v39;
          *(timespec *)__dst.st_qspare = v39;
          __dst.st_birthtimespec = v39;
          *(timespec *)&__dst.st_size = v39;
          __dst.st_mtimespec = v39;
          __dst.st_ctimespec = v39;
          *(timespec *)&__dst.st_uid = v39;
          __dst.st_atimespec = v39;
          *(timespec *)&__dst.st_dev = v39;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = &__p;
          else
            v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (stat((const char *)v40, &__dst))
            goto LABEL_70;
          v51 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          v52 = opendir((const char *)v51);
          v53 = v52;
          if (!v52)
            goto LABEL_70;
          v54 = readdir(v52);
          closedir(v53);
          if (!v54)
            goto LABEL_70;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v58, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          else
            v58 = __p;
          updated = support::fs::updateOwner(&v58, a2, a3);
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          {
            v50 = (void *)v58.__r_.__value_.__r.__words[0];
            goto LABEL_86;
          }
LABEL_87:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
LABEL_91:
              operator delete(v60.__r_.__value_.__l.__data_);
          }
          else if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_91;
          }
          if (v22 == (const std::string::value_type **)v57)
            v23 = 0;
          else
            v23 = updated;
          v22 += 3;
          if ((v23 & 1) == 0)
          {
            v21 = (char *)v61;
            if (!v61)
              return updated;
LABEL_105:
            v55 = (void **)v62;
            v16 = v21;
            if (v62 != v21)
            {
              do
              {
                if (*((char *)v55 - 1) < 0)
                  operator delete(*(v55 - 3));
                v55 -= 3;
              }
              while (v55 != (void **)v21);
              v16 = v61;
            }
            v62 = v21;
LABEL_112:
            operator delete(v16);
            return updated;
          }
        }
      }
    }
  }
  if (v5[23] < 0)
    v5 = *(const char **)v5;
  v7 = strlen(v5);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    __dst.st_ino = v8;
    *(_QWORD *)&__dst.st_uid = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst.st_dev = v9;
    goto LABEL_13;
  }
  HIBYTE(__dst.st_gid) = v7;
  v9 = &__dst;
  if (v7)
LABEL_13:
    memmove(v9, v5, v8);
  *((_BYTE *)v9 + v8) = 0;
  v12 = SHIBYTE(__dst.st_gid);
  v13 = *(void **)&__dst.st_dev;
  if ((__dst.st_gid & 0x80000000) == 0)
    v14 = &__dst;
  else
    v14 = *(stat **)&__dst.st_dev;
  updated = chown((const char *)v14, a2, a3) == 0;
  if (v12 < 0)
  {
    v16 = v13;
    goto LABEL_112;
  }
  return updated;
}

void sub_24B8D6300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31)
{
  std::vector<std::string>::~vector[abi:ne180100](&a31);
  _Unwind_Resume(a1);
}

void sub_24B8D6330()
{
  JUMPOUT(0x24B8D6360);
}

DIR *support::fs::isDir(const char *a1)
{
  const char *v1;
  timespec v2;
  DIR *result;
  const char *v4;
  DIR *v5;
  dirent *v6;
  stat v7;

  v1 = a1;
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v7.st_blksize = v2;
  *(timespec *)v7.st_qspare = v2;
  v7.st_birthtimespec = v2;
  *(timespec *)&v7.st_size = v2;
  v7.st_mtimespec = v2;
  v7.st_ctimespec = v2;
  *(timespec *)&v7.st_uid = v2;
  v7.st_atimespec = v2;
  *(timespec *)&v7.st_dev = v2;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (stat(a1, &v7))
    return 0;
  if (v1[23] >= 0)
    v4 = v1;
  else
    v4 = *(const char **)v1;
  result = opendir(v4);
  if (result)
  {
    v5 = result;
    v6 = readdir(result);
    closedir(v5);
    return (DIR *)(v6 != 0);
  }
  return result;
}

BOOL support::fs::chown(const char *a1, uid_t a2, gid_t a3)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return chown(a1, a2, a3) == 0;
}

DIR *support::fs::readDir(const char *a1, uint64_t a2)
{
  DIR *result;
  DIR *v4;
  dirent *v5;
  dirent *v6;
  size_t d_namlen;
  _BYTE *v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  _BYTE __dst[24];

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  result = opendir(a1);
  if (result)
  {
    v4 = result;
    v5 = readdir(result);
    if (v5)
    {
      v6 = v5;
      do
      {
        memset(__dst, 170, sizeof(__dst));
        d_namlen = v6->d_namlen;
        if (d_namlen >= 0x17)
        {
          if ((d_namlen | 7) == 0x17)
            v11 = ((unsigned __int16)d_namlen & 0xFFF8) + 8;
          else
            v11 = d_namlen | 7;
          v8 = operator new(v11 + 1);
          *(_QWORD *)&__dst[8] = d_namlen;
          *(_QWORD *)&__dst[16] = v11 - 0x7FFFFFFFFFFFFFFFLL;
          *(_QWORD *)__dst = v8;
        }
        else
        {
          __dst[23] = v6->d_namlen;
          v8 = __dst;
          if (!(_DWORD)d_namlen)
          {
            __dst[d_namlen] = 0;
            v9 = *(std::string **)(a2 + 8);
            if ((unint64_t)v9 < *(_QWORD *)(a2 + 16))
              goto LABEL_10;
            goto LABEL_17;
          }
        }
        memmove(v8, v6->d_name, d_namlen);
        v8[d_namlen] = 0;
        v9 = *(std::string **)(a2 + 8);
        if ((unint64_t)v9 < *(_QWORD *)(a2 + 16))
        {
LABEL_10:
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
          }
          else
          {
            v10 = *(_OWORD *)__dst;
            v9->__r_.__value_.__r.__words[2] = *(_QWORD *)&__dst[16];
            *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
          }
          *(_QWORD *)(a2 + 8) = v9 + 1;
          *(_QWORD *)(a2 + 8) = v9 + 1;
          if ((__dst[23] & 0x80000000) == 0)
            goto LABEL_6;
LABEL_21:
          operator delete(*(void **)__dst);
          goto LABEL_6;
        }
LABEL_17:
        *(_QWORD *)(a2 + 8) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)__dst);
        if ((__dst[23] & 0x80000000) != 0)
          goto LABEL_21;
LABEL_6:
        v6 = readdir(v4);
      }
      while (v6);
    }
    return (DIR *)closedir(v4);
  }
  return result;
}

void sub_24B8D65C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 8) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t support::fs::getUidGid(int a1, uid_t *a2, gid_t *a3)
{
  passwd *v5;
  unsigned __int8 v7;
  NSObject *v8;
  void *__p[3];
  uint8_t buf[4];
  void **v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  memset(__p, 170, sizeof(__p));
  if (a1 == 1)
  {
    HIBYTE(__p[2]) = 9;
    strcpy((char *)__p, "_wireless");
    v5 = getpwnam((const char *)__p);
    if (v5)
      goto LABEL_4;
    goto LABEL_6;
  }
  if (!a1)
  {
    HIBYTE(__p[2]) = 6;
    strcpy((char *)__p, "mobile");
    v5 = getpwnam((const char *)__p);
    if (v5)
    {
LABEL_4:
      *a2 = v5->pw_uid;
      *a3 = v5->pw_gid;
      return 1;
    }
LABEL_6:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_2579B8A80 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v8 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        return 0;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v8 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        return 0;
    }
    *(_DWORD *)buf = 136315138;
    v11 = __p;
    _os_log_error_impl(&dword_24B855000, v8, OS_LOG_TYPE_ERROR, "Getting uid and gid: failed to get passwd for %s", buf, 0xCu);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
  return 0;
}

BOOL support::fs::writeToCompletion(support::fs *this, char *__buf, size_t __nbyte)
{
  int v4;
  size_t v5;
  ssize_t v6;

  v4 = (int)this;
  do
  {
    v5 = __nbyte;
    if (!__nbyte)
      break;
    v6 = write(v4, __buf, __nbyte);
    __nbyte = v5 - v6;
    __buf += v6;
  }
  while ((v6 & 0x8000000000000000) == 0);
  return v5 == 0;
}

BOOL support::fs::writeToCompletion(FILE *__stream, __sFILE *__ptr, size_t __nitems)
{
  size_t v5;
  size_t v6;

  while (1)
  {
    v5 = __nitems;
    if (!__nitems)
      break;
    v6 = fwrite(__ptr, 1uLL, __nitems, __stream);
    __nitems = v5 - v6;
    __ptr = (__sFILE *)((char *)__ptr + v6);
    if (!v6)
      return v5 == 0;
  }
  fflush(__stream);
  return 1;
}

uint64_t support::fs::openFile(const char *a1, int a2, unsigned int a3)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return open(a1, a2, a3);
}

BOOL support::fs::closeFile(support::fs *this)
{
  int v1;
  int v2;

  v1 = (int)this;
  do
    v2 = close(v1);
  while (v2 && *__error() == 4);
  return v2 == 0;
}

BOOL support::fs::copyFile(const char *a1, const char *a2, int a3)
{
  const char *v6;
  size_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int v13;
  int v14;
  const char *v15;
  size_t v16;
  size_t v17;
  _BYTE *v18;
  unsigned __int8 v19;
  NSObject *v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  int v25;
  int v26;
  ssize_t v27;
  _BYTE *v28;
  ssize_t v29;
  __int128 v30;
  unsigned __int8 v31;
  NSObject *v32;
  const char *v34;
  const char *v35;
  _BYTE __dst[1024];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (a1[23] >= 0)
    v6 = a1;
  else
    v6 = *(const char **)a1;
  v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    *(_QWORD *)&__dst[8] = v8;
    *(_QWORD *)&__dst[16] = v11 | 0x8000000000000000;
    *(_QWORD *)__dst = v9;
    goto LABEL_11;
  }
  __dst[23] = v7;
  v9 = __dst;
  if (v7)
LABEL_11:
    memmove(v9, v6, v8);
  v9[v8] = 0;
  if (__dst[23] >= 0)
    v12 = __dst;
  else
    v12 = *(const char **)__dst;
  v13 = open(v12, 0, 420);
  v14 = v13;
  if ((__dst[23] & 0x80000000) == 0)
  {
    if ((v13 & 0x80000000) == 0)
      goto LABEL_17;
LABEL_25:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_2579B8A80 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v20 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        return 0;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v20 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        return 0;
    }
    if (a1[23] >= 0)
      v34 = a1;
    else
      v34 = *(const char **)a1;
    *(_DWORD *)__dst = 136315138;
    *(_QWORD *)&__dst[4] = v34;
    _os_log_error_impl(&dword_24B855000, v20, OS_LOG_TYPE_ERROR, "Failed to open the source file(%s)", __dst, 0xCu);
    return 0;
  }
  operator delete(*(void **)__dst);
  if (v14 < 0)
    goto LABEL_25;
LABEL_17:
  if (a2[23] >= 0)
    v15 = a2;
  else
    v15 = *(const char **)a2;
  v16 = strlen(v15);
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v17 = v16;
  if (v16 >= 0x17)
  {
    v22 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v22 = v16 | 7;
    v23 = v22 + 1;
    v18 = operator new(v22 + 1);
    *(_QWORD *)&__dst[8] = v17;
    *(_QWORD *)&__dst[16] = v23 | 0x8000000000000000;
    *(_QWORD *)__dst = v18;
    goto LABEL_32;
  }
  __dst[23] = v16;
  v18 = __dst;
  if (v16)
LABEL_32:
    memmove(v18, v15, v17);
  v18[v17] = 0;
  if (__dst[23] >= 0)
    v24 = __dst;
  else
    v24 = *(const char **)__dst;
  v25 = open(v24, 1541, 420);
  v26 = v25;
  if ((__dst[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__dst);
    if ((v26 & 0x80000000) == 0)
      goto LABEL_38;
  }
  else if ((v25 & 0x80000000) == 0)
  {
LABEL_38:
    memset(__dst, 170, sizeof(__dst));
    v27 = read(v14, __dst, 0x400uLL);
    if (v27 < 1)
    {
LABEL_44:
      v21 = v27 == 0;
      if (!v27 && a3)
      {
        *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&__dst[112] = v30;
        *(_OWORD *)&__dst[128] = v30;
        *(_OWORD *)&__dst[80] = v30;
        *(_OWORD *)&__dst[96] = v30;
        *(_OWORD *)&__dst[48] = v30;
        *(_OWORD *)&__dst[64] = v30;
        *(_OWORD *)&__dst[16] = v30;
        *(_OWORD *)&__dst[32] = v30;
        *(_OWORD *)__dst = v30;
        if (fstat(v14, (stat *)__dst))
          v21 = 0;
        else
          v21 = fchmod(v26, *(mode_t *)&__dst[4]) == 0;
      }
    }
    else
    {
      v28 = __dst;
      do
      {
        while (!v27)
        {
          memset(__dst, 170, sizeof(__dst));
          v27 = read(v14, __dst, 0x400uLL);
          v28 = __dst;
          if (v27 <= 0)
            goto LABEL_44;
        }
        v29 = write(v26, v28, v27);
        v27 -= v29;
        v28 += v29;
      }
      while ((v29 & 0x8000000000000000) == 0);
      v21 = 0;
    }
    while (close(v26) && *__error() == 4)
      ;
    goto LABEL_56;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v32 = qword_2579B8A80;
    if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
      goto LABEL_52;
LABEL_65:
    if (a2[23] >= 0)
      v35 = a2;
    else
      v35 = *(const char **)a2;
    *(_DWORD *)__dst = 136315138;
    *(_QWORD *)&__dst[4] = v35;
    _os_log_error_impl(&dword_24B855000, v32, OS_LOG_TYPE_ERROR, "Failed to open the destination file(%s)", __dst, 0xCu);
    goto LABEL_52;
  }
  v32 = qword_2579B8A80;
  if (os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
    goto LABEL_65;
LABEL_52:
  v21 = 0;
LABEL_56:
  while (close(v14) && *__error() == 4)
    ;
  return v21;
}

void sub_24B8D6E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL support::fs::loadFile(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _BOOL8 v4;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  __int128 v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  _QWORD __b[91];

  __b[89] = *MEMORY[0x24BDAC8D0];
  memset(__b, 170, 0x240uLL);
  std::ifstream::basic_ifstream(__b);
  if (!__b[17]
    || (std::istream::tellg(), std::istream::seekg(), std::istream::tellg(), v3 = __b[88], std::istream::seekg(), !v3)
    || *(_DWORD *)((char *)&__b[4] + *(_QWORD *)(__b[0] - 24)))
  {
    v4 = 0;
    goto LABEL_5;
  }
  v7 = *(char **)a2;
  v6 = *(char **)(a2 + 8);
  v8 = (unint64_t)&v6[-*(_QWORD *)a2];
  v9 = v3 - v8;
  if (v3 <= v8)
  {
    if (v3 < v8)
      *(_QWORD *)(a2 + 8) = &v7[v3];
    goto LABEL_36;
  }
  v10 = *(_QWORD *)(a2 + 16);
  if (v10 - (uint64_t)v6 < v9)
  {
    if ((v3 & 0x8000000000000000) != 0)
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    v11 = v10 - (_QWORD)v7;
    v12 = 2 * v11;
    if (2 * v11 <= v3)
      v12 = v3;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v14 = (char *)operator new(v13);
    v15 = &v14[v8];
    v16 = &v14[v13];
    bzero(&v14[v8], v3 - v8);
    if (v6 == v7)
      goto LABEL_34;
    if (v8 >= 8 && (unint64_t)(v7 - v14) >= 0x20)
    {
      if (v8 < 0x20)
      {
        v17 = 0;
        goto LABEL_26;
      }
      v17 = v8 & 0xFFFFFFFFFFFFFFE0;
      v18 = v6 - 16;
      v19 = &v14[v6 - 16 - v7];
      v20 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v21 = *(_OWORD *)v18;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)v19 = v21;
        v19 -= 32;
        v18 -= 32;
        v20 -= 32;
      }
      while (v20);
      if (v8 == v17)
        goto LABEL_33;
      if ((v8 & 0x18) != 0)
      {
LABEL_26:
        v15 -= v8 & 0xFFFFFFFFFFFFFFF8;
        v22 = &v6[-v17 - 8];
        v23 = (char *)(v22 - v7);
        v24 = v17 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v25 = *(_QWORD *)v22;
          v22 -= 8;
          *(_QWORD *)&v23[(_QWORD)v14] = v25;
          v23 -= 8;
          v24 += 8;
        }
        while (v24);
        v6 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_33;
        goto LABEL_31;
      }
      v15 -= v17;
      v6 -= v17;
    }
LABEL_31:
    v26 = v15 - 1;
    do
    {
      v27 = *--v6;
      *v26-- = v27;
    }
    while (v6 != v7);
LABEL_33:
    v6 = v7;
    v15 = v14;
LABEL_34:
    *(_QWORD *)a2 = v15;
    *(_QWORD *)(a2 + 8) = &v14[v3];
    *(_QWORD *)(a2 + 16) = v16;
    if (v6)
      operator delete(v6);
    goto LABEL_36;
  }
  bzero(*(void **)(a2 + 8), v3 - v8);
  *(_QWORD *)(a2 + 8) = &v6[v9];
LABEL_36:
  std::istream::read();
  v4 = __b[1] == (int)v3;
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)__b + *(_QWORD *)(__b[0] - 24)), *(_DWORD *)((char *)&__b[4] + *(_QWORD *)(__b[0] - 24)) | 4);
LABEL_5:
  __b[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)__b + *(_QWORD *)(__b[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x24BD299B8](&__b[2]);
  std::istream::~istream();
  MEMORY[0x24BD29B5C](&__b[53]);
  return v4;
}

void sub_24B8D715C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL support::fs::getFileSize(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
  {
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    *a2 = v5;
    std::istream::seekg();
  }
  return v2 != 0;
}

{
  uint64_t v2;
  _BOOL8 v4;
  _QWORD v6[90];

  v6[89] = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  memset(v6, 170, 0x240uLL);
  std::ifstream::basic_ifstream(v6);
  v4 = v6[17] != 0;
  if (v6[17])
  {
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    *a2 = v6[88];
    std::istream::seekg();
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v6 + *(_QWORD *)(v6[0] - 24)), *(_DWORD *)((char *)&v6[4] + *(_QWORD *)(v6[0] - 24)) | 4);
  }
  v6[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x24BD299B8](&v6[2]);
  std::istream::~istream();
  MEMORY[0x24BD29B5C](&v6[53]);
  return v4;
}

uint64_t support::fs::loadFile(const char *a1, uint64_t a2)
{
  FILE *v3;
  FILE *v4;
  unint64_t v5;
  size_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  char *v30;

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v3 = fopen(a1, "rb");
  if (v3)
  {
    v4 = v3;
    fseek(v3, 0, 2);
    v5 = MEMORY[0x24BD29F1C](v4);
    if (v5 != -1)
    {
      v6 = v5;
      v8 = *(char **)a2;
      v7 = *(char **)(a2 + 8);
      v9 = (unint64_t)&v7[-*(_QWORD *)a2];
      v10 = v5 - v9;
      if (v5 <= v9)
      {
        if (v5 < v9)
          *(_QWORD *)(a2 + 8) = &v8[v5];
        goto LABEL_36;
      }
      v11 = *(_QWORD *)(a2 + 16);
      if (v11 - (uint64_t)v7 >= v10)
      {
        bzero(*(void **)(a2 + 8), v10);
        *(_QWORD *)(a2 + 8) = &v7[v10];
LABEL_36:
        rewind(v4);
        v30 = *(char **)a2;
        v19 = 1;
        fread(v30, v6, 1uLL, v4);
        fclose(v4);
        return v19;
      }
      if ((v5 & 0x8000000000000000) != 0)
        std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
      v12 = v11 - (_QWORD)v8;
      v13 = 2 * v12;
      if (2 * v12 <= v5)
        v13 = v5;
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      v15 = (char *)operator new(v14);
      v16 = &v15[v9];
      v17 = &v15[v14];
      bzero(&v15[v9], v10);
      if (v7 == v8)
      {
LABEL_34:
        *(_QWORD *)a2 = v16;
        *(_QWORD *)(a2 + 8) = &v15[v6];
        *(_QWORD *)(a2 + 16) = v17;
        if (v7)
          operator delete(v7);
        goto LABEL_36;
      }
      if (v9 >= 8 && (unint64_t)(v8 - v15) >= 0x20)
      {
        if (v9 < 0x20)
        {
          v18 = 0;
          goto LABEL_26;
        }
        v18 = v9 & 0xFFFFFFFFFFFFFFE0;
        v20 = v7 - 16;
        v21 = &v15[v7 - 16 - v8];
        v22 = v9 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v23 = *(_OWORD *)v20;
          *((_OWORD *)v21 - 1) = *((_OWORD *)v20 - 1);
          *(_OWORD *)v21 = v23;
          v21 -= 32;
          v20 -= 32;
          v22 -= 32;
        }
        while (v22);
        if (v9 == v18)
          goto LABEL_33;
        if ((v9 & 0x18) != 0)
        {
LABEL_26:
          v16 -= v9 & 0xFFFFFFFFFFFFFFF8;
          v24 = &v7[-v18 - 8];
          v25 = (char *)(v24 - v8);
          v26 = v18 - (v9 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v27 = *(_QWORD *)v24;
            v24 -= 8;
            *(_QWORD *)&v25[(_QWORD)v15] = v27;
            v25 -= 8;
            v26 += 8;
          }
          while (v26);
          v7 -= v9 & 0xFFFFFFFFFFFFFFF8;
          if (v9 == (v9 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_33;
          goto LABEL_31;
        }
        v16 -= v18;
        v7 -= v18;
      }
LABEL_31:
      v28 = v16 - 1;
      do
      {
        v29 = *--v7;
        *v28-- = v29;
      }
      while (v7 != v8);
LABEL_33:
      v7 = v8;
      v16 = v15;
      goto LABEL_34;
    }
  }
  return 0;
}

BOOL support::fs::fileExists(const char *a1)
{
  timespec v1;
  stat v3;

  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v1.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v3.st_blksize = v1;
  *(timespec *)v3.st_qspare = v1;
  v3.st_birthtimespec = v1;
  *(timespec *)&v3.st_size = v1;
  v3.st_mtimespec = v1;
  v3.st_ctimespec = v1;
  *(timespec *)&v3.st_uid = v1;
  v3.st_atimespec = v1;
  *(timespec *)&v3.st_dev = v1;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return stat(a1, &v3) == 0;
}

void support::fs::createUniqueFilename(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  unsigned int v5;
  char *v6;
  timespec v7;
  std::string *v8;
  uint64_t v9;
  std::sub_match<const char *> *v10;
  std::sub_match<std::__wrap_iter<const char *>> *v11;
  __int128 v12;
  int v13;
  int v14;
  unsigned int v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  int v20;
  std::sub_match<const char *> *v21;
  uint64_t v22;
  void **v23;
  __int128 v24;
  void *tv_nsec;
  unsigned __int8 *v26;
  void *v27;
  char *tv_sec;
  uint64_t v29;
  size_t size;
  std::string *v31;
  _BYTE *v32;
  char v33;
  std::string *v34;
  size_t v35;
  unint64_t v36;
  uint64_t v37;
  std::string *v38;
  char *i;
  size_t v40;
  std::string *v41;
  _BYTE *v42;
  int v43;
  unsigned __int8 *v44;
  int v45;
  char *v46;
  char *v47;
  char *v48;
  char v49;
  unsigned __int8 v50;
  std::string *v51;
  size_t v52;
  size_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  std::string::size_type v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char v62;
  unsigned __int8 v63;
  std::string *v64;
  size_t v65;
  size_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  std::string::size_type v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  __darwin_time_t v76;
  BOOL v77;
  uint64_t *p_tv_nsec;
  char *v79;
  timespec *p_st_ctimespec;
  char *v81;
  unsigned __int8 v82;
  std::string *v83;
  char *v84;
  char v85;
  unsigned __int8 v86;
  std::string *v87;
  size_t v88;
  size_t v89;
  unint64_t v90;
  uint64_t v91;
  void *v92;
  std::string::size_type v93;
  char *v94;
  size_t v95;
  unint64_t v96;
  uint64_t v97;
  std::string *v98;
  char *st_blocks;
  char *v100;
  char *v101;
  char v102;
  unsigned __int8 v103;
  std::string *v104;
  size_t v105;
  size_t v106;
  unint64_t v107;
  uint64_t v108;
  void *v109;
  std::string::size_type v110;
  char *v111;
  char *v112;
  char *v113;
  dev_t st_rdev;
  int v115;
  _QWORD *v116;
  timespec *v117;
  std::sub_match<const char *> *v118;
  std::sub_match<const char *> *st_ino;
  __int16 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  __darwin_time_t v125;
  _QWORD *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  void *v131;
  __darwin_time_t v132;
  uint64_t v133;
  uint64_t v134;
  __darwin_time_t v135;
  __int16 v136;
  __int128 v137;
  uint64_t v138;
  __int128 v139;
  int v140;
  uint64_t v141;
  unint64_t v142;
  __darwin_time_t v143;
  __darwin_time_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  _QWORD *v161;
  char *v162;
  char v163;
  size_t v164;
  std::string *v165;
  _BYTE *v166;
  char v167;
  std::string *v168;
  size_t v169;
  unint64_t v170;
  uint64_t v171;
  std::string *v172;
  char *v173;
  char first;
  unsigned __int8 v175;
  std::string *v176;
  size_t v177;
  size_t v178;
  unint64_t v179;
  uint64_t v180;
  void *v181;
  std::string::size_type v182;
  char *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  char *__s;
  size_t v191;
  char v192;
  uint64_t v193;
  char *v194;
  blkcnt_t v195;
  char *v196;
  std::string v197;
  void *__p[4];
  std::string v199;
  std::locale v200[2];
  __int128 v201;
  __int128 v202;
  __int128 v203;
  stat v204;
  __int128 v205;
  _BYTE v206[32];
  uint64_t v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  char v213;
  uint64_t v214;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v203 = v4;
  v201 = v4;
  v202 = v4;
  *(_OWORD *)&v200[0].__locale_ = v4;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v200, "^([/_\\-[:alnum:]]*)(.*)", 0);
  memset(&v199, 170, sizeof(v199));
  v187 = a2;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v199, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v199 = *(std::string *)a1;
  v5 = 0;
  v6 = &v206[24];
  v188 = a1;
  v196 = &v206[24];
  while (1)
  {
    v7.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v7.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v204.st_blksize = v7;
    *(timespec *)v204.st_qspare = v7;
    v204.st_birthtimespec = v7;
    *(timespec *)&v204.st_size = v7;
    v204.st_mtimespec = v7;
    v204.st_ctimespec = v7;
    *(timespec *)&v204.st_uid = v7;
    v204.st_atimespec = v7;
    *(timespec *)&v204.st_dev = v7;
    if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v199;
    else
      v8 = (std::string *)v199.__r_.__value_.__r.__words[0];
    if (stat((const char *)v8, &v204))
    {
      *(std::string *)v187 = v199;
      goto LABEL_333;
    }
    v9 = *(unsigned __int8 *)(a1 + 23);
    if ((v9 & 0x80u) == 0)
      v10 = (std::sub_match<const char *> *)a1;
    else
      v10 = *(std::sub_match<const char *> **)a1;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a1 + 8);
    v11 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v10 + v9);
    *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *((_OWORD *)v6 + 2) = v12;
    *((_OWORD *)v6 + 3) = v12;
    *(_OWORD *)v6 = v12;
    *((_OWORD *)v6 + 1) = v12;
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v210 = 0;
    v211 = 0;
    v212 = 0;
    v213 = 0;
    v214 = 0;
    v205 = 0u;
    memset(v206, 0, 25);
    *(_OWORD *)&v204.st_birthtimespec.tv_nsec = v12;
    v204.st_ctimespec.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v204.st_atimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    memset(&v204.st_mtimespec, 0, 17);
    memset(&v204.st_ctimespec.tv_nsec, 0, 17);
    LOBYTE(v204.st_size) = 0;
    v204.st_blocks = 0;
    memset(&v204, 0, 41);
    v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v200, v10, (std::sub_match<const char *> *)((char *)v10 + v9), (std::vector<std::csub_match> *)&v204, 4160);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)&v205, (uint64_t)v10, v11, (uint64_t *)&v204.st_dev, 0);
    if (*(_QWORD *)&v204.st_dev)
    {
      v204.st_ino = *(_QWORD *)&v204.st_dev;
      operator delete(*(void **)&v204.st_dev);
    }
    if (v212)
      v14 = v13 ^ 1;
    else
      v14 = 1;
    if ((_QWORD)v205)
    {
      *((_QWORD *)&v205 + 1) = v205;
      operator delete((void *)v205);
    }
    if ((v13 & v14) == 0)
      break;
    v15 = v5 + 1;
    memset(__p, 170, 24);
    std::to_string((std::string *)&v205, v15);
    v16 = std::string::insert((std::string *)&v205, 0, "$1-", 3uLL);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    *(_QWORD *)&v204.st_uid = *((_QWORD *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)&v204.st_dev = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append((std::string *)&v204, "$2", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __p[2] = (void *)v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v6 = v196;
    if (SHIBYTE(v204.st_gid) < 0)
    {
      operator delete(*(void **)&v204.st_dev);
      v189 = v15;
      if ((v206[7] & 0x80000000) != 0)
LABEL_298:
        operator delete((void *)v205);
    }
    else
    {
      v189 = v15;
      if ((v206[7] & 0x80000000) != 0)
        goto LABEL_298;
    }
    memset(&v197, 0, sizeof(v197));
    v20 = *(char *)(a1 + 23);
    if (v20 >= 0)
      v21 = (std::sub_match<const char *> *)a1;
    else
      v21 = *(std::sub_match<const char *> **)a1;
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 23);
    else
      v22 = *(_QWORD *)(a1 + 8);
    v23 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v23 = (void **)__p[0];
    __s = (char *)v23;
    *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v204.st_gen = v24;
    v204.st_size = 0xAAAAAAAAAAAAAAAALL;
    v204.st_ctimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(&v204.st_rdev + 1) = -1431655766;
    *(_QWORD *)&v204.st_dev = v21;
    v204.st_ino = (__darwin_ino64_t)v21 + v22;
    *(_QWORD *)&v204.st_uid = v200;
    v204.st_rdev = 0;
    memset(&v204.st_birthtimespec, 0, 17);
    memset(&v204.st_blocks, 0, 17);
    LOBYTE(v204.st_qspare[0]) = 0;
    v204.st_qspare[1] = 0;
    memset(&v204.st_atimespec, 0, 41);
    *((_OWORD *)v6 + 2) = v24;
    *((_OWORD *)v6 + 3) = v24;
    *(_OWORD *)v6 = v24;
    *((_OWORD *)v6 + 1) = v24;
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v210 = 0;
    v211 = 0;
    v212 = 0;
    v213 = 0;
    v214 = 0;
    v205 = 0u;
    memset(v206, 0, 25);
    std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v200, v21, (std::sub_match<const char *> *)((char *)v21 + v22), (std::vector<std::csub_match> *)&v205, 0);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)&v204.st_atimespec, (uint64_t)v21, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v21 + v22), (uint64_t *)&v205, 0);
    if ((_QWORD)v205)
    {
      *((_QWORD *)&v205 + 1) = v205;
      operator delete((void *)v205);
    }
    tv_nsec = (void *)v204.st_atimespec.tv_nsec;
    if (v204.st_atimespec.tv_nsec != v204.st_atimespec.tv_sec)
    {
      v191 = strlen(__s);
      v26 = (unsigned __int8 *)&__s[v191];
      while (2)
      {
        tv_sec = (char *)v204.st_birthtimespec.tv_sec;
        v29 = v204.st_birthtimespec.tv_nsec;
        while (tv_sec != (char *)v29)
        {
          v33 = *tv_sec;
          if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (HIBYTE(v197.__r_.__value_.__r.__words[2]) != 22)
            {
              size = HIBYTE(v197.__r_.__value_.__r.__words[2]);
              *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
              v31 = &v197;
              goto LABEL_41;
            }
            v34 = &v197;
            size = 22;
LABEL_49:
            if (size + 1 > 2 * size)
              v36 = size + 1;
            else
              v36 = 2 * size;
            v37 = (v36 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v36 | 7) != 0x17)
              v37 = v36 | 7;
            if (v36 >= 0x17)
              v35 = v37 + 1;
            else
              v35 = 23;
LABEL_57:
            v38 = (std::string *)operator new(v35);
            v31 = v38;
            if (!size || (memmove(v38, v34, size), size != 22))
              operator delete(v34);
            v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
            v197.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
            goto LABEL_62;
          }
          size = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v197.__r_.__value_.__l.__size_ == size)
          {
            if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
              std::string::__throw_length_error[abi:ne180100]();
            v34 = (std::string *)v197.__r_.__value_.__r.__words[0];
            v35 = 0x7FFFFFFFFFFFFFF7;
            if (size < 0x3FFFFFFFFFFFFFF3)
              goto LABEL_49;
            goto LABEL_57;
          }
          size = v197.__r_.__value_.__l.__size_;
          v31 = (std::string *)v197.__r_.__value_.__r.__words[0];
LABEL_62:
          v197.__r_.__value_.__l.__size_ = size + 1;
LABEL_41:
          v32 = (char *)v31 + size;
          *v32 = v33;
          v32[1] = 0;
          ++tv_sec;
        }
        if (v191)
        {
          for (i = __s; i != (char *)v26; ++i)
          {
            v43 = *i;
            if (v43 != 36)
              goto LABEL_135;
            v44 = (unsigned __int8 *)(i + 1);
            if (i + 1 == (char *)v26)
              goto LABEL_134;
            v45 = (char)*v44;
            v43 = *v44;
            if (v45 <= 38)
            {
              if (v45 == 36)
              {
                ++i;
                v82 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
                if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_136;
                goto LABEL_161;
              }
              if (v45 != 38)
                goto LABEL_123;
              v46 = *(char **)v204.st_atimespec.tv_sec;
              v47 = *(char **)(v204.st_atimespec.tv_sec + 8);
              if (*(char **)v204.st_atimespec.tv_sec == v47)
              {
LABEL_179:
                i = (char *)v44;
                continue;
              }
              while (2)
              {
                while (2)
                {
                  v49 = *v46;
                  v50 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
                  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v52 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    if (v197.__r_.__value_.__l.__size_ == v52)
                    {
                      if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                        goto LABEL_339;
                      v51 = (std::string *)v197.__r_.__value_.__r.__words[0];
                      v53 = 0x7FFFFFFFFFFFFFF7;
                      if (v52 < 0x3FFFFFFFFFFFFFF3)
                        goto LABEL_82;
                      goto LABEL_90;
                    }
                    v52 = v197.__r_.__value_.__l.__size_;
                    v57 = v197.__r_.__value_.__r.__words[0];
                  }
                  else
                  {
                    if (HIBYTE(v197.__r_.__value_.__r.__words[2]) != 22)
                    {
                      *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
                      v48 = (char *)&v197 + v50;
                      *v48 = v49;
                      v48[1] = 0;
                      if (++v46 == v47)
                        goto LABEL_201;
                      continue;
                    }
                    v51 = &v197;
                    v52 = 22;
LABEL_82:
                    if (v52 + 1 > 2 * v52)
                      v54 = v52 + 1;
                    else
                      v54 = 2 * v52;
                    v55 = (v54 & 0x7FFFFFFFFFFFFFF8) + 8;
                    if ((v54 | 7) != 0x17)
                      v55 = v54 | 7;
                    if (v54 >= 0x17)
                      v53 = v55 + 1;
                    else
                      v53 = 23;
LABEL_90:
                    v56 = operator new(v53);
                    v57 = (std::string::size_type)v56;
                    if (!v52 || (memmove(v56, v51, v52), v52 != 22))
                      operator delete(v51);
                    v197.__r_.__value_.__r.__words[0] = v57;
                    v197.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
                  }
                  break;
                }
                v197.__r_.__value_.__l.__size_ = v52 + 1;
                v58 = (char *)(v57 + v52);
                *v58 = v49;
                v58[1] = 0;
                if (++v46 == v47)
                  goto LABEL_201;
                continue;
              }
            }
            if (v45 != 39)
            {
              if (v45 == 96)
              {
                v59 = (char *)v204.st_birthtimespec.tv_sec;
                v60 = v204.st_birthtimespec.tv_nsec;
                if (v204.st_birthtimespec.tv_sec == v204.st_birthtimespec.tv_nsec)
                  goto LABEL_179;
                while (2)
                {
                  while (2)
                  {
                    v62 = *v59;
                    v63 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
                    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
                    {
                      v65 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                      if (v197.__r_.__value_.__l.__size_ == v65)
                      {
                        if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                          goto LABEL_339;
                        v64 = (std::string *)v197.__r_.__value_.__r.__words[0];
                        v66 = 0x7FFFFFFFFFFFFFF7;
                        if (v65 < 0x3FFFFFFFFFFFFFF3)
                          goto LABEL_108;
                        goto LABEL_116;
                      }
                      v65 = v197.__r_.__value_.__l.__size_;
                      v70 = v197.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      if (HIBYTE(v197.__r_.__value_.__r.__words[2]) != 22)
                      {
                        *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
                        v61 = (char *)&v197 + v63;
                        *v61 = v62;
                        v61[1] = 0;
                        if (++v59 == (char *)v60)
                          goto LABEL_201;
                        continue;
                      }
                      v64 = &v197;
                      v65 = 22;
LABEL_108:
                      if (v65 + 1 > 2 * v65)
                        v67 = v65 + 1;
                      else
                        v67 = 2 * v65;
                      v68 = (v67 & 0x7FFFFFFFFFFFFFF8) + 8;
                      if ((v67 | 7) != 0x17)
                        v68 = v67 | 7;
                      if (v67 >= 0x17)
                        v66 = v68 + 1;
                      else
                        v66 = 23;
LABEL_116:
                      v69 = operator new(v66);
                      v70 = (std::string::size_type)v69;
                      if (!v65 || (memmove(v69, v64, v65), v65 != 22))
                        operator delete(v64);
                      v197.__r_.__value_.__r.__words[0] = v70;
                      v197.__r_.__value_.__r.__words[2] = v66 | 0x8000000000000000;
                    }
                    break;
                  }
                  v197.__r_.__value_.__l.__size_ = v65 + 1;
                  v71 = (char *)(v70 + v65);
                  *v71 = v62;
                  v71[1] = 0;
                  if (++v59 == (char *)v60)
                    goto LABEL_201;
                  continue;
                }
              }
LABEL_123:
              if ((v43 - 48) <= 9)
              {
                v72 = *v44 - 48;
                if (i + 2 != (char *)v26)
                {
                  v73 = i[2];
                  v74 = v73 - 48;
                  v75 = v73 + 10 * (int)v72 - 48;
                  if (v74 > 9)
                  {
                    v44 = (unsigned __int8 *)(i + 1);
                  }
                  else
                  {
                    v72 = v75;
                    v44 = (unsigned __int8 *)(i + 2);
                  }
                }
                v76 = v204.st_atimespec.tv_sec + 24 * (int)v72;
                v77 = 0xAAAAAAAAAAAAAAABLL * ((v204.st_atimespec.tv_nsec - v204.st_atimespec.tv_sec) >> 3) > v72;
                p_tv_nsec = &v204.st_mtimespec.tv_nsec;
                if (v77)
                  p_tv_nsec = (uint64_t *)v76;
                v79 = (char *)*p_tv_nsec;
                p_st_ctimespec = (timespec *)(v76 + 8);
                if (!v77)
                  p_st_ctimespec = &v204.st_ctimespec;
                v81 = (char *)p_st_ctimespec->tv_sec;
                if (v79 == (char *)p_st_ctimespec->tv_sec)
                  goto LABEL_179;
                while (2)
                {
                  while (2)
                  {
                    v85 = *v79;
                    v86 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
                    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
                    {
                      v88 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                      if (v197.__r_.__value_.__l.__size_ == v88)
                      {
                        if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                          goto LABEL_339;
                        v87 = (std::string *)v197.__r_.__value_.__r.__words[0];
                        v89 = 0x7FFFFFFFFFFFFFF7;
                        if (v88 < 0x3FFFFFFFFFFFFFF3)
                          goto LABEL_145;
                        goto LABEL_153;
                      }
                      v88 = v197.__r_.__value_.__l.__size_;
                      v93 = v197.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      if (HIBYTE(v197.__r_.__value_.__r.__words[2]) != 22)
                      {
                        *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
                        v84 = (char *)&v197 + v86;
                        *v84 = v85;
                        v84[1] = 0;
                        if (++v79 == v81)
                          goto LABEL_201;
                        continue;
                      }
                      v87 = &v197;
                      v88 = 22;
LABEL_145:
                      if (v88 + 1 > 2 * v88)
                        v90 = v88 + 1;
                      else
                        v90 = 2 * v88;
                      v91 = (v90 & 0x7FFFFFFFFFFFFFF8) + 8;
                      if ((v90 | 7) != 0x17)
                        v91 = v90 | 7;
                      if (v90 >= 0x17)
                        v89 = v91 + 1;
                      else
                        v89 = 23;
LABEL_153:
                      v92 = operator new(v89);
                      v93 = (std::string::size_type)v92;
                      if (!v88 || (memmove(v92, v87, v88), v88 != 22))
                        operator delete(v87);
                      v197.__r_.__value_.__r.__words[0] = v93;
                      v197.__r_.__value_.__r.__words[2] = v89 | 0x8000000000000000;
                    }
                    break;
                  }
                  v197.__r_.__value_.__l.__size_ = v88 + 1;
                  v94 = (char *)(v93 + v88);
                  *v94 = v85;
                  v94[1] = 0;
                  if (++v79 == v81)
                    goto LABEL_201;
                  continue;
                }
              }
LABEL_134:
              LOBYTE(v43) = 36;
LABEL_135:
              v82 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
              if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_136:
                if (v82 == 22)
                {
                  v83 = &v197;
                  v40 = 22;
                  goto LABEL_164;
                }
                v40 = v82;
                *((_BYTE *)&v197.__r_.__value_.__s + 23) = (v82 + 1) & 0x7F;
                v41 = &v197;
LABEL_66:
                v42 = (char *)v41 + v40;
                *v42 = v43;
                v42[1] = 0;
                continue;
              }
LABEL_161:
              v40 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v197.__r_.__value_.__l.__size_ == v40)
              {
                if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
LABEL_339:
                  std::string::__throw_length_error[abi:ne180100]();
                v6 = v196;
                v83 = (std::string *)v197.__r_.__value_.__r.__words[0];
                v95 = 0x7FFFFFFFFFFFFFF7;
                if (v40 < 0x3FFFFFFFFFFFFFF3)
                {
LABEL_164:
                  if (v40 + 1 > 2 * v40)
                    v96 = v40 + 1;
                  else
                    v96 = 2 * v40;
                  v97 = (v96 & 0x7FFFFFFFFFFFFFF8) + 8;
                  if ((v96 | 7) != 0x17)
                    v97 = v96 | 7;
                  if (v96 >= 0x17)
                    v95 = v97 + 1;
                  else
                    v95 = 23;
                }
                v98 = (std::string *)operator new(v95);
                v41 = v98;
                if (!v40 || (memmove(v98, v83, v40), v40 != 22))
                  operator delete(v83);
                v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
                v197.__r_.__value_.__r.__words[2] = v95 | 0x8000000000000000;
              }
              else
              {
                v40 = v197.__r_.__value_.__l.__size_;
                v41 = (std::string *)v197.__r_.__value_.__r.__words[0];
              }
              v197.__r_.__value_.__l.__size_ = v40 + 1;
              goto LABEL_66;
            }
            st_blocks = (char *)v204.st_blocks;
            v100 = *(char **)&v204.st_blksize;
            if (v204.st_blocks == *(_QWORD *)&v204.st_blksize)
              goto LABEL_179;
            do
            {
              while (1)
              {
                v102 = *st_blocks;
                v103 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
                if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
                  break;
                if (HIBYTE(v197.__r_.__value_.__r.__words[2]) == 22)
                {
                  v104 = &v197;
                  v105 = 22;
LABEL_187:
                  if (v105 + 1 > 2 * v105)
                    v107 = v105 + 1;
                  else
                    v107 = 2 * v105;
                  v108 = (v107 & 0x7FFFFFFFFFFFFFF8) + 8;
                  if ((v107 | 7) != 0x17)
                    v108 = v107 | 7;
                  if (v107 >= 0x17)
                    v106 = v108 + 1;
                  else
                    v106 = 23;
                  goto LABEL_195;
                }
                *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
                v101 = (char *)&v197 + v103;
                *v101 = v102;
                v101[1] = 0;
                if (++st_blocks == v100)
                  goto LABEL_201;
              }
              v105 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v197.__r_.__value_.__l.__size_ != v105)
              {
                v105 = v197.__r_.__value_.__l.__size_;
                v110 = v197.__r_.__value_.__r.__words[0];
                goto LABEL_200;
              }
              if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                goto LABEL_339;
              v104 = (std::string *)v197.__r_.__value_.__r.__words[0];
              v106 = 0x7FFFFFFFFFFFFFF7;
              if (v105 < 0x3FFFFFFFFFFFFFF3)
                goto LABEL_187;
LABEL_195:
              v109 = operator new(v106);
              v110 = (std::string::size_type)v109;
              if (!v105 || (memmove(v109, v104, v105), v105 != 22))
                operator delete(v104);
              v197.__r_.__value_.__r.__words[0] = v110;
              v197.__r_.__value_.__r.__words[2] = v106 | 0x8000000000000000;
LABEL_200:
              v197.__r_.__value_.__l.__size_ = v105 + 1;
              v111 = (char *)(v110 + v105);
              *v111 = v102;
              v111[1] = 0;
              ++st_blocks;
            }
            while (st_blocks != v100);
LABEL_201:
            i = (char *)v44;
            v6 = v196;
          }
        }
        v113 = (char *)v204.st_blocks;
        v112 = *(char **)&v204.st_blksize;
        st_rdev = v204.st_rdev;
        v115 = v204.st_rdev | 0x800;
        v204.st_rdev |= 0x800u;
        v27 = (void *)v204.st_atimespec.tv_sec;
        v116 = &v204.st_mtimespec.tv_nsec;
        if (v204.st_atimespec.tv_nsec != v204.st_atimespec.tv_sec)
          v116 = (_QWORD *)v204.st_atimespec.tv_sec;
        v117 = (timespec *)(v204.st_atimespec.tv_sec + 8);
        if (v204.st_atimespec.tv_nsec == v204.st_atimespec.tv_sec)
          v117 = &v204.st_ctimespec;
        v118 = (std::sub_match<const char *> *)v117->tv_sec;
        st_ino = (std::sub_match<const char *> *)v204.st_ino;
        if (*v116 != v117->tv_sec)
        {
          v194 = *(char **)&v204.st_blksize;
          v195 = v204.st_blocks;
          goto LABEL_208;
        }
        if ((std::sub_match<const char *> *)v204.st_ino != v118)
        {
          v138 = *(_QWORD *)&v204.st_uid;
          *(_QWORD *)&v139 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v139 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *((_OWORD *)v6 + 2) = v139;
          *((_OWORD *)v6 + 3) = v139;
          *(_OWORD *)v6 = v139;
          *((_OWORD *)v6 + 1) = v139;
          v207 = 0;
          v208 = 0;
          v209 = 0;
          v210 = 0;
          v211 = 0;
          v212 = 0;
          v213 = 0;
          v214 = 0;
          v205 = 0u;
          memset(v206, 0, 25);
          v140 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v138, v118, st_ino, (std::vector<std::csub_match> *)&v205, st_rdev | 0x860u);
          v141 = v207;
          v142 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3);
          v143 = v204.st_atimespec.tv_sec;
          v144 = v204.st_atimespec.tv_nsec;
          v145 = 0xAAAAAAAAAAAAAAABLL * ((v204.st_atimespec.tv_nsec - v204.st_atimespec.tv_sec) >> 3);
          if (v142 <= v145)
          {
            if (v142 < v145)
            {
              v144 = v204.st_atimespec.tv_sec + 8 * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3);
              v204.st_atimespec.tv_nsec = v144;
            }
          }
          else
          {
            std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append((std::vector<std::ssub_match> *)&v204.st_atimespec, v142 - v145);
            v143 = v204.st_atimespec.tv_sec;
            v144 = v204.st_atimespec.tv_nsec;
          }
          if (v144 == v143)
          {
            v158 = (char *)v205;
          }
          else
          {
            v156 = 0;
            v157 = 0;
            v159 = *((_QWORD *)&v205 + 1);
            v158 = (char *)v205;
            do
            {
              if (0xAAAAAAAAAAAAAAABLL * ((v159 - (uint64_t)v158) >> 3) <= v157)
                v160 = &v206[8];
              else
                v160 = &v158[v156];
              *(_QWORD *)(v143 + v156) = (char *)v118 + *(_QWORD *)v160 - v141;
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3) <= v157)
                v161 = &v206[16];
              else
                v161 = (_QWORD *)(v205 + v156 + 8);
              *(_QWORD *)(v204.st_atimespec.tv_sec + v156 + 8) = (char *)v118 + *v161 - v141;
              v159 = *((_QWORD *)&v205 + 1);
              v158 = (char *)v205;
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3) <= v157)
                v162 = v6;
              else
                v162 = (char *)(v205 + v156 + 16);
              v163 = *v162;
              v143 = v204.st_atimespec.tv_sec;
              *(_BYTE *)(v204.st_atimespec.tv_sec + v156 + 16) = v163;
              ++v157;
              v156 += 24;
            }
            while (v157 < 0xAAAAAAAAAAAAAAABLL * ((v204.st_atimespec.tv_nsec - v143) >> 3));
          }
          v204.st_mtimespec.tv_nsec = (uint64_t)st_ino;
          v204.st_ctimespec.tv_sec = (__darwin_time_t)st_ino;
          v204.st_birthtimespec.tv_sec = (__darwin_time_t)v118 + v207 - v141;
          v204.st_birthtimespec.tv_nsec = (uint64_t)v118 + v208 - v141;
          LOBYTE(v204.st_size) = v209;
          LOBYTE(v204.st_ctimespec.tv_nsec) = 0;
          v204.st_blocks = (blkcnt_t)v118 + v210 - v141;
          *(_QWORD *)&v204.st_blksize = (char *)v118 + v211 - v141;
          LOBYTE(v204.st_gen) = v212;
          LOBYTE(v204.st_qspare[0]) = v213;
          if (v158)
          {
            *((_QWORD *)&v205 + 1) = v158;
            operator delete(v158);
          }
          if (v140)
          {
            v27 = (void *)v204.st_atimespec.tv_sec;
LABEL_38:
            if ((void *)v204.st_atimespec.tv_nsec != v27)
              continue;
            while (2)
            {
              if (v113 == v112)
                goto LABEL_326;
              v167 = *v113;
              if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
              {
                v164 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if (v197.__r_.__value_.__l.__size_ == v164)
                {
                  if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                    std::string::__throw_length_error[abi:ne180100]();
                  v168 = (std::string *)v197.__r_.__value_.__r.__words[0];
                  v169 = 0x7FFFFFFFFFFFFFF7;
                  if (v164 < 0x3FFFFFFFFFFFFFF3)
                  {
LABEL_283:
                    if (v164 + 1 > 2 * v164)
                      v170 = v164 + 1;
                    else
                      v170 = 2 * v164;
                    v171 = (v170 & 0x7FFFFFFFFFFFFFF8) + 8;
                    if ((v170 | 7) != 0x17)
                      v171 = v170 | 7;
                    if (v170 >= 0x17)
                      v169 = v171 + 1;
                    else
                      v169 = 23;
                  }
                  v172 = (std::string *)operator new(v169);
                  v165 = v172;
                  if (!v164 || (memmove(v172, v168, v164), v164 != 22))
                    operator delete(v168);
                  v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v165;
                  v197.__r_.__value_.__r.__words[2] = v169 | 0x8000000000000000;
                }
                else
                {
                  v164 = v197.__r_.__value_.__l.__size_;
                  v165 = (std::string *)v197.__r_.__value_.__r.__words[0];
                }
                v197.__r_.__value_.__l.__size_ = v164 + 1;
              }
              else
              {
                if (HIBYTE(v197.__r_.__value_.__r.__words[2]) == 22)
                {
                  v168 = &v197;
                  v164 = 22;
                  goto LABEL_283;
                }
                v164 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
                *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
                v165 = &v197;
              }
              v166 = (char *)v165 + v164;
              *v166 = v167;
              v166[1] = 0;
              ++v113;
              continue;
            }
          }
          v194 = v112;
          v195 = (blkcnt_t)v113;
          v118 = (std::sub_match<const char *> *)((char *)v118 + 1);
          v115 = v204.st_rdev;
          st_ino = (std::sub_match<const char *> *)v204.st_ino;
LABEL_208:
          v120 = v115;
          v204.st_rdev = v115 | 0x80;
          v121 = *(_QWORD *)&v204.st_uid;
          *(_QWORD *)&v122 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v122 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *((_OWORD *)v6 + 2) = v122;
          *((_OWORD *)v6 + 3) = v122;
          *(_OWORD *)v6 = v122;
          *((_OWORD *)v6 + 1) = v122;
          v207 = 0;
          v208 = 0;
          v209 = 0;
          v210 = 0;
          v211 = 0;
          v212 = 0;
          v213 = 0;
          v214 = 0;
          v205 = 0u;
          memset(v206, 0, 25);
          v193 = (uint64_t)st_ino;
          v192 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v121, v118, st_ino, (std::vector<std::csub_match> *)&v205, v115 | 0x80u);
          v123 = v207;
          v124 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3);
          v125 = v204.st_atimespec.tv_sec;
          v126 = (_QWORD *)v204.st_atimespec.tv_nsec;
          v127 = 0xAAAAAAAAAAAAAAABLL * ((v204.st_atimespec.tv_nsec - v204.st_atimespec.tv_sec) >> 3);
          v128 = v124 - v127;
          if (v124 <= v127)
          {
            if (v124 < v127)
            {
              v126 = (_QWORD *)(v204.st_atimespec.tv_sec + 8 * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3));
              v204.st_atimespec.tv_nsec = (uint64_t)v126;
            }
            v6 = v196;
            v113 = (char *)v195;
            v136 = v120;
            if (v126 != (_QWORD *)v204.st_atimespec.tv_sec)
            {
LABEL_235:
              v147 = 0;
              v148 = 0;
              v149 = *((_QWORD *)&v205 + 1);
              v150 = v205;
              do
              {
                v151 = 0xAAAAAAAAAAAAAAABLL * ((v149 - v150) >> 3);
                v152 = (_QWORD *)(v150 + v147);
                if (v151 <= v148)
                  v153 = &v206[8];
                else
                  v153 = v152;
                *(_QWORD *)(v125 + v147) = (char *)v118 + *v153 - v123;
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3) <= v148)
                  v154 = &v206[16];
                else
                  v154 = (_QWORD *)(v205 + v147 + 8);
                *(_QWORD *)(v204.st_atimespec.tv_sec + v147 + 8) = (char *)v118 + *v154 - v123;
                v149 = *((_QWORD *)&v205 + 1);
                v150 = v205;
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3) <= v148)
                  v155 = v6;
                else
                  v155 = (char *)(v205 + v147 + 16);
                v125 = v204.st_atimespec.tv_sec;
                *(_BYTE *)(v204.st_atimespec.tv_sec + v147 + 16) = *v155;
                ++v148;
                v147 += 24;
              }
              while (v148 < 0xAAAAAAAAAAAAAAABLL * ((v204.st_atimespec.tv_nsec - v125) >> 3));
            }
          }
          else
          {
            if (0xAAAAAAAAAAAAAAABLL * ((v204.st_mtimespec.tv_sec - v204.st_atimespec.tv_nsec) >> 3) >= v128)
            {
              v133 = v204.st_atimespec.tv_nsec + 24 * v128;
              v146 = 8 * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3)
                   - 8 * ((v204.st_atimespec.tv_nsec - v204.st_atimespec.tv_sec) >> 3);
              do
              {
                *v126 = 0;
                v126[1] = 0;
                *((_BYTE *)v126 + 16) = 0;
                v126 += 3;
                v146 -= 24;
              }
              while (v146);
              v204.st_atimespec.tv_nsec = v133;
              v6 = v196;
              v113 = (char *)v195;
              v136 = v120;
            }
            else
            {
              if (v124 > 0xAAAAAAAAAAAAAAALL)
                std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
              v129 = 0x5555555555555556 * ((v204.st_mtimespec.tv_sec - v204.st_atimespec.tv_sec) >> 3);
              if (v129 <= v124)
                v129 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v204.st_mtimespec.tv_sec - v204.st_atimespec.tv_sec) >> 3) >= 0x555555555555555)
                v130 = 0xAAAAAAAAAAAAAAALL;
              else
                v130 = v129;
              if (v130 > 0xAAAAAAAAAAAAAAALL)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v131 = operator new(24 * v130);
              v132 = (__darwin_time_t)v131 + 24 * v127;
              v133 = (uint64_t)v131 + 24 * v124;
              v134 = 24 * v124 - 24 * v127;
              v135 = v132;
              do
              {
                *(_QWORD *)v135 = 0;
                *(_QWORD *)(v135 + 8) = 0;
                *(_BYTE *)(v135 + 16) = 0;
                v135 += 24;
                v134 -= 24;
              }
              while (v134);
              v113 = (char *)v195;
              v136 = v120;
              if (v126 != (_QWORD *)v125)
              {
                do
                {
                  v137 = *(_OWORD *)(v126 - 3);
                  *(_QWORD *)(v132 - 8) = *(v126 - 1);
                  *(_OWORD *)(v132 - 24) = v137;
                  v132 -= 24;
                  v126 -= 3;
                }
                while (v126 != (_QWORD *)v125);
                v126 = (_QWORD *)v125;
              }
              v204.st_atimespec.tv_sec = v132;
              v204.st_atimespec.tv_nsec = v133;
              v204.st_mtimespec.tv_sec = (__darwin_time_t)v131 + 24 * v130;
              v6 = v196;
              if (v126)
              {
                operator delete(v126);
                v133 = v204.st_atimespec.tv_nsec;
              }
            }
            v125 = v204.st_atimespec.tv_sec;
            if (v133 != v204.st_atimespec.tv_sec)
              goto LABEL_235;
          }
          v204.st_mtimespec.tv_nsec = v193;
          v204.st_ctimespec.tv_sec = v193;
          v204.st_birthtimespec.tv_sec = (__darwin_time_t)v118 + v207 - v123;
          v204.st_birthtimespec.tv_nsec = (uint64_t)v118 + v208 - v123;
          LOBYTE(v204.st_size) = v209;
          LOBYTE(v204.st_ctimespec.tv_nsec) = 0;
          v204.st_blocks = (blkcnt_t)v118 + v210 - v123;
          *(_QWORD *)&v204.st_blksize = (char *)v118 + v211 - v123;
          LOBYTE(v204.st_gen) = v212;
          if ((v136 & 0x800) == 0)
            v204.st_qspare[1] = (uint64_t_t)v118 + v207 - v123;
          LOBYTE(v204.st_qspare[0]) = v213;
          v112 = v194;
          if ((_QWORD)v205)
          {
            *((_QWORD *)&v205 + 1) = v205;
            operator delete((void *)v205);
          }
          v27 = (void *)v204.st_atimespec.tv_sec;
          if ((v192 & 1) != 0)
            goto LABEL_38;
        }
        break;
      }
      if (v27)
      {
        v204.st_atimespec.tv_nsec = (uint64_t)v27;
        operator delete(v27);
      }
      v27 = 0;
      LOBYTE(v204.st_qspare[0]) = 0;
      memset(&v204.st_atimespec, 0, 41);
      memset(&v204.st_birthtimespec, 0, 17);
      memset(&v204.st_blocks, 0, 17);
      v204.st_qspare[1] = 0;
      goto LABEL_38;
    }
    if (!v22)
    {
      v5 = v189;
      if (!v204.st_atimespec.tv_nsec)
        goto LABEL_302;
LABEL_301:
      v204.st_atimespec.tv_nsec = (uint64_t)tv_nsec;
      operator delete(tv_nsec);
      goto LABEL_302;
    }
    do
    {
      while (1)
      {
        first = (char)v21->first;
        v175 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
          break;
        if (HIBYTE(v197.__r_.__value_.__r.__words[2]) == 22)
        {
          v176 = &v197;
          v177 = 22;
LABEL_312:
          if (v177 + 1 > 2 * v177)
            v179 = v177 + 1;
          else
            v179 = 2 * v177;
          v180 = (v179 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v179 | 7) != 0x17)
            v180 = v179 | 7;
          if (v179 >= 0x17)
            v178 = v180 + 1;
          else
            v178 = 23;
          goto LABEL_320;
        }
        *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
        v173 = (char *)&v197 + v175;
        *v173 = first;
        v173[1] = 0;
        v21 = (std::sub_match<const char *> *)((char *)v21 + 1);
        if (!--v22)
          goto LABEL_326;
      }
      v177 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v197.__r_.__value_.__l.__size_ != v177)
      {
        v177 = v197.__r_.__value_.__l.__size_;
        v182 = v197.__r_.__value_.__r.__words[0];
        goto LABEL_325;
      }
      if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v176 = (std::string *)v197.__r_.__value_.__r.__words[0];
      v178 = 0x7FFFFFFFFFFFFFF7;
      if (v177 < 0x3FFFFFFFFFFFFFF3)
        goto LABEL_312;
LABEL_320:
      v181 = operator new(v178);
      v182 = (std::string::size_type)v181;
      if (!v177 || (memmove(v181, v176, v177), v177 != 22))
        operator delete(v176);
      v197.__r_.__value_.__r.__words[0] = v182;
      v197.__r_.__value_.__r.__words[2] = v178 | 0x8000000000000000;
LABEL_325:
      v197.__r_.__value_.__l.__size_ = v177 + 1;
      v183 = (char *)(v182 + v177);
      *v183 = first;
      v183[1] = 0;
      v21 = (std::sub_match<const char *> *)((char *)v21 + 1);
      --v22;
    }
    while (v22);
LABEL_326:
    tv_nsec = (void *)v204.st_atimespec.tv_sec;
    a1 = v188;
    v5 = v189;
    if (v204.st_atimespec.tv_sec)
      goto LABEL_301;
LABEL_302:
    if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v199.__r_.__value_.__l.__data_);
      v199 = v197;
      if (SHIBYTE(__p[2]) < 0)
LABEL_5:
        operator delete(__p[0]);
    }
    else
    {
      v199 = v197;
      if (SHIBYTE(__p[2]) < 0)
        goto LABEL_5;
    }
  }
  *(_BYTE *)(v187 + 23) = 0;
  *(_BYTE *)v187 = 0;
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v199.__r_.__value_.__l.__data_);
LABEL_333:
  v184 = (std::__shared_weak_count *)v203;
  if ((_QWORD)v203)
  {
    v185 = (unint64_t *)(v203 + 8);
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  std::locale::~locale(v200);
}

void sub_24B8D89F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::locale a43)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a43);
  _Unwind_Resume(a1);
}

void sub_24B8D8A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,std::locale a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  if (a59 < 0)
    operator delete(__p);
  if (*(char *)(v59 - 185) < 0)
    operator delete(*(void **)(v59 - 208));
  if (a44 < 0)
    operator delete(a39);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a46);
  _Unwind_Resume(a1);
}

void support::fs::createUniquePath(const char *a1@<X0>, std::string *a2@<X8>)
{
  const char *v2;
  timespec v4;
  timespec v5;
  size_t v6;
  __darwin_ino64_t v7;
  int v8;
  timespec v9;
  stat *p_dst;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  timespec v18;
  const char *v19;
  stat __dst;
  stat __src;
  timespec v22;
  timespec v23;
  timespec v24;
  timespec v25;
  timespec v26;
  timespec v27;
  timespec v28;
  uint64_t v29;

  v2 = a1;
  v29 = *MEMORY[0x24BDAC8D0];
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__src.st_blksize = v4;
  *(timespec *)__src.st_qspare = v4;
  __src.st_birthtimespec = v4;
  *(timespec *)&__src.st_size = v4;
  __src.st_mtimespec = v4;
  __src.st_ctimespec = v4;
  *(timespec *)&__src.st_uid = v4;
  __src.st_atimespec = v4;
  *(timespec *)&__src.st_dev = v4;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (!stat(a1, &__src))
  {
    v5.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v5.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    v27 = v5;
    v28 = v5;
    v25 = v5;
    v26 = v5;
    v23 = v5;
    v24 = v5;
    *(timespec *)__src.st_qspare = v5;
    v22 = v5;
    *(timespec *)&__src.st_size = v5;
    *(timespec *)&__src.st_blksize = v5;
    __src.st_ctimespec = v5;
    __src.st_birthtimespec = v5;
    __src.st_atimespec = v5;
    __src.st_mtimespec = v5;
    *(timespec *)&__src.st_dev = v5;
    *(timespec *)&__src.st_uid = v5;
    snprintf((char *)&__src, 0x100uLL, "-%u", 1);
    memset(a2, 170, sizeof(std::string));
    v6 = strlen((const char *)&__src);
    if (v6 > 0x7FFFFFFFFFFFFFF7)
LABEL_32:
      std::string::__throw_length_error[abi:ne180100]();
    v7 = v6;
    v8 = 2;
    while (v7 < 0x17)
    {
      HIBYTE(__dst.st_gid) = v7;
      p_dst = &__dst;
      if (v7)
        goto LABEL_15;
LABEL_16:
      *((_BYTE *)&p_dst->st_dev + v7) = 0;
      v13 = v2[23];
      if (v13 >= 0)
        v14 = v2;
      else
        v14 = *(const std::string::value_type **)v2;
      if (v13 >= 0)
        v15 = *((unsigned __int8 *)v2 + 23);
      else
        v15 = *((_QWORD *)v2 + 1);
      v16 = std::string::insert((std::string *)&__dst, 0, v14, v15);
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      a2->__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.st_gid) < 0)
        operator delete(*(void **)&__dst.st_dev);
      v18.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v18.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blksize = v18;
      *(timespec *)__dst.st_qspare = v18;
      __dst.st_birthtimespec = v18;
      *(timespec *)&__dst.st_size = v18;
      __dst.st_mtimespec = v18;
      __dst.st_ctimespec = v18;
      *(timespec *)&__dst.st_uid = v18;
      __dst.st_atimespec = v18;
      *(timespec *)&__dst.st_dev = v18;
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = (const char *)a2;
      else
        v19 = (const char *)a2->__r_.__value_.__r.__words[0];
      if (stat(v19, &__dst))
        return;
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
        operator delete(a2->__r_.__value_.__l.__data_);
      v9.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v9.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      v27 = v9;
      v28 = v9;
      v25 = v9;
      v26 = v9;
      v23 = v9;
      v24 = v9;
      *(timespec *)__src.st_qspare = v9;
      v22 = v9;
      *(timespec *)&__src.st_size = v9;
      *(timespec *)&__src.st_blksize = v9;
      __src.st_ctimespec = v9;
      __src.st_birthtimespec = v9;
      __src.st_atimespec = v9;
      __src.st_mtimespec = v9;
      *(timespec *)&__src.st_dev = v9;
      *(timespec *)&__src.st_uid = v9;
      snprintf((char *)&__src, 0x100uLL, "-%u", v8);
      memset(a2, 170, sizeof(std::string));
      v7 = strlen((const char *)&__src);
      ++v8;
      if (v7 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_32;
    }
    v11 = (v7 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    p_dst = (stat *)operator new(v11 + 1);
    __dst.st_ino = v7;
    *(_QWORD *)&__dst.st_uid = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst.st_dev = p_dst;
LABEL_15:
    memcpy(p_dst, &__src, v7);
    goto LABEL_16;
  }
  if (v2[23] < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
  }
}

void sub_24B8D8DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL support::fs::createDir(const char *a1, mode_t a2, int a3)
{
  const char *v5;
  timespec v6;
  const char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  void **v11;
  std::string::size_type v12;
  uint64_t v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  timespec v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _BYTE __p[56];
  void *v27[2];
  uint64_t v28;
  stat v29;

  v5 = a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v29.st_blksize = v6;
  *(timespec *)v29.st_qspare = v6;
  v29.st_birthtimespec = v6;
  *(timespec *)&v29.st_size = v6;
  v29.st_mtimespec = v6;
  v29.st_ctimespec = v6;
  *(timespec *)&v29.st_uid = v6;
  v29.st_atimespec = v6;
  *(timespec *)&v29.st_dev = v6;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (!stat(a1, &v29))
    return 1;
  if (!a3)
  {
    if (v5[23] >= 0)
      v21 = v5;
    else
      v21 = *(const char **)v5;
    return mkdir(v21, a2) == 0;
  }
  v27[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v28 = 0x1AAAAAAAAAAAAAALL;
  v27[0] = (void *)0xAAAAAAAAAAAA002FLL;
  memset(&__p[32], 170, 24);
  ctu::tokenize();
  memset(__p, 0, 24);
  if (v5[23] >= 0)
    v7 = v5;
  else
    v7 = *(const char **)v5;
  if (*v7 == 47)
  {
    *(_OWORD *)__p = *(_OWORD *)v27;
    *(_QWORD *)&__p[16] = v28;
  }
  v8 = *(_QWORD *)&__p[32];
  if (*(_QWORD *)&__p[40] != *(_QWORD *)&__p[32])
  {
    v9 = 0;
    v10 = 1;
    while (1)
    {
      if (v10 != 1)
      {
        if (v28 >= 0)
          v11 = v27;
        else
          v11 = (void **)v27[0];
        if (v28 >= 0)
          v12 = HIBYTE(v28);
        else
          v12 = (std::string::size_type)v27[1];
        std::string::append((std::string *)__p, (const std::string::value_type *)v11, v12);
        v8 = *(_QWORD *)&__p[32];
      }
      v13 = v8 + 24 * v9;
      v14 = *(char *)(v13 + 23);
      v15 = v14 >= 0 ? (const std::string::value_type *)v13 : *(const std::string::value_type **)v13;
      v16 = v14 >= 0 ? *(unsigned __int8 *)(v13 + 23) : *(_QWORD *)(v13 + 8);
      std::string::append((std::string *)__p, v15, v16);
      v17.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v17.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v29.st_blksize = v17;
      *(timespec *)v29.st_qspare = v17;
      v29.st_birthtimespec = v17;
      *(timespec *)&v29.st_size = v17;
      v29.st_mtimespec = v17;
      v29.st_ctimespec = v17;
      *(timespec *)&v29.st_uid = v17;
      v29.st_atimespec = v17;
      *(timespec *)&v29.st_dev = v17;
      v18 = __p[23] >= 0 ? __p : *(const char **)__p;
      if (stat(v18, &v29))
      {
        v19 = __p[23] >= 0 ? __p : *(const char **)__p;
        if (mkdir(v19, a2))
          break;
      }
      v9 = v10;
      v8 = *(_QWORD *)&__p[32];
      ++v10;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__p[40] - *(_QWORD *)&__p[32]) >> 3) <= v9)
        goto LABEL_42;
    }
    v20 = 0;
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_42:
  v20 = 1;
  if ((__p[23] & 0x80000000) != 0)
LABEL_43:
    operator delete(*(void **)__p);
LABEL_44:
  v22 = *(_QWORD *)&__p[32];
  if (*(_QWORD *)&__p[32])
  {
    v23 = *(_QWORD *)&__p[40];
    v24 = *(void **)&__p[32];
    if (*(_QWORD *)&__p[40] != *(_QWORD *)&__p[32])
    {
      do
      {
        if (*(char *)(v23 - 1) < 0)
          operator delete(*(void **)(v23 - 24));
        v23 -= 24;
      }
      while (v23 != v22);
      v24 = *(void **)&__p[32];
    }
    *(_QWORD *)&__p[40] = v22;
    operator delete(v24);
  }
  if (SHIBYTE(v28) < 0)
    operator delete(v27[0]);
  return v20;
}

void sub_24B8D908C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::vector<std::string>::~vector[abi:ne180100](&a16);
    if ((a24 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    std::vector<std::string>::~vector[abi:ne180100](&a16);
    if ((a24 & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

BOOL support::fs::rename(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *a2, std::error_code *a3)
{
  int v3;

  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    a2 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
  rename(a1, a2, a3);
  return v3 == 0;
}

BOOL support::fs::chmod(const char *a1, mode_t a2)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return chmod(a1, a2) == 0;
}

uint64_t support::fs::removeDir(const char *a1)
{
  const std::__fs::filesystem::path *v1;
  timespec v2;
  _BOOL8 v3;
  std::error_code *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  char *v8;
  __int128 v9;
  int v10;
  std::string::size_type size;
  std::string *v12;
  std::string *p_p;
  int v14;
  size_t v15;
  unint64_t v16;
  char *p_dst;
  uint64_t v18;
  uint64_t v19;
  const std::__fs::filesystem::path *v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type v23;
  char v24;
  timespec v25;
  std::string *v26;
  std::error_code *v27;
  const std::__fs::filesystem::path *v28;
  std::string *v29;
  char v30;
  std::string *v31;
  DIR *v32;
  DIR *v33;
  dirent *v34;
  const std::__fs::filesystem::path *v35;
  const char *v36;
  void **v37;
  void **v38;
  void *v39;
  std::string __p;
  void *v42;
  void **v43;
  uint64_t v44;
  stat __dst;
  _QWORD v46[5];

  v1 = (const std::__fs::filesystem::path *)a1;
  v46[2] = *MEMORY[0x24BDAC8D0];
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blksize = v2;
  *(timespec *)__dst.st_qspare = v2;
  __dst.st_birthtimespec = v2;
  *(timespec *)&__dst.st_size = v2;
  __dst.st_mtimespec = v2;
  __dst.st_ctimespec = v2;
  *(timespec *)&__dst.st_uid = v2;
  __dst.st_atimespec = v2;
  *(timespec *)&__dst.st_dev = v2;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (stat(a1, &__dst))
    return 1;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  support::fs::readDir((const char *)v1, (uint64_t)&v42);
  v5 = 0;
  while (1)
  {
    v6 = v5;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (_BYTE *)v42) >> 3);
    v3 = v7 <= v5;
    if (v7 <= v5)
      break;
    v8 = (char *)v42 + 24 * v5;
    memset(&__p, 170, sizeof(__p));
    if (v8[23] < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *(_OWORD *)v8;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    }
    v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (size == 2)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      if (LOWORD(p_p->__r_.__value_.__l.__data_) == 11822)
      {
LABEL_58:
        v30 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_7;
        goto LABEL_6;
      }
    }
    else if (size == 1)
    {
      v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &__p;
      if (v12->__r_.__value_.__s.__data_[0] == 46)
        goto LABEL_58;
    }
    v14 = SHIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    if (v14 >= 0)
      v15 = HIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    else
      v15 = v1->__pn_.__r_.__value_.__l.__size_;
    v16 = v15 + 1;
    memset(&__dst, 170, 24);
    if (v15 + 1 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v16 >= 0x17)
    {
      v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v18 = v16 | 7;
      v19 = v18 + 1;
      p_dst = (char *)operator new(v18 + 1);
      __dst.st_ino = v15 + 1;
      *(_QWORD *)&__dst.st_uid = v19 | 0x8000000000000000;
      *(_QWORD *)&__dst.st_dev = p_dst;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = (char *)&__dst;
      HIBYTE(__dst.st_gid) = v15 + 1;
      if (!v15)
        goto LABEL_38;
    }
    if (v14 >= 0)
      v20 = v1;
    else
      v20 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
    memmove(p_dst, v20, v15);
LABEL_38:
    *(_WORD *)&p_dst[v15] = 47;
    if (v10 >= 0)
      v21 = &__p;
    else
      v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v22 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v21, size);
    v23 = v22->__r_.__value_.__r.__words[0];
    v46[0] = v22->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
    v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v23;
    __p.__r_.__value_.__l.__size_ = v46[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v46 + 7);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v24;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v23 = __p.__r_.__value_.__r.__words[0];
    }
    v25.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v25.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blksize = v25;
    *(timespec *)__dst.st_qspare = v25;
    __dst.st_birthtimespec = v25;
    *(timespec *)&__dst.st_size = v25;
    __dst.st_mtimespec = v25;
    __dst.st_ctimespec = v25;
    *(timespec *)&__dst.st_uid = v25;
    __dst.st_atimespec = v25;
    if (v24 >= 0)
      v26 = &__p;
    else
      v26 = (std::string *)v23;
    *(timespec *)&__dst.st_dev = v25;
    if (!stat((const char *)v26, &__dst)
      && ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (v31 = &__p)
        : (v31 = (std::string *)__p.__r_.__value_.__r.__words[0]),
          (v32 = opendir((const char *)v31), (v33 = v32) != 0) && (v34 = readdir(v32), closedir(v33), v34)))
    {
      std::string::append(&__p, "/", 1uLL);
      v30 = support::fs::removeDir(&__p);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_7;
    }
    else
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = (const std::__fs::filesystem::path *)&__p;
      else
        v28 = (const std::__fs::filesystem::path *)__p.__r_.__value_.__r.__words[0];
      if (!remove(v28, v27))
        goto LABEL_58;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &__p;
      else
        v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v30 = unlink((const char *)v29) == 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_7;
    }
LABEL_6:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
    v5 = v6 + 1;
    if ((v30 & 1) == 0)
      goto LABEL_75;
  }
  if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = v1;
  else
    v35 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
  if (remove(v35, v4))
  {
    if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = (const char *)v1;
    else
      v36 = (const char *)v1->__pn_.__r_.__value_.__r.__words[0];
    unlink(v36);
  }
LABEL_75:
  v37 = (void **)v42;
  if (v42)
  {
    v38 = v43;
    v39 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v38 - 1) < 0)
          operator delete(*(v38 - 3));
        v38 -= 3;
      }
      while (v38 != v37);
      v39 = v42;
    }
    v43 = v37;
    operator delete(v39);
  }
  return v3;
}

void sub_24B8D956C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_24B8D9584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if ((a16 & 0x80000000) == 0)
  {
    std::vector<std::string>::~vector[abi:ne180100](&a17);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

BOOL support::fs::removeFile(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  const std::__fs::filesystem::path *v2;
  const char *v3;

  v2 = a1;
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  if (!remove(a1, a2))
    return 1;
  if ((v2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = (const char *)v2;
  else
    v3 = (const char *)v2->__pn_.__r_.__value_.__r.__words[0];
  return unlink(v3) == 0;
}

uint64_t support::fs::removeDirContents(const char *a1, unint64_t a2)
{
  const char *v3;
  void **v4;
  void **v5;
  double v6;
  __int128 v7;
  int v8;
  std::string::size_type v9;
  std::string *v10;
  std::string *v11;
  int v12;
  size_t v13;
  unint64_t v14;
  stat *p_dst;
  std::string::size_type v16;
  void **v17;
  void **v18;
  const char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  std::string *v24;
  std::string *v25;
  __int128 v26;
  timespec v27;
  void **v28;
  char v29;
  int v30;
  timespec v31;
  void **v32;
  std::error_code *v33;
  const std::__fs::filesystem::path *v34;
  void **v35;
  void **v36;
  DIR *v37;
  DIR *v38;
  dirent *v39;
  int v40;
  size_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  std::string *v47;
  std::string::size_type size;
  std::string *v49;
  __int128 v50;
  char v51;
  char v52;
  void **v53;
  void *v54;
  time_t v56;
  char v57;
  int v58;
  std::string v59;
  void *__p[4];
  std::string v61;
  void *v62;
  void **v63;
  uint64_t v64;
  stat __dst;

  v3 = a1;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  support::fs::readDir(a1, (uint64_t)&v62);
  v56 = time(0);
  v5 = (void **)v62;
  v4 = v63;
  if (v62 == v63)
  {
    v52 = 1;
    if (v62)
      goto LABEL_105;
    return v52 & 1;
  }
  v6 = (double)a2;
  v57 = 1;
  while (1)
  {
    memset(&v61, 170, sizeof(v61));
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v61, (const std::string::value_type *)*v5, (std::string::size_type)v5[1]);
    }
    else
    {
      v7 = *(_OWORD *)v5;
      v61.__r_.__value_.__r.__words[2] = (std::string::size_type)v5[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v7;
    }
    v8 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
    v9 = (v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(v61.__r_.__value_.__r.__words[2])
       : v61.__r_.__value_.__l.__size_;
    if (v9 == 2)
      break;
    if (v9 == 1)
    {
      v10 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v61;
      if (v10->__r_.__value_.__s.__data_[0] == 46)
        goto LABEL_95;
    }
LABEL_19:
    memset(__p, 170, 24);
    v12 = v3[23];
    if (v12 >= 0)
      v13 = *((unsigned __int8 *)v3 + 23);
    else
      v13 = *((_QWORD *)v3 + 1);
    v14 = v13 + 1;
    memset(&__dst, 170, 24);
    if (v13 + 1 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v14 >= 0x17)
    {
      v58 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
      v16 = v9;
      v17 = v5;
      v18 = v4;
      v19 = v3;
      v20 = a2;
      v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v21 = v14 | 7;
      v22 = v21 + 1;
      p_dst = (stat *)operator new(v21 + 1);
      __dst.st_ino = v13 + 1;
      *(_QWORD *)&__dst.st_uid = v22 | 0x8000000000000000;
      *(_QWORD *)&__dst.st_dev = p_dst;
      a2 = v20;
      v3 = v19;
      v4 = v18;
      v5 = v17;
      v9 = v16;
      v8 = v58;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = &__dst;
      HIBYTE(__dst.st_gid) = v13 + 1;
      if (!v13)
        goto LABEL_33;
    }
    if (v12 >= 0)
      v23 = v3;
    else
      v23 = *(const char **)v3;
    memmove(p_dst, v23, v13);
LABEL_33:
    *(_WORD *)((char *)&p_dst->st_dev + v13) = 47;
    if (v8 >= 0)
      v24 = &v61;
    else
      v24 = (std::string *)v61.__r_.__value_.__r.__words[0];
    v25 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v24, v9);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    __p[2] = (void *)v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      if (!a2)
        goto LABEL_47;
    }
    else if (!a2)
    {
      goto LABEL_47;
    }
    v27.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v27.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blksize = v27;
    *(timespec *)__dst.st_qspare = v27;
    __dst.st_birthtimespec = v27;
    *(timespec *)&__dst.st_size = v27;
    __dst.st_mtimespec = v27;
    __dst.st_ctimespec = v27;
    __dst.st_atimespec = v27;
    *(timespec *)&__dst.st_dev = v27;
    *(timespec *)&__dst.st_uid = v27;
    if (SHIBYTE(__p[2]) >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if (!stat((const char *)v28, &__dst) && difftime(v56, __dst.st_ctimespec.tv_sec) >= v6)
    {
LABEL_47:
      v31.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v31.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blksize = v31;
      *(timespec *)__dst.st_qspare = v31;
      __dst.st_birthtimespec = v31;
      *(timespec *)&__dst.st_size = v31;
      __dst.st_mtimespec = v31;
      __dst.st_ctimespec = v31;
      __dst.st_atimespec = v31;
      *(timespec *)&__dst.st_dev = v31;
      *(timespec *)&__dst.st_uid = v31;
      if (SHIBYTE(__p[2]) >= 0)
        v32 = __p;
      else
        v32 = (void **)__p[0];
      if (stat((const char *)v32, &__dst)
        || (SHIBYTE(__p[2]) >= 0 ? (v36 = __p) : (v36 = (void **)__p[0]),
            (v37 = opendir((const char *)v36), (v38 = v37) == 0) || (v39 = readdir(v37), closedir(v38), !v39)))
      {
        if (SHIBYTE(__p[2]) >= 0)
          v34 = (const std::__fs::filesystem::path *)__p;
        else
          v34 = (const std::__fs::filesystem::path *)__p[0];
        if (!remove(v34, v33)
          || (SHIBYTE(__p[2]) >= 0 ? (v35 = __p) : (v35 = (void **)__p[0]), !unlink((const char *)v35)))
        {
LABEL_89:
          v30 = 0;
          v57 = 1;
          v29 = 1;
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
            goto LABEL_91;
          goto LABEL_90;
        }
        goto LABEL_59;
      }
      v40 = v3[23];
      if (v40 >= 0)
        v41 = *((unsigned __int8 *)v3 + 23);
      else
        v41 = *((_QWORD *)v3 + 1);
      v42 = v41 + 1;
      memset(&v59, 170, sizeof(v59));
      if (v41 + 1 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v42 >= 0x17)
      {
        v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17)
          v44 = v42 | 7;
        v45 = v44 + 1;
        v43 = (char *)operator new(v44 + 1);
        v59.__r_.__value_.__l.__size_ = v41 + 1;
        v59.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
        v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      }
      else
      {
        memset(&v59, 0, sizeof(v59));
        v43 = (char *)&v59;
        *((_BYTE *)&v59.__r_.__value_.__s + 23) = v41 + 1;
        if (!v41)
          goto LABEL_80;
      }
      if (v40 >= 0)
        v46 = v3;
      else
        v46 = *(const char **)v3;
      memmove(v43, v46, v41);
LABEL_80:
      *(_WORD *)&v43[v41] = 47;
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = &v61;
      else
        v47 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      else
        size = v61.__r_.__value_.__l.__size_;
      v49 = std::string::append(&v59, (const std::string::value_type *)v47, size);
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      *(_QWORD *)&__dst.st_uid = *((_QWORD *)&v49->__r_.__value_.__l + 2);
      *(_OWORD *)&__dst.st_dev = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      v51 = support::fs::removeDir((const char *)&__dst);
      if (SHIBYTE(__dst.st_gid) < 0)
      {
        operator delete(*(void **)&__dst.st_dev);
        if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_88;
      }
      else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_88:
        if ((v51 & 1) != 0)
          goto LABEL_89;
LABEL_59:
        v57 = 0;
        v29 = 0;
        v30 = 2;
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
          goto LABEL_91;
        goto LABEL_90;
      }
      operator delete(v59.__r_.__value_.__l.__data_);
      if ((v51 & 1) != 0)
        goto LABEL_89;
      goto LABEL_59;
    }
    v29 = 0;
    v30 = 3;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_91;
LABEL_90:
    operator delete(__p[0]);
LABEL_91:
    if ((v29 & 1) != 0)
      goto LABEL_95;
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_93;
LABEL_96:
    operator delete(v61.__r_.__value_.__l.__data_);
    if (v30 != 3)
      goto LABEL_97;
LABEL_3:
    v5 += 3;
    if (v5 == v4)
      goto LABEL_102;
  }
  v11 = (std::string *)v61.__r_.__value_.__r.__words[0];
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v61;
  if (LOWORD(v11->__r_.__value_.__l.__data_) != 11822)
    goto LABEL_19;
LABEL_95:
  v30 = 0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_96;
LABEL_93:
  if (v30 == 3)
    goto LABEL_3;
LABEL_97:
  if (!v30)
    goto LABEL_3;
LABEL_102:
  v5 = (void **)v62;
  v52 = v57;
  if (!v62)
    return v52 & 1;
LABEL_105:
  v53 = v63;
  v54 = v5;
  if (v63 != v5)
  {
    do
    {
      if (*((char *)v53 - 1) < 0)
        operator delete(*(v53 - 3));
      v53 -= 3;
    }
    while (v53 != v5);
    v54 = v62;
  }
  v63 = v5;
  operator delete(v54);
  return v52 & 1;
}

void sub_24B8D9BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  std::vector<std::string>::~vector[abi:ne180100](&a31);
  _Unwind_Resume(a1);
}

void support::fs::moveDirUnique(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const std::__fs::filesystem::path *v4;
  timespec v6;
  const char *v7;
  DIR *v8;
  DIR *v9;
  dirent *v10;
  std::error_code *v11;
  const std::__fs::filesystem::path *v12;
  const std::__fs::filesystem::path *v13;
  int v14;
  std::string __p;
  stat v16;

  v4 = (const std::__fs::filesystem::path *)a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v16.st_blksize = v6;
  *(timespec *)v16.st_qspare = v6;
  v16.st_birthtimespec = v6;
  *(timespec *)&v16.st_size = v6;
  v16.st_mtimespec = v6;
  v16.st_ctimespec = v6;
  *(timespec *)&v16.st_uid = v6;
  v16.st_atimespec = v6;
  *(timespec *)&v16.st_dev = v6;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (stat(a1, &v16))
    goto LABEL_4;
  v7 = (v4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
     ? (const char *)v4
     : (const char *)v4->__pn_.__r_.__value_.__r.__words[0];
  v8 = opendir(v7);
  if (!v8)
    goto LABEL_4;
  v9 = v8;
  v10 = readdir(v8);
  closedir(v9);
  if (!v10)
    goto LABEL_4;
  memset((void *)a3, 170, 24);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  support::fs::createUniquePath((const char *)&__p, (std::string *)a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = v4;
  else
    v12 = (const std::__fs::filesystem::path *)v4->__pn_.__r_.__value_.__r.__words[0];
  if (*(char *)(a3 + 23) >= 0)
    v13 = (const std::__fs::filesystem::path *)a3;
  else
    v13 = *(const std::__fs::filesystem::path **)a3;
  rename(v12, v13, v11);
  if (v14)
  {
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
LABEL_4:
    *(_BYTE *)(a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }
}

void sub_24B8D9DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void support::fs::getFileName(std::string *a1@<X8>)
{
  __int128 v2;
  void **v3;
  void *v4;
  void *__p[3];

  memset(__p, 170, sizeof(__p));
  ctu::tokenize();
  if (*((char *)__p[1] - 1) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *((const std::string::value_type **)__p[1] - 3), *((_QWORD *)__p[1] - 2));
  }
  else
  {
    v2 = *(_OWORD *)((char *)__p[1] - 24);
    a1->__r_.__value_.__r.__words[2] = *((_QWORD *)__p[1] - 1);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v2;
  }
  if (__p[0])
  {
    v3 = (void **)__p[1];
    v4 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != __p[0]);
      v4 = __p[0];
    }
    operator delete(v4);
  }
}

void sub_24B8D9EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

uint64_t support::fs::lockDir(const char *a1)
{
  uint64_t v1;
  _QWORD v3[2];
  pid_t v4;
  int v5;

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v1 = open(a1, 0);
  if ((v1 & 0x80000000) != 0)
    return v1;
  v5 = 1;
  v3[0] = 0;
  v3[1] = 0;
  v4 = getpid();
  if ((fcntl(v1, 9, v3) & 0x80000000) == 0)
    return v1;
  close(v1);
  return 0xFFFFFFFFLL;
}

BOOL support::fs::unlockDir(support::fs *this)
{
  int v1;
  _BOOL8 v2;
  _QWORD v4[2];
  pid_t v5;
  int v6;

  v1 = (int)this;
  v6 = 2;
  v4[0] = 0;
  v4[1] = 0;
  v5 = getpid();
  v2 = fcntl(v1, 9, v4) == 0;
  close(v1);
  return v2;
}

BOOL support::fs::getFilteredFiles(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  DIR *v7;
  DIR *v8;
  dirent *v9;
  char *d_name;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  std::string::size_type v19;
  _BYTE *v20;
  _WORD *v21;
  DIR *v22;
  uint64_t v23;
  uint64_t v24;
  timespec v25;
  int v26;
  size_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  const std::string::value_type *v33;
  std::string *v34;
  __int128 v35;
  void **v36;
  std::sub_match<const char *> *v37;
  std::sub_match<std::__wrap_iter<const char *>> *v38;
  __int128 v39;
  int v40;
  int v41;
  unint64_t v42;
  __int128 v43;
  std::string *v44;
  unsigned __int8 v45;
  NSObject *v46;
  _BOOL8 result;
  int *v48;
  char *v49;
  char v50;
  const char *v52;
  std::string v53;
  _BYTE __dst[24];
  void *__p[2];
  _QWORD v56[9];
  __int128 v57;
  uint64_t v58;
  stat v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *__error() = 0;
  if (a1[23] < 0)
  {
    v7 = opendir(*(const char **)a1);
    if (v7)
      goto LABEL_3;
  }
  else
  {
    v7 = opendir(a1);
    if (v7)
    {
LABEL_3:
      v8 = v7;
      v9 = readdir(v7);
      if (v9)
      {
        v52 = a1;
        v50 = 0;
        while (1)
        {
          d_name = v9->d_name;
          memset(__dst, 170, sizeof(__dst));
          v11 = strlen(v9->d_name);
          if (v11 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v12 = v11;
          if (v11 >= 0x17)
            break;
          __dst[23] = v11;
          v13 = __dst;
          if (v11)
            goto LABEL_12;
LABEL_13:
          v13[v12] = 0;
          v16 = __dst[23];
          v17 = __dst[23];
          v18 = *(_QWORD *)&__dst[8];
          if (__dst[23] >= 0)
            v19 = __dst[23];
          else
            v19 = *(_QWORD *)&__dst[8];
          if (v19 == 2)
          {
            v21 = *(_WORD **)__dst;
            if (__dst[23] >= 0)
              v21 = __dst;
            if (*v21 == 11822)
              goto LABEL_73;
          }
          else if (v19 == 1)
          {
            v20 = *(_BYTE **)__dst;
            if (__dst[23] >= 0)
              v20 = __dst;
            if (*v20 == 46)
              goto LABEL_73;
          }
          if ((a4 & 1) != 0)
            goto LABEL_53;
          v22 = v8;
          v23 = a4;
          v24 = a3;
          v25.tv_sec = 0xAAAAAAAAAAAAAAAALL;
          v25.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
          *(timespec *)&v59.st_blksize = v25;
          *(timespec *)v59.st_qspare = v25;
          v59.st_birthtimespec = v25;
          *(timespec *)&v59.st_size = v25;
          v59.st_mtimespec = v25;
          v59.st_ctimespec = v25;
          *(timespec *)&v59.st_uid = v25;
          v59.st_atimespec = v25;
          *(timespec *)&v59.st_dev = v25;
          v26 = v52[23];
          if (v26 >= 0)
            v27 = *((unsigned __int8 *)v52 + 23);
          else
            v27 = *((_QWORD *)v52 + 1);
          v28 = v27 + 1;
          memset(&v53, 170, sizeof(v53));
          if (v27 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v28 >= 0x17)
          {
            v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v28 | 7) != 0x17)
              v30 = v28 | 7;
            v31 = v30 + 1;
            v29 = (char *)operator new(v30 + 1);
            v53.__r_.__value_.__l.__size_ = v27 + 1;
            v53.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
            v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
          }
          else
          {
            memset(&v53, 0, sizeof(v53));
            v29 = (char *)&v53;
            *((_BYTE *)&v53.__r_.__value_.__s + 23) = v27 + 1;
            if (!v27)
              goto LABEL_40;
          }
          if (v26 >= 0)
            v32 = v52;
          else
            v32 = *(const char **)v52;
          memmove(v29, v32, v27);
LABEL_40:
          a3 = v24;
          *(_WORD *)&v29[v27] = 47;
          if (v17 >= 0)
            v33 = __dst;
          else
            v33 = *(const std::string::value_type **)__dst;
          v34 = std::string::append(&v53, v33, v19);
          a4 = v23;
          v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v56[0] = *((_QWORD *)&v34->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          if (v56[0] >= 0)
            v36 = __p;
          else
            v36 = (void **)__p[0];
          lstat((const char *)v36, &v59);
          v8 = v22;
          if (SHIBYTE(v56[0]) < 0)
          {
            operator delete(__p[0]);
            if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_48:
              if ((v59.st_mode & 0xF000) != 0xA000)
                goto LABEL_52;
              goto LABEL_73;
            }
          }
          else if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_48;
          }
          operator delete(v53.__r_.__value_.__l.__data_);
          if ((v59.st_mode & 0xF000) != 0xA000)
          {
LABEL_52:
            v16 = __dst[23];
            v18 = *(_QWORD *)&__dst[8];
            LOBYTE(v17) = __dst[23];
LABEL_53:
            if ((v17 & 0x80u) == 0)
              v37 = (std::sub_match<const char *> *)__dst;
            else
              v37 = *(std::sub_match<const char *> **)__dst;
            if ((v17 & 0x80u) != 0)
              v16 = v18;
            v38 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v37 + v16);
            *(_QWORD *)&v39 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v57 = v39;
            v56[6] = 0xAAAAAAAAAAAAAA00;
            v56[3] = 0xAAAAAAAAAAAAAAAALL;
            v56[4] = 0;
            v56[5] = 0;
            v56[7] = 0;
            v56[8] = 0;
            LOBYTE(v57) = 0;
            BYTE8(v57) = 0;
            v58 = 0;
            *(_OWORD *)__p = 0u;
            memset(v56, 0, 25);
            *(_OWORD *)&v59.st_birthtimespec.tv_nsec = v39;
            v59.st_ctimespec.tv_sec = 0xAAAAAAAAAAAAAAAALL;
            v59.st_atimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
            memset(&v59.st_mtimespec, 0, 17);
            memset(&v59.st_ctimespec.tv_nsec, 0, 17);
            LOBYTE(v59.st_size) = 0;
            v59.st_blocks = 0;
            memset(&v59, 0, 41);
            v40 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a2, v37, (std::sub_match<const char *> *)((char *)v37 + v16), (std::vector<std::csub_match> *)&v59, 4160);
            std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v37, v38, (uint64_t *)&v59.st_dev, 0);
            if (*(_QWORD *)&v59.st_dev)
            {
              v59.st_ino = *(_QWORD *)&v59.st_dev;
              operator delete(*(void **)&v59.st_dev);
            }
            if ((_BYTE)v57)
              v41 = v40 ^ 1;
            else
              v41 = 1;
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if ((v40 & v41) != 0)
            {
              v42 = *(_QWORD *)(a3 + 8);
              if (v42 >= *(_QWORD *)(a3 + 16))
              {
                v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)__dst);
              }
              else
              {
                if ((__dst[23] & 0x80000000) != 0)
                {
                  std::string::__init_copy_ctor_external(*(std::string **)(a3 + 8), *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
                }
                else
                {
                  v43 = *(_OWORD *)__dst;
                  *(_QWORD *)(v42 + 16) = *(_QWORD *)&__dst[16];
                  *(_OWORD *)v42 = v43;
                }
                v44 = (std::string *)(v42 + 24);
                *(_QWORD *)(a3 + 8) = v42 + 24;
              }
              *(_QWORD *)(a3 + 8) = v44;
              v50 = 1;
            }
          }
LABEL_73:
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          v9 = readdir(v8);
          if (!v9)
            goto LABEL_85;
        }
        v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v14 = v11 | 7;
        v15 = v14 + 1;
        v13 = operator new(v14 + 1);
        *(_QWORD *)&__dst[8] = v12;
        *(_QWORD *)&__dst[16] = v15 | 0x8000000000000000;
        *(_QWORD *)__dst = v13;
LABEL_12:
        memmove(v13, d_name, v12);
        goto LABEL_13;
      }
      v50 = 0;
LABEL_85:
      closedir(v8);
      return v50 & 1;
    }
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v46 = qword_2579B8A80;
    result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v46 = qword_2579B8A80;
    result = os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v48 = __error();
  v49 = strerror(*v48);
  v59.st_dev = 136315394;
  *(_QWORD *)&v59.st_mode = a1;
  WORD2(v59.st_ino) = 2080;
  *(__darwin_ino64_t *)((char *)&v59.st_ino + 6) = (__darwin_ino64_t)v49;
  _os_log_error_impl(&dword_24B855000, v46, OS_LOG_TYPE_ERROR, "Error %s (%s)\n", (uint8_t *)&v59, 0x16u);
  return 0;
}

void sub_24B8DA5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  uint64_t v49;
  uint64_t v50;

  *(_QWORD *)(v49 + 8) = v50;
  if (a30 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_24B8DA7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ifstream::~ifstream(&a9);
  _Unwind_Resume(a1);
}

void support::fs::getBasePath(const std::string::value_type **a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  size_t v4;
  size_t v5;
  std::string::size_type size;
  char v7;
  std::string *p_p;
  unsigned __int8 *v9;
  BOOL v10;
  BOOL v11;
  size_t v12;
  __int128 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  std::string __p;

  v2 = (unsigned __int8 *)a1;
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
    {
      std::string::__init_copy_ctor_external((std::string *)a2, *a1, 0);
      return;
    }
  }
  else if (!*((_BYTE *)a1 + 23))
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = a1[2];
    return;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  memset(&__p, 170, sizeof(__p));
  support::fs::getFileName(&__p);
  v4 = *((_QWORD *)v2 + 1);
  if ((v2[23] & 0x80u) == 0)
  {
    v5 = v2[23];
  }
  else
  {
    v2 = *(unsigned __int8 **)v2;
    v5 = v4;
  }
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  v9 = &v2[v5];
  if (v5)
    v10 = size == 0;
  else
    v10 = 1;
  if (v10)
  {
    v15 = &v2[v5];
  }
  else
  {
    v14 = v2;
    v15 = &v2[v5];
    do
    {
      if (*v14 == p_p->__r_.__value_.__s.__data_[0])
      {
        v16 = 1;
        while (size != v16)
        {
          if (&v14[v16] == v9)
            goto LABEL_20;
          v17 = v14[v16];
          v18 = p_p->__r_.__value_.__s.__data_[v16++];
          if (v17 != v18)
            goto LABEL_37;
        }
        v15 = v14;
      }
LABEL_37:
      ++v14;
    }
    while (v14 != v9);
  }
LABEL_20:
  v11 = v15 != v9 || size == 0;
  if (v11 && v15 - v2 != -1)
  {
    if (v5 >= v15 - v2)
      v12 = v15 - v2;
    else
      v12 = v5;
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v12 >= 0x17)
    {
      v19 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v19 = v12 | 7;
      v20 = v19 + 1;
      v13 = (__int128 *)operator new(v19 + 1);
      *((_QWORD *)&v21 + 1) = v12;
      v22 = v20 | 0x8000000000000000;
      *(_QWORD *)&v21 = v13;
    }
    else
    {
      HIBYTE(v22) = v12;
      v13 = &v21;
      if (!v12)
      {
        LOBYTE(v21) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        {
LABEL_33:
          *(_OWORD *)a2 = v21;
          *(_QWORD *)(a2 + 16) = v22;
          v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          goto LABEL_34;
        }
LABEL_49:
        operator delete(*(void **)a2);
        goto LABEL_33;
      }
    }
    memmove(v13, v2, v12);
    *((_BYTE *)v13 + v12) = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_49;
  }
LABEL_34:
  if (v7 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_24B8DA9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void support::fs::getLastNumberDir(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string::size_type v7;
  std::string::size_type v8;
  int v9;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string::size_type v12;
  int v13;
  size_t v14;
  unint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  void **v23;
  void **v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  char *v31;
  char *v32;
  unsigned int v33;
  void *v34;
  __int128 v35;
  std::string *v36;
  unsigned int v37;
  std::string::size_type v38;
  std::string::size_type v39;
  void **v40;
  int v41;
  size_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  void **v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::string v59;
  std::string v60;
  std::string __p;
  std::locale v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::string v68;
  void *v69;
  void **v70;
  uint64_t v71;
  _BYTE v72[48];
  __int128 v73;
  void *__dst[3];
  std::string v75;
  std::string v76;
  std::string v77;

  memset(&v77, 170, sizeof(v77));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v77 = *(std::string *)a1;
  v4 = (std::string *)v77.__r_.__value_.__r.__words[0];
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v77;
  else
    v5 = (std::string *)v77.__r_.__value_.__r.__words[0];
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
  else
    size = v77.__r_.__value_.__l.__size_;
  v7 = size + 1;
  do
  {
    v8 = v7 - 1;
    if (v7 == 1)
      goto LABEL_20;
    v9 = v5->__r_.__value_.__s.__data_[v7-- - 2];
  }
  while (v9 == 47);
  if (v8)
  {
    v10 = v8 - 1;
    if ((*((_BYTE *)&v77.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (v77.__r_.__value_.__l.__size_ > v10)
      {
        v77.__r_.__value_.__l.__size_ = v8;
        goto LABEL_19;
      }
    }
    else if (v10 < HIBYTE(v77.__r_.__value_.__r.__words[2]))
    {
      *((_BYTE *)&v77.__r_.__value_.__s + 23) = v8 & 0x7F;
      v4 = &v77;
LABEL_19:
      v4->__r_.__value_.__s.__data_[v8] = 0;
      goto LABEL_20;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
LABEL_20:
  memset(&v76, 170, sizeof(v76));
  support::fs::getBasePath((const std::string::value_type **)&v77.__r_.__value_.__l.__data_, (uint64_t)&v76);
  v11 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = v77.__r_.__value_.__l.__size_;
  if (!v11)
    goto LABEL_33;
  v12 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
  if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v12 = v76.__r_.__value_.__l.__size_;
  if (!v12)
  {
LABEL_33:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_132;
      goto LABEL_137;
    }
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    goto LABEL_131;
  }
  memset(&v75, 170, sizeof(v75));
  support::fs::getFileName(&v75);
  v13 = SHIBYTE(v75.__r_.__value_.__r.__words[2]);
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
  else
    v14 = v75.__r_.__value_.__l.__size_;
  v15 = v14 + 13;
  memset(__dst, 170, sizeof(__dst));
  if (v14 + 13 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v16 = (void **)operator new(v17 + 1);
    __dst[1] = (void *)(v14 + 13);
    __dst[2] = (void *)(v18 | 0x8000000000000000);
    __dst[0] = v16;
  }
  else
  {
    memset(__dst, 0, sizeof(__dst));
    v16 = __dst;
    HIBYTE(__dst[2]) = v14 + 13;
    if (!v14)
      goto LABEL_44;
  }
  if (v13 >= 0)
    v19 = &v75;
  else
    v19 = (std::string *)v75.__r_.__value_.__r.__words[0];
  memmove(v16, v19, v14);
LABEL_44:
  strcpy((char *)v16 + v14, "-[[:alnum:]]*");
  *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v72[32] = v20;
  v73 = v20;
  *(_OWORD *)v72 = v20;
  *(_OWORD *)&v72[16] = v20;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v72, (uint64_t)__dst, 0);
  v69 = 0;
  v70 = 0;
  v71 = 0;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v68, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  else
    v68 = v76;
  std::locale::locale(&v62, (const std::locale *)v72);
  v63 = *(_OWORD *)&v72[8];
  v64 = *(_OWORD *)&v72[24];
  v65 = *(_QWORD *)&v72[40];
  v66 = (std::__shared_weak_count *)v73;
  if ((_QWORD)v73)
  {
    v21 = (unint64_t *)(v73 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v67 = *((_QWORD *)&v73 + 1);
  if (!support::fs::getFilteredFiles((const char *)&v68, (uint64_t)&v62, (uint64_t)&v69, 0))
  {
    v28 = v66;
    if (v66)
    {
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    std::locale::~locale(&v62);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    goto LABEL_89;
  }
  v23 = (void **)v69;
  v24 = v70;
  v25 = v66;
  if (v66)
  {
    v26 = (unint64_t *)&v66->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  std::locale::~locale(&v62);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v68.__r_.__value_.__l.__data_);
    if (v23 == v24)
    {
LABEL_89:
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      {
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
        a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
        v40 = (void **)v69;
        if (!v69)
          goto LABEL_125;
        goto LABEL_118;
      }
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
LABEL_117:
      v40 = (void **)v69;
      if (!v69)
        goto LABEL_125;
      goto LABEL_118;
    }
  }
  else if (v23 == v24)
  {
    goto LABEL_89;
  }
  v31 = (char *)v69;
  v32 = (char *)v70;
  if (v69 != v70)
  {
    v33 = 0;
    while (1)
    {
      memset(&__p, 170, sizeof(__p));
      ctu::tokenize();
      memset(&v60, 170, sizeof(v60));
      if (*(char *)(__p.__r_.__value_.__l.__size_ - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(__p.__r_.__value_.__l.__size_ - 24), *(_QWORD *)(__p.__r_.__value_.__l.__size_ - 16));
      }
      else
      {
        v35 = *(_OWORD *)(__p.__r_.__value_.__l.__size_ - 24);
        v60.__r_.__value_.__r.__words[2] = *(_QWORD *)(__p.__r_.__value_.__l.__size_ - 8);
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v35;
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v60;
      else
        v36 = (std::string *)v60.__r_.__value_.__r.__words[0];
      v37 = strtol((const char *)v36, 0, 0);
      if (v33 <= v37)
        v33 = v37;
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v60.__r_.__value_.__l.__data_);
        v38 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
        {
LABEL_84:
          v39 = __p.__r_.__value_.__l.__size_;
          v34 = (void *)v38;
          if (__p.__r_.__value_.__l.__size_ != v38)
          {
            do
            {
              if (*(char *)(v39 - 1) < 0)
                operator delete(*(void **)(v39 - 24));
              v39 -= 24;
            }
            while (v39 != v38);
            v34 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          __p.__r_.__value_.__l.__size_ = v38;
          operator delete(v34);
        }
      }
      else
      {
        v38 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
          goto LABEL_84;
      }
      v31 += 24;
      if (v31 == v32)
        goto LABEL_94;
    }
  }
  v33 = 0;
LABEL_94:
  v41 = SHIBYTE(v77.__r_.__value_.__r.__words[2]);
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
  else
    v42 = v77.__r_.__value_.__l.__size_;
  v43 = v42 + 1;
  memset(&v60, 170, sizeof(v60));
  if (v42 + 1 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v43 >= 0x17)
  {
    v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v45 = v43 | 7;
    v46 = v45 + 1;
    v44 = (char *)operator new(v45 + 1);
    v60.__r_.__value_.__l.__size_ = v42 + 1;
    v60.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
    v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  }
  else
  {
    memset(&v60, 0, sizeof(v60));
    v44 = (char *)&v60;
    *((_BYTE *)&v60.__r_.__value_.__s + 23) = v42 + 1;
    if (!v42)
      goto LABEL_108;
  }
  if (v41 >= 0)
    v47 = &v77;
  else
    v47 = (std::string *)v77.__r_.__value_.__r.__words[0];
  memmove(v44, v47, v42);
LABEL_108:
  *(_WORD *)&v44[v42] = 45;
  std::to_string(&v59, v33);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = &v59;
  else
    v48 = (std::string *)v59.__r_.__value_.__r.__words[0];
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  else
    v49 = v59.__r_.__value_.__l.__size_;
  v50 = std::string::append(&v60, (const std::string::value_type *)v48, v49);
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  v52 = std::string::append(&__p, "/", 1uLL);
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_116:
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_117;
      goto LABEL_141;
    }
  }
  else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_116;
  }
  operator delete(v59.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_117;
LABEL_141:
  operator delete(v60.__r_.__value_.__l.__data_);
  v40 = (void **)v69;
  if (!v69)
    goto LABEL_125;
LABEL_118:
  v54 = v70;
  v55 = v40;
  if (v70 != v40)
  {
    do
    {
      if (*((char *)v54 - 1) < 0)
        operator delete(*(v54 - 3));
      v54 -= 3;
    }
    while (v54 != v40);
    v55 = v69;
  }
  v70 = v40;
  operator delete(v55);
LABEL_125:
  v56 = (std::__shared_weak_count *)v73;
  if (!(_QWORD)v73)
    goto LABEL_129;
  v57 = (unint64_t *)(v73 + 8);
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 - 1, v57));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
    std::locale::~locale((std::locale *)v72);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    {
LABEL_130:
      if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_131;
      goto LABEL_136;
    }
  }
  else
  {
LABEL_129:
    std::locale::~locale((std::locale *)v72);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_130;
  }
  operator delete(__dst[0]);
  if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_131:
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_132;
    goto LABEL_137;
  }
LABEL_136:
  operator delete(v75.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_132:
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_138:
    operator delete(v77.__r_.__value_.__l.__data_);
    return;
  }
LABEL_137:
  operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_138;
}

void sub_24B8DB164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::locale a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,uint64_t a46,std::locale a47)
{
  uint64_t v47;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
      {
LABEL_8:
        std::vector<std::string>::~vector[abi:ne180100](&a44);
        std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a47);
        if (*(char *)(v47 - 161) < 0)
        {
          operator delete(*(void **)(v47 - 184));
          if ((*(char *)(v47 - 137) & 0x80000000) == 0)
          {
LABEL_10:
            if ((*(char *)(v47 - 113) & 0x80000000) == 0)
              goto LABEL_11;
            goto LABEL_15;
          }
        }
        else if ((*(char *)(v47 - 137) & 0x80000000) == 0)
        {
          goto LABEL_10;
        }
        operator delete(*(void **)(v47 - 160));
        if ((*(char *)(v47 - 113) & 0x80000000) == 0)
        {
LABEL_11:
          if ((*(char *)(v47 - 89) & 0x80000000) == 0)
            goto LABEL_12;
          goto LABEL_16;
        }
LABEL_15:
        operator delete(*(void **)(v47 - 136));
        if ((*(char *)(v47 - 89) & 0x80000000) == 0)
LABEL_12:
          _Unwind_Resume(a1);
LABEL_16:
        operator delete(*(void **)(v47 - 112));
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a16);
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a21 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL support::fs::getPartitionInfo(uint64_t a1, _QWORD *a2, _QWORD *a3, unint64_t *a4)
{
  int v7;
  _BOOL8 result;
  int v9;
  uint64_t f_bavail;
  statvfs v11;

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23))
    {
      memset(&v11, 0, sizeof(v11));
      v7 = statvfs((const char *)a1, &v11);
      result = v7 == 0;
      if (v7)
        return result;
LABEL_7:
      *a4 = v11.f_frsize;
      f_bavail = v11.f_bavail;
      *a2 = v11.f_blocks;
      *a3 = f_bavail;
      return result;
    }
    return 0;
  }
  if (!*(_QWORD *)(a1 + 8))
    return 0;
  memset(&v11, 0, sizeof(v11));
  v9 = statvfs(*(const char **)a1, &v11);
  result = v9 == 0;
  if (!v9)
    goto LABEL_7;
  return result;
}

_QWORD *support::fs::readCurrentLine@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  std::locale v9[16];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::istream::tellg();
  v4 = v10;
  if (v10 >= 2)
  {
    do
    {
      std::istream::seekg();
      if (std::istream::peek() == 10)
        break;
    }
    while (v4-- > 1);
  }
  std::istream::seekg();
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v6 = std::locale::use_facet(v9, MEMORY[0x24BEDB350]);
  v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(v9);
  return std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)a2, v7);
}

void sub_24B8DB4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void sub_24B8DB4C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  v11 = -86;
  MEMORY[0x24BD299F4](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_24B8DB61C(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x24B8DB5E8);
  }
  __cxa_rethrow();
}

void sub_24B8DB660(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t asString@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  _BYTE *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void *__src[2];
  void *__p[2];
  __int128 v32;
  __int128 v33;
  _OWORD v34[9];
  unint64_t v35;

  v35 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34[7] = v4;
  v34[8] = v4;
  v34[5] = v4;
  v34[6] = v4;
  v34[3] = v4;
  v34[4] = v4;
  v34[1] = v4;
  v34[2] = v4;
  v33 = v4;
  v34[0] = v4;
  *(_OWORD *)__p = v4;
  v32 = v4;
  v29 = v4;
  *(_OWORD *)__src = v4;
  v27 = v4;
  v28 = v4;
  v26 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v26);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Time: ", 6);
  v6 = *(char *)(a1 + 23);
  if (v6 >= 0)
    v7 = a1;
  else
    v7 = *(_QWORD *)a1;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; Mode: ", 8);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; Action: ", 10);
  v14 = *(_QWORD *)(a1 + 32);
  v13 = a1 + 32;
  v12 = v14;
  v15 = *(char *)(v13 + 23);
  if (v15 >= 0)
    v16 = v13;
  else
    v16 = v12;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(v13 + 23);
  else
    v17 = *(_QWORD *)(v13 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v16, v17);
  if ((BYTE8(v33) & 0x10) != 0)
  {
    v19 = (_BYTE *)v33;
    if ((void *)v33 < __src[1])
    {
      *(void **)&v33 = __src[1];
      v19 = __src[1];
    }
    v20 = __src[0];
    v18 = v19 - (char *)__src[0];
    if ((unint64_t)(v19 - (char *)__src[0]) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
  }
  else
  {
    if ((BYTE8(v33) & 8) == 0)
    {
      v18 = 0;
      a2[23] = 0;
      goto LABEL_26;
    }
    v20 = (const void *)*((_QWORD *)&v28 + 1);
    v18 = *((_QWORD *)&v29 + 1) - *((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v29 + 1) - *((_QWORD *)&v28 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_30:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v23 = operator new(v21 + 1);
    *((_QWORD *)a2 + 1) = v18;
    *((_QWORD *)a2 + 2) = v22 | 0x8000000000000000;
    *(_QWORD *)a2 = v23;
    a2 = v23;
    goto LABEL_25;
  }
  a2[23] = v18;
  if (v18)
LABEL_25:
    memmove(a2, v20, v18);
LABEL_26:
  a2[v18] = 0;
  *(_QWORD *)&v26 = *MEMORY[0x24BEDB7F0];
  v24 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v26 + *(_QWORD *)(v26 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v27 = v24;
  *((_QWORD *)&v27 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v32) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x24BD29B5C](v34);
}

void sub_24B8DB890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BBLogTracker::addLog(uint64_t **a1, __int128 *a2, int a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *v7;
  std::string *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string *v17;
  unint64_t v18;
  int v19;
  __int128 *v20;

  v19 = a3;
  v17 = (std::string *)0xAAAAAAAAAAAAAAAALL;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  std::allocate_shared[abi:ne180100]<LogInfo,std::allocator<LogInfo>,std::string const&,abm::helper::SystemLogsMode &,std::string const&,void>((uint64_t)a2, &v19, a4, &v17);
  v20 = a2;
  v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, (uint64_t)&std::piecewise_construct, &v20);
  v8 = v17;
  v7 = (uint64_t *)v18;
  if (v18)
  {
    v9 = (unint64_t *)(v18 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)v6[8];
  v6[7] = (uint64_t *)v8;
  v6[8] = v7;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    v15 = (unint64_t *)(v18 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_24B8DB9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *BBLogTracker::getLog@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a3 = 0;
  a3[1] = 0;
  result = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(a1, a2);
  if ((uint64_t *)(a1 + 8) != result)
  {
    v7 = result[7];
    v6 = result[8];
    if (v6)
    {
      v8 = (unint64_t *)(v6 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    *a3 = v7;
    a3[1] = v6;
  }
  return result;
}

void sub_24B8DBA10(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *BBLogTracker::limitLogs(uint64_t *this, unsigned int a2)
{
  unint64_t v2;
  uint64_t *v3;

  v2 = a2;
  if (this[2] > (unint64_t)a2)
  {
    v3 = this;
    do
      this = std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::erase(v3, *v3);
    while (v3[2] > v2);
  }
  return this;
}

void BBLogTracker::getLastLog(BBLogTracker *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  __darwin_time_t tv_sec;
  __darwin_suseconds_t tv_usec;
  uint64_t v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _DWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  const void *v28;
  _QWORD *v29;
  const void *v30;
  int v31;
  const void *v32;
  size_t v33;
  int v34;
  void *v35;
  _QWORD *v36;
  size_t v37;
  size_t v38;
  int v39;
  int v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD v47[2];
  unsigned __int8 v48;
  _QWORD v49[3];
  timeval v50;

  *a3 = 0;
  a3[1] = 0;
  if (!*((_QWORD *)this + 2))
    return;
  if (a2)
  {
    v50.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v50.tv_usec = 0xAAAAAAAAAAAAAAAALL;
    gettimeofday(&v50, 0);
    tv_sec = v50.tv_sec;
    tv_usec = v50.tv_usec;
    if (v50.tv_usec >= 0)
      v8 = v50.tv_usec;
    else
      v8 = (v50.tv_usec + 1000000);
    memset(v49, 170, sizeof(v49));
    Timestamp::Timestamp((Timestamp *)v49);
    if (v49[1])
    {
      v9 = (uint64_t *)v49[1];
      while (1)
      {
        while (1)
        {
          v11 = (uint64_t **)v9;
          v12 = *((_DWORD *)v9 + 8);
          if (v12 < 1)
            break;
          v9 = *v11;
          v10 = v11;
          if (!*v11)
            goto LABEL_22;
        }
        if ((v12 & 0x80000000) == 0)
          break;
        v9 = v11[1];
        if (!v9)
        {
          v10 = v11 + 1;
          goto LABEL_22;
        }
      }
      v21 = v11;
    }
    else
    {
      v10 = (uint64_t **)&v49[1];
      v11 = (uint64_t **)&v49[1];
LABEL_22:
      v21 = operator new(0x38uLL);
      v21[8] = 0;
      *((_QWORD *)v21 + 5) = 0;
      *((_QWORD *)v21 + 6) = 0;
      *(_QWORD *)v21 = 0;
      *((_QWORD *)v21 + 1) = 0;
      *((_QWORD *)v21 + 2) = v11;
      *v10 = (uint64_t *)v21;
      v22 = (uint64_t *)v21;
      if (*(_QWORD *)v49[0])
      {
        v49[0] = *(_QWORD *)v49[0];
        v22 = *v10;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v49[1], v22);
      ++v49[2];
    }
    *((_QWORD *)v21 + 5) = tv_sec - a2 + (tv_usec >> 31);
    *((_QWORD *)v21 + 6) = v8 | 0xAAAAAAAA00000000;
    v25 = (_QWORD *)*((_QWORD *)this + 1);
    v24 = (_QWORD *)((char *)this + 8);
    v23 = v25;
    if (v25)
    {
      do
      {
        v26 = v23;
        v23 = (_QWORD *)v23[1];
      }
      while (v23);
    }
    else
    {
      v27 = v24;
      do
      {
        v26 = (_QWORD *)v27[2];
        v16 = *v26 == (_QWORD)v27;
        v27 = v26;
      }
      while (v16);
    }
    Timestamp::asString((uint64_t)v49, 0, 9, v47);
    v30 = (const void *)v26[4];
    v29 = v26 + 4;
    v28 = v30;
    v31 = *((char *)v29 + 23);
    if (v31 >= 0)
      v32 = v29;
    else
      v32 = v28;
    if (v31 >= 0)
      v33 = *((unsigned __int8 *)v29 + 23);
    else
      v33 = v29[1];
    v34 = (char)v48;
    v35 = (void *)v47[0];
    if ((v48 & 0x80u) == 0)
      v36 = v47;
    else
      v36 = (_QWORD *)v47[0];
    if ((v48 & 0x80u) == 0)
      v37 = v48;
    else
      v37 = v47[1];
    if (v37 >= v33)
      v38 = v33;
    else
      v38 = v37;
    v39 = memcmp(v32, v36, v38);
    if (v39)
    {
      if ((v39 & 0x80000000) == 0)
        goto LABEL_47;
    }
    else if (v33 >= v37)
    {
LABEL_47:
      v40 = 1;
      if ((v34 & 0x80000000) == 0)
      {
LABEL_49:
        if (v40)
        {
          v41 = (_QWORD *)*v24;
          if (*v24)
          {
            do
            {
              v42 = v41;
              v41 = (_QWORD *)v41[1];
            }
            while (v41);
          }
          else
          {
            do
            {
              v42 = (_QWORD *)v24[2];
              v16 = *v42 == (_QWORD)v24;
              v24 = v42;
            }
            while (v16);
          }
          v44 = v42[7];
          v43 = v42[8];
          if (v43)
          {
            v45 = (unint64_t *)(v43 + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          *a3 = v44;
          a3[1] = v43;
        }
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v49, (_QWORD *)v49[1]);
        return;
      }
LABEL_48:
      operator delete(v35);
      goto LABEL_49;
    }
    v40 = 0;
    if ((v34 & 0x80000000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
  v14 = (char *)this + 8;
  v13 = (char *)*((_QWORD *)this + 1);
  if (v13)
  {
    do
    {
      v15 = v13;
      v13 = (char *)*((_QWORD *)v13 + 1);
    }
    while (v13);
  }
  else
  {
    do
    {
      v15 = (char *)*((_QWORD *)v14 + 2);
      v16 = *(_QWORD *)v15 == (_QWORD)v14;
      v14 = v15;
    }
    while (v16);
  }
  v18 = *((_QWORD *)v15 + 7);
  v17 = *((_QWORD *)v15 + 8);
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *a3 = v18;
  a3[1] = v17;
}

void sub_24B8DBD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  _QWORD *v5;
  va_list va;

  va_start(va, a4);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)va, v5);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void sub_24B8DBD48(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t BBLogTracker::count(BBLogTracker *this)
{
  return *((unsigned int *)this + 4);
}

void std::allocate_shared[abi:ne180100]<LogInfo,std::allocator<LogInfo>,std::string const&,abm::helper::SystemLogsMode &,std::string const&,void>(uint64_t a1@<X1>, int *a2@<X2>, uint64_t a3@<X3>, std::string **a4@<X8>)
{
  std::string *v8;
  std::string *v9;
  std::string *v10;
  int v11;
  std::string *v12;

  v8 = (std::string *)operator new(0x50uLL);
  v9 = v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)off_251CBD5E0;
  v10 = v8 + 1;
  v11 = *a2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8 + 1, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v8[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  LODWORD(v9[2].__r_.__value_.__l.__data_) = v11;
  v12 = (std::string *)((char *)v9 + 56);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9[3].__r_.__value_.__r.__words[0] = *(_QWORD *)(a3 + 16);
  }
  *a4 = v10;
  a4[1] = v9;
}

void sub_24B8DBE2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v2);
    std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
    operator delete(v4);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LogInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_251CBD5E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LogInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_251CBD5E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<LogInfo>::__on_zero_shared(uint64_t a1)
{
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*(void **)(a1 + 24));
    return;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_5;
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  size_t v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::string *v22;
  __int128 *v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v26;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    while (1)
    {
      v11 = (uint64_t **)v6;
      v14 = (const void *)v6[4];
      v12 = v6 + 4;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = v13;
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = v12[1];
      if (v17 >= v10)
        v18 = v10;
      else
        v18 = v17;
      v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_8;
LABEL_22:
        v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            return v11;
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        v6 = v11[1];
        if (!v6)
        {
          v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17)
          goto LABEL_22;
LABEL_8:
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_29;
      }
    }
  }
  v11 = a1 + 1;
LABEL_29:
  v21 = operator new(0x48uLL);
  v22 = (std::string *)(v21 + 4);
  v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
  }
  else
  {
    v24 = *v23;
    v21[6] = *((_QWORD *)v23 + 2);
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v24;
  }
  v21[7] = 0;
  v21[8] = 0;
  *v21 = 0;
  v21[1] = 0;
  v21[2] = v11;
  *v7 = v21;
  v25 = (uint64_t *)**a1;
  v26 = v21;
  if (v25)
  {
    *a1 = v25;
    v26 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_24B8DC064(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::erase(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = *(_QWORD **)(a2 + 8);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = (_QWORD *)a2;
    do
    {
      v4 = (_QWORD *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  v8 = *(std::__shared_weak_count **)(a2 + 64);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  if (*(char *)(a2 + 55) < 0)
LABEL_14:
    operator delete(*(void **)(a2 + 32));
LABEL_15:
  operator delete((void *)a2);
  return v4;
}

uint64_t HealthEvent::HealthEvent(uint64_t result, char a2, uint64_t a3)
{
  *(_QWORD *)result = off_251CBD630;
  *(_BYTE *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

{
  *(_QWORD *)result = off_251CBD630;
  *(_BYTE *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

uint64_t HealthEvent::HealthEvent(uint64_t a1, char a2, uint64_t a3)
{
  std::string __p;

  *(_QWORD *)a1 = off_251CBD630;
  *(_BYTE *)(a1 + 8) = a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  *(_QWORD *)(a1 + 16) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

{
  std::string __p;

  *(_QWORD *)a1 = off_251CBD630;
  *(_BYTE *)(a1 + 8) = a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  *(_QWORD *)(a1 + 16) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_24B8DC214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_24B8DC2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t HealthEvent::getType(HealthEvent *this)
{
  return *((char *)this + 8);
}

void HealthEvent::getTime(HealthEvent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _QWORD *v6[2];

  v3 = *((_QWORD *)this + 2);
  v4 = operator new(0x38uLL);
  v4[8] = 0;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = v6;
  v5 = v4;
  v6[0] = v4;
  *((_BYTE *)v4 + 24) = 1;
  v6[1] = (_QWORD *)1;
  *((_QWORD *)v4 + 5) = v3;
  *((_QWORD *)v4 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v5, 0, 9, a2);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v5, v6[0]);
}

void sub_24B8DC36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t HealthEvent::getChronoTime(HealthEvent *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t HealthEvent::setType(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

void HealthEvent::setTime(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  *(_QWORD *)(a1 + 16) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_24B8DC410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t HealthEvent::setTime(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t HealthEvent::asString@<X0>(HealthEvent *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  size_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v26;
  _BYTE v27[24];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33[2];
  __int128 v34;
  __int128 v35;
  _OWORD v36[9];
  unint64_t v37;
  _QWORD **v38;
  _QWORD *v39;
  uint64_t v40;

  v37 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[7] = v4;
  v36[8] = v4;
  v36[5] = v4;
  v36[6] = v4;
  v36[3] = v4;
  v36[4] = v4;
  v36[1] = v4;
  v36[2] = v4;
  v35 = v4;
  v36[0] = v4;
  *(_OWORD *)v33 = v4;
  v34 = v4;
  v31 = v4;
  v32 = v4;
  v29 = v4;
  v30 = v4;
  v28 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v28);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"HealthEvent { Type='", 20);
  switch(*((_BYTE *)this + 8))
  {
    case 1:
      v6 = 12;
      v27[23] = 12;
      *(_DWORD *)&v27[8] = 1701999980;
      v7 = "boot failure";
      goto LABEL_7;
    case 2:
      v8 = (char *)operator new(0x19uLL);
      *(_QWORD *)v27 = v8;
      *(_OWORD *)&v27[8] = xmmword_24B9518A0;
      strcpy(v8, "boot attempts exhausted");
      v6 = 23;
      goto LABEL_10;
    case 3:
      v6 = 12;
      v27[23] = 12;
      *(_DWORD *)&v27[8] = 1936942435;
      v7 = "ping success";
      goto LABEL_7;
    case 4:
      v6 = 12;
      v27[23] = 12;
      *(_DWORD *)&v27[8] = 1701999980;
      v7 = "ping failure";
LABEL_7:
      *(_QWORD *)v27 = *(_QWORD *)v7;
      v27[12] = 0;
      break;
    case 5:
      v6 = 11;
      v27[23] = 11;
      strcpy(v27, "erasing efs");
      break;
    default:
      v6 = 7;
      v27[23] = 7;
      strcpy(v27, "unknown");
      break;
  }
  v8 = v27;
LABEL_10:
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v8, v6);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"' Time='", 8);
  v11 = *((_QWORD *)this + 2);
  v39 = 0;
  v40 = 0;
  v38 = &v39;
  v12 = operator new(0x38uLL);
  v12[8] = 0;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = &v39;
  v38 = (_QWORD **)v12;
  v39 = v12;
  *((_BYTE *)v12 + 24) = 1;
  v40 = 1;
  *((_QWORD *)v12 + 5) = v11;
  *((_QWORD *)v12 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v38, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v38, v39);
  if ((v26 & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((v26 & 0x80u) == 0)
    v14 = v26;
  else
    v14 = (uint64_t)__p[1];
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"' }", 3);
  if ((char)v26 < 0)
  {
    operator delete(__p[0]);
    if ((v27[23] & 0x80000000) == 0)
    {
LABEL_18:
      v16 = BYTE8(v35);
      if ((BYTE8(v35) & 0x10) == 0)
        goto LABEL_19;
LABEL_23:
      v18 = v35;
      if ((unint64_t)v35 < *((_QWORD *)&v32 + 1))
      {
        *(_QWORD *)&v35 = *((_QWORD *)&v32 + 1);
        v18 = *((_QWORD *)&v32 + 1);
      }
      v19 = (const void *)v32;
      v17 = v18 - v32;
      if ((unint64_t)(v18 - v32) >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_37;
      goto LABEL_26;
    }
  }
  else if ((v27[23] & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(*(void **)v27);
  v16 = BYTE8(v35);
  if ((BYTE8(v35) & 0x10) != 0)
    goto LABEL_23;
LABEL_19:
  if ((v16 & 8) == 0)
  {
    v17 = 0;
    a2[23] = 0;
    goto LABEL_33;
  }
  v19 = (const void *)*((_QWORD *)&v30 + 1);
  v17 = *((_QWORD *)&v31 + 1) - *((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v31 + 1) - *((_QWORD *)&v30 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_37:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_26:
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    v22 = operator new(v20 + 1);
    *((_QWORD *)a2 + 1) = v17;
    *((_QWORD *)a2 + 2) = v21 | 0x8000000000000000;
    *(_QWORD *)a2 = v22;
    a2 = v22;
    goto LABEL_32;
  }
  a2[23] = v17;
  if (v17)
LABEL_32:
    memmove(a2, v19, v17);
LABEL_33:
  a2[v17] = 0;
  *(_QWORD *)&v28 = *MEMORY[0x24BEDB7F0];
  v23 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v29 = v23;
  *((_QWORD *)&v29 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v34) < 0)
    operator delete(v33[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x24BD29B5C](v36);
}

void sub_24B8DC7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B8DC80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v21 - 72, *(_QWORD **)(v21 - 64));
  if (a20 < 0)
  {
    operator delete(__p);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_24B8DC894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

char *HealthEvent::toString@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  switch((int)result)
  {
    case 1:
      *(_BYTE *)(a2 + 23) = 12;
      strcpy((char *)a2, "boot failure");
      break;
    case 2:
      result = (char *)operator new(0x19uLL);
      *(_QWORD *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_24B9518A0;
      strcpy(result, "boot attempts exhausted");
      break;
    case 3:
      *(_BYTE *)(a2 + 23) = 12;
      strcpy((char *)a2, "ping success");
      break;
    case 4:
      *(_BYTE *)(a2 + 23) = 12;
      strcpy((char *)a2, "ping failure");
      break;
    case 5:
      *(_BYTE *)(a2 + 23) = 11;
      strcpy((char *)a2, "erasing efs");
      break;
    default:
      *(_BYTE *)(a2 + 23) = 7;
      strcpy((char *)a2, "unknown");
      break;
  }
  return result;
}

void BootModule::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13[2];
  __int128 v14;

  *a2 = 0;
  a2[1] = 0;
  if (capabilities::radio::vendor((capabilities::radio *)a1) == 1)
  {
    v4 = operator new(0x1E8uLL);
    v5 = (uint64_t)v4;
    v6 = *a1;
    v7 = (std::__shared_weak_count *)a1[1];
    v13[0] = v6;
    v13[1] = (uint64_t)v7;
    if (v7)
    {
      p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
    }
    v12[0] = 0;
    v12[1] = 0;
    BootModule::BootModule((uint64_t)v4, v13, v12);
    *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    std::shared_ptr<BootModule>::shared_ptr[abi:ne180100]<BootModule,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1},void>(&v14, v5);
    ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v14 + 48);
    v10 = v14;
    v14 = 0uLL;
    *(_OWORD *)a2 = v10;
    if (v7)
    {
      v11 = v10;
      std::__shared_weak_count::__release_weak(v7);
      *(_QWORD *)&v10 = v11;
    }
    BootModule::init((BootModule *)v10);
  }
}

void sub_24B8DCAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void sub_24B8DCB6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BootModule::init(BootModule *this)
{
  std::__shared_weak_count *v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD *v18;
  _QWORD block[6];

  v5 = *((_QWORD *)this + 15);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  v4 = (char *)this + 120;
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = MEMORY[0x24BDAC760];
  v16[0] = MEMORY[0x24BDAC760];
  v16[1] = 1174405120;
  v16[2] = ___ZN10BootModule4initEv_block_invoke;
  v16[3] = &__block_descriptor_tmp_16_2;
  v16[4] = this;
  v16[5] = v5;
  v17 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v18 = v16;
  block[0] = v12;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI10BootModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_142_0;
  block[4] = v4;
  block[5] = &v18;
  v14 = *((_QWORD *)this + 17);
  if (!*((_QWORD *)this + 18))
  {
    dispatch_sync(v14, block);
    v15 = v17;
    if (!v17)
      goto LABEL_14;
    goto LABEL_13;
  }
  dispatch_async_and_wait(v14, block);
  v15 = v17;
  if (v17)
LABEL_13:
    std::__shared_weak_count::__release_weak(v15);
LABEL_14:
  std::__shared_weak_count::__release_weak(v7);
}

uint64_t BootModule::BootModule(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unsigned __int8 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  NSObject *initially_inactive;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  config::hw *v22;
  const char *v23;
  size_t v24;
  std::string::size_type v25;
  std::string *p_dst;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  NSObject *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  void *v37[2];
  char v38;
  std::string __dst;
  uint64_t v40;
  uint64_t v41;
  void *__p[2];
  void (*v43)(uint64_t);
  void *v44;
  uint64_t *v45;

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_251CC0DB8;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(_QWORD *)a1 = &unk_251CB9EC8;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_251CB9EC8;
    *(_QWORD *)(a1 + 8) = v5;
  }
  *(_QWORD *)a1 = off_251CBD660;
  *(_QWORD *)(a1 + 48) = &unk_251CBD6E8;
  v11 = (_QWORD *)(a1 + 48);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v37, "com.apple.telephony.abm", "boot.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  __p[0] = (void *)MEMORY[0x24BDAC760];
  __p[1] = (void *)0x40000000;
  v43 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v44 = &__block_descriptor_tmp_13_5;
  v45 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v14 = GetABMLogServer(void)::sLogServer;
    v13 = *(std::__shared_weak_count **)algn_2579B8AE8;
    v40 = GetABMLogServer(void)::sLogServer;
    v41 = *(_QWORD *)algn_2579B8AE8;
    if (*(_QWORD *)algn_2579B8AE8)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, __p);
    v14 = GetABMLogServer(void)::sLogServer;
    v13 = *(std::__shared_weak_count **)algn_2579B8AE8;
    v40 = GetABMLogServer(void)::sLogServer;
    v41 = *(_QWORD *)algn_2579B8AE8;
    if (*(_QWORD *)algn_2579B8AE8)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v18 = dispatch_queue_create_with_target_V2("boot.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v18, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v18);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v18;
  if (v18)
  {
    dispatch_retain(v18);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v18);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_251CBE050;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)__p);
  *(_QWORD *)(a1 + 56) = &unk_251CB85F0;
  *(_QWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 112) = v13;
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&__dst);
    *v11 = off_251CBE0E0;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&__dst);
    *v11 = off_251CBE0E0;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v37);
  *(_QWORD *)a1 = off_251CBD660;
  *(_QWORD *)(a1 + 48) = &unk_251CBD6E8;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 196) = 15;
  v22 = (config::hw *)dispatch_semaphore_create(0);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 200) = v22;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = -1;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = -1;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 384) = 0;
  config::hw::regionInfo(v22);
  *(_QWORD *)(a1 + 416) = dispatch_group_create();
  *(_QWORD *)(a1 + 424) = 0;
  v23 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v24 = strlen(v23);
  if (v24 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v25 = v24;
  if (v24 >= 0x17)
  {
    v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v27 = v24 | 7;
    v28 = v27 + 1;
    p_dst = (std::string *)operator new(v27 + 1);
    __dst.__r_.__value_.__l.__size_ = v25;
    __dst.__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_32;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v24;
  p_dst = &__dst;
  if (v24)
LABEL_32:
    memmove(p_dst, v23, v25);
  p_dst->__r_.__value_.__s.__data_[v25] = 0;
  v38 = 11;
  strcpy((char *)v37, ".resetqueue");
  v29 = std::string::append(&__dst, (const std::string::value_type *)v37, 0xBuLL);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v43 = (void (*)(uint64_t))v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v43) >= 0)
    v31 = __p;
  else
    v31 = (void **)__p[0];
  v32 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  *(_QWORD *)(a1 + 432) = dispatch_queue_create((const char *)v31, v32);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
    if ((v38 & 0x80000000) == 0)
      goto LABEL_38;
LABEL_44:
    operator delete(v37[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_45;
  }
  operator delete(__p[0]);
  if (v38 < 0)
    goto LABEL_44;
LABEL_38:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_39;
LABEL_45:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_39:
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = *a3;
  v33 = a3[1];
  *(_QWORD *)(a1 + 480) = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  *(_WORD *)(a1 + 228) = 0;
  *(_DWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 256) = 8;
  return a1;
}

void sub_24B8DD1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  uint64_t v23;
  _QWORD *v24;
  void **v25;
  void **v26;
  uint64_t v27;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  const void **v33;
  const void *v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      v29 = *(NSObject **)(v23 + 424);
      if (!v29)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  v29 = *(NSObject **)(v23 + 424);
  if (!v29)
    goto LABEL_9;
LABEL_7:
  dispatch_group_leave(v29);
  v30 = *(NSObject **)(v23 + 424);
  if (v30)
    dispatch_release(v30);
LABEL_9:
  v31 = *(NSObject **)(v23 + 416);
  if (v31)
  {
    dispatch_release(v31);
    if ((*(char *)(v23 + 415) & 0x80000000) == 0)
    {
LABEL_11:
      v32 = v27 + 64;
      if ((*(char *)(v23 + 375) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_17;
    }
  }
  else if ((*(char *)(v23 + 415) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(*v25);
  v32 = v27 + 64;
  if ((*(char *)(v23 + 375) & 0x80000000) == 0)
  {
LABEL_12:
    v33 = (const void **)(v27 + 56);
    if ((*(char *)(v23 + 327) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v27 + 144));
  v33 = (const void **)(v27 + 56);
  if ((*(char *)(v23 + 327) & 0x80000000) == 0)
  {
LABEL_13:
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v32);
    v34 = *v33;
    if (!*v33)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v27 + 96));
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v32);
  v34 = *v33;
  if (!*v33)
  {
LABEL_20:
    v35 = *(NSObject **)(v23 + 216);
    if (v35)
    {
      dispatch_group_leave(v35);
      v36 = *(NSObject **)(v23 + 216);
      if (v36)
        dispatch_release(v36);
    }
    if (*(_QWORD *)v27)
    {
      dispatch_group_leave(*(dispatch_group_t *)v27);
      if (*(_QWORD *)v27)
        dispatch_release(*(dispatch_object_t *)v27);
    }
    v37 = *(NSObject **)(v23 + 200);
    if (v37)
      dispatch_release(v37);
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v27 - 32);
    if (*(char *)(v23 + 175) < 0)
      operator delete(*v26);
    ctu::SharedLoggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v24);
    Service::~Service((Service *)v23);
    _Unwind_Resume(a1);
  }
LABEL_19:
  _Block_release(v34);
  goto LABEL_20;
}

_QWORD *ctu::SharedLoggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBE050;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBE050;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void BootModule::~BootModule(BootModule *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  uint8_t v34[16];

  *(_QWORD *)this = off_251CBD660;
  *((_QWORD *)this + 6) = &unk_251CBD6E8;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v34 = 0;
    _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v34, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 60);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *((_QWORD *)this + 55);
  if (v9)
  {
    dispatch_resume(v9);
    v10 = *((_QWORD *)this + 55);
    if (v10)
      dispatch_release(v10);
  }
  v11 = *((_QWORD *)this + 54);
  if (v11)
    dispatch_release(v11);
  v12 = *((_QWORD *)this + 53);
  if (v12)
  {
    dispatch_group_leave(v12);
    v13 = *((_QWORD *)this + 53);
    if (v13)
      dispatch_release(v13);
  }
  v14 = *((_QWORD *)this + 52);
  if (v14)
    dispatch_release(v14);
  if (*((char *)this + 415) < 0)
  {
    operator delete(*((void **)this + 49));
    if ((*((char *)this + 375) & 0x80000000) == 0)
    {
LABEL_25:
      if ((*((char *)this + 327) & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_30;
    }
  }
  else if ((*((char *)this + 375) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(*((void **)this + 44));
  if ((*((char *)this + 327) & 0x80000000) == 0)
  {
LABEL_26:
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
    if (!v15)
      goto LABEL_34;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(*((void **)this + 38));
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (!v15)
    goto LABEL_34;
LABEL_31:
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v18 = (const void *)*((_QWORD *)this + 33);
    if (!v18)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_34:
  v18 = (const void *)*((_QWORD *)this + 33);
  if (v18)
LABEL_35:
    _Block_release(v18);
LABEL_36:
  v19 = *((_QWORD *)this + 27);
  if (v19)
  {
    dispatch_group_leave(v19);
    v20 = *((_QWORD *)this + 27);
    if (v20)
      dispatch_release(v20);
  }
  v21 = *((_QWORD *)this + 26);
  if (v21)
  {
    dispatch_group_leave(v21);
    v22 = *((_QWORD *)this + 26);
    if (v22)
      dispatch_release(v22);
  }
  v23 = *((_QWORD *)this + 25);
  if (v23)
    dispatch_release(v23);
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (!v24)
    goto LABEL_48;
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (v26)
  {
LABEL_48:
    if ((*((char *)this + 175) & 0x80000000) == 0)
      goto LABEL_50;
    goto LABEL_49;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (*((char *)this + 175) < 0)
LABEL_49:
    operator delete(*((void **)this + 19));
LABEL_50:
  *((_QWORD *)this + 6) = off_251CBE050;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v27 = *((_QWORD *)this + 18);
  if (v27)
    dispatch_release(v27);
  v28 = *((_QWORD *)this + 17);
  if (v28)
    dispatch_release(v28);
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  *(_QWORD *)this = off_251CC0DB8;
  v30 = *((_QWORD *)this + 3);
  if (v30)
  {
    v31 = *((_QWORD *)this + 4);
    v32 = (void *)*((_QWORD *)this + 3);
    if (v31 != v30)
    {
      do
      {
        if (*(char *)(v31 - 1) < 0)
          operator delete(*(void **)(v31 - 24));
        v31 -= 24;
      }
      while (v31 != v30);
      v32 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v30;
    operator delete(v32);
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v33)
    std::__shared_weak_count::__release_weak(v33);
}

{
  void *v1;

  BootModule::~BootModule(this);
  operator delete(v1);
}

void `non-virtual thunk to'BootModule::~BootModule(BootModule *this)
{
  BootModule::~BootModule((BootModule *)((char *)this - 48));
}

{
  void *v1;

  BootModule::~BootModule((BootModule *)((char *)this - 48));
  operator delete(v1);
}

void BootModule::changeState_sync(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  int v32;
  NSObject *v33;
  NSObject *v34;
  uint64_t v35;
  __CFDictionary *Mutable;
  const __CFAllocator *v37;
  const void *v38;
  size_t v39;
  void *v40;
  void **v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  CFTypeID v45;
  void *v46;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  void *aBlock;
  __int128 v53;
  _BYTE buf[22];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v4 = *(NSObject **)(a1 + 88);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    v6 = *(int *)(a1 + 448);
    if (v6 > 8)
    {
      v7 = "Unknown";
      if (a2 > 8)
        goto LABEL_4;
    }
    else
    {
      v7 = off_251CBE1B8[v6];
      if (a2 > 8)
      {
LABEL_4:
        v8 = "Unknown";
LABEL_7:
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v7;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v8;
        _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I boot state changing %{public}s -> %{public}s", buf, 0x16u);
        goto LABEL_8;
      }
    }
    v8 = off_251CBE1B8[a2];
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 448) = a2;
  if (!capabilities::ipc::supportsPCI((capabilities::ipc *)v5))
    goto LABEL_56;
  if ((*(_DWORD *)(a1 + 448) - 3) > 1)
  {
    v29 = *(std::__shared_weak_count **)(a1 + 280);
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    if (!v29)
      goto LABEL_56;
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (v31)
      goto LABEL_56;
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if (!*(_QWORD *)(a1 + 216))
      goto LABEL_62;
  }
  else
  {
    if (*(_QWORD *)(a1 + 272))
      goto LABEL_56;
    v9 = *(void **)(a1 + 264);
    if (v9)
      v9 = _Block_copy(v9);
    aBlock = v9;
    pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    v10 = off_2579B8480;
    if (!off_2579B8480)
    {
      ABMServer::create_default_global(buf);
      v11 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v12 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
      off_2579B8480 = v11;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v10 = off_2579B8480;
    }
    v50 = v10;
    v51 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
    if (*(&off_2579B8480 + 1))
    {
      v18 = (unint64_t *)(*(&off_2579B8480 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    pci::event::Listener::create();
    v20 = v53;
    v53 = 0uLL;
    v21 = *(std::__shared_weak_count **)(a1 + 280);
    *(_OWORD *)(a1 + 272) = v20;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (*((_QWORD *)&v53 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v53 + 1) + 16))(*((_QWORD *)&v53 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v53 + 1));
      }
    }
    if (v51)
    {
      v26 = &v51->__shared_owners_;
      do
        v27 = __ldaxr((unint64_t *)v26);
      while (__stlxr(v27 - 1, (unint64_t *)v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (aBlock)
      _Block_release(aBlock);
    v28 = *(NSObject **)(a1 + 88);
    if (*(_QWORD *)(a1 + 272))
    {
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_24B855000, v28, OS_LOG_TYPE_DEFAULT, "#I Listening for PCI events", buf, 2u);
        if (!*(_QWORD *)(a1 + 216))
          goto LABEL_62;
        goto LABEL_57;
      }
LABEL_56:
      if (!*(_QWORD *)(a1 + 216))
        goto LABEL_62;
      goto LABEL_57;
    }
    if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      goto LABEL_56;
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_24B855000, v28, OS_LOG_TYPE_ERROR, "Could not create PCI event listener!", buf, 2u);
    if (!*(_QWORD *)(a1 + 216))
      goto LABEL_62;
  }
LABEL_57:
  v32 = *(_DWORD *)(a1 + 448);
  if (v32 != 4)
    goto LABEL_63;
  v33 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v33, OS_LOG_TYPE_DEFAULT, "#I Releasing shutdown request session", buf, 2u);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, 7);
  v34 = *(NSObject **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v34)
  {
    dispatch_group_leave(v34);
    dispatch_release(v34);
  }
LABEL_62:
  v32 = *(_DWORD *)(a1 + 448);
LABEL_63:
  if (v32 != 7)
    return;
  *(_QWORD *)buf = 0;
  v35 = *MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
    *(_QWORD *)buf = Mutable;
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x24BE05198], (const __CFString **)*MEMORY[0x24BE05680], v35, v37);
  v38 = (const void *)*MEMORY[0x24BE05658];
  v39 = strlen((const char *)*MEMORY[0x24BE05658]);
  if (v39 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v40 = (void *)v39;
  if (v39 >= 0x17)
  {
    v43 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39 | 7) != 0x17)
      v43 = v39 | 7;
    v44 = v43 + 1;
    v41 = (void **)operator new(v43 + 1);
    __dst[1] = v40;
    v49 = v44 | 0x8000000000000000;
    __dst[0] = v41;
LABEL_74:
    memmove(v41, v38, (size_t)v40);
    *((_BYTE *)v40 + (_QWORD)v41) = 0;
    v42 = *(const void **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_77;
    goto LABEL_75;
  }
  HIBYTE(v49) = v39;
  v41 = __dst;
  if (v39)
    goto LABEL_74;
  LOBYTE(__dst[0]) = 0;
  v42 = *(const void **)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_77;
LABEL_75:
  v45 = CFGetTypeID(v42);
  if (v45 == CFDictionaryGetTypeID())
  {
    cf = v42;
    CFRetain(v42);
    goto LABEL_78;
  }
LABEL_77:
  cf = 0;
LABEL_78:
  v46 = 0;
  Service::broadcastEvent(a1, (uint64_t)__dst, &cf, (const void **)&v46);
  if (v46)
    _Block_release(v46);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v49) < 0)
  {
    operator delete(__dst[0]);
    if (!v42)
      return;
  }
  else if (!v42)
  {
    return;
  }
  CFRelease(v42);
}

void sub_24B8DDCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *aBlock, uint64_t a20,uint64_t a21,char a22)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(a1);
}

const char *BootModule::getName(BootModule *this)
{
  return "boot.mod";
}

void BootModule::requestReset(_QWORD *a1, const ResetInfo *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  capabilities::abs *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  void **v15;
  void (**v16)(void *, _QWORD, void **);
  NSObject *v17;
  unint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  _QWORD block[6];
  std::__shared_weak_count *v22;
  std::string v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  void *aBlock;
  void *v31[2];
  char v32;
  uint8_t buf[4];
  void **v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v7 = a1[15], (v8 = (capabilities::abs *)std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = (std::__shared_weak_count *)v8;
  v10 = (unint64_t *)((char *)v8 + 16);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  v12 = (unint64_t *)((char *)v8 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    (*(void (**)(capabilities::abs *))(*(_QWORD *)v8 + 16))(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (!capabilities::abs::shouldIgnoreResets(v8))
  {
    v17 = a1[54];
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_8_4;
    block[4] = a1;
    block[5] = v7;
    v22 = v9;
    do
      v18 = __ldxr(v10);
    while (__stxr(v18 + 1, v10));
    ResetInfo::ResetInfo(&v23, a2);
    v19 = *a3;
    if (*a3)
      v19 = _Block_copy(v19);
    aBlock = v19;
    dispatch_async(v17, block);
    if (aBlock)
      _Block_release(aBlock);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_26:
        if ((v25 & 0x80000000) == 0)
          goto LABEL_27;
        goto LABEL_32;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_26;
    }
    operator delete(v26);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_27:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_33;
    }
LABEL_32:
    operator delete(v24);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      v20 = v22;
      if (!v22)
        goto LABEL_35;
      goto LABEL_34;
    }
LABEL_33:
    operator delete(v23.__r_.__value_.__l.__data_);
    v20 = v22;
    if (!v22)
      goto LABEL_35;
LABEL_34:
    std::__shared_weak_count::__release_weak(v20);
    goto LABEL_35;
  }
  v14 = a1[11];
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)
    && ((ResetInfo::asString(a2, v31), v32 >= 0) ? (v15 = v31) : (v15 = (void **)v31[0]),
        *(_DWORD *)buf = 136446210,
        v34 = v15,
        _os_log_impl(&dword_24B855000, v14, OS_LOG_TYPE_DEFAULT, "#I Ignoring modem reset request: %{public}s", buf, 0xCu), v32 < 0))
  {
    operator delete(v31[0]);
    v16 = (void (**)(void *, _QWORD, void **))*a3;
    if (!*a3)
      goto LABEL_35;
  }
  else
  {
    v16 = (void (**)(void *, _QWORD, void **))*a3;
    if (!*a3)
      goto LABEL_35;
  }
  v32 = 0;
  LOBYTE(v31[0]) = 0;
  v16[2](v16, 0, v31);
  if (v32 < 0)
    operator delete(v31[0]);
LABEL_35:
  std::__shared_weak_count::__release_weak(v9);
}

void sub_24B8DE05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__shared_weak_count *v16;

  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  const void *v6;
  void *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD v16[5];
  std::string v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;
  void *aBlock;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v28;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v28 = v4;
    if (v4)
    {
      v5 = v4;
      if (!a1[5])
        goto LABEL_18;
      v16[0] = MEMORY[0x24BDAC760];
      v16[1] = 1174405120;
      v16[2] = ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2;
      v16[3] = &__block_descriptor_tmp_15;
      v16[4] = v3;
      ResetInfo::ResetInfo(&v17, (const ResetInfo *)(a1 + 7));
      v6 = (const void *)a1[21];
      if (v6)
      {
        v7 = _Block_copy(v6);
        v8 = (uint64_t *)(v3 + 120);
        v10 = a1[5];
        v9 = (std::__shared_weak_count *)a1[6];
        aBlock = v7;
        v25 = v10;
        v26 = v9;
        if (!v9)
          goto LABEL_10;
      }
      else
      {
        v8 = (uint64_t *)(v3 + 120);
        v11 = a1[5];
        v9 = (std::__shared_weak_count *)a1[6];
        aBlock = 0;
        v25 = v11;
        v26 = v9;
        if (!v9)
          goto LABEL_10;
      }
      p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
      do
        v13 = __ldxr(p_shared_weak_owners);
      while (__stxr(v13 + 1, p_shared_weak_owners));
LABEL_10:
      ctu::SharedSynchronizable<BootModule>::execute_wrapped(v8, (uint64_t)v16);
      if (v26)
        std::__shared_weak_count::__release_weak(v26);
      if (aBlock)
        _Block_release(aBlock);
      if (v23 < 0)
      {
        operator delete(__p);
        if ((v21 & 0x80000000) == 0)
        {
LABEL_16:
          if ((v19 & 0x80000000) == 0)
            goto LABEL_17;
          goto LABEL_25;
        }
      }
      else if ((v21 & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(v20);
      if ((v19 & 0x80000000) == 0)
      {
LABEL_17:
        if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_18;
LABEL_26:
        operator delete(v17.__r_.__value_.__l.__data_);
LABEL_18:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
LABEL_25:
      operator delete(v18);
      if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_18;
      goto LABEL_26;
    }
  }
}

void sub_24B8DE264(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1)
{
  _QWORD *v2;
  unsigned int v3;
  uint64_t v5;
  const char *v6;
  size_t v7;
  std::string *v8;
  __int128 v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  std::string *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  int v17;
  std::string::size_type v18;
  std::string *p_buf;
  std::string *v20;
  xpc_object_t v21;
  xpc_object_t v22;
  int v23;
  size_t size;
  std::string *p_p;
  _BOOL4 v26;
  std::string::size_type v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type v31;
  std::string::size_type v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  NSObject *v36;
  NSObject *v37;
  std::string *v38;
  std::string::__raw *v39;
  std::string::size_type v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  dispatch_object_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::string __p;
  std::string v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *aBlock;
  dispatch_object_t v58;
  dispatch_object_t object;
  xpc_object_t v60;
  xpc_object_t v61;
  _BYTE v62[12];
  __int16 v63;
  std::string *v64;
  std::string buf;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = *((_DWORD *)v2 + 112);
  if (v3 > 8 || ((1 << v3) & 0x1C7) == 0)
  {
    v12 = v2[11];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      ResetInfo::asString((ResetInfo *)(a1 + 40), &__p);
      v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      _os_log_impl(&dword_24B855000, v12, OS_LOG_TYPE_DEFAULT, "#I Reset requested: %{public}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    (*(void (**)(_QWORD *, uint64_t))(*v2 + 96))(v2, 1);
    *(_QWORD *)v62 = 0xAAAAAAAAAAAAAAAALL;
    v14 = xpc_dictionary_create(0, 0, 0);
    v15 = v14;
    if (v14)
    {
      *(_QWORD *)v62 = v14;
    }
    else
    {
      v15 = xpc_null_create();
      *(_QWORD *)v62 = v15;
      if (!v15)
      {
        v16 = xpc_null_create();
        v15 = 0;
        goto LABEL_40;
      }
    }
    if (MEMORY[0x24BD2A468](v15) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v15);
      goto LABEL_41;
    }
    v16 = xpc_null_create();
LABEL_40:
    *(_QWORD *)v62 = v16;
LABEL_41:
    xpc_release(v15);
    ResetInfo::addToDict((ResetInfo *)(a1 + 40), (xpc_object_t *)v62);
    v21 = *(xpc_object_t *)v62;
    v61 = *(xpc_object_t *)v62;
    if (*(_QWORD *)v62)
    {
      xpc_retain(*(xpc_object_t *)v62);
    }
    else
    {
      v21 = xpc_null_create();
      v61 = v21;
    }
    BootModule::submitBBResetMetric_sync((uint64_t)v2, &v61);
    xpc_release(v21);
    v22 = *(xpc_object_t *)v62;
    v60 = *(xpc_object_t *)v62;
    v61 = 0;
    if (*(_QWORD *)v62)
    {
      xpc_retain(*(xpc_object_t *)v62);
    }
    else
    {
      v22 = xpc_null_create();
      v60 = v22;
    }
    BootModule::updateAnalyticsEvent_sync((uint64_t)v2, &v60);
    xpc_release(v22);
    v60 = 0;
    if (*(char *)(a1 + 63) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
    else
      __p = *(std::string *)(a1 + 40);
    v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (size == strlen((const char *)*MEMORY[0x24BE051D0]))
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v26 = memcmp(p_p, (const void *)*MEMORY[0x24BE051D0], size) == 0;
      if ((v23 & 0x80000000) == 0)
      {
LABEL_61:
        if (v26)
          BootModule::reportStatisticsHardResetTime_sync((BootModule *)v2);
        memset(&buf, 170, 16);
        (*(void (**)(std::string *__return_ptr, _QWORD *))(*v2 + 80))(&buf, v2);
        v27 = buf.__r_.__value_.__r.__words[0];
        if (!buf.__r_.__value_.__r.__words[0])
          goto LABEL_91;
        object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
        v28 = (char *)operator new(0x38uLL);
        strcpy(v28, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
        v29 = capabilities::abs::resetAssertionTimeoutScalingFactor((capabilities::abs *)v28);
        v30 = *(_QWORD *)(v27 + 104);
        std::string::__init_copy_ctor_external(&__p, v28, 0x33uLL);
        (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)v30 + 24))(&object, v30, &__p, 360000 * v29);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        operator delete(v28);
        v32 = *(_QWORD *)(a1 + 160);
        v31 = *(_QWORD *)(a1 + 168);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v2;
        __p.__r_.__value_.__l.__size_ = v32;
        __p.__r_.__value_.__r.__words[2] = v31;
        if (v31)
        {
          v33 = (unint64_t *)(v31 + 16);
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        ResetInfo::ResetInfo(&v50, (const ResetInfo *)(a1 + 40));
        v35 = *(void **)(a1 + 152);
        if (v35)
          v35 = _Block_copy(v35);
        aBlock = v35;
        v58 = object;
        if (object)
        {
          dispatch_retain(object);
          v36 = object;
        }
        else
        {
          v36 = 0;
        }
        v37 = v2[17];
        v38 = (std::string *)operator new(0x98uLL);
        v39 = (std::string::__raw *)v38;
        *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v40 = __p.__r_.__value_.__r.__words[2];
        v38->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        if (v40)
        {
          v41 = (unint64_t *)(v40 + 16);
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        ResetInfo::ResetInfo(v38 + 1, (const ResetInfo *)&v50);
        v43 = aBlock;
        if (aBlock)
          v43 = _Block_copy(aBlock);
        v44 = v58;
        v39[5].__words[2] = (std::string::size_type)v43;
        v39[6].__words[0] = (std::string::size_type)v44;
        v58 = 0;
        dispatch_group_notify_f(v36, v37, v39, (dispatch_function_t)_ZZN8dispatch6detail12group_notifyIZZZN10BootModule12requestResetE9ResetInfoNS_5blockIU13block_pointerFviNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEEUb_EUb0_E3__0EEvP16dispatch_group_sP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEEENUlPvE_8__invokeESO_);
        if (v58)
          dispatch_release(v58);
        if (aBlock)
          _Block_release(aBlock);
        if (v56 < 0)
        {
          operator delete(v55);
          if ((v54 & 0x80000000) == 0)
          {
LABEL_85:
            if ((v52 & 0x80000000) == 0)
              goto LABEL_86;
            goto LABEL_100;
          }
        }
        else if ((v54 & 0x80000000) == 0)
        {
          goto LABEL_85;
        }
        operator delete(v53);
        if ((v52 & 0x80000000) == 0)
        {
LABEL_86:
          if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_87;
          goto LABEL_101;
        }
LABEL_100:
        operator delete(v51);
        if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_87:
          v45 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
          if (!__p.__r_.__value_.__r.__words[2])
            goto LABEL_89;
          goto LABEL_88;
        }
LABEL_101:
        operator delete(v50.__r_.__value_.__l.__data_);
        v45 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
        if (!__p.__r_.__value_.__r.__words[2])
        {
LABEL_89:
          if (object)
            dispatch_release(object);
LABEL_91:
          v46 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
          if (buf.__r_.__value_.__l.__size_)
          {
            v47 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          xpc_release(*(xpc_object_t *)v62);
          return;
        }
LABEL_88:
        std::__shared_weak_count::__release_weak(v45);
        goto LABEL_89;
      }
    }
    else
    {
      v26 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_61;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_61;
  }
  v5 = (int)v3;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_24B953E70;
  strcpy(__p.__r_.__value_.__l.__data_, "Reset rejected; Boot state is: ");
  if (v5 > 8)
    v6 = "Unknown";
  else
    v6 = off_251CBE1B8[v5];
  v7 = strlen(v6);
  v8 = std::string::append(&__p, v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  buf.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = v2[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v17 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
    v18 = buf.__r_.__value_.__r.__words[0];
    ResetInfo::asString((ResetInfo *)(a1 + 40), &__p);
    p_buf = &buf;
    if (v17 < 0)
      p_buf = (std::string *)v18;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &__p;
    else
      v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)v62 = 136315394;
    *(_QWORD *)&v62[4] = p_buf;
    v63 = 2080;
    v64 = v20;
    _os_log_debug_impl(&dword_24B855000, v10, OS_LOG_TYPE_DEBUG, "#D %s; %s", v62, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v11 = *(_QWORD *)(a1 + 152);
  if (!v11)
    goto LABEL_16;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  else
    __p = buf;
  (*(void (**)(uint64_t, uint64_t, std::string *))(v11 + 16))(v11, 3760250880, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_17;
  }
  else
  {
LABEL_16:
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
LABEL_17:
      operator delete(buf.__r_.__value_.__l.__data_);
  }
}

void sub_24B8DE940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,dispatch_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void BootModule::submitBBResetMetric_sync(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  const char *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  const char *v18;
  xpc_object_t v19;
  xpc_object_t v20;
  const char *v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  const void *v32;
  size_t v33;
  size_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  xpc_object_t object;
  uint8_t buf[8];
  size_t v41;
  unint64_t v42;

  v4 = MEMORY[0x24BD2A468](*a2);
  v5 = MEMORY[0x24BDACFA0];
  v6 = *(NSObject **)(a1 + 88);
  if (v4 != MEMORY[0x24BDACFA0])
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_24B855000, v6, OS_LOG_TYPE_ERROR, "No input is given", buf, 2u);
    }
    return;
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of baseband reset", buf, 2u);
  }
  v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v7) == v5)
    {
      xpc_retain(v7);
      v8 = v7;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    v7 = 0;
  }
  xpc_release(v7);
  v9 = xpc_BOOL_create(*(_BYTE *)(a1 + 288));
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x24BE04EA8], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_int64_create(*(int *)(a1 + 296));
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x24BE058C8], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(*(int *)(a1 + 344));
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x24BE058D0], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = (const char *)(a1 + 304);
  if (*(char *)(a1 + 327) < 0)
    v15 = *(const char **)v15;
  v16 = xpc_string_create(v15);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x24BE05908], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = (const char *)(a1 + 352);
  if (*(char *)(a1 + 375) < 0)
    v18 = *(const char **)v18;
  v19 = xpc_string_create(v18);
  if (!v19)
    v19 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x24BE05910], v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  v21 = (const char *)(a1 + 392);
  if (*(char *)(a1 + 415) < 0)
    v21 = *(const char **)v21;
  v22 = xpc_string_create(v21);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x24BE058A8], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  v24 = xpc_int64_create(*(int *)(a1 + 256));
  if (!v24)
    v24 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x24BE04E50], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  v26 = xpc_string_create((const char *)*MEMORY[0x24BE058A0]);
  if (!v26)
    v26 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x24BE04E88], v26);
  v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  v28 = xpc_int64_create(524310);
  if (!v28)
    v28 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x24BE04F38], v28);
  v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  v30 = *a2;
  if (v30)
    xpc_retain(v30);
  else
    v30 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x24BE04E80], v30);
  v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  v32 = (const void *)*MEMORY[0x24BE051F0];
  v33 = strlen((const char *)*MEMORY[0x24BE051F0]);
  if (v33 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v34 = v33;
  if (v33 >= 0x17)
  {
    v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v36 = v33 | 7;
    v37 = v36 + 1;
    v35 = operator new(v36 + 1);
    v41 = v34;
    v42 = v37 | 0x8000000000000000;
    *(_QWORD *)buf = v35;
LABEL_47:
    memmove(v35, v32, v34);
    *((_BYTE *)v35 + v34) = 0;
    object = v8;
    if (v8)
      goto LABEL_43;
LABEL_48:
    object = xpc_null_create();
    goto LABEL_49;
  }
  HIBYTE(v42) = v33;
  v35 = buf;
  if (v33)
    goto LABEL_47;
  buf[0] = 0;
  object = v8;
  if (!v8)
    goto LABEL_48;
LABEL_43:
  xpc_retain(v8);
LABEL_49:
  v38 = 0;
  Service::runCommand(a1, (uint64_t)buf, &object, &v38);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v42) < 0)
    operator delete(*(void **)buf);
  xpc_release(v8);
}

void sub_24B8DF008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  xpc_release(object);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void BootModule::updateAnalyticsEvent_sync(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  const char *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  const char *v20;
  xpc_object_t v21;
  xpc_object_t v22;
  uint64_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  uint64_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  uint64_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  uint64_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  const char *v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t value;
  int v41;
  util::apfs *v42;
  int is_transcription_pending;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  const char *v47;
  NSObject *v48;
  NSObject *v49;
  const char *v50;
  xpc_object_t v51;
  xpc_object_t v52;
  size_t v53;
  const void *v54;
  const void *v55;
  const void **v56;
  size_t v57;
  xpc_object_t v58;
  xpc_object_t v59;
  xpc_object_t v60;
  const char *v61;
  const void *v62;
  const void *v63;
  const void *v64;
  const void *v65;
  size_t v66;
  capabilities::radio *v67;
  const void *v68;
  capabilities::radio *v69;
  __int128 v70;
  __int128 v71;
  std::string::size_type size;
  std::sub_match<const char *> *p_dst;
  int v74;
  std::string::size_type v75;
  std::string *v76;
  char *v77;
  unint64_t v78;
  void **v79;
  char *v80;
  char *v81;
  unint64_t v82;
  char *v83;
  __int128 v84;
  __int128 v85;
  std::string::size_type v86;
  std::sub_match<const char *> *v87;
  int v88;
  std::string::size_type v89;
  std::string *v90;
  uint64_t *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  __int128 *v99;
  _OWORD *v100;
  unint64_t v101;
  __int128 v102;
  char v103;
  unsigned __int8 *v104;
  unsigned int v105;
  BOOL v106;
  uint64_t *v107;
  uint64_t v108;
  char **v109;
  char *v110;
  unint64_t v111;
  _OWORD *v112;
  std::string::size_type v113;
  void **v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  char *v118;
  __int128 *v119;
  _OWORD *v120;
  unint64_t v121;
  __int128 v122;
  char v123;
  void **v124;
  std::string::size_type v125;
  std::string *v126;
  __int128 v127;
  unint64_t v128;
  unsigned __int8 *v129;
  unsigned int v130;
  BOOL v131;
  uint64_t *v132;
  uint64_t v133;
  char **v134;
  char *v135;
  unint64_t v136;
  _OWORD *v137;
  std::string::size_type v138;
  void **v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  char *v143;
  __int128 *v144;
  _OWORD *v145;
  unint64_t v146;
  __int128 v147;
  char v148;
  void **v149;
  std::string::size_type v150;
  std::string *v151;
  std::string::size_type v152;
  char v153;
  size_t v154;
  std::string *p_str;
  size_t v156;
  unint64_t *v157;
  std::string *v158;
  xpc_object_t v159;
  xpc_object_t v160;
  std::string *v161;
  xpc_object_t v162;
  xpc_object_t v163;
  xpc_object_t v164;
  xpc_object_t v165;
  xpc_object_t v166;
  xpc_object_t v167;
  xpc_object_t v168;
  xpc_object_t v169;
  xpc_object_t v170;
  xpc_object_t v171;
  xpc_object_t v172;
  xpc_object_t v173;
  xpc_object_t v174;
  xpc_object_t v175;
  xpc_object_t v176;
  xpc_object_t v177;
  const void *v178;
  size_t v179;
  size_t v180;
  __int128 *p_buf;
  uint64_t v182;
  uint64_t v183;
  const void *v184;
  xpc_object_t object;
  void *v186;
  unint64_t v187;
  unint64_t v188;
  void *v189;
  unint64_t v190;
  unint64_t v191;
  std::string v192;
  void *__p[2];
  _QWORD v194[4];
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  std::string __str;
  std::string __dst;
  const void *__s1[3];
  __int128 buf;
  _OWORD v210[2];
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  uint64_t v217;
  _QWORD v218[5];

  v218[2] = *MEMORY[0x24BDAC8D0];
  v4 = MEMORY[0x24BD2A468](*a2);
  v5 = MEMORY[0x24BDACFA0];
  v6 = *(NSObject **)(a1 + 88);
  if (v4 != MEMORY[0x24BDACFA0])
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_24B855000, v6, OS_LOG_TYPE_ERROR, "No input is given", (uint8_t *)&buf, 2u);
    }
    return;
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I Updating Analytics metric of baseband reset", (uint8_t *)&buf, 2u);
  }
  v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v7) == v5)
    {
      xpc_retain(v7);
      v8 = v7;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    v7 = 0;
  }
  xpc_release(v7);
  v9 = xpc_dictionary_create(0, 0, 0);
  if (v9 || (v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v9) == v5)
    {
      xpc_retain(v9);
      v10 = v9;
    }
    else
    {
      v10 = xpc_null_create();
    }
  }
  else
  {
    v10 = xpc_null_create();
    v9 = 0;
  }
  xpc_release(v9);
  v11 = xpc_BOOL_create(*(_BYTE *)(a1 + 288));
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v10, "inVoiceCall", v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(*(int *)(a1 + 296));
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v10, "rat", v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = xpc_int64_create(*(int *)(a1 + 344));
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v10, "rat2", v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = (const char *)(a1 + 304);
  if (*(char *)(a1 + 327) < 0)
    v17 = *(const char **)v17;
  v18 = xpc_string_create(v17);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v10, "PLMN", v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = (const char *)(a1 + 352);
  if (*(char *)(a1 + 375) < 0)
    v20 = *(const char **)v20;
  v21 = xpc_string_create(v20);
  if (!v21)
    v21 = xpc_null_create();
  xpc_dictionary_set_value(v10, "PLMN2", v21);
  v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  v23 = *(_QWORD *)(a1 + 328);
  if (v23)
  {
    v24 = xpc_uint64_create(v23);
    if (!v24)
      v24 = xpc_null_create();
    xpc_dictionary_set_value(v10, "cellId", v24);
    v25 = xpc_null_create();
    xpc_release(v24);
    xpc_release(v25);
  }
  v26 = *(_QWORD *)(a1 + 376);
  if (v26)
  {
    v27 = xpc_uint64_create(v26);
    if (!v27)
      v27 = xpc_null_create();
    xpc_dictionary_set_value(v10, "cellId2", v27);
    v28 = xpc_null_create();
    xpc_release(v27);
    xpc_release(v28);
  }
  v29 = *(_QWORD *)(a1 + 336);
  if (v29)
  {
    v30 = xpc_uint64_create(v29);
    if (!v30)
      v30 = xpc_null_create();
    xpc_dictionary_set_value(v10, "tac", v30);
    v31 = xpc_null_create();
    xpc_release(v30);
    xpc_release(v31);
  }
  v32 = *(_QWORD *)(a1 + 384);
  if (v32)
  {
    v33 = xpc_uint64_create(v32);
    if (!v33)
      v33 = xpc_null_create();
    xpc_dictionary_set_value(v10, "tac2", v33);
    v34 = xpc_null_create();
    xpc_release(v33);
    xpc_release(v34);
  }
  v35 = (const char *)(a1 + 392);
  if (*(char *)(a1 + 415) < 0)
    v35 = *(const char **)v35;
  v36 = xpc_string_create(v35);
  if (!v36)
    v36 = xpc_null_create();
  xpc_dictionary_set_value(v10, "sku", v36);
  v37 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v37);
  v38 = xpc_int64_create(*(int *)(a1 + 256));
  if (!v38)
    v38 = xpc_null_create();
  xpc_dictionary_set_value(v10, "operatingMode", v38);
  v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE052E0]);
  *(_QWORD *)&buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v41 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  xpc_release((xpc_object_t)buf);
  is_transcription_pending = util::apfs::is_transcription_pending(v42);
  v44 = xpc_BOOL_create(v41 & ~(_BYTE)is_transcription_pending);
  if (!v44)
    v44 = xpc_null_create();
  xpc_dictionary_set_value(v10, "isMTBF", v44);
  v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  memset(__s1, 170, sizeof(__s1));
  v46 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05398]);
  *(_QWORD *)&buf = v46;
  if (v46)
    xpc_retain(v46);
  else
    *(_QWORD *)&buf = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&buf, (const object *)*MEMORY[0x24BE05710], v47);
  xpc_release((xpc_object_t)buf);
  if (is_transcription_pending)
  {
    v48 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_24B855000, v48, OS_LOG_TYPE_DEFAULT, "#I APFS transcription is pending", (uint8_t *)&buf, 2u);
    }
    if (v41)
    {
      v49 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_24B855000, v49, OS_LOG_TYPE_DEFAULT, "#I Downgrading Baseband Reset MTBF metric because APFS transcription is pending", (uint8_t *)&buf, 2u);
      }
    }
  }
  if (SHIBYTE(__s1[2]) >= 0)
    v50 = (const char *)__s1;
  else
    v50 = (const char *)__s1[0];
  v51 = xpc_string_create(v50);
  if (!v51)
    v51 = xpc_null_create();
  xpc_dictionary_set_value(v10, "resetType", v51);
  v52 = xpc_null_create();
  xpc_release(v51);
  xpc_release(v52);
  v53 = strlen((const char *)*MEMORY[0x24BE05790]);
  v54 = (const void *)v53;
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v53 != -1)
    {
      v55 = (const void *)HIBYTE(__s1[2]);
      v56 = __s1;
      goto LABEL_78;
    }
LABEL_310:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v53 == -1)
    goto LABEL_310;
  v56 = (const void **)__s1[0];
  v55 = __s1[1];
LABEL_78:
  if (v55 >= v54)
    v57 = (size_t)v54;
  else
    v57 = (size_t)v55;
  if (!memcmp(v56, (const void *)*MEMORY[0x24BE05790], v57) && v55 == v54)
  {
    v58 = xpc_string_create((const char *)*MEMORY[0x24BE05080]);
    if (!v58)
      v58 = xpc_null_create();
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x24BE050D0], v58);
    v59 = xpc_null_create();
    xpc_release(v58);
    xpc_release(v59);
    goto LABEL_274;
  }
  memset(&__dst, 170, sizeof(__dst));
  v60 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE052E8]);
  *(_QWORD *)&buf = v60;
  if (v60)
    xpc_retain(v60);
  else
    *(_QWORD *)&buf = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&buf, (const object *)"no-reset-reason", v61);
  xpc_release((xpc_object_t)buf);
  memset(&__str, 170, sizeof(__str));
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__str, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    __str = __dst;
  v62 = (const void *)*MEMORY[0x24BE057C0];
  v63 = (const void *)strlen((const char *)*MEMORY[0x24BE057C0]);
  v64 = v63;
  if (SHIBYTE(__s1[2]) < 0)
  {
    if (v63 != (const void *)-1)
    {
      v65 = __s1[1];
      if (__s1[1] >= v63)
        v68 = v63;
      else
        v68 = __s1[1];
      v67 = (capabilities::radio *)memcmp(__s1[0], v62, (size_t)v68);
      if ((_DWORD)v67)
        goto LABEL_260;
      goto LABEL_104;
    }
LABEL_312:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v63 == (const void *)-1)
    goto LABEL_312;
  v65 = (const void *)HIBYTE(__s1[2]);
  if (HIBYTE(__s1[2]) >= (unint64_t)v63)
    v66 = (size_t)v63;
  else
    v66 = HIBYTE(__s1[2]);
  v67 = (capabilities::radio *)memcmp(__s1, v62, v66);
  if ((_DWORD)v67)
    goto LABEL_260;
LABEL_104:
  if (v65 == v64)
  {
    v69 = (capabilities::radio *)capabilities::radio::maverick(v67);
    if ((_DWORD)v69)
    {
      *(_QWORD *)&v70 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v70 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v204 = v70;
      v205 = v70;
      v202 = v70;
      v203 = v70;
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v202, "(ATCS_TIMEOUT on message for svc=[0-9]*)(client=[0-9]*).*(txid=[0-9]*)(msgid=0x[a-zA-Z0-9]*)\\)(.*)", 0);
      *(_QWORD *)&v71 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v71 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v197 = 0xAAAAAAAAAAAAAA00;
      v194[3] = 0xAAAAAAAAAAAAAAAALL;
      v200 = v71;
      v195 = 0;
      v196 = 0;
      v198 = 0;
      v199 = 0;
      LOBYTE(v200) = 0;
      BYTE8(v200) = 0;
      v201 = 0;
      *(_OWORD *)__p = 0u;
      memset(v194, 0, 25);
      v213 = 0xAAAAAAAAAAAAAA00;
      *((_QWORD *)&v210[1] + 1) = 0xAAAAAAAAAAAAAAAALL;
      v216 = v71;
      v211 = 0;
      v212 = 0;
      v214 = 0;
      v215 = 0;
      LOBYTE(v216) = 0;
      BYTE8(v216) = 0;
      v217 = 0;
      buf = 0u;
      v210[0] = 0u;
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_dst = (std::sub_match<const char *> *)&__dst;
      else
        p_dst = (std::sub_match<const char *> *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __dst.__r_.__value_.__l.__size_;
      *(_OWORD *)((char *)v210 + 9) = 0uLL;
      v74 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&v202, p_dst, (std::sub_match<const char *> *)((char *)p_dst + size), (std::vector<std::csub_match> *)&buf, 0);
      v75 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v76 = &__dst;
      else
        v76 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v75 = __dst.__r_.__value_.__l.__size_;
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v76, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v76 + v75), (uint64_t *)&buf, 0);
      if ((_QWORD)buf)
      {
        *((_QWORD *)&buf + 1) = buf;
        operator delete((void *)buf);
      }
      if (!v74)
        goto LABEL_252;
      v77 = (char *)__p[0];
      v78 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
      if (v78 <= 1)
        v79 = __p;
      else
        v79 = (void **)__p[0];
      if (!*((_BYTE *)v79 + 40))
      {
        memset(&v192, 0, sizeof(v192));
        goto LABEL_167;
      }
      v80 = (char *)v79[3];
      v81 = (char *)v79[4];
      v82 = v81 - v80;
      if ((unint64_t)(v81 - v80) > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v82 > 0x16)
      {
        v95 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v82 | 7) != 0x17)
          v95 = v82 | 7;
        v96 = v95 + 1;
        v83 = (char *)operator new(v95 + 1);
        v192.__r_.__value_.__l.__size_ = v81 - v80;
        v192.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
        v192.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
      }
      else
      {
        *((_BYTE *)&v192.__r_.__value_.__s + 23) = (_BYTE)v81 - (_BYTE)v80;
        v83 = (char *)&v192;
      }
      if (v80 == v81)
      {
        v97 = v83;
      }
      else
      {
        if (v82 < 0x20 || (unint64_t)(v83 - v80) < 0x20)
        {
          v97 = v83;
          v98 = v80;
        }
        else
        {
          v97 = &v83[v82 & 0xFFFFFFFFFFFFFFE0];
          v98 = &v80[v82 & 0xFFFFFFFFFFFFFFE0];
          v99 = (__int128 *)(v80 + 16);
          v100 = v83 + 16;
          v101 = v82 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v102 = *v99;
            *(v100 - 1) = *(v99 - 1);
            *v100 = v102;
            v99 += 2;
            v100 += 2;
            v101 -= 32;
          }
          while (v101);
          if (v82 == (v82 & 0xFFFFFFFFFFFFFFE0))
            goto LABEL_166;
        }
        do
        {
          v103 = *v98++;
          *v97++ = v103;
        }
        while (v98 != v81);
      }
LABEL_166:
      *v97 = 0;
      v77 = (char *)__p[0];
      v78 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
LABEL_167:
      v104 = (unsigned __int8 *)(v77 + 112);
      if (v78 <= 4)
        v104 = (unsigned __int8 *)&v194[3];
      v105 = *v104;
      if (!v105)
      {
        v113 = 0;
        v114 = 0;
        v189 = 0;
        v190 = 0;
        v191 = 0;
        goto LABEL_193;
      }
      v106 = v78 > 4;
      if (v78 <= 4)
        v107 = &v194[1];
      else
        v107 = (uint64_t *)(v77 + 96);
      v108 = *v107;
      v109 = (char **)(v77 + 104);
      if (!v106)
        v109 = (char **)&v194[2];
      v110 = *v109;
      v111 = (unint64_t)&(*v109)[-v108];
      if (v111 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v111 > 0x16)
      {
        v115 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v111 | 7) != 0x17)
          v115 = v111 | 7;
        v116 = v115 + 1;
        v112 = operator new(v115 + 1);
        v190 = v111;
        v191 = v116 | 0x8000000000000000;
        v189 = v112;
      }
      else
      {
        HIBYTE(v191) = *(_BYTE *)v109 - v108;
        v112 = &v189;
      }
      if ((char *)v108 == v110)
      {
        v117 = v112;
      }
      else
      {
        if (v111 < 0x20 || (unint64_t)v112 - v108 < 0x20)
        {
          v117 = v112;
          v118 = (char *)v108;
        }
        else
        {
          v117 = (char *)v112 + (v111 & 0xFFFFFFFFFFFFFFE0);
          v118 = (char *)(v108 + (v111 & 0xFFFFFFFFFFFFFFE0));
          v119 = (__int128 *)(v108 + 16);
          v120 = v112 + 1;
          v121 = v111 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v122 = *v119;
            *(v120 - 1) = *(v119 - 1);
            *v120 = v122;
            v119 += 2;
            v120 += 2;
            v121 -= 32;
          }
          while (v121);
          if (v111 == (v111 & 0x7FFFFFFFFFFFFFE0))
            goto LABEL_192;
        }
        do
        {
          v123 = *v118++;
          *v117++ = v123;
        }
        while (v118 != v110);
      }
LABEL_192:
      *v117 = 0;
      v105 = HIBYTE(v191);
      v114 = (void **)v189;
      v113 = v190;
LABEL_193:
      if ((v105 & 0x80u) == 0)
        v124 = &v189;
      else
        v124 = v114;
      if ((v105 & 0x80u) == 0)
        v125 = v105;
      else
        v125 = v113;
      v126 = std::string::append(&v192, (const std::string::value_type *)v124, v125);
      v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
      *(_QWORD *)&v210[0] = *((_QWORD *)&v126->__r_.__value_.__l + 2);
      buf = v127;
      v126->__r_.__value_.__l.__size_ = 0;
      v126->__r_.__value_.__r.__words[2] = 0;
      v126->__r_.__value_.__r.__words[0] = 0;
      v128 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
      v129 = (unsigned __int8 *)__p[0] + 136;
      if (v128 <= 5)
        v129 = (unsigned __int8 *)&v194[3];
      v130 = *v129;
      if (!v130)
      {
        v138 = 0;
        v139 = 0;
        v186 = 0;
        v187 = 0;
        v188 = 0;
        goto LABEL_225;
      }
      v131 = v128 > 5;
      if (v128 <= 5)
        v132 = &v194[1];
      else
        v132 = (uint64_t *)((char *)__p[0] + 120);
      v133 = *v132;
      v134 = (char **)((char *)__p[0] + 128);
      if (!v131)
        v134 = (char **)&v194[2];
      v135 = *v134;
      v136 = (unint64_t)&(*v134)[-v133];
      if (v136 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v136 > 0x16)
      {
        v140 = (v136 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v136 | 7) != 0x17)
          v140 = v136 | 7;
        v141 = v140 + 1;
        v137 = operator new(v140 + 1);
        v187 = v136;
        v188 = v141 | 0x8000000000000000;
        v186 = v137;
      }
      else
      {
        HIBYTE(v188) = *(_BYTE *)v134 - v133;
        v137 = &v186;
      }
      if ((char *)v133 == v135)
      {
        v142 = v137;
      }
      else
      {
        if (v136 < 0x20 || (unint64_t)v137 - v133 < 0x20)
        {
          v142 = v137;
          v143 = (char *)v133;
        }
        else
        {
          v142 = (char *)v137 + (v136 & 0xFFFFFFFFFFFFFFE0);
          v143 = (char *)(v133 + (v136 & 0xFFFFFFFFFFFFFFE0));
          v144 = (__int128 *)(v133 + 16);
          v145 = v137 + 1;
          v146 = v136 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v147 = *v144;
            *(v145 - 1) = *(v144 - 1);
            *v145 = v147;
            v144 += 2;
            v145 += 2;
            v146 -= 32;
          }
          while (v146);
          if (v136 == (v136 & 0x7FFFFFFFFFFFFFE0))
            goto LABEL_224;
        }
        do
        {
          v148 = *v143++;
          *v142++ = v148;
        }
        while (v143 != v135);
      }
LABEL_224:
      *v142 = 0;
      v130 = HIBYTE(v188);
      v139 = (void **)v186;
      v138 = v187;
LABEL_225:
      if ((v130 & 0x80u) == 0)
        v149 = &v186;
      else
        v149 = v139;
      if ((v130 & 0x80u) == 0)
        v150 = v130;
      else
        v150 = v138;
      v151 = std::string::append((std::string *)&buf, (const std::string::value_type *)v149, v150);
      v152 = v151->__r_.__value_.__r.__words[0];
      v218[0] = v151->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v218 + 7) = *(std::string::size_type *)((char *)&v151->__r_.__value_.__r.__words[1] + 7);
      v153 = HIBYTE(v151->__r_.__value_.__r.__words[2]);
      v151->__r_.__value_.__l.__size_ = 0;
      v151->__r_.__value_.__r.__words[2] = 0;
      v151->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str.__r_.__value_.__r.__words[0] = v152;
      __str.__r_.__value_.__l.__size_ = v218[0];
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v218 + 7);
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = v153;
      if (SHIBYTE(v188) < 0)
      {
        operator delete(v186);
        if ((SBYTE7(v210[0]) & 0x80000000) == 0)
        {
LABEL_235:
          if ((SHIBYTE(v191) & 0x80000000) == 0)
            goto LABEL_236;
          goto LABEL_242;
        }
      }
      else if ((SBYTE7(v210[0]) & 0x80000000) == 0)
      {
        goto LABEL_235;
      }
      operator delete((void *)buf);
      if ((SHIBYTE(v191) & 0x80000000) == 0)
      {
LABEL_236:
        if ((SHIBYTE(v192.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_237;
        goto LABEL_243;
      }
LABEL_242:
      operator delete(v189);
      if ((SHIBYTE(v192.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_237:
        v154 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_238;
        goto LABEL_244;
      }
LABEL_243:
      operator delete(v192.__r_.__value_.__l.__data_);
      v154 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_238:
        if ((v154 & 0x80) != 0)
          std::string::__assign_no_alias<true>(&__dst, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        else
          __dst = __str;
LABEL_252:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v92 = (std::__shared_weak_count *)v205;
        if (!(_QWORD)v205)
          goto LABEL_259;
        v157 = (unint64_t *)(v205 + 8);
        do
          v94 = __ldaxr(v157);
        while (__stlxr(v94 - 1, v157));
LABEL_257:
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
LABEL_259:
        std::locale::~locale((std::locale *)&v202);
        goto LABEL_260;
      }
LABEL_244:
      if ((v154 & 0x80u) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((v154 & 0x80u) == 0)
        v156 = v154;
      else
        v156 = __str.__r_.__value_.__l.__size_;
      std::string::__assign_no_alias<false>((void **)&__dst.__r_.__value_.__l.__data_, p_str, v156);
      goto LABEL_252;
    }
    if (capabilities::radio::ice(v69))
    {
      *(_QWORD *)&v84 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v84 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v204 = v84;
      v205 = v84;
      v202 = v84;
      v203 = v84;
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v202, "(.*ARI_TIMEOUT -.*)( SZ\\([0-9]*\\).*)", 0);
      *(_QWORD *)&v85 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v85 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v197 = 0xAAAAAAAAAAAAAA00;
      v194[3] = 0xAAAAAAAAAAAAAAAALL;
      v200 = v85;
      v195 = 0;
      v196 = 0;
      v198 = 0;
      v199 = 0;
      LOBYTE(v200) = 0;
      BYTE8(v200) = 0;
      v201 = 0;
      *(_OWORD *)__p = 0u;
      memset(v194, 0, 25);
      v213 = 0xAAAAAAAAAAAAAA00;
      *((_QWORD *)&v210[1] + 1) = 0xAAAAAAAAAAAAAAAALL;
      v216 = v85;
      v211 = 0;
      v212 = 0;
      v214 = 0;
      v215 = 0;
      LOBYTE(v216) = 0;
      BYTE8(v216) = 0;
      v217 = 0;
      buf = 0u;
      v210[0] = 0u;
      v86 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v87 = (std::sub_match<const char *> *)&__dst;
      else
        v87 = (std::sub_match<const char *> *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v86 = __dst.__r_.__value_.__l.__size_;
      *(_OWORD *)((char *)v210 + 9) = 0uLL;
      v88 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&v202, v87, (std::sub_match<const char *> *)((char *)v87 + v86), (std::vector<std::csub_match> *)&buf, 0);
      v89 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v90 = &__dst;
      else
        v90 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v89 = __dst.__r_.__value_.__l.__size_;
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v90, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v90 + v89), (uint64_t *)&buf, 0);
      if ((_QWORD)buf)
      {
        *((_QWORD *)&buf + 1) = buf;
        operator delete((void *)buf);
      }
      if (v88)
      {
        if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3) <= 1)
          v91 = &v194[1];
        else
          v91 = (uint64_t *)((char *)__p[0] + 24);
        std::sub_match<std::__wrap_iter<char const*>>::str[abi:ne180100](&buf, v91);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = buf;
        __str.__r_.__value_.__r.__words[2] = *(_QWORD *)&v210[0];
        std::string::operator=(&__dst, &__str);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v92 = (std::__shared_weak_count *)v205;
      if (!(_QWORD)v205)
        goto LABEL_259;
      v93 = (unint64_t *)(v205 + 8);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      goto LABEL_257;
    }
  }
LABEL_260:
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v158 = &__dst;
  else
    v158 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v159 = xpc_string_create((const char *)v158);
  if (!v159)
    v159 = xpc_null_create();
  xpc_dictionary_set_value(v10, "resetReason", v159);
  v160 = xpc_null_create();
  xpc_release(v159);
  xpc_release(v160);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v161 = &__str;
  else
    v161 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v162 = xpc_string_create((const char *)v161);
  if (!v162)
    v162 = xpc_null_create();
  xpc_dictionary_set_value(v10, "shortResetReason", v162);
  v163 = xpc_null_create();
  xpc_release(v162);
  xpc_release(v163);
  v164 = xpc_string_create((const char *)*MEMORY[0x24BE05088]);
  if (!v164)
    v164 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x24BE050D0], v164);
  v165 = xpc_null_create();
  xpc_release(v164);
  xpc_release(v165);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_274;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_274;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_274:
  v166 = xpc_string_create("metricsCCBasebandResetInfo");
  if (!v166)
    v166 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x24BE05010], v166);
  v167 = xpc_null_create();
  xpc_release(v166);
  xpc_release(v167);
  v168 = xpc_string_create("Reset");
  if (!v168)
    v168 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x24BE050D8], v168);
  v169 = xpc_null_create();
  xpc_release(v168);
  xpc_release(v169);
  if (v10)
  {
    xpc_retain(v10);
    v170 = v10;
  }
  else
  {
    v170 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x24BE05450], v170);
  v171 = xpc_null_create();
  xpc_release(v170);
  xpc_release(v171);
  v172 = xpc_dictionary_create(0, 0, 0);
  if (v172 || (v172 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v172) == v5)
    {
      xpc_retain(v172);
      v173 = v172;
    }
    else
    {
      v173 = xpc_null_create();
    }
  }
  else
  {
    v173 = xpc_null_create();
    v172 = 0;
  }
  xpc_release(v172);
  v174 = xpc_string_create((const char *)*MEMORY[0x24BE04E58]);
  if (!v174)
    v174 = xpc_null_create();
  xpc_dictionary_set_value(v173, (const char *)*MEMORY[0x24BE04E88], v174);
  v175 = xpc_null_create();
  xpc_release(v174);
  xpc_release(v175);
  if (v8)
  {
    xpc_retain(v8);
    v176 = v8;
  }
  else
  {
    v176 = xpc_null_create();
  }
  xpc_dictionary_set_value(v173, (const char *)*MEMORY[0x24BE04E80], v176);
  v177 = xpc_null_create();
  xpc_release(v176);
  xpc_release(v177);
  v178 = (const void *)*MEMORY[0x24BE051F0];
  v179 = strlen((const char *)*MEMORY[0x24BE051F0]);
  if (v179 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v180 = v179;
  if (v179 >= 0x17)
  {
    v182 = (v179 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v179 | 7) != 0x17)
      v182 = v179 | 7;
    v183 = v182 + 1;
    p_buf = (__int128 *)operator new(v182 + 1);
    *((_QWORD *)&buf + 1) = v180;
    *(_QWORD *)&v210[0] = v183 | 0x8000000000000000;
    *(_QWORD *)&buf = p_buf;
LABEL_302:
    memmove(p_buf, v178, v180);
    *((_BYTE *)p_buf + v180) = 0;
    object = v173;
    if (v173)
      goto LABEL_298;
LABEL_303:
    object = xpc_null_create();
    goto LABEL_304;
  }
  BYTE7(v210[0]) = v179;
  p_buf = &buf;
  if (v179)
    goto LABEL_302;
  LOBYTE(buf) = 0;
  object = v173;
  if (!v173)
    goto LABEL_303;
LABEL_298:
  xpc_retain(v173);
LABEL_304:
  v184 = 0;
  Service::runCommand(a1, (uint64_t)&buf, &object, &v184);
  xpc_release(object);
  object = 0;
  if (SBYTE7(v210[0]) < 0)
    operator delete((void *)buf);
  xpc_release(v173);
  if (SHIBYTE(__s1[2]) < 0)
    operator delete((void *)__s1[0]);
  xpc_release(v10);
  xpc_release(v8);
}

void sub_24B8E05EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::locale a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *v63;
  void *v64;

  if (__p)
    operator delete(__p);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a37);
  if (a50 < 0)
    operator delete(a45);
  if (a57 < 0)
    operator delete(a52);
  if (a63 < 0)
    operator delete(a58);
  xpc_release(v64);
  xpc_release(v63);
  _Unwind_Resume(a1);
}

void BootModule::reportStatisticsHardResetTime_sync(BootModule *this)
{
  NSObject *v2;
  xpc_object_t v3;
  uint64_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  int64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  const void *v17;
  size_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  xpc_object_t object;
  uint8_t buf[8];
  size_t v26;
  unint64_t v27;

  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting Stats of hard reset time", buf, 2u);
  }
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = MEMORY[0x24BDACFA0];
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v3) == v4)
    {
      xpc_retain(v3);
      v5 = v3;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6 || (v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v6) == v4)
    {
      xpc_retain(v6);
      v7 = v6;
    }
    else
    {
      v7 = xpc_null_create();
    }
  }
  else
  {
    v7 = xpc_null_create();
    v6 = 0;
  }
  xpc_release(v6);
  v8 = time(0);
  v9 = xpc_int64_create(v8);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x24BE056B8], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_string_create((const char *)*MEMORY[0x24BE05918]);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x24BE04E88], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(0);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x24BE04F38], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (v7)
  {
    xpc_retain(v7);
    v15 = v7;
  }
  else
  {
    v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x24BE04E80], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = (const void *)*MEMORY[0x24BE051F0];
  v18 = strlen((const char *)*MEMORY[0x24BE051F0]);
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    v26 = v19;
    v27 = v22 | 0x8000000000000000;
    *(_QWORD *)buf = v20;
LABEL_32:
    memmove(v20, v17, v19);
    *((_BYTE *)v20 + v19) = 0;
    object = v5;
    if (v5)
      goto LABEL_28;
    goto LABEL_33;
  }
  HIBYTE(v27) = v18;
  v20 = buf;
  if (v18)
    goto LABEL_32;
  buf[0] = 0;
  object = v5;
  if (v5)
  {
LABEL_28:
    xpc_retain(v5);
    goto LABEL_34;
  }
LABEL_33:
  object = xpc_null_create();
LABEL_34:
  v23 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v23);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v27) < 0)
    operator delete(*(void **)buf);
  xpc_release(v7);
  xpc_release(v5);
}

void sub_24B8E0DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  xpc_release(object);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(v17);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

uint64_t _ZZZZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEEUb_EUb0_EN3__0D1Ev(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = *(NSObject **)(a1 + 144);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 136);
  if (v3)
    _Block_release(v3);
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_15:
    operator delete(*(void **)(a1 + 24));
    v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v4)
      return a1;
    goto LABEL_10;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_15;
LABEL_9:
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
LABEL_10:
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void *__copy_helper_block_e8_40c15_ZTSK9ResetInfo152c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE160c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1, _QWORD *a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  ResetInfo::ResetInfo((std::string *)(a1 + 40), (const ResetInfo *)(a2 + 5));
  result = (void *)a2[19];
  if (result)
    result = _Block_copy(result);
  v6 = a2[20];
  v5 = a2[21];
  *(_QWORD *)(a1 + 152) = result;
  *(_QWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 168) = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSK9ResetInfo152c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE160c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  const void *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(const void **)(a1 + 152);
  if (v3)
    _Block_release(v3);
  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_12;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(*(void **)(a1 + 40));
    return;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_13;
}

void *__copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE56c15_ZTSK9ResetInfo168c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *result;

  v4 = a2[6];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  ResetInfo::ResetInfo((std::string *)(a1 + 56), (const ResetInfo *)(a2 + 7));
  result = (void *)a2[21];
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 168) = result;
  return result;
}

void sub_24B8E1084(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE56c15_ZTSK9ResetInfo168c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 168);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 167) < 0)
  {
    operator delete(*(void **)(a1 + 144));
    if ((*(char *)(a1 + 127) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 103) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 127) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 104));
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 80));
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
LABEL_7:
    v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3)
      return;
    goto LABEL_8;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 56));
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
LABEL_8:
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN10BootModule4initEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL8 v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  const void *v10;
  _QWORD aBlock[6];
  std::__shared_weak_count *v12;
  uint8_t buf[16];

  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 88);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  if (capabilities::ipc::supportsPCI((capabilities::ipc *)v4))
  {
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN10BootModule4initEv_block_invoke_9;
    aBlock[3] = &__block_descriptor_tmp_15_3;
    v6 = a1[5];
    v5 = (std::__shared_weak_count *)a1[6];
    aBlock[4] = v2;
    aBlock[5] = v6;
    v12 = v5;
    if (v5)
    {
      p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
      do
        v8 = __ldxr(p_shared_weak_owners);
      while (__stxr(v8 + 1, p_shared_weak_owners));
    }
    v9 = _Block_copy(aBlock);
    v10 = *(const void **)(v2 + 264);
    *(_QWORD *)(v2 + 264) = v9;
    if (v10)
      _Block_release(v10);
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
  }
}

void ___ZN10BootModule4initEv_block_invoke_9(_QWORD *a1, int a2, uint64_t a3, int a4)
{
  std::__shared_weak_count *v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  std::string __p;
  int v16;
  int v17;
  std::string v18;
  std::__shared_weak_count *v20;

  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v9 = a1[4];
    v10 = std::__shared_weak_count::lock(v5);
    v20 = v10;
    if (v10)
    {
      v11 = v10;
      if (!a1[5])
        goto LABEL_12;
      memset(&v18, 170, sizeof(v18));
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        v18 = *(std::string *)a3;
      v14[0] = MEMORY[0x24BDAC760];
      v14[1] = 1174405120;
      v14[2] = ___ZN10BootModule4initEv_block_invoke_2;
      v14[3] = &__block_descriptor_tmp_13_3;
      v14[4] = v9;
      v16 = a2;
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      else
        __p = v18;
      v17 = a4;
      ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v9 + 120), (uint64_t)v14);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_12;
      }
      else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_12;
      }
      operator delete(v18.__r_.__value_.__l.__data_);
LABEL_12:
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_24B8E13B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
  {
    operator delete(__p);
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v24 - 64);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v24 - 64);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule4initEv_block_invoke_2(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  _QWORD *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  BOOL v15;
  BOOL v16;
  __int128 v18;
  const void *v19;
  size_t v20;
  size_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  size_t v26;
  size_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  void *v33;
  std::string v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  __int128 v41;
  char v42;
  _BYTE v43[8];
  _QWORD *v44;
  void *__p[2];
  char v46;
  __int128 v47;
  unint64_t v48;
  std::string v49;
  _BYTE __dst[24];
  uint8_t buf[16];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if (!*(_DWORD *)(a1 + 64))
  {
    v5 = *(char *)(a1 + 63);
    if (v5 >= 0)
      v6 = *(unsigned __int8 *)(a1 + 63);
    else
      v6 = *(_QWORD *)(a1 + 48);
    v7 = v6 + 11;
    memset(&v49, 170, sizeof(v49));
    if (v6 + 11 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v8 = (_QWORD **)(a1 + 40);
    if (v7 > 0x16)
    {
      v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v10 = v7 | 7;
      v11 = v10 + 1;
      v12 = (char *)operator new(v10 + 1);
      v49.__r_.__value_.__l.__size_ = v6 + 11;
      v49.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
      v13 = v12 + 11;
      *(_DWORD *)(v12 + 7) = 540693582;
      *(_QWORD *)v12 = *(_QWORD *)"PCI-EVENT: ";
      if (v5 >= 0)
        v14 = (_QWORD *)(a1 + 40);
      else
        v14 = *v8;
      memmove(v12 + 11, v14, v6);
      v13[v6] = 0;
      if (v6 == 27)
      {
        v15 = *v14 == 0x67676972742D5041 && v14[1] == 0x7361622064657265;
        v16 = v15 && v14[2] == 0x657220646E616265;
        if (v16 && *(_QWORD *)((char *)v14 + 19) == 0x746573657220646ELL)
          std::string::append(&v49, " [likely caused by bbctl reset]", 0x1FuLL);
      }
    }
    else
    {
      *(_OWORD *)&v49.__r_.__value_.__r.__words[1] = 0uLL;
      *((_BYTE *)&v49.__r_.__value_.__s + 23) = v6 + 11;
      *(_DWORD *)((char *)v49.__r_.__value_.__r.__words + 7) = 540693582;
      v49.__r_.__value_.__r.__words[0] = *(_QWORD *)"PCI-EVENT: ";
      if (v6)
      {
        if (v5 >= 0)
          v9 = (_QWORD *)(a1 + 40);
        else
          v9 = *v8;
        memmove((char *)&v49.__r_.__value_.__r.__words[1] + 3, v9, v6);
      }
      *((_BYTE *)&v49.__r_.__value_.__r.__words[1] + v6 + 3) = 0;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v56 = v18;
    v57 = v18;
    v54 = v18;
    v55 = v18;
    v52 = v18;
    v53 = v18;
    *(_OWORD *)buf = v18;
    v19 = (const void *)*MEMORY[0x24BE051D0];
    v20 = strlen((const char *)*MEMORY[0x24BE051D0]);
    if (v20 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v21 = v20;
    if (v20 >= 0x17)
    {
      v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v23 = v20 | 7;
      v24 = v23 + 1;
      v22 = operator new(v23 + 1);
      *(_QWORD *)&__dst[8] = v21;
      *(_QWORD *)&__dst[16] = v24 | 0x8000000000000000;
      *(_QWORD *)__dst = v22;
    }
    else
    {
      __dst[23] = v20;
      v22 = __dst;
      if (!v20)
      {
LABEL_43:
        v22[v21] = 0;
        v25 = (const void *)*MEMORY[0x24BE057C0];
        v26 = strlen((const char *)*MEMORY[0x24BE057C0]);
        if (v26 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v27 = v26;
        if (v26 >= 0x17)
        {
          v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v26 | 7) != 0x17)
            v29 = v26 | 7;
          v30 = v29 + 1;
          v28 = operator new(v29 + 1);
          *((_QWORD *)&v47 + 1) = v27;
          v48 = v30 | 0x8000000000000000;
          *(_QWORD *)&v47 = v28;
        }
        else
        {
          HIBYTE(v48) = v26;
          v28 = &v47;
          if (!v26)
          {
LABEL_51:
            v28[v27] = 0;
            Timestamp::Timestamp((Timestamp *)v43);
            Timestamp::asString((uint64_t)v43, 0, 9, __p);
            v42 = 0;
            LOBYTE(v41) = 0;
            ResetInfo::ResetInfo((std::string *)buf, (__int128 *)__dst, &v47, (__int128 *)&v49, (uint64_t)__p, 7, &v41);
            if (v46 < 0)
            {
              operator delete(__p[0]);
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v43, v44);
              if ((SHIBYTE(v48) & 0x80000000) == 0)
              {
LABEL_53:
                if ((__dst[23] & 0x80000000) == 0)
                  goto LABEL_54;
                goto LABEL_58;
              }
            }
            else
            {
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v43, v44);
              if ((SHIBYTE(v48) & 0x80000000) == 0)
                goto LABEL_53;
            }
            operator delete((void *)v47);
            if ((__dst[23] & 0x80000000) == 0)
            {
LABEL_54:
              v31 = v2[11];
              if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                goto LABEL_59;
LABEL_78:
              if (*(char *)(a1 + 63) < 0)
                v8 = (_QWORD **)*v8;
              v32 = *(_DWORD *)(a1 + 68);
              *(_DWORD *)__dst = 136315394;
              *(_QWORD *)&__dst[4] = v8;
              *(_WORD *)&__dst[12] = 1024;
              *(_DWORD *)&__dst[14] = v32;
              _os_log_error_impl(&dword_24B855000, v31, OS_LOG_TYPE_ERROR, "PCI event: %s, sleeping for %u ms, then requesting Baseband reset", __dst, 0x12u);
LABEL_59:
              usleep(1000 * *(_DWORD *)(a1 + 68));
              ResetInfo::ResetInfo(&v34, (const ResetInfo *)buf);
              v33 = 0;
              BootModule::requestReset(v2, (const ResetInfo *)&v34, &v33);
              if (v40 < 0)
              {
                operator delete(v39);
                if ((v38 & 0x80000000) == 0)
                {
LABEL_61:
                  if ((v36 & 0x80000000) == 0)
                    goto LABEL_62;
                  goto LABEL_71;
                }
              }
              else if ((v38 & 0x80000000) == 0)
              {
                goto LABEL_61;
              }
              operator delete(v37);
              if ((v36 & 0x80000000) == 0)
              {
LABEL_62:
                if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_63;
                goto LABEL_72;
              }
LABEL_71:
              operator delete(v35);
              if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_63:
                if ((SHIBYTE(v57) & 0x80000000) == 0)
                  goto LABEL_64;
                goto LABEL_73;
              }
LABEL_72:
              operator delete(v34.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v57) & 0x80000000) == 0)
              {
LABEL_64:
                if ((SBYTE7(v55) & 0x80000000) == 0)
                  goto LABEL_65;
                goto LABEL_74;
              }
LABEL_73:
              operator delete(*((void **)&v56 + 1));
              if ((SBYTE7(v55) & 0x80000000) == 0)
              {
LABEL_65:
                if ((SHIBYTE(v53) & 0x80000000) == 0)
                  goto LABEL_66;
                goto LABEL_75;
              }
LABEL_74:
              operator delete((void *)v54);
              if ((SHIBYTE(v53) & 0x80000000) == 0)
              {
LABEL_66:
                if ((SBYTE7(v52) & 0x80000000) == 0)
                  goto LABEL_67;
                goto LABEL_76;
              }
LABEL_75:
              operator delete(*((void **)&v52 + 1));
              if ((SBYTE7(v52) & 0x80000000) == 0)
              {
LABEL_67:
                if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  return;
                goto LABEL_77;
              }
LABEL_76:
              operator delete(*(void **)buf);
              if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                return;
LABEL_77:
              operator delete(v49.__r_.__value_.__l.__data_);
              return;
            }
LABEL_58:
            operator delete(*(void **)__dst);
            v31 = v2[11];
            if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
              goto LABEL_59;
            goto LABEL_78;
          }
        }
        memmove(v28, v25, v27);
        goto LABEL_51;
      }
    }
    memmove(v22, v19, v21);
    goto LABEL_43;
  }
  v3 = v2[11];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v4 = (_QWORD *)*v4;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I PCI event: %s", buf, 0xCu);
  }
}

void sub_24B8E19BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if ((a47 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

char *BootModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  char *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = (char *)operator new(3uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *(_WORD *)result = 256;
  result[2] = 3;
  *a1 = result;
  return result;
}

void BootModule::shutdown(uint64_t a1, int a2, NSObject **a3)
{
  uint64_t *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t *v6;
  NSObject *v7;
  uint64_t *v8;
  NSObject *v9;
  _QWORD v10[5];
  dispatch_group_t group;
  _QWORD v12[5];
  dispatch_group_t object;
  _QWORD v14[5];
  dispatch_group_t v15;

  if (a2 == 3)
  {
    v6 = (uint64_t *)(a1 + 120);
    v10[0] = MEMORY[0x24BDAC760];
    v10[1] = 1174405120;
    v10[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_26;
    v10[3] = &__block_descriptor_tmp_27_3;
    v7 = *a3;
    v10[4] = a1;
    group = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(v7);
    }
    ctu::SharedSynchronizable<BootModule>::execute_wrapped(v6, (uint64_t)v10);
    if (group)
    {
      dispatch_group_leave(group);
      v5 = group;
      if (group)
        goto LABEL_18;
    }
  }
  else
  {
    if (a2 != 1)
    {
      if (a2)
        return;
      v3 = (uint64_t *)(a1 + 120);
      v14[0] = MEMORY[0x24BDAC760];
      v14[1] = 1174405120;
      v14[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
      v14[3] = &__block_descriptor_tmp_18_4;
      v4 = *a3;
      v14[4] = a1;
      v15 = v4;
      if (v4)
      {
        dispatch_retain(v4);
        dispatch_group_enter(v4);
      }
      ctu::SharedSynchronizable<BootModule>::execute_wrapped(v3, (uint64_t)v14);
      if (!v15)
        return;
      dispatch_group_leave(v15);
      v5 = v15;
      if (!v15)
        return;
LABEL_18:
      dispatch_release(v5);
      return;
    }
    v8 = (uint64_t *)(a1 + 120);
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 1174405120;
    v12[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_19;
    v12[3] = &__block_descriptor_tmp_25_2;
    v9 = *a3;
    v12[4] = a1;
    object = v9;
    if (v9)
    {
      dispatch_retain(v9);
      dispatch_group_enter(v9);
    }
    ctu::SharedSynchronizable<BootModule>::execute_wrapped(v8, (uint64_t)v12);
    if (object)
    {
      dispatch_group_leave(object);
      v5 = object;
      if (object)
        goto LABEL_18;
    }
  }
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  unsigned int v4;
  int v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  dispatch_object_t object;
  unint64_t v18;
  unint64_t v19;
  std::string buf;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I Shutdown prepare", (uint8_t *)&buf, 2u);
  }
  v4 = *(_DWORD *)(v2 + 448);
  if (v4 <= 8)
  {
    v5 = 1 << v4;
    if ((v5 & 0x1E1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 96))(v2, 8);
      v6 = *(NSObject **)(v2 + 216);
      *(_QWORD *)(v2 + 216) = 0;
      if (v6)
      {
        dispatch_group_leave(v6);
        dispatch_release(v6);
      }
    }
    else if ((v5 & 0xE) != 0)
    {
      v7 = *(NSObject **)(a1 + 40);
      if (v7)
      {
        dispatch_retain(v7);
        dispatch_group_enter(v7);
      }
      v8 = *(NSObject **)(v2 + 216);
      *(_QWORD *)(v2 + 216) = v7;
      if (v8)
      {
        dispatch_group_leave(v8);
        dispatch_release(v8);
      }
      v9 = *(NSObject **)(v2 + 88);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_24B855000, v9, OS_LOG_TYPE_DEFAULT, "#I Holding shutdown request session", (uint8_t *)&buf, 2u);
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 96))(v2, 7);
    }
  }
  v18 = 0xAAAAAAAAAAAAAAAALL;
  v19 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v2 + 80))(&v18, v2);
  v10 = v18;
  if (v18)
  {
    v11 = (char *)operator new(0x38uLL);
    strcpy(v11, "com.apple.AppleBasebandManager.RadioNotReady.Shutdown");
    v12 = capabilities::abs::shutdownAssertionTimeoutScalingFactor((capabilities::abs *)v11);
    v13 = *(_QWORD *)(v10 + 104);
    std::string::__init_copy_ctor_external(&buf, v11, 0x35uLL);
    (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)v13 + 24))(&object, v13, &buf, 240000 * v12);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (object)
      dispatch_release(object);
    operator delete(v11);
  }
  v14 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    v15 = (unint64_t *)(v19 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_24B8E1F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  if (a18 < 0)
  {
    operator delete(__p);
    operator delete(v18);
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  operator delete(v18);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_19(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD aBlock[5];
  dispatch_group_t group;
  void *v7;
  uint8_t buf[16];

  v2 = *(_QWORD **)(a1 + 32);
  v3 = v2[11];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I Shutdown baseband", buf, 2u);
  }
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_20;
  aBlock[3] = &__block_descriptor_tmp_24_2;
  v4 = *(NSObject **)(a1 + 40);
  aBlock[4] = v2;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  v7 = _Block_copy(aBlock);
  (*(void (**)(_QWORD *, void **))(*v2 + 112))(v2, &v7);
  if (v7)
    _Block_release(v7);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void sub_24B8E2094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void *v14;
  size_t v15;
  void *v16;
  void **v17;
  CFMutableDictionaryRef v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeID v21;
  NSObject *v22;
  unint64_t v23;
  const void *v24;
  size_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  CFTypeRef v31;
  void *__p[2];
  unint64_t v33;
  _QWORD aBlock[5];
  dispatch_group_t group;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v41;
  CFMutableDictionaryRef v42;

  v2 = *(_QWORD *)(a1 + 32);
  v42 = 0;
  v3 = *MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
    v42 = Mutable;
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x24BE05198], (const __CFString **)*MEMORY[0x24BE05638], v3, v5);
  v6 = *(std::__shared_weak_count **)(v2 + 128);
  if (!v6 || (v7 = *(_QWORD *)(v2 + 120), (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v14 = (const void *)*MEMORY[0x24BE05658];
  v15 = strlen((const char *)*MEMORY[0x24BE05658]);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v16 = (void *)v15;
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    v17 = (void **)operator new(v19 + 1);
    __dst[1] = v16;
    v41 = v20 | 0x8000000000000000;
    __dst[0] = v17;
LABEL_19:
    memmove(v17, v14, (size_t)v16);
    *((_BYTE *)v16 + (_QWORD)v17) = 0;
    v18 = v42;
    if (!v42)
      goto LABEL_22;
    goto LABEL_20;
  }
  HIBYTE(v41) = v15;
  v17 = __dst;
  if (v15)
    goto LABEL_19;
  LOBYTE(__dst[0]) = 0;
  v18 = v42;
  if (!v42)
    goto LABEL_22;
LABEL_20:
  v21 = CFGetTypeID(v18);
  if (v21 == CFDictionaryGetTypeID())
  {
    cf = v18;
    CFRetain(v18);
    goto LABEL_23;
  }
LABEL_22:
  cf = 0;
LABEL_23:
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_22_3;
  v22 = *(NSObject **)(a1 + 40);
  aBlock[4] = v2;
  group = v22;
  if (v22)
  {
    dispatch_retain(v22);
    dispatch_group_enter(v22);
  }
  v36 = v7;
  v37 = v9;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  v38 = _Block_copy(aBlock);
  Service::broadcastEvent(v2, (uint64_t)__dst, &cf, (const void **)&v38);
  if (v38)
    _Block_release(v38);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v41) < 0)
    operator delete(__dst[0]);
  v24 = (const void *)*MEMORY[0x24BE05208];
  v25 = strlen((const char *)*MEMORY[0x24BE05208]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v27 = operator new(v28 + 1);
    __p[1] = v26;
    v33 = v29 | 0x8000000000000000;
    __p[0] = v27;
    goto LABEL_40;
  }
  HIBYTE(v33) = v25;
  v27 = __p;
  if (v25)
LABEL_40:
    memmove(v27, v24, (size_t)v26);
  *((_BYTE *)v26 + (_QWORD)v27) = 0;
  v30 = 0;
  v31 = 0;
  Service::broadcastEvent(v2, (uint64_t)__p, &v31, (const void **)&v30);
  if (v30)
    _Block_release(v30);
  if (v31)
    CFRelease(v31);
  if (SHIBYTE(v33) < 0)
    operator delete(__p[0]);
  if (v37)
    std::__shared_weak_count::__release_weak(v37);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  std::__shared_weak_count::__release_weak(v9);
  if (v42)
    CFRelease(v42);
}

void sub_24B8E2458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,dispatch_group_t group,uint64_t a23,std::__shared_weak_count *a24,void *a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v35;
  NSObject *v36;

  if (aBlock)
    _Block_release(aBlock);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    v35 = a24;
    if (!a24)
    {
LABEL_5:
      v36 = group;
      if (!group)
        goto LABEL_11;
      goto LABEL_9;
    }
  }
  else
  {
    v35 = a24;
    if (!a24)
      goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v35);
  v36 = group;
  if (!group)
    goto LABEL_11;
LABEL_9:
  dispatch_group_leave(v36);
  if (group)
    dispatch_release(group);
LABEL_11:
  std::__shared_weak_count::__release_weak(v32);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v33 - 96));
  _Unwind_Resume(a1);
}

void sub_24B8E254C(_Unwind_Exception *a1)
{
  uint64_t v1;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_24B8E2560(_Unwind_Exception *a1)
{
  uint64_t v1;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 96));
  _Unwind_Resume(a1);
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[5];

  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[6];
      if (v6)
      {
        v9[0] = MEMORY[0x24BDAC760];
        v9[1] = 0x40000000;
        v9[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_3;
        v9[3] = &__block_descriptor_tmp_21_2;
        v9[4] = v3;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v9);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string v10;

  v1 = *(_QWORD *)(a1 + 32);
  v8 = 0xAAAAAAAAAAAAAAAALL;
  v9 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)v1 + 80))(&v8);
  v2 = v8;
  if (v8)
  {
    v3 = (char *)operator new(0x38uLL);
    strcpy(v3, "com.apple.AppleBasebandManager.RadioNotReady.Shutdown");
    v4 = *(_QWORD *)(v2 + 104);
    std::string::__init_copy_ctor_external(&v10, v3, 0x35uLL);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v4 + 32))(v4, &v10);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    operator delete(v3);
  }
  v5 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v6 = (unint64_t *)(v9 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_24B8E273C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);
  operator delete(v17);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_24B8E2770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_release(v4);
  }
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_26(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  std::string v26;

  v1 = *(_QWORD **)(a1 + 32);
  v24 = 0xAAAAAAAAAAAAAAAALL;
  v25 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, _QWORD *))(*v1 + 80))(&v24, v1);
  v2 = v24;
  if (v24)
  {
    v3 = (char *)operator new(0x38uLL);
    strcpy(v3, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
    v4 = *(_QWORD *)(v2 + 104);
    std::string::__init_copy_ctor_external(&v26, v3, 0x33uLL);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v4 + 32))(v4, &v26);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    operator delete(v3);
    v5 = v24;
    v6 = (char *)operator new(0x38uLL);
    strcpy(v6, "com.apple.AppleBasebandManager.RadioNotReady.Shutdown");
    v7 = *(_QWORD *)(v5 + 104);
    std::string::__init_copy_ctor_external(&v26, v6, 0x35uLL);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v7 + 32))(v7, &v26);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    operator delete(v6);
  }
  v8 = (std::__shared_weak_count *)v1[23];
  v1[22] = 0;
  v1[23] = 0;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v1 + 57;
  v12 = (std::__shared_weak_count *)v1[35];
  v1[34] = 0;
  v1[35] = 0;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)v1[60];
  v1[59] = 0;
  v1[60] = 0;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)v1[58];
  *v11 = 0;
  v11[1] = 0;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)v25;
  if (v25)
  {
    v22 = (unint64_t *)(v25 + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_24B8E2AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);
  operator delete(v17);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_24B8E2ADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void BootModule::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[5];
  dispatch_group_t group;

  v3 = a1 + 15;
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 1174405120;
  v15[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v15[3] = &__block_descriptor_tmp_47_0;
  v4 = *a2;
  v15[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<BootModule>::execute_wrapped(v3, (uint64_t)v15);
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(8uLL);
  *v9 = a1;
  v10 = a1[17];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::initialize(dispatch::group_session)::$_0>(BootModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  __int128 *p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  const void *v35;
  size_t v36;
  size_t v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  CommandDriverFactory *v43;
  uint64_t v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  NSObject *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  const void *v63;
  NSObject *object;
  _QWORD v65[6];
  std::__shared_weak_count *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  _QWORD v73[6];
  std::__shared_weak_count *v74;
  const void *v75;
  _QWORD v76[5];
  std::__shared_weak_count *v77;
  const void *v78;
  _QWORD v79[6];
  std::__shared_weak_count *v80;
  const void *v81;
  _QWORD aBlock[6];
  std::__shared_weak_count *v83;
  const void *v84;
  __int128 __dst;
  unint64_t v86;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (std::__shared_weak_count *)v1[16];
  if (!v2 || (v3 = v1[15], (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const void *)*MEMORY[0x24BE05588];
  v11 = strlen((const char *)*MEMORY[0x24BE05588]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (__int128 *)operator new(v14 + 1);
    *((_QWORD *)&__dst + 1) = v12;
    v86 = v15 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v86) = v11;
    p_dst = &__dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v12);
LABEL_17:
  *((_BYTE *)p_dst + v12) = 0;
  v16 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_30_1;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v83 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = _Block_copy(aBlock);
  v84 = v18;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v84);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v86) < 0)
    operator delete((void *)__dst);
  v19 = (const void *)*MEMORY[0x24BE05170];
  v20 = strlen((const char *)*MEMORY[0x24BE05170]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (__int128 *)operator new(v23 + 1);
    *((_QWORD *)&__dst + 1) = v21;
    v86 = v24 | 0x8000000000000000;
    *(_QWORD *)&__dst = v22;
  }
  else
  {
    HIBYTE(v86) = v20;
    v22 = &__dst;
    if (!v20)
      goto LABEL_31;
  }
  memmove(v22, v19, v21);
LABEL_31:
  *((_BYTE *)v22 + v21) = 0;
  v79[0] = v16;
  v79[1] = 1174405120;
  v79[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_31;
  v79[3] = &__block_descriptor_tmp_37_0;
  v79[4] = v1;
  v79[5] = v3;
  v80 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = _Block_copy(v79);
  v81 = v26;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v81);
  if (v26)
    _Block_release(v26);
  if (SHIBYTE(v86) < 0)
    operator delete((void *)__dst);
  v27 = (const void *)*MEMORY[0x24BE055B0];
  v28 = strlen((const char *)*MEMORY[0x24BE055B0]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&__dst + 1) = v29;
    v86 = v32 | 0x8000000000000000;
    *(_QWORD *)&__dst = v30;
  }
  else
  {
    HIBYTE(v86) = v28;
    v30 = &__dst;
    if (!v28)
      goto LABEL_45;
  }
  memmove(v30, v27, v29);
LABEL_45:
  *((_BYTE *)v30 + v29) = 0;
  v76[0] = v16;
  v76[1] = 1174405120;
  v76[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_38;
  v76[3] = &__block_descriptor_tmp_39_0;
  v76[4] = v3;
  v77 = v5;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  v34 = _Block_copy(v76);
  v78 = v34;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v78);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v86) < 0)
    operator delete((void *)__dst);
  v35 = (const void *)*MEMORY[0x24BE05350];
  v36 = strlen((const char *)*MEMORY[0x24BE05350]);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v37 = v36;
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = (__int128 *)operator new(v39 + 1);
    *((_QWORD *)&__dst + 1) = v37;
    v86 = v40 | 0x8000000000000000;
    *(_QWORD *)&__dst = v38;
  }
  else
  {
    HIBYTE(v86) = v36;
    v38 = &__dst;
    if (!v36)
      goto LABEL_59;
  }
  memmove(v38, v35, v37);
LABEL_59:
  *((_BYTE *)v38 + v37) = 0;
  v73[0] = v16;
  v73[1] = 1174405120;
  v73[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_40;
  v73[3] = &__block_descriptor_tmp_41;
  v73[4] = v1;
  v73[5] = v3;
  v74 = v5;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  v42 = _Block_copy(v73);
  v75 = v42;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v75);
  if (v42)
    _Block_release(v42);
  if (SHIBYTE(v86) < 0)
    operator delete((void *)__dst);
  v71 = 0xAAAAAAAAAAAAAAAALL;
  v72 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v43 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v44 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v43);
    v45 = __dst;
    __dst = 0uLL;
    v46 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v45;
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    if (*((_QWORD *)&__dst + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v44 = off_2579B85E0;
  }
  v52 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  v67 = v44;
  v68 = *(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v53 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v44 + 16))(&v69, v44);
  v71 = 0;
  v72 = 0;
  if (v70)
  {
    v72 = std::__shared_weak_count::lock(v70);
    if (v72)
      v71 = v69;
    if (v70)
      std::__shared_weak_count::__release_weak(v70);
  }
  if (!v52)
    goto LABEL_89;
  v55 = (unint64_t *)&v52->__shared_owners_;
  do
    v56 = __ldaxr(v55);
  while (__stlxr(v56 - 1, v55));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
    if (!v71)
      goto LABEL_107;
  }
  else
  {
LABEL_89:
    if (!v71)
      goto LABEL_107;
  }
  *(_QWORD *)&__dst = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&__dst + 1) = 0xAAAAAAAAAAAAAAAALL;
  v65[0] = v16;
  v65[1] = 1174405120;
  v65[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_42;
  v65[3] = &__block_descriptor_tmp_46;
  v65[4] = v1;
  v65[5] = v3;
  v66 = v5;
  do
    v57 = __ldxr(p_shared_weak_owners);
  while (__stxr(v57 + 1, p_shared_weak_owners));
  v58 = _Block_copy(v65);
  v59 = v1[17];
  if (v59)
    dispatch_retain(v59);
  *(_QWORD *)&__dst = v58;
  *((_QWORD *)&__dst + 1) = v59;
  if (!v58)
  {
    v63 = 0;
    object = v59;
    if (!v59)
      goto LABEL_97;
    goto LABEL_96;
  }
  v63 = _Block_copy(v58);
  object = v59;
  if (v59)
LABEL_96:
    dispatch_retain(v59);
LABEL_97:
  radio::CommandDriver::watchClientState();
  if (object)
    dispatch_release(object);
  if (v63)
    _Block_release(v63);
  if (v59)
    dispatch_release(v59);
  if (v58)
    _Block_release(v58);
  if (v66)
    std::__shared_weak_count::__release_weak(v66);
LABEL_107:
  v60 = v72;
  if (v72)
  {
    v61 = (unint64_t *)&v72->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (v74)
    std::__shared_weak_count::__release_weak(v74);
  if (v77)
    std::__shared_weak_count::__release_weak(v77);
  if (v80)
    std::__shared_weak_count::__release_weak(v80);
  if (v83)
    std::__shared_weak_count::__release_weak(v83);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_24B8E3370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v48;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (a30)
    std::__shared_weak_count::__release_weak(a30);
  if (a37)
    std::__shared_weak_count::__release_weak(a37);
  if (a45)
    std::__shared_weak_count::__release_weak(a45);
  v48 = *(std::__shared_weak_count **)(v46 - 144);
  if (v48)
  {
    std::__shared_weak_count::__release_weak(v48);
    std::__shared_weak_count::__release_weak(v45);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v12[0] = MEMORY[0x24BDAC760];
        v12[1] = 1174405120;
        v12[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
        v12[3] = &__block_descriptor_tmp_28_0;
        v12[4] = v6;
        v9 = *a3;
        if (*a3)
          v9 = _Block_copy(v9);
        aBlock = v9;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v12);
        if (aBlock)
          _Block_release(aBlock);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  unsigned int v11;
  xpc_object_t xdict;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = v3;
  if (v3)
  {
    xdict = v3;
  }
  else
  {
    v4 = xpc_null_create();
    xdict = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x24BD2A468](v4) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  v5 = xpc_null_create();
LABEL_8:
  xdict = v5;
LABEL_9:
  xpc_release(v4);
  switch(*(_DWORD *)(v2 + 448))
  {
    case 1:
      v6 = xpc_string_create((const char *)*MEMORY[0x24BE05530]);
      if (!v6)
        v6 = xpc_null_create();
      break;
    case 3:
      v6 = xpc_string_create((const char *)*MEMORY[0x24BE05340]);
      if (!v6)
        v6 = xpc_null_create();
      break;
    case 4:
      v6 = xpc_string_create((const char *)*MEMORY[0x24BE05418]);
      if (!v6)
        v6 = xpc_null_create();
      break;
    case 6:
      v6 = xpc_string_create((const char *)*MEMORY[0x24BE051C8]);
      if (!v6)
        v6 = xpc_null_create();
      break;
    case 7:
      v6 = xpc_string_create((const char *)*MEMORY[0x24BE05680]);
      if (!v6)
        v6 = xpc_null_create();
      break;
    case 8:
      v6 = xpc_string_create((const char *)*MEMORY[0x24BE05638]);
      if (!v6)
        v6 = xpc_null_create();
      break;
    default:
      v6 = xpc_string_create((const char *)*MEMORY[0x24BE054A8]);
      if (!v6)
        v6 = xpc_null_create();
      break;
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x24BE05198], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  if (*(_BYTE *)(v2 + 228))
  {
    v8 = (const char *)(v2 + 152);
    if (*(char *)(v2 + 175) < 0)
      v8 = *(const char **)v8;
    v9 = xpc_string_create(v8);
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x24BE04F20], v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
  }
  v11 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), &v11, &xdict);
  xpc_release(xdict);
}

void sub_24B8E3AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t xpc::dict::object_proxy::operator=@<X0>(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t result;

  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  result = xpc_null_create();
  *a2 = result;
  return result;
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_31(_QWORD *a1, xpc_object_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  char v13;
  size_t size;
  std::string *v15;
  int v16;
  size_t v17;
  std::string *v18;
  _BOOL4 v19;
  const void *v20;
  size_t v21;
  std::string::size_type v22;
  _BYTE *p_dst;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  std::string *v29;
  __int128 v30;
  NSObject *v31;
  std::string *v32;
  xpc_object_t v33;
  uint64_t v34;
  xpc_object_t v35;
  std::string *v36;
  std::string::size_type v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  std::string *v41;
  std::string::size_type v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  _QWORD v45[5];
  std::string v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  void *aBlock;
  xpc_object_t v54;
  xpc_object_t object;
  xpc_object_t v56;
  std::string v57;
  __int128 buf;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void *__p;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v69;
  std::string __dst;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (uint64_t *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v69 = v8;
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
        goto LABEL_115;
      v10 = MEMORY[0x24BD2A468](*a2);
      v11 = MEMORY[0x24BDACFA0];
      if (v10 != MEMORY[0x24BDACFA0])
      {
        v12 = v7[11];
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_error_impl(&dword_24B855000, v12, OS_LOG_TYPE_ERROR, "No input is given", (uint8_t *)&buf, 2u);
        }
        goto LABEL_115;
      }
      v64 = 0xAAAAAAAAAAAAAAAALL;
      __p = 0;
      v66 = 0;
      v67 = 0;
      buf = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0;
      v63 = 0xAAAAAAAAAAAAAAAALL;
      ResetInfo::fetchFromDict((void **)&buf, a2);
      if (SBYTE7(v59) < 0)
      {
        std::string::__init_copy_ctor_external(&v57, (const std::string::value_type *)buf, *((std::string::size_type *)&buf + 1));
      }
      else
      {
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = buf;
        v57.__r_.__value_.__r.__words[2] = v59;
      }
      v13 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
      else
        size = v57.__r_.__value_.__l.__size_;
      if (size == strlen((const char *)*MEMORY[0x24BE051D0]))
      {
        v15 = (v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v57
            : (std::string *)v57.__r_.__value_.__r.__words[0];
        if (!memcmp(v15, (const void *)*MEMORY[0x24BE051D0], size))
        {
          v19 = 1;
          if ((v13 & 0x80) == 0)
          {
LABEL_34:
            if (!v19)
            {
              v24 = v7[11];
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                if (SBYTE7(v59) < 0)
                {
                  std::string::__init_copy_ctor_external(&v57, (const std::string::value_type *)buf, *((std::string::size_type *)&buf + 1));
                }
                else
                {
                  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = buf;
                  v57.__r_.__value_.__r.__words[2] = v59;
                }
                v32 = &v57;
                if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v32 = (std::string *)v57.__r_.__value_.__r.__words[0];
                LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
                _os_log_impl(&dword_24B855000, v24, OS_LOG_TYPE_DEFAULT, "#I Invalid reset request [%s] ignoring it", (uint8_t *)&__dst, 0xCu);
                if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v57.__r_.__value_.__l.__data_);
              }
              v33 = xpc_null_create();
              v34 = *a3;
              v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              v35 = xpc_null_create();
              (*(void (**)(uint64_t, uint64_t, std::string *))(v34 + 16))(v34, 3760250882, &v57);
              xpc_release(v57.__r_.__value_.__l.__data_);
              xpc_release(v35);
LABEL_68:
              if (SHIBYTE(v67) < 0)
              {
                operator delete(__p);
                if ((SHIBYTE(v62) & 0x80000000) == 0)
                {
LABEL_70:
                  if ((SHIBYTE(v60) & 0x80000000) == 0)
                    goto LABEL_71;
                  goto LABEL_75;
                }
              }
              else if ((SHIBYTE(v62) & 0x80000000) == 0)
              {
                goto LABEL_70;
              }
              operator delete((void *)v61);
              if ((SHIBYTE(v60) & 0x80000000) == 0)
              {
LABEL_71:
                if ((SBYTE7(v59) & 0x80000000) == 0)
                  goto LABEL_115;
LABEL_76:
                operator delete((void *)buf);
LABEL_115:
                p_shared_owners = (unint64_t *)&v9->__shared_owners_;
                do
                  v44 = __ldaxr(p_shared_owners);
                while (__stlxr(v44 - 1, p_shared_owners));
                if (!v44)
                {
                  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                  std::__shared_weak_count::__release_weak(v9);
                }
                return;
              }
LABEL_75:
              operator delete(*((void **)&v59 + 1));
              if ((SBYTE7(v59) & 0x80000000) == 0)
                goto LABEL_115;
              goto LABEL_76;
            }
            if ((*(unsigned int (**)(uint64_t *))(*v7 + 88))(v7))
            {
              memset(&v57, 170, sizeof(v57));
              v20 = (const void *)*MEMORY[0x24BE05170];
              v21 = strlen((const char *)*MEMORY[0x24BE05170]);
              if (v21 >= 0x7FFFFFFFFFFFFFF8)
                std::string::__throw_length_error[abi:ne180100]();
              v22 = v21;
              if (v21 >= 0x17)
              {
                v26 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v21 | 7) != 0x17)
                  v26 = v21 | 7;
                v27 = v26 + 1;
                p_dst = operator new(v26 + 1);
                __dst.__r_.__value_.__l.__size_ = v22;
                __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
              }
              else
              {
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v21;
                p_dst = &__dst;
                if (!v21)
                {
LABEL_58:
                  p_dst[v22] = 0;
                  v28 = (char *)operator new(0x28uLL);
                  strcpy(v28, " rejected; ABM is shutting down ");
                  v29 = std::string::append(&__dst, v28, 0x20uLL);
                  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
                  v57.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v30;
                  v29->__r_.__value_.__l.__size_ = 0;
                  v29->__r_.__value_.__r.__words[2] = 0;
                  v29->__r_.__value_.__r.__words[0] = 0;
                  operator delete(v28);
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                    v31 = v7[11];
                    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                    {
LABEL_60:
                      if (!*a3)
                        goto LABEL_103;
                      goto LABEL_85;
                    }
                  }
                  else
                  {
                    v31 = v7[11];
                    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                      goto LABEL_60;
                  }
                  v36 = &v57;
                  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v36 = (std::string *)v57.__r_.__value_.__r.__words[0];
                  LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
                  _os_log_impl(&dword_24B855000, v31, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
                  if (!*a3)
                  {
LABEL_103:
                    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v57.__r_.__value_.__l.__data_);
                      v9 = v69;
                      if ((SHIBYTE(v67) & 0x80000000) == 0)
                      {
LABEL_105:
                        if ((SHIBYTE(v62) & 0x80000000) == 0)
                          goto LABEL_106;
                        goto LABEL_112;
                      }
                    }
                    else
                    {
                      v9 = v69;
                      if ((SHIBYTE(v67) & 0x80000000) == 0)
                        goto LABEL_105;
                    }
                    operator delete(__p);
                    if ((SHIBYTE(v62) & 0x80000000) == 0)
                    {
LABEL_106:
                      if ((SHIBYTE(v60) & 0x80000000) == 0)
                        goto LABEL_107;
                      goto LABEL_113;
                    }
LABEL_112:
                    operator delete((void *)v61);
                    if ((SHIBYTE(v60) & 0x80000000) == 0)
                    {
LABEL_107:
                      if ((SBYTE7(v59) & 0x80000000) == 0)
                        goto LABEL_108;
                      goto LABEL_114;
                    }
LABEL_113:
                    operator delete(*((void **)&v59 + 1));
                    if ((SBYTE7(v59) & 0x80000000) == 0)
                    {
LABEL_108:
                      if (!v9)
                        return;
                      goto LABEL_115;
                    }
LABEL_114:
                    operator delete((void *)buf);
                    if (!v9)
                      return;
                    goto LABEL_115;
                  }
LABEL_85:
                  v56 = xpc_null_create();
                  v37 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
                  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v37 = v57.__r_.__value_.__l.__size_;
                  if (!v37)
                    goto LABEL_102;
                  v38 = xpc_dictionary_create(0, 0, 0);
                  v39 = v38;
                  if (v38)
                  {
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
                  }
                  else
                  {
                    v39 = xpc_null_create();
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
                    if (!v39)
                    {
                      v40 = xpc_null_create();
                      v39 = 0;
                      goto LABEL_95;
                    }
                  }
                  if (MEMORY[0x24BD2A468](v39) == v11)
                  {
                    xpc_retain(v39);
LABEL_96:
                    xpc_release(v39);
                    xpc::dict::operator=(&v56, (xpc_object_t *)&__dst.__r_.__value_.__l.__data_);
                    xpc_release(__dst.__r_.__value_.__l.__data_);
                    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v41 = &v57;
                    else
                      v41 = (std::string *)v57.__r_.__value_.__r.__words[0];
                    v54 = xpc_string_create((const char *)v41);
                    if (!v54)
                      v54 = xpc_null_create();
                    v42 = *MEMORY[0x24BE04F20];
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
                    __dst.__r_.__value_.__l.__size_ = v42;
                    xpc::dict::object_proxy::operator=((uint64_t)&__dst, &v54, &object);
                    xpc_release(object);
                    object = 0;
                    xpc_release(v54);
                    v54 = 0;
LABEL_102:
                    LODWORD(__dst.__r_.__value_.__l.__data_) = -534716415;
                    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, (unsigned int *)&__dst, &v56);
                    xpc_release(v56);
                    goto LABEL_103;
                  }
                  v40 = xpc_null_create();
LABEL_95:
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
                  goto LABEL_96;
                }
              }
              memmove(p_dst, v20, v22);
              goto LABEL_58;
            }
            v45[0] = MEMORY[0x24BDAC760];
            v45[1] = 1174405120;
            v45[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_33;
            v45[3] = &__block_descriptor_tmp_36_0;
            v45[4] = v7;
            ResetInfo::ResetInfo(&v46, (const ResetInfo *)&buf);
            v25 = (void *)*a3;
            if (*a3)
              v25 = _Block_copy(v25);
            aBlock = v25;
            ctu::SharedSynchronizable<BootModule>::execute_wrapped(v7 + 15, (uint64_t)v45);
            if (aBlock)
              _Block_release(aBlock);
            if (v52 < 0)
            {
              operator delete(v51);
              if ((v50 & 0x80000000) == 0)
              {
LABEL_49:
                if ((v48 & 0x80000000) == 0)
                  goto LABEL_50;
                goto LABEL_79;
              }
            }
            else if ((v50 & 0x80000000) == 0)
            {
              goto LABEL_49;
            }
            operator delete(v49);
            if ((v48 & 0x80000000) == 0)
            {
LABEL_50:
              if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_68;
LABEL_80:
              operator delete(v46.__r_.__value_.__l.__data_);
              goto LABEL_68;
            }
LABEL_79:
            operator delete(v47);
            if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_68;
            goto LABEL_80;
          }
LABEL_33:
          operator delete(v57.__r_.__value_.__l.__data_);
          goto LABEL_34;
        }
      }
      if (SBYTE7(v59) < 0)
      {
        std::string::__init_copy_ctor_external(&__dst, (const std::string::value_type *)buf, *((std::string::size_type *)&buf + 1));
      }
      else
      {
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = buf;
        __dst.__r_.__value_.__r.__words[2] = v59;
      }
      v16 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        v17 = __dst.__r_.__value_.__l.__size_;
      if (v17 == strlen((const char *)*MEMORY[0x24BE051D8]))
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &__dst;
        else
          v18 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v19 = memcmp(v18, (const void *)*MEMORY[0x24BE051D8], v17) == 0;
        if ((v16 & 0x80000000) == 0)
        {
LABEL_32:
          if ((*((_BYTE *)&v57.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_34;
          goto LABEL_33;
        }
      }
      else
      {
        v19 = 0;
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_32;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_32;
    }
  }
}

void sub_24B8E42D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,xpc_object_t object,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void **xpc::dict::operator=(void **a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  void *v4;

  v3 = *a2;
  *a2 = xpc_null_create();
  v4 = *a1;
  *a1 = v3;
  xpc_release(v4);
  return a1;
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_33(_QWORD *a1)
{
  _QWORD *v2;
  const ResetInfo *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  std::string v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *aBlock;
  void *v16;
  std::string v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;

  v2 = (_QWORD *)a1[4];
  v3 = (const ResetInfo *)(a1 + 5);
  ResetInfo::ResetInfo(&v17, (const ResetInfo *)(a1 + 5));
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1174405120;
  v7[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2_34;
  v7[3] = &__block_descriptor_tmp_35_0;
  ResetInfo::ResetInfo(&v8, v3);
  v4 = (void *)a1[19];
  if (v4)
    v4 = _Block_copy(v4);
  aBlock = v4;
  v5 = _Block_copy(v7);
  v16 = v5;
  BootModule::requestReset(v2, (const ResetInfo *)&v17, &v16);
  if (v5)
    _Block_release(v5);
  if (v23 < 0)
  {
    operator delete(__p);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_7:
      if ((v19 & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_13;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v20);
  if ((v19 & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_14:
    operator delete(v17.__r_.__value_.__l.__data_);
    v6 = aBlock;
    if (!aBlock)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_13:
  operator delete(v18);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_14;
LABEL_9:
  v6 = aBlock;
  if (aBlock)
LABEL_15:
    _Block_release(v6);
LABEL_16:
  if (v14 < 0)
  {
    operator delete(v13);
    if ((v12 & 0x80000000) == 0)
    {
LABEL_18:
      if ((v10 & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_23;
    }
  }
  else if ((v12 & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(v11);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_24:
    operator delete(v8.__r_.__value_.__l.__data_);
    return;
  }
LABEL_23:
  operator delete(v9);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_24;
}

void sub_24B8E45C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock,uint64_t a28,void *a29)
{
  void **v29;
  const void *v30;

  if (v30)
    _Block_release(v30);
  if (aBlock)
    _Block_release(aBlock);
  ResetInfo::~ResetInfo(v29);
  ResetInfo::~ResetInfo(&a29);
  _Unwind_Resume(a1);
}

void sub_24B8E4608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  ResetInfo::~ResetInfo(&a29);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2_34(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t v10;
  _DWORD *v11;
  void **v12;
  xpc_object_t v13;
  xpc_object_t v14;
  void *__p[2];
  char v16;
  xpc_object_t xdict;
  unsigned int v18;
  _DWORD *v19;
  _QWORD *v20[2];

  v18 = a2;
  v5 = xpc_dictionary_create(0, 0, 0);
  v6 = v5;
  if (v5)
  {
    xdict = v5;
  }
  else
  {
    v6 = xpc_null_create();
    xdict = v6;
    if (!v6)
    {
      v7 = xpc_null_create();
      v6 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x24BD2A468](v6) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v6);
    goto LABEL_9;
  }
  v7 = xpc_null_create();
LABEL_8:
  xdict = v7;
LABEL_9:
  xpc_release(v6);
  if (*((char *)a3 + 23) < 0)
  {
    if (!a3[1])
      goto LABEL_17;
    a3 = (uint64_t *)*a3;
  }
  else if (!*((_BYTE *)a3 + 23))
  {
    goto LABEL_17;
  }
  v8 = xpc_string_create((const char *)a3);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x24BE04F20], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
LABEL_17:
  v10 = *(_QWORD *)(a1 + 104);
  v11 = operator new(0x38uLL);
  v11[8] = 0;
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = v20;
  v19 = v11;
  v20[0] = v11;
  *((_BYTE *)v11 + 24) = 1;
  v20[1] = (_QWORD *)1;
  *((_QWORD *)v11 + 5) = v10;
  *((_QWORD *)v11 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v19, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v19, v20[0]);
  if (v16 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  v13 = xpc_string_create((const char *)v12);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x24BE05090], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (v16 < 0)
    operator delete(__p[0]);
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 144), &v18, &xdict);
  xpc_release(xdict);
}

void sub_24B8E4824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, uint64_t a13, char a14, uint64_t a15)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c14_ZTS9ResetInfo144c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  ResetInfo::ResetInfo((std::string *)(a1 + 32), (const ResetInfo *)(a2 + 32));
  result = *(void **)(a2 + 144);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 144) = result;
  return result;
}

void __destroy_helper_block_e8_32c14_ZTS9ResetInfo144c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 144);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 79) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 80));
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(*(void **)(a1 + 32));
    return;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_11;
}

void *__copy_helper_block_e8_40c14_ZTS9ResetInfo152c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  ResetInfo::ResetInfo((std::string *)(a1 + 40), (const ResetInfo *)(a2 + 40));
  result = *(void **)(a2 + 152);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 152) = result;
  return result;
}

void __destroy_helper_block_e8_40c14_ZTS9ResetInfo152c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 152);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(*(void **)(a1 + 40));
    return;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_11;
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_38(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  std::__shared_weak_count *v9;
  xpc_object_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned int v13;
  xpc_object_t object;
  std::__shared_weak_count *v16;

  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    v6 = std::__shared_weak_count::lock(v4);
    v16 = v6;
    if (v6)
    {
      if (!*(_QWORD *)(a1 + 32))
      {
        v9 = v6;
LABEL_14:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v7 = xpc_dictionary_create(0, 0, 0);
      v8 = v7;
      if (v7)
      {
        object = v7;
      }
      else
      {
        v8 = xpc_null_create();
        object = v8;
        if (!v8)
        {
          v10 = xpc_null_create();
          v8 = 0;
          goto LABEL_12;
        }
      }
      if (MEMORY[0x24BD2A468](v8) == MEMORY[0x24BDACFA0])
      {
        xpc_retain(v8);
        goto LABEL_13;
      }
      v10 = xpc_null_create();
LABEL_12:
      object = v10;
LABEL_13:
      xpc_release(v8);
      v13 = 0;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v13, &object);
      xpc_release(object);
      v9 = v16;
      if (!v16)
        return;
      goto LABEL_14;
    }
  }
}

void sub_24B8E4B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  xpc_release(object);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_40(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  xpc_object_t v11;
  void (**v12)(const void *, uint64_t, _BYTE *);
  xpc_object_t v13;
  xpc_object_t v14;
  void (**v15)(const void *, uint64_t, _BYTE *);
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  xpc_object_t v22;
  NSObject *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  _BYTE object[24];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  v31 = v8;
  if (!v8)
    return;
  v9 = v8;
  if (!a1[5])
    goto LABEL_22;
  if (MEMORY[0x24BD2A468](*a2) != MEMORY[0x24BDACFA0])
  {
    v10 = v7[11];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v30 = *MEMORY[0x24BE05350];
      *(_DWORD *)object = 136315138;
      *(_QWORD *)&object[4] = v30;
      _os_log_error_impl(&dword_24B855000, v10, OS_LOG_TYPE_ERROR, "No input is given for %s", object, 0xCu);
      if (!*a3)
      {
LABEL_22:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
    }
    else if (!*a3)
    {
      goto LABEL_22;
    }
    v11 = xpc_null_create();
    v12 = (void (**)(const void *, uint64_t, _BYTE *))*a3;
    *(_QWORD *)object = v11;
    v13 = xpc_null_create();
    v12[2](v12, 3760250880, object);
    xpc_release(*(xpc_object_t *)object);
    xpc_release(v13);
    goto LABEL_22;
  }
  v14 = (xpc_object_t)*a2;
  if (v14)
  {
    xpc_retain(v14);
    v15 = (void (**)(const void *, uint64_t, _BYTE *))*a3;
    if (*a3)
      goto LABEL_10;
  }
  else
  {
    v14 = xpc_null_create();
    v15 = (void (**)(const void *, uint64_t, _BYTE *))*a3;
    if (*a3)
    {
LABEL_10:
      v16 = _Block_copy(v15);
      v17 = (std::__shared_weak_count *)v7[16];
      if (!v17)
LABEL_29:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_14;
    }
  }
  v16 = 0;
  v17 = (std::__shared_weak_count *)v7[16];
  if (!v17)
    goto LABEL_29;
LABEL_14:
  v18 = v7[15];
  v19 = std::__shared_weak_count::lock(v17);
  if (!v19)
    goto LABEL_29;
  v20 = v19;
  v21 = operator new(0x18uLL);
  *v21 = v7;
  v21[1] = v14;
  v22 = xpc_null_create();
  v21[2] = v16;
  v23 = v7[17];
  v24 = (unint64_t *)&v20->__shared_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  v26 = operator new(0x18uLL);
  *v26 = v21;
  v26[1] = v18;
  v26[2] = v20;
  dispatch_async_f(v23, v26, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb1_EUb2_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  do
    v27 = __ldaxr(v24);
  while (__stlxr(v27 - 1, v24));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  xpc_release(v22);
  v9 = v31;
  if (v31)
    goto LABEL_22;
}

void sub_24B8E4E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_42(_QWORD *a1, uint64_t a2, ctu **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  const void *v8;
  std::__shared_weak_count *v9;
  xpc_object_t v10;
  uint64_t v11;
  xpc_object_t value;
  NSObject *v13;
  const char *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _BYTE object[24];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v9 = v7;
      if (a1[5])
      {
        ctu::cf_to_xpc(*a3, v8);
        v10 = *(xpc_object_t *)object;
        v11 = MEMORY[0x24BDACFA0];
        if (*(_QWORD *)object && MEMORY[0x24BD2A468](*(_QWORD *)object) == v11)
          xpc_retain(*(xpc_object_t *)object);
        else
          v10 = xpc_null_create();
        xpc_release(*(xpc_object_t *)object);
        if (MEMORY[0x24BD2A468](v10) == v11)
        {
          value = xpc_dictionary_get_value(v10, (const char *)*MEMORY[0x24BED3820]);
          *(_QWORD *)object = value;
          if (value)
            xpc_retain(value);
          else
            *(_QWORD *)object = xpc_null_create();
          *(_BYTE *)(v6 + 192) = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(*(xpc_object_t *)object);
          v13 = *(NSObject **)(v6 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            if (*(_BYTE *)(v6 + 192))
              v14 = "started";
            else
              v14 = "stopped";
            *(_DWORD *)object = 136315138;
            *(_QWORD *)&object[4] = v14;
            _os_log_impl(&dword_24B855000, v13, OS_LOG_TYPE_DEFAULT, "#I Transport client %s", object, 0xCu);
          }
        }
        xpc_release(v10);
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_24B8E504C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void BootModule::start(_QWORD *a1, dispatch_object_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *v19;
  NSObject *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v13);
  }
  v14 = (std::__shared_weak_count *)a1[16];
  if (!v14 || (v15 = a1[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v16;
  v18 = operator new(0x20uLL);
  *v18 = v5;
  v18[1] = v7;
  v18[2] = v13;
  v18[3] = a1;
  v19 = (unint64_t *)&v17->__shared_owners_;
  v20 = a1[17];
  do
    v21 = __ldxr(v19);
  while (__stxr(v21 + 1, v19));
  v22 = operator new(0x18uLL);
  *v22 = v18;
  v22[1] = v15;
  v22[2] = v17;
  dispatch_async_f(v20, v22, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::start(dispatch::group_session)::$_0>(BootModule::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v23 = __ldaxr(v19);
  while (__stlxr(v23 - 1, v19));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void BootModule::finishInitialization_sync(BootModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const char *v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  AppleBasebandManager **v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  char *v25;
  size_t v26;
  void *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  NSObject *v33;
  const void *v34;
  size_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  NSObject *v42;
  const void *v43;
  size_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  NSObject *v51;
  _QWORD v52[6];
  std::__shared_weak_count *v53;
  void *v54;
  dispatch_object_t v55;
  void *v56[2];
  unint64_t v57;
  _QWORD v58[6];
  std::__shared_weak_count *v59;
  void *v60;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v63;
  _QWORD aBlock[6];
  std::__shared_weak_count *v65;
  const void *v66;
  dispatch_object_t v67;
  void *v68[2];
  unint64_t v69;
  const void *v70;
  void *__dst[2];
  unint64_t v72;
  __int128 v73;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const char *)(*(uint64_t (**)(BootModule *))(*(_QWORD *)this + 16))(this);
  v11 = strlen(v10);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = (void **)operator new(v14 + 1);
    __dst[1] = v12;
    v72 = v15 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v72) = v11;
    v13 = __dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(v13, v10, (size_t)v12);
LABEL_17:
  *((_BYTE *)v12 + (_QWORD)v13) = 0;
  v70 = 0;
  AppleBasebandManager::create();
  v16 = (AppleBasebandManager **)((char *)this + 456);
  v17 = v73;
  v73 = 0uLL;
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
  *(_OWORD *)((char *)this + 456) = v17;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
  if (!*((_QWORD *)&v73 + 1))
    goto LABEL_26;
  v22 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_26:
    v24 = v70;
    if (!v70)
      goto LABEL_28;
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  v24 = v70;
  if (v70)
LABEL_27:
    CFRelease(v24);
LABEL_28:
  if (SHIBYTE(v72) < 0)
    operator delete(__dst[0]);
  v25 = abm::kEventTransportIsReady[0];
  v26 = strlen(abm::kEventTransportIsReady[0]);
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v29 = v26 | 7;
    v30 = v29 + 1;
    v28 = (void **)operator new(v29 + 1);
    v68[1] = v27;
    v69 = v30 | 0x8000000000000000;
    v68[0] = v28;
  }
  else
  {
    HIBYTE(v69) = v26;
    v28 = v68;
    if (!v26)
      goto LABEL_38;
  }
  memmove(v28, v25, (size_t)v27);
LABEL_38:
  *((_BYTE *)v27 + (_QWORD)v28) = 0;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_51_1;
  aBlock[4] = this;
  aBlock[5] = v3;
  v65 = v5;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v32 = _Block_copy(aBlock);
  v33 = *((_QWORD *)this + 17);
  if (v33)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v66 = v32;
  v67 = v33;
  AppleBasebandManager::setEventHandler();
  if (v67)
    dispatch_release(v67);
  if (v66)
    _Block_release(v66);
  if (SHIBYTE(v69) < 0)
    operator delete(v68[0]);
  v34 = (const void *)*MEMORY[0x24BE054C0];
  v35 = strlen((const char *)*MEMORY[0x24BE054C0]);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v37 = operator new(v38 + 1);
    __p[1] = v36;
    v63 = v39 | 0x8000000000000000;
    __p[0] = v37;
  }
  else
  {
    HIBYTE(v63) = v35;
    v37 = __p;
    if (!v35)
      goto LABEL_56;
  }
  memmove(v37, v34, (size_t)v36);
LABEL_56:
  *((_BYTE *)v36 + (_QWORD)v37) = 0;
  v58[0] = MEMORY[0x24BDAC760];
  v58[1] = 1174405120;
  v58[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_52;
  v58[3] = &__block_descriptor_tmp_53_0;
  v58[4] = this;
  v58[5] = v3;
  v59 = v5;
  do
    v40 = __ldxr(p_shared_weak_owners);
  while (__stxr(v40 + 1, p_shared_weak_owners));
  v41 = _Block_copy(v58);
  v42 = *((_QWORD *)this + 17);
  if (v42)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v60 = v41;
  object = v42;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (v60)
    _Block_release(v60);
  if (SHIBYTE(v63) < 0)
    operator delete(__p[0]);
  v43 = (const void *)*MEMORY[0x24BE05778];
  v44 = strlen((const char *)*MEMORY[0x24BE05778]);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v45 = (void *)v44;
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    v46 = operator new(v47 + 1);
    v56[1] = v45;
    v57 = v48 | 0x8000000000000000;
    v56[0] = v46;
  }
  else
  {
    HIBYTE(v57) = v44;
    v46 = v56;
    if (!v44)
      goto LABEL_74;
  }
  memmove(v46, v43, (size_t)v45);
LABEL_74:
  *((_BYTE *)v45 + (_QWORD)v46) = 0;
  v52[0] = MEMORY[0x24BDAC760];
  v52[1] = 1174405120;
  v52[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_54;
  v52[3] = &__block_descriptor_tmp_55_0;
  v52[4] = this;
  v52[5] = v3;
  v53 = v5;
  do
    v49 = __ldxr(p_shared_weak_owners);
  while (__stxr(v49 + 1, p_shared_weak_owners));
  v50 = _Block_copy(v52);
  v51 = *((_QWORD *)this + 17);
  if (v51)
    dispatch_retain(v51);
  v54 = v50;
  v55 = v51;
  AppleBasebandManager::setEventHandler();
  if (v55)
    dispatch_release(v55);
  if (v54)
    _Block_release(v54);
  if (SHIBYTE(v57) < 0)
    operator delete(v56[0]);
  AppleBasebandManager::eventsOn(*v16);
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
  if (v65)
    std::__shared_weak_count::__release_weak(v65);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_24B8E57D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  std::__shared_weak_count *v45;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a30)
    std::__shared_weak_count::__release_weak(a30);
  if (a45)
  {
    std::__shared_weak_count::__release_weak(a45);
    std::__shared_weak_count::__release_weak(v45);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  BootModule *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v9;
  __CFDictionary *v10;
  const __CFString **v11;
  const __CFString **v12;
  const void *v13;
  const __CFAllocator *v14;
  const void *v15;
  NSObject *v16;
  const char *v17;
  const __CFAllocator *v18;
  __CFDictionary *v19;
  uint64_t (*v20)(uint64_t);
  const __CFString **v21;
  const void *v22;
  const void *v23;
  size_t v24;
  void *v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  CFTypeRef v29;
  CFTypeID v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *p_shared_weak_owners;
  unint64_t v34;
  NSObject *v35;
  uint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _QWORD v39[6];
  std::__shared_weak_count *v40;
  void *aBlock;
  CFTypeRef v42;
  void *__dst[2];
  unint64_t v44;
  CFTypeRef cf;
  void *object;
  std::__shared_weak_count *v48;
  __CFDictionary *v49;
  uint64_t v50;
  _BYTE state[22];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    return;
  v3 = (BootModule *)a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  v48 = v4;
  if (!v4)
    return;
  v5 = v4;
  if (!a1[5])
  {
LABEL_61:
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    return;
  }
  v6 = *((int *)v3 + 112);
  if ((_DWORD)v6 != 3)
  {
    v16 = *((_QWORD *)v3 + 11);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      if (v6 > 8)
        v17 = "Unknown";
      else
        v17 = off_251CBE200[v6];
      v36 = *MEMORY[0x24BE05418];
      *(_DWORD *)state = 136315394;
      *(_QWORD *)&state[4] = v17;
      *(_WORD *)&state[12] = 2080;
      *(_QWORD *)&state[14] = v36;
      _os_log_impl(&dword_24B855000, v16, OS_LOG_TYPE_DEFAULT, "#I State is '%s'; don't send '%s' event", state, 0x16u);
    }
    goto LABEL_61;
  }
  object = _os_activity_create(&dword_24B855000, "Baseband state: transport is ready", MEMORY[0x24BDACB08], OS_ACTIVITY_FLAG_DEFAULT);
  memset(state, 170, 16);
  os_activity_scope_enter((os_activity_t)object, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);
  (*(void (**)(BootModule *, uint64_t))(*(_QWORD *)v3 + 96))(v3, 4);
  cf = 0;
  v7 = *MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v10 = Mutable;
  if (Mutable)
    cf = Mutable;
  v11 = (const __CFString **)*MEMORY[0x24BE05198];
  *(_QWORD *)state = 0;
  ctu::cf::convert_copy((ctu::cf *)state, v11, (const char *)0x8000100, v7, v9);
  v12 = (const __CFString **)*MEMORY[0x24BE05418];
  v13 = *(const void **)state;
  v50 = *(_QWORD *)state;
  *(_QWORD *)state = 0;
  ctu::cf::convert_copy((ctu::cf *)state, v12, (const char *)0x8000100, v7, v14);
  v15 = *(const void **)state;
  v49 = *(__CFDictionary **)state;
  if (v13 && *(_QWORD *)state)
  {
    CFDictionarySetValue(v10, v13, *(const void **)state);
  }
  else if (!*(_QWORD *)state)
  {
    goto LABEL_15;
  }
  CFRelease(v15);
LABEL_15:
  if (v13)
    CFRelease(v13);
  v49 = (__CFDictionary *)0xAAAAAAAAAAAAAAAALL;
  BootModule::calculateBootStatistics_sync(v3, &v49);
  v19 = v49;
  v20 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!v49)
    v20 = 0;
  if (v20)
  {
    v21 = (const __CFString **)*MEMORY[0x24BE054D8];
    *(_QWORD *)state = 0;
    ctu::cf::convert_copy((ctu::cf *)state, v21, (const char *)0x8000100, v7, v18);
    v22 = *(const void **)state;
    v50 = *(_QWORD *)state;
    *(_QWORD *)state = v19;
    if (v19)
    {
      CFRetain(v19);
      if (v22)
        CFDictionarySetValue(v10, v22, v19);
      CFRelease(v19);
    }
    if (v22)
      CFRelease(v22);
  }
  v23 = (const void *)*MEMORY[0x24BE05658];
  v24 = strlen((const char *)*MEMORY[0x24BE05658]);
  if (v24 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v25 = (void *)v24;
  if (v24 >= 0x17)
  {
    v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v27 = v24 | 7;
    v28 = v27 + 1;
    v26 = (void **)operator new(v27 + 1);
    __dst[1] = v25;
    v44 = v28 | 0x8000000000000000;
    __dst[0] = v26;
  }
  else
  {
    HIBYTE(v44) = v24;
    v26 = __dst;
    if (!v24)
      goto LABEL_34;
  }
  memmove(v26, v23, (size_t)v25);
LABEL_34:
  *((_BYTE *)v25 + (_QWORD)v26) = 0;
  v29 = cf;
  if (cf && (v30 = CFGetTypeID(cf), v30 == CFDictionaryGetTypeID()))
  {
    v42 = v29;
    CFRetain(v29);
  }
  else
  {
    v42 = 0;
  }
  v39[0] = MEMORY[0x24BDAC760];
  v39[1] = 1174405120;
  v39[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_2;
  v39[3] = &__block_descriptor_tmp_49_0;
  v32 = a1[5];
  v31 = (std::__shared_weak_count *)a1[6];
  v39[4] = v3;
  v39[5] = v32;
  v40 = v31;
  if (v31)
  {
    p_shared_weak_owners = (unint64_t *)&v31->__shared_weak_owners_;
    do
      v34 = __ldxr(p_shared_weak_owners);
    while (__stxr(v34 + 1, p_shared_weak_owners));
  }
  aBlock = _Block_copy(v39);
  Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &v42, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (v42)
    CFRelease(v42);
  if (SHIBYTE(v44) < 0)
    operator delete(__dst[0]);
  v35 = *((_QWORD *)v3 + 26);
  *((_QWORD *)v3 + 26) = 0;
  if (v35)
  {
    dispatch_group_leave(v35);
    dispatch_release(v35);
  }
  if (v40)
    std::__shared_weak_count::__release_weak(v40);
  if (v49)
    CFRelease(v49);
  if (v29)
    CFRelease(v29);
  if (object)
    os_release(object);
  v5 = v48;
  if (v48)
    goto LABEL_61;
}

void sub_24B8E5DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,const void *a24,void *a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v28 - 80));
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v28 - 88));
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v28 - 96));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a24);
  ctu::os::scoped_activity::~scoped_activity(&a25);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void BootModule::calculateBootStatistics_sync(BootModule *this@<X0>, __CFDictionary **a2@<X8>)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  NSObject *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  const __CFAllocator *v12;
  __CFDictionary *Mutable;
  const __CFAllocator *v14;
  __CFDictionary *v15;
  const __CFAllocator *v16;
  const __CFAllocator *v17;
  CFTypeID v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  v4 = TelephonyUtilSystemMachTime();
  v5 = *((_QWORD *)this + 29);
  v6 = v4 - v5;
  v7 = *((_DWORD *)this + 60);
  v8 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v19[0]) = 67109120;
    HIDWORD(v19[0]) = v4 - v5;
    _os_log_impl(&dword_24B855000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband total boot time = %u millisec", (uint8_t *)v19, 8u);
    v8 = *((_QWORD *)this + 11);
    v9 = v7 - v5;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
LABEL_3:
      v10 = v4 - v7;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v9 = v7 - v5;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_3;
  }
  LODWORD(v19[0]) = 67109120;
  HIDWORD(v19[0]) = v9;
  _os_log_impl(&dword_24B855000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband image push time = %u millisec", (uint8_t *)v19, 8u);
  v8 = *((_QWORD *)this + 11);
  v10 = v4 - v7;
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
LABEL_4:
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_13:
  LODWORD(v19[0]) = 67109120;
  HIDWORD(v19[0]) = v10;
  _os_log_impl(&dword_24B855000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband engage time     = %u millisec", (uint8_t *)v19, 8u);
  v8 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
LABEL_5:
    v11 = *((_DWORD *)this + 56);
    LODWORD(v19[0]) = 67109120;
    HIDWORD(v19[0]) = v11;
    _os_log_impl(&dword_24B855000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband boot attempts   = %u", (uint8_t *)v19, 8u);
  }
LABEL_6:
  BootModule::submitMetric_sync(this, *((_DWORD *)this + 56), v6, 1);
  *((_DWORD *)this + 56) = 0;
  v19[0] = 0;
  v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v15 = Mutable;
  if (Mutable)
    v19[0] = Mutable;
  ctu::cf::update<char const*,unsigned int>(Mutable, (const __CFString **)*MEMORY[0x24BE050E0], v6, v12, v14);
  ctu::cf::update<char const*,unsigned int>(v15, (const __CFString **)*MEMORY[0x24BE05458], v9, v12, v16);
  ctu::cf::update<char const*,unsigned int>(v15, (const __CFString **)*MEMORY[0x24BE05230], v10, v12, v17);
  if (v15)
  {
    v18 = CFGetTypeID(v15);
    if (v18 == CFDictionaryGetTypeID())
    {
      *a2 = v15;
      CFRetain(v15);
    }
    else
    {
      *a2 = 0;
    }
    CFRelease(v15);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_24B8E6170(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_24B8E6190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_2(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[5];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v8[0] = MEMORY[0x24BDAC760];
        v8[1] = 0x40000000;
        v8[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_3;
        v8[3] = &__block_descriptor_tmp_48_0;
        v8[4] = v3;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v8);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  const char *v10;
  unint64_t v11;
  unint64_t v12;
  std::string v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(int *)(v1 + 448);
  if ((_DWORD)v2 == 4)
  {
    v11 = 0xAAAAAAAAAAAAAAAALL;
    v12 = 0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)v1 + 80))(&v11);
    v3 = v11;
    if (v11)
    {
      v4 = (char *)operator new(0x38uLL);
      strcpy(v4, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
      v5 = *(_QWORD *)(v3 + 104);
      std::string::__init_copy_ctor_external(&v13, v4, 0x33uLL);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 32))(v5, &v13);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
      operator delete(v4);
    }
    v6 = (std::__shared_weak_count *)v12;
    if (v12)
    {
      v7 = (unint64_t *)(v12 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    v9 = *(NSObject **)(v1 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if (v2 > 8)
        v10 = "Unknown";
      else
        v10 = off_251CBE248[v2];
      LODWORD(v13.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v13.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
      _os_log_impl(&dword_24B855000, v9, OS_LOG_TYPE_DEFAULT, "#I State is '%s' not releasing power assertion yet", (uint8_t *)&v13, 0xCu);
    }
  }
}

void sub_24B8E6404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  if (a16 < 0)
    operator delete(__p);
  operator delete(v16);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_24B8E6438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_52(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  BootController *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(BootController **)(v3 + 472);
        if (v6)
          BootController::markNonvolatileDataErased(v6);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_24B8E64F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_54(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  CFTypeRef v11;
  int Int;
  _QWORD v13[2];
  CFTypeRef cf;
  __CFString *v15;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData(*a2);
      v11 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      {
        v13[0] = 0xAAAAAAAAAAAAAAAALL;
        v13[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v13, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v15, (const char *)*MEMORY[0x24BE05460]);
        Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v13, v15);
        MEMORY[0x24BD29478](&v15);
        *(_DWORD *)(v5 + 256) = Int;
        MEMORY[0x24BD294A8](v13);
        v11 = cf;
      }
      if (v11)
        CFRelease(v11);
    }
  }
}

void BootModule::submitMetric_sync(BootModule *this, unsigned int a2, uint64_t a3, BOOL a4)
{
  NSObject *v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  const void *v26;
  size_t v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  xpc_object_t object;
  uint8_t buf[8];
  size_t v35;
  unint64_t v36;

  v8 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v8, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of bootup time", buf, 2u);
  }
  v9 = xpc_dictionary_create(0, 0, 0);
  v10 = MEMORY[0x24BDACFA0];
  if (v9 || (v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v9) == v10)
    {
      xpc_retain(v9);
      v11 = v9;
    }
    else
    {
      v11 = xpc_null_create();
    }
  }
  else
  {
    v11 = xpc_null_create();
    v9 = 0;
  }
  xpc_release(v9);
  v12 = xpc_dictionary_create(0, 0, 0);
  if (v12 || (v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v12) == v10)
    {
      xpc_retain(v12);
      v13 = v12;
    }
    else
    {
      v13 = xpc_null_create();
    }
  }
  else
  {
    v13 = xpc_null_create();
    v12 = 0;
  }
  xpc_release(v12);
  v14 = xpc_int64_create(a2);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x24BE04FF8], v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_uint64_create(a3);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x24BE05058], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = xpc_BOOL_create(a4);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x24BE05000], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = xpc_string_create((const char *)*MEMORY[0x24BE058A0]);
  if (!v20)
    v20 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x24BE04E88], v20);
  v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  v22 = xpc_int64_create(524384);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x24BE04F38], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (v13)
  {
    xpc_retain(v13);
    v24 = v13;
  }
  else
  {
    v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x24BE04E80], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  v26 = (const void *)*MEMORY[0x24BE051F0];
  v27 = strlen((const char *)*MEMORY[0x24BE051F0]);
  if (v27 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v28 = v27;
  if (v27 >= 0x17)
  {
    v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v30 = v27 | 7;
    v31 = v30 + 1;
    v29 = operator new(v30 + 1);
    v35 = v28;
    v36 = v31 | 0x8000000000000000;
    *(_QWORD *)buf = v29;
LABEL_36:
    memmove(v29, v26, v28);
    *((_BYTE *)v29 + v28) = 0;
    object = v11;
    if (v11)
      goto LABEL_32;
    goto LABEL_37;
  }
  HIBYTE(v36) = v27;
  v29 = buf;
  if (v27)
    goto LABEL_36;
  buf[0] = 0;
  object = v11;
  if (v11)
  {
LABEL_32:
    xpc_retain(v11);
    goto LABEL_38;
  }
LABEL_37:
  object = xpc_null_create();
LABEL_38:
  v32 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v32);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v36) < 0)
    operator delete(*(void **)buf);
  xpc_release(v13);
  xpc_release(v11);
}

void sub_24B8E6A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  xpc_release(object);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(v17);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void BootModule::handleBootFailed_sync(uint64_t a1, const void **a2)
{
  int v4;
  size_t v5;
  size_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;
  std::string *v12;
  __int128 v13;
  unsigned int v14;
  NSObject *v15;
  uint64_t v16;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  const void *v37;
  size_t v38;
  void *v39;
  void **v40;
  CFTypeRef v41;
  uint64_t v42;
  uint64_t v43;
  CFTypeID v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  xpc_object_t v48;
  xpc_object_t v49;
  NSObject *v50;
  __int128 v51;
  const void *v52;
  size_t v53;
  size_t v54;
  _BYTE *v55;
  xpc_object_t v56;
  xpc_object_t v57;
  void **v58;
  xpc_object_t v59;
  xpc_object_t v60;
  const char *v61;
  xpc_object_t v62;
  xpc_object_t v63;
  const void *v64;
  size_t v65;
  size_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  CFTypeRef v75;
  os_activity_t v76;
  uint64_t v77;
  uint64_t v78;
  const void *v79;
  size_t v80;
  size_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[6];
  std::__shared_weak_count *v86;
  const void *v87;
  xpc_object_t object;
  _QWORD aBlock[6];
  std::__shared_weak_count *v90;
  const void *v91;
  const void *v92;
  void *__dst[2];
  unint64_t v94;
  uint64_t v95;
  std::string v96;
  void *v97;
  char v98;
  void *v99;
  char v100;
  void *v101;
  char v102;
  __int128 v103;
  char v104;
  CFTypeRef cf;
  _QWORD *v106;
  void *v107[2];
  char v108;
  __int128 v109;
  unint64_t v110;
  __int128 v111;
  unint64_t v112;
  void *__p[3];
  os_activity_t v114;
  _BYTE state[32];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  v114 = _os_activity_create(&dword_24B855000, "Baseband state: boot up failed", MEMORY[0x24BDACB08], OS_ACTIVITY_FLAG_DEFAULT);
  memset(state, 170, 16);
  os_activity_scope_enter(v114, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);
  memset(__p, 170, sizeof(__p));
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = v5 + 23;
  memset(state, 170, 24);
  if (v5 + 23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0xFFFFFFFFFFFFFFE9)
  {
    v7 = &state[23];
    state[23] = v5 + 23;
    qmemcpy(state, "modem boot up failure [", 23);
LABEL_10:
    if (v4 >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v7, v11, v5);
    goto LABEL_14;
  }
  v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v6 | 7) != 0x17)
    v8 = v6 | 7;
  v9 = v8 + 1;
  v10 = (char *)operator new(v8 + 1);
  *(_QWORD *)&state[8] = v5 + 23;
  *(_QWORD *)&state[16] = v9 | 0x8000000000000000;
  *(_QWORD *)state = v10;
  qmemcpy(v10, "modem boot up failure [", 23);
  v7 = v10 + 23;
  if (v5)
    goto LABEL_10;
LABEL_14:
  v7[v5] = 0;
  v12 = std::string::append((std::string *)state, "]", 1uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((state[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)state);
    if (*(_BYTE *)(a1 + 229))
      goto LABEL_19;
  }
  else if (*(_BYTE *)(a1 + 229))
  {
    goto LABEL_19;
  }
  v14 = *(_DWORD *)(a1 + 224);
  if (v14 <= *(_DWORD *)(a1 + 196))
  {
    v50 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)state = 67109120;
      *(_DWORD *)&state[4] = v14;
      _os_log_error_impl(&dword_24B855000, v50, OS_LOG_TYPE_ERROR, "Attempting to boot baseband again; attempt=%d",
        state,
        8u);
    }
    *(_QWORD *)&v51 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v51 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v119 = v51;
    v120 = v51;
    v117 = v51;
    v118 = v51;
    *(_OWORD *)&state[16] = v51;
    v116 = v51;
    *(_OWORD *)state = v51;
    v52 = (const void *)*MEMORY[0x24BE051D0];
    v53 = strlen((const char *)*MEMORY[0x24BE051D0]);
    if (v53 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v54 = v53;
    if (v53 >= 0x17)
    {
      v77 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v53 | 7) != 0x17)
        v77 = v53 | 7;
      v78 = v77 + 1;
      v55 = operator new(v77 + 1);
      *((_QWORD *)&v111 + 1) = v54;
      v112 = v78 | 0x8000000000000000;
      *(_QWORD *)&v111 = v55;
    }
    else
    {
      HIBYTE(v112) = v53;
      v55 = &v111;
      if (!v53)
      {
LABEL_130:
        v55[v54] = 0;
        v79 = (const void *)*MEMORY[0x24BE05708];
        v80 = strlen((const char *)*MEMORY[0x24BE05708]);
        if (v80 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v81 = v80;
        if (v80 >= 0x17)
        {
          v83 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v80 | 7) != 0x17)
            v83 = v80 | 7;
          v84 = v83 + 1;
          v82 = operator new(v83 + 1);
          *((_QWORD *)&v109 + 1) = v81;
          v110 = v84 | 0x8000000000000000;
          *(_QWORD *)&v109 = v82;
        }
        else
        {
          HIBYTE(v110) = v80;
          v82 = &v109;
          if (!v80)
          {
LABEL_138:
            v82[v81] = 0;
            Timestamp::Timestamp((Timestamp *)&cf);
            Timestamp::asString((uint64_t)&cf, 0, 9, v107);
            v104 = 0;
            LOBYTE(v103) = 0;
            ResetInfo::ResetInfo((std::string *)state, &v111, &v109, (__int128 *)__p, (uint64_t)v107, 4, &v103);
            if (v108 < 0)
            {
              operator delete(v107[0]);
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&cf, v106);
              if ((SHIBYTE(v110) & 0x80000000) == 0)
              {
LABEL_140:
                if ((SHIBYTE(v112) & 0x80000000) == 0)
                  goto LABEL_141;
LABEL_152:
                operator delete((void *)v111);
LABEL_141:
                ResetInfo::ResetInfo(&v96, (const ResetInfo *)state);
                v95 = 0;
                BootModule::requestReset(a1, &v96, &v95);
                if (v102 < 0)
                {
                  operator delete(v101);
                  if ((v100 & 0x80000000) == 0)
                  {
LABEL_143:
                    if ((v98 & 0x80000000) == 0)
                      goto LABEL_144;
                    goto LABEL_155;
                  }
                }
                else if ((v100 & 0x80000000) == 0)
                {
                  goto LABEL_143;
                }
                operator delete(v99);
                if ((v98 & 0x80000000) == 0)
                {
LABEL_144:
                  if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_145;
                  goto LABEL_156;
                }
LABEL_155:
                operator delete(v97);
                if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_145:
                  if ((SHIBYTE(v120) & 0x80000000) == 0)
                    goto LABEL_146;
                  goto LABEL_157;
                }
LABEL_156:
                operator delete(v96.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v120) & 0x80000000) == 0)
                {
LABEL_146:
                  if ((SBYTE7(v118) & 0x80000000) == 0)
                    goto LABEL_147;
                  goto LABEL_158;
                }
LABEL_157:
                operator delete(*((void **)&v119 + 1));
                if ((SBYTE7(v118) & 0x80000000) == 0)
                {
LABEL_147:
                  if ((SHIBYTE(v116) & 0x80000000) == 0)
                    goto LABEL_148;
                  goto LABEL_159;
                }
LABEL_158:
                operator delete((void *)v117);
                if ((SHIBYTE(v116) & 0x80000000) == 0)
                {
LABEL_148:
                  if ((state[23] & 0x80000000) == 0)
                    goto LABEL_118;
LABEL_160:
                  operator delete(*(void **)state);
                  goto LABEL_118;
                }
LABEL_159:
                operator delete(*(void **)&state[24]);
                if ((state[23] & 0x80000000) == 0)
                  goto LABEL_118;
                goto LABEL_160;
              }
            }
            else
            {
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&cf, v106);
              if ((SHIBYTE(v110) & 0x80000000) == 0)
                goto LABEL_140;
            }
            operator delete((void *)v109);
            if ((SHIBYTE(v112) & 0x80000000) == 0)
              goto LABEL_141;
            goto LABEL_152;
          }
        }
        memmove(v82, v79, v81);
        goto LABEL_138;
      }
    }
    memmove(v55, v52, v54);
    goto LABEL_130;
  }
LABEL_19:
  v15 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)state = 0;
    _os_log_error_impl(&dword_24B855000, v15, OS_LOG_TYPE_ERROR, "Baseband is declared dead; no more boot attempts",
      state,
      2u);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, 6);
  cf = 0;
  v16 = *MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
    cf = Mutable;
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x24BE05198], (const __CFString **)*MEMORY[0x24BE051C8], v16, v18);
  v19 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v19 || (v20 = *(_QWORD *)(a1 + 120), (v21 = std::__shared_weak_count::lock(v19)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v22 = v21;
  p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
  do
    v24 = __ldxr(p_shared_weak_owners);
  while (__stxr(v24 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v22);
  }
  *(_QWORD *)&v109 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v109 + 1) = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v27 = (uint64_t *)off_2579B8480;
  if (!off_2579B8480)
  {
    ABMServer::create_default_global(state);
    v28 = *(_OWORD *)state;
    *(_QWORD *)state = 0;
    *(_QWORD *)&state[8] = 0;
    v29 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
    off_2579B8480 = v28;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = *(std::__shared_weak_count **)&state[8];
    if (*(_QWORD *)&state[8])
    {
      v33 = (unint64_t *)(*(_QWORD *)&state[8] + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v27 = (uint64_t *)off_2579B8480;
  }
  *(_QWORD *)&v109 = v27;
  *((_QWORD *)&v109 + 1) = *(&off_2579B8480 + 1);
  if (*(&off_2579B8480 + 1))
  {
    v35 = (unint64_t *)(*(&off_2579B8480 + 1) + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v37 = (const void *)*MEMORY[0x24BE05658];
  v38 = strlen((const char *)*MEMORY[0x24BE05658]);
  if (v38 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v39 = (void *)v38;
  if (v38 >= 0x17)
  {
    v42 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v42 = v38 | 7;
    v43 = v42 + 1;
    v40 = (void **)operator new(v42 + 1);
    __dst[1] = v39;
    v94 = v43 | 0x8000000000000000;
    __dst[0] = v40;
  }
  else
  {
    HIBYTE(v94) = v38;
    v40 = __dst;
    if (!v38)
    {
      LOBYTE(__dst[0]) = 0;
      v41 = cf;
      if (!cf)
        goto LABEL_57;
      goto LABEL_55;
    }
  }
  memmove(v40, v37, (size_t)v39);
  *((_BYTE *)v39 + (_QWORD)v40) = 0;
  v41 = cf;
  if (!cf)
  {
LABEL_57:
    v41 = 0;
    v92 = 0;
    goto LABEL_58;
  }
LABEL_55:
  v44 = CFGetTypeID(v41);
  if (v44 != CFDictionaryGetTypeID())
    goto LABEL_57;
  v92 = v41;
  CFRetain(v41);
LABEL_58:
  v45 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_58_1;
  aBlock[4] = a1;
  aBlock[5] = v20;
  v90 = v22;
  do
    v46 = __ldxr(p_shared_weak_owners);
  while (__stxr(v46 + 1, p_shared_weak_owners));
  v47 = _Block_copy(aBlock);
  v91 = v47;
  ABMServer::broadcast(v27, (uint64_t)__dst, &v92, &v91);
  if (v47)
    _Block_release(v47);
  if (v41)
    CFRelease(v41);
  if (SHIBYTE(v94) < 0)
    operator delete(__dst[0]);
  v48 = xpc_dictionary_create(0, 0, 0);
  if (v48 || (v48 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v48) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v48);
      v49 = v48;
    }
    else
    {
      v49 = xpc_null_create();
    }
  }
  else
  {
    v49 = xpc_null_create();
    v48 = 0;
  }
  xpc_release(v48);
  v56 = xpc_int64_create(4);
  if (!v56)
    v56 = xpc_null_create();
  xpc_dictionary_set_value(v49, (const char *)*MEMORY[0x24BE04E78], v56);
  v57 = xpc_null_create();
  xpc_release(v56);
  xpc_release(v57);
  if (SHIBYTE(__p[2]) >= 0)
    v58 = __p;
  else
    v58 = (void **)__p[0];
  v59 = xpc_string_create((const char *)v58);
  if (!v59)
    v59 = xpc_null_create();
  xpc_dictionary_set_value(v49, (const char *)*MEMORY[0x24BE053F0], v59);
  v60 = xpc_null_create();
  xpc_release(v59);
  xpc_release(v60);
  Timestamp::Timestamp((Timestamp *)&v111);
  Timestamp::asString((uint64_t)&v111, 0, 9, state);
  if (state[23] >= 0)
    v61 = state;
  else
    v61 = *(const char **)state;
  v62 = xpc_string_create(v61);
  if (!v62)
    v62 = xpc_null_create();
  xpc_dictionary_set_value(v49, (const char *)*MEMORY[0x24BE05090], v62);
  v63 = xpc_null_create();
  xpc_release(v62);
  xpc_release(v63);
  if ((state[23] & 0x80000000) != 0)
    operator delete(*(void **)state);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v111, *((_QWORD **)&v111 + 1));
  v64 = (const void *)*MEMORY[0x24BE05200];
  v65 = strlen((const char *)*MEMORY[0x24BE05200]);
  if (v65 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v66 = v65;
  if (v65 >= 0x17)
  {
    v68 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v65 | 7) != 0x17)
      v68 = v65 | 7;
    v69 = v68 + 1;
    v67 = operator new(v68 + 1);
    *(_QWORD *)&state[8] = v66;
    *(_QWORD *)&state[16] = v69 | 0x8000000000000000;
    *(_QWORD *)state = v67;
LABEL_100:
    memmove(v67, v64, v66);
    v67[v66] = 0;
    object = v49;
    if (v49)
      goto LABEL_96;
    goto LABEL_101;
  }
  state[23] = v65;
  v67 = state;
  if (v65)
    goto LABEL_100;
  state[0] = 0;
  object = v49;
  if (v49)
  {
LABEL_96:
    xpc_retain(v49);
    goto LABEL_102;
  }
LABEL_101:
  object = xpc_null_create();
LABEL_102:
  v85[0] = v45;
  v85[1] = 1174405120;
  v85[2] = ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_59;
  v85[3] = &__block_descriptor_tmp_61_0;
  v85[4] = a1;
  v85[5] = v20;
  v86 = v22;
  do
    v70 = __ldxr(p_shared_weak_owners);
  while (__stxr(v70 + 1, p_shared_weak_owners));
  v71 = _Block_copy(v85);
  v87 = v71;
  Service::runCommand(a1, (uint64_t)state, &object, &v87);
  if (v71)
    _Block_release(v71);
  xpc_release(object);
  object = 0;
  if ((state[23] & 0x80000000) != 0)
    operator delete(*(void **)state);
  if (v86)
    std::__shared_weak_count::__release_weak(v86);
  xpc_release(v49);
  if (v90)
    std::__shared_weak_count::__release_weak(v90);
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
  if (!*((_QWORD *)&v109 + 1))
    goto LABEL_116;
  v73 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (v74)
  {
LABEL_116:
    std::__shared_weak_count::__release_weak(v22);
    v75 = cf;
    if (!cf)
      goto LABEL_118;
    goto LABEL_117;
  }
  ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
  std::__shared_weak_count::__release_weak(v72);
  std::__shared_weak_count::__release_weak(v22);
  v75 = cf;
  if (cf)
LABEL_117:
    CFRelease(v75);
LABEL_118:
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v76 = v114;
    if (!v114)
      return;
  }
  else
  {
    v76 = v114;
    if (!v114)
      return;
  }
  os_release(v76);
}

void sub_24B8E7710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, xpc_object_t object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;
  uint64_t v66;

  ResetInfo::~ResetInfo(&a32);
  ResetInfo::~ResetInfo((void **)(v66 - 240));
  if (a66 < 0)
    operator delete(__p);
  ctu::os::scoped_activity::~scoped_activity((void **)(v66 - 248));
  _Unwind_Resume(a1);
}

void ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v20;
  std::string v21;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    return;
  v3 = (_QWORD *)a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  v20 = v4;
  if (!v4)
    return;
  if (!a1[5])
  {
    v14 = v4;
LABEL_21:
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    return;
  }
  v5 = (std::__shared_weak_count *)v3[23];
  v3[22] = 0;
  v3[23] = 0;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v17 = 0xAAAAAAAAAAAAAAAALL;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, _QWORD *))(*v3 + 80))(&v17, v3);
  v8 = v17;
  if (v17)
  {
    v9 = (char *)operator new(0x38uLL);
    strcpy(v9, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
    v10 = *(_QWORD *)(v8 + 104);
    std::string::__init_copy_ctor_external(&v21, v9, 0x33uLL);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v10 + 32))(v10, &v21);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    operator delete(v9);
  }
  v11 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    v12 = (unint64_t *)(v18 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v20;
  if (v20)
    goto LABEL_21;
}

void sub_24B8E7B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
    operator delete(__p);
  operator delete(v19);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_24B8E7B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_59(_QWORD *a1, int a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  xpc_object_t v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        v13 = *a3;
        if (*a3)
        {
          xpc_retain(*a3);
          v14 = (std::__shared_weak_count *)v7[16];
          if (!v14)
LABEL_23:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v13 = xpc_null_create();
          v14 = (std::__shared_weak_count *)v7[16];
          if (!v14)
            goto LABEL_23;
        }
        v15 = v7[15];
        v16 = std::__shared_weak_count::lock(v14);
        if (!v16)
          goto LABEL_23;
        v17 = v16;
        v18 = operator new(0x28uLL);
        *v18 = v7;
        v18[1] = v10;
        v18[2] = v9;
        *((_DWORD *)v18 + 6) = a2;
        v18[4] = v13;
        v19 = xpc_null_create();
        v20 = v7[17];
        v21 = (unint64_t *)&v17->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
        v23 = operator new(0x18uLL);
        *v23 = v18;
        v23[1] = v15;
        v23[2] = v17;
        dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_21handleBootFailed_syncENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEUb4_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNS6_10unique_ptrISE_NS6_14default_deleteISE_EEEEENUlPvE_8__invokeESN_);
        do
          v24 = __ldaxr(v21);
        while (__stlxr(v24 - 1, v21));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        xpc_release(v19);
      }
      v25 = (unint64_t *)&v9->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void BootModule::handleReset_sync(uint64_t a1, uint64_t a2, void **a3)
{
  void **v6;
  uint64_t v7;
  __CFDictionary *Mutable;
  const __CFAllocator *v9;
  uint64_t v10;
  uint64_t v11;
  const __CFAllocator *v12;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_weak_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  const void *v32;
  size_t v33;
  void *v34;
  void **v35;
  __CFDictionary *v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  CFTypeID v40;
  unint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __CFDictionary *v49;
  _QWORD aBlock[6];
  std::__shared_weak_count *v51;
  std::string v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *__p;
  char v58;
  void *v59;
  const void *v60;
  __CFDictionary *v61;
  void *__dst[2];
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  __CFDictionary *v66;
  std::string v67;

  if ((*(char *)(a2 + 71) & 0x80000000) == 0)
  {
    v67 = *(std::string *)(a2 + 48);
    v6 = (void **)(a1 + 152);
    if ((*(char *)(a1 + 175) & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  v6 = (void **)(a1 + 152);
  if (*(char *)(a1 + 175) < 0)
LABEL_3:
    operator delete(*v6);
LABEL_4:
  *(std::string *)v6 = v67;
  v66 = 0;
  v7 = *MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
    v66 = Mutable;
  else
    Mutable = v66;
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x24BE05198], (const __CFString **)*MEMORY[0x24BE05530], v7, v9);
  ResetInfo::addToDict(a2, &v66, v10, v11, v12);
  v64 = 0xAAAAAAAAAAAAAAAALL;
  v65 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v13 = off_2579B8480;
  if (!off_2579B8480)
  {
    ABMServer::create_default_global(&v67);
    v14 = *(_OWORD *)&v67.__r_.__value_.__l.__data_;
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = 0uLL;
    v15 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
    off_2579B8480 = v14;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    size = (std::__shared_weak_count *)v67.__r_.__value_.__l.__size_;
    if (v67.__r_.__value_.__l.__size_)
    {
      v19 = (unint64_t *)(v67.__r_.__value_.__l.__size_ + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v13 = off_2579B8480;
  }
  v64 = v13;
  v65 = *(&off_2579B8480 + 1);
  if (*(&off_2579B8480 + 1))
  {
    v21 = (unint64_t *)(*(&off_2579B8480 + 1) + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v23 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v23 || (v24 = *(_QWORD *)(a1 + 120), (v25 = std::__shared_weak_count::lock(v23)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v26 = v25;
  p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
  do
    v28 = __ldxr(p_shared_weak_owners);
  while (__stxr(v28 + 1, p_shared_weak_owners));
  v29 = (unint64_t *)&v25->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v26);
  }
  v31 = (uint64_t *)v64;
  v32 = (const void *)*MEMORY[0x24BE05658];
  v33 = strlen((const char *)*MEMORY[0x24BE05658]);
  if (v33 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v34 = (void *)v33;
  if (v33 >= 0x17)
  {
    v37 = a3;
    v38 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v38 = v33 | 7;
    v39 = v38 + 1;
    v35 = (void **)operator new(v38 + 1);
    __dst[1] = v34;
    v63 = v39 | 0x8000000000000000;
    __dst[0] = v35;
    a3 = v37;
    v31 = (uint64_t *)v64;
  }
  else
  {
    HIBYTE(v63) = v33;
    v35 = __dst;
    if (!v33)
    {
      LOBYTE(__dst[0]) = 0;
      v36 = v66;
      if (!v66)
        goto LABEL_43;
      goto LABEL_41;
    }
  }
  memmove(v35, v32, (size_t)v34);
  *((_BYTE *)v34 + (_QWORD)v35) = 0;
  v36 = v66;
  if (!v66)
  {
LABEL_43:
    v36 = 0;
    v61 = 0;
    goto LABEL_44;
  }
LABEL_41:
  v40 = CFGetTypeID(v36);
  if (v40 != CFDictionaryGetTypeID())
    goto LABEL_43;
  v61 = v36;
  CFRetain(v36);
LABEL_44:
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule16handleReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_62_1;
  aBlock[4] = a1;
  aBlock[5] = v24;
  v51 = v26;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  ResetInfo::ResetInfo(&v52, (const ResetInfo *)a2);
  v42 = *a3;
  if (*a3)
    v42 = _Block_copy(v42);
  v59 = v42;
  v43 = _Block_copy(aBlock);
  v60 = v43;
  ABMServer::broadcast(v31, (uint64_t)__dst, (const void **)&v61, &v60);
  if (v43)
    _Block_release(v43);
  if (v36)
    CFRelease(v36);
  if (SHIBYTE(v63) < 0)
  {
    operator delete(__dst[0]);
    v44 = v59;
    if (!v59)
      goto LABEL_57;
    goto LABEL_56;
  }
  v44 = v59;
  if (v59)
LABEL_56:
    _Block_release(v44);
LABEL_57:
  if (v58 < 0)
  {
    operator delete(__p);
    if ((v56 & 0x80000000) == 0)
    {
LABEL_59:
      if ((v54 & 0x80000000) == 0)
        goto LABEL_60;
      goto LABEL_72;
    }
  }
  else if ((v56 & 0x80000000) == 0)
  {
    goto LABEL_59;
  }
  operator delete(v55);
  if ((v54 & 0x80000000) == 0)
  {
LABEL_60:
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_61;
LABEL_73:
    operator delete(v52.__r_.__value_.__l.__data_);
    v45 = v51;
    if (!v51)
      goto LABEL_63;
    goto LABEL_62;
  }
LABEL_72:
  operator delete(v53);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_73;
LABEL_61:
  v45 = v51;
  if (v51)
LABEL_62:
    std::__shared_weak_count::__release_weak(v45);
LABEL_63:
  std::__shared_weak_count::__release_weak(v26);
  v46 = (std::__shared_weak_count *)v65;
  if (!v65)
    goto LABEL_67;
  v47 = (unint64_t *)(v65 + 8);
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (v48)
  {
LABEL_67:
    v49 = v66;
    if (!v66)
      return;
    goto LABEL_68;
  }
  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
  std::__shared_weak_count::__release_weak(v46);
  v49 = v66;
  if (v66)
LABEL_68:
    CFRelease(v49);
}

void sub_24B8E8244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *aBlock)
{
  uint64_t v32;

  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v32 - 120));
  _Unwind_Resume(a1);
}

void ___ZN10BootModule16handleReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  int v6;
  size_t size;
  std::string *v8;
  _BOOL4 v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  std::string *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const void *v16;
  void *v17;
  void *v18;
  std::string v19;
  char v20;
  void *aBlock;
  std::string v22;
  char v23;
  std::string v24;
  std::__shared_weak_count *v26;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    v26 = v4;
    if (v4)
    {
      v5 = v4;
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_27;
      if (*(char *)(a1 + 79) < 0)
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(a1 + 56), *(_QWORD *)(a1 + 64));
      else
        v24 = *(std::string *)(a1 + 56);
      v6 = SHIBYTE(v24.__r_.__value_.__r.__words[2]);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      else
        size = v24.__r_.__value_.__l.__size_;
      if (size == strlen((const char *)*MEMORY[0x24BE051D8]))
      {
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v8 = &v24;
        else
          v8 = (std::string *)v24.__r_.__value_.__r.__words[0];
        v9 = memcmp(v8, (const void *)*MEMORY[0x24BE051D8], size) == 0;
        if ((v6 & 0x80000000) == 0)
        {
LABEL_15:
          v10 = v3[11];
          v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
          if (v9)
            goto LABEL_16;
          goto LABEL_34;
        }
      }
      else
      {
        v9 = 0;
        if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_15;
      }
      operator delete(v24.__r_.__value_.__l.__data_);
      v10 = v3[11];
      v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
LABEL_16:
        if (v11)
        {
          LOWORD(v24.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_24B855000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to perform soft reset", (uint8_t *)&v24, 2u);
        }
        ResetInfo::ResetInfo(&v22, (const ResetInfo *)(a1 + 56));
        v12 = *(void **)(a1 + 168);
        if (v12)
          v12 = _Block_copy(v12);
        aBlock = v12;
        (*(void (**)(_QWORD *, std::string *, void **))(*v3 + 104))(v3, &v22, &aBlock);
        if (aBlock)
          _Block_release(aBlock);
        v13 = &v22;
        if (v23 < 0)
LABEL_23:
          operator delete((void *)v13[3].__r_.__value_.__r.__words[2]);
LABEL_24:
        if (SHIBYTE(v13[2].__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v13[2].__r_.__value_.__l.__data_);
          if ((SHIBYTE(v13[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_26:
            if ((SHIBYTE(v13->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_27;
LABEL_40:
            operator delete(v13->__r_.__value_.__l.__data_);
LABEL_27:
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v15 = __ldaxr(p_shared_owners);
            while (__stlxr(v15 - 1, p_shared_owners));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
            return;
          }
        }
        else if ((SHIBYTE(v13[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_26;
        }
        operator delete(v13[1].__r_.__value_.__l.__data_);
        if ((SHIBYTE(v13->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_27;
        goto LABEL_40;
      }
LABEL_34:
      if (v11)
      {
        LOWORD(v24.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_24B855000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to perform hard reset", (uint8_t *)&v24, 2u);
      }
      ResetInfo::ResetInfo(&v19, (const ResetInfo *)(a1 + 56));
      v16 = *(const void **)(a1 + 168);
      if (v16)
        v17 = _Block_copy(v16);
      else
        v17 = 0;
      v18 = v17;
      BootModule::hardReset_sync((uint64_t)v3, (uint64_t)&v19, (uint64_t *)&v18);
      if (v17)
        _Block_release(v17);
      v13 = &v19;
      if (v20 < 0)
        goto LABEL_23;
      goto LABEL_24;
    }
  }
}

void sub_24B8E85E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void sub_24B8E85F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  const void *v10;
  uint64_t v11;

  if (v10)
    _Block_release(v10);
  ResetInfo::~ResetInfo(&a10);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v11 - 80);
  _Unwind_Resume(a1);
}

void sub_24B8E8624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *aBlock,void *a25)
{
  uint64_t v25;

  if (aBlock)
    _Block_release(aBlock);
  ResetInfo::~ResetInfo(&a25);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v25 - 80);
  _Unwind_Resume(a1);
}

void sub_24B8E8650(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void BootModule::hardReset_sync(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  size_t v17;
  std::string *v18;
  _BOOL4 v19;
  NSObject *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __CFDictionary *Mutable;
  const __CFAllocator *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  const __CFAllocator *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_weak_owners;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  const void *v40;
  size_t v41;
  void *v42;
  void **v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  CFTypeID v47;
  unint64_t v48;
  void *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD v53[6];
  std::__shared_weak_count *v54;
  const void *v55;
  const void *v56;
  void *__dst[2];
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  std::string v61;

  v59 = 0xAAAAAAAAAAAAAAAALL;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v6 = off_2579B8480;
  if (!off_2579B8480)
  {
    ABMServer::create_default_global(&v61);
    v7 = *(_OWORD *)&v61.__r_.__value_.__l.__data_;
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = 0uLL;
    v8 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
    off_2579B8480 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    size = (std::__shared_weak_count *)v61.__r_.__value_.__l.__size_;
    if (v61.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v61.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v6 = off_2579B8480;
  }
  v59 = v6;
  v60 = *(&off_2579B8480 + 1);
  if (*(&off_2579B8480 + 1))
  {
    v14 = (unint64_t *)(*(&off_2579B8480 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  *(_BYTE *)(a1 + 228) = 0;
  if (*(char *)(a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  else
    v61 = *(std::string *)(a2 + 24);
  v16 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  else
    v17 = v61.__r_.__value_.__l.__size_;
  if (v17 != strlen((const char *)*MEMORY[0x24BE05708]))
  {
    v19 = 0;
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
LABEL_32:
    operator delete(v61.__r_.__value_.__l.__data_);
    if (v19)
      goto LABEL_28;
LABEL_33:
    v21 = *(_QWORD **)(a1 + 472);
    if (v21)
    {
      v22 = 8;
      goto LABEL_35;
    }
    goto LABEL_36;
  }
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v61;
  else
    v18 = (std::string *)v61.__r_.__value_.__r.__words[0];
  v19 = memcmp(v18, (const void *)*MEMORY[0x24BE05708], v17) == 0;
  if (v16 < 0)
    goto LABEL_32;
LABEL_27:
  if (!v19)
    goto LABEL_33;
LABEL_28:
  v20 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v61.__r_.__value_.__l.__data_) = 0;
    _os_log_error_impl(&dword_24B855000, v20, OS_LOG_TYPE_ERROR, "Falling back to baseband powercycle as bootup failed", (uint8_t *)&v61, 2u);
    v21 = *(_QWORD **)(a1 + 472);
    if (!v21)
      goto LABEL_36;
    goto LABEL_30;
  }
  v21 = *(_QWORD **)(a1 + 472);
  if (v21)
  {
LABEL_30:
    v22 = 9;
LABEL_35:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
LABEL_36:
  v23 = *a3;
  if (*a3)
  {
    *((_BYTE *)&v61.__r_.__value_.__s + 23) = 0;
    v61.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, _QWORD, std::string *))(v23 + 16))(v23, 0, &v61);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
  }
  v61.__r_.__value_.__r.__words[0] = 0;
  v24 = *MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v27 = (const void *)v61.__r_.__value_.__r.__words[0];
  if (Mutable)
  {
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
    if (v27)
    {
      CFRelease(v27);
      Mutable = (__CFDictionary *)v61.__r_.__value_.__r.__words[0];
    }
  }
  else
  {
    Mutable = (__CFDictionary *)v61.__r_.__value_.__r.__words[0];
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x24BE05198], (const __CFString **)*MEMORY[0x24BE054A8], v24, v26);
  ResetInfo::addToDict(a2, (__CFDictionary **)&v61, v28, v29, v30);
  v31 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v31 || (v32 = *(_QWORD *)(a1 + 120), (v33 = std::__shared_weak_count::lock(v31)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v34 = v33;
  p_shared_weak_owners = (unint64_t *)&v33->__shared_weak_owners_;
  do
    v36 = __ldxr(p_shared_weak_owners);
  while (__stxr(v36 + 1, p_shared_weak_owners));
  v37 = (unint64_t *)&v33->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v34);
  }
  v39 = (uint64_t *)v59;
  v40 = (const void *)*MEMORY[0x24BE05658];
  v41 = strlen((const char *)*MEMORY[0x24BE05658]);
  if (v41 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v42 = (void *)v41;
  if (v41 >= 0x17)
  {
    v45 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17)
      v45 = v41 | 7;
    v46 = v45 + 1;
    v43 = (void **)operator new(v45 + 1);
    __dst[1] = v42;
    v58 = v46 | 0x8000000000000000;
    __dst[0] = v43;
  }
  else
  {
    HIBYTE(v58) = v41;
    v43 = __dst;
    if (!v41)
    {
      LOBYTE(__dst[0]) = 0;
      v44 = (const void *)v61.__r_.__value_.__r.__words[0];
      if (!v61.__r_.__value_.__r.__words[0])
        goto LABEL_62;
      goto LABEL_60;
    }
  }
  memmove(v43, v40, (size_t)v42);
  *((_BYTE *)v42 + (_QWORD)v43) = 0;
  v44 = (const void *)v61.__r_.__value_.__r.__words[0];
  if (!v61.__r_.__value_.__r.__words[0])
  {
LABEL_62:
    v44 = 0;
    v56 = 0;
    goto LABEL_63;
  }
LABEL_60:
  v47 = CFGetTypeID(v44);
  if (v47 != CFDictionaryGetTypeID())
    goto LABEL_62;
  v56 = v44;
  CFRetain(v44);
LABEL_63:
  v53[0] = MEMORY[0x24BDAC760];
  v53[1] = 1174405120;
  v53[2] = ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
  v53[3] = &__block_descriptor_tmp_64_1;
  v53[4] = a1;
  v53[5] = v32;
  v54 = v34;
  do
    v48 = __ldxr(p_shared_weak_owners);
  while (__stxr(v48 + 1, p_shared_weak_owners));
  v49 = _Block_copy(v53);
  v55 = v49;
  ABMServer::broadcast(v39, (uint64_t)__dst, &v56, &v55);
  if (v49)
    _Block_release(v49);
  if (v44)
    CFRelease(v44);
  if (SHIBYTE(v58) < 0)
    operator delete(__dst[0]);
  if (v54)
    std::__shared_weak_count::__release_weak(v54);
  std::__shared_weak_count::__release_weak(v34);
  if (v61.__r_.__value_.__r.__words[0])
    CFRelease(v61.__r_.__value_.__l.__data_);
  v50 = (std::__shared_weak_count *)v60;
  if (v60)
  {
    v51 = (unint64_t *)(v60 + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
}

void sub_24B8E8B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B8E8B78(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_24B8E8BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[5];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v8[0] = MEMORY[0x24BDAC760];
        v8[1] = 0x40000000;
        v8[2] = ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2;
        v8[3] = &__block_descriptor_tmp_63_0;
        v8[4] = v3;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v8);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1)
{
  BootModule::boot_sync(*(BootModule **)(a1 + 32));
}

void BootModule::boot_sync(BootModule *this)
{
  unsigned int v2;
  NSObject *v3;
  char *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  capabilities::abs *v9;
  int shouldBoot;
  uint64_t v11;
  NSObject *global_queue;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  uint64_t v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD v36[8];
  std::__shared_weak_count *v37;
  dispatch_object_t object;
  _QWORD aBlock[6];
  std::__shared_weak_count *v40;
  dispatch_group_t group;
  void *v42;
  char *v43;
  __int128 v44;
  uint8_t buf[8];
  _QWORD block[8];
  std::__shared_weak_count *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  __int128 v54;
  uint64_t v55;
  __n128 (*v56)(uint64_t, uint64_t);
  void (*v57)(uint64_t);
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)this + 112) - 2;
  if (v2 <= 6)
  {
    v3 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = off_251CBE290[v2];
      LODWORD(v54) = 136315138;
      *(_QWORD *)((char *)&v54 + 4) = v4;
      _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I Bootup request rejected as we are already in %s state", (uint8_t *)&v54, 0xCu);
    }
    return;
  }
  (*(void (**)(BootModule *, uint64_t))(*(_QWORD *)this + 96))(this, 2);
  ++*((_DWORD *)this + 56);
  v6 = *((_QWORD *)this + 15);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  v52 = v6;
  if (!v5 || (v7 = std::__shared_weak_count::lock(v5), (v53 = v7) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v48 = 0;
  v49 = &v48;
  v50 = 0x2000000000;
  v51 = 0;
  v9 = (capabilities::abs *)dispatch_group_create();
  *(_QWORD *)&v54 = 0;
  *((_QWORD *)&v54 + 1) = &v54;
  v55 = 0x4002000000;
  v56 = __Block_byref_object_copy__0;
  v57 = __Block_byref_object_dispose__0;
  v59 = 0;
  v60 = 0;
  v58 = 0;
  shouldBoot = capabilities::abs::shouldBoot(v9);
  v11 = MEMORY[0x24BDAC760];
  if (shouldBoot)
  {
    global_queue = dispatch_get_global_queue(25, 0);
    block[0] = v11;
    block[1] = 1174405120;
    block[2] = ___ZN10BootModule9boot_syncEv_block_invoke;
    block[3] = &unk_251CBDE40;
    block[6] = this;
    block[7] = v6;
    v47 = v8;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    block[4] = &v48;
    block[5] = &v54;
    dispatch_group_async((dispatch_group_t)v9, global_queue, block);
    v15 = v47;
    if (v47)
    {
      v16 = (unint64_t *)&v47->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  else
  {
    if (v9)
    {
      dispatch_retain((dispatch_object_t)v9);
      dispatch_group_enter((dispatch_group_t)v9);
    }
    v18 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_24B855000, v18, OS_LOG_TYPE_DEFAULT, "#I Faking bootup", buf, 2u);
    }
    v19 = *((_QWORD *)this + 22);
    v20 = (char *)operator new(0x20uLL);
    v43 = v20;
    v44 = xmmword_24B953E80;
    strcpy(v20, "Wait for Ready on Fake Boot");
    aBlock[0] = v11;
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN10BootModule9boot_syncEv_block_invoke_93;
    aBlock[3] = &__block_descriptor_tmp_94;
    aBlock[4] = this;
    aBlock[5] = v6;
    v21 = (unint64_t *)&v8->__shared_owners_;
    v40 = v8;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    group = (dispatch_group_t)v9;
    if (v9)
    {
      dispatch_retain((dispatch_object_t)v9);
      dispatch_group_enter(group);
    }
    v23 = _Block_copy(aBlock);
    v42 = v23;
    ResetDetection::add(v19, (uint64_t)&v43, 0, &v42, -1);
    if (v23)
      _Block_release(v23);
    operator delete(v20);
    *((_BYTE *)v49 + 24) = 1;
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    v24 = v40;
    if (v40)
    {
      v25 = (unint64_t *)&v40->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v9)
    {
      dispatch_group_leave((dispatch_group_t)v9);
      dispatch_release((dispatch_object_t)v9);
    }
  }
  v27 = *((_QWORD *)this + 17);
  v36[0] = v11;
  v36[1] = 1174405120;
  v36[2] = ___ZN10BootModule9boot_syncEv_block_invoke_95;
  v36[3] = &unk_251CBDF60;
  v36[6] = this;
  v36[7] = v52;
  v37 = v53;
  if (v53)
  {
    v28 = (unint64_t *)&v53->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v36[4] = &v48;
  object = (dispatch_object_t)v9;
  if (v9)
    dispatch_retain((dispatch_object_t)v9);
  v36[5] = &v54;
  dispatch_group_notify((dispatch_group_t)v9, v27, v36);
  if (object)
    dispatch_release(object);
  v30 = v37;
  if (v37)
  {
    v31 = (unint64_t *)&v37->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      _Block_object_dispose(&v54, 8);
      if ((SHIBYTE(v60) & 0x80000000) == 0)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  _Block_object_dispose(&v54, 8);
  if (SHIBYTE(v60) < 0)
LABEL_46:
    operator delete(v58);
LABEL_47:
  if (v9)
    dispatch_release((dispatch_object_t)v9);
  _Block_object_dispose(&v48, 8);
  v33 = v53;
  if (v53)
  {
    v34 = (unint64_t *)&v53->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_24B8E9238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,dispatch_group_t group)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void BootModule::checkFSSyncStatus_sync(uint64_t a1, void **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  size_t v13;
  void *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  xpc_object_t v18;
  void *v19;
  unint64_t v20;
  void *v21;
  _QWORD aBlock[5];
  void *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  const void *v26;
  xpc_object_t v27;
  void *__dst[2];
  unint64_t v29;

  v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (v5 = *(_QWORD *)(a1 + 120), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = (const void *)*MEMORY[0x24BE05580];
  v13 = strlen((const char *)*MEMORY[0x24BE05580]);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v14 = (void *)v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v15 = (void **)operator new(v16 + 1);
    __dst[1] = v14;
    v29 = v17 | 0x8000000000000000;
    __dst[0] = v15;
    goto LABEL_16;
  }
  HIBYTE(v29) = v13;
  v15 = __dst;
  if (v13)
LABEL_16:
    memmove(v15, v12, (size_t)v14);
  *((_BYTE *)v14 + (_QWORD)v15) = 0;
  v18 = xpc_null_create();
  v27 = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule22checkFSSyncStatus_syncEN8dispatch5blockIU13block_pointerFvbbEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_65_0;
  aBlock[4] = a1;
  v19 = *a2;
  if (*a2)
    v19 = _Block_copy(v19);
  v23 = v19;
  v24 = v5;
  v25 = v7;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  v21 = _Block_copy(aBlock);
  v26 = v21;
  Service::runCommand(a1, (uint64_t)__dst, &v27, &v26);
  if (v21)
    _Block_release(v21);
  xpc_release(v18);
  v27 = 0;
  if (SHIBYTE(v29) < 0)
    operator delete(__dst[0]);
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  if (v23)
    _Block_release(v23);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_24B8E9504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count *v25;
  const void *v26;
  void *v27;

  if (v26)
    _Block_release(v26);
  if (a17)
    std::__shared_weak_count::__release_weak(a17);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v27);
  if (a25 < 0)
  {
    operator delete(__p);
    std::__shared_weak_count::__release_weak(v25);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v25);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule22checkFSSyncStatus_syncEN8dispatch5blockIU13block_pointerFvbbEEE_block_invoke(_QWORD *a1, int a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  xpc_object_t v10;
  const void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  xpc_object_t v18;
  void *v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[6])
        goto LABEL_24;
      v10 = *a3;
      if (*a3)
      {
        xpc_retain(*a3);
        v11 = (const void *)a1[5];
        if (v11)
          goto LABEL_6;
      }
      else
      {
        v10 = xpc_null_create();
        v11 = (const void *)a1[5];
        if (v11)
        {
LABEL_6:
          v12 = _Block_copy(v11);
          v13 = (std::__shared_weak_count *)v7[16];
          if (!v13)
LABEL_29:
            std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_10:
          v14 = v7[15];
          v15 = std::__shared_weak_count::lock(v13);
          if (!v15)
            goto LABEL_29;
          v16 = v15;
          v17 = operator new(0x18uLL);
          *(_DWORD *)v17 = a2;
          v17[1] = v10;
          v18 = xpc_null_create();
          if (v12)
            v19 = _Block_copy(v12);
          else
            v19 = 0;
          v17[2] = v19;
          v20 = v7[17];
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v22 = __ldxr(p_shared_owners);
          while (__stxr(v22 + 1, p_shared_owners));
          v23 = operator new(0x18uLL);
          *v23 = v17;
          v23[1] = v14;
          v23[2] = v16;
          dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_22checkFSSyncStatus_syncENS_5blockIU13block_pointerFvbbEEEEUb5_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISB_NSG_14default_deleteISB_EEEEENUlPvE_8__invokeESL_);
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (v24)
          {
            if (!v12)
              goto LABEL_23;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
            if (!v12)
            {
LABEL_23:
              xpc_release(v18);
LABEL_24:
              v25 = (unint64_t *)&v9->__shared_owners_;
              do
                v26 = __ldaxr(v25);
              while (__stlxr(v26 - 1, v25));
              if (!v26)
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
              return;
            }
          }
          _Block_release(v12);
          goto LABEL_23;
        }
      }
      v12 = 0;
      v13 = (std::__shared_weak_count *)v7[16];
      if (!v13)
        goto LABEL_29;
      goto LABEL_10;
    }
  }
}

void *__copy_helper_block_e8_40c44_ZTSN8dispatch5blockIU13block_pointerFvbbEEE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(_QWORD *a1, _QWORD *a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (void *)a2[5];
  if (result)
    result = _Block_copy(result);
  v6 = a2[6];
  v5 = a2[7];
  a1[5] = result;
  a1[6] = v6;
  a1[7] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSN8dispatch5blockIU13block_pointerFvbbEEE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  const void *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void BootModule::softReset_sync(uint64_t a1, const ResetInfo *a2, void **a3)
{
  unsigned __int8 v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  void *v19;
  NSObject *v20;
  CommandDriverFactory *v21;
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  config::hw *v48;
  int v49;
  uint64_t v50;
  void *v51;
  dispatch_object_t object;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  _QWORD aBlock[6];
  std::__shared_weak_count *v60;
  void *v61;
  std::string v62;
  void *v63;
  char v64;
  void *v65;
  char v66;
  void *__p;
  char v68;
  void *v69;
  dispatch_object_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  __int128 v73;

  v6 = atomic_load((unsigned __int8 *)&qword_2579B8B98);
  if ((v6 & 1) == 0)
  {
    v48 = (config::hw *)__cxa_guard_acquire(&qword_2579B8B98);
    if ((_DWORD)v48)
    {
      v49 = config::hw::watch(v48);
      v50 = 12;
      if (v49)
        v50 = 18;
      _MergedGlobals_3 = v50;
      __cxa_guard_release(&qword_2579B8B98);
    }
  }
  v7 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v7 || (v8 = *(_QWORD *)(a1 + 120), (v9 = std::__shared_weak_count::lock(v7)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v10 = v9;
  p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
    v71 = 0;
    v15 = std::__shared_weak_count::lock(v9);
    v72 = v15;
    if (v15)
    {
LABEL_10:
      v71 = v8;
      goto LABEL_13;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
    v71 = 0;
    v15 = std::__shared_weak_count::lock(v10);
    v72 = v15;
    if (v15)
      goto LABEL_10;
  }
  v8 = 0;
LABEL_13:
  v69 = (void *)0xAAAAAAAAAAAAAAAALL;
  v70 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_83;
  aBlock[4] = a1;
  aBlock[5] = v8;
  v60 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *a3;
  if (*a3)
    v18 = _Block_copy(v18);
  v61 = v18;
  ResetInfo::ResetInfo(&v62, a2);
  v19 = _Block_copy(aBlock);
  v20 = *(NSObject **)(a1 + 136);
  if (v20)
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  v69 = v19;
  v70 = v20;
  v57 = 0xAAAAAAAAAAAAAAAALL;
  v58 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v21 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v22 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v21);
    v23 = v73;
    v73 = 0uLL;
    v24 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v23;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
    if (*((_QWORD *)&v73 + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v22 = off_2579B85E0;
  }
  v30 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  v53 = v22;
  v54 = *(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v31 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v22 + 16))(&v55, v22);
  v57 = 0;
  v58 = 0;
  if (v56)
  {
    v58 = std::__shared_weak_count::lock(v56);
    if (v58)
      v57 = v55;
    if (v56)
      std::__shared_weak_count::__release_weak(v56);
  }
  if (!v30)
    goto LABEL_44;
  v33 = (unint64_t *)&v30->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    v35 = v57;
    if (!v57)
      goto LABEL_55;
  }
  else
  {
LABEL_44:
    v35 = v57;
    if (!v57)
      goto LABEL_55;
  }
  v36 = *(_QWORD *)(a1 + 472);
  if (v36)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 104))(v36, 5);
  v37 = v69;
  if (v69)
    v37 = _Block_copy(v69);
  v51 = v37;
  object = v70;
  if (v70)
    dispatch_retain(v70);
  (*(void (**)(unint64_t, uint64_t, void **))(*(_QWORD *)v35 + 56))(v35, 8000000000, &v51);
  if (object)
    dispatch_release(object);
  if (v51)
    _Block_release(v51);
LABEL_55:
  v38 = v58;
  if (v58)
  {
    v39 = (unint64_t *)&v58->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v70)
    dispatch_release(v70);
  if (v69)
    _Block_release(v69);
  if (v68 < 0)
  {
    operator delete(__p);
    if ((v66 & 0x80000000) == 0)
    {
LABEL_66:
      if ((v64 & 0x80000000) == 0)
        goto LABEL_67;
      goto LABEL_72;
    }
  }
  else if ((v66 & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(v65);
  if ((v64 & 0x80000000) == 0)
  {
LABEL_67:
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_68;
    goto LABEL_73;
  }
LABEL_72:
  operator delete(v63);
  if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_68:
    v41 = v61;
    if (!v61)
      goto LABEL_75;
    goto LABEL_74;
  }
LABEL_73:
  operator delete(v62.__r_.__value_.__l.__data_);
  v41 = v61;
  if (v61)
LABEL_74:
    _Block_release(v41);
LABEL_75:
  v42 = v60;
  if (v60)
  {
    v43 = (unint64_t *)&v60->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v72;
  if (v72)
  {
    v46 = (unint64_t *)&v72->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  std::__shared_weak_count::__release_weak(v10);
}

void sub_24B8E9C94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2579B8B98);
  _Unwind_Resume(a1);
}

void sub_24B8E9CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *aBlock)
{
  std::__shared_weak_count *v24;
  void **v25;
  uint64_t v26;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v26 - 96);
  ResetInfo::~ResetInfo(v25);
  if (aBlock)
    _Block_release(aBlock);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v26 - 80);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1, ctu::cf **a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  void *v15;
  dispatch_time_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  size_t v24;
  uint64_t v25;
  __int128 v26;
  const void *v27;
  size_t v28;
  size_t v29;
  __int128 *p_dst;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  size_t v34;
  size_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[6];
  std::__shared_weak_count *v40;
  void *aBlock;
  std::string v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *__p;
  char v48;
  void *v49;
  char *v50;
  __int128 v51;
  void *v52;
  std::string v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  __int128 v60;
  char v61;
  char v62[8];
  _QWORD *v63;
  void *v64[2];
  char v65;
  __int128 v66;
  unint64_t v67;
  __int128 __dst;
  unint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint8_t buf[16];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v3 = a1[4];
  v70 = 0uLL;
  v71 = 0;
  v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v4 = 0;
  if (!v4)
  {
    v7 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_24B855000, v7, OS_LOG_TYPE_DEFAULT, "#I Soft reset issued; waiting for reset detection",
        buf,
        2u);
    }
    v8 = *(_QWORD *)(v3 + 176);
    v9 = (char *)operator new(0x20uLL);
    v50 = v9;
    v51 = xmmword_24B953E90;
    strcpy(v9, "Soft Reset Wait for Reset");
    v39[0] = MEMORY[0x24BDAC760];
    v39[1] = 1174405120;
    v39[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_67;
    v39[3] = &__block_descriptor_tmp_81;
    v11 = a1[5];
    v10 = (std::__shared_weak_count *)a1[6];
    v39[4] = v3;
    v39[5] = v11;
    v40 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v14 = (void *)a1[7];
    if (v14)
      v14 = _Block_copy(v14);
    aBlock = v14;
    ResetInfo::ResetInfo(&v42, (const ResetInfo *)(a1 + 8));
    v15 = _Block_copy(v39);
    v49 = v15;
    v16 = dispatch_time(0, 1000000000 * _MergedGlobals_3);
    ResetDetection::add(v8, (uint64_t)&v50, 1, &v49, v16);
    if (v15)
      _Block_release(v15);
    operator delete(v9);
    if (v48 < 0)
    {
      operator delete(__p);
      if ((v46 & 0x80000000) == 0)
      {
LABEL_20:
        if ((v44 & 0x80000000) == 0)
          goto LABEL_21;
        goto LABEL_26;
      }
    }
    else if ((v46 & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete(v45);
    if ((v44 & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_27;
    }
LABEL_26:
    operator delete(v43);
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      v17 = aBlock;
      if (!aBlock)
        goto LABEL_29;
      goto LABEL_28;
    }
LABEL_27:
    operator delete(v42.__r_.__value_.__l.__data_);
    v17 = aBlock;
    if (!aBlock)
    {
LABEL_29:
      v18 = v40;
      if (v40)
      {
        v19 = (unint64_t *)&v40->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
          if ((SHIBYTE(v71) & 0x80000000) == 0)
            return;
          goto LABEL_84;
        }
      }
      goto LABEL_83;
    }
LABEL_28:
    _Block_release(v17);
    goto LABEL_29;
  }
  ctu::cf::show(*a2, a2);
  if (SHIBYTE(v71) < 0)
    operator delete((void *)v70);
  v70 = *(_OWORD *)buf;
  v71 = v73;
  v5 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v21 = &v70;
    if (v71 < 0)
      v21 = (__int128 *)v70;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v21;
    _os_log_error_impl(&dword_24B855000, v5, OS_LOG_TYPE_ERROR, "Soft reset failed; falling back to hard reset: %{public}s",
      buf,
      0xCu);
    v6 = a1[7];
    if ((SHIBYTE(v71) & 0x80000000) == 0)
      goto LABEL_8;
  }
  else
  {
    v6 = a1[7];
    if ((SHIBYTE(v71) & 0x80000000) == 0)
    {
LABEL_8:
      *(_OWORD *)buf = v70;
      *(_QWORD *)&v73 = v71;
      goto LABEL_39;
    }
  }
  std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v70, *((std::string::size_type *)&v70 + 1));
LABEL_39:
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v6 + 16))(v6, 3760250880, buf);
  if (SBYTE7(v73) < 0)
  {
    operator delete(*(void **)buf);
    v22 = v3 + 152;
    if ((__int128 *)(v3 + 152) == &v70)
      goto LABEL_54;
  }
  else
  {
    v22 = v3 + 152;
    if ((__int128 *)(v3 + 152) == &v70)
      goto LABEL_54;
  }
  if (*(char *)(v3 + 175) < 0)
  {
    if (v71 >= 0)
      v23 = &v70;
    else
      v23 = (__int128 *)v70;
    if (v71 >= 0)
      v24 = HIBYTE(v71);
    else
      v24 = *((_QWORD *)&v70 + 1);
    std::string::__assign_no_alias<false>((void **)v22, v23, v24);
  }
  else if (v71 < 0)
  {
    std::string::__assign_no_alias<true>((_QWORD *)v22, (void *)v70, *((size_t *)&v70 + 1));
  }
  else
  {
    *(_OWORD *)v22 = v70;
    *(_QWORD *)(v22 + 16) = v71;
  }
LABEL_54:
  v25 = *(_QWORD *)(v3 + 472);
  if (v25)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 104))(v25, 7);
  *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v77 = v26;
  v78 = v26;
  v75 = v26;
  v76 = v26;
  v73 = v26;
  v74 = v26;
  *(_OWORD *)buf = v26;
  v27 = (const void *)*MEMORY[0x24BE051D0];
  v28 = strlen((const char *)*MEMORY[0x24BE051D0]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    p_dst = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&__dst + 1) = v29;
    v69 = v32 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_63;
  }
  HIBYTE(v69) = v28;
  p_dst = &__dst;
  if (v28)
LABEL_63:
    memmove(p_dst, v27, v29);
  *((_BYTE *)p_dst + v29) = 0;
  v33 = (const void *)*MEMORY[0x24BE05710];
  v34 = strlen((const char *)*MEMORY[0x24BE05710]);
  if (v34 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v35 = v34;
  if (v34 >= 0x17)
  {
    v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v37 = v34 | 7;
    v38 = v37 + 1;
    v36 = operator new(v37 + 1);
    *((_QWORD *)&v66 + 1) = v35;
    v67 = v38 | 0x8000000000000000;
    *(_QWORD *)&v66 = v36;
    goto LABEL_71;
  }
  HIBYTE(v67) = v34;
  v36 = &v66;
  if (v34)
LABEL_71:
    memmove(v36, v33, v35);
  *((_BYTE *)v36 + v35) = 0;
  Timestamp::Timestamp((Timestamp *)v62);
  Timestamp::asString((uint64_t)v62, 0, 9, v64);
  v61 = 0;
  LOBYTE(v60) = 0;
  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v66, (__int128 *)v22, (uint64_t)v64, 7, &v60);
  if ((v65 & 0x80000000) == 0)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v62, v63);
    if ((SHIBYTE(v67) & 0x80000000) == 0)
      goto LABEL_74;
LABEL_87:
    operator delete((void *)v66);
    if ((SHIBYTE(v69) & 0x80000000) == 0)
      goto LABEL_75;
    goto LABEL_88;
  }
  operator delete(v64[0]);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v62, v63);
  if (SHIBYTE(v67) < 0)
    goto LABEL_87;
LABEL_74:
  if ((SHIBYTE(v69) & 0x80000000) == 0)
    goto LABEL_75;
LABEL_88:
  operator delete((void *)__dst);
LABEL_75:
  ResetInfo::ResetInfo(&v53, (const ResetInfo *)buf);
  v52 = 0;
  BootModule::handleReset_sync(v3, (uint64_t)&v53, &v52);
  if (v59 < 0)
  {
    operator delete(v58);
    if ((v57 & 0x80000000) == 0)
    {
LABEL_77:
      if ((v55 & 0x80000000) == 0)
        goto LABEL_78;
      goto LABEL_91;
    }
  }
  else if ((v57 & 0x80000000) == 0)
  {
    goto LABEL_77;
  }
  operator delete(v56);
  if ((v55 & 0x80000000) == 0)
  {
LABEL_78:
    if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_79;
    goto LABEL_92;
  }
LABEL_91:
  operator delete(v54);
  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_79:
    if ((SHIBYTE(v78) & 0x80000000) == 0)
      goto LABEL_80;
    goto LABEL_93;
  }
LABEL_92:
  operator delete(v53.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v78) & 0x80000000) == 0)
  {
LABEL_80:
    if ((SBYTE7(v76) & 0x80000000) == 0)
      goto LABEL_81;
    goto LABEL_94;
  }
LABEL_93:
  operator delete(*((void **)&v77 + 1));
  if ((SBYTE7(v76) & 0x80000000) == 0)
  {
LABEL_81:
    if ((SHIBYTE(v74) & 0x80000000) == 0)
      goto LABEL_82;
    goto LABEL_95;
  }
LABEL_94:
  operator delete((void *)v75);
  if (SHIBYTE(v74) < 0)
  {
LABEL_95:
    operator delete(*((void **)&v73 + 1));
    if (SBYTE7(v73) < 0)
      goto LABEL_96;
LABEL_83:
    if ((SHIBYTE(v71) & 0x80000000) == 0)
      return;
    goto LABEL_84;
  }
LABEL_82:
  if ((SBYTE7(v73) & 0x80000000) == 0)
    goto LABEL_83;
LABEL_96:
  operator delete(*(void **)buf);
  if (SHIBYTE(v71) < 0)
LABEL_84:
    operator delete((void *)v70);
}

void sub_24B8EA428(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_67(_QWORD *a1, int a2)
{
  uint64_t v3;
  char *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  int IsCarrierBuild;
  _BOOL4 v18;
  void *v19;
  std::string *v20;
  size_t size;
  uint64_t v22;
  __int128 v23;
  const void *v24;
  size_t v25;
  size_t v26;
  __int128 *p_dst;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  size_t v31;
  size_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  _QWORD v38[4];
  void *v39;
  std::string v40;
  void *v41;
  std::string v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  std::string v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  __int128 v57;
  char v58;
  char v59[8];
  _QWORD *v60;
  void *v61[2];
  char v62;
  __int128 v63;
  unint64_t v64;
  __int128 __dst;
  unint64_t v66;
  std::string v67;
  _QWORD aBlock[5];
  void *v69;
  std::string v70;
  void *v71;
  char v72;
  void *v73;
  char v74;
  void *__p;
  char v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  void *v79;
  __int128 buf;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v3 = a1[4];
  if (!a2)
  {
    v7 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_24B855000, v7, OS_LOG_TYPE_DEFAULT, "#I Reset detection observed for soft reset", (uint8_t *)&buf, 2u);
    }
    usleep(0x249F0u);
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_68;
    aBlock[3] = &__block_descriptor_tmp_76_0;
    aBlock[4] = v3;
    v8 = (void *)a1[7];
    if (v8)
      v8 = _Block_copy(v8);
    v69 = v8;
    ResetInfo::ResetInfo(&v70, (const ResetInfo *)(a1 + 8));
    v9 = (std::__shared_weak_count *)a1[6];
    v77 = a1[5];
    v78 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v12 = _Block_copy(aBlock);
    v79 = v12;
    BootModule::checkFSSyncStatus_sync(v3, &v79);
    if (v12)
      _Block_release(v12);
    v13 = v78;
    if (!v78)
      goto LABEL_24;
    v14 = (unint64_t *)&v78->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if ((v76 & 0x80000000) == 0)
      {
LABEL_25:
        if ((v74 & 0x80000000) == 0)
          goto LABEL_26;
        goto LABEL_48;
      }
    }
    else
    {
LABEL_24:
      if ((v76 & 0x80000000) == 0)
        goto LABEL_25;
    }
    operator delete(__p);
    if ((v74 & 0x80000000) == 0)
    {
LABEL_26:
      if ((v72 & 0x80000000) == 0)
        goto LABEL_27;
      goto LABEL_49;
    }
LABEL_48:
    operator delete(v73);
    if ((v72 & 0x80000000) == 0)
    {
LABEL_27:
      if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_50;
    }
LABEL_49:
    operator delete(v71);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      v16 = v69;
      if (!v69)
        return;
      goto LABEL_51;
    }
LABEL_50:
    operator delete(v70.__r_.__value_.__l.__data_);
    v16 = v69;
    if (!v69)
      return;
LABEL_51:
    _Block_release(v16);
    return;
  }
  v4 = (char *)operator new(0x38uLL);
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  *(_OWORD *)&v67.__r_.__value_.__r.__words[1] = xmmword_24B953EA0;
  strcpy(v4, "Soft reset failed; timeout waiting for reset detection");
  v5 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_error_impl(&dword_24B855000, v5, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
  }
  if (TelephonyUtilIsInternalBuild())
  {
    v6 = *(NSObject **)(v3 + 88);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
    goto LABEL_6;
  }
  IsCarrierBuild = TelephonyUtilIsCarrierBuild();
  v6 = *(NSObject **)(v3 + 88);
  v18 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (IsCarrierBuild)
  {
    if (!v18)
    {
LABEL_7:
      if ((std::string *)(v3 + 152) != &v67)
      {
        if (*(char *)(v3 + 175) < 0)
        {
          if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v20 = &v67;
          else
            v20 = (std::string *)v67.__r_.__value_.__r.__words[0];
          if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
          else
            size = v67.__r_.__value_.__l.__size_;
          std::string::__assign_no_alias<false>((void **)(v3 + 152), v20, size);
        }
        else if ((*((_BYTE *)&v67.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>((_QWORD *)(v3 + 152), v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
        }
        else
        {
          *(std::string *)(v3 + 152) = v67;
        }
      }
      v22 = a1[7];
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&buf, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
      }
      else
      {
        buf = *(_OWORD *)&v67.__r_.__value_.__l.__data_;
        *(_QWORD *)&v81 = *((_QWORD *)&v67.__r_.__value_.__l + 2);
      }
      (*(void (**)(uint64_t, uint64_t, __int128 *))(v22 + 16))(v22, 3760250880, &buf);
      if (SBYTE7(v81) < 0)
        operator delete((void *)buf);
      *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v85 = v23;
      v86 = v23;
      v83 = v23;
      v84 = v23;
      v81 = v23;
      v82 = v23;
      buf = v23;
      v24 = (const void *)*MEMORY[0x24BE051D0];
      v25 = strlen((const char *)*MEMORY[0x24BE051D0]);
      if (v25 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v26 = v25;
      if (v25 >= 0x17)
      {
        v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v25 | 7) != 0x17)
          v28 = v25 | 7;
        v29 = v28 + 1;
        p_dst = (__int128 *)operator new(v28 + 1);
        *((_QWORD *)&__dst + 1) = v26;
        v66 = v29 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v66) = v25;
        p_dst = &__dst;
        if (!v25)
        {
LABEL_66:
          *((_BYTE *)p_dst + v26) = 0;
          v30 = (const void *)*MEMORY[0x24BE057B8];
          v31 = strlen((const char *)*MEMORY[0x24BE057B8]);
          if (v31 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v32 = v31;
          if (v31 >= 0x17)
          {
            v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v31 | 7) != 0x17)
              v34 = v31 | 7;
            v35 = v34 + 1;
            v33 = operator new(v34 + 1);
            *((_QWORD *)&v63 + 1) = v32;
            v64 = v35 | 0x8000000000000000;
            *(_QWORD *)&v63 = v33;
          }
          else
          {
            HIBYTE(v64) = v31;
            v33 = &v63;
            if (!v31)
            {
LABEL_74:
              v33[v32] = 0;
              Timestamp::Timestamp((Timestamp *)v59);
              Timestamp::asString((uint64_t)v59, 0, 9, v61);
              v58 = 0;
              LOBYTE(v57) = 0;
              ResetInfo::ResetInfo((std::string *)&buf, &__dst, &v63, (__int128 *)(v3 + 152), (uint64_t)v61, 7, &v57);
              if (v62 < 0)
              {
                operator delete(v61[0]);
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v59, v60);
                if ((SHIBYTE(v64) & 0x80000000) == 0)
                {
LABEL_76:
                  if ((SHIBYTE(v66) & 0x80000000) == 0)
                    goto LABEL_77;
LABEL_88:
                  operator delete((void *)__dst);
LABEL_77:
                  ResetInfo::ResetInfo(&v50, (const ResetInfo *)&buf);
                  v49 = 0;
                  BootModule::handleReset_sync(v3, (uint64_t)&v50, &v49);
                  if (v56 < 0)
                  {
                    operator delete(v55);
                    if ((v54 & 0x80000000) == 0)
                    {
LABEL_79:
                      if ((v52 & 0x80000000) == 0)
                        goto LABEL_80;
                      goto LABEL_91;
                    }
                  }
                  else if ((v54 & 0x80000000) == 0)
                  {
                    goto LABEL_79;
                  }
                  operator delete(v53);
                  if ((v52 & 0x80000000) == 0)
                  {
LABEL_80:
                    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_81;
                    goto LABEL_92;
                  }
LABEL_91:
                  operator delete(v51);
                  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_81:
                    if ((SHIBYTE(v86) & 0x80000000) == 0)
                      goto LABEL_82;
                    goto LABEL_93;
                  }
LABEL_92:
                  operator delete(v50.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v86) & 0x80000000) == 0)
                  {
LABEL_82:
                    if ((SBYTE7(v84) & 0x80000000) == 0)
                      goto LABEL_83;
                    goto LABEL_94;
                  }
LABEL_93:
                  operator delete(*((void **)&v85 + 1));
                  if ((SBYTE7(v84) & 0x80000000) == 0)
                  {
LABEL_83:
                    if ((SHIBYTE(v82) & 0x80000000) == 0)
                      goto LABEL_84;
                    goto LABEL_95;
                  }
LABEL_94:
                  operator delete((void *)v83);
                  if ((SHIBYTE(v82) & 0x80000000) == 0)
                  {
LABEL_84:
                    if ((SBYTE7(v81) & 0x80000000) == 0)
                      goto LABEL_113;
LABEL_96:
                    operator delete((void *)buf);
                    goto LABEL_113;
                  }
LABEL_95:
                  operator delete(*((void **)&v81 + 1));
                  if ((SBYTE7(v81) & 0x80000000) == 0)
                    goto LABEL_113;
                  goto LABEL_96;
                }
              }
              else
              {
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v59, v60);
                if ((SHIBYTE(v64) & 0x80000000) == 0)
                  goto LABEL_76;
              }
              operator delete((void *)v63);
              if ((SHIBYTE(v66) & 0x80000000) == 0)
                goto LABEL_77;
              goto LABEL_88;
            }
          }
          memmove(v33, v30, v32);
          goto LABEL_74;
        }
      }
      memmove(p_dst, v24, v26);
      goto LABEL_66;
    }
LABEL_6:
    LOWORD(buf) = 0;
    _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I Dumping logs", (uint8_t *)&buf, 2u);
    goto LABEL_7;
  }
  if (v18)
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I Falling back to hard reset", (uint8_t *)&buf, 2u);
  }
  ResetInfo::ResetInfo(&v42, (const ResetInfo *)(a1 + 8));
  v38[0] = MEMORY[0x24BDAC760];
  v38[1] = 1174405120;
  v38[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_78;
  v38[3] = &__block_descriptor_tmp_79;
  v19 = (void *)a1[7];
  if (v19)
    v19 = _Block_copy(v19);
  v39 = v19;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v40, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  else
    v40 = v67;
  v36 = _Block_copy(v38);
  v41 = v36;
  BootModule::hardReset_sync(v3, (uint64_t)&v42, (uint64_t *)&v41);
  if (v36)
    _Block_release(v36);
  if (v48 < 0)
  {
    operator delete(v47);
    if ((v46 & 0x80000000) == 0)
    {
LABEL_102:
      if ((v44 & 0x80000000) == 0)
        goto LABEL_103;
      goto LABEL_109;
    }
  }
  else if ((v46 & 0x80000000) == 0)
  {
    goto LABEL_102;
  }
  operator delete(v45);
  if ((v44 & 0x80000000) == 0)
  {
LABEL_103:
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_104;
    goto LABEL_110;
  }
LABEL_109:
  operator delete(v43);
  if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_104:
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_105;
LABEL_111:
    operator delete(v40.__r_.__value_.__l.__data_);
    v37 = v39;
    if (!v39)
      goto LABEL_113;
    goto LABEL_112;
  }
LABEL_110:
  operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_111;
LABEL_105:
  v37 = v39;
  if (v39)
LABEL_112:
    _Block_release(v37);
LABEL_113:
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
}

void sub_24B8EAD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;

  if (aBlock)
    _Block_release(aBlock);
  ResetInfo::~ResetInfo(&a19);
  if (a68 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_68(_QWORD *a1, int a2, int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  capabilities::ipc *v9;
  uint64_t v10;
  uint64_t v11;
  __CFDictionary *Mutable;
  const __CFAllocator *v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;
  const __CFAllocator *v18;
  uint64_t *v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  const void *v29;
  size_t v30;
  void *v31;
  void **v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  CFTypeID v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  const void *v48;
  std::string *v49;
  size_t size;
  NSObject *v51;
  uint64_t v52;
  std::string *v53;
  uint64_t v54;
  __int128 v55;
  const void *v56;
  size_t v57;
  size_t v58;
  __int128 *v59;
  uint64_t v60;
  uint64_t v61;
  const void *v62;
  size_t v63;
  size_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[6];
  std::__shared_weak_count *v69;
  const void *v70;
  const void *v71;
  void *__dst[2];
  unint64_t v73;
  void *v74;
  std::string v75;
  void *v76;
  char v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  __int128 v82;
  char v83;
  char v84[8];
  _QWORD *v85;
  void *__p[2];
  char v87;
  __int128 v88;
  unint64_t v89;
  __int128 v90;
  unint64_t v91;
  std::string v92;
  uint8_t buf[16];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v6 = a1[4];
  v7 = *(NSObject **)(v6 + 88);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl(&dword_24B855000, v7, OS_LOG_TYPE_DEFAULT, "#I Check FS Sync in progress: %d and sync not started: %d", buf, 0xEu);
  }
  if ((a2 & 1) != 0 || a3)
  {
    if (a2)
      v14 = "Baseband shutdown during baseband filesystem sync";
    else
      v14 = "Baseband never started filesystem sync";
    v92.__r_.__value_.__r.__words[2] = 0x13AAAAAA00AAAAAALL;
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *(_OWORD *)"Soft reset failed: ";
    *(_DWORD *)((char *)&v92.__r_.__value_.__r.__words[1] + 7) = 540697701;
    if (a2)
      v15 = 49;
    else
      v15 = 38;
    std::string::append(&v92, v14, v15);
    if ((std::string *)(v6 + 152) != &v92)
    {
      if (*(char *)(v6 + 175) < 0)
      {
        if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v49 = &v92;
        else
          v49 = (std::string *)v92.__r_.__value_.__r.__words[0];
        if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v92.__r_.__value_.__r.__words[2]);
        else
          size = v92.__r_.__value_.__l.__size_;
        std::string::__assign_no_alias<false>((void **)(v6 + 152), v49, size);
      }
      else if ((*((_BYTE *)&v92.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>((_QWORD *)(v6 + 152), v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
      }
      else
      {
        *(std::string *)(v6 + 152) = v92;
      }
    }
    v51 = *(NSObject **)(v6 + 88);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      v53 = &v92;
      if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v53 = (std::string *)v92.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v53;
      _os_log_error_impl(&dword_24B855000, v51, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      v52 = a1[5];
      if ((*((_BYTE *)&v92.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_83;
    }
    else
    {
      v52 = a1[5];
      if ((*((_BYTE *)&v92.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_83:
        *(_OWORD *)buf = *(_OWORD *)&v92.__r_.__value_.__l.__data_;
        *(_QWORD *)&v94 = *((_QWORD *)&v92.__r_.__value_.__l + 2);
        goto LABEL_88;
      }
    }
    std::string::__init_copy_ctor_external((std::string *)buf, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
LABEL_88:
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(v52 + 16))(v52, 3760250880, buf);
    if (SBYTE7(v94) < 0)
    {
      operator delete(*(void **)buf);
      v54 = *(_QWORD *)(v6 + 472);
      if (!v54)
        goto LABEL_93;
    }
    else
    {
      v54 = *(_QWORD *)(v6 + 472);
      if (!v54)
      {
LABEL_93:
        *(_QWORD *)&v55 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v55 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v98 = v55;
        v99 = v55;
        v96 = v55;
        v97 = v55;
        v94 = v55;
        v95 = v55;
        *(_OWORD *)buf = v55;
        v56 = (const void *)*MEMORY[0x24BE051D0];
        v57 = strlen((const char *)*MEMORY[0x24BE051D0]);
        if (v57 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v58 = v57;
        if (v57 >= 0x17)
        {
          v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v57 | 7) != 0x17)
            v60 = v57 | 7;
          v61 = v60 + 1;
          v59 = (__int128 *)operator new(v60 + 1);
          *((_QWORD *)&v90 + 1) = v58;
          v91 = v61 | 0x8000000000000000;
          *(_QWORD *)&v90 = v59;
        }
        else
        {
          HIBYTE(v91) = v57;
          v59 = &v90;
          if (!v57)
          {
LABEL_101:
            *((_BYTE *)v59 + v58) = 0;
            v62 = (const void *)*MEMORY[0x24BE05818];
            v63 = strlen((const char *)*MEMORY[0x24BE05818]);
            if (v63 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v64 = v63;
            if (v63 >= 0x17)
            {
              v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v63 | 7) != 0x17)
                v66 = v63 | 7;
              v67 = v66 + 1;
              v65 = operator new(v66 + 1);
              *((_QWORD *)&v88 + 1) = v64;
              v89 = v67 | 0x8000000000000000;
              *(_QWORD *)&v88 = v65;
            }
            else
            {
              HIBYTE(v89) = v63;
              v65 = &v88;
              if (!v63)
              {
LABEL_109:
                v65[v64] = 0;
                Timestamp::Timestamp((Timestamp *)v84);
                Timestamp::asString((uint64_t)v84, 0, 9, __p);
                v83 = 0;
                LOBYTE(v82) = 0;
                ResetInfo::ResetInfo((std::string *)buf, &v90, &v88, (__int128 *)(v6 + 152), (uint64_t)__p, 7, &v82);
                if (v87 < 0)
                {
                  operator delete(__p[0]);
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v84, v85);
                  if ((SHIBYTE(v89) & 0x80000000) == 0)
                  {
LABEL_111:
                    if ((SHIBYTE(v91) & 0x80000000) == 0)
                      goto LABEL_112;
LABEL_124:
                    operator delete((void *)v90);
LABEL_112:
                    ResetInfo::ResetInfo(&v75, (const ResetInfo *)buf);
                    v74 = 0;
                    BootModule::handleReset_sync(v6, (uint64_t)&v75, &v74);
                    if (v81 < 0)
                    {
                      operator delete(v80);
                      if ((v79 & 0x80000000) == 0)
                      {
LABEL_114:
                        if ((v77 & 0x80000000) == 0)
                          goto LABEL_115;
                        goto LABEL_127;
                      }
                    }
                    else if ((v79 & 0x80000000) == 0)
                    {
                      goto LABEL_114;
                    }
                    operator delete(v78);
                    if ((v77 & 0x80000000) == 0)
                    {
LABEL_115:
                      if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_116;
                      goto LABEL_128;
                    }
LABEL_127:
                    operator delete(v76);
                    if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_116:
                      if ((SHIBYTE(v99) & 0x80000000) == 0)
                        goto LABEL_117;
                      goto LABEL_129;
                    }
LABEL_128:
                    operator delete(v75.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v99) & 0x80000000) == 0)
                    {
LABEL_117:
                      if ((SBYTE7(v97) & 0x80000000) == 0)
                        goto LABEL_118;
                      goto LABEL_130;
                    }
LABEL_129:
                    operator delete(*((void **)&v98 + 1));
                    if ((SBYTE7(v97) & 0x80000000) == 0)
                    {
LABEL_118:
                      if ((SHIBYTE(v95) & 0x80000000) == 0)
                        goto LABEL_119;
                      goto LABEL_131;
                    }
LABEL_130:
                    operator delete((void *)v96);
                    if ((SHIBYTE(v95) & 0x80000000) == 0)
                    {
LABEL_119:
                      if ((SBYTE7(v94) & 0x80000000) == 0)
                        goto LABEL_120;
                      goto LABEL_132;
                    }
LABEL_131:
                    operator delete(*((void **)&v94 + 1));
                    if ((SBYTE7(v94) & 0x80000000) == 0)
                    {
LABEL_120:
                      if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        return;
                      goto LABEL_133;
                    }
LABEL_132:
                    operator delete(*(void **)buf);
                    if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      return;
LABEL_133:
                    operator delete(v92.__r_.__value_.__l.__data_);
                    return;
                  }
                }
                else
                {
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v84, v85);
                  if ((SHIBYTE(v89) & 0x80000000) == 0)
                    goto LABEL_111;
                }
                operator delete((void *)v88);
                if ((SHIBYTE(v91) & 0x80000000) == 0)
                  goto LABEL_112;
                goto LABEL_124;
              }
            }
            memmove(v65, v62, v64);
            goto LABEL_109;
          }
        }
        memmove(v59, v56, v58);
        goto LABEL_101;
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v54 + 104))(v54, 7);
    goto LABEL_93;
  }
  v8 = *(_QWORD *)(v6 + 472);
  if (v8)
  {
    v9 = (capabilities::ipc *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 104))(v8, 6);
    if (capabilities::ipc::supportsPCI(v9))
      (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 472) + 64))(*(_QWORD *)(v6 + 472));
  }
  v10 = a1[5];
  BYTE7(v94) = 0;
  buf[0] = 0;
  (*(void (**)(void))(v10 + 16))();
  if (SBYTE7(v94) < 0)
    operator delete(*(void **)buf);
  *(_QWORD *)&v90 = 0;
  v11 = *MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
    *(_QWORD *)&v90 = Mutable;
  else
    Mutable = (__CFDictionary *)v90;
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x24BE05198], (const __CFString **)*MEMORY[0x24BE054A8], v11, v13);
  ResetInfo::addToDict((uint64_t)(a1 + 6), (__CFDictionary **)&v90, v16, v17, v18);
  v92.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v92.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v19 = (uint64_t *)off_2579B8480;
  if (!off_2579B8480)
  {
    ABMServer::create_default_global(buf);
    v20 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v21 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
    off_2579B8480 = v20;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v25 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v19 = (uint64_t *)off_2579B8480;
  }
  v92.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  v92.__r_.__value_.__l.__size_ = *(&off_2579B8480 + 1);
  if (*(&off_2579B8480 + 1))
  {
    v27 = (unint64_t *)(*(&off_2579B8480 + 1) + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v29 = (const void *)*MEMORY[0x24BE05658];
  v30 = strlen((const char *)*MEMORY[0x24BE05658]);
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v31 = (void *)v30;
  if (v30 >= 0x17)
  {
    v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v34 = v30 | 7;
    v35 = v34 + 1;
    v32 = (void **)operator new(v34 + 1);
    __dst[1] = v31;
    v73 = v35 | 0x8000000000000000;
    __dst[0] = v32;
LABEL_46:
    memmove(v32, v29, (size_t)v31);
    *((_BYTE *)v31 + (_QWORD)v32) = 0;
    v33 = (const void *)v90;
    if (!(_QWORD)v90)
      goto LABEL_49;
    goto LABEL_47;
  }
  HIBYTE(v73) = v30;
  v32 = __dst;
  if (v30)
    goto LABEL_46;
  LOBYTE(__dst[0]) = 0;
  v33 = (const void *)v90;
  if (!(_QWORD)v90)
    goto LABEL_49;
LABEL_47:
  v36 = CFGetTypeID(v33);
  if (v36 == CFDictionaryGetTypeID())
  {
    v71 = v33;
    CFRetain(v33);
    goto LABEL_50;
  }
LABEL_49:
  v33 = 0;
  v71 = 0;
LABEL_50:
  v68[0] = MEMORY[0x24BDAC760];
  v68[1] = 1174405120;
  v68[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_72;
  v68[3] = &__block_descriptor_tmp_74_0;
  v38 = a1[20];
  v37 = (std::__shared_weak_count *)a1[21];
  v68[4] = v6;
  v68[5] = v38;
  v69 = v37;
  if (v37)
  {
    v39 = (unint64_t *)&v37->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = _Block_copy(v68);
  v70 = v41;
  ABMServer::broadcast(v19, (uint64_t)__dst, &v71, &v70);
  if (v41)
    _Block_release(v41);
  if (v33)
    CFRelease(v33);
  if (SHIBYTE(v73) < 0)
    operator delete(__dst[0]);
  v42 = v69;
  if (!v69)
    goto LABEL_63;
  v43 = (unint64_t *)&v69->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    v45 = (std::__shared_weak_count *)v92.__r_.__value_.__l.__size_;
    if (!v92.__r_.__value_.__l.__size_)
      goto LABEL_67;
  }
  else
  {
LABEL_63:
    v45 = (std::__shared_weak_count *)v92.__r_.__value_.__l.__size_;
    if (!v92.__r_.__value_.__l.__size_)
      goto LABEL_67;
  }
  v46 = (unint64_t *)&v45->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    v48 = (const void *)v90;
    if ((_QWORD)v90)
      goto LABEL_68;
    return;
  }
LABEL_67:
  v48 = (const void *)v90;
  if ((_QWORD)v90)
LABEL_68:
    CFRelease(v48);
}

void sub_24B8EB784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_72(uint64_t a1)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2[0] = MEMORY[0x24BDAC760];
  v2[1] = 0x40000000;
  v2[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2;
  v2[3] = &__block_descriptor_tmp_73;
  v2[4] = v1;
  ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v1 + 120), (uint64_t)v2);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1)
{
  BootModule::boot_sync(*(BootModule **)(a1 + 32));
}

uint64_t __copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void __copy_helper_block_e8_40c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE48c15_ZTSK9ResetInfo160c38_ZTSNSt3__110shared_ptrI10BootModuleEE(std::string *a1, _QWORD *a2)
{
  void *v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;

  v4 = (void *)a2[5];
  if (v4)
    v4 = _Block_copy(v4);
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  ResetInfo::ResetInfo(a1 + 2, (const ResetInfo *)(a2 + 6));
  v5 = a2[21];
  a1[6].__r_.__value_.__r.__words[2] = a2[20];
  a1[7].__r_.__value_.__r.__words[0] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
}

void sub_24B8EBA60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 40);
  if (v3)
    _Block_release(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE48c15_ZTSK9ResetInfo160c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const void *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 159) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*(char *)(a1 + 119) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_13;
    }
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 159) & 0x80000000) == 0)
      goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 136));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_15:
    operator delete(*(void **)(a1 + 48));
    v5 = *(const void **)(a1 + 40);
    if (!v5)
      return;
    goto LABEL_16;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_15;
LABEL_9:
  v5 = *(const void **)(a1 + 40);
  if (v5)
LABEL_16:
    _Block_release(v5);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_78(uint64_t a1)
{
  uint64_t v1;
  std::string __p;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    __p = *(std::string *)(a1 + 40);
  (*(void (**)(uint64_t, uint64_t, std::string *))(v1 + 16))(v1, 3760250880, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_24B8EBBD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  std::string *v5;
  __int128 v6;

  v4 = *(void **)(a2 + 32);
  if (v4)
    v4 = _Block_copy(v4);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_24B8EBC54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  if (v3)
    _Block_release(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  const void *v2;

  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v2 = *(const void **)(a1 + 32);
    if (!v2)
      return;
    goto LABEL_5;
  }
  v2 = *(const void **)(a1 + 32);
  if (v2)
LABEL_5:
    _Block_release(v2);
}

void __copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE64c15_ZTSK9ResetInfo(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;

  v4 = a2[6];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  if (v7)
    v7 = _Block_copy(v7);
  *(_QWORD *)(a1 + 56) = v7;
  ResetInfo::ResetInfo((std::string *)(a1 + 64), (const ResetInfo *)(a2 + 8));
}

void sub_24B8EBD28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  const void *v4;

  v4 = *(const void **)(v2 + 56);
  if (v4)
    _Block_release(v4);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE64c15_ZTSK9ResetInfo(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(char *)(a1 + 175) < 0)
  {
    operator delete(*(void **)(a1 + 152));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 111) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 112));
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_10:
    operator delete(*(void **)(a1 + 64));
    v2 = *(const void **)(a1 + 56);
    if (!v2)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    goto LABEL_10;
LABEL_5:
  v2 = *(const void **)(a1 + 56);
  if (v2)
LABEL_11:
    _Block_release(v2);
LABEL_12:
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void BootModule::shutdown_sync(uint64_t a1, _QWORD *a2)
{
  void (**v3)(void *, _QWORD, std::string *);
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void (**v10)(void *, _QWORD, std::string *);
  void *v11;
  NSObject *v12;
  CommandDriverFactory *v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  NSObject *v28;
  void *v29;
  NSObject *v30;
  void (**v31)(void *, _QWORD, std::string *);
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  void *v42;
  dispatch_object_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  _QWORD aBlock[7];
  std::__shared_weak_count *v51;
  void *v52;
  void *v53;
  dispatch_object_t object;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  __n128 (*v60)(uint64_t, uint64_t);
  void (*v61)(uint64_t);
  std::string v62;
  std::string buf;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v57 = 0;
  v58 = &v57;
  v59 = 0x4002000000;
  v60 = __Block_byref_object_copy__0;
  v61 = __Block_byref_object_dispose__0;
  memset(&v62, 0, sizeof(v62));
  if (*(_DWORD *)(a1 + 448) == 8)
  {
    std::string::__assign_external(&v62, "BootModule already in shutdown state", 0x24uLL);
    v3 = (void (**)(void *, _QWORD, std::string *))*a2;
    if (*((char *)v58 + 63) < 0)
      std::string::__init_copy_ctor_external(&buf, (const std::string::value_type *)v58[5], v58[6]);
    else
      buf = *(std::string *)(v58 + 5);
    v3[2](v3, 0, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      _Block_object_dispose(&v57, 8);
      if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  v6 = *(_QWORD *)(a1 + 120);
  v5 = *(std::__shared_weak_count **)(a1 + 128);
  v55 = v6;
  if (!v5 || (v7 = std::__shared_weak_count::lock(v5), (v56 = v7) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v53 = (void *)0xAAAAAAAAAAAAAAAALL;
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &unk_251CBDE08;
  aBlock[5] = a1;
  aBlock[6] = v6;
  v51 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  aBlock[4] = &v57;
  v10 = (void (**)(void *, _QWORD, std::string *))*a2;
  if (*a2)
    v10 = (void (**)(void *, _QWORD, std::string *))_Block_copy(v10);
  v52 = v10;
  v11 = _Block_copy(aBlock);
  v12 = *(NSObject **)(a1 + 136);
  if (v12)
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  v53 = v11;
  object = v12;
  v48 = 0xAAAAAAAAAAAAAAAALL;
  v49 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v13 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v14 = off_2579B85E0;
  if (!off_2579B85E0)
  {
    CommandDriverFactory::create_default_global(v13);
    v15 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
    v16 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
    off_2579B85E0 = v15;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v20 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v14 = off_2579B85E0;
  }
  v22 = (std::__shared_weak_count *)*(&off_2579B85E0 + 1);
  v44 = v14;
  v45 = *(&off_2579B85E0 + 1);
  if (*(&off_2579B85E0 + 1))
  {
    v23 = (unint64_t *)(*(&off_2579B85E0 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(&v46, v14);
  v48 = 0;
  v49 = 0;
  if (v47)
  {
    v49 = std::__shared_weak_count::lock(v47);
    if (v49)
      v48 = v46;
    if (v47)
      std::__shared_weak_count::__release_weak(v47);
  }
  if (!v22)
    goto LABEL_36;
  v25 = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v27 = v48;
    if (!v48)
      goto LABEL_53;
  }
  else
  {
LABEL_36:
    v27 = v48;
    if (!v48)
      goto LABEL_53;
  }
  if (*(_BYTE *)(a1 + 192))
  {
    v28 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = 10;
      _os_log_impl(&dword_24B855000, v28, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband requested with timeout %llu sec", (uint8_t *)&buf, 0xCu);
    }
    v29 = v53;
    if (v53)
      v29 = _Block_copy(v53);
    v42 = v29;
    v43 = object;
    if (object)
      dispatch_retain(object);
    (*(void (**)(unint64_t, uint64_t, void **))(*(_QWORD *)v27 + 64))(v27, 10000000000, &v42);
    if (v43)
      dispatch_release(v43);
    if (v42)
      _Block_release(v42);
    goto LABEL_61;
  }
LABEL_53:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, 8);
  if (*(_QWORD *)(a1 + 472))
  {
    std::string::__assign_external((std::string *)(v58 + 5), "Transport clients are not started yet", 0x25uLL);
    v30 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v41 = v58 + 5;
      if (*((char *)v58 + 63) < 0)
        v41 = (_QWORD *)*v41;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
      _os_log_error_impl(&dword_24B855000, v30, OS_LOG_TYPE_ERROR, "Poweroff baseband request skipped (powercycle anyway); Error: %s",
        (uint8_t *)&buf,
        0xCu);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 472) + 72))(*(_QWORD *)(a1 + 472));
  }
  v31 = (void (**)(void *, _QWORD, std::string *))*a2;
  if (*((char *)v58 + 63) < 0)
    std::string::__init_copy_ctor_external(&buf, (const std::string::value_type *)v58[5], v58[6]);
  else
    buf = *(std::string *)(v58 + 5);
  v31[2](v31, 3760250880, &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_61:
  v32 = v49;
  if (v49)
  {
    v33 = (unint64_t *)&v49->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (object)
    dispatch_release(object);
  if (v53)
    _Block_release(v53);
  if (v52)
    _Block_release(v52);
  v35 = v51;
  if (!v51)
    goto LABEL_76;
  v36 = (unint64_t *)&v51->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    v38 = v56;
    if (!v56)
      goto LABEL_80;
  }
  else
  {
LABEL_76:
    v38 = v56;
    if (!v56)
      goto LABEL_80;
  }
  v39 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (v40)
  {
LABEL_80:
    _Block_object_dispose(&v57, 8);
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_81;
  }
  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
  std::__shared_weak_count::__release_weak(v38);
  _Block_object_dispose(&v57, 8);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
LABEL_81:
    operator delete(v62.__r_.__value_.__l.__data_);
}

void sub_24B8EC408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,char a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a27);
  if (aBlock)
    _Block_release(aBlock);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v29);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Block_object_dispose((const void *)(v30 - 160), 8);
  if (*(char *)(v30 - 97) < 0)
    operator delete(*(void **)(v30 - 120));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1, ctu::cf **a2)
{
  _QWORD *v3;
  uint64_t (*v4)(uint64_t);
  const void *v6;
  uint64_t v7;
  void **v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  dispatch_time_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[7];
  std::__shared_weak_count *v30;
  void *v31;
  void *v32;
  char *v33;
  __int128 v34;
  std::string buf;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)a1[5];
  if (*a2)
    v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v4 = 0;
  if (v4)
  {
    (*(void (**)(_QWORD, uint64_t))(*v3 + 96))(a1[5], 8);
    ctu::cf::show(*a2, v6);
    v7 = *(_QWORD *)(a1[4] + 8);
    v8 = (void **)(v7 + 40);
    if (*(char *)(v7 + 63) < 0)
      operator delete(*v8);
    *(std::string *)v8 = buf;
    v9 = v3[11];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v27 = *(_QWORD *)(a1[4] + 8);
      v28 = (_QWORD *)(v27 + 40);
      if (*(char *)(v27 + 63) < 0)
        v28 = (_QWORD *)*v28;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
      _os_log_error_impl(&dword_24B855000, v9, OS_LOG_TYPE_ERROR, "#I Poweroff baseband request failed; Error: %{public}s",
        (uint8_t *)&buf,
        0xCu);
      v10 = v3[59];
      if (!v10)
        goto LABEL_10;
    }
    else
    {
      v10 = v3[59];
      if (!v10)
      {
LABEL_10:
        v11 = *(_QWORD *)(a1[4] + 8);
        v12 = a1[8];
        if (*(char *)(v11 + 63) < 0)
          std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v11 + 40), *(_QWORD *)(v11 + 48));
        else
          buf = *(std::string *)(v11 + 40);
        (*(void (**)(uint64_t, uint64_t, std::string *))(v12 + 16))(v12, 3760250880, &buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        return;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
    goto LABEL_10;
  }
  v13 = v3[11];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_24B855000, v13, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband request delivered; waiting for reset detection",
      (uint8_t *)&buf,
      2u);
  }
  v14 = v3[22];
  v15 = (char *)operator new(0x28uLL);
  v33 = v15;
  v34 = xmmword_24B950490;
  strcpy(v15, "Poweroff: Wait for reset detection");
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke_86;
  aBlock[3] = &unk_251CBDDD0;
  v17 = a1[6];
  v16 = (std::__shared_weak_count *)a1[7];
  aBlock[5] = v3;
  aBlock[6] = v17;
  v30 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = (void *)a1[8];
  if (v20)
    v20 = _Block_copy(v20);
  v21 = a1[4];
  v31 = v20;
  aBlock[4] = v21;
  v22 = _Block_copy(aBlock);
  v32 = v22;
  v23 = dispatch_time(0, 10000000000);
  ResetDetection::add(v14, (uint64_t)&v33, 1, &v32, v23);
  if (v22)
    _Block_release(v22);
  operator delete(v15);
  if (v31)
    _Block_release(v31);
  v24 = v30;
  if (v30)
  {
    v25 = (unint64_t *)&v30->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_24B8EC85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke_86(_QWORD *a1, int a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  std::string __p;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)a1[5];
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 96))(v4, 8);
  if (a2)
  {
    v5 = (char *)operator new(0x30uLL);
    strcpy(v5, "Poweroff: Timeout waiting for reset detection");
    v6 = *(_QWORD *)(a1[4] + 8);
    if (*(char *)(v6 + 63) < 0)
      operator delete(*(void **)(v6 + 40));
    *(_QWORD *)(v6 + 40) = v5;
    *(_OWORD *)(v6 + 48) = xmmword_24B953EB0;
    v7 = v4[11];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v13 = *(_QWORD *)(a1[4] + 8);
      v14 = (_QWORD *)(v13 + 40);
      if (*(char *)(v13 + 63) < 0)
        v14 = (_QWORD *)*v14;
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
      _os_log_error_impl(&dword_24B855000, v7, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&__p, 0xCu);
      v8 = *(_QWORD *)(a1[4] + 8);
      v9 = a1[8];
      if ((*(char *)(v8 + 63) & 0x80000000) == 0)
        goto LABEL_6;
    }
    else
    {
      v8 = *(_QWORD *)(a1[4] + 8);
      v9 = a1[8];
      if ((*(char *)(v8 + 63) & 0x80000000) == 0)
      {
LABEL_6:
        __p = *(std::string *)(v8 + 40);
LABEL_17:
        (*(void (**)(uint64_t, uint64_t, std::string *))(v9 + 16))(v9, 3760250883, &__p);
        goto LABEL_18;
      }
    }
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 40), *(_QWORD *)(v8 + 48));
    goto LABEL_17;
  }
  v10 = v4[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_24B855000, v10, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband success", (uint8_t *)&__p, 2u);
  }
  v11 = *(_QWORD *)(a1[4] + 8);
  v12 = a1[8];
  if (*(char *)(v11 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v11 + 40), *(_QWORD *)(v11 + 48));
  else
    __p = *(std::string *)(v11 + 40);
  (*(void (**)(uint64_t, _QWORD, std::string *))(v12 + 16))(v12, 0, &__p);
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    result = v4[59];
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  }
  result = v4[59];
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  return result;
}

void sub_24B8ECB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_48c38_ZTSNSt3__110shared_ptrI10BootModuleEE64c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[7];
  a1[6] = a2[6];
  a1[7] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[8];
  if (result)
    result = _Block_copy(result);
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_48c38_ZTSNSt3__110shared_ptrI10BootModuleEE64c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(const void **)(a1 + 64);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = a1[6];
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = *(_QWORD *)(v2 + 472) != 0;
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24)
    || (*(_BYTE *)(v2 + 229) = 1, v3 = *(NSObject **)(v2 + 88), !os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)))
  {
    v4 = *(_QWORD *)(a1[4] + 8);
    if (*(_BYTE *)(v4 + 24))
      goto LABEL_4;
LABEL_11:
    *(_BYTE *)(v4 + 24) = 0;
    if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
      goto LABEL_5;
    goto LABEL_12;
  }
  LOWORD(v11) = 0;
  _os_log_error_impl(&dword_24B855000, v3, OS_LOG_TYPE_ERROR, "Boot controller object has not been created!", (uint8_t *)&v11, 2u);
  v4 = *(_QWORD *)(a1[4] + 8);
  if (!*(_BYTE *)(v4 + 24))
    goto LABEL_11;
LABEL_4:
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 472)
                                                                                           + 48))(*(_QWORD *)(v2 + 472), *(_QWORD *)(a1[5] + 8) + 40);
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
LABEL_5:
    *(_QWORD *)(v2 + 232) = TelephonyUtilSystemMachTime();
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 472)
                                                                                             + 56))(*(_QWORD *)(v2 + 472), *(_QWORD *)(a1[5] + 8) + 40);
    if (!*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
    {
      v5 = *(NSObject **)(v2 + 88);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = *(_QWORD *)(a1[5] + 8);
        v7 = (_QWORD *)(v6 + 40);
        if (*(char *)(v6 + 63) < 0)
          v7 = (_QWORD *)*v7;
        v11 = 136315138;
        v12 = v7;
        v8 = "Failed on booting!: Reason: %s";
LABEL_17:
        _os_log_error_impl(&dword_24B855000, v5, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v11, 0xCu);
        return;
      }
    }
    return;
  }
LABEL_12:
  *(_BYTE *)(v2 + 229) = 1;
  v5 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v9 = *(_QWORD *)(a1[5] + 8);
    v10 = (_QWORD *)(v9 + 40);
    if (*(char *)(v9 + 63) < 0)
      v10 = (_QWORD *)*v10;
    v11 = 136315138;
    v12 = v10;
    v8 = "Failed on preparation for booting!: Reason: %s";
    goto LABEL_17;
  }
}

uint64_t __copy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke_93(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_24B855000, v1, OS_LOG_TYPE_DEFAULT, "#I Recovery detected", v2, 2u);
  }
}

void __copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c30_ZTSN8dispatch13group_sessionE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[7];
  a1[7] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[7];
    if (v7)
      dispatch_group_enter(v7);
  }
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 56);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke_95(_QWORD *a1)
{
  _QWORD *v1;
  NSObject *v3;
  uint64_t v4;
  __CFDictionary *Mutable;
  const __CFAllocator *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void *v15;
  size_t v16;
  void *v17;
  void **v18;
  const void *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeID v23;
  NSObject *v24;
  NSObject *v25;
  unint64_t v26;
  _QWORD v27[6];
  _QWORD block[6];
  std::__shared_weak_count *v29;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v33;
  NSObject *v34;
  os_activity_scope_state_s state;

  v1 = (_QWORD *)a1[6];
  if ((*((_DWORD *)v1 + 112) - 7) < 2)
    return;
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
    v34 = _os_activity_create(&dword_24B855000, "Baseband state: booted", MEMORY[0x24BDACB08], OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
    os_activity_scope_enter(v34, &state);
    os_activity_scope_leave(&state);
    v3 = v1[11];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I Baseband bootup succeeded", (uint8_t *)&state, 2u);
    }
    (*(void (**)(_QWORD *, uint64_t))(*v1 + 96))(v1, 3);
    v1[30] = TelephonyUtilSystemMachTime();
    state.opaque[0] = 0;
    v4 = *MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
      state.opaque[0] = (uint64_t)Mutable;
    ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x24BE05198], (const __CFString **)*MEMORY[0x24BE05340], v4, v6);
    v7 = (std::__shared_weak_count *)v1[16];
    if (!v7 || (v8 = v1[15], (v9 = std::__shared_weak_count::lock(v7)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v10 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    BootModule::reportStatisticsBootUpTime_sync((BootModule *)v1);
    v15 = (const void *)*MEMORY[0x24BE05658];
    v16 = strlen((const char *)*MEMORY[0x24BE05658]);
    if (v16 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v17 = (void *)v16;
    if (v16 >= 0x17)
    {
      v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v21 = v16 | 7;
      v22 = v21 + 1;
      v18 = (void **)operator new(v21 + 1);
      __dst[1] = v17;
      v33 = v22 | 0x8000000000000000;
      __dst[0] = v18;
    }
    else
    {
      HIBYTE(v33) = v16;
      v18 = __dst;
      if (!v16)
      {
        LOBYTE(__dst[0]) = 0;
        v19 = (const void *)state.opaque[0];
        if (!state.opaque[0])
          goto LABEL_29;
LABEL_27:
        v23 = CFGetTypeID(v19);
        if (v23 == CFDictionaryGetTypeID())
        {
          cf = v19;
          CFRetain(v19);
LABEL_30:
          aBlock = 0;
          Service::broadcastEvent((uint64_t)v1, (uint64_t)__dst, &cf, (const void **)&aBlock);
          if (aBlock)
            _Block_release(aBlock);
          if (cf)
            CFRelease(cf);
          if (SHIBYTE(v33) < 0)
            operator delete(__dst[0]);
          v24 = a1[9];
          v25 = v1[17];
          block[0] = MEMORY[0x24BDAC760];
          block[1] = 1174405120;
          block[2] = ___ZN10BootModule9boot_syncEv_block_invoke_96;
          block[3] = &__block_descriptor_tmp_102_0;
          block[4] = v1;
          block[5] = v8;
          v29 = v10;
          do
            v26 = __ldxr(p_shared_weak_owners);
          while (__stxr(v26 + 1, p_shared_weak_owners));
          dispatch_group_notify(v24, v25, block);
          if (v29)
            std::__shared_weak_count::__release_weak(v29);
          std::__shared_weak_count::__release_weak(v10);
          if (v19)
            CFRelease(v19);
          if (v34)
            os_release(v34);
          return;
        }
LABEL_29:
        cf = 0;
        goto LABEL_30;
      }
    }
    memmove(v18, v15, (size_t)v17);
    *((_BYTE *)v17 + (_QWORD)v18) = 0;
    v19 = (const void *)state.opaque[0];
    if (!state.opaque[0])
      goto LABEL_29;
    goto LABEL_27;
  }
  v20 = v1[11];
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    LOWORD(state.opaque[0]) = 0;
    _os_log_error_impl(&dword_24B855000, v20, OS_LOG_TYPE_ERROR, "Baseband bootup failed", (uint8_t *)&state, 2u);
  }
  (*(void (**)(_QWORD *, uint64_t))(*v1 + 96))(v1, 5);
  v27[0] = MEMORY[0x24BDAC760];
  v27[1] = 0x40000000;
  v27[2] = ___ZN10BootModule9boot_syncEv_block_invoke_103;
  v27[3] = &unk_251CBDF38;
  v27[4] = a1[5];
  v27[5] = v1;
  ctu::SharedSynchronizable<BootModule>::execute_wrapped(v1 + 15, (uint64_t)v27);
}

void sub_24B8ED3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *aBlock,const void *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__shared_weak_count *v30;
  uint64_t v31;

  if (aBlock)
    _Block_release(aBlock);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a24);
  if (a30 < 0)
    operator delete(__p);
  std::__shared_weak_count::__release_weak(v30);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v31 - 96));
  ctu::os::scoped_activity::~scoped_activity((void **)(v31 - 104));
  _Unwind_Resume(a1);
}

void BootModule::reportStatisticsBootUpTime_sync(BootModule *this)
{
  NSObject *v2;
  xpc_object_t v3;
  uint64_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  int64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  const void *v17;
  size_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  xpc_object_t object;
  uint8_t buf[8];
  size_t v26;
  unint64_t v27;

  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting Stats of bootup time", buf, 2u);
  }
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = MEMORY[0x24BDACFA0];
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v3) == v4)
    {
      xpc_retain(v3);
      v5 = v3;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6 || (v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v6) == v4)
    {
      xpc_retain(v6);
      v7 = v6;
    }
    else
    {
      v7 = xpc_null_create();
    }
  }
  else
  {
    v7 = xpc_null_create();
    v6 = 0;
  }
  xpc_release(v6);
  v8 = time(0);
  v9 = xpc_int64_create(v8);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x24BE05678], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_string_create((const char *)*MEMORY[0x24BE05918]);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x24BE04E88], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(0);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x24BE04F38], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (v7)
  {
    xpc_retain(v7);
    v15 = v7;
  }
  else
  {
    v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x24BE04E80], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = (const void *)*MEMORY[0x24BE051F0];
  v18 = strlen((const char *)*MEMORY[0x24BE051F0]);
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    v26 = v19;
    v27 = v22 | 0x8000000000000000;
    *(_QWORD *)buf = v20;
LABEL_32:
    memmove(v20, v17, v19);
    *((_BYTE *)v20 + v19) = 0;
    object = v5;
    if (v5)
      goto LABEL_28;
    goto LABEL_33;
  }
  HIBYTE(v27) = v18;
  v20 = buf;
  if (v18)
    goto LABEL_32;
  buf[0] = 0;
  object = v5;
  if (v5)
  {
LABEL_28:
    xpc_retain(v5);
    goto LABEL_34;
  }
LABEL_33:
  object = xpc_null_create();
LABEL_34:
  v23 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v23);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v27) < 0)
    operator delete(*(void **)buf);
  xpc_release(v7);
  xpc_release(v5);
}

void sub_24B8ED818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  xpc_release(object);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(v17);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule9boot_syncEv_block_invoke_96(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  _QWORD aBlock[6];
  std::__shared_weak_count *v11;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = a1[4];
  v3 = *(_QWORD *)(v2 + 176);
  v4 = (char *)operator new(0x19uLL);
  v13 = v4;
  v14 = xmmword_24B9518A0;
  strcpy(v4, "Baseband Recovered Gate");
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule9boot_syncEv_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_101;
  v6 = a1[5];
  v5 = (std::__shared_weak_count *)a1[6];
  aBlock[4] = v2;
  aBlock[5] = v6;
  v11 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = _Block_copy(aBlock);
  v12 = v9;
  ResetDetection::add(v3, (uint64_t)&v13, 0, &v12, -1);
  if (v9)
    _Block_release(v9);
  operator delete(v4);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

void sub_24B8ED9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  void *v16;
  const void *v17;

  if (v17)
    _Block_release(v17);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule9boot_syncEv_block_invoke_2(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  BootModule *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  char *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD aBlock[6];
  std::__shared_weak_count *v16;
  void *v17;
  char *v18;
  __int128 v19;
  std::__shared_weak_count *v21;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (BootModule *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v21 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        BootModule::bbResetFlag(v3, 0);
        v6 = *((_QWORD *)v3 + 22);
        v7 = (char *)operator new(0x19uLL);
        v18 = v7;
        v19 = xmmword_24B9518A0;
        strcpy(v7, "Baseband Crash Recovery");
        aBlock[0] = MEMORY[0x24BDAC760];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN10BootModule9boot_syncEv_block_invoke_3;
        aBlock[3] = &__block_descriptor_tmp_100_0;
        v9 = a1[5];
        v8 = (std::__shared_weak_count *)a1[6];
        aBlock[4] = v3;
        aBlock[5] = v9;
        v16 = v8;
        if (v8)
        {
          p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
          do
            v11 = __ldxr(p_shared_weak_owners);
          while (__stxr(v11 + 1, p_shared_weak_owners));
        }
        v12 = _Block_copy(aBlock);
        v17 = v12;
        ResetDetection::add(v6, (uint64_t)&v18, 1, &v17, -1);
        if (v12)
          _Block_release(v12);
        operator delete(v7);
        if (v16)
          std::__shared_weak_count::__release_weak(v16);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_24B8EDB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  void *v16;
  const void *v17;
  uint64_t v18;

  if (v17)
    _Block_release(v17);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  operator delete(v16);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v18 - 64);
  _Unwind_Resume(a1);
}

void sub_24B8EDBD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void BootModule::bbResetFlag(BootModule *this, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _BYTE *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v3 || (v5 = *((_QWORD *)this + 15), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *(_QWORD *)v8 = this;
  v8[8] = a2;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = *((_QWORD *)this + 17);
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::bbResetFlag(BOOL)::$_0>(BootModule::bbResetFlag(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::bbResetFlag(BOOL)::$_0,dispatch_queue_s *::default_delete<BootModule::bbResetFlag(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke_3(_QWORD *a1)
{
  BootModule *v1;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  __int128 v5;
  const void *v6;
  size_t v7;
  size_t v8;
  __int128 *p_dst;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  size_t v14;
  size_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  const void *v20;
  size_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  void *aBlock;
  CFTypeRef cf;
  void *v30[2];
  unint64_t v31;
  uint64_t v32;
  std::string v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  __int128 v40;
  char v41;
  _BYTE v42[8];
  _QWORD *v43;
  void *__p[2];
  char v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  __int128 __dst;
  unint64_t v51;
  _BYTE v52[32];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  std::__shared_weak_count *v59;

  v1 = (BootModule *)a1[4];
  if ((*((_DWORD *)v1 + 112) - 7) >= 2)
  {
    v3 = (std::__shared_weak_count *)a1[6];
    if (v3)
    {
      v4 = std::__shared_weak_count::lock(v3);
      v59 = v4;
      if (v4)
      {
        if (!a1[5])
        {
          v10 = v4;
LABEL_60:
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
          return;
        }
        BootModule::bbResetFlag(v1, 1);
        *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v56 = v5;
        v57 = v5;
        v54 = v5;
        v55 = v5;
        *(_OWORD *)&v52[16] = v5;
        v53 = v5;
        *(_OWORD *)v52 = v5;
        v6 = (const void *)*MEMORY[0x24BE051D0];
        v7 = strlen((const char *)*MEMORY[0x24BE051D0]);
        if (v7 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v8 = v7;
        if (v7 >= 0x17)
        {
          v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17)
            v11 = v7 | 7;
          v12 = v11 + 1;
          p_dst = (__int128 *)operator new(v11 + 1);
          *((_QWORD *)&__dst + 1) = v8;
          v51 = v12 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v51) = v7;
          p_dst = &__dst;
          if (!v7)
          {
LABEL_14:
            *((_BYTE *)p_dst + v8) = 0;
            v13 = (const void *)*MEMORY[0x24BE05790];
            v14 = strlen((const char *)*MEMORY[0x24BE05790]);
            if (v14 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v15 = v14;
            if (v14 >= 0x17)
            {
              v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v14 | 7) != 0x17)
                v17 = v14 | 7;
              v18 = v17 + 1;
              v16 = (__int128 *)operator new(v17 + 1);
              *((_QWORD *)&v48 + 1) = v15;
              v49 = v18 | 0x8000000000000000;
              *(_QWORD *)&v48 = v16;
            }
            else
            {
              HIBYTE(v49) = v14;
              v16 = &v48;
              if (!v14)
              {
LABEL_22:
                *((_BYTE *)v16 + v15) = 0;
                v19 = (char *)operator new(0x20uLL);
                v46 = v19;
                v47 = xmmword_24B953EC0;
                strcpy(v19, "** baseband crash detected");
                Timestamp::Timestamp((Timestamp *)v42);
                Timestamp::asString((uint64_t)v42, 0, 9, __p);
                v41 = 0;
                LOBYTE(v40) = 0;
                ResetInfo::ResetInfo((std::string *)v52, &__dst, &v48, (__int128 *)&v46, (uint64_t)__p, 3, &v40);
                if (v45 < 0)
                  operator delete(__p[0]);
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v42, v43);
                operator delete(v19);
                if (SHIBYTE(v49) < 0)
                  operator delete((void *)v48);
                if (SHIBYTE(v51) < 0)
                  operator delete((void *)__dst);
                ResetInfo::ResetInfo(&v33, (const ResetInfo *)v52);
                v32 = 0;
                BootModule::requestReset(v1, &v33, &v32);
                if (v39 < 0)
                {
                  operator delete(v38);
                  if ((v37 & 0x80000000) == 0)
                  {
LABEL_30:
                    if ((v35 & 0x80000000) == 0)
                      goto LABEL_31;
                    goto LABEL_53;
                  }
                }
                else if ((v37 & 0x80000000) == 0)
                {
                  goto LABEL_30;
                }
                operator delete(v36);
                if ((v35 & 0x80000000) == 0)
                {
LABEL_31:
                  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_32;
LABEL_54:
                  operator delete(v33.__r_.__value_.__l.__data_);
LABEL_32:
                  v20 = (const void *)*MEMORY[0x24BE05540];
                  v21 = strlen((const char *)*MEMORY[0x24BE05540]);
                  if (v21 > 0x7FFFFFFFFFFFFFF7)
                    std::string::__throw_length_error[abi:ne180100]();
                  v22 = (void *)v21;
                  if (v21 >= 0x17)
                  {
                    v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v21 | 7) != 0x17)
                      v24 = v21 | 7;
                    v25 = v24 + 1;
                    v23 = operator new(v24 + 1);
                    v30[1] = v22;
                    v31 = v25 | 0x8000000000000000;
                    v30[0] = v23;
                  }
                  else
                  {
                    HIBYTE(v31) = v21;
                    v23 = v30;
                    if (!v21)
                    {
LABEL_40:
                      *((_BYTE *)v22 + (_QWORD)v23) = 0;
                      aBlock = 0;
                      cf = 0;
                      Service::broadcastEvent((uint64_t)v1, (uint64_t)v30, &cf, (const void **)&aBlock);
                      if (aBlock)
                        _Block_release(aBlock);
                      if (cf)
                        CFRelease(cf);
                      if (SHIBYTE(v31) < 0)
                      {
                        operator delete(v30[0]);
                        if ((SHIBYTE(v57) & 0x80000000) == 0)
                        {
LABEL_46:
                          if ((SBYTE7(v55) & 0x80000000) == 0)
                            goto LABEL_47;
                          goto LABEL_57;
                        }
                      }
                      else if ((SHIBYTE(v57) & 0x80000000) == 0)
                      {
                        goto LABEL_46;
                      }
                      operator delete(*((void **)&v56 + 1));
                      if ((SBYTE7(v55) & 0x80000000) == 0)
                      {
LABEL_47:
                        if ((SHIBYTE(v53) & 0x80000000) == 0)
                          goto LABEL_48;
                        goto LABEL_58;
                      }
LABEL_57:
                      operator delete((void *)v54);
                      if ((SHIBYTE(v53) & 0x80000000) == 0)
                      {
LABEL_48:
                        if ((v52[23] & 0x80000000) == 0)
                          goto LABEL_49;
                        goto LABEL_59;
                      }
LABEL_58:
                      operator delete(*(void **)&v52[24]);
                      if ((v52[23] & 0x80000000) == 0)
                      {
LABEL_49:
                        v10 = v59;
                        if (!v59)
                          return;
                        goto LABEL_60;
                      }
LABEL_59:
                      operator delete(*(void **)v52);
                      v10 = v59;
                      if (!v59)
                        return;
                      goto LABEL_60;
                    }
                  }
                  memmove(v23, v20, (size_t)v22);
                  goto LABEL_40;
                }
LABEL_53:
                operator delete(v34);
                if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_32;
                goto LABEL_54;
              }
            }
            memmove(v16, v13, v15);
            goto LABEL_22;
          }
        }
        memmove(p_dst, v6, v8);
        goto LABEL_14;
      }
    }
  }
}

void sub_24B8EE12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  if (aBlock)
    _Block_release(aBlock);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    ResetInfo::~ResetInfo((void **)(v43 - 192));
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v43 - 80);
    _Unwind_Resume(a1);
  }
  ResetInfo::~ResetInfo((void **)(v43 - 192));
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v43 - 80);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule9boot_syncEv_block_invoke_103(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::string __p;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(char *)(v2 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 40), *(_QWORD *)(v2 + 48));
  else
    __p = *(std::string *)(v2 + 40);
  BootModule::handleBootFailed_sync(v1, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_24B8EE2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE72c21_ZTSN8dispatch5groupE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  NSObject *v5;

  v2 = a2[8];
  a1[7] = a2[7];
  a1[8] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[9];
  a1[9] = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE72c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(NSObject **)(a1 + 72);
  if (v2)
    dispatch_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void BootModule::setVoiceCall_sync(BootModule *this, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD *v15;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v3 || (v5 = *((_QWORD *)this + 15), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = *((_QWORD *)this + 52);
  v14 = *((_QWORD *)this + 17);
  v15 = operator new(0x20uLL);
  *v15 = this;
  v15[1] = v5;
  v15[2] = v7;
  *((_BYTE *)v15 + 24) = a2;
  dispatch_group_notify_f(v13, v14, v15, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setVoiceCall_sync(BOOL)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setVoiceCall_sync(BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_24B8EE46C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setRat1_sync(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD *v15;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = a1[52];
  v14 = a1[17];
  v15 = operator new(0x20uLL);
  *v15 = a1;
  v15[1] = v5;
  v15[2] = v7;
  *((_DWORD *)v15 + 6) = a2;
  dispatch_group_notify_f(v13, v14, v15, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_24B8EE560(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setRat2_sync(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD *v15;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = a1[52];
  v14 = a1[17];
  v15 = operator new(0x20uLL);
  *v15 = a1;
  v15[1] = v5;
  v15[2] = v7;
  *((_DWORD *)v15 + 6) = a2;
  dispatch_group_notify_f(v13, v14, v15, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_24B8EE654(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setPLMN1_sync(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  std::string *v15;
  __int128 v16;
  std::string __p;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = v5;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v13 = a1[52];
  v14 = a1[17];
  v15 = (std::string *)operator new(0x30uLL);
  *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
  v15[1] = __p;
  memset(&__p, 0, sizeof(__p));
  dispatch_group_notify_f(v13, v14, v15, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setPLMN1_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN1_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_24B8EE7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  std::__shared_weak_count *v11;

  if (a11)
  {
    std::__shared_weak_count::__release_weak(a11);
    std::__shared_weak_count::__release_weak(v11);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v11);
  _Unwind_Resume(a1);
}

uint64_t BootModule::setPLMN1_sync(std::string)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void BootModule::setPLMN2_sync(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  std::string *v15;
  __int128 v16;
  std::string __p;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = v5;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v13 = a1[52];
  v14 = a1[17];
  v15 = (std::string *)operator new(0x30uLL);
  *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
  v15[1] = __p;
  memset(&__p, 0, sizeof(__p));
  dispatch_group_notify_f(v13, v14, v15, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setPLMN2_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN2_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_24B8EE9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  std::__shared_weak_count *v11;

  if (a11)
  {
    std::__shared_weak_count::__release_weak(a11);
    std::__shared_weak_count::__release_weak(v11);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v11);
  _Unwind_Resume(a1);
}

void BootModule::setCellId_sync(_QWORD *a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  _QWORD *v17;

  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v7 = a1[15], (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = a1[52];
  v16 = a1[17];
  v17 = operator new(0x28uLL);
  *v17 = a1;
  v17[1] = v7;
  v17[2] = v9;
  v17[3] = a2;
  *((_DWORD *)v17 + 8) = a3;
  dispatch_group_notify_f(v15, v16, v17, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_24B8EEAD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setAreaCode_sync(_QWORD *a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  _QWORD *v17;

  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v7 = a1[15], (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = a1[52];
  v16 = a1[17];
  v17 = operator new(0x28uLL);
  *v17 = a1;
  v17[1] = v7;
  v17[2] = v9;
  v17[3] = a2;
  *((_DWORD *)v17 + 8) = a3;
  dispatch_group_notify_f(v15, v16, v17, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_24B8EEBD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::sub_match<std::__wrap_iter<char const*>>::str[abi:ne180100](_QWORD *result, uint64_t *a2)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  char *v7;
  __int128 *v8;
  _OWORD *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v2 = result;
  if (!*((_BYTE *)a2 + 16))
  {
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    return result;
  }
  v4 = *a2;
  v3 = (char *)a2[1];
  v5 = (unint64_t)&v3[-*a2];
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    *((_BYTE *)result + 23) = v5;
    if ((char *)v4 != v3)
      goto LABEL_5;
LABEL_15:
    *(_BYTE *)v2 = 0;
    return result;
  }
  v12 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v12 = v5 | 7;
  v13 = v12 + 1;
  result = operator new(v12 + 1);
  v2[1] = v5;
  v2[2] = v13 | 0x8000000000000000;
  *v2 = result;
  v2 = result;
  if ((char *)v4 == v3)
    goto LABEL_15;
LABEL_5:
  if (v5 < 0x20 || (unint64_t)v2 - v4 < 0x20)
  {
    v6 = v2;
    v7 = (char *)v4;
  }
  else
  {
    v6 = (char *)v2 + (v5 & 0xFFFFFFFFFFFFFFE0);
    v7 = (char *)(v4 + (v5 & 0xFFFFFFFFFFFFFFE0));
    v8 = (__int128 *)(v4 + 16);
    v9 = v2 + 2;
    v10 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v11 = *v8;
      *(v9 - 1) = *(v8 - 1);
      *v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 32;
    }
    while (v10);
    if (v5 == (v5 & 0x7FFFFFFFFFFFFFE0))
      goto LABEL_18;
  }
  do
  {
    v14 = *v7++;
    *v6++ = v14;
  }
  while (v7 != v3);
LABEL_18:
  *v6 = 0;
  return result;
}

uint64_t ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBE050;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBE050;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_24B8EEF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_24B8EEF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<BootModule>::shared_ptr[abi:ne180100]<BootModule,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_251CBE090;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_24B8EF098(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1}::operator() const(BootModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_24B8EF0B8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<BootModule *,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule *)#1},std::allocator<BootModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BootModule *,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule *)#1},std::allocator<BootModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1}::operator() const(BootModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BootModule *,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule *)#1},std::allocator<BootModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1}::operator() const(BootModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBE050;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void _ZZN8dispatch6detail12group_notifyIZZZN10BootModule12requestResetE9ResetInfoNS_5blockIU13block_pointerFviNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEEUb_EUb0_E3__0EEvP16dispatch_group_sP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEEENUlPvE_8__invokeESO_(char *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  const void *v6;
  void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  void *v13;
  std::string v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *__pa;
  char v20;

  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (!v2)
    goto LABEL_17;
  v3 = *(_QWORD *)__p;
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    goto LABEL_17;
  v5 = v4;
  if (*((_QWORD *)__p + 1))
  {
    ResetInfo::ResetInfo(&v14, (const ResetInfo *)(__p + 24));
    v6 = (const void *)*((_QWORD *)__p + 17);
    if (v6)
      v7 = _Block_copy(v6);
    else
      v7 = 0;
    v13 = v7;
    BootModule::handleReset_sync(v3, (uint64_t)&v14, &v13);
    if (v7)
      _Block_release(v7);
    if (v20 < 0)
    {
      operator delete(__pa);
      if ((v18 & 0x80000000) == 0)
      {
LABEL_11:
        if ((v16 & 0x80000000) == 0)
          goto LABEL_12;
        goto LABEL_35;
      }
    }
    else if ((v18 & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v17);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
LABEL_36:
      operator delete(v14.__r_.__value_.__l.__data_);
      goto LABEL_13;
    }
LABEL_35:
    operator delete(v15);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_13:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_17:
  v10 = *((_QWORD *)__p + 18);
  if (v10)
    dispatch_release(v10);
  v11 = (const void *)*((_QWORD *)__p + 17);
  if (v11)
    _Block_release(v11);
  if (__p[135] < 0)
  {
    operator delete(*((void **)__p + 14));
    if ((__p[95] & 0x80000000) == 0)
    {
LABEL_23:
      if ((__p[71] & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_30;
    }
  }
  else if ((__p[95] & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(*((void **)__p + 9));
  if ((__p[71] & 0x80000000) == 0)
  {
LABEL_24:
    if ((__p[47] & 0x80000000) == 0)
      goto LABEL_25;
LABEL_31:
    operator delete(*((void **)__p + 3));
    v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
    if (!v12)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_30:
  operator delete(*((void **)__p + 6));
  if (__p[47] < 0)
    goto LABEL_31;
LABEL_25:
  v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (v12)
LABEL_26:
    std::__shared_weak_count::__release_weak(v12);
LABEL_27:
  operator delete(__p);
}

void sub_24B8EF3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  _QWORD *v11;
  std::__shared_weak_count *v12;
  void **v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;
  NSObject *v18;
  const void *v19;
  std::__shared_weak_count *v20;

  if (v14)
    _Block_release(v14);
  ResetInfo::~ResetInfo(&a11);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (v17)
  {
    v18 = v11[18];
    if (!v18)
      goto LABEL_7;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v18 = v11[18];
    if (!v18)
    {
LABEL_7:
      v19 = (const void *)v11[17];
      if (!v19)
      {
LABEL_12:
        ResetInfo::~ResetInfo(v13);
        v20 = (std::__shared_weak_count *)v11[2];
        if (v20)
          std::__shared_weak_count::__release_weak(v20);
        operator delete(v11);
        _Unwind_Resume(a1);
      }
LABEL_11:
      _Block_release(v19);
      goto LABEL_12;
    }
  }
  dispatch_release(v18);
  v19 = (const void *)v11[17];
  if (!v19)
    goto LABEL_12;
  goto LABEL_11;
}

void ctu::SharedSynchronizable<BootModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_251CBE118;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb1_EUb2_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t *v2;
  const char *v3;
  uint64_t v4;
  xpc_object_t value;
  int v6;
  NSObject *v7;
  NSObject *v8;
  const void *v9;
  size_t v10;
  void *v11;
  void **v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  xpc_object_t v17;
  int v18;
  const char *v19;
  xpc_object_t v20;
  int v21;
  const char *v22;
  xpc_object_t v23;
  const char *v24;
  const char *v25;
  xpc_object_t v26;
  const char *v27;
  const char *v28;
  xpc_object_t v29;
  uint64_t v30;
  const char *v31;
  xpc_object_t v32;
  uint64_t v33;
  const char *v34;
  xpc_object_t v35;
  uint64_t v36;
  const char *v37;
  xpc_object_t v38;
  uint64_t v39;
  const char *v40;
  xpc_object_t v41;
  char v42;
  xpc_object_t v43;
  int v44;
  NSObject *v45;
  NSObject *v46;
  xpc_object_t v47;
  uint64_t v48;
  xpc_object_t v49;
  const void *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::string __p;
  std::string v55;
  xpc_object_t v56;
  std::string object;
  void *aBlock;
  xpc_object_t v59;
  void *__dst[2];
  unint64_t v61;

  v2 = *(uint64_t **)a1;
  v3 = (const char *)*MEMORY[0x24BE04EA8];
  v4 = **(_QWORD **)a1;
  if (!xpc_dictionary_get_value(*(xpc_object_t *)(*(_QWORD *)a1 + 8), (const char *)*MEMORY[0x24BE04EA8]))
    goto LABEL_26;
  value = xpc_dictionary_get_value((xpc_object_t)v2[1], v3);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value)
    xpc_retain(value);
  else
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  v6 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object.__r_.__value_.__l.__data_);
  if (!v6)
  {
    v8 = *(NSObject **)(v4 + 440);
    *(_QWORD *)(v4 + 440) = 0;
    if (!v8)
      goto LABEL_12;
    goto LABEL_11;
  }
  v7 = *(NSObject **)(v4 + 432);
  if (v7)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 432));
    dispatch_suspend(v7);
  }
  v8 = *(NSObject **)(v4 + 440);
  *(_QWORD *)(v4 + 440) = v7;
  if (v8)
  {
LABEL_11:
    dispatch_resume(v8);
    dispatch_release(v8);
  }
LABEL_12:
  BootModule::setVoiceCall_sync((BootModule *)v4, v6);
  v9 = (const void *)*MEMORY[0x24BE04F10];
  v10 = strlen((const char *)*MEMORY[0x24BE04F10]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v14 = v10 | 7;
    v15 = v14 + 1;
    v12 = (void **)operator new(v14 + 1);
    __dst[1] = v11;
    v61 = v15 | 0x8000000000000000;
    __dst[0] = v12;
LABEL_20:
    memmove(v12, v9, (size_t)v11);
    *((_BYTE *)v11 + (_QWORD)v12) = 0;
    v13 = (void *)v2[1];
    v59 = v13;
    if (v13)
      goto LABEL_16;
LABEL_21:
    v59 = xpc_null_create();
    goto LABEL_22;
  }
  HIBYTE(v61) = v10;
  v12 = __dst;
  if (v10)
    goto LABEL_20;
  LOBYTE(__dst[0]) = 0;
  v13 = (void *)v2[1];
  v59 = v13;
  if (!v13)
    goto LABEL_21;
LABEL_16:
  xpc_retain(v13);
LABEL_22:
  aBlock = 0;
  Service::broadcastEvent(v4, (uint64_t)__dst, &v59, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v59);
  v59 = 0;
  if (SHIBYTE(v61) < 0)
    operator delete(__dst[0]);
LABEL_26:
  v16 = (const char *)*MEMORY[0x24BE058C8];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x24BE058C8]))
  {
    v17 = xpc_dictionary_get_value((xpc_object_t)v2[1], v16);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    if (v17)
      xpc_retain(v17);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v18 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)0xFFFFFFFFLL);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setRat1_sync((_QWORD *)v4, v18);
  }
  v19 = (const char *)*MEMORY[0x24BE058D0];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x24BE058D0]))
  {
    v20 = xpc_dictionary_get_value((xpc_object_t)v2[1], v19);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    if (v20)
      xpc_retain(v20);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v21 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)0xFFFFFFFFLL);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setRat2_sync((_QWORD *)v4, v21);
  }
  v22 = (const char *)*MEMORY[0x24BE05908];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x24BE05908]))
  {
    memset(&object, 170, sizeof(object));
    v23 = xpc_dictionary_get_value((xpc_object_t)v2[1], v22);
    v56 = v23;
    if (v23)
      xpc_retain(v23);
    else
      v56 = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&v56, (const object *)"", v24);
    xpc_release(v56);
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v55, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
    else
      v55 = object;
    BootModule::setPLMN1_sync((_QWORD *)v4, (uint64_t)&v55);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v55.__r_.__value_.__l.__data_);
      if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_45;
    }
    else if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    operator delete(object.__r_.__value_.__l.__data_);
  }
LABEL_45:
  v25 = (const char *)*MEMORY[0x24BE05910];
  if (!xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x24BE05910]))
    goto LABEL_56;
  memset(&object, 170, sizeof(object));
  v26 = xpc_dictionary_get_value((xpc_object_t)v2[1], v25);
  v56 = v26;
  if (v26)
    xpc_retain(v26);
  else
    v56 = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&v56, (const object *)"", v27);
  xpc_release(v56);
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
  else
    __p = object;
  BootModule::setPLMN2_sync((_QWORD *)v4, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_56;
  }
  else if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_56;
  }
  operator delete(object.__r_.__value_.__l.__data_);
LABEL_56:
  v28 = (const char *)*MEMORY[0x24BE04DF8];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x24BE04DF8]))
  {
    v29 = xpc_dictionary_get_value((xpc_object_t)v2[1], v28);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
    if (v29)
      xpc_retain(v29);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v30 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setCellId_sync((_QWORD *)v4, v30, 0);
  }
  v31 = (const char *)*MEMORY[0x24BE04E00];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x24BE04E00]))
  {
    v32 = xpc_dictionary_get_value((xpc_object_t)v2[1], v31);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    if (v32)
      xpc_retain(v32);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v33 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setCellId_sync((_QWORD *)v4, v33, 1);
  }
  v34 = (const char *)*MEMORY[0x24BE04E60];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x24BE04E60]))
  {
    v35 = xpc_dictionary_get_value((xpc_object_t)v2[1], v34);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
    if (v35)
      xpc_retain(v35);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v36 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setAreaCode_sync((_QWORD *)v4, v36, 0);
  }
  v37 = (const char *)*MEMORY[0x24BE04E68];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x24BE04E68]))
  {
    v38 = xpc_dictionary_get_value((xpc_object_t)v2[1], v37);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    if (v38)
      xpc_retain(v38);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v39 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setAreaCode_sync((_QWORD *)v4, v39, 1);
  }
  v40 = (const char *)*MEMORY[0x24BE058F0];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x24BE058F0])
    || xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x24BE058F8]))
  {
    v41 = xpc_dictionary_get_value((xpc_object_t)v2[1], v40);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
    if (v41)
      xpc_retain(v41);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v42 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    if ((v42 & 1) == 0)
    {
      v43 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x24BE058F8]);
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      if (v43)
        xpc_retain(v43);
      else
        object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      v44 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object.__r_.__value_.__l.__data_);
      if (!v44)
      {
        v46 = *(NSObject **)(v4 + 440);
        *(_QWORD *)(v4 + 440) = 0;
        if (!v46)
          goto LABEL_92;
        goto LABEL_91;
      }
    }
    v45 = *(NSObject **)(v4 + 432);
    if (v45)
    {
      dispatch_retain(*(dispatch_object_t *)(v4 + 432));
      dispatch_suspend(v45);
    }
    v46 = *(NSObject **)(v4 + 440);
    *(_QWORD *)(v4 + 440) = v45;
    if (v46)
    {
LABEL_91:
      dispatch_resume(v46);
      dispatch_release(v46);
    }
  }
LABEL_92:
  if (v2[2])
  {
    v47 = xpc_null_create();
    v48 = v2[2];
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    v49 = xpc_null_create();
    (*(void (**)(uint64_t, _QWORD, std::string *))(v48 + 16))(v48, 0, &object);
    xpc_release(object.__r_.__value_.__l.__data_);
    xpc_release(v49);
    v50 = (const void *)v2[2];
    if (v50)
      _Block_release(v50);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v51 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  operator delete(a1);
}

void sub_24B8EFDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,xpc_object_t object,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *aBlock,xpc_object_t a30)
{
  _QWORD *v30;
  uint64_t v31;
  const void *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  if (a28 < 0)
    operator delete(__p);
  v33 = *(const void **)(v31 + 16);
  if (v33)
    _Block_release(v33);
  xpc_release(*(xpc_object_t *)(v31 + 8));
  operator delete((void *)v31);
  v34 = (std::__shared_weak_count *)v30[2];
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(v30);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::initialize(dispatch::group_session)::$_0>(BootModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  BootModule **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(BootModule ***)a1;
  BootModule::finishInitialization_sync(**(BootModule ***)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_24B8F00B0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::start(dispatch::group_session)::$_0>(BootModule::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  unsigned __int8 v5;
  std::string::size_type v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  NSObject *v34;
  NSObject *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  dispatch_object_t v44;
  NSObject *v45;
  NSObject *v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  NSObject *v51;
  NSObject *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  dispatch_object_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  dispatch_object_t object;
  __int128 v61;
  std::string block;
  void *v63;
  uint64_t *v64;

  v2 = *a1;
  v3 = (*a1)[3];
  v4 = *(NSObject **)(v3 + 136);
  object = v4;
  if (v4)
    dispatch_retain(v4);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  v6 = MEMORY[0x24BDAC760];
  block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
  block.__r_.__value_.__l.__size_ = 0x40000000;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v63 = &__block_descriptor_tmp_13_5;
  v64 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v7 = *(_QWORD *)algn_2579B8AE8;
    v58 = GetABMLogServer(void)::sLogServer;
    v59 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_8;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v7 = *(_QWORD *)algn_2579B8AE8;
    v58 = GetABMLogServer(void)::sLogServer;
    v59 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_8;
  }
  v8 = (unint64_t *)(v7 + 8);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
LABEL_8:
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v10 = off_2579B8480;
  if (!off_2579B8480)
  {
    ABMServer::create_default_global(&block);
    v11 = *(_OWORD *)&block.__r_.__value_.__l.__data_;
    *(_OWORD *)&block.__r_.__value_.__l.__data_ = 0uLL;
    v12 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
    off_2579B8480 = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    size = (std::__shared_weak_count *)block.__r_.__value_.__l.__size_;
    if (block.__r_.__value_.__l.__size_)
    {
      v16 = (unint64_t *)(block.__r_.__value_.__l.__size_ + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v10 = off_2579B8480;
  }
  v18 = (std::__shared_weak_count *)*(&off_2579B8480 + 1);
  if (*(&off_2579B8480 + 1))
  {
    v19 = (unint64_t *)(*(&off_2579B8480 + 1) + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ResetDetection::create(&object, &v58, *(_QWORD *)(*(_QWORD *)v10 + 208), (uint64_t *)&v61);
  v21 = v61;
  v61 = 0uLL;
  v22 = *(std::__shared_weak_count **)(v3 + 184);
  *(_OWORD *)(v3 + 176) = v21;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v18)
  {
    v28 = (unint64_t *)&v18->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v30 = v59;
  if (v59)
  {
    v31 = (unint64_t *)&v59->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (object)
    dispatch_release(object);
  v33 = *(uint64_t **)(v3 + 176);
  block.__r_.__value_.__r.__words[0] = v6;
  block.__r_.__value_.__l.__size_ = 0x40000000;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN14ResetDetection5startEv_block_invoke;
  v63 = &__block_descriptor_tmp_3;
  v64 = v33;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped(v33 + 9, (uint64_t)&block);
  v34 = v2[2];
  if (v34)
  {
    dispatch_retain((dispatch_object_t)v2[2]);
    dispatch_group_enter(v34);
  }
  v35 = *(NSObject **)(v3 + 208);
  *(_QWORD *)(v3 + 208) = v34;
  if (v35)
  {
    dispatch_group_leave(v35);
    dispatch_release(v35);
  }
  *(_QWORD *)&v61 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v61 + 1) = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v3 + 80))(&v61, v3);
  v36 = v61;
  if ((_QWORD)v61)
  {
    v57 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
    v37 = (char *)operator new(0x38uLL);
    strcpy(v37, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
    v38 = capabilities::abs::bootupAssertionTimeoutScalingFactor((capabilities::abs *)v37);
    v39 = *(_QWORD *)(v36 + 104);
    std::string::__init_copy_ctor_external(&block, v37, 0x33uLL);
    (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)v39 + 24))(&v57, v39, &block, 180000 * v38);
    if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
      operator delete(block.__r_.__value_.__l.__data_);
    operator delete(v37);
    v41 = *v2;
    v40 = v2[1];
    if (v40)
    {
      v42 = (unint64_t *)(v40 + 16);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v57;
    if (v57)
    {
      dispatch_retain(v57);
      v45 = v57;
    }
    else
    {
      v45 = 0;
    }
    v46 = *(NSObject **)(v3 + 136);
    v47 = operator new(0x20uLL);
    *v47 = v3;
    v47[1] = v41;
    v47[2] = v40;
    v47[3] = v44;
    dispatch_group_notify_f(v45, v46, v47, (dispatch_function_t)dispatch::detail::group_notify<BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
    if (v57)
      dispatch_release(v57);
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v2[2];
  if (v51)
  {
    dispatch_group_leave(v51);
    v52 = v2[2];
    if (v52)
      dispatch_release(v52);
  }
  v53 = (std::__shared_weak_count *)v2[1];
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  operator delete(v2);
  v54 = (std::__shared_weak_count *)a1[2];
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  operator delete(a1);
}

void sub_24B8F0638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t a9, uint64_t a10, std::__shared_weak_count *a11, dispatch_object_t object, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _QWORD *v20;
  _QWORD *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;
  NSObject *v25;
  NSObject *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;

  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (object)
    dispatch_release(object);
  v25 = v21[2];
  if (v25)
  {
    dispatch_group_leave(v25);
    v26 = v21[2];
    if (v26)
      dispatch_release(v26);
  }
  v27 = (std::__shared_weak_count *)v21[1];
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  operator delete(v21);
  v28 = (std::__shared_weak_count *)v20[2];
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(BootModule **__p)
{
  std::__shared_weak_count *v2;
  BootModule *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  BootModule *v6;
  uint64_t v7;
  __CFDictionary *Mutable;
  const __CFAllocator *v9;
  const void *v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeID v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  std::__shared_weak_count *v25;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v31;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_37;
  v3 = *__p;
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    goto LABEL_37;
  v5 = v4;
  v6 = __p[1];
  if (v6)
  {
    if (*((_DWORD *)v3 + 112))
    {
      v7 = *MEMORY[0x24BDBD240];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x24BE05198], (const __CFString **)*MEMORY[0x24BE054A8], v7, v9);
      v10 = (const void *)*MEMORY[0x24BE05658];
      v11 = strlen((const char *)*MEMORY[0x24BE05658]);
      if (v11 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v12 = (void *)v11;
      if (v11 >= 0x17)
      {
        v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v14 = v11 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __dst[1] = v12;
        v31 = v15 | 0x8000000000000000;
        __dst[0] = v13;
      }
      else
      {
        HIBYTE(v31) = v11;
        v13 = __dst;
        if (!v11)
        {
          LOBYTE(__dst[0]) = 0;
          if (!Mutable)
            goto LABEL_17;
LABEL_15:
          v16 = CFGetTypeID(Mutable);
          if (v16 == CFDictionaryGetTypeID())
          {
            cf = Mutable;
            CFRetain(Mutable);
            goto LABEL_18;
          }
LABEL_17:
          cf = 0;
LABEL_18:
          v26[0] = MEMORY[0x24BDAC760];
          v26[1] = 1174405120;
          v26[2] = ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke;
          v26[3] = &__block_descriptor_tmp_144_0;
          v26[4] = v3;
          v26[5] = v6;
          v27 = v5;
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
          aBlock = _Block_copy(v26);
          Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
          if (aBlock)
            _Block_release(aBlock);
          if (cf)
            CFRelease(cf);
          if (SHIBYTE(v31) < 0)
            operator delete(__dst[0]);
          v19 = v27;
          if (v27)
          {
            v20 = (unint64_t *)&v27->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          if (Mutable)
            CFRelease(Mutable);
          goto LABEL_33;
        }
      }
      memmove(v13, v10, (size_t)v12);
      *((_BYTE *)v12 + (_QWORD)v13) = 0;
      if (!Mutable)
        goto LABEL_17;
      goto LABEL_15;
    }
    BootModule::boot_sync(v3);
  }
LABEL_33:
  v22 = (unint64_t *)&v5->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_37:
  v24 = __p[3];
  if (v24)
    dispatch_release(v24);
  v25 = (std::__shared_weak_count *)__p[2];
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  operator delete(__p);
}

void sub_24B8F0AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock, CFTypeRef cf, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v27;
  NSObject *v28;
  std::__shared_weak_count *v29;

  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (v27)
  {
    v28 = v23[3];
    if (!v28)
      goto LABEL_5;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    v28 = v23[3];
    if (!v28)
    {
LABEL_5:
      v29 = (std::__shared_weak_count *)v23[2];
      if (!v29)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  dispatch_release(v28);
  v29 = (std::__shared_weak_count *)v23[2];
  if (!v29)
  {
LABEL_6:
    operator delete(v23);
    _Unwind_Resume(a1);
  }
LABEL_9:
  std::__shared_weak_count::__release_weak(v29);
  operator delete(v23);
  _Unwind_Resume(a1);
}

void ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2[0] = MEMORY[0x24BDAC760];
  v2[1] = 0x40000000;
  v2[2] = ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke_2;
  v2[3] = &__block_descriptor_tmp_143_0;
  v2[4] = v1;
  ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v1 + 120), (uint64_t)v2);
}

void ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke_2(uint64_t a1)
{
  BootModule::boot_sync(*(BootModule **)(a1 + 32));
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_21handleBootFailed_syncENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEUb4_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNS6_10unique_ptrISE_NS6_14default_deleteISE_EEEEENUlPvE_8__invokeESN_(_QWORD *a1)
{
  _QWORD *v2;
  NSObject *v3;
  void **v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *__p;
  char v12;
  uint8_t buf[4];
  void **v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  if (*(_DWORD *)(*a1 + 24))
  {
    v3 = *(NSObject **)(*v2 + 88);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      xpc::object::to_string((xpc::object *)(v2 + 4));
      v4 = v12 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315138;
      v14 = v4;
      _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I Dumping logs failed: %s", buf, 0xCu);
      if (v12 < 0)
        operator delete(__p);
    }
  }
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  v5 = (std::__shared_weak_count *)v2[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

void sub_24B8F0DC8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  xpc_object_t *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  xpc_release(*v3);
  v2[4] = 0;
  v5 = (std::__shared_weak_count *)v2[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v2);
  v8 = (std::__shared_weak_count *)v1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24B8F0E60(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_22checkFSSyncStatus_syncENS_5blockIU13block_pointerFvbbEEEEUb5_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISB_NSG_14default_deleteISB_EEEEENUlPvE_8__invokeESL_(xpc_object_t **a1)
{
  xpc_object_t *v2;
  uint64_t v3;
  uint64_t v4;
  xpc_object_t value;
  xpc_object_t v6;
  void (**v7)(xpc_object_t, uint64_t, uint64_t);
  xpc_object_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  xpc_object_t object;

  v2 = *a1;
  if (*(_DWORD *)*a1)
  {
    v3 = 0;
    v4 = 1;
  }
  else
  {
    value = xpc_dictionary_get_value(v2[1], (const char *)*MEMORY[0x24BE05108]);
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    v3 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    v6 = xpc_dictionary_get_value(v2[1], (const char *)*MEMORY[0x24BE05110]);
    object = v6;
    if (v6)
      xpc_retain(v6);
    else
      object = xpc_null_create();
    v4 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  v7 = (void (**)(xpc_object_t, uint64_t, uint64_t))v2[2];
  if (v7)
  {
    v7[2](v7, v3, v4);
    v8 = v2[2];
    if (v8)
      _Block_release(v8);
  }
  xpc_release(v2[1]);
  operator delete(v2);
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(a1);
}

void sub_24B8F0FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  uint64_t v11;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  xpc_release(object);
  v13 = *(const void **)(v11 + 16);
  if (v13)
    _Block_release(v13);
  xpc_release(*(xpc_object_t *)(v11 + 8));
  operator delete((void *)v11);
  v14 = (std::__shared_weak_count *)v10[2];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setVoiceCall_sync(BOOL)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setVoiceCall_sync(BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  int v6;
  NSObject *v7;
  const char *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    v3 = *__p;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (__p[1])
      {
        v6 = *((unsigned __int8 *)__p + 24);
        *(_BYTE *)(v3 + 288) = v6;
        v7 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v8 = "YES";
          if (!v6)
            v8 = "NO";
          v12 = 136315138;
          v13 = v8;
          _os_log_impl(&dword_24B855000, v7, OS_LOG_TYPE_DEFAULT, "#I Voice Call: %s", (uint8_t *)&v12, 0xCu);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v11 = (std::__shared_weak_count *)__p[2];
    if (v11)
      std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(__p);
}

void dispatch::detail::group_notify<BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  void **v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *__pa;
  char v13;
  uint8_t buf[4];
  void **v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    v3 = *__p;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (__p[1])
      {
        *(_DWORD *)(v3 + 296) = *((_DWORD *)__p + 6);
        v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          abm::asString();
          v7 = v13 >= 0 ? &__pa : (void **)__pa;
          v8 = *((_DWORD *)__p + 6);
          *(_DWORD *)buf = 136315394;
          v15 = v7;
          v16 = 1024;
          v17 = v8;
          _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I RAT1: %s (%d)", buf, 0x12u);
          if (v13 < 0)
            operator delete(__pa);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v11 = (std::__shared_weak_count *)__p[2];
    if (v11)
      std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(__p);
}

void sub_24B8F12E4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
    v6 = (std::__shared_weak_count *)v1[2];
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v6 = (std::__shared_weak_count *)v1[2];
    if (!v6)
    {
LABEL_5:
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::__release_weak(v6);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  void **v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *__pa;
  char v13;
  uint8_t buf[4];
  void **v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    v3 = *__p;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (__p[1])
      {
        *(_DWORD *)(v3 + 344) = *((_DWORD *)__p + 6);
        v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          abm::asString();
          v7 = v13 >= 0 ? &__pa : (void **)__pa;
          v8 = *((_DWORD *)__p + 6);
          *(_DWORD *)buf = 136315394;
          v15 = v7;
          v16 = 1024;
          v17 = v8;
          _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, "#I RAT2: %s (%d)", buf, 0x12u);
          if (v13 < 0)
            operator delete(__pa);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v11 = (std::__shared_weak_count *)__p[2];
    if (v11)
      std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(__p);
}

void sub_24B8F14A0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
    v6 = (std::__shared_weak_count *)v1[2];
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v6 = (std::__shared_weak_count *)v1[2];
    if (!v6)
    {
LABEL_5:
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::__release_weak(v6);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setPLMN1_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN1_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _OWORD *v6;
  void **v7;
  char v8;
  __int128 v9;
  char *v10;
  size_t v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  int v16;
  _OWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (!v2)
    goto LABEL_23;
  v3 = *(_QWORD *)__p;
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    goto LABEL_23;
  v5 = v4;
  if (*((_QWORD *)__p + 1))
  {
    v6 = __p + 24;
    v7 = (void **)(v3 + 304);
    if ((char *)(v3 + 304) != __p + 24)
    {
      v8 = __p[47];
      if (*(char *)(v3 + 327) < 0)
      {
        if (v8 >= 0)
          v10 = __p + 24;
        else
          v10 = (char *)*((_QWORD *)__p + 3);
        if (v8 >= 0)
          v11 = __p[47];
        else
          v11 = *((_QWORD *)__p + 4);
        std::string::__assign_no_alias<false>(v7, v10, v11);
      }
      else if (__p[47] < 0)
      {
        std::string::__assign_no_alias<true>(v7, *((void **)__p + 3), *((_QWORD *)__p + 4));
      }
      else
      {
        v9 = *v6;
        *(_QWORD *)(v3 + 320) = *((_QWORD *)__p + 5);
        *(_OWORD *)v7 = v9;
      }
    }
    v12 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (__p[47] < 0)
        v6 = *(_OWORD **)v6;
      v16 = 136315138;
      v17 = v6;
      _os_log_impl(&dword_24B855000, v12, OS_LOG_TYPE_DEFAULT, "#I PLMN1: %s", (uint8_t *)&v16, 0xCu);
    }
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_23:
    if ((__p[47] & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (__p[47] < 0)
LABEL_24:
    operator delete(*((void **)__p + 3));
LABEL_25:
  v15 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  operator delete(__p);
}

void sub_24B8F168C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void **v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;

  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
      goto LABEL_5;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_5:
      v7 = *(std::__shared_weak_count **)(v1 + 16);
      if (!v7)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  operator delete(*v3);
  v7 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v7)
  {
LABEL_6:
    operator delete((void *)v1);
    _Unwind_Resume(a1);
  }
LABEL_9:
  std::__shared_weak_count::__release_weak(v7);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setPLMN2_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN2_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _OWORD *v6;
  void **v7;
  char v8;
  __int128 v9;
  char *v10;
  size_t v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  int v16;
  _OWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (!v2)
    goto LABEL_23;
  v3 = *(_QWORD *)__p;
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    goto LABEL_23;
  v5 = v4;
  if (*((_QWORD *)__p + 1))
  {
    v6 = __p + 24;
    v7 = (void **)(v3 + 352);
    if ((char *)(v3 + 352) != __p + 24)
    {
      v8 = __p[47];
      if (*(char *)(v3 + 375) < 0)
      {
        if (v8 >= 0)
          v10 = __p + 24;
        else
          v10 = (char *)*((_QWORD *)__p + 3);
        if (v8 >= 0)
          v11 = __p[47];
        else
          v11 = *((_QWORD *)__p + 4);
        std::string::__assign_no_alias<false>(v7, v10, v11);
      }
      else if (__p[47] < 0)
      {
        std::string::__assign_no_alias<true>(v7, *((void **)__p + 3), *((_QWORD *)__p + 4));
      }
      else
      {
        v9 = *v6;
        *(_QWORD *)(v3 + 368) = *((_QWORD *)__p + 5);
        *(_OWORD *)v7 = v9;
      }
    }
    v12 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (__p[47] < 0)
        v6 = *(_OWORD **)v6;
      v16 = 136315138;
      v17 = v6;
      _os_log_impl(&dword_24B855000, v12, OS_LOG_TYPE_DEFAULT, "#I PLMN2: %s", (uint8_t *)&v16, 0xCu);
    }
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_23:
    if ((__p[47] & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (__p[47] < 0)
LABEL_24:
    operator delete(*((void **)__p + 3));
LABEL_25:
  v15 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  operator delete(__p);
}

void sub_24B8F1890(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void **v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;

  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
      goto LABEL_5;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_5:
      v7 = *(std::__shared_weak_count **)(v1 + 16);
      if (!v7)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  operator delete(*v3);
  v7 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v7)
  {
LABEL_6:
    operator delete((void *)v1);
    _Unwind_Resume(a1);
  }
LABEL_9:
  std::__shared_weak_count::__release_weak(v7);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  _DWORD v12[2];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    v3 = *__p;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (__p[1])
      {
        v6 = __p[3];
        v7 = *((_DWORD *)__p + 8);
        *(_QWORD *)(v3 + 48 * v7 + 328) = v6;
        v8 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v12[0] = 67109376;
          v12[1] = v7 + 1;
          v13 = 2048;
          v14 = v6;
          _os_log_impl(&dword_24B855000, v8, OS_LOG_TYPE_DEFAULT, "#I CellId%d: %llu", (uint8_t *)v12, 0x12u);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v11 = (std::__shared_weak_count *)__p[2];
    if (v11)
      std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(__p);
}

void dispatch::detail::group_notify<BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  _DWORD v12[2];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    v3 = *__p;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (__p[1])
      {
        v6 = __p[3];
        v7 = *((_DWORD *)__p + 8);
        *(_QWORD *)(v3 + 48 * v7 + 336) = v6;
        v8 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v12[0] = 67109376;
          v12[1] = v7 + 1;
          v13 = 2048;
          v14 = v6;
          _os_log_impl(&dword_24B855000, v8, OS_LOG_TYPE_DEFAULT, "#I AreaCode%d: %llu", (uint8_t *)v12, 0x12u);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v11 = (std::__shared_weak_count *)__p[2];
    if (v11)
      std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(__p);
}

void dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::bbResetFlag(BOOL)::$_0>(BootModule::bbResetFlag(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::bbResetFlag(BOOL)::$_0,dispatch_queue_s *::default_delete<BootModule::bbResetFlag(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(NSObject ****a1)
{
  NSObject ***v2;
  NSObject **v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  __int16 v15;

  v2 = *a1;
  v3 = **a1;
  if (*((_BYTE *)*a1 + 8))
  {
    v4 = v3[52];
    if (v4)
    {
      dispatch_retain(v3[52]);
      dispatch_group_enter(v4);
    }
    v5 = v3[53];
    v3[53] = v4;
    if (v5)
    {
      dispatch_group_leave(v5);
      dispatch_release(v5);
    }
    v6 = v3[11];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 0;
      v7 = "#I The baseband reset was detected.";
      v8 = (uint8_t *)&v15;
LABEL_12:
      _os_log_impl(&dword_24B855000, v6, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
    }
  }
  else
  {
    v9 = v3[53];
    v3[53] = 0;
    if (v9)
    {
      dispatch_group_leave(v9);
      dispatch_release(v9);
    }
    v6 = v3[11];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 0;
      v7 = "#I The baseband reset-flag is reset.";
      v8 = (uint8_t *)&v14;
      goto LABEL_12;
    }
  }
  v10 = v3[55];
  v3[55] = 0;
  if (v10)
  {
    dispatch_resume(v10);
    dispatch_release(v10);
  }
  operator delete(v2);
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

uint64_t __cxx_global_var_init_126_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_24B855000);
  }
  return result;
}

uint64_t __cxx_global_var_init_127_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_24B855000);
  }
  return result;
}

uint64_t __cxx_global_var_init_128_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_24B855000);
  }
  return result;
}

BOOL prop::get(char *a1, char *a2, uint64_t a3)
{
  const char *v6;
  NSObject *v7;
  char *v9;
  char *v10;
  int v11;
  const char *v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04EE8])
      && strcasecmp(a1, (const char *)*MEMORY[0x24BE058D8])
      && strcasecmp(a1, (const char *)*MEMORY[0x24BDFC778])
      && strcasecmp(a1, (const char *)*MEMORY[0x24BDFC770]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04EF0]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x24BE05920]) && strcasecmp(a1, (const char *)*MEMORY[0x24BE04F58]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04FE0]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04FE8]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04FA0]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04E38]))
                {
                  if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04F98]))
                  {
                    if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04EB0]))
                    {
                      v6 = a1;
                      if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04F00]))
                        goto LABEL_16;
                      return prop::tailspin::get(a2, a3);
                    }
                    return prop::profile::get(a2, a3);
                  }
                  return prop::systemlogs::get(a2, a3);
                }
                return prop::logfilter::get(a2, a3);
              }
              return prop::ttr::get(a2, a3);
            }
            return prop::compression::get(a2, a3);
          }
          return prop::bbipc::get(a2, a3);
        }
        return prop::ipc::get(a2, a3);
      }
      return prop::coredump::get(a2, a3);
    }
    return prop::bbtrace::get(a2, a3);
  }
  v6 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE04EE8])
    || !strcasecmp(v6, (const char *)*MEMORY[0x24BE058D8])
    || !strcasecmp(v6, (const char *)*MEMORY[0x24BDFC778])
    || !strcasecmp(v6, (const char *)*MEMORY[0x24BDFC770]))
  {
    return prop::bbtrace::get(a2, a3);
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04EF0]))
    return prop::coredump::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE05920]) || !strcasecmp(v6, (const char *)*MEMORY[0x24BE04F58]))
    return prop::ipc::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04FE0]))
    return prop::bbipc::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04FE8]))
    return prop::compression::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04FA0]))
    return prop::ttr::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04E38]))
    return prop::logfilter::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04F98]))
    return prop::systemlogs::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04EB0]))
    return prop::profile::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04F00]))
    return prop::tailspin::get(a2, a3);
LABEL_16:
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04EF8]))
    return prop::tracesettings::get(a2, a3);
  v7 = GetOsLogContext()[1];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0)
      v9 = a1;
    else
      v9 = *(char **)a1;
    if (a2[23] >= 0)
      v10 = a2;
    else
      v10 = *(char **)a2;
    v11 = 136315650;
    v12 = "prop";
    v13 = 2080;
    v14 = v9;
    v15 = 2080;
    v16 = v10;
    _os_log_error_impl(&dword_24B855000, v7, OS_LOG_TYPE_ERROR, "%s: get: Invalid domain; domain='%s' key='%s'",
      (uint8_t *)&v11,
      0x20u);
  }
  return 0;
}

BOOL prop::bbtrace::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x24BE058D8];
  v5 = strlen((const char *)*MEMORY[0x24BE058D8]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_24B8F246C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::coredump::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x24BE04EF0];
  v5 = strlen((const char *)*MEMORY[0x24BE04EF0]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_24B8F2570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::ipc::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x24BE05920];
  v5 = strlen((const char *)*MEMORY[0x24BE05920]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_24B8F2674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::bbipc::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x24BE04FE0];
  v5 = strlen((const char *)*MEMORY[0x24BE04FE0]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_24B8F2778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::compression::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x24BE04FE8];
  v5 = strlen((const char *)*MEMORY[0x24BE04FE8]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_24B8F287C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::ttr::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x24BE04FA0];
  v5 = strlen((const char *)*MEMORY[0x24BE04FA0]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_24B8F2980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::logfilter::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x24BE04E38];
  v5 = strlen((const char *)*MEMORY[0x24BE04E38]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_24B8F2A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::systemlogs::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x24BE04F98];
  v5 = strlen((const char *)*MEMORY[0x24BE04F98]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_24B8F2B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::profile::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x24BE04EB0];
  v5 = strlen((const char *)*MEMORY[0x24BE04EB0]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_24B8F2C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::tailspin::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x24BE04F00];
  v5 = strlen((const char *)*MEMORY[0x24BE04F00]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_24B8F2D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::tracesettings::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x24BE04EF8];
  v5 = strlen((const char *)*MEMORY[0x24BE04EF8]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_24B8F2E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t prop::set(char *a1, char *a2, char *a3)
{
  const char *v6;
  NSObject *v7;
  char *v9;
  char *v10;
  char *v11;
  int v12;
  const char *v13;
  __int16 v14;
  char *v15;
  __int16 v16;
  char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04EE8])
      && strcasecmp(a1, (const char *)*MEMORY[0x24BE058D8])
      && strcasecmp(a1, (const char *)*MEMORY[0x24BDFC778])
      && strcasecmp(a1, (const char *)*MEMORY[0x24BDFC770]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04EF0]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x24BE05920]) && strcasecmp(a1, (const char *)*MEMORY[0x24BE04F58]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04FE0]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04FE8]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04FA0]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04E38]))
                {
                  if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04F98]))
                  {
                    if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04EB0]))
                    {
                      v6 = a1;
                      if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04F00]))
                        goto LABEL_16;
                      return prop::tailspin::set((uint64_t)a2, a3);
                    }
                    return prop::profile::set(a2, a3);
                  }
                  return prop::systemlogs::set(a2, a3);
                }
                return prop::logfilter::set(a2, a3);
              }
              return prop::ttr::set(a2, a3);
            }
            return prop::compression::set(a2, a3);
          }
          return prop::bbipc::set(a2, a3);
        }
        return prop::ipc::set(a2, a3);
      }
      return prop::coredump::set((uint64_t)a2, a3);
    }
    return prop::bbtrace::set(a2, a3);
  }
  v6 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE04EE8])
    || !strcasecmp(v6, (const char *)*MEMORY[0x24BE058D8])
    || !strcasecmp(v6, (const char *)*MEMORY[0x24BDFC778])
    || !strcasecmp(v6, (const char *)*MEMORY[0x24BDFC770]))
  {
    return prop::bbtrace::set(a2, a3);
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04EF0]))
    return prop::coredump::set((uint64_t)a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE05920]) || !strcasecmp(v6, (const char *)*MEMORY[0x24BE04F58]))
    return prop::ipc::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04FE0]))
    return prop::bbipc::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04FE8]))
    return prop::compression::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04FA0]))
    return prop::ttr::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04E38]))
    return prop::logfilter::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04F98]))
    return prop::systemlogs::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04EB0]))
    return prop::profile::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04F00]))
    return prop::tailspin::set((uint64_t)a2, a3);
LABEL_16:
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04EF8]))
    return prop::tracesettings::set(a2, (uint64_t)a3);
  v7 = GetOsLogContext()[1];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0)
      v9 = a1;
    else
      v9 = *(char **)a1;
    if (a2[23] >= 0)
      v10 = a2;
    else
      v10 = *(char **)a2;
    if (a3[23] >= 0)
      v11 = a3;
    else
      v11 = *(char **)a3;
    v12 = 136315906;
    v13 = "prop";
    v14 = 2080;
    v15 = v9;
    v16 = 2080;
    v17 = v10;
    v18 = 2080;
    v19 = v11;
    _os_log_error_impl(&dword_24B855000, v7, OS_LOG_TYPE_ERROR, "%s: set: Invalid domain; domain='%s' key='%s' value='%s'",
      (uint8_t *)&v12,
      0x2Au);
  }
  return 0;
}

uint64_t prop::bbtrace::set(char *a1, const char *a2)
{
  const char *v2;
  int v4;
  char *v5;
  const char *v6;
  capabilities::radio *v7;
  const char *v8;
  const char *v9;
  capabilities::radio *v10;
  capabilities::trace *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const void *v15;
  size_t v16;
  size_t v17;
  _BYTE *v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  capabilities::radio *v23;
  int v24;
  capabilities::radio *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  size_t v30;
  size_t v31;
  _BYTE *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  size_t v40;
  size_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  const char *v47;
  capabilities::radio *v48;
  const char *v49;
  capabilities::radio *v50;
  const char *v51;
  capabilities::radio *v52;
  const char *v53;
  capabilities::radio *v54;
  const char *v55;
  capabilities::radio *v56;
  const char *v57;
  capabilities::radio *v58;
  const char *v59;
  NSObject *v60;
  uint64_t v61;
  char *v62;
  std::string *v63;
  const char *v64;
  NSObject *v65;
  uint32_t v66;
  capabilities::radio *v67;
  unsigned int v68;
  capabilities::abs *v69;
  capabilities::radio *shouldUseMinBasebandTransportIOReadSize;
  unsigned int v71;
  capabilities::abs *v72;
  int v73;
  NSObject *v74;
  std::string __p;
  int __val;
  int data;
  std::string v79;
  _BYTE __dst[24];
  char *v81;
  __int16 v82;
  std::string *v83;
  uint64_t v84;

  v2 = a2;
  v84 = *MEMORY[0x24BDAC8D0];
  memset(&v79, 170, sizeof(v79));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(const char **)v2;
    if (strcmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v79 = *(std::string *)a2;
    if (strcmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::bbtrace::get(a1, (std::string::size_type *)&v79))
    goto LABEL_205;
LABEL_8:
  v4 = a1[23];
  if ((v4 & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04F88]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04FC8]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x24BE05130]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04E90]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x24BE05068]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x24BE05048]))
              {
                v5 = (char *)*MEMORY[0x24BE04F90];
                v6 = a1;
                if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04F90]))
                  goto LABEL_16;
                goto LABEL_31;
              }
LABEL_80:
              *(_DWORD *)__dst = -1431655766;
              if (!util::convert<int>(&v79, __dst, 0))
                goto LABEL_205;
              v36 = *(_DWORD *)__dst;
              std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x24BE058D8]);
              LODWORD(__p.__r_.__value_.__l.__data_) = v36;
              v14 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
LABEL_97:
              v12 = v14;
LABEL_98:
              if ((__dst[23] & 0x80000000) != 0)
                operator delete(*(void **)__dst);
              goto LABEL_206;
            }
LABEL_67:
            v29 = (const void *)*MEMORY[0x24BE058D8];
            v30 = strlen((const char *)*MEMORY[0x24BE058D8]);
            if (v30 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v31 = v30;
            if (v30 >= 0x17)
            {
              v37 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v30 | 7) != 0x17)
                v37 = v30 | 7;
              v38 = v37 + 1;
              v32 = operator new(v37 + 1);
              *(_QWORD *)&__dst[8] = v31;
              *(_QWORD *)&__dst[16] = v38 | 0x8000000000000000;
              *(_QWORD *)__dst = v32;
            }
            else
            {
              __dst[23] = v30;
              v32 = __dst;
              if (!v30)
                goto LABEL_86;
            }
            memmove(v32, v29, v31);
LABEL_86:
            v32[v31] = 0;
            v14 = prop::file::set<std::string>((const void **)__dst, (uint64_t)a1, (uint64_t)&v79);
            goto LABEL_97;
          }
LABEL_57:
          LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
          v23 = (capabilities::radio *)util::convert<int>(&v79, &__p, 0);
          v24 = (int)v23;
          v25 = (capabilities::radio *)capabilities::radio::maverick(v23);
          if ((_DWORD)v25)
          {
            if (LODWORD(__p.__r_.__value_.__l.__data_) < 5)
              v26 = v24;
            else
              v26 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_205;
          }
          else
          {
            v33 = capabilities::radio::ice(v25);
            if ((v33 & v24) == 1)
            {
              v12 = 0;
              if (LODWORD(__p.__r_.__value_.__l.__data_) > 6 || ((1 << __p.__r_.__value_.__s.__data_[0]) & 0x45) == 0)
                goto LABEL_206;
            }
            else if ((v24 & ~v33) != 1)
            {
              goto LABEL_205;
            }
          }
          v39 = (const void *)*MEMORY[0x24BE058D8];
          v40 = strlen((const char *)*MEMORY[0x24BE058D8]);
          if (v40 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v41 = v40;
          if (v40 >= 0x17)
          {
            v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v40 | 7) != 0x17)
              v43 = v40 | 7;
            v44 = v43 + 1;
            v42 = operator new(v43 + 1);
            *(_QWORD *)&__dst[8] = v41;
            *(_QWORD *)&__dst[16] = v44 | 0x8000000000000000;
            *(_QWORD *)__dst = v42;
          }
          else
          {
            __dst[23] = v40;
            v42 = __dst;
            if (!v40)
              goto LABEL_96;
          }
          memmove(v42, v39, v41);
LABEL_96:
          v42[v41] = 0;
          v14 = prop::file::set<int>((const void **)__dst, (uint64_t)a1, (int *)&__p);
          goto LABEL_97;
        }
LABEL_48:
        __p.__r_.__value_.__s.__data_[0] = -86;
        if (!util::convert<BOOL>(&v79, (BOOL *)&__p, 0))
          goto LABEL_205;
        v15 = (const void *)*MEMORY[0x24BE058D8];
        v20 = strlen((const char *)*MEMORY[0x24BE058D8]);
        if (v20 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v17 = v20;
        if (v20 >= 0x17)
        {
          v34 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17)
            v34 = v20 | 7;
          v35 = v34 + 1;
          v18 = operator new(v34 + 1);
          *(_QWORD *)&__dst[8] = v17;
          *(_QWORD *)&__dst[16] = v35 | 0x8000000000000000;
          *(_QWORD *)__dst = v18;
        }
        else
        {
          __dst[23] = v20;
          v18 = __dst;
          if (!v20)
            goto LABEL_79;
        }
        goto LABEL_78;
      }
LABEL_43:
      __p.__r_.__value_.__s.__data_[0] = -86;
      if (!util::convert<BOOL>(&v79, (BOOL *)&__p, 0))
        goto LABEL_205;
      v15 = (const void *)*MEMORY[0x24BE058D8];
      v19 = strlen((const char *)*MEMORY[0x24BE058D8]);
      if (v19 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v17 = v19;
      if (v19 >= 0x17)
      {
        v27 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17)
          v27 = v19 | 7;
        v28 = v27 + 1;
        v18 = operator new(v27 + 1);
        *(_QWORD *)&__dst[8] = v17;
        *(_QWORD *)&__dst[16] = v28 | 0x8000000000000000;
        *(_QWORD *)__dst = v18;
      }
      else
      {
        __dst[23] = v19;
        v18 = __dst;
        if (!v19)
          goto LABEL_79;
      }
      goto LABEL_78;
    }
LABEL_38:
    __p.__r_.__value_.__s.__data_[0] = -86;
    if (!util::convert<BOOL>(&v79, (BOOL *)&__p, 0))
      goto LABEL_205;
    v15 = (const void *)*MEMORY[0x24BE058D8];
    v16 = strlen((const char *)*MEMORY[0x24BE058D8]);
    if (v16 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v17 = v16;
    if (v16 >= 0x17)
    {
      v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v21 = v16 | 7;
      v22 = v21 + 1;
      v18 = operator new(v21 + 1);
      *(_QWORD *)&__dst[8] = v17;
      *(_QWORD *)&__dst[16] = v22 | 0x8000000000000000;
      *(_QWORD *)__dst = v18;
    }
    else
    {
      __dst[23] = v16;
      v18 = __dst;
      if (!v16)
        goto LABEL_79;
    }
LABEL_78:
    memmove(v18, v15, v17);
LABEL_79:
    v18[v17] = 0;
    v14 = prop::file::set<BOOL>((const void **)__dst, (uint64_t)a1, (unsigned __int8 *)&__p);
    goto LABEL_97;
  }
  v6 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE04F88]))
    goto LABEL_38;
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04FC8]))
    goto LABEL_43;
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE05130]))
    goto LABEL_48;
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE04E90]))
    goto LABEL_57;
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE05068]))
    goto LABEL_67;
  if (!strcasecmp(v6, (const char *)*MEMORY[0x24BE05048]))
    goto LABEL_80;
  v5 = (char *)*MEMORY[0x24BE04F90];
  if (strcasecmp(v6, (const char *)*MEMORY[0x24BE04F90]))
  {
LABEL_16:
    v7 = (capabilities::radio *)strcasecmp(v6, (const char *)*MEMORY[0x24BDFC998]);
    if (!(_DWORD)v7)
    {
      v45 = capabilities::radio::maverick(v7);
      if ((v45 & 1) != 0 || (capabilities::radio::ice((capabilities::radio *)v45) & 1) != 0)
      {
        *(_DWORD *)__dst = -1431655766;
        if ((util::convert<int>(&v79, __dst, 0) & 1) == 0)
          goto LABEL_205;
        v46 = *(_DWORD *)__dst;
        if (*(_DWORD *)__dst > 2u)
          goto LABEL_205;
        std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x24BE058D8]);
        LODWORD(__p.__r_.__value_.__l.__data_) = v46;
        v14 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
        goto LABEL_97;
      }
      LOBYTE(v4) = a1[23];
    }
    v8 = *(const char **)a1;
    if ((v4 & 0x80u) == 0)
      v9 = a1;
    else
      v9 = *(const char **)a1;
    v10 = (capabilities::radio *)strcasecmp(v9, (const char *)*MEMORY[0x24BDFC988]);
    if (!(_DWORD)v10)
    {
      if ((capabilities::radio::maverick(v10) & 1) != 0)
      {
        __p.__r_.__value_.__s.__data_[0] = -86;
        if (util::convert<BOOL>(&v79, (BOOL *)&__p, 0))
          goto LABEL_203;
        goto LABEL_205;
      }
      LOBYTE(v4) = a1[23];
      v8 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0)
      v47 = a1;
    else
      v47 = v8;
    v48 = (capabilities::radio *)strcasecmp(v47, (const char *)*MEMORY[0x24BDFC980]);
    if (!(_DWORD)v48)
    {
      if ((capabilities::radio::maverick(v48) & 1) != 0)
      {
        __p.__r_.__value_.__s.__data_[0] = -86;
        if (util::convert<BOOL>(&v79, (BOOL *)&__p, 0))
          goto LABEL_203;
        goto LABEL_205;
      }
      LOBYTE(v4) = a1[23];
      v8 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0)
      v49 = a1;
    else
      v49 = v8;
    v50 = (capabilities::radio *)strcasecmp(v49, (const char *)*MEMORY[0x24BDFC9A0]);
    if (!(_DWORD)v50)
    {
      if ((capabilities::radio::maverick(v50) & 1) != 0)
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
        if (!util::convert<unsigned int>(&v79, &__p))
          goto LABEL_205;
        std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x24BE058D8]);
        v14 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
        goto LABEL_97;
      }
      LOBYTE(v4) = a1[23];
      v8 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0)
      v51 = a1;
    else
      v51 = v8;
    v52 = (capabilities::radio *)strcasecmp(v51, (const char *)*MEMORY[0x24BDFC9A8]);
    if (!(_DWORD)v52)
    {
      if ((capabilities::radio::maverick(v52) & 1) != 0)
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
        if (!diag::config::asEnum())
          goto LABEL_205;
        std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x24BE058D8]);
        data = (int)__p.__r_.__value_.__l.__data_;
        v14 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&data);
        goto LABEL_97;
      }
      LOBYTE(v4) = a1[23];
    }
    if ((v4 & 0x80) != 0)
    {
      v53 = *(const char **)a1;
      if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BDFC990]))
      {
LABEL_133:
        v54 = (capabilities::radio *)strcasecmp(v53, (const char *)*MEMORY[0x24BE05528]);
        if (!(_DWORD)v54)
        {
          if ((capabilities::radio::maverick(v54) & 1) != 0)
            goto LABEL_178;
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80) != 0)
        {
          v55 = *(const char **)a1;
          if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE05630]))
            goto LABEL_178;
        }
        else
        {
          v55 = a1;
          if (!strcasecmp(a1, (const char *)*MEMORY[0x24BE05630]))
            goto LABEL_178;
        }
        v56 = (capabilities::radio *)strcasecmp(v55, (const char *)*MEMORY[0x24BDFC978]);
        if (!(_DWORD)v56)
        {
          if ((capabilities::radio::maverick(v56) & 1) != 0)
            goto LABEL_178;
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80u) == 0)
          v57 = a1;
        else
          v57 = *(const char **)a1;
        v58 = (capabilities::radio *)strcasecmp(v57, (const char *)*MEMORY[0x24BE05400]);
        if (!(_DWORD)v58)
        {
          if ((capabilities::radio::maverick(v58) & 1) != 0)
          {
LABEL_178:
            std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x24BE058D8]);
            v14 = prop::file::set<std::string>((const void **)__dst, (uint64_t)a1, (uint64_t)&v79);
            goto LABEL_97;
          }
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80) != 0)
        {
          v59 = *(const char **)a1;
          if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE05570]))
            goto LABEL_178;
          if (strcasecmp(v59, (const char *)*MEMORY[0x24BE05820]))
          {
            if (!strcasecmp(v59, (const char *)*MEMORY[0x24BE057F0])
              || !strcasecmp(v59, (const char *)*MEMORY[0x24BE057F8]))
            {
              goto LABEL_178;
            }
            if (strcasecmp(v59, (const char *)*MEMORY[0x24BE04FC0]))
            {
              if (!strcasecmp(v59, (const char *)*MEMORY[0x24BE05328])
                || !strcasecmp(v59, (const char *)*MEMORY[0x24BE05410]))
              {
                goto LABEL_178;
              }
LABEL_162:
              if (!strcasecmp(v59, (const char *)*MEMORY[0x24BE05628]))
              {
                __p.__r_.__value_.__s.__data_[0] = -86;
                if (util::convert<BOOL>(&v79, (BOOL *)&__p, 0))
                {
LABEL_203:
                  std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x24BE058D8]);
                  v14 = prop::file::set<BOOL>((const void **)__dst, (uint64_t)a1, (unsigned __int8 *)&__p);
                  goto LABEL_97;
                }
LABEL_205:
                v12 = 0;
                goto LABEL_206;
              }
              v60 = GetOsLogContext()[1];
              if (!os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
                goto LABEL_205;
              v61 = *MEMORY[0x24BE058D8];
              if (a1[23] >= 0)
                v62 = a1;
              else
                v62 = *(char **)a1;
              v63 = &v79;
              if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v63 = (std::string *)v79.__r_.__value_.__r.__words[0];
              *(_DWORD *)__dst = 136315906;
              *(_QWORD *)&__dst[4] = "prop";
              *(_WORD *)&__dst[12] = 2080;
              *(_QWORD *)&__dst[14] = v61;
              *(_WORD *)&__dst[22] = 2080;
              v81 = v62;
              v82 = 2080;
              v83 = v63;
              v64 = "%s: [bbtrace] set: Invalid key; domain='%s' key='%s' value='%s'";
              v65 = v60;
              v66 = 42;
LABEL_170:
              _os_log_error_impl(&dword_24B855000, v65, OS_LOG_TYPE_ERROR, v64, __dst, v66);
              goto LABEL_205;
            }
LABEL_184:
            data = -1431655766;
            v67 = (capabilities::radio *)util::convert<unsigned int>(&v79, &data);
            if ((_DWORD)v67)
            {
              v68 = data;
              v69 = (capabilities::abs *)capabilities::radio::vendor(v67);
              shouldUseMinBasebandTransportIOReadSize = (capabilities::radio *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v69);
              if ((_DWORD)shouldUseMinBasebandTransportIOReadSize)
                v71 = 0x4000;
              else
                v71 = 0x8000;
              if (v68 >= v71)
              {
                if (!v68)
                {
                  v74 = GetOsLogContext()[1];
                  if (!os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
                    goto LABEL_205;
                  *(_WORD *)__dst = 0;
                  v64 = "file size cannot be 0";
                  v65 = v74;
                  v66 = 2;
                  goto LABEL_170;
                }
              }
              else
              {
                v72 = (capabilities::abs *)capabilities::radio::vendor(shouldUseMinBasebandTransportIOReadSize);
                if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v72))
                  v68 = 0x4000;
                else
                  v68 = 0x8000;
              }
              data = 1 << (__clz(v68) ^ 0x1F);
              std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x24BE058D8]);
              v67 = (capabilities::radio *)prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&data);
              v73 = (int)v67;
              if ((__dst[23] & 0x80000000) != 0)
                operator delete(*(void **)__dst);
            }
            else
            {
              v73 = 0;
            }
            __val = capabilities::trace::defaultHistorySizeMB(v67);
            std::string::basic_string[abi:ne180100]<0>(__dst, v5);
            prop::bbtrace::get<int>(__dst, &__val);
            if ((__dst[23] & 0x80000000) != 0)
              operator delete(*(void **)__dst);
            if (v73)
            {
              std::string::basic_string[abi:ne180100]<0>(__dst, v5);
              std::to_string(&__p, __val);
              v12 = prop::bbtrace::set(__dst, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              goto LABEL_98;
            }
            goto LABEL_205;
          }
        }
        else
        {
          if (!strcasecmp(a1, (const char *)*MEMORY[0x24BE05570]))
            goto LABEL_178;
          if (strcasecmp(a1, (const char *)*MEMORY[0x24BE05820]))
          {
            if (!strcasecmp(a1, (const char *)*MEMORY[0x24BE057F0])
              || !strcasecmp(a1, (const char *)*MEMORY[0x24BE057F8]))
            {
              goto LABEL_178;
            }
            if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04FC0]))
            {
              if (!strcasecmp(a1, (const char *)*MEMORY[0x24BE05328]))
                goto LABEL_178;
              v59 = a1;
              if (!strcasecmp(a1, (const char *)*MEMORY[0x24BE05410]))
                goto LABEL_178;
              goto LABEL_162;
            }
            goto LABEL_184;
          }
        }
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (util::convert<BOOL>(&v79, (BOOL *)&__p, 0))
          goto LABEL_203;
        goto LABEL_205;
      }
    }
    else
    {
      v53 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x24BDFC990]))
        goto LABEL_133;
    }
    __p.__r_.__value_.__s.__data_[0] = -86;
    if (util::convert<BOOL>(&v79, (BOOL *)&__p, 0))
      goto LABEL_203;
    goto LABEL_205;
  }
LABEL_31:
  LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
  v11 = (capabilities::trace *)util::convert<int>(&v79, &__p, 0);
  v12 = (uint64_t)v11;
  if (SLODWORD(__p.__r_.__value_.__l.__data_) < 0)
    v13 = (int)v11;
  else
    v13 = 0;
  if (v13 == 1)
    LODWORD(__p.__r_.__value_.__l.__data_) = capabilities::trace::defaultHistorySizeMB(v11);
  if ((_DWORD)v12)
  {
    std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x24BE058D8]);
    v14 = prop::file::set<int>((const void **)__dst, (uint64_t)a1, (int *)&__p);
    goto LABEL_97;
  }
LABEL_206:
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  return v12;
}

void sub_24B8F44CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::coredump::set(uint64_t a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  std::string *v9;
  const void *v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  std::string v19;
  _BYTE buf[24];
  const char *v21;
  __int16 v22;
  std::string *v23;
  uint64_t v24;

  v2 = a2;
  v24 = *MEMORY[0x24BDAC8D0];
  memset(&v19, 170, sizeof(v19));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v19 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::coredump::get((const char *)a1, (uint64_t)&v19))
    goto LABEL_36;
LABEL_8:
  if (*(char *)(a1 + 23) >= 0)
    v4 = (const char *)a1;
  else
    v4 = *(const char **)a1;
  if (strcasecmp(v4, (const char *)*MEMORY[0x24BE04F88]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_2579B8A80 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        goto LABEL_36;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v6 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        goto LABEL_36;
    }
    v7 = *MEMORY[0x24BE04EF0];
    if (*(char *)(a1 + 23) >= 0)
      v8 = (const char *)a1;
    else
      v8 = *(const char **)a1;
    v9 = &v19;
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v19.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v21 = v8;
    v22 = 2080;
    v23 = v9;
    _os_log_error_impl(&dword_24B855000, v6, OS_LOG_TYPE_ERROR, "%s: [coredump] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_36:
    v16 = 0;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_37;
    return v16;
  }
  v18 = -86;
  if (!util::convert<BOOL>(&v19, (BOOL *)&v18, 0))
    goto LABEL_36;
  v10 = (const void *)*MEMORY[0x24BE04EF0];
  v11 = strlen((const char *)*MEMORY[0x24BE04EF0]);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    *(_QWORD *)&buf[8] = v12;
    *(_QWORD *)&buf[16] = v15 | 0x8000000000000000;
    *(_QWORD *)buf = v13;
    goto LABEL_29;
  }
  buf[23] = v11;
  v13 = buf;
  if (v11)
LABEL_29:
    memmove(v13, v10, v12);
  v13[v12] = 0;
  v16 = prop::file::set<BOOL>((const void **)buf, a1, (unsigned __int8 *)&v18);
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_37;
  }
  else if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_37:
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_24B8F4988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::ipc::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  capabilities::ipc *v5;
  unsigned __int8 v6;
  NSObject *v7;
  uint64_t v8;
  char *v9;
  std::string *v10;
  int v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  _BYTE *v16;
  const void *v17;
  size_t v18;
  size_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  std::string v29;
  _BYTE buf[24];
  char *v31;
  __int16 v32;
  std::string *v33;
  uint64_t v34;

  v2 = a2;
  v34 = *MEMORY[0x24BDAC8D0];
  memset(&v29, 170, sizeof(v29));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v29 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::ipc::get(a1, (uint64_t)&v29))
    goto LABEL_53;
LABEL_8:
  if (a1[23] < 0)
  {
    v4 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE04F88]))
    {
      if (strcasecmp(v4, (const char *)*MEMORY[0x24BE04F90]))
        goto LABEL_11;
      goto LABEL_24;
    }
LABEL_32:
    LOBYTE(v28) = -86;
    if (!util::convert<BOOL>(&v29, (BOOL *)&v28, 0))
      goto LABEL_53;
    v17 = (const void *)*MEMORY[0x24BE05920];
    v18 = strlen((const char *)*MEMORY[0x24BE05920]);
    if (v18 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v19 = v18;
    if (v18 >= 0x17)
    {
      v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v21 = v18 | 7;
      v22 = v21 + 1;
      v20 = operator new(v21 + 1);
      *(_QWORD *)&buf[8] = v19;
      *(_QWORD *)&buf[16] = v22 | 0x8000000000000000;
      *(_QWORD *)buf = v20;
    }
    else
    {
      buf[23] = v18;
      v20 = buf;
      if (!v18)
        goto LABEL_41;
    }
    memmove(v20, v17, v19);
LABEL_41:
    v20[v19] = 0;
    v23 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v28);
    goto LABEL_47;
  }
  if (!strcasecmp(a1, (const char *)*MEMORY[0x24BE04F88]))
    goto LABEL_32;
  v4 = a1;
  if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04F90]))
  {
LABEL_11:
    v5 = (capabilities::ipc *)strcasecmp(v4, "BufferCount");
    if ((_DWORD)v5 || (capabilities::ipc::supportsPCI(v5) & 1) == 0)
    {
      {
        GetOsLogContext(void)::sOsLogContext = 0;
        qword_2579B8A80 = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
      }
      if (GetOsLogContext(void)::onceToken == -1)
      {
        v7 = qword_2579B8A80;
        if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
          goto LABEL_53;
      }
      else
      {
        dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
        v7 = qword_2579B8A80;
        if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
          goto LABEL_53;
      }
      v8 = *MEMORY[0x24BE05920];
      if (a1[23] >= 0)
        v9 = a1;
      else
        v9 = *(char **)a1;
      v10 = &v29;
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v10 = (std::string *)v29.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "prop";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v8;
      *(_WORD *)&buf[22] = 2080;
      v31 = v9;
      v32 = 2080;
      v33 = v10;
      _os_log_error_impl(&dword_24B855000, v7, OS_LOG_TYPE_ERROR, "%s: [ipc] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
LABEL_53:
    v26 = 0;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_54;
    return v26;
  }
LABEL_24:
  v28 = -1431655766;
  v11 = util::convert<int>(&v29, &v28, 0);
  if (v28 >= 0)
    v12 = v11;
  else
    v12 = 0;
  if (v12 != 1)
    goto LABEL_53;
  v13 = (const void *)*MEMORY[0x24BE05920];
  v14 = strlen((const char *)*MEMORY[0x24BE05920]);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v24 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v24 = v14 | 7;
    v25 = v24 + 1;
    v16 = operator new(v24 + 1);
    *(_QWORD *)&buf[8] = v15;
    *(_QWORD *)&buf[16] = v25 | 0x8000000000000000;
    *(_QWORD *)buf = v16;
  }
  else
  {
    buf[23] = v14;
    v16 = buf;
    if (!v14)
      goto LABEL_46;
  }
  memmove(v16, v13, v15);
LABEL_46:
  v16[v15] = 0;
  v23 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v28);
LABEL_47:
  v26 = v23;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_54;
  }
  else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_54:
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  return v26;
}

void sub_24B8F4E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::bbipc::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  std::string *v9;
  const void *v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  const void *v14;
  size_t v15;
  size_t v16;
  _BYTE *v17;
  const void *v18;
  size_t v19;
  size_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  std::string v32;
  _BYTE buf[24];
  char *v34;
  __int16 v35;
  std::string *v36;
  uint64_t v37;

  v2 = a2;
  v37 = *MEMORY[0x24BDAC8D0];
  memset(&v32, 170, sizeof(v32));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v32 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::bbipc::get(a1, (uint64_t)&v32))
    goto LABEL_59;
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04F88]))
    {
      v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04FD0]))
        goto LABEL_11;
LABEL_23:
      v31 = -1431655766;
      if (!util::convert<int>(&v32, &v31, 0))
        goto LABEL_59;
      v10 = (const void *)*MEMORY[0x24BE04FE0];
      v11 = strlen((const char *)*MEMORY[0x24BE04FE0]);
      if (v11 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v12 = v11;
      if (v11 >= 0x17)
      {
        v25 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v25 = v11 | 7;
        v26 = v25 + 1;
        v13 = operator new(v25 + 1);
        *(_QWORD *)&buf[8] = v12;
        *(_QWORD *)&buf[16] = v26 | 0x8000000000000000;
        *(_QWORD *)buf = v13;
      }
      else
      {
        buf[23] = v11;
        v13 = buf;
        if (!v11)
          goto LABEL_47;
      }
      memmove(v13, v10, v12);
LABEL_47:
      v13[v12] = 0;
      v24 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v31);
      goto LABEL_53;
    }
LABEL_28:
    LOBYTE(v31) = -86;
    if (!util::convert<BOOL>(&v32, (BOOL *)&v31, 0))
      goto LABEL_59;
    v14 = (const void *)*MEMORY[0x24BE04FE0];
    v15 = strlen((const char *)*MEMORY[0x24BE04FE0]);
    if (v15 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v16 = v15;
    if (v15 >= 0x17)
    {
      v22 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v22 = v15 | 7;
      v23 = v22 + 1;
      v17 = operator new(v22 + 1);
      *(_QWORD *)&buf[8] = v16;
      *(_QWORD *)&buf[16] = v23 | 0x8000000000000000;
      *(_QWORD *)buf = v17;
    }
    else
    {
      buf[23] = v15;
      v17 = buf;
      if (!v15)
        goto LABEL_42;
    }
    memmove(v17, v14, v16);
LABEL_42:
    v17[v16] = 0;
    v24 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v31);
    goto LABEL_53;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE04F88]))
    goto LABEL_28;
  if (!strcasecmp(v4, (const char *)*MEMORY[0x24BE04FD0]))
    goto LABEL_23;
LABEL_11:
  if (strcasecmp(v4, (const char *)*MEMORY[0x24BE05138]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_2579B8A80 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        goto LABEL_59;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v6 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        goto LABEL_59;
    }
    v7 = *MEMORY[0x24BE04FE0];
    if (a1[23] >= 0)
      v8 = a1;
    else
      v8 = *(char **)a1;
    v9 = &v32;
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v32.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v34 = v8;
    v35 = 2080;
    v36 = v9;
    _os_log_error_impl(&dword_24B855000, v6, OS_LOG_TYPE_ERROR, "%s: [bbipc] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_59:
    v29 = 0;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_60;
    return v29;
  }
  v31 = -1431655766;
  if (!util::convert<unsigned int>(&v32, &v31))
    goto LABEL_59;
  v18 = (const void *)*MEMORY[0x24BE04FE0];
  v19 = strlen((const char *)*MEMORY[0x24BE04FE0]);
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v20 = v19;
  if (v19 >= 0x17)
  {
    v27 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v27 = v19 | 7;
    v28 = v27 + 1;
    v21 = operator new(v27 + 1);
    *(_QWORD *)&buf[8] = v20;
    *(_QWORD *)&buf[16] = v28 | 0x8000000000000000;
    *(_QWORD *)buf = v21;
  }
  else
  {
    buf[23] = v19;
    v21 = buf;
    if (!v19)
      goto LABEL_52;
  }
  memmove(v21, v18, v20);
LABEL_52:
  v21[v20] = 0;
  v24 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, (unsigned int *)&v31);
LABEL_53:
  v29 = v24;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_60;
  }
  else if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_60:
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  return v29;
}

void sub_24B8F53C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::compression::set(char *a1, char *a2)
{
  char *v2;
  int v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  size_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unsigned __int8 v15;
  NSObject *v16;
  uint64_t v17;
  char *v18;
  std::string *v19;
  const void *v20;
  size_t v21;
  size_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  std::string v28;
  _BYTE __dst[24];
  char *v30;
  __int16 v31;
  std::string *v32;
  uint64_t v33;

  v2 = a2;
  v33 = *MEMORY[0x24BDAC8D0];
  memset(&v28, 170, sizeof(v28));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v28 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::compression::get(a1, (uint64_t)&v28))
    goto LABEL_44;
LABEL_8:
  v4 = a1[23];
  v5 = *(const char **)a1;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *(const char **)a1;
  if (strcasecmp(v6, (const char *)*MEMORY[0x24BDFC970]))
  {
    v7 = 0;
    goto LABEL_26;
  }
  v27 = 0;
  if (util::convert<int>(&v28, &v27, 0))
  {
    v8 = (const void *)*MEMORY[0x24BE04FE8];
    v9 = strlen((const char *)*MEMORY[0x24BE04FE8]);
    if (v9 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v10 = v9;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      v11 = operator new(v12 + 1);
      *(_QWORD *)&__dst[8] = v10;
      *(_QWORD *)&__dst[16] = v13 | 0x8000000000000000;
      *(_QWORD *)__dst = v11;
    }
    else
    {
      __dst[23] = v9;
      v11 = __dst;
      if (!v9)
      {
LABEL_23:
        v11[v10] = 0;
        v7 = prop::file::set<int>((const void **)__dst, (uint64_t)a1, &v27);
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        goto LABEL_25;
      }
    }
    memmove(v11, v8, v10);
    goto LABEL_23;
  }
  v7 = 0;
LABEL_25:
  LOBYTE(v4) = a1[23];
  v5 = *(const char **)a1;
LABEL_26:
  if ((v4 & 0x80u) == 0)
    v14 = a1;
  else
    v14 = v5;
  if (!strcasecmp(v14, (const char *)*MEMORY[0x24BDFC7F8]))
  {
    LOBYTE(v27) = 1;
    if (util::convert<BOOL>(&v28, (BOOL *)&v27, 0))
    {
      v20 = (const void *)*MEMORY[0x24BE04FE8];
      v21 = strlen((const char *)*MEMORY[0x24BE04FE8]);
      if (v21 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v22 = v21;
      if (v21 >= 0x17)
      {
        v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17)
          v24 = v21 | 7;
        v25 = v24 + 1;
        v23 = operator new(v24 + 1);
        *(_QWORD *)&__dst[8] = v22;
        *(_QWORD *)&__dst[16] = v25 | 0x8000000000000000;
        *(_QWORD *)__dst = v23;
      }
      else
      {
        __dst[23] = v21;
        v23 = __dst;
        if (!v21)
        {
LABEL_49:
          v23[v22] = 0;
          v7 = prop::file::set<BOOL>((const void **)__dst, (uint64_t)a1, (unsigned __int8 *)&v27);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          goto LABEL_51;
        }
      }
      memmove(v23, v20, v22);
      goto LABEL_49;
    }
LABEL_44:
    v7 = 0;
    goto LABEL_51;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v16 = qword_2579B8A80;
    if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
      goto LABEL_51;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v16 = qword_2579B8A80;
    if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
      goto LABEL_51;
  }
  v17 = *MEMORY[0x24BE04FE8];
  if (a1[23] >= 0)
    v18 = a1;
  else
    v18 = *(char **)a1;
  v19 = &v28;
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v19 = (std::string *)v28.__r_.__value_.__r.__words[0];
  *(_DWORD *)__dst = 136315906;
  *(_QWORD *)&__dst[4] = "prop";
  *(_WORD *)&__dst[12] = 2080;
  *(_QWORD *)&__dst[14] = v17;
  *(_WORD *)&__dst[22] = 2080;
  v30 = v18;
  v31 = 2080;
  v32 = v19;
  _os_log_error_impl(&dword_24B855000, v16, OS_LOG_TYPE_ERROR, "%s: [compression] set: Invalid key; domain='%s' key='%s' value='%s'",
    __dst,
    0x2Au);
LABEL_51:
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  return v7;
}

void sub_24B8F5848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::ttr::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  std::string *v9;
  int v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  _BYTE *v15;
  int v16;
  int v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;
  std::string v26;
  _BYTE buf[24];
  char *v28;
  __int16 v29;
  std::string *v30;
  uint64_t v31;

  v2 = a2;
  v31 = *MEMORY[0x24BDAC8D0];
  memset(&v26, 170, sizeof(v26));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v26 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::ttr::get(a1, (uint64_t)&v26))
    goto LABEL_51;
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    v4 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04E90]))
      goto LABEL_10;
LABEL_21:
    v25 = -1431655766;
    v10 = util::convert<unsigned int>(&v26, &v25);
    if (v25 < 4)
      v11 = v10;
    else
      v11 = 0;
    if (v11 != 1)
      goto LABEL_51;
    v12 = (const void *)*MEMORY[0x24BE04FA0];
    v13 = strlen((const char *)*MEMORY[0x24BE04FA0]);
    if (v13 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v19 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v19 = v13 | 7;
      v20 = v19 + 1;
      v15 = operator new(v19 + 1);
      *(_QWORD *)&buf[8] = v14;
      *(_QWORD *)&buf[16] = v20 | 0x8000000000000000;
      *(_QWORD *)buf = v15;
    }
    else
    {
      buf[23] = v13;
      v15 = buf;
      if (!v13)
        goto LABEL_45;
    }
    goto LABEL_44;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE04E90]))
    goto LABEL_21;
LABEL_10:
  if (strcasecmp(v4, (const char *)*MEMORY[0x24BE05568]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_2579B8A80 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        goto LABEL_51;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v6 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        goto LABEL_51;
    }
    v7 = *MEMORY[0x24BE04FA0];
    if (a1[23] >= 0)
      v8 = a1;
    else
      v8 = *(char **)a1;
    v9 = &v26;
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v26.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v28 = v8;
    v29 = 2080;
    v30 = v9;
    _os_log_error_impl(&dword_24B855000, v6, OS_LOG_TYPE_ERROR, "%s: [ttr] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_51:
    v23 = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_52;
    return v23;
  }
  v25 = -1431655766;
  v16 = util::convert<unsigned int>(&v26, &v25);
  if (v25)
    v17 = v16;
  else
    v17 = 0;
  if (v17 != 1)
    goto LABEL_51;
  v12 = (const void *)*MEMORY[0x24BE04FA0];
  v18 = strlen((const char *)*MEMORY[0x24BE04FA0]);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v14 = v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v15 = operator new(v21 + 1);
    *(_QWORD *)&buf[8] = v14;
    *(_QWORD *)&buf[16] = v22 | 0x8000000000000000;
    *(_QWORD *)buf = v15;
    goto LABEL_44;
  }
  buf[23] = v18;
  v15 = buf;
  if (v18)
LABEL_44:
    memmove(v15, v12, v14);
LABEL_45:
  v15[v14] = 0;
  v23 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, &v25);
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_52;
  }
  else if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_52:
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  return v23;
}

void sub_24B8F5CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::logfilter::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  std::string *v9;
  int v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  _BYTE *v15;
  int v16;
  int v17;
  size_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  std::string v33;
  _BYTE buf[24];
  char *v35;
  __int16 v36;
  std::string *v37;
  uint64_t v38;

  v2 = a2;
  v38 = *MEMORY[0x24BDAC8D0];
  memset(&v33, 170, sizeof(v33));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v33 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::logfilter::get(a1, (uint64_t)&v33))
    goto LABEL_64;
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x24BE051C0]))
    {
      v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x24BE05338]))
        goto LABEL_11;
LABEL_23:
      v32 = -1431655766;
      v10 = util::convert<int>(&v33, &v32, 0);
      if (v32 > -2)
        v11 = v10;
      else
        v11 = 0;
      if (v11 != 1)
        goto LABEL_64;
      v12 = (const void *)*MEMORY[0x24BE04E38];
      v13 = strlen((const char *)*MEMORY[0x24BE04E38]);
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v14 = v13;
      if (v13 >= 0x17)
      {
        v26 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v26 = v13 | 7;
        v27 = v26 + 1;
        v15 = operator new(v26 + 1);
        *(_QWORD *)&buf[8] = v14;
        *(_QWORD *)&buf[16] = v27 | 0x8000000000000000;
        *(_QWORD *)buf = v15;
      }
      else
      {
        buf[23] = v13;
        v15 = buf;
        if (!v13)
          goto LABEL_48;
      }
LABEL_47:
      memmove(v15, v12, v14);
LABEL_48:
      v15[v14] = 0;
      v25 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v32);
      goto LABEL_58;
    }
LABEL_31:
    v32 = -1431655766;
    v16 = util::convert<int>(&v33, &v32, 0);
    if (v32 > -2)
      v17 = v16;
    else
      v17 = 0;
    if (v17 != 1)
      goto LABEL_64;
    v12 = (const void *)*MEMORY[0x24BE04E38];
    v18 = strlen((const char *)*MEMORY[0x24BE04E38]);
    if (v18 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v14 = v18;
    if (v18 >= 0x17)
    {
      v23 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v23 = v18 | 7;
      v24 = v23 + 1;
      v15 = operator new(v23 + 1);
      *(_QWORD *)&buf[8] = v14;
      *(_QWORD *)&buf[16] = v24 | 0x8000000000000000;
      *(_QWORD *)buf = v15;
    }
    else
    {
      buf[23] = v18;
      v15 = buf;
      if (!v18)
        goto LABEL_48;
    }
    goto LABEL_47;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE051C0]))
    goto LABEL_31;
  if (!strcasecmp(v4, (const char *)*MEMORY[0x24BE05338]))
    goto LABEL_23;
LABEL_11:
  if (strcasecmp(v4, (const char *)*MEMORY[0x24BE05838]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_2579B8A80 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        goto LABEL_64;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v6 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        goto LABEL_64;
    }
    v7 = *MEMORY[0x24BE04E38];
    if (a1[23] >= 0)
      v8 = a1;
    else
      v8 = *(char **)a1;
    v9 = &v33;
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v33.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v35 = v8;
    v36 = 2080;
    v37 = v9;
    _os_log_error_impl(&dword_24B855000, v6, OS_LOG_TYPE_ERROR, "%s: [logfilter] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_64:
    v30 = 0;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_65;
    return v30;
  }
  LOBYTE(v32) = 1;
  if (!util::convert<BOOL>(&v33, (BOOL *)&v32, 0))
    goto LABEL_64;
  v19 = (const void *)*MEMORY[0x24BE04E38];
  v20 = strlen((const char *)*MEMORY[0x24BE04E38]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v28 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v28 = v20 | 7;
    v29 = v28 + 1;
    v22 = operator new(v28 + 1);
    *(_QWORD *)&buf[8] = v21;
    *(_QWORD *)&buf[16] = v29 | 0x8000000000000000;
    *(_QWORD *)buf = v22;
  }
  else
  {
    buf[23] = v20;
    v22 = buf;
    if (!v20)
      goto LABEL_57;
  }
  memmove(v22, v19, v21);
LABEL_57:
  v22[v21] = 0;
  v25 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v32);
LABEL_58:
  v30 = v25;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_65;
  }
  else if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_65:
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  return v30;
}

void sub_24B8F6280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::systemlogs::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  std::string *v9;
  int v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  _BYTE *v15;
  int IsCarrierBuild;
  unsigned int v17;
  const void *v18;
  size_t v19;
  size_t v20;
  _BYTE *v21;
  const void *v22;
  size_t v23;
  size_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v35;
  std::string v36;
  _BYTE buf[24];
  char *v38;
  __int16 v39;
  std::string *v40;
  uint64_t v41;

  v2 = a2;
  v41 = *MEMORY[0x24BDAC8D0];
  memset(&v36, 170, sizeof(v36));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v36 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::systemlogs::get(a1, (uint64_t)&v36))
    goto LABEL_69;
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04E90]))
    {
      v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04F90]))
        goto LABEL_11;
LABEL_23:
      v35 = -1431655766;
      v10 = util::convert<int>(&v36, &v35, 0);
      if ((int)v35 > 0)
        v11 = v10;
      else
        v11 = 0;
      if (v11 != 1)
        goto LABEL_69;
      v12 = (const void *)*MEMORY[0x24BE04F98];
      v13 = strlen((const char *)*MEMORY[0x24BE04F98]);
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v14 = v13;
      if (v13 >= 0x17)
      {
        v26 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v26 = v13 | 7;
        v27 = v26 + 1;
        v15 = operator new(v26 + 1);
        *(_QWORD *)&buf[8] = v14;
        *(_QWORD *)&buf[16] = v27 | 0x8000000000000000;
        *(_QWORD *)buf = v15;
      }
      else
      {
        buf[23] = v13;
        v15 = buf;
        if (!v13)
          goto LABEL_52;
      }
      memmove(v15, v12, v14);
LABEL_52:
      v15[v14] = 0;
      v28 = prop::file::set<int>((const void **)buf, (uint64_t)a1, (int *)&v35);
      goto LABEL_63;
    }
LABEL_31:
    v35 = -1431655766;
    if ((TelephonyUtilIsInternalBuild() & 1) != 0)
      IsCarrierBuild = 1;
    else
      IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    if (!util::convert<unsigned int>(&v36, &v35))
      goto LABEL_69;
    v17 = IsCarrierBuild ? 3 : 2;
    if (v35 >= v17)
      goto LABEL_69;
    v18 = (const void *)*MEMORY[0x24BE04F98];
    v19 = strlen((const char *)*MEMORY[0x24BE04F98]);
    if (v19 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v20 = v19;
    if (v19 >= 0x17)
    {
      v29 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17)
        v29 = v19 | 7;
      v30 = v29 + 1;
      v21 = operator new(v29 + 1);
      *(_QWORD *)&buf[8] = v20;
      *(_QWORD *)&buf[16] = v30 | 0x8000000000000000;
      *(_QWORD *)buf = v21;
    }
    else
    {
      buf[23] = v19;
      v21 = buf;
      if (!v19)
        goto LABEL_57;
    }
    memmove(v21, v18, v20);
LABEL_57:
    v21[v20] = 0;
    v28 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, &v35);
    goto LABEL_63;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE04E90]))
    goto LABEL_31;
  if (!strcasecmp(v4, (const char *)*MEMORY[0x24BE04F90]))
    goto LABEL_23;
LABEL_11:
  if (strcasecmp(v4, (const char *)*MEMORY[0x24BE05498]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_2579B8A80 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        goto LABEL_69;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v6 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        goto LABEL_69;
    }
    v7 = *MEMORY[0x24BE04F98];
    if (a1[23] >= 0)
      v8 = a1;
    else
      v8 = *(char **)a1;
    v9 = &v36;
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v36.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v38 = v8;
    v39 = 2080;
    v40 = v9;
    _os_log_error_impl(&dword_24B855000, v6, OS_LOG_TYPE_ERROR, "%s: [systemlogs] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_69:
    v33 = 0;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_70;
    return v33;
  }
  LOBYTE(v35) = -86;
  if (!util::convert<BOOL>(&v36, (BOOL *)&v35, 0))
    goto LABEL_69;
  v22 = (const void *)*MEMORY[0x24BE04F98];
  v23 = strlen((const char *)*MEMORY[0x24BE04F98]);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v24 = v23;
  if (v23 >= 0x17)
  {
    v31 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v31 = v23 | 7;
    v32 = v31 + 1;
    v25 = operator new(v31 + 1);
    *(_QWORD *)&buf[8] = v24;
    *(_QWORD *)&buf[16] = v32 | 0x8000000000000000;
    *(_QWORD *)buf = v25;
  }
  else
  {
    buf[23] = v23;
    v25 = buf;
    if (!v23)
      goto LABEL_62;
  }
  memmove(v25, v22, v24);
LABEL_62:
  v25[v24] = 0;
  v28 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v35);
LABEL_63:
  v33 = v28;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_70;
  }
  else if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_70:
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  return v33;
}

void sub_24B8F6840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

uint64_t prop::profile::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  std::string *v9;
  const void *v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  const void *v14;
  size_t v15;
  size_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  std::string v26;
  _BYTE buf[24];
  char *v28;
  __int16 v29;
  std::string *v30;
  uint64_t v31;

  v2 = a2;
  v31 = *MEMORY[0x24BDAC8D0];
  memset(&v26, 170, sizeof(v26));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v26 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::profile::get(a1, (uint64_t)&v26))
    goto LABEL_47;
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    v4 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x24BE04E08]))
      goto LABEL_10;
LABEL_21:
    LOBYTE(v25) = -86;
    if (!util::convert<BOOL>(&v26, (BOOL *)&v25, 0))
      goto LABEL_47;
    v10 = (const void *)*MEMORY[0x24BE04EB0];
    v11 = strlen((const char *)*MEMORY[0x24BE04EB0]);
    if (v11 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v12 = v11;
    if (v11 >= 0x17)
    {
      v18 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v18 = v11 | 7;
      v19 = v18 + 1;
      v13 = operator new(v18 + 1);
      *(_QWORD *)&buf[8] = v12;
      *(_QWORD *)&buf[16] = v19 | 0x8000000000000000;
      *(_QWORD *)buf = v13;
    }
    else
    {
      buf[23] = v11;
      v13 = buf;
      if (!v11)
        goto LABEL_35;
    }
    memmove(v13, v10, v12);
LABEL_35:
    v13[v12] = 0;
    v20 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v25);
    goto LABEL_41;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE04E08]))
    goto LABEL_21;
LABEL_10:
  if (strcasecmp(v4, (const char *)*MEMORY[0x24BE05808]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_2579B8A80 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        goto LABEL_47;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v6 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        goto LABEL_47;
    }
    v7 = *MEMORY[0x24BE04EB0];
    if (a1[23] >= 0)
      v8 = a1;
    else
      v8 = *(char **)a1;
    v9 = &v26;
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v26.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v28 = v8;
    v29 = 2080;
    v30 = v9;
    _os_log_error_impl(&dword_24B855000, v6, OS_LOG_TYPE_ERROR, "%s: [profile] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_47:
    v23 = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_48;
    return v23;
  }
  v25 = -1431655766;
  if (!util::convert<int>(&v26, &v25, 0))
    goto LABEL_47;
  v14 = (const void *)*MEMORY[0x24BE04EB0];
  v15 = strlen((const char *)*MEMORY[0x24BE04EB0]);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v16 = v15;
  if (v15 >= 0x17)
  {
    v21 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v21 = v15 | 7;
    v22 = v21 + 1;
    v17 = operator new(v21 + 1);
    *(_QWORD *)&buf[8] = v16;
    *(_QWORD *)&buf[16] = v22 | 0x8000000000000000;
    *(_QWORD *)buf = v17;
  }
  else
  {
    buf[23] = v15;
    v17 = buf;
    if (!v15)
      goto LABEL_40;
  }
  memmove(v17, v14, v16);
LABEL_40:
  v17[v16] = 0;
  v20 = prop::file::set<std::string>((const void **)buf, (uint64_t)a1, (uint64_t)&v26);
LABEL_41:
  v23 = v20;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_48;
  }
  else if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_48:
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  return v23;
}

void sub_24B8F6CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::tailspin::set(uint64_t a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  std::string *v9;
  const void *v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  std::string v19;
  _BYTE buf[24];
  const char *v21;
  __int16 v22;
  std::string *v23;
  uint64_t v24;

  v2 = a2;
  v24 = *MEMORY[0x24BDAC8D0];
  memset(&v19, 170, sizeof(v19));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v19 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::tailspin::get((const char *)a1, (uint64_t)&v19))
    goto LABEL_36;
LABEL_8:
  if (*(char *)(a1 + 23) >= 0)
    v4 = (const char *)a1;
  else
    v4 = *(const char **)a1;
  if (strcasecmp(v4, (const char *)*MEMORY[0x24BE04E08]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_2579B8A80 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        goto LABEL_36;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v6 = qword_2579B8A80;
      if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
        goto LABEL_36;
    }
    v7 = *MEMORY[0x24BE04F00];
    if (*(char *)(a1 + 23) >= 0)
      v8 = (const char *)a1;
    else
      v8 = *(const char **)a1;
    v9 = &v19;
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v19.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v21 = v8;
    v22 = 2080;
    v23 = v9;
    _os_log_error_impl(&dword_24B855000, v6, OS_LOG_TYPE_ERROR, "%s: [tailspin] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_36:
    v16 = 0;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_37;
    return v16;
  }
  v18 = -86;
  if (!util::convert<BOOL>(&v19, (BOOL *)&v18, 0))
    goto LABEL_36;
  v10 = (const void *)*MEMORY[0x24BE04F00];
  v11 = strlen((const char *)*MEMORY[0x24BE04F00]);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    *(_QWORD *)&buf[8] = v12;
    *(_QWORD *)&buf[16] = v15 | 0x8000000000000000;
    *(_QWORD *)buf = v13;
    goto LABEL_29;
  }
  buf[23] = v11;
  v13 = buf;
  if (v11)
LABEL_29:
    memmove(v13, v10, v12);
  v13[v12] = 0;
  v16 = prop::file::set<BOOL>((const void **)buf, a1, (unsigned __int8 *)&v18);
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_37;
  }
  else if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_37:
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_24B8F7064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::tracesettings::set(char *a1, uint64_t a2)
{
  const char *v3;
  unsigned __int8 v4;
  NSObject *v5;
  uint64_t v6;
  char *v7;
  std::string *v8;
  const void *v9;
  size_t v10;
  size_t v11;
  _BYTE *v12;
  const void *v13;
  size_t v14;
  size_t v15;
  _BYTE *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  std::string v31;
  _BYTE buf[24];
  char *v33;
  __int16 v34;
  std::string *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  memset(&v31, 170, sizeof(v31));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v31 = *(std::string *)a2;
  if (a1[23] < 0)
  {
    v3 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x24BE053F8]))
    {
      if (strcasecmp(v3, (const char *)*MEMORY[0x24BE05488]))
      {
        if (strcasecmp(v3, (const char *)*MEMORY[0x24BE05140]))
        {
LABEL_8:
          if (strcasecmp(v3, (const char *)*MEMORY[0x24BE05320]))
          {
            {
              GetOsLogContext(void)::sOsLogContext = 0;
              qword_2579B8A80 = 0;
              __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
            }
            if (GetOsLogContext(void)::onceToken == -1)
            {
              v5 = qword_2579B8A80;
              if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
                goto LABEL_63;
            }
            else
            {
              dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
              v5 = qword_2579B8A80;
              if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_ERROR))
                goto LABEL_63;
            }
            v6 = *MEMORY[0x24BE04EF8];
            if (a1[23] >= 0)
              v7 = a1;
            else
              v7 = *(char **)a1;
            v8 = &v31;
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v8 = (std::string *)v31.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "prop";
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v6;
            *(_WORD *)&buf[22] = 2080;
            v33 = v7;
            v34 = 2080;
            v35 = v8;
            _os_log_error_impl(&dword_24B855000, v5, OS_LOG_TYPE_ERROR, "%s: [tracesettings] set: Invalid key; domain='%s' key='%s' value='%s'",
              buf,
              0x2Au);
LABEL_63:
            v28 = 0;
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_64;
            return v28;
          }
          v30 = -1431655766;
          if (!util::convert<int>(&v31, &v30, 0))
            goto LABEL_63;
          v13 = (const void *)*MEMORY[0x24BE04EF8];
          v23 = strlen((const char *)*MEMORY[0x24BE04EF8]);
          if (v23 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v15 = v23;
          if (v23 >= 0x17)
          {
            v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v23 | 7) != 0x17)
              v26 = v23 | 7;
            v27 = v26 + 1;
            v16 = operator new(v26 + 1);
            *(_QWORD *)&buf[8] = v15;
            *(_QWORD *)&buf[16] = v27 | 0x8000000000000000;
            *(_QWORD *)buf = v16;
          }
          else
          {
            buf[23] = v23;
            v16 = buf;
            if (!v23)
              goto LABEL_56;
          }
          goto LABEL_55;
        }
LABEL_21:
        v9 = (const void *)*MEMORY[0x24BE04EF8];
        v10 = strlen((const char *)*MEMORY[0x24BE04EF8]);
        if (v10 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v11 = v10;
        if (v10 >= 0x17)
        {
          v24 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v10 | 7) != 0x17)
            v24 = v10 | 7;
          v25 = v24 + 1;
          v12 = operator new(v24 + 1);
          *(_QWORD *)&buf[8] = v11;
          *(_QWORD *)&buf[16] = v25 | 0x8000000000000000;
          *(_QWORD *)buf = v12;
        }
        else
        {
          buf[23] = v10;
          v12 = buf;
          if (!v10)
            goto LABEL_38;
        }
LABEL_37:
        memmove(v12, v9, v11);
LABEL_38:
        v12[v11] = 0;
        v20 = prop::file::set<std::string>((const void **)buf, (uint64_t)a1, (uint64_t)&v31);
        goto LABEL_57;
      }
LABEL_30:
      v9 = (const void *)*MEMORY[0x24BE04EF8];
      v17 = strlen((const char *)*MEMORY[0x24BE04EF8]);
      if (v17 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v11 = v17;
      if (v17 >= 0x17)
      {
        v18 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17)
          v18 = v17 | 7;
        v19 = v18 + 1;
        v12 = operator new(v18 + 1);
        *(_QWORD *)&buf[8] = v11;
        *(_QWORD *)&buf[16] = v19 | 0x8000000000000000;
        *(_QWORD *)buf = v12;
      }
      else
      {
        buf[23] = v17;
        v12 = buf;
        if (!v17)
          goto LABEL_38;
      }
      goto LABEL_37;
    }
  }
  else if (strcasecmp(a1, (const char *)*MEMORY[0x24BE053F8]))
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x24BE05488]))
    {
      v3 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x24BE05140]))
        goto LABEL_8;
      goto LABEL_21;
    }
    goto LABEL_30;
  }
  v30 = -1431655766;
  if (!util::convert<int>(&v31, &v30, 0))
    goto LABEL_63;
  v13 = (const void *)*MEMORY[0x24BE04EF8];
  v14 = strlen((const char *)*MEMORY[0x24BE04EF8]);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v21 = v14 | 7;
    v22 = v21 + 1;
    v16 = operator new(v21 + 1);
    *(_QWORD *)&buf[8] = v15;
    *(_QWORD *)&buf[16] = v22 | 0x8000000000000000;
    *(_QWORD *)buf = v16;
  }
  else
  {
    buf[23] = v14;
    v16 = buf;
    if (!v14)
      goto LABEL_56;
  }
LABEL_55:
  memmove(v16, v13, v15);
LABEL_56:
  v16[v15] = 0;
  v20 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v30);
LABEL_57:
  v28 = v20;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_64;
  }
  else if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_64:
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  return v28;
}

void sub_24B8F7640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::get_from_file(char *a1, char *a2, uint64_t a3)
{
  _BOOL8 v6;
  std::string v8;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v6 = defaults::get(a1, a2, &__p);
  if (v6)
  {
    prop::file::get<std::string>((const void **)a1, (uint64_t)a2, (uint64_t)&__p, &v8);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(std::string *)a3 = v8;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_24B8F774C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t util::convert<BOOL>(const std::string *a1, BOOL *a2, int a3)
{
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  size_t __idx;

  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = (const char *)a1->__r_.__value_.__r.__words[0];
    if (strcasecmp(a1->__r_.__value_.__l.__data_, "false") && strcasecmp(v6, "off") && strcasecmp(v6, "no"))
    {
      if (!strcasecmp(v6, "true")
        || !strcasecmp(v6, "on")
        || !strcasecmp(v6, "yes")
        || !strcasecmp(v6, "full")
        || !strcasecmp(v6, "streaming")
        || !strcasecmp(v6, "lite"))
      {
        goto LABEL_28;
      }
      goto LABEL_21;
    }
LABEL_27:
    v7 = 0;
LABEL_29:
    *a2 = v7 != 0;
    return 1;
  }
  if (!strcasecmp((const char *)a1, "false")
    || !strcasecmp((const char *)a1, "off")
    || !strcasecmp((const char *)a1, "no"))
  {
    goto LABEL_27;
  }
  if (!strcasecmp((const char *)a1, "true"))
    goto LABEL_28;
  if (!strcasecmp((const char *)a1, "on"))
    goto LABEL_28;
  if (!strcasecmp((const char *)a1, "yes"))
    goto LABEL_28;
  if (!strcasecmp((const char *)a1, "full"))
    goto LABEL_28;
  if (!strcasecmp((const char *)a1, "streaming"))
    goto LABEL_28;
  v6 = (const char *)a1;
  if (!strcasecmp((const char *)a1, "lite"))
    goto LABEL_28;
LABEL_21:
  if (!strcasecmp(v6, "background"))
  {
LABEL_28:
    v7 = 1;
    goto LABEL_29;
  }
  __idx = 0xAAAAAAAAAAAAAAAALL;
  v7 = std::stol(a1, &__idx, a3);
  v8 = 0;
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (__idx == size && v7 < 2)
    goto LABEL_29;
  return v8;
}

uint64_t sub_24B8F7A48(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

uint64_t prop::file::set<BOOL>(const void **a1, uint64_t a2, unsigned __int8 *a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  void **v19;
  __int128 v20;
  std::string::size_type v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[4];
  std::string __dst;

  memset(__p, 170, 24);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (size_t)a1[1];
  v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *a1;
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&__dst, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[2]) >= 0)
    v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  else
    v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  if (SHIBYTE(__p[2]) >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  for (; v19 != v18; v19 = (void **)((char *)v19 + 1))
    *(_BYTE *)v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_2579B86F8)
  {
LABEL_32:
    LODWORD(v23) = qword_2579B86F8;
    v22 = off_2579B8700;
    v36 = qword_2579B86F8;
    v37 = (std::__shared_weak_count *)off_2579B8700;
    if (!off_2579B8700)
      goto LABEL_42;
    goto LABEL_40;
  }
  v23 = operator new(0x18uLL);
  MEMORY[0x24BD294B4](v23, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x24BDBD590]);
  v22 = operator new(0x20uLL);
  *v22 = &unk_251CBBBA8;
  v22[1] = 0;
  v22[2] = 0;
  v22[3] = v23;
  v24 = (std::__shared_weak_count *)off_2579B8700;
  qword_2579B86F8 = (uint64_t)v23;
  off_2579B8700 = v22;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_32;
  }
  v36 = (uint64_t)v23;
  v37 = (std::__shared_weak_count *)v22;
LABEL_40:
  v27 = v22 + 1;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_42:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v20;
    v35.__r_.__value_.__r.__words[2] = v21;
LABEL_45:
    __dst = v35;
    goto LABEL_46;
  }
  std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_45;
  std::string::__init_copy_ctor_external(&__dst, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
LABEL_46:
  if (SHIBYTE(__p[2]) >= 0)
    v29 = (char *)__p;
  else
    v29 = (char *)__p[0];
  v30 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v29);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_51;
LABEL_54:
    operator delete(v35.__r_.__value_.__l.__data_);
    v31 = v37;
    if (!v37)
      goto LABEL_58;
    goto LABEL_55;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_54;
LABEL_51:
  v31 = v37;
  if (!v37)
    goto LABEL_58;
LABEL_55:
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_58:
    if ((v21 & 0x8000000000000000) == 0)
      goto LABEL_59;
LABEL_62:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return v30;
LABEL_63:
    operator delete(__p[0]);
    return v30;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if ((v21 & 0x8000000000000000) != 0)
    goto LABEL_62;
LABEL_59:
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_63;
  return v30;
}

void sub_24B8F7DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  uint64_t v31;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0)
    operator delete(v30);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<int>(const void **a1, uint64_t a2, int *a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  void **v19;
  __int128 v20;
  std::string::size_type v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[4];
  std::string __dst;

  memset(__p, 170, 24);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (size_t)a1[1];
  v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *a1;
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&__dst, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[2]) >= 0)
    v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  else
    v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  if (SHIBYTE(__p[2]) >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  for (; v19 != v18; v19 = (void **)((char *)v19 + 1))
    *(_BYTE *)v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_2579B86F8)
  {
LABEL_32:
    LODWORD(v23) = qword_2579B86F8;
    v22 = off_2579B8700;
    v36 = qword_2579B86F8;
    v37 = (std::__shared_weak_count *)off_2579B8700;
    if (!off_2579B8700)
      goto LABEL_42;
    goto LABEL_40;
  }
  v23 = operator new(0x18uLL);
  MEMORY[0x24BD294B4](v23, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x24BDBD590]);
  v22 = operator new(0x20uLL);
  *v22 = &unk_251CBBBA8;
  v22[1] = 0;
  v22[2] = 0;
  v22[3] = v23;
  v24 = (std::__shared_weak_count *)off_2579B8700;
  qword_2579B86F8 = (uint64_t)v23;
  off_2579B8700 = v22;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_32;
  }
  v36 = (uint64_t)v23;
  v37 = (std::__shared_weak_count *)v22;
LABEL_40:
  v27 = v22 + 1;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_42:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v20;
    v35.__r_.__value_.__r.__words[2] = v21;
LABEL_45:
    __dst = v35;
    goto LABEL_46;
  }
  std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_45;
  std::string::__init_copy_ctor_external(&__dst, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
LABEL_46:
  if (SHIBYTE(__p[2]) >= 0)
    v29 = (char *)__p;
  else
    v29 = (char *)__p[0];
  v30 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v29);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_51;
LABEL_54:
    operator delete(v35.__r_.__value_.__l.__data_);
    v31 = v37;
    if (!v37)
      goto LABEL_58;
    goto LABEL_55;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_54;
LABEL_51:
  v31 = v37;
  if (!v37)
    goto LABEL_58;
LABEL_55:
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_58:
    if ((v21 & 0x8000000000000000) == 0)
      goto LABEL_59;
LABEL_62:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return v30;
LABEL_63:
    operator delete(__p[0]);
    return v30;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if ((v21 & 0x8000000000000000) != 0)
    goto LABEL_62;
LABEL_59:
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_63;
  return v30;
}

void sub_24B8F8218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  uint64_t v31;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0)
    operator delete(v30);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<std::string>(const void **a1, uint64_t a2, uint64_t a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  void **v19;
  _QWORD *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::string __p;
  uint64_t v34;
  std::__shared_weak_count *v35;
  void *v36[4];
  std::string __dst;

  memset(v36, 170, 24);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (size_t)a1[1];
  v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *a1;
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&__dst, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v36 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36[2]) >= 0)
    v18 = (void **)((char *)v36 + HIBYTE(v36[2]));
  else
    v18 = (void **)((char *)v36[0] + (unint64_t)v36[1]);
  if (SHIBYTE(v36[2]) >= 0)
    v19 = v36;
  else
    v19 = (void **)v36[0];
  for (; v19 != v18; v19 = (void **)((char *)v19 + 1))
    *(_BYTE *)v19 = __tolower(*(char *)v19);
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_2579B86F8)
  {
    v21 = operator new(0x18uLL);
    MEMORY[0x24BD294B4](v21, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x24BDBD590]);
    v20 = operator new(0x20uLL);
    *v20 = &unk_251CBBBA8;
    v20[1] = 0;
    v20[2] = 0;
    v20[3] = v21;
    v22 = (std::__shared_weak_count *)off_2579B8700;
    qword_2579B86F8 = (uint64_t)v21;
    off_2579B8700 = v20;
    if (!v22)
    {
      v34 = (uint64_t)v21;
      v35 = (std::__shared_weak_count *)v20;
LABEL_40:
      v25 = v20 + 1;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      goto LABEL_42;
    }
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  LODWORD(v21) = qword_2579B86F8;
  v20 = off_2579B8700;
  v34 = qword_2579B86F8;
  v35 = (std::__shared_weak_count *)off_2579B8700;
  if (off_2579B8700)
    goto LABEL_40;
LABEL_42:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    __dst = __p;
  if (SHIBYTE(v36[2]) >= 0)
    v27 = (char *)v36;
  else
    v27 = (char *)v36[0];
  v28 = ctu::cf::plist_adapter::set<std::string>((int)v21, (uint64_t)&__dst, v27);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_53:
      v29 = v35;
      if (!v35)
        goto LABEL_60;
      goto LABEL_57;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_53;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v29 = v35;
  if (!v35)
    goto LABEL_60;
LABEL_57:
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if ((SHIBYTE(v36[2]) & 0x80000000) == 0)
      return v28;
    goto LABEL_61;
  }
LABEL_60:
  if (SHIBYTE(v36[2]) < 0)
LABEL_61:
    operator delete(v36[0]);
  return v28;
}

void sub_24B8F8640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<unsigned int>(const void **a1, uint64_t a2, unsigned int *a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  void **v19;
  __int128 v20;
  std::string::size_type v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[4];
  std::string __dst;

  memset(__p, 170, 24);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (size_t)a1[1];
  v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *a1;
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&__dst, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[2]) >= 0)
    v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  else
    v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  if (SHIBYTE(__p[2]) >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  for (; v19 != v18; v19 = (void **)((char *)v19 + 1))
    *(_BYTE *)v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_2579B86F8)
  {
LABEL_32:
    LODWORD(v23) = qword_2579B86F8;
    v22 = off_2579B8700;
    v36 = qword_2579B86F8;
    v37 = (std::__shared_weak_count *)off_2579B8700;
    if (!off_2579B8700)
      goto LABEL_42;
    goto LABEL_40;
  }
  v23 = operator new(0x18uLL);
  MEMORY[0x24BD294B4](v23, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x24BDBD590]);
  v22 = operator new(0x20uLL);
  *v22 = &unk_251CBBBA8;
  v22[1] = 0;
  v22[2] = 0;
  v22[3] = v23;
  v24 = (std::__shared_weak_count *)off_2579B8700;
  qword_2579B86F8 = (uint64_t)v23;
  off_2579B8700 = v22;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_32;
  }
  v36 = (uint64_t)v23;
  v37 = (std::__shared_weak_count *)v22;
LABEL_40:
  v27 = v22 + 1;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_42:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v20;
    v35.__r_.__value_.__r.__words[2] = v21;
LABEL_45:
    __dst = v35;
    goto LABEL_46;
  }
  std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_45;
  std::string::__init_copy_ctor_external(&__dst, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
LABEL_46:
  if (SHIBYTE(__p[2]) >= 0)
    v29 = (char *)__p;
  else
    v29 = (char *)__p[0];
  v30 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v29);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_51;
LABEL_54:
    operator delete(v35.__r_.__value_.__l.__data_);
    v31 = v37;
    if (!v37)
      goto LABEL_58;
    goto LABEL_55;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_54;
LABEL_51:
  v31 = v37;
  if (!v37)
    goto LABEL_58;
LABEL_55:
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_58:
    if ((v21 & 0x8000000000000000) == 0)
      goto LABEL_59;
LABEL_62:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return v30;
LABEL_63:
    operator delete(__p[0]);
    return v30;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if ((v21 & 0x8000000000000000) != 0)
    goto LABEL_62;
LABEL_59:
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_63;
  return v30;
}

void sub_24B8F8A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  uint64_t v31;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0)
    operator delete(v30);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t util::convert<unsigned int>(const std::string *a1, _DWORD *a2)
{
  unint64_t v4;
  const char *v5;
  std::string::size_type size;
  size_t __idx;

  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    LODWORD(v4) = strcasecmp((const char *)a1, "false");
    if (!(_DWORD)v4)
      goto LABEL_29;
    LODWORD(v4) = strcasecmp((const char *)a1, "off");
    if (!(_DWORD)v4)
      goto LABEL_29;
    LODWORD(v4) = strcasecmp((const char *)a1, "no");
    if (!(_DWORD)v4)
      goto LABEL_29;
    if (strcasecmp((const char *)a1, "true")
      && strcasecmp((const char *)a1, "on")
      && strcasecmp((const char *)a1, "yes")
      && strcasecmp((const char *)a1, "full")
      && strcasecmp((const char *)a1, "streaming"))
    {
      v5 = (const char *)a1;
      if (!strcasecmp((const char *)a1, "lite"))
        goto LABEL_30;
      goto LABEL_21;
    }
LABEL_28:
    LODWORD(v4) = 1;
    goto LABEL_29;
  }
  v5 = (const char *)a1->__r_.__value_.__r.__words[0];
  LODWORD(v4) = strcasecmp(a1->__r_.__value_.__l.__data_, "false");
  if (!(_DWORD)v4)
    goto LABEL_29;
  LODWORD(v4) = strcasecmp(v5, "off");
  if (!(_DWORD)v4)
    goto LABEL_29;
  LODWORD(v4) = strcasecmp(v5, "no");
  if (!(_DWORD)v4)
    goto LABEL_29;
  if (!strcasecmp(v5, "true")
    || !strcasecmp(v5, "on")
    || !strcasecmp(v5, "yes")
    || !strcasecmp(v5, "full")
    || !strcasecmp(v5, "streaming"))
  {
    goto LABEL_28;
  }
  if (!strcasecmp(v5, "lite"))
  {
LABEL_30:
    LODWORD(v4) = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v5, "background"))
    goto LABEL_30;
  __idx = 0xAAAAAAAAAAAAAAAALL;
  v4 = std::stol(a1, &__idx, 0);
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (__idx != size || (v4 & 0x8000000000000000) != 0 || HIDWORD(v4))
    return 0;
LABEL_29:
  *a2 = v4;
  return 1;
}

uint64_t sub_24B8F8D64(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

void prop::bbtrace::get<int>(char *a1, _DWORD *a2)
{
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get(a1, (uint64_t)&__p))
    util::convert<int>(&__p, a2, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_24B8F8DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::tracesettings::enabled(prop::tracesettings *this, const char *a2)
{
  size_t v3;
  size_t v4;
  void **v5;
  size_t v6;
  size_t v7;
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  void *v28;
  size_t v29;
  unint64_t v30;
  void **__dst;
  size_t v32;
  unint64_t v33;
  BOOL v34;
  int v35;
  std::string __p;

  v34 = 0;
  if ((prop::tracesettings *)*MEMORY[0x24BE04F98] == this)
  {
    v6 = strlen((const char *)this);
    if (v6 > 0x7FFFFFFFFFFFFFF7)
LABEL_59:
      std::string::__throw_length_error[abi:ne180100]();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v17 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v17 = v6 | 7;
      v18 = v17 + 1;
      p_dst = (void **)operator new(v17 + 1);
      v32 = v7;
      v33 = v18 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v33) = v6;
      p_dst = (void **)&__dst;
      if (!v6)
      {
LABEL_35:
        *((_BYTE *)p_dst + v7) = 0;
        v19 = (const void *)*MEMORY[0x24BE04E90];
        v20 = strlen((const char *)*MEMORY[0x24BE04E90]);
        if (v20 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v21 = v20;
        if (v20 >= 0x17)
        {
          v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17)
            v23 = v20 | 7;
          v24 = v23 + 1;
          v22 = operator new(v23 + 1);
          v29 = v21;
          v30 = v24 | 0x8000000000000000;
          v28 = v22;
        }
        else
        {
          HIBYTE(v30) = v20;
          v22 = &v28;
          if (!v20)
          {
LABEL_43:
            *((_BYTE *)v22 + v21) = 0;
            memset(&__p, 0, sizeof(__p));
            v25 = -1431655766;
            if (prop::get((char *)&__dst, (char *)&v28, (uint64_t)&__p))
            {
              v35 = -1431655766;
              v26 = util::convert<int>(&__p, &v35, 0);
              if (v26)
                v25 = v35;
              else
                v25 = -1431655766;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_51:
                if (SHIBYTE(v30) < 0)
                {
                  operator delete(v28);
                  if ((SHIBYTE(v33) & 0x80000000) == 0)
                  {
LABEL_53:
                    if (!v26)
                      return v34;
                    return v25 != 0;
                  }
                }
                else if ((SHIBYTE(v33) & 0x80000000) == 0)
                {
                  goto LABEL_53;
                }
                operator delete(__dst);
                if (!v26)
                  return v34;
                return v25 != 0;
              }
            }
            else
            {
              v26 = 0;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_51;
            }
            operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_51;
          }
        }
        memmove(v22, v19, v21);
        goto LABEL_43;
      }
    }
    memcpy(p_dst, this, v7);
    goto LABEL_35;
  }
  v3 = strlen((const char *)this);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_59;
  v4 = v3;
  if (v3 >= 0x17)
  {
    v9 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v9 = v3 | 7;
    v10 = v9 + 1;
    v5 = (void **)operator new(v9 + 1);
    v32 = v4;
    v33 = v10 | 0x8000000000000000;
    __dst = v5;
    goto LABEL_13;
  }
  HIBYTE(v33) = v3;
  v5 = (void **)&__dst;
  if (v3)
LABEL_13:
    memcpy(v5, this, v4);
  *((_BYTE *)v5 + v4) = 0;
  v11 = (const void *)*MEMORY[0x24BE04F88];
  v12 = strlen((const char *)*MEMORY[0x24BE04F88]);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    v29 = v13;
    v30 = v16 | 0x8000000000000000;
    v28 = v14;
    goto LABEL_21;
  }
  HIBYTE(v30) = v12;
  v14 = &v28;
  if (v12)
LABEL_21:
    memmove(v14, v11, v13);
  *((_BYTE *)v14 + v13) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::get((char *)&__dst, (char *)&v28, (uint64_t)&__p))
    util::convert<BOOL>(&__p, &v34, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30) & 0x80000000) == 0)
    {
LABEL_26:
      if (SHIBYTE(v33) < 0)
        goto LABEL_30;
      return v34;
    }
  }
  else if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(v28);
  if (SHIBYTE(v33) < 0)
LABEL_30:
    operator delete(__dst);
  return v34;
}

void sub_24B8F9170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a20 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL prop::tracesettings::anyEnabled(prop::tracesettings *this, const char *a2)
{
  const char *v2;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;

  return prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE04EE8], a2)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE04F98], v2)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE04EF0], v3)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE05920], v4)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE04F58], v5)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE04FE0], v6)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE04F00], v7);
}

BOOL prop::tracesettings::isContinuous(prop::tracesettings *this, const char *a2)
{
  const char *v2;
  const char *v3;

  return prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE04EE8], a2)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE05920], v2)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE04F58], v3);
}

BOOL prop::tracesettings::mobileBasebandServicesEnabled(prop::tracesettings *this, const char *a2)
{
  const char *v2;
  const char *v3;

  return prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE04EE8], a2)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE05920], v2)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE04F58], v3);
}

void prop::file::get<std::string>(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  int v5;
  size_t v6;
  unint64_t v7;
  void **p_dst;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  void **v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  const char *v29;
  const void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void **__dst;
  std::__shared_weak_count *v35;
  _QWORD v36[4];
  uint64_t v37;

  memset(v36, 170, sizeof(v36));
  v5 = *((char *)a1 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  v7 = v6 + 1;
  __dst = (void **)0xAAAAAAAAAAAAAAAALL;
  v35 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  if (v6 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    v35 = (std::__shared_weak_count *)(v6 + 1);
    v36[0] = v13 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v35 = 0;
    v36[0] = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v36[0]) = v6 + 1;
    if (!v6)
      goto LABEL_15;
  }
  if (v5 >= 0)
    v14 = a1;
  else
    v14 = *a1;
  memmove(p_dst, v14, v6);
LABEL_15:
  *(_WORD *)((char *)p_dst + v6) = 46;
  v15 = *(char *)(a2 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)a2;
  else
    v16 = *(const std::string::value_type **)a2;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a2 + 23);
  else
    v17 = *(_QWORD *)(a2 + 8);
  v18 = std::string::append((std::string *)&__dst, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v36[3] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)&v36[1] = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v36[0]) < 0)
    operator delete(__dst);
  if (v36[3] >= 0)
    v20 = (char *)&v36[1] + HIBYTE(v36[3]);
  else
    v20 = (char *)(v36[1] + v36[2]);
  if (v36[3] >= 0)
    v21 = (char *)&v36[1];
  else
    v21 = (char *)v36[1];
  for (; v21 != v20; ++v21)
    *v21 = __tolower(*v21);
  memset(a4, 170, sizeof(std::string));
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_2579B86F8)
  {
    v23 = (void **)operator new(0x18uLL);
    MEMORY[0x24BD294B4](v23, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x24BDBD590]);
    v22 = operator new(0x20uLL);
    *v22 = &unk_251CBBBA8;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
    v24 = (std::__shared_weak_count *)off_2579B8700;
    qword_2579B86F8 = (uint64_t)v23;
    off_2579B8700 = v22;
    if (!v24)
    {
      __dst = v23;
      v35 = (std::__shared_weak_count *)v22;
LABEL_43:
      v27 = v22 + 1;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      goto LABEL_45;
    }
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v23 = (void **)qword_2579B86F8;
  v22 = off_2579B8700;
  __dst = (void **)qword_2579B86F8;
  v35 = (std::__shared_weak_count *)off_2579B8700;
  if (off_2579B8700)
    goto LABEL_43;
LABEL_45:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (v36[3] >= 0)
    v29 = (const char *)&v36[1];
  else
    v29 = (const char *)v36[1];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v37, v29);
  v30 = (const void *)(*(uint64_t (**)(void **, uint64_t))*v23)(v23, v37);
  if (v30)
  {
    ctu::cf::assign();
    CFRelease(v30);
  }
  MEMORY[0x24BD29478](&v37);
  v31 = v35;
  if (!v35)
    goto LABEL_54;
  v32 = (unint64_t *)&v35->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_54:
    if ((SHIBYTE(v36[3]) & 0x80000000) == 0)
      return;
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if (SHIBYTE(v36[3]) < 0)
LABEL_55:
    operator delete((void *)v36[1]);
}

uint64_t ctu::cf::plist_adapter::set<std::string>(int a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v6;
  std::string v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v7 = *(std::string *)a2;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v6, a3);
  v4 = ctu::cf::plist_adapter::set<std::string>();
  MEMORY[0x24BD29478](&v6);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return v4;
}

uint64_t ctu::cf::plist_adapter::set<std::string>()
{
  ctu::cf::convert_copy();
  return 0;
}

void sub_24B8F98A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t *GetOsLogContext(void)
{
  unsigned __int8 v0;

  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
  return &GetOsLogContext(void)::sOsLogContext;
}

void ___Z15GetOsLogContextv_block_invoke()
{
  _BYTE v0[16];

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v0, "com.apple.telephony.abm", "global");
  ctu::OsLogContext::operator=();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v0);
}

void *GetGlobalLogger(uint64_t *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[5];
  std::__shared_weak_count *v11;

  if ((v2 & 1) == 0
  {
    MEMORY[0x24BD293D0](&GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::sLogger);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED98A0], &GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::sLogger, &dword_24B855000);
  }
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1174405120;
  v10[2] = ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v10[3] = &__block_descriptor_tmp_3_1;
  v3 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  v10[4] = v3;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::onceToken != -1)
  {
    dispatch_once(&GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::onceToken, v10);
    v4 = v11;
    if (v11)
      goto LABEL_7;
    return &GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::sLogger;
  }
  if (!v4)
    return &GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::sLogger;
LABEL_7:
  v7 = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return &GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::sLogger;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return &GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::sLogger;
}

void sub_24B8F9B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _BYTE v10[16];
  _BYTE v11[48];
  uint64_t v12;
  uint64_t v13;

  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v10, (const ctu::OsLogContext *)&GetOsLogContext(void)::sOsLogContext);
  MEMORY[0x24BD293C4](v11, v10, a1 + 32);
  ctu::LoggerCommonBase::operator=();
  v4 = v12;
  v3 = v13;
  if (v13)
  {
    v5 = (unint64_t *)(v13 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)qword_2579B8AD0;
  qword_2579B8AC8 = v4;
  qword_2579B8AD0 = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)v11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
}

void sub_24B8F9C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

std::__shared_weak_count_vtbl **TraceCAReporter::create@<X0>(uint64_t a1@<X8>)
{
  TraceCAReporter *v3;

  *(_QWORD *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  v3 = (TraceCAReporter *)operator new(0x68uLL);
  TraceCAReporter::TraceCAReporter(v3);
  *(_QWORD *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  return std::shared_ptr<TraceCAReporter>::shared_ptr[abi:ne180100]<TraceCAReporter,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1},void>((std::__shared_weak_count_vtbl **)a1, (std::__shared_weak_count_vtbl *)v3);
}

void sub_24B8F9D44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void TraceCAReporter::TraceCAReporter(TraceCAReporter *this)
{
  NSObject *initially_inactive;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  int v8;
  std::string *v9;
  unint64_t size;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  char v18;
  std::string::size_type v19;
  std::string *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void **v24;
  std::string *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void **v29;
  std::string *v30;
  _QWORD *v31;
  _QWORD *v32;
  std::string *v33;
  std::string *v34;
  float v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  size_t prime;
  int8x8_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  unint64_t v45;
  void ***v46;
  void **v47;
  unint64_t v48;
  const char *v49;
  size_t v50;
  size_t v51;
  void **p_dst;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  size_t v57;
  std::string::size_type v58;
  std::string *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const void *v63;
  size_t v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  char *v69;
  void ***v70;
  void **__dst;
  char *v72;
  unint64_t v73;
  std::string v74;
  void *v75;
  size_t v76;
  unint64_t v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  void *__p;
  char v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v74, "com.apple.telephony.abm", "ca.trace.reporter");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v3 = dispatch_queue_create_with_target_V2("TraceCAReporter", initially_inactive, 0);
  dispatch_set_qos_class_floor(v3, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v3);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    *((_QWORD *)this + 3) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((TraceCAReporter *)((char *)this + 32), (const ctu::OsLogLogger *)&__dst);
  MEMORY[0x24BD2937C](&__dst);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v74);
  v4 = (const char *)*MEMORY[0x24BE04F88];
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v74, (char *)*MEMORY[0x24BE04F88], MEMORY[0x24BE05810]);
  v68 = v4;
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v78, (char *)*MEMORY[0x24BE04F90], MEMORY[0x24BE05238]);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v82, (char *)*MEMORY[0x24BE05570], MEMORY[0x24BE053D0]);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v86, (char *)*MEMORY[0x24BE04E90], MEMORY[0x24BE04F18]);
  v5 = 0;
  v6 = (_QWORD *)((char *)this + 64);
  v69 = (char *)this + 64;
  v70 = (void ***)((char *)this + 80);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 1065353216;
  do
  {
    v7 = &v74 + 2 * v5;
    v8 = SHIBYTE(v7->__r_.__value_.__r.__words[2]);
    if (v8 >= 0)
      v9 = &v74 + 2 * v5;
    else
      v9 = (std::string *)v7->__r_.__value_.__r.__words[0];
    if (v8 >= 0)
      size = HIBYTE(v7->__r_.__value_.__r.__words[2]);
    else
      size = v7->__r_.__value_.__l.__size_;
    v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&__dst, (uint64_t *)v9, size);
    v12 = v11;
    v13 = *((_QWORD *)this + 9);
    if (!v13)
    {
      v15 = 0xAAAAAAAAAAAAAAAALL;
      goto LABEL_63;
    }
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v15 = v11;
      if (v11 >= v13)
        v15 = v11 % v13;
    }
    else
    {
      v15 = (v13 - 1) & v11;
    }
    v16 = *(uint64_t ***)(*v6 + 8 * v15);
    if (v16)
    {
      v17 = *v16;
      if (*v16)
      {
        v18 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        if (v18 >= 0)
          v19 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        else
          v19 = v7->__r_.__value_.__l.__size_;
        if (v18 >= 0)
          v20 = &v74 + 2 * v5;
        else
          v20 = (std::string *)v7->__r_.__value_.__r.__words[0];
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v26 = v17[1];
            if (v26 == v12)
            {
              v27 = *((unsigned __int8 *)v17 + 39);
              if ((v27 & 0x80u) == 0)
                v28 = *((unsigned __int8 *)v17 + 39);
              else
                v28 = v17[3];
              if (v28 == v19)
              {
                v29 = (const void **)(v17 + 2);
                if ((v27 & 0x80) != 0)
                {
                  if (!memcmp(*v29, v20, v17[3]))
                    goto LABEL_7;
                }
                else
                {
                  if (!*((_BYTE *)v17 + 39))
                    goto LABEL_7;
                  v30 = v20;
                  while (*(unsigned __int8 *)v29 == v30->__r_.__value_.__s.__data_[0])
                  {
                    v29 = (const void **)((char *)v29 + 1);
                    v30 = (std::string *)((char *)v30 + 1);
                    if (!--v27)
                      goto LABEL_7;
                  }
                }
              }
            }
            else if ((v26 & (v13 - 1)) != v15)
            {
              goto LABEL_62;
            }
            v17 = (uint64_t *)*v17;
            if (!v17)
              goto LABEL_62;
          }
        }
        while (1)
        {
          v21 = v17[1];
          if (v21 == v12)
          {
            v22 = *((unsigned __int8 *)v17 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v17 + 39);
            else
              v23 = v17[3];
            if (v23 == v19)
            {
              v24 = (const void **)(v17 + 2);
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp(*v24, v20, v17[3]))
                  goto LABEL_7;
              }
              else
              {
                if (!*((_BYTE *)v17 + 39))
                  goto LABEL_7;
                v25 = v20;
                while (*(unsigned __int8 *)v24 == v25->__r_.__value_.__s.__data_[0])
                {
                  v24 = (const void **)((char *)v24 + 1);
                  v25 = (std::string *)((char *)v25 + 1);
                  if (!--v22)
                    goto LABEL_7;
                }
              }
            }
          }
          else
          {
            if (v21 >= v13)
              v21 %= v13;
            if (v21 != v15)
            {
LABEL_62:
              v6 = (_QWORD *)((char *)this + 64);
              break;
            }
          }
          v17 = (uint64_t *)*v17;
          if (!v17)
            goto LABEL_62;
        }
      }
    }
LABEL_63:
    v73 = 0xAAAAAAAAAAAAAAAALL;
    v31 = operator new(0x40uLL);
    v32 = v31;
    __dst = (void **)v31;
    v72 = (char *)this + 80;
    LOBYTE(v73) = 0;
    *v31 = 0;
    v31[1] = v12;
    if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v31 + 2), v7->__r_.__value_.__l.__data_, v7->__r_.__value_.__l.__size_);
    }
    else
    {
      *((_OWORD *)v31 + 1) = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v31[4] = *((_QWORD *)&v7->__r_.__value_.__l + 2);
    }
    v33 = (std::string *)(v32 + 5);
    v34 = &v74 + 2 * v5 + 1;
    if (SHIBYTE(v7[1].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v33, v34->__r_.__value_.__l.__data_, *(&v76 + 6 * v5));
    }
    else
    {
      *(_OWORD *)&v33->__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v32[7] = *(&v77 + 6 * v5);
    }
    LOBYTE(v73) = 1;
    v35 = (float)(unint64_t)(*((_QWORD *)this + 11) + 1);
    v36 = *((float *)this + 24);
    if (v13 && (float)(v36 * (float)v13) >= v35)
      goto LABEL_97;
    v37 = (v13 & (v13 - 1)) != 0;
    if (v13 < 3)
      v37 = 1;
    v38 = v37 | (2 * v13);
    v39 = vcvtps_u32_f32(v35 / v36);
    if (v38 <= v39)
      prime = v39;
    else
      prime = v38;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v41 = *(int8x8_t *)((char *)this + 72);
    if (prime > *(_QWORD *)&v41)
      goto LABEL_81;
    if (prime < *(_QWORD *)&v41)
    {
      v42 = vcvtps_u32_f32((float)*((unint64_t *)this + 11) / *((float *)this + 24));
      if (*(_QWORD *)&v41 < 3uLL || (v43 = (uint8x8_t)vcnt_s8(v41), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (prime <= v42)
        prime = v42;
      if (prime < *(_QWORD *)&v41)
LABEL_81:
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<true>((uint64_t)v6, prime);
    }
    v13 = *((_QWORD *)this + 9);
    v45 = v13 - 1;
    if ((v13 & (v13 - 1)) == 0)
    {
      v15 = v45 & v12;
      v46 = *(void ****)(*v6 + 8 * (v45 & v12));
      v47 = __dst;
      if (!v46)
        goto LABEL_98;
      goto LABEL_5;
    }
    if (v12 < v13)
    {
      v15 = v12;
LABEL_97:
      v46 = *(void ****)(*v6 + 8 * v15);
      v47 = __dst;
      if (!v46)
        goto LABEL_98;
      goto LABEL_5;
    }
    v15 = v12 % v13;
    v46 = *(void ****)(*v6 + 8 * (v12 % v13));
    v47 = __dst;
    if (!v46)
    {
LABEL_98:
      *v47 = *v70;
      *v70 = __dst;
      *(_QWORD *)(*v6 + 8 * v15) = v70;
      if (*__dst)
      {
        v48 = *((_QWORD *)*__dst + 1);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v48 >= v13)
            v48 %= v13;
        }
        else
        {
          v48 &= v13 - 1;
        }
        *(_QWORD *)(*v6 + 8 * v48) = __dst;
      }
      goto LABEL_6;
    }
LABEL_5:
    *v47 = *v46;
    *v46 = __dst;
LABEL_6:
    ++*((_QWORD *)this + 11);
LABEL_7:
    ++v5;
    v6 = (_QWORD *)((char *)this + 64);
  }
  while (v5 != 4);
  if ((v89 & 0x80000000) == 0)
  {
    v49 = v68;
    if ((v87 & 0x80000000) == 0)
      goto LABEL_108;
LABEL_133:
    operator delete(v86);
    if (v85 < 0)
      goto LABEL_134;
LABEL_109:
    if ((v83 & 0x80000000) == 0)
      goto LABEL_110;
LABEL_135:
    operator delete(v82);
    if (v81 < 0)
      goto LABEL_136;
LABEL_111:
    if ((v79 & 0x80000000) == 0)
      goto LABEL_112;
LABEL_137:
    operator delete(v78);
    if (SHIBYTE(v77) < 0)
      goto LABEL_138;
LABEL_113:
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_114;
LABEL_139:
    operator delete(v74.__r_.__value_.__l.__data_);
    goto LABEL_114;
  }
  operator delete(__p);
  v49 = v68;
  if (v87 < 0)
    goto LABEL_133;
LABEL_108:
  if ((v85 & 0x80000000) == 0)
    goto LABEL_109;
LABEL_134:
  operator delete(v84);
  if (v83 < 0)
    goto LABEL_135;
LABEL_110:
  if ((v81 & 0x80000000) == 0)
    goto LABEL_111;
LABEL_136:
  operator delete(v80);
  if (v79 < 0)
    goto LABEL_137;
LABEL_112:
  if ((SHIBYTE(v77) & 0x80000000) == 0)
    goto LABEL_113;
LABEL_138:
  operator delete(v75);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_139;
LABEL_114:
  gettimeofday((timeval *)this + 3, 0);
  v50 = strlen(v49);
  if (v50 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v51 = v50;
  if (v50 >= 0x17)
  {
    v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17)
      v53 = v50 | 7;
    v54 = v53 + 1;
    p_dst = (void **)operator new(v53 + 1);
    v72 = (char *)v51;
    v73 = v54 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_121;
  }
  HIBYTE(v73) = v50;
  p_dst = (void **)&__dst;
  if (v50)
LABEL_121:
    memmove(p_dst, v49, v51);
  *((_BYTE *)p_dst + v51) = 0;
  memset(&v74, 0, sizeof(v74));
  v55 = prop::bbtrace::get((char *)&__dst, (uint64_t)&v74);
  if ((_DWORD)v55)
    v55 = util::convert<BOOL>(&v74, (BOOL *)this + 40, 0);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v74.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73) < 0)
      goto LABEL_141;
  }
  else
  {
    if ((SHIBYTE(v73) & 0x80000000) == 0)
      goto LABEL_126;
LABEL_141:
    operator delete(__dst);
  }
LABEL_126:
  if (!capabilities::radio::maverick((capabilities::radio *)v55))
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v74, (char *)*MEMORY[0x24BE0BF70], MEMORY[0x24BE05240]);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t)v69, (uint64_t)&v74, (uint64_t)&v74);
    goto LABEL_155;
  }
  v56 = (const void *)*MEMORY[0x24BDFC998];
  v57 = strlen((const char *)*MEMORY[0x24BDFC998]);
  if (v57 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v58 = v57;
  if (v57 >= 0x17)
  {
    v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17)
      v60 = v57 | 7;
    v61 = v60 + 1;
    v59 = (std::string *)operator new(v60 + 1);
    v74.__r_.__value_.__l.__size_ = v58;
    v74.__r_.__value_.__r.__words[2] = v61 | 0x8000000000000000;
    v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
    goto LABEL_145;
  }
  *((_BYTE *)&v74.__r_.__value_.__s + 23) = v57;
  v59 = &v74;
  if (v57)
LABEL_145:
    memmove(v59, v56, v58);
  v59->__r_.__value_.__s.__data_[v58] = 0;
  v62 = &v75;
  v63 = (const void *)*MEMORY[0x24BE05240];
  v64 = strlen((const char *)*MEMORY[0x24BE05240]);
  if (v64 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v65 = v64;
  if (v64 >= 0x17)
  {
    v66 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v64 | 7) != 0x17)
      v66 = v64 | 7;
    v67 = v66 + 1;
    v62 = operator new(v66 + 1);
    v76 = v65;
    v77 = v67 | 0x8000000000000000;
    v75 = v62;
    goto LABEL_153;
  }
  HIBYTE(v77) = v64;
  if (v64)
LABEL_153:
    memmove(v62, v63, v65);
  *((_BYTE *)v62 + v65) = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t)v69, (uint64_t)&v74, (uint64_t)&v74);
LABEL_155:
  if ((SHIBYTE(v77) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_159:
    operator delete(v74.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v75);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_159;
}

void sub_24B8FA6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _QWORD *v27;

  std::pair<std::string,std::string>::~pair((uint64_t)&__p);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](a14);
  ctu::SharedLoggable<TraceCAReporter,ctu::OsLogLogger>::~SharedLoggable(v27);
  _Unwind_Resume(a1);
}

void sub_24B8FA798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  _QWORD *v19;
  char *v20;

  do
  {
    v20 -= 48;
    std::pair<std::string,std::string>::~pair((uint64_t)v20);
  }
  while (v20 != &a19);
  ctu::SharedLoggable<TraceCAReporter,ctu::OsLogLogger>::~SharedLoggable(v19);
  _Unwind_Resume(a1);
}

void sub_24B8FA87C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_10:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

_QWORD *ctu::SharedLoggable<TraceCAReporter,ctu::OsLogLogger>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  MEMORY[0x24BD2937C](a1 + 4);
  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = a1[2];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void TraceCAReporter::prepTraceStats(TraceCAReporter *a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t value;
  xpc_object_t v7;
  void **v8;
  const char *v9;
  NSObject *v10;
  xpc_object_t v11;
  uint64_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  void **v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t object[3];
  void *v37[3];
  __int128 __p;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  memset(v37, 170, sizeof(v37));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE051B0]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  __p = 0uLL;
  v39 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE04E98]);
  v35 = v7;
  if (v7)
    xpc_retain(v7);
  else
    v35 = xpc_null_create();
  __p = 0uLL;
  v39 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v35);
  if (!TraceCAReporter::supportedTraceDomainToReport((uint64_t)a1, (char *)object))
    goto LABEL_14;
  if (SHIBYTE(v37[2]) >= 0)
    v8 = v37;
  else
    v8 = (void **)v37[0];
  v9 = (const char *)*MEMORY[0x24BE04F88];
  if (strcasecmp((const char *)v8, (const char *)*MEMORY[0x24BE04F88]))
  {
    v10 = *((_QWORD *)a1 + 4);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v8;
      _os_log_error_impl(&dword_24B855000, v10, OS_LOG_TYPE_ERROR, "Trace property %s is not supported to report to CA", (uint8_t *)&__p, 0xCu);
    }
LABEL_14:
    *a3 = xpc_null_create();
    goto LABEL_15;
  }
  v11 = xpc_dictionary_create(0, 0, 0);
  v12 = MEMORY[0x24BDACFA0];
  if (v11 || (v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v11) == v12)
    {
      xpc_retain(v11);
      v13 = v11;
    }
    else
    {
      v13 = xpc_null_create();
    }
  }
  else
  {
    v13 = xpc_null_create();
    v11 = 0;
  }
  xpc_release(v11);
  v14 = xpc_string_create((const char *)*MEMORY[0x24BE053C8]);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x24BE05010], v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_string_create((const char *)*MEMORY[0x24BE05030]);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x24BE050D8], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = xpc_string_create((const char *)*MEMORY[0x24BE05088]);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x24BE050D0], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  *(_QWORD *)&__p = 0xAAAAAAAAAAAAAAAALL;
  v20 = xpc_null_create();
  *(_QWORD *)&__p = v20;
  if (SHIBYTE(v37[2]) >= 0)
    v21 = v37;
  else
    v21 = (void **)v37[0];
  if (!strcasecmp((const char *)v21, v9))
  {
    v23 = *a2;
    v34 = v23;
    if (v23)
    {
      xpc_retain(v23);
    }
    else
    {
      v23 = xpc_null_create();
      v34 = v23;
    }
    TraceCAReporter::prepTraceStatsEnabled((uint64_t)a1, &v34, &v35);
    v22 = v35;
    v35 = xpc_null_create();
    *(_QWORD *)&__p = v22;
    xpc_release(v20);
    xpc_release(v35);
    v35 = 0;
    xpc_release(v23);
    v34 = 0;
  }
  else
  {
    v22 = v20;
  }
  if (MEMORY[0x24BD2A468](v22) == v12)
  {
    TraceCAReporter::gatherMissingBasebandTraceState(a1, (xpc_object_t *)&__p);
    v24 = (xpc_object_t)__p;
    if ((_QWORD)__p)
      xpc_retain((xpc_object_t)__p);
    else
      v24 = xpc_null_create();
    xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x24BE05450], v24);
    v25 = xpc_null_create();
    xpc_release(v24);
    xpc_release(v25);
    *a3 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v26 = xpc_dictionary_create(0, 0, 0);
    v27 = v26;
    if (v26)
    {
      *a3 = v26;
    }
    else
    {
      v27 = xpc_null_create();
      *a3 = v27;
      if (!v27)
      {
        v28 = xpc_null_create();
        v27 = 0;
        goto LABEL_53;
      }
    }
    if (MEMORY[0x24BD2A468](v27) == v12)
    {
      xpc_retain(v27);
LABEL_54:
      xpc_release(v27);
      v29 = xpc_string_create((const char *)*MEMORY[0x24BE04E58]);
      if (!v29)
        v29 = xpc_null_create();
      v30 = *a3;
      xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x24BE04E88], v29);
      v31 = xpc_null_create();
      xpc_release(v29);
      xpc_release(v31);
      if (v13)
      {
        xpc_retain(v13);
        v30 = *a3;
        v32 = v13;
      }
      else
      {
        v32 = xpc_null_create();
      }
      xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x24BE04E80], v32);
      v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
      v22 = (xpc_object_t)__p;
      goto LABEL_60;
    }
    v28 = xpc_null_create();
LABEL_53:
    *a3 = v28;
    goto LABEL_54;
  }
  *a3 = xpc_null_create();
LABEL_60:
  xpc_release(v22);
  xpc_release(v13);
LABEL_15:
  if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v37[2]) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(v37[0]);
    return;
  }
  operator delete(object[0]);
  if (SHIBYTE(v37[2]) < 0)
    goto LABEL_19;
}

void sub_24B8FAF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

BOOL TraceCAReporter::supportedTraceDomainToReport(uint64_t a1, char *a2)
{
  int v4;
  const char *v5;
  NSObject *v6;
  _BOOL8 result;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = a2[23];
  if ((v4 & 0x80000000) == 0)
  {
    v5 = a2;
    if (strcasecmp(a2, (const char *)*MEMORY[0x24BE04EE8]))
      goto LABEL_3;
    return 1;
  }
  v5 = *(const char **)a2;
  if (!strcasecmp(*(const char **)a2, (const char *)*MEMORY[0x24BE04EE8]))
    return 1;
LABEL_3:
  if (!strcasecmp(v5, (const char *)*MEMORY[0x24BDFC770]))
    return 1;
  v6 = *(NSObject **)(a1 + 32);
  result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v8 = *(char **)a2;
    if (v4 >= 0)
      v8 = a2;
    v9 = 136315138;
    v10 = v8;
    _os_log_error_impl(&dword_24B855000, v6, OS_LOG_TYPE_ERROR, "Trace domain %s is not supported to report to CA", (uint8_t *)&v9, 0xCu);
    return 0;
  }
  return result;
}

BOOL TraceCAReporter::supportedTracePropertyToReport(uint64_t a1, uint64_t a2)
{
  const char *v3;
  int v4;
  NSObject *v5;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) >= 0)
    v3 = (const char *)a2;
  else
    v3 = *(const char **)a2;
  v4 = strcasecmp(v3, (const char *)*MEMORY[0x24BE04F88]);
  if (v4)
  {
    v5 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = 136315138;
      v8 = v3;
      _os_log_error_impl(&dword_24B855000, v5, OS_LOG_TYPE_ERROR, "Trace property %s is not supported to report to CA", (uint8_t *)&v7, 0xCu);
    }
  }
  return v4 == 0;
}

void TraceCAReporter::prepTraceStatsEnabled(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;
  int v13;
  std::string::size_type size;
  std::string *v16;
  void *v18;
  unint64_t v19;
  int v20;
  uint8_t *v21;
  uint64_t v22;
  void **v23;
  int v24;
  int v25;
  int v26;
  _BOOL4 v27;
  NSObject *v29;
  xpc_object_t v30;
  NSObject *v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  const char *v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  void **v39;
  xpc_object_t v40;
  xpc_object_t v41;
  char *v42;
  std::string *v43;
  void **v44;
  BOOL v45;
  void *v46[2];
  char v47;
  void *__s1[3];
  void *v49[2];
  char v50;
  std::string v51;
  void *__p[2];
  char v53;
  char v54[24];
  uint8_t buf[23];
  unsigned __int8 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  memset(v54, 170, sizeof(v54));
  v6 = (char *)*MEMORY[0x24BE051B0];
  v53 = 12;
  strcpy((char *)__p, "NotSpecified");
  TraceCAReporter::getOrDefault<std::string>((uint64_t)v54, *a2, v6, (uint64_t)__p);
  if (v53 < 0)
    operator delete(__p[0]);
  memset(&v51, 170, sizeof(v51));
  v7 = (char *)*MEMORY[0x24BE05270];
  v50 = 12;
  strcpy((char *)v49, "NotSpecified");
  TraceCAReporter::getOrDefault<std::string>((uint64_t)&v51, *a2, v7, (uint64_t)v49);
  if (v50 < 0)
    operator delete(v49[0]);
  memset(__s1, 170, sizeof(__s1));
  v8 = (char *)*MEMORY[0x24BE05788];
  v47 = 12;
  strcpy((char *)v46, "NotSpecified");
  TraceCAReporter::getOrDefault<std::string>((uint64_t)__s1, *a2, v8, (uint64_t)v46);
  if (v47 < 0)
    operator delete(v46[0]);
  v9 = v54[23];
  v10 = v54[23];
  if (v54[23] < 0)
    v9 = *(_QWORD *)&v54[8];
  if (v9 == 12)
  {
    v11 = *(char **)v54;
    if (v54[23] >= 0)
      v11 = v54;
    v12 = *(_QWORD *)v11;
    v13 = *((_DWORD *)v11 + 2);
    if (v12 == 0x6963657053746F4ELL && v13 == 1684367718)
      goto LABEL_48;
  }
  size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v16 = &v51;
  }
  else
  {
    size = v51.__r_.__value_.__l.__size_;
    v16 = (std::string *)v51.__r_.__value_.__r.__words[0];
  }
  if (size == 12
    && v16->__r_.__value_.__r.__words[0] == 0x6963657053746F4ELL
    && LODWORD(v16->__r_.__value_.__r.__words[1]) == 1684367718)
  {
LABEL_48:
    v31 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v42 = *(char **)v54;
      if (v10 >= 0)
        v42 = v54;
      v43 = &v51;
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v43 = (std::string *)v51.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v42;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v43;
      _os_log_error_impl(&dword_24B855000, v31, OS_LOG_TYPE_ERROR, "Missing one of the key/value: key is %s, value is %s", buf, 0x16u);
    }
    goto LABEL_52;
  }
  if (!strcmp((const char *)v16, "default") && !defaults::bbtrace::get(v54, (std::string::size_type *)&v51))
  {
LABEL_52:
    v30 = xpc_null_create();
    goto LABEL_53;
  }
  v45 = 0;
  util::convert<BOOL>(&v51, &v45, 0);
  if (*(_BYTE *)(a1 + 40) != v45)
    goto LABEL_64;
  abm::asString();
  if (SHIBYTE(__s1[2]) >= 0)
    v18 = (void *)HIBYTE(__s1[2]);
  else
    v18 = __s1[1];
  v19 = v56;
  v20 = (char)v56;
  if ((v56 & 0x80u) != 0)
    v19 = *(_QWORD *)&buf[8];
  if (v18 != (void *)v19)
  {
    v27 = 1;
    if (((char)v56 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_63;
  }
  if ((v56 & 0x80u) == 0)
    v21 = buf;
  else
    v21 = *(uint8_t **)buf;
  if ((HIBYTE(__s1[2]) & 0x80) != 0)
  {
    v27 = memcmp(__s1[0], v21, (size_t)__s1[1]) != 0;
    if ((v20 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_63;
  }
  if (!HIBYTE(__s1[2]))
  {
    v27 = 0;
    if (((char)v56 & 0x80000000) == 0)
      goto LABEL_45;
LABEL_63:
    operator delete(*(void **)buf);
    if (v27)
      goto LABEL_46;
    goto LABEL_64;
  }
  v22 = HIBYTE(__s1[2]) - 1;
  v23 = __s1;
  do
  {
    v25 = *(unsigned __int8 *)v23;
    v23 = (void **)((char *)v23 + 1);
    v24 = v25;
    v26 = *v21++;
    v27 = v24 != v26;
  }
  while (v24 == v26 && v22-- != 0);
  if ((char)v56 < 0)
    goto LABEL_63;
LABEL_45:
  if (v27)
  {
LABEL_46:
    v29 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      v44 = __s1;
      if (SHIBYTE(__s1[2]) < 0)
        v44 = (void **)__s1[0];
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v45;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = v44;
      _os_log_debug_impl(&dword_24B855000, v29, OS_LOG_TYPE_DEBUG, "#D No state transistion, not reporting to CA(state: %d, triggerInterface: %s)", buf, 0x12u);
    }
    v30 = xpc_null_create();
LABEL_53:
    *a3 = v30;
    if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_54;
  }
LABEL_64:
  *a3 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v32 = xpc_dictionary_create(0, 0, 0);
  v33 = v32;
  if (v32)
  {
    *a3 = v32;
  }
  else
  {
    v33 = xpc_null_create();
    *a3 = v33;
    if (!v33)
    {
      v34 = xpc_null_create();
      v33 = 0;
      goto LABEL_71;
    }
  }
  if (MEMORY[0x24BD2A468](v33) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v33);
    goto LABEL_72;
  }
  v34 = xpc_null_create();
LABEL_71:
  *a3 = v34;
LABEL_72:
  xpc_release(v33);
  TraceCAReporter::gatherDurationInformation((TraceCAReporter *)a1, a3);
  if (*(_BYTE *)(a1 + 40))
    v35 = "On";
  else
    v35 = "Off";
  v36 = xpc_string_create(v35);
  if (!v36)
    v36 = xpc_null_create();
  v37 = *a3;
  xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x24BE05810], v36);
  v38 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v38);
  if (SHIBYTE(__s1[2]) >= 0)
    v39 = __s1;
  else
    v39 = (void **)__s1[0];
  v40 = xpc_string_create((const char *)v39);
  if (!v40)
    v40 = xpc_null_create();
  xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x24BE05248], v40);
  v41 = xpc_null_create();
  xpc_release(v40);
  xpc_release(v41);
  *(_BYTE *)(a1 + 40) = v45;
  if (SHIBYTE(__s1[2]) < 0)
LABEL_54:
    operator delete(__s1[0]);
LABEL_55:
  if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v54[23] & 0x80000000) == 0)
      return;
LABEL_59:
    operator delete(*(void **)v54);
    return;
  }
  operator delete(v51.__r_.__value_.__l.__data_);
  if (v54[23] < 0)
    goto LABEL_59;
}

void sub_24B8FB8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void TraceCAReporter::gatherMissingBasebandTraceState(TraceCAReporter *this, xpc_object_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t *i;
  __int128 v11;
  std::string *v12;
  std::string *p_p;
  xpc_object_t v14;
  std::string *v15;
  xpc_object_t v16;
  std::string __p;
  void *v18[2];
  uint64_t v19;
  std::string v20;
  std::string v21;
  __int128 v22;
  _BYTE v23[32];

  v4 = MEMORY[0x24BD2A468](*a2);
  v5 = MEMORY[0x24BDACFA0];
  if (v4 != MEMORY[0x24BDACFA0])
  {
    v6 = xpc_dictionary_create(0, 0, 0);
    if (v6 || (v6 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x24BD2A468](v6) == v5)
      {
        xpc_retain(v6);
        v7 = v6;
      }
      else
      {
        v7 = xpc_null_create();
      }
    }
    else
    {
      v7 = xpc_null_create();
      v6 = 0;
    }
    xpc_release(v6);
    v8 = xpc_null_create();
    v9 = *a2;
    *a2 = v7;
    xpc_release(v9);
    xpc_release(v8);
  }
  for (i = (uint64_t *)*((_QWORD *)this + 10); i; i = (uint64_t *)*i)
  {
    *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v23 = v11;
    *(_OWORD *)&v23[16] = v11;
    v22 = v11;
    if (*((char *)i + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v22, (const std::string::value_type *)i[2], i[3]);
      if ((*((char *)i + 63) & 0x80000000) == 0)
      {
LABEL_14:
        *(_OWORD *)&v23[8] = *(_OWORD *)(i + 5);
        *(_QWORD *)&v23[24] = i[7];
        goto LABEL_17;
      }
    }
    else
    {
      v22 = *((_OWORD *)i + 1);
      *(_QWORD *)v23 = i[4];
      if ((*((char *)i + 63) & 0x80000000) == 0)
        goto LABEL_14;
    }
    std::string::__init_copy_ctor_external((std::string *)&v23[8], (const std::string::value_type *)i[5], i[6]);
LABEL_17:
    memset(&v21, 170, sizeof(v21));
    if ((v23[7] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v21, (const std::string::value_type *)v22, *((std::string::size_type *)&v22 + 1));
    }
    else
    {
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v22;
      v21.__r_.__value_.__r.__words[2] = *(_QWORD *)v23;
    }
    memset(&v20, 170, sizeof(v20));
    if ((v23[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)&v23[8], *(std::string::size_type *)&v23[16]);
    else
      v20 = *(std::string *)&v23[8];
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v20;
    else
      v12 = (std::string *)v20.__r_.__value_.__r.__words[0];
    if (xpc_dictionary_get_value(*a2, (const char *)v12))
    {
LABEL_37:
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_38;
      goto LABEL_44;
    }
    v18[0] = 0;
    v18[1] = 0;
    v19 = 0;
    prop::bbtrace::get((char *)&v21, (uint64_t)v18);
    TraceCAReporter::convertPlistValToCAInformation((char *)&v21, (uint64_t)v18, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v14 = xpc_string_create((const char *)p_p);
    if (!v14)
      v14 = xpc_null_create();
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v20;
    else
      v15 = (std::string *)v20.__r_.__value_.__r.__words[0];
    xpc_dictionary_set_value(*a2, (const char *)v15, v14);
    v16 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v19) & 0x80000000) == 0)
        goto LABEL_37;
    }
    else if ((SHIBYTE(v19) & 0x80000000) == 0)
    {
      goto LABEL_37;
    }
    operator delete(v18[0]);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_38:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_39;
      goto LABEL_45;
    }
LABEL_44:
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_39:
      if ((v23[31] & 0x80000000) == 0)
        goto LABEL_40;
      goto LABEL_46;
    }
LABEL_45:
    operator delete(v21.__r_.__value_.__l.__data_);
    if ((v23[31] & 0x80000000) == 0)
    {
LABEL_40:
      if ((v23[7] & 0x80000000) != 0)
        goto LABEL_47;
      continue;
    }
LABEL_46:
    operator delete(*(void **)&v23[8]);
    if ((v23[7] & 0x80000000) != 0)
LABEL_47:
      operator delete((void *)v22);
  }
}

void sub_24B8FBCD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_4:
    std::pair<std::string,std::string>::~pair((uint64_t)&a32);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a25);
  std::pair<std::string,std::string>::~pair((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void TraceCAReporter::getOrDefault<std::string>(uint64_t a1, xpc_object_t xdict, char *key, uint64_t a4)
{
  xpc_object_t value;
  void *v7;
  int v8;
  xpc_object_t object;
  void *v10[6];

  memset(v10, 170, 24);
  value = xpc_dictionary_get_value(xdict, key);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  memset(&v10[3], 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object);
  v7 = (void *)HIBYTE(v10[2]);
  v8 = SHIBYTE(v10[2]);
  if (SHIBYTE(v10[2]) < 0)
    v7 = v10[1];
  if (v7)
  {
    *(_OWORD *)a1 = *(_OWORD *)v10;
    *(void **)(a1 + 16) = v10[2];
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    if (v8 < 0)
      operator delete(v10[0]);
  }
}

void sub_24B8FBE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  xpc_release(object);
  _Unwind_Resume(a1);
}

double TraceCAReporter::gatherDurationInformation(TraceCAReporter *this, xpc_object_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  timeval *v10;
  uint64_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  double result;
  timeval v15;

  v4 = MEMORY[0x24BD2A468](*a2);
  v5 = MEMORY[0x24BDACFA0];
  if (v4 != MEMORY[0x24BDACFA0])
  {
    v6 = xpc_dictionary_create(0, 0, 0);
    if (v6 || (v6 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x24BD2A468](v6) == v5)
      {
        xpc_retain(v6);
        v7 = v6;
      }
      else
      {
        v7 = xpc_null_create();
      }
    }
    else
    {
      v7 = xpc_null_create();
      v6 = 0;
    }
    xpc_release(v6);
    v8 = xpc_null_create();
    v9 = *a2;
    *a2 = v7;
    xpc_release(v9);
    xpc_release(v8);
  }
  v15.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v15.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v15, 0);
  v11 = *((_QWORD *)this + 6);
  v10 = (timeval *)((char *)this + 48);
  v12 = xpc_int64_create(v15.tv_sec - v11);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x24BE05070], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  result = *(double *)&v15.tv_sec;
  *v10 = v15;
  return result;
}

std::string *TraceCAReporter::convertPlistValToCAInformation@<X0>(char *a1@<X1>, uint64_t a2@<X2>, std::string *a3@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *result;
  uint64_t v7;
  _BYTE *v8;
  const std::string::value_type *v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  const std::string::value_type *v13;
  int v14;

  v4 = a1;
  v5 = a3;
  memset(a3, 170, sizeof(std::string));
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    if ((v4[23] & 0x80000000) == 0)
    {
LABEL_3:
      result = (std::string *)strcasecmp(v4, (const char *)*MEMORY[0x24BE05570]);
      if ((_DWORD)result)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    if ((a1[23] & 0x80000000) == 0)
      goto LABEL_3;
  }
  v4 = *(char **)v4;
  result = (std::string *)strcasecmp(v4, (const char *)*MEMORY[0x24BE05570]);
  if ((_DWORD)result)
  {
LABEL_4:
    if (!strcasecmp(v4, (const char *)*MEMORY[0x24BE04E90]))
    {
      v14 = -1431655766;
      util::convert<int>((const std::string *)a2, &v14, 0);
      v13 = (const std::string::value_type *)trace::toString();
      return std::string::__assign_external(v5, v13);
    }
    else if (!strcasecmp(v4, (const char *)*MEMORY[0x24BE04F88])
           || !strcasecmp(v4, (const char *)*MEMORY[0x24BE0BF70])
           || (result = (std::string *)strcasecmp(v4, (const char *)*MEMORY[0x24BDFC998]), !(_DWORD)result))
    {
      v7 = *(unsigned __int8 *)(a2 + 23);
      if (*(char *)(a2 + 23) < 0)
        v7 = *(_QWORD *)(a2 + 8);
      if (v7 == 1)
      {
        if (*(char *)(a2 + 23) >= 0)
          v8 = (_BYTE *)a2;
        else
          v8 = *(_BYTE **)a2;
        if (*v8 == 48)
          v9 = "Off";
        else
          v9 = "On";
      }
      else
      {
        v9 = "On";
      }
      return std::string::__assign_external(v5, v9);
    }
    return result;
  }
LABEL_19:
  v10 = *(unsigned __int8 *)(a2 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a2 + 8);
  if (v10 == 1)
  {
    v12 = v11 >= 0 ? (_BYTE *)a2 : *(_BYTE **)a2;
    if (*v12 == 48)
    {
      if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
      {
        v5->__r_.__value_.__l.__size_ = 8;
        v5 = (std::string *)v5->__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v5->__r_.__value_.__s + 23) = 8;
      }
      strcpy((char *)v5, "No limit");
    }
  }
  return result;
}

void sub_24B8FC22C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>(uint64_t a1, char *__s, const char **a3)
{
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_8:
    memmove(v8, __s, v7);
  *((_BYTE *)v8 + v7) = 0;
  v11 = (void *)(a1 + 24);
  v12 = *a3;
  v13 = strlen(*a3);
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    v11 = operator new(v15 + 1);
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = v16 | 0x8000000000000000;
    *(_QWORD *)(a1 + 24) = v11;
  }
  else
  {
    *(_BYTE *)(a1 + 47) = v13;
    if (!v13)
      goto LABEL_17;
  }
  memmove(v11, v12, v14);
LABEL_17:
  *((_BYTE *)v11 + v14) = 0;
  return a1;
}

void sub_24B8FC38C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count_vtbl **std::shared_ptr<TraceCAReporter>::shared_ptr[abi:ne180100]<TraceCAReporter,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1},void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_251CBE348;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  if (!a2)
    return a1;
  v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_24B8FC4B0(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1}::operator() const(TraceCAReporter*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_24B8FC4D0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<TraceCAReporter *,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter *)#1},std::allocator<TraceCAReporter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<TraceCAReporter *,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter *)#1},std::allocator<TraceCAReporter>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 16), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1}::operator() const(TraceCAReporter*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<TraceCAReporter *,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter *)#1},std::allocator<TraceCAReporter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15TraceCAReporterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15TraceCAReporterE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15TraceCAReporterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15TraceCAReporterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1}::operator() const(TraceCAReporter*)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  void **v2;
  void *v3;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  void **v7;

  if (!a1)
    return;
  v2 = (void **)a1[10];
  if (v2)
  {
    do
    {
      v7 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_17:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_17;
      }
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = (void *)a1[8];
  a1[8] = 0;
  if (v3)
    operator delete(v3);
  MEMORY[0x24BD2937C](a1 + 4);
  v4 = a1[3];
  if (v4)
    dispatch_release(v4);
  v5 = a1[2];
  if (v5)
    dispatch_release(v5);
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(char *)(v2 + 63) < 0)
      {
        operator delete(*(void **)(v2 + 40));
        if ((*(char *)(v2 + 39) & 0x80000000) == 0)
          goto LABEL_5;
      }
      else if ((*(char *)(v2 + 39) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 16));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned __int8 *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  unsigned __int8 *i;
  char *v27;
  std::string *v28;
  float v29;
  float v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD v43[2];
  unint64_t v44;

  v4 = (_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v7 = v6;
  }
  v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v43, (uint64_t *)a2, v7);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = v8;
      if (v8 >= v10)
        v12 = v8 % v10;
    }
    else
    {
      v12 = (v10 - 1) & v8;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v4[23];
        if (v15 >= 0)
          v16 = v4[23];
        else
          v16 = *((_QWORD *)v4 + 1);
        if (v15 < 0)
          v4 = *(_BYTE **)v4;
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v14[1];
            if (v22 == v9)
            {
              v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v14 + 39);
              else
                v24 = v14[3];
              if (v24 == v16)
              {
                v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v4, v14[3]))
                    return;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return;
                  for (i = v4; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    v25 = (const void **)((char *)v25 + 1);
                    if (!--v23)
                      return;
                  }
                }
              }
            }
            else if ((v22 & (v10 - 1)) != v12)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v9)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v4, v14[3]))
                  return;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return;
                for (j = v4; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  v20 = (const void **)((char *)v20 + 1);
                  if (!--v18)
                    return;
                }
              }
            }
          }
          else
          {
            if (v17 >= v10)
              v17 %= v10;
            if (v17 != v12)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    v12 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_51:
  v44 = 0xAAAAAAAAAAAAAA00;
  v27 = (char *)operator new(0x40uLL);
  v43[0] = v27;
  v43[1] = a1 + 16;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = v9;
  v28 = (std::string *)(v27 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v27 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v27 + 40) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v27 + 7) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  LOBYTE(v44) = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v10 && (float)(v30 * (float)v10) >= v29)
    goto LABEL_82;
  v31 = 1;
  if (v10 >= 3)
    v31 = (v10 & (v10 - 1)) != 0;
  v32 = v31 | (2 * v10);
  v33 = vcvtps_u32_f32(v29 / v30);
  if (v32 <= v33)
    prime = v33;
  else
    prime = v32;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v35 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v35)
    goto LABEL_66;
  if (prime < *(_QWORD *)&v35)
  {
    v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
    {
      v36 = std::__next_prime(v36);
    }
    else
    {
      v38 = 1 << -(char)__clz(v36 - 1);
      if (v36 >= 2)
        v36 = v38;
    }
    if (prime <= v36)
      prime = v36;
    if (prime < *(_QWORD *)&v35)
LABEL_66:
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<true>(a1, prime);
  }
  v10 = *(_QWORD *)(a1 + 8);
  v39 = v10 - 1;
  if ((v10 & (v10 - 1)) != 0)
  {
    if (v9 >= v10)
    {
      v12 = v9 % v10;
      v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
      v41 = (_QWORD *)v43[0];
      if (!v40)
        goto LABEL_85;
      goto LABEL_83;
    }
    v12 = v9;
LABEL_82:
    v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
    v41 = (_QWORD *)v43[0];
    if (!v40)
      goto LABEL_85;
    goto LABEL_83;
  }
  v12 = v39 & v9;
  v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v9));
  v41 = (_QWORD *)v43[0];
  if (!v40)
  {
LABEL_85:
    *v41 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v43[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = a1 + 16;
    if (*(_QWORD *)v43[0])
    {
      v42 = *(_QWORD *)(*(_QWORD *)v43[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v42 >= v10)
          v42 %= v10;
      }
      else
      {
        v42 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v43[0];
    }
    goto LABEL_91;
  }
LABEL_83:
  *v41 = *v40;
  *v40 = v43[0];
LABEL_91:
  ++*(_QWORD *)(a1 + 24);
}

void sub_24B8FCC90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_24B8FCCA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ClientGetLogServer(_QWORD *a1@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  _QWORD block[5];

  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZL19ClientLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_17;
  block[4] = &qword_2579B8BA8;
  if (_MergedGlobals_4 == -1)
  {
    v2 = unk_2579B8BB0;
    *a1 = qword_2579B8BA8;
    a1[1] = v2;
    if (!v2)
      return;
  }
  else
  {
    dispatch_once(&_MergedGlobals_4, block);
    v2 = unk_2579B8BB0;
    *a1 = qword_2579B8BA8;
    a1[1] = v2;
    if (!v2)
      return;
  }
  v3 = (unint64_t *)(v2 + 8);
  do
    v4 = __ldxr(v3);
  while (__stxr(v4 + 1, v3));
}

uint64_t ___ZL19ClientLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::ios_base *v14;
  uint64_t v15;
  _QWORD *v16;
  const char *v17;
  size_t v18;
  _QWORD *v19;
  std::__shared_weak_count_vtbl *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v30;
  void *__p;
  _OWORD v32[4];
  void *v33[2];
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  __p = operator new(0x20uLL);
  v32[0] = xmmword_24B954210;
  strcpy((char *)__p, "AppleBasebandManagerClientLog");
  ctu::LogServer::create();
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v46;
  v46 = 0uLL;
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)v2 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (*((_QWORD *)&v46 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v46 + 1) + 16))(*((_QWORD *)&v46 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v46 + 1));
      if ((SHIBYTE(v32[0]) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  if (SHIBYTE(v32[0]) < 0)
LABEL_11:
    operator delete(__p);
LABEL_12:
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34 = v9;
  v35 = 0xAAAAAAAAAAAAAAAALL;
  v45 = v9;
  v44 = v9;
  v43 = v9;
  v42 = v9;
  v41 = v9;
  v40 = v9;
  v39 = v9;
  v38 = v9;
  v37 = v9;
  v32[3] = v9;
  *(_OWORD *)v33 = v9;
  v32[1] = v9;
  v32[2] = v9;
  v32[0] = v9;
  v10 = MEMORY[0x24BEDB870];
  v11 = MEMORY[0x24BEDB870] + 64;
  v36 = MEMORY[0x24BEDB870] + 64;
  v12 = MEMORY[0x24BEDB800];
  v13 = *(void **)(MEMORY[0x24BEDB800] + 16);
  __p = *(void **)(MEMORY[0x24BEDB800] + 8);
  *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = v13;
  v14 = (std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3));
  std::ios_base::init(v14, v32);
  v14[1].__vftable = 0;
  v14[1].__fmtflags_ = -1;
  __p = (void *)(v10 + 24);
  v36 = v11;
  std::streambuf::basic_streambuf();
  v15 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v32[0] = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)v33 = 0u;
  v34 = 0u;
  LODWORD(v35) = 16;
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"/tmp/ABM.", 9);
  v17 = getprogname();
  v18 = strlen(v17);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  LOBYTE(v46) = 46;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&v46, 1);
  getpid();
  std::ostream::operator<<();
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_251CBAA00;
  *(_QWORD *)&v46 = v20;
  v21 = (std::__shared_weak_count *)operator new(0x20uLL);
  v21->__shared_owners_ = 0;
  v22 = (unint64_t *)&v21->__shared_owners_;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_251CBAA68;
  v21->__shared_weak_owners_ = 0;
  v21[1].__vftable = v20;
  *((_QWORD *)&v46 + 1) = v21;
  v30 = v21;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  ctu::LogServer::addWriter();
  if (v30)
  {
    v24 = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  ctu::LogServer::setEnabled(**(ctu::LogServer ***)(a1 + 32));
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  __p = *(void **)v12;
  *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(v12 + 24);
  *(_QWORD *)&v32[0] = v15 + 16;
  if (SBYTE7(v34) < 0)
    operator delete(v33[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x24BD29B5C](&v36);
}

void sub_24B8FD0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v17 - 80);
  std::ostringstream::~ostringstream((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_24B8FD1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void LogTracker::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  uint64_t v10[2];

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0xE0uLL);
  v5 = (uint64_t)v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v10[0] = v6;
  v10[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  LogTracker::LogTracker((uint64_t)v4, v10);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<LogTracker>::shared_ptr[abi:ne180100]<LogTracker,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1},void>(a2, v5);
  ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void sub_24B8FD27C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t LogTracker::LogTracker(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *initially_inactive;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE v20[16];
  _QWORD block[5];
  _BYTE v22[16];

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_251CC0DB8;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = off_251CBE710;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = off_251CBE710;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_251CBE3B8;
  *(_QWORD *)(a1 + 48) = &unk_251CBE428;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v20, "com.apple.telephony.abm", "logtracker.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_5;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (*(_QWORD *)algn_2579B8AE8)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (*(_QWORD *)algn_2579B8AE8)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v15 = dispatch_queue_create_with_target_V2("logtracker.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v15, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v15);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v15;
  if (v15)
  {
    dispatch_retain(v15);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v15);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_251CBE780;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 56) = &unk_251CB85F0;
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = v10;
  if (v10)
  {
    v16 = (unint64_t *)&v10->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_251CBE810;
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_251CBE810;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  *(_QWORD *)a1 = off_251CBE3B8;
  *(_QWORD *)(a1 + 48) = &unk_251CBE428;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  return a1;
}

void sub_24B8FD5D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  Service *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v4 - 64));
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v2);
  _Unwind_Resume(a1);
}

void sub_24B8FD614(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void LogTracker::~LogTracker(LogTracker *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  uint8_t v15[16];

  *(_QWORD *)this = off_251CBE3B8;
  *((_QWORD *)this + 6) = &unk_251CBE428;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v15, 2u);
  }
  v3 = *((_QWORD *)this + 26);
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
LABEL_9:
    v7 = *((_QWORD *)this + 22);
    if (!v7)
      goto LABEL_11;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  v7 = *((_QWORD *)this + 22);
  if (v7)
LABEL_10:
    dispatch_release(v7);
LABEL_11:
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*((_QWORD *)this + 20));
  *((_QWORD *)this + 6) = off_251CBE780;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v8 = *((_QWORD *)this + 18);
  if (v8)
    dispatch_release(v8);
  v9 = *((_QWORD *)this + 17);
  if (v9)
    dispatch_release(v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)this = off_251CC0DB8;
  v11 = *((_QWORD *)this + 3);
  if (v11)
  {
    v12 = *((_QWORD *)this + 4);
    v13 = (void *)*((_QWORD *)this + 3);
    if (v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0)
          operator delete(*(void **)(v12 - 24));
        v12 -= 24;
      }
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v11;
    operator delete(v13);
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
}

{
  void *v1;

  LogTracker::~LogTracker(this);
  operator delete(v1);
}

void `non-virtual thunk to'LogTracker::~LogTracker(LogTracker *this)
{
  LogTracker::~LogTracker((LogTracker *)((char *)this - 48));
}

{
  void *v1;

  LogTracker::~LogTracker((LogTracker *)((char *)this - 48));
  operator delete(v1);
}

const char *LogTracker::getName(LogTracker *this)
{
  return "logtracker.mod";
}

void LogTracker::initialize(_QWORD *a1, dispatch_object_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *v19;
  NSObject *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  _QWORD *v28;
  NSObject *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v13);
  }
  v14 = (std::__shared_weak_count *)a1[16];
  if (!v14 || (v15 = a1[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v16;
  v18 = operator new(0x20uLL);
  *v18 = v5;
  v18[1] = v7;
  v18[2] = a1;
  v18[3] = v13;
  v19 = (unint64_t *)&v17->__shared_owners_;
  v20 = a1[17];
  do
    v21 = __ldxr(v19);
  while (__stxr(v21 + 1, v19));
  v22 = operator new(0x18uLL);
  *v22 = v18;
  v22[1] = v15;
  v22[2] = v17;
  dispatch_async_f(v20, v22, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_0>(LogTracker::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v23 = __ldaxr(v19);
  while (__stlxr(v23 - 1, v19));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  v24 = (std::__shared_weak_count *)a1[16];
  if (!v24 || (v25 = a1[15], (v26 = std::__shared_weak_count::lock(v24)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v27 = v26;
  v28 = operator new(8uLL);
  *v28 = a1;
  v29 = a1[17];
  v30 = (unint64_t *)&v27->__shared_owners_;
  do
    v31 = __ldxr(v30);
  while (__stxr(v31 + 1, v30));
  v32 = operator new(0x18uLL);
  *v32 = v28;
  v32[1] = v25;
  v32[2] = v27;
  dispatch_async_f(v29, v32, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_1>(LogTracker::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke);
  do
    v33 = __ldaxr(v30);
  while (__stlxr(v33 - 1, v30));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void LogTracker::shutdown(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::shutdown(dispatch::group_session)::$_0>(LogTracker::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void LogTracker::dumpLogInternal_sync(uint64_t a1, xpc_object_t *a2, const void **a3)
{
  const void *v6;
  size_t v7;
  void *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int IsInternalBuild;
  NSObject *v15;
  NSObject *global_queue;
  xpc_object_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  xpc_object_t v28;
  void *v29;
  const void *v30;
  size_t v31;
  std::string::size_type v32;
  std::string *v33;
  xpc_object_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  xpc_object_t value;
  const char *v39;
  uint64_t v40;
  void *__p;
  char v42;
  const void *v43;
  xpc_object_t v44;
  _QWORD aBlock[6];
  std::__shared_weak_count *v46;
  void *v47;
  xpc_object_t v48;
  _QWORD block[5];
  dispatch_group_t group;
  xpc_object_t object;
  BOOL v52;
  void *__dst[2];
  unint64_t v54;
  BOOL v55;
  std::string v56;

  v55 = 0;
  v6 = (const void *)*MEMORY[0x24BE04F88];
  v7 = strlen((const char *)*MEMORY[0x24BE04F88]);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    v54 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_8;
  }
  HIBYTE(v54) = v7;
  v9 = __dst;
  if (v7)
LABEL_8:
    memmove(v9, v6, (size_t)v8);
  *((_BYTE *)v8 + (_QWORD)v9) = 0;
  memset(&v56, 0, sizeof(v56));
  if (prop::tailspin::get((char *)__dst, (uint64_t)&v56))
    util::convert<BOOL>(&v56, &v55, 0);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v56.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v54) & 0x80000000) == 0)
    {
LABEL_13:
      v12 = MEMORY[0x24BDAC760];
      v13 = "E";
      if (v55)
        goto LABEL_14;
LABEL_23:
      v55 = 0;
      goto LABEL_30;
    }
  }
  else if ((SHIBYTE(v54) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(__dst[0]);
  v12 = MEMORY[0x24BDAC760];
  v13 = "N3ctu14SharedLoggableI14ResetDetectionNS_10LoggerBaseINSt3__110shared_ptrINS_9LogServerEEEEEEE" + 93;
  if (!v55)
    goto LABEL_23;
LABEL_14:
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  v55 = IsInternalBuild;
  if (IsInternalBuild)
  {
    v15 = *(NSObject **)(a1 + 208);
    if (v15)
    {
      dispatch_retain(*(dispatch_object_t *)(a1 + 208));
      dispatch_group_enter(v15);
    }
    global_queue = dispatch_get_global_queue(21, 0);
    block[0] = v12;
    block[1] = *((_QWORD *)v13 + 450);
    block[2] = ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
    block[3] = &__block_descriptor_57_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE_e5_v8__0l;
    block[4] = a1;
    group = v15;
    if (v15)
    {
      dispatch_retain(v15);
      dispatch_group_enter(group);
    }
    v17 = *a2;
    object = v17;
    if (v17)
      xpc_retain(v17);
    else
      object = xpc_null_create();
    v52 = v55;
    dispatch_async(global_queue, block);
    xpc_release(object);
    object = 0;
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    if (v15)
    {
      dispatch_group_leave(v15);
      dispatch_release(v15);
    }
  }
LABEL_30:
  v18 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v18 || (v19 = *(_QWORD *)(a1 + 120), (v20 = std::__shared_weak_count::lock(v18)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v21 = v20;
  p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v21);
  }
  aBlock[0] = v12;
  aBlock[1] = *((_QWORD *)v13 + 450);
  aBlock[2] = ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke_3;
  aBlock[3] = &__block_descriptor_72_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE_e28_v20__0i8_dict__object__v__12l;
  aBlock[4] = a1;
  aBlock[5] = v19;
  v46 = v21;
  do
    v26 = __ldxr(p_shared_weak_owners);
  while (__stxr(v26 + 1, p_shared_weak_owners));
  if (*a3)
  {
    v27 = _Block_copy(*a3);
    v28 = *a2;
    v47 = v27;
    v48 = v28;
    if (v28)
    {
LABEL_42:
      xpc_retain(v28);
      goto LABEL_45;
    }
  }
  else
  {
    v28 = *a2;
    v47 = 0;
    v48 = v28;
    if (v28)
      goto LABEL_42;
  }
  v48 = xpc_null_create();
LABEL_45:
  v29 = _Block_copy(aBlock);
  v30 = (const void *)*MEMORY[0x24BE05690];
  v31 = strlen((const char *)*MEMORY[0x24BE05690]);
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v32 = v31;
  if (v31 >= 0x17)
  {
    v36 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v36 = v31 | 7;
    v37 = v36 + 1;
    v33 = (std::string *)operator new(v36 + 1);
    v56.__r_.__value_.__l.__size_ = v32;
    v56.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
  }
  else
  {
    *((_BYTE *)&v56.__r_.__value_.__s + 23) = v31;
    v33 = &v56;
    if (!v31)
    {
      v56.__r_.__value_.__s.__data_[0] = 0;
      v34 = *a2;
      v44 = v34;
      if (v34)
        goto LABEL_49;
LABEL_55:
      v34 = xpc_null_create();
      v44 = v34;
      if (v29)
        goto LABEL_50;
      goto LABEL_56;
    }
  }
  memmove(v33, v30, v32);
  v33->__r_.__value_.__s.__data_[v32] = 0;
  v34 = *a2;
  v44 = v34;
  if (!v34)
    goto LABEL_55;
LABEL_49:
  xpc_retain(v34);
  if (v29)
  {
LABEL_50:
    v35 = _Block_copy(v29);
    goto LABEL_57;
  }
LABEL_56:
  v35 = 0;
LABEL_57:
  v43 = v35;
  Service::runCommand(a1, (uint64_t)&v56, &v44, &v43);
  if (v35)
    _Block_release(v35);
  xpc_release(v34);
  v44 = 0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE053F0]);
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value)
    xpc_retain(value);
  else
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  v40 = xpc::dyn_cast_or_default((xpc *)&v56, (const object *)"", v39);
  LogTracker::sendUserNotificationForDump(v40, (const void **)&__p);
  if (v42 < 0)
    operator delete(__p);
  xpc_release(v56.__r_.__value_.__l.__data_);
  if (v29)
    _Block_release(v29);
  xpc_release(v48);
  v48 = 0;
  if (v47)
    _Block_release(v47);
  if (v46)
    std::__shared_weak_count::__release_weak(v46);
  std::__shared_weak_count::__release_weak(v21);
}

void sub_24B8FDFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,void *aBlock,xpc_object_t object)
{
  std::__shared_weak_count *v26;
  const void *v27;
  uint64_t v28;

  if (a15 < 0)
    operator delete(__p);
  xpc_release(*(xpc_object_t *)(v28 - 104));
  if (v27)
    _Block_release(v27);
  xpc_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (a24)
    std::__shared_weak_count::__release_weak(a24);
  std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(a1);
}

void sub_24B8FE09C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 81) < 0)
    operator delete(*(void **)(v1 - 104));
  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  _Unwind_Resume(exception_object);
}

void ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  xpc_object_t v4;
  xpc_object_t v5;
  NSObject *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 208);
  v6 = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  v4 = *(xpc_object_t *)(a1 + 48);
  v5 = v4;
  if (v4)
  {
    xpc_retain(v4);
  }
  else
  {
    v4 = xpc_null_create();
    v5 = v4;
  }
  LogTracker::diagnosticToolsLog_sync(v2, &v6, &v5, *(unsigned __int8 *)(a1 + 56));
  xpc_release(v4);
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_24B8FE17C(_Unwind_Exception *a1)
{
  NSObject *v1;
  void *v2;

  xpc_release(v2);
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

void LogTracker::diagnosticToolsLog_sync(uint64_t a1, NSObject **a2, xpc_object_t *a3, int a4)
{
  xpc_object_t value;
  uint64_t v9;
  xpc_object_t v10;
  const char *v11;
  NSObject *v12;
  const char *v13;
  unsigned __int8 v14;
  void **v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_weak_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  NSObject *v32;
  void *v33;
  NSObject *v34;
  xpc_object_t v35;
  uint64_t v36;
  xpc_object_t v37;
  NSObject *v38;
  xpc_object_t v39;
  int v40;
  xpc_object_t v41;
  const char *v42;
  uint8_t *v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  const void *v48;
  size_t v49;
  std::string::size_type v50;
  std::string *p_dst;
  uint64_t v52;
  uint64_t v53;
  const std::string::value_type *v54;
  std::string::size_type v55;
  std::string *v56;
  __int128 v57;
  const std::string::value_type *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  const void *v62;
  size_t v63;
  size_t v64;
  void *p_p;
  uint64_t v66;
  uint64_t v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  const char *p_object;
  xpc_object_t v73;
  xpc_object_t v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  void *v79;
  NSObject *v80;
  xpc_object_t v81;
  void *__p;
  size_t v83;
  int64_t v84;
  std::string __dst;
  std::string v86;
  std::string v87;
  __int128 object;
  int64_t v89;
  _QWORD aBlock[6];
  std::__shared_weak_count *v91;
  dispatch_group_t group;
  void *v93;
  dispatch_object_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t v97;
  unint64_t v98;
  void *v99[3];
  void *v100[3];
  uint8_t buf[24];
  void *v102;
  uint64_t *v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  memset(v100, 170, sizeof(v100));
  value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x24BE05090]);
  *(_QWORD *)&object = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&object = xpc_null_create();
  Timestamp::Timestamp((Timestamp *)v99);
  Timestamp::asString(v9, 0, 9, buf);
  xpc::dyn_cast_or_default();
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v99, (_QWORD *)v99[1]);
  xpc_release((xpc_object_t)object);
  memset(v99, 170, sizeof(v99));
  v10 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x24BE05268]);
  *(_QWORD *)buf = v10;
  if (v10)
    xpc_retain(v10);
  else
    *(_QWORD *)buf = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)buf, (const object *)*MEMORY[0x24BDFC720], v11);
  xpc_release(*(xpc_object_t *)buf);
  v12 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = "NO";
    if (a4)
      v13 = "YES";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v13;
    _os_log_impl(&dword_24B855000, v12, OS_LOG_TYPE_DEFAULT, "#I Tailspin: %s", buf, 0xCu);
    v12 = *(NSObject **)(a1 + 88);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
LABEL_13:
      v97 = 0xAAAAAAAAAAAAAAAALL;
      v98 = 0xAAAAAAAAAAAAAAAALL;
      if ((v14 & 1) != 0)
        goto LABEL_19;
      goto LABEL_150;
    }
  }
  else if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    goto LABEL_13;
  }
  v15 = v99;
  if (SHIBYTE(v99[2]) < 0)
    v15 = (void **)v99[0];
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)&buf[4] = v15;
  _os_log_impl(&dword_24B855000, v12, OS_LOG_TYPE_DEFAULT, "#I DumpPath: %s", buf, 0xCu);
  v97 = 0xAAAAAAAAAAAAAAAALL;
  v98 = 0xAAAAAAAAAAAAAAAALL;
  if ((v16 & 1) == 0)
  {
LABEL_150:
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
    }
  }
LABEL_19:
  v17 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v102 = &__block_descriptor_tmp_13_5;
  v103 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v18 = *(_QWORD *)algn_2579B8AE8;
    v95 = GetABMLogServer(void)::sLogServer;
    v96 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_23;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v18 = *(_QWORD *)algn_2579B8AE8;
    v95 = GetABMLogServer(void)::sLogServer;
    v96 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_23;
  }
  v19 = (unint64_t *)(v18 + 8);
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
LABEL_23:
  abm::HelperClient::create();
  if (v96)
  {
    p_shared_owners = &v96->__shared_owners_;
    do
      v22 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v22 - 1, (unint64_t *)p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v23 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v23 || (v24 = *(_QWORD *)(a1 + 120), (v25 = std::__shared_weak_count::lock(v23)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v26 = v25;
  p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
  do
    v28 = __ldxr(p_shared_weak_owners);
  while (__stxr(v28 + 1, p_shared_weak_owners));
  v29 = (unint64_t *)&v25->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v26);
  }
  v93 = (void *)0xAAAAAAAAAAAAAAAALL;
  v94 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = v17;
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker23diagnosticToolsLog_syncEN8dispatch13group_sessionEN3xpc4dictEb_block_invoke;
  aBlock[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  aBlock[5] = v24;
  v91 = v26;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v32 = *a2;
  group = v32;
  if (v32)
  {
    dispatch_retain(v32);
    dispatch_group_enter(group);
  }
  v33 = _Block_copy(aBlock);
  v34 = *(NSObject **)(a1 + 136);
  if (v34)
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  v93 = v33;
  v94 = v34;
  if (a4)
  {
    v35 = xpc_dictionary_create(0, 0, 0);
    v36 = MEMORY[0x24BDACFA0];
    if (v35 || (v35 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x24BD2A468](v35) == v36)
      {
        xpc_retain(v35);
        v37 = v35;
      }
      else
      {
        v37 = xpc_null_create();
      }
    }
    else
    {
      v37 = xpc_null_create();
      v35 = 0;
    }
    xpc_release(v35);
    if (MEMORY[0x24BD2A468](v37) != v36)
    {
      v38 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_24B855000, v38, OS_LOG_TYPE_ERROR, "Failed to create an input dictionary", buf, 2u);
      }
LABEL_127:
      xpc_release(v37);
      v34 = v94;
      goto LABEL_128;
    }
    v39 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x24BE05490]);
    *(_QWORD *)buf = v39;
    if (v39)
      xpc_retain(v39);
    else
      *(_QWORD *)buf = xpc_null_create();
    v40 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    xpc_release(*(xpc_object_t *)buf);
    memset(buf, 170, sizeof(buf));
    v41 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x24BE053F0]);
    *(_QWORD *)&object = v41;
    if (v41)
      xpc_retain(v41);
    else
      *(_QWORD *)&object = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v42);
    xpc_release((xpc_object_t)object);
    if ((buf[23] & 0x80u) == 0)
      v43 = buf;
    else
      v43 = *(uint8_t **)buf;
    v44 = xpc_string_create((const char *)v43);
    if (!v44)
      v44 = xpc_null_create();
    xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x24BDFC850], v44);
    v45 = xpc_null_create();
    xpc_release(v44);
    xpc_release(v45);
    v46 = xpc_int64_create(v40);
    if (!v46)
      v46 = xpc_null_create();
    xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x24BDFC798], v46);
    v47 = xpc_null_create();
    xpc_release(v46);
    xpc_release(v47);
    v48 = (const void *)*MEMORY[0x24BDFC718];
    v49 = strlen((const char *)*MEMORY[0x24BDFC718]);
    if (v49 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v50 = v49;
    if (v49 >= 0x17)
    {
      v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v49 | 7) != 0x17)
        v52 = v49 | 7;
      v53 = v52 + 1;
      p_dst = (std::string *)operator new(v52 + 1);
      __dst.__r_.__value_.__l.__size_ = v50;
      __dst.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v49;
      p_dst = &__dst;
      if (!v49)
      {
LABEL_73:
        p_dst->__r_.__value_.__s.__data_[v50] = 0;
        if (SHIBYTE(v99[2]) >= 0)
          v54 = (const std::string::value_type *)v99;
        else
          v54 = (const std::string::value_type *)v99[0];
        if (SHIBYTE(v99[2]) >= 0)
          v55 = HIBYTE(v99[2]);
        else
          v55 = (std::string::size_type)v99[1];
        v56 = std::string::insert(&__dst, 0, v54, v55);
        v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v86.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v100[2]) >= 0)
          v58 = (const std::string::value_type *)v100;
        else
          v58 = (const std::string::value_type *)v100[0];
        if (SHIBYTE(v100[2]) >= 0)
          v59 = HIBYTE(v100[2]);
        else
          v59 = (std::string::size_type)v100[1];
        v60 = std::string::append(&v86, v58, v59);
        v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        v87.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v61;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        v62 = (const void *)*MEMORY[0x24BDFC708];
        v63 = strlen((const char *)*MEMORY[0x24BDFC708]);
        if (v63 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v64 = v63;
        if (v63 >= 0x17)
        {
          v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v63 | 7) != 0x17)
            v66 = v63 | 7;
          v67 = v66 + 1;
          p_p = operator new(v66 + 1);
          v83 = v64;
          v84 = v67 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v84) = v63;
          p_p = &__p;
          if (!v63)
          {
LABEL_93:
            *((_BYTE *)p_p + v64) = 0;
            if (v84 >= 0)
              v68 = (const std::string::value_type *)&__p;
            else
              v68 = (const std::string::value_type *)__p;
            if (v84 >= 0)
              v69 = HIBYTE(v84);
            else
              v69 = v83;
            v70 = std::string::append(&v87, v68, v69);
            v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
            v89 = v70->__r_.__value_.__r.__words[2];
            object = v71;
            v70->__r_.__value_.__l.__size_ = 0;
            v70->__r_.__value_.__r.__words[2] = 0;
            v70->__r_.__value_.__r.__words[0] = 0;
            if (v89 >= 0)
              p_object = (const char *)&object;
            else
              p_object = (const char *)object;
            v73 = xpc_string_create(p_object);
            if (!v73)
              v73 = xpc_null_create();
            xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x24BDFC788], v73);
            v74 = xpc_null_create();
            xpc_release(v73);
            xpc_release(v74);
            if (SHIBYTE(v89) < 0)
            {
              operator delete((void *)object);
              if ((SHIBYTE(v84) & 0x80000000) == 0)
              {
LABEL_106:
                if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_107;
                goto LABEL_114;
              }
            }
            else if ((SHIBYTE(v84) & 0x80000000) == 0)
            {
              goto LABEL_106;
            }
            operator delete(__p);
            if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_107:
              if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_108;
              goto LABEL_115;
            }
LABEL_114:
            operator delete(v87.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_108:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_109;
              goto LABEL_116;
            }
LABEL_115:
            operator delete(v86.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_109:
              v81 = v37;
              if (v37)
                goto LABEL_110;
              goto LABEL_117;
            }
LABEL_116:
            operator delete(__dst.__r_.__value_.__l.__data_);
            v81 = v37;
            if (v37)
            {
LABEL_110:
              xpc_retain(v37);
              v75 = v93;
              if (!v93)
                goto LABEL_119;
              goto LABEL_118;
            }
LABEL_117:
            v81 = xpc_null_create();
            v75 = v93;
            if (!v93)
            {
LABEL_119:
              v79 = v75;
              v80 = v94;
              if (v94)
                dispatch_retain(v94);
              abm::HelperClient::perform();
              if (v80)
                dispatch_release(v80);
              if (v79)
                _Block_release(v79);
              xpc_release(v81);
              if ((char)buf[23] < 0)
                operator delete(*(void **)buf);
              goto LABEL_127;
            }
LABEL_118:
            v75 = _Block_copy(v75);
            goto LABEL_119;
          }
        }
        memmove(p_p, v62, v64);
        goto LABEL_93;
      }
    }
    memmove(p_dst, v48, v50);
    goto LABEL_73;
  }
LABEL_128:
  if (v34)
    dispatch_release(v34);
  if (v93)
    _Block_release(v93);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v91)
    std::__shared_weak_count::__release_weak(v91);
  std::__shared_weak_count::__release_weak(v26);
  v76 = (std::__shared_weak_count *)v98;
  if (!v98)
    goto LABEL_141;
  v77 = (unint64_t *)(v98 + 8);
  do
    v78 = __ldaxr(v77);
  while (__stlxr(v78 - 1, v77));
  if (!v78)
  {
    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
    std::__shared_weak_count::__release_weak(v76);
    if ((SHIBYTE(v99[2]) & 0x80000000) == 0)
    {
LABEL_142:
      if ((SHIBYTE(v100[2]) & 0x80000000) == 0)
        return;
LABEL_146:
      operator delete(v100[0]);
      return;
    }
  }
  else
  {
LABEL_141:
    if ((SHIBYTE(v99[2]) & 0x80000000) == 0)
      goto LABEL_142;
  }
  operator delete(v99[0]);
  if (SHIBYTE(v100[2]) < 0)
    goto LABEL_146;
}

void sub_24B8FEC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,xpc_object_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49,dispatch_group_t group)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

xpc_object_t __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  void *v6;
  xpc_object_t result;

  v4 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = *(NSObject **)(a1 + 40);
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
    return xpc_retain(v6);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 40);
    if (v3)
      dispatch_release(v3);
  }
}

void ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke_3(_QWORD *a1, int a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  xpc_object_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _DWORD *v21;
  xpc_object_t v22;
  NSObject *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a3;
  if (*a3)
  {
    xpc_retain(*a3);
    v14 = (const void *)a1[7];
    if (v14)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = (const void *)a1[7];
    if (v14)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (xpc_object_t)a1[8];
      if (v16)
        goto LABEL_12;
LABEL_16:
      v16 = xpc_null_create();
      v17 = (std::__shared_weak_count *)v7[16];
      if (!v17)
        goto LABEL_33;
      goto LABEL_17;
    }
  }
  v15 = 0;
  v16 = (xpc_object_t)a1[8];
  if (!v16)
    goto LABEL_16;
LABEL_12:
  xpc_retain(v16);
  v17 = (std::__shared_weak_count *)v7[16];
  if (!v17)
LABEL_33:
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_17:
  v18 = v7[15];
  v19 = std::__shared_weak_count::lock(v17);
  if (!v19)
    goto LABEL_33;
  v20 = v19;
  v21 = operator new(0x28uLL);
  *(_QWORD *)v21 = v7;
  v21[2] = a2;
  *((_QWORD *)v21 + 2) = v13;
  v22 = xpc_null_create();
  if (v15)
  {
    *((_QWORD *)v21 + 3) = _Block_copy(v15);
    *((_QWORD *)v21 + 4) = v16;
    if (v16)
    {
LABEL_20:
      xpc_retain(v16);
      goto LABEL_23;
    }
  }
  else
  {
    *((_QWORD *)v21 + 3) = 0;
    *((_QWORD *)v21 + 4) = v16;
    if (v16)
      goto LABEL_20;
  }
  *((_QWORD *)v21 + 4) = xpc_null_create();
LABEL_23:
  v23 = v7[17];
  v24 = (unint64_t *)&v20->__shared_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  v26 = operator new(0x18uLL);
  *v26 = v21;
  v26[1] = v18;
  v26[2] = v20;
  dispatch_async_f(v23, v26, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZNS3_20dumpLogInternal_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_);
  do
    v27 = __ldaxr(v24);
  while (__stlxr(v27 - 1, v24));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  xpc_release(v16);
  if (v15)
    _Block_release(v15);
  xpc_release(v22);
}

xpc_object_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  const void *v7;
  void *v8;
  void *v9;
  xpc_object_t result;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (const void *)a2[7];
  if (v7)
  {
    v8 = _Block_copy(v7);
    v9 = (void *)a2[8];
    a1[7] = v8;
    a1[8] = v9;
    if (v9)
      return xpc_retain(v9);
  }
  else
  {
    v9 = (void *)a2[8];
    a1[7] = 0;
    a1[8] = v9;
    if (v9)
      return xpc_retain(v9);
  }
  result = xpc_null_create();
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void LogTracker::sendUserNotificationForDump(uint64_t a1, const void **a2)
{
  const void *v3;
  size_t v4;
  size_t v5;
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int IsCarrierBuild;
  size_t v11;
  size_t v12;
  int v13;
  size_t v14;
  size_t v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  const void *v21;
  int v22;
  std::string v23;
  void *v24[2];
  uint64_t v25;
  std::string v26;
  _BYTE v27[24];
  std::string __p;
  _BYTE v29[48];
  void **__dst;
  unint64_t v31;
  unint64_t v32;

  v3 = (const void *)*MEMORY[0x24BE04E90];
  v4 = strlen((const char *)*MEMORY[0x24BE04E90]);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    v31 = v5;
    v32 = v8 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v32) = v4;
  p_dst = (void **)&__dst;
  if (v4)
LABEL_8:
    memmove(p_dst, v3, v5);
  *((_BYTE *)p_dst + v5) = 0;
  memset(&__p, 0, sizeof(__p));
  v9 = -1431655766;
  if (prop::ttr::get((char *)&__dst, (uint64_t)&__p))
  {
    *(_DWORD *)v27 = -1431655766;
    if (util::convert<int>(&__p, v27, 0))
      v9 = *(_DWORD *)v27;
    else
      v9 = -1431655766;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      goto LABEL_15;
  }
  else if ((SHIBYTE(v32) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(__dst);
LABEL_15:
  v31 = 0xAAAAAAAAAA005D73;
  v32 = 0xAAAAAAAAAAAAAAALL;
  __dst = *(void ***)"[Settings]";
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    IsCarrierBuild = 1;
  else
    IsCarrierBuild = TelephonyUtilIsCarrierBuild();
  if (IsCarrierBuild && v9)
  {
    v11 = *((unsigned __int8 *)a2 + 23);
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
    {
      if (v11 >= 0xA)
        v12 = 10;
      else
        v12 = *((unsigned __int8 *)a2 + 23);
      v13 = memcmp(a2, &__dst, v12);
      if (v12 != 10)
        return;
LABEL_32:
      if (v13)
        return;
      memset(&v29[16], 0, 32);
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
      v29[23] = 22;
      qmemcpy(v29, "Telephony_Dump_Started", 22);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&__p, "LogDump");
      if ((v11 & 0x80) != 0)
      {
        if (a2[1])
        {
LABEL_35:
          if ((v11 & 0x80u) == 0)
            v15 = v11;
          else
            v15 = (size_t)a2[1];
          v16 = v15 + 8;
          memset(v27, 170, sizeof(v27));
          if (v15 + 8 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v16 >= 0x17)
          {
            v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v16 | 7) != 0x17)
              v18 = v16 | 7;
            v19 = v18 + 1;
            v20 = operator new(v18 + 1);
            *(_QWORD *)&v27[8] = v15 + 8;
            *(_QWORD *)&v27[16] = v19 | 0x8000000000000000;
            *(_QWORD *)v27 = v20;
            *v20 = 0x203A6E6F73616552;
            v17 = v20 + 1;
          }
          else
          {
            v17 = &v27[8];
            *(_QWORD *)&v27[16] = 0;
            v27[23] = v15 + 8;
            *(_OWORD *)v27 = 0x203A6E6F73616552uLL;
            if (!v15)
              goto LABEL_51;
          }
          if ((v11 & 0x80u) == 0)
            v21 = a2;
          else
            v21 = *a2;
          memmove(v17, v21, v15);
LABEL_51:
          v17[v15] = 0;
          *(_QWORD *)&v29[40] = *(_QWORD *)&v27[16];
          *(_OWORD *)&v29[24] = *(_OWORD *)v27;
          v23 = __p;
          *(_OWORD *)v24 = *(_OWORD *)v29;
          v25 = *(_QWORD *)&v29[16];
          if ((v27[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)&v29[24], *(std::string::size_type *)&v29[32]);
            v22 = 1;
LABEL_54:
            support::ui::showNotification(0, (uint64_t)&v23, 0);
            if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v26.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v25) & 0x80000000) == 0)
              {
LABEL_56:
                if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_57;
                goto LABEL_62;
              }
            }
            else if ((SHIBYTE(v25) & 0x80000000) == 0)
            {
              goto LABEL_56;
            }
            operator delete(v24[0]);
            if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_57:
              if (!v22)
                return;
              goto LABEL_58;
            }
LABEL_62:
            operator delete(v23.__r_.__value_.__l.__data_);
            if (!v22)
              return;
LABEL_58:
            operator delete(*(void **)&v29[24]);
            return;
          }
LABEL_52:
          v22 = 0;
          v26 = *(std::string *)&v29[24];
          goto LABEL_54;
        }
      }
      else if (v11)
      {
        goto LABEL_35;
      }
      v23 = __p;
      *(_OWORD *)v24 = *(_OWORD *)v29;
      v25 = *(_QWORD *)&v29[16];
      goto LABEL_52;
    }
    if ((unint64_t)a2[1] >= 0xA)
      v14 = 10;
    else
      v14 = (size_t)a2[1];
    v13 = memcmp(*a2, &__dst, v14);
    if (v14 == 10)
      goto LABEL_32;
  }
}

void sub_24B8FF6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a14 & 0x80000000) == 0)
  {
LABEL_3:
    support::ui::NotificationInfo::~NotificationInfo(&a27);
    _Unwind_Resume(a1);
  }
  operator delete(a9);
  support::ui::NotificationInfo::~NotificationInfo(&a27);
  _Unwind_Resume(a1);
}

void sub_24B8FF708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_24B8FF71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  support::ui::NotificationInfo::~NotificationInfo((void **)&a9);
  support::ui::NotificationInfo::~NotificationInfo(&a21);
  _Unwind_Resume(a1);
}

void sub_24B8FF73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 81) < 0)
    operator delete(*(void **)(v26 - 104));
  _Unwind_Resume(exception_object);
}

void LogTracker::moveBasebandServicesLog_sync(_QWORD *a1, NSObject **a2, xpc_object_t *a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t value;
  const char *p_p;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  const char *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_weak_owners;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void *v29;
  unint64_t v30;
  NSObject *v31;
  void *v32;
  NSObject *v33;
  unsigned __int8 v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  void *v40;
  unint64_t v41;
  void *v42;
  NSObject *v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  xpc_object_t object;
  xpc_object_t objecta;
  _QWORD aBlock[5];
  std::__shared_weak_count *v49;
  dispatch_group_t group;
  void *__p;
  dispatch_object_t v52;
  char v53;
  void *block;
  uint64_t v55;
  void (*v56)(uint64_t);
  void *v57;
  uint64_t *v58;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6 || (v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v6) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v6);
      v7 = v6;
    }
    else
    {
      v7 = xpc_null_create();
    }
  }
  else
  {
    v7 = xpc_null_create();
    v6 = 0;
  }
  xpc_release(v6);
  v8 = xpc_array_create(0, 0);
  if (v8 || (v8 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v8) == MEMORY[0x24BDACF78])
    {
      xpc_retain(v8);
      v9 = v8;
    }
    else
    {
      v9 = xpc_null_create();
    }
  }
  else
  {
    v9 = xpc_null_create();
    v8 = 0;
  }
  xpc_release(v8);
  v10 = xpc_int64_create(7);
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x24BDFC8D8], v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x24BE05268]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  block = 0;
  v55 = 0;
  v56 = 0;
  xpc::dyn_cast_or_default();
  if (v53 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v14 = xpc_string_create(p_p);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x24BDFC7E8], v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  if (v53 < 0)
    operator delete(__p);
  xpc_release(object);
  v16 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x24BE05090]);
  objecta = v16;
  if (v16)
    xpc_retain(v16);
  else
    objecta = xpc_null_create();
  block = 0;
  v55 = 0;
  v56 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v56) < 0)
    operator delete(block);
  if (v53 >= 0)
    v17 = (const char *)&__p;
  else
    v17 = (const char *)__p;
  v18 = xpc_string_create(v17);
  if (!v18)
    v18 = xpc_null_create();
  xpc_array_append_value(v9, v18);
  xpc_release(v18);
  if (v53 < 0)
    operator delete(__p);
  xpc_release(objecta);
  if (v9)
  {
    xpc_retain(v9);
    v19 = v9;
  }
  else
  {
    v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x24BDFC858], v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  v21 = (std::__shared_weak_count *)a1[16];
  if (!v21 || (v22 = a1[15], (v23 = std::__shared_weak_count::lock(v21)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v24 = v23;
  p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
  do
    v26 = __ldxr(p_shared_weak_owners);
  while (__stxr(v26 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v24);
  }
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  v52 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v29 = (void *)MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker28moveBasebandServicesLog_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_32c35_ZTSNSt3__18weak_ptrI10LogTrackerEE48c31_ZTSKN8dispatch13group_sessionE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = v22;
  v49 = v24;
  do
    v30 = __ldxr(p_shared_weak_owners);
  while (__stxr(v30 + 1, p_shared_weak_owners));
  v31 = *a2;
  group = v31;
  if (v31)
  {
    dispatch_retain(v31);
    dispatch_group_enter(group);
  }
  v32 = _Block_copy(aBlock);
  v33 = a1[17];
  if (v33)
    dispatch_retain(v33);
  __p = v32;
  v52 = v33;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  block = v29;
  v55 = 0x40000000;
  v56 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v57 = &__block_descriptor_tmp_13_5;
  v58 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v35 = *(_QWORD *)algn_2579B8AE8;
    v45 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_59;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v35 = *(_QWORD *)algn_2579B8AE8;
    v45 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_59;
  }
  v36 = (unint64_t *)(v35 + 8);
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
LABEL_59:
  abm::HelperClient::create();
  if (!v45)
    goto LABEL_63;
  v38 = (unint64_t *)&v45->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (v39)
  {
LABEL_63:
    v44 = v7;
    if (v7)
      goto LABEL_64;
LABEL_67:
    v44 = xpc_null_create();
    v40 = __p;
    if (!__p)
      goto LABEL_69;
    goto LABEL_68;
  }
  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
  std::__shared_weak_count::__release_weak(v45);
  v44 = v7;
  if (!v7)
    goto LABEL_67;
LABEL_64:
  xpc_retain(v7);
  v40 = __p;
  if (__p)
LABEL_68:
    v40 = _Block_copy(v40);
LABEL_69:
  v42 = v40;
  v43 = v52;
  if (v52)
    dispatch_retain(v52);
  abm::HelperClient::perform();
  if (v43)
    dispatch_release(v43);
  if (v42)
    _Block_release(v42);
  xpc_release(v44);
  do
    v41 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v41 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v41)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (v52)
    dispatch_release(v52);
  if (__p)
    _Block_release(__p);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v49)
    std::__shared_weak_count::__release_weak(v49);
  std::__shared_weak_count::__release_weak(v24);
  xpc_release(v9);
  xpc_release(v7);
}

void sub_24B8FFDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, char a12, uint64_t a13, xpc_object_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,dispatch_group_t group,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  std::__shared_weak_count *v30;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  xpc_release(object);
  object = 0;
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&__p);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (a21)
    std::__shared_weak_count::__release_weak(a21);
  std::__shared_weak_count::__release_weak(v30);
  xpc_release(v29);
  xpc_release(v28);
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker28moveBasebandServicesLog_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    v2 = std::__shared_weak_count::lock(v1);
    if (v2)
    {
      v3 = v2;
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void __copy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10LogTrackerEE48c31_ZTSKN8dispatch13group_sessionE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[6];
  a1[6] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[6];
    if (v7)
      dispatch_group_enter(v7);
  }
}

void __destroy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10LogTrackerEE48c31_ZTSKN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 48);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

uint64_t dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void LogTracker::getConfiguration(LogTracker *this@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t v6;
  NSObject *v7;
  const void *v8;
  size_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  size_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const char *v24;
  xpc_object_t v25;
  xpc_object_t v26;
  _BYTE *v27;
  const void *v28;
  size_t v29;
  std::string::size_type v30;
  std::string *p_p;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  _BOOL4 v35;
  const char *v36;
  xpc_object_t v37;
  xpc_object_t v38;
  const void *v39;
  size_t v40;
  size_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  const char *v46;
  xpc_object_t v47;
  xpc_object_t v48;
  _BYTE *v49;
  const void *v50;
  size_t v51;
  std::string::size_type v52;
  std::string *v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL4 v56;
  _BOOL4 v57;
  const char *v58;
  xpc_object_t v59;
  xpc_object_t v60;
  size_t v61;
  size_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  const char *v67;
  xpc_object_t v68;
  xpc_object_t v69;
  size_t v70;
  size_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  const char *v76;
  xpc_object_t v77;
  xpc_object_t v78;
  size_t v79;
  size_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  const char *v85;
  xpc_object_t v86;
  xpc_object_t v87;
  uint64_t IsInternalBuild;
  int CompressionMode;
  const void *v90;
  size_t v91;
  size_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  std::string *v96;
  xpc_object_t v97;
  xpc_object_t v98;
  size_t v99;
  size_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  xpc_object_t v105;
  xpc_object_t v106;
  void *v107;
  size_t v108;
  unint64_t v109;
  _DWORD value[3];
  unint64_t v111;
  uint64_t v112;
  BOOL v113;
  int v114;
  std::string __p;

  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = MEMORY[0x24BDACFA0];
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v4) == v5)
    {
      xpc_retain(v4);
      v6 = v4;
    }
    else
    {
      v6 = xpc_null_create();
    }
  }
  else
  {
    v6 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  if (MEMORY[0x24BD2A468](v6) != v5)
  {
    v7 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_24B855000, v7, OS_LOG_TYPE_ERROR, "Failed to create config dictionary", (uint8_t *)&__p, 2u);
    }
    *a2 = xpc_null_create();
    goto LABEL_239;
  }
  v111 = 0xAAAAAAAAAAAAAAAALL;
  v112 = 0xAAAAAAAAAAAAAALL;
  *(_QWORD *)&value[1] = 0xAAAAAAAAAAAAAA00;
  value[0] = 0;
  v113 = 0;
  v8 = (const void *)*MEMORY[0x24BE04F88];
  v9 = strlen((const char *)*MEMORY[0x24BE04F88]);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v11 = operator new(v12 + 1);
    v108 = v10;
    v109 = v13 | 0x8000000000000000;
    v107 = v11;
    goto LABEL_18;
  }
  HIBYTE(v109) = v9;
  v11 = &v107;
  if (v9)
LABEL_18:
    memmove(v11, v8, v10);
  *((_BYTE *)v11 + v10) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::coredump::get((char *)&v107, (uint64_t)&__p))
  {
    v14 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
  }
  else
  {
    v14 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_24:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v14)
      goto LABEL_34;
  }
  else if (!v14)
  {
    goto LABEL_34;
  }
  if (v113)
    v15 = "enabled";
  else
    v15 = "disabled";
  v16 = xpc_string_create(v15);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x24BE056F8], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
LABEL_34:
  v113 = 0;
  v18 = strlen((const char *)v8);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    v108 = v19;
    v109 = v22 | 0x8000000000000000;
    v107 = v20;
    goto LABEL_41;
  }
  HIBYTE(v109) = v18;
  v20 = &v107;
  if (v18)
LABEL_41:
    memmove(v20, v8, v19);
  *((_BYTE *)v20 + v19) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get((char *)&v107, (uint64_t)&__p))
  {
    v23 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_47;
  }
  else
  {
    v23 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_47;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_47:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v23)
      goto LABEL_57;
  }
  else if (!v23)
  {
    goto LABEL_57;
  }
  if (v113)
    v24 = "enabled";
  else
    v24 = "disabled";
  v25 = xpc_string_create(v24);
  if (!v25)
    v25 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x24BE057A8], v25);
  v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
LABEL_57:
  if (SHIBYTE(v112) < 0)
  {
    v111 = 0;
    v27 = *(_BYTE **)&value[1];
  }
  else
  {
    HIBYTE(v112) = 0;
    v27 = &value[1];
  }
  *v27 = 0;
  v28 = (const void *)*MEMORY[0x24BE04E90];
  v29 = strlen((const char *)*MEMORY[0x24BE04E90]);
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v30 = v29;
  if (v29 >= 0x17)
  {
    v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v32 = v29 | 7;
    v33 = v32 + 1;
    p_p = (std::string *)operator new(v32 + 1);
    __p.__r_.__value_.__l.__size_ = v30;
    __p.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_67;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v29;
  p_p = &__p;
  if (v29)
LABEL_67:
    memmove(p_p, v28, v30);
  p_p->__r_.__value_.__s.__data_[v30] = 0;
  v34 = prop::bbtrace::get((char *)&__p, (uint64_t)&value[1]);
  v35 = v34;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v35)
      goto LABEL_78;
  }
  else if (!v34)
  {
    goto LABEL_78;
  }
  if (v112 >= 0)
    v36 = (const char *)&value[1];
  else
    v36 = *(const char **)&value[1];
  v37 = xpc_string_create(v36);
  if (!v37)
    v37 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x24BE056E8], v37);
  v38 = xpc_null_create();
  xpc_release(v37);
  xpc_release(v38);
LABEL_78:
  v113 = 0;
  v39 = (const void *)*MEMORY[0x24BDFC998];
  v40 = strlen((const char *)*MEMORY[0x24BDFC998]);
  if (v40 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v41 = v40;
  if (v40 >= 0x17)
  {
    v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v43 = v40 | 7;
    v44 = v43 + 1;
    v42 = operator new(v43 + 1);
    v108 = v41;
    v109 = v44 | 0x8000000000000000;
    v107 = v42;
    goto LABEL_85;
  }
  HIBYTE(v109) = v40;
  v42 = &v107;
  if (v40)
LABEL_85:
    memmove(v42, v39, v41);
  *((_BYTE *)v42 + v41) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get((char *)&v107, (uint64_t)&__p))
  {
    v45 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_91;
  }
  else
  {
    v45 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_91;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_91:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v45)
      goto LABEL_101;
  }
  else if (!v45)
  {
    goto LABEL_101;
  }
  if (v113)
    v46 = "enabled";
  else
    v46 = "disabled";
  v47 = xpc_string_create(v46);
  if (!v47)
    v47 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x24BE05860], v47);
  v48 = xpc_null_create();
  xpc_release(v47);
  xpc_release(v48);
LABEL_101:
  if (SHIBYTE(v112) < 0)
  {
    v111 = 0;
    v49 = *(_BYTE **)&value[1];
  }
  else
  {
    HIBYTE(v112) = 0;
    v49 = &value[1];
  }
  *v49 = 0;
  v50 = (const void *)*MEMORY[0x24BE05528];
  v51 = strlen((const char *)*MEMORY[0x24BE05528]);
  if (v51 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v52 = v51;
  if (v51 >= 0x17)
  {
    v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v51 | 7) != 0x17)
      v54 = v51 | 7;
    v55 = v54 + 1;
    v53 = (std::string *)operator new(v54 + 1);
    __p.__r_.__value_.__l.__size_ = v52;
    __p.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
    goto LABEL_111;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v51;
  v53 = &__p;
  if (v51)
LABEL_111:
    memmove(v53, v50, v52);
  v53->__r_.__value_.__s.__data_[v52] = 0;
  v56 = prop::bbtrace::get((char *)&__p, (uint64_t)&value[1]);
  v57 = v56;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v57)
      goto LABEL_122;
  }
  else if (!v56)
  {
    goto LABEL_122;
  }
  if (v112 >= 0)
    v58 = (const char *)&value[1];
  else
    v58 = *(const char **)&value[1];
  v59 = xpc_string_create(v58);
  if (!v59)
    v59 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x24BE057E0], v59);
  v60 = xpc_null_create();
  xpc_release(v59);
  xpc_release(v60);
LABEL_122:
  v113 = 0;
  v61 = strlen((const char *)v8);
  if (v61 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v62 = v61;
  if (v61 >= 0x17)
  {
    v64 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v61 | 7) != 0x17)
      v64 = v61 | 7;
    v65 = v64 + 1;
    v63 = operator new(v64 + 1);
    v108 = v62;
    v109 = v65 | 0x8000000000000000;
    v107 = v63;
    goto LABEL_129;
  }
  HIBYTE(v109) = v61;
  v63 = &v107;
  if (v61)
LABEL_129:
    memmove(v63, v8, v62);
  *((_BYTE *)v63 + v62) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::ipc::get((char *)&v107, (uint64_t)&__p))
  {
    v66 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_135;
  }
  else
  {
    v66 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_135;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_135:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v66)
      goto LABEL_145;
  }
  else if (!v66)
  {
    goto LABEL_145;
  }
  if (v113)
    v67 = "enabled";
  else
    v67 = "disabled";
  v68 = xpc_string_create(v67);
  if (!v68)
    v68 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x24BE05608], v68);
  v69 = xpc_null_create();
  xpc_release(v68);
  xpc_release(v69);
LABEL_145:
  v113 = 0;
  v70 = strlen((const char *)v8);
  if (v70 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v71 = v70;
  if (v70 >= 0x17)
  {
    v73 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17)
      v73 = v70 | 7;
    v74 = v73 + 1;
    v72 = operator new(v73 + 1);
    v108 = v71;
    v109 = v74 | 0x8000000000000000;
    v107 = v72;
    goto LABEL_152;
  }
  HIBYTE(v109) = v70;
  v72 = &v107;
  if (v70)
LABEL_152:
    memmove(v72, v8, v71);
  *((_BYTE *)v72 + v71) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbipc::get((char *)&v107, (uint64_t)&__p))
  {
    v75 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_158;
  }
  else
  {
    v75 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_158;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_158:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v75)
      goto LABEL_168;
  }
  else if (!v75)
  {
    goto LABEL_168;
  }
  if (v113)
    v76 = "enabled";
  else
    v76 = "disabled";
  v77 = xpc_string_create(v76);
  if (!v77)
    v77 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x24BE05610], v77);
  v78 = xpc_null_create();
  xpc_release(v77);
  xpc_release(v78);
LABEL_168:
  v113 = 0;
  v79 = strlen((const char *)v8);
  if (v79 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v80 = v79;
  if (v79 >= 0x17)
  {
    v82 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v79 | 7) != 0x17)
      v82 = v79 | 7;
    v83 = v82 + 1;
    v81 = operator new(v82 + 1);
    v108 = v80;
    v109 = v83 | 0x8000000000000000;
    v107 = v81;
    goto LABEL_175;
  }
  HIBYTE(v109) = v79;
  v81 = &v107;
  if (v79)
LABEL_175:
    memmove(v81, v8, v80);
  *((_BYTE *)v81 + v80) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::tailspin::get((char *)&v107, (uint64_t)&__p))
  {
    v84 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_181;
  }
  else
  {
    v84 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_181;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_181:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v84)
      goto LABEL_191;
  }
  else if (!v84)
  {
    goto LABEL_191;
  }
  if (v113)
    v85 = "enabled";
  else
    v85 = "disabled";
  v86 = xpc_string_create(v85);
  if (!v86)
    v86 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x24BE05700], v86);
  v87 = xpc_null_create();
  xpc_release(v86);
  xpc_release(v87);
LABEL_191:
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
    CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  else
    CompressionMode = 2;
  v90 = (const void *)*MEMORY[0x24BDFC970];
  v91 = strlen((const char *)*MEMORY[0x24BDFC970]);
  if (v91 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v92 = v91;
  if (v91 >= 0x17)
  {
    v94 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v91 | 7) != 0x17)
      v94 = v91 | 7;
    v95 = v94 + 1;
    v93 = operator new(v94 + 1);
    v108 = v92;
    v109 = v95 | 0x8000000000000000;
    v107 = v93;
  }
  else
  {
    HIBYTE(v109) = v91;
    v93 = &v107;
    if (!v91)
      goto LABEL_203;
  }
  memmove(v93, v90, v92);
LABEL_203:
  *((_BYTE *)v93 + v92) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::compression::get((char *)&v107, (uint64_t)&__p))
  {
    v114 = -1431655766;
    if (util::convert<int>(&__p, &v114, 0))
      CompressionMode = v114;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v109) & 0x80000000) == 0)
      goto LABEL_208;
  }
  else if ((SHIBYTE(v109) & 0x80000000) == 0)
  {
    goto LABEL_208;
  }
  operator delete(v107);
LABEL_208:
  std::to_string(&__p, CompressionMode);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v96 = &__p;
  else
    v96 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v97 = xpc_string_create((const char *)v96);
  if (!v97)
    v97 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x24BE056F0], v97);
  v98 = xpc_null_create();
  xpc_release(v97);
  xpc_release(v98);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  value[0] = 0;
  v99 = strlen((const char *)v28);
  if (v99 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v100 = v99;
  if (v99 >= 0x17)
  {
    v102 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v99 | 7) != 0x17)
      v102 = v99 | 7;
    v103 = v102 + 1;
    v101 = operator new(v102 + 1);
    v108 = v100;
    v109 = v103 | 0x8000000000000000;
    v107 = v101;
    goto LABEL_222;
  }
  HIBYTE(v109) = v99;
  v101 = &v107;
  if (v99)
LABEL_222:
    memmove(v101, v28, v100);
  *((_BYTE *)v101 + v100) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::systemlogs::get((char *)&v107, (uint64_t)&__p))
  {
    v104 = util::convert<int>(&__p, value, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_228;
  }
  else
  {
    v104 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_228;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_228:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v104)
      goto LABEL_237;
LABEL_234:
    v105 = xpc_int64_create(value[0]);
    if (!v105)
      v105 = xpc_null_create();
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x24BE056B0], v105);
    v106 = xpc_null_create();
    xpc_release(v105);
    xpc_release(v106);
    goto LABEL_237;
  }
  if (v104)
    goto LABEL_234;
LABEL_237:
  *a2 = v6;
  v6 = xpc_null_create();
  if (SHIBYTE(v112) < 0)
    operator delete(*(void **)&value[1]);
LABEL_239:
  xpc_release(v6);
}

void sub_24B900FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  if (a21 < 0)
    operator delete(__p);
  xpc_release(v28);
  _Unwind_Resume(a1);
}

void sub_24B901078()
{
  JUMPOUT(0x24B901064);
}

void LogTracker::copyPreference(uint64_t a1@<X0>, const void **a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v8;
  NSObject *v9;
  int v10;
  size_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  const void *v15;
  xpc_object_t v16;
  const void *v17;
  xpc_object_t v18;
  std::string __p;
  CFTypeRef cf;
  xpc_object_t object;
  _BYTE buf[34];
  _BYTE v23[6];

  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = MEMORY[0x24BDACFA0];
  if (v6 || (v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v6) == v7)
    {
      xpc_retain(v6);
      v8 = v6;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    v6 = 0;
  }
  xpc_release(v6);
  if (MEMORY[0x24BD2A468](v8) != v7)
  {
    v9 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_24B855000, v9, OS_LOG_TYPE_ERROR, "Failed to create preference dictionary", buf, 2u);
    }
    *a3 = xpc_null_create();
    goto LABEL_39;
  }
  v10 = *((char *)a2 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)a2 + 23);
  else
    v11 = (size_t)a2[1];
  v12 = v11 + 34;
  memset(buf, 170, 24);
  if (v11 + 34 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v12 > 0x16)
  {
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v14 = v12 | 7;
    *(_QWORD *)&buf[8] = v11 + 34;
    *(_QWORD *)&buf[16] = (v14 + 1) | 0x8000000000000000;
    *(_QWORD *)buf = operator new(v14 + 1);
    qmemcpy(*(void **)buf, "/var/wireless/Library/Preferences/", 34);
    v13 = (_BYTE *)(*(_QWORD *)buf + 34);
    if (!v11)
      goto LABEL_24;
  }
  else
  {
    qmemcpy(buf, "/var/wireless/Library/Preferences/", sizeof(buf));
    v13 = v23;
  }
  if (v10 >= 0)
    v15 = a2;
  else
    v15 = *a2;
  memmove(v13, v15, v11);
LABEL_24:
  v13[v11] = 0;
  if (ctu::fs::file_exists())
  {
    if ((buf[23] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
    else
      __p = *(std::string *)buf;
    util::readPlistToCFDictionary((uint64_t)&__p, &cf);
    ctu::cf_to_xpc((ctu *)cf, v17);
    v16 = object;
    if (object && MEMORY[0x24BD2A468](object) == v7)
      xpc_retain(v16);
    else
      v16 = xpc_null_create();
    v18 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v18);
    xpc_release(object);
    object = 0;
    if (cf)
      CFRelease(cf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = v8;
  }
  *a3 = v16;
  v8 = xpc_null_create();
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
LABEL_39:
  xpc_release(v8);
}

void sub_24B901368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  if (a23 < 0)
    operator delete(__p);
  xpc_release(v23);
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker23diagnosticToolsLog_syncEN8dispatch13group_sessionEN3xpc4dictEb_block_invoke(_QWORD *a1, unsigned int *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void **v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  void **v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *a2;
      v12 = *(NSObject **)(v5 + 88);
      if ((_DWORD)v11)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v11, (uint64_t)__p);
          if (v15 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v17 = v13;
          _os_log_error_impl(&dword_24B855000, v12, OS_LOG_TYPE_ERROR, "Failed to collect logs. Result: %s", buf, 0xCu);
          if (v15 < 0)
            operator delete(__p[0]);
        }
      }
      else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_24B855000, v12, OS_LOG_TYPE_DEBUG, "#D The log has been created", (uint8_t *)__p, 2u);
      }
    }
  }
}

uint64_t TelephonyXPC::Result::toString@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  const char *v2;

  switch(result)
  {
    case 0xE020E000:
      *(_BYTE *)(a2 + 23) = 14;
      strcpy((char *)a2, "kInternalError");
      return result;
    case 0xE020E001:
      *(_BYTE *)(a2 + 23) = 12;
      strcpy((char *)a2, "kServerError");
      return result;
    case 0xE020E002:
      v2 = "kCommandError";
      goto LABEL_12;
    case 0xE020E003:
      *(_BYTE *)(a2 + 23) = 8;
      strcpy((char *)a2, "kTimeout");
      return result;
    case 0xE020E004:
      v2 = "kNotSupported";
      goto LABEL_12;
    case 0xE020E005:
      *(_BYTE *)(a2 + 23) = 6;
      strcpy((char *)a2, "kRetry");
      return result;
    case 0xE020E006:
      *(_BYTE *)(a2 + 23) = 17;
      strcpy((char *)a2, "kPermissionDenied");
      return result;
    case 0xE020E007:
      v2 = "kNotAvailable";
LABEL_12:
      *(_BYTE *)(a2 + 23) = 13;
      *(_QWORD *)a2 = *(_QWORD *)v2;
      *(_QWORD *)(a2 + 5) = *(_QWORD *)(v2 + 5);
      *(_BYTE *)(a2 + 13) = 0;
      break;
    default:
      if ((_DWORD)result)
      {
        *(_BYTE *)(a2 + 23) = 17;
        strcpy((char *)a2, "kInvalidErrorCode");
      }
      else
      {
        *(_BYTE *)(a2 + 23) = 8;
        strcpy((char *)a2, "kSuccess");
      }
      break;
  }
  return result;
}

void __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[7];
  a1[7] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[7];
    if (v7)
      dispatch_group_enter(v7);
  }
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 56);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void LogTracker::systemLog_sync(uint64_t a1, dispatch_object_t *a2, xpc_object_t *a3, _QWORD *a4)
{
  xpc_object_t value;
  int v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  xpc_object_t v24;
  xpc_object_t v25;
  const char *v26;
  xpc_object_t v27;
  const char *v28;
  unsigned __int8 v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  void **v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t *v40;
  xpc_object_t v41;
  xpc_object_t v42;
  void **v43;
  xpc_object_t v44;
  xpc_object_t v45;
  const void *v46;
  size_t v47;
  size_t v48;
  __int128 *p_dst;
  uint64_t v50;
  uint64_t v51;
  const char *p_object;
  xpc_object_t v53;
  xpc_object_t v54;
  NSObject *v55;
  void *v56;
  unint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  xpc_object_t v61;
  char v62;
  xpc_object_t v63;
  xpc_object_t v64;
  void *v65;
  void *v66;
  NSObject *v67;
  xpc_object_t v68;
  void *v69;
  NSObject *v70;
  xpc_object_t v71;
  std::__shared_weak_count *v72;
  xpc_object_t __p[3];
  void *v74[3];
  void *v75[3];
  void *v76;
  dispatch_object_t v77;
  xpc_object_t object;
  uint64_t v79;
  void (*v80)(uint64_t);
  void *v81;
  uint64_t *v82;
  __int128 __dst;
  unint64_t v84;
  _QWORD aBlock[6];
  std::__shared_weak_count *v86;
  dispatch_object_t v87;
  _BYTE v88[24];
  _BYTE *v89;
  int v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x24BE04F98]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v9 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v10 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v10 || (v11 = *(_QWORD *)(a1 + 120), (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v76 = (void *)0xAAAAAAAAAAAAAAAALL;
  v77 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v18 = (void *)MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker14systemLog_syncEN8dispatch13group_sessionEN3xpc4dictENSt3__18functionIFvbS3_EEE_block_invoke;
  aBlock[3] = &__block_descriptor_100_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c30_ZTSN8dispatch13group_sessionE64c38_ZTSNSt3__18functionIFvbN3xpc4dictEEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  aBlock[5] = v11;
  v86 = v13;
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  v87 = *a2;
  if (v87)
  {
    dispatch_retain(v87);
    if (v87)
      dispatch_group_enter(v87);
  }
  v20 = v88;
  v21 = a4[3];
  if (!v21)
    goto LABEL_20;
  if ((_QWORD *)v21 != a4)
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
LABEL_20:
    v89 = (_BYTE *)v21;
    goto LABEL_22;
  }
  v89 = v88;
  (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v88);
LABEL_22:
  v90 = v9;
  v22 = _Block_copy(aBlock);
  v23 = *(NSObject **)(a1 + 136);
  if (v23)
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  v76 = v22;
  v77 = v23;
  memset(v75, 170, sizeof(v75));
  v24 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x24BE05090]);
  __p[0] = v24;
  if (v24)
    xpc_retain(v24);
  else
    __p[0] = xpc_null_create();
  Timestamp::Timestamp((Timestamp *)v74);
  Timestamp::asString((uint64_t)v74, 0, 9, &object);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v80) < 0)
    operator delete(object);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v74, (_QWORD *)v74[1]);
  xpc_release(__p[0]);
  memset(v74, 170, sizeof(v74));
  v25 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x24BE05268]);
  object = v25;
  if (v25)
    xpc_retain(v25);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)*MEMORY[0x24BDFC720], v26);
  xpc_release(object);
  memset(__p, 170, sizeof(__p));
  v27 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x24BE053F0]);
  object = v27;
  if (v27)
    xpc_retain(v27);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v28);
  xpc_release(object);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  object = v18;
  v79 = 0x40000000;
  v80 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v81 = &__block_descriptor_tmp_13_5;
  v82 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v30 = *(_QWORD *)algn_2579B8AE8;
    v72 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_40;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &object);
    v30 = *(_QWORD *)algn_2579B8AE8;
    v72 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_40;
  }
  v31 = (unint64_t *)(v30 + 8);
  do
    v32 = __ldxr(v31);
  while (__stxr(v32 + 1, v31));
LABEL_40:
  abm::HelperClient::create();
  if (v72)
  {
    v33 = (unint64_t *)&v72->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v35 = xpc_dictionary_create(0, 0, 0);
  if (v35 || (v35 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v35) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v35);
      v36 = v35;
    }
    else
    {
      v36 = xpc_null_create();
    }
  }
  else
  {
    v36 = xpc_null_create();
    v35 = 0;
  }
  xpc_release(v35);
  if (SHIBYTE(v75[2]) >= 0)
    v37 = v75;
  else
    v37 = (void **)v75[0];
  v38 = xpc_string_create((const char *)v37);
  if (!v38)
    v38 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x24BDFC868], v38);
  v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  if (SHIBYTE(__p[2]) >= 0)
    v40 = __p;
  else
    v40 = (xpc_object_t *)__p[0];
  v41 = xpc_string_create((const char *)v40);
  if (!v41)
    v41 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x24BDFC850], v41);
  v42 = xpc_null_create();
  xpc_release(v41);
  xpc_release(v42);
  if (SHIBYTE(v74[2]) >= 0)
    v43 = v74;
  else
    v43 = (void **)v74[0];
  v44 = xpc_string_create((const char *)v43);
  if (!v44)
    v44 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x24BDFC788], v44);
  v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  object = 0;
  v79 = 0;
  v80 = 0;
  v46 = (const void *)*MEMORY[0x24BE04F90];
  v47 = strlen((const char *)*MEMORY[0x24BE04F90]);
  if (v47 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v48 = v47;
  if (v47 >= 0x17)
  {
    v50 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v47 | 7) != 0x17)
      v50 = v47 | 7;
    v51 = v50 + 1;
    p_dst = (__int128 *)operator new(v50 + 1);
    *((_QWORD *)&__dst + 1) = v48;
    v84 = v51 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_73;
  }
  HIBYTE(v84) = v47;
  p_dst = &__dst;
  if (v47)
LABEL_73:
    memmove(p_dst, v46, v48);
  *((_BYTE *)p_dst + v48) = 0;
  prop::systemlogs::get((char *)&__dst, (uint64_t)&object);
  if (SHIBYTE(v84) < 0)
    operator delete((void *)__dst);
  if (SHIBYTE(v80) >= 0)
    p_object = (const char *)&object;
  else
    p_object = (const char *)object;
  v53 = xpc_string_create(p_object);
  if (!v53)
    v53 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x24BDFC780], v53);
  v54 = xpc_null_create();
  xpc_release(v53);
  xpc_release(v54);
  v55 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
  {
    if (v9 != 2)
      goto LABEL_83;
LABEL_125:
    v61 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x24BE05498]);
    *(_QWORD *)&__dst = v61;
    if (v61)
      xpc_retain(v61);
    else
      *(_QWORD *)&__dst = xpc_null_create();
    v62 = xpc::dyn_cast_or_default((xpc *)&__dst, 0);
    v63 = xpc_BOOL_create(v62);
    if (!v63)
      v63 = xpc_null_create();
    xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x24BDFC910], v63);
    v64 = xpc_null_create();
    xpc_release(v63);
    xpc_release(v64);
    xpc_release((xpc_object_t)__dst);
    v68 = v36;
    if (v36)
    {
      xpc_retain(v36);
      v65 = v76;
      if (!v76)
      {
LABEL_135:
        v66 = v65;
        v67 = v77;
        if (v77)
          dispatch_retain(v77);
        abm::HelperClient::perform();
        if (v67)
          dispatch_release(v67);
        if (v66)
          _Block_release(v66);
        xpc_release(v68);
        if (SHIBYTE(v80) < 0)
          goto LABEL_97;
        goto LABEL_98;
      }
    }
    else
    {
      v68 = xpc_null_create();
      v65 = v76;
      if (!v76)
        goto LABEL_135;
    }
    v65 = _Block_copy(v65);
    goto LABEL_135;
  }
  v60 = abm::helper::asString();
  LODWORD(__dst) = 136315138;
  *(_QWORD *)((char *)&__dst + 4) = v60;
  _os_log_debug_impl(&dword_24B855000, v55, OS_LOG_TYPE_DEBUG, "#D System Logs: %s", (uint8_t *)&__dst, 0xCu);
  if (v9 == 2)
    goto LABEL_125;
LABEL_83:
  if (v9 != 1)
    goto LABEL_96;
  v71 = v36;
  if (v36)
  {
    xpc_retain(v36);
    v56 = v76;
    if (!v76)
      goto LABEL_89;
    goto LABEL_88;
  }
  v71 = xpc_null_create();
  v56 = v76;
  if (v76)
LABEL_88:
    v56 = _Block_copy(v56);
LABEL_89:
  v69 = v56;
  v70 = v77;
  if (v77)
    dispatch_retain(v77);
  abm::HelperClient::perform();
  if (v70)
    dispatch_release(v70);
  if (v69)
    _Block_release(v69);
  xpc_release(v71);
LABEL_96:
  if (SHIBYTE(v80) < 0)
LABEL_97:
    operator delete(object);
LABEL_98:
  xpc_release(v36);
  do
    v57 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v57 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (v57)
  {
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_102;
  }
  else
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
LABEL_102:
      if ((SHIBYTE(v74[2]) & 0x80000000) == 0)
        goto LABEL_103;
      goto LABEL_121;
    }
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v74[2]) & 0x80000000) == 0)
  {
LABEL_103:
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0)
      goto LABEL_104;
    goto LABEL_122;
  }
LABEL_121:
  operator delete(v74[0]);
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0)
  {
LABEL_104:
    v58 = v77;
    if (!v77)
      goto LABEL_106;
    goto LABEL_105;
  }
LABEL_122:
  operator delete(v75[0]);
  v58 = v77;
  if (v77)
LABEL_105:
    dispatch_release(v58);
LABEL_106:
  if (v76)
    _Block_release(v76);
  if (v89 == v88)
  {
    v59 = 4;
    goto LABEL_112;
  }
  if (v89)
  {
    v59 = 5;
    v20 = v89;
LABEL_112:
    (*(void (**)(_QWORD *))(*v20 + 8 * v59))(v20);
  }
  if (v87)
  {
    dispatch_group_leave(v87);
    if (v87)
      dispatch_release(v87);
  }
  if (v86)
    std::__shared_weak_count::__release_weak(v86);
  std::__shared_weak_count::__release_weak(v13);
}

void sub_24B9021B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, char a12, uint64_t a13, xpc_object_t a14, char a15, uint64_t a16, char a17, uint64_t a18, xpc_object_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,xpc_object_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN10LogTracker14systemLog_syncEN8dispatch13group_sessionEN3xpc4dictENSt3__18functionIFvbS3_EEE_block_invoke(_QWORD *a1, unsigned int *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  void **v18;
  void *__p[2];
  char v20;
  xpc_object_t object;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  void **v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  if (a1[11])
  {
    v13 = *a2;
    v14 = *a3;
    object = v14;
    if (v14)
    {
      xpc_retain(v14);
      LOBYTE(__p[0]) = v13 == 0;
      v15 = a1[11];
      if (v15)
      {
LABEL_12:
        (*(void (**)(uint64_t, void **, xpc_object_t *))(*(_QWORD *)v15 + 48))(v15, __p, &object);
        xpc_release(object);
        object = 0;
        goto LABEL_13;
      }
    }
    else
    {
      object = xpc_null_create();
      LOBYTE(__p[0]) = v13 == 0;
      v15 = a1[11];
      if (v15)
        goto LABEL_12;
    }
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_13:
  if (*a2)
  {
    v16 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = abm::helper::asString();
      TelephonyXPC::Result::toString(*a2, (uint64_t)__p);
      if (v20 >= 0)
        v18 = __p;
      else
        v18 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v23 = v17;
      v24 = 2080;
      v25 = v18;
      _os_log_error_impl(&dword_24B855000, v16, OS_LOG_TYPE_ERROR, "Failed to collect system logs mode: %s result: %s", buf, 0x16u);
      if (v20 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_24B902660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c30_ZTSN8dispatch13group_sessionE64c38_ZTSNSt3__18functionIFvbN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t result;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a2[7];
  a1[7] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    v8 = a1[7];
    if (v8)
      dispatch_group_enter(v8);
  }
  result = a2[11];
  if (!result)
    goto LABEL_10;
  if ((_QWORD *)result != a2 + 8)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
LABEL_10:
    a1[11] = result;
    return result;
  }
  a1[11] = a1 + 8;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[11] + 24))(a2[11]);
}

void sub_24B902738(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  v3 = *(NSObject **)(v1 + 56);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(v1 + 56);
    if (v4)
      dispatch_release(v4);
  }
  v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c30_ZTSN8dispatch13group_sessionE64c38_ZTSNSt3__18functionIFvbN3xpc4dictEEEE(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  v2 = a1 + 8;
  v3 = (_QWORD *)a1[11];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = a1[7];
  if (v5)
  {
    dispatch_group_leave(v5);
    v6 = a1[7];
    if (v6)
      dispatch_release(v6);
  }
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void LogTracker::archiveLogs_sync(_QWORD *a1, NSObject **a2, xpc_object_t *a3)
{
  xpc_object_t value;
  uint64_t IsInternalBuild;
  uint64_t CompressionMode;
  int v9;
  xpc_object_t v10;
  NSObject *v11;
  char v12;
  xpc_object_t v13;
  xpc_object_t v14;
  const char *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  NSObject *v26;
  void *v27;
  NSObject *v28;
  unsigned __int8 v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  void **v37;
  xpc_object_t v38;
  xpc_object_t v39;
  const char *v40;
  xpc_object_t v41;
  xpc_object_t v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  unint64_t v48;
  void *v49;
  NSObject *v50;
  xpc_object_t v51;
  std::__shared_weak_count *v52;
  _QWORD aBlock[6];
  std::__shared_weak_count *v54;
  dispatch_group_t group;
  xpc_object_t object;
  dispatch_object_t v57;
  void *__p[3];
  void *v59[3];
  uint8_t buf[8];
  uint64_t v61;
  void (*v62)(uint64_t);
  void *v63;
  uint64_t *v64;

  value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x24BE05800]);
  *(_QWORD *)buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)buf = xpc_null_create();
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
    CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  else
    CompressionMode = 2;
  v9 = xpc::dyn_cast_or_default((xpc *)buf, (const object *)CompressionMode);
  xpc_release(*(xpc_object_t *)buf);
  if (!v9)
  {
    v11 = a1[11];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_24B855000, v11, OS_LOG_TYPE_ERROR, "Compression is disabled!", buf, 2u);
    }
    return;
  }
  v10 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x24BE056C8]);
  *(_QWORD *)buf = v10;
  if (v10)
    xpc_retain(v10);
  else
    *(_QWORD *)buf = xpc_null_create();
  v12 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  memset(v59, 170, sizeof(v59));
  v13 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x24BE05090]);
  object = v13;
  if (v13)
    xpc_retain(v13);
  else
    object = xpc_null_create();
  Timestamp::Timestamp((Timestamp *)__p);
  Timestamp::asString((uint64_t)__p, 0, 9, buf);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v62) < 0)
    operator delete(*(void **)buf);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)__p, (_QWORD *)__p[1]);
  xpc_release(object);
  memset(__p, 170, sizeof(__p));
  v14 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x24BE05268]);
  *(_QWORD *)buf = v14;
  if (v14)
    xpc_retain(v14);
  else
    *(_QWORD *)buf = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)buf, (const object *)*MEMORY[0x24BDFC720], v15);
  xpc_release(*(xpc_object_t *)buf);
  v16 = (std::__shared_weak_count *)a1[16];
  if (!v16 || (v17 = a1[15], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v57 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v24 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker16archiveLogs_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke;
  aBlock[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  aBlock[5] = v17;
  v54 = v19;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = *a2;
  group = v26;
  if (v26)
  {
    dispatch_retain(v26);
    dispatch_group_enter(group);
  }
  v27 = _Block_copy(aBlock);
  v28 = a1[17];
  if (v28)
    dispatch_retain(v28);
  object = v27;
  v57 = v28;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  *(_QWORD *)buf = v24;
  v61 = 0x40000000;
  v62 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v63 = &__block_descriptor_tmp_13_5;
  v64 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v30 = *(_QWORD *)algn_2579B8AE8;
    v52 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_41;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v30 = *(_QWORD *)algn_2579B8AE8;
    v52 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_41;
  }
  v31 = (unint64_t *)(v30 + 8);
  do
    v32 = __ldxr(v31);
  while (__stxr(v32 + 1, v31));
LABEL_41:
  abm::HelperClient::create();
  if (v52)
  {
    v33 = (unint64_t *)&v52->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v35 = xpc_dictionary_create(0, 0, 0);
  if (v35 || (v35 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v35) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v35);
      v36 = v35;
    }
    else
    {
      v36 = xpc_null_create();
    }
  }
  else
  {
    v36 = xpc_null_create();
    v35 = 0;
  }
  xpc_release(v35);
  if (SHIBYTE(__p[2]) >= 0)
    v37 = __p;
  else
    v37 = (void **)__p[0];
  v38 = xpc_string_create((const char *)v37);
  if (!v38)
    v38 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x24BDFC880], v38);
  v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  if (SHIBYTE(v59[2]) >= 0)
    v40 = (const char *)v59;
  else
    v40 = (const char *)v59[0];
  v41 = xpc_string_create(v40);
  if (!v41)
    v41 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x24BDFC868], v41);
  v42 = xpc_null_create();
  xpc_release(v41);
  xpc_release(v42);
  v43 = xpc_int64_create(v9);
  if (!v43)
    v43 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x24BDFC970], v43);
  v44 = xpc_null_create();
  xpc_release(v43);
  xpc_release(v44);
  v45 = xpc_BOOL_create(v12);
  if (!v45)
    v45 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x24BDFC7F8], v45);
  v46 = xpc_null_create();
  xpc_release(v45);
  xpc_release(v46);
  v51 = v36;
  if (v36)
  {
    xpc_retain(v36);
    v47 = object;
    if (!object)
      goto LABEL_71;
    goto LABEL_70;
  }
  v51 = xpc_null_create();
  v47 = object;
  if (object)
LABEL_70:
    v47 = _Block_copy(v47);
LABEL_71:
  v49 = v47;
  v50 = v57;
  if (v57)
    dispatch_retain(v57);
  abm::HelperClient::perform();
  if (v50)
    dispatch_release(v50);
  if (v49)
    _Block_release(v49);
  xpc_release(v51);
  xpc_release(v36);
  do
    v48 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v48 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v48)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (v57)
    dispatch_release(v57);
  if (object)
    _Block_release(object);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v54)
    std::__shared_weak_count::__release_weak(v54);
  std::__shared_weak_count::__release_weak(v19);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v59[2]) & 0x80000000) == 0)
      return;
LABEL_94:
    operator delete(v59[0]);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v59[2]) < 0)
    goto LABEL_94;
}

void sub_24B902F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,dispatch_group_t group,xpc_object_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::__shared_weak_count *v32;
  void *v33;
  uint64_t v34;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a10);
  xpc_release(object);
  object = 0;
  xpc_release(v33);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a25);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  std::__shared_weak_count::__release_weak(v32);
  if (a32 < 0)
    operator delete(__p);
  if (*(char *)(v34 - 129) < 0)
  {
    operator delete(*(void **)(v34 - 152));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker16archiveLogs_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke(_QWORD *a1, unsigned int *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void **v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  void **v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *a2;
      v12 = *(NSObject **)(v5 + 88);
      if ((_DWORD)v11)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v11, (uint64_t)__p);
          if (v15 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v17 = v13;
          _os_log_error_impl(&dword_24B855000, v12, OS_LOG_TYPE_ERROR, "Compression failed. Result: %s", buf, 0xCu);
          if (v15 < 0)
            operator delete(__p[0]);
        }
      }
      else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_24B855000, v12, OS_LOG_TYPE_DEBUG, "#D Compression is done.", (uint8_t *)__p, 2u);
      }
    }
  }
}

void LogTracker::processLogarchive_sync(_QWORD *a1, NSObject **a2, const char *a3, _QWORD *a4)
{
  std::__shared_weak_count *v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  NSObject *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  unsigned __int8 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  unint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  int v35;
  unint64_t v36;
  const char *v37;
  size_t v38;
  void **v39;
  xpc_object_t v40;
  xpc_object_t v41;
  const char *v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  xpc_object_t v53;
  std::__shared_weak_count *v54;
  void *v55;
  NSObject *object;
  void *__dst[5];
  _QWORD aBlock[6];
  std::__shared_weak_count *v59;
  dispatch_group_t group;
  _BYTE v61[24];
  _BYTE *v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v9 = a1[15], (v10 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v16 = (void *)MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker22processLogarchive_syncEN8dispatch13group_sessionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_8functionIFvbEEE_block_invoke;
  aBlock[3] = &__block_descriptor_96_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  aBlock[5] = v9;
  v59 = v11;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = *a2;
  group = v18;
  if (v18)
  {
    dispatch_retain(v18);
    dispatch_group_enter(v18);
  }
  v19 = v61;
  v20 = a4[3];
  if (!v20)
    goto LABEL_16;
  if ((_QWORD *)v20 != a4)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
LABEL_16:
    v62 = (_BYTE *)v20;
    goto LABEL_18;
  }
  v62 = v61;
  (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v61);
LABEL_18:
  v21 = _Block_copy(aBlock);
  v22 = a1[17];
  if (v22)
    dispatch_retain(v22);
  v55 = v21;
  object = v22;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  __dst[0] = v16;
  __dst[1] = (void *)0x40000000;
  __dst[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  __dst[3] = &__block_descriptor_tmp_13_5;
  __dst[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v24 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v54 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_23;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, __dst);
    v24 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v54 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
    {
LABEL_23:
      v25 = (unint64_t *)(v24 + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
  }
  abm::HelperClient::create();
  if (v54)
  {
    v27 = (unint64_t *)&v54->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v29 = xpc_dictionary_create(0, 0, 0);
  if (v29 || (v29 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v29) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v29);
      v30 = v29;
    }
    else
    {
      v30 = xpc_null_create();
    }
  }
  else
  {
    v30 = xpc_null_create();
    v29 = 0;
  }
  xpc_release(v29);
  v31 = *((unsigned __int8 *)a3 + 23);
  if (a3[23] < 0)
  {
    v32 = *(const char **)a3;
    v33 = *((_QWORD *)a3 + 1);
  }
  else
  {
    v32 = a3;
    v33 = *((unsigned __int8 *)a3 + 23);
  }
  v34 = v32 - 1;
  do
  {
    if (!v33)
    {
      v36 = 0;
      memset(__dst, 170, 24);
      if ((v31 & 0x80) != 0)
        goto LABEL_96;
LABEL_44:
      v37 = a3;
      if (v36 <= v31)
      {
        v38 = v31 - v36;
        if (v31 - v36 >= 0x7FFFFFFFFFFFFFF8)
          goto LABEL_98;
        goto LABEL_46;
      }
LABEL_104:
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    v35 = v34[v33--];
  }
  while (v35 != 92 && v35 != 47);
  v36 = v33 + 1;
  memset(__dst, 170, 24);
  if ((v31 & 0x80) == 0)
    goto LABEL_44;
LABEL_96:
  v31 = *((_QWORD *)a3 + 1);
  if (v31 < v36)
    goto LABEL_104;
  v37 = *(const char **)a3;
  v38 = v31 - v36;
  if (v31 - v36 >= 0x7FFFFFFFFFFFFFF8)
LABEL_98:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_46:
  if (v38 >= 0x17)
  {
    v48 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v48 = v38 | 7;
    v49 = v48 + 1;
    v39 = (void **)operator new(v48 + 1);
    __dst[1] = (void *)v38;
    __dst[2] = (void *)(v49 | 0x8000000000000000);
    __dst[0] = v39;
LABEL_64:
    memmove(v39, &v37[v36], v38);
    *((_BYTE *)v39 + v38) = 0;
    if (a3[23] < 0)
      goto LABEL_65;
    goto LABEL_49;
  }
  HIBYTE(__dst[2]) = v38;
  v39 = __dst;
  if (v31 != v36)
    goto LABEL_64;
  *((_BYTE *)__dst + v38) = 0;
  if ((a3[23] & 0x80000000) == 0)
    goto LABEL_49;
LABEL_65:
  a3 = *(const char **)a3;
LABEL_49:
  v40 = xpc_string_create(a3);
  if (!v40)
    v40 = xpc_null_create();
  xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x24BDFC880], v40);
  v41 = xpc_null_create();
  xpc_release(v40);
  xpc_release(v41);
  if (SHIBYTE(__dst[2]) >= 0)
    v42 = (const char *)__dst;
  else
    v42 = (const char *)__dst[0];
  v43 = xpc_string_create(v42);
  if (!v43)
    v43 = xpc_null_create();
  xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x24BDFC8B0], v43);
  v44 = xpc_null_create();
  xpc_release(v43);
  xpc_release(v44);
  v45 = xpc_int64_create(2);
  if (!v45)
    v45 = xpc_null_create();
  xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x24BDFC970], v45);
  v46 = xpc_null_create();
  xpc_release(v45);
  xpc_release(v46);
  v53 = v30;
  if (!v30)
  {
    v53 = xpc_null_create();
    v47 = v55;
    if (!v55)
      goto LABEL_68;
    goto LABEL_67;
  }
  xpc_retain(v30);
  v47 = v55;
  if (v55)
LABEL_67:
    v47 = _Block_copy(v47);
LABEL_68:
  v52 = v47;
  if (object)
    dispatch_retain(object);
  abm::HelperClient::perform();
  if (object)
    dispatch_release(object);
  if (v52)
    _Block_release(v52);
  xpc_release(v53);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  xpc_release(v30);
  do
    v50 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v50 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v50)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (object)
    dispatch_release(object);
  if (v55)
    _Block_release(v55);
  if (v62 == v61)
  {
    v51 = 4;
LABEL_88:
    (*(void (**)(_QWORD *))(*v19 + 8 * v51))(v19);
  }
  else if (v62)
  {
    v51 = 5;
    v19 = v62;
    goto LABEL_88;
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
  std::__shared_weak_count::__release_weak(v11);
}

void sub_24B903908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,dispatch_group_t group,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN10LogTracker22processLogarchive_syncEN8dispatch13group_sessionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_8functionIFvbEEE_block_invoke(_QWORD *a1, _DWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void **v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  void **v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = a1[11];
      if (v11)
      {
        LOBYTE(__p[0]) = *a2 == 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 48))(v11, __p);
      }
      v12 = *a2;
      v13 = *(NSObject **)(v5 + 88);
      if ((_DWORD)v12)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v12, (uint64_t)__p);
          if (v16 >= 0)
            v14 = __p;
          else
            v14 = (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v18 = v14;
          _os_log_error_impl(&dword_24B855000, v13, OS_LOG_TYPE_ERROR, "Logarchive compression failed. Result: %s", buf, 0xCu);
          if (v16 < 0)
            operator delete(__p[0]);
        }
      }
      else if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_24B855000, v13, OS_LOG_TYPE_DEBUG, "#D Logarchive compression is done.", (uint8_t *)__p, 2u);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t result;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a2[7];
  a1[7] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    v8 = a1[7];
    if (v8)
      dispatch_group_enter(v8);
  }
  result = a2[11];
  if (!result)
    goto LABEL_10;
  if ((_QWORD *)result != a2 + 8)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
LABEL_10:
    a1[11] = result;
    return result;
  }
  a1[11] = a1 + 8;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[11] + 24))(a2[11]);
}

void sub_24B903CD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  v3 = *(NSObject **)(v1 + 56);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(v1 + 56);
    if (v4)
      dispatch_release(v4);
  }
  v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  v2 = a1 + 8;
  v3 = (_QWORD *)a1[11];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = a1[7];
  if (v5)
  {
    dispatch_group_leave(v5);
    v6 = a1[7];
    if (v6)
      dispatch_release(v6);
  }
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void LogTracker::jsonSummary_sync(_QWORD *a1, NSObject **a2, xpc_object_t *a3)
{
  const void *v6;
  size_t v7;
  void *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  NSObject *v21;
  xpc_object_t v22;
  NSObject *v23;
  NSObject *v24;
  _QWORD *v25;
  NSObject *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  NSObject *v29;
  xpc_object_t v30;
  _QWORD *v31;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v35;

  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || (TelephonyUtilIsCarrierBuild() & 1) != 0)
  {
    v6 = (const void *)*MEMORY[0x24BE052A0];
    v7 = strlen((const char *)*MEMORY[0x24BE052A0]);
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v8 = (void *)v7;
    if (v7 >= 0x17)
    {
      v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v10 = v7 | 7;
      v11 = v10 + 1;
      v9 = (void **)operator new(v10 + 1);
      __dst[1] = v8;
      v35 = v11 | 0x8000000000000000;
      __dst[0] = v9;
    }
    else
    {
      HIBYTE(v35) = v7;
      v9 = __dst;
      if (!v7)
        goto LABEL_11;
    }
    memmove(v9, v6, (size_t)v8);
LABEL_11:
    *((_BYTE *)v8 + (_QWORD)v9) = 0;
    aBlock = 0;
    cf = 0;
    Service::broadcastEvent((uint64_t)a1, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock)
      _Block_release(aBlock);
    if (cf)
      CFRelease(cf);
    if (SHIBYTE(v35) < 0)
      operator delete(__dst[0]);
    v12 = (std::__shared_weak_count *)a1[16];
    if (!v12 || (v13 = a1[15], (v14 = std::__shared_weak_count::lock(v12)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v15 = v14;
    p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v15);
    }
    v27 = v13;
    v28 = v15;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    v21 = *a2;
    v29 = v21;
    if (v21)
    {
      dispatch_retain(v21);
      dispatch_group_enter(v21);
    }
    v22 = *a3;
    v30 = v22;
    if (v22)
    {
      xpc_retain(v22);
    }
    else
    {
      v22 = xpc_null_create();
      v30 = v22;
    }
    v31 = a1;
    v23 = a1[22];
    v24 = a1[17];
    v25 = operator new(0x28uLL);
    *v25 = v13;
    v25[1] = v15;
    v27 = 0;
    v28 = 0;
    v25[2] = v21;
    if (v21)
    {
      dispatch_retain(v21);
      dispatch_group_enter(v21);
    }
    v25[3] = v22;
    if (v22)
      xpc_retain(v22);
    else
      v25[3] = xpc_null_create();
    v25[4] = a1;
    dispatch_group_notify_f(v23, v24, v25, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0>(dispatch_group_s *,dispatch_queue_s *,LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
    xpc_release(v22);
    if (v21)
    {
      dispatch_group_leave(v21);
      dispatch_release(v21);
    }
    std::__shared_weak_count::__release_weak(v15);
    return;
  }
  v26 = a1[11];
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v27) = 0;
    _os_log_error_impl(&dword_24B855000, v26, OS_LOG_TYPE_ERROR, "JSON summary is not supported!", (uint8_t *)&v27, 2u);
  }
}

void sub_24B904030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;

  LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::~$_0((uint64_t)&a9);
  std::__shared_weak_count::__release_weak(v9);
  _Unwind_Resume(a1);
}

void sub_24B904050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, const void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (aBlock)
    _Block_release(aBlock);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a15);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::~$_0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 16);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t LogTracker::postLogCollectionSupported(LogTracker *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  else
    return TelephonyUtilIsCarrierBuild();
}

void LogTracker::postLogCollectionExternal_sync(_QWORD *a1, xpc_object_t *a2)
{
  NSObject *v4;
  xpc_object_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  xpc_object_t v17;
  unint64_t v18;
  xpc_object_t v19;
  unint64_t v20;
  xpc_object_t v21;
  unint64_t v22;
  unint64_t v23;
  NSObject *v24;
  NSObject *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  _QWORD *v29;
  xpc_object_t v30;
  __int128 v31;
  xpc_object_t v32;
  __int128 v33;
  xpc_object_t v34;
  xpc_object_t v35;
  void *object_8;
  xpc_object_t v37;
  xpc_object_t v38;
  dispatch_object_t v39;
  uint64_t v40;
  _QWORD v41[3];
  _QWORD *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v4 = a1[26];
  v39 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  v38 = *a2;
  v5 = v38;
  if (v38)
  {
    xpc_retain(v38);
  }
  else
  {
    v5 = xpc_null_create();
    v38 = v5;
  }
  v42 = 0;
  LogTracker::systemLog_sync((uint64_t)a1, &v39, &v38, v41);
  v6 = v42;
  if (v42 == v41)
  {
    v7 = 4;
    v6 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  xpc_release(v5);
  v38 = 0;
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
  v8 = (std::__shared_weak_count *)a1[16];
  if (!v8 || (v9 = a1[15], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = *a2;
  v37 = *a2;
  if (*a2)
  {
    xpc_retain(v17);
  }
  else
  {
    v17 = xpc_null_create();
    v37 = v17;
  }
  do
    v18 = __ldxr(p_shared_weak_owners);
  while (__stxr(v18 + 1, p_shared_weak_owners));
  v19 = *a2;
  v35 = *a2;
  if (*a2)
  {
    xpc_retain(v19);
  }
  else
  {
    v19 = xpc_null_create();
    v35 = v19;
  }
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  object_8 = v17;
  if (!v17)
  {
    v17 = xpc_null_create();
    object_8 = v17;
    v21 = *a2;
    v29 = a1;
    v30 = *a2;
    if (*a2)
      goto LABEL_32;
LABEL_34:
    v30 = xpc_null_create();
    goto LABEL_35;
  }
  xpc_retain(v17);
  v21 = *a2;
  v29 = a1;
  v30 = *a2;
  if (!*a2)
    goto LABEL_34;
LABEL_32:
  xpc_retain(v21);
LABEL_35:
  *(_QWORD *)&v31 = v9;
  *((_QWORD *)&v31 + 1) = v11;
  do
    v22 = __ldxr(p_shared_weak_owners);
  while (__stxr(v22 + 1, p_shared_weak_owners));
  v32 = v19;
  if (v19)
    xpc_retain(v19);
  else
    v32 = xpc_null_create();
  *(_QWORD *)&v33 = v9;
  *((_QWORD *)&v33 + 1) = v11;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  v34 = v17;
  if (v17)
    xpc_retain(v17);
  else
    v34 = xpc_null_create();
  v24 = a1[26];
  v25 = a1[17];
  v40 = 0xAAAAAAAAAAAAAAAALL;
  v26 = operator new(0x50uLL);
  *v26 = v29;
  v26[1] = v30;
  if (v30)
  {
    xpc_retain(v30);
    *((_OWORD *)v26 + 1) = v31;
    v27 = v32;
    v26[4] = a1;
    v26[5] = v32;
    if (v32)
      goto LABEL_47;
LABEL_50:
    v26[5] = xpc_null_create();
    *((_OWORD *)v26 + 3) = v33;
    v28 = v34;
    v26[8] = a1;
    v26[9] = v34;
    if (v34)
      goto LABEL_48;
LABEL_51:
    v26[9] = xpc_null_create();
    goto LABEL_52;
  }
  v26[1] = xpc_null_create();
  *((_OWORD *)v26 + 1) = v31;
  v27 = v32;
  v26[4] = a1;
  v26[5] = v32;
  if (!v32)
    goto LABEL_50;
LABEL_47:
  xpc_retain(v27);
  *((_OWORD *)v26 + 3) = v33;
  v28 = v34;
  v26[8] = a1;
  v26[9] = v34;
  if (!v34)
    goto LABEL_51;
LABEL_48:
  xpc_retain(v28);
LABEL_52:
  v40 = 0;
  dispatch_group_notify_f(v24, v25, v26, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&v40);
  xpc_release(v28);
  xpc_release(v27);
  xpc_release(v30);
  xpc_release(object_8);
  std::__shared_weak_count::__release_weak(v11);
  xpc_release(v35);
  std::__shared_weak_count::__release_weak(v11);
  xpc_release(v37);
  std::__shared_weak_count::__release_weak(v11);
  std::__shared_weak_count::__release_weak(v11);
}

void sub_24B90451C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2::~$_2(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(_QWORD *)(a1 + 72) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1::~$_1(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void LogTracker::postLogCollectionInternal_sync(_QWORD *a1, xpc_object_t *a2)
{
  xpc_object_t *v2;
  xpc_object_t value;
  const char *v5;
  char *v6;
  xpc_object_t v7;
  const char *v8;
  xpc_object_t v9;
  const char *v10;
  const char *v11;
  xpc_object_t v12;
  const char *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  int v16;
  xpc_object_t v17;
  const char *v18;
  xpc_object_t v19;
  uint64_t IsInternalBuild;
  uint64_t CompressionMode;
  const void *v22;
  size_t v23;
  size_t v24;
  _BYTE *v25;
  xpc_object_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  NSObject *v30;
  uint64_t v31;
  _DWORD *v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _BOOL4 isDuplicated;
  _BOOL4 v41;
  unint64_t *v42;
  unint64_t v43;
  std::string *v44;
  xpc_object_t v45;
  xpc_object_t v46;
  size_t v47;
  std::string::value_type **v48;
  xpc_object_t v49;
  const char *v50;
  int v51;
  NSObject *v52;
  const char *v53;
  _BYTE *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::ios_base *v60;
  _QWORD *v61;
  std::string *p_s;
  std::string::size_type size;
  _QWORD *v64;
  __int128 v65;
  size_t v66;
  void *v67;
  uint64_t v68;
  const void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  _QWORD *v80;
  int v81;
  size_t v82;
  unint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  std::string *v87;
  int shared_weak_owners_high;
  const std::string::value_type *v89;
  std::string::size_type shared_owners;
  std::string *v91;
  __int128 v92;
  int v93;
  NSObject *v94;
  int v95;
  size_t v96;
  unint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  std::string *v101;
  const char *v102;
  size_t v103;
  std::string *v104;
  __int128 v105;
  const char *v106;
  xpc_object_t *v107;
  void *v108;
  int v109;
  std::__shared_weak_count *v110;
  _QWORD *v111;
  std::__shared_weak_count *v112;
  void *v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  xpc_object_t v118;
  xpc_object_t v119;
  xpc_object_t v120;
  int v121;
  size_t v122;
  std::string::value_type **v123;
  NSObject *v124;
  xpc_object_t v125;
  _QWORD *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  void **v129;
  void *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count *v132;
  unint64_t *p_shared_weak_owners;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  __int128 v137;
  unint64_t v138;
  __int128 v139;
  unint64_t v140;
  void *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  __int128 v145;
  unint64_t v146;
  void *v147;
  __int128 v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  __int128 v154;
  void *v155;
  __int128 v156;
  unint64_t v157;
  NSObject *v158;
  NSObject *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  void *v163;
  uint64_t v164;
  void *v165;
  void *v166;
  void *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count *v170;
  _QWORD *v171;
  xpc_object_t *v172;
  char *v173;
  int v174;
  char v175;
  _BYTE __dst[48];
  void *v177[2];
  xpc_object_t v178[2];
  _OWORD v179[9];
  xpc_object_t __p[2];
  __int128 v181;
  void *v182[2];
  xpc_object_t v183[2];
  __int128 v184;
  __int128 v185;
  _OWORD v186[7];
  _BYTE v187[32];
  _OWORD v188[7];
  _BYTE v189[32];
  __int128 v190;
  __int128 v191;
  __int128 v192;
  _BYTE v193[32];
  void *v194;
  std::__shared_weak_count *v195;
  _BYTE v196[32];
  std::string v197;
  xpc_object_t v198;
  dispatch_object_t v199;
  std::string v200;
  _QWORD *v201;
  std::locale v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  void *v207;
  std::string v208;
  std::string v209;
  BOOL v210[25];
  std::string __s;
  std::string v212;
  void *v213[3];
  void *v214[3];
  std::string::value_type *v215[3];
  _QWORD v216[3];
  _QWORD *v217;
  _BYTE object[248];
  __int128 v219;
  uint8_t buf[4];
  const char *v221;
  __int16 v222;
  xpc_object_t *v223;
  uint64_t v224;

  v2 = a2;
  v224 = *MEMORY[0x24BDAC8D0];
  memset(v215, 170, sizeof(v215));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE051A8]);
  *(_QWORD *)object = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)object = xpc_null_create();
  v6 = (char *)*MEMORY[0x24BE05280];
  xpc::dyn_cast_or_default((xpc *)object, (const object *)*MEMORY[0x24BE05280], v5);
  xpc_release(*(xpc_object_t *)object);
  memset(v214, 170, sizeof(v214));
  v7 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x24BE051A0]);
  *(_QWORD *)object = v7;
  if (v7)
    xpc_retain(v7);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v8);
  xpc_release(*(xpc_object_t *)object);
  memset(v213, 170, sizeof(v213));
  v9 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x24BE05398]);
  *(_QWORD *)object = v9;
  if (v9)
    xpc_retain(v9);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v10);
  xpc_release(*(xpc_object_t *)object);
  memset(&v212, 170, sizeof(v212));
  v11 = (const char *)*MEMORY[0x24BE053F0];
  v12 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x24BE053F0]);
  *(_QWORD *)object = v12;
  if (v12)
    xpc_retain(v12);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v13);
  xpc_release(*(xpc_object_t *)object);
  memset(&__s, 170, sizeof(__s));
  v14 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x24BE05090]);
  __p[0] = v14;
  if (v14)
    xpc_retain(v14);
  else
    __p[0] = xpc_null_create();
  Timestamp::Timestamp((Timestamp *)__dst);
  Timestamp::asString((uint64_t)__dst, 0, 9, object);
  xpc::dyn_cast_or_default();
  if ((object[23] & 0x80000000) != 0)
    operator delete(*(void **)object);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)__dst, *(_QWORD **)&__dst[8]);
  xpc_release(__p[0]);
  v15 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x24BE04E78]);
  *(_QWORD *)object = v15;
  if (v15)
    xpc_retain(v15);
  else
    *(_QWORD *)object = xpc_null_create();
  v16 = xpc::dyn_cast_or_default((xpc *)object, (const object *)7);
  xpc_release(*(xpc_object_t *)object);
  memset(&v210[1], 170, 24);
  v17 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x24BE052D8]);
  *(_QWORD *)object = v17;
  if (v17)
    xpc_retain(v17);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v18);
  xpc_release(*(xpc_object_t *)object);
  v19 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x24BE05800]);
  *(_QWORD *)object = v19;
  if (v19)
    xpc_retain(v19);
  else
    *(_QWORD *)object = xpc_null_create();
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
    CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  else
    CompressionMode = 2;
  v174 = xpc::dyn_cast_or_default((xpc *)object, (const object *)CompressionMode);
  xpc_release(*(xpc_object_t *)object);
  v210[0] = 1;
  v22 = (const void *)*MEMORY[0x24BE05838];
  v23 = strlen((const char *)*MEMORY[0x24BE05838]);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v24 = v23;
  v173 = v6;
  if (v23 >= 0x17)
  {
    v26 = v2;
    v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v27 = v23 | 7;
    v28 = v27 + 1;
    v25 = operator new(v27 + 1);
    *(_QWORD *)&__dst[8] = v24;
    *(_QWORD *)&__dst[16] = v28 | 0x8000000000000000;
    *(_QWORD *)__dst = v25;
    v2 = v26;
    goto LABEL_38;
  }
  __dst[23] = v23;
  v25 = __dst;
  if (v23)
LABEL_38:
    memmove(v25, v22, v24);
  v25[v24] = 0;
  memset(object, 0, 24);
  if (prop::logfilter::get(__dst, (uint64_t)object))
    util::convert<BOOL>((const std::string *)object, v210, 0);
  if ((object[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)object);
    if ((__dst[23] & 0x80000000) == 0)
    {
LABEL_43:
      if (v210[0])
        goto LABEL_44;
LABEL_48:
      v30 = a1[11];
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)object = 0;
        _os_log_impl(&dword_24B855000, v30, OS_LOG_TYPE_DEFAULT, "#I Duplicated Signature Detection is disabled", object, 2u);
      }
      goto LABEL_88;
    }
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(*(void **)__dst);
  if (!v210[0])
    goto LABEL_48;
LABEL_44:
  *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&object[96] = v29;
  *(_OWORD *)&object[80] = v29;
  *(_OWORD *)&object[64] = v29;
  *(_OWORD *)&object[48] = v29;
  *(_OWORD *)&object[32] = v29;
  *(_OWORD *)&object[16] = v29;
  *(_OWORD *)object = v29;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v209, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v209 = __s;
  if (v210[24] < 0)
    std::string::__init_copy_ctor_external(&v208, *(const std::string::value_type **)&v210[1], *(std::string::size_type *)&v210[9]);
  else
    v208 = *(std::string *)&v210[1];
  ResetInfo::ResetInfo((std::string *)object, (__int128 *)v214, (__int128 *)v213, (__int128 *)&v212, (uint64_t)&v209, v16, (__int128 *)&v208);
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v208.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v209.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_56;
  }
  else if ((SHIBYTE(v209.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_56;
  }
  operator delete(v209.__r_.__value_.__l.__data_);
LABEL_56:
  pthread_mutex_lock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
  v31 = qword_2579B8818;
  if (!qword_2579B8818)
  {
    v32 = operator new(0x30uLL);
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(v32 + 2), "com.apple.telephony.abm", "Log Dump History");
    *(_QWORD *)v32 = &off_251CB9828;
    v32[4] = 10;
    *((_QWORD *)v32 + 3) = 0;
    *((_QWORD *)v32 + 4) = 0;
    *((_QWORD *)v32 + 5) = 0;
    LogDumpDB::init((LogDumpDB *)v32);
    v33 = operator new(0x20uLL);
    *v33 = off_251CBEA38;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v32;
    v34 = (std::__shared_weak_count *)off_2579B8820;
    qword_2579B8818 = (uint64_t)v32;
    off_2579B8820 = v33;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v31 = qword_2579B8818;
  }
  v37 = (std::__shared_weak_count *)off_2579B8820;
  *(_QWORD *)__dst = v31;
  *(_QWORD *)&__dst[8] = off_2579B8820;
  if (off_2579B8820)
  {
    v38 = (unint64_t *)((char *)off_2579B8820 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  pthread_mutex_unlock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
  isDuplicated = LogDumpDB::isDuplicated(v31, (uint64_t)object, 1200);
  v41 = isDuplicated;
  if (!v37)
    goto LABEL_70;
  v42 = (unint64_t *)&v37->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    if (v41)
    {
LABEL_71:
      std::string::append(&v212, " (duplicated signature detected)", 0x20uLL);
      if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = &v212;
      else
        v44 = (std::string *)v212.__r_.__value_.__r.__words[0];
      v45 = xpc_string_create((const char *)v44);
      if (!v45)
        v45 = xpc_null_create();
      xpc_dictionary_set_value(*v2, v11, v45);
      v46 = xpc_null_create();
      xpc_release(v45);
      xpc_release(v46);
      if ((object[111] & 0x80000000) != 0)
      {
        operator delete(*(void **)&object[88]);
        if ((object[71] & 0x80000000) == 0)
        {
LABEL_78:
          if ((object[47] & 0x80000000) == 0)
            goto LABEL_79;
          goto LABEL_239;
        }
      }
      else if ((object[71] & 0x80000000) == 0)
      {
        goto LABEL_78;
      }
      operator delete(*(void **)&object[48]);
      if ((object[47] & 0x80000000) == 0)
      {
LABEL_79:
        if ((object[23] & 0x80000000) == 0)
        {
LABEL_80:
          v175 = 1;
          goto LABEL_97;
        }
LABEL_240:
        operator delete(*(void **)object);
        goto LABEL_80;
      }
LABEL_239:
      operator delete(*(void **)&object[24]);
      if ((object[23] & 0x80000000) == 0)
        goto LABEL_80;
      goto LABEL_240;
    }
  }
  else
  {
LABEL_70:
    if (isDuplicated)
      goto LABEL_71;
  }
  if ((object[111] & 0x80000000) != 0)
  {
    operator delete(*(void **)&object[88]);
    if ((object[71] & 0x80000000) == 0)
    {
LABEL_86:
      if ((object[47] & 0x80000000) == 0)
        goto LABEL_87;
LABEL_235:
      operator delete(*(void **)&object[24]);
      if ((object[23] & 0x80000000) == 0)
        goto LABEL_88;
LABEL_236:
      operator delete(*(void **)object);
      goto LABEL_88;
    }
  }
  else if ((object[71] & 0x80000000) == 0)
  {
    goto LABEL_86;
  }
  operator delete(*(void **)&object[48]);
  if ((object[47] & 0x80000000) != 0)
    goto LABEL_235;
LABEL_87:
  if ((object[23] & 0x80000000) != 0)
    goto LABEL_236;
LABEL_88:
  if (SHIBYTE(v215[2]) >= 0)
    v47 = HIBYTE(v215[2]);
  else
    v47 = (size_t)v215[1];
  if (v47 == strlen(v173))
  {
    v48 = SHIBYTE(v215[2]) >= 0 ? v215 : (std::string::value_type **)v215[0];
    if (!memcmp(v48, v173, v47))
    {
      v175 = 0;
      v70 = (const char *)*MEMORY[0x24BE04F98];
      goto LABEL_217;
    }
  }
  v175 = 0;
LABEL_97:
  memset(v189, 170, 24);
  v49 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x24BE05268]);
  *(_QWORD *)object = v49;
  if (v49)
    xpc_retain(v49);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)*MEMORY[0x24BDFC720], v50);
  xpc_release(*(xpc_object_t *)object);
  if (!v174)
  {
    *(_QWORD *)&v55 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v55 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&object[104] = v55;
    v219 = v55;
    *(_OWORD *)&object[232] = v55;
    *(_OWORD *)&object[216] = v55;
    *(_OWORD *)&object[200] = v55;
    *(_OWORD *)&object[184] = v55;
    *(_OWORD *)&object[168] = v55;
    *(_OWORD *)&object[152] = v55;
    *(_OWORD *)&object[136] = v55;
    *(_OWORD *)&object[120] = v55;
    *(_OWORD *)&object[88] = v55;
    *(_OWORD *)&object[72] = v55;
    *(_OWORD *)&object[56] = v55;
    *(_OWORD *)&object[40] = v55;
    *(_OWORD *)&object[24] = v55;
    *(_OWORD *)&object[8] = v55;
    v56 = MEMORY[0x24BEDB870];
    v57 = MEMORY[0x24BEDB870] + 64;
    v58 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
    v59 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
    *(_QWORD *)&object[112] = MEMORY[0x24BEDB870] + 64;
    *(_QWORD *)object = v58;
    *(_QWORD *)&object[*(_QWORD *)(v58 - 24)] = v59;
    v60 = (std::ios_base *)&object[*(_QWORD *)(*(_QWORD *)object - 24)];
    std::ios_base::init(v60, &object[8]);
    v60[1].__vftable = 0;
    v60[1].__fmtflags_ = -1;
    *(_QWORD *)object = v56 + 24;
    *(_QWORD *)&object[112] = v57;
    std::streambuf::basic_streambuf();
    *(_QWORD *)&object[8] = MEMORY[0x24BEDB848] + 16;
    memset(&object[72], 0, 32);
    *(_DWORD *)&object[104] = 16;
    v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(object, (uint64_t)".*(", 3);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_s = &__s;
    else
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    else
      size = __s.__r_.__value_.__l.__size_;
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)p_s, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)").*", 3);
    *(_QWORD *)&v65 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v65 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&__dst[32] = v65;
    *(_OWORD *)v177 = v65;
    *(_OWORD *)__dst = v65;
    *(_OWORD *)&__dst[16] = v65;
    if ((object[104] & 0x10) != 0)
    {
      v68 = *(_QWORD *)&object[96];
      if (*(_QWORD *)&object[96] < *(_QWORD *)&object[56])
      {
        *(_QWORD *)&object[96] = *(_QWORD *)&object[56];
        v68 = *(_QWORD *)&object[56];
      }
      v69 = *(const void **)&object[48];
      v66 = v68 - *(_QWORD *)&object[48];
      if ((unint64_t)(v68 - *(_QWORD *)&object[48]) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_356;
    }
    else
    {
      if ((object[104] & 8) == 0)
      {
        v66 = 0;
        BYTE7(v181) = 0;
        v67 = __p;
        goto LABEL_127;
      }
      v69 = *(const void **)&object[24];
      v66 = *(_QWORD *)&object[40] - *(_QWORD *)&object[24];
      if (*(_QWORD *)&object[40] - *(_QWORD *)&object[24] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_356:
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v66 >= 0x17)
    {
      v71 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v66 | 7) != 0x17)
        v71 = v66 | 7;
      v72 = v71 + 1;
      v67 = operator new(v71 + 1);
      __p[1] = (xpc_object_t)v66;
      *(_QWORD *)&v181 = v72 | 0x8000000000000000;
      __p[0] = v67;
    }
    else
    {
      BYTE7(v181) = v66;
      v67 = __p;
      if (!v66)
      {
LABEL_127:
        *((_BYTE *)v67 + v66) = 0;
        std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)__dst, (uint64_t)__p, 0);
        if (SBYTE7(v181) < 0)
          operator delete(__p[0]);
        v195 = 0;
        v194 = 0;
        *(_QWORD *)v196 = 0;
        std::locale::locale(&v202, (const std::locale *)__dst);
        v203 = *(_OWORD *)&__dst[8];
        v204 = *(_OWORD *)&__dst[24];
        v205 = *(_QWORD *)&__dst[40];
        v206 = (std::__shared_weak_count *)v177[0];
        if (v177[0])
        {
          v73 = (unint64_t *)((char *)v177[0] + 8);
          do
            v74 = __ldxr(v73);
          while (__stxr(v74 + 1, v73));
        }
        v207 = v177[1];
        ctu::fs::get_filtered_files();
        v75 = v206;
        if (v206)
        {
          v76 = (unint64_t *)&v206->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        std::locale::~locale(&v202);
        v78 = (std::__shared_weak_count *)v194;
        v79 = v195;
        v172 = v2;
        if ((v189[23] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)v189, *(std::string::size_type *)&v189[8]);
        else
          v200 = *(std::string *)v189;
        v171 = a1;
        v201 = a1;
        if (v78 == v79)
        {
LABEL_194:
          v108 = (void *)v200.__r_.__value_.__r.__words[0];
          v109 = SHIBYTE(v200.__r_.__value_.__r.__words[2]);
          memset(&v200, 0, sizeof(v200));
          if (v109 < 0)
          {
            operator delete(v108);
            if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v200.__r_.__value_.__l.__data_);
          }
          v110 = (std::__shared_weak_count *)v194;
          a1 = v171;
          v2 = v172;
          v111 = (_QWORD *)MEMORY[0x24BEDB800];
          if (v194)
          {
            v112 = v195;
            v113 = v194;
            if (v195 != v194)
            {
              do
              {
                if (SHIBYTE(v112[-1].__shared_weak_owners_) < 0)
                  operator delete(v112[-1].__vftable);
                --v112;
              }
              while (v112 != v110);
              v113 = v194;
            }
            v195 = v110;
            operator delete(v113);
          }
          v114 = (std::__shared_weak_count *)v177[0];
          v115 = MEMORY[0x24BEDB848];
          if (v177[0])
          {
            v116 = (unint64_t *)((char *)v177[0] + 8);
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
              std::__shared_weak_count::__release_weak(v114);
            }
          }
          std::locale::~locale((std::locale *)__dst);
          *(_QWORD *)object = *v111;
          *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = v111[3];
          *(_QWORD *)&object[8] = v115 + 16;
          if ((object[95] & 0x80000000) != 0)
            operator delete(*(void **)&object[72]);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x24BD29B5C](&object[112]);
          goto LABEL_213;
        }
        while (1)
        {
          v80 = v201;
          v81 = SHIBYTE(v200.__r_.__value_.__r.__words[2]);
          if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v82 = HIBYTE(v200.__r_.__value_.__r.__words[2]);
          else
            v82 = v200.__r_.__value_.__l.__size_;
          v83 = v82 + 1;
          memset(v187, 170, 24);
          if (v82 + 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_357:
            std::string::__throw_length_error[abi:ne180100]();
          if (v83 >= 0x17)
          {
            v85 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v83 | 7) != 0x17)
              v85 = v83 | 7;
            v86 = v85 + 1;
            v84 = operator new(v85 + 1);
            *(_QWORD *)&v187[16] = v86 | 0x8000000000000000;
            *(_QWORD *)v187 = v84;
            *(_QWORD *)&v187[8] = v82 + 1;
          }
          else
          {
            memset(v187, 0, 24);
            v84 = v187;
            v187[23] = v82 + 1;
            if (!v82)
              goto LABEL_158;
          }
          if (v81 >= 0)
            v87 = &v200;
          else
            v87 = (std::string *)v200.__r_.__value_.__r.__words[0];
          memmove(v84, v87, v82);
LABEL_158:
          *(_WORD *)&v84[v82] = 47;
          shared_weak_owners_high = SHIBYTE(v78->__shared_weak_owners_);
          if (shared_weak_owners_high >= 0)
            v89 = (const std::string::value_type *)v78;
          else
            v89 = (const std::string::value_type *)v78->__vftable;
          if (shared_weak_owners_high >= 0)
            shared_owners = HIBYTE(v78->__shared_weak_owners_);
          else
            shared_owners = v78->__shared_owners_;
          v91 = std::string::append((std::string *)v187, v89, shared_owners);
          v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
          *(_QWORD *)&v181 = *((_QWORD *)&v91->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v92;
          v91->__r_.__value_.__l.__size_ = 0;
          v91->__r_.__value_.__r.__words[2] = 0;
          v91->__r_.__value_.__r.__words[0] = 0;
          v93 = ctu::fs::remove_dir();
          if (SBYTE7(v181) < 0)
          {
            operator delete(__p[0]);
            if ((v187[23] & 0x80000000) != 0)
            {
LABEL_169:
              operator delete(*(void **)v187);
              v94 = v80[11];
              if (!os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
                goto LABEL_143;
              goto LABEL_170;
            }
          }
          else if ((v187[23] & 0x80000000) != 0)
          {
            goto LABEL_169;
          }
          v94 = v80[11];
          if (!os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
            goto LABEL_143;
LABEL_170:
          v95 = SHIBYTE(v200.__r_.__value_.__r.__words[2]);
          if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v96 = HIBYTE(v200.__r_.__value_.__r.__words[2]);
          else
            v96 = v200.__r_.__value_.__l.__size_;
          v97 = v96 + 1;
          memset(v187, 170, 24);
          if (v96 + 1 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_357;
          if (v97 >= 0x17)
          {
            v99 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v97 | 7) != 0x17)
              v99 = v97 | 7;
            v100 = v99 + 1;
            v98 = operator new(v99 + 1);
            *(_QWORD *)&v187[16] = v100 | 0x8000000000000000;
            *(_QWORD *)v187 = v98;
            *(_QWORD *)&v187[8] = v96 + 1;
          }
          else
          {
            memset(v187, 0, 24);
            v98 = v187;
            v187[23] = v96 + 1;
            if (!v96)
              goto LABEL_184;
          }
          if (v95 >= 0)
            v101 = &v200;
          else
            v101 = (std::string *)v200.__r_.__value_.__r.__words[0];
          memmove(v98, v101, v96);
LABEL_184:
          *(_WORD *)&v98[v96] = 47;
          if (v78->__shared_weak_owners_ >= 0)
            v102 = (const char *)v78;
          else
            v102 = (const char *)v78->__vftable;
          v103 = strlen(v102);
          v104 = std::string::append((std::string *)v187, v102, v103);
          v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
          *(_QWORD *)&v181 = *((_QWORD *)&v104->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v105;
          v104->__r_.__value_.__l.__size_ = 0;
          v104->__r_.__value_.__r.__words[2] = 0;
          v104->__r_.__value_.__r.__words[0] = 0;
          v106 = "Failed";
          if (v93)
            v106 = "Succeeded";
          v107 = __p;
          if (SBYTE7(v181) < 0)
            v107 = (xpc_object_t *)__p[0];
          *(_DWORD *)buf = 136315394;
          v221 = v106;
          v222 = 2080;
          v223 = v107;
          _os_log_impl(&dword_24B855000, v94, OS_LOG_TYPE_DEFAULT, "#I %s to remove path: %s", buf, 0x16u);
          if (SBYTE7(v181) < 0)
          {
            operator delete(__p[0]);
            if ((v187[23] & 0x80000000) != 0)
              goto LABEL_193;
          }
          else if ((v187[23] & 0x80000000) != 0)
          {
LABEL_193:
            operator delete(*(void **)v187);
          }
LABEL_143:
          if (++v78 == v79)
            goto LABEL_194;
        }
      }
    }
    memmove(v67, v69, v66);
    goto LABEL_127;
  }
  v51 = ctu::fs::remove_dir();
  v52 = a1[11];
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    v53 = "Failed";
    if (v51)
      v53 = "Succeeded";
    v54 = v189;
    if (v189[23] < 0)
      v54 = *(_BYTE **)v189;
    *(_DWORD *)object = 136315394;
    *(_QWORD *)&object[4] = v53;
    *(_WORD *)&object[12] = 2080;
    *(_QWORD *)&object[14] = v54;
    _os_log_impl(&dword_24B855000, v52, OS_LOG_TYPE_DEFAULT, "#I %s to remove dump path: %s", object, 0x16u);
  }
LABEL_213:
  v118 = xpc_int64_create(0);
  if (!v118)
    v118 = xpc_null_create();
  v70 = (const char *)*MEMORY[0x24BE04F98];
  xpc_dictionary_set_value(*v2, (const char *)*MEMORY[0x24BE04F98], v118);
  v119 = xpc_null_create();
  xpc_release(v118);
  xpc_release(v119);
  if ((v189[23] & 0x80000000) != 0)
    operator delete(*(void **)v189);
LABEL_217:
  v120 = xpc_dictionary_get_value(*v2, v70);
  *(_QWORD *)object = v120;
  if (v120)
    xpc_retain(v120);
  else
    *(_QWORD *)object = xpc_null_create();
  v121 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(*(xpc_object_t *)object);
  if (SHIBYTE(v215[2]) >= 0)
    v122 = HIBYTE(v215[2]);
  else
    v122 = (size_t)v215[1];
  if (v122 != strlen(v173))
    goto LABEL_249;
  v123 = SHIBYTE(v215[2]) >= 0 ? v215 : (std::string::value_type **)v215[0];
  if (memcmp(v123, v173, v122) || v121 == 2)
    goto LABEL_249;
  v124 = a1[26];
  v199 = v124;
  if (v124)
  {
    dispatch_retain(v124);
    dispatch_group_enter(v124);
  }
  v125 = *v2;
  v198 = v125;
  if (v125)
  {
    xpc_retain(v125);
  }
  else
  {
    v125 = xpc_null_create();
    v198 = v125;
  }
  v217 = 0;
  LogTracker::systemLog_sync((uint64_t)a1, &v199, &v198, v216);
  v126 = v217;
  if (v217 == v216)
  {
    v127 = 4;
    v126 = v216;
  }
  else
  {
    if (!v217)
      goto LABEL_247;
    v127 = 5;
  }
  (*(void (**)(void))(*v126 + 8 * v127))();
LABEL_247:
  xpc_release(v125);
  v198 = 0;
  if (v124)
  {
    dispatch_group_leave(v124);
    dispatch_release(v124);
  }
LABEL_249:
  v128 = (std::__shared_weak_count *)a1[16];
  if (!v128 || (v129 = v2, v130 = (void *)a1[15], (v131 = std::__shared_weak_count::lock(v128)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v132 = v131;
  p_shared_weak_owners = (unint64_t *)&v131->__shared_weak_owners_;
  do
    v134 = __ldxr(p_shared_weak_owners);
  while (__stxr(v134 + 1, p_shared_weak_owners));
  v135 = (unint64_t *)&v131->__shared_owners_;
  do
    v136 = __ldaxr(v135);
  while (__stlxr(v136 - 1, v135));
  if (!v136)
  {
    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
    std::__shared_weak_count::__release_weak(v132);
  }
  v197.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v137 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v137 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v196[16] = v137;
  *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v137;
  *(_OWORD *)v196 = v137;
  v194 = v130;
  v195 = v132;
  do
    v138 = __ldxr(p_shared_weak_owners);
  while (__stxr(v138 + 1, p_shared_weak_owners));
  *(_QWORD *)v196 = a1;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)&v196[8], __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    *(std::string *)&v196[8] = __s;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v197, v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
  else
    v197 = v212;
  *(_QWORD *)&v139 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v139 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v193 = v139;
  *(_OWORD *)&v193[16] = v139;
  v191 = v139;
  v192 = v139;
  *(_OWORD *)&v189[16] = v139;
  v190 = v139;
  *(_QWORD *)v189 = v130;
  *(_QWORD *)&v189[8] = v132;
  do
    v140 = __ldxr(p_shared_weak_owners);
  while (__stxr(v140 + 1, p_shared_weak_owners));
  *(_QWORD *)&v189[16] = a1;
  v189[24] = v175;
  *(_DWORD *)&v189[28] = v121;
  v141 = *v129;
  *(_QWORD *)&v190 = v141;
  if (!v141)
  {
    *(_QWORD *)&v190 = xpc_null_create();
    v142 = v195;
    *((_QWORD *)&v190 + 1) = v194;
    *(_QWORD *)&v191 = v195;
    if (!v195)
      goto LABEL_273;
LABEL_271:
    v143 = (unint64_t *)&v142->__shared_weak_owners_;
    do
      v144 = __ldxr(v143);
    while (__stxr(v144 + 1, v143));
    goto LABEL_273;
  }
  xpc_retain(v141);
  v142 = v195;
  *((_QWORD *)&v190 + 1) = v194;
  *(_QWORD *)&v191 = v195;
  if (v195)
    goto LABEL_271;
LABEL_273:
  *((_QWORD *)&v191 + 1) = *(_QWORD *)v196;
  if ((v196[31] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v192, *(const std::string::value_type **)&v196[8], *(std::string::size_type *)&v196[16]);
  }
  else
  {
    v192 = *(_OWORD *)&v196[8];
    *(_QWORD *)v193 = *(_QWORD *)&v196[24];
  }
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)&v193[8], v197.__r_.__value_.__l.__data_, v197.__r_.__value_.__l.__size_);
  else
    *(std::string *)&v193[8] = v197;
  *(_QWORD *)&v145 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v145 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v188[5] = v145;
  v188[6] = v145;
  v188[3] = v145;
  v188[4] = v145;
  v188[1] = v145;
  v188[2] = v145;
  *(_OWORD *)&v187[16] = v145;
  v188[0] = v145;
  *(_QWORD *)v187 = v130;
  *(_QWORD *)&v187[8] = v132;
  do
    v146 = __ldxr(p_shared_weak_owners);
  while (__stxr(v146 + 1, p_shared_weak_owners));
  v147 = *v129;
  *(_QWORD *)&v187[16] = a1;
  *(_QWORD *)&v187[24] = v147;
  if (v147)
    xpc_retain(v147);
  else
    *(_QWORD *)&v187[24] = xpc_null_create();
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)v188, (uint64_t)v189);
  *(_QWORD *)&v148 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v148 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v186[5] = v148;
  v186[6] = v148;
  v186[3] = v148;
  v186[4] = v148;
  v186[1] = v148;
  v186[2] = v148;
  v185 = v148;
  v186[0] = v148;
  *(_OWORD *)v183 = v148;
  v184 = v148;
  v181 = v148;
  *(_OWORD *)v182 = v148;
  __p[0] = v130;
  __p[1] = v132;
  do
    v149 = __ldxr(p_shared_weak_owners);
  while (__stxr(v149 + 1, p_shared_weak_owners));
  *(_QWORD *)&v181 = a1;
  DWORD2(v181) = v174;
  BYTE12(v181) = v175;
  if (SHIBYTE(v215[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v182, v215[0], (std::string::size_type)v215[1]);
  }
  else
  {
    *(_OWORD *)v182 = *(_OWORD *)v215;
    v183[0] = v215[2];
  }
  v150 = *v129;
  v183[1] = v150;
  if (!v150)
  {
    v183[1] = xpc_null_create();
    v151 = *(_QWORD *)&v187[8];
    v184 = *(_OWORD *)v187;
    if (!*(_QWORD *)&v187[8])
      goto LABEL_295;
LABEL_293:
    v152 = (unint64_t *)(v151 + 16);
    do
      v153 = __ldxr(v152);
    while (__stxr(v153 + 1, v152));
    goto LABEL_295;
  }
  xpc_retain(v150);
  v151 = *(_QWORD *)&v187[8];
  v184 = *(_OWORD *)v187;
  if (*(_QWORD *)&v187[8])
    goto LABEL_293;
LABEL_295:
  v185 = *(_OWORD *)&v187[16];
  if (*(_QWORD *)&v187[24])
    xpc_retain(*(xpc_object_t *)&v187[24]);
  else
    *((_QWORD *)&v185 + 1) = xpc_null_create();
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)v186, (uint64_t)v188);
  *(_QWORD *)&v154 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v154 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v179[7] = v154;
  v179[8] = v154;
  v179[5] = v154;
  v179[6] = v154;
  v179[3] = v154;
  v179[4] = v154;
  v179[1] = v154;
  v179[2] = v154;
  *(_OWORD *)v178 = v154;
  v179[0] = v154;
  *(_OWORD *)&__dst[32] = v154;
  *(_OWORD *)v177 = v154;
  *(_OWORD *)&__dst[16] = v154;
  v155 = *v129;
  *(_QWORD *)__dst = a1;
  *(_QWORD *)&__dst[8] = v155;
  if (v155)
    xpc_retain(v155);
  else
    *(_QWORD *)&__dst[8] = xpc_null_create();
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)&__dst[16], (uint64_t)__p);
  *(_QWORD *)&object[240] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v156 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v156 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&object[224] = v156;
  *(_OWORD *)&object[208] = v156;
  *(_OWORD *)&object[192] = v156;
  *(_OWORD *)&object[176] = v156;
  *(_OWORD *)&object[160] = v156;
  *(_OWORD *)&object[144] = v156;
  *(_OWORD *)&object[128] = v156;
  *(_OWORD *)&object[112] = v156;
  *(_OWORD *)&object[96] = v156;
  *(_OWORD *)&object[80] = v156;
  *(_OWORD *)&object[64] = v156;
  *(_OWORD *)&object[48] = v156;
  *(_OWORD *)&object[32] = v156;
  *(_OWORD *)&object[16] = v156;
  *(_QWORD *)object = v130;
  *(_QWORD *)&object[8] = v132;
  do
    v157 = __ldxr(p_shared_weak_owners);
  while (__stxr(v157 + 1, p_shared_weak_owners));
  *(_QWORD *)&object[16] = a1;
  *(_OWORD *)&object[24] = *(_OWORD *)__dst;
  if (*(_QWORD *)&__dst[8])
    xpc_retain(*(xpc_object_t *)&__dst[8]);
  else
    *(_QWORD *)&object[32] = xpc_null_create();
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)&object[40], (uint64_t)&__dst[16]);
  v158 = a1[26];
  v159 = a1[17];
  v160 = (char *)operator new(0xF8uLL);
  v161 = *(_OWORD *)object;
  v162 = *(_OWORD *)&object[16];
  *(_QWORD *)&object[8] = 0;
  *(_QWORD *)object = 0;
  *(_OWORD *)v160 = v161;
  *((_OWORD *)v160 + 1) = v162;
  v163 = *(void **)&object[32];
  *((_QWORD *)v160 + 4) = *(_QWORD *)&object[32];
  if (v163)
    xpc_retain(v163);
  else
    *((_QWORD *)v160 + 4) = xpc_null_create();
  *(_OWORD *)(v160 + 40) = *(_OWORD *)&object[40];
  *(_QWORD *)&object[40] = 0;
  *(_QWORD *)&object[48] = 0;
  v164 = *(_QWORD *)&object[88];
  *((_QWORD *)v160 + 7) = *(_QWORD *)&object[56];
  *(_QWORD *)(v160 + 61) = *(_QWORD *)&object[61];
  *(_OWORD *)(v160 + 72) = *(_OWORD *)&object[72];
  memset(&object[72], 0, 24);
  v165 = *(void **)&object[96];
  *((_QWORD *)v160 + 11) = v164;
  *((_QWORD *)v160 + 12) = v165;
  if (v165)
    xpc_retain(v165);
  else
    *((_QWORD *)v160 + 12) = xpc_null_create();
  *(_OWORD *)(v160 + 104) = *(_OWORD *)&object[104];
  *(_QWORD *)&object[112] = 0;
  *(_QWORD *)&object[104] = 0;
  v166 = *(void **)&object[128];
  *((_QWORD *)v160 + 15) = *(_QWORD *)&object[120];
  *((_QWORD *)v160 + 16) = v166;
  if (v166)
    xpc_retain(v166);
  else
    *((_QWORD *)v160 + 16) = xpc_null_create();
  *(_OWORD *)(v160 + 136) = *(_OWORD *)&object[136];
  *(_QWORD *)&object[144] = 0;
  *(_QWORD *)&object[136] = 0;
  *(_OWORD *)(v160 + 152) = *(_OWORD *)&object[152];
  v167 = *(void **)&object[168];
  *((_QWORD *)v160 + 21) = *(_QWORD *)&object[168];
  if (v167)
    xpc_retain(v167);
  else
    *((_QWORD *)v160 + 21) = xpc_null_create();
  v168 = *(_QWORD *)&object[216];
  *((_QWORD *)v160 + 24) = *(_QWORD *)&object[192];
  *((_OWORD *)v160 + 11) = *(_OWORD *)&object[176];
  *(_OWORD *)&object[176] = 0uLL;
  *(_OWORD *)(v160 + 200) = *(_OWORD *)&object[200];
  *((_QWORD *)v160 + 27) = v168;
  *(_QWORD *)&object[208] = 0;
  *(_QWORD *)&object[200] = 0;
  *((_OWORD *)v160 + 14) = *(_OWORD *)&object[224];
  *((_QWORD *)v160 + 30) = *(_QWORD *)&object[240];
  memset(&object[216], 0, 32);
  dispatch_group_notify_f(v158, v159, v160, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6((uint64_t)object);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)v179);
  xpc_release(v178[1]);
  v178[1] = 0;
  if (SHIBYTE(v178[0]) < 0)
    operator delete(v177[0]);
  if (*(_QWORD *)&__dst[24])
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__dst[24]);
  xpc_release(*(xpc_object_t *)&__dst[8]);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)&v184);
  xpc_release(v183[1]);
  v183[1] = 0;
  if (SHIBYTE(v183[0]) < 0)
    operator delete(v182[0]);
  if (__p[1])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)v187);
  if ((v193[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v193[8]);
    if ((v193[7] & 0x80000000) == 0)
    {
LABEL_328:
      v169 = (std::__shared_weak_count *)v191;
      if (!(_QWORD)v191)
        goto LABEL_330;
      goto LABEL_329;
    }
  }
  else if ((v193[7] & 0x80000000) == 0)
  {
    goto LABEL_328;
  }
  operator delete((void *)v192);
  v169 = (std::__shared_weak_count *)v191;
  if ((_QWORD)v191)
LABEL_329:
    std::__shared_weak_count::__release_weak(v169);
LABEL_330:
  xpc_release((xpc_object_t)v190);
  *(_QWORD *)&v190 = 0;
  if (*(_QWORD *)&v189[8])
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v189[8]);
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v197.__r_.__value_.__l.__data_);
    if ((v196[31] & 0x80000000) == 0)
    {
LABEL_334:
      v170 = v195;
      if (!v195)
        goto LABEL_336;
      goto LABEL_335;
    }
  }
  else if ((v196[31] & 0x80000000) == 0)
  {
    goto LABEL_334;
  }
  operator delete(*(void **)&v196[8]);
  v170 = v195;
  if (v195)
LABEL_335:
    std::__shared_weak_count::__release_weak(v170);
LABEL_336:
  std::__shared_weak_count::__release_weak(v132);
  if (v210[24] < 0)
  {
    operator delete(*(void **)&v210[1]);
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_338:
      if ((SHIBYTE(v212.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_339;
      goto LABEL_351;
    }
  }
  else if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_338;
  }
  operator delete(__s.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v212.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_339:
    if ((SHIBYTE(v213[2]) & 0x80000000) == 0)
      goto LABEL_340;
    goto LABEL_352;
  }
LABEL_351:
  operator delete(v212.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v213[2]) & 0x80000000) == 0)
  {
LABEL_340:
    if ((SHIBYTE(v214[2]) & 0x80000000) == 0)
      goto LABEL_341;
    goto LABEL_353;
  }
LABEL_352:
  operator delete(v213[0]);
  if ((SHIBYTE(v214[2]) & 0x80000000) == 0)
  {
LABEL_341:
    if ((SHIBYTE(v215[2]) & 0x80000000) == 0)
      return;
LABEL_354:
    operator delete(v215[0]);
    return;
  }
LABEL_353:
  operator delete(v214[0]);
  if (SHIBYTE(v215[2]) < 0)
    goto LABEL_354;
}

void sub_24B9060A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_24B9066D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a73;

  if (a50 < 0)
  {
    operator delete(__p);
    if (SLOBYTE(STACK[0x20F]) < 0)
    {
LABEL_5:
      operator delete(a73);
      if ((SLOBYTE(STACK[0x367]) & 0x80000000) == 0)
        JUMPOUT(0x24B906640);
      JUMPOUT(0x24B906638);
    }
  }
  else if (SLOBYTE(STACK[0x20F]) < 0)
  {
    goto LABEL_5;
  }
  JUMPOUT(0x24B906630);
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v7 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  if (!v7)
  {
    *(_QWORD *)(a1 + 32) = xpc_null_create();
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v8;
    if (!v8)
      goto LABEL_10;
LABEL_8:
    v9 = (unint64_t *)(v8 + 16);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    goto LABEL_10;
  }
  xpc_retain(v7);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  if (v8)
    goto LABEL_8;
LABEL_10:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v11;
  }
  v12 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  return a1;
}

void sub_24B90682C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  xpc_release(*(xpc_object_t *)(v1 + 32));
  *(_QWORD *)(v1 + 32) = 0;
  v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  void *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 21) = *(_QWORD *)(a2 + 21);
  *(_QWORD *)(a1 + 16) = v7;
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v8;
  }
  v9 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  if (!v9)
  {
    *(_QWORD *)(a1 + 56) = xpc_null_create();
    v10 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v10;
    if (!v10)
      goto LABEL_13;
LABEL_11:
    v11 = (unint64_t *)(v10 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    goto LABEL_13;
  }
  xpc_retain(v9);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  if (v10)
    goto LABEL_11;
LABEL_13:
  v13 = *(void **)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v13;
  if (v13)
    xpc_retain(v13);
  else
    *(_QWORD *)(a1 + 88) = xpc_null_create();
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2(a1 + 96, a2 + 96);
  return a1;
}

void sub_24B906978(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (!v3)
    _Unwind_Resume(exception_object);
  std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 104);
  xpc_release(*(xpc_object_t *)(a1 + 96));
  *(_QWORD *)(a1 + 96) = 0;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5::~$_5(uint64_t a1)
{
  std::__shared_weak_count *v2;

  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 80);
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(_QWORD *)(a1 + 72) = 0;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::~$_4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 64);
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(std::__shared_weak_count **)(a1 + 80);
      if (!v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2)
LABEL_4:
    std::__shared_weak_count::__release_weak(v2);
LABEL_5:
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::~$_2(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(std::__shared_weak_count **)(a1 + 48);
      if (!v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 64));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
LABEL_4:
    std::__shared_weak_count::__release_weak(v2);
LABEL_5:
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1::~$_1(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_7:
    operator delete(*(void **)(a1 + 24));
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2)
      return a1;
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_7;
LABEL_3:
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
LABEL_4:
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t LogTracker::markPurgeable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  __darwin_ino64_t v18;
  stat *p_dst;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void **v29;
  void **v30;
  std::string *v31;
  uint64_t v32;
  void *v33;
  int v34;
  void **v35;
  _WORD *v36;
  int v37;
  size_t size;
  unint64_t v39;
  stat *v40;
  uint64_t v41;
  uint64_t v42;
  std::string *v43;
  int v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  timespec v49;
  std::string *p_sz;
  std::string *v51;
  DIR *v52;
  DIR *v53;
  dirent *v54;
  _BOOL4 v55;
  NSObject *v56;
  NSObject *v57;
  std::string *v58;
  void *v59;
  int v60;
  void **v61;
  void **v62;
  void *v63;
  std::__shared_weak_count *v64;
  uint64_t *v65;
  unint64_t *v66;
  unint64_t v67;
  std::string v69;
  uint64_t v70;
  std::locale v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  void *v77;
  void **v78;
  uint64_t v79;
  _BYTE v80[48];
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _OWORD v89[10];
  std::string v90;
  void *__p[2];
  char v92;
  std::string __sz;
  stat __dst;
  uint8_t buf[4];
  std::string *v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v89[0] = v6;
  v89[9] = v6;
  v89[8] = v6;
  v89[7] = v6;
  v89[6] = v6;
  v89[5] = v6;
  v89[4] = v6;
  v89[3] = v6;
  v89[2] = v6;
  v89[1] = v6;
  v88 = v6;
  v87 = v6;
  v86 = v6;
  v85 = v6;
  v84 = v6;
  v83 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v9 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *((_QWORD *)&v89[0] + 1) = MEMORY[0x24BEDB870] + 64;
  v82 = v9;
  *(uint64_t *)((char *)&v82 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v82 + *(_QWORD *)(v82 - 24));
  std::ios_base::init(v11, &v83);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v82 = v7 + 24;
  *((_QWORD *)&v89[0] + 1) = v8;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&v83 = MEMORY[0x24BEDB848] + 16;
  v87 = 0u;
  v88 = 0u;
  LODWORD(v89[0]) = 16;
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)".*(", 3);
  v13 = *(char *)(a3 + 23);
  if (v13 >= 0)
    v14 = a3;
  else
    v14 = *(_QWORD *)a3;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)").*", 3);
  *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v80[32] = v17;
  v81 = v17;
  *(_OWORD *)v80 = v17;
  *(_OWORD *)&v80[16] = v17;
  if ((v89[0] & 0x10) != 0)
  {
    v20 = *((_QWORD *)&v88 + 1);
    if (*((_QWORD *)&v88 + 1) < (unint64_t)v86)
    {
      *((_QWORD *)&v88 + 1) = v86;
      v20 = v86;
    }
    v21 = (const void *)*((_QWORD *)&v85 + 1);
    v18 = v20 - *((_QWORD *)&v85 + 1);
    if ((unint64_t)(v20 - *((_QWORD *)&v85 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_32;
  }
  else
  {
    if ((v89[0] & 8) == 0)
    {
      v18 = 0;
      HIBYTE(__dst.st_gid) = 0;
      p_dst = &__dst;
      goto LABEL_20;
    }
    v21 = (const void *)v84;
    v18 = v85 - v84;
    if ((_QWORD)v85 - (_QWORD)v84 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_32:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v18 >= 0x17)
  {
    v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v22 = v18 | 7;
    v23 = v22 + 1;
    p_dst = (stat *)operator new(v22 + 1);
    *(_QWORD *)&__dst.st_uid = v23 | 0x8000000000000000;
    *(_QWORD *)&__dst.st_dev = p_dst;
    __dst.st_ino = v18;
    goto LABEL_19;
  }
  HIBYTE(__dst.st_gid) = v18;
  p_dst = &__dst;
  if (v18)
LABEL_19:
    memmove(p_dst, v21, v18);
LABEL_20:
  *((_BYTE *)&p_dst->st_dev + v18) = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v80, (uint64_t)&__dst, 0);
  if (SHIBYTE(__dst.st_gid) < 0)
    operator delete(*(void **)&__dst.st_dev);
  v77 = 0;
  v78 = 0;
  v79 = 0;
  std::locale::locale(&v71, (const std::locale *)v80);
  v72 = *(_OWORD *)&v80[8];
  v73 = *(_OWORD *)&v80[24];
  v74 = *(_QWORD *)&v80[40];
  v75 = (std::__shared_weak_count *)v81;
  if ((_QWORD)v81)
  {
    v24 = (unint64_t *)(v81 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v76 = *((_QWORD *)&v81 + 1);
  ctu::fs::get_filtered_files();
  v26 = v75;
  if (!v75)
    goto LABEL_29;
  p_shared_owners = (unint64_t *)&v75->__shared_owners_;
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    std::locale::~locale(&v71);
    v29 = (void **)v77;
    v30 = v78;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_30;
  }
  else
  {
LABEL_29:
    std::locale::~locale(&v71);
    v29 = (void **)v77;
    v30 = v78;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_30:
      v69 = *(std::string *)a2;
      goto LABEL_35;
    }
  }
  std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
LABEL_35:
  v70 = a1;
  while (v29 != v30)
  {
    v32 = v70;
    v33 = (void *)*((unsigned __int8 *)v29 + 23);
    v34 = (char)v33;
    if ((char)v33 < 0)
      v33 = v29[1];
    if (v33 == (void *)2)
    {
      if (v34 >= 0)
        v36 = v29;
      else
        v36 = *v29;
      if (*v36 == 11822)
        goto LABEL_41;
    }
    else if (v33 == (void *)1)
    {
      v35 = v34 >= 0 ? v29 : (void **)*v29;
      if (*(_BYTE *)v35 == 46)
        goto LABEL_41;
    }
    memset(&__sz, 170, sizeof(__sz));
    v37 = SHIBYTE(v69.__r_.__value_.__r.__words[2]);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    else
      size = v69.__r_.__value_.__l.__size_;
    v39 = size + 1;
    memset(&__dst, 170, 24);
    if (size + 1 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v39 >= 0x17)
    {
      v41 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v39 | 7) != 0x17)
        v41 = v39 | 7;
      v42 = v41 + 1;
      v40 = (stat *)operator new(v41 + 1);
      *(_QWORD *)&__dst.st_uid = v42 | 0x8000000000000000;
      *(_QWORD *)&__dst.st_dev = v40;
      __dst.st_ino = size + 1;
    }
    else
    {
      memset(&__dst, 0, 24);
      v40 = &__dst;
      HIBYTE(__dst.st_gid) = size + 1;
      if (!size)
        goto LABEL_69;
    }
    if (v37 >= 0)
      v43 = &v69;
    else
      v43 = (std::string *)v69.__r_.__value_.__r.__words[0];
    memmove(v40, v43, size);
LABEL_69:
    *(_WORD *)((char *)&v40->st_dev + size) = 47;
    v44 = *((char *)v29 + 23);
    if (v44 >= 0)
      v45 = (const std::string::value_type *)v29;
    else
      v45 = (const std::string::value_type *)*v29;
    if (v44 >= 0)
      v46 = *((unsigned __int8 *)v29 + 23);
    else
      v46 = (std::string::size_type)v29[1];
    v47 = std::string::append((std::string *)&__dst, v45, v46);
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    __sz.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__sz.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.st_gid) < 0)
      operator delete(*(void **)&__dst.st_dev);
    v49.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v49.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blksize = v49;
    *(timespec *)__dst.st_qspare = v49;
    __dst.st_birthtimespec = v49;
    *(timespec *)&__dst.st_size = v49;
    __dst.st_mtimespec = v49;
    __dst.st_ctimespec = v49;
    *(timespec *)&__dst.st_uid = v49;
    __dst.st_atimespec = v49;
    *(timespec *)&__dst.st_dev = v49;
    if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_sz = &__sz;
    else
      p_sz = (std::string *)__sz.__r_.__value_.__r.__words[0];
    if (!stat((const char *)p_sz, &__dst))
    {
      v51 = (__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__sz
          : (std::string *)__sz.__r_.__value_.__r.__words[0];
      v52 = opendir((const char *)v51);
      v53 = v52;
      if (v52)
      {
        v54 = readdir(v52);
        closedir(v53);
        if (v54)
        {
          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__dst, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&__dst.st_dev = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
            *(_QWORD *)&__dst.st_uid = *((_QWORD *)&__sz.__r_.__value_.__l + 2);
          }
          v92 = 2;
          strcpy((char *)__p, ".*");
          LogTracker::markPurgeable(v32, &__dst, __p);
          if (v92 < 0)
          {
            operator delete(__p[0]);
            if ((SHIBYTE(__dst.st_gid) & 0x80000000) == 0)
              goto LABEL_81;
          }
          else if ((SHIBYTE(__dst.st_gid) & 0x80000000) == 0)
          {
            goto LABEL_81;
          }
          operator delete(*(void **)&__dst.st_dev);
        }
      }
    }
LABEL_81:
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v90, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
    else
      v90 = __sz;
    v55 = util::markPurgeableFile((uint64_t *)&v90);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v90.__r_.__value_.__l.__data_);
      v56 = *(NSObject **)(v32 + 88);
      v57 = v56;
      if (v55)
      {
LABEL_93:
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v31 = &__sz;
          else
            v31 = (std::string *)__sz.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315138;
          v96 = v31;
          _os_log_impl(&dword_24B855000, v56, OS_LOG_TYPE_DEFAULT, "#I %s is marked to be purgeable", buf, 0xCu);
          if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_41;
          goto LABEL_98;
        }
        goto LABEL_97;
      }
    }
    else
    {
      v56 = *(NSObject **)(v32 + 88);
      v57 = v56;
      if (v55)
        goto LABEL_93;
    }
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = &__sz;
      else
        v58 = (std::string *)__sz.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v96 = v58;
      _os_log_error_impl(&dword_24B855000, v56, OS_LOG_TYPE_ERROR, "Failed to mark %s to be purgeable", buf, 0xCu);
      if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_41;
LABEL_98:
      operator delete(__sz.__r_.__value_.__l.__data_);
      goto LABEL_41;
    }
LABEL_97:
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_98;
LABEL_41:
    v29 += 3;
  }
  v59 = (void *)v69.__r_.__value_.__r.__words[0];
  v60 = SHIBYTE(v69.__r_.__value_.__r.__words[2]);
  memset(&v69, 0, sizeof(v69));
  if (v60 < 0)
  {
    operator delete(v59);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
  }
  v61 = (void **)v77;
  if (v77)
  {
    v62 = v78;
    v63 = v77;
    if (v78 != v77)
    {
      do
      {
        if (*((char *)v62 - 1) < 0)
          operator delete(*(v62 - 3));
        v62 -= 3;
      }
      while (v62 != v61);
      v63 = v77;
    }
    v78 = v61;
    operator delete(v63);
  }
  v64 = (std::__shared_weak_count *)v81;
  v65 = (uint64_t *)MEMORY[0x24BEDB800];
  if ((_QWORD)v81)
  {
    v66 = (unint64_t *)(v81 + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  std::locale::~locale((std::locale *)v80);
  v82 = *v65;
  *(uint64_t *)((char *)&v82 + *(_QWORD *)(v82 - 24)) = v65[3];
  *(_QWORD *)&v83 = MEMORY[0x24BEDB848] + 16;
  if (SBYTE7(v88) < 0)
    operator delete((void *)v87);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x24BD29B5C]((char *)v89 + 8);
}

void sub_24B9074F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,std::locale a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  std::vector<std::string>::~vector[abi:ne180100](&a26);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a29);
  std::ostringstream::~ostringstream((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void LogTracker::houseKeepingLogs_sync(uint64_t a1, const char *a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  xpc_object_t v37;
  std::__shared_weak_count *v38;
  std::string v39;
  void *v40[2];
  unint64_t v41;
  std::string v42;
  void *__p[2];
  unint64_t v44;
  std::string v45;
  void *__dst[2];
  unint64_t v47;
  _QWORD block[5];

  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || (TelephonyUtilIsCarrierBuild() & 1) != 0)
    goto LABEL_15;
  v4 = (const void *)*MEMORY[0x24BDFC720];
  v5 = strlen((const char *)*MEMORY[0x24BDFC720]);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v47 = v9 | 0x8000000000000000;
    __dst[0] = v7;
LABEL_11:
    memmove(v7, v4, (size_t)v6);
    *((_BYTE *)v6 + (_QWORD)v7) = 0;
    if ((a2[23] & 0x80000000) == 0)
      goto LABEL_7;
LABEL_12:
    std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    goto LABEL_13;
  }
  HIBYTE(v47) = v5;
  v7 = __dst;
  if (v5)
    goto LABEL_11;
  LOBYTE(__dst[0]) = 0;
  if (a2[23] < 0)
    goto LABEL_12;
LABEL_7:
  v45 = *(std::string *)a2;
LABEL_13:
  LogTracker::markPurgeable(a1, (uint64_t)__dst, (uint64_t)&v45);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v45.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v47) & 0x80000000) == 0)
      goto LABEL_15;
  }
  else if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(__dst[0]);
LABEL_15:
  v10 = (const void *)*MEMORY[0x24BDFC738];
  v11 = strlen((const char *)*MEMORY[0x24BDFC738]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    __p[1] = v12;
    v44 = v15 | 0x8000000000000000;
    __p[0] = v13;
LABEL_23:
    memmove(v13, v10, (size_t)v12);
    *((_BYTE *)v12 + (_QWORD)v13) = 0;
    if ((a2[23] & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_24;
  }
  HIBYTE(v44) = v11;
  v13 = __p;
  if (v11)
    goto LABEL_23;
  LOBYTE(__p[0]) = 0;
  if ((a2[23] & 0x80000000) == 0)
  {
LABEL_19:
    v42 = *(std::string *)a2;
    goto LABEL_25;
  }
LABEL_24:
  std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
LABEL_25:
  LogTracker::markPurgeable(a1, (uint64_t)__p, (uint64_t)&v42);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v44) & 0x80000000) == 0)
      goto LABEL_27;
  }
  else if ((SHIBYTE(v44) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(__p[0]);
LABEL_27:
  v16 = (const void *)*MEMORY[0x24BDFC758];
  v17 = strlen((const char *)*MEMORY[0x24BDFC758]);
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    v19 = operator new(v20 + 1);
    v40[1] = v18;
    v41 = v21 | 0x8000000000000000;
    v40[0] = v19;
LABEL_35:
    memmove(v19, v16, (size_t)v18);
    *((_BYTE *)v18 + (_QWORD)v19) = 0;
    if ((a2[23] & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_36;
  }
  HIBYTE(v41) = v17;
  v19 = v40;
  if (v17)
    goto LABEL_35;
  LOBYTE(v40[0]) = 0;
  if ((a2[23] & 0x80000000) == 0)
  {
LABEL_31:
    v39 = *(std::string *)a2;
    goto LABEL_37;
  }
LABEL_36:
  std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
LABEL_37:
  LogTracker::markPurgeable(a1, (uint64_t)v40, (uint64_t)&v39);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v39.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v41) & 0x80000000) == 0)
    {
LABEL_39:
      if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE04EE8], v22))
        goto LABEL_47;
      goto LABEL_45;
    }
  }
  else if ((SHIBYTE(v41) & 0x80000000) == 0)
  {
    goto LABEL_39;
  }
  operator delete(v40[0]);
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE04EE8], v24))
    goto LABEL_47;
LABEL_45:
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE05920], v23)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE04F58], v25))
  {
LABEL_47:
    v26 = xpc_dictionary_create(0, 0, 0);
    if (v26 || (v26 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x24BD2A468](v26) == MEMORY[0x24BDACFA0])
      {
        xpc_retain(v26);
        v27 = v26;
      }
      else
      {
        v27 = xpc_null_create();
      }
    }
    else
    {
      v27 = xpc_null_create();
      v26 = 0;
    }
    xpc_release(v26);
    if (a2[23] < 0)
      a2 = *(const char **)a2;
    v28 = xpc_string_create(a2);
    if (!v28)
      v28 = xpc_null_create();
    xpc_dictionary_set_value(v27, (const char *)*MEMORY[0x24BDFC868], v28);
    v29 = xpc_null_create();
    xpc_release(v28);
    xpc_release(v29);
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
    }
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_13_5;
    block[4] = &GetABMLogServer(void)::sLogServer;
    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v31 = *(_QWORD *)algn_2579B8AE8;
      v38 = *(std::__shared_weak_count **)algn_2579B8AE8;
      if (!*(_QWORD *)algn_2579B8AE8)
        goto LABEL_62;
    }
    else
    {
      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
      v31 = *(_QWORD *)algn_2579B8AE8;
      v38 = *(std::__shared_weak_count **)algn_2579B8AE8;
      if (!*(_QWORD *)algn_2579B8AE8)
        goto LABEL_62;
    }
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
LABEL_62:
    abm::HelperClient::create();
    if (!v38)
      goto LABEL_66;
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
      v37 = v27;
      if (v27)
        goto LABEL_67;
    }
    else
    {
LABEL_66:
      v37 = v27;
      if (v27)
      {
LABEL_67:
        xpc_retain(v27);
        goto LABEL_70;
      }
    }
    v37 = xpc_null_create();
LABEL_70:
    abm::HelperClient::perform();
    xpc_release(v37);
    do
      v36 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
    while (__stlxr(v36 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
    if (!v36)
    {
      (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
    }
    xpc_release(v27);
  }
}

void sub_24B907C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (*(char *)(v46 - 105) < 0)
    operator delete(*(void **)(v46 - 128));
  _Unwind_Resume(exception_object);
}

BOOL LogTracker::isDefaultCarrierProfileInstalled(LogTracker *this)
{
  const void *v1;
  size_t v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *__dst[2];
  unint64_t v9;
  int v10;
  std::string __p;

  v10 = -1431655766;
  v1 = (const void *)*MEMORY[0x24BE05808];
  v2 = strlen((const char *)*MEMORY[0x24BE05808]);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v3 = (void *)v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = v3;
    v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v9) = v2;
  v4 = __dst;
  if (v2)
LABEL_8:
    memmove(v4, v1, (size_t)v3);
  *((_BYTE *)v3 + (_QWORD)v4) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::profile::get((char *)__dst, (uint64_t)&__p))
    util::convert<int>(&__p, &v10, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v9) & 0x80000000) == 0)
      return v10 != 0;
LABEL_15:
    operator delete(__dst[0]);
    return v10 != 0;
  }
  if (SHIBYTE(v9) < 0)
    goto LABEL_15;
  return v10 != 0;
}

void sub_24B907E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

BOOL LogTracker::isInternalProperty_sync(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  std::string *p_string;
  xpc_object_t value;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  NSObject *v17;
  char **v18;
  void **v19;
  std::string *v20;
  char *v22;
  const char *v23;
  const char *v24;
  void **v25;
  TapToRadar *v26;
  _BOOL8 v27;
  int Mode;
  xpc_object_t object;
  xpc_object_t objecta;
  xpc_object_t objectb;
  std::string v32;
  std::string string;
  void *v34[2];
  int64_t v35;
  char *v36[2];
  int64_t v37;
  std::string __p;
  void **v39;
  __int16 v40;
  std::string *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v36[0] = 0;
  v36[1] = 0;
  v37 = 0;
  v34[0] = 0;
  v34[1] = 0;
  v35 = 0;
  memset(&string, 0, sizeof(string));
  v8 = MEMORY[0x24BD2A468](*a2);
  v9 = MEMORY[0x24BDACFA0];
  if (v8 != MEMORY[0x24BDACFA0])
  {
    v10 = 0;
    goto LABEL_3;
  }
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE04E98]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  *(_OWORD *)v36 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  v37 = v32.__r_.__value_.__r.__words[2];
  *((_BYTE *)&v32.__r_.__value_.__s + 23) = 0;
  v32.__r_.__value_.__s.__data_[0] = 0;
  xpc_release(object);
  v13 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE051B0]);
  objecta = v13;
  if (v13)
    xpc_retain(v13);
  else
    objecta = xpc_null_create();
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v35) < 0)
    operator delete(v34[0]);
  *(_OWORD *)v34 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  v35 = v32.__r_.__value_.__r.__words[2];
  *((_BYTE *)&v32.__r_.__value_.__s + 23) = 0;
  v32.__r_.__value_.__s.__data_[0] = 0;
  xpc_release(objecta);
  v14 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05270]);
  objectb = v14;
  if (v14)
    xpc_retain(v14);
  else
    objectb = xpc_null_create();
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0)
    operator delete(string.__r_.__value_.__l.__data_);
  string = v32;
  xpc_release(objectb);
  if ((SHIBYTE(v37) & 0x80000000) == 0)
  {
    if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x24BE04FE8]))
    {
      if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x24BE04FA0]))
      {
        if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x24BE04F98]))
        {
          v22 = (char *)*MEMORY[0x24BE04EB0];
          if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x24BE04EB0]))
          {
            v22 = (char *)*MEMORY[0x24BE04F00];
            if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x24BE04F00]))
            {
              v22 = (char *)*MEMORY[0x24BE04EF8];
              v23 = (const char *)v36;
              v24 = (const char *)v36;
LABEL_56:
              if (strcasecmp(v24, v22))
              {
                v22 = (char *)*MEMORY[0x24BE04E38];
                if (strcasecmp(v23, (const char *)*MEMORY[0x24BE04E38]))
                {
                  v10 = 0;
                  goto LABEL_3;
                }
              }
              goto LABEL_74;
            }
          }
          goto LABEL_74;
        }
LABEL_64:
        v27 = prop::systemlogs::get((char *)v34, (uint64_t)&string);
        goto LABEL_69;
      }
      goto LABEL_60;
    }
LABEL_59:
    v27 = prop::compression::get((char *)v34, (uint64_t)&string);
LABEL_69:
    v10 = v27;
    goto LABEL_3;
  }
  v23 = v36[0];
  if (!strcasecmp(v36[0], (const char *)*MEMORY[0x24BE04FE8]))
    goto LABEL_59;
  if (strcasecmp(v36[0], (const char *)*MEMORY[0x24BE04FA0]))
  {
    if (strcasecmp(v36[0], (const char *)*MEMORY[0x24BE04F98]))
    {
      v22 = (char *)*MEMORY[0x24BE04EB0];
      if (strcasecmp(v36[0], (const char *)*MEMORY[0x24BE04EB0]))
      {
        v22 = (char *)*MEMORY[0x24BE04F00];
        if (strcasecmp(v36[0], (const char *)*MEMORY[0x24BE04F00]))
        {
          v22 = (char *)*MEMORY[0x24BE04EF8];
          v24 = v36[0];
          goto LABEL_56;
        }
      }
LABEL_74:
      std::string::basic_string[abi:ne180100]<0>(&__p, v22);
      v10 = prop::get((char *)&__p, (char *)v34, (uint64_t)&string);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_3;
    }
    goto LABEL_64;
  }
LABEL_60:
  if (v35 >= 0)
    v25 = v34;
  else
    v25 = (void **)v34[0];
  v26 = (TapToRadar *)strcasecmp((const char *)v25, (const char *)*MEMORY[0x24BE04E90]);
  if ((_DWORD)v26)
  {
    v27 = prop::ttr::get((char *)v34, (uint64_t)&string);
    goto LABEL_69;
  }
  Mode = TapToRadar::getMode(v26);
  util::to_str<int>(&__p, Mode);
  if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0)
    operator delete(string.__r_.__value_.__l.__data_);
  string = __p;
  v10 = 1;
LABEL_3:
  if (MEMORY[0x24BD2A468](*a3) != v9)
    goto LABEL_22;
  if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!string.__r_.__value_.__l.__size_)
      goto LABEL_22;
    p_string = (std::string *)string.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&string.__r_.__value_.__s + 23))
      goto LABEL_22;
    p_string = &string;
  }
  v15 = xpc_string_create((const char *)p_string);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x24BE05270], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
LABEL_22:
  if (!v10)
  {
    *a4 = -534716416;
    if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_37;
LABEL_33:
    if (SHIBYTE(v35) < 0)
      goto LABEL_38;
    goto LABEL_34;
  }
  v17 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *a4 = 0;
    if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_37;
    goto LABEL_33;
  }
  v18 = v36;
  if (v37 < 0)
    v18 = (char **)v36[0];
  v19 = v34;
  if (v35 < 0)
    v19 = (void **)v34[0];
  LODWORD(__p.__r_.__value_.__l.__data_) = 136315906;
  v20 = &string;
  if ((string.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = (std::string *)string.__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"get";
  WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
  HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
  v39 = v19;
  v40 = 2080;
  v41 = v20;
  _os_log_impl(&dword_24B855000, v17, OS_LOG_TYPE_DEFAULT, "#I Internal %s trace property: %s, %s = %s", (uint8_t *)&__p, 0x2Au);
  *a4 = 0;
  if ((SHIBYTE(string.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_33;
LABEL_37:
  operator delete(string.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
  {
LABEL_38:
    operator delete(v34[0]);
    if (SHIBYTE(v37) < 0)
      goto LABEL_39;
    return v10;
  }
LABEL_34:
  if (SHIBYTE(v37) < 0)
LABEL_39:
    operator delete(v36[0]);
  return v10;
}

void sub_24B9086E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  operator delete(a20);
  if ((a32 & 0x80000000) == 0)
LABEL_7:
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(a27);
  goto LABEL_7;
}

double util::to_str<int>(std::string *a1, int __val)
{
  double result;
  std::string v4;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, __val);
  result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a1 = v4;
  return result;
}

void sub_24B908890(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x24B908880);
}

void sub_24B90889C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void LogTracker::getLoggingConfig(xpc_object_t *a1@<X8>)
{
  char *v3;
  std::string *v4;
  __int128 v5;
  unsigned int v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string::value_type *v10;
  std::string::size_type size;
  std::string::size_type v12;
  const void *v13;
  void *v14;
  CFTypeID v15;
  const void *v16;
  void *v17;
  std::string v18;
  std::string::value_type __s[23];
  char v20;
  std::string v21;
  std::string v22;
  std::string v23;

  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&v21.__r_.__value_.__r.__words[1] = xmmword_24B953EA0;
  strcpy(v21.__r_.__value_.__l.__data_, "/System/Library/PrivateFrameworks/ABMHelper.framework/");
  v3 = (char *)operator new(0x20uLL);
  strcpy(v3, "com.apple.commcenter.logconfig");
  v4 = std::string::append(&v21, v3, 0x1EuLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (config::hw::watch((config::hw *)v4))
  {
    strcpy(__s, ".watchos");
    v6 = 8;
  }
  else
  {
    strcpy(__s, ".ios");
    v6 = 4;
  }
  v20 = v6;
  v7 = std::string::append(&v22, __s, v6);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v23, ".plist", 6uLL);
  v10 = (std::string::value_type *)v9->__r_.__value_.__r.__words[0];
  size = v9->__r_.__value_.__l.__size_;
  v12 = v9->__r_.__value_.__r.__words[2];
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((v20 & 0x80000000) == 0)
    {
LABEL_6:
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_12;
    }
  }
  else if ((v20 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)__s);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_7:
    operator delete(v3);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_13:
    operator delete(v21.__r_.__value_.__l.__data_);
    if ((v12 & 0x8000000000000000) == 0)
      goto LABEL_9;
LABEL_14:
    std::string::__init_copy_ctor_external(&v18, v10, size);
    goto LABEL_15;
  }
LABEL_12:
  operator delete(v22.__r_.__value_.__l.__data_);
  operator delete(v3);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_13;
LABEL_8:
  if ((v12 & 0x8000000000000000) != 0)
    goto LABEL_14;
LABEL_9:
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  v18.__r_.__value_.__l.__size_ = size;
  v18.__r_.__value_.__r.__words[2] = v12;
LABEL_15:
  util::readPlistToCFDictionary((uint64_t)&v18, &v22);
  v14 = (void *)v22.__r_.__value_.__r.__words[0];
  if (!v22.__r_.__value_.__r.__words[0]
    || (v15 = CFGetTypeID(v22.__r_.__value_.__l.__data_), v15 != CFDictionaryGetTypeID()))
  {
    v14 = 0;
    v23.__r_.__value_.__r.__words[0] = 0;
    v16 = (const void *)v22.__r_.__value_.__r.__words[0];
    if (!v22.__r_.__value_.__r.__words[0])
      goto LABEL_21;
    goto LABEL_20;
  }
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  CFRetain(v14);
  v16 = (const void *)v22.__r_.__value_.__r.__words[0];
  if (v22.__r_.__value_.__r.__words[0])
LABEL_20:
    CFRelease(v16);
LABEL_21:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::cf_to_xpc((ctu *)v14, v13);
  v17 = (void *)v22.__r_.__value_.__r.__words[0];
  *a1 = (xpc_object_t)v22.__r_.__value_.__r.__words[0];
  if (v17 && MEMORY[0x24BD2A468](v17) == MEMORY[0x24BDACFA0])
    xpc_retain(v17);
  else
    *a1 = xpc_null_create();
  xpc_release(v22.__r_.__value_.__l.__data_);
  if (v14)
    CFRelease(v14);
  if ((v12 & 0x8000000000000000) != 0)
    operator delete(v10);
}

void sub_24B908B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  uint64_t v34;

  if (v34 < 0)
    operator delete(v33);
  _Unwind_Resume(exception_object);
}

void LogTracker::checkLoggingVersion_sync(NSObject **this)
{
  const void *v2;
  size_t v3;
  size_t v4;
  __int128 *p_dst;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  xpc_object_t value;
  NSObject *v16;
  const char *v17;
  int v18;
  size_t v19;
  size_t v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  capabilities::radio *v31;
  int v32;
  NSObject *v33;
  NSObject *v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  const char *v40;
  xpc_object_t v41;
  void **v42;
  xpc_object_t v43;
  const char *v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  void **v48;
  xpc_object_t v49;
  xpc_object_t v50;
  void *v51;
  xpc_object_t v52;
  void *aBlock;
  xpc_object_t v54;
  char v55[24];
  xpc_object_t object;
  int v57;
  void *__p[2];
  unint64_t v59;
  std::string v60;
  int v61;
  xpc_object_t xdict;
  __int128 __dst;
  _QWORD v64[4];

  v64[3] = *MEMORY[0x24BDAC8D0];
  if (!capabilities::trace::allowed((capabilities::trace *)this))
    return;
  xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  LogTracker::getLoggingConfig(&xdict);
  v61 = 0;
  memset(&v60, 0, sizeof(v60));
  v2 = (const void *)*MEMORY[0x24BE04EF8];
  v3 = strlen((const char *)*MEMORY[0x24BE04EF8]);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_dst = (__int128 *)operator new(v6 + 1);
    *((_QWORD *)&__dst + 1) = v4;
    v64[0] = v7 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_9;
  }
  HIBYTE(v64[0]) = v3;
  p_dst = &__dst;
  if (v3)
LABEL_9:
    memmove(p_dst, v2, v4);
  *((_BYTE *)p_dst + v4) = 0;
  v8 = (const void *)*MEMORY[0x24BE053F8];
  v9 = strlen((const char *)*MEMORY[0x24BE053F8]);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v11 = operator new(v12 + 1);
    __p[1] = v10;
    v59 = v13 | 0x8000000000000000;
    __p[0] = v11;
    goto LABEL_17;
  }
  HIBYTE(v59) = v9;
  v11 = __p;
  if (v9)
LABEL_17:
    memmove(v11, v8, (size_t)v10);
  *((_BYTE *)v10 + (_QWORD)v11) = 0;
  v14 = prop::get((char *)&__dst, (char *)__p, (uint64_t)&v60);
  if (SHIBYTE(v59) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
    {
LABEL_20:
      if (v14)
        goto LABEL_21;
      goto LABEL_25;
    }
  }
  else if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
  {
    goto LABEL_20;
  }
  operator delete((void *)__dst);
  if (v14)
  {
LABEL_21:
    util::convert<int>(&v60, &v61, 0);
    value = xpc_dictionary_get_value(xdict, "LoggingConfigVersion");
    *(_QWORD *)&__dst = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)&__dst = xpc_null_create();
    v18 = xpc::dyn_cast_or_default((xpc *)&__dst, 0);
    xpc_release((xpc_object_t)__dst);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    {
      *v60.__r_.__value_.__l.__data_ = 0;
      v60.__r_.__value_.__l.__size_ = 0;
      v57 = 0;
      v19 = strlen((const char *)v2);
      if (v19 <= 0x7FFFFFFFFFFFFFF7)
      {
LABEL_30:
        v20 = v19;
        if (v19 >= 0x17)
        {
          v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v22 = v19 | 7;
          v23 = v22 + 1;
          v21 = (__int128 *)operator new(v22 + 1);
          *((_QWORD *)&__dst + 1) = v20;
          v64[0] = v23 | 0x8000000000000000;
          *(_QWORD *)&__dst = v21;
        }
        else
        {
          HIBYTE(v64[0]) = v19;
          v21 = &__dst;
          if (!v19)
          {
LABEL_37:
            *((_BYTE *)v21 + v20) = 0;
            v24 = (const char *)*MEMORY[0x24BE05320];
            v25 = strlen((const char *)*MEMORY[0x24BE05320]);
            if (v25 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v26 = (void *)v25;
            if (v25 >= 0x17)
            {
              v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v25 | 7) != 0x17)
                v28 = v25 | 7;
              v29 = v28 + 1;
              v27 = operator new(v28 + 1);
              __p[1] = v26;
              v59 = v29 | 0x8000000000000000;
              __p[0] = v27;
            }
            else
            {
              HIBYTE(v59) = v25;
              v27 = __p;
              if (!v25)
              {
LABEL_45:
                *((_BYTE *)v26 + (_QWORD)v27) = 0;
                v30 = prop::get((char *)&__dst, (char *)__p, (uint64_t)&v60);
                if (SHIBYTE(v59) < 0)
                {
                  operator delete(__p[0]);
                  if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
                  {
LABEL_47:
                    if (v30)
                    {
LABEL_48:
                      v31 = (capabilities::radio *)util::convert<int>(&v60, &v57, 0);
                      v32 = capabilities::radio::product(v31);
                      v33 = this[11];
                      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_QWORD *)&__dst = __PAIR64__(v61, 67109888);
                        WORD4(__dst) = 1024;
                        *(_DWORD *)((char *)&__dst + 10) = v18;
                        HIWORD(__dst) = 1024;
                        LODWORD(v64[0]) = v57;
                        WORD2(v64[0]) = 1024;
                        *(_DWORD *)((char *)v64 + 6) = v32;
                        _os_log_impl(&dword_24B855000, v33, OS_LOG_TYPE_DEFAULT, "#I Stored Logging Version: %d, Default Logging Version: %d, Stored Product ID: %d, Current Product ID: %d", (uint8_t *)&__dst, 0x1Au);
                      }
                      if (v61 < v18 || v57 != v32)
                      {
                        v34 = this[11];
                        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                        {
                          LOWORD(__dst) = 0;
                          _os_log_impl(&dword_24B855000, v34, OS_LOG_TYPE_DEFAULT, "#I Updating Log Configuration", (uint8_t *)&__dst, 2u);
                        }
                        object = xdict;
                        if (xdict)
                          xpc_retain(xdict);
                        else
                          object = xpc_null_create();
                        v55[23] = 13;
                        strcpy(v55, "Not Specified");
                        LogTracker::updateLoggingSettings_sync(this, 2, &object, (uint64_t)v55);
                        xpc_release(object);
                        object = 0;
                        v35 = xpc_dictionary_create(0, 0, 0);
                        if (v35 || (v35 = xpc_null_create()) != 0)
                        {
                          if (MEMORY[0x24BD2A468](v35) == MEMORY[0x24BDACFA0])
                          {
                            xpc_retain(v35);
                            v36 = v35;
                          }
                          else
                          {
                            v36 = xpc_null_create();
                          }
                        }
                        else
                        {
                          v36 = xpc_null_create();
                          v35 = 0;
                        }
                        xpc_release(v35);
                        v37 = xpc_string_create((const char *)v2);
                        if (!v37)
                          v37 = xpc_null_create();
                        xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x24BE04E98], v37);
                        v38 = xpc_null_create();
                        xpc_release(v37);
                        xpc_release(v38);
                        v39 = xpc_string_create((const char *)v8);
                        if (!v39)
                          v39 = xpc_null_create();
                        v40 = (const char *)*MEMORY[0x24BE051B0];
                        xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x24BE051B0], v39);
                        v41 = xpc_null_create();
                        xpc_release(v39);
                        xpc_release(v41);
                        __p[0] = 0;
                        __p[1] = 0;
                        v59 = 0;
                        std::to_string((std::string *)&__dst, v18);
                        *(_OWORD *)__p = __dst;
                        v59 = v64[0];
                        if (v64[0] >= 0)
                          v42 = __p;
                        else
                          v42 = (void **)__p[0];
                        v43 = xpc_string_create((const char *)v42);
                        if (!v43)
                          v43 = xpc_null_create();
                        v44 = (const char *)*MEMORY[0x24BE05270];
                        xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x24BE05270], v43);
                        v45 = xpc_null_create();
                        xpc_release(v43);
                        xpc_release(v45);
                        if (SHIBYTE(v59) < 0)
                          operator delete(__p[0]);
                        v54 = v36;
                        if (v36)
                          xpc_retain(v36);
                        else
                          v54 = xpc_null_create();
                        aBlock = 0;
                        LogTracker::setProperty_sync(this, &v54, (uint64_t *)&aBlock);
                        if (aBlock)
                          _Block_release(aBlock);
                        xpc_release(v54);
                        v54 = 0;
                        v46 = xpc_string_create(v24);
                        if (!v46)
                          v46 = xpc_null_create();
                        xpc_dictionary_set_value(v36, v40, v46);
                        v47 = xpc_null_create();
                        xpc_release(v46);
                        xpc_release(v47);
                        __p[0] = 0;
                        __p[1] = 0;
                        v59 = 0;
                        std::to_string((std::string *)&__dst, v32);
                        *(_OWORD *)__p = __dst;
                        v59 = v64[0];
                        if (v64[0] >= 0)
                          v48 = __p;
                        else
                          v48 = (void **)__p[0];
                        v49 = xpc_string_create((const char *)v48);
                        if (!v49)
                          v49 = xpc_null_create();
                        xpc_dictionary_set_value(v36, v44, v49);
                        v50 = xpc_null_create();
                        xpc_release(v49);
                        xpc_release(v50);
                        if (SHIBYTE(v59) < 0)
                          operator delete(__p[0]);
                        v52 = v36;
                        if (v36)
                          xpc_retain(v36);
                        else
                          v52 = xpc_null_create();
                        v51 = 0;
                        LogTracker::setProperty_sync(this, &v52, (uint64_t *)&v51);
                        if (v51)
                          _Block_release(v51);
                        xpc_release(v52);
                        v52 = 0;
                        xpc_release(v36);
                      }
                      goto LABEL_101;
                    }
LABEL_60:
                    v16 = this[11];
                    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(__dst) = 0;
                      v17 = "Failed to get stored Device ID";
                      goto LABEL_62;
                    }
                    goto LABEL_101;
                  }
                }
                else if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
                {
                  goto LABEL_47;
                }
                operator delete((void *)__dst);
                if (v30)
                  goto LABEL_48;
                goto LABEL_60;
              }
            }
            memmove(v27, v24, (size_t)v26);
            goto LABEL_45;
          }
        }
        memmove(v21, v2, v20);
        goto LABEL_37;
      }
    }
    else
    {
      v60.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&v60.__r_.__value_.__s + 23) = 0;
      v57 = 0;
      v19 = strlen((const char *)v2);
      if (v19 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_30;
    }
    std::string::__throw_length_error[abi:ne180100]();
  }
LABEL_25:
  v16 = this[11];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__dst) = 0;
    v17 = "Failed to get stored version";
LABEL_62:
    _os_log_error_impl(&dword_24B855000, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&__dst, 2u);
  }
LABEL_101:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  xpc_release(xdict);
}

void sub_24B9094F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, void *a12, xpc_object_t a13, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,xpc_object_t a32)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t LogTracker::updateLoggingSettings_sync(_QWORD *a1, int a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  void *v12;
  std::string *v13;
  xpc_object_t v14;
  uint64_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  LogTracker *v18;
  _BOOL8 isDefaultCarrierProfileInstalled;
  int v20;
  NSObject *v22;
  const char *v23;
  BOOL v24;
  char v25;
  xpc_object_t v26;
  xpc_object_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_weak_owners;
  unint64_t v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  NSObject *v38;
  unsigned __int8 v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  void *v47;
  unint64_t v48;
  void *v50;
  NSObject *v51;
  xpc_object_t v52;
  std::__shared_weak_count *v53;
  _QWORD aBlock[6];
  std::__shared_weak_count *v55;
  std::string __p;
  void *v57;
  dispatch_object_t object;
  std::string v59;
  _QWORD applier[5];
  std::string v61;
  xpc_object_t v62;
  std::string v63;
  int v64;
  uint8_t buf[8];
  uint64_t v66;
  void (*v67)(uint64_t);
  void *v68;
  uint64_t *v69;

  v8 = MEMORY[0x24BD2A468](*a3);
  v9 = MEMORY[0x24BDACFA0];
  if (v8 != MEMORY[0x24BDACFA0])
  {
    LogTracker::getLoggingConfig((xpc_object_t *)buf);
    v10 = *(_QWORD *)buf;
    v11 = xpc_null_create();
    v12 = (void *)*a3;
    *a3 = v10;
    xpc_release(v12);
    xpc_release(v11);
  }
  v64 = a2;
  memset(&v63, 170, sizeof(v63));
  LogTracker::validateSelectedConfig_sync((uint64_t)a1, &v64, &v63);
  v62 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v63;
  else
    v13 = (std::string *)v63.__r_.__value_.__r.__words[0];
  *(_QWORD *)buf = a3;
  v66 = (uint64_t)v13;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)buf, &v62);
  v14 = v62;
  v15 = MEMORY[0x24BDAC760];
  applier[0] = MEMORY[0x24BDAC760];
  applier[1] = 3321888768;
  applier[2] = ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke;
  applier[3] = &__block_descriptor_64_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e13_B24__0r_8_v16l;
  applier[4] = a1;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v61 = *(std::string *)a4;
  xpc_dictionary_apply(v14, applier);
  if (!TelephonyUtilIsCarrierBuild() || (TelephonyUtilIsInternalBuild() & 1) != 0)
  {
LABEL_82:
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_84;
    goto LABEL_83;
  }
  memset(&v59, 0, sizeof(v59));
  v16 = xpc_dictionary_create(0, 0, 0);
  if (v16 || (v16 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v16) == v9)
    {
      xpc_retain(v16);
      v17 = v16;
    }
    else
    {
      v17 = xpc_null_create();
    }
  }
  else
  {
    v17 = xpc_null_create();
    v16 = 0;
  }
  xpc_release(v16);
  isDefaultCarrierProfileInstalled = LogTracker::isDefaultCarrierProfileInstalled(v18);
  v20 = v64;
  if (v64 == 1 && isDefaultCarrierProfileInstalled)
  {
    std::string::__assign_external(&v59, (const std::string::value_type *)*MEMORY[0x24BDFC8C0]);
    v22 = a1[11];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      v23 = "#D Uninstall a profile";
      goto LABEL_90;
    }
LABEL_30:
    v28 = (std::__shared_weak_count *)a1[16];
    if (!v28)
      goto LABEL_91;
    goto LABEL_31;
  }
  v24 = LogTracker::isDefaultCarrierProfileInstalled((LogTracker *)isDefaultCarrierProfileInstalled);
  v25 = v20 != 2 || v24;
  if ((v25 & 1) != 0)
    goto LABEL_81;
  v26 = xpc_BOOL_create(1);
  if (!v26)
    v26 = xpc_null_create();
  xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x24BDFC910], v26);
  v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  std::string::__assign_external(&v59, (const std::string::value_type *)*MEMORY[0x24BDFC8A8]);
  v22 = a1[11];
  if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    goto LABEL_30;
  *(_WORD *)buf = 0;
  v23 = "#D Install a profile";
LABEL_90:
  _os_log_debug_impl(&dword_24B855000, v22, OS_LOG_TYPE_DEBUG, v23, buf, 2u);
  v28 = (std::__shared_weak_count *)a1[16];
  if (!v28)
LABEL_91:
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_31:
  v29 = a1[15];
  v30 = std::__shared_weak_count::lock(v28);
  if (!v30)
    goto LABEL_91;
  v31 = v30;
  p_shared_weak_owners = (unint64_t *)&v30->__shared_weak_owners_;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v31);
  }
  v57 = (void *)0xAAAAAAAAAAAAAAAALL;
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = v15;
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_43;
  aBlock[3] = &__block_descriptor_80_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  aBlock[5] = v29;
  v55 = v31;
  do
    v36 = __ldxr(p_shared_weak_owners);
  while (__stxr(v36 + 1, p_shared_weak_owners));
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  else
    __p = v59;
  v37 = _Block_copy(aBlock);
  v38 = a1[17];
  if (v38)
    dispatch_retain(v38);
  v57 = v37;
  object = v38;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  *(_QWORD *)buf = v15;
  v66 = 0x40000000;
  v67 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v68 = &__block_descriptor_tmp_13_5;
  v69 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v40 = *(_QWORD *)algn_2579B8AE8;
    v53 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_50;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v40 = *(_QWORD *)algn_2579B8AE8;
    v53 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_50;
  }
  v41 = (unint64_t *)(v40 + 8);
  do
    v42 = __ldxr(v41);
  while (__stxr(v42 + 1, v41));
LABEL_50:
  abm::HelperClient::create();
  if (v53)
  {
    v43 = (unint64_t *)&v53->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v45 = xpc_string_create((const char *)*MEMORY[0x24BDFC940]);
  if (!v45)
    v45 = xpc_null_create();
  xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x24BDFC7C8], v45);
  v46 = xpc_null_create();
  xpc_release(v45);
  xpc_release(v46);
  v52 = v17;
  if (v17)
  {
    xpc_retain(v17);
    v47 = v57;
    if (!v57)
      goto LABEL_62;
    goto LABEL_61;
  }
  v52 = xpc_null_create();
  v47 = v57;
  if (v57)
LABEL_61:
    v47 = _Block_copy(v47);
LABEL_62:
  v50 = v47;
  v51 = object;
  if (object)
    dispatch_retain(object);
  abm::HelperClient::perform();
  if (v51)
    dispatch_release(v51);
  if (v50)
    _Block_release(v50);
  xpc_release(v52);
  do
    v48 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v48 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v48)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (object)
    dispatch_release(object);
  if (v57)
    _Block_release(v57);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v55)
    std::__shared_weak_count::__release_weak(v55);
  std::__shared_weak_count::__release_weak(v31);
LABEL_81:
  xpc_release(v17);
  if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_82;
  operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
LABEL_83:
    operator delete(v61.__r_.__value_.__l.__data_);
LABEL_84:
  xpc_release(v62);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  return 1;
}

void sub_24B909DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  void *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;

  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  std::__shared_weak_count::__release_weak(v49);
  xpc_release(v48);
  if (a37 < 0)
    operator delete(__p);
  if (a48 < 0)
    operator delete(a43);
  xpc_release(*(xpc_object_t *)(v50 - 168));
  if (*(char *)(v50 - 137) < 0)
    operator delete(*(void **)(v50 - 160));
  _Unwind_Resume(a1);
}

void LogTracker::setProperty_sync(_QWORD *a1, xpc_object_t *a2, uint64_t *a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t value;
  xpc_object_t v10;
  xpc_object_t v11;
  char isSupported;
  char v13;
  xpc_object_t v14;
  xpc_object_t v15;
  const object *v16;
  _BOOL4 isInternalProperty_sync;
  int v18;
  uint64_t v19;
  xpc_object_t v20;
  uint64_t v21;
  xpc_object_t v22;
  void *v23;
  CFTypeID v24;
  const void *v25;
  const void *v26;
  size_t v27;
  void *v28;
  void **v29;
  xpc_object_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  xpc_object_t v34;
  uint64_t v35;
  xpc_object_t v36;
  std::string *v37;
  const void *v38;
  size_t v39;
  size_t v40;
  __int128 *p_buf;
  uint64_t v42;
  uint64_t v43;
  xpc_object_t v44;
  void *v45;
  void *v46;
  _QWORD v47[4];
  void *v48;
  const void *v49;
  xpc_object_t v50;
  xpc_object_t v51;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v55;
  xpc_object_t v56;
  std::string v57;
  xpc_object_t v58;
  xpc_object_t object[3];
  xpc_object_t v60[3];
  std::string v61;
  void *v62;
  __int128 buf;
  unint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = v6;
  if (v6)
  {
    v62 = v6;
  }
  else
  {
    v7 = xpc_null_create();
    v62 = v7;
    if (!v7)
    {
      v8 = xpc_null_create();
      v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x24BD2A468](v7) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  v8 = xpc_null_create();
LABEL_8:
  v62 = v8;
LABEL_9:
  xpc_release(v7);
  memset(&v61, 170, sizeof(v61));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE04E98]);
  v60[0] = value;
  if (value)
    xpc_retain(value);
  else
    v60[0] = xpc_null_create();
  buf = 0uLL;
  v64 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v60[0]);
  memset(v60, 170, sizeof(v60));
  v10 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE051B0]);
  object[0] = v10;
  if (v10)
    xpc_retain(v10);
  else
    object[0] = xpc_null_create();
  buf = 0uLL;
  v64 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  v11 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05270]);
  v58 = v11;
  if (v11)
    xpc_retain(v11);
  else
    v58 = xpc_null_create();
  buf = 0uLL;
  v64 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v58);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v57, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
  else
    v57 = v61;
  isSupported = abm::trace::isSupported();
  v13 = isSupported;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if ((v13 & 1) != 0)
    {
LABEL_23:
      LODWORD(v58) = -534716416;
      v14 = *a2;
      v51 = v14;
      if (v14)
      {
        xpc_retain(v14);
      }
      else
      {
        v14 = xpc_null_create();
        v51 = v14;
      }
      isInternalProperty_sync = LogTracker::isInternalProperty_sync((uint64_t)a1, &v51, &v62, &v58);
      xpc_release(v14);
      v51 = 0;
      if (isInternalProperty_sync)
      {
        if (*a3)
          dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(a3, (unsigned int *)&v58, &v62);
        goto LABEL_89;
      }
      if ((*(unsigned int (**)(_QWORD *))(*a1 + 88))(a1))
      {
        v18 = prop::set((char *)&v61, (char *)v60, (char *)object);
        if (*a3)
        {
          if (v18)
            v19 = 0;
          else
            v19 = 3760250880;
          v20 = xpc_null_create();
          v21 = *a3;
          *(_QWORD *)&buf = v20;
          v22 = xpc_null_create();
          (*(void (**)(uint64_t, uint64_t, __int128 *))(v21 + 16))(v21, v19, &buf);
          xpc_release((xpc_object_t)buf);
          xpc_release(v22);
        }
        goto LABEL_89;
      }
      v38 = (const void *)*MEMORY[0x24BE05738];
      v39 = strlen((const char *)*MEMORY[0x24BE05738]);
      if (v39 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v40 = v39;
      if (v39 >= 0x17)
      {
        v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v39 | 7) != 0x17)
          v42 = v39 | 7;
        v43 = v42 + 1;
        p_buf = (__int128 *)operator new(v42 + 1);
        *((_QWORD *)&buf + 1) = v40;
        v64 = v43 | 0x8000000000000000;
        *(_QWORD *)&buf = p_buf;
      }
      else
      {
        HIBYTE(v64) = v39;
        p_buf = &buf;
        if (!v39)
          goto LABEL_78;
      }
      memmove(p_buf, v38, v40);
LABEL_78:
      *((_BYTE *)p_buf + v40) = 0;
      v44 = *a2;
      v50 = v44;
      if (v44)
      {
        xpc_retain(v44);
      }
      else
      {
        v44 = xpc_null_create();
        v50 = v44;
      }
      v47[0] = MEMORY[0x24BDAC760];
      v47[1] = 3321888768;
      v47[2] = ___ZN10LogTracker16setProperty_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
      v47[3] = &__block_descriptor_40_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e28_v20__0i8_dict__object__v__12l;
      v45 = (void *)*a3;
      if (*a3)
        v45 = _Block_copy(v45);
      v48 = v45;
      v46 = _Block_copy(v47);
      v49 = v46;
      Service::runCommand((uint64_t)a1, (uint64_t)&buf, &v50, &v49);
      if (v46)
        _Block_release(v46);
      xpc_release(v44);
      v50 = 0;
      if (SHIBYTE(v64) < 0)
        operator delete((void *)buf);
      if (v48)
        _Block_release(v48);
      goto LABEL_89;
    }
  }
  else if ((isSupported & 1) != 0)
  {
    goto LABEL_23;
  }
  v58 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v15 = *a2;
  v56 = v15;
  if (v15)
    xpc_retain(v15);
  else
    v56 = xpc_null_create();
  xpc::bridge((xpc *)&v56, v16);
  v23 = (void *)buf;
  if (!(_QWORD)buf || (v24 = CFGetTypeID((CFTypeRef)buf), v24 != CFDictionaryGetTypeID()))
  {
    v58 = 0;
    v25 = (const void *)buf;
    if (!(_QWORD)buf)
      goto LABEL_45;
    goto LABEL_44;
  }
  v58 = v23;
  CFRetain(v23);
  v25 = (const void *)buf;
  if ((_QWORD)buf)
LABEL_44:
    CFRelease(v25);
LABEL_45:
  xpc_release(v56);
  v26 = (const void *)*MEMORY[0x24BE05430];
  v27 = strlen((const char *)*MEMORY[0x24BE05430]);
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v28 = (void *)v27;
  if (v27 >= 0x17)
  {
    v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v31 = v27 | 7;
    v32 = v31 + 1;
    v29 = (void **)operator new(v31 + 1);
    __dst[1] = v28;
    v55 = v32 | 0x8000000000000000;
    __dst[0] = v29;
LABEL_53:
    memmove(v29, v26, (size_t)v28);
    *((_BYTE *)v28 + (_QWORD)v29) = 0;
    v30 = v58;
    cf = v58;
    if (!v58)
      goto LABEL_55;
    goto LABEL_54;
  }
  HIBYTE(v55) = v27;
  v29 = __dst;
  if (v27)
    goto LABEL_53;
  LOBYTE(__dst[0]) = 0;
  v30 = v58;
  cf = v58;
  if (v58)
LABEL_54:
    CFRetain(v30);
LABEL_55:
  aBlock = 0;
  Service::broadcastEvent((uint64_t)a1, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v55) < 0)
  {
    operator delete(__dst[0]);
    v33 = a1[11];
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
LABEL_61:
      if (!*a3)
        goto LABEL_63;
      goto LABEL_62;
    }
  }
  else
  {
    v33 = a1[11];
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      goto LABEL_61;
  }
  v37 = &v61;
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v37 = (std::string *)v61.__r_.__value_.__r.__words[0];
  LODWORD(buf) = 136315138;
  *(_QWORD *)((char *)&buf + 4) = v37;
  _os_log_debug_impl(&dword_24B855000, v33, OS_LOG_TYPE_DEBUG, "#D The property (%s) not supported in setting", (uint8_t *)&buf, 0xCu);
  if (!*a3)
    goto LABEL_63;
LABEL_62:
  v34 = xpc_null_create();
  v35 = *a3;
  *(_QWORD *)&buf = v34;
  v36 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, __int128 *))(v35 + 16))(v35, 3760250884, &buf);
  xpc_release((xpc_object_t)buf);
  xpc_release(v36);
LABEL_63:
  if (v30)
    CFRelease(v30);
LABEL_89:
  if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v60[2]) & 0x80000000) == 0)
      goto LABEL_91;
LABEL_94:
    operator delete(v60[0]);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_92;
LABEL_95:
    operator delete(v61.__r_.__value_.__l.__data_);
    goto LABEL_92;
  }
  operator delete(object[0]);
  if (SHIBYTE(v60[2]) < 0)
    goto LABEL_94;
LABEL_91:
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_95;
LABEL_92:
  xpc_release(v62);
}

void sub_24B90A5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,xpc_object_t object,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,xpc_object_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void LogTracker::validateSelectedConfig_sync(uint64_t a1@<X0>, _DWORD *a2@<X1>, std::string *a3@<X8>)
{
  const char *v6;
  size_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  const std::string::value_type *v12;
  NSObject *v13;
  uint8_t v14[16];

  memset(a3, 170, sizeof(std::string));
  v6 = (const char *)abm::helper::asString();
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    a3->__r_.__value_.__l.__size_ = v8;
    a3->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    a3->__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
LABEL_9:
    memmove(v9, v6, v8);
    *((_BYTE *)v9 + v8) = 0;
    if (*a2 != 5)
      return;
    goto LABEL_10;
  }
  *((_BYTE *)&a3->__r_.__value_.__s + 23) = v7;
  v9 = a3;
  if (v7)
    goto LABEL_9;
  a3->__r_.__value_.__s.__data_[0] = 0;
  if (*a2 != 5)
    return;
LABEL_10:
  *a2 = 2;
  v12 = (const std::string::value_type *)abm::helper::asString();
  std::string::__assign_external(a3, v12);
  v13 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_24B855000, v13, OS_LOG_TYPE_DEFAULT, "#I Update the logging config to Default as the requested logging config is not supported", v14, 2u);
  }
}

void sub_24B90A9CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2, xpc_object_t object)
{
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  _QWORD applier[6];
  std::string __p;

  v5 = *(_QWORD *)(a1 + 32);
  if (object)
  {
    v6 = object;
    xpc_retain(object);
    goto LABEL_4;
  }
  v6 = xpc_null_create();
  if (v6)
  {
LABEL_4:
    if (MEMORY[0x24BD2A468](v6) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v6);
      v7 = v6;
    }
    else
    {
      v7 = xpc_null_create();
    }
    goto LABEL_8;
  }
  v7 = xpc_null_create();
  v6 = 0;
LABEL_8:
  xpc_release(v6);
  applier[0] = MEMORY[0x24BDAC760];
  applier[1] = 3321888768;
  applier[2] = ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_2;
  applier[3] = &__block_descriptor_72_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e13_B24__0r_8_v16l;
  applier[4] = v5;
  applier[5] = a2;
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    __p = *(std::string *)(a1 + 40);
  xpc_dictionary_apply(v7, applier);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  xpc_release(v7);
  return 1;
}

void sub_24B90AB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  xpc_release(v21);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_2(uint64_t a1, const char *a2, xpc_object_t a3)
{
  _QWORD *v6;
  NSObject *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  const char *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  uint64_t v19;
  const char *v20;
  void *p_p;
  void *aBlock;
  xpc_object_t object;
  xpc_object_t v24;
  void *__p;
  char v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)(a1 + 32);
  v7 = v6[11];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v19 = *(_QWORD *)(a1 + 40);
    v24 = a3;
    if (a3)
      xpc_retain(a3);
    else
      v24 = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&v24, (const object *)"", v20);
    if (v26 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315650;
    v28 = v19;
    v29 = 2080;
    v30 = a2;
    v31 = 2080;
    v32 = p_p;
    _os_log_debug_impl(&dword_24B855000, v7, OS_LOG_TYPE_DEBUG, "#D tracename: %s, traceKey: %s, traceValue: %s", buf, 0x20u);
    if (v26 < 0)
      operator delete(__p);
    xpc_release(v24);
  }
  v8 = xpc_dictionary_create(0, 0, 0);
  if (v8 || (v8 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v8) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v8);
      v9 = v8;
    }
    else
    {
      v9 = xpc_null_create();
    }
  }
  else
  {
    v9 = xpc_null_create();
    v8 = 0;
  }
  xpc_release(v8);
  v10 = xpc_string_create(*(const char **)(a1 + 40));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x24BE04E98], v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  v12 = xpc_string_create(a2);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x24BE051B0], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  if (a3)
    xpc_retain(a3);
  else
    a3 = xpc_null_create();
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x24BE05270], a3);
  v14 = xpc_null_create();
  xpc_release(a3);
  xpc_release(v14);
  v15 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v15 = *(const char **)v15;
  v16 = xpc_string_create(v15);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x24BE05788], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  object = v9;
  if (v9)
    xpc_retain(v9);
  else
    object = xpc_null_create();
  aBlock = 0;
  LogTracker::setProperty_sync(v6, &object, (uint64_t *)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(object);
  object = 0;
  xpc_release(v9);
  return 1;
}

void sub_24B90AE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, xpc_object_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_43(uint64_t a1, int *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  NSObject *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)(a1 + 40);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        v11 = *a2;
        v12 = *(NSObject **)(v5 + 88);
        if (v11)
        {
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            v13 = (_QWORD *)(a1 + 56);
            if (*(char *)(a1 + 79) < 0)
              v13 = (_QWORD *)*v13;
            v15 = 136315138;
            v16 = v13;
            _os_log_error_impl(&dword_24B855000, v12, OS_LOG_TYPE_ERROR, "Failed to %s", (uint8_t *)&v15, 0xCu);
          }
        }
        else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          v14 = (_QWORD *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0)
            v14 = (_QWORD *)*v14;
          v15 = 136315138;
          v16 = v14;
          _os_log_debug_impl(&dword_24B855000, v12, OS_LOG_TYPE_DEBUG, "#D Succeeded to %s", (uint8_t *)&v15, 0xCu);
        }
      }
    }
  }
}

void __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    a1[9] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_24B90B160(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2)
      return;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
}

void ___ZN10LogTracker16setProperty_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1, unsigned int a2, void **a3)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;

  v5 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v3 = (uint64_t *)(a1 + 32);
  if (v4)
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(v3, &v5, a3);
}

void GlobalService::getShutdownStages(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

uint64_t ctu::PthreadMutexGuardPolicy<LogDumpDB>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBE780;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBE780;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_24B90B500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_24B90B51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<LogTracker>::shared_ptr[abi:ne180100]<LogTracker,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_251CBE7C0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_24B90B638(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1}::operator() const(LogTracker*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_24B90B658(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<LogTracker *,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker *)#1},std::allocator<LogTracker>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<LogTracker *,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker *)#1},std::allocator<LogTracker>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1}::operator() const(LogTracker*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<LogTracker *,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker *)#1},std::allocator<LogTracker>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1}::operator() const(LogTracker*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::SharedLoggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBE780;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBE780;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_0>(LogTracker::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  dispatch_group_t v4;
  NSObject *v5;
  const char *v6;
  dispatch_group_t v7;
  NSObject *v8;
  BOOL v9;
  const char *v10;
  void *v11;
  const char *v12;
  unsigned __int8 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  NSObject *v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  const void *v30;
  size_t v31;
  size_t v32;
  std::locale::__imp *p_dst;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  const void *v39;
  size_t v40;
  size_t v41;
  std::locale::__imp *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  NSObject *v50;
  void *v51;
  void *v52;
  NSObject *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  const char **v63;
  const char **v64;
  const void *v65;
  size_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  size_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  NSObject *v80;
  const char *v81;
  const char *v82;
  const void *v83;
  size_t v84;
  size_t v85;
  void *p_p;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_weak_owners;
  unint64_t v91;
  void *v92;
  const void *v93;
  size_t v94;
  size_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  void *v102;
  const void *v103;
  size_t v104;
  size_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  const void *v113;
  size_t v114;
  size_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  void *v122;
  const void *v123;
  size_t v124;
  size_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  void *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  NSObject *v136;
  NSObject *v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  void *v142;
  _QWORD *v143;
  NSObject *object;
  void *v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void *v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  const void *v159;
  void *v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  const void *v167;
  void *v168;
  uint64_t v169;
  unint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  const void *v175;
  void *__p;
  uint64_t v177;
  unint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  const void *v183;
  const void *v184;
  std::locale __dst;
  size_t v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  void *v189[2];
  unint64_t v190;
  void *v191[2];
  unint64_t v192;
  std::string buf;
  void *v194;
  __int128 *v195;
  std::__shared_weak_count *v196;
  xpc_object_t v197;
  void *v198;
  dispatch_object_t v199;
  xpc_object_t v200;
  dispatch_object_t v201;
  xpc_object_t v202;
  _QWORD aBlock[5];
  dispatch_object_t v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  __int128 v207;
  _BYTE v208[24];
  void *v209;
  uint64_t v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  uint64_t v213;

  v1 = a1;
  v213 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)*a1;
  v3 = *(_QWORD *)(*a1 + 16);
  LogTracker::checkLoggingVersion_sync((NSObject **)v3);
  v4 = dispatch_group_create();
  v5 = *(NSObject **)(v3 + 176);
  *(_QWORD *)(v3 + 176) = v4;
  if (v5)
    dispatch_release(v5);
  v7 = dispatch_group_create();
  v8 = *(NSObject **)(v3 + 208);
  *(_QWORD *)(v3 + 208) = v7;
  if (v8)
    dispatch_release(v8);
  *(_BYTE *)(v3 + 216) = 0;
  v9 = prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE04EE8], v6);
  v11 = (void *)MEMORY[0x24BDAC760];
  if (v9
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE05920], v10)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE04F58], v12))
  {
    v143 = v1;
    memset(v208, 170, 16);
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    buf.__r_.__value_.__l.__size_ = 0x40000000;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    v194 = &__block_descriptor_tmp_13_5;
    v195 = &GetABMLogServer(void)::sLogServer;
    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v14 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v207 = GetABMLogServer(void)::sLogServer;
      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        goto LABEL_13;
    }
    else
    {
      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &buf);
      v14 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v207 = GetABMLogServer(void)::sLogServer;
      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        goto LABEL_13;
    }
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
LABEL_13:
    abm::HelperClient::create();
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
    if (!*((_QWORD *)&v207 + 1))
      goto LABEL_17;
    v18 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      v20 = *(NSObject **)(v3 + 88);
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        goto LABEL_19;
    }
    else
    {
LABEL_17:
      v20 = *(NSObject **)(v3 + 88);
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
LABEL_19:
        aBlock[0] = v11;
        aBlock[1] = 3321888768;
        aBlock[2] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
        aBlock[3] = &__block_descriptor_64_e8_40c30_ZTSN8dispatch13group_sessionE48c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
        aBlock[4] = v3;
        v21 = v2[3];
        v204 = v21;
        if (v21)
        {
          dispatch_retain(v21);
          if (v204)
            dispatch_group_enter(v204);
        }
        v205 = *(_QWORD *)v208;
        v206 = *(std::__shared_weak_count **)&v208[8];
        if (*(_QWORD *)&v208[8])
        {
          v22 = (unint64_t *)(*(_QWORD *)&v208[8] + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v24 = _Block_copy(aBlock);
        v25 = *(NSObject **)(v3 + 136);
        if (v25)
          dispatch_retain(*(dispatch_object_t *)(v3 + 136));
        v26 = xpc_dictionary_create(0, 0, 0);
        if (v26 || (v26 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x24BD2A468](v26) == MEMORY[0x24BDACFA0])
          {
            xpc_retain(v26);
            v27 = v26;
          }
          else
          {
            v27 = xpc_null_create();
          }
        }
        else
        {
          v27 = xpc_null_create();
          v26 = 0;
        }
        xpc_release(v26);
        v28 = xpc_int64_create(5000);
        if (!v28)
          v28 = xpc_null_create();
        xpc_dictionary_set_value(v27, (const char *)*MEMORY[0x24BDFC790], v28);
        v29 = xpc_null_create();
        xpc_release(v28);
        xpc_release(v29);
        v30 = (const void *)*MEMORY[0x24BE04E90];
        v31 = strlen((const char *)*MEMORY[0x24BE04E90]);
        object = v25;
        if (v31 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v32 = v31;
        if (v31 >= 0x17)
        {
          v34 = v11;
          v35 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v31 | 7) != 0x17)
            v35 = v31 | 7;
          v36 = v35 + 1;
          p_dst = (std::locale::__imp *)operator new(v35 + 1);
          v186 = v32;
          v187 = v36 | 0x8000000000000000;
          __dst.__locale_ = p_dst;
          v11 = v34;
        }
        else
        {
          HIBYTE(v187) = v31;
          p_dst = (std::locale::__imp *)&__dst;
          if (!v31)
          {
LABEL_45:
            *((_BYTE *)p_dst + v32) = 0;
            memset(&buf, 0, sizeof(buf));
            v37 = -1431655766;
            v38 = -1431655766;
            if (prop::bbtrace::get((char *)&__dst, (uint64_t)&buf))
            {
              LODWORD(__p) = -1431655766;
              if (util::convert<int>(&buf, &__p, 0))
                v38 = (int)__p;
              else
                v38 = -1431655766;
            }
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(buf.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v187) & 0x80000000) == 0)
                goto LABEL_51;
            }
            else if ((SHIBYTE(v187) & 0x80000000) == 0)
            {
              goto LABEL_51;
            }
            operator delete(__dst.__locale_);
LABEL_51:
            v39 = (const void *)*MEMORY[0x24BE05048];
            v40 = strlen((const char *)*MEMORY[0x24BE05048]);
            if (v40 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v41 = v40;
            if (v40 >= 0x17)
            {
              v142 = v24;
              v43 = v11;
              v44 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v40 | 7) != 0x17)
                v44 = v40 | 7;
              v45 = v44 + 1;
              v42 = (std::locale::__imp *)operator new(v44 + 1);
              v186 = v41;
              v187 = v45 | 0x8000000000000000;
              __dst.__locale_ = v42;
              v11 = v43;
              v24 = v142;
            }
            else
            {
              HIBYTE(v187) = v40;
              v42 = (std::locale::__imp *)&__dst;
              if (!v40)
              {
LABEL_59:
                *((_BYTE *)v42 + v41) = 0;
                memset(&buf, 0, sizeof(buf));
                if (prop::bbtrace::get((char *)&__dst, (uint64_t)&buf))
                {
                  LODWORD(__p) = -1431655766;
                  if (util::convert<int>(&buf, &__p, 0))
                    v37 = (int)__p;
                  else
                    v37 = -1431655766;
                }
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(buf.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v187) & 0x80000000) == 0)
                  {
LABEL_65:
                    if (v38 != 4)
                    {
LABEL_76:
                      v200 = v27;
                      if (v27)
                      {
                        xpc_retain(v27);
                        v1 = v143;
                        if (v24)
                        {
LABEL_78:
                          v47 = _Block_copy(v24);
LABEL_81:
                          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
                          buf.__r_.__value_.__l.__size_ = (std::string::size_type)object;
                          if (object)
                            dispatch_retain(object);
                          abm::HelperClient::perform();
                          if (buf.__r_.__value_.__l.__size_)
                            dispatch_release((dispatch_object_t)buf.__r_.__value_.__l.__size_);
                          if (buf.__r_.__value_.__r.__words[0])
                            _Block_release(buf.__r_.__value_.__l.__data_);
                          xpc_release(v200);
                          v200 = 0;
LABEL_111:
                          xpc_release(v27);
                          if (object)
                            dispatch_release(object);
                          if (v24)
                            _Block_release(v24);
                          v57 = v206;
                          if (v206)
                          {
                            p_shared_owners = (unint64_t *)&v206->__shared_owners_;
                            do
                              v59 = __ldaxr(p_shared_owners);
                            while (__stlxr(v59 - 1, p_shared_owners));
                            if (!v59)
                            {
                              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                              std::__shared_weak_count::__release_weak(v57);
                            }
                          }
                          if (v204)
                          {
                            dispatch_group_leave(v204);
                            if (v204)
                              dispatch_release(v204);
                          }
                          v60 = *(std::__shared_weak_count **)&v208[8];
                          if (*(_QWORD *)&v208[8])
                          {
                            v61 = (unint64_t *)(*(_QWORD *)&v208[8] + 8);
                            do
                              v62 = __ldaxr(v61);
                            while (__stlxr(v62 - 1, v61));
                            if (!v62)
                            {
                              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                              std::__shared_weak_count::__release_weak(v60);
                            }
                          }
                          goto LABEL_128;
                        }
                      }
                      else
                      {
                        v1 = v143;
                        v200 = xpc_null_create();
                        if (v24)
                          goto LABEL_78;
                      }
                      v47 = 0;
                      goto LABEL_81;
                    }
LABEL_71:
                    if (v37 != 1)
                      goto LABEL_76;
                    v46 = *(NSObject **)(v3 + 88);
                    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                    {
                      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                      _os_log_impl(&dword_24B855000, v46, OS_LOG_TYPE_DEFAULT, "#N Cellular Logging was detected before initiating LogTracker. The service needs to be paused in boot-up.", (uint8_t *)&buf, 2u);
                    }
                    v202 = v27;
                    if (v27)
                      xpc_retain(v27);
                    else
                      v202 = xpc_null_create();
                    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
                    buf.__r_.__value_.__l.__size_ = 3321888768;
                    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_64;
                    v194 = &__block_descriptor_72_e8_32c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE48c15_ZTSN3xpc4dictE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
                    v195 = *(__int128 **)v208;
                    v196 = *(std::__shared_weak_count **)&v208[8];
                    v1 = v143;
                    if (*(_QWORD *)&v208[8])
                    {
                      v48 = (unint64_t *)(*(_QWORD *)&v208[8] + 8);
                      do
                        v49 = __ldxr(v48);
                      while (__stxr(v49 + 1, v48));
                    }
                    v197 = v27;
                    if (v27)
                    {
                      xpc_retain(v27);
                      if (v24)
                        goto LABEL_94;
                    }
                    else
                    {
                      v197 = xpc_null_create();
                      if (v24)
                      {
LABEL_94:
                        v198 = _Block_copy(v24);
                        v50 = object;
                        v199 = object;
                        if (!object)
                        {
LABEL_96:
                          v51 = v11;
                          v52 = _Block_copy(&buf);
                          v53 = *(NSObject **)(v3 + 136);
                          if (v53)
                            dispatch_retain(*(dispatch_object_t *)(v3 + 136));
                          v200 = v52;
                          v201 = v53;
                          abm::HelperClient::perform();
                          v11 = v51;
                          if (v201)
                            dispatch_release(v201);
                          if (v200)
                            _Block_release(v200);
                          xpc_release(v202);
                          v202 = 0;
                          if (v199)
                            dispatch_release(v199);
                          if (v198)
                            _Block_release(v198);
                          xpc_release(v197);
                          v197 = 0;
                          v54 = v196;
                          if (v196)
                          {
                            v55 = (unint64_t *)&v196->__shared_owners_;
                            do
                              v56 = __ldaxr(v55);
                            while (__stlxr(v56 - 1, v55));
                            if (!v56)
                            {
                              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                              std::__shared_weak_count::__release_weak(v54);
                            }
                          }
                          goto LABEL_111;
                        }
LABEL_95:
                        dispatch_retain(v50);
                        goto LABEL_96;
                      }
                    }
                    v198 = 0;
                    v50 = object;
                    v199 = object;
                    if (!object)
                      goto LABEL_96;
                    goto LABEL_95;
                  }
                }
                else if ((SHIBYTE(v187) & 0x80000000) == 0)
                {
                  goto LABEL_65;
                }
                operator delete(__dst.__locale_);
                if (v38 != 4)
                  goto LABEL_76;
                goto LABEL_71;
              }
            }
            memmove(v42, v39, v41);
            goto LABEL_59;
          }
        }
        memmove(p_dst, v30, v32);
        goto LABEL_45;
      }
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_24B855000, v20, OS_LOG_TYPE_DEFAULT, "#I ABM is initializing; reinit traces in helper",
      (uint8_t *)&buf,
      2u);
    goto LABEL_19;
  }
LABEL_128:
  v63 = (const char **)MEMORY[0x24BDFC720];
  strlen((const char *)*MEMORY[0x24BDFC720]);
  ctu::fs::create_directory();
  v64 = (const char **)MEMORY[0x24BDFC738];
  v65 = (const void *)*MEMORY[0x24BDFC738];
  v66 = strlen((const char *)*MEMORY[0x24BDFC738]);
  if (v66 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_263;
  v67 = (void *)v66;
  if (v66 >= 0x17)
  {
    v69 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v66 | 7) != 0x17)
      v69 = v66 | 7;
    v70 = v69 + 1;
    v68 = operator new(v69 + 1);
    v191[1] = v67;
    v192 = v70 | 0x8000000000000000;
    v191[0] = v68;
    goto LABEL_135;
  }
  HIBYTE(v192) = v66;
  v68 = v191;
  if (v66)
LABEL_135:
    memmove(v68, v65, (size_t)v67);
  *((_BYTE *)v67 + (_QWORD)v68) = 0;
  v71 = *v63;
  v72 = strlen(*v63);
  if (v72 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v73 = (void *)v72;
  if (v72 >= 0x17)
  {
    v75 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v72 | 7) != 0x17)
      v75 = v72 | 7;
    v76 = v75 + 1;
    v74 = operator new(v75 + 1);
    v189[1] = v73;
    v190 = v76 | 0x8000000000000000;
    v189[0] = v74;
  }
  else
  {
    HIBYTE(v190) = v72;
    v74 = v189;
    if (!v72)
      goto LABEL_144;
  }
  memmove(v74, v71, (size_t)v73);
LABEL_144:
  *((_BYTE *)v73 + (_QWORD)v74) = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&__dst, "[^\\.].*", 0);
  util::moveDirContent((const void **)v191, (uint64_t)v189, 1u, 1, (uint64_t)&__dst);
  v77 = v188;
  if (!v188)
    goto LABEL_148;
  v78 = (unint64_t *)&v188->__shared_owners_;
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v79 - 1, v78));
  if (v79)
  {
LABEL_148:
    std::locale::~locale(&__dst);
    if ((SHIBYTE(v190) & 0x80000000) == 0)
      goto LABEL_149;
LABEL_254:
    operator delete(v189[0]);
    if ((SHIBYTE(v192) & 0x80000000) == 0)
      goto LABEL_150;
    goto LABEL_255;
  }
  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
  std::__shared_weak_count::__release_weak(v77);
  std::locale::~locale(&__dst);
  if (SHIBYTE(v190) < 0)
    goto LABEL_254;
LABEL_149:
  if ((SHIBYTE(v192) & 0x80000000) == 0)
    goto LABEL_150;
LABEL_255:
  operator delete(v191[0]);
LABEL_150:
  strlen(*v64);
  ctu::fs::create_directory();
  v80 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
  {
    v81 = *v64;
    v82 = *v63;
    *(_DWORD *)v208 = 136315394;
    *(_QWORD *)&v208[4] = v81;
    *(_WORD *)&v208[12] = 2080;
    *(_QWORD *)&v208[14] = v82;
    _os_log_impl(&dword_24B855000, v80, OS_LOG_TYPE_DEFAULT, "#I Moved %s/*/* -> %s/", v208, 0x16u);
  }
  v83 = (const void *)*MEMORY[0x24BE054B8];
  v84 = strlen((const char *)*MEMORY[0x24BE054B8]);
  if (v84 > 0x7FFFFFFFFFFFFFF7)
LABEL_263:
    std::string::__throw_length_error[abi:ne180100]();
  v85 = v84;
  if (v84 >= 0x17)
  {
    v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17)
      v87 = v84 | 7;
    v88 = v87 + 1;
    p_p = operator new(v87 + 1);
    v177 = v85;
    v178 = v88 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_159;
  }
  HIBYTE(v178) = v84;
  p_p = &__p;
  if (v84)
LABEL_159:
    memmove(p_p, v83, v85);
  *((_BYTE *)p_p + v85) = 0;
  *(_QWORD *)v208 = v11;
  *(_QWORD *)&v208[8] = 3321888768;
  *(_QWORD *)&v208[16] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_67;
  v209 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v210 = v3;
  v211 = *v2;
  v89 = (std::__shared_weak_count *)v2[1];
  v212 = v89;
  if (v89)
  {
    p_shared_weak_owners = (unint64_t *)&v89->__shared_weak_owners_;
    do
      v91 = __ldxr(p_shared_weak_owners);
    while (__stxr(v91 + 1, p_shared_weak_owners));
  }
  v92 = _Block_copy(v208);
  v184 = v92;
  Service::registerCommandHandler(v3, (uint64_t)&__p, &v184);
  if (v92)
    _Block_release(v92);
  if (SHIBYTE(v178) < 0)
    operator delete(__p);
  v93 = (const void *)*MEMORY[0x24BE05360];
  v94 = strlen((const char *)*MEMORY[0x24BE05360]);
  if (v94 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v95 = v94;
  if (v94 >= 0x17)
  {
    v97 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v94 | 7) != 0x17)
      v97 = v94 | 7;
    v98 = v97 + 1;
    v96 = operator new(v97 + 1);
    v169 = v95;
    v170 = v98 | 0x8000000000000000;
    v168 = v96;
    goto LABEL_174;
  }
  HIBYTE(v170) = v94;
  v96 = &v168;
  if (v94)
LABEL_174:
    memmove(v96, v93, v95);
  *((_BYTE *)v96 + v95) = 0;
  __p = v11;
  v177 = 3321888768;
  v178 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_70;
  v179 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v180 = v3;
  v181 = *v2;
  v99 = (std::__shared_weak_count *)v2[1];
  v182 = v99;
  if (v99)
  {
    v100 = (unint64_t *)&v99->__shared_weak_owners_;
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
  }
  v102 = _Block_copy(&__p);
  v183 = v102;
  Service::registerCommandHandler(v3, (uint64_t)&v168, &v183);
  if (v102)
    _Block_release(v102);
  if (SHIBYTE(v170) < 0)
    operator delete(v168);
  v103 = (const void *)*MEMORY[0x24BE05200];
  v104 = strlen((const char *)*MEMORY[0x24BE05200]);
  if (v104 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v105 = v104;
  if (v104 >= 0x17)
  {
    v107 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v104 | 7) != 0x17)
      v107 = v104 | 7;
    v108 = v107 + 1;
    v106 = operator new(v107 + 1);
    v161 = v105;
    v162 = v108 | 0x8000000000000000;
    v160 = v106;
    goto LABEL_189;
  }
  HIBYTE(v162) = v104;
  v106 = &v160;
  if (v104)
LABEL_189:
    memmove(v106, v103, v105);
  *((_BYTE *)v106 + v105) = 0;
  v168 = v11;
  v169 = 3321888768;
  v170 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
  v171 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v172 = v3;
  v173 = *v2;
  v109 = (std::__shared_weak_count *)v2[1];
  v174 = v109;
  if (v109)
  {
    v110 = (unint64_t *)&v109->__shared_weak_owners_;
    do
      v111 = __ldxr(v110);
    while (__stxr(v111 + 1, v110));
  }
  v112 = _Block_copy(&v168);
  v175 = v112;
  Service::registerCommandHandler(v3, (uint64_t)&v160, &v175);
  if (v112)
    _Block_release(v112);
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v113 = (const void *)*MEMORY[0x24BE05368];
  v114 = strlen((const char *)*MEMORY[0x24BE05368]);
  if (v114 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v115 = v114;
  if (v114 >= 0x17)
  {
    v117 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v114 | 7) != 0x17)
      v117 = v114 | 7;
    v118 = v117 + 1;
    v116 = operator new(v117 + 1);
    v153 = v115;
    v154 = v118 | 0x8000000000000000;
    v152 = v116;
    goto LABEL_204;
  }
  HIBYTE(v154) = v114;
  v116 = &v152;
  if (v114)
LABEL_204:
    memmove(v116, v113, v115);
  *((_BYTE *)v116 + v115) = 0;
  v160 = v11;
  v161 = 3321888768;
  v162 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3;
  v163 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v164 = v3;
  v165 = *v2;
  v119 = (std::__shared_weak_count *)v2[1];
  v166 = v119;
  if (v119)
  {
    v120 = (unint64_t *)&v119->__shared_weak_owners_;
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 1, v120));
  }
  v122 = _Block_copy(&v160);
  v167 = v122;
  Service::registerCommandHandler(v3, (uint64_t)&v152, &v167);
  if (v122)
    _Block_release(v122);
  if (SHIBYTE(v154) < 0)
    operator delete(v152);
  v123 = (const void *)*MEMORY[0x24BE05358];
  v124 = strlen((const char *)*MEMORY[0x24BE05358]);
  if (v124 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v125 = v124;
  if (v124 >= 0x17)
  {
    v127 = (v124 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v124 | 7) != 0x17)
      v127 = v124 | 7;
    v128 = v127 + 1;
    v126 = operator new(v127 + 1);
    v146 = v125;
    v147 = v128 | 0x8000000000000000;
    v145 = v126;
    goto LABEL_219;
  }
  HIBYTE(v147) = v124;
  v126 = &v145;
  if (v124)
LABEL_219:
    memmove(v126, v123, v125);
  *((_BYTE *)v126 + v125) = 0;
  v152 = v11;
  v153 = 3321888768;
  v154 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_4;
  v155 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v156 = v3;
  v157 = *v2;
  v129 = (std::__shared_weak_count *)v2[1];
  v158 = v129;
  if (v129)
  {
    v130 = (unint64_t *)&v129->__shared_weak_owners_;
    do
      v131 = __ldxr(v130);
    while (__stxr(v131 + 1, v130));
  }
  v132 = _Block_copy(&v152);
  v159 = v132;
  Service::registerCommandHandler(v3, (uint64_t)&v145, &v159);
  if (v132)
    _Block_release(v132);
  if (SHIBYTE(v147) < 0)
    operator delete(v145);
  dispatch_get_global_queue(0, 0);
  v145 = v11;
  v146 = 3321888768;
  v147 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_5;
  v148 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e103___os_state_data_s_I___b32I__os_state_data_decoder_s__64c__64c___64c__0C__16__0__os_state_hints_s_I_II_8l;
  v149 = v3;
  v150 = *v2;
  v133 = (std::__shared_weak_count *)v2[1];
  v151 = v133;
  if (v133)
  {
    v134 = (unint64_t *)&v133->__shared_weak_owners_;
    do
      v135 = __ldxr(v134);
    while (__stxr(v135 + 1, v134));
  }
  *(_QWORD *)(v3 + 200) = os_state_add_handler();
  if (v151)
    std::__shared_weak_count::__release_weak(v151);
  if (v158)
    std::__shared_weak_count::__release_weak(v158);
  if (v166)
    std::__shared_weak_count::__release_weak(v166);
  if (v174)
    std::__shared_weak_count::__release_weak(v174);
  if (v182)
    std::__shared_weak_count::__release_weak(v182);
  if (v212)
    std::__shared_weak_count::__release_weak(v212);
  v136 = v2[3];
  if (v136)
  {
    dispatch_group_leave(v136);
    v137 = v2[3];
    if (v137)
      dispatch_release(v137);
  }
  v138 = (std::__shared_weak_count *)v2[1];
  if (v138)
    std::__shared_weak_count::__release_weak(v138);
  operator delete(v2);
  v139 = (std::__shared_weak_count *)v1[2];
  if (v139)
  {
    v140 = (unint64_t *)&v139->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  operator delete(v1);
}

void sub_24B90C960(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_24B855000, v1, OS_LOG_TYPE_DEFAULT, "#I Reinit traces complete", v2, 2u);
  }
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(NSObject **)(a1 + 40);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(NSObject **)(a1 + 40);
    if (!v5)
      return;
  }
  dispatch_group_leave(v5);
  v6 = *(NSObject **)(a1 + 40);
  if (v6)
    dispatch_release(v6);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_64(_QWORD *a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *aBlock;
  NSObject *object;
  xpc_object_t v7;

  v2 = (void *)a1[6];
  v7 = v2;
  if (!v2)
  {
    v7 = xpc_null_create();
    v3 = (void *)a1[7];
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  xpc_retain(v2);
  v3 = (void *)a1[7];
  if (v3)
LABEL_5:
    v3 = _Block_copy(v3);
LABEL_6:
  v4 = a1[8];
  aBlock = v3;
  object = v4;
  if (v4)
    dispatch_retain(v4);
  abm::HelperClient::perform();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v7);
}

void sub_24B90D07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a10);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE48c15_ZTSN3xpc4dictE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  NSObject *v9;

  v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[6];
  a1[6] = v7;
  if (!v7)
  {
    a1[6] = xpc_null_create();
    v8 = (void *)a2[7];
    if (!v8)
      goto LABEL_9;
    goto LABEL_8;
  }
  xpc_retain(v7);
  v8 = (void *)a2[7];
  if (v8)
LABEL_8:
    v8 = _Block_copy(v8);
LABEL_9:
  v9 = a2[8];
  a1[7] = v8;
  a1[8] = v9;
  if (v9)
    dispatch_retain(v9);
}

void __destroy_helper_block_e8_32c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE48c15_ZTSN3xpc4dictE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(NSObject **)(a1 + 64);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 56);
  if (v3)
    _Block_release(v3);
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_67(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  unint64_t *v22;
  NSObject *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = *a3;
    if (*a3)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
LABEL_24:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  v15 = 0;
  v16 = (std::__shared_weak_count *)v7[16];
  if (!v16)
    goto LABEL_24;
LABEL_15:
  v17 = v7[15];
  v18 = std::__shared_weak_count::lock(v16);
  if (!v18)
    goto LABEL_24;
  v19 = v18;
  v20 = operator new(0x18uLL);
  *v20 = v13;
  v21 = xpc_null_create();
  v20[1] = v7;
  v20[2] = v15;
  v22 = (unint64_t *)&v19->__shared_owners_;
  v23 = v7[17];
  do
    v24 = __ldxr(v22);
  while (__stxr(v24 + 1, v22));
  v25 = operator new(0x18uLL);
  *v25 = v20;
  v25[1] = v17;
  v25[2] = v19;
  dispatch_async_f(v23, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v26 = __ldaxr(v22);
  while (__stlxr(v26 - 1, v22));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v21);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_70(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  unint64_t *v22;
  NSObject *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = *a3;
    if (*a3)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
LABEL_24:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  v15 = 0;
  v16 = (std::__shared_weak_count *)v7[16];
  if (!v16)
    goto LABEL_24;
LABEL_15:
  v17 = v7[15];
  v18 = std::__shared_weak_count::lock(v16);
  if (!v18)
    goto LABEL_24;
  v19 = v18;
  v20 = operator new(0x18uLL);
  *v20 = v13;
  v21 = xpc_null_create();
  v20[1] = v7;
  v20[2] = v15;
  v22 = (unint64_t *)&v19->__shared_owners_;
  v23 = v7[17];
  do
    v24 = __ldxr(v22);
  while (__stxr(v24 + 1, v22));
  v25 = operator new(0x18uLL);
  *v25 = v20;
  v25[1] = v17;
  v25[2] = v19;
  dispatch_async_f(v23, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v26 = __ldaxr(v22);
  while (__stlxr(v26 - 1, v22));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v21);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  _QWORD *v24;
  xpc_object_t v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
LABEL_14:
    v15 = 0;
    v17 = a1[5];
    v16 = (std::__shared_weak_count *)a1[6];
    if (!v16)
      goto LABEL_17;
LABEL_15:
    p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
    goto LABEL_17;
  }
  v13 = xpc_null_create();
  v14 = *a3;
  if (!*a3)
    goto LABEL_14;
LABEL_11:
  v15 = _Block_copy(v14);
  v17 = a1[5];
  v16 = (std::__shared_weak_count *)a1[6];
  if (v16)
    goto LABEL_15;
LABEL_17:
  v20 = (std::__shared_weak_count *)v7[16];
  if (!v20 || (v21 = v7[15], (v22 = std::__shared_weak_count::lock(v20)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v23 = v22;
  v24 = operator new(0x28uLL);
  *v24 = v13;
  v25 = xpc_null_create();
  v24[1] = v7;
  v24[2] = v15;
  v24[3] = v17;
  v24[4] = v16;
  if (v16)
  {
    v26 = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = v7[17];
  v29 = (unint64_t *)&v23->__shared_owners_;
  do
    v30 = __ldxr(v29);
  while (__stxr(v30 + 1, v29));
  v31 = operator new(0x18uLL);
  *v31 = v24;
  v31[1] = v21;
  v31[2] = v23;
  dispatch_async_f(v28, v31, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v32 = __ldaxr(v29);
  while (__stlxr(v32 - 1, v29));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  xpc_release(v25);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = *a3;
    if (*a3)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
LABEL_24:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  v15 = 0;
  v16 = (std::__shared_weak_count *)v7[16];
  if (!v16)
    goto LABEL_24;
LABEL_15:
  v17 = v7[15];
  v18 = std::__shared_weak_count::lock(v16);
  if (!v18)
    goto LABEL_24;
  v19 = v18;
  v20 = operator new(0x18uLL);
  *v20 = v7;
  v20[1] = v13;
  v21 = xpc_null_create();
  v20[2] = v15;
  v22 = v7[17];
  v23 = (unint64_t *)&v19->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v25 = operator new(0x18uLL);
  *v25 = v20;
  v25[1] = v17;
  v25[2] = v19;
  dispatch_async_f(v22, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb4_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v26 = __ldaxr(v23);
  while (__stlxr(v26 - 1, v23));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v21);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_4(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = *a3;
    if (*a3)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
LABEL_24:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  v15 = 0;
  v16 = (std::__shared_weak_count *)v7[16];
  if (!v16)
    goto LABEL_24;
LABEL_15:
  v17 = v7[15];
  v18 = std::__shared_weak_count::lock(v16);
  if (!v18)
    goto LABEL_24;
  v19 = v18;
  v20 = operator new(0x18uLL);
  *v20 = v7;
  v20[1] = v13;
  v21 = xpc_null_create();
  v20[2] = v15;
  v22 = v7[17];
  v23 = (unint64_t *)&v19->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v25 = operator new(0x18uLL);
  *v25 = v20;
  v25[1] = v17;
  v25[2] = v19;
  dispatch_async_f(v22, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb5_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v26 = __ldaxr(v23);
  while (__stlxr(v26 - 1, v23));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v21);
}

uint64_t ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_5(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v27[6];
  std::__shared_weak_count *v28;
  _QWORD block[6];
  std::__shared_weak_count *v30;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (_QWORD *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      if (v8 && *(_DWORD *)(a2 + 16) == 3)
      {
        v9 = MEMORY[0x24BDAC760];
        v27[0] = MEMORY[0x24BDAC760];
        v27[1] = 3321888768;
        v27[2] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_6;
        v27[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e5_v8__0l;
        v27[4] = v5;
        v27[5] = v8;
        v10 = (std::__shared_weak_count *)a1[6];
        v28 = v10;
        if (v10)
        {
          p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
          do
            v12 = __ldxr(p_shared_weak_owners);
          while (__stxr(v12 + 1, p_shared_weak_owners));
        }
        v13 = (std::__shared_weak_count *)v5[16];
        if (!v13 || (v14 = v5[15], (v15 = std::__shared_weak_count::lock(v13)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v16 = v15;
        v17 = v5[17];
        block[0] = v9;
        block[1] = 3321888768;
        block[2] = ___ZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedEU13block_pointerFvvE_block_invoke;
        block[3] = &unk_251CBE9B8;
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        block[5] = v14;
        v30 = v16;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
        block[4] = v27;
        dispatch_async(v17, block);
        v20 = v30;
        if (v30)
        {
          v21 = (unint64_t *)&v30->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        if (v28)
          std::__shared_weak_count::__release_weak(v28);
      }
      v24 = (unint64_t *)&v7->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  return 0;
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_6(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_weak_owners;
  unint64_t v4;
  void *v5;
  NSObject *v6;
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  void *v17;
  unint64_t v18;
  __int128 v19;
  void *v20;
  NSObject *object;
  xpc_object_t v22;
  std::__shared_weak_count *v23;
  _QWORD aBlock[4];
  __int128 v25;
  std::__shared_weak_count *v26;
  void *v27;
  dispatch_object_t v28;
  _QWORD block[5];

  v27 = (void *)0xAAAAAAAAAAAAAAAALL;
  v28 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v1 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_7;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  v19 = *(_OWORD *)(a1 + 32);
  v25 = v19;
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  v26 = v2;
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v4 = __ldxr(p_shared_weak_owners);
    while (__stxr(v4 + 1, p_shared_weak_owners));
  }
  v5 = _Block_copy(aBlock);
  v6 = *(NSObject **)(v19 + 136);
  if (v6)
    dispatch_retain(*(dispatch_object_t *)(v19 + 136));
  v27 = v5;
  v28 = v6;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  block[0] = v1;
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_5;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v8 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_11;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v8 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_11;
  }
  v9 = (unint64_t *)(v8 + 8);
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
LABEL_11:
  abm::HelperClient::create();
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v13 = xpc_dictionary_create(0, 0, 0);
  if (v13 || (v13 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v13) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v13);
      v14 = v13;
    }
    else
    {
      v14 = xpc_null_create();
    }
  }
  else
  {
    v14 = xpc_null_create();
    v13 = 0;
  }
  xpc_release(v13);
  v15 = xpc_int64_create(1500);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x24BDFC790], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v22 = v14;
  if (!v14)
  {
    v22 = xpc_null_create();
    v17 = v27;
    if (!v27)
      goto LABEL_29;
    goto LABEL_28;
  }
  xpc_retain(v14);
  v17 = v27;
  if (v27)
LABEL_28:
    v17 = _Block_copy(v17);
LABEL_29:
  v20 = v17;
  object = v28;
  if (v28)
    dispatch_retain(v28);
  abm::HelperClient::perform();
  if (object)
    dispatch_release(object);
  if (v20)
    _Block_release(v20);
  xpc_release(v22);
  xpc_release(v14);
  do
    v18 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v18 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v18)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (v28)
    dispatch_release(v28);
  if (v27)
    _Block_release(v27);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
}

void sub_24B90DF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, xpc_object_t object, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  void *v25;
  uint64_t v26;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a12);
  xpc_release(object);
  object = 0;
  xpc_release(v25);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback(v26 - 88);
  if (a25)
    std::__shared_weak_count::__release_weak(a25);
  _Unwind_Resume(a1);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_7(_QWORD *a1, _DWORD *a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t value;
  int v14;
  const void *v15;
  size_t v16;
  void *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v24;
  xpc_object_t object;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (v12)
      {
        if (!v10)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10)
          return;
      }
      if (*a2 || MEMORY[0x24BD2A468](*a3) != MEMORY[0x24BDACFA0])
        goto LABEL_15;
      value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x24BDFC970]);
      object = value;
      if (value)
        xpc_retain(value);
      else
        object = xpc_null_create();
      v14 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object);
      if ((v14 - 3) < 0xFFFFFFFE)
      {
LABEL_15:
        v15 = (const void *)*MEMORY[0x24BE05428];
        v16 = strlen((const char *)*MEMORY[0x24BE05428]);
        if (v16 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v17 = (void *)v16;
        if (v16 >= 0x17)
        {
          v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v19 = v16 | 7;
          v20 = v19 + 1;
          v18 = (void **)operator new(v19 + 1);
          __dst[1] = v17;
          v24 = v20 | 0x8000000000000000;
          __dst[0] = v18;
        }
        else
        {
          HIBYTE(v24) = v16;
          v18 = __dst;
          if (!v16)
            goto LABEL_23;
        }
        memmove(v18, v15, (size_t)v17);
LABEL_23:
        *((_BYTE *)v17 + (_QWORD)v18) = 0;
        aBlock = 0;
        cf = 0;
        Service::broadcastEvent(v7, (uint64_t)__dst, &cf, (const void **)&aBlock);
        if (aBlock)
          _Block_release(aBlock);
        if (cf)
          CFRelease(cf);
        if (SHIBYTE(v24) < 0)
          operator delete(__dst[0]);
      }
    }
  }
}

void sub_24B90E1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v4;
  xpc_object_t value;
  uint64_t *v6;
  uint64_t **v7;
  char v8;
  __int128 v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void **v13;
  void **v14;
  int v15;
  std::__shared_weak_count *v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  uint64_t **v21;
  BOOL v22;
  uint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  NSObject *v27;
  NSObject *shared_owners;
  uint64_t *v29;
  uint64_t **v30;
  void **v31;
  void *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  int v36;
  uint64_t *v37;
  size_t v38;
  size_t v39;
  int v40;
  int v41;
  char *v42;
  std::string *v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  xpc_object_t v51;
  uint64_t v52;
  xpc_object_t v53;
  const void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  xpc_object_t v59;
  void *__p[2];
  __int128 v61;
  unint64_t v62;
  void *v63[3];
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v4) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v4);
      v59 = v4;
    }
    else
    {
      v59 = xpc_null_create();
    }
  }
  else
  {
    v59 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  memset(v63, 170, sizeof(v63));
  v58 = a1;
  value = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x24BE05120]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v61 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  v6 = *(uint64_t **)(v3 + 152);
  v7 = (uint64_t **)(v3 + 160);
  if (v6 == (uint64_t *)(v3 + 160))
    goto LABEL_47;
  v8 = 0;
  do
  {
    v62 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)__p = v9;
    v61 = v9;
    if (*((char *)v6 + 55) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v6[4], v6[5]);
    }
    else
    {
      *(_OWORD *)__p = *((_OWORD *)v6 + 2);
      *(_QWORD *)&v61 = v6[6];
    }
    v10 = v6[8];
    *((_QWORD *)&v61 + 1) = v6[7];
    v62 = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    if ((SBYTE7(v61) & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if (SHIBYTE(v63[2]) >= 0)
      v14 = v63;
    else
      v14 = (void **)v63[0];
    v15 = strcasecmp((const char *)v13, (const char *)v14);
    if (v15)
    {
      v16 = (std::__shared_weak_count *)v62;
      if (!v62)
        goto LABEL_34;
    }
    else
    {
      v17 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        LODWORD(object[0]) = 136315138;
        *(xpc_object_t *)((char *)object + 4) = v14;
        _os_log_error_impl(&dword_24B855000, v17, OS_LOG_TYPE_ERROR, "Failed to register: %s is already registered.", (uint8_t *)object, 0xCu);
        v8 = 1;
        v16 = (std::__shared_weak_count *)v62;
        if (!v62)
          goto LABEL_34;
      }
      else
      {
        v8 = 1;
        v16 = (std::__shared_weak_count *)v62;
        if (!v62)
          goto LABEL_34;
      }
    }
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
LABEL_34:
    if (SBYTE7(v61) < 0)
      operator delete(__p[0]);
    if (!v15)
      break;
    v20 = (uint64_t *)v6[1];
    if (v20)
    {
      do
      {
        v21 = (uint64_t **)v20;
        v20 = (uint64_t *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        v21 = (uint64_t **)v6[2];
        v22 = *v21 == v6;
        v6 = (uint64_t *)v21;
      }
      while (!v22);
    }
    v6 = (uint64_t *)v21;
  }
  while (v21 != v7);
  if ((v8 & 1) != 0)
  {
    v23 = 3760250880;
    v24 = v58;
    goto LABEL_98;
  }
LABEL_47:
  v25 = (std::__shared_weak_count *)operator new(0x28uLL);
  v25->__shared_owners_ = 0;
  v26 = (unint64_t *)&v25->__shared_owners_;
  v25->__shared_weak_owners_ = 0;
  v25->__vftable = (std::__shared_weak_count_vtbl *)off_251CBE970;
  v27 = *(NSObject **)(v3 + 176);
  if (v27)
  {
    dispatch_retain(*(dispatch_object_t *)(v3 + 176));
    dispatch_group_enter(v27);
  }
  v25[1].__vftable = (std::__shared_weak_count_vtbl *)xpc_null_create();
  v25[1].__shared_owners_ = (uint64_t)v27;
  if (v27)
  {
    dispatch_retain(v27);
    shared_owners = v25[1].__shared_owners_;
    if (shared_owners)
      dispatch_group_enter(shared_owners);
    dispatch_group_leave(v27);
    dispatch_release(v27);
  }
  v29 = *v7;
  v30 = (uint64_t **)(v3 + 160);
  if (*v7)
  {
    if (SHIBYTE(v63[2]) >= 0)
      v31 = v63;
    else
      v31 = (void **)v63[0];
    if (SHIBYTE(v63[2]) >= 0)
      v32 = (void *)HIBYTE(v63[2]);
    else
      v32 = v63[1];
    while (1)
    {
      v30 = (uint64_t **)v29;
      v35 = (uint64_t *)v29[4];
      v33 = v29 + 4;
      v34 = v35;
      v36 = *((char *)v33 + 23);
      if (v36 >= 0)
        v37 = v33;
      else
        v37 = v34;
      if (v36 >= 0)
        v38 = *((unsigned __int8 *)v33 + 23);
      else
        v38 = v33[1];
      if (v38 >= (unint64_t)v32)
        v39 = (size_t)v32;
      else
        v39 = v38;
      v40 = memcmp(v31, v37, v39);
      if (v40)
      {
        if (v40 < 0)
          goto LABEL_60;
LABEL_74:
        v41 = memcmp(v37, v31, v39);
        if (v41)
        {
          if ((v41 & 0x80000000) == 0)
            goto LABEL_86;
        }
        else if (v38 >= (unint64_t)v32)
        {
LABEL_86:
          v42 = (char *)v30;
          goto LABEL_87;
        }
        v29 = v30[1];
        if (!v29)
        {
          v7 = v30 + 1;
          break;
        }
      }
      else
      {
        if ((unint64_t)v32 >= v38)
          goto LABEL_74;
LABEL_60:
        v29 = *v30;
        v7 = v30;
        if (!*v30)
          break;
      }
    }
  }
  v42 = (char *)operator new(0x48uLL);
  v43 = (std::string *)(v42 + 32);
  if (SHIBYTE(v63[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v43, (const std::string::value_type *)v63[0], (std::string::size_type)v63[1]);
  }
  else
  {
    *(_OWORD *)&v43->__r_.__value_.__l.__data_ = *(_OWORD *)v63;
    *((void **)v42 + 6) = v63[2];
  }
  *((_QWORD *)v42 + 7) = 0;
  *((_QWORD *)v42 + 8) = 0;
  *(_QWORD *)v42 = 0;
  *((_QWORD *)v42 + 1) = 0;
  *((_QWORD *)v42 + 2) = v30;
  *v7 = (uint64_t *)v42;
  v44 = **(_QWORD **)(v3 + 152);
  v45 = (uint64_t *)v42;
  if (v44)
  {
    *(_QWORD *)(v3 + 152) = v44;
    v45 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 160), v45);
  ++*(_QWORD *)(v3 + 168);
LABEL_87:
  v24 = v58;
  do
    v46 = __ldxr(v26);
  while (__stxr(v46 + 1, v26));
  v47 = (std::__shared_weak_count *)*((_QWORD *)v42 + 8);
  *((_QWORD *)v42 + 7) = v25 + 1;
  *((_QWORD *)v42 + 8) = v25;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  do
    v50 = __ldaxr(v26);
  while (__stlxr(v50 - 1, v26));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  v23 = 0;
LABEL_98:
  v51 = xpc_null_create();
  v52 = *(_QWORD *)(v2 + 16);
  __p[0] = v51;
  v53 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v52 + 16))(v52, v23, __p);
  xpc_release(__p[0]);
  xpc_release(v53);
  if (SHIBYTE(v63[2]) < 0)
    operator delete(v63[0]);
  xpc_release(v59);
  v54 = *(const void **)(v2 + 16);
  if (v54)
    _Block_release(v54);
  xpc_release(*(xpc_object_t *)v2);
  operator delete((void *)v2);
  v55 = (std::__shared_weak_count *)v24[2];
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  operator delete(v24);
}

void sub_24B90E808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, xpc_object_t object, xpc_object_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,xpc_object_t a27)
{
  uint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  void *v31;
  unint64_t v33;
  const void *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;

  v31 = v28;
  operator delete(v31);
  do
    v33 = __ldaxr(v30);
  while (__stlxr(v33 - 1, v30));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  if (a26 < 0)
    operator delete(__p);
  xpc_release(object);
  v34 = *(const void **)(v27 + 16);
  if (v34)
    _Block_release(v34);
  xpc_release(*(xpc_object_t *)v27);
  operator delete((void *)v27);
  v35 = (std::__shared_weak_count *)a11[2];
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  operator delete(a11);
  _Unwind_Resume(a1);
}

void sub_24B90E964(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void std::__shared_ptr_emplace<LogTrackerDomainInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_251CBE970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LogTrackerDomainInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_251CBE970;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<LogTrackerDomainInfo>::__on_zero_shared(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 32);
    if (v3)
      dispatch_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t value;
  _QWORD *v5;
  void **v6;
  const char *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  NSObject *v12;
  void **v13;
  std::__shared_weak_count *v14;
  _QWORD *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  xpc_object_t v25;
  uint64_t v26;
  xpc_object_t v27;
  const void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void **v32;
  char *v33;
  size_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  void *v40[3];
  _BYTE object[12];
  void *__p[4];

  __p[3] = *(void **)MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  memset(v40, 170, sizeof(v40));
  value = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x24BE05120]);
  *(_QWORD *)object = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)object = xpc_null_create();
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)object);
  v5 = *(_QWORD **)(v3 + 152);
  if (v5 != (_QWORD *)(v3 + 160))
  {
    if (SHIBYTE(v40[2]) >= 0)
      v6 = v40;
    else
      v6 = (void **)v40[0];
    while (1)
    {
      v7 = *((char *)v5 + 55) >= 0 ? (const char *)(v5 + 4) : (const char *)v5[4];
      if (!strcasecmp(v7, (const char *)v6))
        break;
      v8 = (_QWORD *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v5[2];
          v10 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
      if (v9 == (_QWORD *)(v3 + 160))
        goto LABEL_19;
    }
    v15 = (_QWORD *)v5[7];
    v14 = (std::__shared_weak_count *)v5[8];
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v18 = (void *)*MEMORY[0x24BE04EC8];
    __p[0] = (void *)v2;
    __p[1] = v18;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)__p, object);
    v19 = *(_QWORD *)object;
    *(_QWORD *)object = xpc_null_create();
    v20 = (void *)*v15;
    *v15 = v19;
    xpc_release(v20);
    xpc_release(*(xpc_object_t *)object);
    v21 = v15[1];
    v15[1] = 0;
    if (v21)
    {
      dispatch_group_leave(v21);
      dispatch_release(v21);
    }
    v22 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      v32 = v40;
      if (SHIBYTE(v40[2]) < 0)
        v32 = (void **)v40[0];
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v32;
      _os_log_debug_impl(&dword_24B855000, v22, OS_LOG_TYPE_DEBUG, "#D Received log domain: %s", (uint8_t *)__p, 0xCu);
      v22 = *(NSObject **)(v3 + 88);
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        goto LABEL_30;
    }
    else if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      if (!v14)
        goto LABEL_34;
LABEL_30:
      v23 = (unint64_t *)&v14->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        v11 = 0;
      }
      else
      {
LABEL_34:
        v11 = 0;
      }
      goto LABEL_36;
    }
    v33 = (char *)MEMORY[0x24BD2A3F0](*v15);
    memset(__p, 170, 24);
    v34 = strlen(v33);
    if (v34 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v35 = (void *)v34;
    if (v34 >= 0x17)
    {
      v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17)
        v37 = v34 | 7;
      v38 = v37 + 1;
      v36 = operator new(v37 + 1);
      __p[1] = v35;
      __p[2] = (void *)(v38 | 0x8000000000000000);
      __p[0] = v36;
    }
    else
    {
      HIBYTE(__p[2]) = v34;
      v36 = __p;
      if (!v34)
        goto LABEL_58;
    }
    memcpy(v36, v33, (size_t)v35);
LABEL_58:
    *((_BYTE *)v35 + (_QWORD)v36) = 0;
    free(v33);
    v39 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v39 = (void **)__p[0];
    *(_DWORD *)object = 136315138;
    *(_QWORD *)&object[4] = v39;
    _os_log_debug_impl(&dword_24B855000, v22, OS_LOG_TYPE_DEBUG, "#D Received log summary: %s", object, 0xCu);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    goto LABEL_30;
  }
LABEL_19:
  v11 = 3760250880;
  v12 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = v40;
    if (SHIBYTE(v40[2]) < 0)
      v13 = (void **)v40[0];
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v13;
    _os_log_error_impl(&dword_24B855000, v12, OS_LOG_TYPE_ERROR, "Failed to find log summary domain with %s", (uint8_t *)__p, 0xCu);
  }
LABEL_36:
  v25 = xpc_null_create();
  v26 = *(_QWORD *)(v2 + 16);
  __p[0] = v25;
  v27 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v26 + 16))(v26, v11, __p);
  xpc_release(__p[0]);
  xpc_release(v27);
  if ((SHIBYTE(v40[2]) & 0x80000000) == 0)
  {
    v28 = *(const void **)(v2 + 16);
    if (!v28)
      goto LABEL_41;
    goto LABEL_40;
  }
  operator delete(v40[0]);
  v28 = *(const void **)(v2 + 16);
  if (v28)
LABEL_40:
    _Block_release(v28);
LABEL_41:
  xpc_release(*(xpc_object_t *)v2);
  operator delete((void *)v2);
  v29 = (std::__shared_weak_count *)a1[2];
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  operator delete(a1);
}

void sub_24B90EE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, xpc_object_t a16, uint64_t a17, xpc_object_t object, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  xpc_object_t value;
  const char *v6;
  const char *v7;
  xpc_object_t v8;
  const char *v9;
  NSObject *v10;
  void **v11;
  size_t v12;
  void **v13;
  NSObject *v14;
  const void *v15;
  void *v16;
  uint64_t IsInternalBuild;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  void *v22;
  NSObject *v23;
  unsigned __int8 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  uint64_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  const void *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  const void *aBlock;
  NSObject *object;
  xpc_object_t v51;
  const void *v52;
  NSObject *v53;
  void *__p[3];
  void *v55[3];
  __int128 block;
  void (*v57)(uint64_t);
  void *v58;
  __int128 *v59;
  os_activity_scope_state_s state;
  void (*v61)(_QWORD *, unsigned int *);
  void *v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = _os_activity_create(&dword_24B855000, "Dump trace", MEMORY[0x24BDACB08], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v4, &state);
  os_activity_scope_leave(&state);
  memset(v55, 170, sizeof(v55));
  value = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x24BE04F40]);
  state.opaque[0] = (uint64_t)value;
  if (value)
    xpc_retain(value);
  else
    state.opaque[0] = (uint64_t)xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&state, (const object *)*MEMORY[0x24BE05168], v6);
  xpc_release((xpc_object_t)state.opaque[0]);
  memset(__p, 170, sizeof(__p));
  v7 = (const char *)*MEMORY[0x24BE053F0];
  v8 = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x24BE053F0]);
  state.opaque[0] = (uint64_t)v8;
  if (v8)
    xpc_retain(v8);
  else
    state.opaque[0] = (uint64_t)xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&state, (const object *)"", v9);
  xpc_release((xpc_object_t)state.opaque[0]);
  v10 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v11 = (void **)__p[0];
    LODWORD(state.opaque[0]) = 136315138;
    *(uint64_t *)((char *)state.opaque + 4) = (uint64_t)v11;
    _os_log_impl(&dword_24B855000, v10, OS_LOG_TYPE_DEFAULT, "#I Dumping log with Reason: \"%s\"", (uint8_t *)&state, 0xCu);
  }
  if (SHIBYTE(v55[2]) >= 0)
    v12 = HIBYTE(v55[2]);
  else
    v12 = (size_t)v55[1];
  if (v12 != strlen((const char *)*MEMORY[0x24BE05538])
    || (SHIBYTE(v55[2]) >= 0 ? (v13 = v55) : (v13 = (void **)v55[0]),
        memcmp(v13, (const void *)*MEMORY[0x24BE05538], v12)))
  {
    v14 = *(NSObject **)v2;
    v53 = v14;
    if (v14)
    {
      xpc_retain(v14);
      v15 = *(const void **)(v2 + 16);
      if (v15)
      {
LABEL_21:
        v16 = _Block_copy(v15);
LABEL_24:
        v52 = v16;
        LogTracker::dumpLogInternal_sync(v3, (xpc_object_t *)&v53, &v52);
        if (v16)
          _Block_release(v16);
        xpc_release(v14);
        v53 = 0;
        goto LABEL_27;
      }
    }
    else
    {
      v14 = xpc_null_create();
      v53 = v14;
      v15 = *(const void **)(v2 + 16);
      if (v15)
        goto LABEL_21;
    }
    v16 = 0;
    goto LABEL_24;
  }
  v33 = xpc_string_create((const char *)*MEMORY[0x24BDFC740]);
  if (!v33)
    v33 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)v2, v7, v33);
  v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  v35 = xpc_null_create();
  v36 = *(_QWORD *)(v2 + 16);
  state.opaque[0] = (uint64_t)v35;
  v37 = xpc_null_create();
  (*(void (**)(uint64_t, _QWORD, os_activity_scope_state_s *))(v36 + 16))(v36, 0, &state);
  xpc_release((xpc_object_t)state.opaque[0]);
  xpc_release(v37);
  v38 = *(xpc_object_t *)v2;
  v52 = v38;
  v53 = 0;
  if (v38)
  {
    xpc_retain(v38);
  }
  else
  {
    v38 = xpc_null_create();
    v52 = v38;
  }
  LogTracker::jsonSummary_sync((_QWORD *)v3, &v53, (xpc_object_t *)&v52);
  xpc_release(v38);
  v52 = 0;
LABEL_27:
  if (!TelephonyUtilIsCarrierBuild())
    goto LABEL_79;
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || LogTracker::isDefaultCarrierProfileInstalled((LogTracker *)IsInternalBuild))
    goto LABEL_79;
  v18 = MEMORY[0x24BDAC760];
  state.opaque[0] = MEMORY[0x24BDAC760];
  state.opaque[1] = 3321888768;
  v61 = ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb3_ENKUlvE_clEv_block_invoke;
  v62 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  v63 = v3;
  v64 = *(_QWORD *)(v2 + 24);
  v19 = *(std::__shared_weak_count **)(v2 + 32);
  v65 = v19;
  if (v19)
  {
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v21 = __ldxr(p_shared_weak_owners);
    while (__stxr(v21 + 1, p_shared_weak_owners));
  }
  v22 = _Block_copy(&state);
  v23 = *(NSObject **)(v3 + 136);
  if (v23)
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  *(_QWORD *)&block = v18;
  *((_QWORD *)&block + 1) = 0x40000000;
  v57 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v58 = &__block_descriptor_tmp_13_5;
  v59 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v25 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_40;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v25 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_40;
  }
  v26 = (unint64_t *)(v25 + 8);
  do
    v27 = __ldxr(v26);
  while (__stxr(v27 + 1, v26));
LABEL_40:
  abm::HelperClient::create();
  v28 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
  if (*((_QWORD *)&block + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = xpc_dictionary_create(0, 0, 0);
  if (v31 || (v31 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v31) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v31);
      v32 = v31;
    }
    else
    {
      v32 = xpc_null_create();
    }
  }
  else
  {
    v32 = xpc_null_create();
    v31 = 0;
  }
  xpc_release(v31);
  v39 = xpc_string_create((const char *)*MEMORY[0x24BDFC940]);
  if (!v39)
    v39 = xpc_null_create();
  xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x24BDFC7C8], v39);
  v40 = xpc_null_create();
  xpc_release(v39);
  xpc_release(v40);
  v41 = xpc_BOOL_create(1);
  if (!v41)
    v41 = xpc_null_create();
  xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x24BDFC910], v41);
  v42 = xpc_null_create();
  xpc_release(v41);
  xpc_release(v42);
  v51 = v32;
  if (v32)
  {
    xpc_retain(v32);
    if (v22)
      goto LABEL_63;
LABEL_97:
    aBlock = 0;
    object = v23;
    if (!v23)
      goto LABEL_65;
    goto LABEL_64;
  }
  v51 = xpc_null_create();
  if (!v22)
    goto LABEL_97;
LABEL_63:
  aBlock = _Block_copy(v22);
  object = v23;
  if (v23)
LABEL_64:
    dispatch_retain(v23);
LABEL_65:
  abm::HelperClient::perform();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v51);
  xpc_release(v32);
  do
    v43 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v43 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v43)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (v23)
    dispatch_release(v23);
  if (v22)
    _Block_release(v22);
  if (v65)
    std::__shared_weak_count::__release_weak(v65);
LABEL_79:
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v55[2]) & 0x80000000) == 0)
      goto LABEL_81;
LABEL_84:
    operator delete(v55[0]);
    if (!v4)
      goto LABEL_86;
    goto LABEL_85;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v55[2]) < 0)
    goto LABEL_84;
LABEL_81:
  if (v4)
LABEL_85:
    os_release(v4);
LABEL_86:
  v44 = *(std::__shared_weak_count **)(v2 + 32);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  v45 = *(const void **)(v2 + 16);
  if (v45)
    _Block_release(v45);
  xpc_release(*(xpc_object_t *)v2);
  operator delete((void *)v2);
  v46 = (std::__shared_weak_count *)a1[2];
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  operator delete(a1);
}

void sub_24B90F76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,xpc_object_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb3_ENKUlvE_clEv_block_invoke(_QWORD *a1, unsigned int *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void **v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  void **v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *a2;
      if ((_DWORD)v11)
      {
        v12 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v11, (uint64_t)__p);
          if (v15 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v17 = v13;
          _os_log_error_impl(&dword_24B855000, v12, OS_LOG_TYPE_ERROR, "Failed to install profile. Result: %s", buf, 0xCu);
          if (v15 < 0)
            operator delete(__p[0]);
        }
      }
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb4_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  xpc_object_t v4;
  void *v5;
  xpc_object_t value;
  xpc_object_t v7;
  xpc_object_t v8;
  const void *v9;
  size_t v10;
  std::string::size_type v11;
  std::string *p_dst;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  char v16;
  std::string *v17;
  const char *v18;
  _BOOL4 v19;
  const void *v20;
  size_t v21;
  std::string::size_type v22;
  std::string *p_p;
  uint64_t v24;
  uint64_t v25;
  xpc_object_t *v26;
  int v27;
  void *v28;
  std::string *v29;
  xpc_object_t *v30;
  int v31;
  NSObject *v32;
  xpc_object_t v33;
  const void *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  xpc_object_t *v38;
  xpc_object_t v39;
  std::string __p;
  xpc_object_t v41[3];
  xpc_object_t object[3];
  void *v43[3];
  void *aBlock;
  xpc_object_t v45;
  std::string __dst;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  v4 = *(xpc_object_t *)(*a1 + 8);
  v45 = v4;
  if (!v4)
  {
    v4 = xpc_null_create();
    v45 = v4;
    v5 = (void *)v2[2];
    if (!v5)
      goto LABEL_6;
    goto LABEL_5;
  }
  xpc_retain(v4);
  v5 = (void *)v2[2];
  if (v5)
LABEL_5:
    v5 = _Block_copy(v5);
LABEL_6:
  aBlock = v5;
  LogTracker::setProperty_sync(v3, &v45, (uint64_t *)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v4);
  v45 = 0;
  memset(v43, 170, sizeof(v43));
  value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x24BE04E98]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  v7 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x24BE051B0]);
  v41[0] = v7;
  if (v7)
    xpc_retain(v7);
  else
    v41[0] = xpc_null_create();
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  xpc_release(v41[0]);
  memset(v41, 170, sizeof(v41));
  v8 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x24BE05270]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  if (v8)
    xpc_retain(v8);
  else
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  xpc_release(__p.__r_.__value_.__l.__data_);
  v9 = (const void *)*MEMORY[0x24BE04EF8];
  v10 = strlen((const char *)*MEMORY[0x24BE04EF8]);
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    p_dst = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_30;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v10;
  p_dst = &__dst;
  if (v10)
LABEL_30:
    memmove(p_dst, v9, v11);
  p_dst->__r_.__value_.__s.__data_[v11] = 0;
  if (SHIBYTE(v43[2]) >= 0)
    v15 = v43;
  else
    v15 = (void **)v43[0];
  v16 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &__dst;
  else
    v17 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if (strcasecmp((const char *)v15, (const char *)v17))
  {
    v19 = 0;
    if ((v16 & 0x80) == 0)
      goto LABEL_39;
LABEL_59:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!v19)
      goto LABEL_75;
    goto LABEL_60;
  }
  v20 = (const void *)*MEMORY[0x24BE05488];
  v21 = strlen((const char *)*MEMORY[0x24BE05488]);
  if (v21 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v22 = v21;
  if (v21 >= 0x17)
  {
    v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v24 = v21 | 7;
    v25 = v24 + 1;
    p_p = (std::string *)operator new(v24 + 1);
    __p.__r_.__value_.__l.__size_ = v22;
    __p.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_48;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v21;
  p_p = &__p;
  if (v21)
LABEL_48:
    memmove(p_p, v20, v22);
  p_p->__r_.__value_.__s.__data_[v22] = 0;
  if (SHIBYTE(object[2]) >= 0)
    v26 = object;
  else
    v26 = (xpc_object_t *)object[0];
  v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  v28 = (void *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &__p;
  else
    v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v19 = strcasecmp((const char *)v26, (const char *)v29) == 0;
  if (v27 < 0)
  {
    operator delete(v28);
    if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_59;
  }
  else if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    goto LABEL_59;
  }
LABEL_39:
  if (!v19)
    goto LABEL_75;
LABEL_60:
  if (SHIBYTE(v41[2]) >= 0)
    v30 = v41;
  else
    v30 = (xpc_object_t *)v41[0];
  v31 = abm::helper::asEnum((abm::helper *)v30, v18);
  v32 = v3[11];
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    v38 = v41;
    if (SHIBYTE(v41[2]) < 0)
      v38 = (xpc_object_t *)v41[0];
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
    _os_log_debug_impl(&dword_24B855000, v32, OS_LOG_TYPE_DEBUG, "#D Selected Config: %s", (uint8_t *)&__dst, 0xCu);
  }
  memset(&__p, 170, sizeof(__p));
  v33 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x24BE05788]);
  v39 = v33;
  if (v33)
    xpc_retain(v33);
  else
    v39 = xpc_null_create();
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  xpc_release(v39);
  v39 = xpc_null_create();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    __dst = __p;
  LogTracker::updateLoggingSettings_sync(v3, v31, &v39, (uint64_t)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  xpc_release(v39);
  v39 = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_75:
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0)
      goto LABEL_76;
    goto LABEL_81;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v41[2]) & 0x80000000) == 0)
  {
LABEL_76:
    if ((SHIBYTE(object[2]) & 0x80000000) == 0)
      goto LABEL_77;
    goto LABEL_82;
  }
LABEL_81:
  operator delete(v41[0]);
  if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
LABEL_77:
    if ((SHIBYTE(v43[2]) & 0x80000000) == 0)
      goto LABEL_78;
    goto LABEL_83;
  }
LABEL_82:
  operator delete(object[0]);
  if ((SHIBYTE(v43[2]) & 0x80000000) == 0)
  {
LABEL_78:
    v34 = (const void *)v2[2];
    if (!v34)
      goto LABEL_85;
    goto LABEL_84;
  }
LABEL_83:
  operator delete(v43[0]);
  v34 = (const void *)v2[2];
  if (v34)
LABEL_84:
    _Block_release(v34);
LABEL_85:
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v35 = (std::__shared_weak_count *)a1[2];
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  operator delete(a1);
}

void sub_24B910140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *aBlock)
{
  _QWORD *v35;
  uint64_t v36;
  const void *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;

  xpc_release(object);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  v38 = *(const void **)(v36 + 16);
  if (v38)
    _Block_release(v38);
  xpc_release(*(xpc_object_t *)(v36 + 8));
  operator delete((void *)v36);
  v39 = (std::__shared_weak_count *)v35[2];
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  operator delete(v35);
  _Unwind_Resume(a1);
}

void sub_24B910340(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb5_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  _QWORD *v3;
  xpc_object_t value;
  xpc_object_t v5;
  char isSupported;
  char v7;
  xpc_object_t v8;
  xpc_object_t v9;
  NSObject *v10;
  std::string *v11;
  xpc_object_t v12;
  _QWORD *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  _QWORD *v16;
  _BOOL4 isInternalProperty_sync;
  _BOOL4 v18;
  _QWORD *v19;
  const void *v20;
  size_t v21;
  void *v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  const char *p_buf;
  xpc_object_t v28;
  xpc_object_t v29;
  int v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  const void *v37;
  xpc_object_t v38;
  void *__dst[2];
  unint64_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  unsigned int v43;
  std::string __p;
  xpc_object_t object[3];
  std::string v46;
  __int128 buf;
  void (*v48)(uint64_t, unsigned int, void **);
  void *v49;
  const void *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = (_QWORD *)**a1;
  memset(&v46, 170, sizeof(v46));
  value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x24BE04E98]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  buf = 0uLL;
  v48 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  v5 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x24BE051B0]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  if (v5)
    xpc_retain(v5);
  else
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  buf = 0uLL;
  v48 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  else
    __p = v46;
  isSupported = abm::trace::isSupported();
  v7 = isSupported;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v7 & 1) != 0)
    {
LABEL_12:
      v43 = -534716416;
      v42 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      v8 = xpc_dictionary_create(0, 0, 0);
      v9 = v8;
      if (v8)
      {
        v42 = v8;
      }
      else
      {
        v9 = xpc_null_create();
        v42 = v9;
        if (!v9)
        {
          v15 = xpc_null_create();
          v9 = 0;
          goto LABEL_25;
        }
      }
      if (MEMORY[0x24BD2A468](v9) == MEMORY[0x24BDACFA0])
      {
        xpc_retain(v9);
        goto LABEL_26;
      }
      v15 = xpc_null_create();
LABEL_25:
      v42 = v15;
LABEL_26:
      xpc_release(v9);
      v16 = (_QWORD *)v2[1];
      v41 = v16;
      if (v16)
      {
        xpc_retain(v16);
      }
      else
      {
        v16 = xpc_null_create();
        v41 = v16;
      }
      isInternalProperty_sync = LogTracker::isInternalProperty_sync((uint64_t)v3, &v41, &v42, &v43);
      xpc_release(v16);
      v41 = 0;
      if (isInternalProperty_sync)
      {
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(v2 + 2, &v43, &v42);
LABEL_64:
        xpc_release(v42);
        goto LABEL_65;
      }
      if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
      {
        buf = 0uLL;
        v48 = 0;
        v18 = prop::get((char *)&v46, (char *)object, (uint64_t)&buf);
        v19 = (_QWORD *)v2[1];
        __dst[0] = v19;
        if (v19)
        {
          xpc_retain(v19);
        }
        else
        {
          v19 = xpc_null_create();
          __dst[0] = v19;
        }
        if (SHIBYTE(v48) >= 0)
          p_buf = (const char *)&buf;
        else
          p_buf = (const char *)buf;
        v28 = xpc_string_create(p_buf);
        if (!v28)
          v28 = xpc_null_create();
        xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x24BE05270], v28);
        v29 = xpc_null_create();
        xpc_release(v28);
        xpc_release(v29);
        if (v18)
          v30 = 0;
        else
          v30 = -534716416;
        LODWORD(v38) = v30;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v2 + 2, (unsigned int *)&v38, __dst);
        xpc_release(__dst[0]);
        if (SHIBYTE(v48) < 0)
          operator delete((void *)buf);
        goto LABEL_64;
      }
      v20 = (const void *)*MEMORY[0x24BE05728];
      v21 = strlen((const char *)*MEMORY[0x24BE05728]);
      if (v21 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v22 = (void *)v21;
      if (v21 >= 0x17)
      {
        v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17)
          v24 = v21 | 7;
        v25 = v24 + 1;
        v23 = (void **)operator new(v24 + 1);
        __dst[1] = v22;
        v40 = v25 | 0x8000000000000000;
        __dst[0] = v23;
      }
      else
      {
        HIBYTE(v40) = v21;
        v23 = __dst;
        if (!v21)
          goto LABEL_42;
      }
      memmove(v23, v20, (size_t)v22);
LABEL_42:
      *((_BYTE *)v22 + (_QWORD)v23) = 0;
      v26 = (_QWORD *)v2[1];
      v38 = v26;
      if (v26)
      {
        xpc_retain(v26);
      }
      else
      {
        v26 = xpc_null_create();
        v38 = v26;
      }
      *(_QWORD *)&buf = MEMORY[0x24BDAC760];
      *((_QWORD *)&buf + 1) = 3321888768;
      v48 = ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb5_ENKUlvE_clEv_block_invoke;
      v49 = &__block_descriptor_40_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e28_v20__0i8_dict__object__v__12l;
      v31 = (_QWORD *)v2[2];
      if (v31)
        v31 = _Block_copy(v31);
      v50 = v31;
      v32 = _Block_copy(&buf);
      v37 = v32;
      Service::runCommand((uint64_t)v3, (uint64_t)__dst, &v38, &v37);
      if (v32)
        _Block_release(v32);
      xpc_release(v26);
      v38 = 0;
      if (SHIBYTE(v40) < 0)
        operator delete(__dst[0]);
      if (v50)
        _Block_release(v50);
      goto LABEL_64;
    }
  }
  else if ((isSupported & 1) != 0)
  {
    goto LABEL_12;
  }
  v10 = v3[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = &v46;
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = (std::string *)v46.__r_.__value_.__r.__words[0];
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v11;
    _os_log_impl(&dword_24B855000, v10, OS_LOG_TYPE_DEFAULT, "#I The property (%s) not supported in getting", (uint8_t *)&buf, 0xCu);
  }
  v12 = xpc_null_create();
  v13 = (_QWORD *)v2[2];
  *(_QWORD *)&buf = v12;
  v14 = xpc_null_create();
  ((void (*)(_QWORD *, uint64_t, __int128 *))v13[2])(v13, 3760250884, &buf);
  xpc_release((xpc_object_t)buf);
  xpc_release(v14);
LABEL_65:
  if (SHIBYTE(object[2]) < 0)
  {
    operator delete(object[0]);
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_67:
      v33 = (_QWORD *)v2[2];
      if (!v33)
        goto LABEL_72;
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_67;
  }
  operator delete(v46.__r_.__value_.__l.__data_);
  v33 = (_QWORD *)v2[2];
  if (v33)
LABEL_71:
    _Block_release(v33);
LABEL_72:
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v34 = (std::__shared_weak_count *)a1[2];
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(a1);
}

void sub_24B910928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t a18, uint64_t a19, xpc_object_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb5_ENKUlvE_clEv_block_invoke(uint64_t a1, unsigned int a2, void **a3)
{
  unsigned int v3;

  v3 = a2;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 32), &v3, a3);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10LogTrackerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10LogTrackerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_1>(LogTracker::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke(void **__p)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *__p;
  if (v2)
    operator delete(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete(__p);
  }
  else
  {
LABEL_7:
    operator delete(__p);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::shutdown(dispatch::group_session)::$_0>(LogTracker::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *a1;
  v3 = **a1;
  if (*(_QWORD *)(v3 + 200))
  {
    os_state_remove_handler();
    *(_QWORD *)(v3 + 200) = 0;
  }
  v4 = v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = v2[1];
    if (v5)
      dispatch_release(v5);
  }
  operator delete(v2);
  v6 = (std::__shared_weak_count *)a1[2];
  if (!v6)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    operator delete(a1);
  }
  else
  {
LABEL_10:
    operator delete(a1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZNS3_20dumpLogInternal_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  const char *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  xpc_object_t v12;
  const object **v13;
  xpc_object_t v14;
  const char *v15;
  xpc_object_t v16;
  void **v17;
  xpc_object_t v18;
  xpc_object_t v19;
  int v20;
  xpc_object_t v21;
  int v22;
  xpc_object_t v23;
  const char *v24;
  xpc_object_t v25;
  const char *v26;
  int v27;
  NSObject *v28;
  const char *v29;
  std::string *v30;
  xpc_object_t v31;
  const void *v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  size_t v36;
  xpc_object_t v37;
  NSObject *v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  const void *v43;
  size_t v44;
  std::string::size_type v45;
  std::string *v46;
  uint64_t v47;
  uint64_t v48;
  const object *v49;
  char *v50;
  xpc_object_t v51;
  char IsCarrierBuild;
  char v53;
  NSObject *v54;
  uint64_t IsInternalBuild;
  uint64_t CompressionMode;
  const void *v57;
  size_t v58;
  std::string::size_type v59;
  std::string *v60;
  uint64_t v61;
  uint64_t v62;
  const char **v63;
  int v64;
  char v65;
  xpc_object_t v66;
  const void *v67;
  size_t v68;
  std::string::size_type v69;
  std::string *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  size_t v74;
  std::string::size_type v75;
  std::string *v76;
  uint64_t v77;
  uint64_t v78;
  xpc_object_t v79;
  void *v80;
  const void *v81;
  size_t v82;
  std::string::size_type v83;
  int v84;
  void *p_state;
  uint64_t v86;
  uint64_t v87;
  const void *v88;
  size_t v89;
  int v90;
  size_t v91;
  std::string::size_type v92;
  size_t v93;
  std::string *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  void **v98;
  std::string *v99;
  std::string::size_type v100;
  char v101;
  xpc_object_t v102;
  xpc_object_t v103;
  xpc_object_t v104;
  xpc_object_t v105;
  xpc_object_t v106;
  xpc_object_t v107;
  std::string *v108;
  xpc_object_t v109;
  xpc_object_t v110;
  void **v111;
  xpc_object_t v112;
  xpc_object_t v113;
  xpc_object_t v114;
  xpc_object_t v115;
  void *v116;
  std::__shared_weak_count *v117;
  unint64_t *p_shared_owners;
  unint64_t v119;
  xpc_object_t v120;
  xpc_object_t v121;
  _QWORD *v122;
  const char *v123;
  char *key;
  xpc_object_t v125;
  _QWORD *v126;
  NSObject *v127;
  _DWORD value[4];
  char v129;
  BOOL v130;
  std::string v131;
  xpc_object_t xdict;
  void *__p[3];
  unsigned int v134[4];
  xpc_object_t __s1[4];
  std::string state;
  uint64_t v137;

  v1 = a1;
  v137 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)&value[1] = v2;
  v3 = *(_QWORD **)v2;
  v4 = _os_activity_create(&dword_24B855000, "Dump finished", MEMORY[0x24BDACB08], OS_ACTIVITY_FLAG_DEFAULT);
  state.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  state.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v4, (os_activity_scope_state_t)&state);
  os_activity_scope_leave((os_activity_scope_state_t)&state);
  v5 = v3[11];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_DWORD *)(v2 + 8);
    LODWORD(state.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(state.__r_.__value_.__r.__words[0]) = v6;
    _os_log_impl(&dword_24B855000, v5, OS_LOG_TYPE_DEFAULT, "#I Log dump has finished. The result: 0x%x", (uint8_t *)&state, 8u);
  }
  memset(__p, 170, sizeof(__p));
  v7 = (const char *)*MEMORY[0x24BE05090];
  v8 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 16), (const char *)*MEMORY[0x24BE05090]);
  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  if (v8)
    xpc_retain(v8);
  else
    v131.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  Timestamp::Timestamp((Timestamp *)__s1);
  Timestamp::asString((uint64_t)__s1, 0, 9, &state);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
    operator delete(state.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)__s1, (_QWORD *)__s1[1]);
  xpc_release(v131.__r_.__value_.__l.__data_);
  xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v9 = xpc_dictionary_create(0, 0, 0);
  v10 = v9;
  v11 = MEMORY[0x24BDACFA0];
  if (v9)
  {
    xdict = v9;
  }
  else
  {
    v10 = xpc_null_create();
    xdict = v10;
    if (!v10)
    {
      v12 = xpc_null_create();
      v10 = 0;
      goto LABEL_15;
    }
  }
  if (MEMORY[0x24BD2A468](v10) == v11)
  {
    xpc_retain(v10);
    goto LABEL_16;
  }
  v12 = xpc_null_create();
LABEL_15:
  xdict = v12;
LABEL_16:
  xpc_release(v10);
  v13 = (const object **)MEMORY[0x24BDFC720];
  v14 = xpc_string_create((const char *)*MEMORY[0x24BDFC720]);
  if (!v14)
    v14 = xpc_null_create();
  v15 = (const char *)*MEMORY[0x24BE05268];
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x24BE05268], v14);
  v16 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v16);
  if (SHIBYTE(__p[2]) >= 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  v18 = xpc_string_create((const char *)v17);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(xdict, v7, v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = *(_DWORD *)(v2 + 8);
  if (v20 == -534716414)
    v20 = -534716415;
  LODWORD(state.__r_.__value_.__l.__data_) = v20;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(v2 + 24), (unsigned int *)&state, &xdict);
  v21 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), (const char *)*MEMORY[0x24BE04ED8]);
  state.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  if (v21)
    xpc_retain(v21);
  else
    state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  v22 = xpc::dyn_cast_or_default((xpc *)&state, 0);
  xpc_release(state.__r_.__value_.__l.__data_);
  if (!v22)
  {
    memset(__s1, 170, 24);
    v25 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), (const char *)*MEMORY[0x24BE04F40]);
    state.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    if (v25)
      xpc_retain(v25);
    else
      state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&state, (const object *)*MEMORY[0x24BE05168], v26);
    xpc_release(state.__r_.__value_.__l.__data_);
    v32 = (const void *)*MEMORY[0x24BE050B0];
    v33 = (xpc_object_t)strlen((const char *)*MEMORY[0x24BE050B0]);
    v34 = v33;
    if (SHIBYTE(__s1[2]) < 0)
    {
      if (v33 != (xpc_object_t)-1)
      {
        v35 = __s1[1];
        if (__s1[1] >= v33)
          v37 = v33;
        else
          v37 = __s1[1];
        if (memcmp(__s1[0], v32, (size_t)v37))
          goto LABEL_58;
        goto LABEL_55;
      }
    }
    else if (v33 != (xpc_object_t)-1)
    {
      v35 = (xpc_object_t)HIBYTE(__s1[2]);
      if (HIBYTE(__s1[2]) >= (unint64_t)v33)
        v36 = (size_t)v33;
      else
        v36 = HIBYTE(__s1[2]);
      if (memcmp(__s1, v32, v36))
        goto LABEL_58;
LABEL_55:
      if (v35 == v34)
      {
        v38 = v3[11];
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(state.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_24B855000, v38, OS_LOG_TYPE_DEFAULT, "#I Baseband Log collection will not trigger the post log collection", (uint8_t *)&state, 2u);
        }
        goto LABEL_221;
      }
LABEL_58:
      v39 = xpc_null_create();
      if (MEMORY[0x24BD2A468](*(_QWORD *)(v2 + 16)) != v11 || *(_DWORD *)(v2 + 8))
      {
        v127 = v4;
        v40 = *(xpc_object_t *)(v2 + 32);
        if (v40)
        {
          xpc_retain(*(xpc_object_t *)(v2 + 32));
        }
        else
        {
          v40 = xpc_null_create();
          if (!v40)
          {
            v125 = xpc_null_create();
            v40 = 0;
            goto LABEL_69;
          }
        }
        if (MEMORY[0x24BD2A468](v40) == v11)
        {
          xpc_retain(v40);
          v125 = v40;
        }
        else
        {
          v125 = xpc_null_create();
        }
LABEL_69:
        v42 = xpc_null_create();
        xpc_release(v39);
        xpc_release(v42);
        xpc_release(v40);
        v43 = (const void *)*MEMORY[0x24BE04E90];
        v44 = strlen((const char *)*MEMORY[0x24BE04E90]);
        v126 = v1;
        if (v44 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v45 = v44;
        if (v44 >= 0x17)
        {
          v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v44 | 7) != 0x17)
            v47 = v44 | 7;
          v48 = v47 + 1;
          v46 = (std::string *)operator new(v47 + 1);
          v131.__r_.__value_.__l.__size_ = v45;
          v131.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
          v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
        }
        else
        {
          *((_BYTE *)&v131.__r_.__value_.__s + 23) = v44;
          v46 = &v131;
          if (!v44)
          {
LABEL_77:
            v46->__r_.__value_.__s.__data_[v45] = 0;
            memset(&state, 0, sizeof(state));
            if (prop::systemlogs::get((char *)&v131, (uint64_t)&state))
            {
              v134[0] = -1431655766;
              if (util::convert<int>(&state, v134, 0))
                v49 = (const object *)v134[0];
              else
                v49 = 0;
              if ((SHIBYTE(state.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_85:
                if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v131.__r_.__value_.__l.__data_);
                v50 = (char *)*MEMORY[0x24BE04F98];
                v51 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), (const char *)*MEMORY[0x24BE04F98]);
                state.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
                if (v51)
                  xpc_retain(v51);
                else
                  state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
                value[0] = xpc::dyn_cast_or_default((xpc *)&state, v49);
                xpc_release(state.__r_.__value_.__l.__data_);
                if ((TelephonyUtilIsInternalBuild() & 1) == 0)
                {
                  IsCarrierBuild = TelephonyUtilIsCarrierBuild();
                  v53 = value[0] == 2 ? IsCarrierBuild : 1;
                  if ((v53 & 1) == 0)
                  {
                    v54 = v3[11];
                    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(state.__r_.__value_.__l.__data_) = 0;
                      _os_log_error_impl(&dword_24B855000, v54, OS_LOG_TYPE_ERROR, "Detected an internal log dump with SYSDIAGNOSE mode in customer build, overriding to OFF", (uint8_t *)&state, 2u);
                    }
                    value[0] = 0;
                  }
                }
                IsInternalBuild = TelephonyUtilIsInternalBuild();
                if ((IsInternalBuild & 1) != 0
                  || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
                {
                  CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
                }
                else
                {
                  CompressionMode = 2;
                }
                v57 = (const void *)*MEMORY[0x24BDFC970];
                v58 = strlen((const char *)*MEMORY[0x24BDFC970]);
                if (v58 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v59 = v58;
                if (v58 >= 0x17)
                {
                  v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v58 | 7) != 0x17)
                    v61 = v58 | 7;
                  v62 = v61 + 1;
                  v60 = (std::string *)operator new(v61 + 1);
                  v131.__r_.__value_.__l.__size_ = v59;
                  v131.__r_.__value_.__r.__words[2] = v62 | 0x8000000000000000;
                  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
                }
                else
                {
                  *((_BYTE *)&v131.__r_.__value_.__s + 23) = v58;
                  v60 = &v131;
                  if (!v58)
                  {
LABEL_110:
                    v60->__r_.__value_.__s.__data_[v59] = 0;
                    memset(&state, 0, sizeof(state));
                    if (prop::compression::get((char *)&v131, (uint64_t)&state))
                    {
                      v134[0] = -1431655766;
                      if (util::convert<int>(&state, v134, 0))
                        CompressionMode = v134[0];
                      else
                        CompressionMode = CompressionMode;
                    }
                    if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(state.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_116:
                        v63 = (const char **)MEMORY[0x24BE05800];
                        key = v50;
                        if (value[0] == 2)
                        {
LABEL_117:
                          v64 = 0;
                          v130 = 0;
                          v65 = 1;
                          goto LABEL_140;
                        }
LABEL_120:
                        v66 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), *v63);
                        state.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
                        if (v66)
                          xpc_retain(v66);
                        else
                          state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
                        v64 = xpc::dyn_cast_or_default((xpc *)&state, (const object *)CompressionMode);
                        xpc_release(state.__r_.__value_.__l.__data_);
                        v130 = 0;
                        if (!v64)
                        {
                          v65 = 1;
                          goto LABEL_140;
                        }
                        v67 = (const void *)*MEMORY[0x24BDFC7F8];
                        v68 = strlen((const char *)*MEMORY[0x24BDFC7F8]);
                        if (v68 > 0x7FFFFFFFFFFFFFF7)
                          std::string::__throw_length_error[abi:ne180100]();
                        v69 = v68;
                        if (v68 >= 0x17)
                        {
                          v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v68 | 7) != 0x17)
                            v71 = v68 | 7;
                          v72 = v71 + 1;
                          v70 = (std::string *)operator new(v71 + 1);
                          v131.__r_.__value_.__l.__size_ = v69;
                          v131.__r_.__value_.__r.__words[2] = v72 | 0x8000000000000000;
                          v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
                        }
                        else
                        {
                          *((_BYTE *)&v131.__r_.__value_.__s + 23) = v68;
                          v70 = &v131;
                          if (!v68)
                            goto LABEL_133;
                        }
                        memmove(v70, v67, v69);
LABEL_133:
                        v70->__r_.__value_.__s.__data_[v69] = 0;
                        memset(&state, 0, sizeof(state));
                        if (prop::compression::get((char *)&v131, (uint64_t)&state))
                          util::convert<BOOL>(&state, &v130, 0);
                        if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(state.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v131.__r_.__value_.__l.__data_);
                        v65 = 0;
LABEL_140:
                        v129 = 1;
                        v73 = (const char *)*MEMORY[0x24BE05498];
                        v74 = strlen((const char *)*MEMORY[0x24BE05498]);
                        if (v74 > 0x7FFFFFFFFFFFFFF7)
                          std::string::__throw_length_error[abi:ne180100]();
                        v75 = v74;
                        if (v74 >= 0x17)
                        {
                          v77 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v74 | 7) != 0x17)
                            v77 = v74 | 7;
                          v78 = v77 + 1;
                          v76 = (std::string *)operator new(v77 + 1);
                          v131.__r_.__value_.__l.__size_ = v75;
                          v131.__r_.__value_.__r.__words[2] = v78 | 0x8000000000000000;
                          v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
                        }
                        else
                        {
                          *((_BYTE *)&v131.__r_.__value_.__s + 23) = v74;
                          v76 = &v131;
                          if (!v74)
                          {
LABEL_148:
                            v76->__r_.__value_.__s.__data_[v75] = 0;
                            memset(&state, 0, sizeof(state));
                            if (prop::systemlogs::get((char *)&v131, (uint64_t)&state))
                              util::convert<BOOL>(&state, (BOOL *)&v129, 0);
                            if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(state.__r_.__value_.__l.__data_);
                              if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                goto LABEL_152;
                            }
                            else if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            {
                              goto LABEL_152;
                            }
                            operator delete(v131.__r_.__value_.__l.__data_);
LABEL_152:
                            v79 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), v73);
                            state.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
                            v80 = v125;
                            if (v79)
                              xpc_retain(v79);
                            else
                              state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
                            v129 = xpc::dyn_cast_or_default((xpc *)&state, (const object *)v129);
                            xpc_release(state.__r_.__value_.__l.__data_);
                            v123 = v73;
                            memset(&state, 170, sizeof(state));
                            v81 = (const void *)*MEMORY[0x24BDFC720];
                            v82 = strlen((const char *)*MEMORY[0x24BDFC720]);
                            if (v82 > 0x7FFFFFFFFFFFFFF7)
                              std::string::__throw_length_error[abi:ne180100]();
                            v83 = v82;
                            v84 = v64;
                            if (v82 >= 0x17)
                            {
                              v86 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v82 | 7) != 0x17)
                                v86 = v82 | 7;
                              v87 = v86 + 1;
                              p_state = operator new(v86 + 1);
                              state.__r_.__value_.__l.__size_ = v83;
                              state.__r_.__value_.__r.__words[2] = v87 | 0x8000000000000000;
                              state.__r_.__value_.__r.__words[0] = (std::string::size_type)p_state;
                              v4 = v127;
                            }
                            else
                            {
                              *((_BYTE *)&state.__r_.__value_.__s + 23) = v82;
                              p_state = &state;
                              v4 = v127;
                              if (!v82)
                              {
                                state.__r_.__value_.__s.__data_[0] = 0;
                                v1 = v126;
                                if ((v65 & 1) != 0)
                                  goto LABEL_189;
                                goto LABEL_166;
                              }
                            }
                            memmove(p_state, v81, v83);
                            *((_BYTE *)p_state + v83) = 0;
                            v1 = v126;
                            if ((v65 & 1) != 0)
                            {
LABEL_189:
                              v102 = xpc_int64_create(value[0]);
                              if (!v102)
                                v102 = xpc_null_create();
                              xpc_dictionary_set_value(v80, key, v102);
                              v103 = xpc_null_create();
                              xpc_release(v102);
                              xpc_release(v103);
                              v104 = xpc_int64_create(v84);
                              if (!v104)
                                v104 = xpc_null_create();
                              xpc_dictionary_set_value(v80, (const char *)*MEMORY[0x24BE05800], v104);
                              v105 = xpc_null_create();
                              xpc_release(v104);
                              xpc_release(v105);
                              v106 = xpc_BOOL_create(v130);
                              if (!v106)
                                v106 = xpc_null_create();
                              xpc_dictionary_set_value(v80, (const char *)*MEMORY[0x24BE056C8], v106);
                              v107 = xpc_null_create();
                              xpc_release(v106);
                              xpc_release(v107);
                              if ((state.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v108 = &state;
                              else
                                v108 = (std::string *)state.__r_.__value_.__r.__words[0];
                              v109 = xpc_string_create((const char *)v108);
                              if (!v109)
                                v109 = xpc_null_create();
                              xpc_dictionary_set_value(v80, v15, v109);
                              v110 = xpc_null_create();
                              xpc_release(v109);
                              xpc_release(v110);
                              if (SHIBYTE(__p[2]) >= 0)
                                v111 = __p;
                              else
                                v111 = (void **)__p[0];
                              v112 = xpc_string_create((const char *)v111);
                              if (!v112)
                                v112 = xpc_null_create();
                              xpc_dictionary_set_value(v80, v7, v112);
                              v113 = xpc_null_create();
                              xpc_release(v112);
                              xpc_release(v113);
                              v114 = xpc_BOOL_create(v129);
                              if (!v114)
                                v114 = xpc_null_create();
                              xpc_dictionary_set_value(v80, v123, v114);
                              v115 = xpc_null_create();
                              xpc_release(v114);
                              xpc_release(v115);
                              ctu::fs::create_directory();
                              if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(state.__r_.__value_.__l.__data_);
                              v116 = v80;
                              goto LABEL_210;
                            }
LABEL_166:
                            if ((TelephonyUtilIsInternalBuild() & 1) != 0
                              || TelephonyUtilIsCarrierBuild())
                            {
                              v122 = v3;
                              v88 = (const void *)*MEMORY[0x24BDFC738];
                              v89 = strlen((const char *)*MEMORY[0x24BDFC738]);
                              v90 = SHIBYTE(__p[2]);
                              if (SHIBYTE(__p[2]) >= 0)
                                v91 = HIBYTE(__p[2]);
                              else
                                v91 = (size_t)__p[1];
                              v92 = v91 + v89;
                              memset(&v131, 170, sizeof(v131));
                              if (v91 + v89 > 0x7FFFFFFFFFFFFFF7)
                                std::string::__throw_length_error[abi:ne180100]();
                              v93 = v89;
                              if (v92 > 0x16)
                              {
                                v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v92 | 7) != 0x17)
                                  v95 = v92 | 7;
                                v96 = v95 + 1;
                                v94 = (std::string *)operator new(v95 + 1);
                                v131.__r_.__value_.__l.__size_ = v92;
                                v131.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
                                v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
                              }
                              else
                              {
                                memset(&v131, 0, sizeof(v131));
                                v94 = &v131;
                                *((_BYTE *)&v131.__r_.__value_.__s + 23) = v91 + v89;
                              }
                              if (v93)
                                memcpy(v94, v88, v93);
                              v97 = (char *)v94 + v93;
                              if (v91)
                              {
                                if (v90 >= 0)
                                  v98 = __p;
                                else
                                  v98 = (void **)__p[0];
                                memmove(v97, v98, v91);
                              }
                              v97[v91] = 0;
                              v1 = v126;
                              v4 = v127;
                              v99 = std::string::append(&v131, "/", 1uLL);
                              v100 = v99->__r_.__value_.__r.__words[0];
                              *(_QWORD *)v134 = v99->__r_.__value_.__l.__size_;
                              *(_QWORD *)((char *)&v134[1] + 3) = *(std::string::size_type *)((char *)&v99->__r_.__value_.__r.__words[1]
                                                                                            + 7);
                              v101 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
                              v99->__r_.__value_.__l.__size_ = 0;
                              v99->__r_.__value_.__r.__words[2] = 0;
                              v99->__r_.__value_.__r.__words[0] = 0;
                              if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(state.__r_.__value_.__l.__data_);
                              state.__r_.__value_.__r.__words[0] = v100;
                              state.__r_.__value_.__l.__size_ = *(_QWORD *)v134;
                              *(std::string::size_type *)((char *)&state.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v134[1] + 3);
                              *((_BYTE *)&state.__r_.__value_.__s + 23) = v101;
                              if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v131.__r_.__value_.__l.__data_);
                              v3 = v122;
                              v80 = v125;
                            }
                            goto LABEL_189;
                          }
                        }
                        memmove(v76, v73, v75);
                        goto LABEL_148;
                      }
                    }
                    else if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_116;
                    }
                    operator delete(v131.__r_.__value_.__l.__data_);
                    v63 = (const char **)MEMORY[0x24BE05800];
                    key = v50;
                    if (value[0] == 2)
                      goto LABEL_117;
                    goto LABEL_120;
                  }
                }
                memmove(v60, v57, v59);
                goto LABEL_110;
              }
            }
            else
            {
              v49 = 0;
              if ((SHIBYTE(state.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_85;
            }
            operator delete(state.__r_.__value_.__l.__data_);
            goto LABEL_85;
          }
        }
        memmove(v46, v43, v45);
        goto LABEL_77;
      }
      v41 = *(xpc_object_t *)(v2 + 16);
      if (v41)
      {
        xpc_retain(*(xpc_object_t *)(v2 + 16));
      }
      else
      {
        v41 = xpc_null_create();
        if (!v41)
        {
          v120 = xpc_null_create();
          v41 = 0;
LABEL_240:
          v121 = xpc_null_create();
          xpc_release(v39);
          xpc_release(v121);
          xpc_release(v41);
          v116 = v120;
LABEL_210:
          if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
          {
            state.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
            if (v116)
              xpc_retain(v116);
            else
              state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            LogTracker::postLogCollectionInternal_sync(v3, (xpc_object_t *)&state.__r_.__value_.__l.__data_);
            xpc_release(state.__r_.__value_.__l.__data_);
          }
          else
          {
            state.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
            if (v116)
              xpc_retain(v116);
            else
              state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            LogTracker::postLogCollectionExternal_sync(v3, (xpc_object_t *)&state.__r_.__value_.__l.__data_);
            xpc_release(state.__r_.__value_.__l.__data_);
          }
          state.__r_.__value_.__r.__words[0] = 0;
          xpc_release(v116);
LABEL_221:
          if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
            goto LABEL_224;
          v31 = __s1[0];
          goto LABEL_223;
        }
      }
      if (MEMORY[0x24BD2A468](v41) == v11)
      {
        xpc_retain(v41);
        v120 = v41;
      }
      else
      {
        v120 = xpc_null_create();
      }
      goto LABEL_240;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  memset(&state, 170, sizeof(state));
  v23 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 16), v15);
  __s1[0] = v23;
  if (v23)
    xpc_retain(v23);
  else
    __s1[0] = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)__s1, *v13, v24);
  xpc_release(__s1[0]);
  v27 = ctu::fs::remove_dir();
  v28 = v3[11];
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    v29 = "Failed";
    if (v27)
      v29 = "Succeeded";
    v30 = &state;
    if ((state.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v30 = (std::string *)state.__r_.__value_.__r.__words[0];
    LODWORD(__s1[0]) = 136315394;
    *(xpc_object_t *)((char *)__s1 + 4) = (xpc_object_t)v29;
    WORD2(__s1[1]) = 2080;
    *(xpc_object_t *)((char *)&__s1[1] + 6) = v30;
    _os_log_impl(&dword_24B855000, v28, OS_LOG_TYPE_DEFAULT, "#I User requested to clear logs, %s to remove dump path: %s", (uint8_t *)__s1, 0x16u);
  }
  if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
  {
    v31 = (xpc_object_t)state.__r_.__value_.__r.__words[0];
LABEL_223:
    operator delete(v31);
  }
LABEL_224:
  xpc_release(xdict);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (!v4)
      goto LABEL_229;
    goto LABEL_228;
  }
  operator delete(__p[0]);
  if (v4)
LABEL_228:
    os_release(v4);
LABEL_229:
  _ZNSt3__110unique_ptrIZZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb_E3__3NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&value[1]);
  v117 = (std::__shared_weak_count *)v1[2];
  if (v117)
  {
    p_shared_owners = (unint64_t *)&v117->__shared_owners_;
    do
      v119 = __ldaxr(p_shared_owners);
    while (__stlxr(v119 - 1, p_shared_owners));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  operator delete(v1);
}

void sub_24B911E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, void *a13, void *a14, uint64_t a15, char a16, uint64_t a17, xpc_object_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,xpc_object_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t *_ZNSt3__110unique_ptrIZZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb_E3__3NS_14default_deleteIS9_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 32));
    *(_QWORD *)(v2 + 32) = 0;
    v3 = *(const void **)(v2 + 24);
    if (v3)
      _Block_release(v3);
    xpc_release(*(xpc_object_t *)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  void *v1;

  std::exception::~exception(this);
  operator delete(v1);
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void dispatch::detail::group_notify<LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0>(dispatch_group_s *,dispatch_queue_s *,LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::operator()((uint64_t *)a1);
  if (a1)
  {
    xpc_release(*(xpc_object_t *)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
    v2 = *(NSObject **)(a1 + 16);
    if (v2)
    {
      dispatch_group_leave(v2);
      v3 = *(NSObject **)(a1 + 16);
      if (v3)
        dispatch_release(v3);
    }
    v4 = *(std::__shared_weak_count **)(a1 + 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    operator delete((void *)a1);
  }
}

void sub_24B9123EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  if (v1)
  {
    xpc_release(*(xpc_object_t *)(v1 + 24));
    *(_QWORD *)(v1 + 24) = 0;
    v3 = *(NSObject **)(v1 + 16);
    if (v3)
    {
      dispatch_group_leave(v3);
      v4 = *(NSObject **)(v1 + 16);
      if (v4)
        dispatch_release(v4);
    }
    v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
    operator delete((void *)v1);
  }
  _Unwind_Resume(exception_object);
}

void LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::operator()(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  const char *v12;
  const void *v13;
  size_t v14;
  std::string::size_type v15;
  std::string *p_dst;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  size_t v20;
  const char **v21;
  const void *v22;
  size_t v23;
  std::string::size_type v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  std::string::size_type size;
  std::string *v30;
  __int128 v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  const void *v36;
  size_t v37;
  size_t v38;
  void *p_p;
  uint64_t v40;
  uint64_t v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  xpc_object_t v46;
  uint64_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  const char *v50;
  std::string *v51;
  xpc_object_t v52;
  xpc_object_t v53;
  const char *v54;
  xpc_object_t v55;
  xpc_object_t v56;
  xpc_object_t v57;
  xpc_object_t v58;
  const char *v59;
  xpc_object_t v60;
  xpc_object_t v61;
  xpc_object_t v62;
  const char *v63;
  std::string *v64;
  xpc_object_t v65;
  xpc_object_t v66;
  const char *v67;
  xpc_object_t v68;
  const char *v69;
  std::string *v70;
  size_t v71;
  xpc_object_t v72;
  const char *v73;
  std::string *v74;
  xpc_object_t v75;
  xpc_object_t v76;
  xpc_object_t v77;
  const char *v78;
  std::string *v79;
  xpc_object_t v80;
  xpc_object_t v81;
  xpc_object_t v82;
  const char *v83;
  std::string *v84;
  xpc_object_t v85;
  xpc_object_t v86;
  xpc_object_t v87;
  char v88;
  xpc_object_t v89;
  xpc_object_t v90;
  xpc_object_t v91;
  char v92;
  xpc_object_t v93;
  const char *v94;
  xpc_object_t v95;
  xpc_object_t v96;
  char v97;
  xpc_object_t v98;
  const char *v99;
  xpc_object_t v100;
  NSObject *v101;
  xpc_object_t v102;
  xpc_object_t v103;
  xpc_object_t v104;
  xpc_object_t v105;
  void *v106;
  _QWORD *v107;
  xpc_object_t v108;
  xpc_object_t *v109;
  xpc_object_t v110;
  const char *v111;
  xpc_object_t v112;
  xpc_object_t v113;
  void **v114;
  xpc_object_t v115;
  void *v116;
  NSObject *v117;
  uint64_t v118;
  NSObject *v119;
  _QWORD *v120;
  _QWORD *v121;
  BOOL v122;
  xpc_object_t v123;
  void *v124;
  xpc_object_t v125;
  xpc_object_t v126;
  void *v127;
  xpc_object_t v128;
  xpc_object_t v129;
  ctu::Gestalt *v130;
  std::string::size_type v131;
  __int128 v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::string *v142;
  xpc_object_t v143;
  xpc_object_t v144;
  unint64_t *v145;
  unint64_t v146;
  void *v147;
  int v148;
  unsigned __int8 v149;
  NSObject *v150;
  const char *v151;
  std::string *p_object;
  std::string v153;
  xpc_object_t v154;
  const void *v155;
  __int128 v156;
  xpc_object_t v157;
  xpc_object_t value;
  const void *v159;
  __int128 v160;
  void *__p;
  size_t v162;
  int64_t v163;
  std::string v164;
  std::string v165;
  std::string object;
  std::string __dst;
  void *v168[3];
  void *v169[3];
  std::string v170;
  uint64_t v171;

  v171 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)a1[1];
  if (!v2)
    return;
  v3 = a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    return;
  v5 = v4;
  v6 = *a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    if (!v6)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6)
      return;
  }
  memset(v169, 170, sizeof(v169));
  v9 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x24BE05090]);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  if (v9)
    xpc_retain(v9);
  else
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  Timestamp::Timestamp((Timestamp *)&__dst);
  Timestamp::asString(v10, 0, 9, v168);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v168[2]) < 0)
    operator delete(v168[0]);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&__dst, (_QWORD *)__dst.__r_.__value_.__l.__size_);
  xpc_release(object.__r_.__value_.__l.__data_);
  memset(v168, 170, sizeof(v168));
  v11 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x24BE04F40]);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  if (v11)
    xpc_retain(v11);
  else
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&__dst, (const object *)"", v12);
  xpc_release(__dst.__r_.__value_.__l.__data_);
  memset(&__dst, 170, sizeof(__dst));
  v13 = (const void *)*MEMORY[0x24BDFC718];
  v14 = strlen((const char *)*MEMORY[0x24BDFC718]);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    p_dst = (std::string *)operator new(v17 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_24;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
  p_dst = &__dst;
  if (v14)
LABEL_24:
    memmove(p_dst, v13, v15);
  p_dst->__r_.__value_.__s.__data_[v15] = 0;
  if (SHIBYTE(v168[2]) >= 0)
    v19 = (const char *)v168;
  else
    v19 = (const char *)v168[0];
  v20 = strlen((const char *)*MEMORY[0x24BE05538]);
  if (!strncasecmp((const char *)*MEMORY[0x24BE05538], v19, v20))
    std::string::__assign_external(&__dst, (const std::string::value_type *)*MEMORY[0x24BDFC730]);
  v21 = (const char **)MEMORY[0x24BDFC720];
  v22 = (const void *)*MEMORY[0x24BDFC720];
  v23 = strlen((const char *)*MEMORY[0x24BDFC720]);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v24 = v23;
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    v25 = operator new(v26 + 1);
    v164.__r_.__value_.__l.__size_ = v24;
    v164.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    v164.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    goto LABEL_37;
  }
  *((_BYTE *)&v164.__r_.__value_.__s + 23) = v23;
  v25 = &v164;
  if (v23)
LABEL_37:
    memmove(v25, v22, v24);
  *((_BYTE *)v25 + v24) = 0;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &__dst;
  else
    v28 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  v30 = std::string::append(&v164, (const std::string::value_type *)v28, size);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v165.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v169[2]) >= 0)
    v32 = (const std::string::value_type *)v169;
  else
    v32 = (const std::string::value_type *)v169[0];
  if (SHIBYTE(v169[2]) >= 0)
    v33 = HIBYTE(v169[2]);
  else
    v33 = (std::string::size_type)v169[1];
  v34 = std::string::append(&v165, v32, v33);
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v170.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = (const void *)*MEMORY[0x24BDFC750];
  v37 = strlen((const char *)*MEMORY[0x24BDFC750]);
  if (v37 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v38 = v37;
  if (v37 >= 0x17)
  {
    v40 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v40 = v37 | 7;
    v41 = v40 + 1;
    p_p = operator new(v40 + 1);
    v162 = v38;
    v163 = v41 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_57;
  }
  HIBYTE(v163) = v37;
  p_p = &__p;
  if (v37)
LABEL_57:
    memmove(p_p, v36, v38);
  *((_BYTE *)p_p + v38) = 0;
  if (v163 >= 0)
    v42 = (const std::string::value_type *)&__p;
  else
    v42 = (const std::string::value_type *)__p;
  if (v163 >= 0)
    v43 = HIBYTE(v163);
  else
    v43 = v162;
  v44 = std::string::append(&v170, v42, v43);
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  object.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&object.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v163) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_67;
LABEL_74:
      operator delete(v165.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v164.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_68;
LABEL_75:
      operator delete(v164.__r_.__value_.__l.__data_);
      goto LABEL_68;
    }
  }
  else if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(v170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_74;
LABEL_67:
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_75;
LABEL_68:
  v46 = xpc_dictionary_create(0, 0, 0);
  v47 = MEMORY[0x24BDACFA0];
  if (v46 || (v46 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v46) == v47)
    {
      xpc_retain(v46);
      v48 = v46;
    }
    else
    {
      v48 = xpc_null_create();
    }
  }
  else
  {
    v48 = xpc_null_create();
    v46 = 0;
  }
  xpc_release(v46);
  if (MEMORY[0x24BD2A468](v48) == v47)
  {
    v49 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x24BE053F0]);
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    if (v49)
      xpc_retain(v49);
    else
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&v165, (const object *)"", v50);
    if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = &v170;
    else
      v51 = (std::string *)v170.__r_.__value_.__r.__words[0];
    v52 = xpc_string_create((const char *)v51);
    if (!v52)
      v52 = xpc_null_create();
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x24BE053E8], v52);
    v53 = xpc_null_create();
    xpc_release(v52);
    xpc_release(v53);
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v170.__r_.__value_.__l.__data_);
    xpc_release(v165.__r_.__value_.__l.__data_);
    if (SHIBYTE(v169[2]) >= 0)
      v54 = (const char *)v169;
    else
      v54 = (const char *)v169[0];
    v55 = xpc_string_create(v54);
    if (!v55)
      v55 = xpc_null_create();
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x24BE05260], v55);
    v56 = xpc_null_create();
    xpc_release(v55);
    xpc_release(v56);
    v57 = xpc_string_create(*v21);
    if (!v57)
      v57 = xpc_null_create();
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x24BE05258], v57);
    v58 = xpc_null_create();
    xpc_release(v57);
    xpc_release(v58);
    if (SHIBYTE(v168[2]) >= 0)
      v59 = (const char *)v168;
    else
      v59 = (const char *)v168[0];
    v60 = xpc_string_create(v59);
    if (!v60)
      v60 = xpc_null_create();
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x24BE05480], v60);
    v61 = xpc_null_create();
    xpc_release(v60);
    xpc_release(v61);
    v62 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x24BE051A8]);
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
    if (v62)
      xpc_retain(v62);
    else
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&v165, (const object *)"", v63);
    if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = &v170;
    else
      v64 = (std::string *)v170.__r_.__value_.__r.__words[0];
    v65 = xpc_string_create((const char *)v64);
    if (!v65)
      v65 = xpc_null_create();
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x24BE05520], v65);
    v66 = xpc_null_create();
    xpc_release(v65);
    xpc_release(v66);
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v170.__r_.__value_.__l.__data_);
    xpc_release(v165.__r_.__value_.__l.__data_);
    memset(&v170, 170, sizeof(v170));
    v67 = (const char *)*MEMORY[0x24BE051A0];
    v68 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x24BE051A0]);
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
    if (v68)
      xpc_retain(v68);
    else
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&v165, (const object *)"", v69);
    xpc_release(v165.__r_.__value_.__l.__data_);
    if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v170;
    else
      v70 = (std::string *)v170.__r_.__value_.__r.__words[0];
    v71 = strlen((const char *)*MEMORY[0x24BE051D0]);
    if (!strncasecmp((const char *)v70, (const char *)*MEMORY[0x24BE051D0], v71))
    {
      v72 = xpc_dictionary_get_value((xpc_object_t)a1[3], v67);
      v164.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
      if (v72)
        xpc_retain(v72);
      else
        v164.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      xpc::dyn_cast_or_default((xpc *)&v164, (const object *)"", v73);
      if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = &v165;
      else
        v74 = (std::string *)v165.__r_.__value_.__r.__words[0];
      v75 = xpc_string_create((const char *)v74);
      if (!v75)
        v75 = xpc_null_create();
      xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x24BE05478], v75);
      v76 = xpc_null_create();
      xpc_release(v75);
      xpc_release(v76);
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      xpc_release(v164.__r_.__value_.__l.__data_);
      v77 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x24BE05398]);
      v164.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
      if (v77)
        xpc_retain(v77);
      else
        v164.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      xpc::dyn_cast_or_default((xpc *)&v164, (const object *)"", v78);
      if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v79 = &v165;
      else
        v79 = (std::string *)v165.__r_.__value_.__r.__words[0];
      v80 = xpc_string_create((const char *)v79);
      if (!v80)
        v80 = xpc_null_create();
      xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x24BE05618], v80);
      v81 = xpc_null_create();
      xpc_release(v80);
      xpc_release(v81);
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      xpc_release(v164.__r_.__value_.__l.__data_);
      v82 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x24BE052D8]);
      v164.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
      if (v82)
        xpc_retain(v82);
      else
        v164.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      xpc::dyn_cast_or_default((xpc *)&v164, (const object *)"", v83);
      if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v84 = &v165;
      else
        v84 = (std::string *)v165.__r_.__value_.__r.__words[0];
      v85 = xpc_string_create((const char *)v84);
      if (!v85)
        v85 = xpc_null_create();
      xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x24BE05560], v85);
      v86 = xpc_null_create();
      xpc_release(v85);
      xpc_release(v86);
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      xpc_release(v164.__r_.__value_.__l.__data_);
    }
    v87 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x24BE052E0]);
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
    if (v87)
      xpc_retain(v87);
    else
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v88 = xpc::dyn_cast_or_default((xpc *)&v165, 0);
    v89 = xpc_BOOL_create(v88);
    if (!v89)
      v89 = xpc_null_create();
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x24BE05470], v89);
    v90 = xpc_null_create();
    xpc_release(v89);
    xpc_release(v90);
    xpc_release(v165.__r_.__value_.__l.__data_);
    v91 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x24BE052F8]);
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v91;
    if (v91)
      xpc_retain(v91);
    else
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v92 = xpc::dyn_cast_or_default((xpc *)&v165, 0);
    v93 = xpc_BOOL_create(v92);
    if (!v93)
      v93 = xpc_null_create();
    v94 = (const char *)*MEMORY[0x24BE053E0];
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x24BE053E0], v93);
    v95 = xpc_null_create();
    xpc_release(v93);
    xpc_release(v95);
    xpc_release(v165.__r_.__value_.__l.__data_);
    v96 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x24BE052F0]);
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
    if (v96)
      xpc_retain(v96);
    else
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v97 = xpc::dyn_cast_or_default((xpc *)&v165, 0);
    v98 = xpc_BOOL_create(v97);
    if (!v98)
      v98 = xpc_null_create();
    v99 = (const char *)*MEMORY[0x24BE053D8];
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x24BE053D8], v98);
    v100 = xpc_null_create();
    xpc_release(v98);
    xpc_release(v100);
    xpc_release(v165.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(v3 + 216))
    {
      v101 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v165.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_24B855000, v101, OS_LOG_TYPE_DEFAULT, "#I Setting SCD and COF flags due to problem reaching helper daemon during shutdown", (uint8_t *)&v165, 2u);
      }
      v102 = xpc_BOOL_create(1);
      if (!v102)
        v102 = xpc_null_create();
      xpc_dictionary_set_value(v48, v94, v102);
      v103 = xpc_null_create();
      xpc_release(v102);
      xpc_release(v103);
      v104 = xpc_BOOL_create(1);
      if (!v104)
        v104 = xpc_null_create();
      xpc_dictionary_set_value(v48, v99, v104);
      v105 = xpc_null_create();
      xpc_release(v104);
      xpc_release(v105);
    }
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v170.__r_.__value_.__l.__data_);
  }
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  v106 = operator new(0x30uLL);
  v159 = v106;
  v160 = xmmword_24B954790;
  strcpy((char *)v106, "com.apple.AppleBasebandManager.data.plist");
  LogTracker::copyPreference(v3, &v159, &__p);
  operator delete(v106);
  v107 = *(_QWORD **)(v3 + 152);
  if (v107 != (_QWORD *)(v3 + 160))
  {
    do
    {
      v109 = (xpc_object_t *)v107[7];
      v110 = *v109;
      if (*v109)
      {
        xpc_retain(*v109);
        v111 = (const char *)(v107 + 4);
        if (*((char *)v107 + 55) < 0)
          goto LABEL_191;
      }
      else
      {
        v110 = xpc_null_create();
        v111 = (const char *)(v107 + 4);
        if (*((char *)v107 + 55) < 0)
LABEL_191:
          v111 = *(const char **)v111;
      }
      xpc_dictionary_set_value(__p, v111, v110);
      v112 = xpc_null_create();
      xpc_release(v110);
      xpc_release(v112);
      v113 = xpc_null_create();
      v114 = (void **)v107[7];
      v115 = xpc_null_create();
      v116 = *v114;
      *v114 = v113;
      xpc_release(v116);
      xpc_release(v115);
      v117 = *(NSObject **)(v3 + 176);
      if (v117)
      {
        dispatch_retain(*(dispatch_object_t *)(v3 + 176));
        dispatch_group_enter(v117);
      }
      v118 = v107[7];
      v119 = *(NSObject **)(v118 + 8);
      *(_QWORD *)(v118 + 8) = v117;
      if (v119)
      {
        dispatch_group_leave(v119);
        dispatch_release(v119);
      }
      v120 = (_QWORD *)v107[1];
      if (v120)
      {
        do
        {
          v121 = v120;
          v120 = (_QWORD *)*v120;
        }
        while (v120);
      }
      else
      {
        do
        {
          v121 = (_QWORD *)v107[2];
          v122 = *v121 == (_QWORD)v107;
          v107 = v121;
        }
        while (!v122);
      }
      v107 = v121;
    }
    while (v121 != (_QWORD *)(v3 + 160));
  }
  if (v48)
  {
    xpc_retain(v48);
    v108 = v48;
  }
  else
  {
    v108 = xpc_null_create();
  }
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x24BE051B8], v108);
  v123 = xpc_null_create();
  xpc_release(v108);
  xpc_release(v123);
  LogTracker::getConfiguration((LogTracker *)v3, &value);
  v124 = __p;
  v125 = value;
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x24BE05330], value);
  v126 = xpc_null_create();
  value = v126;
  xpc_release(v125);
  xpc_release(v126);
  value = 0;
  v127 = operator new(0x28uLL);
  v155 = v127;
  v156 = xmmword_24B9547A0;
  strcpy((char *)v127, "com.apple.AppleBasebandManager.plist");
  LogTracker::copyPreference(v3, &v155, &v157);
  v128 = v157;
  xpc_dictionary_set_value(v124, (const char *)*MEMORY[0x24BE05578], v157);
  v129 = xpc_null_create();
  v157 = v129;
  xpc_release(v128);
  xpc_release(v129);
  v157 = 0;
  operator delete(v127);
  v130 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v131 = off_2579B8870;
  if (!off_2579B8870)
  {
    ctu::Gestalt::create_default_global(v130);
    v132 = *(_OWORD *)&v165.__r_.__value_.__l.__data_;
    *(_OWORD *)&v165.__r_.__value_.__l.__data_ = 0uLL;
    v133 = (std::__shared_weak_count *)*(&off_2579B8870 + 1);
    off_2579B8870 = v132;
    if (v133)
    {
      v134 = (unint64_t *)&v133->__shared_owners_;
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 - 1, v134));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
    }
    v136 = (std::__shared_weak_count *)v165.__r_.__value_.__l.__size_;
    if (v165.__r_.__value_.__l.__size_)
    {
      v137 = (unint64_t *)(v165.__r_.__value_.__l.__size_ + 8);
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
    }
    v131 = off_2579B8870;
  }
  v139 = (std::__shared_weak_count *)*(&off_2579B8870 + 1);
  v164.__r_.__value_.__r.__words[0] = v131;
  v164.__r_.__value_.__l.__size_ = *(&off_2579B8870 + 1);
  if (*(&off_2579B8870 + 1))
  {
    v140 = (unint64_t *)(*(&off_2579B8870 + 1) + 8);
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)v131 + 80))(&v170, v131);
  if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v142 = &v170;
  else
    v142 = (std::string *)v170.__r_.__value_.__r.__words[0];
  v143 = xpc_string_create((const char *)v142);
  if (!v143)
    v143 = xpc_null_create();
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x24BE054A0], v143);
  v144 = xpc_null_create();
  xpc_release(v143);
  xpc_release(v144);
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v170.__r_.__value_.__l.__data_);
    if (!v139)
      goto LABEL_220;
  }
  else if (!v139)
  {
    goto LABEL_220;
  }
  v145 = (unint64_t *)&v139->__shared_owners_;
  do
    v146 = __ldaxr(v145);
  while (__stlxr(v146 - 1, v145));
  if (v146)
  {
LABEL_220:
    v147 = __p;
    v154 = __p;
    if (__p)
      goto LABEL_221;
LABEL_224:
    v154 = xpc_null_create();
    v148 = SHIBYTE(object.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_222;
    goto LABEL_225;
  }
  ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
  std::__shared_weak_count::__release_weak(v139);
  v147 = __p;
  v154 = __p;
  if (!__p)
    goto LABEL_224;
LABEL_221:
  xpc_retain(v147);
  v148 = SHIBYTE(object.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_222:
    v153 = object;
    goto LABEL_226;
  }
LABEL_225:
  std::string::__init_copy_ctor_external(&v153, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
LABEL_226:
  v149 = util::writeJSON();
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  xpc_release(v154);
  v154 = 0;
  v150 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
  {
    if (((MEMORY[0x24BD2A468](v147) == v47) & v149) != 0)
      v151 = "Succeeded";
    else
      v151 = "Failed";
    p_object = (std::string *)object.__r_.__value_.__r.__words[0];
    if (v148 >= 0)
      p_object = &object;
    LODWORD(v170.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v170.__r_.__value_.__r.__words + 4) = (std::string::size_type)v151;
    WORD2(v170.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v170.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_object;
    _os_log_impl(&dword_24B855000, v150, OS_LOG_TYPE_DEFAULT, "#I %s to generate log summary: %s", (uint8_t *)&v170, 0x16u);
  }
  xpc_release(v147);
  xpc_release(v48);
  if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_237;
LABEL_241:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v168[2]) & 0x80000000) == 0)
    {
LABEL_238:
      if ((SHIBYTE(v169[2]) & 0x80000000) == 0)
        return;
LABEL_243:
      operator delete(v169[0]);
      return;
    }
    goto LABEL_242;
  }
  operator delete(object.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_241;
LABEL_237:
  if ((SHIBYTE(v168[2]) & 0x80000000) == 0)
    goto LABEL_238;
LABEL_242:
  operator delete(v168[0]);
  if (SHIBYTE(v169[2]) < 0)
    goto LABEL_243;
}

void sub_24B913660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,xpc_object_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,xpc_object_t object,uint64_t a31,int a32,__int16 a33,char a34,char a35,xpc_object_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 72));
    *(_QWORD *)(v2 + 72) = 0;
    v3 = *(std::__shared_weak_count **)(v2 + 56);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    xpc_release(*(xpc_object_t *)(v2 + 40));
    *(_QWORD *)(v2 + 40) = 0;
    v4 = *(std::__shared_weak_count **)(v2 + 24);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    xpc_release(*(xpc_object_t *)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1, const char *a2)
{
  _QWORD *v3;
  const char *v4;
  const char *v5;
  NSObject *v6;
  xpc_object_t v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  uint64_t v20;
  xpc_object_t v21;
  NSObject *v22;

  v20 = a1;
  v3 = *(_QWORD **)a1;
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE04EE8], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE05920], v4)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE04F58], v5))
  {
    v6 = v3[26];
    v22 = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v6);
    }
    v7 = *(xpc_object_t *)(a1 + 8);
    v21 = v7;
    if (v7)
    {
      xpc_retain(v7);
    }
    else
    {
      v7 = xpc_null_create();
      v21 = v7;
    }
    LogTracker::moveBasebandServicesLog_sync(v3, &v22, &v21);
    xpc_release(v7);
    if (v6)
    {
      dispatch_group_leave(v6);
      dispatch_release(v6);
    }
  }
  v8 = v3[26];
  v9 = v3[17];
  v10 = operator new(0x40uLL);
  v11 = *(_QWORD *)(a1 + 24);
  *v10 = *(_QWORD *)(a1 + 16);
  v10[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 16);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(void **)(a1 + 40);
  v10[2] = *(_QWORD *)(a1 + 32);
  v10[3] = v14;
  if (!v14)
  {
    v10[3] = xpc_null_create();
    v15 = *(_QWORD *)(a1 + 56);
    v10[4] = *(_QWORD *)(a1 + 48);
    v10[5] = v15;
    if (!v15)
      goto LABEL_20;
LABEL_18:
    v16 = (unint64_t *)(v15 + 16);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    goto LABEL_20;
  }
  xpc_retain(v14);
  v15 = *(_QWORD *)(a1 + 56);
  v10[4] = *(_QWORD *)(a1 + 48);
  v10[5] = v15;
  if (v15)
    goto LABEL_18;
LABEL_20:
  v18 = *(void **)(a1 + 72);
  v10[6] = *(_QWORD *)(a1 + 64);
  v10[7] = v18;
  if (v18)
    xpc_retain(v18);
  else
    v10[7] = xpc_null_create();
  dispatch_group_notify_f(v8, v9, v10, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&v20);
}

void sub_24B913D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  NSObject *v10;
  void *v11;

  xpc_release(v11);
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
    std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&a10);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *value;
  const void *v10;
  size_t v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t IsInternalBuild;
  uint64_t CompressionMode;
  int v20;
  NSObject *v21;
  xpc_object_t v22;
  NSObject *v23;
  NSObject *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  uint64_t v31;
  void *aBlock;
  CFTypeRef cf;
  NSObject *__dst[2];
  unint64_t v35;

  v31 = a1;
  v4 = a1 + 8;
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v3 = *(_QWORD **)(v4 + 8);
  if (v2)
  {
    v5 = std::__shared_weak_count::lock(v2);
    v6 = v5;
    if (v5 && *(_QWORD *)a1)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
      }
      value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 24), (const char *)*MEMORY[0x24BE05800]);
      __dst[0] = value;
      if (value)
        xpc_retain(value);
      else
        __dst[0] = xpc_null_create();
      IsInternalBuild = TelephonyUtilIsInternalBuild();
      if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
        CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
      else
        CompressionMode = 2;
      v20 = xpc::dyn_cast_or_default((xpc *)__dst, (const object *)CompressionMode);
      xpc_release(__dst[0]);
      if (v20)
      {
        v21 = v3[26];
        __dst[0] = v21;
        if (v21)
        {
          dispatch_retain(v21);
          dispatch_group_enter(v21);
        }
        v22 = *(xpc_object_t *)(a1 + 24);
        cf = v22;
        if (v22)
        {
          xpc_retain(v22);
        }
        else
        {
          v22 = xpc_null_create();
          cf = v22;
        }
        LogTracker::archiveLogs_sync(v3, __dst, (xpc_object_t *)&cf);
        xpc_release(v22);
        cf = 0;
        if (v21)
        {
          dispatch_group_leave(v21);
          dispatch_release(v21);
        }
      }
      v23 = v3[26];
      v24 = v3[17];
      v25 = operator new(0x20uLL);
      v26 = *(_QWORD *)(a1 + 40);
      *v25 = *(_QWORD *)(a1 + 32);
      v25[1] = v26;
      if (v26)
      {
        v27 = (unint64_t *)(v26 + 16);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v29 = *(void **)(a1 + 56);
      v25[2] = *(_QWORD *)(a1 + 48);
      v25[3] = v29;
      if (v29)
        xpc_retain(v29);
      else
        v25[3] = xpc_null_create();
      dispatch_group_notify_f(v23, v24, v25, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
      return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v31);
    }
  }
  else
  {
    v6 = 0;
  }
  v10 = (const void *)*MEMORY[0x24BE055B8];
  v11 = strlen((const char *)*MEMORY[0x24BE055B8]);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    __dst[1] = v12;
    v35 = v15 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v35) = v11;
    v13 = __dst;
    if (!v11)
      goto LABEL_19;
  }
  memmove(v13, v10, (size_t)v12);
LABEL_19:
  *((_BYTE *)&v12->isa + (_QWORD)v13) = 0;
  aBlock = 0;
  cf = 0;
  Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v35) < 0)
    operator delete(__dst[0]);
  if (v6)
  {
    v16 = (unint64_t *)&v6->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v31);
}

void sub_24B9140B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, CFTypeRef cf, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  NSObject *v17;
  void *v18;

  xpc_release(v18);
  if (v17)
  {
    dispatch_group_leave(v17);
    dispatch_release(v17);
    std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&a9);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 56));
    *(_QWORD *)(v2 + 56) = 0;
    v3 = *(std::__shared_weak_count **)(v2 + 40);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(_QWORD *)(v2 + 24) = 0;
    v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  char *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  const char *v9;
  xpc_object_t value;
  const char *v11;
  const void *v12;
  size_t v13;
  void *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  const char *v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  CFTypeRef *v24;
  xpc_object_t v25;
  xpc_object_t v26;
  const char *v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  const void *v32;
  size_t v33;
  void *v34;
  void *v35;
  const object *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  CFTypeID v40;
  NSObject *v41;
  CFTypeRef *v42;
  std::__shared_weak_count *v43;
  void *v44;
  xpc_object_t v45;
  void *aBlock[2];
  unint64_t v47;
  xpc_object_t object;
  CFTypeRef cf[3];
  void *__dst[3];
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)v4 + 1);
  if (!v2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  v5 = std::__shared_weak_count::lock(v2);
  v6 = v5;
  if (!v5 || !*(_QWORD *)a1)
  {
LABEL_11:
    v12 = (const void *)*MEMORY[0x24BE055B8];
    v13 = strlen((const char *)*MEMORY[0x24BE055B8]);
    if (v13 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v14 = (void *)v13;
    if (v13 >= 0x17)
    {
      v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v16 = v13 | 7;
      v17 = v16 + 1;
      v15 = (void **)operator new(v16 + 1);
      __dst[1] = v14;
      __dst[2] = (void *)(v17 | 0x8000000000000000);
      __dst[0] = v15;
    }
    else
    {
      HIBYTE(__dst[2]) = v13;
      v15 = __dst;
      if (!v13)
        goto LABEL_19;
    }
    memmove(v15, v12, (size_t)v14);
LABEL_19:
    *((_BYTE *)v14 + (_QWORD)v15) = 0;
    cf[0] = 0;
    aBlock[0] = 0;
    Service::broadcastEvent(v3, (uint64_t)__dst, cf, (const void **)aBlock);
    if (aBlock[0])
      _Block_release(aBlock[0]);
    if (cf[0])
      CFRelease(cf[0]);
    if (SHIBYTE(__dst[2]) < 0)
      operator delete(__dst[0]);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    goto LABEL_82;
  }
  v7 = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  memset(__dst, 170, sizeof(__dst));
  v9 = (const char *)*MEMORY[0x24BE053F0];
  value = xpc_dictionary_get_value(*((xpc_object_t *)a1 + 3), (const char *)*MEMORY[0x24BE053F0]);
  cf[0] = value;
  if (value)
    xpc_retain(value);
  else
    cf[0] = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)cf, (const object *)"", v11);
  xpc_release((xpc_object_t)cf[0]);
  memset(cf, 170, sizeof(cf));
  v20 = (const char *)*MEMORY[0x24BE05090];
  v21 = xpc_dictionary_get_value(*((xpc_object_t *)a1 + 3), (const char *)*MEMORY[0x24BE05090]);
  object = v21;
  if (v21)
    xpc_retain(v21);
  else
    object = xpc_null_create();
  Timestamp::Timestamp((Timestamp *)&v51);
  Timestamp::asString((uint64_t)&v51, 0, 9, aBlock);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v47) < 0)
    operator delete(aBlock[0]);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v51, *((_QWORD **)&v51 + 1));
  xpc_release(object);
  v22 = xpc_dictionary_create(0, 0, 0);
  if (v22 || (v22 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v22) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v22);
      v23 = v22;
    }
    else
    {
      v23 = xpc_null_create();
    }
  }
  else
  {
    v23 = xpc_null_create();
    v22 = 0;
  }
  xpc_release(v22);
  if (SHIBYTE(cf[2]) >= 0)
    v24 = cf;
  else
    v24 = (CFTypeRef *)cf[0];
  v25 = xpc_string_create((const char *)v24);
  if (!v25)
    v25 = xpc_null_create();
  xpc_dictionary_set_value(v23, v20, v25);
  v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  if (SHIBYTE(__dst[2]) >= 0)
    v27 = (const char *)__dst;
  else
    v27 = (const char *)__dst[0];
  v28 = xpc_string_create(v27);
  if (!v28)
    v28 = xpc_null_create();
  xpc_dictionary_set_value(v23, v9, v28);
  v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  v30 = xpc_string_create((const char *)*MEMORY[0x24BDFC720]);
  if (!v30)
    v30 = xpc_null_create();
  xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x24BE05268], v30);
  v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  v32 = (const void *)*MEMORY[0x24BE055B8];
  v33 = strlen((const char *)*MEMORY[0x24BE055B8]);
  if (v33 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v34 = (void *)v33;
  if (v33 >= 0x17)
  {
    v37 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v37 = v33 | 7;
    v38 = v37 + 1;
    v35 = operator new(v37 + 1);
    aBlock[1] = v34;
    v47 = v38 | 0x8000000000000000;
    aBlock[0] = v35;
LABEL_62:
    memmove(v35, v32, (size_t)v34);
    *((_BYTE *)v34 + (_QWORD)v35) = 0;
    v45 = v23;
    if (v23)
      goto LABEL_58;
    goto LABEL_63;
  }
  HIBYTE(v47) = v33;
  v35 = aBlock;
  if (v33)
    goto LABEL_62;
  LOBYTE(aBlock[0]) = 0;
  v45 = v23;
  if (v23)
  {
LABEL_58:
    xpc_retain(v23);
    goto LABEL_64;
  }
LABEL_63:
  v45 = xpc_null_create();
LABEL_64:
  xpc::bridge((xpc *)&v45, v36);
  v39 = (void *)v51;
  if ((_QWORD)v51 && (v40 = CFGetTypeID((CFTypeRef)v51), v40 == CFDictionaryGetTypeID()))
  {
    object = v39;
    CFRetain(v39);
  }
  else
  {
    object = 0;
  }
  v44 = 0;
  Service::broadcastEvent(v3, (uint64_t)aBlock, (const void **)&object, (const void **)&v44);
  if (v44)
    _Block_release(v44);
  if (object)
    CFRelease(object);
  if ((_QWORD)v51)
    CFRelease((CFTypeRef)v51);
  xpc_release(v45);
  if (SHIBYTE(v47) < 0)
    operator delete(aBlock[0]);
  v41 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    v42 = cf;
    if (SHIBYTE(cf[2]) < 0)
      v42 = (CFTypeRef *)cf[0];
    LODWORD(v51) = 136315138;
    *(_QWORD *)((char *)&v51 + 4) = v42;
    _os_log_impl(&dword_24B855000, v41, OS_LOG_TYPE_DEFAULT, "#I TracePostProcessingEnd with timestamp[%s]", (uint8_t *)&v51, 0xCu);
  }
  xpc_release(v23);
  if (SHIBYTE(cf[2]) < 0)
  {
    operator delete((void *)cf[0]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_82;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_82;
  }
  operator delete(__dst[0]);
LABEL_82:
  xpc_release(*((xpc_object_t *)a1 + 3));
  *((_QWORD *)a1 + 3) = 0;
  v43 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  if (v43)
    std::__shared_weak_count::__release_weak(v43);
  operator delete(a1);
}

void sub_24B91480C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, xpc_object_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,CFTypeRef a30,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void std::__shared_ptr_pointer<LogDumpDB *,std::shared_ptr<LogDumpDB>::__shared_ptr_default_delete<LogDumpDB,LogDumpDB>,std::allocator<LogDumpDB>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<LogDumpDB *,std::shared_ptr<LogDumpDB>::__shared_ptr_default_delete<LogDumpDB,LogDumpDB>,std::allocator<LogDumpDB>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    *v1 = &off_251CB9828;
    v2 = v1[3];
    if (!v2)
    {
LABEL_18:
      MEMORY[0x24BD2937C](v1 + 1);
      operator delete(v1);
      return;
    }
    v3 = v1[4];
    v4 = (void *)v1[3];
    if (v3 == v2)
    {
LABEL_17:
      v1[4] = v2;
      operator delete(v4);
      goto LABEL_18;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if ((*(char *)(v3 - 41) & 0x80000000) == 0)
        {
LABEL_8:
          if ((*(char *)(v3 - 65) & 0x80000000) == 0)
            goto LABEL_9;
          goto LABEL_13;
        }
      }
      else if ((*(char *)(v3 - 41) & 0x80000000) == 0)
      {
        goto LABEL_8;
      }
      operator delete(*(void **)(v3 - 64));
      if ((*(char *)(v3 - 65) & 0x80000000) == 0)
      {
LABEL_9:
        if (*(char *)(v3 - 89) < 0)
          goto LABEL_14;
        goto LABEL_5;
      }
LABEL_13:
      operator delete(*(void **)(v3 - 88));
      if (*(char *)(v3 - 89) < 0)
LABEL_14:
        operator delete(*(void **)(v3 - 112));
LABEL_5:
      v3 -= 112;
      if (v3 == v2)
      {
        v4 = (void *)v1[3];
        goto LABEL_17;
      }
    }
  }
}

uint64_t std::__shared_ptr_pointer<LogDumpDB *,std::shared_ptr<LogDumpDB>::__shared_ptr_default_delete<LogDumpDB,LogDumpDB>,std::allocator<LogDumpDB>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B95452ELL)
    return a1 + 24;
  if (((v3 & 0x800000024B95452ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B95452ELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B95452ELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  void *v10;
  void *v11;
  NSObject *v12;
  unsigned __int8 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  const void *v22;
  NSObject *object;
  xpc_object_t v24;
  _QWORD aBlock[6];
  std::__shared_weak_count *v26;
  uint64_t v27;
  xpc_object_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *__p;
  char v32;
  xpc_object_t v33;
  uint64_t v34;
  uint64_t block;
  uint64_t v36;
  void (*v37)(uint64_t);
  void *v38;
  uint64_t *v39;

  v2 = a1[2];
  v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24BD2A468](v3) == MEMORY[0x24BDACFA0])
    {
      xpc_retain(v3);
      v4 = v3;
    }
    else
    {
      v4 = xpc_null_create();
    }
  }
  else
  {
    v4 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v5 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3__6clEv_block_invoke;
  aBlock[3] = &__block_descriptor_280_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c67_ZTSZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEE3__5_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  v7 = *a1;
  v6 = (std::__shared_weak_count *)a1[1];
  aBlock[4] = v2;
  aBlock[5] = v7;
  v26 = v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  v10 = (void *)a1[4];
  v27 = a1[3];
  v28 = v10;
  if (v10)
    xpc_retain(v10);
  else
    v28 = xpc_null_create();
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)&v29, (uint64_t)(a1 + 5));
  v11 = _Block_copy(aBlock);
  v12 = *(NSObject **)(v2 + 136);
  if (v12)
    dispatch_retain(v12);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  block = v5;
  v36 = 0x40000000;
  v37 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v38 = &__block_descriptor_tmp_13_5;
  v39 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v14 = *(_QWORD *)algn_2579B8AE8;
    block = GetABMLogServer(void)::sLogServer;
    v36 = *(_QWORD *)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_20;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v14 = *(_QWORD *)algn_2579B8AE8;
    block = GetABMLogServer(void)::sLogServer;
    v36 = *(_QWORD *)algn_2579B8AE8;
    if (!*(_QWORD *)algn_2579B8AE8)
      goto LABEL_20;
  }
  v15 = (unint64_t *)(v14 + 8);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
LABEL_20:
  abm::HelperClient::create();
  v17 = (std::__shared_weak_count *)v36;
  if (!v36)
    goto LABEL_24;
  v18 = (unint64_t *)(v36 + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v24 = v4;
    if (v4)
    {
LABEL_25:
      xpc_retain(v4);
      if (v11)
        goto LABEL_26;
      goto LABEL_49;
    }
  }
  else
  {
LABEL_24:
    v24 = v4;
    if (v4)
      goto LABEL_25;
  }
  v24 = xpc_null_create();
  if (v11)
  {
LABEL_26:
    v22 = _Block_copy(v11);
    object = v12;
    if (!v12)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_49:
  v22 = 0;
  object = v12;
  if (v12)
LABEL_27:
    dispatch_retain(v12);
LABEL_28:
  abm::HelperClient::perform();
  if (object)
    dispatch_release(object);
  if (v22)
    _Block_release(v22);
  xpc_release(v24);
  do
    v20 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v20 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v20)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (v12)
    dispatch_release(v12);
  if (v11)
    _Block_release(v11);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)&v34);
  xpc_release(v33);
  v33 = 0;
  if (v32 < 0)
    operator delete(__p);
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  xpc_release(v28);
  v28 = 0;
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  xpc_release(v4);
  v21 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6((uint64_t)a1);
  operator delete(v21);
}

void sub_24B914FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, dispatch_object_t object, xpc_object_t a12, uint64_t a13, std::__shared_weak_count *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,xpc_object_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,xpc_object_t a34,uint64_t a35)
{
  uint64_t v35;
  void *v36;
  const void *v37;
  NSObject *v38;
  unint64_t *p_shared_owners;
  unint64_t v41;
  void *v42;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(a12);
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  if (v38)
    dispatch_release(v38);
  if (v37)
    _Block_release(v37);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)&a35);
  xpc_release(a34);
  if (a33 < 0)
    operator delete(__p);
  if (a25)
    std::__shared_weak_count::__release_weak(a25);
  xpc_release(a23);
  if (a21)
    std::__shared_weak_count::__release_weak(a21);
  xpc_release(v36);
  v42 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6(v35);
  operator delete(v42);
  _Unwind_Resume(a1);
}

void ___ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3__6clEv_block_invoke(_QWORD *a1, unsigned int *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  char v13;
  _BOOL4 v14;
  NSObject *v15;
  NSObject *v16;
  _QWORD *v17;
  void *v18;
  void **v19;
  void *__p[2];
  char v21;
  uint8_t buf[4];
  void **v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *a2;
      v12 = *(NSObject **)(v5 + 88);
      if ((_DWORD)v11)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v11, (uint64_t)__p);
          v19 = v21 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v23 = v19;
          _os_log_error_impl(&dword_24B855000, v12, OS_LOG_TYPE_ERROR, "Unable to reach baseband tracing task (error: %s)", buf, 0xCu);
          if (v21 < 0)
            operator delete(__p[0]);
        }
        v13 = 1;
      }
      else
      {
        v14 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        v13 = 0;
        if (v14)
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_24B855000, v12, OS_LOG_TYPE_DEFAULT, "#I Successfully reached baseband tracing task", (uint8_t *)__p, 2u);
          v13 = 0;
        }
      }
      *(_BYTE *)(v5 + 216) = v13;
      v15 = *(NSObject **)(v5 + 208);
      v16 = *(NSObject **)(v5 + 136);
      v17 = operator new(0xE0uLL);
      v18 = (void *)a1[8];
      *v17 = a1[7];
      v17[1] = v18;
      if (v18)
        xpc_retain(v18);
      else
        v17[1] = xpc_null_create();
      LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)(v17 + 2), (uint64_t)(a1 + 9));
      dispatch_group_notify_f(v15, v16, v17, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
    }
  }
}

void sub_24B9152D4(_Unwind_Exception *a1)
{
  xpc_object_t *v1;

  xpc_release(v1[1]);
  v1[1] = 0;
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24B9152F4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c67_ZTSZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEE3__5(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[8];
  a1[7] = a2[7];
  a1[8] = v7;
  if (v7)
    xpc_retain(v7);
  else
    a1[8] = xpc_null_create();
  return LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)(a1 + 9), (uint64_t)(a2 + 9));
}

void sub_24B91537C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  xpc_release(*(xpc_object_t *)(v1 + 64));
  *(_QWORD *)(v1 + 64) = 0;
  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c67_ZTSZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEE3__5(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 136);
  xpc_release(*(xpc_object_t *)(a1 + 128));
  *(_QWORD *)(a1 + 128) = 0;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1, const char *a2)
{
  _QWORD *v3;
  const char *v4;
  const char *v5;
  NSObject *v6;
  xpc_object_t v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  uint64_t v12;
  xpc_object_t v13;
  NSObject *v14;

  v12 = a1;
  v3 = *(_QWORD **)a1;
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE04EE8], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE05920], v4)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x24BE04F58], v5))
  {
    v6 = v3[26];
    v14 = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v6);
    }
    v7 = *(xpc_object_t *)(a1 + 8);
    v13 = v7;
    if (v7)
    {
      xpc_retain(v7);
    }
    else
    {
      v7 = xpc_null_create();
      v13 = v7;
    }
    LogTracker::moveBasebandServicesLog_sync(v3, &v14, &v13);
    xpc_release(v7);
    if (v6)
    {
      dispatch_group_leave(v6);
      dispatch_release(v6);
    }
  }
  v8 = v3[26];
  v9 = v3[17];
  v10 = operator new(0xD0uLL);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)v10, a1 + 16);
  dispatch_group_notify_f(v8, v9, v10, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](&v12);
}

void sub_24B915538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  NSObject *v10;
  void *v11;

  xpc_release(v11);
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
    std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](&a10);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v2 + 80);
    xpc_release(*(xpc_object_t *)(v2 + 72));
    *(_QWORD *)(v2 + 72) = 0;
    if (*(char *)(v2 + 71) < 0)
      operator delete(*(void **)(v2 + 48));
    v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    xpc_release(*(xpc_object_t *)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  char *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void *v9;
  size_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  size_t v18;
  char *v19;
  NSObject *v20;
  xpc_object_t v21;
  NSObject *v22;
  NSObject *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  void *aBlock;
  CFTypeRef cf;
  NSObject *__dst[2];
  unint64_t v33;

  v4 = a1 + 8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v3 = (_QWORD *)*((_QWORD *)v4 + 1);
  if (v2)
  {
    v5 = std::__shared_weak_count::lock(v2);
    v6 = v5;
    if (v5 && *(_QWORD *)a1)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!*((_DWORD *)a1 + 6))
          goto LABEL_46;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
        if (!*((_DWORD *)a1 + 6))
        {
LABEL_46:
          v22 = v3[26];
          v23 = v3[17];
          v24 = operator new(0x90uLL);
          v25 = *((_QWORD *)a1 + 9);
          *v24 = *((_QWORD *)a1 + 8);
          v24[1] = v25;
          if (v25)
          {
            v26 = (unint64_t *)(v25 + 16);
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
          }
          v28 = (void *)*((_QWORD *)a1 + 11);
          v24[2] = *((_QWORD *)a1 + 10);
          v24[3] = v28;
          if (v28)
            xpc_retain(v28);
          else
            v24[3] = xpc_null_create();
          LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)(v24 + 4), (uint64_t)(a1 + 96));
          dispatch_group_notify_f(v22, v23, v24, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
          goto LABEL_53;
        }
      }
      if (!a1[28])
      {
        v17 = a1[55];
        v18 = v17 >= 0 ? a1[55] : *((_QWORD *)a1 + 5);
        if (v18 == strlen((const char *)*MEMORY[0x24BE05280]))
        {
          v19 = v17 >= 0 ? a1 + 32 : (char *)*((_QWORD *)a1 + 4);
          if (!memcmp(v19, (const void *)*MEMORY[0x24BE05280], v18))
          {
            v20 = v3[26];
            __dst[0] = v20;
            if (v20)
            {
              dispatch_retain(v20);
              dispatch_group_enter(v20);
            }
            v21 = (xpc_object_t)*((_QWORD *)a1 + 7);
            cf = v21;
            if (v21)
            {
              xpc_retain(v21);
            }
            else
            {
              v21 = xpc_null_create();
              cf = v21;
            }
            LogTracker::archiveLogs_sync(v3, __dst, (xpc_object_t *)&cf);
            xpc_release(v21);
            cf = 0;
            if (v20)
            {
              dispatch_group_leave(v20);
              dispatch_release(v20);
            }
          }
        }
      }
      goto LABEL_46;
    }
  }
  else
  {
    v6 = 0;
  }
  v9 = (const void *)*MEMORY[0x24BE055B8];
  v10 = strlen((const char *)*MEMORY[0x24BE055B8]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = operator new(v13 + 1);
    __dst[1] = v11;
    v33 = v14 | 0x8000000000000000;
    __dst[0] = v12;
  }
  else
  {
    HIBYTE(v33) = v10;
    v12 = __dst;
    if (!v10)
      goto LABEL_18;
  }
  memmove(v12, v9, (size_t)v11);
LABEL_18:
  *((_BYTE *)&v11->isa + (_QWORD)v12) = 0;
  aBlock = 0;
  cf = 0;
  Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v33) < 0)
    operator delete(__dst[0]);
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_53:
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)(a1 + 64));
  xpc_release(*((xpc_object_t *)a1 + 7));
  *((_QWORD *)a1 + 7) = 0;
  if (a1[55] < 0)
    operator delete(*((void **)a1 + 4));
  v29 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  operator delete(a1);
}

void sub_24B915930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, CFTypeRef cf, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  NSObject *v18;
  void *v19;
  std::__shared_weak_count *v21;

  xpc_release(v19);
  if (v18)
  {
    dispatch_group_leave(v18);
    dispatch_release(v18);
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v17 + 64);
  xpc_release(*(xpc_object_t *)(v17 + 56));
  *(_QWORD *)(v17 + 56) = 0;
  if (*(char *)(v17 + 55) < 0)
  {
    operator delete(*(void **)(v17 + 32));
    v21 = *(std::__shared_weak_count **)(v17 + 8);
    if (!v21)
    {
LABEL_5:
      operator delete((void *)v17);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v21 = *(std::__shared_weak_count **)(v17 + 8);
    if (!v21)
      goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v21);
  operator delete((void *)v17);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  xpc_object_t v10;
  const void *v11;
  size_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *aBlock;
  CFTypeRef cf;
  NSObject *__dst[2];
  unint64_t v26;

  v4 = a1 + 1;
  v2 = (std::__shared_weak_count *)a1[1];
  v3 = (_QWORD *)v4[1];
  if (v2)
  {
    v5 = std::__shared_weak_count::lock(v2);
    v6 = v5;
    if (v5 && *a1)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
      }
      v9 = v3[26];
      __dst[0] = v9;
      if (v9)
      {
        dispatch_retain(v9);
        dispatch_group_enter(v9);
      }
      v10 = (xpc_object_t)a1[3];
      cf = v10;
      if (v10)
      {
        xpc_retain(v10);
      }
      else
      {
        v10 = xpc_null_create();
        cf = v10;
      }
      LogTracker::jsonSummary_sync(v3, __dst, (xpc_object_t *)&cf);
      xpc_release(v10);
      if (v9)
      {
        dispatch_group_leave(v9);
        dispatch_release(v9);
      }
      v19 = v3[26];
      v20 = v3[17];
      v21 = operator new(0x70uLL);
      LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)v21, (uint64_t)(a1 + 4));
      dispatch_group_notify_f(v19, v20, v21, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
      goto LABEL_36;
    }
  }
  else
  {
    v6 = 0;
  }
  v11 = (const void *)*MEMORY[0x24BE055B8];
  v12 = strlen((const char *)*MEMORY[0x24BE055B8]);
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    __dst[1] = v13;
    v26 = v16 | 0x8000000000000000;
    __dst[0] = v14;
  }
  else
  {
    HIBYTE(v26) = v12;
    v14 = __dst;
    if (!v12)
      goto LABEL_21;
  }
  memmove(v14, v11, (size_t)v13);
LABEL_21:
  *((_BYTE *)&v13->isa + (_QWORD)v14) = 0;
  aBlock = 0;
  cf = 0;
  Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst[0]);
  if (v6)
  {
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_36:
  v22 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)a1);
  operator delete(v22);
}

void sub_24B915CA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v4;

  operator delete(v2);
  v4 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_24B915CC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_24B915CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, CFTypeRef cf, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  NSObject *v18;
  void *v19;
  void *v21;
  void *v22;

  xpc_release(v19);
  if (v18)
  {
    dispatch_group_leave(v18);
    dispatch_release(v18);
    v21 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v17);
    operator delete(v21);
    _Unwind_Resume(a1);
  }
  v22 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v17);
  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void *v9;
  size_t v10;
  size_t v11;
  uint64_t (***v12)();
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  void *v18;
  xpc_object_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (***v26)();
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  std::string *v30;
  std::string *v31;
  std::string::size_type v32;
  unint64_t *v33;
  unint64_t v34;
  std::string *v35;
  uint64_t v37;
  void *aBlock;
  CFTypeRef cf;
  uint64_t (**__dst)();
  size_t v41;
  unint64_t v42;
  void **p_dst;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v37 = a1;
  v4 = a1 + 8;
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v3 = *(_QWORD *)(v4 + 8);
  if (v2)
  {
    v5 = std::__shared_weak_count::lock(v2);
    v6 = v5;
    if (v5 && *(_QWORD *)a1)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!*(_BYTE *)(a1 + 24))
        {
LABEL_30:
          if (*(_DWORD *)(a1 + 28) != 2)
          {
            v20 = *(void **)(a1 + 32);
            cf = v20;
            if (v20)
              xpc_retain(v20);
            else
              cf = xpc_null_create();
            __dst = 0;
            v41 = 0;
            v42 = 0;
            TapToRadar::createRadarIfPossible((xpc_object_t *)&cf, (uint64_t)&__dst);
            if (SHIBYTE(v42) < 0)
              operator delete(__dst);
            xpc_release((xpc_object_t)cf);
            cf = 0;
            goto LABEL_52;
          }
          v17 = *(NSObject **)(v3 + 208);
          cf = v17;
          if (v17)
          {
            dispatch_retain(v17);
            dispatch_group_enter(v17);
          }
          v18 = *(void **)(a1 + 32);
          aBlock = v18;
          if (v18)
          {
            xpc_retain(v18);
            v19 = *(xpc_object_t *)(a1 + 32);
            if (v19)
            {
LABEL_35:
              xpc_retain(v19);
              __dst = off_251CBEAB8;
              v41 = v3;
              v42 = (unint64_t)v19;
              p_dst = 0;
              goto LABEL_40;
            }
          }
          else
          {
            aBlock = xpc_null_create();
            v19 = *(xpc_object_t *)(a1 + 32);
            if (v19)
              goto LABEL_35;
          }
          v19 = xpc_null_create();
          __dst = off_251CBEAB8;
          v41 = v3;
          v42 = (unint64_t)v19;
          p_dst = 0;
          if (!v19)
          {
            v19 = 0;
            v42 = (unint64_t)xpc_null_create();
LABEL_41:
            p_dst = (void **)&__dst;
            LogTracker::systemLog_sync(v3, (dispatch_object_t *)&cf, &aBlock, &__dst);
            v26 = (uint64_t (***)())p_dst;
            if (p_dst == (void **)&__dst)
            {
              v27 = 4;
              v26 = &__dst;
            }
            else
            {
              if (!p_dst)
                goto LABEL_50;
              v27 = 5;
            }
            ((void (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v26)[v27])(v26, v21, v22, v23, v24, v25);
LABEL_50:
            xpc_release(v19);
            xpc_release(aBlock);
            if (v17)
            {
              dispatch_group_leave(v17);
              dispatch_release(v17);
            }
            goto LABEL_52;
          }
LABEL_40:
          xpc_retain(v19);
          goto LABEL_41;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
        if (!*(_BYTE *)(a1 + 24))
          goto LABEL_30;
      }
LABEL_52:
      v28 = *(NSObject **)(v3 + 208);
      v29 = *(NSObject **)(v3 + 136);
      v30 = (std::string *)operator new(0x48uLL);
      v31 = v30;
      v32 = *(_QWORD *)(a1 + 48);
      v30->__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 40);
      v30->__r_.__value_.__l.__size_ = v32;
      if (v32)
      {
        v33 = (unint64_t *)(v32 + 16);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      v30->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 56);
      if (*(char *)(a1 + 87) < 0)
      {
        std::string::__init_copy_ctor_external(v30 + 1, *(const std::string::value_type **)(a1 + 64), *(_QWORD *)(a1 + 72));
      }
      else
      {
        *(_OWORD *)&v30[1].__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 64);
        v30[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 80);
      }
      v35 = v31 + 2;
      if (*(char *)(a1 + 111) < 0)
      {
        std::string::__init_copy_ctor_external(v35, *(const std::string::value_type **)(a1 + 88), *(_QWORD *)(a1 + 96));
      }
      else
      {
        *(_OWORD *)&v35->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 88);
        v31[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 104);
      }
      dispatch_group_notify_f(v28, v29, v31, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
      return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v37);
    }
  }
  else
  {
    v6 = 0;
  }
  v9 = (const void *)*MEMORY[0x24BE055B8];
  v10 = strlen((const char *)*MEMORY[0x24BE055B8]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = (uint64_t (***)())operator new(v13 + 1);
    v41 = v11;
    v42 = v14 | 0x8000000000000000;
    __dst = (uint64_t (**)())v12;
  }
  else
  {
    HIBYTE(v42) = v10;
    v12 = &__dst;
    if (!v10)
      goto LABEL_18;
  }
  memmove(v12, v9, v11);
LABEL_18:
  *((_BYTE *)v12 + v11) = 0;
  aBlock = 0;
  cf = 0;
  Service::broadcastEvent(v3, (uint64_t)&__dst, &cf, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v42) < 0)
    operator delete(__dst);
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v37);
}

void sub_24B91618C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  if ((*(char *)(v2 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(v2 + 87) & 0x80000000) == 0)
      goto LABEL_4;
LABEL_11:
    operator delete(*(void **)(v2 + 64));
    v3 = *(std::__shared_weak_count **)(v2 + 48);
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  operator delete(*(void **)(v2 + 88));
  if (*(char *)(v2 + 87) < 0)
    goto LABEL_11;
LABEL_4:
  v3 = *(std::__shared_weak_count **)(v2 + 48);
  if (v3)
LABEL_5:
    std::__shared_weak_count::__release_weak(v3);
LABEL_6:
  xpc_release(*(xpc_object_t *)(v2 + 32));
  *(_QWORD *)(v2 + 32) = 0;
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete((void *)v2);
  return a1;
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_251CBEAB8;
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::~__func(xpc_object_t *a1)
{
  *a1 = off_251CBEAB8;
  xpc_release(a1[2]);
  operator delete(a1);
}

_QWORD *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  v2 = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  *v2 = off_251CBEAB8;
  v2[1] = v4;
  v2[2] = v3;
  if (v3)
    xpc_retain(v3);
  else
    v2[2] = xpc_null_create();
  return v2;
}

xpc_object_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *v2;
  uint64_t v3;
  xpc_object_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(void **)(a1 + 16);
  *a2 = off_251CBEAB8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
    return xpc_retain(v2);
  result = xpc_null_create();
  a2[2] = result;
  return result;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::destroy(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::destroy_deallocate(xpc_object_t *a1)
{
  xpc_release(a1[2]);
  operator delete(a1);
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::operator()(uint64_t a1, unsigned __int8 *a2, void **a3)
{
  int v4;
  void *v5;
  _QWORD *v6;
  xpc_object_t value;
  const char *v8;
  NSObject *v9;
  char *v10;
  char v11;
  std::string *v12;
  int64_t v13;
  int64_t v14;
  int64_t size;
  void *v16;
  char *v17;
  int v18;
  std::string *v19;
  int64_t v20;
  char *v21;
  char *v22;
  NSObject *v23;
  xpc_object_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  std::string __p;
  NSObject *v30;
  std::string v31;
  uint8_t buf[8];
  xpc_object_t v33;
  uint8_t *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *a3;
  *a3 = xpc_null_create();
  v6 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    memset(&v31, 170, sizeof(v31));
    value = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x24BDFC7C0]);
    *(_QWORD *)buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)buf = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)buf, (const object *)"", v8);
    xpc_release(*(xpc_object_t *)buf);
    v10 = (char *)*MEMORY[0x24BDFC728];
    v11 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v31;
    else
      v12 = (std::string *)v31.__r_.__value_.__r.__words[0];
    v13 = strlen((const char *)*MEMORY[0x24BDFC728]);
    if (v13)
    {
      v14 = v13;
      size = v31.__r_.__value_.__l.__size_;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      if (size >= v13)
      {
        v17 = (char *)v12 + size;
        v18 = *v10;
        v19 = v12;
        do
        {
          v20 = size - v14;
          if (v20 == -1)
            break;
          v21 = (char *)memchr(v19, v18, v20 + 1);
          if (!v21)
            break;
          v22 = v21;
          if (!memcmp(v21, v10, v14))
          {
            if (v22 == v17 || v22 - (char *)v12 == -1)
              break;
            goto LABEL_26;
          }
          v19 = (std::string *)(v22 + 1);
          size = v17 - (v22 + 1);
        }
        while (size >= v14);
      }
      v16 = *(void **)(a1 + 16);
      *(_QWORD *)buf = v16;
      if (v16)
        xpc_retain(v16);
      else
        *(_QWORD *)buf = xpc_null_create();
      TapToRadar::createRadarIfPossible((xpc_object_t *)buf, (uint64_t)&v31);
      xpc_release(*(xpc_object_t *)buf);
      *(_QWORD *)buf = 0;
      goto LABEL_44;
    }
LABEL_26:
    v23 = v6[26];
    v30 = v23;
    if (v23)
    {
      dispatch_retain(v23);
      dispatch_group_enter(v23);
      v11 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    }
    if (v11 < 0)
      std::string::__init_copy_ctor_external(&__p, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
    else
      __p = v31;
    v24 = *(xpc_object_t *)(a1 + 16);
    if (v24)
    {
      xpc_retain(v24);
      v34 = 0;
      *(_QWORD *)buf = off_251CBEB38;
      v33 = v24;
    }
    else
    {
      v24 = xpc_null_create();
      v34 = 0;
      *(_QWORD *)buf = off_251CBEB38;
      v33 = v24;
      if (!v24)
      {
        v24 = 0;
        v33 = xpc_null_create();
LABEL_35:
        v34 = buf;
        LogTracker::processLogarchive_sync(v6, &v30, (const char *)&__p, buf);
        v27 = v34;
        if (v34 == buf)
        {
          v28 = 4;
          v27 = buf;
        }
        else
        {
          if (!v34)
          {
LABEL_40:
            xpc_release(v24);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v23)
            {
              dispatch_group_leave(v23);
              dispatch_release(v23);
            }
LABEL_44:
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v31.__r_.__value_.__l.__data_);
            goto LABEL_46;
          }
          v28 = 5;
        }
        (*(void (**)(uint8_t *, uint64_t, uint64_t))(*(_QWORD *)v27 + 8 * v28))(v27, v25, v26);
        goto LABEL_40;
      }
    }
    xpc_retain(v24);
    goto LABEL_35;
  }
  v9 = v6[11];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_24B855000, v9, OS_LOG_TYPE_ERROR, "Failed to collect sysdiagnose!", buf, 2u);
  }
LABEL_46:
  xpc_release(v5);
}

void sub_24B916834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t object,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  NSObject *v27;

  if (v27)
  {
    dispatch_group_leave(v27);
    dispatch_release(v27);
  }
  if (a22 < 0)
    operator delete(__p);
  xpc_release(v26);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::target_type()
{
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_251CBEB38;
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(xpc_object_t *a1)
{
  *a1 = off_251CBEB38;
  xpc_release(a1[1]);
  operator delete(a1);
}

_QWORD *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = operator new(0x10uLL);
  v3 = *(void **)(a1 + 8);
  *v2 = off_251CBEB38;
  v2[1] = v3;
  if (v3)
    xpc_retain(v3);
  else
    v2[1] = xpc_null_create();
  return v2;
}

xpc_object_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *v2;
  xpc_object_t result;

  v2 = *(void **)(a1 + 8);
  *a2 = off_251CBEB38;
  a2[1] = v2;
  if (v2)
    return xpc_retain(v2);
  result = xpc_null_create();
  a2[1] = result;
  return result;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy_deallocate(xpc_object_t *a1)
{
  xpc_release(a1[1]);
  operator delete(a1);
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(uint64_t a1)
{
  void *v1;
  void *__p[2];
  uint64_t v3;
  xpc_object_t object;

  v1 = *(void **)(a1 + 8);
  object = v1;
  if (v1)
    xpc_retain(v1);
  else
    object = xpc_null_create();
  __p[0] = 0;
  __p[1] = 0;
  v3 = 0;
  TapToRadar::createRadarIfPossible(&object, (uint64_t)__p);
  if (SHIBYTE(v3) < 0)
    operator delete(__p[0]);
  xpc_release(object);
}

void sub_24B916B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object)
{
  if (a14 < 0)
    operator delete(__p);
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::target_type()
{
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  char *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  const void *v11;
  size_t v12;
  size_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  const char **v19;
  const char *v20;
  xpc_object_t v21;
  xpc_object_t v22;
  const char *v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  const void *v28;
  size_t v29;
  size_t v30;
  void **p_dst;
  const object *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  CFTypeID v36;
  NSObject *v37;
  std::string::size_type v38;
  std::__shared_weak_count *v39;
  void *v40;
  xpc_object_t object;
  void *aBlock;
  void **__dst;
  size_t v44;
  unint64_t v45;
  std::string cf;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)v4 + 1);
  if (v2)
  {
    v5 = std::__shared_weak_count::lock(v2);
    v6 = v5;
    if (v5 && *(_QWORD *)a1)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
      }
      v9 = xpc_dictionary_create(0, 0, 0);
      if (v9 || (v9 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x24BD2A468](v9) == MEMORY[0x24BDACFA0])
        {
          xpc_retain(v9);
          v10 = v9;
        }
        else
        {
          v10 = xpc_null_create();
        }
      }
      else
      {
        v10 = xpc_null_create();
        v9 = 0;
      }
      xpc_release(v9);
      v19 = (const char **)(a1 + 24);
      v20 = a1 + 24;
      if (a1[47] < 0)
        v20 = *v19;
      v21 = xpc_string_create(v20);
      if (!v21)
        v21 = xpc_null_create();
      xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x24BE05090], v21);
      v22 = xpc_null_create();
      xpc_release(v21);
      xpc_release(v22);
      v23 = a1 + 48;
      if (a1[71] < 0)
        v23 = *(const char **)v23;
      v24 = xpc_string_create(v23);
      if (!v24)
        v24 = xpc_null_create();
      xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x24BE053F0], v24);
      v25 = xpc_null_create();
      xpc_release(v24);
      xpc_release(v25);
      v26 = xpc_string_create((const char *)*MEMORY[0x24BDFC720]);
      if (!v26)
        v26 = xpc_null_create();
      xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x24BE05268], v26);
      v27 = xpc_null_create();
      xpc_release(v26);
      xpc_release(v27);
      v28 = (const void *)*MEMORY[0x24BE055B8];
      v29 = strlen((const char *)*MEMORY[0x24BE055B8]);
      if (v29 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v30 = v29;
      if (v29 >= 0x17)
      {
        v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17)
          v33 = v29 | 7;
        v34 = v33 + 1;
        p_dst = (void **)operator new(v33 + 1);
        v44 = v30;
        v45 = v34 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v45) = v29;
        p_dst = (void **)&__dst;
        if (!v29)
        {
          LOBYTE(__dst) = 0;
          object = v10;
          if (v10)
          {
LABEL_48:
            xpc_retain(v10);
LABEL_54:
            xpc::bridge((xpc *)&object, v32);
            v35 = (void *)cf.__r_.__value_.__r.__words[0];
            if (cf.__r_.__value_.__r.__words[0]
              && (v36 = CFGetTypeID(cf.__r_.__value_.__l.__data_), v36 == CFDictionaryGetTypeID()))
            {
              aBlock = v35;
              CFRetain(v35);
            }
            else
            {
              aBlock = 0;
            }
            v40 = 0;
            Service::broadcastEvent(v3, (uint64_t)&__dst, (const void **)&aBlock, (const void **)&v40);
            if (v40)
              _Block_release(v40);
            if (aBlock)
              CFRelease(aBlock);
            if (cf.__r_.__value_.__r.__words[0])
              CFRelease(cf.__r_.__value_.__l.__data_);
            xpc_release(object);
            if (SHIBYTE(v45) < 0)
            {
              operator delete(__dst);
              v37 = *(NSObject **)(v3 + 88);
              if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
              {
LABEL_66:
                if ((a1[47] & 0x80000000) == 0)
                {
LABEL_67:
                  *(_OWORD *)&cf.__r_.__value_.__l.__data_ = *(_OWORD *)v19;
                  cf.__r_.__value_.__r.__words[2] = *((_QWORD *)a1 + 5);
LABEL_73:
                  LogTracker::houseKeepingLogs_sync(v3, (const char *)&cf);
                  if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(cf.__r_.__value_.__l.__data_);
                  xpc_release(v10);
                  goto LABEL_76;
                }
LABEL_72:
                std::string::__init_copy_ctor_external(&cf, *((const std::string::value_type **)a1 + 3), *((_QWORD *)a1 + 4));
                goto LABEL_73;
              }
            }
            else
            {
              v37 = *(NSObject **)(v3 + 88);
              if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
                goto LABEL_66;
            }
            v38 = (std::string::size_type)(a1 + 24);
            if (a1[47] < 0)
              v38 = (std::string::size_type)*v19;
            LODWORD(cf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)cf.__r_.__value_.__r.__words + 4) = v38;
            _os_log_impl(&dword_24B855000, v37, OS_LOG_TYPE_DEFAULT, "#I TracePostProcessingEnd with timestamp[%s]", (uint8_t *)&cf, 0xCu);
            if ((a1[47] & 0x80000000) == 0)
              goto LABEL_67;
            goto LABEL_72;
          }
LABEL_53:
          object = xpc_null_create();
          goto LABEL_54;
        }
      }
      memmove(p_dst, v28, v30);
      *((_BYTE *)p_dst + v30) = 0;
      object = v10;
      if (v10)
        goto LABEL_48;
      goto LABEL_53;
    }
  }
  else
  {
    v6 = 0;
  }
  v11 = (const void *)*MEMORY[0x24BE055B8];
  v12 = strlen((const char *)*MEMORY[0x24BE055B8]);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = (void **)operator new(v15 + 1);
    v44 = v13;
    v45 = v16 | 0x8000000000000000;
    __dst = v14;
  }
  else
  {
    HIBYTE(v45) = v12;
    v14 = (void **)&__dst;
    if (!v12)
      goto LABEL_21;
  }
  memmove(v14, v11, v13);
LABEL_21:
  *((_BYTE *)v14 + v13) = 0;
  cf.__r_.__value_.__r.__words[0] = 0;
  aBlock = 0;
  Service::broadcastEvent(v3, (uint64_t)&__dst, (const void **)&cf.__r_.__value_.__l.__data_, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf.__r_.__value_.__r.__words[0])
    CFRelease(cf.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45) < 0)
    operator delete(__dst);
  if (v6)
  {
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_76:
  if ((a1[71] & 0x80000000) == 0)
  {
    if ((a1[47] & 0x80000000) == 0)
      goto LABEL_78;
LABEL_82:
    operator delete(*((void **)a1 + 3));
    v39 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    if (!v39)
      goto LABEL_80;
    goto LABEL_79;
  }
  operator delete(*((void **)a1 + 6));
  if (a1[47] < 0)
    goto LABEL_82;
LABEL_78:
  v39 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  if (v39)
LABEL_79:
    std::__shared_weak_count::__release_weak(v39);
LABEL_80:
  operator delete(a1);
}

void sub_24B9171A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, xpc_object_t object, CFTypeRef cf, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __cxx_global_var_init_46()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<LogDumpDB>::~PthreadMutexGuardPolicy, &ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance, &dword_24B855000);
  }
  return result;
}

void ServerClientState::ServerClientState(ServerClientState *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
}

{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
}

std::string **ServerClientState::ServerClientState(std::string **a1, uint64_t a2)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;

  v4 = (std::string *)operator new(0x38uLL);
  v5 = v4;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v5[1].__r_.__value_.__s.__data_[0] = 0;
  v5[2].__r_.__value_.__r.__words[0] = 0;
  v5[1].__r_.__value_.__r.__words[2] = 0;
  v5[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v5[1].__r_.__value_.__r.__words[2];
  *a1 = v5;
  v6 = (std::string *)operator new(0x20uLL);
  v6->__r_.__value_.__r.__words[0] = (std::string::size_type)off_251CBEBD8;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  a1[1] = v6;
  return a1;
}

void sub_24B917490(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24B9174A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void ***ServerClientState::setCheckedIn(void ***result, void **a2)
{
  void **v2;
  __int128 v3;
  size_t v4;
  size_t v5;

  v2 = *result;
  if (*result == a2)
    goto LABEL_5;
  if (*((char *)v2 + 23) < 0)
  {
    v4 = (size_t)a2[1];
    if (*((char *)a2 + 23) >= 0)
    {
      v5 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (void **)*a2;
      v5 = v4;
    }
    result = (void ***)std::string::__assign_no_alias<false>(*result, a2, v5);
    *((_BYTE *)v2 + 24) = 1;
  }
  else
  {
    if ((*((_BYTE *)a2 + 23) & 0x80) == 0)
    {
      v3 = *(_OWORD *)a2;
      v2[2] = a2[2];
      *(_OWORD *)v2 = v3;
LABEL_5:
      *((_BYTE *)v2 + 24) = 1;
      return result;
    }
    result = (void ***)std::string::__assign_no_alias<true>(*result, *a2, (size_t)a2[1]);
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

BOOL ServerClientState::isNotificationRegistered_sync(uint64_t *a1, const void **a2)
{
  uint64_t v2;

  v2 = *a1;
  return v2 + 40 != (_QWORD)std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(*a1 + 32, a2);
}

void ServerClientState::registerNotification_sync(void **a1, int a2, const void **a3)
{
  void *v4;
  const void *v5;
  CFRange v6;
  void (__cdecl *v7)(const void *, void *);

  v4 = *a1;
  v5 = *a3;
  if (*a3)
    CFRetain(v5);
  v6.length = CFArrayGetCount((CFArrayRef)v5);
  if (a2)
    v7 = (void (__cdecl *)(const void *, void *))ServerClientState::State::registerNotificationApplier;
  else
    v7 = (void (__cdecl *)(const void *, void *))ServerClientState::State::unregisterNotificationApplier;
  v6.location = 0;
  CFArrayApplyFunction((CFArrayRef)v5, v6, v7, v4);
  if (v5)
    CFRelease(v5);
}

void sub_24B917628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ServerClientState::getName(ServerClientState *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v2;
  __int128 v3;

  v2 = *(__int128 **)this;
  if (*(char *)(*(_QWORD *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *v2;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

void ServerClientState::State::registerNotificationApplier(ServerClientState::State *this, uint64_t **a2, void *a3)
{
  void *__p[2];
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v6 = 0uLL;
  v7 = 0;
  ctu::cf::assign();
  *(_OWORD *)__p = 0uLL;
  v5 = 0;
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 4, (const void **)__p, (uint64_t)__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_24B9176E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ServerClientState::State::unregisterNotificationApplier(ServerClientState::State *this, _QWORD *a2, void *a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t *v11;
  void *__p[2];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = 0uLL;
  v15 = 0;
  ctu::cf::assign();
  *(_OWORD *)__p = 0uLL;
  v13 = 0;
  v4 = (uint64_t **)(a2 + 4);
  v5 = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>((uint64_t)(a2 + 4), (const void **)__p);
  v6 = v5;
  if (a2 + 5 != v5)
  {
    v7 = (uint64_t *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      v9 = v5;
      do
      {
        v8 = (uint64_t *)v9[2];
        v10 = *v8 == (_QWORD)v9;
        v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v5)
      *v4 = v8;
    v11 = (uint64_t *)a2[5];
    --a2[6];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v6);
    if (*((char *)v6 + 55) < 0)
      operator delete((void *)v6[4]);
    operator delete(v6);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
}

void sub_24B917810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  std::string *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
LABEL_28:
          v20 = operator new(0x38uLL);
          v21 = (std::string *)(v20 + 4);
          if (*(char *)(a3 + 23) < 0)
            goto LABEL_31;
LABEL_29:
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
          v21->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_28;
      }
    }
  }
  v10 = a1 + 1;
  v20 = operator new(0x38uLL);
  v21 = (std::string *)(v20 + 4);
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_31:
  std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
LABEL_32:
  *v20 = 0;
  v20[1] = 0;
  v20[2] = v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_24B9179C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ServerClientState::State *,std::shared_ptr<ServerClientState::State>::__shared_ptr_default_delete<ServerClientState::State,ServerClientState::State>,std::allocator<ServerClientState::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ServerClientState::State *,std::shared_ptr<ServerClientState::State>::__shared_ptr_default_delete<ServerClientState::State,ServerClientState::State>,std::allocator<ServerClientState::State>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    std::__tree<std::string>::destroy(v1 + 32, *(char **)(v1 + 40));
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete((void *)v1);
  }
}

uint64_t std::__shared_ptr_pointer<ServerClientState::State *,std::shared_ptr<ServerClientState::State>::__shared_ptr_default_delete<ServerClientState::State,ServerClientState::State>,std::allocator<ServerClientState::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B95483ALL)
    return a1 + 24;
  if (((v3 & 0x800000024B95483ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B95483ALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B95483ALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::string>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

const char *ABMGetProjectVersion(void)
{
  return "AppleBasebandManager-AppleBasebandServices_Manager-1180";
}

void sub_24B917DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_24B917FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if ((a21 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_24B917FE4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x24B917F44);
}

void sub_24B917FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((a14 & 0x80000000) == 0)
    JUMPOUT(0x24B917FC4);
  JUMPOUT(0x24B917FBCLL);
}

void sub_24B918780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,std::locale a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  void **v57;

  if (a44 < 0)
    operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a57);
  std::vector<std::string>::~vector[abi:ne180100](v57);
  _Unwind_Resume(a1);
}

void sub_24B9189F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  _Unwind_Resume(exception_object);
}

void sub_24B918C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_24B91926C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::list<std::string>::~list(va);
  _Unwind_Resume(a1);
}

void sub_24B919280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, uint64_t a16)
{
  void *v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  operator delete(v17);
  if (a16)
  {
    v19 = a14;
    v20 = (uint64_t)a15;
    v21 = *a15;
    *(_QWORD *)(v21 + 8) = *(_QWORD *)(a14 + 8);
    **(_QWORD **)(v19 + 8) = v21;
    a16 = 0;
    if ((uint64_t *)v20 != &a14)
    {
      do
      {
        v22 = *(uint64_t **)(v20 + 8);
        if (*(char *)(v20 + 39) < 0)
          operator delete(*(void **)(v20 + 16));
        operator delete((void *)v20);
        v20 = (uint64_t)v22;
      }
      while (v22 != &a14);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_24B9197F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      support::ui::NotificationInfo::~NotificationInfo(&a26);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  support::ui::NotificationInfo::~NotificationInfo(&a26);
  _Unwind_Resume(a1);
}

void sub_24B919854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_24B919868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  support::ui::NotificationInfo::~NotificationInfo((void **)&a9);
  support::ui::NotificationInfo::~NotificationInfo(&a20);
  _Unwind_Resume(a1);
}

void sub_24B919884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  support::ui::NotificationInfo::~NotificationInfo((void **)va1);
  _Unwind_Resume(a1);
}

void sub_24B9198A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_24B919A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a19 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  if ((a19 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_24B91A460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, xpc_object_t object,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,xpc_object_t a25,char a26,uint64_t a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_24B91A698(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c16_ZTSN3xpc5arrayE(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c16_ZTSN3xpc5arrayE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
}

void xpc::dict::to_debug_string(xpc::dict *this, uint64_t a2)
{
  char *v3;
  size_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc::dict *v8;

  v3 = (char *)MEMORY[0x24BD2A3F0](a2);
  memset(this, 170, 24);
  v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    v8 = (xpc::dict *)operator new(v6 + 1);
    *((_QWORD *)this + 1) = v5;
    *((_QWORD *)this + 2) = v7 | 0x8000000000000000;
    *(_QWORD *)this = v8;
    this = v8;
    goto LABEL_9;
  }
  *((_BYTE *)this + 23) = v4;
  if (v4)
  {
LABEL_9:
    memcpy(this, v3, v5);
    *((_BYTE *)this + v5) = 0;
    free(v3);
    return;
  }
  *(_BYTE *)this = 0;
  free(v3);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE112c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
    v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
    v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)(a2 + 64);
      v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 80);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
LABEL_6:
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v7;
  }
  v8 = (std::string *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 112), *(_QWORD *)(a2 + 120));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_24B91A8F0(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[111] < 0)
  {
    operator delete(*v4);
    if ((v2[87] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v2[63] & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((v2[87] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((v2[63] & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE112c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(*(void **)(a1 + 40));
    return;
  }
LABEL_8:
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_9;
}

uint64_t TapToRadar::getMode(TapToRadar *this)
{
  return -[ABMTapToRadar getMode](+[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance"), "getMode");
}

uint64_t TapToRadar::setMode(uint64_t a1)
{
  return -[ABMTapToRadar setMode:](+[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance"), "setMode:", a1);
}

void TapToRadar::createRadarIfPossible(xpc_object_t *a1, uint64_t a2)
{
  xpc_object_t value;
  unsigned int v5;
  xpc_object_t v6;
  const char *v7;
  xpc_object_t v8;
  const char *v9;
  xpc_object_t v10;
  const char *v11;
  char v12;
  void *v13;
  std::string *v14;
  void *size;
  const void *v16;
  size_t v17;
  int v18;
  size_t v19;
  std::string::size_type v20;
  size_t v21;
  std::string *p_dst;
  void **v23;
  xpc_object_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  NSObject *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  std::string *v36;
  void *v37;
  config::hw *v38;
  ABMTapToRadar *v39;
  uint64_t v40;
  ABMTapToRadar *v41;
  uint64_t v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  uint64_t v48;
  uint64_t v49;
  std::string __dst;
  std::string v51;
  void *__p[3];
  std::string v53;
  void *v54[3];
  unsigned int v55;
  uint8_t buf[8];
  uint64_t v57;
  void (*v58)(uint64_t);
  void *v59;
  uint64_t *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
    && -[ABMTapToRadar getMode](+[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance"), "getMode"))
  {
    v55 = -1431655766;
    value = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x24BE04E78]);
    *(_QWORD *)buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)buf = xpc_null_create();
    v5 = xpc::dyn_cast_or_default((xpc *)buf, (const object *)7);
    xpc_release(*(xpc_object_t *)buf);
    v55 = v5;
    memset(v54, 170, sizeof(v54));
    v6 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x24BE05090]);
    *(_QWORD *)buf = v6;
    if (v6)
      xpc_retain(v6);
    else
      *(_QWORD *)buf = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)buf, (const object *)"", v7);
    xpc_release(*(xpc_object_t *)buf);
    memset(&v53, 170, sizeof(v53));
    v8 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x24BE053F0]);
    *(_QWORD *)buf = v8;
    if (v8)
      xpc_retain(v8);
    else
      *(_QWORD *)buf = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)buf, (const object *)"", v9);
    xpc_release(*(xpc_object_t *)buf);
    memset(__p, 170, sizeof(__p));
    v10 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x24BE052D8]);
    *(_QWORD *)buf = v10;
    if (v10)
      xpc_retain(v10);
    else
      *(_QWORD *)buf = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)buf, (const object *)"", v11);
    xpc_release(*(xpc_object_t *)buf);
    memset(&v51, 170, sizeof(v51));
    v12 = HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) >= 0)
      v13 = (void *)HIBYTE(__p[2]);
    else
      v13 = __p[1];
    v14 = (std::string *)__p;
    if (!v13)
    {
      v14 = &v53;
      v12 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    if (v12 < 0)
    {
      if (v13)
        size = __p[1];
      else
        size = (void *)v53.__r_.__value_.__l.__size_;
      std::string::__init_copy_ctor_external(&v51, v14->__r_.__value_.__l.__data_, (std::string::size_type)size);
    }
    else
    {
      v51 = *v14;
    }
    v16 = (const void *)*MEMORY[0x24BDFC718];
    v17 = strlen((const char *)*MEMORY[0x24BDFC718]);
    v18 = SHIBYTE(v54[2]);
    if (SHIBYTE(v54[2]) >= 0)
      v19 = HIBYTE(v54[2]);
    else
      v19 = (size_t)v54[1];
    v20 = v19 + v17;
    memset(&__dst, 170, sizeof(__dst));
    if (v19 + v17 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v21 = v17;
    if (v20 > 0x16)
    {
      v25 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v25 = v20 | 7;
      v26 = v25 + 1;
      p_dst = (std::string *)operator new(v25 + 1);
      __dst.__r_.__value_.__l.__size_ = v20;
      __dst.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      if (!v21)
      {
LABEL_34:
        if (v19)
        {
          if (v18 >= 0)
            v23 = v54;
          else
            v23 = (void **)v54[0];
          memmove((char *)p_dst + v21, v23, v19);
        }
        p_dst->__r_.__value_.__s.__data_[v21 + v19] = 0;
        v24 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x24BE052E0]);
        *(_QWORD *)buf = v24;
        if (v24)
          xpc_retain(v24);
        else
          *(_QWORD *)buf = xpc_null_create();
        v27 = xpc::dyn_cast_or_default((xpc *)buf, 0);
        xpc_release(*(xpc_object_t *)buf);
        {
          __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
        }
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        v57 = 0x40000000;
        v58 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
        v59 = &__block_descriptor_tmp_13_5;
        v60 = &GetABMLogServer(void)::sLogServer;
        if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
        {
          v29 = *(std::__shared_weak_count **)algn_2579B8AE8;
          v48 = GetABMLogServer(void)::sLogServer;
          v49 = *(_QWORD *)algn_2579B8AE8;
          if (!*(_QWORD *)algn_2579B8AE8)
            goto LABEL_51;
        }
        else
        {
          dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
          v29 = *(std::__shared_weak_count **)algn_2579B8AE8;
          v48 = GetABMLogServer(void)::sLogServer;
          v49 = *(_QWORD *)algn_2579B8AE8;
          if (!*(_QWORD *)algn_2579B8AE8)
            goto LABEL_51;
        }
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldxr(p_shared_owners);
        while (__stxr(v31 + 1, p_shared_owners));
LABEL_51:
        v32 = *((_QWORD *)GetGlobalLogger(&v48) + 4);
        if (!v29)
          goto LABEL_55;
        v33 = (unint64_t *)&v29->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            goto LABEL_59;
        }
        else
        {
LABEL_55:
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            goto LABEL_59;
        }
        v35 = -[ABMTapToRadar getMode](+[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance"), "getMode");
        v36 = &v51;
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v36 = (std::string *)v51.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v35;
        LOWORD(v57) = 1024;
        *(_DWORD *)((char *)&v57 + 2) = v55;
        HIWORD(v57) = 2080;
        v58 = (void (*)(uint64_t))v36;
        LOWORD(v59) = 1024;
        *(_DWORD *)((char *)&v59 + 2) = v27;
        _os_log_impl(&dword_24B855000, v32, OS_LOG_TYPE_DEFAULT, "#I check TTR: mode[%d], radar type[%d], title[%s], MTBF=%d", buf, 0x1Eu);
LABEL_59:
        v37 = (void *)HIBYTE(v54[2]);
        if (SHIBYTE(v54[2]) < 0)
          v37 = v54[1];
        if (!v37)
          goto LABEL_90;
        v38 = (config::hw *)-[ABMTapToRadar checkNotificationCriteria:::](+[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance"), "checkNotificationCriteria:::", &v55, &v51, v27);
        if (!(_DWORD)v38)
          goto LABEL_90;
        if ((config::hw::watch(v38) & 1) == 0)
        {
          v41 = +[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance");
          v42 = v55;
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v47, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
          else
            v47 = v53;
          -[ABMTapToRadar showUserNotification:dumpReason:](v41, "showUserNotification:dumpReason:", v42, &v47);
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v47.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_91;
            goto LABEL_77;
          }
          goto LABEL_90;
        }
        v39 = +[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance");
        v40 = v55;
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v46, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&v45, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
LABEL_72:
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v44, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
            else
              v44 = __dst;
            if (*(char *)(a2 + 23) < 0)
              std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
            else
              v43 = *(std::string *)a2;
            -[ABMTapToRadar showNotification:::::](v39, "showNotification:::::", v40, &v46, &v45, &v44, &v43);
            if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v43.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_88:
                if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_89;
LABEL_98:
                operator delete(v45.__r_.__value_.__l.__data_);
                if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_99;
LABEL_90:
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_91;
                goto LABEL_77;
              }
            }
            else if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_88;
            }
            operator delete(v44.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_89:
              if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_90;
LABEL_99:
              operator delete(v46.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_91:
                if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_92:
                  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
                  {
LABEL_93:
                    if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_94:
                      if ((SHIBYTE(v54[2]) & 0x80000000) == 0)
                        return;
LABEL_81:
                      operator delete(v54[0]);
                      return;
                    }
LABEL_80:
                    operator delete(v53.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v54[2]) & 0x80000000) == 0)
                      return;
                    goto LABEL_81;
                  }
LABEL_79:
                  operator delete(__p[0]);
                  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_94;
                  goto LABEL_80;
                }
LABEL_78:
                operator delete(v51.__r_.__value_.__l.__data_);
                if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
                  goto LABEL_93;
                goto LABEL_79;
              }
LABEL_77:
              operator delete(__dst.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_92;
              goto LABEL_78;
            }
            goto LABEL_98;
          }
        }
        else
        {
          v46 = v51;
        }
        v45 = v51;
        goto LABEL_72;
      }
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19 + v17;
      if (!v17)
        goto LABEL_34;
    }
    memcpy(p_dst, v16, v21);
    goto LABEL_34;
  }
}

void sub_24B91B1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;

  if (a35 < 0)
    operator delete(__p);
  if (a50 < 0)
  {
    operator delete(a45);
    if ((a56 & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((a56 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a63 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  operator delete(a51);
  if ((a63 & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v63 - 177) < 0)
      operator delete(*(void **)(v63 - 200));
    if (*(char *)(v63 - 153) < 0)
      operator delete(*(void **)(v63 - 176));
    _Unwind_Resume(a1);
  }
LABEL_6:
  operator delete(a58);
  goto LABEL_7;
}

std::string *std::vector<std::string>::__emplace_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  void **v14;
  std::string *v16;
  std::string *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    v11 = v10 + 1;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((_QWORD *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_24B91B584(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *BasebandCrashReasonFilter::create@<X0>(_QWORD *a1@<X8>)
{
  BasebandCrashReasonFilter *v3;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  v3 = (BasebandCrashReasonFilter *)operator new(0x60uLL);
  BasebandCrashReasonFilter::BasebandCrashReasonFilter(v3);
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  return std::shared_ptr<BasebandCrashReasonFilter>::shared_ptr[abi:ne180100]<BasebandCrashReasonFilter,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1},void>(a1, (uint64_t)v3);
}

void sub_24B91B5E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void BasebandCrashReasonFilter::~BasebandCrashReasonFilter(BasebandCrashReasonFilter *this)
{
  char *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  uint8_t v13[16];

  *(_QWORD *)this = off_251CBED20;
  v2 = (char *)this + 40;
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I Gone!", v13, 2u);
  }
  v4 = *((_QWORD *)this + 9);
  if (v4)
  {
    v5 = *((_QWORD *)this + 10);
    v6 = (void *)*((_QWORD *)this + 9);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 9) < 0)
          operator delete(*(void **)(v5 - 32));
        v5 -= 32;
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v4;
    operator delete(v6);
  }
  v7 = *((_QWORD *)this + 6);
  if (v7)
  {
    v8 = *((_QWORD *)this + 7);
    v9 = (void *)*((_QWORD *)this + 6);
    if (v8 != v7)
    {
      do
      {
        if (*(char *)(v8 - 9) < 0)
          operator delete(*(void **)(v8 - 32));
        v8 -= 32;
      }
      while (v8 != v7);
      v9 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v7;
    operator delete(v9);
  }
  MEMORY[0x24BD2937C](v2);
  v10 = *((_QWORD *)this + 4);
  if (v10)
    dispatch_release(v10);
  v11 = *((_QWORD *)this + 3);
  if (v11)
    dispatch_release(v11);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
}

{
  void *v1;

  BasebandCrashReasonFilter::~BasebandCrashReasonFilter(this);
  operator delete(v1);
}

void BasebandCrashReasonFilter::BasebandCrashReasonFilter(BasebandCrashReasonFilter *this)
{
  NSObject *initially_inactive;
  NSObject *v3;
  void **v4;
  NSObject *v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  __int128 v13;
  char v14[8];

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v12, "com.apple.telephony.abm", "bb.crashreason.fltr");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v3 = dispatch_queue_create_with_target_V2("BasebandCrashReasonFilter", initially_inactive, 0);
  dispatch_set_qos_class_floor(v3, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v3);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    *((_QWORD *)this + 4) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((BasebandCrashReasonFilter *)((char *)this + 40), (const ctu::OsLogLogger *)v14);
  MEMORY[0x24BD2937C](v14);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v12);
  *(_QWORD *)this = off_251CBED20;
  *((_OWORD *)this + 3) = 0u;
  v4 = (void **)((char *)this + 48);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  v5 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12) = 0;
    _os_log_impl(&dword_24B855000, v5, OS_LOG_TYPE_DEFAULT, "#I initializing baseband crash reason patterns and masks from preferences file", (uint8_t *)&v12, 2u);
  }
  BasebandCrashReasonFilter::readBasebandCrashReasonPatternsFromPreferences(this, &v12);
  v6 = (void **)*v4;
  if (*v4)
  {
    v7 = (void **)*((_QWORD *)this + 7);
    v8 = *v4;
    if (v7 != v6)
    {
      do
      {
        if (*((char *)v7 - 9) < 0)
          operator delete(*(v7 - 4));
        v7 -= 4;
      }
      while (v7 != v6);
      v8 = *v4;
    }
    *((_QWORD *)this + 7) = v6;
    operator delete(v8);
    *v4 = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
  }
  v9 = v12;
  *((_QWORD *)this + 6) = v12;
  v10 = (void *)v13;
  *(_OWORD *)((char *)this + 56) = v13;
  if (v10 == v9)
  {
    v11 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      _os_log_impl(&dword_24B855000, v11, OS_LOG_TYPE_DEFAULT, "#I default pattern masks for baseband crash reason patterns and masks will be used", (uint8_t *)&v12, 2u);
    }
    std::vector<ResetInfo::RegexPatternAndReasonMask>::__assign_with_size[abi:ne180100]<ResetInfo::RegexPatternAndReasonMask*,ResetInfo::RegexPatternAndReasonMask*>((void **)this + 6, *((void ***)this + 9), *((char **)this + 10), (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 5);
  }
}

void sub_24B91B944(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100]((void **)(v1 + 72));
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](v3);
  ctu::SharedLoggable<TraceCAReporter,ctu::OsLogLogger>::~SharedLoggable(v2);
  _Unwind_Resume(a1);
}

void BasebandCrashReasonFilter::readBasebandCrashReasonPatternsFromPreferences(BasebandCrashReasonFilter *this@<X0>, void **a2@<X8>)
{
  _QWORD *v4;
  uint64_t (***v5)(_QWORD, uint64_t);
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const __CFArray *v16;
  CFTypeRef v17;
  void **v18;
  void **i;
  NSObject *v20;
  CFArrayRef v21;
  void *__p[4];
  uint64_t v23;
  std::__shared_weak_count *v24;
  CFTypeRef cf;
  const __CFArray *v26;

  v26 = 0;
  cf = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_2579B86F8)
  {
    v5 = (uint64_t (***)(_QWORD, uint64_t))operator new(0x18uLL);
    MEMORY[0x24BD294B4](v5, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x24BDBD590]);
    v4 = operator new(0x20uLL);
    *v4 = &unk_251CBBBA8;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v5;
    v6 = (std::__shared_weak_count *)off_2579B8700;
    qword_2579B86F8 = (uint64_t)v5;
    off_2579B8700 = v4;
    if (!v6)
    {
      v23 = (uint64_t)v5;
      v24 = (std::__shared_weak_count *)v4;
LABEL_10:
      v9 = v4 + 1;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      goto LABEL_12;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v5 = (uint64_t (***)(_QWORD, uint64_t))qword_2579B86F8;
  v4 = off_2579B8700;
  v23 = qword_2579B86F8;
  v24 = (std::__shared_weak_count *)off_2579B8700;
  if (off_2579B8700)
    goto LABEL_10;
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_24B9548A0;
  strcpy((char *)__p[0], "BasebandCrashReasonRegexPatterns");
  v11 = Preferences::getPreference<__CFArray const*>(v5, (const char *)__p, &v26);
  if (v26)
    v12 = v11;
  else
    v12 = 0;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v13 = v24;
  if (!v24)
    goto LABEL_21;
  v14 = (unint64_t *)&v24->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v12)
      goto LABEL_22;
  }
  else
  {
LABEL_21:
    if (v12)
    {
LABEL_22:
      v16 = v26;
      v17 = cf;
      cf = v26;
      if (v17)
        CFRelease(v17);
      v21 = v16;
      if (v16)
        CFRetain(v16);
      BasebandCrashReasonFilter::convertBasebandCrashReasonPatternsFromCFSharedArrayToVector(&v21, __p);
      v18 = (void **)*a2;
      if (*a2)
      {
        for (i = (void **)a2[1]; i != v18; i -= 4)
        {
          if (*((char *)i - 9) < 0)
            operator delete(*(i - 4));
        }
        operator delete(v18);
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
      }
      *(_OWORD *)a2 = *(_OWORD *)__p;
      a2[2] = __p[2];
      memset(__p, 0, 24);
      if (v16)
        CFRelease(v16);
      goto LABEL_38;
    }
  }
  v20 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl(&dword_24B855000, v20, OS_LOG_TYPE_DEFAULT, "#I no baseband crash reason patterns entry found in ABMProperties", (uint8_t *)__p, 2u);
  }
LABEL_38:
  if (cf)
    CFRelease(cf);
}

uint64_t BasebandCrashReasonFilter::shouldSetSCD(uint64_t a1, uint64_t a2)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, a2, (__int128 **)(a1 + 48));
}

uint64_t BasebandCrashReasonFilter::shouldSetCOF(uint64_t a1, uint64_t a2)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, a2, (__int128 **)(a1 + 48));
}

uint64_t BasebandCrashReasonFilter::readBasebandCrashReasonPatternsFromFactoryFile@<X0>(_QWORD *a1@<X8>)
{
  const __CFArray *v3;
  uint64_t v4;
  CFArrayRef v6;
  __CFString *v7[2];
  uint64_t v8;
  const __CFArray *v9;
  _QWORD v10[3];

  memset(v10, 170, sizeof(v10));
  MEMORY[0x24BD294B4](v10, CFSTR("/AppleInternal/Cellular/Factory/BasebandCOFSCD.plist"), *MEMORY[0x24BDBD590]);
  v9 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v7, "BasebandCrashReasonRegexPatterns");
  v3 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v10, v7[0]);
  MEMORY[0x24BD29478](v7);
  v9 = v3;
  v6 = v3;
  if (v3)
    CFRetain(v3);
  BasebandCrashReasonFilter::convertBasebandCrashReasonPatternsFromCFSharedArrayToVector(&v6, (void **)v7);
  v4 = v8;
  *(_OWORD *)a1 = *(_OWORD *)v7;
  a1[2] = v4;
  v7[1] = 0;
  v8 = 0;
  v7[0] = 0;
  if (v3)
  {
    CFRelease(v3);
    CFRelease(v3);
  }
  return MEMORY[0x24BD294C0](v10);
}

void sub_24B91BDF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  uint64_t v3;
  const void *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, const void *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](v2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va1);
  MEMORY[0x24BD294C0](v3 - 40);
  _Unwind_Resume(a1);
}

void BasebandCrashReasonFilter::convertBasebandCrashReasonPatternsFromCFSharedArrayToVector(CFArrayRef *a1@<X1>, void **a2@<X8>)
{
  CFArrayRef *v2;
  unint64_t Count;
  void **v4;
  void **v5;
  void **v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  void **v12;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v15;
  CFTypeID v16;
  int Int;
  unint64_t v18;
  void **v19;
  __int128 v20;
  unint64_t v21;
  void **v22;
  uint64_t v23;
  unint64_t v24;
  CFArrayRef *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  void **v33;
  int v34;
  std::string __p;
  int v37;
  std::string v38;
  _QWORD v39[2];
  const void *v40;
  uint64_t v41;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!*a1)
    return;
  v2 = a1;
  Count = CFArrayGetCount(*a1);
  v4 = a2;
  v5 = (void **)*a2;
  if (Count > ((_BYTE *)a2[2] - (_BYTE *)*a2) >> 5)
  {
    v6 = (void **)a2[1];
    v7 = (char *)operator new(32 * Count);
    v8 = &v7[32 * Count];
    v9 = &v7[(char *)v6 - (char *)v5];
    if (v6 == v5)
    {
      v4 = a2;
      *a2 = v9;
      a2[1] = v9;
      a2[2] = v8;
      if (v5)
LABEL_12:
        operator delete(v5);
    }
    else
    {
      v10 = &v7[(char *)v6 - (char *)v5];
      do
      {
        v11 = *((_OWORD *)v6 - 2);
        *((_QWORD *)v10 - 2) = *(v6 - 2);
        *((_OWORD *)v10 - 2) = v11;
        *(v6 - 3) = 0;
        *(v6 - 2) = 0;
        *(v6 - 4) = 0;
        *((_DWORD *)v10 - 2) = *((_DWORD *)v6 - 2);
        v10 -= 32;
        v6 -= 4;
      }
      while (v6 != v5);
      v5 = (void **)*a2;
      v12 = (void **)a2[1];
      *a2 = v10;
      a2[1] = v9;
      a2[2] = v8;
      while (v12 != v5)
      {
        if (*((char *)v12 - 9) < 0)
          operator delete(*(v12 - 4));
        v12 -= 4;
      }
      v4 = a2;
      if (v5)
        goto LABEL_12;
    }
  }
  if (Count)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*v2, i);
      v15 = ValueAtIndex;
      if (ValueAtIndex && (v16 = CFGetTypeID(ValueAtIndex), v16 == CFDictionaryGetTypeID()))
      {
        v40 = v15;
        CFRetain(v15);
      }
      else
      {
        v15 = 0;
        v40 = 0;
      }
      v39[0] = 0xAAAAAAAAAAAAAAAALL;
      v39[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v39, (const __CFDictionary *)v15);
      memset(&v38, 170, sizeof(v38));
      memset(&__p, 0, sizeof(__p));
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v41, "BasebandCrashReasonRegexPattern");
      ctu::cf::map_adapter::getString();
      MEMORY[0x24BD29478](&v41);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, "BasebandCrashReasonRegexPatternMask");
      Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v39, (const __CFString *)__p.__r_.__value_.__l.__data_);
      MEMORY[0x24BD29478](&__p);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
      else
        __p = v38;
      v37 = Int;
      v19 = (void **)v4[1];
      v18 = (unint64_t)v4[2];
      if ((unint64_t)v19 < v18)
      {
        v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v19[2] = (void *)__p.__r_.__value_.__r.__words[2];
        *(_OWORD *)v19 = v20;
        memset(&__p, 0, sizeof(__p));
        *((_DWORD *)v19 + 6) = v37;
        v4[1] = v19 + 4;
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_42;
        goto LABEL_50;
      }
      v21 = Count;
      v22 = (void **)*v4;
      v23 = ((char *)v19 - (char *)v22) >> 5;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 59)
        std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
      v25 = v2;
      v26 = v18 - (_QWORD)v22;
      if (v26 >> 4 > v24)
        v24 = v26 >> 4;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0)
        v27 = 0x7FFFFFFFFFFFFFFLL;
      else
        v27 = v24;
      if (v27 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v28 = (char *)operator new(32 * v27);
      v29 = &v28[32 * v23];
      *(std::string *)v29 = __p;
      v30 = &v28[32 * v27];
      memset(&__p, 0, sizeof(__p));
      *((_DWORD *)v29 + 6) = Int;
      v31 = v29 + 32;
      if (v19 == v22)
      {
        v4 = a2;
        *a2 = v29;
        a2[1] = v31;
        a2[2] = v30;
        v2 = v25;
        Count = v21;
        if (v19)
          goto LABEL_39;
      }
      else
      {
        do
        {
          v32 = *((_OWORD *)v19 - 2);
          *((_QWORD *)v29 - 2) = *(v19 - 2);
          *((_OWORD *)v29 - 2) = v32;
          *(v19 - 3) = 0;
          *(v19 - 2) = 0;
          *(v19 - 4) = 0;
          *((_DWORD *)v29 - 2) = *((_DWORD *)v19 - 2);
          v29 -= 32;
          v19 -= 4;
        }
        while (v19 != v22);
        v19 = (void **)*a2;
        v33 = (void **)a2[1];
        *a2 = v29;
        a2[1] = v31;
        a2[2] = v30;
        v2 = v25;
        for (Count = v21; v33 != v19; v33 -= 4)
        {
          if (*((char *)v33 - 9) < 0)
            operator delete(*(v33 - 4));
        }
        v4 = a2;
        if (v19)
LABEL_39:
          operator delete(v19);
      }
      v34 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      v4[1] = v31;
      if (v34 < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_42:
          MEMORY[0x24BD294A8](v39);
          if (!v15)
            continue;
LABEL_51:
          CFRelease(v15);
          continue;
        }
      }
      else if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_42;
      }
LABEL_50:
      operator delete(v38.__r_.__value_.__l.__data_);
      MEMORY[0x24BD294A8](v39);
      if (v15)
        goto LABEL_51;
    }
  }
}

void sub_24B91C260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void sub_24B91C278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,const void *a27)
{
  if (a24 < 0)
    operator delete(__p);
  MEMORY[0x24BD294A8](&a25);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a27);
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void sub_24B91C310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<BasebandCrashReasonFilter>::shared_ptr[abi:ne180100]<BasebandCrashReasonFilter,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_251CBEDD8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_24B91C42C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1}::operator() const(BasebandCrashReasonFilter*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_24B91C44C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<BasebandCrashReasonFilter *,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter *)#1},std::allocator<BasebandCrashReasonFilter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandCrashReasonFilter *,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter *)#1},std::allocator<BasebandCrashReasonFilter>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1}::operator() const(BasebandCrashReasonFilter*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BasebandCrashReasonFilter *,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter *)#1},std::allocator<BasebandCrashReasonFilter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI25BasebandCrashReasonFilterE15make_shared_ptrIS1_EENSt3__110shared_ptr"
                     "IT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI25BasebandCrashReasonFilterE15make_shared_ptrIS1_EENSt3__11"
                                "0shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI25BasebandCrashReasonFilterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI25BasebandCrashReasonFilterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1}::operator() const(BasebandCrashReasonFilter*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t __cxx_global_var_init_9()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_24B855000);
  }
  return result;
}

void TransportModule::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  _QWORD v43[2];
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  void *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t block;
  uint64_t v53;
  _QWORD *(*v54)(uint64_t);
  void *v55;
  uint64_t v56;
  uint64_t **v57;

  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v6 = operator new(0xE8uLL);
  v7 = v6;
  v8 = *a1;
  v9 = (std::__shared_weak_count *)a1[1];
  v44 = v8;
  v45 = v9;
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  v12 = *a2;
  v13 = (std::__shared_weak_count *)a2[1];
  v43[0] = v12;
  v43[1] = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  TransportModule::TransportModule((uint64_t)v6, &v44, v43);
  *a3 = v7;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v16 = (std::__shared_weak_count *)operator new(0x20uLL);
  v16->__shared_owners_ = 0;
  v17 = (unint64_t *)&v16->__shared_owners_;
  v16->__vftable = (std::__shared_weak_count_vtbl *)off_251CBF258;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  a3[1] = v16;
  v18 = (std::__shared_weak_count *)*((_QWORD *)v7 + 16);
  if (v18)
  {
    if (v18->__shared_owners_ != -1)
      goto LABEL_19;
    do
      v19 = __ldxr(v17);
    while (__stxr(v19 + 1, v17));
    v20 = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    *((_QWORD *)v7 + 15) = v7;
    *((_QWORD *)v7 + 16) = v16;
    std::__shared_weak_count::__release_weak(v18);
  }
  else
  {
    do
      v22 = __ldxr(v17);
    while (__stxr(v22 + 1, v17));
    v23 = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    *((_QWORD *)v7 + 15) = v7;
    *((_QWORD *)v7 + 16) = v16;
  }
  do
    v25 = __ldaxr(v17);
  while (__stlxr(v25 - 1, v17));
  if (v25)
  {
LABEL_19:
    v26 = (_QWORD *)*a3;
    if (!*(_QWORD *)(*a3 + 104))
      goto LABEL_35;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  v26 = (_QWORD *)*a3;
  if (!*(_QWORD *)(*a3 + 104))
    goto LABEL_35;
LABEL_20:
  v27 = (std::__shared_weak_count *)v26[16];
  if (!v27 || (v28 = v26[15], (v29 = std::__shared_weak_count::lock(v27)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v30 = v29;
  block = v28;
  v53 = (uint64_t)v29;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v26 + 7));
  v31 = v28 + 48;
  if (!v28)
    v31 = 0;
  v46 = v31;
  v47 = (uint64_t)v30;
  block = 0;
  v53 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  v32 = (std::__shared_weak_count *)v47;
  if (v47)
  {
    v33 = (unint64_t *)(v47 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)v53;
  if (v53)
  {
    v36 = (unint64_t *)(v53 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
LABEL_35:
  if (v13)
  {
    v38 = (unint64_t *)&v13->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v40 = *a3;
  v41 = *a3 + 120;
  v46 = MEMORY[0x24BDAC760];
  v47 = 0x40000000;
  v48 = ___ZN15TransportModule4initEv_block_invoke;
  v49 = &__block_descriptor_tmp_18;
  v50 = v40;
  v51 = &v46;
  block = MEMORY[0x24BDAC760];
  v53 = 0x40000000;
  v54 = ___ZNK3ctu20SharedSynchronizableI15TransportModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v55 = &__block_descriptor_tmp_51_2;
  v56 = v41;
  v57 = &v51;
  v42 = *(NSObject **)(v40 + 136);
  if (*(_QWORD *)(v40 + 144))
    dispatch_async_and_wait(v42, &block);
  else
    dispatch_sync(v42, &block);
}

void sub_24B91C850()
{
  __break(1u);
}

void sub_24B91C894()
{
  __cxa_end_catch();
  JUMPOUT(0x24B91C8BCLL);
}

void sub_24B91C8A4()
{
  JUMPOUT(0x24B91C8C0);
}

void TransportModule::init(TransportModule *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = ___ZN15TransportModule4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_18;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15TransportModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_51_2;
  block[4] = (char *)this + 120;
  block[5] = &v4;
  v2 = (char *)this + 136;
  v1 = *((_QWORD *)this + 17);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

uint64_t TransportModule::TransportModule(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unsigned __int8 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  NSObject *initially_inactive;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  xpc_object_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  xpc_object_t v26;
  void *v27;
  xpc_object_t v28;
  void *v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v49;
  _BYTE v50[16];
  __int128 v51;
  uint64_t block;
  uint64_t v53;
  void (*v54)(uint64_t);
  void *v55;
  uint64_t *v56;

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_251CC0DB8;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(_QWORD *)a1 = &unk_251CB9EC8;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_251CB9EC8;
    *(_QWORD *)(a1 + 8) = v5;
  }
  *(_QWORD *)a1 = off_251CBEE28;
  *(_QWORD *)(a1 + 48) = &unk_251CBEE98;
  v11 = (_QWORD *)(a1 + 48);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v50, "com.apple.telephony.abm", "ipc.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  block = MEMORY[0x24BDAC760];
  v53 = 0x40000000;
  v54 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v55 = &__block_descriptor_tmp_13_5;
  v56 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v14 = GetABMLogServer(void)::sLogServer;
    v13 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (*(_QWORD *)algn_2579B8AE8)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v14 = GetABMLogServer(void)::sLogServer;
    v13 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (*(_QWORD *)algn_2579B8AE8)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v18 = dispatch_queue_create_with_target_V2("ipc.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v18, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v18);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v18;
  if (v18)
  {
    dispatch_retain(v18);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v18);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_251CBF218;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&block);
  *(_QWORD *)(a1 + 56) = &unk_251CB85F0;
  *(_QWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 112) = v13;
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v51);
    *v11 = off_251CBF2A8;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v51);
    *v11 = off_251CBF2A8;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v50);
  *(_QWORD *)a1 = off_251CBEE28;
  *(_QWORD *)(a1 + 48) = &unk_251CBEE98;
  *(_DWORD *)(a1 + 152) = 0;
  v22 = xpc_null_create();
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = *a3;
  *(_QWORD *)(a1 + 160) = v22;
  v23 = a3[1];
  *(_QWORD *)(a1 + 224) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = xpc_null_create();
  v27 = v26;
  *(_DWORD *)(a1 + 152) = 1;
  if (v26)
  {
    xpc_retain(v26);
    v28 = v27;
  }
  else
  {
    v28 = xpc_null_create();
  }
  v29 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v28;
  xpc_release(v29);
  xpc_release(v27);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  block = MEMORY[0x24BDAC760];
  v53 = 0x40000000;
  v54 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v55 = &__block_descriptor_tmp_13_5;
  v56 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v31 = GetABMLogServer(void)::sLogServer;
    v32 = *(_QWORD *)algn_2579B8AE8;
    v49 = *(std::__shared_weak_count **)algn_2579B8AE8;
    if (*(_QWORD *)algn_2579B8AE8)
      goto LABEL_34;
LABEL_42:
    block = v31;
    v53 = v32;
    goto LABEL_43;
  }
  dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
  v31 = GetABMLogServer(void)::sLogServer;
  v32 = *(_QWORD *)algn_2579B8AE8;
  v49 = *(std::__shared_weak_count **)algn_2579B8AE8;
  if (!*(_QWORD *)algn_2579B8AE8)
    goto LABEL_42;
LABEL_34:
  v33 = (unint64_t *)(v32 + 8);
  do
    v34 = __ldxr(v33);
  while (__stxr(v34 + 1, v33));
  block = v31;
  v53 = v32;
  do
    v35 = __ldxr(v33);
  while (__stxr(v35 + 1, v33));
LABEL_43:
  data::TransportService::State::create((capabilities::abs *)&block, (uint64_t)&v51);
  v36 = (std::__shared_weak_count *)v53;
  if (v53)
  {
    v37 = (unint64_t *)(v53 + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v51;
  v51 = 0uLL;
  v40 = *(std::__shared_weak_count **)(a1 + 192);
  *(_OWORD *)(a1 + 184) = v39;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v49)
  {
    v46 = (unint64_t *)&v49->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  return a1;
}

void sub_24B91CF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  Service *v19;
  _QWORD *v20;
  xpc_object_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v27 = a19;
  if (a19)
  {
    p_shared_owners = (unint64_t *)&a19->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v25);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v22);
  WakeReason::~WakeReason(v21);
  ctu::SharedLoggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v20);
  Service::~Service(v19);
  _Unwind_Resume(a1);
}

void sub_24B91CF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  Service *v3;
  _QWORD *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v4);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v3);
  _Unwind_Resume(a1);
}

void sub_24B91CFD4(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void WakeReason::~WakeReason(xpc_object_t *this)
{
  xpc_release(this[1]);
  this[1] = 0;
}

_QWORD *ctu::SharedLoggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBF218;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBF218;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void TransportModule::~TransportModule(TransportModule *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  uint8_t v22[16];

  *(_QWORD *)this = off_251CBEE28;
  *((_QWORD *)this + 6) = &unk_251CBEE98;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v22, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  xpc_release(*((xpc_object_t *)this + 20));
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 6) = off_251CBF218;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v15 = *((_QWORD *)this + 18);
  if (v15)
    dispatch_release(v15);
  v16 = *((_QWORD *)this + 17);
  if (v16)
    dispatch_release(v16);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  *(_QWORD *)this = off_251CC0DB8;
  v18 = *((_QWORD *)this + 3);
  if (v18)
  {
    v19 = *((_QWORD *)this + 4);
    v20 = (void *)*((_QWORD *)this + 3);
    if (v19 != v18)
    {
      do
      {
        if (*(char *)(v19 - 1) < 0)
          operator delete(*(void **)(v19 - 24));
        v19 -= 24;
      }
      while (v19 != v18);
      v20 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v18;
    operator delete(v20);
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
}

{
  void *v1;

  TransportModule::~TransportModule(this);
  operator delete(v1);
}

void `non-virtual thunk to'TransportModule::~TransportModule(TransportModule *this)
{
  TransportModule::~TransportModule((TransportModule *)((char *)this - 48));
}

{
  void *v1;

  TransportModule::~TransportModule((TransportModule *)((char *)this - 48));
  operator delete(v1);
}

const char *TransportModule::getName(TransportModule *this)
{
  return "ipc.mod";
}

void ___ZN15TransportModule4initEv_block_invoke(uint64_t a1)
{
  TransportModule::configureWakeEventPktDelay_sync(*(TransportModule **)(a1 + 32));
}

void TransportModule::configureWakeEventPktDelay_sync(TransportModule *this)
{
  NSObject *v2;
  int *v3;
  char *v4;
  const char *v5;
  int v6;
  int *v7;
  char *v8;
  size_t v9;
  int v10;
  int v11;
  uint8_t buf[4];
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = -1431655766;
  v9 = 4;
  if (sysctlbyname("net.link.generic.system.port_used.wake_pkt_event_delay_if_families", &v11, &v9, 0, 0))
  {
    v2 = *((_QWORD *)this + 11);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      return;
    v3 = __error();
    v4 = strerror(*v3);
    *(_DWORD *)buf = 136315138;
    v13 = v4;
    v5 = "Failed to get current sysctl value, error: (%s)";
LABEL_7:
    _os_log_error_impl(&dword_24B855000, v2, OS_LOG_TYPE_ERROR, v5, buf, 0xCu);
    return;
  }
  v10 = v11 | 0x8000;
  v6 = sysctlbyname("net.link.generic.system.port_used.wake_pkt_event_delay_if_families", 0, 0, &v10, 4uLL);
  v2 = *((_QWORD *)this + 11);
  if (v6)
  {
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      return;
    v7 = __error();
    v8 = strerror(*v7);
    *(_DWORD *)buf = 136315138;
    v13 = v8;
    v5 = "Failed to configure in-band wake packet event, error (%s)";
    goto LABEL_7;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v2, OS_LOG_TYPE_DEFAULT, "#I Successfully configured in-band wake packet event", buf, 2u);
  }
}

_BYTE *TransportModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void TransportModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t *v4;
  NSObject *v5;
  _QWORD v6[5];
  dispatch_group_t group;
  char v8;

  v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 1174405120;
  v6[2] = ___ZN15TransportModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_3_2;
  v5 = *a3;
  v6[4] = a1;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v8 = a2;
  ctu::SharedSynchronizable<TransportModule>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN15TransportModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[21];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    (*(void (**)(_QWORD))(*(_QWORD *)v1[21] + 56))(v1[21]);
  }
  v3 = (std::__shared_weak_count *)v1[22];
  v1[21] = 0;
  v1[22] = 0;
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)v1[26];
    v1[25] = 0;
    v1[26] = 0;
    if (!v6)
      return;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)v1[26];
    v1[25] = 0;
    v1[26] = 0;
    if (!v6)
      return;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void std::shared_ptr<TransportService>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void TransportModule::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[5];
  dispatch_group_t group;

  v3 = a1 + 15;
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 1174405120;
  v15[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v15[3] = &__block_descriptor_tmp_21_3;
  v4 = *a2;
  v15[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<TransportModule>::execute_wrapped(v3, (uint64_t)v15);
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(8uLL);
  *v9 = a1;
  v10 = a1[17];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::initialize(dispatch::group_session)::$_0>(TransportModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  _QWORD v35[6];
  std::__shared_weak_count *v36;
  const void *v37;
  _QWORD v38[6];
  std::__shared_weak_count *v39;
  const void *v40;
  _QWORD aBlock[6];
  std::__shared_weak_count *v42;
  const void *v43;
  void **__dst;
  size_t v45;
  unint64_t v46;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = abm::kCommandNetworkInterfaceControl;
  v11 = strlen(abm::kCommandNetworkInterfaceControl);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v45 = v12;
    v46 = v15 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v46) = v11;
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v12);
LABEL_17:
  *((_BYTE *)p_dst + v12) = 0;
  v16 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_6_4;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v42 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = _Block_copy(aBlock);
  v43 = v18;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v43);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v46) < 0)
    operator delete(__dst);
  v19 = (const void *)*MEMORY[0x24BE05648];
  v20 = strlen((const char *)*MEMORY[0x24BE05648]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    v45 = v21;
    v46 = v24 | 0x8000000000000000;
    __dst = v22;
  }
  else
  {
    HIBYTE(v46) = v20;
    v22 = (void **)&__dst;
    if (!v20)
      goto LABEL_31;
  }
  memmove(v22, v19, v21);
LABEL_31:
  *((_BYTE *)v22 + v21) = 0;
  v38[0] = v16;
  v38[1] = 1174405120;
  v38[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_7;
  v38[3] = &__block_descriptor_tmp_12_2;
  v38[4] = v1;
  v38[5] = v3;
  v39 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = _Block_copy(v38);
  v40 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v40);
  if (v26)
    _Block_release(v26);
  if (SHIBYTE(v46) < 0)
    operator delete(__dst);
  v27 = (const void *)*MEMORY[0x24BE05640];
  v28 = strlen((const char *)*MEMORY[0x24BE05640]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = (void **)operator new(v31 + 1);
    v45 = v29;
    v46 = v32 | 0x8000000000000000;
    __dst = v30;
  }
  else
  {
    HIBYTE(v46) = v28;
    v30 = (void **)&__dst;
    if (!v28)
      goto LABEL_45;
  }
  memmove(v30, v27, v29);
LABEL_45:
  *((_BYTE *)v30 + v29) = 0;
  v35[0] = v16;
  v35[1] = 1174405120;
  v35[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_13;
  v35[3] = &__block_descriptor_tmp_20_2;
  v35[4] = v1;
  v35[5] = v3;
  v36 = v5;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  v34 = _Block_copy(v35);
  v37 = v34;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v37);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v46) < 0)
    operator delete(__dst);
  if (v36)
    std::__shared_weak_count::__release_weak(v36);
  if (v39)
    std::__shared_weak_count::__release_weak(v39);
  if (v42)
    std::__shared_weak_count::__release_weak(v42);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_24B91DB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  std::__shared_weak_count *v31;
  const void *v32;
  uint64_t v33;
  std::__shared_weak_count *v35;

  if (v32)
    _Block_release(v32);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if ((*(char *)(v33 - 105) & 0x80000000) == 0)
    {
LABEL_5:
      v35 = a23;
      if (!a23)
      {
LABEL_10:
        if (a31)
        {
          std::__shared_weak_count::__release_weak(a31);
          std::__shared_weak_count::__release_weak(v31);
          _Unwind_Resume(a1);
        }
        std::__shared_weak_count::__release_weak(v31);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v35);
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v33 - 105) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v33 - 128));
  v35 = a23;
  if (!a23)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, void **a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  xpc_object_t object;
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x24BDAC760];
      v14[1] = 1174405120;
      v14[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v14[3] = &__block_descriptor_tmp_4_2;
      v10 = *a2;
      v14[4] = v7;
      object = v10;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (!*a3)
          goto LABEL_9;
      }
      else
      {
        object = xpc_null_create();
        v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlock = v11;
          ctu::SharedSynchronizable<TransportModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v14);
          if (aBlock)
            _Block_release(aBlock);
          xpc_release(object);
          object = 0;
          goto LABEL_12;
        }
      }
      v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t value;
  size_t v7;
  void **v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t object;
  void *v13[3];
  unsigned int v14;
  xpc_object_t v15[4];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = v3;
  if (v3)
  {
    v15[0] = v3;
  }
  else
  {
    v4 = xpc_null_create();
    v15[0] = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x24BD2A468](v4) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  v5 = xpc_null_create();
LABEL_8:
  v15[0] = v5;
LABEL_9:
  xpc_release(v4);
  v14 = -534716414;
  memset(v13, 170, sizeof(v13));
  value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x24BE04DF0]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  memset(&v15[1], 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object);
  if (SHIBYTE(v13[2]) >= 0)
    v7 = HIBYTE(v13[2]);
  else
    v7 = (size_t)v13[1];
  if (v7 != strlen(abm::kActionConfigureDataThrottling))
    goto LABEL_26;
  v8 = SHIBYTE(v13[2]) >= 0 ? v13 : (void **)v13[0];
  if (memcmp(v8, abm::kActionConfigureDataThrottling, v7))
    goto LABEL_26;
  v9 = *(xpc_object_t *)(a1 + 40);
  v11 = v9;
  if (!v9)
  {
    v9 = xpc_null_create();
    v11 = v9;
    v10 = v15[0];
    if (v15[0])
      goto LABEL_22;
LABEL_24:
    v10 = xpc_null_create();
    goto LABEL_25;
  }
  xpc_retain(v9);
  v10 = v15[0];
  if (!v15[0])
    goto LABEL_24;
LABEL_22:
  xpc_retain(v10);
LABEL_25:
  TransportModule::configureDataThrottling_sync(v2, &v11);
  v14 = 0;
  xpc_release(v10);
  xpc_release(v9);
  v11 = 0;
LABEL_26:
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 48), &v14, v15);
  if (SHIBYTE(v13[2]) < 0)
    operator delete(v13[0]);
  xpc_release(v15[0]);
}

void sub_24B91DFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t object, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;

  xpc_release(v25);
  xpc_release(v24);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t xpc::dict::object_proxy::operator xpc::object(_QWORD *a1, xpc_object_t xdict, char *key)
{
  xpc_object_t value;
  xpc_object_t result;

  value = xpc_dictionary_get_value(xdict, key);
  *a1 = value;
  if (value)
    return xpc_retain(value);
  result = xpc_null_create();
  *a1 = result;
  return result;
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

uint64_t TransportModule::configureDataThrottling_sync(uint64_t a1, xpc_object_t *a2)
{
  NSObject *v4;
  xpc_object_t value;
  unsigned int v6;
  xpc_object_t v7;
  uint64_t v8;
  uint64_t *v9;
  xpc_object_t object[6];

  v4 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(object[0]) = 0;
    _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I Configure data throttling", (uint8_t *)object, 2u);
  }
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE04E08]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  v6 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE04E20]);
  object[0] = v7;
  if (v7)
    xpc_retain(v7);
  else
    object[0] = xpc_null_create();
  v8 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  v9 = *(uint64_t **)(a1 + 184);
  if (v9)
  {
    object[0] = (xpc_object_t)MEMORY[0x24BDAC760];
    object[1] = (xpc_object_t)0x40000000;
    object[2] = ___ZN4data16TransportService5State9setConfigENS0_16ThrottlingConfigE_block_invoke;
    object[3] = &__block_descriptor_tmp_25;
    object[4] = v9;
    object[5] = (xpc_object_t)(v6 | (unint64_t)(v8 << 32));
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped(v9 + 9, (uint64_t)object);
  }
  return 0;
}

void sub_24B91E278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18weak_ptrI15TransportModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__18weak_ptrI15TransportModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_7(_QWORD *a1, void **a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  xpc_object_t object;
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x24BDAC760];
      v14[1] = 1174405120;
      v14[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_8;
      v14[3] = &__block_descriptor_tmp_11_4;
      v10 = *a2;
      v14[4] = v7;
      object = v10;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (!*a3)
          goto LABEL_9;
      }
      else
      {
        object = xpc_null_create();
        v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlock = v11;
          ctu::SharedSynchronizable<TransportModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v14);
          if (aBlock)
            _Block_release(aBlock);
          xpc_release(object);
          object = 0;
          goto LABEL_12;
        }
      }
      v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_8(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  const char *v9;
  xpc_object_t value;
  int v11;
  NSObject *v12;
  uint64_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  unsigned int v16;
  xpc_object_t object;
  xpc_object_t v18[2];

  v18[1] = *(xpc_object_t *)MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = v3;
  v5 = MEMORY[0x24BDACFA0];
  if (v3)
  {
    object = v3;
  }
  else
  {
    v4 = xpc_null_create();
    object = v4;
    if (!v4)
    {
      v6 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x24BD2A468](v4) != v5)
  {
    v6 = xpc_null_create();
LABEL_8:
    object = v6;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
  v16 = -534716416;
  if (MEMORY[0x24BD2A468](*(_QWORD *)(a1 + 40)) == v5
    && (v9 = (const char *)*MEMORY[0x24BE05408],
        xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x24BE05408])))
  {
    value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), v9);
    v18[0] = value;
    if (value)
      xpc_retain(value);
    else
      v18[0] = xpc_null_create();
    v11 = xpc::dyn_cast_or_default((xpc *)v18, 0);
    xpc_release(v18[0]);
    v12 = *(NSObject **)(v2 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v18[0]) = 67109120;
      HIDWORD(v18[0]) = v11;
      _os_log_impl(&dword_24B855000, v12, OS_LOG_TYPE_DEFAULT, "#I Transport bypass enable (%u)", (uint8_t *)v18, 8u);
    }
    v13 = *(_QWORD *)(v2 + 168);
    if (v13)
    {
      if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)v13 + 72))(v13, v11 != 0))
        v16 = 0;
    }
    else if (MEMORY[0x24BD2A468](object) == v5)
    {
      v14 = xpc_string_create("TransportService is not ready!");
      if (!v14)
        v14 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x24BE04F20], v14);
      v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
    }
  }
  else
  {
    if (MEMORY[0x24BD2A468](object) == v5)
    {
      v7 = xpc_string_create("Invalid key!");
      if (!v7)
        v7 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x24BE04F20], v7);
      v8 = xpc_null_create();
      xpc_release(v7);
      xpc_release(v8);
    }
    v16 = -534716414;
  }
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 48), &v16, &object);
  xpc_release(object);
}

void sub_24B91E6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_13(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v12[0] = MEMORY[0x24BDAC760];
        v12[1] = 1174405120;
        v12[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_14;
        v12[3] = &__block_descriptor_tmp_19_1;
        v12[4] = v6;
        v9 = *a3;
        if (*a3)
          v9 = _Block_copy(v9);
        aBlock = v9;
        ctu::SharedSynchronizable<TransportModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v12);
        if (aBlock)
          _Block_release(aBlock);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_14(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  uint64_t v15;
  xpc_object_t v16;
  xpc_object_t xdict;
  xpc_object_t object;

  v2 = *(_QWORD *)(a1 + 32);
  xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = v3;
  if (v3)
  {
    xdict = v3;
  }
  else
  {
    v4 = xpc_null_create();
    xdict = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x24BD2A468](v4) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  v5 = xpc_null_create();
LABEL_8:
  xdict = v5;
LABEL_9:
  xpc_release(v4);
  switch(*(_DWORD *)(v2 + 152))
  {
    case 0:
      v6 = xpc_string_create("Wake data is not supported on this device.");
      if (!v6)
        v6 = xpc_null_create();
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x24BE04F20], v6);
      v7 = xpc_null_create();
      xpc_release(v6);
      xpc_release(v7);
      LODWORD(object) = -534716412;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
    case 1:
      v13 = xpc_string_create("Device has not entered sleep state after bootup. So, there is no wake data yet.");
      if (!v13)
        v13 = xpc_null_create();
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x24BE04F20], v13);
      v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      LODWORD(object) = -534716409;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
    case 2:
      v8 = xpc_string_create("Requested for wake data from baseband. Please try again.");
      if (!v8)
        v8 = xpc_null_create();
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x24BE04F20], v8);
      v9 = xpc_null_create();
      xpc_release(v8);
      xpc_release(v9);
      LODWORD(object) = -534716411;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
    case 3:
      v10 = *(xpc_object_t *)(v2 + 160);
      if (v10)
        xpc_retain(*(xpc_object_t *)(v2 + 160));
      else
        v10 = xpc_null_create();
      v15 = *(_QWORD *)(a1 + 40);
      object = v10;
      v16 = xpc_null_create();
      (*(void (**)(uint64_t, _QWORD, xpc_object_t *))(v15 + 16))(v15, 0, &object);
      xpc_release(object);
      xpc_release(v16);
      break;
    default:
      v11 = xpc_string_create("Request for wake data from baseband returned error.");
      if (!v11)
        v11 = xpc_null_create();
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x24BE04F20], v11);
      v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
      LODWORD(object) = -534716416;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
  }
  xpc_release(xdict);
}

void sub_24B91EB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  xpc_release(a9);
  _Unwind_Resume(a1);
}

void TransportModule::claimSystemWake_sync(TransportModule *this)
{
  xpc_object_t v2;
  xpc_object_t value;
  const object *v4;
  const void *v5;
  CFTypeID v6;
  const void *v7;
  const __CFString **v8;
  xpc_object_t v9;
  const object *v10;
  const void *v11;
  CFTypeID v12;
  const void *v13;
  uint64_t v14;
  __CFDictionary *Mutable;
  const __CFAllocator *v16;
  const void *v17;
  NSObject *v18;
  xpc_object_t object;
  _BYTE cf[12];
  __int16 v21;
  const void *v22;
  __int16 v23;
  __CFDictionary *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 38) != 3)
    return;
  v2 = (xpc_object_t)*((_QWORD *)this + 20);
  if (v2)
    xpc_retain(*((xpc_object_t *)this + 20));
  else
    v2 = xpc_null_create();
  value = xpc_dictionary_get_value(v2, (const char *)*MEMORY[0x24BE050F8]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  xpc::bridge((xpc *)&object, v4);
  v5 = *(const void **)cf;
  if (!*(_QWORD *)cf || (v6 = CFGetTypeID(*(CFTypeRef *)cf), v6 != CFStringGetTypeID()))
  {
    v5 = 0;
    v7 = *(const void **)cf;
    if (!*(_QWORD *)cf)
      goto LABEL_14;
    goto LABEL_13;
  }
  CFRetain(v5);
  v7 = *(const void **)cf;
  if (*(_QWORD *)cf)
LABEL_13:
    CFRelease(v7);
LABEL_14:
  xpc_release(object);
  v8 = (const __CFString **)*MEMORY[0x24BE050F0];
  v9 = xpc_dictionary_get_value(v2, (const char *)*MEMORY[0x24BE050F0]);
  object = v9;
  if (v9)
    xpc_retain(v9);
  else
    object = xpc_null_create();
  xpc::bridge((xpc *)&object, v10);
  v11 = *(const void **)cf;
  if (*(_QWORD *)cf)
  {
    v12 = CFGetTypeID(*(CFTypeRef *)cf);
    if (v12 == CFDataGetTypeID())
    {
      CFRetain(v11);
      v13 = *(const void **)cf;
      if (!*(_QWORD *)cf)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  v11 = 0;
  v13 = *(const void **)cf;
  if (*(_QWORD *)cf)
LABEL_22:
    CFRelease(v13);
LABEL_23:
  xpc_release(object);
  v14 = *MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_QWORD *)cf = 0;
  ctu::cf::convert_copy((ctu::cf *)cf, v8, (const char *)0x8000100, v14, v16);
  v17 = *(const void **)cf;
  object = *(xpc_object_t *)cf;
  *(_QWORD *)cf = v11;
  if (v11)
  {
    CFRetain(v11);
    if (v17)
      CFDictionaryAddValue(Mutable, v17, v11);
    CFRelease(v11);
  }
  if (v17)
    CFRelease(v17);
  IOPMClaimSystemWakeEvent();
  v18 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)cf = 138412802;
    *(_QWORD *)&cf[4] = CFSTR("com.apple.CommCenter");
    v21 = 2112;
    v22 = v5;
    v23 = 2112;
    v24 = Mutable;
    _os_log_impl(&dword_24B855000, v18, OS_LOG_TYPE_DEFAULT, "#I \n--- IOPM System Wake ---\nIdentity: %@\nReason: %@\nDetails: %@---", cf, 0x20u);
  }
  if (Mutable)
    CFRelease(Mutable);
  if (v11)
    CFRelease(v11);
  if (v5)
    CFRelease(v5);
  xpc_release(v2);
}

void sub_24B91EEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object, char a16)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

const void **ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void TransportModule::submitMetric_sync(TransportModule *this, xpc_object_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  size_t v13;
  xpc_object_t value;
  BOOL v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  size_t v27;
  size_t v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  NSObject *v32;
  size_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  int v47;
  size_t v48;
  size_t v49;
  uint64_t v50;
  xpc_object_t v51;
  xpc_object_t v52;
  xpc_object_t v53;
  xpc_object_t v54;
  xpc_object_t v55;
  xpc_object_t v56;
  const void *v57;
  size_t v58;
  size_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  const void *v63;
  xpc_object_t v64;
  uint8_t buf[8];
  size_t v66;
  unint64_t v67;
  xpc_object_t v68;
  xpc_object_t v69;
  xpc_object_t v70;
  xpc_object_t v71;
  xpc_object_t v72;
  xpc_object_t v73;
  xpc_object_t v74;
  xpc_object_t v75;
  xpc_object_t v76;
  xpc_object_t v77;
  xpc_object_t v78;
  xpc_object_t object;
  xpc_object_t xdict;
  xpc_object_t v81;
  xpc_object_t v82;
  xpc_object_t v83;
  xpc_object_t v84;
  xpc_object_t v85;
  xpc_object_t *v86;
  uint64_t v87;
  xpc_object_t v88;
  xpc_object_t v89;

  v4 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I Submitting Wake Reason Info to AWD", buf, 2u);
  }
  v5 = MEMORY[0x24BD2A468](*a2);
  v6 = MEMORY[0x24BDACFA0];
  if (v5 == MEMORY[0x24BDACFA0])
  {
    v8 = xpc_dictionary_create(0, 0, 0);
    if (v8 || (v8 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x24BD2A468](v8) == v6)
      {
        xpc_retain(v8);
        v9 = v8;
      }
      else
      {
        v9 = xpc_null_create();
      }
    }
    else
    {
      v9 = xpc_null_create();
      v8 = 0;
    }
    xpc_release(v8);
    v89 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v10 = xpc_dictionary_create(0, 0, 0);
    v11 = v10;
    if (v10)
    {
      v89 = v10;
    }
    else
    {
      v11 = xpc_null_create();
      v89 = v11;
      if (!v11)
      {
        v12 = xpc_null_create();
        v11 = 0;
        goto LABEL_19;
      }
    }
    if (MEMORY[0x24BD2A468](v11) == v6)
    {
      xpc_retain(v11);
      goto LABEL_20;
    }
    v12 = xpc_null_create();
LABEL_19:
    v89 = v12;
LABEL_20:
    xpc_release(v11);
    v13 = *MEMORY[0x24BE05128];
    value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05128]);
    v15 = value != 0;
    if (value)
    {
      *(_QWORD *)buf = a2;
      v66 = v13;
      v16 = *MEMORY[0x24BE05780];
      v86 = &v89;
      v87 = v16;
      xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v88);
      xpc_release(v88);
      v88 = 0;
    }
    v17 = *MEMORY[0x24BE056C0];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE056C0]))
    {
      *(_QWORD *)buf = a2;
      v66 = v17;
      v18 = *MEMORY[0x24BE056E0];
      v86 = &v89;
      v87 = v18;
      xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v85);
      xpc_release(v85);
      v85 = 0;
      v15 = 1;
    }
    v19 = *MEMORY[0x24BE05028];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05028]))
    {
      *(_QWORD *)buf = a2;
      v66 = v19;
      v20 = *MEMORY[0x24BE057D0];
      v86 = &v89;
      v87 = v20;
      xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v84);
      xpc_release(v84);
      v84 = 0;
      v15 = 1;
    }
    v21 = *MEMORY[0x24BE05308];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05308]))
    {
      *(_QWORD *)buf = a2;
      v66 = v21;
      v22 = *MEMORY[0x24BE05740];
      v86 = &v89;
      v87 = v22;
      xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v83);
      xpc_release(v83);
      v83 = 0;
      v15 = 1;
    }
    v23 = *MEMORY[0x24BE050F8];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE050F8]))
    {
      *(_QWORD *)buf = a2;
      v66 = v23;
      v24 = *MEMORY[0x24BE05670];
      v86 = &v89;
      v87 = v24;
      xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v82);
      xpc_release(v82);
      v82 = 0;
      v15 = 1;
    }
    v25 = (const char *)*MEMORY[0x24BE05310];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05310]))
    {
      *(_QWORD *)buf = a2;
      v66 = (size_t)v25;
      v26 = *MEMORY[0x24BE05748];
      v86 = &v89;
      v87 = v26;
      xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v81);
      xpc_release(v81);
      v81 = 0;
      v27 = *MEMORY[0x24BE05500];
      if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BE05500]))
      {
        xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)buf = a2;
        v66 = v27;
        xpc::dict::object_proxy::operator xpc::dict((uint64_t)buf, &xdict);
        if (xpc::operator==<char const*>(*a2, v25, MEMORY[0x24BE051E0]))
        {
          v28 = *MEMORY[0x24BE05508];
          *(_QWORD *)buf = &xdict;
          v66 = v28;
          v29 = *MEMORY[0x24BE056D8];
          v86 = &v89;
          v87 = v29;
          xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &object);
          xpc_release(object);
          object = 0;
          v30 = *MEMORY[0x24BE05468];
          *(_QWORD *)buf = &xdict;
          v66 = v30;
          v31 = *MEMORY[0x24BE05698];
          v86 = &v89;
          v87 = v31;
          xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v78);
          xpc_release(v78);
          v78 = 0;
        }
        else if (xpc::operator==<char const*>(*a2, v25, MEMORY[0x24BE05290]))
        {
          v33 = *MEMORY[0x24BE053C0];
          *(_QWORD *)buf = &xdict;
          v66 = v33;
          v34 = *MEMORY[0x24BE054D0];
          v86 = &v89;
          v87 = v34;
          xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v77);
          xpc_release(v77);
          v77 = 0;
          v35 = *MEMORY[0x24BE05510];
          *(_QWORD *)buf = &xdict;
          v66 = v35;
          v36 = *MEMORY[0x24BE055D0];
          v86 = &v89;
          v87 = v36;
          xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v76);
          xpc_release(v76);
          v76 = 0;
          v37 = *MEMORY[0x24BE05550];
          *(_QWORD *)buf = &xdict;
          v66 = v37;
          v38 = *MEMORY[0x24BE05668];
          v86 = &v89;
          v87 = v38;
          xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v75);
          xpc_release(v75);
          v75 = 0;
          v39 = *MEMORY[0x24BE056A8];
          *(_QWORD *)buf = &xdict;
          v66 = v39;
          v40 = *MEMORY[0x24BE055C8];
          v86 = &v89;
          v87 = v40;
          xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v74);
          xpc_release(v74);
          v74 = 0;
          v41 = *MEMORY[0x24BE053B8];
          *(_QWORD *)buf = &xdict;
          v66 = v41;
          v42 = *MEMORY[0x24BE05448];
          v86 = &v89;
          v87 = v42;
          xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v73);
          xpc_release(v73);
          v73 = 0;
        }
        else if (xpc::operator==<char const*>(*a2, v25, MEMORY[0x24BE05288]))
        {
          v43 = *MEMORY[0x24BE053B0];
          *(_QWORD *)buf = &xdict;
          v66 = v43;
          v44 = *MEMORY[0x24BE054D0];
          v86 = &v89;
          v87 = v44;
          xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v72);
          xpc_release(v72);
          v72 = 0;
          v45 = *MEMORY[0x24BE054F8];
          *(_QWORD *)buf = &xdict;
          v66 = v45;
          v46 = *MEMORY[0x24BE055D0];
          v86 = &v89;
          v87 = v46;
          xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v71);
          xpc_release(v71);
          v71 = 0;
          xpc::dict::object_proxy::operator xpc::object(buf, xdict, (char *)*MEMORY[0x24BE054F0]);
          v47 = xpc::dyn_cast_or_default((xpc *)buf, 0);
          xpc_release(*(xpc_object_t *)buf);
          v69 = xpc_int64_create(v47 | 0x10000);
          if (!v69)
            v69 = xpc_null_create();
          v48 = *MEMORY[0x24BE055C8];
          *(_QWORD *)buf = &v89;
          v66 = v48;
          xpc::dict::object_proxy::operator=((uint64_t)buf, &v69, &v70);
          xpc_release(v70);
          v70 = 0;
          xpc_release(v69);
          v69 = 0;
          v49 = *MEMORY[0x24BE053B8];
          *(_QWORD *)buf = &xdict;
          v66 = v49;
          v50 = *MEMORY[0x24BE05448];
          v86 = &v89;
          v87 = v50;
          xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v68);
          xpc_release(v68);
          v68 = 0;
        }
        xpc_release(xdict);
      }
    }
    else if (!v15)
    {
      v32 = *((_QWORD *)this + 11);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_24B855000, v32, OS_LOG_TYPE_ERROR, "Wake Reason data is missing", buf, 2u);
      }
      goto LABEL_63;
    }
    v51 = xpc_string_create((const char *)*MEMORY[0x24BE058A0]);
    if (!v51)
      v51 = xpc_null_create();
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x24BE04E88], v51);
    v52 = xpc_null_create();
    xpc_release(v51);
    xpc_release(v52);
    v53 = xpc_int64_create(524467);
    if (!v53)
      v53 = xpc_null_create();
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x24BE04F38], v53);
    v54 = xpc_null_create();
    xpc_release(v53);
    xpc_release(v54);
    v55 = v89;
    if (v89)
      xpc_retain(v89);
    else
      v55 = xpc_null_create();
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x24BE04E80], v55);
    v56 = xpc_null_create();
    xpc_release(v55);
    xpc_release(v56);
    v57 = (const void *)*MEMORY[0x24BE051F0];
    v58 = strlen((const char *)*MEMORY[0x24BE051F0]);
    if (v58 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v59 = v58;
    if (v58 >= 0x17)
    {
      v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v58 | 7) != 0x17)
        v61 = v58 | 7;
      v62 = v61 + 1;
      v60 = operator new(v61 + 1);
      v66 = v59;
      v67 = v62 | 0x8000000000000000;
      *(_QWORD *)buf = v60;
    }
    else
    {
      HIBYTE(v67) = v58;
      v60 = buf;
      if (!v58)
      {
        buf[0] = 0;
        v64 = v9;
        if (v9)
        {
LABEL_55:
          xpc_retain(v9);
          goto LABEL_61;
        }
LABEL_60:
        v64 = xpc_null_create();
LABEL_61:
        v63 = 0;
        Service::runCommand((uint64_t)this, (uint64_t)buf, &v64, &v63);
        xpc_release(v64);
        v64 = 0;
        if (SHIBYTE(v67) < 0)
          operator delete(*(void **)buf);
LABEL_63:
        xpc_release(v89);
        xpc_release(v9);
        return;
      }
    }
    memmove(v60, v57, v59);
    *((_BYTE *)v60 + v59) = 0;
    v64 = v9;
    if (v9)
      goto LABEL_55;
    goto LABEL_60;
  }
  v7 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_24B855000, v7, OS_LOG_TYPE_ERROR, "Invalid Wake Reason dictionary", buf, 2u);
  }
}

void sub_24B91F97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t object, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,xpc_object_t a30)
{
  void *v30;
  uint64_t v31;

  xpc_release(object);
  xpc_release(a30);
  xpc_release(*(xpc_object_t *)(v31 - 72));
  xpc_release(v30);
  _Unwind_Resume(a1);
}

BOOL xpc::operator==<char const*>(void *a1, const char *a2, const char **a3)
{
  xpc_object_t value;
  xpc_object_t v5;
  xpc_object_t v6;
  _BOOL8 v7;

  value = xpc_dictionary_get_value(a1, a2);
  if (value)
  {
    v5 = value;
    xpc_retain(value);
  }
  else
  {
    v5 = xpc_null_create();
  }
  v6 = xpc_string_create(*a3);
  if (!v6)
    v6 = xpc_null_create();
  v7 = xpc_equal(v5, v6);
  xpc_release(v6);
  xpc_release(v5);
  return v7;
}

void sub_24B91FB58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  xpc_release(v2);
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void TransportModule::finishInitialization_sync(TransportModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const char *v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  NSObject *v54;
  NSObject *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  NSObject *v61;
  unint64_t v62;
  void *v63;
  NSObject *v64;
  unint64_t v65;
  void *v66;
  NSObject *v67;
  const void *v68;
  size_t v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  const void *v75;
  size_t v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  const void *v82;
  size_t v83;
  void *v84;
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  const void *v89;
  size_t v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  NSObject *v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  void *v99;
  NSObject *v100;
  void *v101[2];
  unint64_t v102;
  void *v103;
  dispatch_object_t v104;
  void *v105[2];
  unint64_t v106;
  void *v107;
  dispatch_object_t v108;
  void *v109[2];
  unint64_t v110;
  void *v111;
  dispatch_object_t v112;
  void *__p[2];
  unint64_t v114;
  _QWORD v115[6];
  std::__shared_weak_count *v116;
  void *v117;
  dispatch_object_t v118;
  _QWORD v119[6];
  std::__shared_weak_count *v120;
  void *v121;
  dispatch_object_t v122;
  _QWORD v123[6];
  std::__shared_weak_count *v124;
  void *v125;
  dispatch_object_t object;
  _QWORD v127[6];
  std::__shared_weak_count *v128;
  _QWORD aBlock[6];
  std::__shared_weak_count *v130;
  const void *v131;
  dispatch_object_t v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  __int128 v135;
  const void *v136;
  void *__dst[2];
  unint64_t v138;
  _BYTE buf[24];
  const char *v140;
  __int128 *v141;
  uint64_t v142;

  v142 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const char *)(*(uint64_t (**)(TransportModule *))(*(_QWORD *)this + 16))(this);
  v11 = strlen(v10);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = (void **)operator new(v14 + 1);
    __dst[1] = v12;
    v138 = v15 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v138) = v11;
    v13 = __dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(v13, v10, (size_t)v12);
LABEL_17:
  *((_BYTE *)v12 + (_QWORD)v13) = 0;
  v136 = 0;
  AppleBasebandManager::create();
  v16 = *(_OWORD *)buf;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  *(_OWORD *)((char *)this + 200) = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_26;
  v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_26:
    v23 = v136;
    if (!v136)
      goto LABEL_28;
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  v23 = v136;
  if (v136)
LABEL_27:
    CFRelease(v23);
LABEL_28:
  if (SHIBYTE(v138) < 0)
    operator delete(__dst[0]);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  v25 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v140 = (const char *)&__block_descriptor_tmp_13_5;
  v141 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v26 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v135 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_35;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v26 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v135 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_35;
  }
  v27 = (unint64_t *)(v26 + 8);
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_35:
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  v133 = *((_QWORD *)this + 25);
  v134 = v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v32 || (v33 = std::__shared_weak_count::lock(v32)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v34 = v33;
  v35 = (unint64_t *)&v33->__shared_weak_owners_;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  v37 = (unint64_t *)&v33->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v34);
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v39)
  {
    v45 = (unint64_t *)&v39->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  std::__shared_weak_count::__release_weak(v34);
  if (v134)
  {
    v47 = &v134->__shared_owners_;
    do
      v48 = __ldaxr((unint64_t *)v47);
    while (__stlxr(v48 - 1, (unint64_t *)v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  if (*((_QWORD *)&v135 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v135 + 1) + 16))(*((_QWORD *)&v135 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v135 + 1));
    }
  }
  v51 = *((_QWORD *)this + 21);
  if (!v51)
  {
    v98 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v98, OS_LOG_TYPE_FAULT))
      __break(1u);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "ABM ASSERT";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "fTransportService != NULL";
    *(_WORD *)&buf[22] = 2080;
    v140 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serv"
           "er/Transport/TransportModule.cpp";
    LOWORD(v141) = 1024;
    *(_DWORD *)((char *)&v141 + 2) = 366;
    _os_log_fault_impl(&dword_24B855000, v98, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    __break(1u);
LABEL_207:
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (*((_DWORD *)this + 38))
  {
    aBlock[0] = v25;
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_27_4;
    aBlock[4] = this;
    aBlock[5] = v3;
    v130 = v5;
    do
      v52 = __ldxr(p_shared_weak_owners);
    while (__stxr(v52 + 1, p_shared_weak_owners));
    v53 = _Block_copy(aBlock);
    v54 = *((_QWORD *)this + 17);
    if (v54)
      dispatch_retain(*((dispatch_object_t *)this + 17));
    v131 = v53;
    v132 = v54;
    (*(void (**)(uint64_t, const void **))(*(_QWORD *)v51 + 80))(v51, &v131);
    if (v132)
      dispatch_release(v132);
    if (v131)
      _Block_release(v131);
    if (v130)
      std::__shared_weak_count::__release_weak(v130);
  }
  else
  {
    v55 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_24B855000, v55, OS_LOG_TYPE_DEFAULT, "#I Wake reason is not supported by this baseband", buf, 2u);
    }
  }
  memset(buf, 170, 16);
  v127[0] = v25;
  v127[1] = 1174405120;
  v127[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_28;
  v127[3] = &__block_descriptor_tmp_30_2;
  v127[4] = this;
  v127[5] = v3;
  v128 = v5;
  do
    v56 = __ldxr(p_shared_weak_owners);
  while (__stxr(v56 + 1, p_shared_weak_owners));
  v57 = _Block_copy(v127);
  v58 = *((_QWORD *)this + 17);
  if (v58)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  *(_QWORD *)buf = v57;
  *(_QWORD *)&buf[8] = v58;
  v125 = (void *)0xAAAAAAAAAAAAAAAALL;
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v123[0] = v25;
  v123[1] = 1174405120;
  v123[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_31;
  v123[3] = &__block_descriptor_tmp_33_2;
  v123[4] = this;
  v123[5] = v3;
  v124 = v5;
  do
    v59 = __ldxr(p_shared_weak_owners);
  while (__stxr(v59 + 1, p_shared_weak_owners));
  v60 = _Block_copy(v123);
  v61 = *((_QWORD *)this + 17);
  if (v61)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v125 = v60;
  object = v61;
  v121 = (void *)0xAAAAAAAAAAAAAAAALL;
  v122 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v119[0] = v25;
  v119[1] = 1174405120;
  v119[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_34;
  v119[3] = &__block_descriptor_tmp_35_1;
  v119[4] = this;
  v119[5] = v3;
  v120 = v5;
  do
    v62 = __ldxr(p_shared_weak_owners);
  while (__stxr(v62 + 1, p_shared_weak_owners));
  v63 = _Block_copy(v119);
  v64 = *((_QWORD *)this + 17);
  if (v64)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v121 = v63;
  v122 = v64;
  v117 = (void *)0xAAAAAAAAAAAAAAAALL;
  v118 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v115[0] = v25;
  v115[1] = 1174405120;
  v115[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_36;
  v115[3] = &__block_descriptor_tmp_37_1;
  v115[4] = this;
  v115[5] = v3;
  v116 = v5;
  do
    v65 = __ldxr(p_shared_weak_owners);
  while (__stxr(v65 + 1, p_shared_weak_owners));
  v66 = _Block_copy(v115);
  v67 = *((_QWORD *)this + 17);
  if (v67)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v117 = v66;
  v118 = v67;
  v68 = (const void *)*MEMORY[0x24BE05658];
  v69 = strlen((const char *)*MEMORY[0x24BE05658]);
  if (v69 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_207;
  v70 = (void *)v69;
  if (v69 >= 0x17)
  {
    v73 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v69 | 7) != 0x17)
      v73 = v69 | 7;
    v74 = v73 + 1;
    v71 = operator new(v73 + 1);
    __p[1] = v70;
    v114 = v74 | 0x8000000000000000;
    __p[0] = v71;
LABEL_107:
    memmove(v71, v68, (size_t)v70);
    *((_BYTE *)v70 + (_QWORD)v71) = 0;
    v72 = v125;
    if (!v125)
      goto LABEL_109;
    goto LABEL_108;
  }
  HIBYTE(v114) = v69;
  v71 = __p;
  if (v69)
    goto LABEL_107;
  LOBYTE(__p[0]) = 0;
  v72 = v125;
  if (v125)
LABEL_108:
    v72 = _Block_copy(v72);
LABEL_109:
  v111 = v72;
  v112 = object;
  if (object)
    dispatch_retain(object);
  AppleBasebandManager::setEventHandler();
  if (v112)
    dispatch_release(v112);
  if (v111)
    _Block_release(v111);
  if (SHIBYTE(v114) < 0)
    operator delete(__p[0]);
  v75 = (const void *)*MEMORY[0x24BE05420];
  v76 = strlen((const char *)*MEMORY[0x24BE05420]);
  if (v76 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_207;
  v77 = (void *)v76;
  if (v76 >= 0x17)
  {
    v80 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v76 | 7) != 0x17)
      v80 = v76 | 7;
    v81 = v80 + 1;
    v78 = operator new(v80 + 1);
    v109[1] = v77;
    v110 = v81 | 0x8000000000000000;
    v109[0] = v78;
LABEL_125:
    memmove(v78, v75, (size_t)v77);
    *((_BYTE *)v77 + (_QWORD)v78) = 0;
    v79 = *(void **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_127;
    goto LABEL_126;
  }
  HIBYTE(v110) = v76;
  v78 = v109;
  if (v76)
    goto LABEL_125;
  LOBYTE(v109[0]) = 0;
  v79 = *(void **)buf;
  if (*(_QWORD *)buf)
LABEL_126:
    v79 = _Block_copy(v79);
LABEL_127:
  v107 = v79;
  v108 = *(dispatch_object_t *)&buf[8];
  if (*(_QWORD *)&buf[8])
    dispatch_retain(*(dispatch_object_t *)&buf[8]);
  AppleBasebandManager::setEventHandler();
  if (v108)
    dispatch_release(v108);
  if (v107)
    _Block_release(v107);
  if (SHIBYTE(v110) < 0)
    operator delete(v109[0]);
  v82 = (const void *)*MEMORY[0x24BE05540];
  v83 = strlen((const char *)*MEMORY[0x24BE05540]);
  if (v83 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_207;
  v84 = (void *)v83;
  if (v83 >= 0x17)
  {
    v87 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v83 | 7) != 0x17)
      v87 = v83 | 7;
    v88 = v87 + 1;
    v85 = operator new(v87 + 1);
    v105[1] = v84;
    v106 = v88 | 0x8000000000000000;
    v105[0] = v85;
LABEL_143:
    memmove(v85, v82, (size_t)v84);
    *((_BYTE *)v84 + (_QWORD)v85) = 0;
    v86 = v121;
    if (!v121)
      goto LABEL_145;
    goto LABEL_144;
  }
  HIBYTE(v106) = v83;
  v85 = v105;
  if (v83)
    goto LABEL_143;
  LOBYTE(v105[0]) = 0;
  v86 = v121;
  if (v121)
LABEL_144:
    v86 = _Block_copy(v86);
LABEL_145:
  v103 = v86;
  v104 = v122;
  if (v122)
    dispatch_retain(v122);
  AppleBasebandManager::setEventHandler();
  if (v104)
    dispatch_release(v104);
  if (v103)
    _Block_release(v103);
  if (SHIBYTE(v106) < 0)
    operator delete(v105[0]);
  v89 = (const void *)*MEMORY[0x24BE05428];
  v90 = strlen((const char *)*MEMORY[0x24BE05428]);
  if (v90 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_207;
  v91 = (void *)v90;
  if (v90 >= 0x17)
  {
    v96 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v90 | 7) != 0x17)
      v96 = v90 | 7;
    v97 = v96 + 1;
    v92 = operator new(v96 + 1);
    v101[1] = v91;
    v102 = v97 | 0x8000000000000000;
    v101[0] = v92;
  }
  else
  {
    HIBYTE(v102) = v90;
    v92 = v101;
    if (!v90)
    {
      LOBYTE(v101[0]) = 0;
      v93 = v117;
      if (v117)
        goto LABEL_157;
      goto LABEL_194;
    }
  }
  memmove(v92, v89, (size_t)v91);
  *((_BYTE *)v91 + (_QWORD)v92) = 0;
  v93 = v117;
  if (v117)
  {
LABEL_157:
    v94 = _Block_copy(v93);
    v95 = v118;
    v99 = v94;
    v100 = v118;
    if (!v118)
      goto LABEL_159;
    goto LABEL_158;
  }
LABEL_194:
  v95 = v118;
  v99 = 0;
  v100 = v118;
  if (v118)
LABEL_158:
    dispatch_retain(v95);
LABEL_159:
  AppleBasebandManager::setEventHandler();
  if (v100)
    dispatch_release(v100);
  if (v99)
    _Block_release(v99);
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 25));
  if (v95)
    dispatch_release(v95);
  if (v93)
    _Block_release(v93);
  if (v116)
    std::__shared_weak_count::__release_weak(v116);
  if (v122)
    dispatch_release(v122);
  if (v121)
    _Block_release(v121);
  if (v120)
    std::__shared_weak_count::__release_weak(v120);
  if (object)
    dispatch_release(object);
  if (v125)
    _Block_release(v125);
  if (v124)
    std::__shared_weak_count::__release_weak(v124);
  if (*(_QWORD *)&buf[8])
    dispatch_release(*(dispatch_object_t *)&buf[8]);
  if (*(_QWORD *)buf)
    _Block_release(*(const void **)buf);
  if (v128)
    std::__shared_weak_count::__release_weak(v128);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_24B920750(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  _DWORD *v7;
  int v8;
  xpc_object_t v9;
  xpc_object_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  void *v13;
  xpc_object_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  void **value;
  void **v24;
  char v25;
  void **v26;
  void **v27;
  uint64_t v28;
  NSObject *v29;
  NSObject *v30;
  void **v31;
  NSObject *v32;
  void ***v33;
  const void *v34;
  size_t v35;
  void *v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  xpc_object_t v40;
  const object *v41;
  void **v42;
  CFTypeID v43;
  NSObject *v44;
  void ***p_block;
  unint64_t *p_shared_owners;
  unint64_t v47;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v51;
  xpc_object_t xdict;
  std::__shared_weak_count *v54;
  __int128 *p_buf;
  void **block;
  uint64_t v57;
  _QWORD *(*v58)(uint64_t);
  void *v59;
  uint64_t v60;
  __int128 **p_p_buf;
  __int128 buf;
  void (*v63)(uint64_t);
  void *v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v54 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        v11 = v6;
LABEL_92:
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v47 = __ldaxr(p_shared_owners);
        while (__stlxr(v47 - 1, p_shared_owners));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        return;
      }
      v7 = (_DWORD *)(v5 + 152);
      v8 = *(_DWORD *)(v5 + 152);
      v9 = *(xpc_object_t *)(v5 + 160);
      if (v9)
      {
        xpc_retain(*(xpc_object_t *)(v5 + 160));
        *v7 = *(_DWORD *)a2;
        v10 = *(xpc_object_t *)(a2 + 8);
        if (v10)
        {
LABEL_6:
          xpc_retain(v10);
          goto LABEL_10;
        }
      }
      else
      {
        v9 = xpc_null_create();
        *v7 = *(_DWORD *)a2;
        v10 = *(xpc_object_t *)(a2 + 8);
        if (v10)
          goto LABEL_6;
      }
      v10 = xpc_null_create();
LABEL_10:
      v12 = *(void **)(v5 + 160);
      *(_QWORD *)(v5 + 160) = v10;
      xpc_release(v12);
      if (v8 != 2)
        goto LABEL_91;
      if (*v7 != 3)
      {
        v15 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
          v27 = SHIBYTE(v58) >= 0 ? (void **)&block : block;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v27;
          _os_log_error_impl(&dword_24B855000, v15, OS_LOG_TYPE_ERROR, "Baseband wake data (Error): %s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(v58) < 0)
            operator delete(block);
        }
        v16 = *(_QWORD *)(v5 + 184);
        if (v16)
        {
          *(_QWORD *)&buf = MEMORY[0x24BDAC760];
          *((_QWORD *)&buf + 1) = 0x40000000;
          v63 = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
          v64 = &__block_descriptor_tmp_27;
          v65 = v16;
          p_buf = &buf;
          block = (void **)MEMORY[0x24BDAC760];
          v57 = 0x40000000;
          v58 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
          v59 = &__block_descriptor_tmp_21;
          v60 = v16 + 72;
          p_p_buf = &p_buf;
          v17 = *(NSObject **)(v16 + 88);
          if (*(_QWORD *)(v16 + 96))
            dispatch_async_and_wait(v17, &block);
          else
            dispatch_sync(v17, &block);
        }
LABEL_91:
        xpc_release(v9);
        v11 = v54;
        if (!v54)
          return;
        goto LABEL_92;
      }
      v13 = *(void **)(v5 + 160);
      xdict = v13;
      if (v13)
      {
        xpc_retain(v13);
        v14 = xdict;
      }
      else
      {
        v14 = xpc_null_create();
        xdict = v14;
      }
      v18 = MEMORY[0x24BD2A468](v14);
      v19 = MEMORY[0x24BDACFA0];
      if (v18 == MEMORY[0x24BDACFA0])
      {
        *(_QWORD *)&buf = 0xAAAAAAAAAAAAAAAALL;
        v22 = *MEMORY[0x24BE05500];
        block = &xdict;
        v57 = v22;
        xpc::dict::object_proxy::operator xpc::dict((uint64_t)&block, &buf);
        value = (void **)xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x24BE056C0]);
        block = value;
        if (value)
          xpc_retain(value);
        else
          block = (void **)xpc_null_create();
        v21 = xpc::dyn_cast_or_default((xpc *)&block, 0);
        xpc_release(block);
        v24 = (void **)xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x24BE05308]);
        block = v24;
        if (v24)
          xpc_retain(v24);
        else
          block = (void **)xpc_null_create();
        v20 = xpc::dyn_cast_or_default((xpc *)&block, 0);
        xpc_release(block);
        if (MEMORY[0x24BD2A468](buf) == v19)
        {
          v26 = (void **)xpc_dictionary_get_value((xpc_object_t)buf, (const char *)*MEMORY[0x24BE053B8]);
          block = v26;
          if (v26)
            xpc_retain(v26);
          else
            block = (void **)xpc_null_create();
          v25 = xpc::dyn_cast_or_default((xpc *)&block, 0);
          xpc_release(block);
        }
        else
        {
          v25 = 0;
        }
        xpc_release((xpc_object_t)buf);
        if ((v25 & 1) != 0)
          goto LABEL_55;
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
      v28 = *(_QWORD *)(v5 + 184);
      if (v28)
      {
        *(_QWORD *)&buf = MEMORY[0x24BDAC760];
        *((_QWORD *)&buf + 1) = 0x40000000;
        v63 = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
        v64 = &__block_descriptor_tmp_27;
        v65 = v28;
        p_buf = &buf;
        block = (void **)MEMORY[0x24BDAC760];
        v57 = 0x40000000;
        v58 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        v59 = &__block_descriptor_tmp_21;
        v60 = v28 + 72;
        p_p_buf = &p_buf;
        v29 = *(NSObject **)(v28 + 88);
        if (*(_QWORD *)(v28 + 96))
        {
          dispatch_async_and_wait(v29, &block);
          if ((v21 & 1) == 0)
            goto LABEL_43;
LABEL_56:
          TransportModule::claimSystemWake_sync((TransportModule *)v5);
          TransportModule::notifyWakeToNetworkStack_sync((TransportModule *)v5);
          v34 = (const void *)*MEMORY[0x24BE05380];
          v35 = strlen((const char *)*MEMORY[0x24BE05380]);
          if (v35 >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:ne180100]();
          v36 = (void *)v35;
          if (v35 >= 0x17)
          {
            v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v35 | 7) != 0x17)
              v38 = v35 | 7;
            v39 = v38 + 1;
            v37 = (void **)operator new(v38 + 1);
            __dst[1] = v36;
            v51 = v39 | 0x8000000000000000;
            __dst[0] = v37;
          }
          else
          {
            HIBYTE(v51) = v35;
            v37 = __dst;
            if (!v35)
            {
LABEL_64:
              *((_BYTE *)v36 + (_QWORD)v37) = 0;
              v40 = *(xpc_object_t *)(v5 + 160);
              if (v40)
              {
                xpc_retain(*(xpc_object_t *)(v5 + 160));
                *(_QWORD *)&buf = v40;
              }
              else
              {
                v40 = xpc_null_create();
                *(_QWORD *)&buf = v40;
                if (!v40)
                {
                  v40 = 0;
                  *(_QWORD *)&buf = xpc_null_create();
LABEL_70:
                  xpc::bridge((xpc *)&buf, v41);
                  v42 = block;
                  if (block && (v43 = CFGetTypeID(block), v43 == CFDictionaryGetTypeID()))
                  {
                    cf = v42;
                    CFRetain(v42);
                  }
                  else
                  {
                    cf = 0;
                  }
                  aBlock = 0;
                  Service::broadcastEvent(v5, (uint64_t)__dst, &cf, (const void **)&aBlock);
                  if (aBlock)
                    _Block_release(aBlock);
                  if (cf)
                    CFRelease(cf);
                  if (block)
                    CFRelease(block);
                  xpc_release((xpc_object_t)buf);
                  *(_QWORD *)&buf = 0;
                  xpc_release(v40);
                  if (SHIBYTE(v51) < 0)
                    operator delete(__dst[0]);
                  v44 = *(NSObject **)(v5 + 88);
                  if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_89;
                  WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
                  if (SHIBYTE(v58) >= 0)
                    p_block = &block;
                  else
                    p_block = (void ***)block;
                  LODWORD(buf) = 136315138;
                  *(_QWORD *)((char *)&buf + 4) = p_block;
                  _os_log_impl(&dword_24B855000, v44, OS_LOG_TYPE_DEFAULT, "#I Baseband wake data (Did wake AP): %s", (uint8_t *)&buf, 0xCu);
                  goto LABEL_87;
                }
              }
              xpc_retain(v40);
              goto LABEL_70;
            }
          }
          memmove(v37, v34, (size_t)v36);
          goto LABEL_64;
        }
        dispatch_sync(v29, &block);
        if ((v21 & 1) != 0)
          goto LABEL_56;
LABEL_43:
        v30 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
          v31 = SHIBYTE(v58) >= 0 ? (void **)&block : block;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v31;
          _os_log_impl(&dword_24B855000, v30, OS_LOG_TYPE_DEFAULT, "#I Baseband wake data (Did NOT wake AP): %s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(v58) < 0)
            operator delete(block);
        }
        if (!v20)
          goto LABEL_90;
        v32 = *(NSObject **)(v5 + 88);
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
LABEL_89:
          TransportModule::submitMetric_sync((TransportModule *)v5, &xdict);
LABEL_90:
          xpc_release(xdict);
          goto LABEL_91;
        }
        WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
        if (SHIBYTE(v58) >= 0)
          v33 = &block;
        else
          v33 = (void ***)block;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v33;
        _os_log_error_impl(&dword_24B855000, v32, OS_LOG_TYPE_ERROR, "System and Baseband wake reason mismatch: %s", (uint8_t *)&buf, 0xCu);
LABEL_87:
        if (SHIBYTE(v58) < 0)
          operator delete(block);
        goto LABEL_89;
      }
LABEL_55:
      if (v21)
        goto LABEL_56;
      goto LABEL_43;
    }
  }
}

void sub_24B92102C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, xpc_object_t a18, char a19, uint64_t a20,uint64_t a21,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void TransportModule::notifyWakeToNetworkStack_sync(TransportModule *this)
{
  xpc_object_t v2;
  int v3;
  NSObject *v4;
  int *v5;
  char *v6;
  int v7;
  uint8_t buf[4];
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 38) == 3)
  {
    v2 = (xpc_object_t)*((_QWORD *)this + 20);
    if (v2)
      xpc_retain(*((xpc_object_t *)this + 20));
    else
      v2 = xpc_null_create();
    if (xpc::operator==<char const*>(MEMORY[0x24BE05160], v2, (char *)*MEMORY[0x24BE050F8])
      && xpc::operator==<char const*>(MEMORY[0x24BE051E0], v2, (char *)*MEMORY[0x24BE05310]))
    {
      v7 = 15;
      v3 = sysctlbyname("net.link.generic.system.port_used.wake_pkt_event_notify", 0, 0, &v7, 4uLL);
      v4 = *((_QWORD *)this + 11);
      if (v3)
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          v5 = __error();
          v6 = strerror(*v5);
          *(_DWORD *)buf = 136315138;
          v9 = v6;
          _os_log_error_impl(&dword_24B855000, v4, OS_LOG_TYPE_ERROR, "Failed to notify networking stack about Baseband wake packet, error: (%s)", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I Notified networking stack about Baseband wake packet", buf, 2u);
      }
    }
    xpc_release(v2);
  }
}

void sub_24B921310(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t WakeReason::describe(WakeReason *this, _DWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  _QWORD *v15;
  xpc::object *v16;
  uint64_t v17;
  _QWORD *v18;
  void **v19;
  void *v20;
  _QWORD *v21;
  char v22;
  size_t v23;
  const void **v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  WakeReason *v29;
  void *__p[2];
  char v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38[2];
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40 = 0xAAAAAAAAAAAAAAAALL;
  v50 = v4;
  v49 = v4;
  v48 = v4;
  v47 = v4;
  v46 = v4;
  v45 = v4;
  v44 = v4;
  v43 = v4;
  v42 = v4;
  *(_OWORD *)v38 = v4;
  v39 = v4;
  v36 = v4;
  v37 = v4;
  v34 = v4;
  v35 = v4;
  v5 = MEMORY[0x24BEDB870];
  v6 = MEMORY[0x24BEDB870] + 64;
  v41 = MEMORY[0x24BEDB870] + 64;
  v7 = (uint64_t *)MEMORY[0x24BEDB800];
  v8 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v33 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v33 + *(_QWORD *)(v33 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v33 + *(_QWORD *)(v33 - 24));
  std::ios_base::init(v9, &v34);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v33 = v5 + 24;
  v41 = v6;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v34 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)v38 = 0u;
  v39 = 0u;
  LODWORD(v40) = 16;
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"WakeStatus:'", 12);
  switch(*a2)
  {
    case 0:
      v12 = 13;
      v13 = "kNotSupported";
      goto LABEL_8;
    case 1:
      v12 = 13;
      v13 = "kNotAvailable";
LABEL_8:
      v32 = 13;
      __p[0] = *(void **)v13;
      *(void **)((char *)__p + 5) = *(void **)(v13 + 5);
      BYTE5(__p[1]) = 0;
      break;
    case 2:
      v12 = 10;
      v32 = 10;
      LOWORD(__p[1]) = 25701;
      v14 = "kRequested";
      goto LABEL_6;
    case 3:
      v12 = 10;
      v32 = 10;
      LOWORD(__p[1]) = 25964;
      v14 = "kAvailable";
LABEL_6:
      __p[0] = *(void **)v14;
      BYTE2(__p[1]) = 0;
      break;
    case 4:
      v12 = 6;
      v32 = 6;
      strcpy((char *)__p, "kError");
      break;
    default:
      v12 = 8;
      v32 = 8;
      strcpy((char *)__p, "kInvalid");
      break;
  }
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)__p, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
  if (v32 < 0)
    operator delete(__p[0]);
  v17 = *((_QWORD *)a2 + 1);
  v16 = (xpc::object *)(a2 + 2);
  if (MEMORY[0x24BD2A468](v17) == MEMORY[0x24BDACFA0])
  {
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)" WakeData:'", 11);
    xpc::object::to_string(v16);
    v19 = v32 >= 0 ? __p : (void **)__p[0];
    v20 = v32 >= 0 ? (void *)v32 : __p[1];
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, (uint64_t)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"'", 1);
    if (v32 < 0)
    {
      operator delete(__p[0]);
      v22 = v40;
      if ((v40 & 0x10) == 0)
        goto LABEL_21;
LABEL_25:
      v25 = *((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1) < (unint64_t)v37)
      {
        *((_QWORD *)&v39 + 1) = v37;
        v25 = v37;
      }
      v24 = (const void **)&v36 + 1;
      goto LABEL_28;
    }
  }
  v22 = v40;
  if ((v40 & 0x10) != 0)
    goto LABEL_25;
LABEL_21:
  if ((v22 & 8) == 0)
  {
    v23 = 0;
    *((_BYTE *)this + 23) = 0;
    goto LABEL_36;
  }
  v24 = (const void **)&v35;
  v25 = v36;
LABEL_28:
  v26 = *v24;
  v23 = v25 - (_QWORD)*v24;
  if (v23 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v23 >= 0x17)
  {
    v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v27 = v23 | 7;
    v28 = v27 + 1;
    v29 = (WakeReason *)operator new(v27 + 1);
    *((_QWORD *)this + 1) = v23;
    *((_QWORD *)this + 2) = v28 | 0x8000000000000000;
    *(_QWORD *)this = v29;
    this = v29;
    goto LABEL_35;
  }
  *((_BYTE *)this + 23) = v23;
  if (v23)
LABEL_35:
    memmove(this, v26, v23);
LABEL_36:
  *((_BYTE *)this + v23) = 0;
  v33 = *v7;
  *(uint64_t *)((char *)&v33 + *(_QWORD *)(v33 - 24)) = v7[3];
  *(_QWORD *)&v34 = v10 + 16;
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x24BD29B5C](&v41);
}

void sub_24B92170C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_28(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  _QWORD *v8;
  NSObject *v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  void *v13;
  void **v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  const void *v19;
  size_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  size_t v27;
  std::string::size_type v28;
  std::string *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  int v33;
  size_t v34;
  void **v35;
  NSObject *v36;
  void **v37;
  CFTypeRef v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  uint64_t v41;
  const void *v42;
  int v43;
  size_t v44;
  size_t v45;
  std::string::size_type v46;
  size_t v47;
  std::string *v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  char *v52;
  uint8_t *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  void *v57[2];
  std::string::size_type v58;
  void *__p[3];
  _QWORD v60[2];
  CFTypeRef cf;
  std::__shared_weak_count *v63;
  uint64_t v64;
  void *__dst[5];
  uint8_t buf[24];
  void *v67;
  _QWORD *v68;
  void **v69;
  std::string v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (_QWORD *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v63 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        v15 = v6;
LABEL_64:
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v40 = __ldaxr(p_shared_owners);
        while (__stlxr(v40 - 1, p_shared_owners));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        return;
      }
      v7 = v5[11];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_24B855000, v7, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Transport state ---------------", buf, 2u);
      }
      v8 = (_QWORD *)v5[23];
      if (v8)
      {
        __dst[0] = (void *)MEMORY[0x24BDAC760];
        __dst[1] = (void *)0x40000000;
        __dst[2] = ___ZNK4data16TransportService5State9dumpStateEv_block_invoke;
        __dst[3] = &__block_descriptor_tmp_26;
        __dst[4] = v8;
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        __p[0] = __dst;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        v67 = &__block_descriptor_tmp_21;
        v68 = v8 + 9;
        v69 = __p;
        v9 = v8[11];
        if (!v8[12])
        {
          dispatch_sync(v9, buf);
          v10 = v5[21];
          if (!v10)
          {
LABEL_11:
            cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
            abm::client::Event::getData(*a2);
            v60[0] = 0xAAAAAAAAAAAAAAAALL;
            v60[1] = 0xAAAAAAAAAAAAAAAALL;
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v60, (const __CFDictionary *)cf);
            memset(buf, 170, sizeof(buf));
            v11 = (const void *)*MEMORY[0x24BE04FF0];
            v12 = strlen((const char *)*MEMORY[0x24BE04FF0]);
            if (v12 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v13 = (void *)v12;
            if (v12 >= 0x17)
            {
              v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v12 | 7) != 0x17)
                v16 = v12 | 7;
              v17 = v16 + 1;
              v14 = (void **)operator new(v16 + 1);
              __dst[1] = v13;
              __dst[2] = (void *)(v17 | 0x8000000000000000);
              __dst[0] = v14;
            }
            else
            {
              HIBYTE(__dst[2]) = v12;
              v14 = __dst;
              if (!v12)
              {
LABEL_20:
                v18 = (const char *)*MEMORY[0x24BE05090];
                *((_BYTE *)v13 + (_QWORD)v14) = 0;
                ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, v18);
                ctu::cf::map_adapter::getString();
                MEMORY[0x24BD29478](__p);
                if (SHIBYTE(__dst[2]) < 0)
                  operator delete(__dst[0]);
                memset(__dst, 170, 24);
                v19 = (const void *)*MEMORY[0x24BDFC720];
                v20 = strlen((const char *)*MEMORY[0x24BDFC720]);
                if (v20 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v21 = (void *)v20;
                if (v20 >= 0x17)
                {
                  v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v20 | 7) != 0x17)
                    v23 = v20 | 7;
                  v24 = v23 + 1;
                  v22 = operator new(v23 + 1);
                  __p[1] = v21;
                  __p[2] = (void *)(v24 | 0x8000000000000000);
                  __p[0] = v22;
                }
                else
                {
                  HIBYTE(__p[2]) = v20;
                  v22 = __p;
                  if (!v20)
                  {
LABEL_30:
                    v25 = (const char *)*MEMORY[0x24BE05268];
                    *((_BYTE *)v21 + (_QWORD)v22) = 0;
                    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v70, v25);
                    ctu::cf::map_adapter::getString();
                    MEMORY[0x24BD29478](&v70);
                    if (SHIBYTE(__p[2]) < 0)
                      operator delete(__p[0]);
                    memset(__p, 170, sizeof(__p));
                    v26 = (const char *)*MEMORY[0x24BE05280];
                    v27 = strlen((const char *)*MEMORY[0x24BE05280]);
                    if (v27 > 0x7FFFFFFFFFFFFFF7)
                      std::string::__throw_length_error[abi:ne180100]();
                    v28 = v27;
                    if (v27 >= 0x17)
                    {
                      v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v27 | 7) != 0x17)
                        v30 = v27 | 7;
                      v31 = v30 + 1;
                      v29 = (std::string *)operator new(v30 + 1);
                      v70.__r_.__value_.__l.__size_ = v28;
                      v70.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
                      v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
                    }
                    else
                    {
                      *((_BYTE *)&v70.__r_.__value_.__s + 23) = v27;
                      v29 = &v70;
                      if (!v27)
                      {
LABEL_40:
                        v32 = (const char *)*MEMORY[0x24BE051A8];
                        v29->__r_.__value_.__s.__data_[v28] = 0;
                        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v64, v32);
                        ctu::cf::map_adapter::getString();
                        MEMORY[0x24BD29478](&v64);
                        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v70.__r_.__value_.__l.__data_);
                        v33 = SHIBYTE(__p[2]);
                        if (SHIBYTE(__p[2]) >= 0)
                          v34 = HIBYTE(__p[2]);
                        else
                          v34 = (size_t)__p[1];
                        if (v34 == strlen(v26)
                          && (SHIBYTE(__p[2]) >= 0 ? (v35 = __p) : (v35 = (void **)__p[0]), !memcmp(v35, v26, v34)))
                        {
                          v41 = v5[21];
                          if (v41)
                          {
                            v42 = (const void *)*MEMORY[0x24BDFC718];
                            v43 = SHIBYTE(__dst[2]);
                            if (SHIBYTE(__dst[2]) >= 0)
                              v44 = HIBYTE(__dst[2]);
                            else
                              v44 = (size_t)__dst[1];
                            v45 = strlen((const char *)*MEMORY[0x24BDFC718]);
                            v46 = v44 + v45;
                            memset(&v70, 170, sizeof(v70));
                            if (v44 + v45 > 0x7FFFFFFFFFFFFFF7)
                              std::string::__throw_length_error[abi:ne180100]();
                            v47 = v45;
                            if (v46 > 0x16)
                            {
                              v49 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v46 | 7) != 0x17)
                                v49 = v46 | 7;
                              v50 = v49 + 1;
                              v48 = (std::string *)operator new(v49 + 1);
                              v70.__r_.__value_.__l.__size_ = v46;
                              v70.__r_.__value_.__r.__words[2] = v50 | 0x8000000000000000;
                              v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
                            }
                            else
                            {
                              memset(&v70, 0, sizeof(v70));
                              v48 = &v70;
                              *((_BYTE *)&v70.__r_.__value_.__s + 23) = v44 + v45;
                            }
                            if (v44)
                            {
                              if (v43 >= 0)
                                v51 = __dst;
                              else
                                v51 = (void **)__dst[0];
                              memmove(v48, v51, v44);
                            }
                            v52 = (char *)v48 + v44;
                            if (v47)
                              memmove(v52, v42, v47);
                            v52[v47] = 0;
                            if ((buf[23] & 0x80u) == 0)
                              v53 = buf;
                            else
                              v53 = *(uint8_t **)buf;
                            if ((buf[23] & 0x80u) == 0)
                              v54 = buf[23];
                            else
                              v54 = *(_QWORD *)&buf[8];
                            v55 = std::string::append(&v70, (const std::string::value_type *)v53, v54);
                            v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
                            v58 = v55->__r_.__value_.__r.__words[2];
                            *(_OWORD *)v57 = v56;
                            v55->__r_.__value_.__l.__size_ = 0;
                            v55->__r_.__value_.__r.__words[2] = 0;
                            v55->__r_.__value_.__r.__words[0] = 0;
                            (*(void (**)(uint64_t, void **))(*(_QWORD *)v41 + 48))(v41, v57);
                            if (SHIBYTE(v58) < 0)
                              operator delete(v57[0]);
                            if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v70.__r_.__value_.__l.__data_);
                          }
                        }
                        else
                        {
                          v36 = v5[11];
                          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
                          {
                            v37 = (void **)__p[0];
                            if (v33 >= 0)
                              v37 = __p;
                            LODWORD(v70.__r_.__value_.__l.__data_) = 136315138;
                            *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
                            _os_log_impl(&dword_24B855000, v36, OS_LOG_TYPE_DEFAULT, "#I Skipping snapshot as trace filter is '%s'", (uint8_t *)&v70, 0xCu);
                          }
                        }
                        if (SHIBYTE(__p[2]) < 0)
                        {
                          operator delete(__p[0]);
                          if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                          {
LABEL_56:
                            if (((char)buf[23] & 0x80000000) == 0)
                              goto LABEL_57;
                            goto LABEL_61;
                          }
                        }
                        else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                        {
                          goto LABEL_56;
                        }
                        operator delete(__dst[0]);
                        if (((char)buf[23] & 0x80000000) == 0)
                        {
LABEL_57:
                          MEMORY[0x24BD294A8](v60);
                          v38 = cf;
                          if (!cf)
                          {
LABEL_63:
                            v15 = v63;
                            if (!v63)
                              return;
                            goto LABEL_64;
                          }
LABEL_62:
                          CFRelease(v38);
                          goto LABEL_63;
                        }
LABEL_61:
                        operator delete(*(void **)buf);
                        MEMORY[0x24BD294A8](v60);
                        v38 = cf;
                        if (!cf)
                          goto LABEL_63;
                        goto LABEL_62;
                      }
                    }
                    memmove(v29, v26, v28);
                    goto LABEL_40;
                  }
                }
                memmove(v22, v19, (size_t)v21);
                goto LABEL_30;
              }
            }
            memmove(v14, v11, (size_t)v13);
            goto LABEL_20;
          }
LABEL_10:
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
          goto LABEL_11;
        }
        dispatch_async_and_wait(v9, buf);
      }
      v10 = v5[21];
      if (!v10)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
}

void sub_24B921E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,const void *a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v43 - 89) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
      {
LABEL_8:
        if (a35 < 0)
          operator delete(a30);
        if (a43 < 0)
          operator delete(a38);
        MEMORY[0x24BD294A8](&a22);
        ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a24);
        std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a16);
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v43 - 89) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v43 - 112));
  if ((a21 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_31(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  NSObject *v9;
  void (****v10)(void);
  uint64_t v11;
  CFTypeRef v12;
  uint64_t (*v13)(uint64_t);
  const char *v14;
  const char *v15;
  size_t v16;
  int v17;
  void *v18;
  size_t v19;
  void **v20;
  void **v21;
  void *v22;
  void **v23;
  size_t v24;
  void **v25;
  void **v26;
  uint64_t v27;
  void (**v28)(void);
  unint64_t *p_shared_owners;
  unint64_t v30;
  void *v31[2];
  char v32;
  _QWORD v33[2];
  CFTypeRef cf;
  std::__shared_weak_count *v36;
  uint64_t v37;
  void *__p[5];
  void *block[6];

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v36 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
        goto LABEL_67;
      v8 = *(_QWORD **)(v5 + 184);
      if (v8)
      {
        __p[0] = (void *)MEMORY[0x24BDAC760];
        __p[1] = (void *)0x40000000;
        __p[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
        __p[3] = &__block_descriptor_tmp_27;
        __p[4] = v8;
        block[0] = (void *)MEMORY[0x24BDAC760];
        v31[0] = __p;
        block[1] = (void *)0x40000000;
        block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        block[3] = &__block_descriptor_tmp_21;
        block[4] = v8 + 9;
        block[5] = v31;
        v9 = v8[11];
        if (!v8[12])
        {
          dispatch_sync(v9, block);
          v27 = *(_QWORD *)(v5 + 168);
          v10 = (void (****)(void))(v5 + 168);
          if (v27)
          {
LABEL_8:
            cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
            abm::client::Event::getData(*a2);
            v12 = cf;
            v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
            if (!cf)
              v13 = 0;
            if (!v13)
              goto LABEL_65;
            v33[0] = 0xAAAAAAAAAAAAAAAALL;
            v33[1] = 0xAAAAAAAAAAAAAAAALL;
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v33, (const __CFDictionary *)cf);
            memset(block, 170, 24);
            v14 = (const char *)*MEMORY[0x24BE05198];
            HIBYTE(__p[2]) = 0;
            LOBYTE(__p[0]) = 0;
            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v31, v14);
            ctu::cf::map_adapter::getString();
            MEMORY[0x24BD29478](v31);
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            memset(__p, 170, 24);
            v15 = (const char *)*MEMORY[0x24BE051A0];
            v32 = 0;
            LOBYTE(v31[0]) = 0;
            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v37, v15);
            ctu::cf::map_adapter::getString();
            MEMORY[0x24BD29478](&v37);
            if (v32 < 0)
              operator delete(v31[0]);
            v16 = HIBYTE(block[2]);
            v17 = SHIBYTE(block[2]);
            v18 = block[1];
            if (SHIBYTE(block[2]) >= 0)
              v19 = HIBYTE(block[2]);
            else
              v19 = (size_t)block[1];
            if (v19 == strlen((const char *)*MEMORY[0x24BE05340]))
            {
              v20 = SHIBYTE(block[2]) >= 0 ? block : (void **)block[0];
              if (!memcmp(v20, (const void *)*MEMORY[0x24BE05340], v19))
              {
                ((void (*)(void (***)(void)))(**v10)[1])(*v10);
                v28 = **v10;
LABEL_59:
                (*v28)();
                goto LABEL_60;
              }
            }
            if (v19 == strlen((const char *)*MEMORY[0x24BE05530]))
            {
              v21 = v17 >= 0 ? block : (void **)block[0];
              if (!memcmp(v21, (const void *)*MEMORY[0x24BE05530], v19))
              {
                v22 = SHIBYTE(__p[2]) >= 0 ? (void *)HIBYTE(__p[2]) : __p[1];
                if (v22 == (void *)strlen((const char *)*MEMORY[0x24BE051D0]))
                {
                  v23 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
                  if (!memcmp(v23, (const void *)*MEMORY[0x24BE051D0], (size_t)v22))
                  {
                    if ((((uint64_t (*)(void (***)(void)))(**v10)[11])(*v10) & 1) != 0)
                    {
LABEL_58:
                      v28 = **v10 + 2;
                      goto LABEL_59;
                    }
                    v16 = HIBYTE(block[2]);
                    v18 = block[1];
                    LOBYTE(v17) = HIBYTE(block[2]);
                  }
                }
              }
            }
            if ((v17 & 0x80u) == 0)
              v24 = v16;
            else
              v24 = (size_t)v18;
            if (v24 != strlen((const char *)*MEMORY[0x24BE054A8])
              || ((v17 & 0x80u) == 0 ? (v25 = block) : (v25 = (void **)block[0]),
                  memcmp(v25, (const void *)*MEMORY[0x24BE054A8], v24)))
            {
              if (v24 == strlen((const char *)*MEMORY[0x24BE05638]))
              {
                v26 = (v17 & 0x80u) == 0 ? block : (void **)block[0];
                if (!memcmp(v26, (const void *)*MEMORY[0x24BE05638], v24))
                {
                  ((void (*)(void (***)(void)))(**v10)[2])(*v10);
                  ((void (*)(void (***)(void)))(**v10)[7])(*v10);
                  std::shared_ptr<TransportService>::reset[abi:ne180100](v10);
                }
              }
              goto LABEL_60;
            }
            if (((unsigned int (*)(void (***)(void)))(**v10)[11])(*v10)
              && (!((unsigned int (*)(void (***)(void)))(**v10)[11])(*v10)
               || !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, (char *)*MEMORY[0x24BE051D8])))
            {
LABEL_60:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              if (SHIBYTE(block[2]) < 0)
                operator delete(block[0]);
              MEMORY[0x24BD294A8](v33);
              v12 = cf;
LABEL_65:
              if (v12)
                CFRelease(v12);
              goto LABEL_67;
            }
            goto LABEL_58;
          }
LABEL_67:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v30 = __ldaxr(p_shared_owners);
          while (__stlxr(v30 - 1, p_shared_owners));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        dispatch_async_and_wait(v9, block);
      }
      v11 = *(_QWORD *)(v5 + 168);
      v10 = (void (****)(void))(v5 + 168);
      if (v11)
        goto LABEL_8;
      goto LABEL_67;
    }
  }
}

void sub_24B9223DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, const void *a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a28 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  MEMORY[0x24BD294A8](&a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_24B92246C()
{
  JUMPOUT(0x24B922454);
}

void sub_24B922474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_34(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD v11[5];
  _QWORD *v12;
  _QWORD block[6];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (!a1[5])
        goto LABEL_9;
      v6 = *(_QWORD *)(v3 + 184);
      if (v6)
      {
        v11[0] = MEMORY[0x24BDAC760];
        v11[1] = 0x40000000;
        v11[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
        v11[3] = &__block_descriptor_tmp_27;
        v11[4] = v6;
        v12 = v11;
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 0x40000000;
        block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        block[3] = &__block_descriptor_tmp_21;
        block[4] = v6 + 72;
        block[5] = &v12;
        v7 = *(NSObject **)(v6 + 88);
        if (!*(_QWORD *)(v6 + 96))
        {
          dispatch_sync(v7, block);
          v8 = *(_QWORD *)(v3 + 168);
          if (!v8)
          {
LABEL_9:
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v10 = __ldaxr(p_shared_owners);
            while (__stlxr(v10 - 1, p_shared_owners));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
            return;
          }
LABEL_8:
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          goto LABEL_9;
        }
        dispatch_async_and_wait(v7, block);
      }
      v8 = *(_QWORD *)(v3 + 168);
      if (!v8)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
}

void sub_24B9225B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_36(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD v13[5];
  _QWORD *v14;
  uint8_t buf[8];
  uint64_t v16;
  _QWORD *(*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  _QWORD *v20;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        v9 = v3[11];
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_24B855000, v9, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Transport state ---------------", buf, 2u);
        }
        v10 = v3[23];
        if (v10)
        {
          v13[0] = MEMORY[0x24BDAC760];
          v13[1] = 0x40000000;
          v13[2] = ___ZNK4data16TransportService5State9dumpStateEv_block_invoke;
          v13[3] = &__block_descriptor_tmp_26;
          v13[4] = v10;
          v14 = v13;
          *(_QWORD *)buf = MEMORY[0x24BDAC760];
          v16 = 0x40000000;
          v17 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
          v18 = &__block_descriptor_tmp_21;
          v19 = v10 + 72;
          v20 = &v14;
          v11 = *(NSObject **)(v10 + 88);
          if (!*(_QWORD *)(v10 + 96))
          {
            dispatch_sync(v11, buf);
            v12 = v3[21];
            if (!v12)
              return;
LABEL_14:
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
            return;
          }
          dispatch_async_and_wait(v11, buf);
        }
        v12 = v3[21];
        if (!v12)
          return;
        goto LABEL_14;
      }
    }
  }
}

void TransportModule::sleep(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::sleep(dispatch::group_session)::$_0>(TransportModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void TransportModule::wake(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::wake(dispatch::group_session)::$_0>(TransportModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

BOOL xpc::operator==<char const*>(const char **a1, xpc_object_t xdict, char *key)
{
  xpc_object_t value;
  xpc_object_t v5;
  xpc_object_t v6;
  _BOOL8 v7;

  value = xpc_dictionary_get_value(xdict, key);
  if (value)
  {
    v5 = value;
    xpc_retain(value);
  }
  else
  {
    v5 = xpc_null_create();
  }
  v6 = xpc_string_create(*a1);
  if (!v6)
    v6 = xpc_null_create();
  v7 = xpc_equal(v6, v5);
  xpc_release(v6);
  xpc_release(v5);
  return v7;
}

void sub_24B922990(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  xpc_release(v2);
  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBF218;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBF218;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<TransportModule *,std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule *)#1},std::allocator<TransportModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<TransportModule *,std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule *)#1},std::allocator<TransportModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule*)#1}::operator() const(TransportModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<TransportModule *,std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule *)#1},std::allocator<TransportModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule*)#1}::operator() const(TransportModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBF218;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ctu::SharedSynchronizable<TransportModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15TransportModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_251CBF300;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI15TransportModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIK15TransportModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIK15TransportModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::initialize(dispatch::group_session)::$_0>(TransportModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  TransportModule **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(TransportModule ***)a1;
  TransportModule::finishInitialization_sync(**(TransportModule ***)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_24B922E80(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::sleep(dispatch::group_session)::$_0>(TransportModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *isa;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[5];
  _QWORD *v14;
  dispatch_object_t block[6];

  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 184);
  if (!v4)
  {
LABEL_4:
    v6 = *(_QWORD *)(v3 + 168);
    if (!v6)
      goto LABEL_11;
    goto LABEL_5;
  }
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 0x40000000;
  v13[2] = ___ZN4data16TransportService5State13enterLowPowerEv_block_invoke;
  v13[3] = &__block_descriptor_tmp_20;
  v13[4] = v4;
  v14 = v13;
  block[0] = (dispatch_object_t)MEMORY[0x24BDAC760];
  block[1] = (dispatch_object_t)0x40000000;
  block[2] = (dispatch_object_t)___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
  block[3] = (dispatch_object_t)&__block_descriptor_tmp_21;
  block[4] = v4 + 9;
  block[5] = (dispatch_object_t)&v14;
  isa = v4[11].isa;
  if (v4[12].isa)
  {
    dispatch_async_and_wait(isa, block);
    goto LABEL_4;
  }
  dispatch_sync(isa, block);
  v6 = *(_QWORD *)(v3 + 168);
  if (!v6)
    goto LABEL_11;
LABEL_5:
  v7 = v2[1];
  block[0] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  (*(void (**)(uint64_t, dispatch_object_t *))(*(_QWORD *)v6 + 24))(v6, block);
  if (block[0])
  {
    dispatch_group_leave(block[0]);
    if (block[0])
      dispatch_release(block[0]);
  }
LABEL_11:
  v8 = v2[1];
  if (v8)
  {
    dispatch_group_leave(v8);
    v9 = v2[1];
    if (v9)
      dispatch_release(v9);
  }
  operator delete(v2);
  v10 = (std::__shared_weak_count *)a1[2];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  operator delete(a1);
}

void sub_24B92303C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group)
{
  _QWORD *v15;
  _QWORD *v16;
  NSObject *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  v18 = v16[1];
  if (v18)
  {
    dispatch_group_leave(v18);
    v19 = v16[1];
    if (v19)
      dispatch_release(v19);
  }
  operator delete(v16);
  v20 = (std::__shared_weak_count *)v15[2];
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::wake(dispatch::group_session)::$_0>(TransportModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _QWORD v14[5];
  _QWORD *v15;
  dispatch_group_t group;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;

  v2 = *a1;
  v3 = **a1;
  v4 = *(_QWORD *)(v3 + 184);
  if (v4)
  {
    group = (dispatch_group_t)MEMORY[0x24BDAC760];
    v17 = 0x40000000;
    v18 = ___ZN4data16TransportService5State12exitLowPowerEv_block_invoke;
    v19 = &__block_descriptor_tmp_22;
    v20 = v4;
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped((uint64_t *)(v4 + 72), (uint64_t)&group);
  }
  if (!*(_DWORD *)(v3 + 152))
  {
    v12 = *(_QWORD *)(v3 + 184);
    if (v12)
    {
      v14[0] = MEMORY[0x24BDAC760];
      v14[1] = 0x40000000;
      v14[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
      v14[3] = &__block_descriptor_tmp_27;
      v14[4] = v12;
      v15 = v14;
      group = (dispatch_group_t)MEMORY[0x24BDAC760];
      v17 = 0x40000000;
      v18 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
      v19 = &__block_descriptor_tmp_21;
      v20 = v12 + 72;
      v21 = &v15;
      v13 = *(NSObject **)(v12 + 88);
      if (*(_QWORD *)(v12 + 96))
        dispatch_async_and_wait(v13, &group);
      else
        dispatch_sync(v13, &group);
    }
  }
  v5 = *(_QWORD *)(v3 + 168);
  if (v5)
  {
    v6 = v2[1];
    group = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v6);
    }
    (*(void (**)(uint64_t, dispatch_group_t *))(*(_QWORD *)v5 + 32))(v5, &group);
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
  }
  v7 = v2[1];
  if (v7)
  {
    dispatch_group_leave(v7);
    v8 = v2[1];
    if (v8)
      dispatch_release(v8);
  }
  operator delete(v2);
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(a1);
}

void sub_24B923270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group)
{
  _QWORD *v15;
  _QWORD *v16;
  NSObject *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  v18 = v16[1];
  if (v18)
  {
    dispatch_group_leave(v18);
    v19 = v16[1];
    if (v19)
      dispatch_release(v19);
  }
  operator delete(v16);
  v20 = (std::__shared_weak_count *)v15[2];
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

capabilities::radio *radio::HealthService::HealthService(capabilities::radio *a1, uint64_t a2, uint64_t a3, const void **a4)
{
  uint64_t v6;
  const void *v7;
  _QWORD v9[5];
  CFTypeRef cf;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  capabilities::radio::maverick(a1);
  v6 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v7 = *a4;
    if (v7)
      CFRetain(v7);
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 1174405120;
    v9[2] = ___ZN5radio13HealthService5State5startEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
    v9[3] = &__block_descriptor_tmp_19;
    v9[4] = v6;
    cf = v7;
    if (v7)
      CFRetain(v7);
    ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(v6 + 72), (uint64_t)v9);
    if (cf)
      CFRelease(cf);
    if (v7)
      CFRelease(v7);
  }
  return a1;
}

void sub_24B9233B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void radio::HealthService::State::start(uint64_t a1, const void **a2)
{
  const void *v3;
  _QWORD v4[5];
  CFTypeRef cf;

  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 1174405120;
  v4[2] = ___ZN5radio13HealthService5State5startEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v4[3] = &__block_descriptor_tmp_19;
  v3 = *a2;
  v4[4] = a1;
  cf = v3;
  if (v3)
    CFRetain(v3);
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v4);
  if (cf)
    CFRelease(cf);
}

void radio::HealthService::reportDataStats(radio::HealthService *this)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2[0] = MEMORY[0x24BDAC760];
    v2[1] = 0x40000000;
    v2[2] = ___ZN5radio13HealthService5State15reportDataStatsEv_block_invoke;
    v2[3] = &__block_descriptor_tmp_5_5;
    v2[4] = v1;
    ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
  }
}

void radio::HealthService::State::reportDataStats(radio::HealthService::State *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x24BDAC760];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio13HealthService5State15reportDataStatsEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_5_5;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void radio::HealthService::reset(radio::HealthService *this)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2[0] = MEMORY[0x24BDAC760];
    v2[1] = 0x40000000;
    v2[2] = ___ZN5radio13HealthService5State5resetEv_block_invoke;
    v2[3] = &__block_descriptor_tmp_6_5;
    v2[4] = v1;
    ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
  }
}

void radio::HealthService::State::reset(radio::HealthService::State *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x24BDAC760];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio13HealthService5State5resetEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_6_5;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void radio::HealthService::enterLowPower(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  _QWORD block[4];
  void *aBlock;

  v3 = *a1;
  if (*a1)
  {
    if (*(_QWORD *)a2)
    {
      v4 = _Block_copy(*(const void **)a2);
      v5 = *(NSObject **)(a2 + 8);
      v9 = v4;
      v10 = v5;
      if (v5)
        goto LABEL_4;
    }
    else
    {
      v4 = 0;
      v5 = *(NSObject **)(a2 + 8);
      v9 = 0;
      v10 = v5;
      if (v5)
      {
LABEL_4:
        dispatch_retain(v5);
        radio::HealthService::State::enterLowPower(v3, (uint64_t)&v9);
        dispatch_release(v5);
        if (!v4)
          return;
LABEL_10:
        _Block_release(v4);
        return;
      }
    }
    radio::HealthService::State::enterLowPower(v3, (uint64_t)&v9);
    if (!v4)
      return;
    goto LABEL_10;
  }
  if (*(_QWORD *)a2)
    v6 = _Block_copy(*(const void **)a2);
  else
    v6 = 0;
  v7 = *(NSObject **)(a2 + 8);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_17_1;
  if (!v6)
  {
    aBlock = 0;
    dispatch_async(v7, block);
    v8 = aBlock;
    if (!aBlock)
      goto LABEL_17;
    goto LABEL_16;
  }
  aBlock = _Block_copy(v6);
  dispatch_async(v7, block);
  v8 = aBlock;
  if (aBlock)
LABEL_16:
    _Block_release(v8);
LABEL_17:
  if (v6)
    _Block_release(v6);
}

void radio::HealthService::State::enterLowPower(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_13_4;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

uint64_t dispatch::callback<void({block_pointer})(void)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void radio::HealthService::exitLowPower(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  _QWORD block[4];
  void *aBlock;

  v3 = *a1;
  if (*a1)
  {
    if (*(_QWORD *)a2)
    {
      v4 = _Block_copy(*(const void **)a2);
      v5 = *(NSObject **)(a2 + 8);
      v9 = v4;
      v10 = v5;
      if (v5)
        goto LABEL_4;
    }
    else
    {
      v4 = 0;
      v5 = *(NSObject **)(a2 + 8);
      v9 = 0;
      v10 = v5;
      if (v5)
      {
LABEL_4:
        dispatch_retain(v5);
        radio::HealthService::State::exitLowPower(v3, (uint64_t)&v9);
        dispatch_release(v5);
        if (!v4)
          return;
LABEL_10:
        _Block_release(v4);
        return;
      }
    }
    radio::HealthService::State::exitLowPower(v3, (uint64_t)&v9);
    if (!v4)
      return;
    goto LABEL_10;
  }
  if (*(_QWORD *)a2)
    v6 = _Block_copy(*(const void **)a2);
  else
    v6 = 0;
  v7 = *(NSObject **)(a2 + 8);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_17_1;
  if (!v6)
  {
    aBlock = 0;
    dispatch_async(v7, block);
    v8 = aBlock;
    if (!aBlock)
      goto LABEL_17;
    goto LABEL_16;
  }
  aBlock = _Block_copy(v6);
  dispatch_async(v7, block);
  v8 = aBlock;
  if (aBlock)
LABEL_16:
    _Block_release(v8);
LABEL_17:
  if (v6)
    _Block_release(v6);
}

void radio::HealthService::State::exitLowPower(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_15_4;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void radio::HealthService::State::~State(radio::HealthService::State *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  uint8_t v19[16];

  *(_QWORD *)this = off_251CBF348;
  v2 = *((_QWORD *)this + 24);
  if (v2)
  {
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopped data reporting", v19, 2u);
      v2 = *((_QWORD *)this + 24);
    }
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 24));
    *((_QWORD *)this + 24) = 0;
  }
  std::__tree<std::string>::destroy((uint64_t)this + 168, *((char **)this + 22));
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
    if (!v7)
      goto LABEL_15;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v10)
    goto LABEL_19;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
    if (!v13)
      goto LABEL_25;
  }
  else
  {
LABEL_19:
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
    if (!v13)
      goto LABEL_25;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_25:
  *(_QWORD *)this = off_251CBF5D8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v16 = *((_QWORD *)this + 12);
  if (v16)
    dispatch_release(v16);
  v17 = *((_QWORD *)this + 11);
  if (v17)
    dispatch_release(v17);
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
}

{
  void *v1;

  radio::HealthService::State::~State(this);
  operator delete(v1);
}

void radio::HealthService::State::stopDataReportingTimer_sync(radio::HealthService::State *this)
{
  NSObject *v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *((_QWORD *)this + 24);
  if (v1)
  {
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_24B855000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopped data reporting", v4, 2u);
      v1 = *((_QWORD *)this + 24);
    }
    dispatch_source_cancel(v1);
    dispatch_release(*((dispatch_object_t *)this + 24));
    *((_QWORD *)this + 24) = 0;
  }
}

_QWORD *ctu::SharedLoggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBF5D8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBF5D8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

_QWORD *radio::HealthService::State::State(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  NSObject *initially_inactive;
  NSObject *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21[2];
  _BYTE v22[16];
  char v23[16];
  char v24[16];

  *a1 = off_251CBF348;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v22, "com.apple.telephony.abm", "net.health.svc");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v7 = dispatch_queue_create_with_target_V2("net.health.svc", initially_inactive, 0);
  dispatch_set_qos_class_floor(v7, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v7);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    a1[12] = 0;
    dispatch_release(v7);
  }
  else
  {
    a1[12] = 0;
  }
  *a1 = off_251CBF5D8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v24);
  a1[1] = &unk_251CB85F0;
  a1[7] = *a2;
  v8 = a2[1];
  a1[8] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v23);
  *a1 = off_251CBF648;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
  *a1 = off_251CBF348;
  a1[13] = 0;
  a1[14] = 0;
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v21[0] = v11;
  v21[1] = (uint64_t)v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  NetworkStatsInterface::create(v21, a1 + 15);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  a1[17] = *a3;
  v17 = a3[1];
  a1[18] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a1[19] = 0;
  a1[20] = 0;
  a1[23] = 0;
  a1[24] = 0;
  a1[22] = 0;
  a1[21] = a1 + 22;
  return a1;
}

void sub_24B923EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v10);
  ctu::SharedLoggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v9);
  _Unwind_Resume(a1);
}

void sub_24B923ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

const char *radio::HealthService::State::getName(radio::HealthService::State *this)
{
  return "net.health.svc";
}

void ___ZN5radio13HealthService5State5startEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  radio::HealthService::State *v1;
  const __CFDictionary *v2;
  const __CFDictionary *v3;

  v1 = *(radio::HealthService::State **)(a1 + 32);
  v2 = *(const __CFDictionary **)(a1 + 40);
  v3 = v2;
  if (v2)
    CFRetain(v2);
  radio::HealthService::State::startDataReportingTimer_sync((uint64_t)v1, &v3);
  if (v2)
    CFRelease(v2);
  radio::HealthService::State::startDataStallReporting_sync(v1);
}

void sub_24B923F6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t radio::HealthService::State::startDataReportingTimer_sync(uint64_t a1, const __CFDictionary **a2)
{
  unsigned int Int;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD handler[6];
  std::__shared_weak_count *v25;
  _QWORD v26[2];
  uint8_t buf[16];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v26[0] = 0xAAAAAAAAAAAAAAAALL;
  v26[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v26, *a2);
  Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v26, CFSTR("DataReportingInterval"));
  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = Int;
    _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "#I Starting data reporting with interval %d millisec", buf, 8u);
  }
  v5 = dispatch_source_create(MEMORY[0x24BDACA18], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
  *(_QWORD *)(a1 + 192) = v5;
  dispatch_source_set_timer(v5, 0, 1000000 * Int, 0x3B9ACA00uLL);
  v6 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v6 || (v7 = *(_QWORD *)(a1 + 72), (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v14 = *(NSObject **)(a1 + 192);
  handler[0] = MEMORY[0x24BDAC760];
  handler[1] = 1174405120;
  handler[2] = ___ZN5radio13HealthService5State28startDataReportingTimer_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  handler[3] = &__block_descriptor_tmp_7_2;
  handler[4] = a1;
  handler[5] = v7;
  v25 = v9;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  dispatch_source_set_event_handler(v14, handler);
  NetworkStatsInterface::query(*(NetworkStatsInterface **)(a1 + 120), buf);
  v16 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v17 = *(std::__shared_weak_count **)(a1 + 160);
  *(_OWORD *)(a1 + 152) = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  radio::HealthService::State::reportDataStats_sync((radio::HealthService::State *)a1);
  dispatch_activate(*(dispatch_object_t *)(a1 + 192));
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  std::__shared_weak_count::__release_weak(v9);
  return MEMORY[0x24BD294A8](v26);
}

void radio::HealthService::State::startDataStallReporting_sync(radio::HealthService::State *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  NSObject *v16;
  _QWORD aBlock[6];
  std::__shared_weak_count *v18;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio13HealthService5State28startDataStallReporting_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_9_3;
  aBlock[4] = this;
  aBlock[5] = v3;
  v18 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  v11 = _Block_copy(aBlock);
  v12 = *((_QWORD *)this + 11);
  if (v12)
    dispatch_retain(*((dispatch_object_t *)this + 11));
  v13 = *((_QWORD *)this + 17);
  if (v11)
  {
    v14 = _Block_copy(v11);
    v15 = v14;
    v16 = v12;
    if (v12)
      goto LABEL_15;
LABEL_18:
    DataStallDetection::setCallback(v13, (uint64_t)&v15);
    if (!v14)
      goto LABEL_20;
    goto LABEL_19;
  }
  v14 = 0;
  v15 = 0;
  v16 = v12;
  if (!v12)
    goto LABEL_18;
LABEL_15:
  dispatch_retain(v12);
  DataStallDetection::setCallback(v13, (uint64_t)&v15);
  dispatch_release(v12);
  if (v14)
LABEL_19:
    _Block_release(v14);
LABEL_20:
  if (v12)
    dispatch_release(v12);
  if (v11)
    _Block_release(v11);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::__release_weak(v5);
}

CFTypeRef __copy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    CFRelease(v1);
}

void ___ZN5radio13HealthService5State15reportDataStatsEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  v1 = *(_QWORD *)(a1 + 32);
  NetworkStatsInterface::query(*(NetworkStatsInterface **)(v1 + 120), &v9);
  v2 = v9;
  v9 = 0uLL;
  v3 = *(std::__shared_weak_count **)(v1 + 160);
  *(_OWORD *)(v1 + 152) = v2;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
      if (*((_QWORD *)&v9 + 1))
        goto LABEL_6;
LABEL_9:
      radio::HealthService::State::reportDataStats_sync((radio::HealthService::State *)v1);
      return;
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (!*((_QWORD *)&v9 + 1))
    goto LABEL_9;
LABEL_6:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    goto LABEL_9;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  radio::HealthService::State::reportDataStats_sync((radio::HealthService::State *)v1);
}

void radio::HealthService::State::queryAndReportDataStats_sync(radio::HealthService::State *this)
{
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  NetworkStatsInterface::query(*((NetworkStatsInterface **)this + 15), &v9);
  v2 = v9;
  v9 = 0uLL;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  *(_OWORD *)((char *)this + 152) = v2;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
      if (*((_QWORD *)&v9 + 1))
        goto LABEL_6;
LABEL_9:
      radio::HealthService::State::reportDataStats_sync(this);
      return;
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (!*((_QWORD *)&v9 + 1))
    goto LABEL_9;
LABEL_6:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    goto LABEL_9;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  radio::HealthService::State::reportDataStats_sync(this);
}

void ___ZN5radio13HealthService5State5resetEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void ___ZN5radio13HealthService5State28startDataReportingTimer_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    return;
  v3 = a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  v15 = v4;
  if (!v4)
    return;
  if (!a1[5])
  {
    v12 = v4;
LABEL_17:
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    return;
  }
  NetworkStatsInterface::query(*(NetworkStatsInterface **)(v3 + 120), &v16);
  v5 = v16;
  v16 = 0uLL;
  v6 = *(std::__shared_weak_count **)(v3 + 160);
  *(_OWORD *)(v3 + 152) = v5;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  radio::HealthService::State::reportDataStats_sync((radio::HealthService::State *)v3);
  v12 = v15;
  if (v15)
    goto LABEL_17;
}

void sub_24B924750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN5radio13HealthService5State28startDataStallReporting_syncEv_block_invoke(_QWORD *a1, const void **a2)
{
  std::__shared_weak_count *v3;
  uint64_t **v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (uint64_t **)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v5 + 21, a2, (uint64_t)a2);
        radio::HealthService::State::reportDataStats_sync((radio::HealthService::State *)v5);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_24B924848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void radio::HealthService::State::reportDataStats_sync(radio::HealthService::State *this)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t **v3;
  std::__shared_weak_count *v4;
  _QWORD *v5;
  __int128 v6;
  _BOOL4 v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  unsigned int v13;
  _DWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  NSObject *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v41;
  _QWORD aBlock[6];
  std::__shared_weak_count *v43;
  void *v44;
  dispatch_object_t object;
  _QWORD **v46;
  std::__shared_weak_count *v47;
  unint64_t v48;
  int v49;
  __int128 v50;
  _BYTE __p[32];
  _QWORD **v52;
  std::__shared_weak_count *v53;
  uint8_t buf[4];
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  _BOOL4 v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 19))
  {
    v1 = (_QWORD *)*((_QWORD *)this + 19);
    v2 = (_QWORD **)operator new(0x18uLL);
    v2[1] = 0;
    v3 = v2 + 1;
    v2[2] = 0;
    *v2 = v2 + 1;
    v52 = v2;
    v4 = (std::__shared_weak_count *)operator new(0x20uLL);
    v4->__vftable = (std::__shared_weak_count_vtbl *)off_251CBF6C0;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v2;
    v53 = v4;
    v5 = (_QWORD *)*v1;
    v41 = v1 + 1;
    if ((_QWORD *)*v1 != v1 + 1)
    {
      while (1)
      {
        *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&__p[16] = v6;
        v50 = v6;
        *(_OWORD *)__p = v6;
        LODWORD(v50) = *((_DWORD *)v5 + 8);
        __p[0] = *((_BYTE *)v5 + 48);
        *((_QWORD *)&v50 + 1) = v5[5];
        if (*((char *)v5 + 79) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v5[7], v5[8]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)(v5 + 7);
          *(_QWORD *)&__p[24] = v5[9];
        }
        v48 = 0xAAAAAAAAAAAAAAAALL;
        v49 = -1431655766;
        radio::HealthCommandDriver::LinkStats::LinkStats((radio::HealthCommandDriver::LinkStats *)&v48);
        v48 = *((_QWORD *)&v50 + 1);
        if (__p[0])
          break;
LABEL_24:
        if ((__p[31] & 0x80000000) != 0)
        {
          operator delete(*(void **)&__p[8]);
          v17 = (_QWORD *)v5[1];
          if (v17)
          {
            do
            {
LABEL_28:
              v18 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
            goto LABEL_4;
          }
        }
        else
        {
          v17 = (_QWORD *)v5[1];
          if (v17)
            goto LABEL_28;
        }
        do
        {
          v18 = (_QWORD *)v5[2];
          v19 = *v18 == (_QWORD)v5;
          v5 = v18;
        }
        while (!v19);
LABEL_4:
        v5 = v18;
        if (v18 == v41)
          goto LABEL_33;
      }
      v7 = (uint64_t *)((char *)this + 176) != std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>((uint64_t)this + 168, (const void **)&__p[8]);
      v49 = v7;
      v8 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109888;
        v55 = v50;
        v56 = 1024;
        v57 = v48;
        v58 = 1024;
        v59 = HIDWORD(v48);
        v60 = 1024;
        v61 = v7;
        _os_log_impl(&dword_24B855000, v8, OS_LOG_TYPE_DEFAULT, "#I Interface %u, count %u/%u, state %d", buf, 0x1Au);
        v9 = v50;
        v10 = *v3;
        v11 = v2 + 1;
        v12 = v2 + 1;
        if (*v3)
        {
          while (1)
          {
LABEL_15:
            while (1)
            {
              v12 = (uint64_t **)v10;
              v13 = *((_DWORD *)v10 + 7);
              if (v13 <= v9)
                break;
              v10 = *v12;
              v11 = v12;
              if (!*v12)
                goto LABEL_19;
            }
            if (v13 >= v9)
              break;
            v10 = v12[1];
            if (!v10)
            {
              v11 = v12 + 1;
              goto LABEL_19;
            }
          }
          v14 = v12;
          goto LABEL_23;
        }
      }
      else
      {
        v9 = v50;
        v10 = *v3;
        v11 = v2 + 1;
        v12 = v2 + 1;
        if (*v3)
          goto LABEL_15;
      }
LABEL_19:
      v14 = operator new(0x30uLL);
      v14[7] = v9;
      radio::HealthCommandDriver::LinkStats::LinkStats((radio::HealthCommandDriver::LinkStats *)(v14 + 8));
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = v12;
      *v11 = (uint64_t *)v14;
      v15 = (_QWORD *)**v2;
      v16 = (uint64_t *)v14;
      if (v15)
      {
        *v2 = v15;
        v16 = *v11;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v2[1], v16);
      v2[2] = (_QWORD *)((char *)v2[2] + 1);
LABEL_23:
      *((_QWORD *)v14 + 4) = v48;
      v14[10] = v49;
      goto LABEL_24;
    }
LABEL_33:
    v20 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v20 || (v21 = *((_QWORD *)this + 9), (v22 = std::__shared_weak_count::lock(v20)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v23 = v22;
    p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v23);
    }
    v28 = *((_QWORD *)this + 13);
    v46 = v52;
    v47 = v53;
    if (v53)
    {
      v29 = (unint64_t *)&v53->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN5radio13HealthService5State20reportDataStats_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_11_5;
    aBlock[4] = this;
    aBlock[5] = v21;
    v43 = v23;
    do
      v31 = __ldxr(p_shared_weak_owners);
    while (__stxr(v31 + 1, p_shared_weak_owners));
    v32 = _Block_copy(aBlock);
    v33 = *((_QWORD *)this + 11);
    if (v33)
      dispatch_retain(v33);
    v44 = v32;
    object = v33;
    (*(void (**)(uint64_t, _QWORD ***, void **))(*(_QWORD *)v28 + 56))(v28, &v46, &v44);
    if (object)
      dispatch_release(object);
    if (v44)
      _Block_release(v44);
    v34 = v47;
    if (v47)
    {
      v35 = (unint64_t *)&v47->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v43)
      std::__shared_weak_count::__release_weak(v43);
    std::__shared_weak_count::__release_weak(v23);
    v37 = v53;
    if (v53)
    {
      v38 = (unint64_t *)&v53->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
}

void sub_24B924D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,char a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_24B924D7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

void sub_24B924D90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

void sub_24B924DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  uint64_t v36;

  operator delete(v35);
  if (a35 < 0)
    operator delete(__p);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v36 - 176);
  _Unwind_Resume(a1);
}

void ___ZN5radio13HealthService5State20reportDataStats_syncEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!*a2)
          v9 = 0;
        v10 = *(NSObject **)(v5 + 40);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            v13 = 138412290;
            v14 = v8;
            _os_log_error_impl(&dword_24B855000, v10, OS_LOG_TYPE_ERROR, "Failed to update data stats:\n%@", (uint8_t *)&v13, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v13) = 0;
          _os_log_debug_impl(&dword_24B855000, v10, OS_LOG_TYPE_DEBUG, "#D Updated data stats", (uint8_t *)&v13, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  dispatch_object_t object;
  _QWORD aBlock[6];
  std::__shared_weak_count *v20;
  void *v21;
  dispatch_object_t v22;
  unint64_t v23;
  unint64_t v24;

  v2 = a1[4];
  v3 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v3 || (v4 = *(_QWORD *)(v2 + 72), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v23 = 0xAAAAAAAAAAAAAAAALL;
  v24 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_12_3;
  aBlock[4] = v2;
  aBlock[5] = v4;
  v20 = v6;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  v12 = (void *)a1[5];
  if (v12)
    v12 = _Block_copy(v12);
  v13 = a1[6];
  v21 = v12;
  v22 = v13;
  if (v13)
    dispatch_retain(v13);
  v14 = _Block_copy(aBlock);
  v15 = *(NSObject **)(v2 + 88);
  if (v15)
    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
  v23 = (unint64_t)v14;
  v24 = (unint64_t)v15;
  v16 = *(_QWORD *)(v2 + 104);
  if (v14)
  {
    v17 = _Block_copy(v14);
    object = v15;
    if (!v15)
      goto LABEL_20;
    goto LABEL_19;
  }
  v17 = 0;
  object = v15;
  if (v15)
LABEL_19:
    dispatch_retain(v15);
LABEL_20:
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 64))(v16, &v17);
  if (object)
    dispatch_release(object);
  if (v17)
    _Block_release(v17);
  if (v15)
    dispatch_release(v15);
  if (v14)
    _Block_release(v14);
  if (v22)
    dispatch_release(v22);
  if (v21)
    _Block_release(v21);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  std::__shared_weak_count::__release_weak(v6);
}

void sub_24B92510C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a10);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v20 - 64);
  dispatch::callback<void({block_pointer})(void)>::~callback(v19);
  if (a18)
    std::__shared_weak_count::__release_weak(a18);
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  const void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 v17;
  uint64_t (*v18)(uint64_t);
  void *v19;
  void *aBlock;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_21:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v8 = *a2;
      v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      if (!*a2)
        v9 = 0;
      v10 = *(NSObject **)(v5 + 40);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v17) = 138412290;
          *(_QWORD *)((char *)&v17 + 4) = v8;
          _os_log_error_impl(&dword_24B855000, v10, OS_LOG_TYPE_ERROR, "Entering Low Power Failed: %@", (uint8_t *)&v17, 0xCu);
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v17) = 0;
        _os_log_impl(&dword_24B855000, v10, OS_LOG_TYPE_DEFAULT, "#I Entering Low Power complete", (uint8_t *)&v17, 2u);
      }
      v11 = (const void *)a1[7];
      if (v11)
        v12 = _Block_copy(v11);
      else
        v12 = 0;
      v13 = a1[8];
      *(_QWORD *)&v17 = MEMORY[0x24BDAC760];
      *((_QWORD *)&v17 + 1) = 1174405120;
      v18 = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
      v19 = &__block_descriptor_tmp_17_1;
      if (v12)
      {
        aBlock = _Block_copy(v12);
        dispatch_async(v13, &v17);
        v14 = aBlock;
        if (!aBlock)
        {
LABEL_19:
          if (v12)
            _Block_release(v12);
          goto LABEL_21;
        }
      }
      else
      {
        aBlock = 0;
        dispatch_async(v13, &v17);
        v14 = aBlock;
        if (!aBlock)
          goto LABEL_19;
      }
      _Block_release(v14);
      goto LABEL_19;
    }
  }
}

void sub_24B925330(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[8];
  a1[7] = v7;
  a1[8] = v8;
  if (v8)
    dispatch_retain(v8);
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void __copy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  dispatch_object_t object;
  _QWORD aBlock[6];
  std::__shared_weak_count *v20;
  void *v21;
  dispatch_object_t v22;
  unint64_t v23;
  unint64_t v24;

  v2 = a1[4];
  v3 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v3 || (v4 = *(_QWORD *)(v2 + 72), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v23 = 0xAAAAAAAAAAAAAAAALL;
  v24 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_14_1;
  aBlock[4] = v2;
  aBlock[5] = v4;
  v20 = v6;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  v12 = (void *)a1[5];
  if (v12)
    v12 = _Block_copy(v12);
  v13 = a1[6];
  v21 = v12;
  v22 = v13;
  if (v13)
    dispatch_retain(v13);
  v14 = _Block_copy(aBlock);
  v15 = *(NSObject **)(v2 + 88);
  if (v15)
    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
  v23 = (unint64_t)v14;
  v24 = (unint64_t)v15;
  v16 = *(_QWORD *)(v2 + 104);
  if (v14)
  {
    v17 = _Block_copy(v14);
    object = v15;
    if (!v15)
      goto LABEL_20;
    goto LABEL_19;
  }
  v17 = 0;
  object = v15;
  if (v15)
LABEL_19:
    dispatch_retain(v15);
LABEL_20:
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 72))(v16, &v17);
  if (object)
    dispatch_release(object);
  if (v17)
    _Block_release(v17);
  if (v15)
    dispatch_release(v15);
  if (v14)
    _Block_release(v14);
  if (v22)
    dispatch_release(v22);
  if (v21)
    _Block_release(v21);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  std::__shared_weak_count::__release_weak(v6);
}

void sub_24B925674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a10);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v20 - 64);
  dispatch::callback<void({block_pointer})(void)>::~callback(v19);
  if (a18)
    std::__shared_weak_count::__release_weak(a18);
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  const void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 v17;
  uint64_t (*v18)(uint64_t);
  void *v19;
  void *aBlock;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_21:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v8 = *a2;
      v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      if (!*a2)
        v9 = 0;
      v10 = *(NSObject **)(v5 + 40);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v17) = 138412290;
          *(_QWORD *)((char *)&v17 + 4) = v8;
          _os_log_error_impl(&dword_24B855000, v10, OS_LOG_TYPE_ERROR, "Exiting Low Power Failed: %@", (uint8_t *)&v17, 0xCu);
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v17) = 0;
        _os_log_impl(&dword_24B855000, v10, OS_LOG_TYPE_DEFAULT, "#I Exiting Low Power complete", (uint8_t *)&v17, 2u);
      }
      v11 = (const void *)a1[7];
      if (v11)
        v12 = _Block_copy(v11);
      else
        v12 = 0;
      v13 = a1[8];
      *(_QWORD *)&v17 = MEMORY[0x24BDAC760];
      *((_QWORD *)&v17 + 1) = 1174405120;
      v18 = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
      v19 = &__block_descriptor_tmp_17_1;
      if (v12)
      {
        aBlock = _Block_copy(v12);
        dispatch_async(v13, &v17);
        v14 = aBlock;
        if (!aBlock)
        {
LABEL_19:
          if (v12)
            _Block_release(v12);
          goto LABEL_21;
        }
      }
      else
      {
        aBlock = 0;
        dispatch_async(v13, &v17);
        v14 = aBlock;
        if (!aBlock)
          goto LABEL_19;
      }
      _Block_release(v14);
      goto LABEL_19;
    }
  }
}

void sub_24B925898(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "net.health.svc");
}

uint64_t ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBF5D8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CBF5D8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

void ctu::SharedLoggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CBF5D8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio13HealthService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_251CBF680;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5radio13HealthService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c56_ZTSNSt3__110shared_ptrIKN5radio13HealthService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c56_ZTSNSt3__110shared_ptrIKN5radio13HealthService5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_pointer<std::map<unsigned int,radio::HealthCommandDriver::LinkStats> *,std::shared_ptr<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>::__shared_ptr_default_delete<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>,std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>,std::allocator<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<std::map<unsigned int,radio::HealthCommandDriver::LinkStats> *,std::shared_ptr<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>::__shared_ptr_default_delete<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>,std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>,std::allocator<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>>::__on_zero_shared(uint64_t a1)
{
  _QWORD **v1;

  v1 = *(_QWORD ***)(a1 + 24);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(v1[1]);
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<std::map<unsigned int,radio::HealthCommandDriver::LinkStats> *,std::shared_ptr<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>::__shared_ptr_default_delete<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>,std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>,std::allocator<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B954F59)
    return a1 + 24;
  if (((v3 & 0x800000024B954F59 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B954F59))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B954F59 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void ServerLogging::~ServerLogging(ServerLogging *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 9));
    *((_QWORD *)this + 9) = 0;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_8:
      if ((*((char *)this + 47) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else
  {
LABEL_7:
    if ((*((char *)this + 71) & 0x80000000) == 0)
      goto LABEL_8;
  }
  operator delete(*((void **)this + 6));
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_9:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v6)
      return;
    goto LABEL_10;
  }
LABEL_14:
  operator delete(*((void **)this + 3));
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v6)
    return;
LABEL_10:
  std::__shared_weak_count::__release_weak(v6);
}

uint64_t ServerLogging::ServerLogging(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  os_unfair_lock_s *v7;
  _QWORD *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  size_t v19;
  void *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string __p;
  void *__dst[2];
  int64_t v31;
  os_unfair_lock_s *v32;
  std::__shared_weak_count *v33;
  std::string v34;
  std::string v35;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 24) = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 48) = v6;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v7 = (os_unfair_lock_s *)off_2579B84D8;
  if (!off_2579B84D8)
  {
    v8 = operator new(0x30uLL);
    MEMORY[0x24BD294B4](v8, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x24BDBD590]);
    v8[3] = 0;
    v8[4] = 0;
    *((_DWORD *)v8 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&v35, (uint64_t)v8);
    v9 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = 0uLL;
    v10 = (std::__shared_weak_count *)*(&off_2579B84D8 + 1);
    off_2579B84D8 = v9;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    size = (std::__shared_weak_count *)v35.__r_.__value_.__l.__size_;
    if (v35.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(v35.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v7 = (os_unfair_lock_s *)off_2579B84D8;
  }
  v32 = v7;
  v33 = (std::__shared_weak_count *)*(&off_2579B84D8 + 1);
  if (*(&off_2579B84D8 + 1))
  {
    v16 = (unint64_t *)(*(&off_2579B84D8 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v18 = (const void *)*MEMORY[0x24BDFC748];
  v19 = strlen((const char *)*MEMORY[0x24BDFC748]);
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v20 = (void *)v19;
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v21 = (void **)operator new(v22 + 1);
    __dst[1] = v20;
    v31 = v23 | 0x8000000000000000;
    __dst[0] = v21;
LABEL_30:
    memmove(v21, v18, (size_t)v20);
    *((_BYTE *)v20 + (_QWORD)v21) = 0;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_31;
  }
  HIBYTE(v31) = v19;
  v21 = __dst;
  if (v19)
    goto LABEL_30;
  LOBYTE(__dst[0]) = 0;
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
LABEL_26:
    __p = *(std::string *)a3;
    goto LABEL_32;
  }
LABEL_31:
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
LABEL_32:
  os_unfair_lock_lock(v7 + 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v34, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v34 = __p;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v35, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  else
    v35 = v34;
  if (v31 >= 0)
    v24 = (char *)__dst;
  else
    v24 = (char *)__dst[0];
  ctu::cf::plist_adapter::set<std::string>((int)v7, (uint64_t)&v35, v24);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v35.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_43:
      os_unfair_lock_unlock(v7 + 10);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_49;
    }
  }
  else if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(v34.__r_.__value_.__l.__data_);
  os_unfair_lock_unlock(v7 + 10);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_44:
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      goto LABEL_45;
LABEL_50:
    operator delete(__dst[0]);
    v25 = v33;
    if (!v33)
      return a1;
    goto LABEL_51;
  }
LABEL_49:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31) < 0)
    goto LABEL_50;
LABEL_45:
  v25 = v33;
  if (!v33)
    return a1;
LABEL_51:
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  return a1;
}

void sub_24B926160(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a25 < 0)
    operator delete(__p);
  __clang_call_terminate(a1);
}

void sub_24B9261FC()
{
  JUMPOUT(0x24B926210);
}

void ServerLogging::init(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  NSObject *v3;
  ctu::LogServer *v4;

  v2 = this + 4;
  os_unfair_lock_lock(this + 4);
  v3 = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)this);
  *(_QWORD *)&this[18]._os_unfair_lock_opaque = v3;
  ServerLogging::clearScratchFolders_sync((ServerLogging *)v3);
  v4 = *(ctu::LogServer **)&this[20]._os_unfair_lock_opaque;
  if (v4)
    ctu::LogServer::setEnabled(v4);
  os_unfair_lock_unlock(v2);
}

NSObject *ServerLogging::monitorSnapshotPath_sync(ServerLogging *this)
{
  const char *v2;
  const char *v3;
  timespec v4;
  const char *v5;
  unsigned __int8 v6;
  NSObject *v7;
  const char *v8;
  unsigned int v9;
  NSObject *global_queue;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v15[4];
  unsigned int v16;
  _QWORD handler[5];
  unsigned int v18;
  stat v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = (char *)this + 48;
  v2 = (const char *)*((_QWORD *)this + 6);
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v19.st_blksize = v4;
  *(timespec *)v19.st_qspare = v4;
  v19.st_birthtimespec = v4;
  *(timespec *)&v19.st_size = v4;
  v19.st_mtimespec = v4;
  v19.st_ctimespec = v4;
  *(timespec *)&v19.st_uid = v4;
  v19.st_atimespec = v4;
  *(timespec *)&v19.st_dev = v4;
  if (*((char *)this + 71) >= 0)
    v5 = (char *)this + 48;
  else
    v5 = v2;
  if (stat(v5, &v19))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_2579B8A80 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v7 = qword_2579B8A80;
      if (os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_DEFAULT))
      {
LABEL_8:
        v8 = v3;
        if (*((char *)this + 71) < 0)
          v8 = *(const char **)v3;
        v19.st_dev = 136315138;
        *(_QWORD *)&v19.st_mode = v8;
        _os_log_impl(&dword_24B855000, v7, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was not found, so recreating it\n", (uint8_t *)&v19, 0xCu);
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v7 = qword_2579B8A80;
      if (os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_DEFAULT))
        goto LABEL_8;
    }
    support::fs::createDir(v3, 0x1EDu, 1);
  }
  if (*((char *)this + 71) < 0)
    v3 = *(const char **)v3;
  v9 = open(v3, 0x8000);
  if ((v9 & 0x80000000) != 0)
    return 0;
  global_queue = dispatch_get_global_queue(17, 0);
  v11 = dispatch_source_create(MEMORY[0x24BDACA28], v9, 0x21uLL, global_queue);
  if (!v11)
  {
    close(v9);
    return 0;
  }
  v12 = v11;
  v13 = MEMORY[0x24BDAC760];
  handler[0] = MEMORY[0x24BDAC760];
  handler[1] = 0x40000000;
  handler[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_7_3;
  handler[4] = this;
  v18 = v9;
  dispatch_source_set_event_handler(v11, handler);
  v15[0] = v13;
  v15[1] = 0x40000000;
  v15[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8;
  v15[3] = &__block_descriptor_tmp_9_4;
  v16 = v9;
  dispatch_source_set_cancel_handler(v12, v15);
  dispatch_activate(v12);
  return v12;
}

void ServerLogging::clearScratchFolders_sync(ServerLogging *this)
{
  const void *v1;
  size_t v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *global_queue;
  capabilities::abs *v8;
  void *__dst[2];
  unint64_t v10;

  v1 = (const void *)*MEMORY[0x24BDFC710];
  v2 = strlen((const char *)*MEMORY[0x24BDFC710]);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v3 = (void *)v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = v3;
    v10 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v10) = v2;
  v4 = __dst;
  if (v2)
LABEL_8:
    memmove(v4, v1, (size_t)v3);
  *((_BYTE *)v3 + (_QWORD)v4) = 0;
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, &__block_literal_global_5);
  capabilities::abs::logScratchPath(v8);
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
}

void sub_24B926658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ctu::LogServer *ServerLogging::init_sync(ServerLogging *this)
{
  ctu::LogServer *result;

  result = (ctu::LogServer *)*((_QWORD *)this + 10);
  if (result)
    return (ctu::LogServer *)ctu::LogServer::setEnabled(result);
  return result;
}

void ServerLogging::registerLogServer(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  ctu::LogServer *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  os_unfair_lock_s *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = *(ctu::LogServer **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(std::__shared_weak_count **)(a1 + 88);
    *(_QWORD *)(a1 + 80) = v4;
    *(_QWORD *)(a1 + 88) = v3;
    if (!v9)
    {
LABEL_7:
      if (!v4)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    v7 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    v9 = *(std::__shared_weak_count **)(a1 + 88);
    *(_QWORD *)(a1 + 80) = v4;
    *(_QWORD *)(a1 + 88) = 0;
    if (!v9)
      goto LABEL_7;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v4 = *(ctu::LogServer **)(a1 + 80);
    if (!v4)
      goto LABEL_17;
    goto LABEL_16;
  }
  v4 = *(ctu::LogServer **)(a1 + 80);
  if (v4)
LABEL_16:
    ctu::LogServer::setEnabled(v4);
LABEL_17:
  os_unfair_lock_unlock(v7);
  if (v3)
  {
    v12 = (unint64_t *)&v3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ServerLogging::snapshot(os_unfair_lock_s *a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  os_unfair_lock_s *v4;

  v3 = *a2;
  if (*a2)
  {
    CFRetain(*a2);
    v4 = a1 + 4;
    os_unfair_lock_lock(v4);
    CFRetain(v3);
    CFRelease(v3);
    os_unfair_lock_unlock(v4);
    CFRelease(v3);
  }
  else
  {
    os_unfair_lock_lock(a1 + 4);
    os_unfair_lock_unlock(a1 + 4);
  }
}

void ___ZN13ServerLogging24clearScratchFolders_syncEv_block_invoke()
{
  const void *v0;
  size_t v1;
  void *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void *__dst[2];
  unint64_t v7;

  v0 = (const void *)*MEMORY[0x24BDFC710];
  v1 = strlen((const char *)*MEMORY[0x24BDFC710]);
  if (v1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v2 = (void *)v1;
  if (v1 >= 0x17)
  {
    v4 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1 | 7) != 0x17)
      v4 = v1 | 7;
    v5 = v4 + 1;
    v3 = (void **)operator new(v4 + 1);
    __dst[1] = v2;
    v7 = v5 | 0x8000000000000000;
    __dst[0] = v3;
    goto LABEL_8;
  }
  HIBYTE(v7) = v1;
  v3 = __dst;
  if (v1)
LABEL_8:
    memmove(v3, v0, (size_t)v2);
  *((_BYTE *)v2 + (_QWORD)v3) = 0;
  support::fs::removeDirContents((const char *)__dst, 0);
  if (SHIBYTE(v7) < 0)
    operator delete(__dst[0]);
}

void sub_24B92692C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ServerLogging::backupFolders_sync(capabilities::abs *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string::size_type *v7;
  timespec v8;
  std::string *p_p;
  DIR *v10;
  std::string *v11;
  DIR *v12;
  dirent *v13;
  int v14;
  size_t v15;
  unint64_t v16;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  char v30;
  int st_gid_high;
  capabilities::abs *v32;
  void *v33;
  char v34;
  _BYTE v35[8];
  _QWORD *v36;
  void *v37[2];
  unsigned __int8 v38;
  std::string __p;
  stat v40;

  *(_QWORD *)(a4 + 8) = 0;
  v7 = (std::string::size_type *)(a4 + 8);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 16) = 0;
  capabilities::abs::logScratchPath(a1);
  v8.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v8.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v40.st_blksize = v8;
  *(timespec *)v40.st_qspare = v8;
  v40.st_birthtimespec = v8;
  *(timespec *)&v40.st_size = v8;
  v40.st_mtimespec = v8;
  v40.st_ctimespec = v8;
  *(timespec *)&v40.st_uid = v8;
  v40.st_atimespec = v8;
  *(timespec *)&v40.st_dev = v8;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (stat((const char *)p_p, &v40))
  {
    LODWORD(v10) = 0;
  }
  else
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &__p;
    else
      v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v12 = opendir((const char *)v11);
    v10 = v12;
    if (v12)
    {
      v13 = readdir(v12);
      closedir(v10);
      LODWORD(v10) = v13 != 0;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!(_DWORD)v10)
      return;
  }
  else if (!(_DWORD)v10)
  {
    return;
  }
  v14 = *((char *)a2 + 23);
  if (v14 >= 0)
    v15 = *((unsigned __int8 *)a2 + 23);
  else
    v15 = (size_t)a2[1];
  v16 = v15 + 7;
  memset(&__p, 170, sizeof(__p));
  if (v15 + 7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v16 >= 0x17)
  {
    v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v18 = v16 | 7;
    v19 = v18 + 1;
    v17 = (std::string *)operator new(v18 + 1);
    __p.__r_.__value_.__l.__size_ = v15 + 7;
    __p.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    v17 = &__p;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v15 + 7;
    if (!v15)
      goto LABEL_29;
  }
  if (v14 >= 0)
    v20 = a2;
  else
    v20 = *a2;
  memmove(v17, v20, v15);
LABEL_29:
  strcpy((char *)v17 + v15, "log-bb-");
  Timestamp::Timestamp((Timestamp *)v35);
  Timestamp::asString((uint64_t)v35, 0, 9, v37);
  if ((v38 & 0x80u) == 0)
    v21 = v37;
  else
    v21 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v22 = v38;
  else
    v22 = (std::string::size_type)v37[1];
  v23 = std::string::append(&__p, (const std::string::value_type *)v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(_QWORD *)&v40.st_uid = *((_QWORD *)&v23->__r_.__value_.__l + 2);
  *(_OWORD *)&v40.st_dev = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = *(char *)(a3 + 23);
  if (v25 >= 0)
    v26 = (const std::string::value_type *)a3;
  else
    v26 = *(const std::string::value_type **)a3;
  if (v25 >= 0)
    v27 = *(unsigned __int8 *)(a3 + 23);
  else
    v27 = *(_QWORD *)(a3 + 8);
  v28 = std::string::append((std::string *)&v40, v26, v27);
  v29 = v28->__r_.__value_.__r.__words[0];
  *v7 = v28->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v7 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1]
                                                                          + 7);
  v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  st_gid_high = SHIBYTE(v40.st_gid);
  *(_QWORD *)a4 = v29;
  *(_BYTE *)(a4 + 23) = v30;
  if ((st_gid_high & 0x80000000) == 0)
  {
    if (((char)v38 & 0x80000000) == 0)
      goto LABEL_43;
LABEL_48:
    operator delete(v37[0]);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_49;
  }
  operator delete(*(void **)&v40.st_dev);
  if ((char)v38 < 0)
    goto LABEL_48;
LABEL_43:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_44;
LABEL_49:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_44:
  capabilities::abs::logScratchPath(v32);
  support::fs::moveDirUnique((const char *)&v40, a4, (uint64_t)&v33);
  if ((v34 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v40.st_gid) & 0x80000000) == 0)
      return;
LABEL_51:
    operator delete(*(void **)&v40.st_dev);
    return;
  }
  operator delete(v33);
  if (SHIBYTE(v40.st_gid) < 0)
    goto LABEL_51;
}

void sub_24B926C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  int v33;

  if (a32 < 0)
    operator delete(__p);
  if (v33 < 0)
    operator delete(v32);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  NSObject *v4;
  _QWORD *v5;
  uint64_t result;
  int v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_2579B8A80 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_24B855000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v4 = qword_2579B8A80;
    if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v4 = qword_2579B8A80;
    if (!os_log_type_enabled((os_log_t)qword_2579B8A80, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
  }
  v5 = (_QWORD *)(v2 + 48);
  if (*(char *)(v2 + 71) < 0)
    v5 = (_QWORD *)*v5;
  v7 = 136315138;
  v8 = v5;
  _os_log_impl(&dword_24B855000, v4, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was removed\n", (uint8_t *)&v7, 0xCu);
LABEL_7:
  dispatch_release(*(dispatch_object_t *)(v2 + 72));
  *(_QWORD *)(v2 + 72) = 0;
  close(*(_DWORD *)(a1 + 40));
  result = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)v2);
  *(_QWORD *)(v2 + 72) = result;
  return result;
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void GetABMLogServer(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD block[5];

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_24B855000);
  }
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_5;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v3 = *(_QWORD *)algn_2579B8AE8;
    *a1 = GetABMLogServer(void)::sLogServer;
    a1[1] = v3;
    if (!v3)
      return;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v3 = *(_QWORD *)algn_2579B8AE8;
    *a1 = GetABMLogServer(void)::sLogServer;
    a1[1] = v3;
    if (!v3)
      return;
  }
  v4 = (unint64_t *)(v3 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
}

uint64_t ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *size;
  unint64_t *v8;
  unint64_t v9;
  capabilities::abs *v10;
  uint64_t v11;
  size_t v12;
  std::string *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  NSObject *v26;
  ctu::LogServer *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  _QWORD v51[2];
  std::string v52;
  ServerLogging *v53;
  std::string __p;
  void *v55;
  uint64_t *v56;

  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_24B954210;
  strcpy(__p.__r_.__value_.__l.__data_, "AppleBasebandManagerServerLog");
  ctu::LogServer::create();
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = 0uLL;
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)v2 = v3;
  if (!v4)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (!v52.__r_.__value_.__l.__size_)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (!v52.__r_.__value_.__l.__size_)
      goto LABEL_9;
  }
  v8 = (unint64_t *)&size->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_9:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_10:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_11:
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  v10 = (capabilities::abs *)pthread_mutex_lock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  v11 = qword_2579B88D8;
  if (qword_2579B88D8)
    goto LABEL_46;
  capabilities::abs::logScratchPath(v10);
  v12 = strlen((const char *)kDaemonLogScratchDir);
  v13 = std::string::append(&v52, (const std::string::value_type *)kDaemonLogScratchDir, v12);
  __p = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  memset(&v52, 170, sizeof(v52));
  capabilities::abs::logSnapshotPath((capabilities::abs *)v13);
  v14 = operator new(0x60uLL);
  ServerLogging::ServerLogging((uint64_t)v14, (__int128 *)&__p, (__int128 *)&v52);
  v53 = (ServerLogging *)v14;
  v15 = (std::__shared_weak_count *)operator new(0x20uLL);
  v15->__shared_owners_ = 0;
  v16 = (unint64_t *)&v15->__shared_owners_;
  v15->__vftable = (std::__shared_weak_count_vtbl *)off_251CBF7B0;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  v53 = 0;
  v17 = (std::__shared_weak_count *)*((_QWORD *)v14 + 1);
  if (v17)
  {
    if (v17->__shared_owners_ != -1)
      goto LABEL_27;
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    *(_QWORD *)v14 = v14;
    *((_QWORD *)v14 + 1) = v15;
    std::__shared_weak_count::__release_weak(v17);
  }
  else
  {
    do
      v21 = __ldxr(v16);
    while (__stxr(v21 + 1, v16));
    v22 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    *(_QWORD *)v14 = v14;
    *((_QWORD *)v14 + 1) = v15;
  }
  do
    v24 = __ldaxr(v16);
  while (__stlxr(v24 - 1, v16));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_27:
  if (v53)
  {
    ServerLogging::~ServerLogging(v53);
    operator delete(v25);
  }
  os_unfair_lock_lock((os_unfair_lock_t)v14 + 4);
  v26 = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)v14);
  *((_QWORD *)v14 + 9) = v26;
  ServerLogging::clearScratchFolders_sync((ServerLogging *)v26);
  v27 = (ctu::LogServer *)*((_QWORD *)v14 + 10);
  if (v27)
    ctu::LogServer::setEnabled(v27);
  os_unfair_lock_unlock((os_unfair_lock_t)v14 + 4);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v52.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_33:
      v28 = (std::__shared_weak_count *)off_2579B88E0;
      qword_2579B88D8 = (uint64_t)v14;
      off_2579B88E0 = v15;
      if (!v28)
        goto LABEL_45;
LABEL_41:
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      goto LABEL_45;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v28 = (std::__shared_weak_count *)off_2579B88E0;
  qword_2579B88D8 = (uint64_t)v14;
  off_2579B88E0 = v15;
  if (v28)
    goto LABEL_41;
LABEL_45:
  v11 = qword_2579B88D8;
LABEL_46:
  v31 = (std::__shared_weak_count *)off_2579B88E0;
  if (off_2579B88E0)
  {
    v32 = (unint64_t *)((char *)off_2579B88E0 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  pthread_mutex_unlock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  v34 = *(_QWORD **)(a1 + 32);
  v35 = (std::__shared_weak_count *)v34[1];
  v51[0] = *v34;
  v51[1] = v35;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    ServerLogging::registerLogServer(v11, (uint64_t)v51);
    do
      v38 = __ldaxr(v36);
    while (__stlxr(v38 - 1, v36));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  else
  {
    ServerLogging::registerLogServer(v11, (uint64_t)v51);
  }
  if (v31)
  {
    v39 = (unint64_t *)&v31->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v41 = *(uint64_t **)(a1 + 32);
  v43 = *v41;
  v42 = (std::__shared_weak_count *)v41[1];
  v49 = v43;
  v50 = v42;
  if (v42)
  {
    v44 = (unint64_t *)&v42->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
  __p.__r_.__value_.__l.__size_ = 0x40000000;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v55 = &__block_descriptor_tmp_4;
  v56 = &v49;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v46 = v50;
    if (!v50)
      return;
  }
  else
  {
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
    v46 = v50;
    if (!v50)
      return;
  }
  v47 = (unint64_t *)&v46->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
}

void sub_24B9274D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, ServerLogging *a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::unique_ptr<ServerLogging>::~unique_ptr[abi:ne180100](&a19);
  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  pthread_mutex_unlock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  _Unwind_Resume(a1);
}

ServerLogging **std::unique_ptr<ServerLogging>::~unique_ptr[abi:ne180100](ServerLogging **a1)
{
  ServerLogging *v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    ServerLogging::~ServerLogging(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__on_zero_shared(uint64_t a1)
{
  ServerLogging *v1;
  void *v2;

  v1 = *(ServerLogging **)(a1 + 24);
  if (v1)
  {
    ServerLogging::~ServerLogging(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B955071)
    return a1 + 24;
  if (((v3 & 0x800000024B955071 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B955071))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B955071 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t __cxx_global_var_init_10()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_24B855000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy, &ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance, &dword_24B855000);
  }
  return result;
}

_QWORD *util::GuaranteedCallback::GuaranteedCallback(_QWORD *a1, const void **a2, NSObject **a3, uint64_t a4)
{
  void *v7;
  NSObject *v8;
  dispatch_source_t v9;
  NSObject *v10;

  *a1 = 0;
  a1[1] = 0;
  if (*a2)
  {
    v7 = _Block_copy(*a2);
    v8 = *a3;
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = 0;
  v8 = *a3;
  if (*a3)
LABEL_3:
    dispatch_retain(v8);
LABEL_4:
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = a4;
  a1[5] = 0;
  v9 = dispatch_source_create(MEMORY[0x24BDACA18], 1uLL, 0, 0);
  v10 = a1[5];
  a1[5] = v9;
  if (v10)
    dispatch_release(v10);
  a1[6] = 0;
  return a1;
}

{
  void *v7;
  NSObject *v8;
  dispatch_source_t v9;
  NSObject *v10;

  *a1 = 0;
  a1[1] = 0;
  if (*a2)
  {
    v7 = _Block_copy(*a2);
    v8 = *a3;
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = 0;
  v8 = *a3;
  if (*a3)
LABEL_3:
    dispatch_retain(v8);
LABEL_4:
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = a4;
  a1[5] = 0;
  v9 = dispatch_source_create(MEMORY[0x24BDACA18], 1uLL, 0, 0);
  v10 = a1[5];
  a1[5] = v9;
  if (v10)
    dispatch_release(v10);
  a1[6] = 0;
  return a1;
}

void util::GuaranteedCallback::~GuaranteedCallback(dispatch_source_t *this)
{
  NSObject *v2;
  NSObject *v3;
  dispatch_source_t v4;
  std::__shared_weak_count *v5;

  dispatch_source_cancel(this[5]);
  v2 = this[5];
  if (v2)
    dispatch_release(v2);
  v3 = this[3];
  if (v3)
    dispatch_release(v3);
  v4 = this[2];
  if (v4)
    _Block_release(v4);
  v5 = (std::__shared_weak_count *)this[1];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

{
  NSObject *v2;
  NSObject *v3;
  dispatch_source_t v4;
  std::__shared_weak_count *v5;

  dispatch_source_cancel(this[5]);
  v2 = this[5];
  if (v2)
    dispatch_release(v2);
  v3 = this[3];
  if (v3)
    dispatch_release(v3);
  v4 = this[2];
  if (v4)
    _Block_release(v4);
  v5 = (std::__shared_weak_count *)this[1];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void util::GuaranteedCallback::create(void **a1@<X0>, dispatch_object_t *a2@<X1>, uint64_t a3@<X2>, util::GuaranteedCallback **a4@<X8>)
{
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  void *v11;
  util::GuaranteedCallback *v12;
  void *v13;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;

  *a4 = (util::GuaranteedCallback *)0xAAAAAAAAAAAAAAAALL;
  a4[1] = (util::GuaranteedCallback *)0xAAAAAAAAAAAAAAAALL;
  v7 = *a1;
  v8 = (std::__shared_weak_count *)operator new(0x50uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_251CBF860;
  if (v7)
    v7 = _Block_copy(v7);
  v10 = *a2;
  if (*a2)
    dispatch_retain(*a2);
  if (v7)
  {
    v11 = _Block_copy(v7);
    v12 = (util::GuaranteedCallback *)&v8[1];
    if (!v10)
      goto LABEL_8;
    goto LABEL_7;
  }
  v11 = 0;
  v12 = (util::GuaranteedCallback *)&v8[1];
  if (v10)
LABEL_7:
    dispatch_retain(v10);
LABEL_8:
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  if (v11)
  {
    v13 = _Block_copy(v11);
    if (v10)
      goto LABEL_10;
LABEL_15:
    v8[1].__shared_weak_owners_ = (uint64_t)v13;
    v8[2].__vftable = 0;
    v8[2].__shared_owners_ = a3;
    v8[2].__shared_weak_owners_ = (uint64_t)dispatch_source_create(MEMORY[0x24BDACA18], 1uLL, 0, 0);
    v8[3].__vftable = 0;
    if (!v11)
      goto LABEL_17;
    goto LABEL_16;
  }
  v13 = 0;
  if (!v10)
    goto LABEL_15;
LABEL_10:
  dispatch_retain(v10);
  v8[1].__shared_weak_owners_ = (uint64_t)v13;
  v8[2].__vftable = (std::__shared_weak_count_vtbl *)v10;
  v8[2].__shared_owners_ = a3;
  v8[2].__shared_weak_owners_ = (uint64_t)dispatch_source_create(MEMORY[0x24BDACA18], 1uLL, 0, 0);
  v8[3].__vftable = 0;
  dispatch_release(v10);
  if (v11)
LABEL_16:
    _Block_release(v11);
LABEL_17:
  if (v10)
    dispatch_release(v10);
  if (v7)
    _Block_release(v7);
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1];
  v8[1].__shared_owners_ = (uint64_t)v8;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *a4 = v12;
  a4[1] = (util::GuaranteedCallback *)v8;
  util::GuaranteedCallback::start(v12);
}

void sub_24B927AB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void util::GuaranteedCallback::start(util::GuaranteedCallback *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  unint64_t v11;
  NSObject *v12;
  dispatch_time_t v13;
  _QWORD handler[6];
  std::__shared_weak_count *v15;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v2 || (v3 = *(_QWORD *)this, (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = *((_QWORD *)this + 5);
  handler[0] = MEMORY[0x24BDAC760];
  handler[1] = 1174405120;
  handler[2] = ___ZN4util18GuaranteedCallback5startEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_20;
  handler[4] = this;
  handler[5] = v3;
  v15 = v5;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  dispatch_source_set_event_handler(v10, handler);
  v12 = *((_QWORD *)this + 5);
  v13 = dispatch_time(0, 1000000 * *((_QWORD *)this + 4));
  dispatch_source_set_timer(v12, v13, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  dispatch_activate(*((dispatch_object_t *)this + 5));
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  std::__shared_weak_count::__release_weak(v5);
}

void ___ZN4util18GuaranteedCallback5startEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  _QWORD *v12;
  std::string::size_type v13;
  std::string *p_dst;
  std::__shared_weak_count *v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __dst;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *__p[2];
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  std::__shared_weak_count *v43;
  _QWORD block[5];
  std::string v45;
  int v46;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    return;
  v3 = a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  v43 = v4;
  if (!v4)
    return;
  if (!a1[5])
  {
    v15 = v4;
LABEL_27:
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    return;
  }
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v31 = 0xAAAAAAAAAAAAAAAALL;
  v41 = v5;
  v40 = v5;
  v39 = v5;
  v38 = v5;
  v37 = v5;
  v36 = v5;
  v35 = v5;
  v34 = v5;
  v33 = v5;
  v30 = v5;
  *(_OWORD *)__p = v5;
  v28 = v5;
  v27 = v5;
  v26 = v5;
  v25 = v5;
  v6 = MEMORY[0x24BEDB870];
  v7 = MEMORY[0x24BEDB870] + 64;
  v32 = MEMORY[0x24BEDB870] + 64;
  v8 = (uint64_t *)MEMORY[0x24BEDB800];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v24 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v24 + *(_QWORD *)(v24 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v24 + *(_QWORD *)(v24 - 24));
  std::ios_base::init(v10, &v25);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v24 = v6 + 24;
  v32 = v7;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v25 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v30 = 0u;
  LODWORD(v31) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"gave up after ", 14);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" milliseconds", 13);
  if ((v31 & 0x10) != 0)
  {
    v16 = *((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1) < (unint64_t)v28)
    {
      *((_QWORD *)&v30 + 1) = v28;
      v16 = v28;
    }
    v17 = (const void *)*((_QWORD *)&v27 + 1);
    v13 = v16 - *((_QWORD *)&v27 + 1);
    if ((unint64_t)(v16 - *((_QWORD *)&v27 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_33;
  }
  else
  {
    if ((v31 & 8) == 0)
    {
      v13 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_18;
    }
    v17 = (const void *)v26;
    v13 = v27 - v26;
    if ((_QWORD)v27 - (_QWORD)v26 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_33:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 >= 0x17)
  {
    v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v18 = v13 | 7;
    v19 = v18 + 1;
    p_dst = (std::string *)operator new(v18 + 1);
    __dst.__r_.__value_.__l.__size_ = v13;
    __dst.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_17;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v13;
  p_dst = &__dst;
  if (v13)
LABEL_17:
    memmove(p_dst, v17, v13);
LABEL_18:
  p_dst->__r_.__value_.__s.__data_[v13] = 0;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZN4util18GuaranteedCallback3runEiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_3_3;
  block[4] = v3;
  v46 = -534716413;
  v20 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v45, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v45 = __dst;
  if (*(_QWORD *)(v3 + 48) == -1)
  {
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_23;
LABEL_35:
    operator delete(v45.__r_.__value_.__l.__data_);
    if ((v20 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_36;
  }
  dispatch_once((dispatch_once_t *)(v3 + 48), block);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_35;
LABEL_23:
  if ((v20 & 0x80000000) == 0)
    goto LABEL_24;
LABEL_36:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
  v24 = *v8;
  *(uint64_t *)((char *)&v24 + *(_QWORD *)(v24 - 24)) = v8[3];
  *(_QWORD *)&v25 = v11 + 16;
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24BD29B5C](&v32);
  v15 = v43;
  if (v43)
    goto LABEL_27;
}

